     1                                  ; ****************************************************************************
     2                                  ; RETRODOS.SYS (MSDOS 5.0 Kernel) - RETRO DOS v4.0 by ERDOGAN TAN - 01/10/2022
     3                                  ; ----------------------------------------------------------------------------
     4                                  ; Last Update: 15/12/2023 (Previous: 29/09/2023)
     5                                  ; ----------------------------------------------------------------------------
     6                                  ; Beginning: 25/05/2018 (Retro DOS 3.0), 26/12/2018 (Retro DOS 4.0)
     7                                  ; ----------------------------------------------------------------------------
     8                                  ; Assembler: NASM version 2.15
     9                                  ; ----------------------------------------------------------------------------
    10                                  ;	   ((nasm retrodos.s -l retrodos.lst -o MSDOS.SYS -Z error.txt)) 
    11                                  ; ----------------------------------------------------------------------------
    12                                  
    13                                  ; 20/12/2022 - Modifications for initiating IO.SYS by Retro DOS v2 boot sector
    14                                  ;
    15                                  ;	       (Retro DOS v2 BS loads IO.SYS & MSDOS.SYS as single kernel file
    16                                  ;	       with name of 'MSDOS.SYS'. Retro DOS init code -for IO.SYS init-
    17                                  ;	       is different than original MSDOS IO.SYS LOADER and INIT code.)
    18                                  ;
    19                                  ;	       ((RETRODOS.SYS/MSDOS.SYS can be loaded by a fake IO.SYS for
    20                                  ;		using it with MSDOS 5.0 boot sector & as bootable MSDOS disk.
    21                                  ;		For that, fake IO.SYS must load 'MSDOS.SYS' at 1000h:0000h.))		-	
    22                                  ; 		
    23                                  ; 18/12/2022 - Modified MSDOS 5.0 IO.SYS (for using with MSDOS 5 boot sector)
    24                                  ; 09/12/2022 - Multisection binary file format (BIOSDATA & BIOSCODE sections)
    25                                  ; 01/10/2022 - Erdogan Tan (Istanbul)
    26                                  
    27                                  ;Note: This code is a part of Retro DOS 4.0 kernel source code
    28                                  ;     (as included binary, 'IOSYS5.BIN') 
    29                                  ;     Equivalent of MSDOS 5.0 IO.SYS, BIOSCODE and BIOSDATA and SYSINIT
    30                                  ;						        (except MSLOAD code)
    31                                        
    32                                  ;------- Retro DOS v2 (v3) boot sector loads RETRODOS.SYS (MSDOS.SYS)
    33                                  ;	 at 1000h:0000h and loader (initialization) part of RETRODOS kernel
    34                                  ;	 moves IO.SYS (DOSBIOSCODE & DOSBIOSDATA, 'IOSYS5.BIN') to 70h:0000h.
    35                                  ;	 Then SYSINIT code to the next segment (46Dh for original MSDOS 5.0)..
    36                                  ;	 SYSINIT code relocates itself and DOSBIOSCODE and MSDOS.SYS
    37                                  ;	 (MSDOS5.BIN) according to request/setting in 'config.sys' file.
    38                                  
    39                                  ; ----------------------------------------------------------------------------
    40                                  
    41                                  ;=============================================================================
    42                                  ; Modified from 'retrodos3.s', Retro DOS v3.0 Kernel (IBMBIO.COM) Source code
    43                                  ; by Erdogan Tan, 10/09/2018
    44                                  ;=============================================================================
    45                                  
    46                                  ; MSBIO (IO.SYS 6.0) source files:
    47                                  ; 	MSBIO1.ASM,MSCHAR.ASM,MSDISK.ASM,MSDIOCTL.ASM,MSINT13.ASM,MSBIO2.ASM
    48                                  ;	MSINIT.ASM,SYSINIT1.ASM,SYSCONF.ASM,SYSPRE.ASM,SYSINIT2.ASM 
    49                                  ;	SYSIMES.ASM,POWER.ASM,PTIME.ASM,MSEND.ASM
    50                                  
    51                                  ;=============================================================================
    52                                  ; MSBIO
    53                                  ;=============================================================================
    54                                  ;msbio1+mschar+msdisk+msdioctl+msint13+msbio2+
    55                                  ;msinit+sysinit1+sysconf+syspre+sysinit2+sysimes+power+ptime+
    56                                  ;msend,msbio,msbio;
    57                                  
    58                                  ;=============================================================================
    59                                  ; RETRO DOS kernel versions by Erdogan Tan (2018-2022)
    60                                  ;=============================================================================
    61                                  
    62                                  ;Retro DOS v1.0 == MSDOS 1.25 -- derived from MSDOS 1.25 source code 
    63                                  ;Retro DOS v2.0 == MSDOS 2.11 -- derived from MSDOS 2.11 source code 
    64                                  ;Retro DOS v3.0 == MSDOS 3.30 -- derived from MSDOS 3.3 & 6.0 source code 
    65                                  ;Retro DOS v4.0 == MSDOS 6.21 -- derived from MSDOS 6.0 source code (2019) (*)
    66                                  ;Retro DOS v4.0 == MSDOS 5.0+ -- derived from MSDOS 6.0 source code (2022) (**)
    67                                  ;Retro DOS v4.1 == MSDOS 5.0+ -- will be optimized -shortened- version (2023)
    68                                  ;Retro DOS v4.2 == MSDOS 6.21 -- will be MSDOS 6.21 (6.22) compatible (2023)(?)
    69                                  ;Retro DOS v5.0 == PCDOS 7.10 -- will be derived from IBM PCDOS 7.1 source code
    70                                  
    71                                  ;(*) unfinished, draft, canceled (failed in 2019)
    72                                  ;(**) MSDOS 5.0 IO.SYS & SYSINIT, MSDOS 5.0-6.22 mixed MSDOS.SYS (successed)
    73                                  ;(?) MSDOS 6.21 IO.SYS & SYSINIT, MSDOS 6.21 MSDOS.SYS except doublespace
    74                                  
    75                                  ;Disassembly: (reverse engineering via IDA Pro Free)
    76                                  
    77                                  ;Retro DOS v1.0 <-- IBM PCDOS 1.1
    78                                  ;Retro DOS v2.0 <-- IBM PCDOS 2.1 & MSDOS 2.11
    79                                  ;Retro DOS v3.0 <-- IBM PCDOS 3.3 & MSDOS 3.3
    80                                  ;Retro DOS v4.0 <-- MSDOS 6.21 ; 2018-2019 (*)
    81                                  ;Retro DOS v4.0 <-- MSDOS 5.0 ; 2022 (**)
    82                                  ;Retro DOS v5.0 <-- IBM PCDOS 7.1 
    83                                  
    84                                  ;-----------------------------------------------------------------------------
    85                                  ; MSDOS 6.21 IO.SYS (13/02/1994)
    86                                  ;-----------------------------------------------------------------------------
    87                                  
    88                                  SECTOR_SIZE     equ     0200h		; size of a sector
    89                                  PAUSE_KEY       equ     7200h		; scancode + charcode of PAUSE key
    90                                  KEYBUF_NEXT     equ     041Ah		; next character in keyboard buffer
    91                                  KEYBUF_FREE     equ     041Ch		; next free slot in keyboard buffer
    92                                  KEYBUF          equ     041Eh		; keyboard buffer data
    93                                  LOGICAL_DRIVE   equ     0504h		; linear address of logical drive byte
    94                                  ;DOS_SEGMENT	equ     00BFh ; v1.1	; segment in which DOS will run
    95                                  DOS_SEGMENT	equ     00C4h		; Retro DOS v1.0 - 13/02/2018
    96                                  BIO_SEGMENT     equ     0060h		; segment in which BIO is running
    97                                  
    98                                  ; 24/02/2018 (Retro DOS 2.0 - MSDOS 3.3 "DISKPRM.INC" - 24/07/1987)
    99                                  ; The following structure defines the disk parameter table
   100                                  ; pointed to by Interrupt vector 1EH (location 0:78H)
   101                                  
   102                                  struc	DISK_PARMS
   103 00000000 ??                      .DISK_SPECIFY_1:  resb	1
   104 00000001 ??                      .DISK_SPECIFY_2:  resb	1
   105 00000002 ??                      .DISK_MOTOR_WAIT: resb  1	; Wait till motor off
   106 00000003 ??                      .DISK_SECTOR_SIZ: resb 	1	; Bytes/Sector (2 = 512)
   107 00000004 ??                      .DISK_EOT:	  resb  1	; Sectors per track (MAX)
   108 00000005 ??                      .DISK_RW_GAP:	  resb  1	; Read Write Gap
   109 00000006 ??                      .DISK_DTL:	  resb	1
   110 00000007 ??                      .DISK_FORMT_GAP:  resb  1	; Format Gap Length
   111 00000008 ??                      .DISK_FILL:	  resb  1	; Format Fill Byte
   112 00000009 ??                      .DISK_HEAD_STTL:  resb  1	; Head Settle Time (MSec)
   113 0000000A ??                      .DISK_MOTOR_STRT: resb  1	; Motor start delay
   114                                  .size:
   115                                  endstruc
   116                                  
   117                                  ; 09/03/2019 - Retro DOS v4.0
   118                                  ; -------------------------------------------------------------------------
   119                                  ; MSEQU.INC, MSDOS 6.0, 1991
   120                                  
   121                                  ftoobig 	equ	80h
   122                                  fbig		equ	40h
   123                                  romstatus	equ	1
   124                                  romread 	equ	2
   125                                  romwrite	equ	3
   126                                  romverify	equ	4
   127                                  romformat	equ	5
   128                                  
   129                                  ; 26/12/2018 (Retro DOS 4.0 - MSDOS 6.0 "MSBDS.INC" - 1991)
   130                                  ; -------------------------------------------------------------------------
   131                                  ; 24/02/2018 (Retro DOS 2.0 - MSDOS 3.3 "MSBDS.INC" - 24/07/1987)
   132                                  ;
   133                                  ;  BDS is the Bios Data Structure.
   134                                  ;
   135                                  ;  There is one BDS for each logical drive in the system. All the BDS's
   136                                  ;  are linked together in a list with the pointer to the first BDS being
   137                                  ;  found in START_BDS. The BDS hold various values important to the disk
   138                                  ;  drive. For example there is a field for last time accesses. As actions
   139                                  ;  take place in the system the BDS are update to reflect the actions.
   140                                  ;  For example is there is a read to a disk the last access field for the
   141                                  ;  BDS for that drive is update to the current time.
   142                                  ;
   143                                  ; Values for various flags in BDS.flags.
   144                                  ;
   145                                  
   146                                  fnon_removable	    equ     01h 	;For non-removable media
   147                                  fchangeline	    equ     02h 	;If changeline supported on drive
   148                                  return_fake_bpb     equ     04h 	; When set, don't do a build BPB
   149                                  					; just return the fake one
   150                                  good_tracklayout    equ     08h 	; The track layout has no funny sectors
   151                                  fi_am_mult	    equ     10h 	;If more than one logical for this physical
   152                                  fi_own_physical     equ     20h 	;Signify logical owner of this physical
   153                                  fchanged	    equ     40h 	;Indicates media changed
   154                                  set_dasd_true	    equ     80h 	; Set DASD before next format
   155                                  fchanged_by_format  equ    100h		;Media changed by format
   156                                  ; MSDOS 6.0
   157                                  unformatted_media   equ    200h 	;Fixed disk only
   158                                  
   159                                  ;
   160                                  ; Various form factors to describe media
   161                                  ;
   162                                  
   163                                  ff48tpi 	    equ     0
   164                                  ff96tpi 	    equ     1
   165                                  ffSmall 	    equ     2
   166                                  ffHardFile	    equ     5
   167                                  ffOther 	    equ     7
   168                                  ; MSDOS 6.0 ("MSBDS.INC", 1991)
   169                                  ff288		    equ     9	; 2.88 MB drive
   170                                  ; Retro DOS v4.0 feature only !
   171                                  ;ff144		    equ	   10	; 1.44 MB drive			
   172                                  
   173                                  ; 26/05/2019
   174                                  
   175                                  struc	BDS	; BDS_Type
   176 00000000 ????????                .link:		resd 1		; Link to next BDS
   177 00000004 ??                      .drivenum:	resb 1		; Physical drive number
   178 00000005 ??                      .drivelet:	resb 1		; DOS drive number
   179                                  
   180                                  	;We want to embed a BPB declaration here, but we can't initialize
   181                                  	;it properly if we do, so we duplicate the byte/word/dword architecture
   182                                  	;of the BPB declaration.
   183                                  .BPB:	
   184 00000006 ????                    .bytespersec:	resw 1		; bytes per sectors ; def = 512
   185 00000008 ??                      .secperclus:	resb 1		; sectors per cluster
   186 00000009 ????                    .resectors:	resw 1		; reserved sectors
   187 0000000B ??                      .fats:		resb 1		; number of fats
   188 0000000C ????                    .direntries:	resw 1		; number of root directory entries
   189 0000000E ????                    .totalsecs16:	resw 1		; total sectors on medium
   190 00000010 ??                      .media:		resb 1		; media descriptor byte ; def = 0F8h
   191 00000011 ????                    .fatsecs: 	resw 1		; number of fat sectors
   192 00000013 ????                    .secpertrack:	resw 1		; sectors per track
   193 00000015 ????                    .heads:		resw 1		; number of heads
   194                                  ;.hiddensecs:	resw 1		; hidden sectors
   195                                  ; MSDOS 6.0
   196 00000017 ????????                .hiddensecs:	resd 1		; hidden sectors	
   197 0000001B ????????                .totalsecs32:	resd 1		; big total sectors		
   198                                  ;
   199 0000001F ??                      .fatsiz:	resb 1		; flags...
   200 00000020 ????                    .opcnt:		resw 1		; open ref. count
   201                                  ;.volid:	resb 12		; volume ID of medium
   202 00000022 ??                      .formfactor:	resb 1		; form factor index
   203 00000023 ????                    .flags:		resw 1		; various flags ; def: 0020h
   204 00000025 ????                    .cylinders:	resw 1		; number of cylinders
   205                                  ;
   206                                  .R_BPB:  			; recommended BPB
   207 00000027 ????                    .rbytespersec:	resw 1		
   208 00000029 ??                      .rsecperclus:	resb 1
   209 0000002A ????                    .rresectors: 	resw 1
   210 0000002C ??                      .rfats:		resb 1
   211 0000002D ????                    .rdirentries:	resw 1
   212 0000002F ????                    .rtotalsecs16:	resw 1
   213 00000031 ??                      .rmedia: 	resb 1
   214 00000032 ????                    .rfatsecs:	resw 1
   215 00000034 ????                    .rsecpertrack: 	resw 1
   216 00000036 ????                    .rheads:	resw 1
   217 00000038 ????????                .rhidsecs: 	resd 1
   218 0000003C ????????                .rtotalsecs32: 	resd 1
   219 00000040 ????????????            .rreserved:	resb 6		; not used (reserved)
   220                                  ;
   221 00000046 ??                      .track:		resb 1		; last track accessed on drive
   222                                  .bdsm_ismini:
   223 00000047 ????                    .tim_lo:	resw 1		; time of last access. keep
   224                                  .bdsm_hidden_trks:
   225 00000049 ????                    .tim_hi:	resw 1		; these contiguous.
   226 0000004B <res Ch>                .volid:		resb 12		; volume id of medium
   227                                  	       ;db "NO NAME    ",0
   228 00000057 ????????                .vol_serial:	resd 1	; current volume serial number from boot record
   229 0000005B <res 9h>                .filesys_id:	resb 9	; current file system id from boot record
   230                                  	       ;db "FAT12   ",0
   231                                  .size:			
   232                                  endstruc
   233                                  
   234                                  ;The assembler will generate bad data for "size bds_volid",
   235                                  ;so we'll define an equate here.
   236                                  
   237                                  VOLID_SIZ	equ	12
   238                                  
   239                                  ;bdsm_ismini	equ	bds_tim_lo	; overlapping bds_tim_lo
   240                                  ;bdsm_hidden_trks equ	bds_tim_hi	; overlapping bds_tim_hi
   241                                  
   242                                  max_mini_dsk_num equ 23	; max # of mini disk ibmbio can support
   243                                  
   244                                  ; 29/12/2018
   245                                  ; Retro DOS v4.0
   246                                  ;
   247                                  ; MSDOS 6.0 - BOOTFORM.INC
   248                                  
   249                                  BOOT_SIZE	    EQU	 512
   250                                  EXT_BOOT_SIGNATURE  EQU	 29h ; 41 ; Extended boot signature
   251                                  
   252                                  struc EBPB ; EXT_BPB_INFO
   253 00000000 ????                    .BYTESPERSECTOR:    resw 1
   254 00000002 ??                      .SECTORSPERCLUSTER: resb 1
   255 00000003 ????                    .RESERVEDSECTORS:   resw 1
   256 00000005 ??                      .NUMBEROFFATS:	    resb 1
   257 00000006 ????                    .ROOTENTRIES:	    resw 1
   258 00000008 ????                    .TOTALSECTORS:	    resw 1
   259 0000000A ??                      .MEDIADESCRIPTOR:   resb 1
   260 0000000B ????                    .SECTORSPERFAT:	    resw 1
   261 0000000D ????                    .SECTORSPERTRACK:   resw 1
   262 0000000F ????                    .HEADS:		    resw 1
   263 00000011 ????????                .HIDDENSECTORS:	    resd 1
   264 00000015 ????????                .BIGTOTALSECTORS:   resd 1
   265                                  .size:
   266                                  endstruc
   267                                  
   268                                  ;EXT_PHYDRV, EXT_CURHD included in the header for OS2.
   269                                  struc EXT_BOOT ; EXT_IBMBOOT_HEADER
   270 00000000 ??????                  .JUMP:		resb 3
   271 00000003 ????????????????        .OEM:		resb 8
   272 0000000B <res 19h>               .BPB:		resb EBPB.size
   273 00000024 ??                      .PHYDRV:	resb 1
   274 00000025 ??                      .CURHD:		resb 1
   275 00000026 ??                      .SIG:		resb 1
   276 00000027 ????????                .SERIAL:	resd 1
   277 0000002B <res Bh>                .VOL_LABEL:	resb 11
   278 00000036 ????????????????        .SYSTEM_ID:	resb 8
   279                                  .size:
   280                                  endstruc
   281                                  
   282                                  %define BOOT_SIGNATURE	[BOOT_SIZE-2]
   283                                  
   284                                  ; 23/03/2018
   285                                  
   286                                  ;STATIC REQUEST HEADER (DEVSYM.INC, MSDOS 6.0, 1991)
   287                                  STRUC SRHEAD
   288 00000000 ??                      .REQLEN:	resb 1		;LENGTH IN BYTES OF REQUEST BLOCK
   289 00000001 ??                      .REQUNIT:	resb 1		;DEVICE UNIT NUMBER
   290 00000002 ??                      .REQFUNC:	resb 1		;TYPE OF REQUEST
   291 00000003 ????                    .REQSTAT:	resw 1		;STATUS WORD
   292 00000005 ????????????????        	       	resb 8		;RESERVED FOR QUEUE LINKS
   293                                  .size:
   294                                  endstruc
   295                                  
   296                                  ; GENERIC IOCTL REQUEST STRUCTURE (DEVSYM.INC, MSDOS 6.0, 1991)
   297                                  ;	SEE THE DOS 4.0 DEVICE DRIVER SPEC FOR FURTHER ELABORATION.
   298                                  ;
   299                                  struc IOCTL_REQ
   300                                  	       ;DB    (SIZE SRHEAD) DUP(?)
   301 00000000 <res Dh>                		resb SRHEAD.size	
   302                                  			    	; GENERIC IOCTL ADDITION.
   303 0000000D ??                      .MAJORFUNCTION:	resb 1		;FUNCTION CODE
   304 0000000E ??                      .MINORFUNCTION:	resb 1		;FUNCTION CATEGORY
   305 0000000F ????                    .REG_SI:	resw 1
   306 00000011 ????                    .REG_DI:	resw 1
   307 00000013 ????????                .GENERICIOCTL_PACKET: resd 1	; POINTER TO DATA BUFFER
   308                                  endstruc
   309                                  
   310                                  ; GENERIC IOCTL CATEGORY CODES  (IOCTL.INC, MSDOS 6.0, 1991)
   311                                  IOC_OTHER	EQU	0	; Other device control J.K. 4/29/86
   312                                  IOC_SE		EQU	1	; SERIAL DEVICE CONTROL
   313                                  IOC_TC		EQU	2	; TERMINAL CONTROL
   314                                  IOC_SC		EQU	3	; SCREEN CONTROL
   315                                  IOC_KC		EQU	4	; KEYBOARD CONTROL
   316                                  IOC_PC		EQU	5	; PRINTER CONTROL
   317                                  IOC_DC		EQU	8	; DISK CONTROL (SAME AS RAWIO)
   318                                  
   319                                  ; DEFINITIONS FOR IOCTL_REQ.MINORFUNCTION
   320                                  GEN_IOCTL_WRT_TRK   EQU   40H
   321                                  GEN_IOCTL_RD_TRK    EQU   60H
   322                                  GEN_IOCTL_FN_TST    EQU   20H	; USED TO DIFF. BET READS AND WRTS
   323                                  
   324                                  ;struc A_RETRYCOUNT  ; (IOCTL.INC, MSDOS 6.0, 1991)
   325                                  ;.RC_COUNT:	resw 	1
   326                                  ;endstruc
   327                                  
   328                                  ; 29/05/2019 - Retro DOS v4.0 (DEVSYM.INC, MSDOS 6.0, 1991)
   329                                  
   330                                  ;	THE DEVICE TABLE LIST HAS THE FORM:
   331                                  
   332                                  ;struc SYSDEV
   333                                  ; .NEXT:  resd 1	;POINTER TO NEXT DEVICE HEADER
   334                                  ; .ATT:	  resw 1	;ATTRIBUTES OF THE DEVICE
   335                                  ; .STRAT: resw 1	;STRATEGY ENTRY POINT
   336                                  ; .INT:	  resw 1	;INTERRUPT ENTRY POINT
   337                                  ; .NAME:  resb 8	;NAME OF DEVICE (ONLY FIRST BYTE USED FOR BLOCK)
   338                                  ; .size:
   339                                  ;endstruc
   340                                  
   341                                  ; 27/03/2018 - DEVSYM.INC - MSDOS 3.3 - 24/07/1987
   342                                  
   343                                  ;
   344                                  ; ATTRIBUTE BIT MASKS
   345                                  ;
   346                                  ; CHARACTER DEVICES:
   347                                  ;
   348                                  ; BIT 15 -> MUST BE 1
   349                                  ;     14 -> 1 IF THE DEVICE UNDERSTANDS IOCTL CONTROL STRINGS
   350                                  ;     13 -> 1 IF THE DEVICE SUPPORTS OUTPUT-UNTIL-BUSY
   351                                  ;     12 -> UNUSED
   352                                  ;     11 -> 1 IF THE DEVICE UNDERSTANDS OPEN/CLOSE
   353                                  ;     10 -> MUST BE 0
   354                                  ;      9 -> MUST BE 0
   355                                  ;      8 -> UNUSED
   356                                  ;      7 -> UNUSED
   357                                  ;      6 -> UNUSED
   358                                  ;      5 -> UNUSED
   359                                  ;      4 -> 1 IF DEVICE IS RECIPIENT OF INT 29H
   360                                  ;      3 -> 1 IF DEVICE IS CLOCK DEVICE
   361                                  ;      2 -> 1 IF DEVICE IS NULL DEVICE
   362                                  ;      1 -> 1 IF DEVICE IS CONSOLE OUTPUT
   363                                  ;      0 -> 1 IF DEVICE IS CONSOLE INPUT
   364                                  ;
   365                                  ; BLOCK DEVICES:
   366                                  ;
   367                                  ; BIT 15 -> MUST BE 0
   368                                  ;     14 -> 1 IF THE DEVICE UNDERSTANDS IOCTL CONTROL STRINGS
   369                                  ;     13 -> 1 IF THE DEVICE DETERMINES MEDIA BY EXAMINING THE FAT ID BYTE.
   370                                  ;	    THIS REQUIRES THE FIRST SECTOR OF THE FAT TO *ALWAYS* RESIDE IN
   371                                  ;	    THE SAME PLACE.
   372                                  ;     12 -> UNUSED
   373                                  ;     11 -> 1 IF THE DEVICE UNDERSTANDS OPEN/CLOSE/REMOVABLE MEDIA
   374                                  ;     10 -> MUST BE 0
   375                                  ;      9 -> MUST BE 0
   376                                  ;      8 -> UNUSED
   377                                  ;      7 -> UNUSED
   378                                  ;      6 -> IF DEVICE HAS SUPPORT FOR GETMAP/SETMAP OF LOGICAL DRIVES.
   379                                  ;	    IF THE DEVICE UNDERSTANDS GENERIC IOCTL FUNCTION CALLS.
   380                                  ;      5 -> UNUSED
   381                                  ;      4 -> UNUSED
   382                                  ;      3 -> UNUSED
   383                                  ;      2 -> UNUSED
   384                                  ;      1 -> UNUSED
   385                                  ;      0 -> UNUSED
   386                                  ;
   387                                  
   388                                  DEVTYP	       EQU   8000H	    ; BIT 15 - 1 IF CHAR, 0 IF BLOCK
   389                                  CHARDEV        EQU   8000H
   390                                  DEVIOCTL       EQU   4000H	    ; BIT 14 - CONTROL MODE BIT
   391                                  ISFATBYDEV     EQU   2000H	    ; BIT 13 - DEVICE USES FAT ID BYTES,
   392                                  				    ;  COMP MEDIA.
   393                                  OUTTILBUSY     EQU   2000H	    ; OUTPUT UNTIL BUSY IS ENABLED
   394                                  ISNET	       EQU   1000H	    ; BIT 12 - 1 IF A NET DEVICE, 0 IF
   395                                  				    ;  NOT.  CURRENTLY BLOCK ONLY.
   396                                  DEVOPCL        EQU   0800H	    ; BIT 11 - 1 IF THIS DEVICE HAS
   397                                  				    ;  OPEN,CLOSE AND REMOVABLE MEDIA
   398                                  				    ;  ENTRY POINTS, 0 IF NOT
   399                                  
   400                                  EXTENTBIT      EQU   0400H	    ; BIT 10 - CURRENTLY 0 ON ALL DEVS
   401                                  				    ;  THIS BIT IS RESERVED FOR FUTURE USE
   402                                  				    ;  TO EXTEND THE DEVICE HEADER BEYOND
   403                                  				    ;  ITS CURRENT FORM.
   404                                  
   405                                  ; NOTE BIT 9 IS CURRENTLY USED ON IBM SYSTEMS TO INDICATE "DRIVE IS SHARED".
   406                                  ;    SEE IOCTL FUNCTION 9. THIS USE IS NOT DOCUMENTED, IT IS USED BY SOME
   407                                  ;    OF THE UTILITIES WHICH ARE SUPPOSED TO FAIL ON SHARED DRIVES ON SERVER
   408                                  ;    MACHINES (FORMAT,CHKDSK,RECOVER,..).
   409                                  
   410                                  ; 18/03/2019 - Retro DOS v4.0
   411                                  IOQUERY	       EQU   0080H	    ;Bit 7 - Supports generic IOCtl query M017
   412                                  
   413                                  DEV320	       EQU   0040H	    ;BIT 6 - FOR BLOCK DEVICES, THIS
   414                                  				    ;DEVICE SUPPORTS SET/GET MAP OF
   415                                  				    ;LOGICAL DRIVES, AND SUPPORTS
   416                                  				    ;GENERIC IOCTL CALLS.
   417                                  				    ;FOR CHARACTER DEVICES, THIS
   418                                  				    ;DEVICE SUPPORTS GENERIC IOCTL.
   419                                  				    ;THIS IS A DOS 3.2 DEVICE DRIVER.
   420                                  ISSPEC	       EQU   0010H	    ;BIT 4 - THIS DEVICE IS SPECIAL
   421                                  ISCLOCK        EQU   0008H	    ;BIT 3 - THIS DEVICE IS THE CLOCK DEVICE.
   422                                  ISNULL	       EQU   0004H	    ;BIT 2 - THIS DEVICE IS THE NULL DEVICE.
   423                                  ISCOUT	       EQU   0002H	    ;BIT 1 - THIS DEVICE IS THE CONSOLE OUTPUT.
   424                                  ISCIN	       EQU   0001H	    ;BIT 0 - THIS DEVICE IS THE CONSOLE INPUT.
   425                                  ; 23/07/2019 - Retro DOS v4.0
   426                                  EXTDRVR	       EQU   0002h ; (MSDOS 6.0, DEVSYM.INC, 1991)
   427                                  
   428                                  ; 27/05/2018 - Retro DOS v3.0 
   429                                  ; [MSDOS 3.3, MSDISK.ASM]
   430                                  
   431                                  struc INT13FRAME
   432 00000000 ????                    .oldbp:	resw 1
   433 00000002 ????                    .oldax:	resw 1
   434 00000004 ????                    .oldbx:	resw 1
   435 00000006 ????                    .oldcx:	resw 1
   436 00000008 ????                    .olddx:	resw 1
   437 0000000A ????????                .olddd:	resd 1
   438 0000000E ????                    .oldf:	resw 1
   439                                  .size:
   440                                  endstruc
   441                                  
   442                                  ; 02/06/2018 - Retro DOS v3.0
   443                                  ; [MSDOS 3.3, BIOSTRUC.INC]
   444                                  
   445                                  struc ROMBIOS_DESC		; BIOS_SYSTEM_DESCRIPTOR						  
   446 00000000 ????                    .bios_sd_leng:		resw 1				  
   447 00000002 ??                      .bios_sd_modelbyte:	resb 1					  
   448                                  .bios_sd_scnd_modelbyte: 
   449 00000003 ??                      			resb 1					  
   450 00000004 ??                      			resb 1					  
   451 00000005 ??                      .bios_sd_featurebyte1:	resb 1					  
   452 00000006 ????????                			resb 4					  
   453                                  endstruc
   454                                  
   455                                  ;-----------------------------------------------------------------------------
   456                                  ; MSDIOCTL.ASM - MSDOS 6.0 - 1991
   457                                  ;-----------------------------------------------------------------------------
   458                                  ; 11/03/2019 - Retro DOS v4.0
   459                                  
   460                                  ; 18/03/2019
   461                                  DSK_TIMEOUT_ERR 	EQU	80h	; Time out error (no media present).
   462                                  DSK_CHANGELINE_ERR	EQU	06h	; Change line error
   463                                  DSK_ILLEGAL_COMBINATION EQU	0Ch	; Return code of ah=18h function.
   464                                  MULTI_TRK_ON		EQU	10000000b ; User specified multitrack=on,
   465                                  					  ; or system turns
   466                                  ; IOCTL.INC - MSDOS 6.0 - 1991
   467                                  ; ............................................................................
   468                                  
   469                                  ;*** J.K.
   470                                  ;General Guide -
   471                                  ;Category Code:
   472                                  ; 0... .... DOS Defined
   473                                  ; 1... .... User defined
   474                                  ; .xxx xxxx Code
   475                                  
   476                                  ;Function Code:
   477                                  ; 0... .... Return error if unsupported
   478                                  ; 1... .... Ignore if unsupported
   479                                  ; .0.. .... Intercepted by DOS
   480                                  ; .1.. .... Passed to driver
   481                                  ; ..0. .... Sends data/commands to device
   482                                  ; ..1. .... Quries data/info from device
   483                                  ; ...x .... Subfunction
   484                                  ;
   485                                  ; Note that "Sends/queries" data bit is intended only to regularize the
   486                                  ; function set.  It plays no critical role; some functions may contain both
   487                                  ; command and query elements. The convention is that such commands are
   488                                  ; defined as "sends data".
   489                                  
   490                                  ;*****************************;*
   491                                  ; BLOCK DRIVERS 	      ;*
   492                                  ;*****************************;*
   493                                  
   494                                  ; IOCTL SUB-FUNCTIONS
   495                                  IOCTL_GET_DEVICE_INFO	EQU	0
   496                                  IOCTL_SET_DEVICE_INFO	EQU	1
   497                                  IOCTL_READ_HANDLE	EQU	2
   498                                  IOCTL_WRITE_HANDLE	EQU	3
   499                                  IOCTL_READ_DRIVE	EQU	4
   500                                  IOCTL_WRITE_DRIVE	EQU	5
   501                                  IOCTL_GET_INPUT_STATUS	EQU	6
   502                                  IOCTL_GET_OUTPUT_STATUS EQU	7
   503                                  IOCTL_CHANGEABLE?	EQU	8
   504                                  IOCTL_DeviceLocOrRem?	EQU	9
   505                                  IOCTL_HandleLocOrRem?	EQU	0Ah   ;10
   506                                  IOCTL_SHARING_RETRY	EQU	0Bh   ;11
   507                                  GENERIC_IOCTL_HANDLE	EQU	0Ch   ;12
   508                                  GENERIC_IOCTL		EQU	0Dh   ;13
   509                                  IOCTL_GET_DRIVE_MAP 	EQU	0Eh   ;14
   510                                  IOCTL_SET_DRIVE_MAP	EQU	0Fh   ;15
   511                                  IOCTL_QUERY_HANDLE	EQU	10h   ;16
   512                                  IOCTL_QUERY_BLOCK	EQU	11h   ;17
   513                                  
   514                                  ; GENERIC IOCTL SUB-FUNCTIONS
   515                                  RAWIO			EQU	8
   516                                  
   517                                  ; RAWIO SUB-FUNCTIONS
   518                                  GET_DEVICE_PARAMETERS	EQU	60H
   519                                  SET_DEVICE_PARAMETERS	EQU	40H
   520                                  READ_TRACK		EQU	61H
   521                                  WRITE_TRACK		EQU	41H
   522                                  VERIFY_TRACK		EQU	62H
   523                                  FORMAT_TRACK		EQU	42H
   524                                  GET_MEDIA_ID		EQU	66h	;AN000;AN003;changed from 63h
   525                                  SET_MEDIA_ID		EQU	46h	;AN000;AN003;changed from 43h
   526                                  GET_ACCESS_FLAG 	EQU	67h	;AN002;AN003;Unpublished function.Changed from 64h
   527                                  SET_ACCESS_FLAG 	EQU	47h	;AN002;AN003;Unpublished function.Changed from 44h
   528                                  SENSE_MEDIA_TYPE	EQU	68H	;Added for 5.00
   529                                  
   530                                  
   531                                  ; SPECIAL FUNCTION FOR GET DEVICE PARAMETERS
   532                                  BUILD_DEVICE_BPB	EQU	000000001B
   533                                  
   534                                  ; SPECIAL FUNCTIONS FOR SET DEVICE PARAMETERS
   535                                  INSTALL_FAKE_BPB	EQU	000000001B
   536                                  ONLY_SET_TRACKLAYOUT	EQU	000000010B
   537                                  TRACKLAYOUT_IS_GOOD	EQU	000000100B
   538                                  
   539                                  ; SPECIAL FUNCTION FOR FORMAT TRACK
   540                                  STATUS_FOR_FORMAT	EQU	000000001B
   541                                  DO_FAST_FORMAT		EQU	000000010B ;AN001;
   542                                  ; CODES RETURNED FROM FORMAT STATUS CALL
   543                                  FORMAT_NO_ROM_SUPPORT	EQU	000000001B
   544                                  FORMAT_COMB_NOT_SUPPORTED EQU	000000010B
   545                                  
   546                                  ; DEVICETYPE VALUES
   547                                  MAX_SECTORS_IN_TRACK	EQU	63	; MAXIMUM SECTORS ON A DISK.(Was 40 in DOS 3.2)
   548                                  DEV_5INCH		EQU	0
   549                                  DEV_5INCH96TPI		EQU	1
   550                                  DEV_3INCH720KB		EQU	2
   551                                  DEV_8INCHSS		EQU	3
   552                                  DEV_8INCHDS		EQU	4
   553                                  DEV_HARDDISK		EQU	5
   554                                  DEV_OTHER		EQU	7
   555                                  ;DEV_3INCH1440KB	EQU	7
   556                                  DEV_3INCH2880KB		EQU	9
   557                                  ; Retro DOS v2.0 - 26/03/2018
   558                                  ;;DEV_TAPE		EQU	6
   559                                  ;;DEV_ERIMO		EQU	8
   560                                  ;DEV_3INCH2880KB	EQU	9
   561                                  DEV_3INCH1440KB		EQU	10
   562                                  
   563                                  ;MAX_DEV_TYPE		EQU	9	; MAXIMUM DEVICE TYPE THAT WE
   564                                  					; CURRENTLY SUPPORT.
   565                                  MAX_DEV_TYPE		EQU	10
   566                                  
   567                                  struc A_SECTORTABLE
   568 00000000 ????                    .ST_SECTORNUMBER:	resw	1
   569 00000002 ????                    .ST_SECTORSIZE:		resw	1
   570                                  .size:
   571                                  endstruc
   572                                  
   573                                  ; MSDOS 6.0 - BPB.INC - 1991
   574                                  ; ####
   575                                  ;**	BIOS PARAMETER BLOCK DEFINITION
   576                                  ;
   577                                  ;	The BPB contains information about the disk structure. It dates
   578                                  ;	back to the earliest FAT systems and so FAT information is
   579                                  ;	intermingled with physical driver information.
   580                                  ;
   581                                  ;	A boot sector contains a BPB for its device; for other disks
   582                                  ;	the driver creates a BPB. DOS keeps copies of some of this
   583                                  ;	information in the DPB.
   584                                  ;
   585                                  ;	The BDS structure contains a BPB within it.
   586                                  ;
   587                                  
   588                                  struc A_BPB
   589 00000000 ????                    .BPB_BYTESPERSECTOR:	resw	1
   590 00000002 ??                      .BPB_SECTORSPERCLUSTER:	resb	1
   591 00000003 ????                    .BPB_RESERVEDSECTORS:	resw	1
   592 00000005 ??                      .BPB_NUMBEROFFATS:	resb	1
   593 00000006 ????                    .BPB_ROOTENTRIES: 	resw	1
   594 00000008 ????                    .BPB_TOTALSECTORS:	resw	1
   595 0000000A ??                      .BPB_MEDIADESCRIPTOR:	resb	1
   596 0000000B ????                    .BPB_SECTORSPERFAT:	resw	1
   597 0000000D ????                    .BPB_SECTORSPERTRACK:	resw	1
   598 0000000F ????                    .BPB_HEADS:		resw	1
   599 00000011 ????                    .BPB_HIDDENSECTORS:	resw	1
   600 00000013 ????                    			resw	1
   601 00000015 ????                    .BPB_BIGTOTALSECTORS:	resw	1
   602 00000017 ????                    			resw	1
   603 00000019 ????????????            			resb	6	; NOTE:  many times these
   604                                  ;					; 	 6 bytes are omitted
   605                                  ;					;	 when BPB manipulations
   606                                  ;					;	 are performed!
   607                                  .size:
   608                                  endstruc
   609                                  ; ####
   610                                  
   611                                  struc A_DEVICEPARAMETERS
   612 00000000 ??                      .DP_SPECIALFUNCTIONS:	resb	1
   613 00000001 ??                      .DP_DEVICETYPE:		resb	1
   614 00000002 ????                    .DP_DEVICEATTRIBUTES:	resw	1
   615 00000004 ????                    .DP_CYLINDERS:		resw	1
   616 00000006 ??                      .DP_MEDIATYPE:		resb	1
   617 00000007 <res 1Fh>               .DP_BPB:		resb	A_BPB.size
   618 00000026 ????                    .DP_TRACKTABLEENTRIES:	resw	1
   619 00000028 <res FCh>               .DP_SECTORTABLE:	resb	MAX_SECTORS_IN_TRACK * A_SECTORTABLE.size
   620                                  endstruc
   621                                  
   622                                  struc A_TRACKREADWRITEPACKET
   623 00000000 ??                      .TRWP_SPECIALFUNCTIONS:	resb	1
   624 00000001 ????                    .TRWP_HEAD:		resw	1
   625 00000003 ????                    .TRWP_CYLINDER:		resw	1
   626 00000005 ????                    .TRWP_FIRSTSECTOR:	resw	1
   627 00000007 ????                    .TRWP_SECTORSTOREADWRITE: resw	1
   628 00000009 ????????                .TRWP_TRANSFERADDRESS:	resd	1
   629                                  endstruc
   630                                  
   631                                  ;AN001; - FP_TRACKCOUNT is only meaningful when FP_SPECIALFUNCTIONS bit 1 = 1.
   632                                  struc A_FORMATPACKET
   633 00000000 ??                      .FP_SPECIALFUNCTIONS:	resb	1  ; db ?
   634 00000001 ????                    .FP_HEAD: 		resw	1  ; dw ? 
   635 00000003 ????                    .FP_CYLINDER:		resw	1  ; dw ?
   636 00000005 ????                    .FP_TRACKCOUNT:		resw	1  ; dw 1 ; !
   637                                  endstruc
   638                                  
   639                                  struc A_VERIFYPACKET
   640 00000000 ??                      .VP_SPECIALFUNCTIONS:	resb	1
   641 00000001 ????                    .VP_HEAD: 		resw	1
   642 00000003 ????                    .VP_CYLINDER:		resw	1
   643                                  endstruc
   644                                  
   645                                  struc A_MEDIA_ID_INFO
   646 00000000 ????                    .MI_LEVEL:		resw	1  ; dw 0 ; !		;J.K. 87 Info. level
   647 00000002 ????????                .MI_SERIAL:		resd	1  ; dd ?		;J.K. 87 Serial #
   648 00000006 <res Bh>                .MI_LABEL:		resb	11 ; db 11 DUP (' ') ;!	;J.K. 87 volume label
   649 00000011 ????????????????        .MI_SYSTEM:		resb 	8  ; db 8 DUP (' ')  ;!	;J.K. 87 File system type
   650                                  endstruc
   651                                  
   652                                  struc A_DISKACCESS_CONTROL	   ;AN002; Unpublished function. Only for Hard file.
   653 00000000 ??                      .DAC_SPECIALFUNCTIONS:	resb 	1  ; db 0 ; ! ;AN002; Always 0
   654 00000001 ??                      .DAC_ACCESS_FLAG: 	resb 	1  ; db 0 ; ! 
   655                                  				   ; Non Zero - allow disk I/O to unformatted hard file
   656                                  endstruc			   ; 0 - Disallow disk I/O to unformatted hard file
   657                                  
   658                                  
   659                                  struc A_MEDIA_SENSE			; Media sense structure added 5.00
   660 00000000 ??                      .MS_ISDEFAULT:		resb	1	; If 1 type returned is drv default
   661 00000001 ??                      .MS_DEVICETYPE:		resb	1	; Drive type 
   662 00000002 ??                      .MS_RESERVED1:		resb	1	; RESERVED
   663 00000003 ??                      .MS_RESERVED2:		resb 	1	; RESERVED 
   664                                  endstruc
   665                                  
   666                                  ;********************************;*
   667                                  ; CHARACTER DEVICES (PRINTERS)	 ;*
   668                                  ;********************************;*
   669                                  
   670                                  ;RAWIO SUB-FUNCTIONS
   671                                  GET_RETRY_COUNT 	EQU	65H
   672                                  SET_RETRY_COUNT 	EQU	45H
   673                                  
   674                                  struc A_RETRYCOUNT
   675 00000000 ????                    .RC_COUNT:		resw 1
   676                                  endstruc
   677                                  
   678                                  ;********************************;*		;J.K. 4/29/86
   679                                  ; CHARACTER DEVICES (SCREEN)	 ;*
   680                                  ;********************************;*		;J.K. 4/29/86
   681                                  ;
   682                                  ;SC_MODE_INFO	 struc
   683                                  ;SC_INFO_LENGTH 	 DW	 9
   684                                  ;SC_MODE		 DB	 0
   685                                  ;SC_COLORS		 DW	 0
   686                                  ;SC_WIDTH		 DW	 0
   687                                  ;SC_LENGTH		 DW	 0
   688                                  ;SC_MODE_INFO	 ends
   689                                  ;
   690                                  ;SC_INFO_PACKET_LENGTH	 EQU	 9		 ;LENGTH OF THE INFO PACKET.
   691                                  
   692                                  ;SUBFUNCTIONS FOR CON$GENIOCTL
   693                                  ;GET_SC_MODE		 EQU	 60h
   694                                  ;SET_SC_MODE		 EQU	 40h
   695                                  ;The following subfunctions are reserved for installable CODE PAGE switch
   696                                  ;console devices. - J.K. 4/29/86
   697                                  ;Get_active_codepage	 equ	 6Ah
   698                                  ;Invoke_active_codepage  equ	 4Ah
   699                                  ;Start_designate_codepage equ	 4Ch
   700                                  ;End_designate_codepage  equ	 4Dh
   701                                  ;Get_list_of_designated_codepage equ 6Bh
   702                                  ;J.K. 4/29/86 *** End of Con$genioctl equates & structures
   703                                  
   704                                  ;-----------------------------------------------------------------------------
   705                                  ; MULT.INC - MSDOS 6.0 - 1991
   706                                  ;-----------------------------------------------------------------------------
   707                                  ; 18/03/2019
   708                                  
   709                                  ; The current set of defined multiplex channels is (* means documented):
   710                                  ;
   711                                  ;   Channel(h)  Issuer          Receiver    Function
   712                                  ;      00       server          PSPRINT     print job control
   713                                  ;     *01       print/apps      PRINT       Queueing of files
   714                                  ;      02       BIOS            REDIR       signal open/close of printers
   715                                  ;
   716                                  ;      05       command         REDIR       obtain text of net int 24 message
   717                                  ;     *06       server/assign   ASSIGN      Install check
   718                                  ;
   719                                  ;      08       external driver IBMBIO      interface to internal routines
   720                                  ;
   721                                  ;      10       sharer/server   Sharer      install check
   722                                  ;      11       DOS/server      Redir       install check/redirection funcs
   723                                  ;      12       sharer/redir    DOS         dos functions and structure maint
   724                                  ;      13       MSNET           MSNET       movement of NCBs
   725                                  ;      13       external driver IBMBIO      Reset_Int_13, allows installation
   726                                  ;                                           of alternative INT_13 drivers after
   727                                  ;                                           boot_up
   728                                  ;      14 (IBM) DOS             NLSFUNC     down load NLS country info,DOS 3.3
   729                                  ;      14 (MS)  APPS            POPUP       MSDOS 4 popup screen functions
   730                                  ;      15       APPS            MSCDEX      CD-ROM extensions interface
   731                                  ;      16       WIN386          WIN386      Windows communications
   732                                  ;      17       Clipboard       WINDOWS     Clipboard interface
   733                                  ;     *18       Applications    MS-Manger   Toggle interface to manager
   734                                  ;      19       Shell
   735                                  ;      1A       Ansi.sys
   736                                  ;      1B       Fastopen,Vdisk   IBMBIO     EMS INT 67H stub handler
   737                                  ;
   738                                  ;      40h      OS/2
   739                                  ;      41h      Lanman
   740                                  ;      42h      Lanman
   741                                  ;      43h      Himem
   742                                  ;                               AL = 20h    reserved for Mach 20 Himem support
   743                                  ;                               AL = 30h    reserved for Himem external A20 code
   744                                  ;      44h      Dosextender
   745                                  ;      45H      Windows profiler
   746                                  ;      46h      Windows/286 DOS extender
   747                                  ;      47h      Basic Compiler Vn. 7.0
   748                                  ;      48h      Doskey
   749                                  ;      49h      DOS 5.x install 
   750                                  ;      4Ah      Multi Purpose
   751                                  ;                multMULTSWPDSK         0 - Swap Disk in drive A (BIOS)
   752                                  ;                multMULTGETHMAPTR      1 - Get available HMA & ptr
   753                                  ;                multMULTALLOCHMA       2 - Allocate HMA (bx == no of bytes)
   754                                  ;                multMULTTASKSHELL      5 - Shell/switcher API
   755                                  ;                multMULTRPLTOM         6 - Top Of Memory for RPL support
   756                                  ;
   757                                  ;                multSmartdrv           10h
   758                                  ;                multMagicdrv           11h
   759                                  ;      4Bh      Task Switcher API
   760                                  ;
   761                                  ;      4Ch      APPS            APM             Advanced power management
   762                                  ;      4Dh      Kana Kanji Converter, MSKK
   763                                  ;
   764                                  ;      51h      ODI real mode support driver (for Chicago)
   765                                  ;
   766                                  ;      53h      POWER.EXE - used for broadcasting APM events    ; M036
   767                                  ;      54h      POWER.EXE - used for POWER API                  ; M036
   768                                  ;
   769                                  ;      55h      COMMAND.COM
   770                                  ;                multCOMFIRST           0 - API to determine whether 1st
   771                                  ;                                           instance of command.com
   772                                  ;                multCOMFIRSTROM        1 - API to determine whether 1st
   773                                  ;                                           instance of ROM COMMAND
   774                                  ;      56h      Sewell Development
   775                                  ;               INTERLNK
   776                                  ;
   777                                  ;      57h      Iomega Corp.
   778                                  ;
   779                                  ;      AB       Unspecified IBM use
   780                                  ;      AC       Graphics
   781                                  ;      AD       NLS (toronto)
   782                                  ;      AE
   783                                  ;      AF       Mode
   784                                  ;      B0       GRAFTABL        GRAFTABL
   785                                  ;
   786                                  ;      D7       Banyan VINES
   787                                  
   788                                  multMULT	  equ	4Ah
   789                                  
   790                                  multMULTSWPDSK	  equ	0	; Swap Disk in drive A (BIOS)
   791                                  multMULTGETHMAPTR equ	1	; Get available HMA & ptr
   792                                  multMULTALLOCHMA  equ	2	; Allocate HMA (bx == no of bytes)
   793                                  multMULTTASKSHELL equ	5	; Shell/switcher API
   794                                  multMULTRPLTOM	  equ	6	; Top Of Memory for RPL support
   795                                  
   796                                  ;-----------------------------------------------------------------------------
   797                                  ; WIN386.INC - MSDOS 6.0 - 1991
   798                                  ;-----------------------------------------------------------------------------
   799                                  ; 18/03/2019
   800                                  
   801                                  ; WIN386.INC
   802                                  ;
   803                                  ;  Symbols and structures relating to WIN386 support.
   804                                  ;
   805                                  ;  Used by files in both the DOS and the BIOS.
   806                                  ;
   807                                  ;  Created: 7-13-89 by MRW
   808                                  ;
   809                                  
   810                                  ; WIN386 broadcast int 2fh multiplex number and subfunction numbers
   811                                  
   812                                  MultWin386		equ     16h	; Int 2f multiplex number
   813                                  
   814                                  Win386_Init		equ	05h	; Win386 initialization
   815                                  Win386_Exit		equ	06h	; Win386 exit
   816                                  Win386_Devcall		equ	07h	; Win386 device call out
   817                                  Win386_InitDone		equ	08h	; Win386 initialization is complete
   818                                  
   819                                  ; ============================================================================
   820                                  
   821                                  ;bpbx		struc ;	(sizeof=0x19)	
   822                                  ;
   823                                  ;bytespersec	dw ?			; base 10
   824                                  ;secperclust	db ?			; base 10
   825                                  ;rsvdsecs	dw ?			; base 10
   826                                  ;numfats	db ?			; base 10
   827                                  ;rootdirents	dw ?			; base 10
   828                                  ;totalsize16	dw ?			; base 10
   829                                  ;mediaid	db ?
   830                                  ;fatsecs	dw ?			; base 10
   831                                  ;secpertrack	dw ?			; base 10
   832                                  ;heads		dw ?			; base 10
   833                                  ;hiddensecs_lw	dw ?			; base 10
   834                                  ;hiddensecs_hw	dw ?			; base 10
   835                                  ;totalsecs_lw	dw ?			; base 10
   836                                  ;totalsecs_hw	dw ?			; base 10
   837                                  ;
   838                                  ;bpbx		ends
   839                                  
   840                                  ;-----------------------------------------------------------------------------
   841                                  ;
   842                                  ; +-------------------------------------------------------------------------+
   843                                  ; |   This file	has been generated by The Interactive Disassembler (IDA)    |
   844                                  ; |	      Copyright	(c) 2013 Hex-Rays, <support@hex-rays.com>	    |
   845                                  ; |			 Licensed to: Freeware version			    |
   846                                  ; +-------------------------------------------------------------------------+
   847                                  ;
   848                                  ; Input	MD5   :	B2FA03653E5C5D545327EE28B8A24356
   849                                  ; Input	CRC32 :	20FC79BF
   850                                  
   851                                  ;-----------------------------------------------------------------------------
   852                                  
   853                                  ;		.386
   854                                  ;		.model flat
   855                                  
   856                                  ; ============================================================================
   857                                  
   858                                  ; 10/12/2022
   859                                  ; 09/12/2022
   860                                  ; 21/10/2022
   861                                  ; 19/10/2022
   862                                  ; 17/10/2022, 18/10/2022
   863                                  ; 15/10/2022, 16/10/2022
   864                                  ; 03/10/2022
   865                                  ; 02/10/2022
   866                                  ; 01/10/2022 - Erdogan Tan
   867                                  
   868                                  ; [[ Most of comments here are from the original MSDOS 6.0 source code ]]
   869                                  
   870                                  ;-----------------------------------------------------------------------------
   871                                  ; Start of (MSDOS 5.0) IO.SYS (IBMBIO.COM)
   872                                  ;-----------------------------------------------------------------------------
   873                                  
   874                                  		; [ORG 0]		; segment 0x0070h
   875                                  
   876                                  ;=============================================================================
   877                                  ; DOS BIOS (IO.SYS) DATA SEGMENT 
   878                                  ;=============================================================================
   879                                  ; 09/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
   880                                  
   881                                  section .BIOSDATA vstart=0
   882                                  
   883                                  ;--- DOSBIOS data segment ----------------------------------------------------
   884                                  ;-----------------------------------------------------------------------------
   885                                  
   886                                  ;Bios_Data segment
   887                                  
   888                                  BData_start:				
   889 00000000 E96017                  hdrv_pat:	jmp	init		; MSBIO1.ASM, MSSBDATA.INC
   890                                  ; ----------------------------------------------------------------------------
   891                                  
   892 00000003 0000                    DosDataSg:	dw 0
   893                                  
   894                                  ; DOS's int 2f handler will exit via a jump through here.
   895                                  ; This is how the BIOS hooks int2f
   896                                  			
   897 00000005 EA                      bios_i2f:	db 0EAh			; far jump to int_2f (segment may not be at 70h)
   898 00000006 [9108]                  off_706:	dw int_2f
   899 00000008 7000                    word_708:	dw 70h			; KERNEL_SEGMENT
   900                                  
   901 0000000A 0000                    romstartaddr:	dw 0			; The start address for the romfind routines
   902                                  					; This is to maintain binary compatibility
   903                                  					; with DISK based DOS 5.0
   904                                  
   905                                  ; This is a byte used for special key handling in the resident
   906                                  ; console device driver. It must be here so that it can be included
   907                                  ; in the WIN386 instance table (in INC\LMSTUB.ASM).
   908                                  
   909 0000000C 00                      altah:		db 0			; special key handling
   910                                  			
   911 0000000D 00                      inHMA:		db 0			; flag indicates we're running from HMA
   912 0000000E 00000000                xms:		dd 0			; entry point to xms if above is true
   913                                  
   914                                  ; PTRSAV - pointer save
   915                                  ;
   916                                  ; This variable holds the pointer to the Request Header passed by a program
   917                                  ; wishing to use a device driver. When the strategy routine is called it 
   918                                  ; puts the address of the Request header in this variable and returns.
   919                                  		
   920 00000012 00000000                ptrsav:		dd 0			
   921                                  auxbuf:		;db 4 dup(0)		; set of 1 byte buffers for com 1,2,3, and 4
   922 00000016 00000000                		db 0, 0, 0, 0 ; 19/10/2022
   923 0000001A 0000                    zeroseg:	dw 0			; easy way to load segment registers with zero			
   924 0000001C 0000                    i13_ds:		dw 0			; ds register for int13 call through	
   925 0000001E 0000                    prevoper:	dw 0			; holds int 13 request (i.e. register ax).			
   926 00000020 00                      number_of_sec:	db 0			; holds number of secs. to read on an ecc error
   927 00000021 0000                    auxnum:		dw 0			; which aux device was requested			
   928                                  
   929                                  ;-----------------------------------------------------------------------------
   930                                  
   931                                  res_dev_list:
   932                                  
   933                                  ; Device Header for the CON Device Driver
   934                                  
   935                                  CONHeader:				; HEADER FOR DEVICE "CON"
   936 00000023 [3500]                  		dw auxdev2
   937 00000025 7000                    		dw 70h	
   938 00000027 1380                    word_727:	dw 8013h
   939 00000029 [F506]                  		dw strategy
   940 0000002B [0007]                  		dw con_entry
   941 0000002D 434F4E2020202020        aCon:		db 'CON     '           
   942 00000035 [4700]                  auxdev2:	dw prndev2		; HEADER FOR DEVICE "AUX"	
   943 00000037 7000                    		dw 70h
   944 00000039 0080                    		dw 8000h
   945 0000003B [F506]                  		dw strategy
   946 0000003D [2107]                  		dw aux0_entry
   947 0000003F 4155582020202020        aAux:		db 'AUX     '
   948 00000047 [5900]                  prndev2:	dw timdev		; HEADER FOR DEVICE "PRN"
   949 00000049 7000                    		dw 70h
   950 0000004B C0A0                    word_74B:	dw 0A0C0h
   951 0000004D [F506]                  		dw strategy
   952 0000004F [0507]                  		dw prn0_entry
   953 00000051 50524E2020202020        aPrn:		db 'PRN     '		; HEADER FOR DEVICE "CLOCK$"
   954 00000059 [6B00]                  timdev:		dw dskdev	
   955 0000005B 7000                    		dw 70h
   956 0000005D 0880                    		dw 8008h
   957 0000005F [F506]                  		dw strategy
   958 00000061 [3907]                  		dw tim_entry
   959 00000063 434C4F434B242020        aClock:		db 'CLOCK$  '
   960 0000006B [7B00]                  dskdev:		dw com1dev		; HEADER FOR DISK DEVICES
   961 0000006D 7000                    		dw 70h
   962 0000006F C208                    		dw 8C2h
   963                                  		;dw offset strategy
   964                                  		;dw offset dsk_entry
   965                                  		; 19/10/2022
   966 00000071 [F506]                  		dw strategy
   967 00000073 [3E07]                  		dw dsk_entry
   968                                  
   969                                  ; maximum number of drives
   970                                  
   971 00000075 04                      drvmax:		db 4			
   972 00000076 FE                      step_drv:	db 0FEh	 ; -2		; last drive accessed		
   973 00000077 00                      fhave96:	db 0			; flag to indicate presence of
   974                                  					; 96tpi support		
   975 00000078 00                      single:		db 0			; used to detect single drive systems		
   976 00000079 00                      fhavek09:	db 0			; indicates if this is a k09 or not
   977                                  					; used by console driver.			
   978 0000007A 00                      fsetowner:	db 0			; = 1 if we are setting the owner of a
   979                                  					; drive. (examined by checksingle).
   980                                  		
   981 0000007B [8D00]                  com1dev:	dw lpt1dev		; Device Header for device "COM1"	
   982 0000007D 7000                    		dw 70h
   983 0000007F 0080                    		dw 8000h
   984 00000081 [F506]                  		dw strategy
   985 00000083 [2107]                  		dw aux0_entry
   986 00000085 434F4D3120202020        aCom1:		db 'COM1    '
   987 0000008D [9F00]                  lpt1dev:	dw lpt2dev		; Device Header for device LPT1	
   988 0000008F 7000                    		dw 70h
   989 00000091 C0A0                    		dw 0A0C0h
   990 00000093 [F506]                  		dw strategy
   991 00000095 [0C07]                  		dw prn1_entry
   992 00000097 4C50543120202020        aLpt1:		db 'LPT1    '
   993 0000009F [B800]                  lpt2dev:	dw lpt3dev		; Device Header for device LPT2	
   994 000000A1 7000                    		dw 70h
   995 000000A3 C0A0                    		dw 0A0C0h
   996 000000A5 [F506]                  		dw strategy
   997 000000A7 [1307]                  		dw prn2_entry
   998 000000A9 4C5054322020202000-     aLpt2:		db 'LPT2    ',0,0,0
   998 000000B2 0000               
   999                                  
  1000                                  ;M058; Start of changes
  1001                                  ; Orig13 needs to be at offset 0B4h for the CMS floppy driver to work.
  1002                                  ;These guys patch Orig13 with their own int 13h hook and so this offset
  1003                                  ;cannot change for them to work. Even ProComm does this.
  1004                                  
  1005 000000B4 00000000                Orig13:		dd 0			; to make Orig13 offset 0B4h		
  1006                                  
  1007 000000B8 [CA00]                  lpt3dev:	dw com2dev		; Device Header for device LPT3	
  1008 000000BA 7000                    		dw 70h
  1009 000000BC C0A0                    		dw 0A0C0h
  1010 000000BE [F506]                  		dw strategy
  1011 000000C0 [1A07]                  		dw prn3_entry
  1012 000000C2 4C50543320202020        aLpt3:		db 'LPT3    '
  1013 000000CA [DC00]                  com2dev:	dw com3dev		; Device Header for device "COM2"
  1014 000000CC 7000                    		dw 70h
  1015 000000CE 0080                    		dw 8000h
  1016 000000D0 [F506]                  		dw strategy
  1017 000000D2 [2707]                  		dw aux1_entry
  1018                                  		; 19/10/2022
  1019 000000D4 434F4D3220202020        aCom2:		db 'COM2    '
  1020                                  com3dev:	;dw offset com4dev	; Device Header for device "COM3"
  1021 000000DC [EE00]                  		dw com4dev
  1022 000000DE 7000                    		dw 70h
  1023 000000E0 0080                    		dw 8000h
  1024                                  		;dw offset strategy
  1025                                  		;dw offset aux2_entry
  1026 000000E2 [F506]                  		dw strategy
  1027 000000E4 [2D07]                  		dw aux2_entry	
  1028 000000E6 434F4D3320202020        aCom3:		db 'COM3    '
  1029 000000EE FFFF                    com4dev:	dw 0FFFFh		; Device Header for device "COM4"	
  1030 000000F0 7000                    		dw 70h
  1031 000000F2 0080                    		dw 8000h
  1032 000000F4 [F506]                  		dw strategy
  1033 000000F6 [3307]                  		dw aux3_entry
  1034 000000F8 434F4D3420202020        		db 'COM4    '
  1035                                  
  1036                                  ;-----------------------------------------------------------------------------
  1037                                  
  1038 00000100 10                      RomVectors:	db 10h			
  1039 00000101 00000000                Old10:		dd 0
  1040 00000105 13                      		db 13h
  1041 00000106 00000000                Old13:		dd 0			
  1042 0000010A 15                      		db 15h
  1043 0000010B 00000000                Old15:		dd 0			
  1044 0000010F 19                      		db 19h
  1045 00000110 00000000                Old19:		dd 0
  1046 00000114 1B                      		db 1Bh
  1047 00000115 00000000                Old1B:		dd 0
  1048                                  
  1049                                  ;EndRomVectors	equ $
  1050                                  
  1051                                  ;NUMROMVECTORS	equ ((EndRomVectors - RomVectors)/5)
  1052                                  
  1053                                  ;-----------------------------------------------------------------------------
  1054                                  
  1055 00000119 [4E03]                  start_bds:	dw bds1			; Start	of linked list of BDS's
  1056 0000011B 7000                    		dw 70h			; KERNEL_SEGMENT
  1057                                  
  1058                                  ; (MSDOS 3.3) NOTE:
  1059                                  ; Some floppy drives do not have changeline support. The result is a
  1060                                  ; large amount of inefficiency in the code. A media-check always returns
  1061                                  ; "I don`t know". This cause DOS to reread the FAT on every access and
  1062                                  ; always discard any cached data.
  1063                                  ;    We get around this inefficiency by implementing a "Logical Door Latch".
  1064                                  ; The following three items are used to do this. The logical door latch is
  1065                                  ; based on the premise that it is not physically possible to change floppy
  1066                                  ; disks in a drive in under two seconds (most people take about 10). The
  1067                                  ; logical door latch is implemented by saving the time of the last successful
  1068                                  ; disk operation (in the value TIM_DRV). When a new request is made the
  1069                                  ; current time is compared to the saved time. If less than two seconds have
  1070                                  ; passed then the value "No Change" is returned. If more than two seconds
  1071                                  ; have passed the value "Don't Know" is returned.
  1072                                  ;    There is one complecation to this algorithm. Some programs change the
  1073                                  ; value of the timer. In this unfortunate case we have an invalid timer.
  1074                                  ; This possibility is detected by counting the number of disk operations
  1075                                  ; which occur without any time passing. If this count exceeds the value of
  1076                                  ; "AccessMax" we assume the counter is invalid and always return "Don't
  1077                                  ; Know". The variable "AccessCount" is used to keep track of the number
  1078                                  ; of disk operation which occur without the time changing.
  1079                                  
  1080 0000011D 00                      accesscount:	db 0			
  1081 0000011E FF                      tim_drv:	db 0FFh			
  1082 0000011F 00                      medbyt:		db 0
  1083                                  wrtverify:	; 15/10/2022			
  1084 00000120 02                      rflag:		db 2			; 2 for	read, 3	for write
  1085 00000121 00                      verify:		db 0			; 1 if verify after write
  1086 00000122 0000                    seccnt:		dw 0			
  1087 00000124 00                      		db 0			; -- pad where hardnum was
  1088 00000125 01                      dsktnum:	db 1			; number of diskette drives			
  1089                                  
  1090                                  ; (MSDOS 3.3) NOTE:
  1091                                  ; Some of the older versions of the IBM rom-bios always assumed a seek would
  1092                                  ; have to be made to read the diskette. Consequently a large head settle
  1093                                  ; time was always used in the I/O operations. To get around this problem
  1094                                  ; we need to continually adjust the head settle time. The following
  1095                                  ; algorithm is used:
  1096                                  ;
  1097                                  ;   Get the current head settle value.
  1098                                  ;   If it is 1, then
  1099                                  ;	set slow = 15
  1100                                  ;   else
  1101                                  ;	set slow = value
  1102                                  ;   ...
  1103                                  ;   if we are seeking and writing then
  1104                                  ;	use slow
  1105                                  ;   else
  1106                                  ;	use fast
  1107                                  ;   ...
  1108                                  ;   restore current head settle value
  1109                                  
  1110 00000126 00                      motorstartup:	db 0			; value from table
  1111 00000127 00                      settlecurrent:	db 0			; value	from table
  1112 00000128 00                      settleslow:	db 0			; slow settle value
  1113 00000129 00                      nextspeed:	db 0			; value	of speed to be used
  1114 0000012A 00                      save_head_sttl:	db 0			; used by read_sector routine
  1115 0000012B 00                      save_eot:	db 0			; saved	eot from the default DPT
  1116 0000012C 09                      eot:		db 9			
  1117 0000012D 00000000                dpt:		dd 0			; pointer to Disk Parameter Table			
  1118 00000131 00                      cursec:		db 0			; current sector
  1119 00000132 00                      curhd:		db 0			; current head
  1120 00000133 0000                    curtrk:		dw 0			; current track
  1121 00000135 0000                    spsav:		dw 0			; save the stack pointer
  1122 00000137 08                      formt_eot:	db 8			; eot used for format
  1123 00000138 00                      hdnum:		db 0			; head number
  1124 00000139 0000                    trknum:		dw 0			; track	being manipulated
  1125 0000013B 50                      gap_patch:	db 50h			; format gap patched into dpt
  1126                                  
  1127                                  ;-----------------------------------------------------------------------------
  1128                                  
  1129                                  ; disk errors returned from the IBM rom
  1130                                  
  1131 0000013C CC                      errin:		db 0CCh			; write	fault error
  1132 0000013D 80                      		db 80h			; no response
  1133 0000013E 40                      		db 40h			; seek failure
  1134 0000013F 10                      		db 10h			; bad crc
  1135 00000140 08                      		db 8			; dma overrun
  1136 00000141 06                      		db 6			; media	change
  1137 00000142 04                      		db 4			; sector not found
  1138 00000143 03                      		db 3			; write	attempt	to write-protect disk
  1139 00000144 00                      lsterr:		db 0			; all other errors
  1140                                  
  1141                                  ; returned error codes corresponding to above
  1142                                  
  1143 00000145 0A                      errout:		db 10			; write	fault error
  1144 00000146 02                      		db 2			; no response
  1145 00000147 06                      		db 6			; seek failure
  1146 00000148 04                      		db 4			; bad crc
  1147 00000149 04                      		db 4			; dma overrun
  1148 0000014A 0F                      		db 15			; invalid media	change
  1149 0000014B 08                      		db 8			; sector not found
  1150 0000014C 00                      		db 0			; write	attempt	to write-protect disk
  1151 0000014D 0C                      		db 12			; general error
  1152                                  
  1153                                  ;-----------------------------------------------------------------------------
  1154                                  
  1155                                  ; 30/12/2018 - Retro DOS v4.0
  1156                                  
  1157                                  ; read in boot sector here, read done in readboot.
  1158                                  ; also read sector for dma check for hard disk.
  1159                                  ;
  1160                                  ; This buffer is word aligned because certain AMI BIOSs have a bug
  1161                                  ; in them which causes the byte after the buffer to be trashed
  1162                                  ; on floppy reads to odd-byte boundaries. Although no general effort 
  1163                                  ; is made to enforce this in the bigger picture, this one small sacrifice
  1164                                  ; makes that system more-or-less work.
  1165                                  
  1166                                  disksector:	;db 512 dup(0)		; read in boot sector here
  1167                                  		; 19/10/2022
  1168 0000014E 00<rep 200h>            		times 512 db 0
  1169                                  
  1170                                  ;-----------------------------------------------------------------------------
  1171                                  
  1172                                  ; 30/12/2018 - Retro DOS v4.0
  1173                                  ;-----------------------------------------------------------------------------
  1174                                  ; 25/05/2018 (04/04/2018)
  1175                                  ;*****************************************************************************
  1176                                  ;	"bds" contains information for each drive in the system.
  1177                                  ;	various values are patched whenever actions are performed.
  1178                                  ;	sectors/alloc. unit in bpb initially set to -1 to signify that
  1179                                  ;	the bpb has not been filled. link also set to -1 to signify end
  1180                                  ;	of list. # of cylinders in maxparms initialized to -1 to indicate
  1181                                  ;	that the parameters have not been set.
  1182                                  
  1183                                  bds1:		;dw offset bds2
  1184 0000034E [B203]                  		dw bds2	; 19/10/2022
  1185 00000350 7000                    		dw 70h			; dword	link to	next structure
  1186 00000352 00                      		db 0			; int 13h drive	number
  1187 00000353 00                      		db 0			; logical drive	letter
  1188 00000354 0002                    fdrive1:	dw 512			
  1189                                  					; physical sector size in bytes
  1190 00000356 FF                      		db 0FFh			; sectors/allocation unit
  1191 00000357 0100                    		dw 1			; reserved sectors for dos
  1192 00000359 02                      		db 2			; no of	file allocation	tables
  1193 0000035A 4000                    		dw 64			; number of root directory entries
  1194 0000035C 6801                    		dw 360			; number sectors (at 512 bytes each)
  1195 0000035E 00                      		db 0			; media	descriptor, initially 0
  1196 0000035F 0200                    		dw 2			; number of fat	sectors
  1197 00000361 0900                    		dw 9			; sector limit (sectors	per track)
  1198 00000363 0100                    		dw 1			; head limit (number of	heads -	1)
  1199 00000365 0000                    		dw 0			; hidden sector	count (low word)
  1200 00000367 0000                    		dw 0			; hidden sector	(high)
  1201 00000369 0000                    		dw 0			; number sectors (low)
  1202 0000036B 0000                    		dw 0			; number sectors (high)
  1203 0000036D 00                      		db 0			; true => large	fats
  1204 0000036E 0000                    		dw 0			; open ref. count
  1205 00000370 03                      		db 3			; form factor
  1206 00000371 2000                    		dw 20h			; various flags
  1207 00000373 2800                    		dw 40			; number of cylinders
  1208 00000375 0002                    recommended_bps: dw 512			; recommended bps for this drive
  1209 00000377 01                      		db 1
  1210 00000378 0100                    		dw 1
  1211 0000037A 02                      		db 2
  1212 0000037B E000                    		dw 224			; number of root directory entries
  1213 0000037D 6801                    		dw 360
  1214 0000037F F0                      		db 0F0h			; media	descriptor, initially 0F0h
  1215 00000380 0200                    		dw 2
  1216 00000382 0900                    		dw 9
  1217 00000384 0200                    		dw 2
  1218 00000386 0000                    		dw 0
  1219 00000388 0000                    		dw 0
  1220 0000038A 0000                    		dw 0
  1221 0000038C 0000                    		dw 0
  1222                                  		;db 6 dup(0)
  1223 0000038E 00<rep 6h>              		times 6 db 0		; 19/10/2022
  1224 00000394 FF                      		db 0FFh			; last track accessed on this drive
  1225 00000395 FFFF                    word_A95:	dw 0FFFFh		; keep these two contiguous (?)
  1226 00000397 FFFF                    		dw 0FFFFh
  1227 00000399 4E4F204E414D452020-     		db 'NO NAME    ',0      ; volume id for this disk
  1227 000003A2 202000             
  1228 000003A5 00000000                		dd 0			; current volume serial	from boot record
  1229 000003A9 464154313220202000      		db 'FAT12   ',0         ; current file system id from boot record
  1230                                  ; ----
  1231                                  
  1232 000003B2 [1604]                  bds2:		dw bds3		
  1233 000003B4 7000                    		dw 70h
  1234 000003B6 00                      		db 0
  1235 000003B7 00                      		db 0
  1236 000003B8 0002                    fdrive2:	dw 512			
  1237 000003BA FF0100024000680100-     byte_ABA:	db 0FFh, 1, 0, 2, 40h, 0, 68h, 1, 0, 2,	0, 9, 0, 1, 0
  1237 000003C3 020009000100       
  1238 000003C9 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 3, 20h, 0, 28h, 0
  1238 000003D2 00000320002800     
  1239 000003D9 000201010002E00068-     		db 0, 2, 1, 1, 0, 2, 0E0h, 0, 68h, 1, 0F0h, 2, 0, 9, 0
  1239 000003E2 01F002000900       
  1240 000003E8 020000000000000000-     		db 2, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0FFh
  1240 000003F1 00000000000000FF   
  1241 000003F9 FFFFFFFF4E4F204E41-     		db 0FFh, 0FFh, 0FFh, 0FFh, 4Eh,	4Fh, 20h, 4Eh, 41h, 4Dh
  1241 00000402 4D                 
  1242 00000403 452020202000000000-     		db 45h,	20h, 20h, 20h, 20h, 0, 0, 0, 0,	0, 46h,	41h, 54h
  1242 0000040C 00464154           
  1243 00000410 313220202000            		db 31h,	32h, 20h, 20h, 20h, 0
  1244                                  ; ----
  1245                                  
  1246 00000416 [7A04]                  bds3:		dw bds4		
  1247 00000418 7000                    		dw 70h
  1248 0000041A 00                      		db 0
  1249 0000041B 00                      		db 0
  1250 0000041C 0002                    fdrive3:	dw 512			
  1251 0000041E FF0100024000680100-     		db 0FFh, 1, 0, 2, 40h, 0, 68h, 1, 0, 2,	0, 9, 0, 1, 0
  1251 00000427 020009000100       
  1252 0000042D 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 3, 20h, 0, 28h, 0
  1252 00000436 00000320002800     
  1253 0000043D 000201010002E00068-     		db 0, 2, 1, 1, 0, 2, 0E0h, 0, 68h, 1, 0F0h, 2, 0, 9, 0
  1253 00000446 01F002000900       
  1254 0000044C 020000000000000000-     		db 2, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0FFh
  1254 00000455 00000000000000FF   
  1255 0000045D FFFFFFFF4E4F204E41-     		db 0FFh, 0FFh, 0FFh, 0FFh, 4Eh,	4Fh, 20h, 4Eh, 41h, 4Dh
  1255 00000466 4D                 
  1256 00000467 452020202000000000-     		db 45h,	20h, 20h, 20h, 20h, 0, 0, 0, 0,	0, 46h,	41h, 54h
  1256 00000470 00464154           
  1257 00000474 313220202000            		db 31h,	32h, 20h, 20h, 20h, 0
  1258                                  ; ----
  1259                                  
  1260 0000047A FFFF                    bds4:		dw 0FFFFh		
  1261 0000047C 7000                    		dw 70h
  1262 0000047E 00                      		db 0
  1263 0000047F 00                      		db 0
  1264 00000480 0002                    fdrive4:	dw 512			
  1265 00000482 FF0100024000680100-     byte_B82:	db 0FFh, 1, 0, 2, 40h, 0, 68h, 1, 0, 2,	0, 9, 0, 1, 0
  1265 0000048B 020009000100       
  1266 00000491 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 3, 20h, 0, 28h, 0
  1266 0000049A 00000320002800     
  1267 000004A1 000201010002E00068-     		db 0, 2, 1, 1, 0, 2, 0E0h, 0, 68h, 1, 0F0h, 2, 0, 9, 0
  1267 000004AA 01F002000900       
  1268 000004B0 020000000000000000-     		db 2, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0FFh
  1268 000004B9 00000000000000FF   
  1269 000004C1 FFFFFFFF4E4F204E41-     		db 0FFh, 0FFh, 0FFh, 0FFh, 4Eh,	4Fh, 20h, 4Eh, 41h, 4Dh
  1269 000004CA 4D                 
  1270 000004CB 452020202000000000-     		db 45h,	20h, 20h, 20h, 20h, 0, 0, 0, 0,	0, 46h,	41h, 54h
  1270 000004D4 00464154           
  1271 000004D8 313220202000            		db 31h,	32h, 20h, 20h, 20h, 0
  1272                                  
  1273                                  ;-----------------------------------------------------------------------------
  1274                                  
  1275 000004DE 03                      sm92:		db 3			; .spf			
  1276 000004DF 09                      		db 9			; .spt
  1277 000004E0 70                      		db 112	; 70h		; .cdire
  1278 000004E1 A005                    		dw 1440	; 2*9*80	; .csec
  1279 000004E3 02                      		db 2			; .spau
  1280 000004E4 02                      		db 2			; .chead
  1281                                  
  1282 000004E5 00                      keyrd_func:	db 0			
  1283 000004E6 01                      keysts_func:	db 1			
  1284 000004E7 00                      printdev:	db 0			; printer device index
  1285                                  
  1286                                  wait_count:	;dw 4 dup(50h)		; retry	counts for printers
  1287 000004E8 5000<rep 4h>            		times 4 dw 50h		; 19/10/2022
  1288                                  
  1289 000004F0 0000                    daycnt:		dw 0			
  1290 000004F2 00                      t_switch:	db 0			; flag for updating daycnt
  1291 000004F3 00                      havecmosclock:	db 0			
  1292 000004F4 13                      base_century:	db 19			
  1293 000004F5 50                      base_year:	db 80			
  1294 000004F6 1F1C1F1E1F1E1F1F1E-     month_tab:	db 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31 
  1294 000004FF 1F1E1F             
  1295 00000502 [FD14]                  bintobcd:	dw bin_to_bcd		; points to bin_to_bcd proc in msinit
  1296 00000504 7000                    		dw 70h ; 17/10/2022	
  1297 00000506 [2C14]                  daycnttoday:	dw daycnt_to_day	; points to daycnt_to_day in msinit
  1298 00000508 7000                    		dw 70h ; 17/10/2022
  1299 0000050A 00                      set_id_flag:	db 0			; flag for getbp routine
  1300 0000050B 464154313220202000      fat_12_id:	db 'FAT12   ',0         
  1301 00000514 464154313620202000      fat_16_id:	db 'FAT16   ',0         
  1302 0000051D 4E4F204E414D452020-     vol_no_name:	db 'NO NAME    ',0      
  1302 00000526 202000             
  1303                                  
  1304 00000529 0000                    temp_h:		dw 0			; temporary for	32 bit calculation
  1305 0000052B 0000                    start_sec_h:	dw 0			; starting sector number high word
  1306 0000052D 0000                    saved_word:	dw 0			; tempory saving place for a word
  1307 0000052F 0000                    multrk_flag:	dw 0			
  1308 00000531 00                      ec35flag:	db 0			; flags	for 3.5	inch disk drives
  1309 00000532 0000                    vretry_cnt:	dw 0			
  1310 00000534 0000                    soft_ecc_cnt:	dw 0			
  1311 00000536 00                      multitrk_format_flag: db 0		; multi	track format request flag
  1312 00000537 0000                    xfer_seg:	dw 0			; temp for transfer segment
  1313                                  
  1314                                  ; variables for msdioctl.asm module
  1315                                  
  1316                                  ; tracktable contains a 4-tuples (c,h,r,n) for each sector in a track
  1317                                  ; c = cylinder number,h = head number,r = sector id,n = bytes per sector
  1318                                  ;	n	bytes per sector
  1319                                  ;      ---	----------------
  1320                                  ;	0	      128
  1321                                  ;	1	      256
  1322                                  ;	2	      512
  1323                                  ;	3	     1024
  1324                                  
  1325                                  ;max_sectors_curr_sup equ 63		; current maximum sec/trk that
  1326                                  ;					; we support (was 40 in dos 3.2)
  1327                                  
  1328 00000539 2400                    sectorspertrack: dw 36			
  1329 0000053B 00000102                tracktable:	db 0, 0, 1, 2		
  1330 0000053F 00000202                		db 0, 0, 2, 2
  1331 00000543 00000302                		db 0, 0, 3, 2
  1332 00000547 00000402                		db 0, 0, 4, 2
  1333 0000054B 00000502                		db 0, 0, 5, 2
  1334 0000054F 00000602                		db 0, 0, 6, 2
  1335 00000553 00000702                		db 0, 0, 7, 2
  1336 00000557 00000802                		db 0, 0, 8, 2
  1337 0000055B 00000902                		db 0, 0, 9, 2
  1338 0000055F 00000A02                		db 0, 0, 10, 2
  1339 00000563 00000B02                		db 0, 0, 11, 2
  1340 00000567 00000C02                		db 0, 0, 12, 2
  1341 0000056B 00000D02                		db 0, 0, 13, 2
  1342 0000056F 00000E02                		db 0, 0, 14, 2
  1343 00000573 00000F02                		db 0, 0, 15, 2
  1344 00000577 00001002                		db 0, 0, 16, 2
  1345 0000057B 00001102                		db 0, 0, 17, 2
  1346 0000057F 00001202                		db 0, 0, 18, 2
  1347 00000583 00001302                		db 0, 0, 19, 2
  1348 00000587 00001402                		db 0, 0, 20, 2
  1349 0000058B 00001502                		db 0, 0, 21, 2
  1350 0000058F 00001602                		db 0, 0, 22, 2
  1351 00000593 00001702                		db 0, 0, 23, 2
  1352 00000597 00001802                		db 0, 0, 24, 2
  1353 0000059B 00001902                		db 0, 0, 25, 2
  1354 0000059F 00001A02                		db 0, 0, 26, 2
  1355 000005A3 00001B02                		db 0, 0, 27, 2
  1356 000005A7 00001C02                		db 0, 0, 28, 2
  1357 000005AB 00001D02                		db 0, 0, 29, 2
  1358 000005AF 00001E02                		db 0, 0, 30, 2
  1359 000005B3 00001F02                		db 0, 0, 31, 2
  1360 000005B7 00002002                		db 0, 0, 32, 2
  1361 000005BB 00002102                		db 0, 0, 33, 2
  1362 000005BF 00002202                		db 0, 0, 34, 2
  1363 000005C3 00002302                		db 0, 0, 35, 2
  1364 000005C7 00002402                		db 0, 0, 36, 2
  1365 000005CB 00<rep 6Ch>             		times 108 db 0		; 19/10/2022
  1366                                  		;db 108 dup(0)		; 4*max_sectors_curr_sup - ($ -	tracktable) dup	(0)
  1367                                  					; times	((4*63)	- 144) db 0
  1368                                  
  1369                                  ;-----------------------------------------------------------------------------
  1370                                  
  1371                                  ; this is a real ugly place to put this
  1372                                  ; it should really go in the bds
  1373                                  
  1374 00000637 00                      mediatype:	db 0			
  1375 00000638 00                      media_set_for_format: db 0		; 1 if we have done an int 13 set media
  1376                                  					; type for format call
  1377 00000639 00                      had_format_error: db 0			; 1 if the previous format operation
  1378                                  					; failed.
  1379                                  
  1380                                  ; temp disk base table. it holds the the current dpt which is then replaced by
  1381                                  ; the one passed by "new roms" before we perform a format operation. the old
  1382                                  ; dpt is restored in restoreolddpt. the first entry (disk_specify_1) is -1 if
  1383                                  ; this table does not contain the previously saved dpt.
  1384                                  		
  1385 0000063A FFFFFFFF                tempdpt:	dd 0FFFFFFFFh ; -1	; temp disk base table
  1386 0000063E FF                      model_byte:	db 0FFh			; model	byte set at init time
  1387 0000063F 00                      secondary_model_byte: db 0
  1388                                  		
  1389 00000640 00                      int19sem:	db 0			; indicate that all int 19
  1390                                  					; initialization is complete
  1391                                  		
  1392                                  ;; we assume the following remain contiguous and their order doesn't change
  1393                                  ;i19_lst:
  1394                                  ;	irp	aa,<02,08,09,0a,0b,0c,0d,0e,70,72,73,74,76,77>
  1395                                  ;	public	int19old&aa
  1396                                  ;		db	aa&h	; store the number as a byte
  1397                                  ;int19old&aa	dd	-1	; original hardware int. vectors for int 19h.
  1398                                  ;	endm
  1399                                  
  1400                                  ; 21/10/2022
  1401                                  
  1402 00000641 02                      i19_lst:	db 2			
  1403                                  					; Int19old&aa
  1404 00000642 FFFFFFFF                int19old02:	dd 0FFFFFFFFh ; -1
  1405 00000646 08                      		db 8
  1406 00000647 FFFFFFFF                int19old08:	dd 0FFFFFFFFh		; original hardware int. vectors for int 19h
  1407 0000064B 09                      		db 9
  1408 0000064C FFFFFFFF                int19old09:	dd 0FFFFFFFFh
  1409 00000650 0A                      		db 0Ah
  1410 00000651 FFFFFFFF                int19old0A:	dd 0FFFFFFFFh
  1411 00000655 0B                      		db 0Bh
  1412 00000656 FFFFFFFF                int19old0B:	dd 0FFFFFFFFh
  1413 0000065A 0C                      		db 0Ch
  1414 0000065B FFFFFFFF                int19old0C:	dd 0FFFFFFFFh
  1415 0000065F 0D                      		db 0Dh
  1416 00000660 FFFFFFFF                int19old0D:	dd 0FFFFFFFFh
  1417 00000664 0E                      		db 0Eh
  1418 00000665 FFFFFFFF                int19old0E:	dd 0FFFFFFFFh
  1419 00000669 70                      		db 70h
  1420 0000066A FFFFFFFF                int19old70:	dd 0FFFFFFFFh
  1421 0000066E 72                      		db 72h
  1422 0000066F FFFFFFFF                int19old72:	dd 0FFFFFFFFh
  1423 00000673 73                      		db 73h
  1424 00000674 FFFFFFFF                int19old73:	dd 0FFFFFFFFh
  1425 00000678 74                      		db 74h
  1426 00000679 FFFFFFFF                int19old74:	dd 0FFFFFFFFh
  1427 0000067D 76                      		db 76h
  1428 0000067E FFFFFFFF                int19old76:	dd 0FFFFFFFFh
  1429 00000682 77                      		db 77h
  1430 00000683 FFFFFFFF                int19old77:	dd 0FFFFFFFFh
  1431                                  
  1432                                  ;num_i19	equ ($ - i19_lst)/5  ; 18/03/2019
  1433                                  
  1434                                  ;-----------------------------------------------------------------------------
  1435                                  
  1436 00000687 [5403]                  dskdrvs:	dw fdrive1	
  1437 00000689 [B803]                  		dw fdrive2
  1438 0000068B [1C04]                  		dw fdrive3
  1439 0000068D [8004]                  		dw fdrive4
  1440                                  
  1441                                  ;M011 -- made all hard drive stuff variable
  1442                                  		;dw 22 dup(0)		; up to	26 drives for mini disks
  1443 0000068F 0000<rep 16h>           		times 22 dw 0	; 19/10/2022
  1444                                  
  1445                                  ;-----------------------------------------------------------------------------
  1446                                  
  1447                                  ; 01/10/2022 - Retro DOS v4.0 (MSDOS v5.0 -actual-)
  1448                                  ; 30/12/2018 - Retro DOS v4.0 (MSDOS v6.21 -draft-)
  1449                                  ; 01/06/2018 - Retro DOS v3.0 (MSDOS v3.3)
  1450                                  
  1451                                  ;variables for dynamic relocatable modules
  1452                                  ;these should be stay resident.
  1453                                  
  1454 000006BB 00000000                int6c_ret_addr:	dd 0			; return address from int 6Ch
  1455                                  					; for p12 machine
  1456                                  
  1457                                  ; data structures for real-time date and time
  1458                                  			
  1459 000006BF 00000000                bin_date_time:	db 0, 0, 0, 0		; century, year, month,	day
  1460                                  
  1461 000006C3 0000                    month_table:	dw 0			; january
  1462 000006C5 1F00                    		dw 31			; february
  1463 000006C7 3B00                    		dw 59
  1464 000006C9 5A00                    		dw 90
  1465 000006CB 7800                    		dw 120
  1466 000006CD 9700                    		dw 151
  1467 000006CF B500                    		dw 181
  1468 000006D1 D400                    		dw 212
  1469 000006D3 F300                    		dw 243
  1470 000006D5 1101                    		dw 273
  1471 000006D7 3001                    		dw 304
  1472 000006D9 4E01                    		dw 334			; december
  1473                                  
  1474 000006DB 0000                    daycnt2:	dw 0			
  1475 000006DD 00                      feb29:		db 0			; february 29 in a leap	year flag
  1476                                  
  1477                                  ;-----------------------------------------------------------------------------
  1478                                  ;
  1479                                  ; 01/10/2022 - (New/Actual) Retro DOS v4.0 (will run as MSDOS 5.0)	
  1480                                  ; by Erdogan Tan (Istanbul) ! free source code !
  1481                                  ; 31/12/2018 - (old/draft) Retro DOS v4.0 (will/would run as MSDOS 6.21)
  1482                                  
  1483                                  ; ----------------------------------------------------------------------------
  1484                                  
  1485                                  ;************************************************************************
  1486                                  ;*									*
  1487                                  ;*	Entry points into Bios_Code routines. The segment values	*
  1488                                  ;*	  are plugged in by seg_reinit.					*
  1489                                  ;*									*
  1490                                  ;************************************************************************
  1491                                  
  1492                                  ; 01/10/2022 - Retro DOS v4.0 - IO.SYS (MSDOS v5.0)
  1493                                  ; BIOSCODE_SEGMENT equ 2C7h
  1494                                  ; BIOSDATA_SEGMENT equ 70h ; KERNEL_SEGMENT equ 70h
  1495                                  
  1496                                  ; 01/10/2022 - Erdogan Tan
  1497                                  ; (disassembled MSDOS 5.0 IO.SYS code here with fixed function/routine
  1498                                  ;  addresses, they will be changed to table labels later)
  1499                                  
  1500                                  ; 09/12/2022
  1501                                  %if 0
  1502                                  cdev:		dw 43h,	2C7h		; chardev_entry
  1503                                  					; at 2C7h:43h =	70h:25B3h
  1504                                  ttticks:	dw 396h, 2C7h		; time_to_ticks
  1505                                  					; at 2C7h:396h = 70h:2906h
  1506                                  bcode_i2f:	dw 1302h, 2C7h		; i2f_handler
  1507                                  					; at 2C7h:1302h	= 70h:3872h
  1508                                  i13x:		dw 154Bh, 2C7h		; i13z
  1509                                  					; at 2C7h:154Bh	= 70h:3ABBh
  1510                                  %endif
  1511                                  
  1512                                  ; 09/12/2022
  1513 000006DE [4300]A002              cdev:		dw chardev_entry, IOSYSCODESEG
  1514 000006E2 [8B03]A002              ttticks:	dw time_to_ticks, IOSYSCODESEG
  1515 000006E6 [B912]A002              bcode_i2f:	dw i2f_handler, IOSYSCODESEG
  1516 000006EA [F614]A002              i13x:		dw i13z, IOSYSCODESEG
  1517                                  
  1518                                  end_BC_entries:	; 15/10/2022
  1519                                  
  1520                                  ;************************************************************************
  1521                                  ;*									*
  1522                                  ;*	cbreak - break key handling - simply set altah=3 and iret	*
  1523                                  ;*									*
  1524                                  ;************************************************************************
  1525                                  
  1526                                  cbreak:					
  1527 000006EE 2EC606[0C00]03          		mov	byte [cs:altah], 3 ; break key handling
  1528                                  					; indicate break key set
  1529                                  intret:					
  1530 000006F4 CF                      		iret
  1531                                  
  1532                                  ; =============== S U B	R O U T	I N E ========================================
  1533                                  
  1534                                  
  1535                                  ;************************************************************************
  1536                                  ;*									*
  1537                                  ;*	strategy - store es:bx (device driver request packet)		*
  1538                                  ;*		     away at [ptrsav] for next driver function call	*
  1539                                  ;*									*
  1540                                  ;************************************************************************
  1541                                  
  1542                                  strategy:	; proc far		
  1543 000006F5 2E891E[1200]            		mov	[cs:ptrsav], bx ; store es:bx (device driver request packet)
  1544                                  					; away at [ptrsav] for next driver function call
  1545 000006FA 2E8C06[1400]            		mov	[cs:ptrsav+2], es
  1546 000006FF CB                      		retf
  1547                                  
  1548                                  ; ----------------------------------------------------------------------------
  1549                                  
  1550                                  ;************************************************************************
  1551                                  ;*									*
  1552                                  ;*	device driver entry points. these are the initial		*
  1553                                  ;*	  'interrupt' hooks out of the device driver chain.		*
  1554                                  ;*	  in the case of our resident drivers, they'll just		*
  1555                                  ;*	  stick a fake return address on the stack which		*
  1556                                  ;*	  points to dispatch tables and possibly some unit		*
  1557                                  ;*	  numbers, and then call through a common entry point		*
  1558                                  ;*	  which can take care of a20 switching				*
  1559                                  ;*									*
  1560                                  ;************************************************************************
  1561                                  
  1562                                  ; 01/10/2022 - Erdogan Tan
  1563                                  ; (disassembled MSDOS 5.0 IO.SYS code here with fixed table
  1564                                  ;  addresses, they will be changed to table labels later)
  1565                                  
  1566                                  ; 09/12/2022
  1567                                  
  1568                                  con_entry:				
  1569 00000700 E84000                  		call	cdev_entry
  1570                                  ; ----------------------------------------------------------------------------
  1571                                  		;dw 0E4h		; con_table
  1572 00000703 [E300]                  		dw con_table	
  1573                                  					; 2C7h:0E4h = 70h:2654h
  1574                                  ; ----------------------------------------------------------------------------
  1575                                  
  1576                                  prn0_entry:				
  1577 00000705 E83B00                  		call	cdev_entry
  1578                                  ; ----------------------------------------------------------------------------
  1579                                  		;dw 0FBh		; prn_table
  1580 00000708 [FA00]                  		dw prn_table
  1581                                  					; 2C7h:0FBh = 70h:266Bh
  1582 0000070A 0000                    		db 0, 0
  1583                                  ; ----------------------------------------------------------------------------
  1584                                  
  1585                                  prn1_entry:				
  1586 0000070C E83400                  		call	cdev_entry
  1587                                  ; ----------------------------------------------------------------------------
  1588                                  		;dw 0FBh		; prn_table
  1589 0000070F [FA00]                  		dw prn_table
  1590                                  					; 2C7h:0FBh = 70h:266Bh
  1591 00000711 0001                    		db 0, 1
  1592                                  ; ----------------------------------------------------------------------------
  1593                                  
  1594                                  prn2_entry:				
  1595 00000713 E82D00                  		call	cdev_entry
  1596                                  ; ----------------------------------------------------------------------------
  1597                                  		;dw 0FBh		; prn_table
  1598 00000716 [FA00]                  		dw prn_table
  1599                                  					; 2C7h:0FBh = 70h:266Bh
  1600 00000718 0102                    		db 1, 2
  1601                                  ; ----------------------------------------------------------------------------
  1602                                  
  1603                                  prn3_entry:				
  1604 0000071A E82600                  		call	cdev_entry
  1605                                  ; ----------------------------------------------------------------------------
  1606                                  		;dw 0FBh		; prn_table
  1607 0000071D [FA00]                  		dw prn_table
  1608                                  					; 2C7h:0FBh = 70h:266Bh
  1609 0000071F 0203                    		db 2, 3
  1610                                  ; ----------------------------------------------------------------------------
  1611                                  
  1612                                  aux0_entry:				
  1613 00000721 E81F00                  		call	cdev_entry
  1614                                  ; ----------------------------------------------------------------------------
  1615                                  		;dw 130h		; aux_table
  1616 00000724 [2F01]                  		dw aux_table
  1617                                  					; 2C7h:130h = 70h:26A0h
  1618 00000726 00                      		db 0
  1619                                  ; ----------------------------------------------------------------------------
  1620                                  
  1621                                  aux1_entry:				
  1622 00000727 E81900                  		call	cdev_entry
  1623                                  ; ----------------------------------------------------------------------------
  1624                                  		;dw 130h		; aux_table
  1625 0000072A [2F01]                  		dw aux_table
  1626                                  					; 2C7h:130h = 70h:26A0h
  1627 0000072C 01                      		db 1
  1628                                  ; ----------------------------------------------------------------------------
  1629                                  
  1630                                  aux2_entry:				
  1631 0000072D E81300                  		call	cdev_entry
  1632                                  ; ----------------------------------------------------------------------------
  1633                                  		;dw 130h		; aux_table
  1634 00000730 [2F01]                  		dw aux_table
  1635                                  					; 2C7h:130h = 70h:26A0h
  1636 00000732 02                      		db 2
  1637                                  ; ----------------------------------------------------------------------------
  1638                                  
  1639                                  aux3_entry:				
  1640 00000733 E80D00                  		call	cdev_entry
  1641                                  ; ----------------------------------------------------------------------------
  1642                                  		;dw 130h		; aux_table
  1643 00000736 [2F01]                  		dw aux_table
  1644                                  					; 2C7h:130h = 70h:26A0h
  1645 00000738 03                      		db 3
  1646                                  ; ----------------------------------------------------------------------------
  1647                                  
  1648                                  tim_entry:				
  1649 00000739 E80700                  		call	cdev_entry
  1650                                  ; ----------------------------------------------------------------------------
  1651                                  		;dw 147h		; tim_table
  1652 0000073C [4601]                  		dw tim_table
  1653                                  					; 2C7h:147h = 70h:26B7h
  1654                                  ; ----------------------------------------------------------------------------
  1655                                  
  1656                                  ; 15/10/2022
  1657                                  ;DSKTBL	equ dsktbl - DOSBIOSEG_2C7h	; dsktbl - 2C70h
  1658                                  ; 09/12/2022
  1659                                  DSKTBL equ dsktbl
  1660                                  
  1661                                  dsk_entry:				
  1662 0000073E E80200                  		call	cdev_entry
  1663                                  ; ----------------------------------------------------------------------------
  1664                                  		;dw 4A2h		; dsktbl
  1665 00000741 [9604]                  		dw DSKTBL		; 09/12/2022
  1666                                  					; 2C7h:4A2h = 70h:2A12h
  1667                                  
  1668                                  ; =============== S U B	R O U T	I N E ========================================
  1669                                  
  1670                                  ;************************************************************************
  1671                                  ;*									*
  1672                                  ;*	Ensure A20 is enabled before jumping into code in HMA.		*
  1673                                  ;*	This code assumes that if Segment of Device request packet is	*
  1674                                  ;*	DOS DATA segment then the Device request came from DOS & that	*
  1675                                  ;*	A20 is already on.						*
  1676                                  ;*									*
  1677                                  ;************************************************************************
  1678                                  
  1679                                  cdev_entry:	; proc near		
  1680 00000743 2E803E[0D00]00          		cmp	byte [cs:inHMA], 0
  1681 00000749 740D                    		jz	short ce_enter_codeseg
  1682                                  				; optimized for DOS in HMA
  1683 0000074B 50                      		push	ax
  1684 0000074C 2EA1[0300]              		mov	ax, [cs:DosDataSg]
  1685 00000750 2E3906[1400]            		cmp	[cs:ptrsav+2], ax
  1686 00000755 58                      		pop	ax
  1687 00000756 7505                    		jnz	short not_from_dos
  1688                                  				; jump is coded this way to fall thru
  1689                                  				; in 99.99% of the cases
  1690                                  ce_enter_codeseg:
  1691 00000758 2EFF2E[DE06]            		jmp	far [cs:cdev]			
  1692                                  		;jmp	dword ptr cs:cdev
  1693                                  ;-----------------------------------------------------------------------------
  1694                                  
  1695                                  not_from_dos:				
  1696 0000075D E86200                  		call	EnsureA20On
  1697 00000760 EBF6                    		jmp	short ce_enter_codeseg
  1698                                  
  1699                                  ;************************************************************************
  1700                                  ;*									*
  1701                                  ;*	outchr - this is our int 29h handler. it writes the		*
  1702                                  ;*	   character in al on the display using int 10h ttywrite	*
  1703                                  ;*									*
  1704                                  ;************************************************************************
  1705                                  
  1706                                  outchr:					
  1707 00000762 50                      		push	ax		; int 29h handler
  1708 00000763 56                      		push	si
  1709 00000764 57                      		push	di
  1710 00000765 55                      		push	bp
  1711 00000766 53                      		push	bx
  1712 00000767 B40E                    		mov	ah, 0Eh
  1713 00000769 BB0700                  		mov	bx, 7
  1714 0000076C CD10                    		int	10h		; - VIDEO - WRITE CHARACTER AND	ADVANCE	CURSOR (TTY WRITE)
  1715                                  					; AL = character, BH = display page (alpha modes)
  1716                                  					; BL = foreground color	(graphics modes)
  1717 0000076E 5B                      		pop	bx
  1718 0000076F 5D                      		pop	bp
  1719 00000770 5F                      		pop	di
  1720 00000771 5E                      		pop	si
  1721 00000772 58                      		pop	ax
  1722 00000773 CF                      		iret
  1723                                  ;-----------------------------------------------------------------------------
  1724                                  
  1725                                  ;************************************************************************
  1726                                  ;*									*
  1727                                  ;*	block13 - our int13 hooker					*
  1728                                  ;*									*
  1729                                  ;************************************************************************
  1730                                  
  1731                                  block13:				
  1732 00000774 2E803E[0D00]00          		cmp	byte [cs:inHMA], 0
  1733 0000077A 7408                    		jz	short skipa20
  1734 0000077C E85400                  		call	IsA20Off	; A20 Off?
  1735 0000077F 7503                    		jnz	short skipa20
  1736 00000781 E84300                  		call	EnableA20	; assure a20 enabled
  1737                                  
  1738                                  skipa20:				
  1739 00000784 2E8C1E[1C00]            		mov	[cs:i13_ds], ds	; save caller's ds for call-through
  1740 00000789 9C                      		pushf			; fake interrupt
  1741 0000078A 2EFF1E[EA06]            		call	far [cs:i13x]
  1742                                  		;call	dword ptr cs:i13x
  1743                                  					; call through Bios_Code entry table
  1744 0000078F 2E8E1E[1C00]            		mov	ds, [cs:i13_ds]
  1745 00000794 CA0200                  		retf	2
  1746                                  
  1747                                  ; =============== S U B	R O U T	I N E =======================================
  1748                                  
  1749                                  ; the int13 hook calls back here to call-through to the ROM
  1750                                  ; this is necessary because some people have extended their
  1751                                  ; ROM BIOSs to use ds as a parameter/result register and
  1752                                  ; our int13 hook relies heavily on ds to access Bios_Data
  1753                                  
  1754                                  call_orig13:	; proc far		
  1755 00000797 8E1E[1C00]              		mov	ds, [i13_ds]	; get caller's ds register
  1756 0000079B 9C                      		pushf			; simulate an int13
  1757 0000079C 2EFF1E[B400]            		call	far [cs:Orig13]
  1758                                  		;call	cs:Orig13
  1759 000007A1 2E8C1E[1C00]            		mov	[cs:i13_ds], ds
  1760 000007A6 0E                      		push	cs
  1761 000007A7 1F                      		pop	ds		; restore ds ->	Bios_Data before return
  1762                                  
  1763 000007A8 9C                      		pushf
  1764                                  		; 10/12/2022
  1765                                  		; ds = cs
  1766 000007A9 803E[0D00]00            		cmp	byte [inHMA], 0	; 16/10/2022
  1767                                  		;cmp	byte [cs:inHMA], 0
  1768 000007AE 7408                    		jz	short corig13_popf_retf
  1769 000007B0 E82000                  		call	IsA20Off
  1770 000007B3 7503                    		jnz	short corig13_popf_retf
  1771 000007B5 E80F00                  		call	EnableA20
  1772                                  corig13_popf_retf:			
  1773 000007B8 9D                      		popf
  1774 000007B9 CB                      		retf
  1775                                  
  1776                                  ;-----------------------------------------------------------------------------
  1777                                  
  1778                                  ; BIOSDATA:07BBh (MSDOS 6.21, IO.SYS)
  1779                                  ; BIOSDATA:07BBh (MSDOS 5.0, IO.SYS) ; 16/10/2022
  1780                                  
  1781 000007BA 9000FFFF                HiMem:		dd 0FFFF0090h		
  1782 000007BE 80000000                LoMem:		dd 80h
  1783                                  
  1784                                  ; ----------------------------------------------------------------------------			
  1785                                  
  1786                                  ; =============== S U B	R O U T	I N E ========================================
  1787                                  
  1788                                  
  1789                                  ;************************************************************************
  1790                                  ;*									*
  1791                                  ;*	EnsureA20On - ensure that a20 is enabled if we're running	*
  1792                                  ;*	  in the HMA before interrupt entry points into Bios_Code	*
  1793                                  ;*									*
  1794                                  ;************************************************************************
  1795                                  
  1796                                  EnsureA20On:	; proc near		
  1797 000007C2 E80E00                  		call	IsA20Off
  1798                                  		;jz	short EnableA20
  1799                                  		;retn
  1800                                  		; 18/12/2022
  1801 000007C5 750B                    		jnz	short A20On_retn	
  1802                                  
  1803                                  ; =============== S U B	R O U T	I N E ========================================
  1804                                  
  1805                                  
  1806                                  EnableA20:	; proc near		
  1807 000007C7 50                      		push	ax
  1808 000007C8 53                      		push	bx
  1809 000007C9 B405                    		mov	ah, 5	 ; local enable a20
  1810                                  		;call	cs:xms
  1811 000007CB 2EFF1E[0E00]            		call	far [cs:xms] ; 16/10/2022
  1812 000007D0 5B                      		pop	bx
  1813 000007D1 58                      		pop	ax
  1814                                  A20On_retn:	; 18/12/2022	
  1815 000007D2 C3                      		retn
  1816                                  
  1817                                  ; =============== S U B	R O U T	I N E ========================================
  1818                                  
  1819                                  
  1820                                  IsA20Off:	; proc near		
  1821 000007D3 1E                      		push	ds
  1822 000007D4 06                      		push	es
  1823 000007D5 51                      		push	cx
  1824 000007D6 56                      		push	si
  1825 000007D7 57                      		push	di
  1826 000007D8 2EC536[BA07]            		lds	si, [cs:HiMem]
  1827 000007DD 2EC43E[BE07]            		les	di, [cs:LoMem]
  1828 000007E2 B90800                  		mov	cx, 8
  1829 000007E5 F3A7                    		repe cmpsw
  1830 000007E7 5F                      		pop	di
  1831 000007E8 5E                      		pop	si
  1832 000007E9 59                      		pop	cx
  1833 000007EA 07                      		pop	es
  1834 000007EB 1F                      		pop	ds
  1835 000007EC C3                      		retn
  1836                                  
  1837                                  ; ----------------------------------------------------------------------------
  1838                                  
  1839                                  DisableA20:
  1840 000007ED 50                      		push	ax
  1841 000007EE 53                      		push	bx
  1842 000007EF B406                    		mov	ah, 6		; local disable A20
  1843 000007F1 2EFF1E[0E00]            		call	far [cs:xms]
  1844                                  		;call	cs:xms
  1845 000007F6 5B                      		pop	bx
  1846 000007F7 58                      		pop	ax
  1847 000007F8 C3                      		retn
  1848                                  
  1849                                  ; ----------------------------------------------------------------------------
  1850                                  
  1851                                  ;************************************************************************
  1852                                  ;*									*
  1853                                  ;*	int19 - bootstrap interrupt -- we must restore a bunch of the	*
  1854                                  ;*	  interrupt vectors before resuming the original int19 code	*
  1855                                  ;*									*
  1856                                  ;************************************************************************
  1857                                  
  1858                                  int19:					
  1859 000007F9 0E                      		push	cs
  1860 000007FA 1F                      		pop	ds
  1861 000007FB 8E06[1A00]              		mov	es, [zeroseg]	; 16/10/2022
  1862 000007FF B90500                  		mov	cx, 5		; NUMROMVECTORS
  1863                                  		;mov	si, offset RomVectors
  1864 00000802 BE[0001]                		mov	si, RomVectors	; 19/10/2022
  1865                                  next_int:				
  1866 00000805 AC                      		lodsb			; get int number
  1867 00000806 98                      		cbw			; assume < 128
  1868 00000807 D1E0                    		shl	ax, 1
  1869 00000809 D1E0                    		shl	ax, 1		; int *	4
  1870 0000080B 89C7                    		mov	di, ax
  1871 0000080D AD                      		lodsw
  1872 0000080E AB                      		stosw
  1873 0000080F AD                      		lodsw
  1874 00000810 AB                      		stosw			; install the saved vector
  1875 00000811 E2F2                    		loop	next_int
  1876 00000813 803E[4006]00            		cmp	byte [int19sem], 0 ; 19/10/2022
  1877 00000818 7422                    		jz	short doint19
  1878 0000081A BE[4106]                		mov	si, i19_lst	; stacks code has changed these hardware interrupt vectors
  1879                                  					; stkinit in sysinit1 will initialize int19oldxx values
  1880 0000081D B90E00                  		mov	cx, 14		; num_i19
  1881                                  
  1882                                  i19_restore_loop:			
  1883 00000820 AC                      		lodsb			; get interrupt	number
  1884 00000821 98                      		cbw			; assume < 128
  1885 00000822 89C7                    		mov	di, ax
  1886 00000824 AD                      		lodsw			; get original vector offset
  1887 00000825 89C3                    		mov	bx, ax		; save it
  1888 00000827 AD                      		lodsw
  1889 00000828 83FBFF                  		cmp	bx, 0FFFFh	; check	for 0ffffh (unlikely segment)
  1890 0000082B 740D                    		jz	short i19_restor_1 ; opt no need to check selector too
  1891 0000082D 83F8FF                  		cmp	ax, 0FFFFh	; opt 0ffffh is	unlikely offset
  1892 00000830 7408                    		jz	short i19_restor_1
  1893 00000832 01FF                    		add	di, di
  1894 00000834 01FF                    		add	di, di
  1895 00000836 93                      		xchg	ax, bx
  1896 00000837 AB                      		stosw
  1897 00000838 93                      		xchg	ax, bx
  1898 00000839 AB                      		stosw			; put the vector back
  1899                                  
  1900                                  i19_restor_1:				
  1901 0000083A E2E4                    		loop	i19_restore_loop
  1902                                  
  1903                                  doint19:				
  1904 0000083C 803E[0D00]00            		cmp	byte [inHMA], 0	; ; Is dos running from	HMA
  1905 00000841 7403                    		jz	short SkipVDisk
  1906 00000843 E83000                  		call	EraseVDiskHead	; Then erase our VDISK header at 1MB boundary
  1907                                  					; Some m/c's (AST 386 & HP QS/16 do not clear
  1908                                  					; the memory above 1MB during a	warm boot.
  1909                                  SkipVDisk:				
  1910 00000846 CD19                    		int	19h		; DISK BOOT
  1911                                  					; causes reboot	of disk	system
  1912                                  
  1913                                  ; =============== S U B	R O U T	I N E ========================================
  1914                                  
  1915                                  ;-----------------------------------------------------------------------------
  1916                                  ;
  1917                                  ; procedure : int15
  1918                                  ;
  1919                                  ;		Int15 handler for recognizing ctrl-alt-del seq
  1920                                  ;		If it recognizes ctrl-alt-del and if DOS was
  1921                                  ;		is running high, it Erases the VDISK header
  1922                                  ;		present at 1MB boundary
  1923                                  ;
  1924                                  ;-----------------------------------------------------------------------------
  1925                                  
  1926                                  ; 16/10/2022
  1927                                  ;DELKEY		equ	53h
  1928                                  ;ROMDATASEG	equ	40h
  1929                                  KBFLAG		equ	17h
  1930                                  ;CTRLSTATE	equ	04h
  1931                                  ;ALTSTATE	equ	08h
  1932                                  
  1933                                  Int15:		; proc near		
  1934                                  		;cmp	ax, 4F00h+DELKEY
  1935 00000848 3D534F                  		cmp	ax, 4F53h	; del keystroke ?
  1936 0000084B 7405                    		jz	short int15_1
  1937 0000084D 2EFF2E[0B01]            		jmp	far [cs:Old15]	; 16/10/2022
  1938                                  		;jmp	cs:Old15
  1939                                  ; ----------------------------------------------------------------------------
  1940                                  
  1941                                  int15_1:				
  1942 00000852 1E                      		push	ds
  1943 00000853 50                      		push	ax
  1944 00000854 B84000                  		mov	ax, 40h		; ROMDATASEG
  1945 00000857 8ED8                    		mov	ds, ax
  1946                                  		;mov	al, ds:17h	; [KBFLAG]
  1947                                  		; 16/10/2022
  1948 00000859 A01700                  		mov	al, [KBFLAG]
  1949 0000085C 240C                    		and	al, 0Ch		; (CTRLSTATE | ALTSTATE)
  1950 0000085E 3C0C                    		cmp	al, 0Ch		; (CTRLSTATE | ALTSTATE)
  1951 00000860 750C                    		jnz	short int15_2
  1952 00000862 0E                      		push	cs
  1953 00000863 1F                      		pop	ds
  1954 00000864 803E[0D00]00            		cmp	byte [inHMA], 0	; is DOS running from HMA
  1955 00000869 7403                    		jz	short int15_2
  1956 0000086B E80800                  		call	EraseVDiskHead
  1957                                  int15_2:				
  1958 0000086E 58                      		pop	ax
  1959 0000086F 1F                      		pop	ds
  1960 00000870 F9                      		stc
  1961 00000871 2EFF2E[0B01]            		jmp	far [cs:Old15]	; 16/10/2022
  1962                                  		;jmp	cs:Old15
  1963                                  
  1964                                  ; =============== S U B	R O U T	I N E ========================================
  1965                                  
  1966                                  ;-----------------------------------------------------------------------------
  1967                                  ;
  1968                                  ; procedure : EraseVDiskHead
  1969                                  ;
  1970                                  ;		Erases the VDisk Header present in the 1MB boundary
  1971                                  ;
  1972                                  ;-----------------------------------------------------------------------------
  1973                                  
  1974                                  EraseVDiskHead:	; proc near		
  1975 00000876 50                      		push	ax
  1976 00000877 51                      		push	cx
  1977 00000878 57                      		push	di
  1978 00000879 06                      		push	es
  1979 0000087A E845FF                  		call	EnsureA20On
  1980 0000087D B8FFFF                  		mov	ax, 0FFFFh	; HMA seg
  1981 00000880 8EC0                    		mov	es, ax
  1982 00000882 BF1000                  		mov	di, 10h		; point	to VDISK header
  1983 00000885 B91000                  		mov	cx, 10h		; size of vdisk	header
  1984 00000888 31C0                    		xor	ax, ax
  1985 0000088A F3AB                    		rep stosw		; clear	it
  1986 0000088C 07                      		pop	es
  1987 0000088D 5F                      		pop	di
  1988 0000088E 59                      		pop	cx
  1989 0000088F 58                      		pop	ax
  1990 00000890 C3                      		retn
  1991                                  
  1992                                  ; ----------------------------------------------------------------------------
  1993                                  
  1994                                  ;************************************************************************
  1995                                  ;*									*
  1996                                  ;*	the int2f handler chains up to Bios_Code through here.		*
  1997                                  ;*	  it returns through one of the three functions that follow.	*
  1998                                  ;*	  notice that we'll assume we're being entered from DOS, so	*
  1999                                  ;*	  that we're guaranteed to be A20 enabled if needed		*
  2000                                  ;*									*
  2001                                  ;************************************************************************
  2002                                  
  2003                                  int_2f:		
  2004 00000891 2EFF2E[E606]            		jmp	far [cs:bcode_i2f] ; 16/10/2022			
  2005                                  		;jmp	dword ptr cs:bcode_i2f ; far [cs:bcode_i2f]
  2006                                  
  2007                                  ; ----------------------------------------------------------------------------
  2008                                  
  2009                                  ; re-enter here to transition out of hma mode and jmp to dsk_entry
  2010                                  ; note:  is it really necessary to transiton out and then back in?
  2011                                  ;	 It's not as if this is a really speed critical function.
  2012                                  ;	 might as well do whatever's most compact.
  2013                                  
  2014                                  i2f_dskentry:				
  2015 00000896 E9A5FE                  		jmp	dsk_entry
  2016                                  
  2017                                  ; ----------------------------------------------------------------------------
  2018                                  
  2019                                  ;************************************************************************
  2020                                  ;*									*
  2021                                  ;*	re_init - called back by sysinit after a bunch of stuff		*
  2022                                  ;*		is done. presently does nothing. affects no		*
  2023                                  ;*		registers!						*
  2024                                  ;*									*
  2025                                  ;************************************************************************
  2026                                  
  2027                                  ; 09/12/2022
  2028                                  ; re_init_:
  2029                                  re_init:				; called back by sysinit after
  2030 00000899 CB                      		retf			; a bunch of stuff is done.
  2031                                  					; presently does nothing
  2032                                  
  2033                                  ; ----------------------------------------------------------------------------
  2034                                  
  2035                                  ;SR; WIN386 support
  2036                                  
  2037                                  ; WIN386 instance data structure
  2038                                  ;
  2039                                  ; Here is a Win386 startup info structure which we set up and to which
  2040                                  ; we return a pointer when Win386 initializes.
  2041                                  
  2042 0000089A 0300                    Win386_SI:	db 3, 0			; SI_Version
  2043                                  					; Startup Info for Win386
  2044 0000089C 00000000                SI_Next:	dd 0			; pointer to next info structure
  2045 000008A0 00000000                		dd 0			; a field we don't need
  2046 000008A4 00000000                		dd 0			; another field	we don't need
  2047 000008A8 [AC08]                  SI_Instance:	dw Instance_Table
  2048 000008AA 7000                    		dw 70h	; Bios_Data	; far pointer to instance table
  2049                                  
  2050                                  ; This table gives Win386 the instance data in the BIOS and ROM-BIOS data
  2051                                  ; areas. Note that the address and size of the hardware stacks must
  2052                                  ; be calculated and inserted at boot time.
  2053                                  
  2054 000008AC 00005000                Instance_Table:	dw 0, 50h		; print	screen status...
  2055 000008B0 0200                    		dw 2			; ... 2	bytes
  2056 000008B2 0E005000                		dw 0Eh,	50h		; ROM Basic data...
  2057 000008B6 1400                    		dw 14h			; ... 14H bytes
  2058 000008B8 [0C00]                  		dw altah		; a con	device buffer...
  2059 000008BA 7000                    		dw 70h			; Bios_Data segment
  2060 000008BC 0100                    		dw 1			; ... 1 byte
  2061                                  
  2062                                  NextStack:
  2063                                  
  2064                                  ; NOTE:  If stacks are disabled by STACKS=0,0, the following
  2065                                  ;	instance items WILL NOT be filled in by SYSINIT.
  2066                                  ;	That's just fine as long as these are the last items
  2067                                  ;	in the instance list since the first item is initialized
  2068                                  ;	to 0000 at load time.
  2069                                  
  2070 000008BE 00000000                		dw 0, 0			; pointer to next stack	to be used...
  2071 000008C2 0200                    		dw 2			; ... 2 bytes
  2072 000008C4 00000000                IT_StackLoc:	dd 0			; location of hardware stacks
  2073 000008C8 0000                    IT_StackSize:	dw 0			; size of hardware stacks
  2074 000008CA 00000000                		dd 0			; terminate the	instance table
  2075                                  
  2076                                  					;SR;
  2077 000008CE 00                      IsWin386:	db 0			; Flag to indicate whether
  2078                                  					; Win386 is running or not
  2079                                  ;-----------------------------------------------------------------------------
  2080                                  
  2081                                  ;This routine was originally in BIOS_CODE but this causes a lot of problems
  2082                                  ;when we call it including checking of A20. The code being only about 
  2083                                  ;30 bytes, we might as well put it in BIOS_DATA
  2084                                  
  2085                                  V86_Crit_SetFocus:			
  2086 000008CF 57                      		push	di
  2087 000008D0 06                      		push	es
  2088 000008D1 53                      		push	bx
  2089 000008D2 50                      		push	ax
  2090 000008D3 31FF                    		xor	di, di
  2091 000008D5 8EC7                    		mov	es, di
  2092 000008D7 BB1500                  		mov	bx, 15h		; Device ID of DOSMGR device
  2093 000008DA B88416                  		mov	ax, 1684h	; Get API entry	point
  2094 000008DD CD2F                    		int	2Fh		; - Multiplex -	MS WINDOWS - GET DEVICE	API ENTRY POINT
  2095                                  					; BX = virtual device (VxD) ID,	ES:DI =	0000h:0000h
  2096                                  					; Return: ES:DI	-> VxD API entry point,	or 0:0 if the VxD does not support an API
  2097 000008DF 8CC0                    		mov	ax, es
  2098 000008E1 09F8                    		or	ax, di
  2099 000008E3 740B                    		jz	short Skip	; Here,	es:di is address of API	routine.
  2100                                  					; Set up stack frame to	simulate a call.
  2101 000008E5 0E                      		push	cs
  2102                                  		;mov	ax, offset Skip
  2103 000008E6 B8[F008]                		mov	ax, Skip
  2104 000008E9 50                      		push	ax
  2105 000008EA 06                      		push	es
  2106 000008EB 57                      		push	di		; API far call address
  2107 000008EC B80100                  		mov	ax, 1		; SetFocus function number
  2108 000008EF CB                      		retf			; do the call
  2109                                  ;-----------------------------------------------------------------------------
  2110                                  
  2111                                  Skip:					
  2112 000008F0 58                      		pop	ax
  2113 000008F1 5B                      		pop	bx
  2114 000008F2 07                      		pop	es
  2115 000008F3 5F                      		pop	di
  2116 000008F4 CB                      		retf
  2117                                  
  2118                                  ;End WIN386 support
  2119                                  
  2120                                  ; ----------------------------------------------------------------------------
  2121                                  
  2122                                  ; 17/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
  2123                                  
  2124                                  ; 09/12/2022
  2125                                  ;SYSINITSEG	equ 46Dh  ; SYSINIT segment
  2126                                  ;DOSLOADSEG	equ 83Fh  ; MSDOS.SYS (kernel) loading segment		
  2127                                  ; (followings are in sysinit segment)
  2128                                  ;FTryToMovDOSHi	equ 0A84h ; (procedure in SYSINIT segment)
  2129                                  FTRYTOMOVDOSHI	equ FTryToMovDOSHi ; SYSINIT section
  2130                                  ;DEVICELIST	equ 273h
  2131                                  DEVICELIST	equ DEVICE_LIST	; SYSINIT section 	
  2132                                  ;MEMORYSIZE	equ 292h	
  2133                                  MEMORYSIZE	equ MEMORY_SIZE	; SYSINIT section
  2134                                  ;DEFAULTDRIVE	equ 296h
  2135                                  DEFAULTDRIVE	equ DEFAULT_DRIVE ; SYSINIT section
  2136                                  ;;currentdoslocation equ 271h
  2137                                  ;CURRENTDOSLOCATION equ 271h
  2138                                  CURRENTDOSLOCATION equ CURRENT_DOS_LOCATION  ; SYSINIT section
  2139                                  ;SYSINITSTART	equ 267h
  2140                                  SYSINITSTART	equ SYSINIT  ; SYSINIT section
  2141                                  ; 18/10/2022
  2142                                  ;toomanydrivesflag equ 3FFh 
  2143                                  TOOMANYDRIVESFLAG equ toomanydrivesflag ; SYSINIT section	
  2144                                  
  2145                                  ; ----------------------------------------------------------------------------
  2146                                  
  2147 000008F5 FFFF                    FreeHMAPtr:	dw 0FFFFh		
  2148                                  ;MoveDOSIntoHMA: dd 46D0A84h 		; FTryToMovDOSHi
  2149                                  					; (procedure in	SYSINIT	segment)
  2150                                  ; 17/10/2022
  2151 000008F7 [210A]                  MoveDOSIntoHMA:	dw FTRYTOMOVDOSHI	; 09/12/2022
  2152 000008F9 4004                    		dw SYSINITSEG	
  2153                                  
  2154                                  ;SR;
  2155                                  ; A communication block has been setup between the DOS and the BIOS. All
  2156                                  ;the data starting from SysinitPresent will be part of the data block. 
  2157                                  ;Right now, this is the only data being communicated. It can be expanded 
  2158                                  ;later to add more stuff
  2159                                  
  2160 000008FB 00                      SysinitPresent:	db 0			
  2161 000008FC 0000                    endfloppy:	db 0, 0
  2162                                  
  2163                                  ; ----------------------------------------------------------------------------			
  2164                                  
  2165                                  ; Bios_Data ends
  2166                                  	
  2167                                  ; Possibly disposable BIOS data
  2168                                  ; This data follows the	regular	BIOS data,
  2169                                  ; and is part of the same group.
  2170                                  
  2171 000008FE 4E4F204E414D452020-     nul_vid:	db 'NO NAME    ',0      
  2171 00000907 202000             
  2172                                  					; null volume id
  2173 0000090A 4E4F204E414D452020-     tmp_vid:	db 'NO NAME    ',0      
  2173 00000913 202000             
  2174                                  					; vid scratch buffer
  2175 00000916 80                      harddrv:	db 80h			
  2176                                  
  2177                                  end96tpi:
  2178                                  
  2179                                  ;;*********************************************************************
  2180                                  ;;memory allocation for bdss
  2181                                  ;;*********************************************************************
  2182                                  ;
  2183                                  ;;max_mini_dsk_num equ 23	; max # of mini disk ibmbio can support
  2184                                  ;
  2185                                  ;;bdss	BDS_STRUC (2+max_mini_dsk_num) dup (<>)	; currently max. 25
  2186                                  ;
  2187                                  ;bdss:	times BDS.size*(2+max_mini_dsk_num) db 0
  2188                                  
  2189 00000917 FFFF                    bdss:		dw 0FFFFh		
  2190 00000919 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2190 00000922 0210000000F8       
  2191 00000928 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2191 00000931 000000000000000003 
  2192 0000093A 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2192 00000943 00000000000000     
  2193 0000094A 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2193 00000953 000000000000000000 
  2194 0000095C 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2194 00000965 4E414D45           
  2195 00000969 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2195 00000972 46415431           
  2196 00000976 3220202000              		db 32h,	20h, 20h, 20h, 0
  2197 0000097B FFFF                    		dw 0FFFFh
  2198 0000097D 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2198 00000986 0210000000F8       
  2199 0000098C 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2199 00000995 000000000000000003 
  2200 0000099E 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2200 000009A7 00000000000000     
  2201 000009AE 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2201 000009B7 000000000000000000 
  2202 000009C0 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2202 000009C9 4E414D45           
  2203 000009CD 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2203 000009D6 46415431           
  2204 000009DA 3220202000              		db 32h,	20h, 20h, 20h, 0
  2205 000009DF FFFF                    		dw 0FFFFh
  2206 000009E1 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2206 000009EA 0210000000F8       
  2207 000009F0 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2207 000009F9 000000000000000003 
  2208 00000A02 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2208 00000A0B 00000000000000     
  2209 00000A12 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2209 00000A1B 000000000000000000 
  2210 00000A24 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2210 00000A2D 4E414D45           
  2211 00000A31 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2211 00000A3A 46415431           
  2212 00000A3E 3220202000              		db 32h,	20h, 20h, 20h, 0
  2213 00000A43 FFFF                    		dw 0FFFFh
  2214 00000A45 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2214 00000A4E 0210000000F8       
  2215 00000A54 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2215 00000A5D 000000000000000003 
  2216 00000A66 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2216 00000A6F 00000000000000     
  2217 00000A76 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2217 00000A7F 000000000000000000 
  2218 00000A88 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2218 00000A91 4E414D45           
  2219 00000A95 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2219 00000A9E 46415431           
  2220 00000AA2 3220202000              		db 32h,	20h, 20h, 20h, 0
  2221 00000AA7 FFFF                    		dw 0FFFFh
  2222 00000AA9 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2222 00000AB2 0210000000F8       
  2223 00000AB8 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2223 00000AC1 000000000000000003 
  2224 00000ACA 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2224 00000AD3 00000000000000     
  2225 00000ADA 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2225 00000AE3 000000000000000000 
  2226 00000AEC 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2226 00000AF5 4E414D45           
  2227 00000AF9 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2227 00000B02 46415431           
  2228 00000B06 3220202000              		db 32h,	20h, 20h, 20h, 0
  2229 00000B0B FFFF                    		dw 0FFFFh
  2230 00000B0D 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2230 00000B16 0210000000F8       
  2231 00000B1C 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2231 00000B25 000000000000000003 
  2232 00000B2E 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2232 00000B37 00000000000000     
  2233 00000B3E 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2233 00000B47 000000000000000000 
  2234 00000B50 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2234 00000B59 4E414D45           
  2235 00000B5D 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2235 00000B66 46415431           
  2236 00000B6A 3220202000              		db 32h,	20h, 20h, 20h, 0
  2237 00000B6F FFFF                    		dw 0FFFFh
  2238 00000B71 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2238 00000B7A 0210000000F8       
  2239 00000B80 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2239 00000B89 000000000000000003 
  2240 00000B92 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2240 00000B9B 00000000000000     
  2241 00000BA2 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2241 00000BAB 000000000000000000 
  2242 00000BB4 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2242 00000BBD 4E414D45           
  2243 00000BC1 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2243 00000BCA 46415431           
  2244 00000BCE 3220202000              		db 32h,	20h, 20h, 20h, 0
  2245 00000BD3 FFFF                    		dw 0FFFFh
  2246 00000BD5 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2246 00000BDE 0210000000F8       
  2247 00000BE4 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2247 00000BED 000000000000000003 
  2248 00000BF6 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2248 00000BFF 00000000000000     
  2249 00000C06 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2249 00000C0F 000000000000000000 
  2250 00000C18 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2250 00000C21 4E414D45           
  2251 00000C25 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2251 00000C2E 46415431           
  2252 00000C32 3220202000              		db 32h,	20h, 20h, 20h, 0
  2253 00000C37 FFFF                    		dw 0FFFFh
  2254 00000C39 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2254 00000C42 0210000000F8       
  2255 00000C48 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2255 00000C51 000000000000000003 
  2256 00000C5A 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2256 00000C63 00000000000000     
  2257 00000C6A 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2257 00000C73 000000000000000000 
  2258 00000C7C 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2258 00000C85 4E414D45           
  2259 00000C89 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2259 00000C92 46415431           
  2260 00000C96 3220202000              		db 32h,	20h, 20h, 20h, 0
  2261 00000C9B FFFF                    		dw 0FFFFh
  2262 00000C9D 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2262 00000CA6 0210000000F8       
  2263 00000CAC 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2263 00000CB5 000000000000000003 
  2264 00000CBE 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2264 00000CC7 00000000000000     
  2265 00000CCE 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2265 00000CD7 000000000000000000 
  2266 00000CE0 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2266 00000CE9 4E414D45           
  2267 00000CED 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2267 00000CF6 46415431           
  2268 00000CFA 3220202000              		db 32h,	20h, 20h, 20h, 0
  2269 00000CFF FFFF                    		dw 0FFFFh
  2270 00000D01 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2270 00000D0A 0210000000F8       
  2271 00000D10 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2271 00000D19 000000000000000003 
  2272 00000D22 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2272 00000D2B 00000000000000     
  2273 00000D32 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2273 00000D3B 000000000000000000 
  2274 00000D44 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2274 00000D4D 4E414D45           
  2275 00000D51 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2275 00000D5A 46415431           
  2276 00000D5E 3220202000              		db 32h,	20h, 20h, 20h, 0
  2277 00000D63 FFFF                    		dw 0FFFFh
  2278 00000D65 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2278 00000D6E 0210000000F8       
  2279 00000D74 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2279 00000D7D 000000000000000003 
  2280 00000D86 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2280 00000D8F 00000000000000     
  2281 00000D96 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2281 00000D9F 000000000000000000 
  2282 00000DA8 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2282 00000DB1 4E414D45           
  2283 00000DB5 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2283 00000DBE 46415431           
  2284 00000DC2 3220202000              		db 32h,	20h, 20h, 20h, 0
  2285 00000DC7 FFFF                    		dw 0FFFFh
  2286 00000DC9 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2286 00000DD2 0210000000F8       
  2287 00000DD8 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2287 00000DE1 000000000000000003 
  2288 00000DEA 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2288 00000DF3 00000000000000     
  2289 00000DFA 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2289 00000E03 000000000000000000 
  2290 00000E0C 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2290 00000E15 4E414D45           
  2291 00000E19 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2291 00000E22 46415431           
  2292 00000E26 3220202000              		db 32h,	20h, 20h, 20h, 0
  2293 00000E2B FFFF                    		dw 0FFFFh
  2294 00000E2D 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2294 00000E36 0210000000F8       
  2295 00000E3C 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2295 00000E45 000000000000000003 
  2296 00000E4E 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2296 00000E57 00000000000000     
  2297 00000E5E 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2297 00000E67 000000000000000000 
  2298 00000E70 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2298 00000E79 4E414D45           
  2299 00000E7D 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2299 00000E86 46415431           
  2300 00000E8A 3220202000              		db 32h,	20h, 20h, 20h, 0
  2301 00000E8F FFFF                    		dw 0FFFFh
  2302 00000E91 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2302 00000E9A 0210000000F8       
  2303 00000EA0 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2303 00000EA9 000000000000000003 
  2304 00000EB2 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2304 00000EBB 00000000000000     
  2305 00000EC2 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2305 00000ECB 000000000000000000 
  2306 00000ED4 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2306 00000EDD 4E414D45           
  2307 00000EE1 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2307 00000EEA 46415431           
  2308 00000EEE 3220202000              		db 32h,	20h, 20h, 20h, 0
  2309 00000EF3 FFFF                    		dw 0FFFFh
  2310 00000EF5 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2310 00000EFE 0210000000F8       
  2311 00000F04 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2311 00000F0D 000000000000000003 
  2312 00000F16 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2312 00000F1F 00000000000000     
  2313 00000F26 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2313 00000F2F 000000000000000000 
  2314 00000F38 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2314 00000F41 4E414D45           
  2315 00000F45 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2315 00000F4E 46415431           
  2316 00000F52 3220202000              		db 32h,	20h, 20h, 20h, 0
  2317 00000F57 FFFF                    		dw 0FFFFh
  2318 00000F59 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2318 00000F62 0210000000F8       
  2319 00000F68 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2319 00000F71 000000000000000003 
  2320 00000F7A 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2320 00000F83 00000000000000     
  2321 00000F8A 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2321 00000F93 000000000000000000 
  2322 00000F9C 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2322 00000FA5 4E414D45           
  2323 00000FA9 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2323 00000FB2 46415431           
  2324 00000FB6 3220202000              		db 32h,	20h, 20h, 20h, 0
  2325 00000FBB FFFF                    		dw 0FFFFh
  2326 00000FBD 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2326 00000FC6 0210000000F8       
  2327 00000FCC 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2327 00000FD5 000000000000000003 
  2328 00000FDE 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2328 00000FE7 00000000000000     
  2329 00000FEE 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2329 00000FF7 000000000000000000 
  2330 00001000 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2330 00001009 4E414D45           
  2331 0000100D 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2331 00001016 46415431           
  2332 0000101A 3220202000              		db 32h,	20h, 20h, 20h, 0
  2333 0000101F FFFF                    		dw 0FFFFh
  2334 00001021 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2334 0000102A 0210000000F8       
  2335 00001030 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2335 00001039 000000000000000003 
  2336 00001042 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2336 0000104B 00000000000000     
  2337 00001052 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2337 0000105B 000000000000000000 
  2338 00001064 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2338 0000106D 4E414D45           
  2339 00001071 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2339 0000107A 46415431           
  2340 0000107E 3220202000              		db 32h,	20h, 20h, 20h, 0
  2341 00001083 FFFF                    		dw 0FFFFh
  2342 00001085 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2342 0000108E 0210000000F8       
  2343 00001094 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2343 0000109D 000000000000000003 
  2344 000010A6 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2344 000010AF 00000000000000     
  2345 000010B6 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2345 000010BF 000000000000000000 
  2346 000010C8 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2346 000010D1 4E414D45           
  2347 000010D5 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2347 000010DE 46415431           
  2348 000010E2 3220202000              		db 32h,	20h, 20h, 20h, 0
  2349 000010E7 FFFF                    		dw 0FFFFh
  2350 000010E9 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2350 000010F2 0210000000F8       
  2351 000010F8 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2351 00001101 000000000000000003 
  2352 0000110A 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2352 00001113 00000000000000     
  2353 0000111A 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2353 00001123 000000000000000000 
  2354 0000112C 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2354 00001135 4E414D45           
  2355 00001139 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2355 00001142 46415431           
  2356 00001146 3220202000              		db 32h,	20h, 20h, 20h, 0
  2357 0000114B FFFF                    		dw 0FFFFh
  2358 0000114D 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2358 00001156 0210000000F8       
  2359 0000115C 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2359 00001165 000000000000000003 
  2360 0000116E 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2360 00001177 00000000000000     
  2361 0000117E 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2361 00001187 000000000000000000 
  2362 00001190 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2362 00001199 4E414D45           
  2363 0000119D 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2363 000011A6 46415431           
  2364 000011AA 3220202000              		db 32h,	20h, 20h, 20h, 0
  2365 000011AF FFFF                    		dw 0FFFFh
  2366 000011B1 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2366 000011BA 0210000000F8       
  2367 000011C0 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2367 000011C9 000000000000000003 
  2368 000011D2 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2368 000011DB 00000000000000     
  2369 000011E2 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2369 000011EB 000000000000000000 
  2370 000011F4 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2370 000011FD 4E414D45           
  2371 00001201 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2371 0000120A 46415431           
  2372 0000120E 3220202000              		db 32h,	20h, 20h, 20h, 0
  2373 00001213 FFFF                    		dw 0FFFFh
  2374 00001215 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2374 0000121E 0210000000F8       
  2375 00001224 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2375 0000122D 000000000000000003 
  2376 00001236 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2376 0000123F 00000000000000     
  2377 00001246 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2377 0000124F 000000000000000000 
  2378 00001258 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2378 00001261 4E414D45           
  2379 00001265 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2379 0000126E 46415431           
  2380 00001272 3220202000              		db 32h,	20h, 20h, 20h, 0
  2381 00001277 FFFF                    		dw 0FFFFh
  2382 00001279 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2382 00001282 0210000000F8       
  2383 00001288 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2383 00001291 000000000000000003 
  2384 0000129A 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2384 000012A3 00000000000000     
  2385 000012AA 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2385 000012B3 000000000000000000 
  2386 000012BC 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2386 000012C5 4E414D45           
  2387 000012C9 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2387 000012D2 46415431           
  2388 000012D6 3220202000              		db 32h,	20h, 20h, 20h, 0
  2389 000012DB 00                      		db 0
  2390                                  
  2391                                  ;---------------------------------------------------------------------------
  2392                                  ; Possibly disposable data, goes at end of data group
  2393                                  ;***************************************************************************
  2394                                  
  2395                                  ; Possibly disposable data, goes at end of data group
  2396                                  
  2397                                  ;***	ibm_disk_io - main routine, fixes at rom bug
  2398                                  ;
  2399                                  ;	entry:	(ah) = function, 02 or 0a for read.
  2400                                  ;		(dl) = drive number (80h or 81h).
  2401                                  ;		(dh) = head number.
  2402                                  ;		(ch) = cylinder number.
  2403                                  ;		(cl) = sector number (high 2 bits has cylinder number).
  2404                                  ;		(al) = number of sectors.
  2405                                  ;		(es:bx) = address of read buffer.
  2406                                  ;		for more on register contents see rom bios listing.
  2407                                  ;		stack set up for return by an iret.
  2408                                  ;
  2409                                  ;	exit:	(ah) = status of current operation.
  2410                                  ;		(cy) = 1 if failed, 0 if successful.
  2411                                  ;		for other register contents see rom bios listing.
  2412                                  ;
  2413                                  ;	uses:	
  2414                                  ;
  2415                                  ;
  2416                                  ;	warning: uses old13 vector for non-read calls.
  2417                                  ;		does direct calls to the at rom.
  2418                                  ;		does segment arithmatic.
  2419                                  ;
  2420                                  ;	effects: performs disk i/o operation.
  2421                                  
  2422                                  ; 16/10/2022
  2423                                  ; 28/05/2019
  2424                                  cmd_block equ 42h ; ROMBIOS DATA segment (40h) offset 42h ; 13/12/2022
  2425                                  
  2426                                  ;* offsets into cmd_block for registers
  2427                                  
  2428                                  pre_comp equ 0	;write pre-compensation
  2429                                  sec_cnt	 equ 1	;sector count
  2430                                  sec_num	 equ 2	;sector number
  2431                                  cyl_low	 equ 3	;cylinder number, low part
  2432                                  cyl_high equ 4	;cylinder number, high part
  2433                                  drv_head equ 5	;drive/head (bit 7 = ecc mode, bit 5 = 512 byte sectors, 
  2434                                  		;            bit 4 = drive number, bits 3-0 have head number)
  2435                                  cmd_reg  equ 6	;command register
  2436                                  
  2437                                  ; 01/10/2022
  2438                                  disk_status1	equ 74h
  2439                                  hf_num		equ 75h
  2440                                  control_byte	equ 76h
  2441                                  
  2442                                  ibm_disk_io:				
  2443 000012DC 80FA80                  		cmp	dl, 80h		; main routine,	fixes at rom bug
  2444 000012DF 720A                    		jb	short atd1	; pass through floppy disk calls. 
  2445 000012E1 80FC02                  		cmp	ah, 2
  2446 000012E4 740A                    		jz	short atd2	; intercept call 02 (read sectors).
  2447 000012E6 80FC0A                  		cmp	ah, 0Ah
  2448 000012E9 7405                    		jz	short atd2	; and call 0Ah (read long).
  2449                                  atd1:
  2450 000012EB 2EFF2E[0601]            		jmp	far [cs:Old13]					
  2451                                  		;jmp	cs:Old13	; use rom int 13h handler
  2452                                  ;-----------------------------------------------------------------------------
  2453                                  
  2454                                  atd2:					
  2455 000012F0 53                      		push	bx
  2456 000012F1 51                      		push	cx
  2457 000012F2 52                      		push	dx
  2458 000012F3 57                      		push	di
  2459 000012F4 1E                      		push	ds
  2460 000012F5 06                      		push	es
  2461 000012F6 50                      		push	ax
  2462 000012F7 B84000                  		mov	ax, 40h		; bioseg (rombios data segment)
  2463                                  					; establish bios segment addressing
  2464 000012FA 8ED8                    		mov	ds, ax
  2465                                  		; 16/10/2022
  2466 000012FC C606740000              		mov	byte [disk_status1], 0
  2467                                  		;mov	byte ptr ds:74h, 0 ; [disk_status1]
  2468                                  					; initially no error code.
  2469 00001301 80E27F                  		and	dl, 7Fh		; mask to hard disk number
  2470 00001304 3A167500                		cmp	dl, [hf_num]
  2471                                  		;cmp	dl, ds:75h	; [hf_num] ; 40h:75h
  2472 00001308 7207                    		jb	short atd3	; disk number in range
  2473                                  		;mov	byte ptr ds:74h, 1 ; bad_disk
  2474 0000130A C606740001              		mov	byte [disk_status1], 1
  2475 0000130F EB20                    		jmp	short atd4	; disk number out of range error,
  2476                                  					; return
  2477                                  ; ----------------------------------------------------------------------------
  2478                                  
  2479                                  atd3:					
  2480 00001311 53                      		push	bx
  2481 00001312 8CC0                    		mov	ax, es
  2482 00001314 C1EB04                  		shr	bx, 4		; make es:bx to seg:000x form.
  2483 00001317 01D8                    		add	ax, bx
  2484 00001319 8EC0                    		mov	es, ax
  2485 0000131B 5B                      		pop	bx
  2486 0000131C 83E30F                  		and	bx, 0Fh
  2487 0000131F 0E                      		push	cs
  2488 00001320 E8DF00                  		call	check_dma
  2489 00001323 720C                    		jb	short atd4	; abort if dma across segment boundary
  2490 00001325 58                      		pop	ax
  2491 00001326 50                      		push	ax
  2492 00001327 E81A00                  		call	setcmd		; set up command block for disk op
  2493 0000132A BAF603                  		mov	dx, 3F6h	; hf_reg_port 
  2494 0000132D EE                      		out	dx, al		; write out command modifier
  2495 0000132E E86B00                  		call	docmd		; carry out command
  2496                                  ; ----------------------------------------------------------------------------
  2497                                  
  2498                                  atd4:	
  2499                                  
  2500                                  ;  new code - let logical or clear carry and then set carry if ah!=0
  2501                                  ;	      and save a couple bytes while were at it.
  2502                                  				
  2503 00001331 58                      		pop	ax
  2504                                  		;mov	ah, ds:74h	; [disk_status1]
  2505 00001332 8A267400                		mov	ah, [disk_status1]
  2506 00001336 08E4                    		or	ah, ah
  2507 00001338 7401                    		jz	short atd5
  2508 0000133A F9                      		stc
  2509                                  atd5:					
  2510 0000133B 07                      		pop	es
  2511 0000133C 1F                      		pop	ds
  2512 0000133D 5F                      		pop	di
  2513 0000133E 5A                      		pop	dx
  2514 0000133F 59                      		pop	cx
  2515 00001340 5B                      		pop	bx
  2516 00001341 CA0200                  		retf	2		; far return, dropping flags
  2517                                  
  2518                                  ; =============== S U B	R O U T	I N E ========================================
  2519                                  
  2520                                  ;***	setcmd - set up cmd_block for the disk operation
  2521                                  ;
  2522                                  ;	entry:	(ds) = bios data segment.
  2523                                  ;		(es:bx) in seg:000x form.
  2524                                  ;		other registers as in int 13h call
  2525                                  ;	
  2526                                  ;	exit:	cmd_block set up for disk read call.
  2527                                  ;		control_byte set up for disk operation.
  2528                                  ;		(al) = control byte modifier
  2529                                  ;
  2530                                  ;	sets the fields of cmd_block using the register contents
  2531                                  ;	and the contents of the disk parameter block for the given drive.
  2532                                  ;
  2533                                  ;	warning: (ax) destroyed.
  2534                                  ;		does direct calls to the at rom.
  2535                                  
  2536                                  setcmd:		; proc near		
  2537                                  		;mov	ds:43h,	al	; [cmd_block+sec_cnt]
  2538                                  		; 16/10/2022
  2539 00001344 A24300                  		mov	[cmd_block+sec_cnt], al
  2540                                  		;mov	byte ptr ds:48h, 20h ; [cmd_block+cmd_reg]
  2541 00001347 C606480020              		mov	byte [cmd_block+cmd_reg], 20h ; assume function 02h (read)
  2542 0000134C 80FC02                  		cmp	ah, 2
  2543 0000134F 7405                    		jz	short setc1	; cmd_reg = 20h	if function 02h	(read)
  2544 00001351 C606480022              		mov	byte [cmd_block+cmd_reg], 22h
  2545                                  		;mov	byte ptr ds:48h, 22h ; [cmd_block+cmd_reg]
  2546                                  					; cmd_reg = 22h	if function 0Ah	(read long)
  2547                                  setc1:					
  2548 00001356 88C8                    		mov	al, cl
  2549 00001358 243F                    		and	al, 3Fh		; mask sector number
  2550                                  		;mov	ds:44h,	al	; [cmd_block+sec_num]
  2551                                  		;mov	ds:45h,	ch	; [cmd_block+cyl_low]
  2552 0000135A A24400                  		mov	[cmd_block+sec_num], al ; mov [44h],al
  2553 0000135D 882E4500                		mov	[cmd_block+cyl_low], ch ; mov [45h],ch
  2554 00001361 88C8                    		mov	al, cl
  2555 00001363 C0E806                  		shr	al, 6		; get two high bits of cylinder	number
  2556                                  		;mov	ds:46h,	al	; [cmd_block+cyl_high]
  2557 00001366 A24600                  		mov	[cmd_block+cyl_high], al ; mov [46h],al
  2558 00001369 89D0                    		mov	ax, dx
  2559 0000136B C0E004                  		shl	al, 4		; drive	number
  2560 0000136E 80E40F                  		and	ah, 0Fh
  2561 00001371 08E0                    		or	al, ah		; head number
  2562 00001373 0CA0                    		or	al, 0A0h	; set ecc and 512 bytes	per sector
  2563                                  		;mov	ds:47h,	al	; [cmd_block+drv_head]
  2564 00001375 A24700                  		mov	[cmd_block+drv_head], al  ; mov [47h],al 
  2565 00001378 06                      		push	es
  2566 00001379 53                      		push	bx
  2567 0000137A 0E                      		push	cs
  2568 0000137B E85C00                  		call	get_vec
  2569 0000137E 268B4705                		mov	ax, [es:bx+5]	; [es:bx+fdp_precomp]
  2570                                  			 		; write pre-comp from disk parameters
  2571 00001382 C1E802                  		shr	ax, 2
  2572                                  		;mov	ds:42h,	al	; [cmd_block+pre_comp]
  2573 00001385 A24200                  		mov	[cmd_block+pre_comp], al ; mov [42h],al
  2574                                  					; only use low part
  2575 00001388 268A4708                		mov	al, [es:bx+8]	; [es:bx+fdp_control]
  2576                                  					; control byte modifier
  2577 0000138C 5B                      		pop	bx
  2578 0000138D 07                      		pop	es
  2579                                  		;mov	ah, ds:76h	; [control_byte]
  2580 0000138E 8A267600                		mov	ah, [control_byte] ; mov ah,[76h]
  2581 00001392 80E4C0                  		and	ah, 0C0h	; keep disable retry bits	
  2582 00001395 08C4                    		or	ah, al
  2583                                  		;mov	ds:76h,	ah
  2584 00001397 88267600                		mov	[control_byte], ah ; mov [76h],al
  2585 0000139B C3                      		retn
  2586                                  
  2587                                  ; =============== S U B	R O U T	I N E ========================================
  2588                                  
  2589                                  ;***	docmd - carry out read operation to at hard disk
  2590                                  ;
  2591                                  ;	entry:	(es:bx) = address for read in data.
  2592                                  ;		cmd_block set up for disk read.
  2593                                  ;
  2594                                  ;	exit:	buffer at (es:bx) contains data read.
  2595                                  ;		disk_status1 set to error code (0 if success).
  2596                                  ;
  2597                                  ;	
  2598                                  ;
  2599                                  ;	warning: (ax), (bl), (cx), (dx), (di) destroyed.
  2600                                  ;		no check is made for dma boundary overrun.
  2601                                  ;
  2602                                  ;	effects: programs disk controller.
  2603                                  ;		performs disk input.
  2604                                  
  2605                                  docmd:		; proc near		
  2606 0000139C 89DF                    		mov	di, bx
  2607 0000139E 0E                      		push	cs
  2608 0000139F E84000                  		call	command
  2609 000013A2 7535                    		jnz	short doc3
  2610                                  doc1:					
  2611 000013A4 0E                      		push	cs
  2612 000013A5 E84200                  		call	waitt		; wait for controller to complete read
  2613 000013A8 752F                    		jnz	short doc3
  2614 000013AA B90001                  		mov	cx, 256		; 256 words per sector
  2615 000013AD BAF001                  		mov	dx, 1F0h	; hf_port
  2616 000013B0 FC                      		cld			; string op goes up
  2617 000013B1 FA                      		cli			; disable interrupts
  2618                                  					; (bug was forgetting this)
  2619                                  
  2620                                  ;	M062 -- some of these old machines have intermittent failures
  2621                                  ;		when the read is done at full speed. Instead of using
  2622                                  ;		a string rep instruction, we'll use a loop. There is
  2623                                  ;		a slight performance hit, but it only affects these
  2624                                  ;		very old machines with an exact date code match, and
  2625                                  ;		it makes said machines more reliable
  2626                                  ;
  2627                                  ;M062	repz	insw		;read in sector
  2628                                  
  2629                                  rsct_loop:				
  2630 000013B2 6D                      		insw
  2631 000013B3 E2FD                    		loop	rsct_loop
  2632 000013B5 FB                      		sti
  2633                                  		; 16/10/2022
  2634 000013B6 F606480002              		test	byte [cmd_block+cmd_reg], 02h
  2635                                  		;test	byte ptr ds:48h, 2 ; [cmd_block+cmd_reg]
  2636                                  					; (ds =	40h)
  2637 000013BB 7410                    		jz	short doc2	; no ecc bytes to read.
  2638 000013BD 0E                      		push	cs
  2639 000013BE E83100                  		call	wait_drq	; wait for controller to complete read
  2640 000013C1 7216                    		jb	short doc3
  2641 000013C3 B90400                  		mov	cx, 4		; 4 bytes of ecc
  2642 000013C6 BAF001                  		mov	dx, 1F0h	; hf_port
  2643 000013C9 FA                      		cli
  2644 000013CA F36C                    		rep insb		; read in ecc
  2645 000013CC FB                      		sti
  2646                                  doc2:					
  2647 000013CD 0E                      		push	cs
  2648 000013CE E82900                  		call	check_status
  2649 000013D1 7506                    		jnz	short doc3	; operation failed
  2650                                  		;dec	byte ptr ds:43h	; [cmd_block+sec_cnt]
  2651 000013D3 FE0E4300                		dec	byte [cmd_block+sec_cnt]
  2652 000013D7 75CB                    		jnz	short doc1	; loop while more sectors to read
  2653                                  doc3:					
  2654 000013D9 C3                      		retn
  2655                                  
  2656                                  ; =============== S U B	R O U T	I N E ========================================
  2657                                  
  2658                                  ;***	define where the rom routines are actually located
  2659                                  ;	   in the buggy old AT BIOS that we might need to
  2660                                  ;	   install a special level of int13 handler for
  2661                                  
  2662                                  ; 16/10/2022
  2663                                  
  2664                                  romsegment 	equ 0F000h  ; segment
  2665                                  romcommand 	equ 2E1Eh   ; offset in romsegment
  2666                                  romwait		equ 2E7Fh   ; offset in romsegment
  2667                                  romwait_drq 	equ 2EE2h   ; offset in romsegment
  2668                                  romcheck_status equ 2EF8h   ; offset in romsegment
  2669                                  romcheck_dma 	equ 2F69h   ; offset in romsegment	
  2670                                  romget_vec	equ 2F8Eh   ; offset in romsegment
  2671                                  romfret		equ 0FF65h  ; far return in rom	
  2672                                  
  2673                                  ;***	get_vec - get pointer to hard disk parameters.
  2674                                  ;
  2675                                  ;	entry:	(dl) = low bit has hard disk number (0 or 1).
  2676                                  ;
  2677                                  ;	exit:	(es:bx) = address of disk parameters table.
  2678                                  ;
  2679                                  ;	uses:	ax for segment computation.
  2680                                  ;
  2681                                  ;	loads es:bx from interrupt table in low memory, vector 46h (disk 0)
  2682                                  ;	or 70h (disk 1).
  2683                                  ;	
  2684                                  ;	warning: (ax) destroyed.
  2685                                  ;		this does a direct call to the at rom.
  2686                                  
  2687                                  get_vec:	; proc near		
  2688                                  		;push	0FF65h		; romfret ; far	return in rom
  2689                                  		;jmp	far ptr	0F000h:2F8Eh
  2690                                  		; 16/10/2022
  2691 000013DA 6865FF                  		push	romfret		; far return in rom
  2692 000013DD EA8E2F00F0              		jmp	romsegment:romget_vec
  2693                                  
  2694                                  ; =============== S U B	R O U T	I N E ========================================
  2695                                  
  2696                                  ;***	command - send contents of cmd_block to disk controller.
  2697                                  ;
  2698                                  ;	entry:	control_byte 
  2699                                  ;		cmd_block - set up with values for hard disk controller.
  2700                                  ;
  2701                                  ;	exit:	disk_status1 = error code.
  2702                                  ;		nz if error, zr for no error.
  2703                                  ;
  2704                                  ;
  2705                                  ;	warning: (ax), (cx), (dx) destroyed.
  2706                                  ;		does a direct call to the at rom.
  2707                                  ;
  2708                                  ;	effects: programs disk controller.
  2709                                  
  2710                                  command:	; proc near		
  2711                                  		;push	0FF65h		; romfret ; far	return in rom
  2712                                  		;jmp	far ptr	0F000h:2E1Eh
  2713                                  		; 16/10/2022
  2714 000013E2 6865FF                  		push	romfret		; far return in rom
  2715 000013E5 EA1E2E00F0              		jmp	romsegment:romcommand
  2716                                  
  2717                                  ; =============== S U B	R O U T	I N E ========================================
  2718                                  
  2719                                  ;***	waitt - wait for disk interrupt
  2720                                  ;
  2721                                  ;	entry:	nothing.
  2722                                  ;
  2723                                  ;	exit:	disk_status1 = error code.
  2724                                  ;		nz if error, zr if no error.
  2725                                  ;
  2726                                  ;
  2727                                  ;	warning: (ax), (bl), (cx) destroyed.
  2728                                  ;		does a direct call to the at rom.
  2729                                  ;		
  2730                                  ;	effects: calls int 15h, function 9000h.
  2731                                  
  2732                                  waitt:		; proc near		
  2733                                  		;push	0FF65h		; romfret ; far	return in rom
  2734                                  		;jmp	far ptr	0F000h:2E7Fh
  2735                                  		; 16/10/2022
  2736 000013EA 6865FF                  		push	romfret		; far return in rom
  2737 000013ED EA7F2E00F0              		jmp	romsegment:romwait
  2738                                  
  2739                                  ; =============== S U B	R O U T	I N E ========================================
  2740                                  
  2741                                  ;***	wait_drq - wait for data request.
  2742                                  ;
  2743                                  ;	entry:	nothing.
  2744                                  ;
  2745                                  ;	exit:	disk_status1 = error code.
  2746                                  ;		cy if error, nc if no error.
  2747                                  ;
  2748                                  ;	warning: (al), (cx), (dx) destroyed.
  2749                                  ;		does a direct call to the at rom.
  2750                                  
  2751                                  wait_drq:	; proc near		
  2752                                  		;push	0FF65h		; romfret ; far	return in rom
  2753                                  		;jmp	far ptr	0F000h:2EE2h
  2754                                  		; 16/10/2022
  2755 000013F2 6865FF                  		push	romfret		; far return in rom
  2756 000013F5 EAE22E00F0              		jmp	romsegment:romwait_drq
  2757                                  
  2758                                  ; =============== S U B	R O U T	I N E ========================================
  2759                                  
  2760                                  ;***	check_status - check hard disk status.
  2761                                  ;
  2762                                  ;	entry:	nothing.
  2763                                  ;
  2764                                  ;	exit:	disk_status1 = error code.
  2765                                  ;		nz if error, zr if no error.
  2766                                  ;
  2767                                  ;	warning: (ax), (cx), (dx) destroyed.
  2768                                  ;		does a direct call to the at rom.
  2769                                  
  2770                                  check_status:	; proc near		
  2771                                  		;push	0FF65h		; romfret ; far	return in rom
  2772                                  		;jmp	far ptr	0F000h:2EF8h
  2773                                  		; 16/10/2022
  2774 000013FA 6865FF                  		push	romfret		; far return in rom
  2775 000013FD EAF82E00F0              		jmp	romsegment:romcheck_status
  2776                                  
  2777                                  ; =============== S U B	R O U T	I N E ========================================
  2778                                  
  2779                                  ;***	check_dma - check for dma overrun 64k segment.
  2780                                  ;
  2781                                  ;	entry:	(es:bx) = addr. of memory buffer in seg:000x form.
  2782                                  ;		cmd_block set up for operation.
  2783                                  ;
  2784                                  ;	exit:	disk_status1 - error code.
  2785                                  ;		cy if error, nc if no error.
  2786                                  ;
  2787                                  ;	warning: does a direct call to the at rom.
  2788                                  
  2789                                  check_dma:	; proc near		
  2790                                  		;push	0FF65h		; romfret ; far	return in rom
  2791                                  		;jmp	far ptr	0F000h:2F69h
  2792                                  		; 16/10/2022
  2793 00001402 6865FF                  		push	romfret		; far return in rom
  2794 00001405 EA692F00F0              		jmp	romsegment:romcheck_dma
  2795                                  
  2796                                  ;-----------------------------------------------------------------------------
  2797                                  
  2798                                  endatrom:
  2799                                  
  2800                                  ; ----------------------------------------------------------------------------
  2801                                  
  2802                                  ;; M015 -- begin changes
  2803                                  ;;
  2804                                  ;; Certain old COMPAQ '286 machines have a bug in their ROM BIOS.
  2805                                  ;; When Int13 is done with AH > 15h and DL >= 80h, they trash
  2806                                  ;; the byte at DS:74h, assuming that DS points to ROM_DATA.
  2807                                  ;; If our init code detects this error, it will install this
  2808                                  ;; special Int13 hook through the same mechanism that was set
  2809                                  ;; up for the IBM patch above. This code is also dynamically
  2810                                  ;; relocated by MSINIT.
  2811                                  
  2812                                  compaq_disk_io:
  2813 0000140A 80FC15                  		cmp	ah, 15h		; compaq_disk_io proc far
  2814                                  					;
  2815                                  					; the following	label defines the end of the at	rom patch.
  2816                                  					; this is used at configuration	time.
  2817                                  					;
  2818                                  					; warning!!!
  2819                                  					; this code will be dynamically	relocated by msinit
  2820 0000140D 7705                    		ja	short mebbe_hookit ; only deal with functions > 15h
  2821                                  no_hookit:				
  2822                                  		;jmp	cs:Old13
  2823                                  		; 16/10/2022
  2824 0000140F 2EFF2E[0601]            		jmp	far [cs:Old13]
  2825                                  
  2826                                  ; ----------------------------------------------------------------------------
  2827                                  
  2828                                  mebbe_hookit:				
  2829 00001414 80FA80                  		cmp	dl, 80h
  2830 00001417 72F6                    		jb	short no_hookit
  2831 00001419 1E                      		push	ds
  2832 0000141A 50                      		push	ax
  2833 0000141B B84000                  		mov	ax, 40h
  2834 0000141E 8ED8                    		mov	ds, ax
  2835 00001420 58                      		pop	ax
  2836 00001421 9C                      		pushf
  2837                                  		;call	cs:Old13
  2838                                  		; 16/10/2022
  2839 00001422 2EFF1E[0601]            		call	far [cs:Old13]
  2840 00001427 1F                      		pop	ds
  2841 00001428 CA0200                  		retf	2
  2842                                  
  2843                                  ; ----------------------------------------------------------------------------
  2844                                  
  2845 0000142B 00                      end_compaq_i13hook: db 0			
  2846                                  
  2847                                  ; =============== S U B	R O U T	I N E ========================================
  2848                                  
  2849                                  ; CMOS Clock setting support routines used by MSCLOCK.		
  2850                                  ; Warning!!! This code will be dynamically relocated by MSINIT.
  2851                                  
  2852                                  daycnt_to_day:	; proc far
  2853                                  
  2854                                  ; entry: [daycnt] = number of days since 1-1-80
  2855                                  ;
  2856                                  ; return: ch - century in bcd
  2857                                  ;	  cl - year in bcd
  2858                                  ;	  dh - month in bcd
  2859                                  ;	  dl - day in bcd
  2860                                  
  2861                                  		; 16/10/2022		
  2862 0000142C 2EFF36[F004]            		push	word [cs:daycnt] ; save daycnt
  2863 00001431 2E813E[F004]891C        		cmp	word [cs:daycnt], 7305	; (365*20+(20/4))
  2864                                  					; # days from 1-1-1980 to 1-1-2000
  2865 00001438 730E                    		jnb	short century20
  2866 0000143A 2EC606[F404]13          		mov	byte [cs:base_century], 19
  2867 00001440 2EC606[F504]50          		mov	byte [cs:base_year], 80
  2868 00001446 EB13                    		jmp	short years
  2869                                  ; ----------------------------------------------------------------------------
  2870                                  		
  2871                                  century20:				
  2872 00001448 2EC606[F404]14          		mov	byte [cs:base_century], 20
  2873 0000144E 2EC606[F504]00          		mov	byte [cs:base_year], 0
  2874 00001454 2E812E[F004]891C        		sub	word [cs:daycnt], 7305	; (365*20+(20/4))
  2875                                  					; adjust daycnt
  2876                                  years:					
  2877 0000145B 31D2                    		xor	dx, dx
  2878 0000145D 2EA1[F004]              		mov	ax, [cs:daycnt]
  2879 00001461 BBB505                  		mov	bx, 1461	; (366+365*3)
  2880                                  					; # of days in a Leap year block
  2881 00001464 F7F3                    		div	bx		; AX = # of leap block,	DX = daycnt
  2882 00001466 2E8916[F004]            		mov	[cs:daycnt], dx	; save daycnt left
  2883 0000146B B304                    		mov	bl, 4
  2884 0000146D F6E3                    		mul	bl		; AX = # of years. Less	than 100
  2885 0000146F 2E0006[F504]            		add	[cs:base_year], al ; So, ah = 0. Adjust year
  2886 00001474 2EFF06[F004]            		inc	word [cs:daycnt]	; set daycnt to	1 base
  2887 00001479 2E813E[F004]6E01        		cmp	word [cs:daycnt], 366	; daycnt=remainder of leap year	bk
  2888 00001480 7626                    		jbe	short leapyear	; within 366+355+355+355 days.
  2889 00001482 2EFE06[F504]            		inc	byte [cs:base_year]	; if daycnt <= 366, then leap year
  2890 00001487 2E812E[F004]6E01        		sub	word [cs:daycnt], 366	; else daycnt--, base_year++ ;
  2891 0000148E B90300                  		mov	cx, 3		; And next three years are normal
  2892                                  regularyear:				
  2893 00001491 2E813E[F004]6D01        		cmp	word [cs:daycnt], 365	; for(i=1; i>3 or daycnt <=365;	i++)
  2894 00001498 7614                    		jbe	short yeardone	; {if (daycnt >	365)
  2895 0000149A 2EFE06[F504]            		inc	byte [cs:base_year]	;   { daycnt -=	365
  2896 0000149F 2E812E[F004]6D01        		sub	word [cs:daycnt], 365	;   }
  2897 000014A6 E2E9                    		loop	regularyear	; }
  2898                                  					;
  2899                                  					; should never fall through loop
  2900                                  leapyear:				
  2901 000014A8 2EC606[F704]1D          		mov	byte [cs:month_tab+1], 29 ; leap year.
  2902                                  					; change month table.
  2903                                  yeardone:				
  2904 000014AE 31DB                    		xor	bx, bx
  2905 000014B0 31D2                    		xor	dx, dx
  2906 000014B2 2EA1[F004]              		mov	ax, [cs:daycnt]
  2907                                  		;mov	si, offset month_tab
  2908 000014B6 BE[F604]                		mov	si, month_tab	; 19/10/2022
  2909 000014B9 B90C00                  		mov	cx, 12
  2910                                  months:					
  2911 000014BC FEC3                    		inc	bl
  2912                                  
  2913                                  		; !!! -- 16/10/2022 -- (if DS=CS, what for CS: prefixes are used !?)
  2914                                  		;mov	dl, [cs:si]
  2915                                  		; !!! -- 16/10/2022 -- (may be to keep code addrs as unchanged/fix!?)
  2916                                  		; ds = cs !? ((ofcourse ds must be same with cs here))
  2917                                  		;mov	dl, [si] ; 20/03/2019 (MSDOS 6.21 IO.SYS, BIOSDATA:14C0h)
  2918                                  		;mov	dl, [si] ; 16/10/2022 (MSDOS 5.0 IO.SYS, BIOSDATA:14C0h)
  2919                                  		
  2920 000014BE 8A14                    		mov	dl, [si] ; ?	; mov dl, [cs:si]
  2921 000014C0 39D0                    		cmp	ax, dx		; cmp daycnt for each month till fit
  2922                                  					; dh=0
  2923 000014C2 7605                    		jbe	short month_done
  2924 000014C4 46                      		inc	si		; next month
  2925 000014C5 29D0                    		sub	ax, dx		; adjust daycnt
  2926 000014C7 E2F3                    		loop	months		;
  2927                                  					; should never fall through loop
  2928                                  month_done:				
  2929 000014C9 2EC606[F704]1C          		mov	byte [cs:month_tab+1], 28
  2930                                  					; restore month table value
  2931 000014CF 88DA                    		mov	dl, bl
  2932 000014D1 2E8A36[F504]            		mov	dh, [cs:base_year]
  2933 000014D6 2E8A0E[F404]            		mov	cl, [cs:base_century] ; al=day,dl=month,dh=year,cl=cntry
  2934 000014DB 2EFF1E[0205]            		call	far [cs:bintobcd]
  2935                                  		;call	cs:bintobcd	; convert "day"	to bcd
  2936                                  					; dl = bcd day,	al = month
  2937 000014E0 86D0                    		xchg	dl, al
  2938 000014E2 2EFF1E[0205]            		call	far [cs:bintobcd]
  2939                                  		;call	cs:bintobcd	; dh = bcd month, al = year
  2940 000014E7 86F0                    		xchg	dh, al
  2941 000014E9 2EFF1E[0205]            		call	far [cs:bintobcd]
  2942                                  		;call	cs:bintobcd	; cl = bcd year, al = century
  2943 000014EE 86C8                    		xchg	cl, al
  2944 000014F0 2EFF1E[0205]            		call	far [cs:bintobcd]
  2945                                  		;call	cs:bintobcd	; ch = bcd century
  2946 000014F5 88C5                    		mov	ch, al
  2947 000014F7 2E8F06[F004]            		pop	word [cs:daycnt] ; restore original value
  2948 000014FC CB                      		retf
  2949                                  
  2950                                  enddaycnttoday:	
  2951                                  
  2952                                  ; =============== S U B	R O U T	I N E ========================================
  2953                                  
  2954                                  bin_to_bcd:	; proc far		; real time clock support
  2955                                  
  2956                                  ;convert a binary input in al (less than 63h or 99 decimal)
  2957                                  ;into a bcd value in al. ah destroyed.	
  2958                                  		
  2959 000014FD 51                      		push	cx		
  2960 000014FE D40A                    		aam			; al=high digit	bcd, ah=low digit bc
  2961 00001500 B104                    		mov	cl, 4
  2962 00001502 D2E4                    		shl	ah, cl		; mov the high digit to	high nibble
  2963 00001504 08E0                    		or	al, ah
  2964 00001506 59                      		pop	cx
  2965 00001507 CB                      		retf
  2966                                  
  2967                                  ; ----------------------------------------------------------------------------
  2968                                  
  2969                                  ; the k09 requires the routines for reading the clock because of the suspend/
  2970                                  ; resume facility. the system clock needs to be reset after resume.
  2971                                  
  2972                                  ; the following routine is executed at resume time when the system
  2973                                  ; powered on after suspension. it reads the real time clock and
  2974                                  ; resets the system time and date, and then irets.
  2975                                  
  2976                                  ; warning!!! this code will be dynamically relocated by msinit.
  2977                                  
  2978                                  int6c:					
  2979 00001508 0E                      		push	cs
  2980 00001509 1F                      		pop	ds
  2981 0000150A 8F06[BB06]              		pop	word [int6c_ret_addr]	; pop off return address
  2982 0000150E 8F06[BD06]              		pop	word [int6c_ret_addr+2]
  2983 00001512 9D                      		popf
  2984 00001513 E81300                  		call	read_real_date	; get the date from the clock
  2985 00001516 FA                      		cli
  2986 00001517 8936[F004]              		mov	[daycnt], si	; update dos copy of date
  2987 0000151B FB                      		sti
  2988 0000151C E8CB00                  		call	read_real_time	; get the time from the	rtc
  2989 0000151F FA                      		cli
  2990 00001520 B401                    		mov	ah, 1
  2991 00001522 CD1A                    		int	1Ah		; CLOCK	- SET TIME OF DAY
  2992                                  					; CX:DX	= clock	count
  2993                                  					; Return: time of day set
  2994 00001524 FB                      		sti
  2995                                  		;jmp	int6c_ret_addr	; long jump
  2996                                  		; 16/10/2022
  2997 00001525 FF2E[BB06]              		jmp	far [int6c_ret_addr] ; long jump
  2998                                  
  2999                                  ; =============== S U B	R O U T	I N E ========================================
  3000                                  
  3001                                  ;   read_real_date reads real-time clock for date and returns the number
  3002                                  ;   of days elapsed since 1-1-80 in si
  3003                                  
  3004                                  read_real_date:	; proc near		
  3005 00001529 50                      		push	ax
  3006 0000152A 51                      		push	cx
  3007 0000152B 52                      		push	dx
  3008 0000152C 30E4                    		xor	ah, ah		; throw	away clock roll	over
  3009 0000152E CD1A                    		int	1Ah		; CLOCK	- GET TIME OF DAY
  3010                                  					; Return: CX:DX	= clock	count
  3011                                  					; AL = 00h if clock was	read or	written	(via AH=0,1) since the previous
  3012                                  					; midnight
  3013                                  					; Otherwise, AL	> 0
  3014 00001530 5A                      		pop	dx
  3015 00001531 59                      		pop	cx
  3016 00001532 58                      		pop	ax
  3017 00001533 50                      		push	ax
  3018 00001534 53                      		push	bx
  3019 00001535 51                      		push	cx
  3020 00001536 52                      		push	dx
  3021 00001537 2EC706[DB06]0100        		mov	word [cs:daycnt2], 1
  3022                                  					; REAL TIME CLOCK ERROR	FLAG (+1 DAY)
  3023 0000153E B404                    		mov	ah, 4
  3024 00001540 CD1A                    		int	1Ah		; CLOCK	- READ DATE FROM REAL TIME CLOCK (AT,XT286,CONV,PS)
  3025                                  					; Return: DL = day in BCD
  3026                                  					; DH = month in	BCD
  3027                                  					; CL = year in BCD
  3028                                  					; CH = century (19h or 20h)
  3029 00001542 7303                    		jnb	short read_ok
  3030 00001544 E99300                  		jmp	r_d_ret
  3031                                  ;-----------------------------------------------------------------------------
  3032                                  
  3033                                  read_ok:				
  3034 00001547 882E[BF06]              		mov	[bin_date_time], ch
  3035 0000154B 880E[C006]              		mov	[bin_date_time+1], cl
  3036 0000154F 8836[C106]              		mov	[bin_date_time+2], dh
  3037 00001553 8816[C206]              		mov	[bin_date_time+3], dl
  3038 00001557 2EC706[DB06]0200        		mov	word [cs:daycnt2], 2 ; READ OF R-T CLOCK SUCCESSFUL
  3039 0000155E E84201                  		call	bcd_verify	; verify bcd values in range
  3040 00001561 7277                    		jb	short r_d_ret	;  some	value out of range
  3041 00001563 2EC706[DB06]0300        		mov	word [cs:daycnt2], 3
  3042 0000156A E8E600                  		call	date_verify
  3043 0000156D 726B                    		jb	short r_d_ret
  3044 0000156F 2EC706[DB06]0000        		mov	word [cs:daycnt2], 0
  3045 00001576 E8AA00                  		call	in_bin
  3046 00001579 A0[C006]                		mov	al, [bin_date_time+1]
  3047 0000157C 98                      		cbw
  3048 0000157D 803E[BF06]14            		cmp	byte [bin_date_time], 20 ; 20th century?
  3049 00001582 7503                    		jnz	short century_19 ; no
  3050 00001584 83C064                  		add	ax, 100		; add in a century
  3051                                  
  3052                                  century_19:				
  3053 00001587 83E850                  		sub	ax, 80		; subtract off 1-1-80
  3054 0000158A B104                    		mov	cl, 4		; leap year every 4
  3055 0000158C F6F1                    		div	cl		; al= #	leap year blocks, ah= remainder
  3056 0000158E 88E3                    		mov	bl, ah		; save odd years
  3057 00001590 98                      		cbw			; zero ah
  3058 00001591 B9B505                  		mov	cx, 1461	; 366+(3*365)
  3059                                  					; # of days in leap year blocks
  3060 00001594 F7E1                    		mul	cx
  3061 00001596 2EA3[DB06]              		mov	[cs:daycnt2], ax ; SAVE COUNT OF DAYS
  3062 0000159A 88D8                    		mov	al, bl		; get odd years	count
  3063 0000159C 98                      		cbw
  3064 0000159D 09C0                    		or	ax, ax
  3065 0000159F 740C                    		jz	short leap_year
  3066 000015A1 B96D01                  		mov	cx, 365		; days in year
  3067 000015A4 F7E1                    		mul	cx
  3068 000015A6 2E0106[DB06]            		add	[cs:daycnt2], ax ; ADD ON DAYS IN ODD YEARS
  3069 000015AB EB07                    		jmp	short leap_adjustment ;	account	for leap year
  3070                                  					; possibly account for a leap day
  3071                                  ;-----------------------------------------------------------------------------
  3072                                  
  3073                                  leap_year:				
  3074 000015AD 803E[C106]02            		cmp	byte [bin_date_time+2], 2 ; is	month february?
  3075 000015B2 7605                    		jbe	short no_leap_adjustment ; jan or feb. no leap day yet.
  3076                                  leap_adjustment:			
  3077 000015B4 2EFF06[DB06]            		inc	word [cs:daycnt2] ; account for leap day
  3078                                  no_leap_adjustment:			
  3079 000015B9 8A0E[C206]              		mov	cl, [bin_date_time+3] ; get days of month
  3080 000015BD 30ED                    		xor	ch, ch
  3081 000015BF 49                      		dec	cx		; because of offset from day 1,	not day	0
  3082 000015C0 2E010E[DB06]            		add	[cs:daycnt2], cx ; GET DAYS IN MONTHS PRECEEDING
  3083 000015C5 8A0E[C106]              		mov	cl, [bin_date_time+2] ; get month
  3084 000015C9 30ED                    		xor	ch, ch
  3085 000015CB 49                      		dec	cx		; january starts at offset 0
  3086 000015CC D1E1                    		shl	cx, 1		; word offset
  3087 000015CE BE[C306]                		mov	si, month_table
  3088 000015D1 01CE                    		add	si, cx
  3089                                  		; 16/10/2022
  3090                                  		; ds must be same with cs here, if so..
  3091                                  		; what for cs: prefixes are used !?)
  3092                                  		; mov	ax, [cs:si]
  3093                                  		; mov	ax, [si] ; 16/10/2022 (MSDOS 5.0 IO.SYS - BIOSDATA:15D5h)
  3094 000015D3 8B04                    		mov	ax, [si]	; mov ax, [cs:si]
  3095                                  					; get #	days in	previous months
  3096 000015D5 2E0106[DB06]            		add	[cs:daycnt2], ax
  3097                                  r_d_ret:				
  3098 000015DA 2E8B36[DB06]            		mov	si, [cs:daycnt2]
  3099 000015DF 5A                      		pop	dx
  3100 000015E0 59                      		pop	cx
  3101 000015E1 5B                      		pop	bx
  3102 000015E2 58                      		pop	ax
  3103 000015E3 C3                      		retn
  3104                                  
  3105                                  ;-----------------------------------------------------------------------------
  3106                                  
  3107                                  r_t_retj:				
  3108 000015E4 31C9                    		xor	cx, cx
  3109 000015E6 31D2                    		xor	dx, dx
  3110 000015E8 EB38                    		jmp	short r_t_ret
  3111                                  
  3112                                  ; =============== S U B	R O U T	I N E ========================================
  3113                                  
  3114                                  ; read_real_time reads the time from the rtc. on exit, it has the number of
  3115                                  ; ticks (at 18.2 ticks per sec.) in cx:dx.
  3116                                  
  3117                                  read_real_time:	; proc near		
  3118 000015EA B402                    		mov	ah, 2
  3119 000015EC CD1A                    		int	1Ah		; CLOCK	- READ REAL TIME CLOCK (AT,XT286,CONV,PS)
  3120                                  					; Return: CH = hours in	BCD
  3121                                  					; CL = minutes in BCD
  3122                                  					; DH = seconds in BCD
  3123 000015EE 72F4                    		jb	short r_t_retj
  3124 000015F0 882E[BF06]              		mov	[bin_date_time], ch ; hours
  3125 000015F4 880E[C006]              		mov	[bin_date_time+1], cl ; minutes
  3126 000015F8 8836[C106]              		mov	[bin_date_time+2], dh ; seconds
  3127 000015FC C606[C206]00            		mov	byte [bin_date_time+3], 0 ; unused for time
  3128 00001601 E89F00                  		call	bcd_verify
  3129 00001604 72DE                    		jb	short r_t_retj
  3130 00001606 E88500                  		call	time_verify
  3131 00001609 72D9                    		jb	short r_t_retj
  3132 0000160B E81500                  		call	in_bin		; from bcd to bin
  3133 0000160E 8A2E[BF06]              		mov	ch, [bin_date_time]
  3134 00001612 8A0E[C006]              		mov	cl, [bin_date_time+1]
  3135 00001616 8A36[C106]              		mov	dh, [bin_date_time+2]
  3136 0000161A 8A16[C206]              		mov	dl, [bin_date_time+3]
  3137                                  		; 16/10/2022
  3138                                  		; 17/09/2022
  3139                                  		; 31/05/2019
  3140 0000161E FF1E[E206]              		call	far [ttticks] 
  3141                                  		;call	dword ptr ttticks ; note: indirect far call
  3142                                  					; cx:dx	= number of ticks
  3143                                  					; (at 18.2 ticks per sec.)
  3144                                  r_t_ret:				
  3145 00001622 C3                      		retn
  3146                                  
  3147                                  ; =============== S U B	R O U T	I N E =======================================
  3148                                  
  3149                                  ;   in_bin converts bin_date_time values from bcd to bin
  3150                                  
  3151                                  in_bin:		; proc near		
  3152 00001623 A0[BF06]                		mov	al, [bin_date_time] ; century or hours
  3153 00001626 E81F00                  		call	bcd_to_bin
  3154 00001629 A2[BF06]                		mov	[bin_date_time], al
  3155 0000162C A0[C006]                		mov	al, [bin_date_time+1] ; years or minutes
  3156 0000162F E81600                  		call	bcd_to_bin
  3157 00001632 A2[C006]                		mov	[bin_date_time+1], al
  3158 00001635 A0[C106]                		mov	al, [bin_date_time+2] ; months or seconds
  3159 00001638 E80D00                  		call	bcd_to_bin
  3160 0000163B A2[C106]                		mov	[bin_date_time+2], al
  3161 0000163E A0[C206]                		mov	al, [bin_date_time+3] ; days (not used for time)
  3162 00001641 E80400                  		call	bcd_to_bin
  3163 00001644 A2[C206]                		mov	[bin_date_time+3], al
  3164 00001647 C3                      		retn
  3165                                  
  3166                                  ; =============== S U B	R O U T	I N E =======================================
  3167                                  
  3168                                  ;   bcd_to_bin converts two bcd nibbles in al (value <= 99.) to
  3169                                  ;   a binary representation in al
  3170                                  ;   ah is destroyed
  3171                                  
  3172                                  bcd_to_bin:	; proc near		
  3173 00001648 88C4                    		mov	ah, al
  3174 0000164A 240F                    		and	al, 0Fh
  3175 0000164C B104                    		mov	cl, 4
  3176 0000164E D2EC                    		shr	ah, cl
  3177 00001650 D50A                    		aad
  3178 00001652 C3                      		retn
  3179                                  
  3180                                  ; =============== S U B	R O U T	I N E ========================================
  3181                                  
  3182                                  ;   date_verify loosely checks bcd date values to be in range
  3183                                  ;   in bin_date_time
  3184                                  
  3185                                  date_verify:	; proc near		
  3186 00001653 803E[BF06]20            		cmp	byte [bin_date_time], 20h ; century check
  3187 00001658 7732                    		ja	short date_error
  3188 0000165A 740E                    		jz	short century_20 ; jmp in 21th century
  3189 0000165C 803E[BF06]19            		cmp	byte [bin_date_time], 19h ; century check
  3190                                  		;jb	short date_error
  3191                                  		; 12/12/2022
  3192 00001661 722A                    		jb	short date_err2
  3193 00001663 803E[C006]80            		cmp	byte [bin_date_time+1], 80h ; year check
  3194                                  		;jb	short date_error
  3195                                  		; 12/12/2022
  3196 00001668 7223                    		jb	short date_err2
  3197                                  century_20:				
  3198 0000166A 803E[C006]99            		cmp	byte [bin_date_time+1], 99h ; year check
  3199 0000166F 771B                    		ja	short date_error
  3200 00001671 803E[C106]12            		cmp	byte [bin_date_time+2], 12h ; month check
  3201 00001676 7714                    		ja	short date_error
  3202 00001678 803E[C106]00            		cmp	byte [bin_date_time+2], 0
  3203                                  		;jbe	short date_error
  3204 0000167D 760D                    		jna	short date_error
  3205 0000167F 803E[C206]31            		cmp	byte [bin_date_time+3], 31h ; day check
  3206 00001684 7706                    		ja	short date_error
  3207                                  		;cmp	byte [bin_date_time+3], 0 ; day check
  3208                                  		;;jbe	short date_error
  3209                                  		;jna	short date_error
  3210                                  		; 12/12/2022
  3211                                  		; cf=0
  3212                                  		;clc
  3213                                  		; 12/12/2022
  3214 00001686 803E[C206]01            		cmp	byte [bin_date_time+3], 1 ; day check
  3215 0000168B C3                      		retn
  3216                                  ;-----------------------------------------------------------------------------
  3217                                  
  3218                                  date_error:				
  3219 0000168C F9                      		stc
  3220                                  date_err2:
  3221 0000168D C3                      		retn
  3222                                  
  3223                                  ; =============== S U B	R O U T	I N E ========================================
  3224                                  
  3225                                  ; time_verify very loosely checks bcd date values to be in range
  3226                                  ; in bin_date_time
  3227                                  
  3228                                  time_verify:	; proc near		
  3229 0000168E 803E[BF06]24            		cmp	byte [bin_date_time], 24h ; hour check
  3230 00001693 770C                    		ja	short time_error
  3231 00001695 803E[C006]59            		cmp	byte [bin_date_time+1], 59h ; minute check
  3232 0000169A 7705                    		ja	short time_error
  3233                                  		; 12/12/2022h
  3234                                  		;cmp	byte [bin_date_time+2], 59h ; second check
  3235                                  		;ja	short time_error
  3236                                  		;clc
  3237                                  		;retn
  3238                                  		; 12/12/2022
  3239 0000169C 803E[C106]5A            		cmp	byte  [bin_date_time+2], 5Ah	
  3240                                  time_error:
  3241                                  bv_error:	
  3242 000016A1 F5                      		cmc	; cf=0 -> cf=1, cf=1 -> cf=0
  3243 000016A2 C3                      		retn
  3244                                  
  3245                                  ; ----------------------------------------------------------------------------
  3246                                  
  3247                                  ;time_error:				
  3248                                  		;stc
  3249                                  		;retn
  3250                                  
  3251                                  ; =============== S U B	R O U T	I N E ========================================
  3252                                  
  3253                                  ;   bcd_verify checks values in bin_date_time to be valid
  3254                                  ;   bcd numerals.  carry set if any nibble out of range
  3255                                  
  3256                                  bcd_verify:	; proc near		
  3257 000016A3 B90400                  		mov	cx, 4		; 4 bytes to check
  3258 000016A6 BB[BF06]                		mov	bx, bin_date_time
  3259                                  bv_loop:				
  3260 000016A9 8A07                    		mov	al, [bx]	; get a	bcd number (0..99)
  3261 000016AB 88C4                    		mov	ah, al
  3262 000016AD 250FF0                  		and	ax, 0F00Fh	; 10's place in high ah, 1's in al
  3263                                  					; is 1's place in range?
  3264 000016B0 3C0A                    		cmp	al, 10
  3265 000016B2 77ED                    		ja	short bv_error	; jmp out of range
  3266 000016B4 D0EC                    		shr	ah, 1
  3267 000016B6 D0EC                    		shr	ah, 1
  3268 000016B8 D0EC                    		shr	ah, 1
  3269 000016BA D0EC                    		shr	ah, 1
  3270 000016BC 80E40F                  		and	ah, 0Fh		; get rid of any erroneous bits
  3271 000016BF 80FC0A                  		cmp	ah, 10		; is 10's place in range
  3272 000016C2 77DD                    		ja	short bv_error	; jmp out of range
  3273 000016C4 43                      		inc	bx		; next byte
  3274 000016C5 49                      		dec	cx
  3275 000016C6 75E1                    		jnz	short bv_loop
  3276 000016C8 F8                      		clc			; set success flag
  3277 000016C9 C3                      		retn
  3278                                  ; ----------------------------------------------------------------------------
  3279                                  
  3280                                  		; 12/12/2022
  3281                                  ;bv_error:				
  3282                                  		;stc			; set error flag
  3283                                  		;retn
  3284                                  
  3285                                  ; ----------------------------------------------------------------------------
  3286                                  
  3287                                  endk09:
  3288                                  
  3289                                  ; ----------------------------------------------------------------------------
  3290                                  
  3291                                  ;------------------------------------------------------------------------
  3292                                  ;									:
  3293                                  ;	System initialization						:
  3294                                  ;									:
  3295                                  ;	The entry conditions are established by the bootstrap		:
  3296                                  ;	loader and are considered unknown. The following jobs		:
  3297                                  ;	will be performed by this module:				:
  3298                                  ;									:
  3299                                  ;	1.	All device initialization is performed			:
  3300                                  ;	2.	A local stack is set up and DS:SI are set		:
  3301                                  ;		to point to an initialization table. Then		:
  3302                                  ;		an inter-segment call is made to the first		:
  3303                                  ;		byte of the dos 					:
  3304                                  ;	3.	Once the dos returns from this call the ds		:
  3305                                  ;		register has been set up to point to the start		:
  3306                                  ;		of free memory. The initialization will then		:
  3307                                  ;		load the command program into this area 		:
  3308                                  ;		beginning at 100 hex and transfer control to		:
  3309                                  ;		this program.						:
  3310                                  ;									:
  3311                                  ;------------------------------------------------------------------------
  3312                                  
  3313                                  ; 01/10/2022
  3314                                  ; 08/01/2018 - Retro DOS v4.0
  3315                                  
  3316                                  ; drvfat must be the first location of freeable space!
  3317                                  
  3318                                  
  3319                                  align 2
  3320                                  		;db 90h
  3321                                  
  3322                                  ; 20/12/2022 - Retro DOS v4.0 (MSDOS 5.0 combined/single kernel file)
  3323                                  ; ((no need to read/load 'MSDOS.SYS', it is already loaded))
  3324                                  ; (((bios_l,bios_h,doscnt,fatloc,md_sectorsize,temp_cluster,last_fat_sec_num
  3325                                  ;   would be used to read 'MSDOS.SYS' from disk, now they are not needed)))
  3326                                  	
  3327 000016CA 0000                    drvfat:		dw 0			; drive	and fat	id of dos
  3328                                  ;bios_l:	dw 0			; first	sector of data (low word)
  3329                                  ;bios_h:	dw 0			; first	sector of data (high word)
  3330                                  ;doscnt:	dw 0			; how many sectors to read
  3331 000016CC 00                      fbigfat:	db 0			; flags	for drive
  3332                                  ;fatloc:	dw 0			; seg addr of fat sector
  3333 000016CD 0000                    init_bootseg:	dw 0			; seg addr of buffer for reading boot record
  3334 000016CF 80                      rom_drv_num:	db 80h			; rom drive number
  3335                                  ;md_sectorsize:	dw 200h			; used by get_fat_sector proc.
  3336                                  ;temp_cluster:	dw 0			; used by get_fat_sector proc.
  3337                                  ;last_fat_sec_num: dw 0FFFFh		; used by get_fat_sector proc.
  3338                                  
  3339                                  ; the following two bytes are used to save the info returned by int 13, ah = 8
  3340                                  ; call to determine drive parameters.
  3341                                  
  3342 000016D0 02                      num_heads:	db 2			; number of heads returned by rom
  3343 000016D1 09                      sec_trk:	db 9			; sec/trk returned by rom
  3344 000016D2 28                      num_cyln:	db 40			; number of cylinders returned by rom
  3345 000016D3 00                      fakefloppydrv:	db 0			; if 1,	then no	diskette drives	in the system.
  3346                                  
  3347                                  ; ----------------------------------------------------------------------------
  3348                                  
  3349 000016D4 0002000140000000        disktable:	dw 512,	256, 64, 0	; warning !!! old values
  3350 000016DC 0008010270000000        		dw 2048, 513, 112, 0
  3351 000016E4 0020020400010000        		dw 8192, 1026, 256, 0
  3352 000016EC A87F030800020000        		dw 32680, 2051,	512, 0	; warning !!! old values
  3353 000016F4 FFFF041000040000        		dw 65535, 4100,	1024, 0	; default disktable under
  3354                                  					; the assumption of total fat size <= 128 kb,
  3355                                  					; and the maximum size of fat entry = 16 bit.
  3356                                  
  3357 000016FC 0000A87F0308000200-     disktable2:	dw 0, 32680, 2051, 512,	0 
  3357 00001705 00                 
  3358                                  					; for compatibility.
  3359 00001706 040000000204000240-     		dw 4, 0, 402h, 200h, 40h ; covers upto 134 mb media.
  3359 0000170F 00                 
  3360                                  					; fbig = 40h
  3361 00001710 080000000308000240-     		dw 8, 0, 803h, 200h, 40h ; upto	268 mb
  3361 00001719 00                 
  3362 0000171A 100000000410000240-     		dw 10h,	0, 1004h, 200h,	40h ; upto 536 mb
  3362 00001723 00                 
  3363 00001724 200000000520000240-     		dw 20h,	0, 2005h, 200h,	40h ; upto 1072	mb
  3363 0000172D 00                 
  3364 0000172E 400000000640000240-     		dw 40h,	0, 4006h, 200h,	40h ; upto 2144	mb
  3364 00001737 00                 
  3365 00001738 800000000780000240-     		dw 80h,	0, 8007h, 200h,	40h ; upto 4288	mb...
  3365 00001741 00                 
  3366                                  					
  3367                                  ; ----------------------------------------------------------------------------
  3368                                  
  3369                                  ;******************************************************
  3370                                  ;variables for mini disk initialization
  3371                                  ;******************************************************
  3372                                  
  3373                                  ; 01/10/2022
  3374                                  ; [ Note: Minidisk == logical dos drive (in extended dos partition) ] 
  3375                                  
  3376 00001742 00                      rom_minidisk_num: db 0			; temp variable	for phys unit
  3377 00001743 00                      hnum:		db 0			; real number of hardfiles
  3378 00001744 [8706]                  last_dskdrv_table: dw dskdrvs		; index	into dskdrv table
  3379 00001746 [1709]                  end_of_bdss:	dw bdss			; offset value of the ending address
  3380                                  					; of bds table. needed to figure out
  3381                                  					; the dosdatasg address.
  3382 00001748 0000                    mini_hdlim:	dw 0			
  3383 0000174A 0000                    mini_seclim:	dw 0
  3384                                  
  3385                                  ;end of mini disk init variables **********************
  3386                                  
  3387                                  ; ----------------------------------------------------------------------------
  3388                                  			
  3389 0000174C 30312F31302F383400      bios_date:	db '01/10/84',0 	; used for checking at rom bios	date.
  3390                                  
  3391                                  ; 13/12/2022
  3392                                  %if 0
  3393                                  
  3394                                  ;align 2
  3395                                  		db  90h	
  3396                                  
  3397                                  ; the following are the recommended bpbs for the media that we know of so far.
  3398                                  
  3399                                  ;struc bpbx
  3400                                  ;   resw 1 ; 512
  3401                                  ;   resb 1
  3402                                  ;   resw 1 ; 1
  3403                                  ;   resb 1 ; 2
  3404                                  ;   resw 1
  3405                                  ;   resw 1
  3406                                  ;   resb 1
  3407                                  ;   resw 1
  3408                                  ;   resw 1
  3409                                  ;   resw 1 ; 2
  3410                                  ;   resw 1
  3411                                  ;   resw 1 ; hidden sector high
  3412                                  ;   resd 1 ; extended total sectors
  3413                                  ;.size:
  3414                                  ;endstruc
  3415                                  
  3416                                  ; 08/01/2019 - Retro DOS v4.0
  3417                                  
  3418                                  ; 20/04/2019
  3419                                  
  3420                                  ; 01/10/2022 - Retro DOS v4.0 (MSDOS 5.0) IO.SYS
  3421                                  
  3422                                  ; 09/12/2022
  3423                                  BPB48T:
  3424                                  ;bpb48t:	; bpbx <512, 2, 1, 2, 112, 720, 0FDh, 2, 9, 2, 0, 0, 0, 0> 
  3425                                  		; 48 tpi diskettes	;
  3426                                  		dw	512		; physical sector size in bytes
  3427                                  		db	2		; sectors/allocation unit
  3428                                  		dw	1		; reserved sectors for dos
  3429                                  		db	2		; number of allocation tables
  3430                                  		dw	112		; number of directory entries
  3431                                  		dw	720 ; 2*9*40	; number of sectors (at 512 bytes each)
  3432                                  		db	0FDh		; media descriptor
  3433                                  		dw	2		; number of fat sectors
  3434                                  		dw	9		; sectors per track
  3435                                  		dw	2		; heads
  3436                                  		dw	0		; hidden sector count (low word)
  3437                                  		dw	0		; hidden sector (high)
  3438                                  		dw	0		; number of sectors (low)
  3439                                  		dw	0		; number of sectors (high)					
  3440                                  
  3441                                  		db 90h
  3442                                  ;align 2
  3443                                  BPB96T:
  3444                                  ;bpb96t:	; bpbx <512, 1, 1, 2, 224, 2400, 0F9h, 7, 15, 2, 0, 0, 0, 0> 
  3445                                  		; 96 tpi diskettes	;
  3446                                  		dw	512		; physical sector size in bytes
  3447                                  		db	1		; sectors/allocation unit
  3448                                  		dw	1		; reserved sectors for dos
  3449                                  		db	2		; number of allocation tables
  3450                                  		dw	224		; number of directory entries
  3451                                  		dw	2400 ; 2*15*80	; number of sectors (at 512 bytes each)
  3452                                  		db	0F9h		; media descriptor
  3453                                  		dw	7		; number of fat sectors
  3454                                  		dw	15		; sectors per track
  3455                                  		dw	2		; heads
  3456                                  		dw	0		; hidden sector count (low word)
  3457                                  		dw	0		; hidden sector (high)
  3458                                  		dw	0		; number of sectors (low)
  3459                                  		dw	0		; number of sectors (high)
  3460                                  
  3461                                  		db 90h
  3462                                  ;align 2
  3463                                  BPB35:
  3464                                  ;bpb35:		; bpbx <512, 2, 1, 2, 112, 1440, 0F9h, 3, 9, 2, 0, 0, 0, 0> 
  3465                                  		; 3.5" diskettes - 720 KB ;		
  3466                                  		dw	512		; physical sector size in bytes
  3467                                  		db	2		; sectors/allocation unit
  3468                                  		dw	1		; reserved sectors for dos
  3469                                  		db	2		; number of allocation tables
  3470                                  		dw	112		; number of directory entries
  3471                                  		dw	1440 ; 2*9*80	; number of sectors (at 512 bytes each)
  3472                                  		db	0F9h		; media descriptor
  3473                                  		dw	3		; number of fat sectors
  3474                                  		dw	9		; sectors per track
  3475                                  		dw	2		; heads
  3476                                  		dw	0		; hidden sector count (low word)
  3477                                  		dw	0		; hidden sector (high)
  3478                                  		dw	0		; number of sectors (low)
  3479                                  		dw	0		; number of sectors (high)
  3480                                  
  3481                                  		db 90h
  3482                                  ;align 2
  3483                                  
  3484                                  ;align 2
  3485                                  ;BPB144:
  3486                                  ;bpb144:	; Retro DOS v4.0 feature only !	; 1.44MB diskettes
  3487                                  ;
  3488                                  ;		dw	512		; physical sector size in bytes
  3489                                  ;		db	1		; sectors/allocation unit
  3490                                  ;		dw	1		; reserved sectors for dos
  3491                                  ;		db	2		; number of allocation tables
  3492                                  ;		dw	224		; number of directory entries
  3493                                  ;		dw	2880 ; 2*18*80	; number of sectors (at 512 bytes each)
  3494                                  ;		db	0F0h		; media descriptor
  3495                                  ;		dw	9		; number of fat sectors
  3496                                  ;		dw	18		; sectors per track
  3497                                  ;		dw	2		; heads
  3498                                  ;		dw	0		; hidden sector count (low word)
  3499                                  ;		dw	0		; hidden sector (high)
  3500                                  ;		dw	0		; number of sectors (low)
  3501                                  ;		dw	0		; number of sectors (high)
  3502                                  ;
  3503                                  ;		db 90h
  3504                                  ;align 2
  3505                                  
  3506                                  BPB288:
  3507                                  ;bpb288:	; bpbx <512, 2, 1, 2, 240, 5760, 0F0h, 9, 36, 2, 0, 0, 0, 0>
  3508                                  		; 3.5" diskettes - 2.88 MB ;	 
  3509                                  		dw	512		; physical sector size in bytes
  3510                                  		db	2		; sectors/allocation unit
  3511                                  		dw	1		; reserved sectors for dos
  3512                                  		db	2		; number of allocation tables
  3513                                  		dw	240		; number of directory entries
  3514                                  		dw	5760 ; 2*36*80	; number of sectors (at 512 bytes each)
  3515                                  		db	0F0h		; media descriptor
  3516                                  		dw	3		; number of fat sectors
  3517                                  		dw	9		; sectors per track
  3518                                  		dw	2		; heads
  3519                                  		dw	0		; hidden sector count (low word)
  3520                                  		dw	0		; hidden sector (high)
  3521                                  		dw	0		; number of sectors (low)
  3522                                  		dw	0		; number of sectors (high)
  3523                                  
  3524                                  		db 90h			;
  3525                                  ;align 2
  3526                                  
  3527                                  %endif
  3528                                  
  3529                                  ; ----------------------------------------------------------------------------
  3530                                  					; align	2
  3531                                  ; 09/12/2022
  3532                                  %if 0
  3533                                  bpbtable:	dw bpb48t		; 48tpi	drives
  3534                                  		dw bpb96t		; 96tpi	drives
  3535                                  		dw bpb35		; 3.5" drives
  3536                                  		dw bpb35		; unused 8" diskette
  3537                                  		dw bpb35		; unused 8" diskette
  3538                                  		dw bpb35		; used for hard	disk
  3539                                  		dw bpb35		; used for tape	drive
  3540                                  		dw bpb35		; FFOTHER
  3541                                  		dw bpb35		; ERIMO
  3542                                  		dw bpb288		; 2.88MB drive
  3543                                  		;
  3544                                  		;dw bpb144		; 1.44MB drive - Retro DOS v4.0 feature !
  3545                                  %endif
  3546                                  
  3547                                  ; 13/12/2022
  3548                                  %if 0
  3549                                  BPBTABLE:	dw BPB48T		; 48tpi	drives
  3550                                  		dw BPB96T		; 96tpi	drives
  3551                                  		dw BPB35		; 3.5" drives
  3552                                  		dw BPB35		; unused 8" diskette
  3553                                  		dw BPB35		; unused 8" diskette
  3554                                  		dw BPB35		; used for hard	disk
  3555                                  		dw BPB35		; used for tape	drive
  3556                                  		dw BPB35		; FFOTHER
  3557                                  		dw BPB35		; ERIMO
  3558                                  		dw BPB288		; 2.88MB drive
  3559                                  		;
  3560                                  		;dw BPB144		; 1.44MB drive - Retro DOS v4.0 feature !
  3561                                  
  3562                                  %endif
  3563                                  
  3564                                  ; ----------------------------------------------------------------------------
  3565                                  
  3566                                  ;	entry point to call utility functions in Bios_Code. At this time,
  3567                                  ;	  we aren't doing any A20 switching. During MSINIT time Bios_Code
  3568                                  ;	  will not yet be moved to its final resting place, so we know
  3569                                  ;	  it'll be low.
  3570                                  ;
  3571                                  ;	to use this function, do a "push cs" and load bp with the offset of
  3572                                  ;	  the function you want to call in Bios_Code. This routine will
  3573                                  ;	  push the address of a retf in Bios_Code onto the stack which
  3574                                  ;	  will get executed when the utility function finishes. It will
  3575                                  ;	  then transfer control to Bios_Code:bp using a couple of pushes
  3576                                  ;	  and a retf
  3577                                  
  3578                                  ; 16/10/2022
  3579                                  ;BC_RETF equ bc_retf - DOSBIOSEG_2C7h
  3580                                  ; 09/12/2022
  3581                                  BC_RETF equ bc_retf
  3582                                  
  3583                                  addr_of_bcretf:	;dw 0C8h		; dw bc_retf
  3584                                  					; 2C7h:0C8h = 70h:2638h
  3585 00001755 [C800]                  		dw BC_RETF
  3586                                  
  3587                                  ; ----------------------------------------------------------------------------
  3588                                  
  3589                                  call_bios_code:	; proc far			
  3590 00001757 2EFF36[5517]            		push	word [cs:addr_of_bcretf] 
  3591                                  					; set up near return to far return
  3592 0000175C 2EFF36[E006]            		push	word [cs:cdev+2] ; push Bios_Code segment
  3593 00001761 55                      		push	bp		; save offset of utility function
  3594 00001762 CB                      		retf			; far jump to (DOS)BIOS code
  3595                                  
  3596                                  ; ----------------------------------------------------------------------------
  3597                                  		
  3598                                  		; 20/12/2022
  3599                                  ;flp_drvs	db 0			
  3600                                  
  3601                                  ; ----------------------------------------------------------------------------
  3602                                  
  3603                                  ; 01/10/2022 - Retro DOS v4.0 (MSDOS 5.0, classic/old MICROSOFT DOS method)
  3604                                  ; 20/12/2022 - Retro DOS v4.0 (combined kernel files, original/new method) (*)
  3605                                  ;      (*) (for using Retro DOS kernel 'MSDOS.SYS' with Retro DOS boot sector)
  3606                                  
  3607                                  ;-----------------------------------------------------------------------------
  3608                                  ; entry point from boot sector
  3609                                  ;-----------------------------------------------------------------------------
  3610                                  
  3611                                  init:		; 27/12/2018
  3612                                  		; MSDOS 6.0 (MSINIT.ASM)
  3613                                  		;=============================================================
  3614                                  		;
  3615                                  		; entry from boot sector. the register contents are:
  3616                                  		;
  3617                                  		;   dl = int 13 drive number we booted from
  3618                                  		;   ch = media byte
  3619                                  		;   bx = first data sector on disk.
  3620                                  		;   ax = first data sector (high)
  3621                                  		;   di = sectors/fat for the boot media.
  3622                                  
  3623                                  		; 07/04/2018
  3624                                  		;=============================================================
  3625                                  		; Retro DOS v2.0 - registers from FD Boot Sector 
  3626                                                  ; DL = [bsDriveNumber]
  3627                                  		; DH = [bsMedia]
  3628                                  		; AX = [bsSectors] ; Total sectors
  3629                                  		; DS = 0, SS = 0
  3630                                  		; BP = 7C00h
  3631                                  
  3632                                  		; 29/09/2023
  3633                                  		; SP = 0FFFEh (for Retro DOS v2&v3 boot sector) 
  3634                                  		;    = 07C00h (for MSDOS 5.0 boot sector)
  3635                                  	
  3636                                  ; 20/12/2022
  3637                                  ; Changing original MSDOS 5.0 IO.SYS init code with Retro DOS v4.0 init code.		
  3638                                  %if 0	
  3639                                  		cli
  3640                                  
  3641                                  		push	ax
  3642                                  		xor	ax, ax
  3643                                  		mov	ds, ax
  3644                                  		pop	ax
  3645                                  %endif
  3646                                  
  3647                                  ; 20/12/2022 - Retro DOS v4.0 (combined kernel)
  3648                                  
  3649                                  KERNEL_SEGMENT equ 70h	; (DOS BIOSDATA SEGMENT)
  3650                                  BSSECPERTRACK equ 18h	; boot sector offset 18h (for Retro DOS & MSDOS)	
  3651                                  
  3652                                  ;-----------------------------------------------------------------------------
  3653                                  ; initialization - stage 1
  3654                                  ;-----------------------------------------------------------------------------
  3655                                  ; 02/06/2018 - Retro DOS v3.0
  3656                                  		
  3657                                  		; 21/12/2022
  3658                                  		; Move Retro DOS v2.0 boot sector parameters to 0060h:0
  3659                                  		;mov	bx, 60h
  3660                                  		;mov	es, bx
  3661                                  		;mov	si, bp
  3662                                  		;sub	di, di
  3663                                  		;mov	cx, 35 ; 70 bytes, 35 words
  3664                                  		;;mov	cl, 35
  3665                                  		;rep	movsw
  3666                                  
  3667 00001763 0E                      		push	cs
  3668 00001764 1F                      		pop	ds
  3669                                  
  3670                                  		; 20/03/2019 - Retro DOS v4.0
  3671                                  		;cli		; turn interrupts off while manupulating stack
  3672                                  		;mov	ss, cx	; set stack segment register
  3673 00001765 BC0007                  		mov	sp, 0700h ; move stack pointer to safe place
  3674                                  		;sti		; turn interrupts on
  3675                                  
  3676                                  		; 27/03/2018
  3677                                  		;mov	cx, KERNEL_SIZE	; words !
  3678                                  
  3679                                  		; 20/03/2019
  3680 00001768 B90080                  		mov	cx, 32768 ; 65536 bytes
  3681                                  
  3682                                  		; 21/12/2022
  3683                                  		; 07/04/2018
  3684 0000176B BB7000                  		mov	bx, KERNEL_SEGMENT ; 0070h
  3685                                  		;mov	bl, KERNEL_SEGMENT
  3686 0000176E 8EC3                    		mov	es, bx
  3687 00001770 31FF                    		xor	di, di
  3688 00001772 89FE                    		mov	si, di
  3689                                  		
  3690                                  		; Move KERNEL file from 1000h:0 to 0070h:0
  3691                                  		; (Retro DOS v2 BS loads 'MSDOS.SYS' at 1000h:0000h)
  3692 00001774 F3A5                    		rep	movsw
  3693                                  
  3694                                  		; 20/03/2019 - Retro DOS v4.0
  3695 00001776 53                      		push	bx
  3696 00001777 68[7B17]                		push	init0
  3697 0000177A CB                      		retf
  3698                                  init0:	
  3699                                  		; 20/12/2022
  3700                                  		; (combined kernel file > 64KB)
  3701                                  
  3702                                  		; 20/03/2019
  3703 0000177B B520                    		mov	ch, 20h
  3704 0000177D 8ED9                    		mov	ds, cx ; 2000h
  3705                                  		;mov	cx, 1070h
  3706 0000177F B97010                  		mov	cx, KERNEL_SEGMENT+1000h ; 20/12/2022
  3707 00001782 8EC1                    		mov	es, cx
  3708                                  		
  3709                                  		; 21/12/2022
  3710                                  		;KERNEL_SIZE equ END_OF_KERNEL - BData_start
  3711                                  		; 28/09/2023
  3712                                  		NXWORDCOUNT equ ((KERNEL_SIZE+1)>>1)-32768
  3713                                  
  3714                                  		;mov	cx, KERNEL_SIZE - 32768
  3715                                  		; 28/09/2023 (BugFix)
  3716 00001784 B96803                  		mov	cx, NXWORDCOUNT
  3717                                  		;shr	cx, 1 ; 28/09/2023
  3718                                  		;xor	si, si
  3719                                  		;xor	di, di
  3720 00001787 F3A5                    		rep	movsw
  3721                                  
  3722                                  		; 28/09/2023
  3723                                  		;; 17/06/2018 
  3724                                  		;mov	ds, bx
  3725                                  		;; 21/03/2019
  3726                                  		;mov	es, bx
  3727                                  ;init0:
  3728                                  ;		;push	es
  3729                                  ;		push	bx ; 20/03/2019
  3730                                  ;		push	init1 ; 07/04/2018
  3731                                  ;		retf	; jump to 0070h:init1
  3732                                  ;init:
  3733                                  init1:
  3734                                  		; 20/12/2022
  3735                                  		; Change INT 1Eh diskette parameters table and INT 1Eh address
  3736                                  		; for full MSDOS compatibility.
  3737                                  
  3738 00001789 8EC1                    		mov	es, cx ; 0
  3739 0000178B 8ED9                    		mov	ds, cx ; 0
  3740                                  
  3741 0000178D B82205                  		mov	ax, SEC9
  3742                                  
  3743                                  		;mov	bx, 1Eh*4  ; [0078h] ; INT 1Eh vector/pointer
  3744 00001790 B378                    		mov	bl, 1Eh*4
  3745                                  				; INT 1Eh points to diskette parms table
  3746                                  
  3747                                  		; check if the table is already at 0:SEC9 (0:0522h)
  3748                                   		; (do not move the DPT if is not original ROMBIOS table)
  3749                                  
  3750                                  		;;or	[bx+2],cx [(1Eh*4)+2] ; [007Ah] ; segment
  3751                                  		;;jnz	short mov_dpt
  3752                                  
  3753                                  		;cmp	ax, [bx]  ; [1Eh*4] = 0522h ?
  3754                                  		;je	short dont_mov_dpt
  3755                                  
  3756                                  		;mov	si, [bx] ; [1Eh*4]		
  3757                                  ;mov_dpt:
  3758                                  		;mov	ds, [bx+2] ; [(1Eh*4)+2] ; [007Ah] ; segment
  3759 00001792 C537                    		lds	si, [bx]
  3760 00001794 89C7                    		mov	di, ax  ; SEC9
  3761 00001796 B10B                    		mov	cl, 11
  3762                                  		;cld
  3763 00001798 F3A4                    		rep	movsb
  3764                                  
  3765                                  		; Set INT 1Eh vector/pointer to the new DPT address
  3766 0000179A 8ED9                    		mov	ds, cx ; 0
  3767 0000179C 8907                    		mov	[bx], ax ; SEC9	; [007Eh] ; 1Eh*4  ; offset
  3768 0000179E 894F02                  		mov	[bx+2], cx ; 0  ; [007Ah] ; 1Eh*4+2 ; segment
  3769                                  ;dont_mov_dpt:
  3770                                  
  3771                                  ; 20/12/2022 - Retro DOS v4.0
  3772                                  %if 0
  3773                                  		; 27/12/2018 - Retro DOS v4.0
  3774                                  		; 'Starting MS-DOS...' message
  3775                                  		; (MSDOS 6.21, IO.SYS Segment: 423h, Offset: 5673h)
  3776                                  		; (0070h:96A3h)
  3777                                  
  3778                                    	    	mov     si, SYSINIT_START+StartMsg ; 18/03/2019
  3779                                  		mov     ah, 0Eh
  3780                                  		;bh = 0
  3781                                          	mov     bl, 7		; "normal" attribute and page
  3782                                  startmsg_nxt_chr:  
  3783                                  		lodsb
  3784                                  		or	al, al
  3785                                          	jz	short startmsg_ok
  3786                                         
  3787                                  		int	10h		; video write
  3788                                          	jmp	short startmsg_nxt_chr
  3789                                  
  3790                                  ;flp_drvs:	db  0 	; 27/12/2018 - Retro DOS v4.0
  3791                                  
  3792                                  startmsg_ok:
  3793                                  
  3794                                  %endif
  3795                                  
  3796                                  ;-----------------------------------------------------------------------------
  3797                                  ; initialization - stage 2
  3798                                  ;-----------------------------------------------------------------------------
  3799                                  ; 20/12/2022 - Retro DOS v4.0 (combined kernel)
  3800                                  
  3801                                  
  3802                                  ; 19/03/2018
  3803                                  ; Retro DOS v2.0 (24/02/2018)
  3804                                  ; [REF: MSDOS 3.3, MSBIO, "MSINIT.ASM"  (24/07/1987)]
  3805                                  
  3806                                  ;------------------------------------------------------------------------
  3807                                  ;									:
  3808                                  ;	System initialization						:
  3809                                  ;									:
  3810                                  ;	The entry conditions are established by the bootstrap		:
  3811                                  ;	loader and are considered unknown. The following jobs		:
  3812                                  ;	will be performed by this module:				:
  3813                                  ;									:
  3814                                  ;	1.	All device initialization is performed			:
  3815                                  ;	2.	A local stack is set up and DS:SI are set		:
  3816                                  ;		to point to an initialization table. Then		:
  3817                                  ;		an inter-segment call is made to the first		:
  3818                                  ;		byte of the dos 					:
  3819                                  ;	3.	Once the dos returns from this call the ds		:
  3820                                  ;		register has been set up to point to the start		:
  3821                                  ;		of free memory. The initialization will then		:
  3822                                  ;		load the command program into this area 		:
  3823                                  ;		beginning at 100 hex and transfer control to		:
  3824                                  ;		this program.						:
  3825                                  ;									:
  3826                                  ;------------------------------------------------------------------------
  3827                                  		
  3828                                  		; 20/12/2022
  3829                                  		; ----------------------
  3830                                  		; Registers
  3831                                  		; ----------------------
  3832                                  		; DL = [bsDriveNumber]
  3833                                  		; DH = [bsMedia]
  3834                                  		; DS = 0, ES = 0, SS = 0
  3835                                  		; BP = 7C00h
  3836                                  		; SP = 700h
  3837                                  		; ----------------------
  3838                                  		; CX = 0				
  3839                                  
  3840                                  ; 02/10/2022 - 20/12/2022
  3841                                  ; ------------------------------------------------------------------------------
  3842                                  ; Note: Retro DOS v4.0 Kernel does not use/contain MSLOAD part of IO.SYS (5.0)
  3843                                  ; 	Because, Retro DOS v2 boot sector loads complete/entire MSDOS.SYS
  3844                                  ;	(RETRODOS.SYS) Kernel file (IO.SYS & MSDOS.SYS together).
  3845                                  ;	As result of boot sector ve init differences, Retro DOS init code (here)
  3846                                  ;	moves kernel to segment 70h at first, then sets diskette parameters
  3847                                  ;	at segment 50h (while MSDOS 5.0 boot sector and then MSLOAD sets this).
  3848                                  ; ------------------------------------------------------------------------------
  3849                                  
  3850                                  ; msload will check the extended boot record and set ax, bx accordingly.
  3851                                  ;
  3852                                  ;;	msload passes a 32 bit sector number hi word in ax and low in bx
  3853                                  ;;	save this in cs:bios_h and cs:bios_l. this is for the start of
  3854                                  ;;	data sector of the bios.
  3855                                  ;
  3856                                  ;		mov	[cs:bios_h], ax	; (start of) dos bios (IO.SYS) data sector
  3857                                  ;		mov	[cs:bios_l], bx
  3858                                  
  3859                                  ; with the following information from msload, we don't need the
  3860                                  ;     boot sector any more.-> this will solve the problem of 29 kb size
  3861                                  ;     limitation of msbio.com file.
  3862                                  
  3863                                  		; 21/12/2022
  3864 000017A1 FA                      		cli
  3865                                  
  3866 000017A2 0E                      		push	cs		; Save a peck of interrupt vectors...
  3867 000017A3 07                      		pop	es
  3868                                  		;push	cx
  3869                                  		;push	di
  3870                                  		; 20/12/2022
  3871 000017A4 B105                    		mov	cl, 5
  3872                                  		;mov	cx, 5		; NUMROMVECTORS
  3873                                  					; no. of rom vectors to	be saved
  3874                                  		;mov	si, offset RomVectors ; point to list of int vectors
  3875 000017A6 BE[0001]                		mov	si, RomVectors
  3876                                  next_int_:		
  3877 000017A9 2E                      		cs	; 16/10/2022
  3878 000017AA AC                      		lodsb		
  3879                                  		;lods	byte ptr cs:[si] ; cs lodsb
  3880 000017AB 98                      		cbw			; ax = interrupt number
  3881 000017AC D1E0                    		shl	ax, 1
  3882 000017AE D1E0                    		shl	ax, 1		; int no * 4
  3883 000017B0 89C7                    		mov	di, ax		; interrupt vector address
  3884 000017B2 87F7                    		xchg	si, di		; rombios interrupt vector address in si
  3885                                  					; saving address in di
  3886                                  		;lodsw			; movsw
  3887                                  		;stosw
  3888                                  		;lodsw			; movsw
  3889                                  		;stosw			; save the vector
  3890                                  		; 20/12/2022
  3891 000017B4 A5                      		movsw
  3892 000017B5 A5                      		movsw		
  3893                                  
  3894 000017B6 87F7                    		xchg	si, di
  3895 000017B8 E2EF                    		loop	next_int_
  3896                                  		
  3897                                  		;pop	di
  3898                                  		;pop	cx
  3899                                  
  3900                                  ; we need to save int13 in two places in case we are running on an at.
  3901                                  ; on ats we install the ibm supplied rom_bios patch which hooks
  3902                                  ; int13 ahead of orig13. since int19 must unhook int13 to point to the
  3903                                  ; rom int13 routine, we must have that rom address also stored away.
  3904                                  
  3905                                  		; 20/12/2022
  3906                                  		;mov	ax, [cs:Old13]	; save old13 in orig13 also
  3907                                  		;mov	[cs:Orig13], ax
  3908                                  		;mov	ax, [cs:Old13+2]
  3909                                  		;mov	[cs:Orig13+2], ax
  3910                                  
  3911                                  		; 16/10/2022
  3912 000017BA C7064C00[7407]          		mov	word [13h*4], block13
  3913                                  		;mov	word ptr ds:4Ch, offset	block13	; 13h*4
  3914                                  					; set up int 13	for new	action
  3915 000017C0 8C0E4E00                		mov	[13h*4+2], cs
  3916                                  		;mov	word ptr ds:4Eh, cs ; 13h*4+2
  3917 000017C4 C7065400[4808]          		mov	word [15h*4], Int15
  3918                                  		;mov	word ptr ds:54h, offset	Int15 ;	15h*4
  3919                                  					; set up int 15	for new	action
  3920 000017CA 8C0E5600                		mov	[15h*4+2], cs
  3921                                  		;mov	word ptr ds:56h, cs ; 15h*4+2
  3922 000017CE C7066400[F907]          		mov	word [19h*4], int19
  3923                                  		;mov	word ptr ds:64h, offset	int19 ;	19h*4
  3924                                  					; set up int 19	for new	action
  3925 000017D4 8C0E6600                		mov	[19h*4+2], cs
  3926                                  		;mov	word ptr ds:66h, cs ; 19h*4+2
  3927                                  
  3928                                  		; 20/12/2022
  3929 000017D8 0E                      		push	cs
  3930 000017D9 1F                      		pop	ds
  3931                                  		
  3932 000017DA A1[0601]                		mov	ax, [Old13]	; save old13 in orig13 also
  3933 000017DD A3[B400]                		mov	[Orig13], ax
  3934 000017E0 A1[0801]                		mov	ax, [Old13+2]
  3935 000017E3 A3[B600]                		mov	[Orig13+2], ax
  3936                                  					; ;
  3937 000017E6 FB                      		sti
  3938 000017E7 CD11                    		int	11h		; EQUIPMENT DETERMINATION
  3939                                  					; Return: AX = equipment flag bits
  3940                                  
  3941                                  ; we have to support a system that does not have any diskette
  3942                                  ; drives but only hardfiles. this system will ipl from the hardfile.
  3943                                  ; if the equipment flag bit 0 is 1, then the system has diskette drive(s).
  3944                                  ; otherwise, the system has only hardfiles.
  3945                                  ;
  3946                                  ; important thing is that still, for compatibility reason, the drive letter
  3947                                  ; for the hardfiles start from "c".  so, we still need to allocate dummy bds
  3948                                  ; drive a and drive b. at sysinit time, we are going to set cds table entry
  3949                                  ; of dpb pointer for these drives to 0, so any user attempt to access this
  3950                                  ; drives will get "invalid drive letter ..." message. we are going to
  3951                                  ; establish "fakefloppydrv" flag. ***sysinit module should call int 11h to
  3952                                  ; determine whether there are any diskette drivers in the system or not.!!!***
  3953                                  
  3954                                  ; check the register returned by the equipment determination interrupt
  3955                                  ; we have to handle the case of no diskettes in the system by faking
  3956                                  ; two dummy drives.
  3957                                  ;
  3958                                  ; if the register indicates that we do have floppy drives we don't need
  3959                                  ; to do anything special.
  3960                                  ;
  3961                                  ; if the register indicates that we don't have any floppy drives then
  3962                                  ; what we need to do is set the fakefloppydrv variable, change the
  3963                                  ; register to say that we do have floppy drives and then go to execute
  3964                                  ; the code which starts at notsingle. this is because we can skip the
  3965                                  ; code given below which tries to find if there are one or two drives
  3966                                  ; since we already know about this.
  3967                                  
  3968                                  		; 06/05/2019 - Retro DOS v4.0
  3969 000017E9 88C1                    		mov	cl, al
  3970                                  
  3971                                  		; 12/12/2022
  3972 000017EB A801                    		test	al, 1
  3973                                  		;test	ax, 1		; floppy drives	present	?
  3974 000017ED 751F                    		jnz	short normalfloppydrv ;	yes.
  3975                                  
  3976                                  ; Some ROM BIOSs lie that there are no floppy drives. Lets find out
  3977                                  ; whether it is an old ROM BIOS or a new one
  3978                                  ;
  3979                                  ; WARNING !!!
  3980                                  ;
  3981                                  ; This sequence of code is present in SYSINIT1.ASM also. Any modification
  3982                                  ; here will require an equivalent modification in SYSINIT1.ASM also
  3983                                  
  3984                                  		; 20/12/2022
  3985                                  		;push	ax
  3986                                  		;push	bx
  3987                                  		;push	cx
  3988 000017EF 52                      		push	dx
  3989                                  		;push	di
  3990 000017F0 06                      		push	es
  3991 000017F1 B408                    		mov	ah, 8
  3992 000017F3 B200                    		mov	dl, 0
  3993 000017F5 CD13                    		int	13h		; DISK - DISK -	GET CURRENT DRIVE PARAMETERS (XT,AT,XT286,CONV,PS)
  3994                                  					; DL = drive number
  3995                                  					; Return: CF set on error, AH =	status code, BL	= drive	type
  3996                                  					; DL = number of consecutive drives
  3997                                  					; DH = maximum value for head number, ES:DI -> drive parameter
  3998 000017F7 7202                    		jc	short _gdskp_error
  3999                                  		;;mov	[cs:flp_drvs], dl
  4000                                  		; 20/12/2022
  4001                                  		; ds = cs
  4002                                  		;mov	[flp_drvs], dl
  4003 000017F9 88D1                    		mov	cl, dl
  4004                                  _gdskp_error:	
  4005                                  		; 20/12/2022			
  4006 000017FB 07                      		pop	es
  4007                                  		;pop	di
  4008 000017FC 5A                      		pop	dx
  4009                                  		;pop	cx
  4010                                  		;pop	bx
  4011                                  		;pop	ax
  4012                                  		
  4013 000017FD 720F                    		jc	short normalfloppydrv
  4014                                  					; if error it is an old ROM BIOS
  4015                                  					; so, lets assume that ROM BIOS lied
  4016                                  		; 20/12/2022
  4017                                  		; ds = cs
  4018                                  		;cmp	byte [flp_drvs], 0
  4019                                  		;;cmp	byte [cs:flp_drvs], 0 ; number of drvs == 0?
  4020                                  		;jz	short _set_fake_flpdrv
  4021                                  		;;mov	al, [cs:flp_drvs]
  4022                                  		;mov	al, [flp_drvs]
  4023                                  		;;dec	al		; make it zero based
  4024                                  		;; 18/12/2022
  4025                                  		;dec	ax
  4026                                  		;jmp	short got_num_flp_drvs
  4027                                  		
  4028                                  		; 20/12/2022
  4029 000017FF 08C9                    		or	cl, cl ; [flp_drvs]
  4030 00001801 7403                    		jz	short _set_fake_flpdrv		
  4031 00001803 49                      		dec	cx	
  4032 00001804 EB0C                    		jmp	short got_num_flp_drvs
  4033                                  ; ----------------------------------------------------------------------------
  4034                                  
  4035                                  _set_fake_flpdrv:
  4036                                  		;20/12/2022
  4037                                  		; ds = cs
  4038 00001806 FEC1                    		inc	cl	; cl = 1
  4039 00001808 880E[D316]              		mov	[fakefloppydrv], cl ; 1
  4040                                  		;mov	byte [fakefloppydrv], 1		
  4041                                  		;;mov	byte [cs:fakefloppydrv], 1
  4042                                  					; we don't have any floppy drives.
  4043                                  		; 20/12/2022
  4044                                  		;mov	ax, 1
  4045 0000180C EB0A                    		jmp	short settwodrive ; well then set it for two drives!
  4046                                  ; ----------------------------------------------------------------------------
  4047                                  
  4048                                  normalfloppydrv:			; yes, bit 0 is 1.			
  4049                                  		; 20/12/2022
  4050                                  		;rol	al, 1		; there	exist floppy drives.
  4051                                  		;rol	al, 1		; put bits 6 & 7 into bits 0 & 1
  4052 0000180E D0C1                    		rol	cl, 1
  4053 00001810 D0C1                    		rol	cl, 1
  4054                                  got_num_flp_drvs:			
  4055                                  		;;and	ax, 3		; only look at bits 0 &	1
  4056                                  		; 18/12/2022
  4057                                  		;and	al, 3
  4058                                  		; 20/12/2022
  4059 00001812 80E103                  		and	cl, 3
  4060 00001815 7505                    		jnz	short notsingle	; zero means single drive system
  4061                                  		; 20/12/2022
  4062 00001817 41                      		inc	cx
  4063                                  		;inc	ax		; pretend it's a two drive system
  4064                                  settwodrive:				; set this to two fakedrives
  4065                                  		; 20/12/2022
  4066                                  		; ds = cs
  4067 00001818 FE06[7800]              		inc	byte [single]
  4068                                  		;inc	byte [cs:single] ; remember this
  4069                                  notsingle:	
  4070                                  		; 20/12/2022			
  4071                                  		;inc	ax		; ax has number	of drives, 2-4
  4072                                  		;			; is also 0 indexed boot drive if we
  4073                                  		;			; booted off hard file
  4074                                  		;mov	cl, al		; ch is	fat id,	cl # floppies
  4075                                  		; 20/12/2022
  4076 0000181C FEC1                    		inc	cl	; cl >= 2
  4077                                  
  4078                                  ; 16/10/2022
  4079                                  ; MSDOS 3.3 - "MSEQU.INC" (24/07/1987)
  4080                                  INITSPOT EQU	534h	; IBM wants 4 zeros here
  4081                                  BRKADR	 EQU	1BH * 4	; 6CH, 1BH break vector address
  4082                                  TIMADR	EQU	1CH * 4	; 70H, 1CH timer interrupt
  4083                                  DSKADR	EQU	1EH * 4	; address of ptr to disk parameters
  4084                                  SEC9	EQU	522h	; address of disk parameters
  4085                                  CHROUT	EQU	29h
  4086                                  LSTDRV	EQU     504h
  4087                                  
  4088                                  ; determine whether we booted from floppy or hard disk...
  4089                                  
  4090                                  		; 20/12/2022
  4091 0000181E 88C8                    		mov	al, cl	; 26/05/2019
  4092                                  
  4093 00001820 F6C280                  		test	dl, 80h		; boot from floppy ?
  4094 00001823 7502                    		jnz	short gothrd	; no.
  4095 00001825 31C0                    		xor	ax, ax		; indicate boot	from drive a
  4096                                  gothrd:					
  4097                                  
  4098                                  ; MSDOS 6.0
  4099                                  ;   ax = 0-based drive we booted from
  4100                                  ;   bios_l, bios_h set.
  4101                                  ;   cl = number of floppies including fake one
  4102                                  ;   ch = media byte
  4103                                  
  4104                                  ; Retro DOS 4.0 - 27/12/2018 
  4105                                  ;  (from Retro DOS v2.0 boot sector)
  4106                                  ;   dl = int 13 drive number we booted from
  4107                                  ;   dh = media byte
  4108                                  
  4109                                  		; 20/12/2022
  4110 00001827 88F5                    		mov	ch, dh		; 01/07/2018
  4111                                  
  4112                                  		; cl = number of floppies
  4113                                  		; ch = media byte
  4114                                  
  4115                                  		; set up local stack
  4116                                  
  4117                                  		; 20/12/2022
  4118                                  		;xor	dx, dx		; ax = 0-based drive we	booted from
  4119                                  					; bios_l, bios_h set.
  4120                                  					; cl = number of floppies including fake one
  4121                                  					; ch = media byte
  4122                                  		; 20/12/2022
  4123                                  		; es = ds = cs
  4124                                  		; ss = 0
  4125                                  		; sp = 700h
  4126                                  
  4127                                  		; 20/12/2022
  4128                                  		;cli
  4129                                  		;mov	ss, dx		; set stack segment and stack pointer
  4130                                  		;mov	sp, 700h
  4131                                  		;sti
  4132                                  
  4133 00001829 51                      		push	cx ; (***) 	; save number of floppies and media byte
  4134                                  		
  4135 0000182A 88EC                    		mov	ah, ch		; FAT ID to AH
  4136 0000182C 50                      		push	ax ; (**)	; save boot drive number and media byte
  4137                                  		
  4138                                  ; let model_byte, secondary_model_byte be set here!!!
  4139                                  
  4140 0000182D B4C0                    		mov	ah, 0C0h
  4141 0000182F CD15                    		int	15h	; SYSTEM - GET CONFIGURATION (XT after 1/10/86,AT mdl 3x9,CONV,XT286,PS)
  4142 00001831 7215                    		jb	short no_rom_system_conf ; just	use Model_Byte
  4143 00001833 80FC00                  		cmp	ah, 0
  4144 00001836 7510                    		jnz	short no_rom_system_conf
  4145                                  
  4146                                  ;		; 20/12/2022
  4147                                  ;		; (Programmer's Guide to the AMIBIOS, page 268)
  4148                                  ;		; (https://stanislavs.org/helppc/int_15-c0.html)
  4149                                  ;
  4150                                  ;		INT 15h, ah = C0h - Return System Configuration Parameters (PS/2 only)
  4151                                  ;
  4152                                  ;		on return:
  4153                                  ;		CF = 0 if successful
  4154                                  ;		   = 1 if error
  4155                                  ;		AH = when CF set, 80h for PC & PCjr, 86h for XT
  4156                                  ;	     	    (BIOS after 11/8/82) and AT (BIOS after 1/10/84)
  4157                                  ;
  4158                                  ;		ES:BX = pointer to system descriptor table in ROM of the format:
  4159                                  ;
  4160                                  ;		Offset Size	     Description
  4161                                  ;
  4162                                  ;		  00   word   length of descriptor (8 minimum)
  4163                                  ;		  02   byte   model byte (same as F000:FFFE, not reliable)
  4164                                  ;		  03   byte   secondary model byte
  4165                                  ;		  04   byte   BIOS revision level (zero based)
  4166                                  ;		  05   byte   feature information, see below
  4167                                  ;		  06   dword  reserved
  4168                                  
  4169                                  		; 20/12/2022
  4170                                  		; ds = cs
  4171 00001838 268A4702                		mov	al, [es:bx+2]	; [es:bx+ROMBIOS_DESC.bios_sd_modelbyte]
  4172 0000183C A2[3E06]                		mov	[model_byte], al
  4173                                  		;mov	[cs:model_byte], al
  4174                                  					; get/save model byte
  4175 0000183F 268A4703                		mov	al, [es:bx+3]	; [es:bx+ROMBIOS_DESC.bios_sd_scnd_modelbyte]
  4176 00001843 A2[3F06]                		mov	[secondary_model_byte], al
  4177                                  		;mov	[cs:secondary_model_byte], al
  4178                                  					; get/save secondary model byte
  4179 00001846 EB0C                    		jmp	short turn_timer_on
  4180                                  ;-----------------------------------------------------------------------------
  4181                                  
  4182                                  no_rom_system_conf:			
  4183 00001848 BEFFFF                  		mov	si, 0FFFFh
  4184 0000184B 8EC6                    		mov	es, si
  4185                                  		; 20/12/2022
  4186 0000184D 26A00E00                		mov	al, [es:0Eh]	; get model byte (from 0FFFFh:0Eh)
  4187 00001851 A2[3E06]                		mov	[model_byte], al
  4188                                  		;mov	[cs:model_byte], al ; save model byte
  4189                                  turn_timer_on:				
  4190 00001854 B020                    		mov	al, 20h	; ' '   ; turn on the timer
  4191 00001856 E620                    		out	20h, al		; Interrupt controller,	8259A.
  4192                                  					; AKPORT
  4193                                  
  4194                                  ; some olivetti m24 machines have an 8530 serial communications
  4195                                  ; chip installed at io address 50h and 52h. if we're running
  4196                                  ; on one of those, we must inhibit the normal aux port initialization
  4197                                  
  4198                                  		; 20/12/2022
  4199                                  		; ds = cs
  4200 00001858 803E[3E06]00            		cmp	byte [model_byte], 0
  4201                                  		;cmp	byte [cs:model_byte], 0 ; next to last	byte in	rom bios
  4202 0000185D 7510                    		jnz	short not_olivetti_m24 ; skip for all other machines
  4203                                  					; (except olivetti m24)
  4204 0000185F E466                    		in	al, 66h		; is 8530 installed?
  4205 00001861 A820                    		test	al, 20h
  4206 00001863 740A                    		jz	short not_olivetti_m24 ; we're done if not
  4207 00001865 B00F                    		mov	al, 0Fh		; double check
  4208 00001867 E650                    		out	50h, al
  4209 00001869 E450                    		in	al, 50h
  4210 0000186B A801                    		test	al, 1		; this test was	copied from olivetti
  4211 0000186D 7414                    		jz	short skip_aux_port_init ; take	this branch if 8530 installed
  4212                                  
  4213                                  not_olivetti_m24:
  4214 0000186F B003                    		mov	al, 3		; init com4
  4215 00001871 E89608                  		call	aux_init
  4216 00001874 B002                    		mov	al, 2		; init com3
  4217 00001876 E89108                  		call	aux_init
  4218 00001879 B001                    		mov	al, 1		; init com2
  4219 0000187B E88C08                  		call	aux_init
  4220 0000187E 30C0                    		xor	al, al		; init com1
  4221 00001880 E88708                  		call	aux_init
  4222                                  
  4223                                  skip_aux_port_init:			
  4224 00001883 B002                    		mov	al, 2		; init lpt3
  4225 00001885 E87A08                  		call	print_init
  4226 00001888 B001                    		mov	al, 1		; init lpt2
  4227 0000188A E87508                  		call	print_init
  4228 0000188D 30C0                    		xor	al, al		; init lpt1
  4229 0000188F E87008                  		call	print_init
  4230                                  
  4231 00001892 31D2                    		xor	dx, dx	; 0
  4232 00001894 8EDA                    		mov	ds, dx		; to initialize	print screen vector
  4233 00001896 8EC2                    		mov	es, dx
  4234 00001898 31C0                    		xor	ax, ax
  4235                                  		; 16/10/2022
  4236 0000189A BF3405                  		mov	di, INITSPOT	; 0534h
  4237                                  		;mov	di, 534h	; INITSPOT (0000h:0534h)
  4238                                  					; IBM wants 4 zeros here
  4239 0000189D AB                      		stosw
  4240 0000189E AB                      		stosw
  4241 0000189F 8CC8                    		mov	ax, cs		; fetch	segment
  4242 000018A1 C7066C00[EE06]          		mov	word [BRKADR], cbreak
  4243                                  		;mov	word ptr ds:6Ch, offset	cbreak ; [BRKADR]
  4244                                  					; break	entry point
  4245 000018A7 A36E00                  		mov	[BRKADR+2], ax		
  4246                                  		;mov	ds:6Eh,	ax	; vector for break
  4247 000018AA C706A400[6207]          		mov	word [CHROUT*4], outchr
  4248                                  		;mov	word ptr ds:0A4h, offset outchr	; [CHROUT*4]
  4249 000018B0 A3A600                  		mov	[CHROUT*4+2], ax
  4250                                  		;mov	ds:0A6h, ax	; [CHROUT*4+2]
  4251                                  
  4252 000018B3 BF0400                  		mov	di, 4
  4253 000018B6 BB[F406]                		mov	bx, intret ; 19/10/2022
  4254                                  		;mov	bx, offset intret ; intret (cs:intret)
  4255                                  					; will initialize rest of interrupts
  4256 000018B9 93                      		xchg	ax, bx
  4257 000018BA AB                      		stosw			; location 4
  4258 000018BB 93                      		xchg	ax, bx		; cs:
  4259 000018BC AB                      		stosw			; int 1	; location 6
  4260 000018BD 83C704                  		add	di, 4
  4261 000018C0 93                      		xchg	ax, bx
  4262 000018C1 AB                      		stosw			; location 12
  4263 000018C2 93                      		xchg	ax, bx		; cs:
  4264 000018C3 AB                      		stosw			; int 3	; location 14
  4265 000018C4 93                      		xchg	ax, bx
  4266 000018C5 AB                      		stosw			; location 16
  4267 000018C6 93                      		xchg	ax, bx		; cs:
  4268 000018C7 AB                      		stosw			; int 4	; location 18
  4269                                  
  4270                                  
  4271                                  ;		; 20/12/2022
  4272                                  ;		; (https://stanislavs.org/helppc/bios_data_area.html)
  4273                                  ;		Address Size	   Description	 (BIOS/DOS Data Area)
  4274                                  ;	
  4275                                  ;		50:00	byte	Print screen status byte
  4276                                  ;				 00 = PrtSc not active,
  4277                                  ;				 01 = PrtSc in progress
  4278                                  ;				 FF = error
  4279                                  ;		50:01  3 bytes	Used by BASIC
  4280                                  ;		50:04	byte	DOS single diskette mode flag, 0=A:, 1=B:
  4281                                  ;		50:05  10bytes	POST work area
  4282                                  ;		50:0F	byte	BASIC shell flag; set to 2 if current shell
  4283                                  ;		50:10	word	BASICs default DS value (DEF SEG)
  4284                                  ;		50:12	dword	Pointer to BASIC INT 1C interrupt handler
  4285                                  ;		50:16	dword	Pointer to BASIC INT 23 interrupt handler
  4286                                  ;		50:1A	dword	Pointer to BASIC INT 24 disk error handler
  4287                                  ;		50:20	word	DOS dynamic storage
  4288                                  ;		50:22  14bytes	DOS diskette initialization table (INT 1E)
  4289                                  ;		50:30	4bytes	MODE command
  4290                                  ;		70:00		I/O drivers from IO.SYS/IBMBIO.COM
  4291                                  
  4292 000018C8 89160005                		mov	[0500h], dx ; 0
  4293                                  		;mov	ds:500h, dx	; set print screen & break = 0
  4294 000018CC 89160405                		mov	[LSTDRV], dx	; [0504h]
  4295                                  		;mov	ds:504h, dx	; clean	out last drive spec
  4296                                  
  4297                                  ; we need to initialize the cs:motorstartup variable from the disk
  4298                                  ; parameter table at sec9. the offsets in this table are defined in
  4299                                  ; the disk_parms struc in msdskprm.inc. 2 locs
  4300                                  
  4301 000018D0 A02C05                  		mov	al, [SEC9+0Ah]	; 16/10/2022 
  4302                                  		;mov	al, ds:52Ch	; [SEC9+DISK_PARMS.DISK_MOTOR_STRT]
  4303                                  					; [522h+0Ah]
  4304                                  		; 20/12/2022
  4305                                  		; ds = 0
  4306                                  
  4307 000018D3 2EA2[2601]              		mov	[cs:motorstartup], al
  4308 000018D7 2E803E[3E06]FD          		cmp	byte [cs:model_byte], 0FDh ; is this an old rom?
  4309 000018DD 720B                    		jb	short no_diddle	; no
  4310 000018DF C7062B050F02            		mov	word [SEC9+09h], 20Fh
  4311                                  		;mov	word ptr ds:52Bh, 20Fh ; [SEC9+DISK_PARMS.DISK_HEAD_STTL], 0200h+NORMSETTLE
  4312                                  					; set head settle and motor start on pc-1 pc-2 pc-xt hal0
  4313 000018E5 C6062205DF              		mov	byte [SEC9+0], 0DFh
  4314                                  		;mov	byte ptr ds:522h, 0DFh ; [SEC9+DISK_PARMS.DISK_SPECIFY_1]
  4315                                  					;  set 1st specify byte	on pc-1	pc-2 pc-xt hal0
  4316                                  no_diddle:				
  4317 000018EA CD12                    		int	12h		; MEMORY SIZE -
  4318                                  					; Return: AX = number of contiguous 1K blocks of memory
  4319 000018EC B106                    		mov	cl, 6
  4320 000018EE D3E0                    		shl	ax, cl		; convert memory size to 16-byte blocks	(segment no.)
  4321                                  		
  4322                                  		; 20/12/2022
  4323                                  		; 03/07/2018 - 27/12/2018
  4324                                  		;pop	cx ; (**)
  4325                                  		;mov	[cs:drvfat], cx
  4326                                  		
  4327 000018F0 50                      		push	ax ; (*)	; save real top	of memory
  4328                                  
  4329                                  		; 27/12/2018 - (MSDOS 6.0, 6.21)
  4330                                  
  4331                                  ;M068 - BEGIN
  4332                                  ;------ Check if an RPL program is present at TOM and do not tromp over it
  4333                                  
  4334                                  		; 20/12/2022
  4335                                  		; ds = 0
  4336                                  
  4337                                  		;push	ds
  4338                                  		;push	bx		; pushes not required but since this
  4339                                  					; happens to be a last minute change
  4340                                  					; & since it is only init code.
  4341                                  		;xor	bx, bx
  4342                                  		;mov	ds, bx
  4343                                  
  4344                                  		;;mov	bx, ds:0BCh	; [2Fh*4]
  4345                                  		;mov	bx, [2Fh*4]
  4346                                  		;;mov	ds, word ptr ds:0BEh ; [2Fh*4+2]
  4347                                  		;mov	ds, [2Fh*4+2]
  4348                                  		; 29/09/2023
  4349 000018F1 C51EBC00                		lds	bx, [2Fh*4]
  4350                                  
  4351 000018F5 817F035250              		cmp	word [bx+3], 'RP' ; 'RPL'
  4352                                  		;cmp	word ptr [bx+3], 'PR' ; 'RPL'
  4353 000018FA 750F                    		jnz	short SkipRPL
  4354 000018FC 807F054C                		cmp	byte [bx+5], 'L'
  4355                                  		;cmp	byte ptr [bx+5], 'L'
  4356 00001900 7509                    		jnz	short SkipRPL
  4357 00001902 89C2                    		mov	dx, ax		; get TOM into DX
  4358 00001904 B8064A                  		mov	ax, 4A06h	; (multMULT shl	8) + multMULTRPLTOM
  4359 00001907 CD2F                    		int	2Fh		; Get new TOM from any RPL
  4360 00001909 89D0                    		mov	ax, dx
  4361                                  SkipRPL:	
  4362                                  		; 20/12/2022		
  4363                                  		;pop	bx
  4364                                  		;pop	ds
  4365                                  
  4366                                  ;M068 - END
  4367                                  		; 20/12/2022
  4368                                  		; 27/12/2018
  4369 0000190B 0E                      		push	cs
  4370 0000190C 1F                      		pop	ds
  4371                                  
  4372                                  		; 18/03/2019 - Retro DOS v4.0
  4373                                  		;sub	ax, 64		; room for fatloc segment. (1 kb buffer)
  4374                                  		;mov	[cs:fatloc], ax	; location to read fat
  4375                                  
  4376                                  		; 01/07/2018
  4377                                  		; 08/04/2018
  4378                                  		; 28/03/2018
  4379                                  		; MSDOS 6.0 - MSINIT.ASM, 1991
  4380 0000190D 83E840                  		sub	ax, 64
  4381 00001910 A3[CD16]                		mov	[init_bootseg], ax ; 20/12/2022
  4382                                  		;mov	[cs:init_bootseg], ax
  4383                                  
  4384                                  		; 27/12/2018 - Retro DOS v4.0
  4385                                  		;;pop	ax ; (*)	; get back real top of memory
  4386                                  		;pop	dx ; (*)
  4387                                  		; 29/09/2023 (BugFix)
  4388 00001913 58                      		pop	ax ; (*)	; get back real top of memory
  4389                                  
  4390                                  		; 20/12/2022
  4391                                  		; 27/12/2018
  4392 00001914 59                      		pop	cx ; (**)
  4393 00001915 890E[CA16]              		mov	[drvfat], cx	; save drive to load dos, and fat id
  4394                                  
  4395                                  		; 20/12/2022
  4396                                  
  4397                                  		;mov	dx, 46Dh	; SYSINIT segment
  4398 00001919 BA4004                  		mov	dx, SYSINITSEG	; 17/10/2022
  4399 0000191C 8EDA                    		mov	ds, dx
  4400                                  
  4401                                  ; set pointer to resident device driver chain
  4402                                  
  4403                                  		; 17/10/2022
  4404 0000191E C706[7302][2300]        		mov	word [DEVICELIST], res_dev_list
  4405                                  		;mov	word [273h], res_dev_list
  4406                                  		;;mov	word ptr ds:273h, offset res_dev_list
  4407                                  					; [SYSINIT+DEVICE_LIST]
  4408 00001924 8C0E[7502]              		mov	[DEVICELIST+2], cs		
  4409                                  		;mov	[275h], cs
  4410                                  		;;mov	word ptr ds:275h, cs ; [SYSINIT+DEVICE_LIST+2]
  4411                                  
  4412 00001928 A3[9202]                		mov	[MEMORYSIZE], ax
  4413                                  		;mov	[292h], ax
  4414                                  		;;mov	ds:292h, ax	; [SYSINIT+MEMORY_SIZE]
  4415                                  
  4416 0000192B FEC1                    		inc	cl
  4417 0000192D 880E[9602]              		mov	[DEFAULTDRIVE], cl
  4418                                  		;mov	[296h], cl
  4419                                  		;;mov	ds:296h, cl	; [SYSINIT+DEFAULT_DRIVE]
  4420                                  
  4421 00001931 C706[7102]CE07          		mov	word [CURRENTDOSLOCATION], DOSLOADSEG
  4422                                  		;mov	word [271h], 83Fh ; (MSDOS.SYS segment)
  4423                                  		;;mov	word ptr ds:271h, 83Fh ; [SYSINIT+CURRENT_DOS_LOCATION]
  4424                                  					; dos_load_seg
  4425                                  
  4426                                  ; important: some old ibm hardware generates spurious int 0F's due to bogus
  4427                                  ; printer cards. we initialize this value to point to an iret only if
  4428                                  ;
  4429                                  ; 1) the original segment points to storage inside valid ram.
  4430                                  ;
  4431                                  ; 2) the original segment is 0F000:xxxx
  4432                                  
  4433                                  		;;mov	ax, 46Dh	; SYSINIT segment
  4434                                  		;mov	ax, SYSINITSEG	; 17/10/2022
  4435                                  		;mov	es, ax
  4436                                  		; 20/12/2022
  4437                                  		;push	ds ; SYSINITSEG
  4438                                  		;pop	es
  4439 00001937 8EC2                    		mov	es, dx ; SYSINITSEG
  4440 00001939 31C0                    		xor	ax, ax ; 0
  4441 0000193B 8ED8                    		mov	ds, ax		; segment 0
  4442                                  		;mov	ax, ds:3Eh	; [0Fh*4+2]
  4443 0000193D A13E00                  		mov	ax, [0Fh*4+2]	; segment for INT 0Fh
  4444                                  		; 18/10/2022
  4445 00001940 263B06[9202]            		cmp	ax, [es:MEMORYSIZE] ; es:292h
  4446                                  		;cmp	ax, es:292h	; [ES:SYSINIT+MEMORY_SIZE]  ; (condition 1)
  4447 00001945 7605                    		jbe	short resetintf
  4448 00001947 3D00F0                  		cmp	ax, 0F000h	; (condition 2)
  4449 0000194A 750A                    		jnz	short keepintf
  4450                                  resetintf:	
  4451 0000194C C7063C00[F406]          		mov	word [0Fh*4], intret			
  4452                                  		;mov	word ptr ds:3Ch, offset	intret ; [0Fh*4]
  4453 00001952 8C0E3E00                		mov	word [0Fh*4+2], cs
  4454                                  		;mov	word ptr ds:3Eh, cs ; [0Fh*4+2]
  4455                                  keepintf:				
  4456                                  ; end important
  4457                                  
  4458                                  ; 17/10/2022
  4459                                  ; 28/12/2018 - Retro DOS v4.0
  4460                                  
  4461                                  ; (MSDOS 6.0, MSINIT.ASM, 1991)
  4462                                  ;
  4463                                  ; we will check if the system has ibm extended keyboard by
  4464                                  ; looking at a byte at 40:96. if bit 4 is set, then extended keyboard
  4465                                  ; is installed, and we are going to set keyrd_func to 10h, keysts_func to 11h
  4466                                  ; for the extended keyboard function. use cx as the temporary register.
  4467                                  
  4468                                  		; 20/12/2022
  4469                                  		; ds = 0
  4470                                  		;xor	cx, cx
  4471                                  		;mov	ds, cx
  4472                                  
  4473 00001956 8A0E9604                		mov	cl, [496h]	; get keyboard flag
  4474                                  
  4475                                  		; 20/12/2022
  4476                                  		; 20/03/2019
  4477 0000195A 0E                      		push	cs
  4478 0000195B 1F                      		pop	ds
  4479                                  
  4480                                  		;test	cl, 00010000b ; 10h
  4481 0000195C F6C110                  		test	cl, 10h		; extended keyboard ?
  4482 0000195F 740A                    		jz	short org_key	; no, original keyboard
  4483                                  
  4484                                  		; 20/12/2022
  4485                                  		;  ds = cs
  4486 00001961 C606[E504]10            		mov	byte [keyrd_func], 10h ; extended keyboard
  4487 00001966 C606[E604]11            		mov	byte [keysts_func], 11h
  4488                                  		;mov	byte [cs:keyrd_func], 10h ; extended keyboard
  4489                                  		;mov	byte [cs:keysts_func], 11h
  4490                                  					; change for extended keyboard functions
  4491                                  org_key:
  4492                                  
  4493                                  ; 02/06/2018 - Retro DOS v3.0
  4494                                  
  4495                                  ;**************************************************************
  4496                                  ;	will initialize the number of drives
  4497                                  ;	after the equipment call (int 11h) bits 6&7 will tell
  4498                                  ;	the indications are as follows:
  4499                                  ;
  4500                                  ;	bits	7	6	drives
  4501                                  ;		0	0	1
  4502                                  ;		0	1	2
  4503                                  ;		1	0	3
  4504                                  ;		1	1	4
  4505                                  ;**************************************************************
  4506                                  		
  4507                                  		; 20/12/2022
  4508                                  		; ds = cs		
  4509                                  		;push	cs
  4510                                  		;pop	ds
  4511                                  		; 21/12/2022
  4512                                  		;push	cs
  4513                                  		;pop	es
  4514                                  
  4515 0000196B E8E108                  		call	cmos_clock_read	; If cmos clock	exists,
  4516                                  					; then set the system time according to	that.
  4517                                  					; also,	reset the cmos clock rate.
  4518                                  		; 18/10/2022
  4519                                  		;mov	word ptr BData_start, offset harddrv ;
  4520                                  					; set up pointer to hdrive
  4521                                  		; 02/10/2022
  4522 0000196E C706[0000][1609]        		mov	word [hdrv_pat], harddrv 
  4523                                  		
  4524                                  		; 20/12/2022
  4525                                  		; 28/12/2018 - Retro DOS v4.0 (MSDOS 6.21)			
  4526 00001974 58                      		pop	ax ; (***)	; number of floppies and FAT ID
  4527 00001975 30E4                    		xor	ah, ah		; chuck	fat id byte
  4528 00001977 A2[7500]                		mov	[drvmax], al	; remember which drive is hard disk
  4529 0000197A A2[2501]                		mov	[dsktnum], al	; and set initial number of drives
  4530 0000197D D1E0                    		shl	ax, 1
  4531 0000197F 0106[4417]              		add	[last_dskdrv_table], ax
  4532                                  
  4533 00001983 B280                    		mov	dl, 80h
  4534 00001985 B408                    		mov	ah, 8
  4535 00001987 CD13                    		int	13h		; DISK - DISK -	GET CURRENT DRIVE PARAMETERS (XT,AT,XT286,CONV,PS)
  4536                                  					; DL = drive number
  4537                                  					; Return: CF set on error, AH =	status code, BL	= drive	type
  4538                                  					; DL = number of consecutive drives
  4539                                  					; DH = maximum value for head number, ES:DI -> drive parameter
  4540 00001989 7204                    		jc	short enddrv
  4541 0000198B 8816[4317]              		mov	[hnum], dl	; save number of hard disk drives
  4542                                  enddrv:
  4543                                  		; 21/12/2022
  4544 0000198F 0E                      		push	cs
  4545 00001990 07                      		pop	es
  4546                                  
  4547                                  ; scan the list of drives to determine their type. we have three flavors of
  4548                                  ; diskette drives:
  4549                                  ;
  4550                                  ;   48tpi drives    we do nothing special for them
  4551                                  ;   96tpi drives    mark the fact that they have changeline support.
  4552                                  ;   3.5"  drives    mark changeline support and small.
  4553                                  ;
  4554                                  ; the following code uses registers for certain values:
  4555                                  ;
  4556                                  ;   dl - physical drive
  4557                                  ;   ds:di - points to current bds
  4558                                  ;   cx - flag bits for bds
  4559                                  ;   dh - form factor for the drive (1 - 48tpi, 2 - 96tpi, 3 - 3.5" medium)
  4560                                  					
  4561 00001991 30D2                    		xor	dl, dl
  4562                                  
  4563                                  		; 20/12/2022
  4564                                  		; ds = cs
  4565                                  		; 17/06/2018		 
  4566                                  		;push	cs
  4567                                  		;pop	ds
  4568                                  
  4569 00001993 C606[2C01]09            		mov	byte [eot], 9
  4570 00001998 BF[1901]                		mov	di, start_bds 	; if we	are faking floppy drives we need
  4571                                  					; to set aside two bdss	for the	two fake floppy	drives
  4572                                  
  4573                                  ; 02/10/2022 - Retro DOS v4.0 (MSDOS 5.0 IO.SYS)
  4574                                  ; 28/12/2018 - Retro DOS v4.0 (MSDOS 6.0, MSINIT.ASM)
  4575                                  
  4576                                  ; check to see if we are faking floppy drives. if not we don't
  4577                                  ; do anything special. if we are faking floppy drives we need
  4578                                  ; to set aside two bdss for the two fake floppy drives. we
  4579                                  ; don't need to initalise any fields though. so starting at start_bds
  4580                                  ; use the link field in the bds structure to go to the second bds
  4581                                  ; in the list and initalise it's link field to -1 to set the end of
  4582                                  ; the list. then jump to the routine at dohard to allocate/initialise
  4583                                  ; the bds for harddrives.
  4584                                  
  4585 0000199B 803E[D316]01            		cmp	byte [fakefloppydrv], 1
  4586 000019A0 750B                    		jnz	short loop_drive
  4587 000019A2 8B3D                    		mov	di, [di]	; [di+BDS.link]
  4588                                  					; di <-	first bds link
  4589 000019A4 8B3D                    		mov	di, [di]	; [di+BDS.link]
  4590                                  					; di <-	second bds link
  4591 000019A6 C705FFFF                		mov	word [di], 0FFFFh ; -1 ; set end of link
  4592 000019AA E91201                  		jmp	dohard		; allocate/initialise bds for harddrives
  4593                                  ;-----------------------------------------------------------------------------
  4594                                  
  4595                                  loop_drive:				
  4596 000019AD 3A16[7500]              		cmp	dl, [drvmax]
  4597 000019B1 7203                    		jb	short got_more
  4598 000019B3 E90501                  		jmp	done_drives
  4599                                  ;-----------------------------------------------------------------------------
  4600                                  
  4601                                  got_more:				
  4602 000019B6 31C9                    		xor	cx, cx ; 0	; zero all flags
  4603 000019B8 8B3D                    		mov	di, [di]	; [di+BDS.link]
  4604                                  					; get next bds
  4605 000019BA B600                    		mov	dh, 0 ; ff48tpi
  4606                                  					; set form factor to 48	tpi
  4607 000019BC C606[D216]28            		mov	byte [num_cyln], 40 ; 40 tracks per side
  4608                                  		
  4609                                  		; 14/12/2023
  4610 000019C1 51                      		push	cx ; 0
  4611                                  		; 20/12/2022
  4612                                  		;push	ds ; 11/05/2019	
  4613 000019C2 57                      		push	di
  4614 000019C3 52                      		push	dx
  4615                                  		;push	cx ; not necessary (14/12/2023)
  4616 000019C4 06                      		push	es ; ((*)) ; 20/12/2022
  4617                                  		
  4618 000019C5 B408                    		mov	ah, 8
  4619 000019C7 CD13                    		int	13h		; DISK - DISK -	GET CURRENT DRIVE PARAMETERS (XT,AT,XT286,CONV,PS)
  4620                                  					; DL = drive number
  4621                                  					; Return: CF set on error, AH =	status code, BL	= drive	type
  4622                                  					; DL = number of consecutive drives
  4623                                  					; DH = maximum value for head number, ES:DI -> drive parameter
  4624 000019C9 7278                    		jc	short noparmsfromrom
  4625                                  
  4626                                  ; if cmos is bad, it gives es,ax,bx,cx,dh,di=0. cy=0.
  4627                                  ; in this case, we are going to put bogus informations to bds table.
  4628                                  ; we are going to set ch=39,cl=9,dh=1 to avoid divide overflow when
  4629                                  ; they are calculated at the later time. this is just for the diagnostic
  4630                                  ; diskette which need msbio,msdos to boot up before it sets cmos.
  4631                                  ; this should only happen with drive b.
  4632                                  
  4633                                  		; 14/12/2023
  4634                                  		; ch = low eight bits of maximum cylinder number
  4635                                  		; cl = maximum sector number (bits 5-0)
  4636                                  		;      high two bits of maximum cylinder number (bits 7-6)
  4637                                  
  4638 000019CB 80FD00                  		cmp	ch, 0		; if ch=0, then	cl,dh=0	too.
  4639 000019CE 7505                    		jnz	short pfr_ok
  4640                                  
  4641                                  		;mov	ch, 39		; rom gave wrong info.
  4642                                  		;mov	cl, 9		; let's default to 360k.
  4643                                  		; 20/12/2022
  4644 000019D0 B90927                  		mov	cx, 2709h
  4645                                  
  4646 000019D3 B601                    		mov	dh, 1
  4647                                  pfr_ok:					
  4648 000019D5 FEC6                    		inc	dh		; make number of heads 1-based
  4649 000019D7 FEC5                    		inc	ch		; make number of cylinders 1-based
  4650 000019D9 8836[D016]              		mov	[num_heads], dh	; save parms returned by rom
  4651 000019DD 80E13F                  		and	cl, 3Fh	; 00111111b ; extract sectors/track
  4652 000019E0 880E[D116]              		mov	[sec_trk], cl
  4653 000019E4 882E[D216]              		mov	[num_cyln], ch	; assume less than 256 cylinders!!
  4654                                  
  4655                                  ; make sure that eot contains the max number of sec/trk in system of floppies
  4656                                  
  4657 000019E8 3A0E[2C01]              		cmp	cl, [eot]	; may set carry
  4658                                  		;jbe	short eot_ok
  4659                                  		; 09/12/2022
  4660                                  		;jne	short eotok  ; wrong ! 14/08/2023
  4661                                  		; 14/08/2023
  4662 000019EC 7604                    		jbe	short eotok
  4663 000019EE 880E[2C01]              		mov	[eot], cl
  4664                                  ;eot_ok:					
  4665                                  eotok:
  4666                                  		; 20/12/2022
  4667 000019F2 07                      		pop	es ; ((*)) es = cs = ds
  4668                                  		;pop	cx ; 14/12/2023
  4669 000019F3 5A                      		pop	dx
  4670 000019F4 5F                      		pop	di
  4671                                  		; 20/12/2022
  4672                                  		;pop	ds
  4673                                  
  4674                                  		; 14/12/2023
  4675                                  		; 13/12/2023 - Retro DOS v4.0 & v4.1 IO.SYS - BugFix ; +*+
  4676                                  		; (MSDOS 5.0 IO.SYS - BIOSDATA:1AAAh)
  4677                                  
  4678                                  		; 12/12/2023 - Retro DOS v4.2 IO.SYS - BugFix ; +*+
  4679                                  		; (MSDOS 5.0 & MSDOS 6.22 IO.SYS both have a bug here,
  4680                                  		;  they does not save CX,DX registers before INT 13h func 15h)
  4681                                  		; (this is also a ROMBIOS bug, some ROMBIOSs return number
  4682                                  		;  of sectors in cx:dx pair while others restore cx:dx)
  4683                                  		;  -- ref: Ralf Brown's Interrupt List --
  4684                                  		; ((MSDOS 6.22 IO.SYS - BIOSDATA:1AF0h))
  4685                                  		; ((PCDOS 7.1 IBMBIO.COM - BIOSDATA:2119h))
  4686                                  		; (This BUG does not exist in PCDOS 7.1 IBMBIO.COM)
  4687                                  
  4688                                  		; 14/12/2023
  4689                                  		; 13/12/2023
  4690 000019F5 52                      		push	dx ; +*+
  4691                                  
  4692                                  ; Check	for presence of	changeline
  4693                                  
  4694 000019F6 B415                    		mov	ah, 15h
  4695 000019F8 CD13                    		int	13h		; DISK - DISK -	GET TYPE (AT,XT2,XT286,CONV,PS)
  4696                                  					; DL = drive ID
  4697                                  					; Return: CF set on error, AH =	disk type (3 = hard drive)
  4698                                  					; CX:DX	= number of sectors on the media
  4699                                  		; 14/12/2023
  4700 000019FA 5A                      		pop	dx ; +*+
  4701 000019FB 59                      		pop	cx ; +*+		
  4702 000019FC 720D                    		jc	short changeline_done
  4703                                  
  4704 000019FE 80FC02                  		cmp	ah, 2		; check	for presence of	changeline
  4705 00001A01 7508                    		jnz	short changeline_done
  4706                                  
  4707                                  ; we have a drive with change line support.
  4708                                  
  4709 00001A03 80C902                  		or	cl, 2		; fchangeline
  4710                                  					; signal type
  4711 00001A06 C606[7700]01            		mov	byte [fhave96], 1 ; remember that we have 96tpi disks
  4712                                  
  4713                                  ; we now try to set up the form factor for the types of media that we know
  4714                                  ; and can recognise. for the rest, we set the form factor as "other".
  4715                                  
  4716                                  changeline_done:
  4717                                  
  4718                                  ; 40 cylinders and 9 or less sec/trk, treat as 48 tpi medium.
  4719                                  			
  4720 00001A0B 803E[D216]28            		cmp	byte [num_cyln], 40
  4721 00001A10 750B                    		jnz	short try_80
  4722 00001A12 803E[D116]09            		cmp	byte [sec_trk], 9
  4723 00001A17 7655                    		jbe	short nextdrive
  4724                                  gotother:				
  4725 00001A19 B607                    		mov	dh, 7 ; ffOther ; we have a "strange" medium 
  4726 00001A1B EB51                    		jmp	short nextdrive
  4727                                  ;-----------------------------------------------------------------------------
  4728                                  
  4729                                  ; 80 cylinders and 9 sectors/track => 720 kb device
  4730                                  ; 80 cylinders and 15 sec/trk => 96 tpi medium
  4731                                  
  4732                                  try_80:					
  4733 00001A1D 803E[D216]50            		cmp	byte [num_cyln], 80
  4734 00001A22 75F5                    		jnz	short gotother
  4735 00001A24 B609                    		mov	dh, 9 ; ff288	; assume 2.88 MB drive
  4736 00001A26 803E[D116]24            		cmp	byte [sec_trk], 36 ; is it	?
  4737 00001A2B 7441                    		jz	short nextdrive	; yeah,	go update
  4738                                  
  4739                                  		; 12/05/2019 (ff144 type will not be used -compatibility problem-)
  4740                                  		; 08/01/2018 - Retro DOS v4.0 feature only ! for 1.44MB diskettes
  4741                                  		;mov	dh, ff144
  4742                                  		;cmp	byte [sec_trk], 18
  4743                                  		;je	short nextdrive
  4744                                  
  4745 00001A2D 803E[D116]0F            		cmp	byte [sec_trk], 15
  4746 00001A32 740B                    		jz	short got96
  4747                                  		
  4748 00001A34 803E[D116]09            		cmp	byte [sec_trk], 9
  4749 00001A39 75DE                    		jnz	short gotother
  4750                                  		
  4751 00001A3B B602                    		mov	dh, 2 ; ffSmall
  4752 00001A3D EB2F                    		jmp	short nextdrive
  4753                                  ; ----------------------------------------------------------------------------
  4754                                  
  4755                                  got96:					
  4756 00001A3F B601                    		mov	dh, 1 ; ff96tpi
  4757 00001A41 EB2B                    		jmp	short nextdrive
  4758                                  ; ----------------------------------------------------------------------------
  4759                                  
  4760                                  ; we have an old rom, so we either have a 48tpi or 96tpi drive. if the drive
  4761                                  ; has changeline, we assume it is a 96tpi, otherwise we treat it as a 48tpi.
  4762                                  
  4763                                  noparmsfromrom:				
  4764                                  		; 20/12/2022
  4765 00001A43 07                      		pop	es ; ((*)) 
  4766                                  		;pop	cx ; 14/12/2023
  4767 00001A44 5A                      		pop	dx
  4768 00001A45 5F                      		pop	di
  4769                                  		; 20/12/2022
  4770                                  		;pop	ds
  4771                                  
  4772                                  		; 14/12/2023
  4773                                  		; 13/12/2023 - BugFix ; * ; +*+
  4774                                  		; (MSDOS 5.0 & 6.22 IO.SYS bug) ; +*+
  4775                                  		; (some ROMBIOSs fix this BUG but return with false)
  4776                                  		; -- ref: Ralf Brown's Interrupt List --
  4777                                  
  4778                                  		; 14/12/2023
  4779                                  		; 13/12/2023
  4780 00001A46 52                      		push	dx  ; +*+
  4781                                  		
  4782 00001A47 B415                    		mov	ah, 15h
  4783 00001A49 CD13                    		int	13h		; DISK - DISK -	GET TYPE (AT,XT2,XT286,CONV,PS)
  4784                                  					; DL = drive ID
  4785                                  					; Return: CF set on error, AH =	disk type (3 = hard drive)
  4786                                  					; CX:DX	= number of sectors on the media
  4787                                  		; 14/12/2023
  4788 00001A4B 5A                      		pop	dx  ; +*+
  4789 00001A4C 59                      		pop	cx  ; +*+ ; 0
  4790 00001A4D 721F                    		jc	short nextdrive
  4791                                  		
  4792 00001A4F 80FC02                  		cmp	ah, 2		; is there changeline?
  4793 00001A52 751A                    		jnz	short nextdrive
  4794                                  
  4795 00001A54 80C902                  		or	cl, 2 ; fchangeline
  4796 00001A57 C606[7700]01            		mov	byte [fhave96], 1 ; remember that we have 96tpi drives
  4797                                  
  4798 00001A5C C606[D216]50            		mov	byte [num_cyln], 80
  4799 00001A61 B601                    		mov	dh, 1 ; ff96tpi 
  4800 00001A63 B00F                    		mov	al, 15
  4801 00001A65 3A06[2C01]              		cmp	al, [eot]
  4802 00001A69 7603                    		jbe	short nextdrive ; eot_ok2
  4803 00001A6B A2[2C01]                		mov	[eot], al
  4804                                  ; ----------------------------------------------------------------------------
  4805                                  
  4806                                  ;eot_ok2:
  4807                                  nextdrive:				
  4808 00001A6E 80C920                  		or	cl, 20h	; fi_own_physical
  4809                                  					; set this true	for all	drives
  4810 00001A71 88D7                    		mov	bh, dl		; save int13 drive number
  4811                                  
  4812                                  ; we need to do special things if we have a single drive system and are setting
  4813                                  ; up a logical drive. it needs to have the same int13 drive number as its
  4814                                  ; counterpart, but the next drive letter. also reset ownership flag.
  4815                                  ; we detect the presence of this situation by examining the flag single for the
  4816                                  ; value 2.
  4817 00001A73 803E[7800]02            		cmp	byte [single], 2
  4818 00001A78 7505                    		jnz	short not_special
  4819 00001A7A FECF                    		dec	bh		; int13	drive number same for logical drive
  4820 00001A7C 80F120                  		xor	cl, 20h	; fi_own_physical
  4821                                  					; reset	ownership flag for logical drive
  4822                                  not_special:
  4823                                  
  4824                                  ; the values that we put in for BDS_RBPB.BPB_HEADS and
  4825                                  ; BDS_RBPB.BPB_SECTORSPERTRACK will only remain if the
  4826                                  ; form factor is of type "ffother".
  4827                                  				
  4828 00001A7F 31C0                    		xor	ax, ax		; fill BDS for drive
  4829 00001A81 A0[D016]                		mov	al, [num_heads]
  4830 00001A84 894536                  		mov	[di+36h], ax	; [di+BDS.rheads]
  4831 00001A87 A0[D116]                		mov	al, [sec_trk]
  4832 00001A8A 894534                  		mov	[di+34h], ax	; [di+BDS.rsecpertrack]
  4833 00001A8D 894D23                  		mov	[di+23h], cx	; [di+BDS.flags]
  4834 00001A90 887522                  		mov	[di+22h], dh	; [di+BDS.formfactor]
  4835 00001A93 885505                  		mov	[di+5],	dl	; [di+BDS.drivelet]
  4836 00001A96 887D04                  		mov	[di+4],	bh	; [di+BDS.drivenum]
  4837 00001A99 8A1E[D216]              		mov	bl, [num_cyln]
  4838 00001A9D 885D25                  		mov	[di+25h], bl	; [di+BDS.cylinders]
  4839 00001AA0 803E[7800]01            		cmp	byte [single], 1 ; Special case for single drive system
  4840 00001AA5 7510                    		jnz	short no_single
  4841                                  		; 14/12/2023
  4842 00001AA7 FE06[7800]              		inc	byte [single]	; [single] = 2
  4843                                  		;mov	byte [single], 2 ; Don't forget we have
  4844                                  					; single drive system
  4845                                  		; 18/12/2022
  4846 00001AAB 80C910                  		or	cl, 10h
  4847                                  		;or	cx, 10h	; fi_am_mult
  4848                                  					; set that this	is one of several drives
  4849 00001AAE 094D23                  		or	[di+23h], cx	; [di+BDS.flags]
  4850                                  					; save flags
  4851 00001AB1 8B3D                    		mov	di, [di]	; [di+BDS.link]
  4852                                  					; move to next BDS in list
  4853 00001AB3 FEC2                    		inc	dl		; add a	number
  4854 00001AB5 EBB7                    		jmp	short nextdrive	; Use same info	for BDS	as previous
  4855                                  ; ----------------------------------------------------------------------------
  4856                                  
  4857                                  no_single:				
  4858                                  		;inc	dl
  4859                                  		; 18/12/2022
  4860 00001AB7 42                      		inc	dx
  4861 00001AB8 E9F2FE                  		jmp	loop_drive
  4862                                  ; ----------------------------------------------------------------------------
  4863                                  
  4864                                  done_drives:	
  4865                                  		;mov	word [di+BDS.link], -1			
  4866 00001ABB C705FFFF                		mov	word [di], -1	; set link to null
  4867                                  
  4868                                  ; set up all the hard drives in	the system
  4869                                  
  4870                                  		; 20/12/2022
  4871                                  		; 28/12/2018 - Retro DOS v4.0 (MSDOS 6.21)
  4872                                  dohard:					
  4873 00001ABF 8A36[4317]              		mov	dh, [hnum]
  4874 00001AC3 08F6                    		or	dh, dh		; done if no hardfiles
  4875 00001AC5 745B                    		jz	short static_configure
  4876 00001AC7 B280                    		mov	dl, 80h
  4877                                  dohard1:				
  4878 00001AC9 52                      		push	dx
  4879 00001ACA 8B3E[4617]              		mov	di, [end_of_bdss]
  4880 00001ACE 8A1E[7500]              		mov	bl, [drvmax]
  4881 00001AD2 B700                    		mov	bh, 0		; first	primary	partition (or active)
  4882 00001AD4 E8BE01                  		call	sethard
  4883 00001AD7 7208                    		jb	short hardfile_err
  4884 00001AD9 E82907                  		call	dmax_check	; error	if already 26 drives
  4885 00001ADC 7303                    		jnb	short hardfile_err
  4886 00001ADE E83907                  		call	xinstall_bds	; insert new bds into linked list
  4887                                  hardfile_err:				
  4888 00001AE1 5A                      		pop	dx
  4889 00001AE2 FEC2                    		inc	dl		; next hard drive
  4890 00001AE4 FECE                    		dec	dh
  4891 00001AE6 75E1                    		jnz	short dohard1
  4892                                  
  4893                                  ; end of physical drive	initialization
  4894                                  
  4895                                  ; *** do not change the position of the following statement.
  4896                                  ; *** domini routine will use [drvmax] value for the start of the logical
  4897                                  ; *** drive number of mini disk(s).
  4898                                  					
  4899 00001AE8 E82806                  		call	domini		; for setting up mini disks, if found
  4900                                  
  4901                                  ; -- begin added section
  4902                                  
  4903 00001AEB 8A36[4317]              		mov	dh, [hnum]	; we already know this is >0
  4904 00001AEF B280                    		mov	dl, 80h
  4905                                  dohardx1:				
  4906 00001AF1 B701                    		mov	bh, 1		; do all subsequent primary partitions
  4907                                  dohardx2:				
  4908 00001AF3 52                      		push	dx
  4909 00001AF4 53                      		push	bx
  4910 00001AF5 8B3E[4617]              		mov	di, [end_of_bdss]
  4911 00001AF9 8A1E[7500]              		mov	bl, [drvmax]
  4912 00001AFD E89501                  		call	sethard
  4913 00001B00 720E                    		jb	short dohardx4	; move to next hardfile	if error
  4914 00001B02 E80007                  		call	dmax_check	; make sure <=26 drives
  4915 00001B05 7309                    		jnb	short dohardx4	; skip if error
  4916 00001B07 E81007                  		call	xinstall_bds	; insert new bds into linked list
  4917 00001B0A 5B                      		pop	bx		; get partition	number
  4918 00001B0B 5A                      		pop	dx		; restore physical drive counts
  4919 00001B0C FEC7                    		inc	bh
  4920 00001B0E EBE3                    		jmp	short dohardx2	; keep looping until we	fail
  4921                                  ; ----------------------------------------------------------------------------
  4922                                  
  4923                                  dohardx4:				
  4924 00001B10 5B                      		pop	bx		; unjunk partition number from stack
  4925 00001B11 5A                      		pop	dx		; restore physical drive counts
  4926 00001B12 FEC2                    		inc	dl		; next hard drive
  4927 00001B14 FECE                    		dec	dh
  4928 00001B16 75D9                    		jnz	short dohardx1
  4929                                  
  4930                                  ; -- end changed section
  4931                                  
  4932                                  ;******************************************************************************
  4933                                  ; if more than 2 diskette drives on the system, then it is necessary to remap
  4934                                  ; the bds chain to adjust the logical drive num (drive letter) with greater
  4935                                  ; than two diskette drives
  4936                                  ;
  4937                                  ; new scheme:	if more than 2 disktte drives, first map the bds structure
  4938                                  ;		as usual and then rescan the bds chain to adjust the  drive
  4939                                  ;		letters. to do this, scan for disk drives and assign logical
  4940                                  ;		drive number starting from 2 and then rescan diskette drives
  4941                                  ;		and assign next to the last logical drive number of last disk
  4942                                  ;		drive to the 3rd and 4th diskette drives.
  4943                                  ;******************************************************************************
  4944                                  
  4945 00001B18 803E[2501]02            		cmp	byte [dsktnum], 2 ; >2 diskette drives
  4946                                  		;jbe	short static_configure ; no - no need for remapping
  4947 00001B1D 7603                    		jbe	short no_remap
  4948 00001B1F E8F700                  		call	remap		; remap	bds chain to adjust driver letters
  4949                                  no_remap:
  4950                                  
  4951                                  ; End of drive initialization.
  4952                                  
  4953                                  ; ----------------------------------------------------------------------------
  4954                                  
  4955                                  ;we now decide, based on the configurations available so far, what
  4956                                  ;code or data we need to keep as a stay resident code. the following table
  4957                                  ;shows the configurations under consideration. they are listed in the order
  4958                                  ;of their current position memory.
  4959                                  ;
  4960                                  ;configuration will be done in two ways:
  4961                                  ;
  4962                                  ;first, we are going to set "static configuration". static configuration will
  4963                                  ;consider from basic configuration to endof96tpi configuration. the result
  4964                                  ;of static configuration will be the address the dynamic configuration will
  4965                                  ;use to start with.
  4966                                  ;
  4967                                  ;secondly, "dynamic configuration" will be performed. dynamic configuration
  4968                                  ;involves possible relocation of code or data. dynamic configuration routine
  4969                                  ;will take care of bdsm tables and at rom fix module thru k09 suspend/resume
  4970                                  ;code individually. after these operation, [dosdatasg] will be set.
  4971                                  ;this will be the place sysinit routine will relocate msdos module for good.
  4972                                  
  4973                                  ; -- begin changed section
  4974                                  ;
  4975                                  ;   1.	 basic configuration for msbio (endfloppy)
  4976                                  ;   2.   end96tpi	; a system that supports "change line error"
  4977                                  ;   3.	 end of bdss	; end of bdss for hard disks
  4978                                  ;   4.	 endatrom	;some of at rom fix module.
  4979                                  ;   5.	 endcmosclockset;supporting program for cmos clock write.
  4980                                  ;   6.	 endk09 	;k09 cmos clock module to handle suspend/resume operation.
  4981                                  ;
  4982                                  
  4983                                  ; 02/10/2022 - Retro DOS v4.0 (MSDOS v5.0 IO.SYS)
  4984                                  
  4985                                  static_configure:			
  4986 00001B22 8B3E[4617]              		mov	di, [end_of_bdss]
  4987 00001B26 81FF[1709]              		cmp	di, bdss	; 19/10/2022
  4988                                  		;cmp	di, offset bdss	; did we allocate any hard drive bdss?
  4989 00001B2A 750D                    		jnz	short dynamic_configure	; that's the end, then
  4990                                  		; 18/10/2022
  4991 00001B2C BF[1709]                		mov	di, end96tpi
  4992                                  		;mov	di, offset harddrv ; end96tpi
  4993                                  					; keep everything up to	end96tpi
  4994 00001B2F 803E[7700]00            		cmp	byte [fhave96], 0
  4995 00001B34 7503                    		jnz	short dynamic_configure
  4996                                  		
  4997 00001B36 BF[FC08]                		mov	di, endfloppy
  4998                                  dynamic_configure:
  4999                                  		; 20/12/2022
  5000                                  		;push	cs
  5001                                  		;pop	es
  5002                                  		
  5003 00001B39 FC                      		cld			; clear direction
  5004                                  
  5005                                  ; -- end changed section
  5006                                  
  5007                                  		; 20/12/2022
  5008                                  		; ds = cs <> es
  5009                                  		; ss = 0
  5010                                  		; sp = 700h
  5011                                  
  5012                                  		; 14/12/2023
  5013 00001B3A BE00F0                  		mov	si, 0F000h
  5014 00001B3D 8EC6                    		mov	es, si		; ES ->	ROM BIOS segment
  5015                                  
  5016 00001B3F 803E[3E06]FC            		cmp	byte [model_byte], 0FCh ; AT ?
  5017                                  		;jnz	short checkcmosclock
  5018                                  		; 14/12/2023
  5019 00001B44 751E                    		jnz	short checkcompaqbug ; no
  5020 00001B46 803E[4317]00            		cmp	byte [hnum], 0	; No hard file?
  5021                                  		;jz	short checkcmosclock
  5022 00001B4B 7417                    		jz	short checkcompaqbug
  5023 00001B4D 97                      		xchg	ax, di		; save allocation pointer in ax
  5024                                  		; 14/12/2023
  5025                                  		;mov	si, 0F000h
  5026                                  		;mov	es, si		; ES ->	ROM BIOS segment
  5027 00001B4E BE[4C17]                		mov	si, bios_date	; "01/10/84"
  5028 00001B51 BFF5FF                  		mov	di, 0FFF5h	; ROM BIOS string is at	F000:FFF5
  5029 00001B54 B90900                  		mov	cx, 9		; bdate_l
  5030                                  					; Only patch ROM for bios 01/10/84
  5031 00001B57 F3A6                    		repe cmpsb		; check	for date + zero	on end
  5032 00001B59 97                      		xchg	ax, di		; restore allocation pointer
  5033                                  
  5034                                  ; M015 -- begin changes
  5035                                  
  5036                                  		;jnz	short checkcmosclock
  5037                                  		; 02/10/2022
  5038 00001B5A 7508                    		jnz	short checkcompaqbug
  5039                                  
  5040                                  ; install at rom fix
  5041                                  
  5042                                  		; 19/10/2022
  5043                                  		;mov	cx, offset endatrom
  5044 00001B5C B9[0A14]                		mov	cx, endatrom
  5045                                  		;mov	si, offset ibm_disk_io
  5046 00001B5F BE[DC12]                		mov	si, ibm_disk_io
  5047 00001B62 EB46                    		jmp	short install_int13_patch
  5048                                  ; ----------------------------------------------------------------------------
  5049                                  
  5050                                  ; M065 -- begin changes
  5051                                  ;
  5052                                  ; On certain systems with Western Digital disk controllers, the
  5053                                  ; following detection scheme caused an unpredictable and serious
  5054                                  ; failure. In particular, they've implemented a nonstandard
  5055                                  ; Int13(ah=16h) which reconfigures the hard drive, depending on
  5056                                  ; what happens to be at es:[bx] and other memory locations indexed
  5057                                  ; off of it.
  5058                                  ;
  5059                                  ; Compaq was unable to tell us exactly which kind of systems have
  5060                                  ; the bug, except that they guarantee that the bug was fixed in
  5061                                  ; ROM BIOSs dated 08/04/86 and later. We'll check for the COMPAQ
  5062                                  ; string, and then look for date codes before 08/04/86 to decide
  5063                                  ; when to install the hook.
  5064                                  
  5065                                  ;checkcmosclock:
  5066                                  ; 02/10/2022				
  5067                                  checkcompaqbug:
  5068                                  		; 20/12/2022
  5069                                  		; es = 0F000h
  5070                                  		;mov	ax, 0F000h	; point	to ROM BIOS
  5071                                  		;mov	es, ax
  5072                                  
  5073                                  		; 19/10/2022
  5074 00001B64 26813EEAFF434F          		cmp	word [es:0FFEAh], 'CO'
  5075                                  		;cmp	word ptr es:0FFEAh, 'OC' ; look for COMPAQ
  5076 00001B6B 754B                    		jnz	short not_compaq_patch
  5077 00001B6D 26813EECFF4D50          		cmp	word [es:0FFECh], 'MP'
  5078                                  		;cmp	word ptr es:0FFECh, 'PM'
  5079 00001B74 7542                    		jnz	short not_compaq_patch
  5080 00001B76 26813EEEFF4151          		cmp	word [es:0FFEEh], 'AQ'
  5081                                  		;cmp	word ptr es:0FFEEh, 'QA'
  5082 00001B7D 7539                    		jnz	short not_compaq_patch
  5083                                  
  5084                                  ; We're running on a COMPAQ. Now look at the date code.
  5085                                  
  5086 00001B7F 26A1FBFF                		mov	ax, [es:0FFFBh]	; get year
  5087 00001B83 86E0                    		xchg	ah, al
  5088 00001B85 3D3638                  		cmp	ax, 3836h ; 02/10/2022 (NASM syntax)
  5089                                  		;cmp	ax, '86'        ; 3836h
  5090                                  					; is it	86?
  5091 00001B88 772E                    		ja	short not_compaq_patch
  5092 00001B8A 7218                    		jb	short do_compaq_patch
  5093 00001B8C 26A1F5FF                		mov	ax, [es:0FFF5h]	; get month
  5094 00001B90 86E0                    		xchg	ah, al
  5095 00001B92 3D3830                  		cmp	ax, 3038h ; 02/10/2022 (NASM syntax)
  5096                                  		;cmp	ax, '08'        ; 3038h
  5097                                  					; is it	08?
  5098 00001B95 7721                    		ja	short not_compaq_patch
  5099 00001B97 720B                    		jb	short do_compaq_patch
  5100 00001B99 26A1F8FF                		mov	ax, [es:0FFF8h]	; get day
  5101 00001B9D 86E0                    		xchg	ah, al
  5102 00001B9F 3D3430                  		cmp	ax, 3034h ; 02/10/2022 (NASM syntax)
  5103                                  		;cmp	ax, '04'        ; 3034h
  5104                                  					; is it	04?
  5105 00001BA2 7314                    		jnb	short not_compaq_patch
  5106                                  
  5107                                  do_compaq_patch:			
  5108 00001BA4 B9[2B14]                		mov	cx, end_compaq_i13hook
  5109                                  		;mov	si, endatrom
  5110                                  		; 14/12/2023
  5111 00001BA7 BE[0A14]                		mov	si, compaq_disk_io ; endatrom
  5112                                  
  5113                                  install_int13_patch:			
  5114 00001BAA 0E                      		push	cs
  5115 00001BAB 07                      		pop	es
  5116                                  		; 18/10/2022
  5117 00001BAC 893E[B400]              		mov	[Orig13], di	; set new rom bios int 13 vector
  5118 00001BB0 8C0E[B600]              		mov	[Orig13+2], cs
  5119 00001BB4 29F1                    		sub	cx, si		; size of rom fix module
  5120 00001BB6 F3A4                    		rep movsb		; relocate it
  5121                                  
  5122                                  ; M065 -- end changes
  5123                                  
  5124                                  ; ----------------------------------------------------------------------------
  5125                                  not_compaq_patch:			; M065
  5126                                  		; 17/10/2022
  5127                                  checkcmosclock:	
  5128                                  		; 18/10/2022		
  5129 00001BB8 0E                      		push	cs
  5130 00001BB9 07                      		pop	es
  5131                                  
  5132                                  		; 20/12/2022
  5133                                  		; ds = cs = es
  5134                                  		; ss = 0
  5135                                  		; sp = 700h
  5136                                  
  5137 00001BBA 803E[F304]01            		cmp	byte [havecmosclock], 1 ; cmos clock exists?
  5138 00001BBF 7518                    		jnz	short checkk09	; no
  5139                                  
  5140 00001BC1 893E[0605]              		mov	word [daycnttoday], di
  5141                                  		;mov	word ptr ds:daycnttoday, di ; set the address for mschar
  5142 00001BC5 B9D100                  		mov	cx, 209	 ; enddaycnttoday - daycnt_to_day
  5143 00001BC8 BE[2C14]                		mov	si, daycnt_to_day
  5144 00001BCB F3A4                    		rep movsb
  5145 00001BCD 893E[0205]              		mov	word [bintobcd], di
  5146                                  		;mov	word ptr ds:bintobcd, di ; set the address for msclock
  5147                                  					; let original segment stay
  5148 00001BD1 B90B00                  		mov	cx, 11	; endcmosclockset - bin_to_bcd
  5149 00001BD4 BE[FD14]                		mov	si, bin_to_bcd
  5150 00001BD7 F3A4                    		rep movsb
  5151                                  checkk09:				
  5152 00001BD9 57                      		push	di ; ? ; save ? ; 20/12/2022
  5153 00001BDA B80141                  		mov	ax, 4101h	; wait for bh=es:[di]
  5154 00001BDD B301                    		mov	bl, 1		; wait for 1 clock tick
  5155 00001BDF 268A3D                  		mov	bh, [es:di]
  5156 00001BE2 F9                      		stc			; Assume we will fail
  5157 00001BE3 CD15                    		int	15h		; SYSTEM - WAIT	ON EXTERNAL EVENT (CONVERTIBLE)
  5158                                  					; AL = condition type, BH = condition compare or mask value
  5159                                  					; BL = timeout value times 55 milliseconds, 00h	means no timeout
  5160                                  					; DX = I/O port	address	if AL bit 4 set
  5161                                  					; 14/12/2023
  5162                                  					; ES:DI = user byte if AL bit 4 clear
  5163 00001BE5 5F                      		pop	di ; ?
  5164 00001BE6 721B                    		jc	short configdone ; 20/12/2022
  5165                                  
  5166 00001BE8 C606[7900]01            		mov	byte [fhavek09], 1
  5167                                  					; remember we have a k09 type
  5168 00001BED 1E                      		push	ds
  5169 00001BEE 31C0                    		xor	ax, ax
  5170 00001BF0 8ED8                    		mov	ds, ax
  5171                                  		
  5172 00001BF2 893EB001                		mov	[6Ch*4], di
  5173                                  		;mov	ds:1B0h, di	; [6Ch*4]
  5174                                  					; new int 6ch handler
  5175                                  		;mov	word ptr ds:1B2h, cs ; [6Ch*4+2]
  5176 00001BF6 8C0EB201                		mov	word [6Ch*4+2], cs
  5177 00001BFA 1F                      		pop	ds
  5178                                  		; 20/12/2022
  5179                                  		; ds = cs = es
  5180 00001BFB BE[0815]                		mov	si, int6c
  5181 00001BFE B9C201                  		mov	cx, endk09-int6c ; 459
  5182                                  		;mov	cx, 459		; endk09 - int6c
  5183                                  					; size of k09 routine
  5184 00001C01 F3A4                    		rep movsb		;
  5185                                  					; set up config	stuff for sysinit
  5186                                  ; ----------------------------------------------------------------------------
  5187                                  ; Set up config stuff for SYSINIT
  5188                                  
  5189                                  ; 17/10/2022
  5190                                  ;SETDRIVE equ SetDrive - DOSBIOSEG_2C7h ; (4D7h for MSDOS 5.0 IO.SYS)
  5191                                  ;GETBP equ GetBp - DOSBIOSEG_2C7h ; (606h for MSDOS 5.0 IO.SYS)
  5192                                  ; 09/12/2022
  5193                                  SETDRIVE equ SetDrive
  5194                                  GETBP equ GetBp
  5195                                  		
  5196                                  		; 17/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
  5197                                  configdone:	
  5198                                  		; 14/12/2023
  5199                                  		; ds = cs
  5200                                  		; 21/12/2022
  5201                                  		; 20/03/2019
  5202                                  		;push	cs		; di is	final ending address of	msbio.
  5203                                  		;pop	ds
  5204                                  		
  5205 00001C03 83C70F                  		add	di, 15		; round	(up) to	paragraph
  5206                                  		; 10/12/2022
  5207                                  		;shr	di, 1
  5208                                  		;shr	di, 1
  5209                                  		;shr	di, 1
  5210                                  		;shr	di, 1
  5211 00001C06 B104                    		mov	cl, 4
  5212 00001C08 D3EF                    		shr	di, cl		
  5213                                  		; 10/12/2022
  5214                                  		;add	di, 70h		; KERNEL_SEGMENT (in fact: IO.SYS loading segment)
  5215                                  		; 19/10/2022 - Temporary !
  5216                                  		;db	81h, 0C7h, 70h, 0 ; add di, 0070h
  5217                                  		; 13/08/2023
  5218 00001C0A 83C770                  		add	di, 70h
  5219 00001C0D 893E[0300]              		mov	[DosDataSg], di	; where	the dos	data segment will be
  5220                                  
  5221                                  ; 21/12/2022 - Retro DOS v4.0 (MSDOS 5.0 combined/single kernel file)
  5222                                  
  5223                                  ; 19/03/2018 - No need to read remain clusters of MSDOS kernel because
  5224                                  	     ; Retro DOS v2.0 boot sector has loaded all of the kernel file before.
  5225                                  	     
  5226                                  	     ; ("MSINIT.ASM" contains kernel file reading code here, below...)
  5227                                  
  5228                                  ; 14/12/2023 
  5229                                  ; ----------------------------------------------------------------------------
  5230                                  ; ----------------------------------------------------------------------------
  5231                                  %if 0
  5232                                  		mov	ax, [drvfat]	; get drive and	fat id
  5233                                  		; 22/12/2022
  5234                                  		; Note: SETDRIVES uses AL (drive number) only
  5235                                  		mov	bp, SETDRIVE
  5236                                  		;mov	bp, 4D7h	; set_drive (in	dosbios	code segment)
  5237                                  					; at 2C7h:4D7h = 70h:2A47h
  5238                                  		push	cs		; simulate far call
  5239                                  		call	call_bios_code	; get bds for drive
  5240                                  		mov	bp, GETBP	; ensure valid bpb is present	
  5241                                  		;mov	bp, 606h	; GetBp (2C7h:606h = 70h:2B76h) 
  5242                                  		push	cs
  5243                                  		call	call_bios_code
  5244                                  
  5245                                  	; resort to funky old segment definitions for now
  5246                                  
  5247                                  		; 22/12/2022
  5248                                  		;push	es		; copy bds to ds:di
  5249                                  		;pop	ds
  5250                                  
  5251                                  	; the following read of es:0000 was spurious anyway. Should look into it.
  5252                                  	;
  5253                                  	; hmmmmmm. j.k. took out a call to getfat right here a while
  5254                                  	;	  back. Apparently it was what actually setup es: for the following
  5255                                  	; cas----
  5256                                  
  5257                                  		; 22/12/2022
  5258                                  		;xor	di, di
  5259                                  		;mov	al, [es:di]	; get fat id byte
  5260                                  		;;mov	byte ptr es:drvfat+1, al ; save fat byte
  5261                                  		;mov	[es:drvfat+1], al
  5262                                  		;mov	ax, [es:drvfat]
  5263                                  		
  5264                                  		; 22/12/2022
  5265                                  		; ds = cs
  5266                                  	;;;	mov	al, [drvfat]
  5267                                  
  5268                                  	; cas -- why do a SECOND setdrive here???
  5269                                  
  5270                                  		; 22/12/2022
  5271                                  		;push	es		; save whatever's in es
  5272                                  		;push	ds		; copy bds to es:di
  5273                                  		;pop	es
  5274                                  		;push	cs		; copy Bios_Data to ds
  5275                                  		;pop	ds
  5276                                  	
  5277                                  	; 22/12/2022
  5278                                  	;;;	mov	bp, SETDRIVE
  5279                                  	;;;	;mov	bp, 4D7h	; SetDrive (2C7h:47Dh = 70h:2A47h)
  5280                                  	;;;	push	cs		; simulate far call
  5281                                  	;;;	call	call_bios_code	; get correct bds for this drive
  5282                                  	
  5283                                  		; 22/12/2022
  5284                                  		;push	es		; copy bds back to ds:di
  5285                                  		;pop	ds
  5286                                  		;pop	es		; pop whatever was in es
  5287                                  
  5288                                  	; Now we load in the MSDOS.SYS file
  5289                                  
  5290                                  	; 22/12/2022
  5291                                  	; -----
  5292                                  	;	mov	bx, [di+6]	; [di+BDS.BDS_BPB.BPB_BYTESPERSECTOR]
  5293                                  	;	mov	[cs:md_sectorsize], bx	; used by get_fat_sector proc.
  5294                                  	;	mov	bl, [di+1Fh]	; [di+BDS.fatsiz]
  5295                                  	;				; get size of fat on media
  5296                                  	;	;mov	es:16DEh, bl
  5297                                  	;	mov	[es:fbigfat], bl
  5298                                  	;	mov	cl, [di+8]
  5299                                  	;	mov	ax, [di+17h] ; [di+BDS.BDS_BPB.BPB_HIDDENSECTORS]
  5300                                  	;	;sub	es:16D8h, ax
  5301                                  	;	sub	[es:bios_l], ax	; subtract hidden sectors since we
  5302                                  	;				; need a logical sector number that will
  5303                                  	;				; be used by getclus(diskrd procedure)
  5304                                  	;	mov	ax, [di+19h] ; [di+BDS.BDS_BPB.BPB_HIDDENSECTORS+2]
  5305                                  	;	;sbb	es:16DAh, ax
  5306                                  	;	sbb	[es:bios_h], ax	; subtract upper 16 bits of sector num
  5307                                  	; -----
  5308                                  		
  5309                                  	; -----	; 22/12/2022
  5310                                  		mov	bx, [es:di+6]	; [di+BDS.BDS_BPB.BPB_BYTESPERSECTOR]
  5311                                  		mov	[md_sectorsize], bx ; used by get_fat_sector proc.
  5312                                  		mov	bl, [es:di+1Fh]	; [di+BDS.fatsiz]
  5313                                  					; get size of fat on media
  5314                                  		mov	[fbigfat], bl
  5315                                  		mov	cl, [es:di+8]
  5316                                  		mov	ax, [es:di+17h] ; [di+BDS.BDS_BPB.BPB_HIDDENSECTORS]
  5317                                  		sub	[bios_l], ax	; subtract hidden sectors since we
  5318                                  					; need a logical sector number that will
  5319                                  					; be used by getclus(diskrd procedure)
  5320                                  		mov	ax, [es:di+19h] ; [di+BDS.BDS_BPB.BPB_HIDDENSECTORS+2]
  5321                                  		sbb	[bios_h], ax	; subtract upper 16 bits of sector num
  5322                                  	; ------
  5323                                  
  5324                                  		xor	ch, ch	 ; cx = sectors/cluster
  5325                                  
  5326                                  	; the boot program has left the directory at 0:500h
  5327                                  
  5328                                  		push	ds
  5329                                  		xor	di, di
  5330                                  		mov	ds, di
  5331                                  		mov	bx, [53Ah]
  5332                                  		;mov	bx, ds:53Ah	; clus=*53Ah
  5333                                  					; (First cluster field of 2nd dir entry
  5334                                  					; of root directory in the buffer at 500h)
  5335                                  		pop	ds
  5336                                  loadit:
  5337                                  		mov	ax, SYSINITSEG	; 46Dh
  5338                                  		;mov	ax, 46Dh	; sysinit segment
  5339                                  		mov	es, ax
  5340                                  		mov	es, [es:CURRENTDOSLOCATION] ; 09/12/2022
  5341                                  		;mov	es, [es:271h]
  5342                                  
  5343                                  		call	getclus		; read cluster at ES:DI (DI is updated)
  5344                                  ; ----------------------------------------------------------------------------
  5345                                  
  5346                                  		;test	byte [cs:fbigfat], fbig
  5347                                  		test	byte [cs:fbigfat], 40h ; fbig
  5348                                  		jnz	short eofbig
  5349                                  		cmp	bx, 0FF7h
  5350                                  		jmp	short iseofx
  5351                                  ; ----------------------------------------------------------------------------
  5352                                  
  5353                                  eofbig:
  5354                                  		cmp	bx, 0FFF7h
  5355                                  iseofx:
  5356                                  		jb	short loadit	; keep loading until cluster = eof
  5357                                  %endif
  5358                                  ; ----------------------------------------------------------------------------
  5359                                  ; ----------------------------------------------------------------------------
  5360                                  
  5361 00001C11 E83504                  		call	setdrvparms	; 
  5362                                  
  5363                                  		;;jmp	far ptr	46Dh:267h ; jmp	SYSINIT_SEG:SYSINIT_START
  5364                                  		;jmp	far 46Dh:267h
  5365 00001C14 EA[6702]4004            		jmp	SYSINITSEG:SYSINITSTART
  5366                                  
  5367                                  ; =============== S U B	R O U T	I N E ========================================
  5368                                  
  5369                                  ; Following are subroutines to support resident device driver initialization
  5370                                  ;
  5371                                  ;M011 -- note:  deleted setup_bdsms and reset_bdsms here
  5372                                  
  5373                                  ;	M035 -- begin changed section
  5374                                  
  5375                                  ;******************************************************************************
  5376                                  ; module name: remap
  5377                                  ;
  5378                                  ; descriptive name: all the code for himem that could be separated from msbio
  5379                                  ;
  5380                                  ; function:  remap the bds chain to adjusted logical drive numbers (drive
  5381                                  ;	     letters) if more than two diskette drives on the system.
  5382                                  ;
  5383                                  ;     scheme:  if more than 2 diskette drives, first map the bds structure
  5384                                  ;	       as usual and then rescan the bds chain to adjust the drive
  5385                                  ;	       letters. to do this, scan for disk drives and assign logical
  5386                                  ;	       drive number starting from 2 and then rescan diskette drives
  5387                                  ;	       and assign next to the last logical drive number of last disk
  5388                                  ;	       drive to the 3rd and 4th diskette drives.
  5389                                  
  5390                                  ; input:       none
  5391                                  ; exit:	drive letters have been remapped in bds chain
  5392                                  ; exit error:  none
  5393                                  ; called from: msinit
  5394                                  ;
  5395                                  ; notes:  this function  will be called only if more than 2 diskettes are
  5396                                  ;	  found in the system
  5397                                  ;	  this function assumes that there are no more than 26 drives assigned
  5398                                  ;	    this is guaranteed by the code that creates bdss for partitions
  5399                                  ;	  this function assumes that the first entries in the chain are
  5400                                  ;	   floppy drives, and all the rest are hard drives
  5401                                  ;	  will alter the boot drive if necessary to reflect remapping
  5402                                  ;
  5403                                  ;******************************************************************************
  5404                                  
  5405                                  ; 17/10/2022
  5406                                  ; 02/10/2022
  5407                                  
  5408                                  remap:		; proc near
  5409                                  
  5410                                  		; 15/12/2023
  5411                                  		; ds = cs
  5412                                  		;mov	di, [cs:start_bds] ; get first bds
  5413 00001C19 8B3E[1901]              		mov	di, [start_bds]
  5414                                  
  5415                                  ; search for 1st fixed disk physical drive num
  5416                                  
  5417                                  drive_loop:
  5418 00001C1D 807D0480                		cmp	byte [di+4], 80h ; [di+BDS.drivenum]
  5419                                  					; first	hard disk??
  5420 00001C21 7409                    		jz	short fdrv_found ; yes,	continue
  5421 00001C23 8B3D                    		mov	di, [di]	; [di+BDS.link]
  5422                                  					; get next bds,	assume segment
  5423 00001C25 83FFFF                  		cmp	di, -1 ; 0FFFFh	; last bds?
  5424 00001C28 75F3                    		jnz	short drive_loop ; loop	if not
  5425 00001C2A EB49                    		jmp	short rmap_exit	; yes, no hard drive on	system
  5426                                  
  5427                                  ;------------------------------------------------------------------------------
  5428                                  ;first disk drive bds, now change the logical drive num to 2 and the subsequent
  5429                                  ;logical drive nums to 3, 4, 5 etc.
  5430                                  ;------------------------------------------------------------------------------
  5431                                  
  5432                                  fdrv_found:
  5433 00001C2C B002                    		mov	al, 2		; start	with logical drv num=2
  5434                                  fdrv_loop:
  5435 00001C2E 884505                  		mov	[di+5],	al	; [di+BDS.drivelet]
  5436 00001C31 8B3D                    		mov	di, [di]	; [di+BDS.link]
  5437                                  					; ds:di--> next	bds
  5438                                  		;inc	al		; set num for next drive
  5439                                  		; 18/12/2022
  5440 00001C33 40                      		inc	ax
  5441 00001C34 83FFFF                  		cmp	di, 0FFFFh	; last hard drive ?
  5442 00001C37 75F5                    		jnz	short fdrv_loop	; no - assign more disk drives
  5443                                  
  5444                                  ;------------------------------------------------------------------------------
  5445                                  ; now, rescan and find bds of 3rd floppy drive and assign next drive letter
  5446                                  ; in al to 3rd. if the current drive letter is past z, then do not allocate
  5447                                  ; any more.
  5448                                  ;------------------------------------------------------------------------------
  5449                                  
  5450                                  		;mov	di, [cs:start_bds] ; [start_bds]
  5451                                  		; 15/12/2023
  5452 00001C39 8B3E[1901]              		mov	di, [start_bds]	; get first bds
  5453 00001C3D 8B3D                    		mov	di, [di]	; [di+BDS.link]
  5454                                  					; ds:di-->bds2
  5455                                  		;mov	ah, [cs:dsktnum] ; get number of floppies to remap
  5456 00001C3F 8A26[2501]              		mov	ah, [dsktnum]
  5457 00001C43 80EC02                  		sub	ah, 2		; adjust for a:	& b:
  5458                                  remap_loop1:
  5459 00001C46 8B3D                    		mov	di, [di]	; [di+BDS.link]
  5460                                  					; set new num to next floppy
  5461 00001C48 884505                  		mov	[di+5],	al	; [di+BDS.drivelet]
  5462 00001C4B FEC0                    		inc	al		; new number for next floppy
  5463 00001C4D FECC                    		dec	ah		; count down extra floppies
  5464 00001C4F 75F5                    		jnz	short remap_loop1
  5465                                  
  5466                                  ; now we've got to adjust the boot drive if we reassigned it
  5467                                  
  5468                                  		; 15/12/2023
  5469                                  		;mov	al, [cs:drvfat]
  5470 00001C51 A0[CA16]                		mov	al, [drvfat]
  5471 00001C54 3C02                    		cmp	al, 2		; is it	a: or b: ?
  5472 00001C56 721D                    		jb	short rmap_exit
  5473                                  		;sub	al, [cs:dsktnum]
  5474 00001C58 2A06[2501]              		sub	al, [dsktnum]	; is it one of the other floppies?
  5475 00001C5C 7204                    		jb	short remap_boot_flop ;	brif so
  5476                                  
  5477                                  ; we've got to remap the boot hard drive
  5478                                  ; subtract the number of EXTRA floppies from it
  5479                                  
  5480 00001C5E 0402                    		add	al, 2		; bootdrv -= (dsktnum-2)
  5481 00001C60 EB04                    		jmp	short remap_change_boot_drv
  5482                                  ; ---------------------------------------------------------------------------
  5483                                  
  5484                                  ; we've got to remap the boot floppy.
  5485                                  ; add the number of hard drive partitions to it
  5486                                  
  5487                                  remap_boot_flop:
  5488                                  		;add	al, [cs:drvmax]	; bootdrv += (drvmax-dsktnum)
  5489                                  		; 15/12/2023
  5490 00001C62 0206[7500]              		add	al, [drvmax]
  5491                                  remap_change_boot_drv:			
  5492                                  		;mov	[cs:drvfat], al ; alter msdos.sys load drive
  5493 00001C66 A2[CA16]                		mov	[drvfat], al
  5494 00001C69 FEC0                    		inc	al
  5495 00001C6B 1E                      		push	ds
  5496 00001C6C BF4004                  		mov	di, SYSINITSEG	; 46Dh
  5497                                  		;mov	di, 544h	; PCDOS 7.1 IBMBIO.COM
  5498                                  		;;mov	di, 46Dh	; SYSINIT segment
  5499 00001C6F 8EDF                    		mov	ds, di
  5500 00001C71 A2[9602]                		mov	[DEFAULTDRIVE], al
  5501                                  		;mov	ds:296h, al	; [SYSINIT+DEFAULT_DRIVE]
  5502                                  					; pass it to sysinit as	well
  5503 00001C74 1F                      		pop	ds ; ds = cs
  5504                                  rmap_exit:
  5505 00001C75 C3                      		retn
  5506                                  
  5507                                  ; =============== S U B	R O U T	I N E =======================================
  5508                                  
  5509                                  ; 17/10/2022
  5510                                  ; 02/10/2022 - Retro DOS v4.0 (MSDOS 5.0 -actual-)
  5511                                  ; 28/12/2018 - Retro DOS v4.0 (MSDOS 6.21 -draft-)
  5512                                  ; 02/06/2018 - Retro DOS v3.0 (MSDOS 3.3)	
  5513                                  ; 19/03/2018 - Retro DOS v2.0 (MSDOS 2.11)
  5514                                  ;**************************************************
  5515                                  ; getboot - get the boot sector for a hard disk
  5516                                  ;
  5517                                  ; Reads the boot sector from a specified drive into
  5518                                  ; a buffer at the top of memory.
  5519                                  ;
  5520                                  ; dl = int13 drive number to read boot sector for
  5521                                  ;**************************************************
  5522                                  
  5523                                  ; 17/10/2022
  5524                                  bootbias equ 200h
  5525                                  
  5526                                  getboot:	; proc near
  5527                                  		
  5528                                  		; 15/12/2023
  5529                                  		; ds = cs
  5530                                  		
  5531                                  		; 08/04/2018
  5532                                  		; Retro DOS v2.0 (IBMBIO.COM, IBMDOS 2.1)
  5533                                  		; 28/03/2018 - MSDOS 6.0 - MSINIT.ASM, 1991
  5534                                  		; 02/10/2022 - Retro DOS v4.0
  5535                                  		;	      (disassembled IO.SYS code of MSDOS 5.0)
  5536                                  
  5537                                  		;mov	ax, [cs:init_bootseg] ; 17/10/2022
  5538                                  		; 15/12/2023
  5539 00001C76 A1[CD16]                		mov	ax, [init_bootseg]
  5540 00001C79 8EC0                    		mov	es, ax
  5541                                  
  5542                                  		; 17/10/2022
  5543 00001C7B BB0002                  		mov	bx, bootbias ; 200h
  5544                                  		;mov	bx, 200h	; bootbias
  5545                                  					; load BX, ES:BX is where sector goes
  5546 00001C7E B80102                  		mov	ax, 201h
  5547 00001C81 30F6                    		xor	dh, dh
  5548 00001C83 B90100                  		mov	cx, 1
  5549 00001C86 CD13                    		int	13h		; DISK - READ SECTORS INTO MEMORY
  5550                                  					; AL = number of sectors to read, CH = track, CL = sector
  5551                                  					; DH = head, DL	= drive, ES:BX -> buffer to fill
  5552                                  					; Return: CF set on error, AH =	status,	AL = number of sectors read
  5553 00001C88 7209                    		jb	short erret
  5554                                  		; 17/10/2022
  5555 00001C8A 26813EFE0355AA          		cmp	word [es:bootbias+1FEh], 0AA55h
  5556                                  		;cmp	word ptr es:3FEh, 0AA55h ; [es:bootbias+1FEh]
  5557                                  					; Dave Litton magic word?
  5558 00001C91 7401                    		jz	short norm_ret	; yes
  5559                                  erret:
  5560 00001C93 F9                      		stc
  5561                                  norm_ret:
  5562 00001C94 C3                      		retn
  5563                                  
  5564                                  ; =============== S U B	R O U T	I N E =======================================
  5565                                  
  5566                                  ; 28/12/2018 - Retro DOS v4.0 
  5567                                  
  5568                                  ;***************************************************************************
  5569                                  ;   sethard - generate bpb for a variable sized hard file. ibm has a
  5570                                  ;   partitioned hard file; we must read physical sector 0 to determine where
  5571                                  ;   our own logical sectors start. we also read in our boot sector to
  5572                                  ;   determine version number
  5573                                  ;
  5574                                  ;   inputs:	dl is rom drive number (80...)
  5575                                  ;		bh is partition number (0....) 
  5576                                  ;		ds:di points to bds
  5577                                  ;   outputs:	carry clear -> bpb is filled in
  5578                                  ;		carry set   -> bpb is left uninitialized due to error
  5579                                  ;	trashes (at least) si, cx
  5580                                  ;	MUST PRESERVE ES:!!!!
  5581                                  ;***************************************************************************
  5582                                  
  5583                                  sethard:	; proc near		
  5584 00001C95 57                      		push	di
  5585 00001C96 53                      		push	bx
  5586 00001C97 1E                      		push	ds
  5587 00001C98 06                      		push	es
  5588 00001C99 885D05                  		mov	[di+5],	bl	; [di+BDS.drivelet]
  5589 00001C9C 885504                  		mov	[di+4],	dl	; [di+BDS.drivenum]
  5590 00001C9F 804D2301                		or	byte [di+23h], 1 ; [di+BDS.flags]
  5591                                  					; fnon_removable
  5592 00001CA3 C6452205                		mov	byte [di+22h], 5 ; [di+BDS.formfactor]
  5593                                  					; ffHardFile
  5594 00001CA7 C606[CC16]00            		mov	byte [fbigfat], 0 ; assume 12 bit FAT
  5595 00001CAC 88FE                    		mov	dh, bh		; partition number
  5596 00001CAE 52                      		push	dx
  5597 00001CAF B408                    		mov	ah, 8
  5598 00001CB1 CD13                    		int	13h		; DISK - DISK -	GET CURRENT DRIVE PARAMETERS (XT,AT,XT286,CONV,PS)
  5599                                  					; DL = drive number
  5600                                  					; Return: CF set on error, AH =	status code, BL	= drive	type
  5601                                  					; DL = number of consecutive drives
  5602                                  					; DH = maximum value for head number, ES:DI -> drive parameter
  5603 00001CB3 FEC6                    		inc	dh
  5604 00001CB5 887515                  		mov	[di+15h], dh	; [di+BDS.heads] ; get number of heads
  5605 00001CB8 5A                      		pop	dx
  5606 00001CB9 7263                    		jb	short setret	; error	if no hard disk
  5607 00001CBB 80E13F                  		and	cl, 3Fh
  5608 00001CBE 884D13                  		mov	[di+13h], cl	; [di+BDS.secpertrack]
  5609 00001CC1 52                      		push	dx		; save partition number
  5610 00001CC2 E8B1FF                  		call	getboot
  5611 00001CC5 5A                      		pop	dx		; restore partition number
  5612 00001CC6 7256                    		jb	short setret
  5613 00001CC8 BBC203                  		mov	bx, 3C2h	; 1C2h+bootbias
  5614                                  
  5615                                  ; The first 'active' partition is 00, the second is 01....
  5616                                  ;   then the remainder of the 'primary' but non-active partitions
  5617                                  
  5618                                  act_part:				
  5619 00001CCB 26F647FC80              		test	byte [es:bx-4], 80h ; is the partition active?
  5620 00001CD0 7418                    		jz	short no_act	; no
  5621 00001CD2 26803F01                		cmp	byte [es:bx], 1 ; reject if partitiontype != 1, 4 or 6
  5622 00001CD6 740C                    		jz	short got_good_act
  5623 00001CD8 26803F04                		cmp	byte [es:bx], 4
  5624 00001CDC 7406                    		jz	short got_good_act
  5625 00001CDE 26803F06                		cmp	byte [es:bx], 6
  5626 00001CE2 7506                    		jnz	short no_act
  5627                                  got_good_act:				
  5628 00001CE4 08F6                    		or	dh, dh		; is this our target partition #?
  5629 00001CE6 743A                    		jz	short set2	; WE GOT THE ONE WANTED!!
  5630 00001CE8 FECE                    		dec	dh		; count	down
  5631                                  no_act:					
  5632 00001CEA 83C310                  		add	bx, 16
  5633 00001CED 81FB0204                		cmp	bx, 402h	; 202h+bootbias
  5634                                  					; last entry done?
  5635 00001CF1 75D8                    		jnz	short act_part	; no, process next entry
  5636 00001CF3 BBC203                  		mov	bx, 3C2h	; 1C2h+bootbias
  5637                                  					; restore original value of bx
  5638                                  
  5639                                  ; Now scan the non-active partitions
  5640                                  
  5641                                  get_primary:				
  5642 00001CF6 26F647FC80              		test	byte [es:bx-4], 80h
  5643 00001CFB 7518                    		jnz	short not_prim	; we've already scanned
  5644                                  					; the ACTIVE ones
  5645 00001CFD 26803F01                		cmp	byte [es:bx], 1 ; see if partitiontype == 1, 4 or 6
  5646 00001D01 740C                    		jz	short got_prim
  5647 00001D03 26803F04                		cmp	byte [es:bx], 4
  5648 00001D07 7406                    		jz	short got_prim
  5649 00001D09 26803F06                		cmp	byte [es:bx], 6
  5650 00001D0D 7506                    		jnz	short not_prim
  5651                                  got_prim:				
  5652 00001D0F 08F6                    		or	dh, dh		; is this our target partition?
  5653 00001D11 740F                    		jz	short set2
  5654 00001D13 FECE                    		dec	dh
  5655                                  not_prim:				
  5656 00001D15 83C310                  		add	bx, 16
  5657 00001D18 81FB0204                		cmp	bx, 402h	; 202h+bootbias
  5658 00001D1C 75D8                    		jnz	short get_primary ; loop till we've gone through table
  5659                                  setret:					
  5660 00001D1E F9                      		stc			; error	return
  5661 00001D1F E9DC02                  		jmp	ret_hard_err
  5662                                  
  5663                                  ; ---------------------------------------------------------------------------
  5664                                  
  5665                                  ;  until we get the real logical boot record and get the bpb,
  5666                                  ;  BDS_BPB.BPB_BIGTOTALSECTORS will be used instead of BDS_BPB.BPB_TOTALSECTORS
  5667                                  ;  for the convenience of the computation.
  5668                                  ;
  5669                                  ;  at the end of this procedure, if a bpb information is gotten from
  5670                                  ;  the valid boot record, then we are going to use those bpb information
  5671                                  ;  without change.
  5672                                  ;
  5673                                  ;  otherwise, if (hidden sectors + total sectors) <= a word, then we will move
  5674                                  ;  BDS_BPB.BPB_BIGTOTALSECTORS (low) to BDS_BPB.BPB_TOTALSECTORS and zero out
  5675                                  ;  BDS_BPB.BPB_BIGTOTALSECTORS entry to make it a conventional bpb format.
  5676                                  
  5677                                  set2:					
  5678 00001D22 2E8816[CF16]            		mov	[cs:rom_drv_num], dl
  5679                                  			; save the rom bios drive number we are handling now.
  5680 00001D27 268B4704                		mov	ax, [es:bx+4]	; hidden sectors (start	sector)
  5681 00001D2B 268B5706                		mov	dx, [es:bx+6]
  5682                                  
  5683                                  ; decrement the sector count by 1 to make it zero based. exactly 64k
  5684                                  ; sectors should be allowed	
  5685                                  
  5686 00001D2F 83E801                  		sub	ax, 1
  5687 00001D32 83DA00                  		sbb	dx, 0
  5688 00001D35 26034708                		add	ax, [es:bx+8]	; sectors in partition
  5689 00001D39 2613570A                		adc	dx, [es:bx+10]
  5690 00001D3D 7305                    		jnb	short okdrive
  5691 00001D3F 800E[CC16]80            		or	byte [fbigfat], 80h ; ftoobig
  5692                                  okdrive:				
  5693 00001D44 268B4704                		mov	ax, [es:bx+4]
  5694 00001D48 894517                  		mov	[di+17h], ax	; [di+BDS.hiddensecs]
  5695                                  					; BPB_HIDDENSECTORS = p->partitionbegin
  5696 00001D4B 268B4706                		mov	ax, [es:bx+6]
  5697 00001D4F 894519                  		mov	[di+19h], ax	; [di+BDS.hiddensecs+2]
  5698 00001D52 268B570A                		mov	dx, [es:bx+10]	; # of sectors (high)
  5699 00001D56 268B4708                		mov	ax, [es:bx+8]	; # of sectors (low)
  5700 00001D5A 89551D                  		mov	[di+1Dh], dx	; [di+BDS.totalsecs32+2]
  5701 00001D5D 89451B                  		mov	[di+1Bh], ax	; [di+BDS.totalsecs32]
  5702                                  					; bpb->maxsec =	p->partitionlength
  5703 00001D60 83FA00                  		cmp	dx, 0
  5704 00001D63 7705                    		ja	short okdrive_1
  5705 00001D65 83F840                  		cmp	ax, 64		; if (p->partitionlength < 64)
  5706 00001D68 72B4                    		jb	short setret	; return -1;
  5707                                  okdrive_1:				
  5708 00001D6A 8B5519                  		mov	dx, [di+19h]	; [di+BDS.hiddensecs+2]
  5709 00001D6D 8B4517                  		mov	ax, [di+17h]	; [di+BDS.hiddensecs]
  5710 00001D70 31DB                    		xor	bx, bx		; boot sector number - for mini	disk
  5711                                  					; usually equal	to the # of sec/trk.
  5712 00001D72 8A5D13                  		mov	bl, [di+13h]	; [di+BDS.secpertrack]
  5713 00001D75 50                      		push	ax
  5714 00001D76 89D0                    		mov	ax, dx
  5715 00001D78 31D2                    		xor	dx, dx
  5716 00001D7A F7F3                    		div	bx		; (sectors)dx:ax / (BDS.secpertrack)bx =
  5717                                  					; (track)temp_h:ax + (sector)dx
  5718                                  		; 17/10/2022
  5719 00001D7C 2EA3[2905]              		mov	[cs:temp_h], ax
  5720 00001D80 58                      		pop	ax
  5721 00001D81 F7F3                    		div	bx
  5722 00001D83 88D1                    		mov	cl, dl
  5723 00001D85 FEC1                    		inc	cl
  5724 00001D87 31DB                    		xor	bx, bx
  5725 00001D89 8A5D15                  		mov	bl, [di+15h]	; [di+BDS.heads]
  5726 00001D8C 50                      		push	ax
  5727 00001D8D 31D2                    		xor	dx, dx
  5728 00001D8F 2EA1[2905]              		mov	ax, [cs:temp_h]
  5729 00001D93 F7F3                    		div	bx
  5730 00001D95 2EA3[2905]              		mov	[cs:temp_h], ax
  5731 00001D99 58                      		pop	ax
  5732 00001D9A F7F3                    		div	bx		;  dl is head, ax is cylinder
  5733 00001D9C 2E833E[2905]00          		cmp	word [cs:temp_h], 0
  5734 00001DA2 777C                    		ja	short setret_brdg ; exceeds the	limit of int 13h
  5735 00001DA4 3D0004                  		cmp	ax, 1024
  5736 00001DA7 7777                    		ja	short setret_brdg ; exceeds the	limit of int 13h
  5737                                  			; Retro DOS v3.2 note by Erdogan Tan - 28/07/2019
  5738                                  			; **MSDOS code accepts if ax = 1024 but it is nonsense here
  5739                                  			; ('ja' must be 'jnb')
  5740                                  okdrive_2:
  5741                                   		; 28/07/2019
  5742                                  ; dl is head.
  5743                                  ; ax is cylinder
  5744                                  ; cl is sector number (assume less than 2**6 = 64 for int 13h)
  5745                                  
  5746                                  ;*** for mini disks ***
  5747                                  
  5748 00001DA9 837D4701                		cmp	word [di+47h], 1 ; [di+BDS.bdsm_ismini]
  5749                                  					; check	for mini disk
  5750 00001DAD 7503                    		jnz	short oknotmini	; not mini disk.
  5751 00001DAF 034549                  		add	ax, [di+49h]	; [di+BDS.bdsm_hidden_trks]
  5752                                  					; set the physical track number
  5753                                  oknotmini:
  5754                                  ;*** end of added logic for mini disk
  5755                                  				
  5756 00001DB2 D0CC                    		ror	ah, 1		; move high two	bits of	cyl to high
  5757 00001DB4 D0CC                    		ror	ah, 1		; two bits of upper byte
  5758 00001DB6 80E4C0                  		and	ah, 0C0h	; turn off remainder of	bits
  5759 00001DB9 08E1                    		or	cl, ah		; move two bits	to correct spot
  5760 00001DBB 88C5                    		mov	ch, al		; ch is	cylinder (low 8	bits)
  5761                                  					; cl is	sector + 2 high	bits of	cylinder
  5762 00001DBD 88D6                    		mov	dh, dl		; dh is	head
  5763 00001DBF 2E8A16[CF16]            		mov	dl, [cs:rom_drv_num] ; dl is drive number
  5764                                  
  5765                                  ; cl is sector + 2 high bits of cylinder
  5766                                  ; ch is low 8 bits of cylinder
  5767                                  ; dh is head
  5768                                  ; dl is drive
  5769                                  
  5770                                  ; for convenience, we are going to read the logical boot sector
  5771                                  ; into cs:disksector area.
  5772                                  
  5773                                  ; read in boot sector using bios disk interrupt. the buffer where it
  5774                                  ; is to be read in is cs:disksector.
  5775                                  
  5776 00001DC4 0E                      		push	cs
  5777 00001DC5 07                      		pop	es
  5778 00001DC6 BB[4E01]                		mov	bx, disksector	; for convenience,
  5779                                  					; we are going to read the logical boot	sector
  5780                                  					; into cs:disksector area.
  5781 00001DC9 B80102                  		mov	ax, 201h
  5782 00001DCC CD13                    		int	13h		; DISK - READ SECTORS INTO MEMORY
  5783                                  					; AL = number of sectors to read, CH = track, CL = sector
  5784                                  					; DH = head, DL	= drive, ES:BX -> buffer to fill
  5785                                  					; Return: CF set on error, AH =	status,	AL = number of sectors read
  5786                                  
  5787                                  ; cs:disksec contains the boot sector. in theory, (ha ha) the bpb in this thing
  5788                                  ; is correct. we can, therefore, suck out all the relevant statistics on the
  5789                                  ; media if we recognize the version number.
  5790                                  
  5791 00001DCE BB[4E01]                		mov	bx, disksector
  5792 00001DD1 53                      		push	bx
  5793 00001DD2 50                      		push	ax
  5794 00001DD3 2E803FE9                		cmp	byte [cs:bx], 0E9h ; is it a near jump?
  5795 00001DD7 740D                    		jz	short check_1_ok ; yes
  5796 00001DD9 2E803FEB                		cmp	byte [cs:bx], 0EBh ; is it a short jump?
  5797 00001DDD 7529                    		jnz	short invalid_boot_record ; no
  5798 00001DDF 2E807F0290              		cmp	byte [cs:bx+2], 90h ; yes, is the next one a nop?
  5799 00001DE4 7522                    		jnz	short invalid_boot_record
  5800                                  check_1_ok:				
  5801                                  		; 14/08/2023
  5802 00001DE6 BB[5901]                		mov	bx, disksector+EXT_BOOT.BPB ; disksector+11
  5803                                  		;mov	bx, 159h	; disksector+EXT_BOOT.BPB
  5804                                  					; point	to the bpb in the boot record
  5805 00001DE9 2E8A470A                		mov	al, [cs:bx+10]	; [bx+EBPB.MEDIADESCRIPTOR]
  5806                                  					; get the mediadescriptor byte
  5807 00001DED 24F0                    		and	al, 0F0h	; mask off low nibble
  5808 00001DEF 3CF0                    		cmp	al, 0F0h	; is high nibble = 0Fh?
  5809 00001DF1 7515                    		jnz	short invalid_boot_record ; no,	invalid	boot record
  5810 00001DF3 2E813F0002              		cmp	word [cs:bx], 512 ; [bx+EBPB.BYTESPERSECTOR]
  5811 00001DF8 750E                    		jnz	short invalid_boot_record ; invalidate non 512 byte sectors
  5812                                  
  5813                                  check2_ok:				; yes, mediadescriptor ok.
  5814 00001DFA 2E8A4702                		mov	al, [cs:bx+2]	; now make sure	that
  5815                                  					; the sectorspercluster	is
  5816                                  					; a power of 2
  5817                                  					;
  5818                                  					; [bx+EBPB.SECTORSPERCLUSTER]
  5819                                  					; get the sectorspercluster
  5820 00001DFE 08C0                    		or	al, al		; is it	zero?
  5821 00001E00 7406                    		jz	short invalid_boot_record ; yes, invalid boot record
  5822                                  
  5823                                  ck_power_of_two:			
  5824 00001E02 D0E8                    		shr	al, 1		; shift	until first bit	emerges
  5825 00001E04 73FC                    		jnb	short ck_power_of_two
  5826 00001E06 7405                    		jz	short valid_boot_record
  5827                                  
  5828                                  invalid_boot_record:			
  5829 00001E08 58                      		pop	ax
  5830 00001E09 5B                      		pop	bx
  5831 00001E0A E93301                  		jmp	unknown		; jump to invalid boot record
  5832                                  					; unformatted or illegal media.
  5833                                  ; ---------------------------------------------------------------------------
  5834                                  
  5835                                  valid_boot_record:			
  5836 00001E0D 58                      		pop	ax
  5837 00001E0E 5B                      		pop	bx
  5838                                  
  5839                                  ; Signature found. Now check version.
  5840                                  
  5841 00001E0F 2E817F08322E            		cmp	word [cs:bx+8], '2.' ; 03/10/2022 (NASM syntax)
  5842                                  		;cmp	word ptr cs:[bx+8], 2E32h ; '2.'
  5843 00001E15 750F                    		jnz	short try5
  5844 00001E17 2E807F0A30              		cmp	byte [cs:bx+0Ah], '0' ; 03/10/2022 (NASM syntax)
  5845                                  		;cmp	byte ptr cs:[bx+0Ah], 30h ; '0'
  5846 00001E1C 7508                    		jnz	short try5
  5847 00001E1E EB2F                    		jmp	short copybpb
  5848                                  ; ---------------------------------------------------------------------------
  5849                                  
  5850                                  setret_brdg:				
  5851 00001E20 E9FBFE                  		jmp	setret
  5852                                  ; ---------------------------------------------------------------------------
  5853                                  
  5854                                  unknown3_0_j:				
  5855 00001E23 E91E01                  		jmp	unknown3_0	; legally formatted media,
  5856                                  					; although, content might be bad.
  5857                                  ; ---------------------------------------------------------------------------
  5858                                  
  5859                                  try5:					
  5860 00001E26 E8DA01                  		call	cover_fdisk_bug
  5861                                  
  5862                                  ; see if it is an os2 signature
  5863                                  
  5864 00001E29 2E817F08302E            		cmp	word [cs:bx+8], '0.' ; 03/10/2022 (NASM syntax)
  5865                                  		;cmp	word ptr cs:[bx+8], 2E30h ; '0.'
  5866 00001E2F 750D                    		jnz	short no_os2
  5867 00001E31 2E8A4707                		mov	al, [cs:bx+7]	; 17/10/2022 (NASM syntax)
  5868 00001E35 2C31                    		sub	al, '1'
  5869                                  		;sub	al, 31h		; '1'
  5870 00001E37 24FE                    		and	al, 0FEh
  5871 00001E39 7414                    		jz	short copybpb	; accept either	'1' or '2'
  5872 00001E3B E90201                  		jmp	unknown
  5873                                  ; ---------------------------------------------------------------------------
  5874                                  
  5875                                  ; no os2 signature, this is to check for real dos versions
  5876                                  
  5877                                  no_os2:					
  5878 00001E3E 2E817F08332E            		cmp	word [cs:bx+8], '3.' ; 03/10/2022 (NASM syntax)
  5879                                  		;cmp	word ptr cs:[bx+8], 2E33h ; '3.'
  5880 00001E44 72DD                    		jb	short unknown3_0_j ; must be 2.1 boot record.
  5881                                  					; do not trust it, but still legal.
  5882 00001E46 7507                    		jnz	short copybpb	; honor	os2 boot record
  5883                                  					; or dos 4.0 version
  5884 00001E48 2E807F0A31              		cmp	byte [cs:bx+10], '1'
  5885                                  		;cmp	byte ptr cs:[bx+0Ah], 31h ; '1'
  5886 00001E4D 72D4                    		jb	short unknown3_0_j ; if version >=	3.1, then o.k.
  5887                                  copybpb:
  5888                                  
  5889                                  ; 03/10/2022
  5890                                  
  5891                                  ; we have a valid boot sector. use the bpb in it to build the
  5892                                  ; bpb in bios. it is assumed that only
  5893                                  ;	BDS_BPB.BPB_SECTORSPERCLUSTER
  5894                                  ;	BDS_BPB.BPB_ROOTENTRIES, and
  5895                                  ;	BDS_BPB.BPB_SECTORSPERFAT
  5896                                  ; need to be set (all other values in already). fbigfat is also set.
  5897                                  
  5898                                  ; if it is non fat based system, then just copy the bpb from the boot sector
  5899                                  ; into the bpb in bds table, and also set the boot serial number, volume id,
  5900                                  ; and system id according to the boot record.
  5901                                  ; for the non_fat system, don't need to set the other value. so just do goodret.
  5902                                  
  5903                                  		; 10/12/2022
  5904                                  		; (number of FATs optimization)
  5905 00001E4F BE[5901]                		mov	si, disksector+11 ; disksector+0Bh
  5906                                  		;mov	cl, [cs:disksector+10h] ; Number of FATs (may be 2 or 1)
  5907 00001E52 2E8A4C05                		mov	cl, [cs:si+05h]
  5908                                  		
  5909 00001E56 2E807C1B29              		cmp	byte [cs:si+1Bh], 29h ; 10/12/2022	
  5910                                  		;cmp	byte [cs:disksector+26h], 29h ; 17/10/2022
  5911                                  					; [disksector+EXT_BOOT.SIG]
  5912                                  					; EXT_BOOT_SIGNATURE
  5913 00001E5B 754E                    		jnz	short copybpb_fat ; conventional fat system
  5914                                  
  5915                                  		; 03/10/2022
  5916                                  		; 29/12/2018 - Retro DOS v4.0 modification note:
  5917                                  		; Regarding 'fat_big_small' part of this (MSDOS 6.0) code
  5918                                  		;	     number of FATs must be 2 ; =*?=
  5919                                  		; (Otherwise, '# of data sectors' would be calculated as wrong!!!)
  5920                                  		;
  5921                                  		;cmp	byte [disksector+EXT_BOOT.BPB+EBPB.NUMBEROFFATS], 2 ; =*?=
  5922                                  
  5923                                  		; 10/12/2022
  5924                                  		;cmp	byte [cs:disksector+10h], 0
  5925                                  					; [disksector+EXT_BOOT.BPB+EBPB.NUMBEROFFATS]
  5926                                  		;jnz	short copybpb_fat ; a fat system.
  5927 00001E5D 08C9                    		or	cl, cl	 ; [cs:disksector+10h]
  5928 00001E5F 754A                    		jnz	short copybpb_fat ; a fat system.
  5929                                  
  5930                                  ; non fat based	media.
  5931                                  
  5932 00001E61 57                      		push	di
  5933 00001E62 1E                      		push	ds
  5934 00001E63 1E                      		push	ds
  5935 00001E64 07                      		pop	es
  5936 00001E65 0E                      		push	cs
  5937 00001E66 1F                      		pop	ds
  5938                                  
  5939                                  		; 10/12/2022
  5940                                  		; (number of FATs optimization)
  5941                                  		; SI = disksector+11
  5942                                  		; 17/10/2022
  5943                                  		;;mov	si, 159h	; disksector+EXT_BOOT.BPB
  5944                                  		;mov	si, disksector+11
  5945 00001E67 83C706                  		add	di, 6		; add di,BDS.BPB
  5946                                  
  5947                                  ; just for completeness, we'll make sure that total_sectors and
  5948                                  ; big_total_sectors aren't both zero. I've seen examples of
  5949                                  ; this on DOS 3.30 boot records. I don't know exactly how it
  5950                                  ; got that way. If it occurs, then use the values from the
  5951                                  ; partition table.
  5952                                  
  5953                                  		; 18/12/2022
  5954 00001E6A 29C9                    		sub	cx, cx 
  5955                                  
  5956                                  		;cmp	word [cs:si+8], 0 	; [cs:si+EBPB.TOTALSECTORS]
  5957                                  		;jnz	short already_nonz 
  5958                                  		;			; how about big_total?
  5959                                  		;cmp	word [cs:si+15h], 0	; [cs:si+EBPB.BIGTOTALSECTORS]
  5960                                  		;jnz	short already_nonz ; we're okay if any are != 0
  5961                                  		;cmp	word [cs:si+17h], 0	; [cs:si+EBPB.BIGTOTALSECTORS+2]
  5962                                  		;jnz	short already_nonz
  5963                                  
  5964                                  		; 18/12/2022
  5965 00001E6C 2E394C08                		cmp	[cs:si+8], cx ; 0	; [cs:si+EBPB.TOTALSECTORS]
  5966 00001E70 7521                    		jnz	short already_nonz
  5967                                  					     ; how about big_total?
  5968 00001E72 2E394C15                		cmp	word [cs:si+15h], cx ; 0 ; [cs:si+EBPB.BIGTOTALSECTORS]
  5969 00001E76 751B                    		jnz	short already_nonz   ; we're okay if any are != 0
  5970 00001E78 2E394C17                		cmp	word [cs:si+17h], cx ; 0 ; [cs:si+EBPB.BIGTOTALSECTORS+2]
  5971 00001E7C 7515                    		jnz	short already_nonz
  5972                                  
  5973                                  ; now let's copy the values from the partition table (now in the BDS)
  5974                                  ; into the BPB in the boot sector buffer, before they get copied back.
  5975                                  
  5976 00001E7E 8B4508                  		mov	ax, [di+8]	; [di+BDS.totalsecs16]
  5977 00001E81 2E894408                		mov	[cs:si+8], ax	; [cs:si+EBPB.TOTALSECTORS]
  5978 00001E85 8B4515                  		mov	ax, [di+15h]	; [di+BDS.totalsecs32]
  5979 00001E88 2E894415                		mov	[cs:si+15h], ax	; [cs:si+EBPB.BIGTOTALSECTORS]
  5980 00001E8C 8B4517                  		mov	ax, [di+17h]	; [di+BDS.totalsecs32+2]
  5981 00001E8F 2E894417                		mov	[cs:si+17h], ax	; [cs:si+EBPB.BIGTOTALSECTORS+2]
  5982                                  
  5983                                  already_nonz:	
  5984                                  		; 18/12/2022
  5985                                  		; cx = 0
  5986 00001E93 B119                    		mov	cl, 25		
  5987                                  		;mov	cx, 25		; A_BPB.size - 6 ; Use SMALL version!
  5988 00001E95 F3A4                    		rep movsb
  5989 00001E97 1F                      		pop	ds
  5990 00001E98 5F                      		pop	di
  5991 00001E99 06                      		push	es
  5992 00001E9A 1E                      		push	ds
  5993 00001E9B 07                      		pop	es
  5994 00001E9C 0E                      		push	cs
  5995 00001E9D 1F                      		pop	ds
  5996                                  		; 13/08/2023
  5997 00001E9E BD[3807]                		mov	bp, MOVMEDIAIDS ; mov_media_ids
  5998                                  		; 18/12/2022
  5999                                  		;mov	bp, mov_media_ids
  6000                                  		;;mov	bp, 751h	; mov_media_ids
  6001                                  					; at 2C7h:751h = 70h:2CC1h
  6002                                  					; set volume id, systemid, serial.
  6003 00001EA1 0E                      		push	cs		; simulate far call
  6004 00001EA2 E8B2F8                  		call	call_bios_code
  6005 00001EA5 06                      		push	es
  6006 00001EA6 1F                      		pop	ds
  6007 00001EA7 07                      		pop	es
  6008 00001EA8 E94B01                  		jmp	goodret
  6009                                  ; ---------------------------------------------------------------------------
  6010                                  
  6011                                  ; ****** cas ---
  6012                                  ; IBM DOS 3.30 doesn't seem to mind that the TOTAL_SECTORS and
  6013                                  ; BIG_TOTAL_SECTORS field in the boot sector are 0000. This
  6014                                  ; happens with some frequency -- perhaps through some OS/2 setup
  6015                                  ; program. We haven't actually been COPYING the TOTAL_SECTORS
  6016                                  ; from the boot sector into the DPB anyway, we've just been using
  6017                                  ; it for calculating the fat size. Pretty scary, huh? For now,
  6018                                  ; we'll go ahead and copy it into the DPB, except in the case
  6019                                  ; that it equals zero, in which case we just use the values in
  6020                                  ; the DPB from the partition table.
  6021                                  
  6022                                  ; 17/10/2022
  6023                                  ;MOVMEDIAIDS equ mov_media_ids - DOSBIOSEG_2C7h ; (751h for MSDOS 5.0 IO.SYS)
  6024                                  ;CLEARIDS equ clear_ids - DOSBIOSEG_2C7h ; (5D9h for MSDOS 5.0 IO.SYS)		    		
  6025                                  ; 09/12/2022
  6026                                  MOVMEDIAIDS equ mov_media_ids
  6027                                  CLEARIDS equ clear_ids
  6028                                  ; 11/09/2023
  6029                                  CLEARIDS_X equ clear_ids_x
  6030                                  
  6031                                  copybpb_fat:
  6032                                  		; 10/12/2022
  6033                                  		; (number of FATs optimization)
  6034                                  		; SI = disksector+11				
  6035                                  		; 17/10/2022
  6036                                  		;mov	si, disksector+11
  6037                                  		;;mov	si, 159h	; disksector+EXT_BOOT.BPB
  6038                                  					; cs:si	-> bpb in boot
  6039 00001EAB 31D2                    		xor	dx, dx
  6040 00001EAD 2E8B4408                		mov	ax, [cs:si+8]	; [cs:si+EBPB.TOTALSECTORS]
  6041                                  					; get totsec from boot sec
  6042 00001EB1 09C0                    		or	ax, ax
  6043 00001EB3 7516                    		jnz	short copy_totsec ; if non zero, use that
  6044 00001EB5 2E8B4415                		mov	ax, [cs:si+15h]	; [cs:si+EBPB.BIGTOTALSECTORS]
  6045                                  					; get the big version
  6046                                  					; (32 bit total	sectors)
  6047 00001EB9 2E8B5417                		mov	dx, [cs:si+17h]	; [cs:si+EBPB.BIGTOTALSECTORS+2]
  6048                                  		; 10/12/2022
  6049                                  		; (number of FATs optimization)
  6050                                  		; CL = number of FATs (2 or 1) 
  6051 00001EBD 89D3                    		mov	bx, dx		; see if it is a big zero
  6052 00001EBF 09C3                    		or	bx, ax
  6053 00001EC1 7508                    		jnz	short copy_totsec
  6054                                  			; screw it. it	was bogus.
  6055 00001EC3 8B451B                  		mov	ax, [di+1Bh]	; [di+BDS.totalsecs32]
  6056 00001EC6 8B551D                  		mov	dx, [di+1Dh]	; [di+BDS.totalsecs32+2]
  6057 00001EC9 EB06                    		jmp	short fat_big_small
  6058                                  
  6059                                  		;mov	cx, dx
  6060                                  		;or	cx, ax		; see if it is a big zero
  6061                                  		;jz	short totsec_already_set ; screw it. it	was bogus.
  6062                                  copy_totsec:				
  6063 00001ECB 89451B                  		mov	[di+1Bh], ax	; [di+BDS.totalsecs32]
  6064                                  					; make DPB match boot sec
  6065 00001ECE 89551D                  		mov	[di+1Dh], dx	; [di+BDS.totalsecs32+2]
  6066                                  
  6067                                  		; 10/12/2022
  6068                                  ;totsec_already_set:			
  6069                                  		;mov	ax, [di+1Bh]	; [di+BDS.totalsecs32]
  6070                                  		;mov	dx, [di+1Dh]	; [di+BDS.totalsecs32+2]
  6071                                  
  6072                                  ; determine fat entry size.
  6073                                  
  6074                                  fat_big_small:
  6075                                  
  6076                                  ;at this moment dx;ax = total sector number
  6077                                  
  6078                                  ;Do not assume 1 reserved sector. Update the reserved sector field in BDS 
  6079                                  ;from the BPB on the disk
  6080                                  				
  6081 00001ED1 2E8B5C03                		mov	bx, [cs:si+3]	; [cs:si+EBPB.RESERVEDSECTORS]
  6082                                  					; get #reserved_sectors	from BPB
  6083 00001ED5 895D09                  		mov	[di+9],	bx	; [di+BDS.resectors]
  6084                                  					; update BDS field
  6085 00001ED8 29D8                    		sub	ax, bx
  6086 00001EDA 83DA00                  		sbb	dx, 0		; update the count
  6087 00001EDD 2E8B5C0B                		mov	bx, [cs:si+0Bh]	; [cs:si+EBPB.SECTORSPERFAT]
  6088                                  					; bx = sectors/fat
  6089 00001EE1 895D11                  		mov	[di+11h], bx	; [di+BDS.fatsecs]
  6090                                  					; set in bds bpb
  6091                                  		; 10/12/2022
  6092                                  		; (number of FATs optimization)
  6093                                  		; CL = number of FATs (2 or 1) 
  6094                                  		;dec	cl ; *
  6095                                  		; 18/12/2022
  6096 00001EE4 49                      		dec	cx ; *
  6097 00001EE5 D3E3                    		shl	bx, cl			
  6098                                  		;shl	bx, 1	; =*?=	; always 2 fats
  6099                                  		
  6100 00001EE7 29D8                    		sub	ax, bx		; sub #	fat sectors
  6101 00001EE9 83DA00                  		sbb	dx, 0
  6102 00001EEC 2E8B5C06                		mov	bx, [cs:si+6]	; [cs:si+EBPB.ROOTENTRIES]
  6103                                  					; # root entries
  6104 00001EF0 895D0C                  		mov	[di+0Ch], bx	; [di+BDS.direntries]
  6105                                  					; set in bds bpb
  6106 00001EF3 B104                    		mov	cl, 4
  6107 00001EF5 D3EB                    		shr	bx, cl		; div by 16 ents/sector
  6108 00001EF7 29D8                    		sub	ax, bx		; sub #	dir sectors
  6109 00001EF9 83DA00                  		sbb	dx, 0		;
  6110                                  					; dx:ax	now contains the
  6111                                  					; # of data sectors
  6112 00001EFC 31C9                    		xor	cx, cx ; *
  6113 00001EFE 2E8A4C02                		mov	cl, [cs:si+2]	; [cs:si+EBPB.SECTORSPERCLUSTER]
  6114                                  					; sectors per cluster
  6115 00001F02 884D08                  		mov	[di+8],	cl	; [di+BDS.secperclus]
  6116                                  					; set in bios bpb
  6117 00001F05 50                      		push	ax
  6118 00001F06 89D0                    		mov	ax, dx
  6119 00001F08 31D2                    		xor	dx, dx
  6120 00001F0A F7F1                    		div	cx		; cx = sectors per cluster
  6121 00001F0C 2EA3[2905]              		mov	[cs:temp_h], ax	; [temp_h]:ax now contains the
  6122                                  					; # clusters.
  6123 00001F10 58                      		pop	ax
  6124 00001F11 F7F1                    		div	cx
  6125 00001F13 2E833E[2905]00          		cmp	word [cs:temp_h], 0
  6126 00001F19 771C                    		ja	short toobig_ret ; too big cluster number
  6127 00001F1B 3DF60F                  		cmp	ax, 0FF6h	; 4096-10
  6128                                  					; is this 16-bit fat?
  6129 00001F1E 7205                    		jb	short copymediaid ; no,	small fat
  6130                                  		; 17/10/2022
  6131 00001F20 800E[CC16]40            		or	byte [fbigfat], 40h
  6132                                  		;or	ds:fbigfat, 40h	; fbig
  6133                                  					; 16 bit fat
  6134                                  copymediaid:				
  6135 00001F25 06                      		push	es
  6136 00001F26 1E                      		push	ds
  6137 00001F27 07                      		pop	es
  6138 00001F28 0E                      		push	cs
  6139 00001F29 1F                      		pop	ds
  6140                                  		; 17/10/2022
  6141 00001F2A BD[3807]                		mov	bp, MOVMEDIAIDS
  6142                                  		;mov	bp, 751h	; mov_media_ids
  6143                                  					; at 2C7h:751h = 70h:2CC1h
  6144                                  					; copy filesys_id, volume label
  6145 00001F2D 0E                      		push	cs		; simulate far call
  6146 00001F2E E826F8                  		call	call_bios_code
  6147 00001F31 06                      		push	es
  6148 00001F32 1F                      		pop	ds
  6149 00001F33 07                      		pop	es
  6150 00001F34 E9A100                  		jmp	massage_bpb	; now final check for bpb info
  6151                                  					; and return.
  6152                                  ; ---------------------------------------------------------------------------
  6153                                  
  6154                                  toobig_ret:				
  6155 00001F37 2E800E[CC16]80          		or	byte [cs:fbigfat], 80h
  6156 00001F3D E9B600                  		jmp	goodret		; still	drive letter is	assigned
  6157                                  					; but useless. to big for
  6158                                  					; current pc dos fat file system
  6159                                  ; ---------------------------------------------------------------------------
  6160                                  
  6161                                  unknown:	
  6162                                  		; 12/12/2022
  6163 00001F40 804D2402                		or	byte [di+24h], 02h			
  6164                                  		;or	word [di+23h], 200h ; [di+BDS.flags]
  6165                                  					; unformatted_media
  6166                                  					; Set unformatted media	flag.
  6167                                  
  6168                                  ; the boot signature may not be	recognizable,
  6169                                  ; but we should	try and	read it	anyway.
  6170                                  
  6171                                  unknown3_0:				
  6172 00001F44 8B551D                  		mov	dx, [di+1Dh]	; skip setting unformatted_media bit
  6173                                  					; [di+BDS.totalsecs32+2]
  6174 00001F47 8B451B                  		mov	ax, [di+1Bh]	; [di+BDS.totalsecs32]
  6175 00001F4A BE[FC16]                		mov	si, disktable2
  6176                                  
  6177                                  scan:					
  6178 00001F4D 2E3B14                  		cmp	dx, [cs:si]
  6179 00001F50 720D                    		jb	short gotparm
  6180 00001F52 7706                    		ja	short scan_next
  6181 00001F54 2E3B4402                		cmp	ax, [cs:si+2]
  6182 00001F58 7605                    		jbe	short gotparm
  6183                                  
  6184                                  scan_next:				
  6185 00001F5A 83C60A                  		add	si, 10		; 5*2
  6186 00001F5D EBEE                    		jmp	short scan	; covers upto 512 mb media
  6187                                  ; ---------------------------------------------------------------------------
  6188                                  
  6189                                  gotparm:				
  6190 00001F5F 8A4C08                  		mov	cl, [si+8]	; fat size for fbigfat flag
  6191                                  		;or	ds:fbigfat, cl
  6192                                  		; 17/10/2022
  6193 00001F62 080E[CC16]              		or	[fbigfat], cl
  6194 00001F66 2E8B4C04                		mov	cx, [cs:si+4]	; ch = number of sectors per cluster
  6195                                  					; cl = log base	2 of ch
  6196 00001F6A 2E8B5406                		mov	dx, [cs:si+6]	; dx = number of root dir entries
  6197                                  
  6198                                  ; now calculate size of fat table
  6199                                  
  6200 00001F6E 89550C                  		mov	[di+0Ch], dx	; [di+BDS.direntries]
  6201                                  					; save number of (root)	dir entries
  6202 00001F71 8B551D                  		mov	dx, [di+1Dh]	; [di+BDS.totalsecs32+2]
  6203 00001F74 8B451B                  		mov	ax, [di+1Bh]	; [di+BDS.totalsecs32]
  6204 00001F77 886D08                  		mov	[di+8],	ch	; [di+BDS.secperclus]
  6205                                  					; save sectors per cluster
  6206                                  		; 17/10/2022
  6207 00001F7A F606[CC16]40            		test	byte [fbigfat], 40h
  6208                                  		;test	ds:fbigfat, 40h	; fbig
  6209                                  					; if (fbigfat)
  6210 00001F7F 751E                    		jnz	short dobig	; goto dobig; (16 bit fat)
  6211                                  
  6212                                  ; we don't need to change "small fat" logic since it is gauranteed
  6213                                  ; that double word total sector will not use 12 bit fat (unless
  6214                                  ; it's sectors/cluster >= 16 which will never be in this case.)
  6215                                  ; so in this case we assume dx = 0 !!
  6216                                  
  6217 00001F81 31DB                    		xor	bx, bx		; (12 bit fat)
  6218 00001F83 88EB                    		mov	bl, ch
  6219 00001F85 4B                      		dec	bx
  6220 00001F86 01C3                    		add	bx, ax		; dx=0
  6221 00001F88 D3EB                    		shr	bx, cl		; bx = 1+(bpb->maxsec+BDS.secperclus-1)/
  6222 00001F8A 43                      		inc	bx		; BDS.secperclus
  6223 00001F8B 80E3FE                  		and	bl, 0FEh	; bx &= ~1; (=number of clusters)
  6224 00001F8E 89DE                    		mov	si, bx
  6225 00001F90 D1EB                    		shr	bx, 1
  6226 00001F92 01F3                    		add	bx, si
  6227 00001F94 81C3FF01                		add	bx, 511		; bx +=	511 + bx/2
  6228 00001F98 D0EF                    		shr	bh, 1		; bh >>= 1; (=bx/512)
  6229 00001F9A 887D11                  		mov	[di+11h], bh	; [di+BDS.fatsecs]
  6230                                  					; save number of fat sectors
  6231 00001F9D EB39                    		jmp	short massage_bpb
  6232                                  ; ---------------------------------------------------------------------------
  6233                                  
  6234                                  ; for bigfat we do need to extend this logic to 32 bit sector calculation.
  6235                                  
  6236                                  dobig:					
  6237 00001F9F B104                    		mov	cl, 4		; 16 (2^4) directory entries per sector
  6238 00001FA1 52                      		push	dx		; save total sectors (high)
  6239 00001FA2 8B550C                  		mov	dx, [di+0Ch]	; [di+BDS.direntries]
  6240 00001FA5 D3EA                    		shr	dx, cl		; root dir sectors = BDS.direntries / 16;
  6241 00001FA7 29D0                    		sub	ax, dx
  6242 00001FA9 5A                      		pop	dx
  6243 00001FAA 83DA00                  		sbb	dx, 0		; dx:ax	= total	sectors	- root dir sectors
  6244 00001FAD 83E801                  		sub	ax, 1
  6245 00001FB0 83DA00                  		sbb	dx, 0		; dx:ax	= t - r	- d
  6246                                  					; total	secs - reserved	secs - root dir	secs
  6247 00001FB3 B302                    		mov	bl, 2
  6248 00001FB5 8A7D08                  		mov	bh, [di+8]	; [di+BDS.secperclus]
  6249                                  					; bx = 256 * BDS.secperclus + 2
  6250                                  
  6251                                  ; I don't understand why to add bx here!!!
  6252                                  
  6253                                  		; 29/12/2018 - Erdogan Tan (Retro DOS v4.0)
  6254                                  		; 27/09/2022
  6255                                  		; (Microsoft FAT32 File	System Specification,
  6256                                  		; December 2000, Page 21)
  6257                                  		; TmpVal1 = DskSize - (BPB_ResvdSecCnt+RootrDirSectors)
  6258                                  		; TmpVal2 = (256*BPB_SecPerClus)+BPB_NumFATs
  6259                                  		; FATsz	= (TmpVal1+(TmpVal2-1))/TmpVal2
  6260                                  		; (If FATType == FAT16,	BPB_FATSz16 = LOWORD(FATSz))
  6261                                  		
  6262 00001FB8 01D8                    		add	ax, bx		; ax = t-r-d+256*spc+2
  6263 00001FBA 83D200                  		adc	dx, 0
  6264 00001FBD 83E801                  		sub	ax, 1		; ax = t-r-d+256*spc+1
  6265 00001FC0 83DA00                  		sbb	dx, 0
  6266                                  
  6267                                  ; assuming dx in the table will never be bigger than bx.
  6268                                  
  6269 00001FC3 F7F3                    		div	bx		; BDS.fatsecs =
  6270                                  					; ceil((total-dir-res)/(256*BDS.secperclus+2))
  6271 00001FC5 894511                  		mov	[di+11h], ax	; [di+BDS.fatsecs]
  6272                                  					; number of fat	sectors
  6273                                  
  6274                                  ; now, set the default filesys_id, volume label, serial number
  6275                                  
  6276                                  		;;mov	bl, ds:fbigfat
  6277                                  		; 11/09/2023
  6278                                  		; 17/10/2022
  6279                                  		;mov	bl, [fbigfat]
  6280                                  		;mov	[di+1Fh], bl	; [di+BDS.fatsiz] ; fat	size flag
  6281                                  
  6282 00001FC8 1E                      		push	ds
  6283 00001FC9 1E                      		push	ds
  6284 00001FCA 07                      		pop	es
  6285 00001FCB 0E                      		push	cs
  6286 00001FCC 1F                      		pop	ds
  6287                                  		; 11/09/2023
  6288 00001FCD A0[CC16]                		mov	al, [fbigfat]
  6289 00001FD0 BD[D005]                		mov	bp, CLEARIDS_X	; clear_ids_x (uses AL value here)
  6290                                  		; 17/10/2022
  6291                                  		;mov	bp, CLEARIDS
  6292                                  		;;mov	bp, 5D9h	; clear_ids
  6293                                  					; at 2C7h:5D9h = 70h:2B49h
  6294 00001FD3 0E                      		push	cs
  6295 00001FD4 E880F7                  		call	call_bios_code
  6296 00001FD7 1F                      		pop	ds
  6297                                  
  6298                                  ; at this point, in bpb of bds table, BDS_BPB.BPB_BIGTOTALSECTORS which is
  6299                                  ; set according to the partition information. we are going to
  6300                                  ; see if (hidden sectors + total sectors) > a word. if it is true,
  6301                                  ; then no change. otherwise, BDS_BPB.BPB_BIGTOTALSECTORS will be moved
  6302                                  ; to BDS_BPB.BPB_TOTALSECTORS and BDS_BPB.BPB_BIGTOTALSECTORS will be set to 0.
  6303                                  ; we don't do this for the bpb information from the boot record. we
  6304                                  ; are not going to change the bpb information from the boot record.
  6305                                  
  6306                                  massage_bpb:
  6307                                  		; 11/09/2023
  6308                                  		;; 12/12/2022
  6309                                  		;mov	bl, [fbigfat]
  6310                                  		;mov	[di+1Fh], bl	; [di+BDS.fatsiz]
  6311                                  		;			; set size of fat on media
  6312                                  		
  6313 00001FD8 8B551D                  		mov	dx, [di+1Dh]	; [di+BDS.totalsecs32+2]
  6314 00001FDB 8B451B                  		mov	ax, [di+1Bh]	; [di+BDS.totalsecs32]
  6315 00001FDE 83FA00                  		cmp	dx, 0		; double word total sectors?
  6316                                  		;ja	short goodret	; don't have to change it.
  6317                                  		; 12/12/2022
  6318 00001FE1 771B                    		ja	short short goodret2
  6319                                  		;cmp	word [di+19h], 0 ; [di+BDS.hiddensecs+2]
  6320                                  		;ja	short goodret	; don't have to change it.
  6321                                  		; 12/12/2022
  6322 00001FE3 395519                  		cmp	[di+19h], dx ; 0
  6323 00001FE6 7716                    		ja	short goodret2
  6324 00001FE8 034517                  		add	ax, [di+17h]	; [di+BDS.hiddensecs]
  6325                                  		;jb	short goodret
  6326                                  		; 12/12/2022
  6327 00001FEB 7209                    		jc	short goodret
  6328 00001FED 8B451B                  		mov	ax, [di+1Bh]	; [di+BDS.totalsecs32]
  6329 00001FF0 89450E                  		mov	[di+0Eh], ax	; [di+BDS.totalsecs16]
  6330                                  		;mov	word [di+1Bh], 0 ; [di+BDS.totalsecs32]
  6331                                  		; 12/12/2022
  6332 00001FF3 89551B                  		mov	[di+1Bh], dx ; 0 
  6333                                  goodret:				
  6334                                  		;mov	bl, ds:fbigfat
  6335                                  		; 11/09/2023
  6336                                  		; 12/12/2022
  6337                                  		; 17/10/2022
  6338 00001FF6 8A1E[CC16]              		mov	bl, [fbigfat]
  6339 00001FFA 885D1F                  		mov	[di+1Fh], bl	; [di+BDS.fatsiz]
  6340                                  		;			; set size of fat on media
  6341 00001FFD F8                      		clc
  6342                                  ret_hard_err:
  6343                                  		; 12/12/2022
  6344                                  goodret2:					
  6345 00001FFE 07                      		pop	es
  6346 00001FFF 1F                      		pop	ds
  6347 00002000 5B                      		pop	bx
  6348 00002001 5F                      		pop	di
  6349 00002002 C3                      		retn
  6350                                  
  6351                                  ; =============== S U B	R O U T	I N E =======================================
  6352                                  
  6353                                  ; 15/10/2022
  6354                                  
  6355                                  ;fdisk of pc dos 3.3 and below, os2 1.0 has a bug. the maximum number of
  6356                                  ;sector that can be handled by pc dos 3.3 ibmbio should be 0ffffh.
  6357                                  ;instead, sometimes fdisk use 10000h to calculate the maximum number.
  6358                                  ;so, we are going to check that if BPB_TOTALSECTORS + hidden sector = 10000h
  6359                                  ;then subtract 1 from BPB_TOTALSECTORS.
  6360                                  
  6361                                  		; 17/10/2022
  6362                                  cover_fdisk_bug:	
  6363 00002003 50                      		push	ax
  6364 00002004 52                      		push	dx
  6365 00002005 56                      		push	si
  6366 00002006 2E803E[7401]29          		cmp	byte [cs:disksector+26h], 29h
  6367                                  					; [disksector+EXT_BOOT.SIG],
  6368                                  					; EXT_BOOT_SIGNATURE
  6369 0000200C 7431                    		jz	short cfb_retit	; if extended bpb, then	>= pc dos 4.00
  6370 0000200E 2E817F073130            		cmp	word [cs:bx+7], 3031h ; '10' ; os2 1.0 = ibm 10.0
  6371 00002014 7507                    		jnz	short cfb_chk_BPB_TOTALSECTORS
  6372 00002016 2E807F0A30              		cmp	byte [cs:bx+10], '0'
  6373 0000201B 7522                    		jnz	short cfb_retit
  6374                                  cfb_chk_BPB_TOTALSECTORS:
  6375                                  		; 17/10/2022		
  6376 0000201D BE[5901]                		mov	si, disksector+11 ; 14Eh+0Bh
  6377                                  		;mov	si, 159h	; disksector+EXT_BOOT.BPB
  6378 00002020 2E837C0800              		cmp	word [cs:si+8], 0 ; [cs:si+EBPB.TOTALSECTORS]
  6379                                  					; just to make sure.
  6380 00002025 7418                    		jz	short cfb_retit
  6381 00002027 2E8B4408                		mov	ax, [cs:si+8]	; [cs:si+EBPB.TOTALSECTORS]
  6382 0000202B 2E034411                		add	ax, [cs:si+11h]	; [cs:si+EBPB.HIDDENSECTORS]
  6383 0000202F 730E                    		jnb	short cfb_retit
  6384 00002031 750C                    		jnz	short cfb_retit	; if carry set and ax=0
  6385 00002033 2EFF4C08                		dec	word [cs:si+8]	; 0 -> 0FFFFh
  6386                                  					; then decrease	BPB_TOTALSECTORS by 1
  6387 00002037 836D1B01                		sub	word [di+1Bh], 1 ; [di+BDS.totalsecs32]
  6388 0000203B 835D1D00                		sbb	word [di+1Dh], 0 ; [di+BDS.totalsecs32+2]
  6389                                  cfb_retit:				
  6390 0000203F 5E                      		pop	si
  6391 00002040 5A                      		pop	dx
  6392 00002041 58                      		pop	ax
  6393 00002042 C3                      		retn
  6394                                  
  6395                                  ; ---------------------------------------------------------------------------
  6396                                  
  6397 00002043 0200                    word2		dw 2			
  6398 00002045 0300                    word3		dw 3			
  6399 00002047 0002                    word512		dw 512			
  6400                                  
  6401                                  ; =============== S U B	R O U T	I N E =======================================
  6402                                  
  6403                                  ; 15/10/2022
  6404                                  
  6405                                  ; setdrvparms sets up the recommended bpb in each bds in the system based on
  6406                                  ; the form factor. it is assumed that the bpbs for the various form factors
  6407                                  ; are present in the bpbtable. for hard files, the recommended bpb is the same
  6408                                  ; as the bpb on the drive.
  6409                                  ;
  6410                                  ; no attempt is made to preserve registers since we are going to jump to
  6411                                  ; sysinit straight after this routine.
  6412                                  
  6413                                  setdrvparms:
  6414 00002049 31DB                    		xor	bx, bx
  6415                                  		; 18/10/2022
  6416 0000204B C43E[1901]              		les	di, [start_bds] ; get first bds in list
  6417                                  _next_bds:				
  6418 0000204F 06                      		push	es
  6419 00002050 57                      		push	di
  6420 00002051 268A5D22                		mov	bl, [es:di+22h]	; [es:di+BDS.formfactor]
  6421 00002055 80FB05                  		cmp	bl, 5		; ffHardFile
  6422 00002058 753E                    		jnz	short nothardff
  6423 0000205A 31D2                    		xor	dx, dx
  6424 0000205C 268B450E                		mov	ax, [es:di+0Eh]	; [es:di+BDS.totalsecs16]
  6425 00002060 09C0                    		or	ax, ax
  6426 00002062 7508                    		jnz	short get_ccyl
  6427 00002064 268B551D                		mov	dx, [es:di+1Dh]	; [es:di+BDS.totalsecs32+2]
  6428 00002068 268B451B                		mov	ax, [es:di+1Bh]	; [es:di+BDS.totalsecs32]
  6429                                  
  6430                                  get_ccyl:				
  6431 0000206C 52                      		push	dx
  6432 0000206D 50                      		push	ax
  6433 0000206E 268B4515                		mov	ax, [es:di+15h]	; [es:di+BDS.heads]
  6434 00002072 26F76513                		mul	word [es:di+13h] ; [es:di+BDS.secpertrack]
  6435                                  					; assume sectors per cyl. < 64k.
  6436 00002076 89C1                    		mov	cx, ax		; cx has # sectors per cylinder
  6437 00002078 58                      		pop	ax
  6438 00002079 5A                      		pop	dx		; dx:ax	= total	sectors
  6439 0000207A 50                      		push	ax
  6440 0000207B 89D0                    		mov	ax, dx
  6441 0000207D 31D2                    		xor	dx, dx
  6442 0000207F F7F1                    		div	cx
  6443 00002081 2EA3[2905]              		mov	[cs:temp_h], ax	; ax be	0 here.
  6444 00002085 58                      		pop	ax
  6445 00002086 F7F1                    		div	cx		; div #sec by sec/cyl to get # cyl.
  6446 00002088 09D2                    		or	dx, dx
  6447 0000208A 7401                    		jz	short no_cyl_rnd ; came out even
  6448 0000208C 40                      		inc	ax		; round	up
  6449                                  
  6450                                  no_cyl_rnd:				
  6451 0000208D 26894525                		mov	[es:di+25h], ax	; [es:di+BDS.cylinders]
  6452 00002091 06                      		push	es
  6453 00002092 1F                      		pop	ds
  6454 00002093 8D7506                  		lea	si, [di+6]	; [di+BDS.bytespersec]
  6455                                  					; ds:si	-> bpb for hard	file
  6456 00002096 EB55                    		jmp	short set_recbpb
  6457                                  ; ---------------------------------------------------------------------------
  6458                                  
  6459                                  nothardff:				
  6460 00002098 0E                      		push	cs
  6461 00002099 1F                      		pop	ds
  6462                                  
  6463                                  ; if fake floppy drive variable is set then we don't have to handle this bds.
  6464                                  ; we can just go and deal with the next bds at label go_to_next_bds.
  6465                                  
  6466                                  		; 10/12/2022
  6467                                  		; ds = cs
  6468                                  		; 17/10/2022 (ds=cs)
  6469 0000209A 803E[D316]01            		cmp	byte [fakefloppydrv], 1
  6470                                  		;cmp	byte [cs:fakefloppydrv], 1
  6471 0000209F 7454                    		jz	short go_to_next_bds
  6472 000020A1 80FB07                  		cmp	bl, 7		; ffother
  6473                                  					; special case "other" type of medium
  6474 000020A4 753D                    		jnz	short not_process_other
  6475                                  process_other:
  6476 000020A6 31D2                    		xor	dx, dx
  6477 000020A8 8B4525                  		mov	ax, [di+25h]	; [di+BDS.cylinders]
  6478 000020AB F76536                  		mul	word [di+36h]	; [di+BDS.rheads]
  6479 000020AE F76534                  		mul	word [di+34h]	; [di+BDS.rsecpertrack]
  6480 000020B1 89452F                  		mov	[di+2Fh], ax	; [di+BDS.rtotalsecs16]
  6481                                  					; have the total number of sectors
  6482 000020B4 48                      		dec	ax
  6483 000020B5 B201                    		mov	dl, 1
  6484                                  _again:					
  6485 000020B7 3DF60F                  		cmp	ax, 0FF6h	; 4096-10
  6486 000020BA 7206                    		jb	short _@@
  6487 000020BC D1E8                    		shr	ax, 1
  6488 000020BE D0E2                    		shl	dl, 1
  6489 000020C0 EBF5                    		jmp	short _again
  6490                                  ; ---------------------------------------------------------------------------
  6491                                  
  6492                                  _@@:					
  6493 000020C2 80FA01                  		cmp	dl, 1		; is it	a small	disk ?
  6494 000020C5 7405                    		jz	short __@@	; yes, 224 root	entries	is enuf
  6495 000020C7 C7452DF000              		mov	word [di+2Dh], 240 ; [di+BDS.rdirentries]
  6496                                  __@@:					
  6497 000020CC 885529                  		mov	[di+29h], dl	; [di+BDS.rsecperclus]
  6498                                  
  6499                                  ; logic to get the sectors/fat area.
  6500                                  ; fat entry is assumed to be 1.5 bytes!!!
  6501                                  
  6502                                  		; 10/12/2022
  6503                                  		; ds = cs
  6504                                  		; 17/10/2022 (ds=cs)
  6505 000020CF F726[4520]              		mul	word [word3]
  6506 000020D3 F736[4320]              		div	word [word2]
  6507 000020D7 31D2                    		xor	dx, dx
  6508 000020D9 F736[4720]              		div	word [word512]
  6509                                  		;
  6510                                  		; 10/12/2022
  6511                                  		;mul	word [cs:word3]	; * 3 ; mul word [cs:word3]
  6512                                  		;div	word [cs:word2]	; / 2 ; div word [cs:word2]
  6513                                  		;xor	dx, dx
  6514                                  		;div	word [cs:word512] ; / 512 ; div word [cs:word512]
  6515                                  		;
  6516 000020DD 40                      		inc	ax		; + 1
  6517                                  no_round_up:
  6518 000020DE 894532                  		mov	[di+32h], ax	; [di+BDS.rfatsecs]
  6519 000020E1 EB12                    		jmp	short go_to_next_bds
  6520                                  ; ---------------------------------------------------------------------------
  6521                                  
  6522                                  not_process_other:			
  6523 000020E3 D1E3                    		shl	bx, 1		; bx is	word index into	table of bpbs
  6524                                  		;mov	si, bpbtable
  6525                                  		;mov	si, [bpbtable+bx] ; 15/10/2022
  6526                                  		; 09/12/2022
  6527                                  		;mov	si, BPBTABLE
  6528                                  		;mov	si, [bx+si]	; get address of bpb
  6529                                  		; 10/12/2022
  6530                                  		;mov	si, [BPBTABLE+bx]
  6531                                  		; 13/12/2022
  6532                                  		;mov	si, [SYSINITOFFSET+bpbtable+bx] ; wrong ! 14/08/2023
  6533                                  		; 14/08/2023
  6534                                  		SYSINIT_OFFSET equ (SYSINITSEG-DOSBIODATASEG<<4)
  6535                                  							; correct offset
  6536 000020E5 8BB7[0E74]              		mov	si, [bx+SYSINIT_OFFSET+bpbtable]
  6537                                  
  6538                                  		; 28/08/2023
  6539 000020E9 81C6003D                		add	si, SYSINIT_OFFSET
  6540                                  set_recbpb:				
  6541 000020ED 8D7D27                  		lea	di, [di+27h]	; [di+BDS.R_BPB]
  6542                                  					; es:di	-> recbpb
  6543 000020F0 B91900                  		mov	cx, 25		; bpbx.size
  6544 000020F3 F3A4                    		rep movsb		; move (size bpbx) bytes	
  6545                                  go_to_next_bds:				
  6546 000020F5 5F                      		pop	di
  6547 000020F6 07                      		pop	es		; restore pointer to bds
  6548 000020F7 26C43D                  		les	di, [es:di]	; [es:di+BDS.link]
  6549 000020FA 83FFFF                  		cmp	di, 0FFFFh	; -1
  6550 000020FD 740A                    		jz	short got_end_of_bds_chain
  6551 000020FF E94DFF                  		jmp	_next_bds
  6552                                  ; ---------------------------------------------------------------------------
  6553                                  
  6554                                  		; 18/12/2022
  6555                                  ;got_end_of_bds_chain:			
  6556                                  		;retn
  6557                                  
  6558                                  ; =============== S U B	R O U T	I N E =======================================
  6559                                  
  6560                                  ; 15/10/2022
  6561                                  ; 30/12/2018 - Retro DOS v4.0
  6562                                  
  6563                                  ; al = device number
  6564                                  
  6565                                  print_init:	
  6566 00002102 98                      		cbw
  6567 00002103 89C2                    		mov	dx, ax
  6568 00002105 B401                    		mov	ah, 1
  6569 00002107 CD17                    		int	17h		; PRINTER - INITIALIZE
  6570                                  					; DX = printer port (0-3)
  6571                                  					; Return: AH = status
  6572                                  got_end_of_bds_chain:	; 18/12/2022
  6573 00002109 C3                      		retn
  6574                                  
  6575                                  ; =============== S U B	R O U T	I N E =======================================
  6576                                  
  6577                                  ; al = device number
  6578                                  
  6579                                  aux_init:
  6580 0000210A 98                      		cbw
  6581 0000210B 89C2                    		mov	dx, ax
  6582                                  		;mov	al, 0A3h	; RSINIT ; 0A3h
  6583                                  					; 2400,n,1,8 (msequ.inc)
  6584                                  		;mov	ah, 0
  6585                                  		; 10/12/2022
  6586 0000210D B8A300                  		mov	ax, 00A3h
  6587 00002110 CD14                    		int	14h		; SERIAL I/O - INITIALIZE USART
  6588                                  					; 	AL = initializing parameters,
  6589                                  					;	DX = port number (0-3)
  6590                                  					; Return: AH = RS-232 status code bits,
  6591                                  					;	  AL = modem status bits
  6592 00002112 C3                      		retn
  6593                                  
  6594                                  ; =============== S U B	R O U T	I N E =======================================
  6595                                  
  6596                                  ; 15/10/2022 (Modified MSDOS 5.0 IO.SYS)
  6597                                  ; 30/12/2018 - Retro DOS v4.0
  6598                                  ; 03/06/2018 - Retro DOS v3.0
  6599                                  ; (19/03/2018 - Retro DOS v2.0)
  6600                                  
  6601                                  ; domini **********************************************************************
  6602                                  ;
  6603                                  ;mini disk initialization routine. called right after dohard
  6604                                  ;modified for >2 hardfile support
  6605                                  ;
  6606                                  ; **cs=ds=es=datagrp
  6607                                  ;
  6608                                  ; **domini will search for every extended partition in the system, and
  6609                                  ;   initialize it.
  6610                                  ;
  6611                                  ; **bdsm stands for bds table for mini disk and located right after the label
  6612                                  ;   end96tpi. end_of_bdsm will have the offset value of the ending
  6613                                  ;   address of bdsm table.
  6614                                  ;
  6615                                  ; **bdsm is the same as usual bds structure except that tim_lo, tim_hi entries
  6616                                  ;   are overlapped and used to identify mini disk and the number of hidden_trks.
  6617                                  ;   right now, they are called as ismini, hidden_trks respectively.
  6618                                  ;
  6619                                  ; **domini will use the same routine in sethard routine after label set2 to
  6620                                  ;   save coding.
  6621                                  ;
  6622                                  ; **drvmax determined in dohard routine will be used for the next
  6623                                  ;   available logical mini disk drive number.
  6624                                  ;
  6625                                  ; input: drvmax, dskdrvs
  6626                                  ;
  6627                                  ; output: minidisk installed. bdsm table established and installed to bds.
  6628                                  ;	  end_of_bdsm - ending offset address of bdsm.
  6629                                  ;
  6630                                  ; called modules:
  6631                                  ;		  getboot
  6632                                  ;		  find_mini_partition (new), xinstall_bds (new), M038
  6633                                  ;
  6634                                  ;		  setmini (new, it will use set2 routine)
  6635                                  ;
  6636                                  ; variables used: end_of_bdsm
  6637                                  ;		  rom_minidisk_num
  6638                                  ;		  mini_hdlim, mini_seclim
  6639                                  ;		  BDS_STRUC, start_bds
  6640                                  ;
  6641                                  ;******************************************************************************
  6642                                  
  6643                                  		; 19/10/2022
  6644                                  domini:	
  6645 00002113 8A36[4317]              		mov	dh, [hnum]	; get number of hardfiles
  6646                                  		; 10/12/2022
  6647 00002117 20F6                    		and	dh, dh
  6648                                  		;cmp	dh, 0
  6649 00002119 7431                    		jz	short dominiret	; no hard file?	then exit.
  6650 0000211B B280                    		mov	dl, 80h		; start	with hardfile 80h
  6651                                  domini_loop:				
  6652 0000211D 52                      		push	dx
  6653 0000211E 8816[4217]              		mov	[rom_minidisk_num], dl
  6654 00002122 B408                    		mov	ah, 8
  6655 00002124 CD13                    		int	13h		; DISK - DISK -	GET CURRENT DRIVE PARAMETERS (XT,AT,XT286,CONV,PS)
  6656                                  					; DL = drive number
  6657                                  					; Return: CF set on error, AH =	status code, BL	= drive	type
  6658                                  					; DL = number of consecutive drives
  6659                                  					; DH = maximum value for head number, ES:DI -> drive parameter
  6660 00002126 FEC6                    		inc	dh
  6661 00002128 31C0                    		xor	ax, ax
  6662 0000212A 88F0                    		mov	al, dh
  6663 0000212C A3[4817]                		mov	[mini_hdlim], ax ; # of heads
  6664 0000212F 80E13F                  		and	cl, 3Fh
  6665 00002132 88C8                    		mov	al, cl
  6666 00002134 A3[4A17]                		mov	[mini_seclim], ax ; # of sectors/track
  6667 00002137 06                      		push	es
  6668 00002138 8A16[4217]              		mov	dl, [rom_minidisk_num]
  6669 0000213C E837FB                  		call	getboot		; read master boot record into
  6670                                  					; initbootsegment:bootbias
  6671 0000213F 7203                    		jb	short domininext
  6672 00002141 E80900                  		call	find_mini_partition
  6673                                  domininext:				
  6674 00002144 07                      		pop	es
  6675 00002145 5A                      		pop	dx
  6676 00002146 FEC2                    		inc	dl		; next hard file
  6677 00002148 FECE                    		dec	dh
  6678 0000214A 75D1                    		jnz	short domini_loop
  6679                                  dominiret:				
  6680 0000214C C3                      		retn
  6681                                  
  6682                                  ; =============== S U B	R O U T	I N E =======================================
  6683                                  
  6684                                  ; 15/10/2022 (Modified MSDOS 5.0 IO.SYS)
  6685                                  ; 30/12/2018 - Retro DOS v4.0
  6686                                  
  6687                                  ;find_mini_partition tries to find every extended partition on a disk.
  6688                                  ;at entry:	di -> bdsm entry
  6689                                  ;		es:bx -> 07c0:bootbias - master boot record
  6690                                  ;		rom_minidisk_num - rom drive number
  6691                                  ;		drvmax - logical drive number
  6692                                  ;		mini_hdlim, mini_seclim
  6693                                  ;
  6694                                  ;called routine: setmini which uses set2 (in sethard routine)
  6695                                  ;variables & equates used from original bios - flags, fnon_removable, fbigfat
  6696                                  
  6697                                  
  6698                                  find_mini_partition:	
  6699 0000214D 81C3C201                		add	bx, 1C2h	; bx ->	file system id
  6700                                  fmpnext:				
  6701 00002151 26803F05                		cmp	byte [es:bx], 5 ; 5 = extended partition id.
  6702 00002155 740A                    		jz	short fmpgot
  6703 00002157 83C310                  		add	bx, 16
  6704 0000215A 81FB0204                		cmp	bx, 402h	; 202h+bootbias
  6705 0000215E 75F1                    		jnz	short fmpnext
  6706                                  		;jmp	short fmpnextfound ; extended partition	not found
  6707                                  		; 18/12/2022
  6708                                  fmpnextfound:
  6709 00002160 C3                      		retn
  6710                                  
  6711                                  ;		; 30/07/2019 - Retro DOS v3.2
  6712                                  ;		jb	short fmpnext
  6713                                  ;fmpret:
  6714                                  ;		retn	; 29/05/2019
  6715                                  
  6716                                  ; ---------------------------------------------------------------------------
  6717                                  
  6718                                  		; 19/10/2022
  6719                                  fmpgot:					; found my partition.				
  6720 00002161 E8A100                  		call	dmax_check	; check	for drvmax already 26
  6721 00002164 73FA                    		jnb	short fmpnextfound ; done if too many
  6722 00002166 8B3E[4617]              		mov	di, [end_of_bdss] ; get next free	bds
  6723 0000216A C745470100              		mov	word [di+47h], 1 ; [di+BDS.bdsm_ismini]
  6724                                  		; 10/12/2022
  6725 0000216F 804D2301                		or	byte [di+23h], 1
  6726                                  		;or	word [di+23h], 1 ; [di+BDS.flags]
  6727                                  					; fNon_Removable
  6728 00002173 C6452205                		mov	byte [di+22h], 5 ; [di+BDS.formfactor]
  6729                                  					; ffHardFile
  6730 00002177 C606[CC16]00            		mov	byte [fbigfat], 0 ; assume 12 bit fat.
  6731 0000217C A1[4817]                		mov	ax, [mini_hdlim]
  6732 0000217F 894515                  		mov	[di+15h], ax	; [di+BDS.heads]
  6733 00002182 A1[4A17]                		mov	ax, [mini_seclim]
  6734 00002185 894513                  		mov	[di+13h], ax	; [di+BDS.secpertrack]
  6735 00002188 A0[4217]                		mov	al, [rom_minidisk_num]
  6736 0000218B 884504                  		mov	[di+4],	al	; [di+BDS.drivenum]
  6737                                  					; set physical number
  6738 0000218E A0[7500]                		mov	al, [drvmax]
  6739 00002191 884505                  		mov	[di+5],	al	; [di+BDS.drivelet]
  6740                                  					; set logical number
  6741 00002194 26837F0A00              		cmp	word [es:bx+10], 0
  6742 00002199 7707                    		ja	short fmpgot_cont
  6743 0000219B 26837F0840              		cmp	word [es:bx+8], 64 ; with current bpb,
  6744                                  					; only lower word is meaningful.
  6745 000021A0 72BE                    		jb	short fmpnextfound
  6746                                  					; should be bigger than 64 sectors at least
  6747                                  fmpgot_cont:				
  6748 000021A2 83EB04                  		sub	bx, 4		; let bx point to the start of the entry
  6749 000021A5 268A7702                		mov	dh, [es:bx+2]	; cylinder
  6750 000021A9 80E6C0                  		and	dh, 0C0h	; get higher bits of cyl
  6751 000021AC D0C6                    		rol	dh, 1
  6752 000021AE D0C6                    		rol	dh, 1
  6753 000021B0 268A5703                		mov	dl, [es:bx+3]	; cyl byte
  6754 000021B4 895549                  		mov	[di+49h], dx	; [di+BDS.bdsm_hidden_trks]
  6755                                  					; set hidden trks
  6756 000021B7 268B4F02                		mov	cx, [es:bx+2]	; cylinder,cylinder/sector
  6757 000021BB 268A7701                		mov	dh, [es:bx+1]	; head
  6758 000021BF 8A16[4217]              		mov	dl, [rom_minidisk_num]
  6759 000021C3 BB0002                  		mov	bx, 200h	; bootbias
  6760 000021C6 B80102                  		mov	ax, 201h
  6761 000021C9 CD13                    		int	13h		; DISK - READ SECTORS INTO MEMORY
  6762                                  					; AL = number of sectors to read, CH = track, CL = sector
  6763                                  					; DH = head, DL	= drive, ES:BX -> buffer to fill
  6764                                  					; Return: CF set on error, AH =	status,	AL = number of sectors read
  6765 000021CB 7293                    		jb	short fmpnextfound
  6766 000021CD BBC203                  		mov	bx, 3C2h	; 1C2h+bootbias
  6767 000021D0 06                      		push	es
  6768 000021D1 E80900                  		call	setmini		; install a mini disk.
  6769                                  					; bx value saved.
  6770 000021D4 07                      		pop	es
  6771 000021D5 7203                    		jb	short fmpnextchain
  6772 000021D7 E84000                  		call	xinstall_bds	; -- install the bdsm into table
  6773                                  fmpnextchain:				
  6774 000021DA E974FF                  		jmp	fmpnext		; let's find out
  6775                                  					; if we	have any chained partition
  6776                                  ; ---------------------------------------------------------------------------
  6777                                  
  6778                                  		; 18/12/2022
  6779                                  ;fmpnextfound:				
  6780                                  		;retn
  6781                                  
  6782                                  ; =============== S U B	R O U T	I N E =======================================
  6783                                  
  6784                                  ; 15/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
  6785                                  ; 28/12/2018 - Retro DOS v4.0 (MSDOS 6.21)
  6786                                  
  6787                                  setmini:	; 'setmini' is called from 'find_mini_partition' procedure
  6788                                  	
  6789 000021DD 57                      		push	di
  6790 000021DE 53                      		push	bx
  6791 000021DF 1E                      		push	ds
  6792 000021E0 06                      		push	es
  6793                                  setmini_1:				
  6794 000021E1 26803F01                		cmp	byte [es:bx], 1 ; FAT12 partition
  6795 000021E5 741B                    		jz	short setmini_2
  6796 000021E7 26803F04                		cmp	byte [es:bx], 4 ; FAT16 partition
  6797 000021EB 7415                    		jz	short setmini_2
  6798 000021ED 26803F06                		cmp	byte [es:bx], 6 ; FAT16 BIG	partition
  6799 000021F1 740F                    		jz	short setmini_2
  6800 000021F3 83C310                  		add	bx, 16
  6801 000021F6 81FB0204                		cmp	bx, 402h	; 202h+bootbias
  6802 000021FA 75E5                    		jnz	short setmini_1
  6803 000021FC F9                      		stc
  6804 000021FD 07                      		pop	es
  6805 000021FE 1F                      		pop	ds
  6806 000021FF 5B                      		pop	bx
  6807 00002200 5F                      		pop	di
  6808 00002201 C3                      		retn
  6809                                  
  6810                                  ; ---------------------------------------------------------------------------
  6811                                  setmini_2:				
  6812 00002202 E91DFB                  		jmp	set2		; branch into middle of sethard
  6813                                  
  6814                                  ; =============== S U B	R O U T	I N E =======================================
  6815                                  
  6816                                  ; 15/10/2022
  6817                                  ; 28/12/2018 - Retro DOS v4.0
  6818                                  ;
  6819                                  ; dmax_check --- call this when we want to install a new drive.
  6820                                  ;		it checks for drvmax < 26 to see if there is
  6821                                  ;		a drive letter left.
  6822                                  ;
  6823                                  ;	drvmax < 26 : carry SET!
  6824                                  ;	drvmax >=26 : carry RESET!, error flag set for message later
  6825                                  ;			trash ax
  6826                                  
  6827                                  dmax_check:	
  6828 00002205 803E[7500]1A            		cmp	byte [drvmax], 26 ; checks for drvmax < 26
  6829 0000220A 720D                    		jb	short dmax_ok	; return with carry if okay
  6830 0000220C 06                      		push	es
  6831                                  		;mov	ax, 46Dh	; SYSINIT_SEG (SYSINIT segment)
  6832 0000220D B84004                  		mov	ax, SYSINITSEG	; 17/10/2022	
  6833 00002210 8EC0                    		mov	es, ax
  6834                                  		; 18/10/2022
  6835 00002212 26C606[FF03]01          		mov	byte [es:TOOMANYDRIVESFLAG], 1 ; 09/12/2022 
  6836                                  		;mov	byte ptr es:3FFh, 1 ; [es:toomanydrivesflag]
  6837                                  					; set message flag
  6838                                  					; [SYSINIT+toomanydrivesflag]
  6839 00002218 07                      		pop	es
  6840                                  
  6841                                  		;;push	es
  6842                                  		;;mov	ax,SYSINIT_SEG
  6843                                  		;;mov	es,ax
  6844                                  		;;mov	byte [es:toomanydrivesflag],1
  6845                                  					; set message flag
  6846                                  		;;pop	es
  6847                                  		;
  6848                                  		;mov	byte [SYSINIT+toomanydrivesflag],1
  6849                                  dmax_ok:				
  6850 00002219 C3                      		retn
  6851                                  
  6852                                  ; =============== S U B	R O U T	I N E =======================================
  6853                                  
  6854                                  ; 18/10/2022
  6855                                  ; 15/10/2022
  6856                                  ; 28/12/2018 - Retro DOS v4.0						
  6857                                  ;								 
  6858                                  ;	link next bds (at ds:di) into the chain. assume that the
  6859                                  ;	  chain is entirely within ds == datagrp. also update drvmax,
  6860                                  ;	  dskdrv_table, and end_of_bdss.	
  6861                                  
  6862                                  xinstall_bds:		
  6863 0000221A 56                      		push	si
  6864 0000221B 53                      		push	bx
  6865 0000221C 8B36[1901]              		mov	si, [start_bds]	; get first bds
  6866                                  xinstall_bds_1:				
  6867 00002220 833CFF                  		cmp	word [si], 0FFFFh ; is this the last one?
  6868 00002223 7404                    		jz	short xinstall_bds_2 ;	skip ahead if so
  6869                                  		;mov	si, [si+BDS.link]
  6870 00002225 8B34                    		mov	si, [si]	; chain	through	list
  6871 00002227 EBF7                    		jmp	short xinstall_bds_1
  6872                                  ; ---------------------------------------------------------------------------
  6873                                  
  6874                                  xinstall_bds_2:				
  6875                                  		;mov	[si+BDS.link], di
  6876 00002229 893C                    		mov	[si], di
  6877                                  		;mov	[si+BDS.link+2], ds
  6878 0000222B 8C5C02                  		mov	[si+2], ds
  6879                                  		;mov	word [di+BDS.link], -1
  6880 0000222E C705FFFF                		mov	word [di], 0FFFFh ; make sure it is a null ptr.
  6881                                  		;mov	[di+BDS.link+2], ds
  6882 00002232 8C5D02                  		mov	[di+2], ds ; might as well plug segment
  6883                                  		; 20/03/2019 - Retro DOS v4.0
  6884                                  		;lea	bx, [di+BDS.BPB]
  6885 00002235 8D5D06                  		lea	bx, [di+6]
  6886 00002238 8B36[4417]              		mov	si, [last_dskdrv_table]
  6887 0000223C 891C                    		mov	[si], bx
  6888 0000223E 8306[4417]02            		add	word [last_dskdrv_table], 2
  6889 00002243 FE06[7500]              		inc	byte [drvmax]
  6890 00002247 8306[4617]64            		add	word [end_of_bdss], 100 ; BDS.size = 100
  6891 0000224C 5B                      		pop	bx
  6892 0000224D 5E                      		pop	si
  6893 0000224E C3                      		retn
  6894                                  
  6895                                  ; =============== S U B	R O U T	I N E =======================================
  6896                                  
  6897                                  ; 17/10/2022
  6898                                  ; 15/10/2022
  6899                                  ; 28/12/2018 - Retro DOS v4.0
  6900                                  ; 03/06/2018 - Retro DOS v3.0
  6901                                  
  6902                                  cmos_clock_read:	
  6903 0000224F 50                      		push	ax
  6904 00002250 51                      		push	cx
  6905 00002251 52                      		push	dx
  6906 00002252 55                      		push	bp
  6907 00002253 31ED                    		xor	bp, bp
  6908                                  loop_clock:				
  6909 00002255 31C9                    		xor	cx, cx
  6910 00002257 31D2                    		xor	dx, dx
  6911 00002259 B402                    		mov	ah, 2
  6912 0000225B CD1A                    		int	1Ah		; CLOCK	- READ REAL TIME CLOCK (AT,XT286,CONV,PS)
  6913                                  					; Return: CH = hours in	BCD
  6914                                  					; CL = minutes in BCD
  6915                                  					; DH = seconds in BCD
  6916 0000225D 83F900                  		cmp	cx, 0
  6917 00002260 7512                    		jnz	short clock_present
  6918 00002262 83FA00                  		cmp	dx, 0
  6919 00002265 750D                    		jnz	short clock_present
  6920 00002267 83FD01                  		cmp	bp, 1		; read again after a slight delay, in case clock
  6921 0000226A 741C                    		jz	short no_readdate ; was	at zero	setting.
  6922 0000226C 45                      		inc	bp		; only perform delay once.
  6923 0000226D B90040                  		mov	cx, 4000h	; 16384
  6924                                  delay:					
  6925 00002270 E2FE                    		loop	delay
  6926 00002272 EBE1                    		jmp	short loop_clock
  6927                                  ; ---------------------------------------------------------------------------
  6928                                  
  6929                                  clock_present:				
  6930 00002274 2EC606[F304]01          		mov	byte [cs:havecmosclock], 1 ; set the flag for cmos clock
  6931 0000227A E81000                  		call	cmosck		; reset	cmos clock rate	that may be
  6932                                  					; possibly destroyed by	cp dos and
  6933                                  					; post routine did not restore that.
  6934 0000227D 56                      		push	si
  6935 0000227E E8A8F2                  		call	read_real_date	; read real-time clock for date
  6936 00002281 FA                      		cli
  6937                                  		;mov	ds:daycnt, si	; set system date
  6938 00002282 8936[F004]              		mov	[daycnt], si
  6939 00002286 FB                      		sti
  6940 00002287 5E                      		pop	si
  6941                                  
  6942                                  no_readdate:				
  6943 00002288 5D                      		pop	bp
  6944 00002289 5A                      		pop	dx
  6945 0000228A 59                      		pop	cx
  6946 0000228B 58                      		pop	ax
  6947 0000228C C3                      		retn
  6948                                  
  6949                                  ; ---------------------------------------------------------------------------
  6950                                  
  6951                                  ; the following code is written by jack gulley in engineering group.
  6952                                  ; cp dos (CP/DOS, OS/2) is changing cmos clock rate for its own purposes
  6953                                  ; and if the use cold boot the system to use pc dos while running cp dos,
  6954                                  ; the cmos clock rate are still slow which slow down disk operations
  6955                                  ; of pc dos which uses cmos clock. pc dos is put this code in msinit
  6956                                  ; to fix this problem at the request of cp dos.
  6957                                  ;
  6958                                  ; the program is modified to be run on msinit. equates are defined
  6959                                  ; in cmosequ.inc. this program will be called by cmos_clock_read procedure.
  6960                                  ;
  6961                                  ;  the following code cmosck is used to insure that the cmos has not
  6962                                  ;	had its rate controls left in an invalid state on older at's.
  6963                                  ;
  6964                                  ;	it checks for an at model byte "fc" with a submodel type of
  6965                                  ;	00, 01, 02, 03 or 06 and resets the periodic interrupt rate
  6966                                  ;	bits in case post has not done it. this initilization routine
  6967                                  ;	is only needed once when dos loads. it should be run as soon
  6968                                  ;	as possible to prevent slow diskette access.
  6969                                  ;
  6970                                  ;	this code exposes one to dos clearing cmos setup done by a
  6971                                  ;	resident program that hides and re-boots the system.
  6972                                  
  6973                                  cmosck:					; check and reset rtc rate bits	
  6974                                  
  6975                                  ;model byte and submodel byte were already determined in msinit.
  6976                                  
  6977                                  	; 16/06/2018 - Retro DOS v3.0
  6978                                  	; 19/03/2018 (Model: 0FCh, Sub Model: 01h, REF: AMIBIOS Prog. Guide)
  6979                                  			
  6980 0000228D 50                      		push	ax
  6981 0000228E 2E803E[3E06]FC          		cmp	byte [cs:model_byte], 0FCh
  6982 00002294 7525                    		jnz	short cmosck9	; Exit if not an AT model
  6983 00002296 2E803E[3F06]06          		cmp	byte [cs:secondary_model_byte], 6
  6984                                  					; Is it 06 for the industral AT ?
  6985 0000229C 7408                    		jz	short cmosck4	; Go reset CMOS	periodic rate if 06
  6986 0000229E 2E803E[3F06]04          		cmp	byte [cs:secondary_model_byte], 4
  6987                                  					; Is it 00, 01, 02, or 03 ?
  6988 000022A4 7315                    		jnb	short cmosck9	; EXIT if problem fixed by POST  
  6989                                  					; Also,Secondary_model_byte = 0 
  6990                                  					;   when AH=0C0h, int 15h failed.
  6991                                  					;	RESET THE CMOS PERIODIC RATE 
  6992                                  					;  Model=FC submodel=00,01,02,03 or 06 
  6993                                  cmosck4:				
  6994 000022A6 B08A                    		mov	al, 8Ah		; cmos_reg_a|nmi
  6995                                  					; NMI disabled on return
  6996 000022A8 B426                    		mov	ah, 26h		; 00100110b
  6997                                  					; Set divider &	rate selection
  6998 000022AA E83000                  		call	cmos_write
  6999 000022AD B08B                    		mov	al, 8Bh		; cmos_reg_b|nmi
  7000                                  					; NMI disabled on return
  7001 000022AF E80B00                  		call	cmos_read
  7002 000022B2 2407                    		and	al, 7		; 00000111b
  7003                                  					; clear	SET,PIE,AIE,UIE,SQWE
  7004 000022B4 88C4                    		mov	ah, al
  7005 000022B6 B00B                    		mov	al, 0Bh		; cmos_reg_b
  7006                                  					; NMI enabled on return
  7007 000022B8 E82200                  		call	cmos_write
  7008                                  cmosck9:				
  7009 000022BB 58                      		pop	ax
  7010 000022BC C3                      		retn
  7011                                  
  7012                                  ; =============== S U B	R O U T	I N E =======================================
  7013                                  
  7014                                  ;--- CMOS_READ -----------------------------------------------------------------
  7015                                  ;		read byte from cmos system clock configuration table	       :
  7016                                  ;									       :
  7017                                  ; input: (al)=	cmos table address to be read				       :
  7018                                  ;		bit    7 = 0 for nmi enabled and 1 for nmi disabled on exit    :
  7019                                  ;		bits 6-0 = address of table location to read		       :
  7020                                  ;									       :
  7021                                  ; output: (al)	value at location (al) moved into (al). if bit 7 of (al) was   :
  7022                                  ;		on then nmi left disabled.  during the cmos read both nmi and  :
  7023                                  ;		normal interrupts are disabled to protect cmos data integrity. :
  7024                                  ;		the cmos address register is pointed to a default value and    :
  7025                                  ;		the interrupt flag restored to the entry state on return.      :
  7026                                  ;		only the (al) register and the nmi state is changed.	       :
  7027                                  ;-------------------------------------------------------------------------------
  7028                                  
  7029                                  cmos_read:				; read location (al) into (al)	
  7030 000022BD 9C                      		pushf
  7031 000022BE FA                      		cli
  7032 000022BF 53                      		push	bx
  7033 000022C0 50                      		push	ax		; AL = cmos table address to be	read
  7034 000022C1 0C80                    		or	al, 80h
  7035 000022C3 E670                    		out	70h, al		; CMOS Memory/RTC Index	Register:
  7036                                  					; RTC Seconds
  7037 000022C5 90                      		nop			; (undocumented	delay needed)
  7038 000022C6 E471                    		in	al, 71h		; CMOS Memory/RTC Data Register
  7039 000022C8 89C3                    		mov	bx, ax
  7040 000022CA 58                      		pop	ax
  7041 000022CB 2480                    		and	al, 80h
  7042 000022CD 0C0F                    		or	al, 0Fh
  7043 000022CF E670                    		out	70h, al		; CMOS Memory/RTC Index	Register:
  7044                                  					; RTC Seconds
  7045 000022D1 90                      		nop
  7046 000022D2 E471                    		in	al, 71h		; CMOS Memory/RTC Data Register
  7047 000022D4 89D8                    		mov	ax, bx
  7048 000022D6 5B                      		pop	bx
  7049 000022D7 0E                      		push	cs		; *place code segment in stack and
  7050 000022D8 E80100                  		call	cmos_popf	; *handle popf for b- level 80286
  7051 000022DB C3                      		retn			; return with flags restored
  7052                                  
  7053                                  ; ---------------------------------------------------------------------------
  7054                                  
  7055                                  cmos_popf:				
  7056 000022DC CF                      		iret			; popf for level b- parts
  7057                                  					; return far and restore flags
  7058                                  
  7059                                  ; =============== S U B	R O U T	I N E =======================================
  7060                                  
  7061                                  ;--- cmos_write ----------------------------------------------------------------
  7062                                  ;		write byte to cmos system clock configuration table	       :
  7063                                  ;									       :
  7064                                  ; input: (al)=	cmos table address to be written to			       :
  7065                                  ;		bit    7 = 0 for nmi enabled and 1 for nmi disabled on exit    :
  7066                                  ;		bits 6-0 = address of table location to write		       :
  7067                                  ;	 (ah)=	new value to be placed in the addressed table location	       :
  7068                                  ;									       :
  7069                                  ; output:	value in (ah) placed in location (al) with nmi left disabled   :
  7070                                  ;		if bit 7 of (al) is on. during the cmos update both nmi and    :
  7071                                  ;		normal interrupts are disabled to protect cmos data integrity. :
  7072                                  ;		the cmos address register is pointed to a default value and    :
  7073                                  ;		the interrupt flag restored to the entry state on return.      :
  7074                                  ;		only the cmos location and the nmi state is changed.	       :
  7075                                  ;-------------------------------------------------------------------------------
  7076                                  
  7077                                  cmos_write:				; write (ah) to location (al)	
  7078 000022DD 9C                      		pushf			; write (ah) to location (al)
  7079 000022DE 50                      		push	ax		; save work register values
  7080 000022DF FA                      		cli
  7081 000022E0 50                      		push	ax		; save user nmi	state
  7082 000022E1 0C80                    		or	al, 80h		; disable nmi for us
  7083 000022E3 E670                    		out	70h, al		; CMOS Memory/RTC Index	Register:
  7084                                  					; RTC Seconds
  7085 000022E5 90                      		nop
  7086 000022E6 88E0                    		mov	al, ah
  7087 000022E8 E671                    		out	71h, al		; CMOS Memory/RTC Data Register
  7088 000022EA 58                      		pop	ax		; get user nmi
  7089 000022EB 2480                    		and	al, 80h
  7090 000022ED 0C0F                    		or	al, 0Fh
  7091 000022EF E670                    		out	70h, al		; CMOS Memory/RTC Index	Register:
  7092                                  					; RTC Seconds
  7093 000022F1 90                      		nop
  7094 000022F2 E471                    		in	al, 71h		; CMOS Memory/RTC Data Register
  7095 000022F4 58                      		pop	ax		; restore work registers
  7096 000022F5 0E                      		push	cs		; *place code segment in stack and
  7097 000022F6 E8E3FF                  		call	cmos_popf	; *handle popf for b- level 80286
  7098 000022F9 C3                      		retn
  7099                                  
  7100                                  ; 21/12/2022
  7101                                  ; ---------------------------------------------------------------------------
  7102                                  ; ---------------------------------------------------------------------------
  7103                                  %if 0
  7104                                  
  7105                                  ; ---------------------------------------------------------------------------
  7106                                  ; MSINIT.ASM (MSDOS 6.0, 1991)
  7107                                  ; ---------------------------------------------------------------------------
  7108                                  ; The following routines provide support for reading in the file MSDOS.SYS.
  7109                                  ; ---------------------------------------------------------------------------
  7110                                  
  7111                                  ; 15/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
  7112                                  ;
  7113                                  ; (For Retro DOS, 'IO.SYS' and 'MSDOS.SYS' are already loaded together
  7114                                  ;  at once -as single kernel file- by the Retro DOS boot sector code.
  7115                                  ;  So, following disk reads -MSDOS.SYS loading- is not needed!
  7116                                  ;  Only needing is to move MSDOS Kernel to it's final memory location.) 
  7117                                  
  7118                                  ; =============== S U B	R O U T	I N E =======================================
  7119                                  
  7120                                  ; GetClus, read in a cluster at a specified address
  7121                                  ;
  7122                                  ;  bx = cluster to read
  7123                                  ;  cx = sectors per cluster
  7124                                  ;  es:di = load location
  7125                                  
  7126                                  ; 17/10/2022
  7127                                  ;DISKRD equ diskrd - DOSBIOSEG_2C7h	; (8E5h for MSDOS 5.0 IO.SYS)
  7128                                  ; 09/12/2022
  7129                                  DISKRD equ diskrd
  7130                                  
  7131                                  		; 17/10/2022
  7132                                  getclus:				
  7133                                  		push	cx
  7134                                  		push	di
  7135                                  		mov	[cs:doscnt], cx
  7136                                  		mov	ax, bx
  7137                                  		dec	ax
  7138                                  		dec	ax
  7139                                  		mul	cx		; convert to logical sector
  7140                                  					; dx:ax	= matching logical sector number
  7141                                  					;	  starting from the data sector
  7142                                  		add	ax, [cs:bios_l]
  7143                                  		adc	dx, [cs:bios_h]	; dx:ax	= first	logical	sector to read
  7144                                  unpack:					
  7145                                  		push	ds
  7146                                  		push	ax
  7147                                  		push	bx
  7148                                  		mov	si, [cs:fatloc]
  7149                                  		mov	ds, si
  7150                                  		mov	si, bx		; next cluster
  7151                                  		test	byte [cs:fbigfat], 40h	; fbig
  7152                                  					; 16 bit fat?
  7153                                  		jnz	short unpack16	; yes
  7154                                  		shr	si, 1		; 12 bit fat. si=si/2
  7155                                  					; si = clus + clus/2
  7156                                  		add	si, bx		;
  7157                                  					; (si =	byte offset of the cluster in the FAT)
  7158                                  		push	dx
  7159                                  		xor	dx, dx
  7160                                  		call	get_fat_sector
  7161                                  		pop	dx
  7162                                  		mov	ax, [bx]	; save it into ax
  7163                                  		jnz	short even_odd	; if not a splitted fat, check even-odd.
  7164                                  		; 25/06/2023	
  7165                                  		;mov	al, [bx]	; splitted fat
  7166                                  		mov	[cs:temp_cluster], al
  7167                                  		inc	si		; (next	byte)
  7168                                  		push	dx
  7169                                  		xor	dx, dx
  7170                                  		call	get_fat_sector
  7171                                  		pop	dx
  7172                                  		;mov	al, ds:0
  7173                                  		mov	al, [0] ; 19/10/2022
  7174                                  		mov	[cs:temp_cluster+1], al
  7175                                  		mov	ax, [cs:temp_cluster]
  7176                                  even_odd:				
  7177                                  		pop	bx		; restore old fat entry	value
  7178                                  		push	bx		; save it right	away.
  7179                                  		shr	bx, 1		; was it even or odd?
  7180                                  		jnb	short havclus	; it was even.
  7181                                  		shr	ax, 1		; odd. massage fat value and keep
  7182                                  					; the highest 12 bits.
  7183                                  		shr	ax, 1
  7184                                  		shr	ax, 1
  7185                                  		shr	ax, 1
  7186                                  havclus:				
  7187                                  		mov	bx, ax		; now bx = new fat entry.
  7188                                  		and	bx, 0FFFh	; keep low 12 bits.
  7189                                  		jmp	short unpackx
  7190                                  ; ---------------------------------------------------------------------------
  7191                                  
  7192                                  unpack16:				
  7193                                  		push	dx
  7194                                  		xor	dx, dx
  7195                                  		shl	si, 1		; extend to 32 bit offset
  7196                                  		adc	dx, 0
  7197                                  		call	get_fat_sector
  7198                                  		pop	dx
  7199                                  		mov	bx, [bx]	;
  7200                                  					; bx = new fat entry.
  7201                                  unpackx:				
  7202                                  		pop	si		; restore old bx value into si
  7203                                  		pop	ax		; restore logical sector (low)
  7204                                  		pop	ds
  7205                                  		sub	si, bx
  7206                                  		cmp	si, -1		; one apart?
  7207                                  		jnz	short getcl2
  7208                                  		add	[cs:doscnt], cx
  7209                                  		jmp	short unpack
  7210                                  ; ---------------------------------------------------------------------------
  7211                                  
  7212                                  getcl2:					
  7213                                  		push	bx
  7214                                  		push	dx		; sector to read (high)
  7215                                  		push	ax		; sector to read (low)
  7216                                  		mov	ax, [cs:drvfat]	; get drive and	fat spec
  7217                                  		mov	cx, [cs:doscnt]
  7218                                  		pop	dx		; sector to read for diskrd (low)
  7219                                  		pop	word [cs:start_sec_h]
  7220                                  					; sector to read for diskrd (high)
  7221                                  		push	ds
  7222                                  		push	cs
  7223                                  		pop	ds
  7224                                  		push	cs		; simulate far call
  7225                                  		; 17/10/2022
  7226                                  		mov	bp, DISKRD	; 8E5h
  7227                                  		;mov	bp, 8E5h	; offset diskrd
  7228                                  					; 2C7h:8E5h = 70h:2E55h
  7229                                  		call	call_bios_code	; read the clusters
  7230                                  		pop	ds
  7231                                  		pop	bx
  7232                                  		pop	di
  7233                                  		mov	ax, [cs:doscnt]	; get number of	sectors	read
  7234                                  		xchg	ah, al		; multiply by 256
  7235                                  		shl	ax, 1		; times	2 equal	512
  7236                                  		add	di, ax		; update load location
  7237                                  		pop	cx		; restore sectors/cluster
  7238                                  		retn
  7239                                  
  7240                                  ; =============== S U B	R O U T	I N E =======================================
  7241                                  
  7242                                  
  7243                                  ;function: find and read the corresponding fat sector into ds:0
  7244                                  ;
  7245                                  ;in). dx:si - offset value (starting from fat entry 0) of fat entry to find. M054
  7246                                  ;     ds - fatloc segment
  7247                                  ;     cs:drvfat - logical drive number, fat id
  7248                                  ;     cs:md_sectorsize
  7249                                  ;     cs:last_fat_secnum - last fat sector number read in.
  7250                                  ;
  7251                                  ;out). corresponding fat sector read in.
  7252                                  ;      bx = offset value from fatlog segment.
  7253                                  ;      other registera saved.
  7254                                  ;      zero flag set if the fat entry is splitted, i.e., when 12 bit fat entry
  7255                                  ;      starts at the last byte of the fat sector. in this case, the caller
  7256                                  ;      should save this byte, and read the next fat sector to get the rest
  7257                                  ;      of the fat entry value. (this will only happen with the 12 bit fat.)
  7258                                  
  7259                                  		; 17/10/2022
  7260                                  get_fat_sector:	
  7261                                  		push	ax
  7262                                  		push	cx
  7263                                  		push	di
  7264                                  		push	si
  7265                                  		push	es
  7266                                  		push	ds
  7267                                  		mov	ax, si
  7268                                  		mov	cx, [cs:md_sectorsize] ; 512
  7269                                  		div	cx		; ax = sector number, dx = offset
  7270                                  		nop
  7271                                  
  7272                                  		; Get rid of the assumption that
  7273                                  		; there	is only	one reserved sector
  7274                                  
  7275                                  		push	es
  7276                                  		push	ds
  7277                                  		push	di
  7278                                  		push	ax
  7279                                  		push	cs
  7280                                  		pop	ds
  7281                                  
  7282                                  		mov	ax, [cs:drvfat]	; get drive # and FAT id
  7283                                  		mov	bp, SETDRIVE
  7284                                  		;mov	bp, 4D7h	; setdrive
  7285                                  					; at 2C7h:4D7h = 70h:2A47h
  7286                                  		push	cs		; simulate far call
  7287                                  		call	call_bios_code	; get bds for drive
  7288                                  		pop	ax		; (sector number -without reserved and hidden sectors-)
  7289                                  		add	ax, [es:di+9]	; [es:di+BDS.resectors]
  7290                                  					; add #reserved_sectors
  7291                                  		pop	di
  7292                                  		pop	ds
  7293                                  		pop	es
  7294                                  		cmp	ax, [cs:last_fat_sec_num]
  7295                                  		jz	short gfs_split_chk ; don't need to read it again.
  7296                                  		mov	[cs:last_fat_sec_num], ax 
  7297                                  					; sector number
  7298                                  					; (in the partition, without hidden sectors)
  7299                                  		push	dx
  7300                                  		mov	word [cs:start_sec_h], 0 
  7301                                  					; prepare to read the fat sector
  7302                                  					; start_sec_h is always	0 for fat sector.
  7303                                  		mov	dx, ax
  7304                                  		mov	cx, 1		; 1 sector read
  7305                                  		mov	ax, [cs:drvfat]
  7306                                  		push	ds
  7307                                  		pop	es
  7308                                  		xor	di, di		; es:di	-> fatloc segment:0
  7309                                  		push	ds
  7310                                  		push	cs
  7311                                  		pop	ds
  7312                                  		push	cs		; simulate far call
  7313                                  		mov	bp, DISKRD	; 8E5h
  7314                                  		;mov	bp, 8E5h	; offset diskrd
  7315                                  					; 2C7h:8E5h = 70h:2E55h
  7316                                  		call	call_bios_code
  7317                                  		pop	ds
  7318                                  		pop	dx
  7319                                  		mov	cx, [cs:md_sectorsize] ; 512
  7320                                  
  7321                                  gfs_split_chk:				
  7322                                  		dec	cx		; 511
  7323                                  		cmp	dx, cx		; if offset points to the
  7324                                  					; last byte of this sector,
  7325                                  					; then splitted	entry.
  7326                                  		mov	bx, dx		; set bx to dx
  7327                                  		pop	ds
  7328                                  		pop	es
  7329                                  		pop	si
  7330                                  		pop	di
  7331                                  		pop	cx
  7332                                  		pop	ax
  7333                                  		retn
  7334                                  
  7335                                  ; 15/10/2022
  7336                                  ;Bios_Data_Init	ends
  7337                                  
  7338                                  %endif
  7339                                  ; ---------------------------------------------------------------------------
  7340                                  ; ---------------------------------------------------------------------------
  7341                                  
  7342                                  		; 09/12/2022
  7343                                  		;db 0
  7344                                  
  7345                                  numbertodiv	equ ($-BData_start)
  7346                                  numbertomod	equ (numbertodiv % 16)
  7347                                  
  7348                                  %if (numbertomod>0) & (numbertomod<16) ; 17/09/2023
  7349 000022FA 00<rep 6h>              		times (16-numbertomod) db 0
  7350                                  %endif
  7351                                  
  7352                                  ;align 16
  7353                                  
  7354                                  ; 09/12/2022
  7355                                  IOSYSCODESEGOFF equ $ - BData_start
  7356                                  ; 29/09/2023
  7357                                  ;IOSYSCODESEGOFF equ $-$$
  7358                                  IOSYSCODESEG	equ (IOSYSCODESEGOFF>>4)+(700h>>4)
  7359                                  
  7360                                  ; 28/09/2023
  7361                                  S1SIZE equ $-$$
  7362                                  
  7363                                  ;--- End of DOSBIOS data segment --------------------------------------------
  7364                                  ; ---------------------------------------------------------------------------
  7365                                  		;db 4 dup(0)
  7366                                  ; 09/12/2022		
  7367                                  ;		times 4 db 0	; 19/10/2022
  7368                                  ; ---------------------------------------------------------------------------
  7369                                  
  7370                                  ;============================================================================
  7371                                  ; DOS BIOS (IO.SYS) CODE SEGMENT 
  7372                                  ;============================================================================
  7373                                  ; 09/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
  7374                                  
  7375                                  section .BIOSCODE vstart=0  
  7376                                  
  7377                                  BCode_start:	 ; 09/12/2022
  7378                                   
  7379                                  ; 02/10/2022
  7380                                  
  7381                                  ;--- DOSBIOS code segment ---------------------------------------------------
  7382                                  ;----------------------------------------------------------------------------
  7383                                  ; MSBIO1.ASM (MSDOS 6.0, 1991)
  7384                                  ;----------------------------------------------------------------------------
  7385                                  
  7386                                  DOSBIOSEG_2C7h:	;db 30h dup(0)		; SEGMENT 2C7h (2C70h-700h=2570h)
  7387 00000000 00<rep 30h>             		times 48 db 0		; 19/10/2022	
  7388 00000030 7000                    BiosDataWord:	dw 70h
  7389                                  
  7390                                  ; 15/10/2022
  7391                                  ;BIOSDATAWORD	equ BiosDataWord - DOSBIOSEG_2C7h
  7392                                  ; 09/12/2022
  7393                                  BIOSDATAWORD	equ BiosDataWord
  7394                                  
  7395                                  ; ---------------------------------------------------------------------------
  7396                                  
  7397                                  ; 15/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS) 
  7398                                  
  7399                                  ;************************************************************************
  7400                                  ;*									*
  7401                                  ;*	seg_reinit is called with ax = our new code segment value,	*
  7402                                  ;*	  trashes di, cx, es						*
  7403                                  ;*									*
  7404                                  ;*	cas -- should be made disposable!				*
  7405                                  ;*									*
  7406                                  ;************************************************************************
  7407                                  
  7408                                  _seg_reinit:
  7409 00000032 2E8E06[3000]            		mov	es, [cs:BIOSDATAWORD]
  7410                                  					; at 2C7h:30h or 70h:25A0h
  7411                                  		;mov	di, (offset cdev+2)
  7412 00000037 BF[E006]                		mov	di, cdev+2	; 19/10/2022
  7413 0000003A B90400                  		mov	cx, 4		; (end_BC_entries - cdev)/4
  7414                                  
  7415                                  _seg_reinit_1:				
  7416 0000003D AB                      		stosw			; modify Bios_Code entry points
  7417 0000003E 47                      		inc	di
  7418 0000003F 47                      		inc	di
  7419 00000040 E2FB                    		loop	_seg_reinit_1
  7420 00000042 CB                      		retf
  7421                                  
  7422                                  ; ---------------------------------------------------------------------------
  7423                                  
  7424                                  ; 15/10/2022
  7425                                  
  7426                                  ;************************************************************************
  7427                                  ;*									*
  7428                                  ;*	chardev_entry - main device driver dispatch routine		*
  7429                                  ;*	   called with a dummy parameter block on the stack		*
  7430                                  ;*	   dw dispatch_table, dw prn/aux numbers (optional)		*
  7431                                  ;*									*
  7432                                  ;*	will eventually take care of doing the transitions in		*
  7433                                  ;*	   out of Bios_Code						*
  7434                                  ;*									*
  7435                                  ;************************************************************************
  7436                                  
  7437                                  chardev_entry:				; 0070h:25B3h =	02C7h:0043h
  7438 00000043 56                      		push	si
  7439 00000044 50                      		push	ax
  7440 00000045 51                      		push	cx
  7441 00000046 52                      		push	dx
  7442 00000047 57                      		push	di
  7443 00000048 55                      		push	bp
  7444 00000049 1E                      		push	ds
  7445 0000004A 06                      		push	es
  7446 0000004B 53                      		push	bx
  7447 0000004C 89E5                    		mov	bp, sp
  7448 0000004E 8B7612                  		mov	si, [bp+18]	; get return address (dispatch table)
  7449                                  		;;mov	ds, word [cs:0030h]
  7450                                  		;mov	ds, word ptr cs:BIOSDATAWORD ; [cs:0030h]
  7451 00000051 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD] ; 17/10/2022
  7452 00000056 8B4402                  		mov	ax, [si+2]	; get the device number	if present
  7453 00000059 A2[2100]                		mov	[auxnum], al
  7454 0000005C 8826[E704]              		mov	[printdev], ah
  7455 00000060 8B34                    		mov	si, [si]	; point	to the device dispatch table
  7456 00000062 C41E[1200]              		les	bx, [ptrsav]	; get pointer to i/o packet
  7457 00000066 268A4701                		mov	al, [es:bx+1]	; [es:bx+unit]	; al = unit code
  7458 0000006A 268A670D                		mov	ah, [es:bx+13]	; [es:bx+media]	; ah = media descrip
  7459 0000006E 268B4F12                		mov	cx, [es:bx+18]	; [es:bx+count]	; cx = count
  7460 00000072 268B5714                		mov	dx, [es:bx+20]	; [es:bx+start]	; dx = start sector
  7461                                  		; 17/10/2022
  7462 00000076 81FE[9604]              		cmp	si, DSKTBL
  7463                                  		;cmp	si, 4A2h	; dsktbl
  7464                                  					; at 2C7h:4A2h = 70h:2A12h
  7465 0000007A 7517                    		jnz	short no_sector32_mapping
  7466                                  
  7467                                  ; Special case for 32-bit start sector number:
  7468                                  ;   if (si==dsktbl) /* if this is a disk device call */
  7469                                  ;      set high 16 bits of secnum to 0
  7470                                  ;      if (secnum == 0xffff) fetch 32 bit sector number
  7471                                  ;
  7472                                  ; pass high word of sector number in start_sec_h, low word in dx
  7473                                  ;
  7474                                  ; note: start_l and start_h are the offsets within the io_request packet
  7475                                  ;	  which contain the low and hi words of the 32 bit start sector if
  7476                                  ;	  it has been used.
  7477                                  ;
  7478                                  ; note: remember not to destroy the registers which have been set up before
  7479                                  
  7480                                  		;mov	ds:start_sec_h,	0 ; initialize to 0
  7481 0000007C C706[2B05]0000          		mov	word [start_sec_h], 0
  7482 00000082 83FAFF                  		cmp	dx, 0FFFFh
  7483 00000085 750C                    		jnz	short no_sector32_mapping
  7484 00000087 268B571C                		mov	dx, [es:bx+28]	; [es:bx+start_h]
  7485                                  					; 32 bits dsk req
  7486                                  		;mov	ds:start_sec_h,	dx ; start_sec_h = packet.start_h
  7487 0000008B 8916[2B05]              		mov	[start_sec_h], dx
  7488 0000008F 268B571A                		mov	dx, [es:bx+26]	; [es:bx+start_l]
  7489                                  					; dx = packet.start_l
  7490                                  no_sector32_mapping:			
  7491 00000093 97                      		xchg	ax, di
  7492 00000094 268A4702                		mov	al, [es:bx+2]	; [es:bx+cmd]
  7493 00000098 2E3A04                  		cmp	al, cs:[si]
  7494 0000009B 732C                    		jnb	short command_error
  7495 0000009D 98                      		cbw			; note that al <= 15 means ok
  7496 0000009E D1E0                    		shl	ax, 1
  7497 000000A0 01C6                    		add	si, ax
  7498 000000A2 97                      		xchg	ax, di
  7499 000000A3 26C47F0E                		les	di, [es:bx+14]	; [es:bx+trans]
  7500 000000A7 FC                      		cld
  7501                                  		; 17/10/2022
  7502 000000A8 2EFF5401                		call	near [cs:si+1]
  7503                                  		;call	word ptr cs:si+1
  7504 000000AC 7202                    		jb	short already_got_ah_status
  7505 000000AE B401                    		mov	ah, 1
  7506                                  already_got_ah_status:
  7507                                  		;;mov	ds, [cs:0030h]	; 15/10/2022			
  7508                                  		;mov	ds, word ptr cs:BIOSDATAWORD ; [cs:0030h]
  7509                                  					; cas note: shouldn't be needed!
  7510 000000B0 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD] ; 17/10/2022
  7511                                  		;lds	bx, ds:ptrsav
  7512 000000B5 C51E[1200]              		lds	bx, [ptrsav]
  7513 000000B9 894703                  		mov	[bx+3],	ax	; [bx+status]
  7514                                  					; mark operation complete
  7515 000000BC 5B                      		pop	bx
  7516 000000BD 07                      		pop	es
  7517 000000BE 1F                      		pop	ds
  7518 000000BF 5D                      		pop	bp
  7519 000000C0 5F                      		pop	di
  7520 000000C1 5A                      		pop	dx
  7521 000000C2 59                      		pop	cx
  7522 000000C3 58                      		pop	ax
  7523 000000C4 5E                      		pop	si
  7524 000000C5 83C402                  		add	sp, 2		; get rid of fake return address
  7525                                  	
  7526                                  		; fall through into bc_retf
  7527                                  ; ---------------------------------------------------------------------------	
  7528                                  bc_retf:
  7529 000000C8 CB                      		retf
  7530                                  ; ---------------------------------------------------------------------------
  7531                                  
  7532                                  command_error:				
  7533 000000C9 E80900                  		call	bc_cmderr
  7534 000000CC EBE2                    		jmp	short already_got_ah_status
  7535                                  ; 15/10/2022
  7536                                  ; 01/05/2019
  7537                                  
  7538                                  ;----------------------------------------------------------------------------
  7539                                  ; The following piece of hack is for supporting CP/M compatibility
  7540                                  ; Basically at offset 5 we have a far call into 0:c0. But this does not call
  7541                                  ; 0:c0 directly instead it call f01d:fef0, because it needs to support 'lhld 6'
  7542                                  ; The following hack has to reside at ffff:d0 (= f01d:fef0) if BIOS is loaded
  7543                                  ; high.
  7544                                  ;----------------------------------------------------------------------------
  7545                                  
  7546                                  		;db 7 dup(0)
  7547                                  
  7548                                  		; 15/10/2022
  7549                                  
  7550 000000CE 0000                    		dw 0		; pad to bring offset to 0D0h
  7551                                  
  7552 000000D0 00<rep 5h>              off_d0: 	times 5 db 0	; 5 bytes from 0:c0 will be copied onto here
  7553                                  				;  which is the CP/M call 5 entry point
  7554                                  		
  7555                                  
  7556                                  ; ---------------------------------------------------------------------------
  7557                                  
  7558                                  ;	exit - all routines return through this path
  7559                                  
  7560                                  bc_cmderr:				
  7561 000000D5 B003                    		mov	al, 3		; 2C7h:D5h = 70h:2645h
  7562                                  					; unknown command error
  7563                                  
  7564                                  ; =============== S U B	R O U T	I N E =======================================
  7565                                  
  7566                                  ;	now zero the count field by subtracting its current value,
  7567                                  ;	  which is still in cx, from itself.
  7568                                  
  7569                                  ;	subtract the number of i/o's NOT YET COMPLETED from total
  7570                                  ;	  in order to return the number actually complete
  7571                                  
  7572                                  bc_err_cnt:	
  7573                                  		;les	bx, ds:ptrsav
  7574                                  		; 19/10/2022
  7575 000000D7 C41E[1200]              		les	bx, [ptrsav]
  7576 000000DB 26294F12                		sub	[es:bx+18], cx	; [es:bx+count]
  7577                                  					; # of successful i/o's
  7578 000000DF B481                    		mov	ah, 81h		; mark error return
  7579 000000E1 F9                      		stc			; indicate abnormal end
  7580 000000E2 C3                      		retn
  7581                                  
  7582                                  ; 15/10/2022
  7583                                  
  7584                                  ;Bios_Code ends
  7585                                  
  7586                                  ;----------------------------------------------------------------------------
  7587                                  ; MSCHAR.ASM - MSDOS 6.0 - 1991
  7588                                  ;----------------------------------------------------------------------------
  7589                                  ; 15/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
  7590                                  ; 10/01/2019 - Retro DOS v4.0
  7591                                  
  7592                                  ; 30/04/2019
  7593                                  
  7594                                  ;title	mschar - character and clock devices
  7595                                  
  7596                                  ;MODE_CTRLBRK	equ	0FFh
  7597                                  
  7598                                  ; BIOSCODE:00E4h (MSDOS 6.21, IO.SYS)
  7599                                  
  7600                                  ;************************************************************************
  7601                                  ;*									*
  7602                                  ;*	device driver dispatch tables					*
  7603                                  ;*									*
  7604                                  ;*	each table starts with a byte which lists the number of		*
  7605                                  ;*	legal functions, followed by that number of words. Each		*
  7606                                  ;*	word represents an offset of a routine in Bios_Code which	*
  7607                                  ;*	handles the function. The functions are terminated with		*
  7608                                  ;*	a near return. If carry is reset, a 'done' code is returned	*
  7609                                  ;*	to the caller. If carry is set, the ah/al registers are		*
  7610                                  ;*	returned as abnormal completion status. Notice that ds		*
  7611                                  ;*	is assumed to point to the Bios_Data segment throughout.	*
  7612                                  ;*									*
  7613                                  ;************************************************************************
  7614                                  
  7615                                  		; 13/12/2022
  7616                                  		;db 0
  7617                                  
  7618                                  		; 13/12/202
  7619 000000E3 0B                      con_table:	db ((con_table_end - con_table)-1)/2 ; 11
  7620                                  					; 2C7h:0E4h = 70h:2654h
  7621 000000E4 [F901]                  		dw bc_exvec  ; 1FBh	; bc_exvec at 2C7h:1FBh	= 70h:276Bh
  7622                                  					; 00 init
  7623 000000E6 [F901]                  		dw bc_exvec  ; 1FBh	; 01
  7624 000000E8 [F901]                  		dw bc_exvec  ; 1FBh	; 02
  7625 000000EA [D500]                  		dw bc_cmderr ; 0D5h	; bc_exvec at 2C7h:D5h = 70h:2645h
  7626                                  					; 03
  7627 000000EC [5B01]                  		dw con_read  ; 15Ch	; con_read at 2C7h:15Ch	= 70h:26CCh
  7628                                  					; 04
  7629 000000EE [9E01]                  		dw con_rdnd  ; 19Fh	; con_rdnd at 2C7h:19Fh	= 70h:270Fh
  7630                                  					; 05
  7631 000000F0 [F901]                  		dw bc_exvec  ; 1FBh	; 06
  7632 000000F2 [0702]                  		dw con_flush ; 209h	; con_flush at 2C7h:209h = 70h:2779h
  7633                                  					; 07
  7634 000000F4 [FB01]                  		dw con_writ  ; 1FDh	; con_writ at 2C7h:1FDh	= 70h:276Dh
  7635                                  					; 08
  7636 000000F6 [FB01]                  		dw con_writ  ; 1FDh	; 09
  7637 000000F8 [F901]                  		dw bc_exvec  ; 1FBh	; 0A
  7638                                  con_table_end:
  7639 000000FA 1A                      prn_table:	db ((prn_table_end - prn_table)-1)/2 ; 26			
  7640                                  					; 2C7h:0FBh = 70h:266Bh
  7641 000000FB [F901]                  		dw bc_exvec   ; 1FBh	; bc_exvec
  7642 000000FD [F901]                  		dw bc_exvec   ; 1FBh	; 01
  7643 000000FF [F901]                  		dw bc_exvec   ; 1FBh	; 02
  7644 00000101 [D500]                  		dw bc_cmderr  ;	0D5h	; bc_cmderr
  7645 00000103 [1802]                  		dw prn_input  ;	21Ah	; prn_input
  7646                                  					; 04 indicate zero chars read
  7647 00000105 [C601]                  		dw z_bus_exit ; 1C8h	; z_bus_exit
  7648                                  					; 05 read non-destructive
  7649 00000107 [F901]                  		dw bc_exvec   ; 1FBh	; 06
  7650 00000109 [F901]                  		dw bc_exvec   ; 1FBh	; 07
  7651 0000010B [1D02]                  		dw prn_writ   ;	21Fh	; prn_writ
  7652 0000010D [1D02]                  		dw prn_writ   ; 21Fh	; 09
  7653 0000010F [4E02]                  		dw prn_stat   ; 251h	; prn_stat
  7654 00000111 [F901]                  		dw bc_exvec   ; 1FBh	; 0B
  7655 00000113 [F901]                  		dw bc_exvec   ; 1FBh	; 0C
  7656 00000115 [F901]                  		dw bc_exvec   ; 1FBh	; 0D
  7657 00000117 [F901]                  		dw bc_exvec   ; 1FBh	; 0E
  7658 00000119 [F901]                  		dw bc_exvec   ; 1FBh	; 0F
  7659 0000011B [8802]                  		dw prn_tilbusy ; 28Bh	; prn_tilbusy
  7660 0000011D [F901]                  		dw bc_exvec   ; 1FBh	; 11
  7661 0000011F [F901]                  		dw bc_exvec   ; 1FBh	; 12
  7662 00000121 [B602]                  		dw prn_genioctl ; 2BAh	; prn_genioctl
  7663 00000123 [F901]                  		dw bc_exvec   ; 1FBh	; 14
  7664 00000125 [F901]                  		dw bc_exvec   ; 1FBh	; 15
  7665 00000127 [F901]                  		dw bc_exvec   ; 1FBh	; 16
  7666 00000129 [F901]                  		dw bc_exvec   ; 1FBh	; 17
  7667 0000012B [F901]                  		dw bc_exvec   ; 1FBh	; 18
  7668 0000012D [EB02]                  		dw prn_ioctl_query ; 2F0h ; prn_ioctl_query
  7669                                  prn_table_end:
  7670 0000012F 0B                      aux_table:	db ((aux_table_end - aux_table)-1)/2 ; 11			
  7671                                  					; 2C7h:130h = 70h:26A0h
  7672 00000130 [F901]                  		dw bc_exvec   ; 1FBh	; 00 - init
  7673 00000132 [F901]                  		dw bc_exvec   ; 1FBh	; 01
  7674 00000134 [F901]                  		dw bc_exvec   ; 1FBh	; 02
  7675 00000136 [D500]                  		dw bc_cmderr  ;	0D5h	; 03
  7676 00000138 [0603]                  		dw aux_read   ; 30Dh	; aux_read ; 04	- read
  7677 0000013A [2D03]                  		dw aux_rdnd   ; 335h	; aux_rdnd - 05	- read non-destructive
  7678 0000013C [F901]                  		dw bc_exvec   ; 1FBh	; 06
  7679 0000013E [6303]                  		dw aux_flsh   ;	36Ch	; aux_flsh
  7680 00000140 [6A03]                  		dw aux_writ   ;	374h	; aux_writ
  7681 00000142 [6A03]                  		dw aux_writ   ;	374h	; 09
  7682 00000144 [4D03]                  		dw aux_wrst   ;	355h	; aux_wrst
  7683                                  aux_table_end:
  7684 00000146 0A                      tim_table	db ((tim_table_end - tim_table)-1)/2 ; 10
  7685                                  					; 2C7h:147h = 70h:26B7h
  7686 00000147 [F901]                  		dw bc_exvec   ; 1FBh	; 00
  7687 00000149 [F901]                  		dw bc_exvec   ; 1FBh	; 01
  7688 0000014B [F901]                  		dw bc_exvec   ; 1FBh	; 02
  7689 0000014D [D500]                  		dw bc_cmderr  ;	0D5h	; 03
  7690 0000014F [2904]                  		dw tim_read   ;	435h	; tim_read
  7691 00000151 [C601]                  		dw z_bus_exit ; 1C8h	; z_bus_exit
  7692 00000153 [F901]                  		dw bc_exvec   ; 1FBh	; 06
  7693 00000155 [F901]                  		dw bc_exvec   ; 1FBh	; 07
  7694 00000157 [D003]                  		dw tim_writ   ; 3DBh	; tim_writ
  7695 00000159 [D003]                  		dw tim_writ   ; 3DBh	; 09
  7696                                  tim_table_end:
  7697                                  
  7698                                  ; ---------------------------------------------------------------------------
  7699                                  
  7700                                  ;************************************************************************
  7701                                  ;*									*
  7702                                  ;*	con_read - read cx bytes from keyboard into buffer at es:di	*
  7703                                  ;*									*
  7704                                  ;************************************************************************
  7705                                  
  7706                                  con_read:				; 2C7h:15Ch = 70h:26CCh
  7707                                  		;jcxz	short con_exit	; read cx bytes	from keyboard into buffer
  7708 0000015B E306                    		jcxz	con_exit	; 19/10/2022
  7709                                  con_loop:				
  7710 0000015D E80500                  		call	chrin		; get char in al
  7711 00000160 AA                      		stosb			; store	char at	es:di
  7712 00000161 E2FA                    		loop	con_loop
  7713                                  con_exit:				
  7714 00000163 F8                      		clc
  7715 00000164 C3                      		retn
  7716                                  
  7717                                  ; =============== S U B	R O U T	I N E =======================================
  7718                                  
  7719                                  ;************************************************************************
  7720                                  ;*									*
  7721                                  ;*	chrin - input single char from keyboard into al			*
  7722                                  ;*									*
  7723                                  ;*	  we are going to issue extended keyboard function, if		*
  7724                                  ;*	  supported. the returning value of the extended keystroke	*
  7725                                  ;*	  of the extended keyboard function uses 0E0h in al		*
  7726                                  ;*	  instead of 00h as in the conventional keyboard function.	*
  7727                                  ;*	  this creates a conflict when the user entered real		*
  7728                                  ;*	  greek alpha charater (= 0E0h) to  distinguish the extended	*
  7729                                  ;*	  keystroke and the greek alpha. this case will be handled	*
  7730                                  ;*	  in the following manner:					*
  7731                                  ;*									*
  7732                                  ;*	      ah = 16h							*
  7733                                  ;*	      int 16h							*
  7734                                  ;*	      if al == 0, then extended code (in ah)			*
  7735                                  ;*	      else if al == 0E0h, then					*
  7736                                  ;*	      if ah <> 0, then extended code (in ah)			*
  7737                                  ;*		else greek_alpha character.				*
  7738                                  ;*									*
  7739                                  ;*	also, for compatibility reason, if an extended code is		*
  7740                                  ;*	  detected, then we are going to change the value in al		*
  7741                                  ;*	  from 0E0h to 00h.						*
  7742                                  ;*									*
  7743                                  ;************************************************************************
  7744                                  
  7745                                  		; 19/10/2022
  7746                                  chrin:		
  7747 00000165 8A26[E504]              		mov	ah, [keyrd_func] ; set by msinit. 0 or 10h
  7748 00000169 30C0                    		xor	al, al
  7749 0000016B 8606[0C00]              		xchg	al, [altah]	; get character	& zero altah
  7750 0000016F 08C0                    		or	al, al
  7751 00000171 752A                    		jnz	short keyret
  7752 00000173 CD16                    		int	16h		; KEYBOARD -
  7753 00000175 09C0                    		or	ax, ax
  7754 00000177 74EC                    		jz	short chrin
  7755 00000179 3D0072                  		cmp	ax, 7200h	; check	for ctrl-prtsc
  7756 0000017C 7504                    		jnz	short alt_ext_chk
  7757 0000017E B010                    		mov	al, 10h
  7758 00000180 EB1B                    		jmp	short keyret
  7759                                  ; ---------------------------------------------------------------------------
  7760                                  
  7761                                  ;  if operation was extended function (i.e. keyrd_func != 0) then
  7762                                  ;    if character read was 0E0h then
  7763                                  ;      if extended byte was zero (i.e. ah == 0) then
  7764                                  ;	 goto keyret
  7765                                  ;      else
  7766                                  ;	 set al to zero
  7767                                  ;	 goto alt_save
  7768                                  ;      endif
  7769                                  ;    endif
  7770                                  ;  endif
  7771                                  
  7772                                  alt_ext_chk:
  7773 00000182 803E[E504]00            		cmp	byte [keyrd_func], 0
  7774 00000187 740C                    		jz	short not_ext
  7775 00000189 3CE0                    		cmp	al, 0E0h
  7776 0000018B 7508                    		jnz	short not_ext
  7777 0000018D 08E4                    		or	ah, ah
  7778 0000018F 740C                    		jz	short keyret
  7779 00000191 30C0                    		xor	al, al
  7780 00000193 EB04                    		jmp	short alt_save
  7781                                  ; ---------------------------------------------------------------------------
  7782                                  
  7783                                  not_ext:				
  7784 00000195 08C0                    		or	al, al		; special case?
  7785 00000197 7504                    		jnz	short keyret
  7786                                  alt_save:				
  7787 00000199 8826[0C00]              		mov	[altah], ah	; store	special	key
  7788                                  keyret:					
  7789 0000019D C3                      		retn
  7790                                  
  7791                                  ; ---------------------------------------------------------------------------
  7792                                  
  7793                                  ;************************************************************************
  7794                                  ;*									*
  7795                                  ;*	con_rdnd - keyboard non destructive read, no wait		*
  7796                                  ;*									*
  7797                                  ;*	pc-convertible-type machine: if bit 10 is set by the dos	*
  7798                                  ;*	in the status word of the request packet, and there is no	*
  7799                                  ;*	character in the input buffer, the driver issues a system	*
  7800                                  ;*	wait request to the rom. on return from the rom, it returns	*
  7801                                  ;*	a 'char-not-found' to the dos.					*
  7802                                  ;*									*
  7803                                  ;************************************************************************
  7804                                  
  7805                                  		; 19/10/2022
  7806                                  con_rdnd:				
  7807 0000019E A0[0C00]                		mov	al, [altah]
  7808 000001A1 08C0                    		or	al, al
  7809 000001A3 754C                    		jnz	short rdexit
  7810 000001A5 8A26[E604]              		mov	ah, [keysts_func]
  7811 000001A9 CD16                    		int	16h		; KEYBOARD -
  7812 000001AB 751D                    		jnz	short gotchr
  7813 000001AD 803E[7900]00            		cmp	byte [fhavek09], 0
  7814 000001B2 7412                    		jz	short z_bus_exit
  7815 000001B4 C41E[1200]              		les	bx, [ptrsav]
  7816                                  		; 12/12/2022
  7817 000001B8 26F6470404              		test	byte [es:bx+4], 04h
  7818                                  		;test	word [es:bx+3], 400h ; [es:bx+status]
  7819 000001BD 7407                    		jz	short z_bus_exit
  7820 000001BF B80041                  		mov	ax, 4100h
  7821 000001C2 30DB                    		xor	bl, bl
  7822 000001C4 CD15                    		int	15h		; SYSTEM - WAIT	ON EXTERNAL EVENT (CONVERTIBLE)
  7823                                  					; AL = condition type, BH = condition compare or mask value
  7824                                  					; BL = timeout value times 55 milliseconds, 00h	means no timeout
  7825                                  					; DX = I/O port	address	if AL bit 4 set
  7826                                  z_bus_exit:				
  7827 000001C6 F9                      		stc			; 2C7h:1C8h = 70h:2738h
  7828 000001C7 B403                    		mov	ah, 3		; indicate busy	status
  7829 000001C9 C3                      		retn
  7830                                  ; ---------------------------------------------------------------------------
  7831                                  
  7832                                  gotchr:					
  7833 000001CA 09C0                    		or	ax, ax
  7834 000001CC 7508                    		jnz	short notbrk	; check	for null after break
  7835 000001CE 8A26[E504]              		mov	ah, [keyrd_func] ; issue keyboard read function
  7836 000001D2 CD16                    		int	16h		; KEYBOARD -
  7837 000001D4 EBC8                    		jmp	short con_rdnd	; get a	real status
  7838                                  ; ---------------------------------------------------------------------------
  7839                                  
  7840                                  notbrk:					
  7841 000001D6 3D0072                  		cmp	ax, 7200h	; check	for ctrl-prtsc
  7842 000001D9 7504                    		jnz	short rd_ext_chk
  7843 000001DB B010                    		mov	al, 10h		; ('P' & 1Fh) ; return control p
  7844 000001DD EB12                    		jmp	short rdexit
  7845                                  ; ---------------------------------------------------------------------------
  7846                                  
  7847                                  rd_ext_chk:				
  7848 000001DF 803E[E504]00            		cmp	byte [keyrd_func], 0 ; extended keyboard function?
  7849 000001E4 740B                    		jz	short rdexit
  7850 000001E6 3CE0                    		cmp	al, 0E0h	; extended key value or	greek alpha?
  7851 000001E8 7507                    		jnz	short rdexit
  7852 000001EA 80FC00                  		cmp	ah, 0		; scan code exist?
  7853 000001ED 7402                    		jz	short rdexit	; yes. greek alpha char.
  7854 000001EF B000                    		mov	al, 0		; no. extended key stroke.
  7855                                  					; change it for	compatibility
  7856                                  rdexit:					
  7857 000001F1 C41E[1200]              		les	bx, [ptrsav]
  7858 000001F5 2688470D                		mov	[es:bx+13], al	; [es:bx+media]
  7859                                  					; return keyboard character here
  7860                                  bc_exvec:				
  7861 000001F9 F8                      		clc			; bc_exvec at 2C7h:1FBh	= 70h:276Bh
  7862                                  					; indicate normal termination
  7863 000001FA C3                      		retn
  7864                                  ; ---------------------------------------------------------------------------
  7865                                  
  7866                                  ;************************************************************************
  7867                                  ;*									*
  7868                                  ;*	con_write - console write routine				*
  7869                                  ;*									*
  7870                                  ;*	entry:	es:di -> buffer						*
  7871                                  ;*		cx    =  count						*
  7872                                  ;*									*
  7873                                  ;************************************************************************
  7874                                  
  7875                                  con_writ:
  7876                                  		;jcxz	short bc_exvec
  7877 000001FB E3FC                    		jcxz	bc_exvec	; 19/10/2022
  7878                                  		; 12/12/2022
  7879                                  		;jcxz	cc_ret
  7880                                  con_lp:					
  7881 000001FD 268A05                  		mov	al, [es:di]
  7882 00000200 47                      		inc	di
  7883 00000201 CD29                    		int	29h		; DOS 2+ internal - FAST PUTCHAR
  7884                                  					; AL = character to display
  7885 00000203 E2F8                    		loop	con_lp
  7886                                  cc_ret:					
  7887 00000205 F8                      		clc
  7888 00000206 C3                      		retn
  7889                                  
  7890                                  ; =============== S U B	R O U T	I N E =======================================
  7891                                  
  7892                                  ;************************************************************************
  7893                                  ;*									*
  7894                                  ;*	con_flush - flush out keyboard queue				*
  7895                                  ;*									*
  7896                                  ;************************************************************************
  7897                                  
  7898                                  con_flush:
  7899 00000207 C606[0C00]00            		mov	byte [altah], 0	; clear	out holding buffer
  7900                                  flloop:					; while	(charavail()) charread();	
  7901 0000020C B401                    		mov	ah, 1
  7902 0000020E CD16                    		int	16h		; KEYBOARD - CHECK BUFFER, DO NOT CLEAR
  7903                                  					; Return: ZF clear if character	in buffer
  7904                                  					; AH = scan code, AL = character
  7905                                  					; ZF set if no character in buffer
  7906 00000210 74F3                    		jz	short cc_ret
  7907 00000212 30E4                    		xor	ah, ah
  7908 00000214 CD16                    		int	16h		; KEYBOARD - READ CHAR FROM BUFFER, WAIT IF EMPTY
  7909                                  					; Return: AH = scan code, AL = character
  7910 00000216 EBF4                    		jmp	short flloop
  7911                                  
  7912                                  ; ---------------------------------------------------------------------------
  7913                                  
  7914                                  ; 15/10/2022
  7915                                  
  7916                                  ;************************************************************************
  7917                                  ;*									*
  7918                                  ;*	some equates for rom bios printer i/o				*
  7919                                  ;*									*
  7920                                  ;************************************************************************
  7921                                  
  7922                                  ; ibm rom status bits (i don't trust them, neither should you)
  7923                                  ; warning!!! the ibm rom does not return just one bit. it returns a
  7924                                  ; whole slew of bits, only one of which is correct.
  7925                                  
  7926                                  ;notbusystatus	equ 10000000b		; not busy
  7927                                  ;nopaperstatus	equ 00100000b		; no more paper
  7928                                  ;prnselected	equ 00010000b		; printer selected
  7929                                  ;ioerrstatus	equ 00001000b		; some kinda error
  7930                                  ;timeoutstatus	equ 00000001b		; time out.
  7931                                  ;
  7932                                  ;noprinter	equ 00110000b		; no printer attached
  7933                                  
  7934                                  ; 18/03/2019 - Retro DOS v4.0
  7935                                  ;error_I24_out_of_paper	equ 9 ; MSDOS 6.0, ERR.INC, 1991
  7936                                  
  7937                                  ; ---------------------------------------------------------------------------
  7938                                  
  7939                                  ;************************************************************************
  7940                                  ;*									*
  7941                                  ;*	prn_input - return with no error but zero chars read		*
  7942                                  ;*									*
  7943                                  ;*	enter with cx = number of characters requested			*
  7944                                  ;*									*
  7945                                  ;************************************************************************
  7946                                  
  7947                                  prn_input:				; 2C7h:21Ah = 70h:278Ah
  7948 00000218 E8BCFE                  		call	bc_err_cnt	; reset	count to zero
  7949                                  					; (sub reqpkt.count,cx)
  7950                                  		; 12/12/2022
  7951                                  prn_done:
  7952 0000021B F8                      		clc			; but return with carry	reset for no error
  7953 0000021C C3                      		retn
  7954                                  ; ---------------------------------------------------------------------------
  7955                                  
  7956                                  ;************************************************************************
  7957                                  ;*									*
  7958                                  ;*	prn_writ - write cx bytes from es:di to printer device		*
  7959                                  ;*									*
  7960                                  ;*	auxnum has printer number					*
  7961                                  ;*									*
  7962                                  ;************************************************************************
  7963                                  
  7964                                  prn_writ:				; 2C7h:21Fh = 70h:278Fh
  7965                                  		;jcxz	short prn_done	; no chars to output
  7966 0000021D E3FC                    		jcxz	prn_done	; 19/10/2022
  7967                                  prn_loop:				
  7968 0000021F BB0200                  		mov	bx, 2		; retry	count
  7969                                  prn_out:				
  7970 00000222 E83600                  		call	prnstat		; get status
  7971 00000225 751D                    		jnz	short TestPrnError
  7972 00000227 268A05                  		mov	al, [es:di]	; get character	to print
  7973 0000022A 30E4                    		xor	ah, ah
  7974 0000022C E82E00                  		call	prnop		; print	to printer
  7975 0000022F 7419                    		jz	short prn_con	; no error - continue
  7976 00000231 80FCFF                  		cmp	ah, 0FFh	; MODE_CTRLBRK
  7977 00000234 7509                    		jnz	short _prnwf
  7978 00000236 B00C                    		mov	al, 0Ch		; error_I24_gen_failure
  7979 00000238 C606[0C00]00            		mov	byte [altah], 0
  7980 0000023D EB08                    		jmp	short pmessg
  7981                                  ; ---------------------------------------------------------------------------
  7982                                  
  7983                                  _prnwf:					
  7984 0000023F F6C401                  		test	ah, 1		; timeoutstatus
  7985 00000242 7406                    		jz	short prn_con
  7986                                  TestPrnError:				
  7987 00000244 4B                      		dec	bx		; retry	until count is exhausted.
  7988 00000245 75DB                    		jnz	short prn_out
  7989                                  pmessg:					
  7990 00000247 E98DFE                  		jmp	bc_err_cnt
  7991                                  ; ---------------------------------------------------------------------------
  7992                                  
  7993                                  prn_con:				
  7994 0000024A 47                      		inc	di		; point	to next	char and continue
  7995 0000024B E2D2                    		loop	prn_loop
  7996                                  ;prn_done:				
  7997                                  		; 12/12/2022
  7998                                  prn_done2:
  7999                                  		;clc
  8000                                  		; cf=0
  8001 0000024D C3                      		retn
  8002                                  ; ---------------------------------------------------------------------------
  8003                                  
  8004                                  ;************************************************************************
  8005                                  ;*									*
  8006                                  ;*	prn_stat - device driver entry to return printer status		*
  8007                                  ;*									*
  8008                                  ;************************************************************************
  8009                                  
  8010                                  prn_stat:				; 2C7h:251h = 70h:27C1h
  8011 0000024E E80A00                  		call	prnstat		; device in dx
  8012 00000251 75F4                    		jnz	short pmessg
  8013 00000253 F6C480                  		test	ah, 80h		; notbusystatus
  8014                                  		;jnz	short prn_done
  8015                                  		; 12/12/2022
  8016 00000256 75F5                    		jnz	short prn_done2 ; cf=0
  8017 00000258 E96BFF                  		jmp	z_bus_exit
  8018                                  ; ---------------------------------------------------------------------------
  8019                                  
  8020                                  ;************************************************************************
  8021                                  ;*									*
  8022                                  ;*	prnstat - utility function to call ROM BIOS to check		*
  8023                                  ;*		 printer status. Return meaningful error code		*
  8024                                  ;*									*
  8025                                  ;************************************************************************
  8026                                  
  8027                                  prnstat:				
  8028 0000025B B402                    		mov	ah, 2		; set command for get status
  8029                                  					; PRINTER - GET	STATUS
  8030                                  					; DX = printer port (0-3)
  8031                                  					; Return: AH = status
  8032                                  
  8033                                  ; =============== S U B	R O U T	I N E =======================================
  8034                                  
  8035                                  ;************************************************************************
  8036                                  ;*									*
  8037                                  ;*	prnop - call ROM BIOS printer function in ah			*
  8038                                  ;*		return zero true if no error				*
  8039                                  ;*		return zero false if error, al = error code		*
  8040                                  ;*									*
  8041                                  ;************************************************************************
  8042                                  
  8043                                  prnop:	
  8044 0000025D 8B16[2100]              		mov	dx, [auxnum]	; get printer number
  8045 00000261 CD17                    		int	17h
  8046                                  
  8047                                  	; This check was added to see if this is a case of no
  8048                                  	; printer being installed. This tests checks to be sure
  8049                                  	; the error is noprinter (30h)
  8050                                  
  8051 00000263 50                      		push	ax
  8052 00000264 80E430                  		and	ah, 30h
  8053 00000267 80FC30                  		cmp	ah, 30h		; noprinter
  8054 0000026A 58                      		pop	ax
  8055 0000026B 7506                    		jnz	short NextTest
  8056 0000026D 80E4DF                  		and	ah, 0DFh	; ~nopaperstatus
  8057 00000270 80CC08                  		or	ah, 8		; ioerrstatus
  8058                                  
  8059                                  ; examine the status bits to see if an error occurred. unfortunately, several
  8060                                  ; of the bits are set so we have to pick and choose. we must be extremely
  8061                                  ; careful about breaking basic.
  8062                                  
  8063                                  NextTest:				
  8064 00000273 F6C428                  		test	ah, 28h		; (ioerrstatus+nopaperstatus)
  8065                                  					; i/o error?
  8066 00000276 740A                    		jz	short checknotready ; no, try not ready
  8067                                  
  8068                                  ; at this point, we know we have an error. the converse is not true
  8069                                  
  8070 00000278 B009                    		mov	al, 9		; error_I24_out_of_paper
  8071                                  					; first, assume	out of paper
  8072 0000027A F6C420                  		test	ah, 20h		; out of paper set?
  8073 0000027D 7502                    		jnz	short ret1	; yes, error is	set
  8074 0000027F FEC0                    		inc	al		; return al=10 (i/o error)
  8075                                  ret1:					
  8076 00000281 C3                      		retn
  8077                                  ; ---------------------------------------------------------------------------
  8078                                  
  8079                                  checknotready:				
  8080 00000282 B002                    		mov	al, 2		; assume not-ready
  8081 00000284 F6C401                  		test	ah, 1
  8082 00000287 C3                      		retn
  8083                                  
  8084                                  ; ---------------------------------------------------------------------------
  8085                                  
  8086                                  ;************************************************************************
  8087                                  ;*									*
  8088                                  ;*	prn_tilbusy - output until busy. Used by print spooler.		*
  8089                                  ;*		     this entry point should never block waiting for	*
  8090                                  ;*		     device to come ready.				*
  8091                                  ;*									*
  8092                                  ;*	inputs:	cx = count, es:di -> buffer				*
  8093                                  ;*	outputs: set the number of bytes transferred in the		*
  8094                                  ;*		 device driver request packet				*
  8095                                  ;*									*
  8096                                  ;************************************************************************
  8097                                  
  8098                                  		; 19/10/2022
  8099                                  prn_tilbusy:				; 2C7h:28Bh = 70h:27FBh
  8100 00000288 89FE                    		mov	si, di		; everything is	set for	lodsb
  8101                                  prn_tilbloop:				
  8102 0000028A 51                      		push	cx
  8103 0000028B 53                      		push	bx
  8104 0000028C 30FF                    		xor	bh, bh
  8105 0000028E 8A1E[E704]              		mov	bl, [printdev]
  8106 00000292 D1E3                    		shl	bx, 1
  8107                                  		;mov	cx, ds:wait_count[bx] ;	wait count times to come ready
  8108 00000294 8B8F[E804]              		mov	cx, [wait_count+bx]
  8109 00000298 5B                      		pop	bx
  8110                                  prn_getstat:				
  8111 00000299 E8BFFF                  		call	prnstat		; get status
  8112 0000029C 7514                    		jnz	short prn_bperr	; error
  8113 0000029E F6C480                  		test	ah, 80h		; ready	yet?
  8114 000002A1 E1F6                    		loope	prn_getstat	; no, go for more
  8115 000002A3 59                      		pop	cx		; get original count
  8116 000002A4 740D                    		jz	short prn_berr	; still	not ready => done
  8117 000002A6 26                      		es
  8118 000002A7 AC                      		lodsb
  8119                                  		;lods	byte ptr es:[si] ; es
  8120                                  					; lodsb
  8121 000002A8 30E4                    		xor	ah, ah
  8122 000002AA E8B0FF                  		call	prnop
  8123 000002AD 7504                    		jnz	short prn_berr	; error
  8124 000002AF E2D9                    		loop	prn_tilbloop
  8125                                  		; 12/12/2022
  8126                                  		; cf=0 (prnop)
  8127                                  		;clc			; normal no-error return
  8128 000002B1 C3                      		retn			;   from device driver
  8129                                  
  8130                                  ; ---------------------------------------------------------------------------
  8131                                  
  8132                                  prn_bperr:				
  8133 000002B2 59                      		pop	cx		; restore transfer count from stack
  8134                                  prn_berr:				
  8135 000002B3 E921FE                  		jmp	bc_err_cnt
  8136                                  ; ---------------------------------------------------------------------------
  8137                                  
  8138                                  ; 15/10/2022
  8139                                  
  8140                                  ;************************************************************************
  8141                                  ;*									*
  8142                                  ;*	prn_genioctl - get/set printer retry count			*
  8143                                  ;*									*
  8144                                  ;************************************************************************
  8145                                  
  8146                                  ; IOCTL.INC (MSDOS 6.0, 1991)
  8147                                  ; 11/01/2019
  8148                                  
  8149                                  ;********************************;*
  8150                                  ; CHARACTER DEVICES (PRINTERS)	 ;*
  8151                                  ;********************************;*
  8152                                  
  8153                                  ;;RAWIO SUB-FUNCTIONS
  8154                                  ;;get_retry_count equ 65h
  8155                                  ;;set_retry_count equ 45h
  8156                                  
  8157                                  ;;struc A_RETRYCOUNT
  8158                                  ;;.rc_count: resw 1
  8159                                  ;;endstruc
  8160                                  
  8161                                  ;ioc_pc equ 5
  8162                                  
  8163                                  ; ---------------------------------------------------------------------------
  8164                                  
  8165                                  		; 19/10/2022
  8166                                  prn_genioctl:				; 2C7h:2BAh = 70h:282Ah
  8167 000002B6 C43E[1200]              		les	di, [ptrsav]
  8168 000002BA 26807D0D05              		cmp	byte [es:di+13], 5 ; [es:di+IOCTL_REQ.MAJORFUNCTION]
  8169                                  					; ioc_pc
  8170 000002BF 7403                    		jz	short prnfunc_ok
  8171                                  
  8172                                  prnfuncerr:				
  8173 000002C1 E911FE                  		jmp	bc_cmderr
  8174                                  ; ---------------------------------------------------------------------------
  8175                                  
  8176                                  prnfunc_ok:				
  8177 000002C4 268A450E                		mov	al, [es:di+14]	; [es:di+IOCTL_REQ.MINORFUNCTION]
  8178 000002C8 26C47D13                		les	di, [es:di+19]	; [es:di+IOCTL_REQ.GENERICIOCTL_PACKET]
  8179 000002CC 30FF                    		xor	bh, bh
  8180                                  		;mov	bl, ds:printdev	; get index into retry counts
  8181 000002CE 8A1E[E704]              		mov	bl, [printdev]
  8182 000002D2 D1E3                    		shl	bx, 1
  8183                                  		;mov	cx, ds:wait_count[bx] ;	pull out retry count for device
  8184 000002D4 8B8F[E804]              		mov	cx, [wait_count+bx]
  8185 000002D8 3C65                    		cmp	al, 65h		; get_retry_count
  8186 000002DA 7407                    		jz	short prngetcount
  8187 000002DC 3C45                    		cmp	al, 45h		; set_retry_count
  8188 000002DE 75E1                    		jnz	short prnfuncerr
  8189 000002E0 268B0D                  		mov	cx, [es:di]
  8190                                  prngetcount:				
  8191                                  		;mov	ds:wait_count[bx], cx
  8192 000002E3 898F[E804]              		mov	[wait_count+bx], cx
  8193 000002E7 26890D                  		mov	[es:di], cx	; [es:di+A_RETRYCOUNT.RC_COUNT]
  8194                                  					; return current retry count
  8195                                  		; 12/12/2022
  8196                                  		; cf=0
  8197                                  		;clc
  8198 000002EA C3                      		retn
  8199                                  ; ---------------------------------------------------------------------------
  8200                                  
  8201                                  ;************************************************************************
  8202                                  ;*									*
  8203                                  ;*  prn_ioctl_query							*
  8204                                  ;*									*
  8205                                  ;*  Added for 5.00							*
  8206                                  ;************************************************************************
  8207                                  
  8208                                  prn_ioctl_query:			; 2C7h:2F0h = 70h:2860h
  8209 000002EB C43E[1200]              		les	di, [ptrsav]
  8210 000002EF 26807D0D05              		cmp	byte [es:di+13], 5 ; [es:di+IOCTL_REQ.MAJORFUNCTION]
  8211                                  					; ioc_pc
  8212 000002F4 750D                    		jnz	short prn_query_err
  8213 000002F6 268A450E                		mov	al, [es:di+14]	; [es:di+IOCTL_REQ.MINORFUNCTION]
  8214 000002FA 3C65                    		cmp	al, 65h		; GET_RETRY_COUNT
  8215 000002FC 7404                    		jz	short IOCtlSupported
  8216 000002FE 3C45                    		cmp	al, 45h		; SET_RETRY_COUNT
  8217 00000300 7501                    		jnz	short prn_query_err
  8218                                  IOCtlSupported:	
  8219                                  		; 12/12/2022
  8220                                  		; cf=0		
  8221                                  		;clc
  8222 00000302 C3                      		retn
  8223                                  ; ---------------------------------------------------------------------------
  8224                                  
  8225                                  prn_query_err:
  8226                                  		; 12/12/2022				
  8227                                  		;stc
  8228 00000303 E9CFFD                  		jmp	bc_cmderr ; (bc_cmderr sets cf to 1)
  8229                                  ; ---------------------------------------------------------------------------
  8230                                  
  8231                                  ;************************************************************************
  8232                                  ;*									*
  8233                                  ;*	aux port driver code -- "aux" == "com1"				*
  8234                                  ;*									*
  8235                                  ;*	the device driver entry/dispatch code sets up auxnum to		*
  8236                                  ;*	give the com port number to use (0=com1, 1=com2, 2=com3...)	*
  8237                                  ;*									*
  8238                                  ;************************************************************************
  8239                                  
  8240                                  ;	values in ah, requesting function of int 14h in rom bios
  8241                                  
  8242                                  ;auxfunc_send	 equ	1	;transmit
  8243                                  ;auxfunc_receive equ	2	;read
  8244                                  ;auxfunc_status	 equ	3	;request status
  8245                                  
  8246                                  ;	error flags, reported by int 14h, reported in ah:
  8247                                  
  8248                                  ;flag_data_ready equ	01h	;data ready
  8249                                  ;flag_overrun	 equ	02h	;overrun error
  8250                                  ;flag_parity	 equ	04h	;parity error
  8251                                  ;flag_frame	 equ	08h	;framing error
  8252                                  ;flag_break	 equ	10h	;break detect
  8253                                  ;flag_tranhol_emp equ	20h	;transmit holding register empty
  8254                                  ;flag_timeout	 equ	80h	;timeout
  8255                                  
  8256                                  ;	these flags reported in al:
  8257                                  
  8258                                  ;flag_cts	 equ	10h	;clear to send
  8259                                  ;flag_dsr	 equ	20h	;data set ready
  8260                                  ;flag_rec_sig	 equ	80h	;receive line signal detect
  8261                                  
  8262                                  ; ---------------------------------------------------------------------------
  8263                                  
  8264                                  ;************************************************************************
  8265                                  ;*									*
  8266                                  ;*	aux_read - read cx bytes from [auxnum] aux port to buffer	*
  8267                                  ;*		   at es:di						*
  8268                                  ;*									*
  8269                                  ;************************************************************************
  8270                                  
  8271                                  aux_read:				; 2C7h:30Dh = 70h:287Dh
  8272                                  		;jcxz	short exvec2
  8273 00000306 E311                    		jcxz	exvec2		; 19/10/2022
  8274 00000308 E87700                  		call	getbx		; put address of auxbuf	in bx
  8275 0000030B 30C0                    		xor	al, al
  8276 0000030D 8607                    		xchg	al, [bx]
  8277 0000030F 08C0                    		or	al, al
  8278 00000311 7503                    		jnz	short aux2
  8279                                  aux1:					
  8280 00000313 E80500                  		call	auxin		; get character	from port
  8281                                  					; won't return if error
  8282                                  aux2:					
  8283 00000316 AA                      		stosb
  8284 00000317 E2FA                    		loop	aux1		; if more characters, go around	again
  8285                                  exvec2:					
  8286 00000319 F8                      		clc			; all done, successful exit
  8287                                  auxin_retn:	; 18/12/2022
  8288 0000031A C3                      		retn
  8289                                  ; ---------------------------------------------------------------------------
  8290                                  
  8291                                  ;************************************************************************
  8292                                  ;*									*
  8293                                  ;*	auxin - call rom bios to read character from aux port		*
  8294                                  ;*		if error occurs, map the error and return one		*
  8295                                  ;*		level up to device driver exit code, setting		*
  8296                                  ;*		the number of bytes transferred appropriately		*
  8297                                  ;*									*
  8298                                  ;************************************************************************
  8299                                  
  8300                                  auxin:					
  8301 0000031B B402                    		mov	ah, 2		; auxfunc_receive
  8302 0000031D E83C00                  		call	auxop
  8303 00000320 F6C40E                  		test	ah, 0Eh		; flag_frame|flag_parity|flag_overrun
  8304                                  		;jnz	short arbad	; skip if any error bits set
  8305                                  		;retn
  8306                                  		; 25/06/2023 (BugFix)
  8307 00000323 74F5                    		jz	short auxin_retn
  8308                                  ; ---------------------------------------------------------------------------
  8309                                  
  8310                                  arbad:					
  8311 00000325 58                      		pop	ax		; remove return	address	(near call)
  8312 00000326 30C0                    		xor	al, al
  8313 00000328 0CB0                    		or	al, 0B0h	; flag_rec_sig|	flag_dsr|flag_cts
  8314 0000032A E9AAFD                  		jmp	bc_err_cnt
  8315                                  
  8316                                  ; ---------------------------------------------------------------------------
  8317                                  
  8318                                  ;************************************************************************
  8319                                  ;*									*
  8320                                  ;*	aux_rdnd - non-destructive aux port read			*
  8321                                  ;*									*
  8322                                  ;************************************************************************
  8323                                  
  8324                                  aux_rdnd:				; 2C7h:335h = 70h:28A5h
  8325 0000032D E85200                  		call	getbx
  8326 00000330 8A07                    		mov	al, [bx]	; have bx point	to auxbuf
  8327 00000332 08C0                    		or	al, al		; if al	is non-zero (char in buffer)
  8328 00000334 7511                    		jnz	short auxdrx	; then return character
  8329 00000336 E82100                  		call	auxstat		; if not, get status of	aux device
  8330 00000339 F6C401                  		test	ah, 1		; flag_data_ready - test data ready
  8331 0000033C 740C                    		jz	short auxbus	; then device is busy (not ready)
  8332 0000033E A820                    		test	al, 20h		; flag_dsr - test data set ready
  8333 00000340 7408                    		jz	short auxbus	; then device is busy (not ready)
  8334 00000342 E8D6FF                  		call	auxin		; else aux is ready, get character
  8335 00000345 8807                    		mov	[bx], al
  8336                                  auxdrx:					
  8337 00000347 E9A7FE                  		jmp	rdexit		; return busy status
  8338                                  ; ---------------------------------------------------------------------------
  8339                                  
  8340                                  auxbus:					
  8341 0000034A E979FE                  		jmp	z_bus_exit
  8342                                  ; ---------------------------------------------------------------------------
  8343                                  
  8344                                  ;************************************************************************
  8345                                  ;*									*
  8346                                  ;*	aux_wrst - return aux port write status				*
  8347                                  ;*									*
  8348                                  ;************************************************************************
  8349                                  
  8350                                  aux_wrst:				; 2C7h:355h = 70h:28C5h
  8351 0000034D E80A00                  		call	auxstat		; get status of	aux in ax
  8352 00000350 A820                    		test	al, 20h		; test data set	ready
  8353 00000352 74F6                    		jz	short auxbus	; then device is busy (not ready)
  8354 00000354 F6C420                  		test	ah, 20h		; flag_tranhol_emp - test transmit hold	reg empty
  8355 00000357 74F1                    		jz	short auxbus	; then device is busy (not ready)
  8356                                  		; 12/12/2022
  8357                                  		; cf=0	; (test instruction resets cf)
  8358                                  		;clc
  8359 00000359 C3                      		retn
  8360                                  ; ---------------------------------------------------------------------------
  8361                                  
  8362                                  ;************************************************************************
  8363                                  ;*									*
  8364                                  ;*	auxstat - call rom bios to determine aux port status		*
  8365                                  ;*									*
  8366                                  ;*	exit:	ax = status						*
  8367                                  ;*		dx = [auxnum]						*
  8368                                  ;*									*
  8369                                  ;************************************************************************
  8370                                  
  8371                                  auxstat:				
  8372 0000035A B403                    		mov	ah, 3		; auxfunc_status
  8373                                  
  8374                                  		; fall into auxop
  8375                                  
  8376                                  ; =============== S U B	R O U T	I N E =======================================
  8377                                  
  8378                                  ;************************************************************************
  8379                                  ;*									*
  8380                                  ;*	auxop - perform rom-biox aux port interrupt			*
  8381                                  ;*									*
  8382                                  ;*	entry:	ah = int 14h function number				*
  8383                                  ;*	exit:	ax = results						*
  8384                                  ;*		dx = [auxnum]						*
  8385                                  ;*									*
  8386                                  ;************************************************************************
  8387                                  
  8388                                  auxop:		; proc near		
  8389 0000035C 8B16[2100]              		mov	dx, [auxnum]	; ah=function code
  8390                                  					; 0=init, 1=send, 2=receive, 3=status
  8391                                  					; get port number
  8392 00000360 CD14                    		int	14h		; SERIAL I/O - GET USART STATUS
  8393                                  					; DX = port number (0-3)
  8394                                  					; Return: AX = port status code
  8395 00000362 C3                      		retn
  8396                                  
  8397                                  ; ---------------------------------------------------------------------------
  8398                                  
  8399                                  ;************************************************************************
  8400                                  ;*									*
  8401                                  ;*	aux_flsh - flush aux input buffer - set contents of		*
  8402                                  ;*		   auxbuf [auxnum] to zero				*
  8403                                  ;*									*
  8404                                  ;*	cas - shouldn't this code call the rom bios input function	*
  8405                                  ;*	      repeatedly until it isn't ready?  to flush out any	*
  8406                                  ;*	      pending serial input queue if there's a tsr like MODE	*
  8407                                  ;*	      which is providing interrupt-buffering of aux port?	*
  8408                                  ;*									*
  8409                                  ;************************************************************************
  8410                                  
  8411                                  aux_flsh:				; 2C7h:36Ch = 70h:28DCh
  8412 00000363 E81C00                  		call	getbx		; flush	aux input buffer
  8413 00000366 C60700                  		mov	byte [bx], 0	; get bx to point to auxbuf
  8414                                  					; zero out buffer
  8415                                  		;clc			; all done, successful return
  8416                                  		; 12/12/2022
  8417                                  		; cf=0 ('add' instruction in 'getbx')
  8418 00000369 C3                      		retn
  8419                                  ; ---------------------------------------------------------------------------
  8420                                  
  8421                                  ;************************************************************************
  8422                                  ;*									*
  8423                                  ;*	aux_writ - write to aux device					*
  8424                                  ;*									*
  8425                                  ;************************************************************************
  8426                                  
  8427                                  aux_writ:				; 2C7h:374h = 70h:28E4h
  8428                                  		;jcxz	short exvec2	; write	to aux device (if cx > 0)
  8429 0000036A E3AD                    		jcxz	exvec2		; 19/10/2022
  8430                                  aux_loop:				
  8431 0000036C 268A05                  		mov	al, [es:di]	; get character	to be written
  8432                                  					; move di pointer to next character
  8433 0000036F 47                      		inc	di
  8434 00000370 B401                    		mov	ah, 1		; auxfunc_send - indicates a write
  8435 00000372 E8E7FF                  		call	auxop		; send character over aux port
  8436 00000375 F6C480                  		test	ah, 80h		; check	for error
  8437 00000378 7405                    		jz	short awok	; then no error
  8438 0000037A B00A                    		mov	al, 10		; else indicate	write fault
  8439 0000037C E958FD                  		jmp	bc_err_cnt	; call error routines
  8440                                  ; ---------------------------------------------------------------------------
  8441                                  
  8442                                  awok:					
  8443 0000037F E2EB                    		loop	aux_loop	; if cx	is non-zero,
  8444                                  					; still	more character to print
  8445                                  		;clc			; all done, successful return
  8446                                  		; 12/12/2022
  8447                                  		; cf=0 (test instruction above)	
  8448 00000381 C3                      		retn
  8449                                  
  8450                                  ; =============== S U B	R O U T	I N E =======================================
  8451                                  
  8452                                  ;************************************************************************
  8453                                  ;*									*
  8454                                  ;*	getbx - return bx -> single byte input buffer for		*
  8455                                  ;*		selected aux port ([auxnum])				*
  8456                                  ;*									*
  8457                                  ;************************************************************************
  8458                                  
  8459                                  getbx:	
  8460 00000382 8B1E[2100]              		mov	bx, [auxnum]	; return bx -> single byte input buffer
  8461                                  					; for selected aux port	([auxnum])
  8462                                  		;add	bx, offset auxbuf
  8463 00000386 81C3[1600]              		add	bx, auxbuf	; 19/10/2022
  8464                                  		; 12/12/2022
  8465                                  		; cf=0 (if [uaxnum] is valid number) 
  8466 0000038A C3                      		retn
  8467                                  
  8468                                  ; ---------------------------------------------------------------------------
  8469                                  
  8470                                  ; 15/10/2022
  8471                                  
  8472                                  ;----------------------------------------------------------------
  8473                                  ;								:
  8474                                  ;		    clock device driver 			:
  8475                                  ;								:
  8476                                  ;								:
  8477                                  ;   this file contains the clock device driver. 		:
  8478                                  ;								:
  8479                                  ;   the routines in this files are:				:
  8480                                  ;								:
  8481                                  ;	routine 		function			:
  8482                                  ;	------- 		--------			:
  8483                                  ;	tim_writ		set the current time		:
  8484                                  ;	tim_read		read the current time		:
  8485                                  ;	time_to_ticks		convert time to corresponding	:
  8486                                  ;				  number of clock ticks 	:
  8487                                  ;								:
  8488                                  ; the clock ticks at the rate of:				:
  8489                                  ;								:
  8490                                  ;	1193180/65536 ticks/second (about 18.2 ticks per second):
  8491                                  ; see each routine for information on the use.			:
  8492                                  ;								:
  8493                                  ;----------------------------------------------------------------
  8494                                  
  8495                                  ; convert time to ticks
  8496                                  ; input : time in cx and dx
  8497                                  ; ticks returned in cx:dx
  8498                                  
  8499                                  ;19/07/2019
  8500                                  ;09/03/2019
  8501                                  
  8502                                  time_to_ticks:				; 0070h:2906h =	02C7h:0396h
  8503                                  
  8504                                  ; first convert from hour,min,sec,hund. to
  8505                                  ; total number of 100th of seconds
  8506                                  
  8507 0000038B B03C                    		mov	al, 60
  8508 0000038D F6E5                    		mul	ch		; hours	to minutes
  8509 0000038F B500                    		mov	ch, 0
  8510 00000391 01C8                    		add	ax, cx		; total	minutes
  8511 00000393 B97017                  		mov	cx, 6000	; 60*100
  8512 00000396 89D3                    		mov	bx, dx		; get out of the way of	the multiply
  8513 00000398 F7E1                    		mul	cx		; convert to 1/100 sec
  8514 0000039A 89C1                    		mov	cx, ax
  8515 0000039C B064                    		mov	al, 100
  8516 0000039E F6E7                    		mul	bh		; convert seconds to 1/100 sec
  8517 000003A0 01C1                    		add	cx, ax		; combine seconds with hours and min
  8518 000003A2 83D200                  		adc	dx, 0		; ripple carry
  8519 000003A5 B700                    		mov	bh, 0
  8520 000003A7 01D9                    		add	cx, bx		; combine 1/100	sec
  8521 000003A9 83D200                  		adc	dx, 0
  8522                                  
  8523                                  	; dx:cx is time in 1/100 sec
  8524                                  
  8525 000003AC 92                      		xchg	ax, dx
  8526 000003AD 91                      		xchg	ax, cx		; now time is in cx:ax
  8527 000003AE BB0BE9                  		mov	bx, 59659
  8528 000003B1 F7E3                    		mul	bx		; multiply low half
  8529 000003B3 87D1                    		xchg	dx, cx
  8530 000003B5 92                      		xchg	ax, dx		; cx->ax, ax->dx, dx->cx
  8531 000003B6 F7E3                    		mul	bx		; multiply high	half
  8532 000003B8 01C8                    		add	ax, cx		; combine overlapping products
  8533 000003BA 83D200                  		adc	dx, 0
  8534 000003BD 92                      		xchg	ax, dx		; ax:dx=time*59659
  8535 000003BE BB0500                  		mov	bx, 5
  8536 000003C1 F6F3                    		div	bl		; divide high half by 5
  8537 000003C3 88C1                    		mov	cl, al
  8538 000003C5 B500                    		mov	ch, 0
  8539 000003C7 88E0                    		mov	al, ah		; remainder of divide-by-5
  8540 000003C9 98                      		cbw
  8541 000003CA 92                      		xchg	ax, dx		; use it to extend low half
  8542 000003CB F7F3                    		div	bx		; divide low half by 5
  8543 000003CD 89C2                    		mov	dx, ax		; cx:dx	is now number of ticks in time
  8544 000003CF CB                      		retf			; far return
  8545                                  
  8546                                  ; ---------------------------------------------------------------------------
  8547                                  
  8548                                  ; 17/10/2022
  8549                                  ; 15/10/2022
  8550                                  
  8551                                  ;--------------------------------------------------------------------
  8552                                  ;
  8553                                  ; tim_writ sets the current time
  8554                                  ;
  8555                                  ; on entry es:[di] has the current time:
  8556                                  ;
  8557                                  ;	number of days since 1-1-80	(word)
  8558                                  ;	minutes (0-59)			(byte)
  8559                                  ;	hours (0-23)			(byte)
  8560                                  ;	hundredths of seconds (0-99)	(byte)
  8561                                  ;	seconds (0-59)			(byte)
  8562                                  ;
  8563                                  ; each number has been checked for the correct range.
  8564                                  ;
  8565                                  ;	NOTE: Any changes in this routine probably require corresponding
  8566                                  ;	changes in the version that is built with the power manager driver.
  8567                                  ;	See ptime.asm.
  8568                                  ;
  8569                                  ;--------------------------------------------------------------------
  8570                                  
  8571                                  tim_writ:				; 2C7h:3DBh = 70h:294Bh
  8572 000003D0 268B05                  		mov	ax, [es:di]
  8573 000003D3 50                      		push	ax		; daycnt. we need to set this at the very
  8574                                  					; end to avoid tick windows.
  8575 000003D4 803E[F304]00            		cmp	byte [havecmosclock], 0
  8576                                  		;cmp	ds:havecmosclock, 0
  8577 000003D9 7426                    		jz	short no_cmos_1
  8578 000003DB 268A4503                		mov	al, [es:di+3]	; near indirect	calls
  8579                                  					; get binary hours
  8580                                  					; convert to bcd
  8581 000003DF FF1E[0205]              		call	far [bintobcd]
  8582                                  		;call	ds:bintobcd	; call far [bintobcd]
  8583 000003E3 88C5                    		mov	ch, al		; ch = bcd hours
  8584 000003E5 268A4502                		mov	al, [es:di+2]	; get binary minutes
  8585 000003E9 FF1E[0205]              		call	far [bintobcd]
  8586                                  		;call	ds:bintobcd	; convert to bcd
  8587 000003ED 88C1                    		mov	cl, al		; cl = bcd minutes
  8588 000003EF 268A4505                		mov	al, [es:di+5]	; get binary seconds
  8589 000003F3 FF1E[0205]              		call	far [bintobcd]
  8590                                  		;call	ds:bintobcd
  8591 000003F7 88C6                    		mov	dh, al		; dh = bcd seconds
  8592 000003F9 B200                    		mov	dl, 0		; dl = 0 (st) or 1 (dst)
  8593 000003FB FA                      		cli
  8594 000003FC B403                    		mov	ah, 3
  8595 000003FE CD1A                    		int	1Ah		; CLOCK	- SET REAL TIME	CLOCK (AT,XT286,CONV,PS)
  8596                                  					; CH = hours in	BCD, CL	= minutes in BCD
  8597                                  					;  DH =	seconds	in BCD,DL = 01h	if daylight savings, 00h if standard time
  8598                                  					; Return: CMOS clock set
  8599 00000400 FB                      		sti
  8600                                  no_cmos_1:				
  8601 00000401 268B4D02                		mov	cx, [es:di+2]
  8602 00000405 268B5504                		mov	dx, [es:di+4]
  8603                                  		; 17/10/2022
  8604 00000409 FF1E[E206]              		call	far [ttticks]
  8605                                  		;call	dword ptr ds:ttticks ; call far	[ttticks]
  8606                                  					; convert time to ticks
  8607                                  					; cx:dx	now has	time in	ticks
  8608 0000040D FA                      		cli			; turn off timer
  8609 0000040E B401                    		mov	ah, 1
  8610 00000410 CD1A                    		int	1Ah		; CLOCK	- SET TIME OF DAY
  8611                                  					; CX:DX	= clock	count
  8612                                  					; Return: time of day set
  8613                                  		;pop	ds:daycnt
  8614 00000412 8F06[F004]              		pop	word [daycnt]
  8615 00000416 FB                      		sti
  8616                                  		;cmp	ds:havecmosclock, 0
  8617 00000417 803E[F304]00            		cmp	byte [havecmosclock], 0
  8618 0000041C 740A                    		jz	short no_cmos_2
  8619 0000041E FF1E[0605]              		call	far [daycnttoday]
  8620                                  		;call	ds:daycnttoday	; call far [daycnttoday]
  8621                                  					; convert to bcd format
  8622 00000422 FA                      		cli
  8623 00000423 B405                    		mov	ah, 5
  8624 00000425 CD1A                    		int	1Ah		; CLOCK	- SET DATE IN REAL TIME	CLOCK (AT,XT286,CONV,PS)
  8625                                  					; DL = day in BCD, DH =	month in BCD, CL = year	in BCD
  8626                                  					; CH = century (19h or 20h)
  8627                                  					; Return: CMOS clock set
  8628 00000427 FB                      		sti
  8629                                  no_cmos_2:
  8630                                  		; 12/12/2022
  8631                                  		; cf=0				
  8632                                  		;clc
  8633 00000428 C3                      		retn
  8634                                  
  8635                                  ; ---------------------------------------------------------------------------
  8636                                  
  8637                                  ; 15/10/2022
  8638                                  
  8639                                  ;----------------------------------------------------------------------------
  8640                                  ; gettime reads date and time
  8641                                  ; and returns the following information:
  8642                                  ;
  8643                                  ;	es:[di]  =count of days since 1-1-80
  8644                                  ;	es:[di+2]=hours
  8645                                  ;	es:[di+3]=minutes
  8646                                  ;	es:[di+4]=seconds
  8647                                  ;	es:[di+5]=hundredths of seconds
  8648                                  ;
  8649                                  ;	NOTE:  Any changes in this routine probably require corresponding
  8650                                  ;	changes in the version that is built with the power manager driver.
  8651                                  ;	See ptime.asm.
  8652                                  ;----------------------------------------------------------------------------
  8653                                  
  8654                                  tim_read:				; 2C7h:435h = 70h:29A5h
  8655 00000429 E84E00                  		call	GetTickCnt
  8656 0000042C 8B36[F004]              		mov	si, [daycnt]
  8657                                  
  8658                                  ; we now need to convert the time in tick to the time in 100th of
  8659                                  ; seconds. the relation between tick and seconds is:
  8660                                  ;
  8661                                  ;		 65,536 seconds
  8662                                  ;	       ----------------
  8663                                  ;		1,193,180 tick
  8664                                  ;
  8665                                  ; to get to 100th of second we need to multiply by 100. the equation is:
  8666                                  ;
  8667                                  ;	ticks from clock  * 65,536 * 100
  8668                                  ;      --------------------------------- = time in 100th of seconds
  8669                                  ;		1,193,180
  8670                                  ;
  8671                                  ; fortunately this formula simplifies to:
  8672                                  ;
  8673                                  ;	ticks from clock * 5 * 65,536
  8674                                  ;      --------------------------------- = time in 100th of seconds
  8675                                  ;		59,659
  8676                                  ;
  8677                                  ; the calculation is done by first multipling tick by 5. next we divide by
  8678                                  ; 59,659. in this division we multiply by 65,536 by shifting the dividend
  8679                                  ; my 16 bits to the left.
  8680                                  ;
  8681                                  ; start with ticks in cx:dx
  8682                                  ; multiply by 5
  8683                                  
  8684 00000430 89C8                    		mov	ax, cx
  8685 00000432 89D3                    		mov	bx, dx		; start	with ticks in cx:dx
  8686                                  					; multiply by 5
  8687 00000434 D1E2                    		shl	dx, 1
  8688 00000436 D1D1                    		rcl	cx, 1		; times	2
  8689 00000438 D1E2                    		shl	dx, 1
  8690 0000043A D1D1                    		rcl	cx, 1		; times	4
  8691 0000043C 01DA                    		add	dx, bx
  8692 0000043E 11C8                    		adc	ax, cx		; times	5
  8693 00000440 92                      		xchg	ax, dx
  8694                                  
  8695                                  ; now have ticks * 5 in	dx:ax
  8696                                  ; we now need to multiply by 65536 and divide by 59659 d.
  8697                                  
  8698 00000441 B90BE9                  		mov	cx, 59659	; get divisor
  8699 00000444 F7F1                    		div	cx		; dx now has remainder
  8700                                  					; ax has high word of final quotient
  8701 00000446 89C3                    		mov	bx, ax		; put high word	in safe	place
  8702 00000448 31C0                    		xor	ax, ax		; this is the multiply by 65536
  8703 0000044A F7F1                    		div	cx		; bx:ax	now has	time in	100th of seconds
  8704                                  
  8705                                  ; rounding based on the	remainder may be added here
  8706                                  ; the result in	bx:ax is time in 1/100 second.
  8707                                  
  8708 0000044C 89DA                    		mov	dx, bx		
  8709 0000044E B9C800                  		mov	cx, 200		;extract 1/100's
  8710                                  
  8711                                  ; division by 200 is necessary to ensure no overflow--max result
  8712                                  ; is number of seconds in a day/2 = 43200.
  8713                                  
  8714 00000451 F7F1                    		div	cx
  8715 00000453 80FA64                  		cmp	dl, 100		; remainder over 100?
  8716 00000456 7203                    		jb	short noadj
  8717 00000458 80EA64                  		sub	dl, 100		; keep 1/100's less than 100
  8718                                  noadj:					
  8719 0000045B F5                      		cmc			; if we	subtracted 100,	carry is now set
  8720 0000045C 88D3                    		mov	bl, dl		; save 1/100's
  8721                                  
  8722                                  ; to compensate	for dividing by	200 instead of 100, we now multiply
  8723                                  ; by two, shifting a one in if the remainder had exceeded 100.
  8724                                  
  8725 0000045E D1D0                    		rcl	ax, 1		
  8726 00000460 B200                    		mov	dl, 0
  8727 00000462 D1D2                    		rcl	dx, 1
  8728 00000464 B93C00                  		mov	cx, 60		; divide out seconds
  8729 00000467 F7F1                    		div	cx
  8730 00000469 88D7                    		mov	bh, dl		; save the seconds
  8731 0000046B F6F1                    		div	cl		; break	into hours and minutes
  8732 0000046D 86C4                    		xchg	al, ah
  8733                                  
  8734                                  ; time is now in ax:bx (hours, minutes, seconds, 1/100 sec)
  8735                                  
  8736 0000046F 50                      		push	ax
  8737 00000470 89F0                    		mov	ax, si		; daycnt
  8738 00000472 AB                      		stosw
  8739 00000473 58                      		pop	ax
  8740 00000474 AB                      		stosw
  8741 00000475 89D8                    		mov	ax, bx
  8742 00000477 AB                      		stosw
  8743 00000478 F8                      		clc
  8744 00000479 C3                      		retn
  8745                                  
  8746                                  ; =============== S U B	R O U T	I N E =======================================
  8747                                  
  8748                                  ; 15/10/2022
  8749                                  
  8750                                  ;----------------------------------------------------------------------------
  8751                                  ;
  8752                                  ; procedure : GetTickCnt
  8753                                  ;
  8754                                  ;		Returns the tick count in CX:DX. Takes care of DayCnt in case
  8755                                  ;		of rollover [except when power management driver is in use]. 
  8756                                  ;		Uses the following logic for updating Daycnt
  8757                                  ;
  8758                                  ;		if ( rollover ) {
  8759                                  ;			if ( t_switch )
  8760                                  ;				daycnt++ ;
  8761                                  ;			else
  8762                                  ;				daycnt += rollover ;
  8763                                  ;		}
  8764                                  ;
  8765                                  ; USES : AX
  8766                                  ;
  8767                                  ; RETURNS : CX:DX - tick count
  8768                                  ; MODIFIES : daycnt
  8769                                  ;
  8770                                  ;----------------------------------------------------------------------------
  8771                                  
  8772                                  		; 17/10/2022
  8773                                  GetTickCnt:	
  8774 0000047A 30E4                    		xor	ah, ah
  8775 0000047C CD1A                    		int	1Ah		; CLOCK	- GET TIME OF DAY
  8776                                  					; Return: CX:DX	= clock	count
  8777                                  					; AL = 00h if clock was	read or	written	(via AH=0,1) since the previous
  8778                                  					; midnight
  8779                                  					; Otherwise, AL	> 0
  8780 0000047E 803E[F204]00            		cmp	byte [t_switch], 0 ; use old method ? (>0 is yes)
  8781 00000483 7507                    		jnz	short inc_case	; old method assumes  that Int 1Ah returns rollover flag
  8782 00000485 30E4                    		xor	ah, ah		; new method assumes that Int 1Ah returns roll over count
  8783                                  					; and not flag
  8784 00000487 0106[F004]              		add	[daycnt], ax
  8785 0000048B C3                      		retn
  8786                                  ; ---------------------------------------------------------------------------
  8787                                  
  8788                                  inc_case:				
  8789 0000048C 08C0                    		or	al, al
  8790 0000048E 7404                    		jz	short no_rollover
  8791 00000490 FF06[F004]              		inc	word [daycnt]
  8792                                  no_rollover:				
  8793 00000494 C3                      		retn
  8794                                  
  8795                                  ;----------------------------------------------------------------------------
  8796                                  ; MSDISK.ASM - MSDOS 6.0 - 1991
  8797                                  ;----------------------------------------------------------------------------
  8798                                  ; 15/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
  8799                                  ; 09/03/2019 - Retro DOS v4.0
  8800                                  
  8801                                  ; MSDISK.ASM - MSDOS 3.3 - 02/02/1988
  8802                                  ; 26/05/2018 - Retro DOS v3.0
  8803                                  ; 23/03/2018 - Retro DOS v2.0
  8804                                  
  8805                                  ;error_unknown_media equ	7	; for use in BUILD BPB call
  8806                                  
  8807                                  ;struc BPB_TYPE
  8808                                  ;.SECSIZE:	resw 1
  8809                                  ;.SECALL:	resb 1
  8810                                  ;.RESNUM:	resw 1
  8811                                  ;.FATNUM:	resb 1
  8812                                  ;.DIRNUM:	resw 1
  8813                                  ;.SECNUM:	resw 1
  8814                                  ;.FATID:	resb 1
  8815                                  ;.FATSIZE:	resw 1
  8816                                  ;.SLIM:		resw 1
  8817                                  ;.HLIM:		resw 1
  8818                                  ;.HIDDEN:	resw 1
  8819                                  ;.size:
  8820                                  ;endstruc
  8821                                  
  8822                                  ;-----------------------------------------------------------------
  8823                                  ;	disk interface routines
  8824                                  ;-----------------------------------------------------------------
  8825                                  
  8826                                  ; device attribute bits:
  8827                                  ;	bit 6 - get/set map for logical drives and generic ioctl.
  8828                                  
  8829                                  ;MAXERR		equ	5
  8830                                  ;MAX_HD_FMT_ERR	equ	2
  8831                                  
  8832                                  ;LSTDRV	equ 504h
  8833                                  
  8834                                  ; some floppies do not have changeline. as a result, media-check would
  8835                                  ; normally return i-don't-know, the dos would continually reread the fat and
  8836                                  ; discard cached data. we optimize this by implementing a logical door-latch:
  8837                                  ; it is physically impossible to change a disk in under 2 seconds. we retain
  8838                                  ; the time of the last successful disk operation and compare it with the current
  8839                                  ; time during media-check. if < 2 seconds and at least 1 timer tick has passed,
  8840                                  ; the we say no change. if > 2 seconds then we say i-don't-know. finally, 
  8841                                  ; since we cannot trust the timer to be always available, we record the number 
  8842                                  ; of media checks that have occurred when no apparent time has elapsed. while
  8843                                  ; this number is < a given threshold, we say no change. when it exceeds that
  8844                                  ; threshold, we say i-don't-know and reset the counter to 0. when we store 
  8845                                  ; the time of last successful access, if we see that time has passed too,
  8846                                  ; we reset the counter.
  8847                                  
  8848                                  accessmax	equ	5
  8849                                  
  8850                                  ; due to various bogosities, we need to continually adjust what the head
  8851                                  ; settle time is.  the following algorithm is used:
  8852                                  ;
  8853                                  ;   get the current head settle value.
  8854                                  ;   if it is 0, then
  8855                                  ;	set slow = 15
  8856                                  ;   else
  8857                                  ;	set slow = value
  8858                                  ;   ...
  8859                                  ;*********************************************
  8860                                  ;************ old algorithm ******************
  8861                                  ;*   if we are seeking and writing then
  8862                                  ;*	 use slow
  8863                                  ;*   else
  8864                                  ;*	 use fast
  8865                                  ;*********************************************
  8866                                  ;*********** ibm's requested logic ***********
  8867                                  ;   if we are seeking and writing and not on an at then
  8868                                  ;	use slow
  8869                                  ;   else
  8870                                  ;	use fast
  8871                                  ;   ...
  8872                                  ;   restore current head settle value
  8873                                  ;
  8874                                  ;
  8875                                  ;---------------------------------------
  8876                                  multrk_on	equ	10000000b	;user spcified mutitrack=on, or system turns
  8877                                  					; it on after handling config.sys file as a
  8878                                  					; default value, if multrk_flag = multrk_off1.
  8879                                  multrk_off1	equ	00000000b	;initial value. no "multitrack=" command entered.
  8880                                  multrk_off2	equ	00000001b	;user specified multitrack=off.
  8881                                  
  8882                                  ; close data segment, open Bios_Code segment
  8883                                  
  8884                                  ; 15/10/2022
  8885                                  
  8886                                  ; BIOSCODE:04A2h (MSDOS 6.21, IO.SYS)
  8887                                  
  8888                                  ;-----------------------------------------------------------------
  8889                                  ;	command jump table
  8890                                  ;-----------------------------------------------------------------
  8891                                  
  8892 00000495 00                      		db 0
  8893                                  
  8894                                  ; 11/12/2022
  8895                                  %if 0
  8896                                  
  8897                                  dsktbl:		db 26			; 2C7h:4A2h = 70h:2A12h
  8898                                  					; ((dtbl_siz-1)/2) ; this is the size of the table ; 26
  8899                                  		dw 1742h		; dsk_init
  8900                                  		dw 4EBh			; media_chk
  8901                                  		dw 592h			; get_bpb
  8902                                  		dw 0D5h			; bc_cmderr
  8903                                  		dw 857h			; dsk_read
  8904                                  		dw 83Dh			; x_bus_exit
  8905                                  		dw 558h			; ret_carry_clear
  8906                                  		dw 558h			; ret_carry_clear
  8907                                  		dw 849h			; dsk_writ
  8908                                  		dw 841h			; dsk_writv
  8909                                  		dw 558h			; ret_carry_clear
  8910                                  		dw 558h			; ret_carry_clear
  8911                                  		dw 0D5h			; bc_cmderr
  8912                                  		dw 80Ah			; dsk_open
  8913                                  		dw 81Ah			; dsk_close
  8914                                  		dw 831h			; dsk_rem
  8915                                  		dw 558h			; ret_carry_clear
  8916                                  		dw 558h			; ret_carry_clear
  8917                                  		dw 558h			; ret_carry_clear
  8918                                  		dw 0C6Bh		; do_generic_ioctl
  8919                                  		dw 558h			; ret_carry_clear
  8920                                  		dw 558h			; ret_carry_clear
  8921                                  		dw 558h			; ret_carry_clear
  8922                                  		dw 1124h		; ioctl_getown
  8923                                  		dw 1142h		; ioctl_setown
  8924                                  		dw 129Ah		; ioctl_support_query
  8925                                  
  8926                                  ;dtbl_siz equ $-dsktbl
  8927                                  
  8928                                  %endif
  8929                                  		; 11/12/2022
  8930 00000496 1A                      dsktbl:		db (dtbl_siz-1)/2	; 26 ; this is the size of the table
  8931 00000497 [E916]                  		dw dsk_init
  8932 00000499 [DF04]                  		dw media_chk
  8933 0000049B [8505]                  		dw get_bpb
  8934 0000049D [D500]                  		dw bc_cmderr
  8935 0000049F [3708]                  		dw dsk_read
  8936 000004A1 [1D08]                  		dw x_bus_exit
  8937 000004A3 [4B05]                  		dw ret_carry_clear
  8938 000004A5 [4B05]                  		dw ret_carry_clear
  8939 000004A7 [2908]                  		dw dsk_writ
  8940 000004A9 [2108]                  		dw dsk_writv
  8941 000004AB [4B05]                  		dw ret_carry_clear
  8942 000004AD [4B05]                  		dw ret_carry_clear
  8943 000004AF [D500]                  		dw bc_cmderr
  8944 000004B1 [ED07]                  		dw dsk_open
  8945 000004B3 [FC07]                  		dw dsk_close
  8946 000004B5 [1208]                  		dw dsk_rem
  8947 000004B7 [4B05]                  		dw ret_carry_clear
  8948 000004B9 [4B05]                  		dw ret_carry_clear
  8949 000004BB [4B05]                  		dw ret_carry_clear
  8950 000004BD [460C]                  		dw do_generic_ioctl
  8951 000004BF [4B05]                  		dw ret_carry_clear
  8952 000004C1 [4B05]                  		dw ret_carry_clear
  8953 000004C3 [4B05]                  		dw ret_carry_clear
  8954 000004C5 [EC10]                  		dw ioctl_getown
  8955 000004C7 [0911]                  		dw ioctl_setown
  8956 000004C9 [5812]                  		dw ioctl_support_query
  8957                                  
  8958                                  dtbl_siz equ $-dsktbl
  8959                                  
  8960                                  ; =============== S U B	R O U T	I N E =======================================
  8961                                  
  8962                                  ; ---------------------------------------------------------------------------
  8963                                  ; setdrive scans through the data structure of bdss, and returns a pointer to
  8964                                  ; the one that belongs to the drive specified. carry is set if none exists
  8965                                  ; for the drive. Pointer is returned in es:[di]
  8966                                  ;
  8967                                  ;  AL contains the logical drive number.
  8968                                  ; ---------------------------------------------------------------------------
  8969                                  
  8970                                  SetDrive:	
  8971                                  		;les	di, ds:start_bds ; Point es:di to first bds	
  8972 000004CB C43E[1901]              		les	di, [start_bds] ; 19/10/2022
  8973                                  X_Scan_Loop:				
  8974 000004CF 26384505                		cmp	[es:di+5], al	
  8975 000004D3 7409                    		jz	short X_SetDrv
  8976 000004D5 26C43D                  		les	di, [es:di]	; [es:di+BDS.link] ; Go	to next	bds
  8977 000004D8 83FFFF                  		cmp	di, 0FFFFh
  8978 000004DB 75F2                    		jnz	short X_Scan_Loop
  8979 000004DD F9                      		stc
  8980                                  X_SetDrv:				
  8981 000004DE C3                      		retn
  8982                                  
  8983                                  ; ---------------------------------------------------------------------------
  8984                                  
  8985                                  ; 15/10/2022
  8986                                  
  8987                                  ; ---------------------------------------------------------------------
  8988                                  ; if id is f9, have a 96tpi disk else
  8989                                  ; if bit 2 is 0 then media is not removable and could not have changed
  8990                                  ;  otherwise if within 2 secs of last disk operation media could not
  8991                                  ;    have changed, otherwise dont know if media has changed
  8992                                  ; ---------------------------------------------------------------------
  8993                                  
  8994                                  media_chk:				; 2C7h:4EBh = 70h:2A5Bh
  8995 000004DF E8E9FF                  		call	SetDrive
  8996 000004E2 BE0100                  		mov	si, 1
  8997 000004E5 26F6452401              		test	byte [es:di+24h], 1 ; [es:di+BDS.flags+1]
  8998                                  					; fchanged_by_format
  8999 000004EA 7416                    		jz	short WeAreNotFakingIt
  9000                                  		; 12/12/2022
  9001 000004EC 26806524FE              		and	byte [es:di+24h], 0FEh ; ~fchanged_by_format
  9002                                  		;and	word [es:di+23h], 0FEFFh ; [es:di+BDS.flags]
  9003                                  					; ~fchanged_by_format ;	reset flag
  9004 000004F1 C606[1E01]FF            		mov	byte [tim_drv], 0FFh ; -1
  9005                                  					; Ensure that we ask the rom if media has changed
  9006 000004F6 26F6452301              		test	byte [es:di+23h], 1 ; [es:di+BDS.flags]
  9007                                  					; fnon_removable
  9008 000004FB 740C                    		jz	short wehaveafloppy
  9009 000004FD BEFFFF                  		mov	si, 0FFFFh	; Indicate media changed
  9010 00000500 EB2C                    		jmp	short Media_Done ; Media_Done
  9011                                  ; ---------------------------------------------------------------------------
  9012                                  
  9013                                  WeAreNotFakingIt:
  9014                                  		;test	byte [es:di+BDS.flags], fnon_removable			
  9015 00000502 26F6452301              		test	byte [es:di+23h], 1
  9016 00000507 7525                    		jnz	short Media_Done
  9017                                  wehaveafloppy:				
  9018 00000509 31F6                    		xor	si, si		; Presume "I don't know"
  9019                                  
  9020                                  		; If we have a floppy with changeline support, we ask the ROM
  9021                                  		; to determine if media has changed. We do not perform the
  9022                                  		; 2 second check for these drives.
  9023                                  
  9024 0000050B 803E[7700]00            		cmp	byte [fhave96], 0	; Do we	have changeline	support?
  9025 00000510 740A                    		jz	short mChk_NoChangeLine	; Brif not
  9026 00000512 E89F12                  		call	mediacheck	;  Call	into removable routine
  9027 00000515 7236                    		jb	short err_exitj
  9028 00000517 E8F713                  		call	haschange
  9029 0000051A 7512                    		jnz	short Media_Done
  9030                                  mChk_NoChangeLine:
  9031                                  		; If we come here, we have a floppy with no changeline support
  9032                                  			
  9033 0000051C BE0100                  		mov	si, 1		; Presume no change
  9034 0000051F A0[1E01]                		mov	al, [tim_drv]	; Last drive accessed
  9035 00000522 263A4504                		cmp	al, [es:di+4]	; [es:di+BDS.drivenum]
  9036                                  					; Is drive of last access the same?
  9037 00000526 7505                    		jnz	short Media_Unk	; No, then "i don't know"
  9038 00000528 E82800                  		call	Check_Time_Of_Access
  9039 0000052B EB01                    		jmp	short Media_Done
  9040                                  ; ---------------------------------------------------------------------------
  9041                                  
  9042                                  Media_Unk:				
  9043 0000052D 4E                      		dec	si		; ; Return "I don't know"
  9044                                  
  9045                                  		; SI now contains the correct value for media change.
  9046                                  		; Clean up the left overs
  9047                                  Media_Done:	
  9048                                  		; 19/10/2022			
  9049 0000052E 06                      		push	es
  9050 0000052F C41E[1200]              		les	bx, [ptrsav]
  9051 00000533 2689770E                		mov	[es:bx+0Eh], si	; [es:bx+trans]
  9052 00000537 07                      		pop	es
  9053 00000538 09F6                    		or	si, si
  9054 0000053A 790F                    		jns	short ret_carry_clear ;	volidok
  9055 0000053C 803E[7700]00            		cmp	byte [fhave96], 0
  9056 00000541 7403                    		jz	short mChk1_NoChangeLine ; Brif	no changeline support
  9057 00000543 E85713                  		call	media_set_vid
  9058                                  mChk1_NoChangeLine:			
  9059 00000546 C606[1E01]FF            		mov	byte [tim_drv], 0FFh ; -1
  9060                                  					; Make sure we ask rom for media check
  9061                                  ret_carry_clear:			
  9062 0000054B F8                      		clc			; volidok
  9063 0000054C C3                      		retn
  9064                                  ; ---------------------------------------------------------------------------
  9065                                  
  9066                                  err_exitj:				
  9067 0000054D E88106                  		call	maperror	; guaranteed to	set carry
  9068                                  ret81:					
  9069 00000550 B481                    		mov	ah, 81h		; return error status
  9070 00000552 C3                      		retn			; return with carry set
  9071                                  
  9072                                  ; =============== S U B	R O U T	I N E =======================================
  9073                                  
  9074                                  ; ---------------------------------------------------------------------------
  9075                                  ; perform a check on the time passed since the last access for this physical
  9076                                  ; drive.
  9077                                  ; we are accessing the same drive. if the time of last successful access was
  9078                                  ; less than 2 seconds ago, then we may presume that the disk was not changed.
  9079                                  ; returns in si:
  9080                                  ;	0 - if time of last access was >= 2 seconds
  9081                                  ;	1 - if time was < 2 seconds (i.e no media change assumed)
  9082                                  ; registers affected ax,cx,dx, flags.
  9083                                  ;
  9084                                  ;	assume es:di -> bds, ds->Bios_Data
  9085                                  ; ---------------------------------------------------------------------------
  9086                                  
  9087                                  		; 19/10/2022
  9088                                  Check_Time_Of_Access:
  9089 00000553 BE0100                  		mov	si, 1		; presume no change.
  9090 00000556 E821FF                  		call	GetTickCnt	; cx:dx	is the elapsed time
  9091 00000559 268B4547                		mov	ax, [es:di+47h]	; [es:di+BDS.tim_lo]
  9092                                  					; get stored time
  9093 0000055D 29C2                    		sub	dx, ax
  9094 0000055F 268B4549                		mov	ax, [es:di+49h]	; [es:di+BDS.tim_hi]
  9095 00000563 19C1                    		sbb	cx, ax
  9096 00000565 751A                    		jnz	short timecheck_unk ; cx<>0 => >1 hour
  9097 00000567 09D2                    		or	dx, dx		; time must pass
  9098 00000569 7511                    		jnz	short timepassed ; yes, examine max value
  9099 0000056B FE06[1D01]              		inc	byte [accesscount]
  9100 0000056F 803E[1D01]05            		cmp	byte [accesscount], 5 
  9101                                  					; if count is less than threshold, ok
  9102 00000574 720C                    		jb	short timecheck_ret
  9103 00000576 FE0E[1D01]              		dec	byte [accesscount] ; don't let the count wrap
  9104 0000057A EB05                    		jmp	short timecheck_unk ; "i don't know" if media changed
  9105                                  ; ---------------------------------------------------------------------------
  9106                                  
  9107                                  timepassed:				
  9108 0000057C 83FA24                  		cmp	dx, 36		; 18*2 ; 18.2 tics per second.
  9109                                  					; min elapsed time? (2 seconds)
  9110 0000057F 7601                    		jbe	short timecheck_ret ; yes, presume no change
  9111                                  
  9112                                  		; everything indicates that we do not know what has happened.
  9113                                  timecheck_unk:				
  9114 00000581 4E                      		dec	si		; presume i don't know
  9115                                  timecheck_ret:				
  9116 00000582 C3                      		retn
  9117                                  
  9118                                  ; ---------------------------------------------------------------------------
  9119                                  ; 15/10/2022
  9120                                  Err_Exitj2:
  9121 00000583 EBC8                    		jmp	short err_exitj
  9122                                  
  9123                                  ; ---------------------------------------------------------------------------
  9124                                  
  9125                                  ; 15/10/2022
  9126                                  
  9127                                  ; ==========================================================================
  9128                                  ; Build a valid bpb for the disk in the drive.
  9129                                  ; ==========================================================================
  9130                                  
  9131                                  		; 19/10/2022
  9132                                  get_bpb:				; 2C7h:592h = 70h:2B02h
  9133 00000585 268A25                  		mov	ah, [es:di]	; get fat id byte read by dos
  9134 00000588 E840FF                  		call	SetDrive	; get the correct bds for the drive
  9135 0000058B 26F6452301              		test	byte [es:di+23h], 1 ; [es:di+BDS.flags]
  9136                                  					; fnon_removable
  9137 00000590 7523                    		jnz	short already_gotbpb ; no need to build	for fixed disks
  9138                                  
  9139                                  		; let's set the default value for volid,vol_serial,
  9140                                  		; filesys_id in bds table
  9141                                  
  9142 00000592 E83700                  		call	clear_ids
  9143                                  		;mov	ds:set_id_flag,	1 ; indicate to	set system id in bds
  9144 00000595 C606[0A05]01            		mov	byte [set_id_flag], 1
  9145 0000059A E85B00                  		call	GetBp		; build	a bpb if necessary
  9146 0000059D 72B1                    		jb	short ret81
  9147                                  		;cmp	ds:set_id_flag,	2 ; already, volume_label set from boot
  9148 0000059F 803E[0A05]02            		cmp	byte [set_id_flag], 2
  9149                                  		;mov	ds:set_id_flag,	0 ; record to bds table?
  9150 000005A4 C606[0A05]00            		mov	byte [set_id_flag], 0
  9151 000005A9 740A                    		jz	short already_gotbpb ; do not set it again from	root dir
  9152                                  					; otherwise, conventional boot record
  9153                                  		;cmp	ds:fhave96, 0	; do we	have changeline	support?
  9154 000005AB 803E[7700]00            		cmp	byte [fhave96], 0
  9155 000005B0 7403                    		jz	short already_gotbpb ; brif not
  9156 000005B2 E86213                  		call	set_volume_id
  9157                                  already_gotbpb:				
  9158 000005B5 83C706                  		add	di, 6		; BDS.BPB
  9159                                  					; return the bpb from the current bds
  9160                                  
  9161                                  ;		 fall into setptrsav, es:di -> result
  9162                                  
  9163                                  ; ---------------------------------------------------------------------------
  9164                                  
  9165                                  ; 15/10/2022
  9166                                  
  9167                                  ; ==========================================================================
  9168                                  ;Setptrsav is also jumped to from dsk_init (msbio2.asm). In both cases, the
  9169                                  ;pointer to be returned is in es:di. We were incorrectly returning ds:di.
  9170                                  ;Note that this works in most cases because most pointers are in Bios_Data.
  9171                                  ;It fails, for instance, when we install an external drive using driver.sys
  9172                                  ;because then the BDS segment is no longer Bios_Data. 
  9173                                  ;NB: It is fine to corrupt cx because this is not a return value and anyway
  9174                                  ;this returns to Chardev_entry (msbio1.asm) where all registers are 
  9175                                  ;restored before returning to the caller.
  9176                                  ; ==========================================================================
  9177                                  
  9178                                  		; 19/10/2022
  9179                                  SetPtrSav:	; return point for dsk_init				
  9180 000005B8 8CC1                    		mov	cx, es		; save es
  9181                                  		;les	bx, ds:ptrsav
  9182 000005BA C41E[1200]              		les	bx, [ptrsav]
  9183 000005BE 2688670D                		mov	[es:bx+0Dh], ah	; [es:bx+media]
  9184 000005C2 26897F12                		mov	[es:bx+12h], di	; [es:bx+count]
  9185 000005C6 26894F14                		mov	[es:bx+14h], cx	; [es:bx+count+2]
  9186 000005CA F8                      		clc
  9187 000005CB C3                      		retn
  9188                                  
  9189                                  ; =============== S U B	R O U T	I N E =======================================
  9190                                  
  9191                                  ; 15/10/2022
  9192                                  
  9193                                  ; -----------------------------------------------------
  9194                                  ; clear ids in bds table. only applied for floppies.
  9195                                  ;input:  es:di -> bds table
  9196                                  ;	assumes ds: -> Bios_Data
  9197                                  ;output: volid set to "NO NAME    "
  9198                                  ;	 vol_serial set to 0.
  9199                                  ;	 filesys_id set to "FAT12   " or "FAT16   "
  9200                                  ;	   depending on the flag fatsize in bds.
  9201                                  ;
  9202                                  ;	trashes si, cx
  9203                                  ; -----------------------------------------------------
  9204                                  
  9205                                  ;size_of_EXT_BOOT_VOL_LABEL equ 11
  9206                                  ;size_of_EXT_SYSTEM_ID equ 8
  9207                                  
  9208                                  clear_ids:
  9209                                  		; 11/09/2023 - Retro DOS v4.1 IO.SYS (Optimization & BugFix)
  9210 000005CC 268A451F                		mov	al, [es:di+1Fh] ; mov al,[es:di+BDS.fatsiz]
  9211                                  clear_ids_x:	; 11/09/2023		
  9212                                   		; (MSDOS 5.0 IO.SYS - BIOSCODE:05D9h)
  9213 000005D0 57                      		push	di
  9214 000005D1 31C9                    		xor	cx, cx		; no serial number
  9215 000005D3 26894D57                		mov	[es:di+57h], cx	; [es:di+BDS.vol_serial]
  9216 000005D7 26894D59                		mov	[es:di+59h], cx	; [es:di+BDS.vol_serial+2]
  9217                                  
  9218                                  		; BUGBUG - there's a lot in common here and with
  9219                                  		; mov_media_ids.. see if we can save some space by
  9220                                  		; merging them... jgl
  9221                                  
  9222                                  		;mov	cx, 11		; size_of_EXT_BOOT_VOL_LABEL
  9223                                  		; 10/12/2022
  9224 000005DB B10B                    		mov	cl, 11 ; cx = 11		
  9225                                  
  9226                                  		;mov	si, offset vol_no_name ; "NO NAME    "
  9227 000005DD BE[1D05]                		mov	si, vol_no_name	; 19/10/2022
  9228 000005E0 83C74B                  		add	di, 75		; BDS.volid
  9229 000005E3 F3A4                    		rep movsb
  9230                                  		
  9231                                  		; 11/09/2023 (BugFix, DI is not start addr of BDS structure here)
  9232                                  		;;test	byte [es:di+BDS.fatsiz], fbig
  9233                                  		; (MSDOS 5.0 IO.SYS - BIOSCODE:05EFh)
  9234                                  		;test	byte [es:di+1Fh], 40h
  9235                                  
  9236                                  			; ! NOTE - 11/08/2023 - Erdogan Tan (Retro DOS v4.2 IO.SYS bugfix)
  9237                                  			; Microsoft/IBM code has a bug here because the BDS's
  9238                                  			; .volid and .filesys_id fields will be reset
  9239                                  			; (to their default text) according to 'BDS.fatsiz' flags
  9240                                  			; at the BDS offset 31 but current (this) code checks flags
  9241                                  			; at ES:DI+31 while DI points the BDS offset 86!?
  9242                                  			;
  9243                                  			; Correct Code:
  9244                                  			; ;test byte [ES:31],40h or [ES:BDS.fatsiz],fbig
  9245                                  			; 11/09/2023
  9246                                  			; (before 'rep movsb') 'mov al,[es:di+BDS.Fatsiz]' and then
  9247                                  			; (after 'rep movsb') 'test al,fbig' (AL is free/proper to use here)	
  9248                                  			;
  9249                                  			; Same BUG is existing in PCDOS 7.1 IBMBIO.COM - BIOSCODE:06C3h
  9250                                  			; and in Windows ME IO.SYS - BIOSCODE:0E1Ah as 'test byte [es:di+59],20h'
  9251                                  			; (PCDOS 7.1 BUG note: 26/06/2023)
  9252                                  			;
  9253                                  			; (Why this bug did not affect MSDOS and PCDOS 7.x applications:
  9254                                  			; 'clear_ids' is used for floppy disks only and the default
  9255                                  			; option of 'clear_ids' is FAT12 volid and filesys_id text
  9256                                  			; when the flag bit has wrong value for FAT16/40h or FAT32/20h.)
  9257                                  
  9258 000005E5 A840                    		test	al, 40h ; * 
  9259                                  		
  9260                                  		;mov	si, offset fat_16_id ; "FAT16	"
  9261 000005E7 BE[1405]                		mov	si, fat_16_id	; 19/10/2022
  9262 000005EA 7503                    		jnz	short ci_bigfat
  9263                                  		;mov	si, offset fat_12_id ; "FAT12	"
  9264 000005EC BE[0B05]                		mov	si, fat_12_id	 ; 19/10/2022
  9265                                  ci_bigfat:				
  9266                                  		;mov	cx, 8		; size_of_EXT_SYSTEM_ID
  9267                                  		; 10/12/2022
  9268 000005EF B108                    		mov	cl, 8 ; cx = 8 
  9269 000005F1 83C705                  		add	di, 5		; (BDS.filesys_id-BDS.volid)-size_of_EXT_BOOT_VOL_LABEL
  9270                                  					; filesys_id field
  9271 000005F4 F3A4                    		rep movsb
  9272 000005F6 5F                      		pop	di		; restore bds pointer
  9273 000005F7 C3                      		retn
  9274                                  
  9275                                  ; =============== S U B	R O U T	I N E =======================================
  9276                                  
  9277                                  ; 15/10/2022
  9278                                  
  9279                                  ; ---------------------------------------------------------------------------
  9280                                  ;	getbp - return bpb from the drive specified by the bds.
  9281                                  ;	    if the return_fake_bpb flag is set, then it does nothing.
  9282                                  ;	    note that we never come here for fixed disks.
  9283                                  ;	    for all other cases,
  9284                                  ;	      - it reads boot sector to pull out the bpb
  9285                                  ;	      - if no valid bpb is found, it then reads the fat sector,
  9286                                  ;		to get the fat id byte to build the bpb from there.
  9287                                  ;
  9288                                  ;   inputs:	es:di point to correct bds.
  9289                                  ;
  9290                                  ;   outputs:	fills in bpb in current bds if valid bpb or fat id on disk.
  9291                                  ;		carry set, and al=7 if invalid disk.
  9292                                  ;		carry set and error code in al if other error.
  9293                                  ;		if failed to recognize the boot record, then will set the
  9294                                  ;		set_id_flag to 0.
  9295                                  ;		this routine will only work for a floppy diskette.
  9296                                  ;		     for a fixed disk, it will just return.
  9297                                  ;
  9298                                  ;	****** Note: getbp is a clone of getbp which uses the newer
  9299                                  ;	  segment definitions. It should be migrated towards.
  9300                                  ;	   now es:di has the bds, ds: has Bios_Data
  9301                                  ; ---------------------------------------------------------------------------
  9302                                  
  9303                                  GetBp:		; if returning fake bpb then return bpb as is.
  9304                                  		;test	byte [es:di+BDS.flags], return_fake_bpb|fnon_removable		
  9305 000005F8 26F6452305              		test	byte [es:di+23h], 5
  9306 000005FD 7403                    		jz	short getbp1	; getbp1
  9307 000005FF E99500                  		jmp	getret_exit
  9308                                  ; ---------------------------------------------------------------------------
  9309                                  
  9310                                  getbp1:					
  9311 00000602 51                      		push	cx
  9312 00000603 52                      		push	dx
  9313 00000604 53                      		push	bx
  9314                                  
  9315                                  		; attempt to read in boot sector and determine bpb.
  9316                                  		; we assume that the 2.x and greater dos disks all
  9317                                  		; have a valid boot sector.
  9318                                  
  9319 00000605 E8A400                  		call	readbootsec
  9320 00000608 7209                    		jb	short getbp_err_ret_brdg ; carry set if there was error.
  9321 0000060A 09DB                    		or	bx, bx		; bx is	0 if boot sector is valid.
  9322 0000060C 7508                    		jnz	short dofatbpb
  9323 0000060E E8F000                  		call	movbpb		; move bpb into	registers
  9324 00000611 EB57                    		jmp	short Has1
  9325                                  ; ---------------------------------------------------------------------------
  9326                                  
  9327                                  getbp_err_ret_brdg:			
  9328 00000613 E98200                  		jmp	getbp_err_ret
  9329                                  ; ---------------------------------------------------------------------------
  9330                                  
  9331                                  		; we have a 1.x diskette. In this case read in the fat ID byte
  9332                                  		; and fill in bpb from there.
  9333                                  dofatbpb:				
  9334 00000616 E85401                  		call	readfat		; puts media descriptor	byte in	ah
  9335 00000619 72F8                    		jb	short getbp_err_ret_brdg
  9336                                  		;cmp	ds:fhave96, 0	;  changeline support available?
  9337 0000061B 803E[7700]00            		cmp	byte [fhave96], 0 ; 19/10/2022
  9338 00000620 7403                    		jz	short bpb_nochangeline ; brif not
  9339 00000622 E88D12                  		call	hidensity	; may not return! May add sp, 2	and
  9340                                  					; jump to has1!!!!!! or	has720K
  9341                                  bpb_nochangeline:		; test for a valid 3.5" medium			
  9342 00000625 26807D2202              		cmp	byte [es:di+22h], 2	; [es:di+BDS.formfactor]
  9343                                  					; ffSmall
  9344 0000062A 7515                    		jnz	short is_floppy
  9345 0000062C 80FCF9                  		cmp	ah, 0F9h	; is it	a valid	fat id byte for	3.5" ?
  9346 0000062F 7571                    		jnz	short got_unknown_medium
  9347                                  Has720K:				
  9348                                  		;mov	bx, offset sm92 ; pointer to correct bpb
  9349 00000631 BB[DE04]                		mov	bx, sm92	; 19/10/2022
  9350                                  
  9351                                  		; es points to segment of bds. the following should be modified
  9352                                  		; to get spf,csec,spau,spt correctly. it had been wrong if
  9353                                  		; driver.sys is loaded since the bds is inside the driver.sys.
  9354                                  
  9355                                  		; 10/12/2022
  9356                                  		;mov	al, [bx+0]	; [bx+bpbtype.spf]
  9357                                  		; 21/12/2022
  9358 00000634 8A07                    		mov	al, [bx]
  9359 00000636 8B4F03                  		mov	cx, [bx+3]	; [bx+bpbtype.csec]
  9360 00000639 8B5705                  		mov	dx, [bx+5]	; [bx+bpbtype.spau]
  9361 0000063C 8B5F01                  		mov	bx, [bx+1]	; [bx+bpbtype.spt]
  9362                                  		; 19/10/2022 - Temporary !
  9363                                  		;db	8Ah, 87h, 0, 0	; mov al, [bx+0]
  9364                                  		;db	8Bh, 8Fh, 3, 0	; mov cx, [bx+3]
  9365                                  		;db	8Bh, 97h, 5, 0	; mov dx, [bx+5]
  9366                                  		;db	8Bh, 9Fh, 1, 0	; mov bx, [bx+1]	
  9367                                  
  9368 0000063F EB29                    		jmp	short Has1
  9369                                  ; ---------------------------------------------------------------------------
  9370                                  
  9371                                  is_floppy:			; must be a 5.25" floppy if we come here
  9372 00000641 80FCF8                  		cmp	ah, 0F8h	; valid	media??	(0F8h-0FFh)
  9373 00000644 725C                    		jb	short got_unknown_medium
  9374 00000646 B001                    		mov	al, 1		; set number of	fat sectors
  9375 00000648 BB0840                  		mov	bx, 16392	; 64*256+8
  9376                                  					; set dir entries and sector max
  9377 0000064B B94001                  		mov	cx, 320		; 40*8
  9378                                  					; set size of drive
  9379 0000064E BA0101                  		mov	dx, 257		; 01*256+1
  9380                                  					; set head limit and sec/all unit
  9381 00000651 F6C402                  		test	ah, 2		; test for 8 or	9 sector
  9382 00000654 7507                    		jnz	short has8	; nz = has 8 sectors
  9383 00000656 FEC0                    		inc	al		; inc number of	fat sectors
  9384 00000658 FEC3                    		inc	bl		; inc sector max
  9385                                  		;add	cx, 40		; increase size	(to 360)
  9386                                  		; 18/12/2022
  9387 0000065A 80C128                  		add	cl, 40
  9388                                  has8:					
  9389 0000065D F6C401                  		test	ah, 1		; test for 1 or	2 heads
  9390 00000660 7408                    		jz	short Has1	; jz = 1 head
  9391 00000662 01C9                    		add	cx, cx		; double size of disk
  9392 00000664 B770                    		mov	bh, 112		; increase number of directory entries
  9393 00000666 FEC6                    		inc	dh		; inc sec/all unit
  9394 00000668 FEC2                    		inc	dl		; inc head limit
  9395                                  Has1:					
  9396 0000066A 26887508                		mov	[es:di+8], dh	; [es:di+BDS.secperclus]
  9397 0000066E 26887D0C                		mov	[es:di+0Ch], bh	; [es:di+BDS.direntries]
  9398 00000672 26894D0E                		mov	[es:di+0Eh], cx	; [es:di+BDS.totalsecs16]
  9399 00000676 26886510                		mov	[es:di+10h], ah	; [es:di+BDS.media]
  9400 0000067A 26884511                		mov	[es:di+11h], al	; [es:di+BDS.fatsecs]
  9401 0000067E 26885D13                		mov	[es:di+13h], bl	; [es:di+BDS.secpertrack]
  9402 00000682 26885515                		mov	[es:di+15h], dl	; [es:di+BDS.heads]
  9403                                  
  9404                                  		; the BDS_BPB.BPB_HIDDENSECTORS+2 field and the
  9405                                  		; BDS_BPB.BPB_BIGTOTALSECTORS field need to be set
  9406                                  		; to 0 since this code is for floppies
  9407                                  
  9408                                  		; 18/12/2022
  9409                                  		;mov	word [es:di+19h], 0 ; [es:di+BDS.hiddensecs+2]
  9410                                  		;mov	word [es:di+17h], 0 ; [es:di+BDS.hiddensecs]
  9411                                  		;mov	word [es:di+1Dh], 0 ; [es:di+BDS.totalsecs32+2]
  9412                                  		; 18/12/2022
  9413 00000686 29C9                    		sub	cx, cx
  9414 00000688 26894D19                		mov	[es:di+19h], cx ; 0 ; [es:di+BDS.hiddensecs+2]
  9415 0000068C 26894D17                		mov	[es:di+17h], cx ; 0 ; [es:di+BDS.hiddensecs]
  9416 00000690 26894D1D                		mov	[es:di+1Dh], cx ; 0 ; [es:di+BDS.totalsecs32+2]
  9417                                  getret:					
  9418 00000694 5B                      		pop	bx
  9419 00000695 5A                      		pop	dx
  9420 00000696 59                      		pop	cx
  9421                                  getret_exit:				
  9422 00000697 C3                      		retn
  9423                                  ; ---------------------------------------------------------------------------
  9424                                  
  9425                                  getbp_err_ret:	; before doing anything else, set set_id_flag	to 0.			
  9426                                  		;mov	ds:set_id_flag,	0
  9427                                  		; 19/10/2022
  9428 00000698 C606[0A05]00            		mov	byte [set_id_flag], 0
  9429 0000069D E83105                  		call	maperror
  9430 000006A0 EBF2                    		jmp	short getret
  9431                                  ; ---------------------------------------------------------------------------
  9432                                  
  9433                                  		; we have a 3.5" diskette for	which we cannot	build a	bpb.
  9434                                  		; we do	not assume any type of bpb for this medium.
  9435                                  
  9436                                  got_unknown_medium:			
  9437                                  		;mov	ds:set_id_flag,	0 
  9438 000006A2 C606[0A05]00            		mov	byte [set_id_flag], 0
  9439 000006A7 B007                    		mov	al, 7
  9440 000006A9 F9                      		stc
  9441 000006AA EBE8                    		jmp	short getret
  9442                                  
  9443                                  ; =============== S U B	R O U T	I N E =======================================
  9444                                  
  9445                                  ; 15/10/2022 - Retro DOS 4.0 (Modified MSDOS 5.0 IO.SYS)
  9446                                  
  9447                                  ; ----------------------------------------------------------------
  9448                                  ; read in the boot sector. set carry if error in reading sector.
  9449                                  ; bx is set to 1 if the boot sector is invalid, otherwise it is 0.
  9450                                  ;
  9451                                  ;	assumes es:di -> bds, ds-> Bios_Data
  9452                                  ; ----------------------------------------------------------------
  9453                                  
  9454                                  ; 10/03/2019 - Retro DOS v4.0
  9455                                  
  9456                                  readbootsec:	
  9457 000006AC B600                    		mov	dh, 0		; head 0
  9458 000006AE B90100                  		mov	cx, 1		; cylinder 0, sector 1
  9459 000006B1 E8C600                  		call	read_sector
  9460 000006B4 724A                    		jb	short err_ret
  9461 000006B6 31DB                    		xor	bx, bx		; assume valid boot sector
  9462                                  
  9463                                  		; put a sanity check for the boot sector in here to detect
  9464                                  		; boot sectors that do not have valid bpbs. we examine the
  9465                                  		; first two bytes - they must contain a long jump (69h) or a
  9466                                  		; short jump (EBh) followed by a nop (90h), or a short jump
  9467                                  		; (E9h). if this test is passed, we further check by examining
  9468                                  		; the signature at the end of the boot sector for the word
  9469                                  		; AA55h. if the signature is not present, we examine the media
  9470                                  		; descriptor byte to see if it is valid. for dos 3.3, this
  9471                                  		; logic is modified a little bit. we are not going to check
  9472                                  		; signature. instead we are going to sanity check the media
  9473                                  		; byte in bpb regardless of the validity of signature. this is
  9474                                  		; to save the already developed commercial products that have
  9475                                  		; good jump instruction and signature but with the false bpb
  9476                                  		; informations
  9477                                  
  9478                                  ; that will crash the diskette drive operation. (for example, symphony diskette).
  9479                                  
  9480                                  		; 19/10/2022
  9481 000006B8 803E[4E01]69            		cmp	byte [disksector], 69h ; is it a direct jump?
  9482 000006BD 7415                    		jz	short check_bpb_mediabyte ; don't need to find a nop
  9483 000006BF 803E[4E01]E9            		cmp	byte [disksector], 0E9h ; dos 2.0 jump?
  9484 000006C4 740E                    		jz	short check_bpb_mediabyte ; no need for	nop
  9485 000006C6 803E[4E01]EB            		cmp	byte [disksector], 0EBh ; how about a short jump?
  9486 000006CB 7531                    		jnz	short invalidbootsec
  9487 000006CD 803E[5001]90            		cmp	byte [disksector+2], 90h ; is next one a nop?
  9488 000006D2 752A                    		jnz	short invalidbootsec
  9489                                  
  9490                                  ; 15/10/5022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
  9491                                  ;
  9492                                  ;; 10/03/2019
  9493                                  ;; (MSDOS 3.3, MSDISK.ASM, 1988)
  9494                                  ;;
  9495                                  ;; Don't have to perform the following signature check since
  9496                                  ;; we need to check the media byte even with the good signatured diskette.
  9497                                  ;;
  9498                                  ;;check_signature:
  9499                                  ;;		cmp	word [cs:disksector+1FEh],0AA55h ; see if non-ibm
  9500                                  ;;							 ; disk or 1.x media.
  9501                                  ;;		jz	short checksinglesided ; go see if singled sided medium.
  9502                                  ;;					       ; may need some special handling
  9503                                  
  9504                                  ; check for non-ibm disks which do not have the signature AA55h at the
  9505                                  ; end of the boot sector, but still have a valid boot sector. this is done
  9506                                  ; by examining the media descriptor in the boot sector.
  9507                                  
  9508                                  		; 19/10/2022
  9509                                  check_bpb_mediabyte:			
  9510 000006D4 A0[6301]                		mov	al, [disksector+15h]
  9511                                  					; [disksector+EXT_BOOT.BPB+EBPB.MEDIADESCRIPTOR]
  9512 000006D7 24F0                    		and	al, 0F0h
  9513 000006D9 3CF0                    		cmp	al, 0F0h	; allow	for strange media
  9514 000006DB 7521                    		jnz	short invalidbootsec
  9515                                  
  9516                                  ; there were some (apparently a lot of them) diskettes that had been formatted
  9517                                  ; under dos 3.1 and earlier versions which have invalid bpbs in their boot
  9518                                  ; sectors. these are specifically diskettes that were formatted in drives
  9519                                  ; with one head, or whose side 0 was bad. these contain bpbs in the boot
  9520                                  ; sector that have the sec/clus field set to 2 instead of 1, as is standard
  9521                                  ; in dos. in order to support them, we have to introduce a "hack" that will
  9522                                  ; help our build bpb routine to recognise these specific cases, and to
  9523                                  ; set up out copy of the bpb accordingly.
  9524                                  ; we do this by checking to see if the boot sector is off a diskette that
  9525                                  ; is single-sided and is a pre-dos 3.20 diskette. if it is, we set the
  9526                                  ; sec/clus field to 1. if not, we carry on as normal.
  9527                                  
  9528                                  checksinglesided:
  9529 000006DD A0[6301]                		mov	al, [disksector+15h]
  9530 000006E0 3CF0                    		cmp	al, 0F0h
  9531 000006E2 741B                    		jz	short gooddsk
  9532 000006E4 A801                    		test	al, 1
  9533 000006E6 7517                    		jnz	short gooddsk
  9534 000006E8 813E[5601]332E          		cmp	word [disksector+8], 2E33h ; "3."
  9535 000006EE 7507                    		jnz	short mustbeearlier
  9536 000006F0 803E[5801]32            		cmp	byte [disksector+0Ah], 32h ; "2"
  9537 000006F5 7308                    		jnb	short gooddsk
  9538                                  
  9539                                  ; we must have a pre-3.20 diskette. set the sec/clus field to 1
  9540                                  
  9541                                  mustbeearlier:				
  9542 000006F7 C606[5B01]01            		mov	byte [disksector+0Dh], 1
  9543                                  					; [disksector+EXT_BOOT.BPB+EBPB.SECTORSPERCLUSTER]
  9544 000006FC EB01                    		jmp	short gooddsk
  9545                                  ; ---------------------------------------------------------------------------
  9546                                  
  9547                                  invalidbootsec:				
  9548 000006FE 43                      		inc	bx		; indicate that boot sector invalid
  9549                                  		; 10/12/2022
  9550                                  movbpb_ret:
  9551                                  gooddsk:				
  9552 000006FF F8                      		clc
  9553                                  err_ret:
  9554 00000700 C3                      		retn
  9555                                  ; ---------------------------------------------------------------------------
  9556                                  
  9557                                  		; 10/12/2022
  9558                                  ;err_ret:				
  9559                                  		;retn
  9560                                  
  9561                                  ; =============== S U B	R O U T	I N E =======================================
  9562                                  
  9563                                  ; 15/10/2022
  9564                                  ; ---------------------------------------------------------------------------
  9565                                  ; 'movbpb' moves the bpb read from the boot sector into registers for use by
  9566                                  ; getbp routine at has1
  9567                                  ;
  9568                                  ; if the set_id_flag is 1, and if an extended boot record, then set volume
  9569                                  ; serial number, volume label, file system id in bds according to
  9570                                  ; the boot record.  after that, this routine will set the set_id_flag to 2
  9571                                  ; to signal that volume label is set already from the extended boot record
  9572                                  ; (so, don't set it again by calling "set_volume_id" routine which uses
  9573                                  ; the volume label in the root directory.)
  9574                                  ; ---------------------------------------------------------------------------
  9575                                  
  9576                                  ; 10/03/2019 - Retro DOS v4.0
  9577                                  
  9578                                  		; 19/10/2022
  9579                                  movbpb:	
  9580 00000701 8A36[5B01]              		mov	dh, [disksector+0Dh]
  9581                                  					; disksector+EXT_BOOT.BPB+EBPB.SECTORSPERCLUSTER]
  9582                                  					; sectors per unit
  9583 00000705 8A3E[5F01]              		mov	bh, [disksector+11h]
  9584                                  					; [disksector+EXT_BOOT.BPB+EBPB.ROOTENTRIES]
  9585                                  					; number of directory entries
  9586 00000709 8B0E[6101]              		mov	cx, [disksector+13h]
  9587                                  					; [disksector+EXT_BOOT.BPB+EBPB.TOTALSECTORS]
  9588                                  					; size of drive
  9589 0000070D 8A26[6301]              		mov	ah, [disksector+15h]
  9590                                  					; [disksector+EXT_BOOT.BPB+EBPB.MEDIADESCRIPTOR]
  9591                                  					; media	descriptor
  9592 00000711 A0[6401]                		mov	al, [disksector+16h];
  9593                                  					; [disksector+EXT_BOOT.BPB+EBPB.SECTORSPERFAT]
  9594                                  					; number of fat	sectors
  9595 00000714 8A1E[6601]              		mov	bl, [disksector+18h]
  9596                                  					; [disksector+EXT_BOOT.BPB+EBPB.SECTORSPERTRACK]
  9597                                  					; sectors per track
  9598 00000718 8A16[6801]              		mov	dl, [disksector+1Ah]
  9599                                  					; [disksector+EXT_BOOT.BPB+EBPB.HEADS]
  9600                                  					; number of heads
  9601 0000071C 803E[0A05]01            		cmp	byte [set_id_flag], 1 ; called by get_bpb?
  9602 00000721 75DC                    		jnz	short movbpb_ret
  9603 00000723 E81200                  		call	mov_media_ids
  9604 00000726 7205                    		jb	short movbpb_conv ; conventional boot record?
  9605 00000728 C606[0A05]02            		mov	byte [set_id_flag], 2 ; signals that volume id is set
  9606                                  movbpb_conv:				
  9607 0000072D 803E[7700]01            		cmp	byte [fhave96], 1
  9608 00000732 75CB                    		jnz	short movbpb_ret
  9609 00000734 E8D411                  		call	resetchanged	; reset	flags in bds to	not fchanged.
  9610                                  		; 10/12/2022
  9611                                  		; cf = 0
  9612                                  ;movbpb_ret:				
  9613                                  		;clc
  9614 00000737 C3                      		retn
  9615                                  
  9616                                  ; =============== S U B	R O U T	I N E =======================================
  9617                                  
  9618                                  ;copy the boot_serial number, volume id, and filesystem id from the
  9619                                  ;***extended boot record*** in ds:disksector to the bds table pointed
  9620                                  ;by es:di.
  9621                                  
  9622                                  ;in.) es:di -> bds
  9623                                  ;     ds:disksector = valid extended boot record.
  9624                                  ;out.) vol_serial, bds_volid and bds_system_id in bds are set according to
  9625                                  ;      the boot record information.
  9626                                  ;     carry flag set if not an extended bpb.
  9627                                  ;     all registers saved except the flag.
  9628                                  
  9629                                  		; 19/10/2022
  9630                                  mov_media_ids:		
  9631 00000738 803E[7401]29            		cmp	byte [disksector+26h], 29h
  9632                                  					; [disksector+EXT_BOOT.SIG],
  9633                                  					; EXT_BOOT_SIGNATURE
  9634 0000073D 752C                    		jnz	short mmi_not_ext
  9635 0000073F 51                      		push	cx
  9636 00000740 8B0E[7501]              		mov	cx, [disksector+27h]
  9637                                  					; [disksector+EXT_BOOT.SERIAL]
  9638 00000744 26894D57                		mov	[es:di+57h], cx	; [es:di+BDS.vol_serial]
  9639 00000748 8B0E[7701]              		mov	cx, [disksector+29h]
  9640                                  					; [disksector+EXT_BOOT.SERIAL+2]
  9641 0000074C 26894D59                		mov	[es:di+59h], cx	; [es:di+BDS.vol_serial+2]
  9642 00000750 57                      		push	di
  9643 00000751 56                      		push	si
  9644 00000752 B90B00                  		mov	cx, 11		; size_of_EXT_BOOT_VOL_LABEL
  9645 00000755 BE[7901]                		mov	si, disksector+2Bh
  9646                                  		;mov	si, (offset disksector+2Bh) ;
  9647                                  					; disksector+EXT_BOOT.VOL_LABEL
  9648 00000758 83C74B                  		add	di, 75		; BDS.volid
  9649 0000075B F3A4                    		rep movsb
  9650                                  		;mov	cx, 8		; size_of_EXT_SYSTEM_ID
  9651                                  		; 10/12/2022
  9652 0000075D B108                    		mov	cl, 8 ; cx = 8
  9653 0000075F BE[8401]                		mov	si, disksector+36h
  9654                                  		;mov	si, (offset disksector+36h) ; disksector+EXT_BOOT.SYSTEM_ID
  9655 00000762 83C705                  		add	di, 5		; (BDS.filesys_id-BDS.volid)-size_of_EXT_BOOT_VOL_LABEL
  9656 00000765 F3A4                    		rep movsb
  9657 00000767 5E                      		pop	si
  9658 00000768 5F                      		pop	di
  9659 00000769 59                      		pop	cx
  9660                                  		; 10/12/2022
  9661                                  		; cf = 0
  9662                                  		;clc		; this clc is not required (16/06/2019 - Erdogan Tan)
  9663                                  				; (20/09/2022)
  9664 0000076A C3                      		retn
  9665                                  ; ---------------------------------------------------------------------------
  9666                                  
  9667                                  mmi_not_ext:				
  9668 0000076B F9                      		stc
  9669 0000076C C3                      		retn
  9670                                  
  9671                                  ; =============== S U B	R O U T	I N E =======================================
  9672                                  
  9673                                  ; 15/10/2022
  9674                                  ; --------------------------------------------------------------
  9675                                  ; read in the fat sector and get the media byte from it.
  9676                                  ; input : es:di -> bds
  9677                                  ; output:
  9678                                  ;	  carry set if an error occurs, ax contains error code.
  9679                                  ;	  otherwise, ah contains media byte on exit
  9680                                  ; --------------------------------------------------------------
  9681                                  
  9682                                  readfat:	
  9683                                  		;mov	dh, 0
  9684                                  		; 10/12/2022
  9685 0000076D 30F6                    		xor	dh, dh
  9686 0000076F B90200                  		mov	cx, 2		; head 0
  9687                                  					; cylinder 0, sector 2
  9688 00000772 E80500                  		call	read_sector
  9689 00000775 7202                    		jb	short bad_fat_ret
  9690 00000777 8A27                    		mov	ah, [bx]	; media	byte
  9691                                  bad_fat_ret:				
  9692 00000779 C3                      		retn
  9693                                  
  9694                                  ; =============== S U B	R O U T	I N E =======================================
  9695                                  
  9696                                  ; 15/10/2022
  9697                                  
  9698                                  ; ---------------------------------------------------------------------------
  9699                                  ; read a single sector into the temp buffer.
  9700                                  ; perform three retries in case of error.
  9701                                  ;   inputs:	es:[di].bds_drivenum has physical drive to use
  9702                                  ;		cx has sector and cylinder
  9703                                  ;		dh has head
  9704                                  ;		es:di has bds
  9705                                  ;		ds has Bios_Data
  9706                                  ;
  9707                                  ;   outputs:	carry clear
  9708                                  ;		    Bios_Data:bx point to sector
  9709                                  ;		       (note: some callers assume location of buffer)
  9710                                  ;
  9711                                  ;		carry set
  9712                                  ;		    ax has rom error code
  9713                                  ;
  9714                                  ; register bp is preserved.
  9715                                  ; ---------------------------------------------------------------------------
  9716                                  
  9717                                  ; 10/03/2019 - Retro DOS v4.0
  9718                                  
  9719                                  		; 19/10/2022
  9720                                  read_sector:	
  9721 0000077A 55                      		push	bp
  9722 0000077B BD0300                  		mov	bp, 3		; make 3 attempts
  9723 0000077E 268A5504                		mov	dl, [es:di+4]	; [es:di+BDS.drivenum]
  9724 00000782 BB[4E01]                		mov	bx, disksector	; get es:bx to point to	buffer
  9725                                  rd_ret:					
  9726 00000785 06                      		push	es
  9727 00000786 1E                      		push	ds
  9728 00000787 07                      		pop	es
  9729 00000788 B80102                  		mov	ax, 201h
  9730 0000078B CD13                    		int	13h		; DISK - READ SECTORS INTO MEMORY
  9731                                  					; AL = number of sectors to read, CH = track, CL = sector
  9732                                  					; DH = head, DL	= drive, ES:BX -> buffer to fill
  9733                                  					; Return: CF set on error, AH =	status,	AL = number of sectors read
  9734 0000078D 07                      		pop	es
  9735 0000078E 734A                    		jnb	short okret2
  9736                                  rd_rty:					
  9737 00000790 E87604                  		call	again		; reset	disk, decrement	bp, preserve ax
  9738 00000793 7442                    		jz	short err_rd_ret
  9739 00000795 26F6452301              		test	byte [es:di+23h], 1
  9740                                  		;test	byte ptr [es:di+23h], 1	; [es:di+BDS.flags]
  9741                                  					; fnon_removable
  9742 0000079A 75E9                    		jnz	short rd_ret
  9743 0000079C 803E[3806]00            		cmp	byte [media_set_for_format], 0
  9744 000007A1 7510                    		jnz	short rd_skip1_dpt
  9745 000007A3 50                      		push	ax
  9746 000007A4 1E                      		push	ds		; for retry, set the head settle time to 0Fh
  9747 000007A5 C536[2D01]              		lds	si, [dpt]
  9748                                  		;mov	al, [si+9]	; [si+DISK_PARMS.DISK_HEAD_STTL]
  9749                                  		;mov	byte [si+9], 15 ; [si+DISK_PARMS.DISK_HEAD_STTL]
  9750                                  		;			; NORMSETTLE
  9751                                  		; 12/12/2022
  9752 000007A9 B00F                    		mov	al, 15
  9753 000007AB 864409                  		xchg	al, [si+9]
  9754                                  		; 
  9755 000007AE 1F                      		pop	ds
  9756 000007AF A2[2A01]                		mov	[save_head_sttl], al
  9757 000007B2 58                      		pop	ax
  9758                                  rd_skip1_dpt:				
  9759 000007B3 06                      		push	es
  9760 000007B4 1E                      		push	ds
  9761 000007B5 07                      		pop	es
  9762 000007B6 B80102                  		mov	ax, 201h
  9763 000007B9 CD13                    		int	13h		; DISK - READ SECTORS INTO MEMORY
  9764                                  					; AL = number of sectors to read, CH = track, CL = sector
  9765                                  					; DH = head, DL	= drive, ES:BX -> buffer to fill
  9766                                  					; Return: CF set on error, AH =	status,	AL = number of sectors read
  9767 000007BB 07                      		pop	es
  9768 000007BC 9C                      		pushf
  9769 000007BD 803E[3806]00            		cmp	byte [media_set_for_format], 0
  9770 000007C2 750E                    		jnz	short rd_skip2_dpt
  9771 000007C4 50                      		push	ax
  9772 000007C5 A0[2A01]                		mov	al, [save_head_sttl]
  9773 000007C8 1E                      		push	ds
  9774 000007C9 C536[2D01]              		lds	si, [dpt]
  9775 000007CD 884409                  		mov	[si+9],	al	; [si+DISK_PARMS.DISK_HEAD_STTL]
  9776 000007D0 1F                      		pop	ds
  9777 000007D1 58                      		pop	ax
  9778                                  rd_skip2_dpt:				
  9779 000007D2 9D                      		popf
  9780 000007D3 7305                    		jnb	short okret2
  9781 000007D5 EBB9                    		jmp	short rd_rty
  9782                                  ; ---------------------------------------------------------------------------
  9783                                  
  9784                                  err_rd_ret:				
  9785 000007D7 B2FF                    		mov	dl, 0FFh	; make sure we ask rom if media	has changed
  9786                                  					; return error
  9787 000007D9 F9                      		stc
  9788                                  
  9789                                  ; update information pertaining to last drive accessed, time of access, last
  9790                                  ; track accessed in that drive.
  9791                                  
  9792                                  okret2:					
  9793 000007DA 8816[7600]              		mov	[step_drv], dl	; set up for head settle logic in disk
  9794 000007DE 8816[1E01]              		mov	[tim_drv], dl	; save drive last accessed
  9795 000007E2 26886D46                		mov	[es:di+46h], ch	; [es:di+BDS.track]
  9796                                  					; save last track accessed on this drive
  9797                                  					; preserve flags in case error occurred
  9798 000007E6 9C                      		pushf
  9799 000007E7 E8FF03                  		call	set_tim
  9800 000007EA 9D                      		popf			; restore flags
  9801 000007EB 5D                      		pop	bp
  9802 000007EC C3                      		retn
  9803                                  
  9804                                  ;----------------------------------------------------------------------------
  9805                                  ;	disk open/close routines
  9806                                  ;----------------------------------------------------------------------------
  9807                                  
  9808                                  dsk_open:				; 2C7h:80Ah = 70h:2D7Ah
  9809 000007ED 803E[7700]00            		cmp	byte [fhave96], 0
  9810 000007F2 7407                    		jz	short dsk_open_exit ; done if no changeline support
  9811 000007F4 E8D4FC                  		call	SetDrive	; get bds for drive
  9812 000007F7 26FF4520                		inc	word [es:di+20h] ; [es:di+BDS.opcnt]
  9813                                  dsk_open_exit:	
  9814                                  		; 10/12/2022
  9815                                  		; cf = 0			
  9816                                  		;clc		; CF is	already	ZERO here (18/09/2022, MSDOS 5.0 IO.SYS)
  9817                                  				; (19/07/2019 -	Erdogan	Tan - MSDOS 6.0	IO.SYS - retrodos4.s)
  9818 000007FB C3                      		retn
  9819                                  ; ---------------------------------------------------------------------------
  9820                                  
  9821                                  dsk_close:				; 2C7h:81Ah = 70h:2D8Ah
  9822 000007FC 803E[7700]00            		cmp	byte [fhave96], 0
  9823 00000801 740E                    		jz	short exitjx	; done if no changeline	support
  9824 00000803 E8C5FC                  		call	SetDrive	; get bds for drive
  9825 00000806 26837D2000              		cmp	word [es:di+20h], 0 ; [es:di+BDS.opcnt]
  9826 0000080B 7404                    		jz	short exitjx	; watch	out for	wrap
  9827 0000080D 26FF4D20                		dec	word [es:di+20h]
  9828                                  exitjx:					
  9829                                  		; 10/12/2022
  9830                                  		; cf = 0
  9831                                  		;clc		; CF is	already	ZERO here (18/09/2022, MSDOS 5.0 IO.SYS)
  9832                                  				; (19/07/2019 -	Erdogan	Tan - MSDOS 6.0	IO.SYS - retrodos4.s)
  9833 00000811 C3                      		retn
  9834                                  
  9835                                  ;----------------------------------------------------------------------------
  9836                                  ;		disk removable routine
  9837                                  ;----------------------------------------------------------------------------
  9838                                  
  9839                                  		; al is	unit #
  9840                                  dsk_rem:				; 2C7h:831h = 70h:2DA1h
  9841 00000812 E8B6FC                  		call	SetDrive	; get bds for this drive
  9842                                  		;test	byte [es:di+BDS.flags], fnon_removable
  9843 00000815 26F6452301              		test	byte [es:di+23h], 1
  9844                                  		;jnz	short x_bus_exit ; non_rem
  9845 0000081A 7501                    		jnz	short non_rem	; 15/10/2022
  9846                                  		; 10/12/2022
  9847                                  		; cf = 0
  9848                                  		;clc			; CF is already ZERO here
  9849                                  					; 15/10/2022
  9850 0000081C C3                      		retn
  9851                                  ; ---------------------------------------------------------------------------
  9852                                  
  9853                                  non_rem:
  9854                                  x_bus_exit:				
  9855 0000081D B403                    		mov	ah, 3		; 2C7h:83Dh = 0070h:2DADh
  9856                                  					; return busy status
  9857 0000081F F9                      		stc
  9858                                  dsk_ret:				
  9859 00000820 C3                      		retn
  9860                                  
  9861                                  ;----------------------------------------------------------------------------
  9862                                  ;		disk i/o routines
  9863                                  ;----------------------------------------------------------------------------
  9864                                  
  9865                                  dsk_writv:				; 2C7h:841h = 70h:2DB1h
  9866                                  		;mov	word [wrtverify], 103h
  9867                                  		; 19/10/2022
  9868 00000821 C706[2001]0301          		mov	word [rflag], 103h
  9869                                  		;mov	word ptr ds:rflag, 103h	; write	and verify
  9870 00000827 EB06                    		jmp	short dsk_cl
  9871                                  ; ---------------------------------------------------------------------------
  9872                                  
  9873                                  dsk_writ:				; 2C7h:849h = 70h:2DB9h
  9874                                  		;mov	word [wrtverify], 3
  9875                                  		; 19/10/2022
  9876 00000829 C706[2001]0300          		mov	word [rflag], 3
  9877                                  		;mov	word ptr ds:rflag, 3 ; romwrite
  9878                                  
  9879                                  dsk_cl:					
  9880 0000082F E89800                  		call	diskio		; romwrite
  9881                                  ; ---------------------------------------------------------------------------
  9882                                  
  9883                                  dsk_io:					
  9884 00000832 73EC                    		jnb	short dsk_ret
  9885 00000834 E9A0F8                  		jmp	bc_err_cnt
  9886                                  ; ---------------------------------------------------------------------------
  9887                                  
  9888                                  dsk_read:				; ; 2C7h:857h =	70h:2DC7h
  9889 00000837 E88B00                  		call	diskrd
  9890 0000083A EBF6                    		jmp	short dsk_io
  9891                                  
  9892                                  ; =============== S U B	R O U T	I N E =======================================
  9893                                  
  9894                                  ; 15/10/2022
  9895                                  ; 10/03/2019 - Retro DOS v4.0
  9896                                  
  9897                                  ;-----------------------------------------------------------
  9898                                  ; miscellaneous odd jump routines. 
  9899                                  ; moved out of mainline for speed.
  9900                                  
  9901                                  ; if we have a system where we have virtual drives, we need 
  9902                                  ; to prompt the user to place the correct disk in the drive.
  9903                                  ;
  9904                                  ;	assume es:di -> bds, ds:->Bios_Data
  9905                                  ;-----------------------------------------------------------
  9906                                  
  9907                                  		; 19/10/2022
  9908                                  checksingle:		
  9909 0000083C 50                      		push	ax
  9910 0000083D 53                      		push	bx
  9911 0000083E 268B5D23                		mov	bx, [es:di+23h]	; [es:di+BDS.flags]
  9912                                  
  9913                                  ; if hard drive, cannot change disk.
  9914                                  ; if current owner of physical drive, no need to change diskette.
  9915                                  
  9916 00000842 F6C321                  		test	bl, 21h		; fnon_removable|fi_own_physical
  9917 00000845 7573                    		jnz	short singleret
  9918 00000847 F6C310                  		test	bl, 10h		; fi_am_mult
  9919                                  					; is there a drive sharing this	physical drive?
  9920 0000084A 746E                    		jz	short singleret
  9921                                  
  9922                                  
  9923                                  ; look for the previous owner of this physical drive
  9924                                  ; and reset its ownership flag.
  9925                                  
  9926 0000084C 268A4504                		mov	al, [es:di+4]	; [es:di+BDS.drivenum]
  9927                                  					; get physical drive number
  9928 00000850 06                      		push	es		; preserve pointer to current bds
  9929 00000851 57                      		push	di
  9930 00000852 C43E[1901]              		les	di, [start_bds] ; get first bds
  9931                                  scan_list:				
  9932 00000856 26384504                		cmp	[es:di+4], al
  9933 0000085A 7553                    		jnz	short scan_skip	; Not our drive. Try next bds.
  9934 0000085C B320                    		mov	bl, 20h	; ' '   ; fi_own_physical ; test ownership flag
  9935 0000085E 26845D23                		test	[es:di+23h], bl
  9936 00000862 744B                    		jz	short scan_skip	; he doesn't own it either. continue
  9937 00000864 26305D23                		xor	[es:di+23h], bl	; reset	ownership flag
  9938 00000868 5F                      		pop	di		; restore pointer to current bds
  9939 00000869 07                      		pop	es
  9940 0000086A 26085D23                		or	[es:di+23h], bl	; ; set	ownership flag
  9941                                  
  9942                                  ; we examine the fsetowner flag. if it is set, then we are using the code in
  9943                                  ; checksingle to just set the owner of a drive. we must not issue the prompt
  9944                                  ; in this case.
  9945 0000086E 803E[7A00]01            		cmp	byte [fsetowner], 1
  9946 00000873 7517                    		jnz	short not_fsetowner
  9947                                  		;cmp	byte ptr es:[di+4], 0 ;	are we handling	drive number 0 ?
  9948 00000875 26807D0400              		cmp	byte [es:di+4], 0
  9949 0000087A 753E                    		jnz	short singleret
  9950 0000087C 268A4505                		mov	al, [es:di+5]
  9951                                  		;mov	al, es:[di+5]	; [es:di+BDS.drivelet]
  9952                                  					; get the DOS drive letter
  9953 00000880 06                      		push	es
  9954 00000881 8E06[1A00]              		mov	es, [zeroseg]
  9955 00000885 26A20405                		mov	[es:LSTDRV], al
  9956                                  		;mov	es:504h, al	; [es:LSTDRV]
  9957                                  					; set up sdsb
  9958 00000889 07                      		pop	es		; restore bds pointer
  9959 0000088A EB2E                    		jmp	short singleret
  9960                                  ; ---------------------------------------------------------------------------
  9961                                  
  9962                                  ; to support "backward" compatibility with ibm's "single drive status byte"
  9963                                  ; we now check to see if we are in a single drive system and the application
  9964                                  ; has "cleverly" diddled the sdsb
  9965                                  
  9966                                  not_fsetowner:				
  9967 0000088C 803E[7800]02            		cmp	byte [single], 2 ; if (single_drive_system)
  9968 00000891 7517                    		jnz	short ignore_sdsb
  9969 00000893 50                      		push	ax
  9970 00000894 268A4505                		mov	al, [es:di+5]	; if (curr_drv == req_drv)
  9971 00000898 88C4                    		mov	ah, al
  9972 0000089A 06                      		push	es
  9973 0000089B 8E06[1A00]              		mov	es, [zeroseg]
  9974 0000089F 2686060405              		xchg	al, [es:LSTDRV]
  9975                                  		;xchg	al, es:504h	; [es:LSTDRV]
  9976                                  					; then swap(curr_drv,req_drv)
  9977 000008A4 07                      		pop	es
  9978 000008A5 38C4                    		cmp	ah, al		; else
  9979 000008A7 58                      		pop	ax		; swap(curr_drv,req_drv)
  9980 000008A8 7410                    		jz	short singleret	; issue	swap_dsk_msg
  9981                                  ignore_sdsb:				
  9982 000008AA E8800E                  		call	swpdsk
  9983 000008AD EB0B                    		jmp	short singleret
  9984                                  ; ---------------------------------------------------------------------------
  9985                                  
  9986                                  scan_skip:	
  9987 000008AF 26C43D                  		les	di, [es:di]			
  9988                                  		;les	di, es:[di]	; [es:di+BDS.link]
  9989                                  					; go to	next bds
  9990 000008B2 83FFFF                  		cmp	di, 0FFFFh	; end of list?
  9991 000008B5 759F                    		jnz	short scan_list	; ontinue until	hit end	of list
  9992 000008B7 F9                      		stc
  9993 000008B8 5F                      		pop	di		; restore current bds
  9994 000008B9 07                      		pop	es
  9995                                  
  9996                                  singleret:				
  9997 000008BA 5B                      		pop	bx
  9998 000008BB 58                      		pop	ax
  9999 000008BC C3                      		retn
 10000                                  
 10001                                  ; ---------------------------------------------------------------------------
 10002                                  
 10003                                  baddrive:				
 10004 000008BD B008                    		mov	al, 8		; sector not found
 10005 000008BF EB02                    		jmp	short baddrive_ret
 10006                                  ; ---------------------------------------------------------------------------
 10007                                  
 10008                                  unformatteddrive:				
 10009 000008C1 B007                    		mov	al, 7		; unknown media
 10010                                  baddrive_ret:				
 10011 000008C3 F9                      		stc
 10012                                  ; ---------------------------------------------------------------------------
 10013                                  
 10014                                  ioret:		
 10015 000008C4 C3                      		retn
 10016                                  
 10017                                  ; ---------------------------------------------------------------------------
 10018                                  
 10019                                  ; 15/10/52022
 10020                                  
 10021                                  ; ---------------------------------------------------------------------------
 10022                                  ;	disk i/o handler
 10023                                  ;
 10024                                  ;	al = drive number (0-6)
 10025                                  ;	ah = media descriptor
 10026                                  ;	cx = sector count
 10027                                  ;	dx = first sector (low)
 10028                                  ;	[start_sec_h] = first sector (high)  32 bit calculation.
 10029                                  ;	ds = cs
 10030                                  ;	es:di = transfer address
 10031                                  ;	[rflag]=operation (2=read, 3=write)
 10032                                  ;	[verify]=1 for verify after write
 10033                                  ;
 10034                                  ;	if successful carry flag = 0
 10035                                  ;	  else cf=1 and al contains error code
 10036                                  ; ---------------------------------------------------------------------------
 10037                                  
 10038                                  diskrd:	
 10039                                  		;mov	ds:rflag, 2	; romread
 10040                                  		; 19/10/2022
 10041 000008C5 C606[2001]02            		mov	byte [rflag], 2 ; romread
 10042                                  
 10043                                  ; =============== S U B	R O U T	I N E =======================================
 10044                                  
 10045                                  		; 19/10/2022
 10046                                  diskio:
 10047 000008CA 89FB                    		mov	bx, di		; es:bx	= transfer address
 10048 000008CC 8C06[3705]              		mov	[xfer_seg], es	; save transfer	segment
 10049 000008D0 E8F8FB                  		call	SetDrive
 10050 000008D3 268A4510                		mov	al, [es:di+10h]	; [es:di+BDS.media]
 10051 000008D7 A2[1F01]                		mov	[medbyt], al
 10052                                  		;jcxz	short ioret
 10053 000008DA E3E8                    		jcxz	ioret
 10054                                  
 10055                                  ; see if the media is formatted or not by checking the flags field in
 10056                                  ; in the bds. if it is unformatted we cannot allow i/o, so we should
 10057                                  ; go to the error exit at label unformatteddrive.
 10058                                  
 10059 000008DC 26F6452402              		test	byte [es:di+24h], 2
 10060                                  		;test	byte ptr es:[di+24h], 2	; [es:di+BDS.flags+1]
 10061                                  					; unformatted_media
 10062 000008E1 75DE                    		jnz	short unformatteddrive
 10063 000008E3 890E[2201]              		mov	[seccnt], cx	; save sector count
 10064 000008E7 8926[3501]              		mov	[spsav], sp	; save sp
 10065                                  
 10066                                  ; ensure that we are trying to access valid sectors on the drive
 10067                                  
 10068 000008EB 89D0                    		mov	ax, dx
 10069 000008ED 31F6                    		xor	si, si
 10070 000008EF 01CA                    		add	dx, cx
 10071 000008F1 83D600                  		adc	si, 0
 10072 000008F4 26837D0E00              		cmp	word [es:di+0Eh], 0 ; [es:di+BDS.totalsecs16]
 10073                                  					; > 32 bit sector ?
 10074 000008F9 740D                    		jz	short sanity32
 10075 000008FB 83FE00                  		cmp	si, 0
 10076 000008FE 75BD                    		jnz	short baddrive
 10077 00000900 263B550E                		cmp	dx, [es:di+0Eh]	; [es:di+BDS.totalsecs16]
 10078 00000904 77B7                    		ja	short baddrive
 10079 00000906 EB12                    		jmp	short sanityok
 10080                                  ; ---------------------------------------------------------------------------
 10081                                  
 10082                                  sanity32:				
 10083 00000908 0336[2B05]              		add	si, [start_sec_h]
 10084 0000090C 263B751D                		cmp	si, [es:di+1Dh]	; [es:di+BDS.totalsecs32+2]
 10085 00000910 7208                    		jb	short sanityok
 10086 00000912 77A9                    		ja	short baddrive
 10087 00000914 263B551B                		cmp	dx, [es:di+1Bh]	; [es:di+BDS.totalsecs32]
 10088 00000918 77A3                    		ja	short baddrive
 10089                                  
 10090                                  sanityok:				
 10091 0000091A 8B16[2B05]              		mov	dx, [start_sec_h]
 10092 0000091E 26034517                		add	ax, [es:di+17h]	; [es:di+BDS.hiddensecs]
 10093 00000922 26135519                		adc	dx, [es:di+19h]	; [es:di+BDS.hiddensecs+2]
 10094                                  
 10095                                  ; now dx;ax have the physical first sector.
 10096                                  ; since the following procedures is going to destroy ax, let's
 10097                                  ; save it temporarily to saved_word.
 10098                                  
 10099 00000926 A3[2D05]                		mov	[saved_word], ax ; save the sector number (low)
 10100                                  
 10101                                  ; set up pointer to disk base table in [dpt]. we cannot assume that iosetup
 10102                                  ; will do it because we will skip the set up stuff with hard disks.
 10103                                  
 10104 00000929 06                      		push	es
 10105 0000092A 8E06[1A00]              		mov	es, [zeroseg]
 10106 0000092E 26C4367800              		les	si, [es:DSKADR]
 10107                                  		;les	si, es:78h	; [es:DSKADR]
 10108                                  					; current disk parm table
 10109 00000933 8936[2D01]              		mov	[dpt], si
 10110 00000937 8C06[2F01]              		mov	[dpt+2], es
 10111 0000093B 07                      		pop	es
 10112 0000093C 26F6452301              		test	byte [es:di+23h], 1 ; [es:di+BDS.flags]
 10113                                  					; fnon_removable
 10114 00000941 7510                    		jnz	short skip_setup
 10115 00000943 E8F6FE                  		call	checksingle
 10116                                  
 10117                                  ; check to see if we have previously noted a change line. the routine
 10118                                  ; returns if everything is ok. otherwise, it pops off the stack and returns
 10119                                  ; the proper error code.
 10120                                  
 10121 00000946 803E[7700]00            		cmp	byte [fhave96], 0 ; do we have changeline support?
 10122 0000094B 7403                    		jz	short diskio_nochangeline ; brif not
 10123 0000094D E8AB0E                  		call	checklatchio	; will do a sneaky pop stack return
 10124                                  					; if a disk error occurs
 10125                                  diskio_nochangeline:			
 10126 00000950 E84700                  		call	iosetup		; set up tables	and variables for i/o
 10127                                  
 10128                                  ; now the settle values are correct for the following code
 10129                                  
 10130                                  skip_setup:
 10131                                  
 10132                                  ; 32 bit sector calculation.
 10133                                  ; dx:[saved_word] = starting sector number.
 10134                                  				
 10135 00000953 89D0                    		mov	ax, dx
 10136 00000955 31D2                    		xor	dx, dx
 10137 00000957 26F77513                		div	word [es:di+13h] ; [es:di+BDS.secpertrack]
 10138                                  					 ; divide by sec per track
 10139 0000095B A3[2905]                		mov	[temp_h], ax
 10140 0000095E A1[2D05]                		mov	ax, [saved_word]
 10141 00000961 26F77513                		div	word [es:di+13h] ; [es:di+BDS.secpertrack]
 10142                                  					; now, [temp_h]:ax = track #, dx = sector
 10143                                  		;inc	dl		; sector number	is 1 based.
 10144                                  		; 18/12/2022
 10145 00000965 42                      		inc	dx
 10146 00000966 8816[3101]              		mov	[cursec], dl	; save current sector
 10147 0000096A 268B4D15                		mov	cx, [es:di+15h]	; es:di+BDS.heads]
 10148                                  					; get number of	heads
 10149 0000096E 50                      		push	ax
 10150 0000096F 31D2                    		xor	dx, dx
 10151 00000971 A1[2905]                		mov	ax, [temp_h]	; divide tracks	by heads per cylinder
 10152 00000974 F7F1                    		div	cx
 10153 00000976 A3[2905]                		mov	[temp_h], ax
 10154 00000979 58                      		pop	ax
 10155 0000097A F7F1                    		div	cx		; now, [temp_h]:ax = cylinder #, dx = head
 10156 0000097C 833E[2905]00            		cmp	word [temp_h], 0
 10157 00000981 7714                    		ja	short baddrive_brdg
 10158 00000983 3D0004                  		cmp	ax, 1024	; 2^10 currently maxium	for track #.
 10159 00000986 770F                    		ja	short baddrive_brdg
 10160 00000988 8816[3201]              		mov	[curhd], dl	; save current head
 10161 0000098C A3[3301]                		mov	[curtrk], ax	; save current track
 10162                                  
 10163                                  ; we are now set up for the i/o. normally, we consider the dma boundary
 10164                                  ; violations here. not true. we perform the operation as if everything is
 10165                                  ; symmetric; let the int 13 handler worry about the dma violations.
 10166                                  
 10167 0000098F A1[2201]                		mov	ax, [seccnt]
 10168 00000992 E88400                  		call	block		; (cas - call/ret)
 10169                                  		;call	done
 10170                                  		;retn
 10171                                  		; 18/12/2022
 10172 00000995 EB4B                    		jmp	done
 10173                                  
 10174                                  ; ---------------------------------------------------------------------------
 10175                                  
 10176                                  baddrive_brdg:				
 10177 00000997 E923FF                  		jmp	baddrive
 10178                                  
 10179                                  ; =============== S U B	R O U T	I N E =======================================
 10180                                  
 10181                                  ;--------------------------------------------------------------
 10182                                  ; set the drive-last-accessed flag for diskette only. 
 10183                                  ; we know that the hard disk will not be removed.
 10184                                  ; es:di -> current bds.
 10185                                  ; ds -> Bios_Data
 10186                                  ; ax,cx,si are destroyed.
 10187                                  ;--------------------------------------------------------------
 10188                                  
 10189                                  		; 19/10/2022
 10190                                  iosetup:	
 10191 0000099A 268A4504                		mov	al, [es:di+4]	; [es:di+BDS.drivenum]
 10192 0000099E A2[1E01]                		mov	[tim_drv], al	; save drive letter
 10193                                  
 10194                                  ; determine proper head settle values
 10195                                  
 10196 000009A1 803E[3806]00            		cmp	byte [media_set_for_format], 0
 10197 000009A6 7539                    		jnz	short skip_dpt_setting
 10198 000009A8 A0[2C01]                		mov	al, [eot]	; fetch	up eot before changing ds
 10199 000009AB 1E                      		push	ds
 10200 000009AC C536[2D01]              		lds	si, [dpt]	; get pointer to disk base table
 10201 000009B0 884404                  		mov	[si+4],	al
 10202 000009B3 8A440A                  		mov	al, [si+10]	; [si+DISK_PARMS.DISK_MOTOR_STRT]
 10203 000009B6 8A6404                  		mov	ah, [si+4]	; [si+DISK_PARMS.DISK_EOT]
 10204 000009B9 1F                      		pop	ds
 10205 000009BA A2[2601]                		mov	[motorstartup], al
 10206 000009BD 8826[2B01]              		mov	[save_eot], ah
 10207                                  
 10208                                  ; for 3.5" drives, both external as well as on the k09, we need to set the
 10209                                  ; motor start time to 4. this checking for every i/o is going to affect
 10210                                  ; performance across the board, but is necessary!!
 10211                                  
 10212 000009C1 1E                      		push	ds
 10213 000009C2 C536[2D01]              		lds	si, [dpt]	; get pointer to disk base table
 10214 000009C6 26807D2202              		cmp	byte [es:di+22h], 2 ; [es:di+BDS.formfactor]
 10215                                  					; ffSmall
 10216 000009CB 7505                    		jnz	short motor_start_ok
 10217 000009CD B004                    		mov	al, 4
 10218 000009CF 86440A                  		xchg	al, [si+10]	; [si+DISK_PARMS.DISK_MOTOR_STRT]
 10219                                  motor_start_ok:
 10220                                  
 10221                                  ; ds:si now points to disk parameter table.
 10222                                  ; get current settle and set fast settle
 10223                                  				
 10224                                  		;xor	al, al
 10225                                  		;inc	al		; ibm wants fast settle	to be 1
 10226                                  		; 18/12/2022
 10227 000009D2 31C0                    		xor	ax, ax
 10228 000009D4 40                      		inc	ax
 10229 000009D5 864409                  		xchg	al, [si+9]	; [si+DISK_PARMS.DISK_HEAD_STTL]
 10230                                  					; get settle and set up	for fast
 10231 000009D8 1F                      		pop	ds
 10232 000009D9 A2[2701]                		mov	[settlecurrent], al
 10233 000009DC B00F                    		mov	al, 15		; NORMSETTLE
 10234                                  					; someone has diddled the settle
 10235 000009DE A2[2801]                		mov	[settleslow], al
 10236                                  skip_dpt_setting:			
 10237 000009E1 C3                      		retn
 10238                                  
 10239                                  ; =============== S U B	R O U T	I N E =======================================
 10240                                  
 10241                                  ;--------------------------------------------------------------
 10242                                  ; set time of last access, and reset default values in the dpt.
 10243                                  ;
 10244                                  ;	  note: trashes (at least) si
 10245                                  ;--------------------------------------------------------------
 10246                                  
 10247                                  		; 19/10/2022
 10248                                  done:
 10249 000009E2 26F6452301              		test	byte [es:di+23h], 1 ; [es:di+BDS.flags]
 10250                                  					; fnon_removable
 10251 000009E7 752F                    		jnz	short ddbx	; do not set for non-removable media
 10252 000009E9 E8FD01                  		call	set_tim
 10253                                  ;diddleback:
 10254                                  ; 09/12/2022
 10255                                  diddle_back:				
 10256 000009EC 9C                      		pushf
 10257 000009ED 803E[3806]00            		cmp	byte [media_set_for_format], 0
 10258 000009F2 7523                    		jnz	short nodiddleback
 10259 000009F4 50                      		push	ax
 10260 000009F5 06                      		push	es
 10261 000009F6 C436[2D01]              		les	si, [dpt]
 10262 000009FA A0[2B01]                		mov	al, [save_eot]
 10263 000009FD 26884404                		mov	[es:si+4], al	; [es:si+DISK_PARMS.DISK_EOT]
 10264 00000A01 A0[2701]                		mov	al, [settlecurrent]
 10265 00000A04 8A26[2601]              		mov	ah, [motorstartup]
 10266 00000A08 26884409                		mov	[es:si+9], al	; [es:si+DISK_PARMS.DISK_HEAD_STTL]
 10267 00000A0C 26C6440302              		mov	byte [es:si+3], 2 ; [es:si+DISK_PARMS.DISK_SECTOR_SIZ]
 10268 00000A11 2688640A                		mov	[es:si+0Ah], ah	; [es:si+DISK_PARMS.DISK_MOTOR_STRT]
 10269 00000A15 07                      		pop	es
 10270 00000A16 58                      		pop	ax
 10271                                  nodiddleback:				
 10272 00000A17 9D                      		popf
 10273                                  ddbx:					
 10274 00000A18 C3                      		retn
 10275                                  
 10276                                  ; =============== S U B	R O U T	I N E =======================================
 10277                                  
 10278                                  ;--------------------------------------------------------------
 10279                                  ;read the number of sectors specified in ax, 
 10280                                  ;handling track boundaries
 10281                                  ;es:di -> bds for this drive
 10282                                  ;--------------------------------------------------------------
 10283                                  
 10284                                  		 ; 19/10/2022
 10285                                  block:	
 10286 00000A19 09C0                    		or	ax, ax
 10287 00000A1B 74FB                    		jz	short ddbx
 10288 00000A1D 26F6452301              		test	byte [es:di+23h], 1 ; [es:di+BDS.flags]
 10289                                  					; fnon_removable
 10290 00000A22 740D                    		jz	short block_floppy ;
 10291                                  
 10292                                  ; check	to see if multi	track operation	is allowed. if not
 10293                                  ; we have to go	to the block_floppy below to break up the operation.
 10294                                  
 10295 00000A24 F606[2F05]80            		test	byte [multrk_flag], 80h
 10296                                  		;test	byte ptr ds:multrk_flag, 80h ; multrk_on
 10297 00000A29 7406                    		jz	short block_floppy
 10298 00000A2B E82900                  		call	Disk
 10299 00000A2E 31C0                    		xor	ax, ax
 10300 00000A30 C3                      		retn
 10301                                  ; ---------------------------------------------------------------------------
 10302                                  
 10303                                  block_floppy:
 10304                                  
 10305                                  ; read at most 1 track worth. perform minimization at sector / track
 10306                                  				
 10307 00000A31 268A4D13                		mov	cl, [es:di+19]	; [es:di+BDS.secpertrack]
 10308 00000A35 FEC1                    		inc	cl
 10309 00000A37 2A0E[3101]              		sub	cl, [cursec]
 10310 00000A3B 30ED                    		xor	ch, ch
 10311 00000A3D 39C8                    		cmp	ax, cx
 10312 00000A3F 7302                    		jnb	short gotmin
 10313 00000A41 89C1                    		mov	cx, ax
 10314                                  
 10315                                  gotmin:
 10316                                  
 10317                                  ; ax is the requested number of sectors to read
 10318                                  ; cx is the number that we can do on this track
 10319                                  					
 10320 00000A43 50                      		push	ax
 10321 00000A44 51                      		push	cx
 10322 00000A45 89C8                    		mov	ax, cx
 10323 00000A47 E80D00                  		call	Disk
 10324 00000A4A 59                      		pop	cx
 10325 00000A4B 58                      		pop	ax
 10326                                  
 10327                                  ; cx is the number of sectors just transferred
 10328                                  
 10329 00000A4C 29C8                    		sub	ax, cx		; reduce sectors-remaining by last i/o
 10330 00000A4E D0E1                    		shl	cl, 1
 10331 00000A50 00CF                    		add	bh, cl		; adjust transfer address
 10332 00000A52 EBC5                    		jmp	short block
 10333                                  dskerr_brdg:				
 10334 00000A54 E9EC00                  		jmp	dskerr
 10335                                  
 10336                                  ; =============== S U B	R O U T	I N E =======================================
 10337                                  
 10338                                  ; 15/10/2022
 10339                                  
 10340                                  ;--------------------------------------------------------------
 10341                                  ;perform disk i/o with retries
 10342                                  ; al = number of sectors (1-8, all on one track)
 10343                                  ; es:di point to drive parameters
 10344                                  ; xfer_seg:bx = transfer address 
 10345                                  ;		(must not cross a 64k physical boundary)
 10346                                  ; [rflag] = 2 if read, 3 if write
 10347                                  ; [verify] = 0 for normal, 1 for verify after write
 10348                                  ;--------------------------------------------------------------
 10349                                  
 10350                                  		 ; 19/10/2022
 10351                                  Disk:
 10352                                  
 10353                                  ; Check for hard disk format and
 10354                                  ; if TRUE then set max error count to 2
 10355                                  
 10356 00000A57 BD0500                  		mov	bp, 5		; MAXERR
 10357                                  					; set up retry count
 10358 00000A5A 26F6452301              		test	byte [es:di+23h], 1	;
 10359                                  					; [es:di+BDS.flags], fnon_removable
 10360 00000A5F 7408                    		jz	short GetRdWrInd
 10361 00000A61 80FC04                  		cmp	ah, 4		; romverify ; Is this a	track verify?
 10362 00000A64 7403                    		jz	short GetRdWrInd
 10363 00000A66 BD0200                  		mov	bp, 2		; This is not verify so only 1 retry
 10364                                  GetRdWrInd:				
 10365 00000A69 892E[3205]              		mov	[vretry_cnt], bp ; verify op. retry cnt for write-verify
 10366 00000A6D 892E[3405]              		mov	[soft_ecc_cnt], bp ; soft ecc error retry count.
 10367 00000A71 8A26[2001]              		mov	ah, [rflag]	; get read/write indicator
 10368                                  ;retry:
 10369                                  ; 09/12/2022
 10370                                  _retry:					
 10371 00000A75 50                      		push	ax
 10372 00000A76 8B16[3301]              		mov	dx, [curtrk]
 10373 00000A7A 26F6452301              		test	byte [es:di+23h], 1
 10374 00000A7F 740B                    		jz	short disk_not_mini
 10375 00000A81 26837D4701              		cmp	word [es:di+47h], 1 ; [es:di+BDS.bdsm_ismini]
 10376                                  					; is this a mini disk? ((logical dos partition))
 10377 00000A86 7504                    		jnz	short disk_not_mini ; no. continue to next.
 10378 00000A88 26035549                		add	dx, [es:di+49h]	; [es:di+BDS.bdsm_hidden_trks]
 10379                                  					; add hidden trks.
 10380                                  disk_not_mini:				
 10381 00000A8C D0CE                    		ror	dh, 1
 10382 00000A8E D0CE                    		ror	dh, 1
 10383 00000A90 0A36[3101]              		or	dh, [cursec]
 10384 00000A94 89D1                    		mov	cx, dx
 10385 00000A96 86E9                    		xchg	ch, cl		;  cl =	sector,	ch = cylinder
 10386 00000A98 8A36[3201]              		mov	dh, [curhd]	; load current head number and
 10387 00000A9C 268A5504                		mov	dl, [es:di+4]	; physical drive number
 10388                                  					; [es:di+BDS.drivenum]
 10389 00000AA0 26807D2205              		cmp	byte [es:di+22h], 5 ; [es:di+BDS.formfactor], ffHardFile
 10390 00000AA5 7413                    		jz	short do_fast	; hard files use fast speed
 10391                                  
 10392                                  ; if we have [step_drv] set to -1, we use the slow settle time.
 10393                                  ; this helps when we have just done a reset disk operation and the head has
 10394                                  ; been moved to another cylinder - the problem crops up with 3.5" drives.
 10395                                  
 10396 00000AA7 803E[7600]FF            		cmp	byte [step_drv], 0FFh ; -1
 10397 00000AAC 740A                    		jz	short do_writej
 10398 00000AAE 80FC02                  		cmp	ah, 2		; romread
 10399 00000AB1 7407                    		jz	short do_fast
 10400 00000AB3 80FC04                  		cmp	ah, 4		; romverify
 10401 00000AB6 7402                    		jz	short do_fast
 10402                                  do_writej:	
 10403                                  
 10404                                  ; reads always fast, unless we have just done a disk reset operation
 10405                                  			
 10406 00000AB8 EB56                    		jmp	short do_write	; reads	always fast
 10407                                  ; ---------------------------------------------------------------------------
 10408                                  
 10409                                  do_fast:				
 10410 00000ABA E8FC00                  		call	fastspeed	; change settle	mode
 10411                                  
 10412                                  testerr:				
 10413 00000ABD 7295                    		jb	short dskerr_brdg
 10414                                  
 10415                                  ; set drive and track of last access
 10416                                  
 10417 00000ABF 8816[7600]              		mov	[step_drv], dl
 10418 00000AC3 26886D46                		mov	[es:di+46h], ch	; [es:di+BDS.track]
 10419                                  no_set:
 10420                                  		;cmp	word [wrtverify], 103h
 10421 00000AC7 813E[2001]0301          		cmp	word [rflag], 103h ; check for write and verify
 10422 00000ACD 7452                    		jz	short doverify
 10423                                  noverify:				
 10424 00000ACF 58                      		pop	ax
 10425                                  
 10426                                  ; check the flags word in the bds to see if the drive is non removable
 10427                                  ; if not we needn't do anything special
 10428                                  ; if it is a hard disk then check to see if multi-track operation
 10429                                  ; is specified. if specified we don't have to calculate for the next
 10430                                  ; track since we are already done. so we can go to the exit of this routine.
 10431                                  
 10432 00000AD0 26F6452301              		test	byte [es:di+23h], 1 ; [es:di+BDS.flags]
 10433                                  					; fnon_removable
 10434 00000AD5 7407                    		jz	short its_removable
 10435 00000AD7 F606[2F05]80            		test	byte [multrk_flag], 80h ; multrk_on
 10436 00000ADC 7530                    		jnz	short disk_ret
 10437                                  its_removable:				
 10438 00000ADE 80E13F                  		and	cl, 3Fh		; eliminate cylinder bits from sector
 10439 00000AE1 30E4                    		xor	ah, ah
 10440 00000AE3 2906[2201]              		sub	[seccnt], ax	; reduce count of sectors to go	next sector
 10441 00000AE7 00C1                    		add	cl, al
 10442 00000AE9 880E[3101]              		mov	[cursec], cl
 10443 00000AED 263A4D13                		cmp	cl, [es:di+13h]	; [es:di+BDS.secpertrack]
 10444                                  					; see if sector/track limit reached
 10445 00000AF1 761B                    		jbe	short disk_ret
 10446 00000AF3 C606[3101]01            		mov	byte [cursec], 1 ; start with first sector of next track
 10447 00000AF8 8A36[3201]              		mov	dh, [curhd]
 10448 00000AFC FEC6                    		inc	dh
 10449 00000AFE 263A7515                		cmp	dh, [es:di+15h]	; [es:di+BDS.heads]
 10450 00000B02 7206                    		jb	short noxor
 10451 00000B04 30F6                    		xor	dh, dh
 10452 00000B06 FF06[3301]              		inc	word [curtrk]
 10453                                  noxor:					
 10454 00000B0A 8836[3201]              		mov	[curhd], dh
 10455                                  disk_ret:				
 10456 00000B0E F8                      		clc
 10457 00000B0F C3                      		retn
 10458                                  ; ---------------------------------------------------------------------------
 10459                                  
 10460                                  ; 15/10/2022
 10461                                  
 10462                                  ;--------------------------------------------------------------
 10463                                  ; the request is for write. determine if we are talking about
 10464                                  ; the same track and drive. if so, use the fast speed.
 10465                                  ;--------------------------------------------------------------
 10466                                  
 10467                                  do_write:				
 10468 00000B10 3A16[7600]              		cmp	dl, [step_drv]
 10469 00000B14 7506                    		jnz	short do_norm	; we have changed drives
 10470 00000B16 263A6D46                		cmp	ch, [es:di+46h]	; [es:di+BDS.track]
 10471 00000B1A 749E                    		jz	short do_fast	; we are still on the same track
 10472                                  
 10473                                  do_norm:				
 10474 00000B1C E87500                  		call	normspeed
 10475 00000B1F EB9C                    		jmp	short testerr
 10476                                  ; ---------------------------------------------------------------------------
 10477                                  
 10478                                  ;--------------------------------------------------------------
 10479                                  ; we have a verify request also. get state info and go verify
 10480                                  ;--------------------------------------------------------------
 10481                                  
 10482                                  doverify:				
 10483 00000B21 58                      		pop	ax
 10484 00000B22 50                      		push	ax
 10485 00000B23 B404                    		mov	ah, 4
 10486 00000B25 E89100                  		call	fastspeed
 10487 00000B28 73A5                    		jnb	short noverify
 10488                                  
 10489                                  ; check the error returned in ah to see if it is a soft ecc error.
 10490                                  ; if it is not we needn't do anything special. if it is a soft
 10491                                  ; ecc error then decrement the soft_ecc_cnt error retry count. if
 10492                                  ; this retry count becomes 0 then we just ignore the error and go to
 10493                                  ; no_verify but if we can still try then we call the routine to reset
 10494                                  ; the disk and go to dskerr1 to retry the operation.
 10495                                  
 10496 00000B2A 80FC11                  		cmp	ah, 11h		; soft ecc error ?
 10497 00000B2D 750B                    		jnz	short not_softecc_err
 10498 00000B2F FF0E[3405]              		dec	word [soft_ecc_cnt]
 10499 00000B33 749A                    		jz	short noverify	; no more retry
 10500 00000B35 E84405                  		call	ResetDisk	; reset	disk
 10501 00000B38 EB3E                    		jmp	short dskerr1	; retry
 10502                                  ; ---------------------------------------------------------------------------
 10503                                  
 10504                                  not_softecc_err:			; other error.			
 10505 00000B3A E83F05                  		call	ResetDisk
 10506 00000B3D FF0E[3205]              		dec	word [vretry_cnt]
 10507 00000B41 EB1C                    		jmp	short dskerr0
 10508                                  ; ---------------------------------------------------------------------------
 10509                                  
 10510                                  ;--------------------------------------------------------------
 10511                                  ; need to special case the change-line error ah=06h.
 10512                                  ; if we get this, we need to return it.
 10513                                  ;--------------------------------------------------------------
 10514                                  
 10515                                  dskerr:					
 10516 00000B43 803E[7700]00            		cmp	byte [fhave96], 0	; do we	have changeline	support?
 10517 00000B48 7403                    		jz	short dskerr_nochangeline ; brif not
 10518 00000B4A E8220D                  		call	checkio
 10519                                  dskerr_nochangeline:			
 10520 00000B4D 803E[3605]01            		cmp	byte [multitrk_format_flag], 1 ; multi trk format request?
 10521 00000B52 7508                    		jnz	short dochkagain ; no more retry.
 10522 00000B54 BD0100                  		mov	bp, 1
 10523 00000B57 C606[3605]00            		mov	byte [multitrk_format_flag], 0 ; clear the flag.
 10524                                  dochkagain:				
 10525 00000B5C E8AA00                  		call	again
 10526                                  dskerr0:				
 10527 00000B5F 7420                    		jz	short harderr
 10528 00000B61 26F6452301              		test	byte [es:di+23h], 1 ; [es:di+BDS.flags]
 10529                                  					; fnon_removable
 10530 00000B66 7505                    		jnz	short skip_timeout_chk
 10531 00000B68 80FC80                  		cmp	ah, 80h		; timeout?
 10532 00000B6B 7414                    		jz	short harderr
 10533                                  skip_timeout_chk:			
 10534 00000B6D 80FCCC                  		cmp	ah, 0CCh	; write	fault error?
 10535 00000B70 740A                    		jz	short write_fault_err ;	then, don't retry.
 10536 00000B72 C706[3405]0500          		mov	word [soft_ecc_cnt], 5 ; MAXERR
 10537                                  					; set soft_ecc_cnt back	to maxerr
 10538                                  dskerr1:				
 10539 00000B78 58                      		pop	ax		; restore sector count
 10540                                  		;jmp	retry
 10541                                  		; 09/12/2022
 10542 00000B79 E9F9FE                  		jmp	_retry
 10543                                  ; ---------------------------------------------------------------------------
 10544                                  
 10545                                  write_fault_err:			
 10546 00000B7C BD0100                  		mov	bp, 1		; just retry only once
 10547                                  					; for write fault error.
 10548 00000B7F EBF7                    		jmp	short dskerr1
 10549                                  
 10550                                  		; fall into harderr
 10551                                  ; ---------------------------------------------------------------------------
 10552                                  
 10553                                  ; entry point for routines that call maperror themselves
 10554                                  
 10555                                  harderr:				
 10556 00000B81 E84D00                  		call	maperror
 10557                                  harderr2:				
 10558 00000B84 C606[1E01]FF            		mov	byte [tim_drv], 0FFh
 10559                                  					; force a media check through rom
 10560 00000B89 8B0E[2201]              		mov	cx, [seccnt]	; get count of sectors to go
 10561 00000B8D 8B26[3501]              		mov	sp, [spsav]	; recover entry	stack pointer
 10562                                  
 10563                                  ; since we are performing a non-local goto, restore the disk parameters
 10564                                  
 10565                                  		;jmp	diddleback
 10566                                  		; 09/12/2022
 10567 00000B91 E958FE                  		jmp	diddle_back
 10568                                  
 10569                                  ; =============== S U B	R O U T	I N E =======================================
 10570                                  
 10571                                  ; change settle value from settlecurrent to whatever is appropriate
 10572                                  ; note that this routine is never called for a fixed disk.
 10573                                  
 10574                                  		; 19/10/2022
 10575                                  normspeed:
 10576 00000B94 803E[3806]00            		cmp	byte [media_set_for_format], 0
 10577 00000B99 751E                    		jnz	short fastspeed
 10578 00000B9B 06                      		push	es
 10579 00000B9C 50                      		push	ax
 10580 00000B9D A0[2801]                		mov	al, [settleslow]
 10581 00000BA0 C436[2D01]              		les	si, [dpt]	; current disk parm table
 10582 00000BA4 26884409                		mov	[es:si+9], al	; [es:si+DISK_PARMS.DISK_HEAD_STTL]
 10583 00000BA8 58                      		pop	ax
 10584 00000BA9 07                      		pop	es
 10585 00000BAA E80C00                  		call	fastspeed
 10586 00000BAD 06                      		push	es
 10587 00000BAE C436[2D01]              		les	si, [dpt]
 10588 00000BB2 26C6440901              		mov	byte [es:si+9], 1 ; [es:si+DISK_PARMS.DISK_HEAD_STTL]
 10589                                  					; 1 is fast settle value
 10590 00000BB7 07                      		pop	es
 10591 00000BB8 C3                      		retn
 10592                                  
 10593                                  ; =============== S U B	R O U T	I N E =======================================
 10594                                  
 10595                                  ; if the drive has been marked as too big (i.e. starting sector of the
 10596                                  ; partition is > 16 bits, then always return drive not ready.
 10597                                  
 10598                                  fastspeed:		
 10599 00000BB9 26F6451F80              		test	byte [es:di+1Fh], 80h ; [es:di+BDS.fatsiz]
 10600                                  					; ftoobig
 10601 00000BBE 750D                    		jnz	short notready
 10602 00000BC0 06                      		push	es
 10603 00000BC1 8E06[3705]              		mov	es, [xfer_seg]
 10604 00000BC5 CD13                    		int	13h		; DISK -
 10605 00000BC7 8C06[3705]              		mov	[xfer_seg], es
 10606 00000BCB 07                      		pop	es
 10607 00000BCC C3                      		retn
 10608                                  ; ---------------------------------------------------------------------------
 10609                                  
 10610                                  notready:				
 10611 00000BCD F9                      		stc
 10612 00000BCE B480                    		mov	ah, 80h
 10613 00000BD0 C3                      		retn
 10614                                  
 10615                                  ; =============== S U B	R O U T	I N E =======================================
 10616                                  
 10617                                  ; map error returned by rom in ah into corresponding code to be returned to
 10618                                  ; dos in al. trashes di. guaranteed to set carry.
 10619                                  
 10620                                  maperror:	
 10621 00000BD1 51                      		push	cx
 10622 00000BD2 06                      		push	es
 10623 00000BD3 1E                      		push	ds		; set es=Bios_Data
 10624 00000BD4 07                      		pop	es
 10625 00000BD5 88E0                    		mov	al, ah		; put error code in al
 10626 00000BD7 A2[4401]                		mov	[lsterr], al	; terminate list with error code
 10627 00000BDA B90900                  		mov	cx, 9		; numerr (= errout-errin)
 10628                                  					; number of possible error conditions
 10629 00000BDD BF[3C01]                		mov	di, errin	; point to error conditions
 10630 00000BE0 F2AE                    		repne scasb
 10631                                  		; 10/12/2022
 10632 00000BE2 8A4508                  		mov	al, [di+8]	; [di+numerr-1]
 10633                                  					; get translation
 10634                                  		; 19/10/2022 - Temporary ! 
 10635                                  		;db	8Ah, 85h, 8, 0	; mov al, [di+8]
 10636 00000BE5 07                      		pop	es
 10637 00000BE6 59                      		pop	cx
 10638 00000BE7 F9                      		stc			; flag error condition
 10639 00000BE8 C3                      		retn
 10640                                  
 10641                                  ; =============== S U B	R O U T	I N E =======================================
 10642                                  
 10643                                  ; set the time of last access for this drive.
 10644                                  ; this is done only for removable media. es:di -> bds
 10645                                  
 10646                                  set_tim:		
 10647 00000BE9 50                      		push	ax
 10648 00000BEA E88DF8                  		call	GetTickCnt	; Does INT 1A ah=0 & updates daycnt
 10649                                  
 10650                                  ; we have the new time. if we see that the time has passed,
 10651                                  ; then we reset the threshold counter...
 10652                                  
 10653 00000BED 263B5547                		cmp	dx, [es:di+47h]	; [es:di+BDS.tim_lo]
 10654 00000BF1 7506                    		jnz	short setaccess
 10655 00000BF3 263B4D49                		cmp	cx, [es:di+49h]	; [es:di+BDS.tim_hi]
 10656                                  		;jz	short done_set
 10657                                  		; 12/12/2022
 10658 00000BF7 740E                    		je	short done_set2
 10659                                  setaccess:				
 10660 00000BF9 C606[1D01]00            		mov	byte [accesscount], 0
 10661 00000BFE 26895547                		mov	[es:di+47h], dx	; [es:di+BDS.tim_lo]
 10662 00000C02 26894D49                		mov	[es:di+49h], cx	; [es:di+BDS.tim_hi]
 10663                                  done_set:				
 10664 00000C06 F8                      		clc
 10665                                  done_set2:		; 12/12/2022
 10666 00000C07 58                      		pop	ax
 10667 00000C08 C3                      		retn
 10668                                  
 10669                                  ; =============== S U B	R O U T	I N E =======================================
 10670                                  
 10671                                  ; this routine is called if an error occurs while formatting or verifying.
 10672                                  ; it resets the drive,and decrements the retry count.
 10673                                  ; on entry - ds:di - points to bds for the drive
 10674                                  ;	     bp    - contains retry count
 10675                                  ; on exit    flags indicate result of decrementing retry count
 10676                                  
 10677                                  again:	
 10678 00000C09 E87004                  		call	ResetDisk
 10679 00000C0C 80FC06                  		cmp	ah, 6
 10680 00000C0F 7402                    		jz	short dont_dec_retry_count ; If	it is a	media change error
 10681                                  					; do not decrement retry count.
 10682 00000C11 4D                      		dec	bp		; decrement retry count
 10683 00000C12 C3                      		retn
 10684                                  ; ---------------------------------------------------------------------------
 10685                                  
 10686                                  dont_dec_retry_count:			
 10687 00000C13 08E4                    		or	ah, ah
 10688 00000C15 C3                      		retn
 10689                                  
 10690                                  ; 16/10/2022 - Retro DOS 4.0 (Modified MSDOS 5.0 IO.SYS)
 10691                                  
 10692                                  ;----------------------------------------------------------------------------
 10693                                  ; MSDIOCTL.ASM - MSDOS 6.0 - 1991
 10694                                  ;----------------------------------------------------------------------------
 10695                                  ; 11/03/2019 - Retro DOS v4.0
 10696                                  
 10697                                  ; 18/03/2019
 10698                                  
 10699                                  ; ==========================================================================
 10700                                  ;
 10701                                  ; NOTE: GetAccessFlag/SetAccessFlag is unpublished function.
 10702                                  ;
 10703                                  ;      This function is intended to give the user to control the
 10704                                  ;      bds table flags of unformatted_media bit.
 10705                                  ;      GetAccessFlag will show the status -
 10706                                  ;	 a_DiskAccess_Control.dac_access_flag = 0 disk i/o not allowed
 10707                                  ;						1 disk i/o allowed
 10708                                  ;      SetAccessFlag will set/reset the unformatted_media bit in flags -
 10709                                  ;	 a_DiskAccess_Control.dac_access_flag = 0 allow disk i/o
 10710                                  ;						1 disallow disk i/o
 10711                                  ; ==========================================================================
 10712                                  
 10713                                  		; generic ioctl dispatch tables
 10714                                  
 10715                                  ; BIOSCODE:0C3Ch (MSDOS 6.21, IO.SYS)
 10716                                  
 10717                                  ; ---------------------------------------------------------------------------
 10718 00000C16 00                      		db 0
 10719                                  
 10720                                  ; 09/12/2022 
 10721                                  %if 0
 10722                                  
 10723                                  IoReadJumpTable: db 8	; ((IoWriteJumpTable-IoReadJumpTable)-1)/2
 10724                                  		dw 0CA7h	; 60h	; GetDeviceParameters
 10725                                  		dw 0EE8h	; 61h	; ReadTrack
 10726                                  		dw 0E86h	; 62h	; VerifyTrack
 10727                                  		dw 0CA3h	 	; Cmd_Error_Proc
 10728                                  		dw 0CA3h		; Cmd_Error_Proc
 10729                                  		dw 0CA3h		; Cmd_Error_Proc
 10730                                  		dw 119Ah	; 66h	; GetMediaId
 10731                                  		dw 1269h	; 67h	; GetAccessFlag ; unpublished function
 10732                                  		dw 12C1h	; 68h	; SenseMediaType
 10733                                  
 10734                                  IoWriteJumpTable: db 7	; ((IOC_DC_Table-IoWriteJumpTable)-1)/2
 10735                                  		dw 0CF3h	; 40h	; SetDeviceParameters
 10736                                  		dw 0EEFh	; 41h	; WriteTrack
 10737                                  		dw 0DC1h	; 42h	; FormatTrack
 10738                                  		dw 0CA3h		; Cmd_Error_Proc
 10739                                  		dw 0CA3h		; Cmd_Error_Proc
 10740                                  		dw 0CA3h		; Cmd_Error_Proc
 10741                                  		dw 11D2h	; 46h	; SetMediaId
 10742                                  		dw 1280h	; 47h	; SetAccessFlag ; unpublished function
 10743                                  
 10744                                  %endif
 10745                                  
 10746                                  		; 09/12/2022
 10747 00000C17 09                      IoReadJumpTable: db ((IoWriteJumpTable-IoReadJumpTable)-1)/2 ; 8
 10748 00000C18 [820C]                  		dw GetDeviceParameters	; 60h
 10749 00000C1A [BD0E]                  		dw ReadTrack		; 61h
 10750 00000C1C [5D0E]                  		dw VerifyTrack		; 62h
 10751 00000C1E [7E0C]                  		dw Cmd_Error_Proc
 10752 00000C20 [7E0C]                  		dw Cmd_Error_Proc
 10753 00000C22 [7E0C]                  		dw Cmd_Error_Proc
 10754 00000C24 [5E11]                  		dw GetMediaId		; 66h
 10755 00000C26 [2A12]                  		dw GetAccessFlag	; 67h ; unpublished function
 10756 00000C28 [7C12]                  		dw SenseMediaType	; 68h
 10757                                  
 10758 00000C2A 08                      IoWriteJumpTable: db ((IOC_DC_Table-IoWriteJumpTable)-1)/2 ; 7
 10759 00000C2B [CD0C]                  		dw SetDeviceParameters	; 40h
 10760 00000C2D [C40E]                  		dw WriteTrack		; 41h
 10761 00000C2F [980D]                  		dw FormatTrack		; 42h
 10762 00000C31 [7E0C]                  		dw Cmd_Error_Proc
 10763 00000C33 [7E0C]                  		dw Cmd_Error_Proc
 10764 00000C35 [7E0C]                  		dw Cmd_Error_Proc
 10765 00000C37 [9411]                  		dw SetMediaId		; 46h
 10766 00000C39 [4012]                  		dw SetAccessFlag	; 47h ; unpublished function
 10767                                  
 10768                                  ; ==========================================================================
 10769                                  ; IOC_DC_Table
 10770                                  ;
 10771                                  ; This table contains all of the valid generic IOCtl Minor codes for
 10772                                  ; major function 08 to be used by the Ioctl_Support_Query function.
 10773                                  ; Added for 5.00
 10774                                  ; ==========================================================================
 10775                                  
 10776 00000C3B 60                      IOC_DC_Table:	db 60h			; GET_DEVICE_PARAMETERS
 10777 00000C3C 40                      		db 40h			; SET_DEVICE_PARAMETERS
 10778 00000C3D 61                      		db 61h			; READ_TRACK
 10779 00000C3E 41                      		db 41h			; WRITE_TRACK
 10780 00000C3F 62                      		db 62h			; VERIFY_TRACK
 10781 00000C40 42                      		db 42h			; FORMAT_TRACK
 10782 00000C41 66                      		db 66h			; GET_MEDIA_ID
 10783 00000C42 46                      		db 46h			; SET_MEDIA_ID
 10784 00000C43 67                      		db 67h			; GET_ACCESS_FLAG
 10785 00000C44 47                      		db 47h			; SET_ACCESS_FLAG
 10786 00000C45 68                      		db 68h			; SENSE_MEDIA_TYPE
 10787                                  
 10788                                  ;IOC_DC_TABLE_LEN EQU $ - IOC_DC_Table
 10789                                  
 10790                                  ; ---------------------------------------------------------------------------
 10791                                  
 10792                                  ; 16/10/2022
 10793                                  
 10794                                  ; ==========================================================================
 10795                                  ; Do_Generic_IOCtl: perform generic ioctl request
 10796                                  ;
 10797                                  ;    input: AL contains logical drive
 10798                                  ;
 10799                                  ;	functions are dispatched through a call. On return, carry indicates
 10800                                  ;	error code in al. Note::bES:b& ds undefined on return from
 10801                                  ;	subfunctions.
 10802                                  ;
 10803                                  ; ==========================================================================
 10804                                  
 10805                                  ; 11/03/2019
 10806                                  		; 19/10/2022
 10807                                  do_generic_ioctl:			; 2C7h:0C6Bh = 70h:31DBh
 10808 00000C46 E882F8                  		call	SetDrive	; ES:DI	Points to bds for drive
 10809 00000C49 06                      		push	es
 10810 00000C4A C41E[1200]              		les	bx, [ptrsav]	; ES:BX	Points to request header
 10811 00000C4E 26807F0D08              		cmp	byte [es:bx+0Dh], 8 ; [es:bx+IOCTL_REQ.MAJORFUNCTION]
 10812                                  					; RAWIO
 10813 00000C53 268A470E                		mov	al, [es:bx+0Eh]	; [es:bx+IOCTL_REQ.MINORFUNCTION]
 10814 00000C57 07                      		pop	es
 10815 00000C58 7525                    		jnz	short IoctlFuncErr
 10816                                  
 10817                                  		; cas note: Could do the above two blocks in reverse order.
 10818                                  		; Would have to preserve al for SetDrive
 10819                                  
 10820                                  		; 10/12/2022
 10821 00000C5A BE[170C]                		mov	si, IoReadJumpTable
 10822                                  		;mov	si, 0C3Ch	; IoReadJumpTable
 10823                                  					; at 2C7h:0C3Ch	= 70h:31ACh
 10824 00000C5D A820                    		test	al, 20h		; GEN_IOCTL_FN_TST ; test of req. function
 10825 00000C5F 7503                    		jnz	short NotGenericWrite ; function is a read.
 10826                                  		; 10/12/2022
 10827 00000C61 BE[2A0C]                		mov	si, IoWriteJumpTable
 10828                                  		;mov	si, 0C4Fh	; IoWriteJumpTable
 10829                                  					; at 2C7h:0C4Fh	= 70h:31BFh
 10830                                  NotGenericWrite:			
 10831 00000C64 24DF                    		and	al, 0DFh	; ~GEN_IOCTL_FN_TST ; get rid of read/write bit
 10832 00000C66 2C40                    		sub	al, 40h		; offset for base function
 10833 00000C68 2E3A04                  		cmp	al, [cs:si]
 10834 00000C6B 7712                    		ja	short IoctlFuncErr
 10835 00000C6D 98                      		cbw
 10836 00000C6E D1E0                    		shl	ax, 1
 10837 00000C70 46                      		inc	si
 10838 00000C71 01C6                    		add	si, ax
 10839 00000C73 2EFF14                  		call	near [cs:si]
 10840                                  		;call	word ptr cs:[si]
 10841 00000C76 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD]
 10842                                  		;mov	ds, word ptr cs:BIOSDATAWORD ; [cs:Bios_Data_Word]
 10843                                  					; 2C7h:30h = 70h:25A0h
 10844 00000C7B B481                    		mov	ah, 81h		; Return this status in	case of	carry
 10845 00000C7D C3                      		retn			; Pass carry flag through to exit code
 10846                                  ; ---------------------------------------------------------------------------
 10847                                  
 10848                                  		; Cmd_Error_Proc is called as a procedure and also use
 10849                                  		; as a fall through from above
 10850                                  Cmd_Error_Proc:				; 2C7h:0CA3h = 70h:3213h
 10851 00000C7E 5A                      		pop	dx
 10852                                  
 10853                                  IoctlFuncErr:				
 10854 00000C7F E953F4                  		jmp	bc_cmderr
 10855                                  ; ---------------------------------------------------------------------------
 10856                                  
 10857                                  ; 16/10/2022
 10858                                  
 10859                                  ; ==========================================================================
 10860                                  ;**	GetDeviceParameters:
 10861                                  ;
 10862                                  ;	GetDeviceParameters implements the generic ioctl function:
 10863                                  ;	majorcode=RAWIO, minorcode=GetDeviceParameters (60h)
 10864                                  ;
 10865                                  ;	ENTRY	(ES:di) = BDS for drive
 10866                                  ;		PtrSav = long pointer to request header
 10867                                  ;	EXIT	??? BUGBUG
 10868                                  ;	USES	??? BUGBUG
 10869                                  ; ==========================================================================
 10870                                  
 10871                                  		; 19/10/2022
 10872                                  GetDeviceParameters:
 10873                                  		; Copy info from bds to the device parameters packet
 10874                                  
 10875 00000C82 C51E[1200]              		lds	bx, [ptrsav]	; DS:BX	points to request header
 10876 00000C86 C55F13                  		lds	bx, [bx+19]	; [bx+IOCTL_REQ.GENERICIOCTL_PACKET]
 10877                                  					; (DS:BX) = return buffer
 10878 00000C89 268A4522                		mov	al, [es:di+34]	; [es:di+BDS.formfactor]
 10879 00000C8D 884701                  		mov	[bx+1],	al	; [bx+A_DEVICEPARAMETERS.DP_DEVICETYPE]
 10880 00000C90 268B4523                		mov	ax, [es:di+35]	; [es:di+BDS.flags]
 10881 00000C94 83E003                  		and	ax, 3		; fnon_removable+fchangeline
 10882                                  					; Mask off other bits
 10883 00000C97 894702                  		mov	[bx+2],	ax	; [bx+A_DEVICEPARAMETERS.DP_DEVICEATTRIBUTES]
 10884 00000C9A 268B4525                		mov	ax, [es:di+37]	; [es:di+BDS.cylinders]
 10885 00000C9E 894704                  		mov	[bx+4],	ax	; [bx+A_DEVICEPARAMETERS.DP_CYLINDERS]
 10886 00000CA1 30C0                    		xor	al, al		; Set media type to default
 10887 00000CA3 884706                  		mov	[bx+6],	al	; [bx+A_DEVICEPARAMETERS.DP_MEDIATYPE]
 10888                                  					
 10889                                  		; copy recommended bpb
 10890 00000CA6 8D7527                  		lea	si, [di+39]	; [di+BDS.rbytespersec]	= [di+BDS.R_BPB]
 10891 00000CA9 F60701                  		test	byte [bx], 1	; [bx+A_DEVICEPARAMETERS.DP_SPECIALFUNCTIONS]
 10892                                  					; BUILD_DEVICE_BPB
 10893 00000CAC 7412                    		jz	short UseBpbPresent
 10894 00000CAE 1E                      		push	ds		; Save request packet segment
 10895 00000CAF 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD]
 10896                                  		;mov	ds, word ptr cs:BIOSDATAWORD ; [cs:Bios_Data_Word]
 10897                                  					; 2C7h:30h = 70h:25A0h
 10898                                  					; Point back to Bios_Data
 10899 00000CB4 E885FB                  		call	checksingle
 10900 00000CB7 E83EF9                  		call	GetBp		; Build	the bpb	from scratch
 10901 00000CBA 1F                      		pop	ds		; Restore request packet segment
 10902 00000CBB 720F                    		jb	short GetParmRet
 10903 00000CBD 8D7506                  		lea	si, [di+6]	; [di+BDS.bytespersec] = [di+BSD.DP_BPB]
 10904                                  					; Use this subfield of bds instead
 10905                                  UseBpbPresent:				
 10906 00000CC0 8D7F07                  		lea	di, [bx+7]	; [bx+A_DEVICEPARAMETERS.DP_BPB]
 10907                                  					; This is where	the result goes
 10908 00000CC3 B91900                  		mov	cx, 25		; A_BPB.size - 6
 10909                                  					; For now use 'small' bpb
 10910 00000CC6 1E                      		push	ds		; reverse segments for copy
 10911 00000CC7 06                      		push	es
 10912 00000CC8 1F                      		pop	ds
 10913 00000CC9 07                      		pop	es
 10914 00000CCA F3A4                    		rep movsb
 10915                                  		
 10916                                  		; 12/12/2022
 10917                                  		; cf=0 (test instruction -above- resets cf) 	
 10918                                  		;clc
 10919                                  GetParmRet:				
 10920 00000CCC C3                      		retn
 10921                                  ; ---------------------------------------------------------------------------
 10922                                  
 10923                                  ; 17/10/2022
 10924                                  ; 16/10/2022
 10925                                  
 10926                                  ; ==========================================================================
 10927                                  ; SetDeviceParameters:
 10928                                  ;
 10929                                  ; input: ES:di points to bds for drive
 10930                                  ; ==========================================================================
 10931                                  
 10932                                  		; 19/10/2022
 10933                                  SetDeviceParameters:			; 2C7h:0CF3h = 70h:3263h
 10934 00000CCD C51E[1200]              		lds	bx, [ptrsav]	; DS:BX	points to request header
 10935 00000CD1 C55F13                  		lds	bx, [bx+19]	; [bx+IOCTL_REQ.GENERICIOCTL_PACKET]
 10936 00000CD4 26814D234001            		or	word [es:di+23h], 140h ; [es:di+BDS.flags]
 10937                                  					; fchanged_by_format|fchanged
 10938 00000CDA F60702                  		test	byte [bx], 2	; [bx+A_DEVICEPARAMETERS.DP_SPECIALFUNCTIONS]
 10939                                  					; ONLY_SET_TRACKLAYOUT
 10940 00000CDD 7579                    		jnz	short setTrackTable
 10941 00000CDF 8A4701                  		mov	al, [bx+1]	; [bx+A_DEVICEPARAMETERS.DP_DEVICETYPE]
 10942 00000CE2 26884522                		mov	[es:di+34], al	; [es:di+BDS.formfactor]
 10943 00000CE6 8B4704                  		mov	ax, [bx+4]	; [bx+A_DEVICEPARAMETERS.DP_CYLINDERS]
 10944 00000CE9 26894525                		mov	[es:di+37], ax	; [es:di+BDS.cylinders]
 10945 00000CED 8B4702                  		mov	ax, [bx+2]	; [bx+A_DEVICEPARAMETERS.DP_DEVICEATTRIBUTES]
 10946 00000CF0 1E                      		push	ds
 10947                                  		; 17/10/2022
 10948 00000CF1 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD]
 10949                                  		;mov	ds, word ptr cs:BIOSDATAWORD ; [cs:Bios_Data_Word]
 10950                                  					; 2C7h:30h = 70h:25A0h
 10951                                  		;cmp	byte [fhave96], 0
 10952 00000CF6 803E[7700]00            		cmp	byte [fhave96], 0
 10953 00000CFB 1F                      		pop	ds
 10954 00000CFC 7502                    		jnz	short HaveChange ; we have changeline support
 10955                                  		; 10/12/2022
 10956 00000CFE 24FD                    		and	al, 0FDh
 10957                                  		;and	ax, 0FFFDh	; ~fchangeline
 10958                                  
 10959                                  		; Ignore all bits except non_removable and changeline
 10960                                  HaveChange:				
 10961 00000D00 83E003                  		and	ax, 3		; fnon_removable|fchangeline
 10962 00000D03 268B4D23                		mov	cx, [es:di+35]	; [es:di+BDS.flags]
 10963 00000D07 81E1F4FD                		and	cx, 0FDF4h	; ~(fnon_removable|fchangeline|good_tracklayout|unformatted_media)
 10964 00000D0B 09C8                    		or	ax, cx
 10965 00000D0D 26894523                		mov	[es:di+35], ax	; [es:di+BDS.flags]
 10966 00000D11 8A4706                  		mov	al, [bx+6]	; [bx+A_DEVICEPARAMETERS.DP_MEDIATYPE]
 10967                                  					; Set media type
 10968 00000D14 1E                      		push	ds
 10969 00000D15 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD]
 10970                                  		;mov	ds, word ptr cs:BIOSDATAWORD ; [cs:Bios_Data_Word]
 10971 00000D1A A2[3706]                		mov	[mediatype], al
 10972                                  		;mov	ds:mediatype, al
 10973 00000D1D 1F                      		pop	ds
 10974                                  
 10975                                  		; The media changed (maybe) so we will have to do a set dasd
 10976                                  		; the next time we format a track
 10977                                  
 10978                                  		; 10/12/2022
 10979 00000D1E 26804D2380              		or	byte [es:di+35], 80h
 10980                                  		;or	word [es:di+35], 80h ; [es:di+BDS.flags]
 10981                                  					; set_dasd_true
 10982 00000D23 57                      		push	di		; Save bds pointer
 10983                                  
 10984                                  		; Figure out what we are supposed to do with the bpb
 10985                                  		; were we asked to install a fake bpb?
 10986                                  
 10987 00000D24 F60701                  		test	byte [bx], 1	; [bx+A_DEVICEPARAMETERS.DP_SPECIALFUNCTIONS]
 10988                                  					; INSTALL_FAKE_BPB
 10989 00000D27 7514                    		jnz	short InstallFakeBpb
 10990                                  
 10991                                  		; were we returning a fake bpb when asked to build a bpb?
 10992                                  
 10993                                  		; 10/12/2022
 10994 00000D29 26F6452304              		test	byte [es:di+35], 4
 10995                                  		;test	word [es:di+35], 4 ; [es:di+BDS.flags]
 10996                                  					; return_fake_bpb
 10997 00000D2E 7405                    		jz	short InstallRecommendedBpb
 10998                                  
 10999                                  		; we were returning a fake bpb but we can stop now
 11000                                  
 11001                                  		; 10/12/2022
 11002 00000D30 26806523FB              		and	byte [es:di+35], 0FBh
 11003                                  		;and	word [es:di+35], 0FFFBh ; [es:di+BDS.flags]
 11004                                  					; ~return_fake_bpb
 11005                                  InstallRecommendedBpb:			
 11006 00000D35 B91F00                  		mov	cx, 31		; A_BPB.size
 11007 00000D38 8D7D27                  		lea	di, [di+27h]	; [di+BDS.R_BPB] = [di+BDS.rbytespersec]
 11008 00000D3B EB0B                    		jmp	short CopyTheBpb
 11009                                  ; ---------------------------------------------------------------------------
 11010                                  
 11011                                  InstallFakeBpb:
 11012                                  		; 10/12/2022
 11013 00000D3D 26804D2304              		or	byte [es:di+35], 4				
 11014                                  		;or	word [es:di+35], 4 ; byte [es:di+BDS.flags]
 11015                                  					; return_fake_bpb
 11016 00000D42 B91900                  		mov	cx, 25		; A_BPB.size - 6
 11017                                  					; move 'smaller' bpb
 11018 00000D45 8D7D06                  		lea	di, [di+6]	; [es:di+BDS.BPB] = [es:di+BDS.bytespersec]
 11019                                  
 11020                                  CopyTheBpb:				
 11021 00000D48 8D7707                  		lea	si, [bx+7]	; [bx+A_DEVICEPARAMETERS.DP_BPB]
 11022 00000D4B F3A4                    		rep movsb
 11023 00000D4D 1E                      		push	ds		; Save packet segment
 11024                                  		; 17/10/2022
 11025 00000D4E 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD]
 11026                                  		;mov	ds, word ptr cs:BIOSDATAWORD ; [cs:Bios_Data_Word]
 11027                                  					; Setup	for ds -> Bios_Data
 11028 00000D53 E8DA03                  		call	RestoreOldDpt	; Restore the old Dpt from TempDpt
 11029 00000D56 1F                      		pop	ds		; Restore packet segment
 11030 00000D57 5F                      		pop	di		; Restore bds pointer
 11031                                  setTrackTable:				
 11032 00000D58 8B4F26                  		mov	cx, [bx+38]
 11033 00000D5B 1E                      		push	ds
 11034 00000D5C 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD]
 11035 00000D61 890E[3905]              		mov	[sectorspertrack], cx
 11036 00000D65 1F                      		pop	ds
 11037                                  		; 10/12/2022
 11038 00000D66 26806523F7              		and	byte [es:di+35], 0F7h
 11039                                  		;and	word [es:di+35], 0FFF7h ; [es:di+BDS.flags]
 11040                                  					; ~good_tracklayout
 11041 00000D6B F60704                  		test	byte [bx], 4	; [bx+A_DEVICEPARAMETERS.DP_SPECIALFUNCTIONS]
 11042                                  					; TRACKLAYOUT_IS_GOOD
 11043 00000D6E 7405                    		jz	short UglyTrackLayOut
 11044                                  		; 10/12/2022
 11045 00000D70 26804D2308              		or	byte [es:di+35], 8
 11046                                  		;or	word [es:di+35], 8 ; [es:di+BDS.flags]
 11047                                  					; good_tracklayout
 11048                                  UglyTrackLayOut:			
 11049 00000D75 83F93F                  		cmp	cx, 63		; MAX_SECTORS_IN_TRACK
 11050 00000D78 771A                    		ja	short TooManyPerTrack
 11051                                  		;jcxz	short SectorInfoSaved
 11052 00000D7A E316                    		jcxz	SectorInfoSaved	; 19/10/2022
 11053 00000D7C BF[3B05]                		mov	di, tracktable
 11054 00000D7F 8D7728                  		lea	si, [bx+40]	; [bx+A_DEVICEPARAMETERS.DP_SECTORTABLE]
 11055                                  		; 17/10/2022
 11056 00000D82 2E8E06[3000]            		mov	es, [cs:BIOSDATAWORD]
 11057                                  		;mov	es, word ptr cs:BIOSDATAWORD ; [cs:Bios_Data_Word]
 11058                                  					; Trash	our bds	pointer
 11059                                  StoreSectorInfo:			
 11060 00000D87 47                      		inc	di
 11061 00000D88 47                      		inc	di		; Skip over cylinder and head
 11062 00000D89 AD                      		lodsw			; Get sector id
 11063 00000D8A AA                      		stosb			; Copy it
 11064 00000D8B AD                      		lodsw			; Get sector size
 11065 00000D8C E8E301                  		call	SectSizeToSectIndex
 11066 00000D8F AA                      		stosb			; Store	sector SIZE index
 11067 00000D90 E2F5                    		loop	StoreSectorInfo
 11068                                  SectorInfoSaved:			
 11069 00000D92 F8                      		clc
 11070 00000D93 C3                      		retn
 11071                                  ; ---------------------------------------------------------------------------
 11072                                  
 11073                                  TooManyPerTrack:			
 11074 00000D94 B00C                    		mov	al, 0Ch
 11075 00000D96 F9                      		stc
 11076 00000D97 C3                      		retn
 11077                                  ; ---------------------------------------------------------------------------
 11078                                  
 11079                                  ; 16/10/2022
 11080                                  
 11081                                  ; ==========================================================================
 11082                                  ; FormatTrack:
 11083                                  ; if specialfunction byte is 1,then this is a status call to see if there is
 11084                                  ; rom support for the combination of sec/trk and # of cyln,and if the
 11085                                  ; combination is legal. if specialfunction byte is 0,then format the track.
 11086                                  ;
 11087                                  ; input: ES:di points to bds for drive
 11088                                  ;
 11089                                  ; output:
 11090                                  ;	for status call:
 11091                                  ;	specialfunction byte set to:
 11092                                  ;		0 - rom support + legal combination
 11093                                  ;		1 - no rom support
 11094                                  ;		2 - illegal combination
 11095                                  ;		3 - no media present
 11096                                  ;	carry cleared.
 11097                                  ;
 11098                                  ;	for format track:
 11099                                  ;		carry set if error
 11100                                  ;
 11101                                  ; ==========================================================================
 11102                                  
 11103                                  ; 16/03/2019
 11104                                  
 11105                                  		; 19/10/2022
 11106                                  FormatTrack:
 11107 00000D98 C51E[1200]              		lds	bx, [ptrsav]
 11108 00000D9C C55F13                  		lds	bx, [bx+19]	; [bx+IOCTL_REQ.GENERICIOCTL_PACKET
 11109 00000D9F F60701                  		test	byte [bx], 1	; [bx+A_DEVICEPARAMETERS.DP_SPECIALFUNCTIONS]
 11110                                  					; STATUS_FOR_FORMAT
 11111 00000DA2 740E                    		jz	short DoFormatTrack
 11112 00000DA4 1E                      		push	ds
 11113                                  		; 17/10/2022
 11114 00000DA5 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD]
 11115                                  		;mov	ds, word ptr cs:BIOSDATAWORD ; [cs:Bios_Data_Word]
 11116 00000DAA E83902                  		call	SetMediaForFormat ; Also moves current Dpt to TempDpt
 11117 00000DAD 1F                      		pop	ds
 11118 00000DAE 8807                    		mov	[bx], al	; [bx+A_DEVICEPARAMETERS.DP_SPECIALFUNCTIONS]
 11119 00000DB0 F8                      		clc
 11120 00000DB1 C3                      		retn
 11121                                  ; ---------------------------------------------------------------------------
 11122                                  
 11123                                  DoFormatTrack:				
 11124 00000DB2 26807D2205              		cmp	byte [es:di+34], 5 ; [es:di+BDS.formfactor]
 11125                                  					; DEV_HARDDISK
 11126 00000DB7 7508                    		jnz	short DoFormatDiskette
 11127                                  		; 17/10/2022
 11128 00000DB9 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD]
 11129                                  		;mov	ds, word ptr cs:BIOSDATAWORD ; [cs:Bios_Data_Word]
 11130                                  					; Point	to Bios_Data (at 2C7h:30h or 70h:25A0h)
 11131 00000DBE E99C00                  		jmp	VerifyTrack
 11132                                  ; ---------------------------------------------------------------------------
 11133                                  
 11134                                  DoFormatDiskette:			
 11135 00000DC1 8B4F01                  		mov	cx, [bx+1]
 11136 00000DC4 8B5703                  		mov	dx, [bx+3]
 11137 00000DC7 F60702                  		test	byte [bx], 2
 11138                                  		; 17/10/2022
 11139 00000DCA 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD]
 11140                                  		;mov	ds, word ptr cs:BIOSDATAWORD ; [cs:Bios_Data_Word]
 11141                                  					; Setup	ds-> Bios_Data for verify
 11142 00000DCF 7403                    		jz	short DoFormatDiskette_1
 11143 00000DD1 E9E400                  		jmp	VerifyTrack_Err
 11144                                  ; ---------------------------------------------------------------------------
 11145                                  
 11146                                  DoFormatDiskette_1:			
 11147 00000DD4 E80F02                  		call	SetMediaForFormat ; Also moves current Dpt to TempDpt
 11148 00000DD7 3C01                    		cmp	al, 1		;  ROM support for sec/trk,# trks comb?
 11149 00000DD9 7406                    		jz	short NeedToSetDasd ; Old rom
 11150 00000DDB 3C03                    		cmp	al, 3		; Time out error?
 11151 00000DDD 7507                    		jnz	short NoSetDasd	; No,fine. (at this point, don't care
 11152                                  					; about	the illegal combination)
 11153 00000DDF EB67                    		jmp	short FormatFailed
 11154                                  ; ---------------------------------------------------------------------------
 11155                                  
 11156                                  NeedToSetDasd:				
 11157 00000DE1 52                      		push	dx
 11158 00000DE2 E8A001                  		call	SetDasd		; INT 13h, AH=17h
 11159 00000DE5 5A                      		pop	dx
 11160                                  NoSetDasd:				
 11161 00000DE6 E853FA                  		call	checksingle	; Do any needed	diskette swapping
 11162 00000DE9 89D0                    		mov	ax, dx		; Get track from packet
 11163 00000DEB A3[3901]                		mov	[trknum], ax
 11164 00000DEE 880E[3801]              		mov	[hdnum], cl	; Store	head from packet
 11165 00000DF2 88CC                    		mov	ah, cl
 11166 00000DF4 BB[3B05]                		mov	bx, tracktable
 11167 00000DF7 8B0E[3905]              		mov	cx, [sectorspertrack]
 11168                                  
 11169                                  StoreCylinderHead:			
 11170 00000DFB 8907                    		mov	[bx], ax	; Store	into TrackTable
 11171 00000DFD 83C304                  		add	bx, 4		; Skip to next sector field
 11172 00000E00 E2F9                    		loop	StoreCylinderHead
 11173 00000E02 B90500                  		mov	cx, 5		; MAXERR - Set up retry	count
 11174                                  FormatRetry:				
 11175 00000E05 51                      		push	cx
 11176 00000E06 BB[3B05]                		mov	bx, tracktable
 11177 00000E09 A0[3905]                		mov	al, [sectorspertrack]
 11178 00000E0C B405                    		mov	ah, 5		; romformat
 11179 00000E0E 8C1E[3705]              		mov	[xfer_seg], ds
 11180 00000E12 E87F02                  		call	ToRom
 11181 00000E15 59                      		pop	cx
 11182 00000E16 7216                    		jb	short FormatError
 11183 00000E18 51                      		push	cx		; Now verify the sectors just formatted.
 11184                                  					; NOTE:	because	of bug in some BIOSes we have to
 11185                                  					;	set ES:BX to 00:00
 11186 00000E19 53                      		push	bx
 11187 00000E1A 31DB                    		xor	bx, bx
 11188 00000E1C 891E[3705]              		mov	[xfer_seg], bx
 11189 00000E20 A0[3905]                		mov	al, [sectorspertrack]
 11190 00000E23 B404                    		mov	ah, 4		; romverify
 11191 00000E25 B101                    		mov	cl, 1
 11192 00000E27 E86A02                  		call	ToRom
 11193 00000E2A 5B                      		pop	bx
 11194 00000E2B 59                      		pop	cx
 11195 00000E2C 7329                    		jnb	short FormatOk
 11196                                  FormatError:				
 11197 00000E2E E84B02                  		call	ResetDisk
 11198 00000E31 C606[3906]01            		mov	byte [had_format_error], 1
 11199 00000E36 50                      		push	ax
 11200 00000E37 51                      		push	cx
 11201 00000E38 52                      		push	dx
 11202 00000E39 E8AA01                  		call	SetMediaForFormat
 11203 00000E3C 3C01                    		cmp	al, 1
 11204 00000E3E 7503                    		jnz	short WhileErr
 11205 00000E40 E84201                  		call	SetDasd
 11206                                  WhileErr:				
 11207 00000E43 5A                      		pop	dx
 11208 00000E44 59                      		pop	cx
 11209 00000E45 58                      		pop	ax
 11210 00000E46 E2BD                    		loop	FormatRetry
 11211                                  FormatFailed:				
 11212 00000E48 C606[3906]01            		mov	byte [had_format_error], 1
 11213                                  					; Set the format error flag
 11214 00000E4D 80FC06                  		cmp	ah, 6		; DSK_CHANGELINE_ERR - convert change line
 11215 00000E50 7502                    		jnz	short DoMapIt	; Error	to time	out error
 11216 00000E52 B480                    		mov	ah, 80h		; DSK_TIMEOUT_ERR
 11217                                  DoMapIt:				
 11218 00000E54 E97AFD                  		jmp	maperror
 11219                                  ; ---------------------------------------------------------------------------
 11220                                  
 11221                                  FormatOk:				
 11222 00000E57 C606[3906]00            		mov	byte [had_format_error], 0 ; reset the format error flag
 11223 00000E5C C3                      		retn
 11224                                  ; ---------------------------------------------------------------------------
 11225                                  
 11226                                  ; 16/10/2022
 11227                                  
 11228                                  ; ==========================================================================
 11229                                  ;
 11230                                  ; VerifyTrack:
 11231                                  ;
 11232                                  ; input: ES:di points to bds for drive
 11233                                  ; ==========================================================================
 11234                                  
 11235                                  VerifyTrack:				
 11236 00000E5D 1E                      		push	ds
 11237 00000E5E C51E[1200]              		lds	bx, [ptrsav]	; DS:BX points to request header.
 11238 00000E62 C55F13                  		lds	bx, [bx+19]	; [bx+IOCTL_REQ.GENERICIOCTL_PACKET]
 11239                                  
 11240                                  		; Come here with DS:[BX] -> packet, ES:[DI] -> bds
 11241                                  
 11242 00000E65 8B4F03                  		mov	cx, [bx+3]	; [bx+A_VERIFYPACKET.VP_CYLINDER]
 11243 00000E68 8B4701                  		mov	ax, [bx+1]	; [bx+A_VERIFYPACKET.VP_HEAD]
 11244 00000E6B 8B5705                  		mov	dx, [bx+5]	; [bx+A_FORMATPACKET.FP_TRACKCOUNT]
 11245 00000E6E 8A1F                    		mov	bl, [bx]	; [bx+A_FORMATPACKET.FP_SPECIALFUNCTIONS]
 11246                                  					; Get option flag word
 11247 00000E70 1F                      		pop	ds
 11248 00000E71 C606[2001]04            		mov	byte [rflag], 4	; romverify
 11249 00000E76 890E[3301]              		mov	[curtrk], cx
 11250 00000E7A A2[3201]                		mov	[curhd], al	; ASSUME heads < 256
 11251 00000E7D 8B0E[3905]              		mov	cx, [sectorspertrack]
 11252                                  
 11253                                  		; Check specialfunctions to see if DO_FAST_FORMAT has been
 11254                                  		; specified if not we should go to the normal track verification
 11255                                  		; routine. If fast format has been specified we should get the
 11256                                  		; number of tracks to be verified and check it to see if it is
 11257                                  		; > 255. If it is then it is an error and we should go to
 11258                                  		; VerifyTrack_Err. If not multiply the number of tracks by the
 11259                                  		; sectors per track to get the total number of sectors to be
 11260                                  		; verified. This should also be less than equal to 255
 11261                                  		; otherwise we go to same error exit. If everything is okay
 11262                                  		; we initalise cx to the total sectors. use ax as a temporary
 11263                                  		; register.
 11264                                  
 11265                                  					; Special function requested?	
 11266 00000E81 F6C302                  		test	bl, 2		; DO_FAST_FORMAT
 11267 00000E84 7421                    		jz	short NormVerifyTrack
 11268 00000E86 89D0                    		mov	ax, dx		; Get ax = number of trks to verify
 11269 00000E88 08E4                    		or	ah, ah
 11270 00000E8A 752C                    		jnz	short VerifyTrack_Err ; #tracks > 255
 11271 00000E8C F6E1                    		mul	cl
 11272 00000E8E 08E4                    		or	ah, ah
 11273 00000E90 7526                    		jnz	short VerifyTrack_Err ; #sectors > 255	
 11274 00000E92 89C1                    		mov	cx, ax
 11275                                  		; 10/12/2022
 11276 00000E94 26F6452301              		test	byte [es:di+35], 1
 11277                                  		;test	word [es:di+35], 1 ; [es:di+BDS.flags]
 11278                                  					; fnon_removable
 11279 00000E99 740C                    		jz	short NormVerifyTrack
 11280                                  					; Multitrack operation = on?
 11281                                  		; 10/12/2022
 11282                                  		; 19/10/2022
 11283 00000E9B F606[2F05]80            		test	byte [multrk_flag], 80h
 11284                                  		;test	word [multrk_flag], 80h ; MULTI_TRK_ON
 11285                                  		;;test	ds:multrk_flag,	80h ; MULTI_TRK_ON
 11286 00000EA0 7405                    		jz	short NormVerifyTrack
 11287 00000EA2 C606[3605]01            		mov	byte [multitrk_format_flag], 1
 11288                                  NormVerifyTrack:			
 11289 00000EA7 31C0                    		xor	ax, ax		; 1st sector
 11290 00000EA9 31DB                    		xor	bx, bx
 11291 00000EAB 891E[3705]              		mov	[xfer_seg], bx	; Use 0:0 as the transfer address for verify
 11292 00000EAF E83F00                  		call	TrackIo
 11293 00000EB2 C606[3605]00            		mov	byte [multitrk_format_flag], 0
 11294 00000EB7 C3                      		retn
 11295                                  ; ---------------------------------------------------------------------------
 11296                                  
 11297                                  VerifyTrack_Err:			
 11298 00000EB8 B401                    		mov	ah, 1
 11299 00000EBA E914FD                  		jmp	maperror
 11300                                  ; ---------------------------------------------------------------------------
 11301                                  
 11302                                  ; 16/10/2022
 11303                                  
 11304                                  ; ==========================================================================
 11305                                  ;
 11306                                  ; ReadTrack:
 11307                                  ;
 11308                                  ; input: ES:di points to bds for drive
 11309                                  ;
 11310                                  ; ==========================================================================
 11311                                  
 11312                                  ReadTrack:				
 11313 00000EBD C606[2001]02            		mov	byte [rflag], 2	; romread
 11314 00000EC2 EB05                    		jmp	short ReadWriteTrack
 11315                                  ; ---------------------------------------------------------------------------
 11316                                  
 11317                                  WriteTrack:
 11318                                  
 11319                                  ; ==========================================================================
 11320                                  ;
 11321                                  ; WriteTrack:
 11322                                  ;
 11323                                  ; input: ES:di points to bds for drive
 11324                                  ;
 11325                                  ; ==========================================================================
 11326                                  				
 11327 00000EC4 C606[2001]03            		mov	byte [rflag], 3	; romwrite
 11328                                  
 11329                                  		; Fall into ReadWriteTrack
 11330                                  
 11331                                  ; ==========================================================================
 11332                                  ;
 11333                                  ; readWriteTrack:
 11334                                  ;
 11335                                  ; input:
 11336                                  ;    ES:di points to bds for drive
 11337                                  ;    rFlag - 2 for read,3 for write
 11338                                  ;
 11339                                  ; ==========================================================================
 11340                                  
 11341                                  ReadWriteTrack:	
 11342                                  		; save bds pointer segment so we can use it to access
 11343                                  		; our packet. Notice that this is not the standard register
 11344                                  		; assignment for accessing packets
 11345                                  		
 11346                                  		; 19/10/2022	
 11347 00000EC9 06                      		push	es
 11348 00000ECA C41E[1200]              		les	bx, [ptrsav]	; ES:BX	-> to request header
 11349 00000ECE 26C45F13                		les	bx, [es:bx+19]	; [es:bx+IOCTL_REQ.GENERICIOCTL_PACKET]
 11350 00000ED2 268B4703                		mov	ax, [es:bx+3]	; [es:bx+A_TRACKREADWRITEPACKET.TRWP_CYLINDER]
 11351 00000ED6 A3[3301]                		mov	[curtrk], ax
 11352 00000ED9 268B4701                		mov	ax, [es:bx+1]	; [es:bx+A_TRACKREADWRITEPACKET.TRWP_HEAD]
 11353 00000EDD A2[3201]                		mov	[curhd], al	; Assume heads < 256!!!
 11354 00000EE0 268B4705                		mov	ax, [es:bx+5]	; [es:bx+A_TRACKREADWRITEPACKET.TRWP_FIRSTSECTOR]
 11355 00000EE4 268B4F07                		mov	cx, [es:bx+7]	; [es:bx+A_TRACKREADWRITEPACKET.TRWP_SECTORSTOREADWRITE]
 11356 00000EE8 26C45F09                		les	bx, [es:bx+9]	; [es:bx+A_TRACKREADWRITEPACKET.TRWP_TRANSFERADDRESS]
 11357                                  					; Get transfer address
 11358                                  
 11359                                  		; we just trashed our packet address, but we no longer care
 11360                                  
 11361 00000EEC 8C06[3705]              		mov	[xfer_seg], es	; Pass transfer	segment
 11362 00000EF0 07                      		pop	es
 11363                                  
 11364                                  		; Fall into TrackIo
 11365                                  
 11366                                  ; =============== S U B	R O U T	I N E =======================================
 11367                                  
 11368                                  ; 16/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 11369                                  
 11370                                  ; ==========================================================================
 11371                                  ;
 11372                                  ; TrackIo:
 11373                                  ;    performs track read/write/verify
 11374                                  ;
 11375                                  ;   input:
 11376                                  ;      rFlag	- 2 = read
 11377                                  ;		  3 = write
 11378                                  ;		  4 = verify
 11379                                  ;      AX	- Index into track table of first sector to io
 11380                                  ;      CX	- Number of sectors to io
 11381                                  ;      Xfer_Seg:BX - Transfer address
 11382                                  ;      ES:DI	- Pointer to bds
 11383                                  ;      CurTrk	- Current cylinder
 11384                                  ;      CurHd	- Current head
 11385                                  ;
 11386                                  ; ==========================================================================
 11387                                  
 11388                                  ; 16/03/2019 - Retro DOS v4.0
 11389                                  		
 11390                                  		; 19/10/2022
 11391                                  TrackIo:	
 11392                                  					; Procedure `disk' will pop stack to
 11393 00000EF1 8926[3501]              		mov	[spsav], sp	; SpSav	and return if error
 11394 00000EF5 E844F9                  		call	checksingle	; Ensure correct disk is in drv
 11395 00000EF8 803E[3806]01            		cmp	byte [media_set_for_format], 1
 11396                                  					; See if we have already set	disk
 11397 00000EFD 7407                    		jz	short Dptalreadyset ; base table
 11398 00000EFF 50                      		push	ax		; set up tables	and variables for i/o
 11399 00000F00 51                      		push	cx
 11400 00000F01 E896FA                  		call	iosetup
 11401 00000F04 59                      		pop	cx
 11402 00000F05 58                      		pop	ax
 11403                                  Dptalreadyset:				; Point si at the table entry of the			
 11404 00000F06 BE[3B05]                		mov	si, tracktable	; first sector to be io'd
 11405 00000F09 D1E0                    		shl	ax, 1
 11406 00000F0B D1E0                    		shl	ax, 1
 11407 00000F0D 01C6                    		add	si, ax
 11408                                  
 11409                                  		; WE WANT:
 11410                                  		; CX to	be the number of times we have to loop
 11411                                  		; DX to	be the number of sectors we read on each iteration
 11412                                  		
 11413 00000F0F BA0100                  		mov	dx, 1
 11414                                  		; 12/12/2022
 11415 00000F12 26F6452308              		test	byte [es:di+23h], 8
 11416                                  		;test	word [es:di+35], 8 ; [es:di+BDS.flags]
 11417                                  					; good_tracklayout
 11418 00000F17 7402                    		jz	short ionextsector
 11419                                  		
 11420 00000F19 87D1                    		xchg	dx, cx		; HEY! We can read all secs in one blow
 11421                                  ionextsector:				
 11422 00000F1B 51                      		push	cx
 11423 00000F1C 52                      		push	dx
 11424 00000F1D 46                      		inc	si
 11425 00000F1E 46                      		inc	si		; Skip over the	cylinder and head in
 11426                                  					; the track table
 11427 00000F1F AC                      		lodsb			; Get sector ID	from track table
 11428 00000F20 A2[3101]                		mov	[cursec], al
 11429                                  
 11430                                  		; assumptions for a fixed disk multi-track disk	i/o
 11431                                  		; 1). In the input CX (# of sectors to go) to TrackIo,
 11432                                  		;     only CL is valid.
 11433                                  		; 2). Sector size should be set	to 512 bytes.
 11434                                  		; 3). Good track layout
 11435                                  		
 11436                                  		; 12/12/2022
 11437 00000F23 26F6452301              		test	byte [es:di+23h], 1
 11438                                  		;test	word [es:di+35], 1 ; [es:di+BDS.flags]
 11439                                  					; fnon_removable ; Fixed disk?
 11440 00000F28 7414                    		jz	short IoRemovable ; No
 11441                                  		; 12/12/2022
 11442 00000F2A F606[2F05]80            		test	byte [multrk_flag], 80h
 11443                                  		;test	word [multrk_flag], 80h ; MULTI_TRK_ON
 11444                                  						; Allow multi-track operation?
 11445 00000F2F 740D                    		jz	short IoRemovable ; No,don't do that.
 11446 00000F31 8916[2201]              		mov	[seccnt], dx
 11447 00000F35 89D0                    		mov	ax, dx
 11448 00000F37 E81DFB                  		call	Disk
 11449 00000F3A 5A                      		pop	dx
 11450 00000F3B 59                      		pop	cx
 11451 00000F3C F8                      		clc
 11452 00000F3D C3                      		retn
 11453                                  ; ---------------------------------------------------------------------------
 11454                                  
 11455                                  IoRemovable:				
 11456 00000F3E AC                      		lodsb			; Get sector size index	from track
 11457                                  					; table	and save it
 11458 00000F3F 50                      		push	ax
 11459 00000F40 56                      		push	si
 11460 00000F41 1E                      		push	ds		; Save Bios_Data
 11461 00000F42 50                      		push	ax
 11462 00000F43 8A26[2C01]              		mov	ah, [eot]	; Preserve whatever might be in	ah
 11463                                  					; Fetch	EOT while ds-> Bios_Data
 11464 00000F47 C536[2D01]              		lds	si, [dpt]
 11465 00000F4B 884403                  		mov	[si+3],	al	; [si+DISK_PARMS.DISK_SECTOR_SIZ]
 11466 00000F4E 886404                  		mov	[si+4],	ah	; [si+DISK_PARMS.DISK_EOT]
 11467 00000F51 58                      		pop	ax
 11468 00000F52 1F                      		pop	ds
 11469 00000F53 88D0                    		mov	al, dl
 11470 00000F55 A3[2201]                		mov	[seccnt], ax
 11471 00000F58 E8FCFA                  		call	Disk
 11472 00000F5B 5E                      		pop	si		; Advance buffer pointer by adding
 11473                                  					; sector size
 11474 00000F5C 58                      		pop	ax
 11475 00000F5D E81D00                  		call	SectorSizeIndexToSectorSize
 11476 00000F60 01C3                    		add	bx, ax
 11477 00000F62 5A                      		pop	dx
 11478 00000F63 59                      		pop	cx
 11479 00000F64 E2B5                    		loop	ionextsector
 11480 00000F66 803E[3806]01            		cmp	byte [media_set_for_format], 1
 11481                                  		;jz	short NoNeedDone
 11482                                  		; 12/12/2022
 11483 00000F6B 7404                    		je	short NoNeedDone2
 11484 00000F6D E872FA                  		call	done		; set time of last access, and reset
 11485                                  					; entries in Dpt.
 11486                                  NoNeedDone:				
 11487 00000F70 F8                      		clc
 11488                                  NoNeedDone2:
 11489 00000F71 C3                      		retn
 11490                                  
 11491                                  ; =============== S U B	R O U T	I N E =======================================
 11492                                  
 11493                                  ; ---------------------------------------------------------------------------
 11494                                  ;
 11495                                  ; The sector size in bytes needs to be converted to an index value for the ibm
 11496                                  ; rom. (0=>128,1=>256,2=>512,3=>1024). It is assumed that only these values
 11497                                  ; are permissible.
 11498                                  ;
 11499                                  ; On Input   AX contains sector size in bytes
 11500                                  ; On Output  AL Contains index
 11501                                  ; All other registers preserved
 11502                                  ;
 11503                                  ; ---------------------------------------------------------------------------
 11504                                  
 11505                                  SectSizeToSectIndex:	
 11506 00000F72 80FC02                  		cmp	ah, 2		; (0=>128,1=>256,2=>512,3=>1024)
 11507                                  					; examine upper	byte only
 11508 00000F75 7703                    		ja	short OneK
 11509 00000F77 88E0                    		mov	al, ah		; value	in AH is the index!
 11510 00000F79 C3                      		retn
 11511                                  ; ---------------------------------------------------------------------------
 11512                                  
 11513                                  OneK:					
 11514 00000F7A B003                    		mov	al, 3
 11515 00000F7C C3                      		retn
 11516                                  
 11517                                  ; =============== S U B	R O U T	I N E =======================================
 11518                                  
 11519                                  
 11520                                  SectorSizeIndexToSectorSize:
 11521 00000F7D 88C1                    		mov	cl, al
 11522 00000F7F B88000                  		mov	ax, 128
 11523 00000F82 D3E0                    		shl	ax, cl
 11524 00000F84 C3                      		retn
 11525                                  
 11526                                  ; =============== S U B	R O U T	I N E =======================================
 11527                                  
 11528                                  ; 16/10/2022
 11529                                  
 11530                                  ; ---------------------------------------------------------------------------
 11531                                  ;
 11532                                  ; SetDASD
 11533                                  ;
 11534                                  ; Set up the rom for formatting.
 11535                                  ; we have to tell the rom bios what type of disk is in the drive.
 11536                                  ;
 11537                                  ; On Input   - ES:di - Points to bds
 11538                                  ;
 11539                                  ; ---------------------------------------------------------------------------
 11540                                  
 11541                                  		; 19/10/2022
 11542                                  SetDasd:	
 11543 00000F85 803E[3906]01            		cmp	byte [had_format_error], 1 ;
 11544                                  					; See if we've previously set dasd type
 11545 00000F8A 740C                    		jz	short DoSetDasd
 11546                                  		; 10/12/2022
 11547 00000F8C 26F6452380              		test	byte [es:di+23h], 80h
 11548                                  		;test	word [es:di+23h], 80h ; [es:di+BDS.flags]
 11549                                  					; set_dasd_true
 11550 00000F91 744A                    		jz	short DasdHasBeenSet
 11551                                  		; 10/12/2022
 11552 00000F93 268065237F              		and	byte [es:di+23h], 7Fh
 11553                                  		;and	word [es:di+23h], 0FF7Fh ; [es:di+BDS.flags]
 11554                                  					; ~set_dasd_true
 11555                                  DoSetDasd:				
 11556 00000F98 C606[3906]00            		mov	byte [had_format_error], 0 ; Reset it
 11557 00000F9D C606[3B01]50            		mov	byte [gap_patch], 50h ; Format gap for 48tpi disks
 11558 00000FA2 B004                    		mov	al, 4
 11559 00000FA4 26807D2202              		cmp	byte [es:di+22h], 2 ; [es:di+BDS.formfactor]
 11560                                  					; DEV_3INCH720KB
 11561 00000FA9 741A                    		jz	short DoSet
 11562 00000FAB 26807D2201              		cmp	byte [es:di+22h], 1 ; [es:di+BDS.formfactor]
 11563                                  					; DEV_5INCH96TPI
 11564 00000FB0 7404                    		jz	short GotBig
 11565 00000FB2 B001                    		mov	al, 1
 11566 00000FB4 EB0F                    		jmp	short DoSet
 11567                                  ; ---------------------------------------------------------------------------
 11568                                  
 11569                                  GotBig:					
 11570 00000FB6 B002                    		mov	al, 2		; 160/320k in a	1.2 meg	drive
 11571 00000FB8 803E[3706]00            		cmp	byte [mediatype], 0
 11572 00000FBD 7506                    		jnz	short DoSet
 11573                                  		;mov	al, 3		; 1.2meg in a 1.2meg drive
 11574                                  		; 10/12/2022
 11575                                  		;inc	al  ; al = 3
 11576                                  		; 18/12/2022
 11577 00000FBF 40                      		inc	ax  ; al = 3
 11578 00000FC0 C606[3B01]54            		mov	byte [gap_patch], 54h
 11579                                  DoSet:					
 11580 00000FC5 1E                      		push	ds
 11581 00000FC6 56                      		push	si
 11582 00000FC7 8E1E[1A00]              		mov	ds, [zeroseg]	; Point	to interrupt vectors
 11583                                  
 11584 00000FCB C5367800                		lds	si, [DSKADR]
 11585                                  		;lds	si, [78h]	; [DSKADR]  (Int 1Eh)
 11586                                  		;;lds	si, ds:78h		
 11587                                  
 11588 00000FCF C644090F                		mov	byte [si+9], 0Fh ;
 11589                                  					; [si+DISK_PARMS.DISK_HEAD_STTL]
 11590 00000FD3 5E                      		pop	si
 11591 00000FD4 1F                      		pop	ds
 11592 00000FD5 B417                    		mov	ah, 17h
 11593 00000FD7 268A5504                		mov	dl, [es:di+4]
 11594 00000FDB CD13                    		int	13h		; DISK - DISK -	SET TYPE (AT,XT2,XT286,CONV,PS
 11595                                  					; AL = disk type AL = 03h - high-capacity disk in high-capacity	drive
 11596                                  DasdHasBeenSet:				
 11597 00000FDD 268A6513                		mov	ah, [es:di+13h]	; [es:di+BDS.secpertrack]
 11598 00000FE1 8826[3701]              		mov	[formt_eot], ah
 11599 00000FE5 C3                      		retn
 11600                                  
 11601                                  ; =============== S U B	R O U T	I N E =======================================
 11602                                  
 11603                                  ; 16/10/2022
 11604                                  
 11605                                  ; ---------------------------------------------------------------------------
 11606                                  ;
 11607                                  ; Set Media Type for Format
 11608                                  ; Performs the int 13 with ah = 18h to see if the medium described in the
 11609                                  ; BPB area in the BDS can be handled by the rom.
 11610                                  ; On Input, ES:DI -> current BDS.
 11611                                  ; The status of the operation is returned in AL
 11612                                  ;
 11613                                  ;	- 0 - if the support is available,and the combination is valid.
 11614                                  ;	- 1 - no rom support
 11615                                  ;	- 2 - illegal combination
 11616                                  ;	- 3 - no media present (rom support exists but cannot determine now)
 11617                                  ;
 11618                                  ; Flags also may be altered. All other registers preserved.
 11619                                  ; If the call to rom returns no error,then the current Dpt is "replaced" by
 11620                                  ; the one returned by the rom. This is Done by changing the pointer in [Dpt]
 11621                                  ; to the one returned. the original pointer to the disk base table is stored
 11622                                  ; in TempDpt, until it is restored.
 11623                                  ;
 11624                                  ; ---------------------------------------------------------------------------
 11625                                  
 11626                                  		; 19/10/2022
 11627                                  SetMediaForFormat:	
 11628 00000FE6 51                      		push	cx
 11629 00000FE7 52                      		push	dx
 11630                                  
 11631                                  		; If we have a format error, then do not change Dpt, TempDpt.
 11632                                  		; but we need to call int 13h, ah=18h again.
 11633                                  
 11634 00000FE8 803E[3906]01            		cmp	byte [had_format_error], 1
 11635 00000FED 7425                    		jz	short SkipSaveDskAdr
 11636 00000FEF 30C0                    		xor	al, al		; If already done return 0
 11637 00000FF1 803E[3806]01            		cmp	byte [media_set_for_format], 1
 11638 00000FF6 7502                    		jnz	short DoSetMediaForFormat
 11639 00000FF8 EB7F                    		jmp	SetMediaRet	; Media	already	set
 11640                                  ; ---------------------------------------------------------------------------
 11641                                  
 11642                                  DoSetMediaForFormat:			
 11643 00000FFA 06                      		push	es
 11644 00000FFB 56                      		push	si
 11645 00000FFC 8E06[1A00]              		mov	es, [zeroseg]	; Point to interrupt vectors
 11646 00001000 26C4367800              		les	si, [es:DSKADR]
 11647                                  		;les	si, es:78h	; [es:DSKADR]
 11648                                  					; Get pointer to disk base table
 11649 00001005 8936[2D01]              		mov	[dpt], si
 11650 00001009 8C06[2F01]              		mov	[dpt+2], es	; Save pointer to table
 11651                                  
 11652                                  		; Initialize the head settle time to 0Fh. See the offsets
 11653                                  		; given in dskprm.inc.
 11654                                  
 11655 0000100D 26C644090F              		mov	byte [es:si+9], 0Fh ; [es:si+DISK_PARMS.DISK_HEAD_STTL]
 11656 00001012 5E                      		pop	si
 11657 00001013 07                      		pop	es
 11658                                  
 11659                                  SkipSaveDskAdr:				
 11660 00001014 268B4D25                		mov	cx, [es:di+25h]	; [es:di+BDS.cylinders]
 11661 00001018 49                      		dec	cx
 11662 00001019 80E503                  		and	ch, 3
 11663 0000101C D0CD                    		ror	ch, 1
 11664 0000101E D0CD                    		ror	ch, 1
 11665 00001020 86E9                    		xchg	ch, cl
 11666 00001022 260A4D13                		or	cl, [es:di+13h]	; [es:di+BDS.secpertrack]
 11667 00001026 268A5504                		mov	dl, [es:di+4]	; [es:di+BDS.drivenum]
 11668 0000102A 06                      		push	es
 11669 0000102B 1E                      		push	ds
 11670 0000102C 56                      		push	si
 11671 0000102D 57                      		push	di
 11672 0000102E B418                    		mov	ah, 18h
 11673 00001030 CD13                    		int	13h		; DISK - SET MEDIA TYPE	FOR FORMAT (AT model 3x9,XT2,XT286,PS)
 11674                                  					; DL = drive number, CH	= lower	8 bits of number of tracks, CL = sectors per track
 11675 00001032 7233                    		jb	short FormaStatErr
 11676 00001034 803E[3906]01            		cmp	byte [had_format_error], 1
 11677 00001039 7425                    		jz	short skip_disk_base_setting
 11678 0000103B 06                      		push	es		; Save segment returned	by the rom
 11679 0000103C 8E06[1A00]              		mov	es, [zeroseg]	; Point	to interrupt vector segment
 11680 00001040 26C4367800              		les	si, [es:DSKADR]
 11681                                  		;les	si, es:78h	; [es:DSKADR] (Int 1Eh)
 11682                                  					; Get current disk base	table
 11683 00001045 8936[3A06]              		mov	[tempdpt], si
 11684 00001049 8C06[3C06]              		mov	[tempdpt+2], es ; Save it
 11685 0000104D 8E06[1A00]              		mov	es, [zeroseg]
 11686                                  		;mov	es:78h,	di
 11687 00001051 26893E7800              		mov	[es:DSKADR], di
 11688                                  		;pop	word ptr es:7Ah	; replace with one returned by rom
 11689 00001056 268F067A00              		pop	word [es:DSKADR+2]
 11690 0000105B C606[3806]01            		mov	byte [media_set_for_format], 1
 11691                                  skip_disk_base_setting:			
 11692 00001060 30C0                    		xor	al, al		; Legal	combination + rom support code
 11693                                  		;mov	ds:had_format_error, al	; Reset	the flag
 11694 00001062 A2[3906]                		mov	[had_format_error], al
 11695 00001065 EB0E                    		jmp	short PopStatRet
 11696                                  ; ---------------------------------------------------------------------------
 11697                                  
 11698                                  FormaStatErr:
 11699                                  		; 10/12/2022
 11700 00001067 B003                    		mov	al, 3
 11701                                  				
 11702 00001069 80FC0C                  		cmp	ah, 0Ch		; DSK_ILLEGAL_COMBINATION
 11703                                  					; Illegal combination =	0Ch
 11704 0000106C 7406                    		jz	short FormatStatIllegalComb
 11705 0000106E 80FC80                  		cmp	ah, 80h		; DSK_TIMEOUT_ERR
 11706 00001071 7402                    		jz	short FormatStatTimeOut
 11707                                  		; 10/12/2022
 11708                                  		;dec	al
 11709                                  		; 18/12/2022
 11710 00001073 48                      		dec	ax
 11711                                  		; al = 2
 11712                                  		;mov	al, 1		; Function not supported.
 11713                                  		;jmp	short PopStatRet
 11714                                  ; ---------------------------------------------------------------------------
 11715                                  
 11716                                  FormatStatIllegalComb:
 11717                                  		; 10/12/2022
 11718                                  		;dec	al	; 3 -> 2 or 2 -> 1
 11719                                  		; 18/12/2022
 11720 00001074 48                      		dec	ax
 11721                                  		; al = 2				
 11722                                  		;mov	al, 2		; Function supported, but
 11723                                  					; Illegal sect/trk,trk combination.
 11724                                  		; 10/12/2022
 11725                                  		;jmp	short PopStatRet
 11726                                  ; ---------------------------------------------------------------------------
 11727                                  
 11728                                  FormatStatTimeOut:			
 11729                                  		; 10/12/2022
 11730                                  		; al = 3
 11731                                  		;mov	al, 3		; Function supported, but
 11732                                  					; Media	not present.
 11733                                  PopStatRet:				
 11734 00001075 5F                      		pop	di
 11735 00001076 5E                      		pop	si
 11736 00001077 1F                      		pop	ds
 11737 00001078 07                      		pop	es
 11738                                  SetMediaRet:				
 11739 00001079 5A                      		pop	dx
 11740 0000107A 59                      		pop	cx
 11741 0000107B C3                      		retn
 11742                                  
 11743                                  ; =============== S U B	R O U T	I N E =======================================
 11744                                  
 11745                                  ; 16/10/2022
 11746                                  
 11747                                  ; ---------------------------------------------------------------------------
 11748                                  ;
 11749                                  ; RESET THE DRIVE
 11750                                  ;
 11751                                  ; we also set [Step_Drv] to -1 to force the main disk routine to use the
 11752                                  ; slow head settle time for the next operation. this is because the reset
 11753                                  ; operation moves the head to cylinder 0,so we need to do a seek the next
 11754                                  ; time around - there is a problem with 3.5" drives in that the head does
 11755                                  ; not settle down in time,even for read operations!!
 11756                                  ;
 11757                                  ; ---------------------------------------------------------------------------
 11758                                  
 11759                                  ResetDisk:	
 11760 0000107C 50                      		push	ax
 11761 0000107D 803E[3806]01            		cmp	byte [media_set_for_format], 1
 11762                                  					; Reset while formatting?
 11763 00001082 7505                    		jnz	short ResetDisk_cont
 11764                                  					; Then verify operation in "fmt & vrfy"
 11765 00001084 C606[3906]01            		mov	byte [had_format_error], 1 ; Might have failed.
 11766                                  ResetDisk_cont:				
 11767 00001089 30E4                    		xor	ah, ah		; So signals that we had a format error
 11768 0000108B CD13                    		int	13h		; DISK - RESET DISK SYSTEM
 11769                                  					; DL = drive (if bit 7 is set both hard	disks and floppy disks reset)
 11770 0000108D C606[7600]FF            		mov	byte [step_drv], 0FFh ; -1
 11771                                  					; Zap up the speed
 11772 00001092 58                      		pop	ax
 11773 00001093 C3                      		retn
 11774                                  
 11775                                  ; =============== S U B	R O U T	I N E =======================================
 11776                                  
 11777                                  ; 16/10/2022
 11778                                  
 11779                                  ; ---------------------------------------------------------------------------
 11780                                  ;
 11781                                  ; This routine sets up the drive parameter table with the values needed for
 11782                                  ; format,does an int 13. values in Dpt are restored after a verify is done.
 11783                                  ;
 11784                                  ; on entry  -	ES:DI - points to bds for the drive
 11785                                  ;		Xfer_Seg:BX - points to trkbuf
 11786                                  ;		AL    - number of sectors
 11787                                  ;		AH    - int 13 function code
 11788                                  ;		CL    - sector number for verify
 11789                                  ;		DS    - Bios_Data
 11790                                  ;
 11791                                  ; ON EXIT   -	DS,DI,ES,BX remain unchanged.
 11792                                  ;		AX and flags are the results of the int 13
 11793                                  ;
 11794                                  ; ---------------------------------------------------------------------------
 11795                                  
 11796                                  		; 19/10/2022
 11797                                  ToRom:	
 11798 00001094 53                      		push	bx
 11799 00001095 56                      		push	si
 11800                                  
 11801                                  		; Compaq bug fix - check whether we are using new ROM
 11802                                  		; functionality to set up format, not merely if it exists.
 11803                                  		; This was formerly a check against [new_rom]
 11804                                  
 11805 00001096 F606[3806]01            		test	byte [media_set_for_format], 1
 11806 0000109B 7536                    		jnz	short GotValidDpt
 11807 0000109D 50                      		push	ax
 11808 0000109E 06                      		push	es		; Save bds segment
 11809 0000109F 26807D2202              		cmp	byte [es:di+22h], 2 ; [es:di+BDS.formfactor]
 11810                                  					; ffSmall ; is it a 3.5" drive?
 11811 000010A4 9C                      		pushf			; (Save	the cmp	result)
 11812 000010A5 8E06[1A00]              		mov	es, [zeroseg]
 11813                                  		;les	si, es:78h	; Get pointer to disk base table
 11814 000010A9 26C4367800              		les	si, [es:DSKADR]
 11815                                  		;mov	word ptr ds:dpt, si
 11816                                  		;mov	word ptr ds:dpt+2, es ;	 Save pointer to table
 11817 000010AE 8936[2D01]              		mov	[dpt], si
 11818 000010B2 8C06[2F01]              		mov	[dpt+2], es	; Save pointer to table
 11819                                  		
 11820 000010B6 A0[3701]                		mov	al, [formt_eot]
 11821 000010B9 26884404                		mov	[es:si+4], al	; [es:si+DISK_PARMS.DISK_EOT]
 11822 000010BD A0[3B01]                		mov	al, [gap_patch]
 11823 000010C0 26884407                		mov	[es:si+7], al	; [es:si+DISK_PARMS.DISK_FORMT_GAP]
 11824                                  					; Important for	format
 11825 000010C4 26C644090F              		mov	byte [es:si+9], 0Fh ; [es:si+DISK_PARMS.DISK_HEAD_STTL]
 11826                                  					; Assume we are	doing a	seek operation
 11827                                  					; Setup	motor start correctly for 3.5" drives
 11828 000010C9 9D                      		popf			; Get result of	earlier	cmp
 11829 000010CA 7505                    		jnz	short MotorStrtOK
 11830 000010CC 26C6440A04              		mov	byte [es:si+0Ah], 4 ; [es:si+DISK_PARMS.DISK_MOTOR_STRT]
 11831                                  MotorStrtOK:				
 11832 000010D1 07                      		pop	es		; Restore bds segment
 11833 000010D2 58                      		pop	ax
 11834                                  GotValidDpt:				
 11835 000010D3 8B16[3901]              		mov	dx, [trknum]	; Set track number
 11836 000010D7 88D5                    		mov	ch, dl		; Set low 8 bits in ch
 11837 000010D9 268A5504                		mov	dl, [es:di+4]	; Set drive number
 11838 000010DD 8A36[3801]              		mov	dh, [hdnum]	; Set head number
 11839 000010E1 06                      		push	es		; Save bds segment
 11840 000010E2 8E06[3705]              		mov	es, [xfer_seg]
 11841 000010E6 CD13                    		int	13h		; DISK -
 11842 000010E8 07                      		pop	es		; Restore bds segment
 11843 000010E9 5E                      		pop	si
 11844 000010EA 5B                      		pop	bx
 11845 000010EB C3                      		retn
 11846                                  
 11847                                  ; ---------------------------------------------------------------------------
 11848                                  
 11849                                  ; 16/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 11850                                  
 11851                                  ; BIOSCODE:1124h (MSDOS 6.21, IO.SYS)
 11852                                  
 11853                                  ; ==========================================================================
 11854                                  ;
 11855                                  ; get the owner of the physical drive represented by the logical drive in al.
 11856                                  ; the assumption is that we **always** keep track of the owner of a drive!!
 11857                                  ; if this is not the case, the system may hang, just following the linked list.
 11858                                  ;
 11859                                  ; ==========================================================================
 11860                                  
 11861                                  		; 19/10/2022
 11862                                  ioctl_getown:
 11863 000010EC E8DCF3                  		call	SetDrive
 11864 000010EF 268A4504                		mov	al, [es:di+4]	; [es:di+BDS.drivenum]
 11865                                  					; Get physical drive number
 11866 000010F3 C43E[1901]              		les	di, [start_bds] ; Get start of bds chain
 11867                                  ownloop:				
 11868 000010F7 26384504                		cmp	[es:di+4], al	; [es:di+BDS.drivenum]
 11869 000010FB 7507                    		jnz	short getnextBDS
 11870                                  		; 10/12/2022
 11871 000010FD 26F6452320              		test	byte [es:di+23h], 20h
 11872                                  		;test	word [es:di+23h], 20h ; [es:di+BDS.flags]
 11873                                  					; fi_own_physical
 11874 00001102 7515                    		jnz	short exitown
 11875                                  getnextBDS:				
 11876 00001104 26C43D                  		les	di, [es:di]	; [es:di+BDS.link]
 11877 00001107 EBEE                    		jmp	short ownloop
 11878                                  ; ---------------------------------------------------------------------------
 11879                                  
 11880                                  ; ==========================================================================
 11881                                  ;
 11882                                  ; set the ownership of the physical drive represented by the logical drive
 11883                                  ; in al to al.
 11884                                  ;
 11885                                  ; ==========================================================================
 11886                                  
 11887                                  		; 19/10/2022
 11888                                  ioctl_setown:
 11889 00001109 E8BFF3                  		call	SetDrive
 11890 0000110C C606[7A00]01            		mov	byte [fsetowner], 1
 11891                                  					; set flag for CheckSingle to look at.
 11892 00001111 E828F7                  		call	checksingle
 11893 00001114 C606[7A00]00            		mov	byte [fsetowner], 0
 11894                                  					; set ownership	of drive reset flag
 11895                                  		; Fall into ExitOwn
 11896                                  
 11897                                  ; ==========================================================================
 11898                                  ;
 11899                                  ; if there is only one logical drive assigned to this physical drive, return
 11900                                  ; 0 to user to indicate this. Enter with ES:di -> the owner's bds.
 11901                                  ;
 11902                                  ; ==========================================================================
 11903                                  
 11904                                  exitown:				
 11905 00001119 30C9                    		xor	cl, cl
 11906                                  		; 12/12/2022
 11907 0000111B 26F6452310              		test	byte [es:di+23h], 10h
 11908                                  		;test	word [es:di+23h], 10h ; [es:di+BDS.flags]
 11909                                  					; fi_am_mult
 11910 00001120 7406                    		jz	short exitnomult
 11911 00001122 268A4D05                		mov	cl, [es:di+5]	; [es:di+BDS.drivelet]
 11912                                  					; Get logical drive number
 11913                                  					; Get it 1-based
 11914 00001126 FEC1                    		inc	cl
 11915                                  exitnomult:				
 11916 00001128 C51E[1200]              		lds	bx, [ptrsav]
 11917 0000112C 884F01                  		mov	[bx+1],	cl	; [bx+unit]
 11918                                  					; Exit normal termination
 11919                                  		; 12/12/2022
 11920                                  		; cf=0
 11921                                  		;clc
 11922 0000112F C3                      		retn
 11923                                  
 11924                                  ; =============== S U B	R O U T	I N E =======================================
 11925                                  
 11926                                  ; 16/10/2022
 11927                                  
 11928                                  ; ---------------------------------------------------------------------------
 11929                                  ;
 11930                                  ; moves the old Dpt that had been saved in TempDpt back to Dpt. this is done
 11931                                  ; only if the first byte of TempDpt is not -1.
 11932                                  ; all registers (including flags) are preserved.
 11933                                  ;
 11934                                  ; ---------------------------------------------------------------------------
 11935                                  
 11936                                  		; 19/10/2022
 11937                                  RestoreOldDpt:
 11938                                  		; if we have already restored the disk base table earlier,
 11939                                  		; do not do it again.
 11940                                  	
 11941 00001130 50                      		push	ax
 11942 00001131 30C0                    		xor	al, al
 11943 00001133 A2[3906]                		mov	[had_format_error], al	; Reset flag and 
 11944 00001136 8606[3806]              		xchg	al, [media_set_for_format] ; get current flag setting
 11945 0000113A 08C0                    		or	al, al
 11946 0000113C 741E                    		jz	short DontRestore
 11947 0000113E 56                      		push	si
 11948 0000113F 1E                      		push	ds
 11949 00001140 06                      		push	es
 11950 00001141 C536[3A06]              		lds	si, [tempdpt]
 11951                                  
 11952                                  		; 17/10/2022
 11953 00001145 2E8E06[3000]            		mov	es, [cs:BIOSDATAWORD]
 11954                                  		;mov	es, word ptr cs:BIOSDATAWORD ; [cs:Bios_Data_Word]
 11955 0000114A 268E06[1A00]            		mov	es, [es:zeroseg]
 11956                                  		;mov	es, es:zeroseg	; CAS -- bleeeech!
 11957                                  
 11958                                  		;mov	es:78h,	si	; [es:DSKADR]
 11959 0000114F 2689367800              		mov	[es:DSKADR], si
 11960                                  		;mov	word ptr es:7Ah, ds ; [es:DSKADR+2]
 11961 00001154 268C1E7A00              		mov	[es:DSKADR+2], ds
 11962 00001159 07                      		pop	es
 11963 0000115A 1F                      		pop	ds
 11964 0000115B 5E                      		pop	si
 11965                                  DontRestore:				
 11966 0000115C 58                      		pop	ax
 11967                                  		; 12/12/2022
 11968                                  		; cf=0
 11969                                  		;clc			;  Clear carry
 11970 0000115D C3                      		retn
 11971                                  
 11972                                  ; ---------------------------------------------------------------------------
 11973                                  
 11974                                  ; 16/10/2022
 11975                                  
 11976                                  ; ==========================================================================
 11977                                  ;	get media id
 11978                                  ; ==========================================================================
 11979                                  ;
 11980                                  ; FUNCTION: get the volume label,the system id and the serial number from
 11981                                  ;	    the media that has the extended boot record.
 11982                                  ;	    for the conventional media,this routine will return "unknown
 11983                                  ;	    media type" error to dos.
 11984                                  ;
 11985                                  ; INPUT :   ES:di -> bds table for this drive.
 11986                                  ;
 11987                                  ; OUTPUT:   the request packet filled with the information,if not carry.
 11988                                  ;	    if carry set,then al contains the device driver error number
 11989                                  ;	    that will be returned to dos.
 11990                                  ;	    register DS,DX,AX,CX,DI,SI destroyed.
 11991                                  ;
 11992                                  ; SUBROUTINES TO BE CALLED:
 11993                                  ;	BootIo:NEAR
 11994                                  ;
 11995                                  ; LOGIC:
 11996                                  ;	to recognize the extended boot record,this logic will actually
 11997                                  ;	access the boot sector even if it is a hard disk.
 11998                                  ;	note:the valid extended bpb is recognized by looking at the mediabyte
 11999                                  ;	field of bpb and the extended boot signature.
 12000                                  ;
 12001                                  ; {
 12002                                  ;	get logical drive number from bds table;
 12003                                  ;	rFlag = read operation;
 12004                                  ;	BootIo;		 /*get the media boot record into the buffer
 12005                                  ;	if (no error) then
 12006                                  ;	     if (extended boot record) then
 12007                                  ;		{ set volume label,volume serial number and system id
 12008                                  ;		  of the request packet to those of the boot record;
 12009                                  ;		};
 12010                                  ;	     else		  /*not an extended bpb */
 12011                                  ;		{ set register al to "unknown media.." error code;
 12012                                  ;		  set carry bit;
 12013                                  ;		};
 12014                                  ;	else
 12015                                  ;	     ret;	/*already error code is set in the register al
 12016                                  ;
 12017                                  ; ==========================================================================
 12018                                  
 12019                                  ;size_of_EXT_BOOT_SERIAL equ 4
 12020                                  ;;size_of_EXT_BOOT_VOL_LABEL equ 11
 12021                                  ;;size_of_EXT_SYSTEM_ID equ 8
 12022                                  
 12023                                  		; 19/10/2022
 12024                                  GetMediaId:
 12025 0000115E E89F00                  		call	ChangeLineChk
 12026 00001161 268A4505                		mov	al, [es:di+5]	; [es:di+BDS.drivelet] ; Logical drive number
 12027 00001165 C606[2001]02            		mov	byte [rflag], 2	; Read operation
 12028 0000116A E87B00                  		call	BootIo		; Read boot sector into	DiskSector
 12029 0000116D 7224                    		jb	short IOCtl_If1
 12030                                  					; Valid? (0F0h-0FFh?)
 12031 0000116F 803E[6301]F0            		cmp	byte [disksector+15h], 0F0h
 12032                                  					; [disksector+EXT_BOOT.BPB+EBPB.MEDIADESCRIPTOR]
 12033 00001174 721A                    		jb	short IOCtl_If2	; brif not valid (0F0h - 0FFh)
 12034                                  		; 10/12/2022
 12035 00001176 BE[7401]                		mov	si, disksector+26h
 12036 00001179 803C29                  		cmp	byte [si], 29h
 12037                                  		;cmp	byte [disksector+26h], 29h ; [disksector+EXT_BOOT.SIG]
 12038                                  					; EXT_BOOT_SIGNATURE
 12039 0000117C 7512                    		jnz	short IOCtl_If2	; not extended boot record
 12040 0000117E C43E[1200]              		les	di, [ptrsav]	; es:di	points to request header
 12041 00001182 26C47F13                		les	di, [es:bx+19]	; [es:bx+IOCTL_REQ.GENERICIOCTL_PACKET]
 12042                                  		; 10/12/2022
 12043 00001186 46                      		inc	si
 12044                                  		; si = disksector+27h 
 12045                                  		;mov	si, disksector+27h ; disksector+EXT_BOOT.SERIAL
 12046 00001187 83C702                  		add	di, 2		; A_MEDIA_ID_INFO.MI_SERIAL
 12047 0000118A B91700                  		mov	cx, 23		; size_of_EXT_BOOT_SERIAL
 12048                                  					; L+size_of_EXT_BOOT_VOL_LABEL
 12049                                  					; +size_of_EXT_SYSTEM_ID
 12050 0000118D F3A4                    		rep movsb		; Move from Bios_Data into request packet
 12051                                  	
 12052                                  		; 10/12/2022
 12053                                  		; cf = 0
 12054                                  		;clc
 12055                                  
 12056 0000118F C3                      		retn
 12057                                  ; ---------------------------------------------------------------------------
 12058                                  
 12059                                  IOCtl_If2:				
 12060 00001190 B007                    		mov	al, 7		; error_unknown_media
 12061 00001192 F9                      		stc
 12062                                  IOCtl_If1:				
 12063 00001193 C3                      		retn
 12064                                  ; ---------------------------------------------------------------------------
 12065                                  
 12066                                  ; 16/10/2022
 12067                                  
 12068                                  ; ==========================================================================
 12069                                  ;  set media id
 12070                                  ; ==========================================================================
 12071                                  
 12072                                  ; function: set the volume label, the system id and the serial number of
 12073                                  ;	    the media that has the extended boot record.
 12074                                  ;	    for the conventional media, this routine will return "unknown
 12075                                  ;	    media.." error to dos.
 12076                                  ;	    this routine will also set the corresponding informations in
 12077                                  ;	    the bds table.
 12078                                  ;
 12079                                  ; input :   ES:di -> bds table for this drive.
 12080                                  ;
 12081                                  ; output:   the extended boot record in the media will be set according to
 12082                                  ;	    the request packet.
 12083                                  ;	    if carry set, then al contains the device driver error number
 12084                                  ;	    that will be returned to dos.
 12085                                  ;
 12086                                  ; subroutines to be called:
 12087                                  ;	BootIo:NEAR
 12088                                  ;
 12089                                  ; logic:
 12090                                  ;
 12091                                  ; {
 12092                                  ;	get drive_number from bds;
 12093                                  ;	rFlag = "read operation";
 12094                                  ;	BootIo;
 12095                                  ;	if (no error) then
 12096                                  ;	     if (extended boot record) then
 12097                                  ;		{ set volume label,volume serial number and system id
 12098                                  ;		  of the boot record to those of the request packet;
 12099                                  ;		  rFlag = "write operation";
 12100                                  ;		  get drive number from bds;
 12101                                  ;		  BootIo;	  /*write it back*/
 12102                                  ;		};
 12103                                  ;	     else		  /*not an extended bpb */
 12104                                  ;		{ set register al to "unknown media.." error code;
 12105                                  ;		  set carry bit;
 12106                                  ;		  ret;	 /*return back to caller */
 12107                                  ;		};
 12108                                  ;	else
 12109                                  ;	     ret;		 /*already error code is set */
 12110                                  ;
 12111                                  ; ==========================================================================
 12112                                  
 12113                                  		; 19/10/2022
 12114                                  SetMediaId:
 12115 00001194 E86900                  		call	ChangeLineChk
 12116 00001197 268A4505                		mov	al, [es:di+5]	; [es:di+BDS.drivelet]
 12117                                  					; Logical drive	number
 12118 0000119B 88C2                    		mov	dl, al
 12119 0000119D C606[2001]02            		mov	byte [rflag], 2	; romread
 12120 000011A2 52                      		push	dx
 12121 000011A3 E84200                  		call	BootIo		; Read boot sec	to Bios_Data:DiskSector
 12122 000011A6 5A                      		pop	dx
 12123 000011A7 723E                    		jb	short IOCtl_If6
 12124                                  					; Valid? (0F0h-0FFh?)
 12125 000011A9 803E[6301]F0            		cmp	byte [disksector+15h], 0F0h
 12126                                  					; [disksector+EXT_BOOT.BPB+EBPB.MEDIADESCRIPTOR]
 12127 000011AE 7234                    		jb	short IOCtl_If7	; Brif not
 12128 000011B0 803E[7401]29            		cmp	byte [disksector+26h], 29h ; [disksector+EXT_BOOT.SIG]
 12129                                  					; EXT_BOOT_SIGNATURE
 12130 000011B5 752D                    		jnz	short IOCtl_If7	; not extended boot record
 12131 000011B7 06                      		push	es		; Save BDS pointer
 12132 000011B8 57                      		push	di
 12133 000011B9 1E                      		push	ds		; Point	ES To boot record
 12134 000011BA 07                      		pop	es
 12135 000011BB BF[7501]                		mov	di, disksector+27h ; disksector+EXT_BOOT.SERIAL
 12136 000011BE C536[1200]              		lds	si, [ptrsav]	; ds:si	points to request header.
 12137 000011C2 C57413                  		lds	si, [si+19]	; [si+IOCTL_REQ.GENERICIOCTL_PACKET]
 12138 000011C5 83C602                  		add	si, 2		; A_MEDIA_ID_INFO.MI_SERIAL
 12139 000011C8 B91700                  		mov	cx, 23		; size_of_EXT_BOOT_SERIAL
 12140                                  					; +size_of_EXT_BOOT_VOL_LABEL
 12141                                  					; +size_of_EXT_SYSTEM_ID
 12142 000011CB F3A4                    		rep movsb
 12143 000011CD 06                      		push	es		; point	ds back	to Bios_Data
 12144 000011CE 1F                      		pop	ds
 12145 000011CF 5F                      		pop	di		; restore bds pointer
 12146 000011D0 07                      		pop	es
 12147 000011D1 E864F5                  		call	mov_media_ids	; update the bds media id info.
 12148 000011D4 88D0                    		mov	al, dl
 12149 000011D6 C606[2001]03            		mov	byte [rflag], 3	; romwrite
 12150 000011DB E80A00                  		call	BootIo		; write	it back.
 12151 000011DE C606[1E01]FF            		mov	byte [tim_drv], 0FFh
 12152                                  					; make sure chk_media check the driver
 12153                                  					; return with error code from BootIo
 12154 000011E3 C3                      		retn
 12155                                  ; ---------------------------------------------------------------------------
 12156                                  
 12157                                  IOCtl_If7:				
 12158 000011E4 B007                    		mov	al, 7		; error_unknown_media
 12159 000011E6 F9                      		stc
 12160                                  IOCtl_If6:				
 12161 000011E7 C3                      		retn
 12162                                  
 12163                                  ; =============== S U B	R O U T	I N E =======================================
 12164                                  
 12165                                  ; 16/10/2022
 12166                                  
 12167                                  ; ---------------------------------------------------------------------------
 12168                                  ;	BootIo
 12169                                  ; ---------------------------------------------------------------------------
 12170                                  ;
 12171                                  ; function: read/write the boot record into boot sector.
 12172                                  ;
 12173                                  ; input :
 12174                                  ;	    al=logical drive number
 12175                                  ;	    rFlag = operation (read/write)
 12176                                  ;
 12177                                  ; output:   for read operation,the boot record of the drive specified in bds
 12178                                  ;	    be read into the DiskSector buffer.
 12179                                  ;	    for write operation,the DiskSector buffer image will be written
 12180                                  ;	    to the drive specified in bds.
 12181                                  ;	    if carry set,then al contains the device driver error number
 12182                                  ;	    that will be returned to dos.
 12183                                  ;	    AX,CX,DX register destroyed.
 12184                                  ;	    if carry set,then al will contain the error code from DiskIO.
 12185                                  ;
 12186                                  ; subroutines to be called:
 12187                                  ;	DiskIO:NEAR
 12188                                  ;
 12189                                  ; logic:
 12190                                  ;
 12191                                  ; {
 12192                                  ;	first_sector = 0;	 /*logical sector 0 is the boot sector */
 12193                                  ;	sectorcount = 1;	 /*read 1 sector only */
 12194                                  ;	buffer = DiskSector;	 /*read it into the DiskSector buffer */
 12195                                  ;	call DiskIO (rFlag,drive_number,first_sector,sectorcount,buffer);
 12196                                  ; }
 12197                                  ; ==========================================================================
 12198                                  
 12199                                  		; 19/10/2022
 12200                                  BootIo:	
 12201 000011E8 06                      		push	es
 12202 000011E9 57                      		push	di
 12203 000011EA 53                      		push	bx
 12204 000011EB 1E                      		push	ds
 12205 000011EC 07                      		pop	es		; Point ES: to Bios_Data
 12206                                  
 12207                                  		; Call DiskIO to read/write the boot sec. The parameters which
 12208                                  		; need to be initialized for this subroutine out here are
 12209                                  		; - Transfer address to Bios_Data:DiskSector
 12210                                  		; - Low sector needs to be initalized to 0. this is a reg. param
 12211                                  		; - Hi sector in [Start_Sec_H] needs to be initialised to 0.
 12212                                  		; - Number of sectors <-- 1
 12213                                  
 12214 000011ED BF[4E01]                		mov	di, disksector	; es:di -> transfer address
 12215 000011F0 31D2                    		xor	dx, dx		; First	sector (h) -> 0
 12216 000011F2 8916[2B05]              		mov	[start_sec_h], dx ; Start sector (h) -> 0
 12217 000011F6 B90100                  		mov	cx, 1
 12218 000011F9 E8CEF6                  		call	diskio
 12219 000011FC 5B                      		pop	bx
 12220 000011FD 5F                      		pop	di
 12221 000011FE 07                      		pop	es
 12222 000011FF C3                      		retn
 12223                                  
 12224                                  ; =============== S U B	R O U T	I N E =======================================
 12225                                  
 12226                                  ; 16/10/2022
 12227                                  
 12228                                  ; ---------------------------------------------------------------------------
 12229                                  ;	ChangeLineChk
 12230                                  ; ---------------------------------------------------------------------------
 12231                                  ;
 12232                                  ; when the user calls get/set media id call before dos establishes the media
 12233                                  ; by calling "media_chk",the change line activity of the drive is going to be
 12234                                  ; lost.	this routine will check the change line activity and will save the
 12235                                  ; history in the flags.
 12236                                  ;
 12237                                  ; FUNCTION: check the change line error activity
 12238                                  ;
 12239                                  ; INPUT :  ES:di -> bds table.
 12240                                  ;
 12241                                  ; OUTPUT:   flag in bds table will be updated if change line occurs.
 12242                                  ;
 12243                                  ; SUBROUTINES TO BE CALLED:
 12244                                  ;	Set_Changed_DL
 12245                                  ;
 12246                                  ; ---------------------------------------------------------------------------
 12247                                  
 12248                                  ChangeLineChk:	
 12249 00001200 268A5504                		mov	dl, [es:di+4]	; [es:di+BDS.drivenum]
 12250 00001204 08D2                    		or	dl, dl		; Fixed	disk?
 12251 00001206 7821                    		js	short ChangeLnChkRet ; Yes, skip it.
 12252                                  		; 12/12/2022
 12253 00001208 26F6452304              		test	byte [es:di+23h], 4
 12254                                  		;test	word [es:di+23h], 4 ; [es:di+BDS.flags]
 12255                                  					; return_fake_bpb
 12256 0000120D 751A                    		jnz	short ChangeLnChkRet
 12257 0000120F 803E[7700]01            		cmp	byte [fhave96], 1	; This rom support change line?
 12258 00001214 7513                    		jnz	short ChangeLnChkRet
 12259 00001216 E8F806                  		call	haschange	; This drive support change line?
 12260 00001219 740E                    		jz	short ChangeLnChkRet ; Do nothing
 12261                                  
 12262                                  		; Execute the rom disk interrupt to check changeline activity.
 12263                                  
 12264 0000121B B416                    		mov	ah, 16h
 12265 0000121D CD13                    		int	13h		; DISK - FLOPPY	DISK - CHANGE OF DISK STATUS (AT,XT2,XT286,CONV,PS)
 12266                                  					; DL = drive to	check
 12267                                  					; Return: AH = disk change status
 12268 0000121F 7308                    		jnb	short ChangeLnChkRet
 12269 00001221 53                      		push	bx
 12270 00001222 BB4000                  		mov	bx, 40h		; fchanged
 12271                                  					; Update flag in BDS for this
 12272                                  					; physical drive
 12273 00001225 E8C206                  		call	set_changed_dl
 12274 00001228 5B                      		pop	bx
 12275                                  ChangeLnChkRet:				
 12276 00001229 C3                      		retn
 12277                                  
 12278                                  ; ---------------------------------------------------------------------------
 12279                                  
 12280                                  ; 16/10/2022
 12281                                  
 12282                                  ; ==========================================================================
 12283                                  ;	GetAccessFlag
 12284                                  ; ==========================================================================
 12285                                  ;
 12286                                  ; FUNCTION: get the status of UNFORMATTED_MEDIA bit of flags in bds table
 12287                                  ;
 12288                                  ; INPUT :
 12289                                  ;	    ES:di -> bds table
 12290                                  ;
 12291                                  ; OUTPUT:   a_DiskAccess_Control.dac_access_flag = 0 if disk i/o not allowed.
 12292                                  ;						 = 1 if disk i/o allowed.
 12293                                  ; ==========================================================================
 12294                                  
 12295                                  		; 19/10/2022
 12296                                  GetAccessFlag:				
 12297 0000122A C51E[1200]              		lds	bx, [ptrsav]	; DS:BX	points to request header
 12298 0000122E C55F13                  		lds	bx, [bx+19]	; [bx+IOCTL_REQ.GENERICIOCTL_PACKET]
 12299                                  		;mov	al, 0		; Assume result	is unformatted
 12300                                  		; 10/12/2022
 12301 00001231 28C0                    		sub	al, al
 12302                                  		; 10/12/2022
 12303 00001233 26F6452402              		test	byte [es:di+36], 02h
 12304                                  		;test	word [es:di+35], 200h ; [es:di+BDS.flags]
 12305                                  					; unformatted_media
 12306 00001238 7502                    		jnz	short GafDone	; Done if unformatted
 12307 0000123A FEC0                    		inc	al		; Return true for formatted
 12308                                  
 12309                                  GafDone:				
 12310 0000123C 884701                  		mov	[bx+1],	al	; [bx+A_DISKACCESS_CONTROL.DAC_ACCESS_FLAG]
 12311 0000123F C3                      		retn
 12312                                  ; ---------------------------------------------------------------------------
 12313                                  
 12314                                  ; 16/10/2022
 12315                                  
 12316                                  ; ==========================================================================
 12317                                  ;	SetAccessFlag
 12318                                  ; ==========================================================================
 12319                                  ;
 12320                                  ; function: set/reset the UNFORMATTED_MEDIA bit of flags in bds table
 12321                                  ;
 12322                                  ; input :
 12323                                  ;	    ES:di -> bds table
 12324                                  ;
 12325                                  ; output:   unformtted_media bit modified according to the user request
 12326                                  ; ==========================================================================
 12327                                  
 12328                                  		; 19/10/2022
 12329                                  SetAccessFlag:				
 12330 00001240 C51E[1200]              		lds	bx, [ptrsav]	; ES:BX	points to request header
 12331 00001244 C55F13                  		lds	bx, [bx+19]	; [bx+IOCTL_REQ.GENERICIOCTL_PACKET]
 12332                                  		; 10/12/2022
 12333 00001247 26806524FD              		and	byte [es:di+36], 0FDh
 12334                                  		;and	word [es:di+35], 0FDFFh ; [es:di+BDS.flags]
 12335                                  					; ~unformatted_media
 12336 0000124C 807F0100                		cmp	byte [bx+1], 0	; [bx+A_DISKACCESS_CONTROL.DAC_ACCESS_FLAG]
 12337 00001250 7505                    		jnz	short saf_Done
 12338                                  		; 10/12/2022
 12339 00001252 26804D2402              		or	byte [es:di+36], 02h
 12340                                  		;or	word [es:di+35], 200h ; [es:di+BDS.flags]
 12341                                  					; unformatted_media
 12342                                  saf_Done:				
 12343 00001257 C3                      		retn
 12344                                  ; ---------------------------------------------------------------------------
 12345                                  
 12346                                  ; 16/10/2022
 12347                                  
 12348                                  ; ==========================================================================
 12349                                  ; Ioctl_Support_Query
 12350                                  ; ==========================================================================
 12351                                  ;
 12352                                  ; New device command which was added in DOS 5.00 to allow a query of a 
 12353                                  ; specific GENERIC IOCtl to see if it is supported. Bit 7 in the
 12354                                  ; device attributes specifies if this function is supported.
 12355                                  ;
 12356                                  ; ==========================================================================
 12357                                  
 12358                                  		; 19/10/2022
 12359                                  ioctl_support_query:
 12360 00001258 06                      		push	es
 12361 00001259 C41E[1200]              		les	bx, [ptrsav]	; ES:BX Points to request header.
 12362 0000125D 268B470D                		mov	ax, [es:bx+13]	; [es:bx+IOCTL_REQ.MAJORFUNCTION]
 12363                                  					; AL ==	Major, AH == Minor
 12364 00001261 3C08                    		cmp	al, 8		; IOC_DC
 12365                                  					; See if major code is 8
 12366 00001263 7513                    		jnz	short nosupport
 12367 00001265 0E                      		push	cs
 12368 00001266 07                      		pop	es
 12369 00001267 B90B00                  		mov	cx, 11		; IOC_DC_TABLE_LEN
 12370                                  		; 10/12/2022
 12371 0000126A BF[3B0C]                		mov	di, IOC_DC_Table
 12372                                  		;mov	di, 0C60h	; IOC_DC_Table
 12373                                  					; at 2C7h:0C60h	= 70h:31D0h
 12374 0000126D 86C4                    		xchg	al, ah		; Put minor code in AL
 12375 0000126F F2AE                    		repne scasb		; Scan for minor code in AL
 12376 00001271 7505                    		jnz	short nosupport	; it was not found
 12377 00001273 B80001                  		mov	ax, 100h
 12378                                  		; 10/12/2022
 12379                                  		; (jump to ioctlsupexit is not required)
 12380                                  		;jmp	short $+2	; ioctlsupexit
 12381                                  					; Signal ioctl is supported
 12382                                  		;;jmp	short ioctlsupexit
 12383                                  ; ---------------------------------------------------------------------------
 12384                                  ioctlsupexit:				
 12385 00001276 07                      		pop	es
 12386                                  		; 10/12/2022
 12387                                  		; cf = 0
 12388                                  		;clc
 12389 00001277 C3                      		retn
 12390                                  ; ---------------------------------------------------------------------------
 12391                                  nosupport:				
 12392 00001278 07                      		pop	es
 12393 00001279 E959EE                  		jmp	bc_cmderr
 12394                                  ; ---------------------------------------------------------------------------
 12395                                  
 12396                                  ; 16/10/2022
 12397                                  
 12398                                  ; ==========================================================================
 12399                                  ;	GetMediaSenseStatus
 12400                                  ; ==========================================================================
 12401                                  ;
 12402                                  ; FUNCTION: Will return the type of diskette media in the specified DOS
 12403                                  ;	    diskette drive and whether the media is the default type
 12404                                  ;	    for that drive. (default type means the max size for that
 12405                                  ;	    drive)
 12406                                  ;
 12407                                  ; INPUT :   ES:DI -> BDS table
 12408                                  ; OUTPUT:   If carry clear
 12409                                  ;	    DS:BX -> Updated IOCtlPacket
 12410                                  ;
 12411                                  ;			 Special Function at offset 0:
 12412                                  ;				0	- Media detected is not default type
 12413                                  ;				1	- Media detected is default type
 12414                                  ;
 12415                                  ;			 Device Type at offset 1:
 12416                                  ;				2       - 720K 3.5" 80 tracks
 12417                                  ;				7	- 1.44M 3.5" 80 tracks
 12418                                  ;				9	- 2.88M 3.5" 80 tracks
 12419                                  ;
 12420                                  ; Error Codes returned in AX if carry set:
 12421                                  ;
 12422                                  ; 8102 - Drive not ready	- No disk is in the drive.
 12423                                  ; 8107 - Unknown media type	- Drive doesn't support this function or
 12424                                  ;				  the media is really unkown, any error
 12425                                  ;				  other than "media not present"
 12426                                  ; 
 12427                                  ; ==========================================================================
 12428                                  
 12429                                  		; 19/10/2022
 12430                                  SenseMediaType:				
 12431 0000127C C51E[1200]              		lds	bx, [ptrsav]	; DS:BX	points to request header.
 12432 00001280 C55F13                  		lds	bx, [bx+19]	; bx+IOCTL_REQ.GENERICIOCTL_PACKET]
 12433                                  		; 10/10/2022
 12434                                  		;mov	word [bx], 0	; Initialize the 2 packet bytes
 12435 00001283 31D2                    		xor	dx, dx
 12436 00001285 8917                    		mov	[bx], dx ; 0
 12437                                  		;
 12438 00001287 268A5504                		mov	dl, [es:di+4]	; [es:di+BDS.drivenum]
 12439                                  					; Get int 13h drive number from	BDS
 12440                                  		; 10/12/2022
 12441                                  		;xor	dh, dh		; DX = physical	drive number
 12442 0000128B B420                    		mov	ah, 20h		; Get Media Type function
 12443                                  					; If no	carry media type in AL
 12444 0000128D CD13                    		int	13h		; DISK - QCACHE	- DISMOUNT
 12445 0000128F 7216                    		jb	short MediaSenseEr ; error code	in AH
 12446 00001291 FE07                    		inc	byte [bx]	; Signal media type is default (bit 1)
 12447                                  DetermineMediaType:			
 12448 00001293 FEC8                    		dec	al
 12449 00001295 3C02                    		cmp	al, 2		; Chk for 720K ie: (3-1) = 2
 12450 00001297 740A                    		jz	short GotMediaType
 12451 00001299 0404                    		add	al, 4
 12452 0000129B 3C07                    		cmp	al, 7		; Chk for 1.44M ie: (4-1+4) = 7
 12453 0000129D 7404                    		jz	short GotMediaType
 12454 0000129F 3C09                    		cmp	al, 9		; Chk for 2.88M	ie: (6-1+4) = 9
 12455 000012A1 7510                    		jnz	short UnknownMediaType ; Just didn't recognize media type
 12456                                  GotMediaType:				
 12457 000012A3 884701                  		mov	[bx+1],	al	; Save the return value
 12458                                  		; 10/12/2022
 12459                                  		; cf = 0
 12460                                  		;clc			; Signal success
 12461 000012A6 C3                      		retn
 12462                                  ; ---------------------------------------------------------------------------
 12463                                  
 12464                                  MediaSenseEr:				
 12465 000012A7 80FC32                  		cmp	ah, 32h		; See if not default media error
 12466 000012AA 74E7                    		jz	short DetermineMediaType ; Not really an error
 12467 000012AC B002                    		mov	al, 2		; Now assume drive not ready
 12468 000012AE 80FC31                  		cmp	ah, 31h		; See if media was present
 12469 000012B1 7402                    		jz	short SenseErrExit ; Return drive not ready
 12470                                  UnknownMediaType:			
 12471 000012B3 B007                    		mov	al, 7		; Just don't know the media type
 12472                                  SenseErrExit:				
 12473 000012B5 B481                    		mov	ah, 81h		; Signal error return
 12474 000012B7 F9                      		stc
 12475 000012B8 C3                      		retn
 12476                                  
 12477                                  ; ---------------------------------------------------------------------------
 12478                                  		; 10/12/2022
 12479                                  		;db    0
 12480                                  ; ---------------------------------------------------------------------------
 12481                                  
 12482                                  ; 16/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 12483                                  
 12484                                  ;-----------------------------------------------------------------------------
 12485                                  ; MSINT13.ASM - MSDOS 6.0 - 1991
 12486                                  ;-----------------------------------------------------------------------------
 12487                                  ; 16/03/2019 - Retro DOS v4.0
 12488                                  
 12489                                  ;	int 2f function 13h allows the user to change the orig13 int_13 vector
 12490                                  ;	after booting. this allows testing and implementation of custom int_13
 12491                                  ;	handlers, without giving up ms-dos error recovery
 12492                                  ;	entry:	ds:dx	== addr. of new int_13 handler
 12493                                  ;		es:bx	== addr. of new int_13 vector used by warm boot (int19)
 12494                                  ;	exit:	orig13	== address of new int_13 handler
 12495                                  ;		ds:dx	== old orig13 value
 12496                                  ;		es:bx	== old old13  value
 12497                                  ;
 12498                                  ; int 2f handler for external block drivers to communicate with the internal
 12499                                  ; block driver in msdisk. the multiplex number chosen is 8. the handler
 12500                                  ; sets up the pointer to the request packet in [ptrsav] and then jumps to
 12501                                  ; dsk_entry, the entry point for all disk requests.
 12502                                  ;
 12503                                  ; on exit from this driver, we will return to the external driver
 12504                                  ; that issued this int 2f, and can then remove the flags from the stack.
 12505                                  ; this scheme allows us to have a small external device driver, and makes
 12506                                  ; the maintainance of the various drivers (driver and msbio) much easier,
 12507                                  ; since we only need to make changes in one place (most of the time).
 12508                                  ;
 12509                                  ;   ax=800h - check for installed handler - reserved
 12510                                  ;   ax=801h - install the bds into the linked list
 12511                                  ;   ax=802h - dos request
 12512                                  ;   ax=803h - return bds table starting pointer in ds:di
 12513                                  ;	   (ems device driver hooks int 13h to handle 16kb dma overrun
 12514                                  ;	    problem. bds table is going to be used to get head/sector
 12515                                  ;	    informations without calling generic ioctl get device parm call.)
 12516                                  
 12517                                  ;BIOSSEGMENT equ 70h
 12518                                  DOSBIOSSEG equ 0070h ; 17/10/2022	
 12519                                  
 12520                                  ;;BIOSCODE:1302h (MSDOS 6.21, IO.SYS)
 12521                                  
 12522                                  i2f_handler:				; here is 02C7h:1302h =	0070h:3872h
 12523 000012B9 80FC13                  		cmp	ah, 13h
 12524 000012BC 7413                    		jz	short int2f_replace_int13
 12525 000012BE 80FC08                  		cmp	ah, 8
 12526 000012C1 743B                    		jz	short mine
 12527                                  
 12528                                  ; Check for WIN386 startup and return the BIOS instance data
 12529                                  
 12530 000012C3 80FC16                  		cmp	ah, 16h		; MultWin386
 12531 000012C6 7479                    		jz	short win386call
 12532 000012C8 80FC4A                  		cmp	ah, 4Ah		; multMULT
 12533 000012CB 7503                    		jnz	short i2f_handler_iret
 12534 000012CD E9A500                  		jmp	handle_multmult
 12535                                  ; ---------------------------------------------------------------------------
 12536                                  
 12537                                  i2f_handler_iret:			
 12538 000012D0 CF                      		iret
 12539                                  ; ---------------------------------------------------------------------------
 12540                                  
 12541                                  int2f_replace_int13:			
 12542 000012D1 50                      		push	ax	; free up a register for caller's ds
 12543 000012D2 8CD8                    		mov	ax, ds	; then we can use ds: -> Bios_Data
 12544                                  		;;mov	ds, word [cs:0030h] ; 15/10/2022	
 12545                                  		;mov	ds, word ptr cs:BIOSDATAWORD ; [cs:0030h]
 12546                                  					; = [02C7h:0030h] = [0070h:25A0h]
 12547 000012D4 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD] ; 17/10/2022
 12548                                  		; 19/10/2022
 12549                                  		;push	word ptr ds:Orig13	; save old value of old13 and
 12550                                  		;push	word ptr ds:Orig13+2	; orig13 so that we can
 12551                                  		;push	word ptr ds:Old13	; return them to caller
 12552                                  		;push	word ptr ds:Old13+2
 12553 000012D9 FF36[B400]              		push	word [Orig13]
 12554 000012DD FF36[B600]              		push	word [Orig13+2]
 12555 000012E1 FF36[0601]              		push	word [Old13]
 12556 000012E5 FF36[0801]              		push	word [Old13+2]
 12557                                  
 12558                                  		;mov	word ptr ds:Orig13, dx	; orig13 := addr. of new int_13
 12559                                  		;mov	word ptr ds:Orig13+2, ax
 12560                                  		;mov	word ptr ds:Old13, bx	; old13 := addr. of new boot_13
 12561                                  		;mov	word ptr ds:Old13+2, es
 12562 000012E9 8916[B400]              		mov	[Orig13], dx
 12563 000012ED A3[B600]                		mov	[Orig13+2], ax
 12564 000012F0 891E[0601]              		mov	[Old13], bx
 12565 000012F4 8C06[0801]              		mov	[Old13+2], es
 12566                                  
 12567 000012F8 07                      		pop	es			; es:bx := old old13 vector
 12568 000012F9 5B                      		pop	bx
 12569 000012FA 1F                      		pop	ds			; ds:dx := old orig13 vector
 12570 000012FB 5A                      		pop	dx
 12571 000012FC 58                      		pop	ax
 12572                                  i2f_iret:				
 12573 000012FD CF                      		iret
 12574                                  ; ---------------------------------------------------------------------------
 12575                                  
 12576                                  mine:					
 12577 000012FE 3CF8                    		cmp	al, 0F8h 		; iret on reserved functions
 12578 00001300 73FB                    		jnb	short i2f_iret
 12579 00001302 08C0                    		or	al, al			; a get installed state request?
 12580 00001304 7504                    		jnz	short disp_func
 12581 00001306 B0FF                    		mov	al, 0FFh
 12582 00001308 EBF3                    		jmp	short i2f_iret
 12583                                  ; ---------------------------------------------------------------------------
 12584                                  
 12585                                  disp_func:				
 12586 0000130A 3C01                    		cmp	al, 1			; request for installing bds?
 12587 0000130C 7418                    		jz	short do_subfun_01
 12588 0000130E 3C03                    		cmp	al, 3			; get bds vector?
 12589 00001310 7424                    		jz	short do_get_bds_vector
 12590                                  
 12591                                  ; set up pointer to request packet
 12592                                  
 12593 00001312 1E                      		push	ds
 12594 00001313 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD] ; 17/10/2022	
 12595                                  		;mov	ds, word ptr cs:BIOSDATAWORD ; [cs:Bios_Data_Word]
 12596                                  					; = [0070h:25A0h] = [02C7h:0030h]
 12597                                  		; 19/10/2022
 12598                                  		;mov	word ptr ds:ptrsav, bx
 12599                                  		;mov	word ptr ds:ptrsav+2, es
 12600 00001318 891E[1200]              		mov	[ptrsav], bx
 12601 0000131C 8C06[1400]              		mov	[ptrsav+2], es
 12602 00001320 1F                      		pop	ds
 12603                                  		;jmp	far ptr	i2f_dskentry
 12604                                  		; 17/10/2022
 12605                                  		;jmp	far DOSBIOSSEG:dsk_entry		
 12606 00001321 EA[9608]7000            		jmp	DOSBIOSSEG:i2f_dskentry ; 70h:i2f_dskentry
 12607                                  					; NOTE: jump to a FAR function, not an
 12608                                  					;  IRET type function. Callers of
 12609                                  					;  this int2f subfunction will have
 12610                                  					;  to be careful to do a popf
 12611                                  
 12612                                  ; ---------------------------------------------------------------------------
 12613                                  
 12614                                  do_subfun_01:				
 12615 00001326 06                      		push	es
 12616 00001327 1E                      		push	ds
 12617 00001328 1E                      		push	ds
 12618 00001329 07                      		pop	es
 12619                                  		; 17/10/2022
 12620 0000132A 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD]	
 12621                                  		;mov	ds, word ptr cs:BIOSDATAWORD ; [cs:Bios_Data_Word]
 12622                                  					; point	ds: -> Bios_Data
 12623 0000132F E8C303                  		call	install_bds
 12624 00001332 1F                      		pop	ds
 12625 00001333 07                      		pop	es
 12626 00001334 EBC7                    		jmp	short i2f_iret
 12627                                  ; ---------------------------------------------------------------------------
 12628                                  
 12629                                  do_get_bds_vector:
 12630                                  		; 17/10/2022
 12631 00001336 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD]			
 12632                                  		;mov	ds, word ptr cs:BIOSDATAWORD ; [cs:Bios_Data_Word]
 12633 0000133B C53E[1901]              		lds	di, [start_bds]
 12634                                  		;lds	di, ds:start_bds
 12635                                  ;ii2f_iret:	; 10/12/2022				
 12636 0000133F EBBC                    		jmp	short i2f_iret
 12637                                  ; ---------------------------------------------------------------------------
 12638                                  
 12639                                  ; 17/10/2022
 12640                                  ; 16/10/2022
 12641                                  
 12642                                  ; WIN386 startup stuff is done here. If starting up we set our WIN386 present
 12643                                  ; flag and return instance data. If exiting, we reset the WIN386 present flag
 12644                                  ; NOTE: We assume that the BIOS int 2fh is at the bottom of the chain.
 12645                                  
 12646                                  win386call:				
 12647 00001341 1E                      		push	ds
 12648 00001342 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD]
 12649                                  		;mov	ds, word ptr cs:BIOSDATAWORD ; [cs:Bios_Data_Word]
 12650                                  					; at 2C7h:30h =	70h:25A0h
 12651 00001347 3C05                    		cmp	al, 5		; Win386_Init
 12652                                  					; is it	win386 initializing?
 12653 00001349 7410                    		jz	short Win386Init
 12654 0000134B 3C06                    		cmp	al, 6		; Win386_Exit
 12655                                  					; is it	win386 exiting?
 12656 0000134D 7523                    		jnz	short win_iret	; if not, continue int2f chain
 12657                                  		; 12/12/2022
 12658 0000134F F6C201                  		test	dl, 1
 12659                                  		;test	dx, 1		; is it	win386 or win286 dos extender?
 12660 00001352 751E                    		jnz	short win_iret	; if not win386, then continue
 12661                                  		;and	ds:IsWin386, 0	; indicate that	win386 is not present  
 12662 00001354 8026[CE08]00            		and	byte [IsWin386], 0 
 12663 00001359 EB17                    		jmp	short win_iret
 12664                                  ; ---------------------------------------------------------------------------
 12665                                  
 12666                                  Win386Init:	
 12667                                  		; 12/12/2022
 12668 0000135B F6C201                  		test	dl, 1			
 12669                                  		;test	dx, 1		; is it win386 or win286 dos extender?
 12670 0000135E 7512                    		jnz	short win_iret	; if not win386, then continue
 12671                                  		;or	ds:IsWin386, 1	; Indicate WIN386 present
 12672 00001360 800E[CE08]01            		or	byte [IsWin386], 1
 12673                                  		;mov	word ptr ds:SI_Next, bx	; Hook our structure into chain
 12674                                  		;mov	word ptr ds:SI_Next+2, es
 12675 00001365 891E[9C08]              		mov	[SI_Next], bx
 12676 00001369 8C06[9E08]              		mov	[SI_Next+2], es
 12677                                  		;mov	bx, offset Win386_SI ; point ES:BX to Win386_SI
 12678 0000136D BB[9A08]                		mov	bx, Win386_SI	; 19/10/2022
 12679 00001370 1E                      		push	ds
 12680 00001371 07                      		pop	es
 12681                                  win_iret:				
 12682 00001372 1F                      		pop	ds
 12683                                  ii2f_iret:	; 10/12/2022	
 12684 00001373 EB88                    		jmp	short i2f_iret	; return back up the chain
 12685                                  ; ---------------------------------------------------------------------------
 12686                                  
 12687                                  handle_multmult:			
 12688 00001375 3C01                    		cmp	al, 1
 12689 00001377 7515                    		jnz	short try_2
 12690 00001379 1E                      		push	ds
 12691 0000137A E84700                  		call	HMAPtr		; get offset of free HMA
 12692                                  		; 10/12/2022
 12693                                  		;xor	bx, bx
 12694                                  		;dec	bx
 12695 0000137D BBFFFF                  		mov	bx, 0FFFFh
 12696 00001380 8EC3                    		mov	es, bx		; seg of HMA
 12697 00001382 89FB                    		mov	bx, di
 12698 00001384 F7D3                    		not	bx
 12699 00001386 09DB                    		or	bx, bx
 12700 00001388 7401                    		jz	short try_1
 12701 0000138A 43                      		inc	bx
 12702                                  try_1:					
 12703 0000138B 1F                      		pop	ds
 12704 0000138C EBE5                    		jmp	short ii2f_iret
 12705                                  ; ---------------------------------------------------------------------------
 12706                                  
 12707                                  try_2:					
 12708 0000138E 3C02                    		cmp	al, 2		; multMULTALLOCHMA
 12709 00001390 7530                    		jnz	short try_3
 12710 00001392 1E                      		push	ds
 12711                                  		; 10/12/2022
 12712                                  		;xor	di, di
 12713                                  		;dec	di
 12714 00001393 BFFFFF                  		mov	di, 0FFFFh	; assume not enough space
 12715 00001396 8EC7                    		mov	es, di
 12716 00001398 E82900                  		call	HMAPtr		; get offset of free HMA
 12717 0000139B 83FFFF                  		cmp	di, 0FFFFh
 12718 0000139E 7421                    		jz	short InsuffHMA
 12719 000013A0 F7DF                    		neg	di		; free space in HMA
 12720 000013A2 39FB                    		cmp	bx, di
 12721 000013A4 7605                    		jbe	short try_4
 12722                                  		; 10/12/2022
 12723                                  		;sub	di, di
 12724                                  		;dec	di
 12725 000013A6 BFFFFF                  		mov	di, 0FFFFh
 12726 000013A9 EB16                    		jmp	short InsuffHMA
 12727                                  ; ---------------------------------------------------------------------------
 12728                                  
 12729                                  try_4:					
 12730                                  		;mov	di, ds:FreeHMAPtr
 12731 000013AB 8B3E[F508]              		mov	di, [FreeHMAPtr]
 12732 000013AF 83C30F                  		add	bx, 15
 12733                                  		;and	bx, 0FFF0h
 12734                                  		; 10/12/2022
 12735 000013B2 80E3F0                  		and	bl, 0F0h
 12736                                  		;add	ds:FreeHMAPtr, bx ; update the free pointer	
 12737 000013B5 011E[F508]              		add	[FreeHMAPtr], bx
 12738 000013B9 7506                    		jnz	short InsuffHMA
 12739 000013BB C706[F508]FFFF          		mov	word [FreeHMAPtr], 0FFFFh ; -1
 12740                                  		;mov	ds:FreeHMAPtr, 0FFFFh
 12741                                  					; no more HMA if we have wrapped
 12742                                  InsuffHMA:				
 12743 000013C1 1F                      		pop	ds
 12744                                  		; 10/12/2022
 12745                                  try_3:		
 12746 000013C2 EBAF                    		jmp	short ii2f_iret
 12747                                  ; ---------------------------------------------------------------------------
 12748                                  
 12749                                  		; 10/12/2022
 12750                                  ;try_3:					
 12751                                  		;jmp	ii2f_iret
 12752                                  
 12753                                  ; =============== S U B	R O U T	I N E =======================================
 12754                                  
 12755                                  ; 16/10/2022
 12756                                  
 12757                                  ;--------------------------------------------------------------------------
 12758                                  ;
 12759                                  ; procedure : HMAPtr
 12760                                  ;
 12761                                  ;		Gets the offset of the free HMA area ( with respect to
 12762                                  ;							seg ffff )
 12763                                  ;		If DOS has not moved high, tries to move DOS high.
 12764                                  ;		In the course of doing this, it will allocate all the HMA
 12765                                  ;		and set the FreeHMAPtr to past the end of the BIOS and 
 12766                                  ;		DOS code. The call to MoveDOSIntoHMA (which is a pointer)
 12767                                  ;		enters the routine in sysinit1 called FTryToMovDOSHi.
 12768                                  ;
 12769                                  ;	RETURNS : offset of free HMA in DI
 12770                                  ;		  BIOS_DATA, seg in DS
 12771                                  ;
 12772                                  ;--------------------------------------------------------------------------
 12773                                  
 12774                                  		; 17/10/2022
 12775                                  HMAPtr:
 12776 000013C4 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD]
 12777                                  		;mov	ds, word ptr cs:BIOSDATAWORD ; [cs:Bios_Data_Word]
 12778 000013C9 8B3E[F508]              		mov	di, [FreeHMAPtr]
 12779                                  		;mov	di, ds:FreeHMAPtr
 12780 000013CD 83FFFF                  		cmp	di, 0FFFFh
 12781 000013D0 750F                    		jnz	short HMAPtr_retn
 12782 000013D2 803E[FB08]00            		cmp	byte [SysinitPresent], 0
 12783                                  		;cmp	ds:SysinitPresent, 0
 12784 000013D7 7408                    		jz	short HMAPtr_retn
 12785 000013D9 FF1E[F708]              		call	far [MoveDOSIntoHMA]
 12786                                  		;call	ds:MoveDOSIntoHMA ; call far [MoveDOSIntoHMA]
 12787 000013DD 8B3E[F508]              		mov	di, [FreeHMAPtr]
 12788                                  		;mov	di, ds:FreeHMAPtr
 12789                                  HMAPtr_retn:				
 12790 000013E1 C3                      		retn
 12791                                  
 12792                                  ; =============== S U B	R O U T	I N E =======================================
 12793                                  
 12794                                  ; 16/10/2022
 12795                                  
 12796                                  ; move a 512 byte sector from ds:si to es:di, do not trash cx
 12797                                  ; but go ahead and update direction flag, si, & di
 12798                                  
 12799                                  move_sector:
 12800                                  
 12801                                  ; The 80386 microprocessor considers an access to WORD 0FFFFh in
 12802                                  ; any segment to be a fault. Theoretically, this could be handled
 12803                                  ; by the fault handler and the behavior of an 8086 could be emulated
 12804                                  ; by wrapping the high byte to offset 0000h. This would be a lot
 12805                                  ; of work and was, indeed, blown off by the Win386 guys. COMPAQ
 12806                                  ; also handles the fault incorrectly in their ROM BIOS for real
 12807                                  ; mode. Their fault handler was only designed to deal with one
 12808                                  ; special case which occurred in a magazine benchmark, but didn't
 12809                                  ; handle the general case worth beans.
 12810                                  ;
 12811                                  ; Simply changing this code to do a byte loop would work okay but
 12812                                  ; would involve a general case performance hit. Therefore, we'll
 12813                                  ; check for either source or destination offsets being within one
 12814                                  ; sector of the end of their segments and only in that case fall
 12815                                  ; back to a byte move.
 12816                                  
 12817 000013E2 FC                      		cld
 12818 000013E3 51                      		push	cx
 12819 000013E4 B90001                  		mov	cx, 256
 12820 000013E7 81FE00FE                		cmp	si, 0FE00h
 12821 000013EB 770A                    		ja	short movsec_bytes
 12822 000013ED 81FF00FE                		cmp	di, 0FE00h
 12823 000013F1 7704                    		ja	short movsec_bytes
 12824 000013F3 F3A5                    		rep movsw
 12825 000013F5 59                      		pop	cx
 12826 000013F6 C3                      		retn
 12827                                  ; ---------------------------------------------------------------------------
 12828                                  
 12829                                  movsec_bytes:				
 12830 000013F7 D1E1                    		shl	cx, 1
 12831 000013F9 F3A4                    		rep movsb
 12832 000013FB 59                      		pop	cx
 12833 000013FC C3                      		retn
 12834                                  
 12835                                  ; =============== S U B	R O U T	I N E =======================================
 12836                                  
 12837                                  ; 16/10/2022
 12838                                  
 12839                                  ; check_wrap is a routine that adjusts the starting sector, starting head
 12840                                  ; and starting cylinder for an int 13 request that requests i/o of a lot
 12841                                  ; of sectors. it only does this for fixed disks. it is used in the sections
 12842                                  ; of code that handle ecc errors and dma errors. it is necessary, because
 12843                                  ; ordinarily the rom would take care of wraps around heads and cylinders,
 12844                                  ; but we break down a request when we get an ecc or dma error into several
 12845                                  ; i/o of one or more sectors. in this case, we may already be beyond the
 12846                                  ; number of sectors on a track on the medium, and the request would fail.
 12847                                  ;
 12848                                  ; input conditions:
 12849                                  ;	all registers set up for an int 13 request.
 12850                                  ;
 12851                                  ; output:
 12852                                  ;	dh - contains starting head number for request
 12853                                  ;	cx - contains starting sector and cylinder numbers
 12854                                  ;	(the above may or may not have been changed, and are 0-based)
 12855                                  ;	all other registers preserved.
 12856                                  
 12857                                  check_wrap:	
 12858 000013FD 50                      		push	ax
 12859 000013FE 53                      		push	bx
 12860 000013FF 06                      		push	es
 12861 00001400 57                      		push	di
 12862 00001401 E86E00                  		call	find_bds	; get pointer to bds for drive in dl
 12863 00001404 7260                    		jb	short no_wrap	; finished if DOS doesn't use it
 12864                                  		; 12/12/2022
 12865 00001406 26F6452301              		test	byte [es:di+23h], 1
 12866                                  		;test	word [es:di+23h], 1 ; [es:di+BDS.flags],fnon_removable
 12867 0000140B 7459                    		jz	short no_wrap	; no wrapping for removable media
 12868 0000140D 268B5D13                		mov	bx, [es:di+13h]	; [es:di+BDS.secpertrack]
 12869 00001411 89C8                    		mov	ax, cx
 12870 00001413 83E03F                  		and	ax, 3Fh		; extract sector number
 12871 00001416 39D8                    		cmp	ax, bx		; are we going to wrap?
 12872 00001418 764C                    		jbe	short no_wrap
 12873 0000141A F6F3                    		div	bl		; ah=new sector	#, al=#	of head	wraps
 12874                                  
 12875                                  ; we need to be careful here. if the new sector # is 0, then we are on the
 12876                                  ; last sector on that track.
 12877                                  
 12878 0000141C 08E4                    		or	ah, ah
 12879 0000141E 7503                    		jnz	short not_on_bound
 12880                                  		; 18/12/2022
 12881 00001420 48                      		dec	ax ; *
 12882 00001421 88DC                    		mov	ah, bl		; set sector=BDS_BPB.BPB_SECTORSPERTRACK
 12883                                  					; if on	boundary
 12884                                  		;dec	al ; *		; also decrement # of head wraps
 12885                                  not_on_bound:				
 12886 00001423 80E1C0                  		and	cl, 0C0h	; zero out sector #
 12887 00001426 08E1                    		or	cl, ah		; or in	new sector #
 12888 00001428 30E4                    		xor	ah, ah		; ax = # of head wraps
 12889 0000142A 40                      		inc	ax
 12890 0000142B 00F0                    		add	al, dh		; add in starting head #
 12891 0000142D 80D400                  		adc	ah, 0		; catch	any carry
 12892 00001430 263B4515                		cmp	ax, [es:di+15h]	; [es:di+BDS.heads]
 12893                                  					; are we going to wrap around a	head?
 12894 00001434 7636                    		jbe	short no_wrap_head ; do	not lose new head number!!
 12895 00001436 52                      		push	dx		; preserve drive number and head number
 12896 00001437 31D2                    		xor	dx, dx
 12897 00001439 268B5D15                		mov	bx, [es:di+15h]	; [es:di+BDS.heads]
 12898 0000143D F7F3                    		div	bx		; dx=new head #, ax=# of cylinder wraps
 12899                                  
 12900                                  ; careful here! if new head # is 0, then we are on the last head.
 12901                                  
 12902 0000143F 09D2                    		or	dx, dx
 12903 00001441 7507                    		jnz	short no_head_bound
 12904 00001443 89DA                    		mov	dx, bx		; on boundary. set to BDS_BPB.BPB_HEADS
 12905                                  
 12906                                  ; if we had some cylinder wraps, we need to reduce them by one!!
 12907                                  
 12908 00001445 09C0                    		or	ax, ax
 12909 00001447 7401                    		jz	short no_head_bound
 12910 00001449 48                      		dec	ax		; reduce number	of cylinder wraps
 12911                                  no_head_bound:				
 12912 0000144A 88D7                    		mov	bh, dl		; bh has new head number
 12913 0000144C 5A                      		pop	dx		; restore drive number and head number
 12914 0000144D FECF                    		dec	bh		; get it 0-based
 12915 0000144F 88FE                    		mov	dh, bh		; set up new head number in dh
 12916 00001451 88CF                    		mov	bh, cl
 12917 00001453 80E73F                  		and	bh, 3Fh		; preserve sector number
 12918 00001456 B306                    		mov	bl, 6
 12919 00001458 86CB                    		xchg	cl, bl
 12920 0000145A D2EB                    		shr	bl, cl		; get ms cylinder bits to ls end
 12921 0000145C 00C5                    		add	ch, al		; add in cylinder wrap
 12922 0000145E 10E3                    		adc	bl, ah		; add in high byte
 12923 00001460 D2E3                    		shl	bl, cl		; move up to ms	end
 12924 00001462 86D9                    		xchg	bl, cl		; restore cylinder bits	into cl
 12925 00001464 08F9                    		or	cl, bh		; or in	sector number
 12926                                  no_wrap:				
 12927 00001466 F8                      		clc
 12928 00001467 5F                      		pop	di
 12929 00001468 07                      		pop	es
 12930 00001469 5B                      		pop	bx
 12931 0000146A 58                      		pop	ax
 12932 0000146B C3                      		retn
 12933                                  ; ---------------------------------------------------------------------------
 12934                                  
 12935                                  no_wrap_head:				
 12936 0000146C 88C6                    		mov	dh, al		; do not lose new head number
 12937 0000146E FECE                    		dec	dh		; get it 0-based
 12938 00001470 EBF4                    		jmp	short no_wrap
 12939                                  
 12940                                  ; =============== S U B	R O U T	I N E =======================================
 12941                                  
 12942                                  ; 16/10/2022
 12943                                  
 12944                                  ; this is a special version of the bds lookup code which is
 12945                                  ; based on physical drives rather than the usual logical drives
 12946                                  ; carry is set if the physical drive in dl is found, es:di -> its bds
 12947                                  ; otherwise carry is clear
 12948                                  ;
 12949                                  ; guaranteed to trash no registers except es:di
 12950                                  
 12951                                  		; 19/10/2022
 12952                                  find_bds:	
 12953 00001472 C43E[1901]              		les	di, [start_bds]	; point es:di to first bds
 12954                                  fbds_1:					
 12955 00001476 26385504                		cmp	[es:di+4], dl	; [es:di+BDS.drivenum]
 12956 0000147A 7409                    		jz	short fdbs_2
 12957 0000147C 26C43D                  		les	di, [es:di]	; [es:di+BDS.link]
 12958                                  					; go to next bds
 12959 0000147F 83FFFF                  		cmp	di, 0FFFFh
 12960 00001482 75F2                    		jnz	short fbds_1
 12961 00001484 F9                      		stc
 12962                                  fdbs_2:					
 12963 00001485 C3                      		retn
 12964                                  
 12965                                  ; =============== S U B	R O U T	I N E =======================================
 12966                                  
 12967                                  ; 16/10/2022
 12968                                  		; 17/10/2022
 12969                                  doint:
 12970                                  		; 10/12/2022
 12971 00001486 8A5608                  		mov	dl, [bp+8]	; [bp+INT13FRAME.olddx]
 12972                                  					; get physical drive number
 12973                                  		; 19/10/2022 - Temporary !
 12974                                  		;db	8Ah, 96h, 8, 0	; mov dl, [bp+8]	
 12975                                  		
 12976 00001489 30E4                    		xor	ah, ah
 12977 0000148B 08C0                    		or	al, al
 12978 0000148D 7410                    		jz	short dointdone	; if zero sectors, return ax=0
 12979                                  		; 10/12/2022
 12980 0000148F 8A6603                  		mov	ah, [bp+3]	; [bp+INT13FRAME.oldax+1]
 12981                                  					; get request code
 12982                                  		;db	8Ah, 0A6h, 3, 0	; mov ah, [bp+3]
 12983 00001492 FF7610                  		push	word [bp+10h]	; [bp+INT13FRAME.oldf]
 12984                                  		;db	0FFh, 0B6h, 10h, 0 ; push word [bp+10h]
 12985 00001495 9D                      		popf
 12986                                  		;call	far 70h:797h ; MSDOS 6.21 IO.SYS BIOSCODE:14EAh
 12987                                  		; 17/10/2022
 12988 00001496 9A[9707]7000            		call	DOSBIOSSEG:call_orig13
 12989                                  		;;call	call_orig13	; call far 70h:797h
 12990                                  					; call far KERNEL_SEGMENT:call_orig13
 12991 0000149B 9C                      		pushf
 12992                                  		; 10/12/2022
 12993 0000149C 8F4610                  		pop	word [bp+10h]	; [bp+INT13FRAME.oldf]
 12994                                  		;db	8Fh, 86h, 10h, 0 ; pop word [bp+10h]
 12995                                  dointdone:				
 12996 0000149F C3                      		retn
 12997                                  
 12998                                  ;----------------------------------------------------------------------------
 12999                                  
 13000                                  ; 16/10/2022
 13001                                  
 13002                                  ; this is the true int 13 handler. we parse the request to see if there is
 13003                                  ; a dma violation. if so, depending on the function, we:
 13004                                  ;   read/write break the request into three pieces and move the middle one
 13005                                  ;	       into our internal buffer.
 13006                                  ;
 13007                                  ;   format     copy the format table into the buffer
 13008                                  ;   verify     point the transfer address into the buffer
 13009                                  ;
 13010                                  ; this is the biggest bogosity of all. the ibm controller does not handle
 13011                                  ; operations that cross physical 64k boundaries. in these cases, we copy
 13012                                  ; the offending sector into the buffer below and do the i/o from there.
 13013                                  
 13014                                  ;struc INT13FRAME
 13015                                  ;.oldbp: resw
 13016                                  ;.oldax: resw 
 13017                                  ;.oldbx: resw
 13018                                  ;.oldcx: resw
 13019                                  ;.olddx: resw
 13020                                  ;.oldds: resw	; now we save caller's ds, too
 13021                                  ;.olddd: resd
 13022                                  ;.oldf:	resw
 13023                                  ;end struc
 13024                                  
 13025                                  ;----------------------------------------------------------------------------
 13026                                  
 13027                                  ;   entry conditions:
 13028                                  ;	ah = function
 13029                                  ;	al = number of sectors
 13030                                  ;	es:bx = dma address
 13031                                  ;	cx = packed track and sector
 13032                                  ;	dx = head and drive
 13033                                  ;   output conditions:
 13034                                  ;	no dma violation.
 13035                                  
 13036                                  ;	use extreme caution when working with this code. In general,
 13037                                  ;	  all registers are hot at all times.
 13038                                  ;
 13039                                  ;	question:  does this code handle cases where dma errors
 13040                                  ;	  occur during ecc retries, and where ecc errors occur during
 13041                                  ;	  dma breakdowns???? Hmmmmm.
 13042                                  
 13043                                  ;----------------------------------------------------------------------------
 13044                                  
 13045                                  ; ---------------------------------------------------------------------------
 13046                                  
 13047 000014A0 90004000                dtype_array:	dd 400090h		; 40:90	is drive type array
 13048                                  
 13049                                  ; 17/10/2022
 13050                                  ;DTYPEARRAY equ dtype_array - DOSBIOSEG_2C7h ; (14F5h for MSDOS 5.0 IO.SYS)
 13051                                  ; 09/12/2022
 13052                                  DTYPEARRAY equ dtype_array
 13053                                  
 13054                                  ; ---------------------------------------------------------------------------
 13055                                  
 13056                                  ; stick some special stuff out of mainline
 13057                                  
 13058                                  ; we know we're doing a format command. if we have changeline
 13059                                  ; support, then flag some special changed stuff and set changed
 13060                                  ; by format bit for all logical drives using this physical drive
 13061                                  
 13062                                  format_special_stuff:			
 13063 000014A4 803E[7700]00            		cmp	byte [fhave96], 0	; do we have changeline support?
 13064 000014A9 7459                    		jz	short format_special_stuff_done ; brif not
 13065 000014AB 53                      		push	bx
 13066 000014AC BB4001                  		mov	bx, 140h	; fchanged_by_format+fchanged
 13067 000014AF E83804                  		call	set_changed_dl	; indicate that media changed by format
 13068 000014B2 5B                      		pop	bx
 13069 000014B3 EB4F                    		jmp	short format_special_stuff_done
 13070                                  ; ---------------------------------------------------------------------------
 13071                                  
 13072                                  ; 16/10/2022
 13073                                  
 13074                                  ; we know we've got ec35's on the system. Now see if we're doing
 13075                                  ; a floppy. If so, create a mask and see if this particular
 13076                                  ; drive is an ec35. If so, set dtype_array[drive]=93h
 13077                                  
 13078                                  		; 19/10/2022
 13079                                  ec35_special_stuff:			
 13080 000014B5 84D2                    		test	dl, dl		; floppy or hard disk?
 13081 000014B7 7852                    		js	short ec35_special_stuff_done ;	if hard	drive, we're done
 13082 000014B9 50                      		push	ax		; see if this PARTICULAR drive is ec35
 13083 000014BA 51                      		push	cx
 13084 000014BB 88D1                    		mov	cl, dl		; turn drive number into bit map
 13085 000014BD B001                    		mov	al, 1		; assume drive 0
 13086 000014BF D2E0                    		shl	al, cl		; shift	over correct number of times
 13087 000014C1 8406[3105]              		test	[ec35flag], al	; electrically compatible 3.5 incher?
 13088 000014C5 59                      		pop	cx
 13089 000014C6 58                      		pop	ax
 13090 000014C7 7442                    		jz	short ec35_special_stuff_done
 13091                                  					; done if this floppy is not an	ec35
 13092 000014C9 53                      		push	bx		; free up a far	pointer	(es:bx)
 13093 000014CA 06                      		push	es
 13094                                  		; 17/10/2022
 13095 000014CB 2EC41E[A014]            		les	bx, [cs:DTYPEARRAY]
 13096                                  		;les	bx, dword ptr cs:DTYPEARRAY ; [cs:dtype_array]
 13097                                  					; 0070h:3A65h =	2C7h:14F5h
 13098 000014D0 00D3                    		add	bl, dl
 13099 000014D2 80D700                  		adc	bh, 0		; find entry for this drive
 13100 000014D5 26C60793                		mov	byte [es:bx], 93h ; establish drive type as:
 13101                                  					; (360k	disk in	360k drive,
 13102                                  					; no double-stepping, 250 kbs transfer rate)
 13103 000014D9 07                      		pop	es
 13104 000014DA 5B                      		pop	bx
 13105 000014DB EB2E                    		jmp	short ec35_special_stuff_done
 13106                                  ; ---------------------------------------------------------------------------
 13107                                  
 13108                                  ; 16/10/2022
 13109                                  
 13110                                  ; ps2_30 machine has some problem with ah=8h (read drive parm), int 13h.
 13111                                  ; this function does not reset the common buses after the execution.
 13112                                  ; to solve this problem, when we detect ah=8h, then we will save the result and
 13113                                  ; will issue ah=1 (read status) call to reset the buses.
 13114                                  
 13115                                  ps2_special_stuff:			
 13116 000014DD 803E[1E00]08            		cmp	byte [prevoper], 8 ; (ps2_30)
 13117                                  					; read driver parm ?
 13118 000014E2 7407                    		jz	short ps2_30_problem
 13119 000014E4 803E[1E00]15            		cmp	byte [prevoper], 15h
 13120                                  					; apparently function 15h fails, too
 13121 000014E9 752D                    		jnz	short ps2_special_stuff_done
 13122                                  ps2_30_problem:				
 13123 000014EB 50                      		push	ax
 13124 000014EC B401                    		mov	ah, 1
 13125                                  		;;call	far 70:797h ; MSDOS 6.21 IO.SYS BIOSCODE:1543h
 13126                                  		; 17/10/2022
 13127 000014EE 9A[9707]7000            		call	DOSBIOSSEG:call_orig13
 13128                                  		;call	call_orig13	; call far 70:797h
 13129                                  					; call far KERNEL_SEGMENT:call_orig13
 13130 000014F3 58                      		pop	ax
 13131 000014F4 EB22                    		jmp	short ps2_special_stuff_done
 13132                                  ; ---------------------------------------------------------------------------
 13133                                  
 13134                                  ; 17/10/2022
 13135                                  ; 16/10/2022
 13136                                  
 13137                                  ; here is the actual int13 handler
 13138                                  
 13139                                  i13z:					; 0070h:3ABBh =	02C7h:154Bh
 13140                                  
 13141                                  ; cas -- inefficient! could push ds and load ds-> Bios_Data before
 13142                                  ; vectoring up here from Bios_Data
 13143                                  
 13144                                  		; 19/10/2022
 13145 000014F6 1E                      		push	ds		; save caller's ds register first thing
 13146                                  		;;mov	ds, word [cs:0030h]
 13147                                  					; and set up our own ds -> Bios_Data
 13148 000014F7 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD]
 13149                                  		;mov	ds, word ptr cs:BIOSDATAWORD ; [cs:0030h]
 13150                                  					; = [02C7h:0030h] = [0070h:25A0h]
 13151                                  
 13152                                  ; let the operation proceed. if there is a dma violation, then we do things
 13153                                  
 13154 000014FC A3[1E00]                		mov	[prevoper], ax	; save request
 13155 000014FF 80FC05                  		cmp	ah, 5		; romformat
 13156 00001502 74A0                    		jz	short format_special_stuff
 13157                                  					; go do special stuff for format
 13158                                   format_special_stuff_done:		
 13159 00001504 803E[3105]00            		cmp	byte [ec35flag], 0 ; any electrically compat 3.5 inchers?
 13160 00001509 75AA                    		jnz	short ec35_special_stuff
 13161                                  					; go handle it out of line if so
 13162                                  ec35_special_stuff_done:
 13163                                  		;;call	far 70:797h ; MSDOS 6.21 IO.SYS BIOSCODE:1560h		
 13164 0000150B 9A[9707]7000            		call	DOSBIOSSEG:call_orig13
 13165                                  		;call	call_orig13	; call far KERNEL_SEGMENT:call_orig13
 13166                                  		
 13167 00001510 9C                      		pushf			; save result flags
 13168                                  		
 13169 00001511 803E[3E06]FA            		cmp	byte [model_byte], 0FAh ; is this a ps2/30?
 13170                                  					; mdl_ps2_30
 13171 00001516 74C5                    		jz	short ps2_special_stuff
 13172                                  					; exit mainline to address special
 13173                                  ps2_special_stuff_done:			; ps2/30 problem if so		
 13174 00001518 9D                      		popf
 13175 00001519 7221                    		jb	short goterr13	; error	on original orig13 call-thru?
 13176                                  ret_from_i13:				
 13177 0000151B 1F                      		pop	ds
 13178 0000151C CA0200                  		retf	2		; restore ds &	iret w/flags
 13179                                  ; ---------------------------------------------------------------------------
 13180                                  
 13181                                  ; most of our code exits through here. If carry isn't set, then
 13182                                  ; just do a simple exit. Else doublecheck that we aren't getting
 13183                                  ; a changeline error.
 13184                                  
 13185                                  i13ret_ck_chglinerr:			
 13186 0000151F 73FA                    		jnb	short ret_from_i13 ; done if not an error termination
 13187                                  i13_ret_error:				
 13188 00001521 80FC06                  		cmp	ah, 6		; did i	see a change event?
 13189 00001524 7513                    		jnz	short int13b	; skip if wrong	error
 13190 00001526 08D2                    		or	dl, dl		; is this for the hard disk?
 13191 00001528 780F                    		js	short int13b	; yes, ignore
 13192 0000152A 803E[7700]00            		cmp	byte [fhave96], 0
 13193 0000152F 7408                    		jz	short int13b	; just in case ROM returned this
 13194                                  					; error	even though it told us it
 13195                                  					; never	would
 13196 00001531 53                      		push	bx
 13197 00001532 BB4000                  		mov	bx, 40h		; fchanged
 13198 00001535 E8B203                  		call	set_changed_dl
 13199 00001538 5B                      		pop	bx
 13200                                  int13b:					
 13201 00001539 F9                      		stc			; now return the error
 13202 0000153A EBDF                    		jmp	short ret_from_i13
 13203                                  ; ---------------------------------------------------------------------------
 13204                                  
 13205                                  ; some kind of error occurred. see if it is dma violation
 13206                                  
 13207                                  goterr13:				
 13208 0000153C 80FC09                  		cmp	ah, 9		; dma error?
 13209 0000153F 747C                    		jz	short gotdmaerr
 13210                                  goterr13_xxxx:				
 13211 00001541 80FC11                  		cmp	ah, 11h		; ecc error?
 13212 00001544 75DB                    		jnz	short i13_ret_error ; other error. just	return back.
 13213 00001546 803E[3806]01            		cmp	byte [media_set_for_format], 1 ; formatting?
 13214 0000154B 74D4                    		jz	short i13_ret_error
 13215                                  
 13216 0000154D 803E[1F00]02            		cmp	byte [prevoper+1], 2
 13217                                  		;cmp	byte ptr ds:prevoper+1,	2 ; ecc-corrected error
 13218                                  					; (2 = romread)
 13219                                  					; ECC correction only applies to reads
 13220 00001552 75CD                    		jnz	short i13_ret_error
 13221                                  
 13222 00001554 30E4                    		xor	ah, ah
 13223                                  		;;call	far 70:797h ; MSDOS 6.21 IO.SYS BIOSCODE:15ABh
 13224                                  		; 17/10/2022
 13225 00001556 9A[9707]7000            		call	DOSBIOSSEG:call_orig13
 13226                                  		;call	call_orig13	; call far KERNEL_SEGMENT:call_orig13
 13227                                  					; call far 70:797h
 13228 0000155B A1[1E00]                		mov	ax, [prevoper]
 13229 0000155E 30E4                    		xor	ah, ah		; return code =	no error
 13230 00001560 3C01                    		cmp	al, 1		; if request for one sector, assume ok
 13231 00001562 74B7                    		jz	short ret_from_i13 ; return with carry clear
 13232 00001564 53                      		push	bx
 13233 00001565 51                      		push	cx
 13234 00001566 52                      		push	dx
 13235 00001567 A2[2000]                		mov	[number_of_sec], al
 13236                                  loop_ecc:				
 13237 0000156A B80102                  		mov	ax, 201h	; read one sector
 13238                                  
 13239                                  ; we do reads one sector at a time. this ensures that we will eventually
 13240                                  ; finish the request since ecc errors on one sector do read in that sector.
 13241                                  ;
 13242                                  ; we need to put in some "intelligence" into the ecc handler to handle reads
 13243                                  ; that attempt to read more sectors than are available on a particular
 13244                                  ; track.
 13245                                  ;
 13246                                  ; we call check_wrap to set up the sector #, head # and cylinder # for
 13247                                  ; this request.
 13248                                  ;
 13249                                  ; at this point, all registers are set up for the call to orig13, except
 13250                                  ; that there may be a starting sector number that is bigger than the number
 13251                                  ; of sectors on a track.
 13252                                  ;
 13253 0000156D E88DFE                  		call	check_wrap	; get correct parameters for int 13
 13254                                  		;;call	far 70:797h ; MSDOS 6.21 IO.SYS BIOSCODE:15C5h
 13255                                  		; 17/10/2022
 13256 00001570 9A[9707]7000            		call	DOSBIOSSEG:call_orig13
 13257                                  		;call	call_orig13	; call far KERNEL_SEGMENT:call_orig13
 13258 00001575 730C                    		jnb	short ok11_op
 13259 00001577 80FC09                  		cmp	ah, 9		; DMA error during ECC read?
 13260 0000157A 741B                    		jz	short handle_dma_during_ecc
 13261 0000157C 80FC11                  		cmp	ah, 11h		; only allow ecc errors
 13262 0000157F 7510                    		jnz	short ok11_exit_err
 13263                                  		; 10/12/2022
 13264                                  		; xor ax ax -> ah = 0
 13265                                  		;mov	ah, 0		; ecc error. reset the system again.
 13266 00001581 31C0                    		xor	ax, ax		; clear	the error code so that if this
 13267                                  					; was the last sector, no error	code
 13268                                  					; will be returned for the corrected
 13269                                  					; read.	(clear carry too.)
 13270                                  ok11_op:				
 13271 00001583 FE0E[2000]              		dec	byte [number_of_sec]
 13272 00001587 7409                    		jz	short ok11_exit	; all done?
 13273 00001589 FEC1                    		inc	cl		; advance sector number
 13274                                  					; add 200h to address
 13275 0000158B FEC7                    		inc	bh
 13276 0000158D FEC7                    		inc	bh
 13277 0000158F EBD9                    		jmp	short loop_ecc
 13278                                  ; ---------------------------------------------------------------------------
 13279                                  
 13280                                  ; locate error returns centrally
 13281                                  
 13282                                  ok11_exit_err:				
 13283 00001591 F9                      		stc			; set carry bit again.
 13284                                  ok11_exit:				
 13285 00001592 5A                      		pop	dx
 13286 00001593 59                      		pop	cx
 13287 00001594 5B                      		pop	bx
 13288 00001595 EB88                    		jmp	short i13ret_ck_chglinerr
 13289                                  ; ---------------------------------------------------------------------------
 13290                                  
 13291                                  ; do the single sector read again, this time into our temporary
 13292                                  ; buffer, which is guaranteed not to have a DMA error, then
 13293                                  ; move the data to its proper location and proceed
 13294                                  
 13295                                  handle_dma_during_ecc:			
 13296 00001597 06                      		push	es
 13297 00001598 53                      		push	bx
 13298 00001599 BB[4E01]                		mov	bx, disksector
 13299 0000159C 1E                      		push	ds
 13300 0000159D 07                      		pop	es		; point es:bx to buffer
 13301 0000159E B80102                  		mov	ax, 201h	; read one sector
 13302                                  		;;call	far 70:797h ; MSDOS 6.21 IO.SYS BIOSCODE:15F8h
 13303                                  		; 17/10/2022
 13304 000015A1 9A[9707]7000            		call	DOSBIOSSEG:call_orig13
 13305                                  		;call	call_orig13	; call far KERNEL_SEGMENT:call_orig13
 13306 000015A6 5B                      		pop	bx
 13307 000015A7 07                      		pop	es
 13308 000015A8 7305                    		jnb	short handle_dma_during_ecc_noerr
 13309 000015AA 80FC11                  		cmp	ah, 11h
 13310 000015AD 75E2                    		jnz	short ok11_exit_err ; if anything but ecc error, bomb out
 13311                                  
 13312                                  ; now we're kosher. Copy the data to where it belongs and resume
 13313                                  ; the ECC looping code.
 13314                                  
 13315                                  handle_dma_during_ecc_noerr:		
 13316 000015AF 56                      		push	si
 13317 000015B0 57                      		push	di
 13318 000015B1 89DF                    		mov	di, bx
 13319 000015B3 BE[4E01]                		mov	si, disksector
 13320 000015B6 E829FE                  		call	move_sector
 13321 000015B9 5F                      		pop	di
 13322 000015BA 5E                      		pop	si
 13323 000015BB EBC6                    		jmp	short ok11_op
 13324                                  ; ---------------------------------------------------------------------------
 13325                                  
 13326                                  ; we truly have a dma violation. restore register ax and retry the
 13327                                  ; operation as best we can.
 13328                                  
 13329                                  gotdmaerr:				
 13330 000015BD A1[1E00]                		mov	ax, [prevoper]	; 19/10/2022
 13331 000015C0 FB                      		sti
 13332 000015C1 80FC02                  		cmp	ah, 2		; romread
 13333 000015C4 723B                    		jb	short i13_done_dmaerr
 13334                                  					; just pass dma error thru for
 13335                                  					; functions we don't handle
 13336 000015C6 80FC04                  		cmp	ah, 4		; romverify
 13337 000015C9 743C                    		jz	short intverify
 13338 000015CB 80FC05                  		cmp	ah, 5		; romformat
 13339 000015CE 7448                    		jz	short intformat
 13340 000015D0 772F                    		ja	short i13_done_dmaerr
 13341                                  
 13342                                  ; we are doing a read/write call. check for dma problems
 13343                                  
 13344                                  ;	******** set up stack frame here!!! ********
 13345                                  
 13346 000015D2 52                      		push	dx
 13347 000015D3 51                      		push	cx
 13348 000015D4 53                      		push	bx
 13349 000015D5 50                      		push	ax
 13350 000015D6 55                      		push	bp
 13351 000015D7 89E5                    		mov	bp, sp
 13352 000015D9 8CC2                    		mov	dx, es		; check	for 64k	boundary error
 13353 000015DB D1E2                    		shl	dx, 1
 13354 000015DD D1E2                    		shl	dx, 1
 13355 000015DF D1E2                    		shl	dx, 1
 13356 000015E1 D1E2                    		shl	dx, 1		; segment converted to absolute	address
 13357 000015E3 01DA                    		add	dx, bx		; combine with offset
 13358 000015E5 81C2FF01                		add	dx, 511		; simulate a transfer
 13359                                  
 13360                                  ; if carry is set, then we are within 512 bytes of the end of the segment.
 13361                                  ; we skip the first transfer and perform the remaining buffering and transfer
 13362                                  
 13363 000015E9 7303                    		jnb	short no_skip_first
 13364 000015EB E98300                  		jmp	bufferx		; restore dh=head & do buffer
 13365                                  ; ---------------------------------------------------------------------------
 13366                                  
 13367                                  no_skip_first:				
 13368 000015EE D0EE                    		shr	dh, 1		; dh = number of sectors before	address
 13369 000015F0 B480                    		mov	ah, 128		; ah = max number of sectors in	segment
 13370 000015F2 28F4                    		sub	ah, dh
 13371                                  
 13372                                  ; ah is now the number of sectors that we can successfully write in this
 13373                                  ; segment. if this number is above or equal to the requested number, then we
 13374                                  ; continue the operation as normal. otherwise, we break it into pieces.
 13375                                  ;
 13376                                  ; wait a sec. this is goofy. the whole reason we got here in the
 13377                                  ; first place is because we got a dma error. so it's impossible
 13378                                  ; for the whole block to fit, unless the dma error was returned
 13379                                  ; in error.
 13380                                  
 13381 000015F4 38C4                    		cmp	ah, al		; can we fit it	in?
 13382 000015F6 7236                    		jb	short doblock	; no, perform blocking.
 13383                                  
 13384                                  ; yes, the request fits. let it happen.
 13385                                  
 13386 000015F8 8A7609                  		mov	dh, [bp+9]	; [bp+INT13FRAME.olddx+1]
 13387                                  					; set up head number
 13388 000015FB E888FE                  		call	doint
 13389 000015FE E9D900                  		jmp	bad13		; and return from this place
 13390                                  ; ---------------------------------------------------------------------------
 13391                                  
 13392                                  i13_done_dmaerr:			
 13393 00001601 B409                    		mov	ah, 9		; pass dma error thru to caller
 13394 00001603 F9                      		stc
 13395 00001604 E914FF                  		jmp	ret_from_i13	; return with error,
 13396                                  					; we know it's not a changeline error
 13397                                  ; ---------------------------------------------------------------------------
 13398                                  
 13399                                  ; verify the given sectors. place the buffer pointer into our space.
 13400                                  
 13401                                  intverify:				
 13402 00001607 06                      		push	es		; save caller's dma address
 13403 00001608 53                      		push	bx
 13404 00001609 1E                      		push	ds		; es:bx	-> Bios_Data:disksector
 13405 0000160A 07                      		pop	es
 13406                                  dosimple:				
 13407 0000160B BB[4E01]                		mov	bx, disksector
 13408                                  					; do the i/o from Bios_Data:disksector
 13409                                  		;;call	far 70:797h ; MSDOS 6.21 IO.SYS BIOSCODE:1665h
 13410                                  		; 17/10/2022
 13411 0000160E 9A[9707]7000            		call	DOSBIOSSEG:call_orig13
 13412                                  		;call	call_orig13	; call far KERNEL_SEGMENT:call_orig13
 13413 00001613 5B                      		pop	bx
 13414 00001614 07                      		pop	es
 13415 00001615 E907FF                  		jmp	i13ret_ck_chglinerr
 13416                                  ; ---------------------------------------------------------------------------
 13417                                  
 13418                                  ; format operation. copy the parameter table into Bios_Data:disksector
 13419                                  
 13420                                  intformat:				
 13421 00001618 06                      		push	es
 13422 00001619 53                      		push	bx
 13423 0000161A 56                      		push	si
 13424 0000161B 57                      		push	di
 13425 0000161C 1E                      		push	ds
 13426                                  
 13427                                  ; point ds to the caller's dma buffer, es to Bios_Data
 13428                                  ; in other words, swap (ds, es)
 13429                                  
 13430 0000161D 06                      		push	es
 13431 0000161E 1E                      		push	ds
 13432 0000161F 07                      		pop	es
 13433 00001620 1F                      		pop	ds
 13434 00001621 89DE                    		mov	si, bx
 13435 00001623 BF[4E01]                		mov	di, disksector
 13436 00001626 E8B9FD                  		call	move_sector	; user's data into Bios_Data:disksector
 13437 00001629 1F                      		pop	ds
 13438 0000162A 5F                      		pop	di
 13439 0000162B 5E                      		pop	si		; do the i/o from
 13440 0000162C EBDD                    		jmp	short dosimple	; Bios_Data:disksector
 13441                                  ; ---------------------------------------------------------------------------
 13442                                  
 13443                                  ; we can't fit the request into the entire block. perform the operation on
 13444                                  ; the first block.
 13445                                  ;
 13446                                  ; doblock is modified to correctly handle multi-sector disk i/o.
 13447                                  ; old doblock had added the number of sectors i/oed (ah in old doblock) after
 13448                                  ; the doint call to cl. observing only the lower 6 bits of cl(=max. 64) can
 13449                                  ; represent a starting sector, if ah was big, then cl would be clobbered.
 13450                                  ; by the way, we still are going to use cl for this purpose since checkwrap
 13451                                  ; routine will use it as an input. to prevent cl from being clobbered, a
 13452                                  ; safe number of sectors should be calculated like "63 - # of sectors/track".
 13453                                  ; doblock will handle the first block of requested sectors within the
 13454                                  ; boundary of this safe value.
 13455                                  
 13456                                  doblock:
 13457                                  
 13458                                  ; try to get the # of sectors/track from bds via rom drive number.
 13459                                  ; for any mini disks installed, here we have to pray that they have the
 13460                                  ; same # of sector/track as the main dos partition disk drive.
 13461                                  				
 13462 0000162E 8B5608                  		mov	dx, [bp+8]	; [bp+INT13FRAME.olddx]
 13463                                  					; get head #, drive #
 13464 00001631 51                      		push	cx
 13465 00001632 06                      		push	es
 13466 00001633 57                      		push	di		; ah - # of sectors before dma boundary
 13467                                  					; al - requested # of sectors for i/o.
 13468 00001634 E83BFE                  		call	find_bds
 13469 00001637 268B4D13                		mov	cx, [es:di+13h]	; [es:di+BDS.secpertrack]
 13470                                  		; 12/12/2022
 13471 0000163B 26F6452301              		test	byte [es:di+23h], 1
 13472                                  		;test	word [es:di+23h], 1 ; [es:di+BDS.flags],fnon_removable
 13473 00001640 5F                      		pop	di
 13474 00001641 07                      		pop	es
 13475 00001642 88E0                    		mov	al, ah		; set al=ah for	floppies
 13476 00001644 7404                    		jz	short doblockflop ; they are track by track operation
 13477 00001646 B43F                    		mov	ah, 63		; ah = 63-secpt	(# safe	sectors??)
 13478 00001648 28CC                    		sub	ah, cl		; al - # of sectors before dma boundary
 13479                                  doblockflop:				
 13480 0000164A 59                      		pop	cx
 13481                                  doblockcontinue:			
 13482 0000164B 38C4                    		cmp	ah, al		; if safe_# >= #_of_sectors_to_go_before dma,
 13483 0000164D 7305                    		jnb	short doblocklast ; then #_of_sectors_to_go as it is for doint.
 13484 0000164F 50                      		push	ax
 13485 00001650 88E0                    		mov	al, ah		; otherwise, set al to ah to operate.
 13486 00001652 EB03                    		jmp	short doblockdoint
 13487                                  ; ---------------------------------------------------------------------------
 13488                                  
 13489                                  doblocklast:				
 13490 00001654 88C4                    		mov	ah, al
 13491 00001656 50                      		push	ax
 13492                                  doblockdoint:				; let ah = al =	# of sectors for this shot	
 13493 00001657 E82CFE                  		call	doint
 13494 0000165A 727E                    		jb	short bad13	; something happened, bye!
 13495 0000165C 58                      		pop	ax
 13496 0000165D 286602                  		sub	[bp+2],	ah	; sub [bp+INT13FRAME.oldax], ah
 13497                                  					; decrement by the successful operation
 13498 00001660 00E1                    		add	cl, ah		; advance sector #. safety gauranteed.
 13499 00001662 00E7                    		add	bh, ah		; advance dma addres
 13500 00001664 00E7                    		add	bh, ah		; twice	for 512	byte sectors
 13501 00001666 38C4                    		cmp	ah, al		; check	the previous value
 13502 00001668 740A                    		jz	short buffer	; if #_of_sectors_to_go	< safe_#,
 13503                                  					; then we are done already.
 13504 0000166A 28E0                    		sub	al, ah		; otherwise,
 13505                                  					; #_sector_to_go = #_of_sector_to_go - safe_#
 13506 0000166C E88EFD                  		call	check_wrap	; get new cx, dh for the next operation.
 13507 0000166F EBDA                    		jmp	short doblockcontinue ;	handles	next sectors left.
 13508                                  ; ---------------------------------------------------------------------------
 13509                                  
 13510                                  bufferx:				
 13511 00001671 8A7609                  		mov	dh, [bp+9]	; [bp+INT13FRAME.olddx+1]
 13512                                  					; set up head number
 13513                                  buffer:					
 13514 00001674 53                      		push	bx
 13515 00001675 8A6603                  		mov	ah, [bp+3]	; [bp+INT13FRAME.oldax+1]
 13516 00001678 80FC03                  		cmp	ah, 3		; romwrite
 13517 0000167B 7525                    		jnz	short doread	;
 13518                                  					
 13519                                  ; copy the offending sector into local buffer
 13520                                  
 13521 0000167D 06                      		push	es
 13522 0000167E 1E                      		push	ds
 13523 0000167F 56                      		push	si
 13524 00001680 57                      		push	di
 13525 00001681 1E                      		push	ds		; exchange segment registers
 13526 00001682 06                      		push	es
 13527 00001683 1F                      		pop	ds
 13528 00001684 07                      		pop	es
 13529 00001685 BF[4E01]                		mov	di, disksector	; where to move
 13530 00001688 57                      		push	di		; save it
 13531 00001689 89DE                    		mov	si, bx		; source
 13532 0000168B E854FD                  		call	move_sector	; move sector into local buffer
 13533 0000168E 5B                      		pop	bx		; new transfer address
 13534                                  					; (es:bx = Bios_Data:diskbuffer)
 13535 0000168F 5F                      		pop	di		; restore caller's di & si
 13536 00001690 5E                      		pop	si
 13537 00001691 1F                      		pop	ds		; restore Bios_Data
 13538                                  
 13539                                  ; see if we are wrapping around a track or head
 13540                                  
 13541 00001692 B001                    		mov	al, 1		; [bp+INT13FRAME.olddx]
 13542                                  					; get drive number
 13543 00001694 8A5608                  		mov	dl, [bp+8]
 13544 00001697 E863FD                  		call	check_wrap	; sets up registers if wrap-around
 13545                                  					;
 13546                                  					; ah is	function
 13547                                  					; al is	1 for single sector transfer
 13548                                  					; es:bx	is local transfer addres
 13549                                  					; cx is	track/sector number
 13550                                  					; dx is	head/drive number
 13551                                  					; si,di	unchanged
 13552 0000169A E8E9FD                  		call	doint
 13553 0000169D 07                      		pop	es		; restore caller's dma segment
 13554 0000169E 723A                    		jb	short bad13	; go clean up
 13555 000016A0 EB22                    		jmp	short dotail
 13556                                  ; ---------------------------------------------------------------------------
 13557                                  
 13558                                  ; reading a sector. do int first, then move things around
 13559                                  
 13560                                  doread:					
 13561 000016A2 06                      		push	es
 13562 000016A3 53                      		push	bx
 13563 000016A4 1E                      		push	ds		; es = Bios_Code
 13564 000016A5 07                      		pop	es
 13565 000016A6 BB[4E01]                		mov	bx, disksector
 13566 000016A9 B001                    		mov	al, 1
 13567 000016AB 8A5608                  		mov	dl, [bp+8]	; [bp+INT13FRAME.olddx]
 13568                                  					; get drive number
 13569 000016AE E84CFD                  		call	check_wrap	;
 13570                                  					; ah = function
 13571                                  					; al = 1 for single sector
 13572                                  					; es:bx	points to local	buffer
 13573                                  					; cx, dx are track/sector, head/drive
 13574 000016B1 E8D2FD                  		call	doint
 13575 000016B4 5B                      		pop	bx
 13576 000016B5 07                      		pop	es
 13577 000016B6 7222                    		jb	short bad13
 13578 000016B8 56                      		push	si
 13579 000016B9 57                      		push	di
 13580 000016BA 89DF                    		mov	di, bx
 13581 000016BC BE[4E01]                		mov	si, disksector
 13582 000016BF E820FD                  		call	move_sector
 13583 000016C2 5F                      		pop	di
 13584 000016C3 5E                      		pop	si
 13585                                  
 13586                                  ; note the fact that we've done 1 more sector
 13587                                  
 13588                                  dotail:					
 13589 000016C4 5B                      		pop	bx		; retrieve new dma area
 13590 000016C5 80C702                  		add	bh, 2		; advance over sector
 13591 000016C8 41                      		inc	cx
 13592 000016C9 8A4602                  		mov	al, [bp+2]	; [bp+INT13FRAME.oldax]
 13593 000016CC F8                      		clc
 13594 000016CD FEC8                    		dec	al
 13595 000016CF 7409                    		jz	short bad13	; no more i/o
 13596                                  
 13597                                  ; see if we wrap around a track or head boundary with starting sector
 13598                                  ; we already have the correct head number to pass to check_wrap
 13599                                  
 13600 000016D1 8A5608                  		mov	dl, [bp+8]	; [bp+INT13FRAME.olddx]
 13601 000016D4 E826FD                  		call	check_wrap
 13602 000016D7 E8ACFD                  		call	doint
 13603                                  
 13604                                  ; we are done. ax has the final code; we throw away what we got before
 13605                                  
 13606                                  ; M046  -- okay gang. Now we've either terminated our DMA loop,
 13607                                  ;	   or we've finished. If carry is set now, our only
 13608                                  ;	   hope for salvation is that it was a read operation
 13609                                  ;	   and the error code is ECC error. In that case, we'll
 13610                                  ;	   just pop the registers and go do the old ECC thing.
 13611                                  ;	   When the DMA error that got us here in the first
 13612                                  ;	   place occurs, it'll handle it.
 13613                                  
 13614                                  bad13:					
 13615 000016DA 89EC                    		mov	sp, bp
 13616 000016DC 5D                      		pop	bp
 13617 000016DD 5B                      		pop	bx
 13618 000016DE 5B                      		pop	bx
 13619 000016DF 59                      		pop	cx
 13620 000016E0 5A                      		pop	dx
 13621 000016E1 7203                    		jb	short xgoterr13_xxxx ; go handle ECC errors
 13622 000016E3 E935FE                  		jmp	ret_from_i13	; non-error exit
 13623                                  ; ---------------------------------------------------------------------------
 13624                                  
 13625                                  xgoterr13_xxxx:				
 13626 000016E6 E958FE                  		jmp	goterr13_xxxx
 13627                                  
 13628                                  ; ---------------------------------------------------------------------------
 13629                                  		; 10/12/2022
 13630                                  		;db 	0
 13631                                  ; ---------------------------------------------------------------------------
 13632                                  
 13633                                  ;Bios_Code ends
 13634                                  
 13635                                  ; 16/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 13636                                  
 13637                                  ;-----------------------------------------------------------------------------
 13638                                  ; MSBIO2.ASM - MSDOS 6.0 - 1991
 13639                                  ;-----------------------------------------------------------------------------
 13640                                  ; 17/03/2019 - Retro DOS v4.0
 13641                                  
 13642                                  		; 19/10/2022
 13643                                  dsk_init:				; 2C7h:1742h = 70h:3CB2h
 13644 000016E9 8A26[7500]              		mov	ah, [drvmax]
 13645 000016ED BF[8706]                		mov	di, dskdrvs
 13646 000016F0 1E                      		push	ds		; pass result in es:di
 13647 000016F1 07                      		pop	es
 13648 000016F2 E9C3EE                  		jmp	SetPtrSav
 13649                                  
 13650                                  ; =============== S U B	R O U T	I N E =======================================
 13651                                  
 13652                                  ;---------------------------------------------------------------------------
 13653                                  ; install_bds installs a bds at location es:di into the current linked list of
 13654                                  ; bds maintained by this device driver. it places the bds at the end of the
 13655                                  ; list. Trashes (at least) ax, bx, di, si
 13656                                  ;---------------------------------------------------------------------------
 13657                                  
 13658                                  install_bds:		
 13659 000016F5 1E                      		push	ds		; save Bios_Data segment
 13660 000016F6 BE[1901]                		mov	si, start_bds	; beginning of chain
 13661                                  
 13662                                  		; ds:si now points to link to first bds
 13663                                  		; assume bds list is non-empty
 13664                                  loop_next_bds:				
 13665 000016F9 C534                    		lds	si, [si]	; [si+BDS.link]
 13666                                  					; fetch	next bds
 13667 000016FB 268A4504                		mov	al, [es:di+4]	; [es:di+BDS.drivenum]
 13668 000016FF 384404                  		cmp	[si+4],	al	; does this one	share a	physical
 13669                                  					; drive	with new one?
 13670 00001702 7518                    		jnz	short next_bds
 13671 00001704 B310                    		mov	bl, 10h		; fi_am_mult
 13672 00001706 26085D23                		or	[es:di+23h], bl	; [es:di+BDS.flags]
 13673                                  					; set both of them to i_am_mult	if so
 13674 0000170A 085C23                  		or	[si+23h], bl	; [si+BDS.flags]
 13675 0000170D 26806523DF              		and	byte [es:di+23h], 0DFh ; [es:di+BDS.flags],~fi_own_physical
 13676                                  					; we don't own it
 13677 00001712 8A5C23                  		mov	bl, [si+23h]	; [si+BDS.flags]
 13678                                  					; determine if changeline available
 13679 00001715 80E302                  		and	bl, 2		; fchangeline
 13680 00001718 26085D23                		or	[es:di+23h], bl	; [es:di+BDS.flags]
 13681                                  next_bds:				
 13682 0000171C 833CFF                  		cmp	word [si], 0FFFFh ; [si+BDS.link],-1
 13683                                  					; are we at end	of list?
 13684 0000171F 75D8                    		jnz	short loop_next_bds
 13685 00001721 8C4402                  		mov	word [si+2], es ; [si+BDS.link+2],es
 13686                                  					; install bds
 13687 00001724 893C                    		mov	[si], di
 13688 00001726 26C705FFFF              		mov	word [es:di], 0FFFFh ; [es:di+BDS.link],-1
 13689                                  					; set next pointer to null
 13690 0000172B 1F                      		pop	ds
 13691                                  
 13692                                  ; 16/10/2022 (MSDOS 6.0 Code)
 13693                                  ;
 13694                                  ; **** If the new drive has a higher EOT value, we must alter the
 13695                                  ;      'eot' variable appropriately.
 13696                                  ;
 13697                                  ;		; 01/06/2019
 13698                                  ;		;mov	al,[es:di+52]
 13699                                  ;		mov	al,[es:di+BDS.rsecpertrack]
 13700                                  ;
 13701                                  ;		cmp	al,[eot]
 13702                                  ;		jbe	short _eot_ok
 13703                                  ;		mov	[eot],al
 13704                                  
 13705 0000172C C3                      		retn
 13706                                  
 13707                                  ; ---------------------------------------------------------------------------
 13708                                  
 13709                                  ; 17/10/2022
 13710                                  ;DRVLET	equ drvlet - DOSBIOSEG_2C7h
 13711                                  ;SNGMSG	equ sngmsg - DOSBIOSEG_2C7h	
 13712                                  ; 09/12/2022
 13713                                  DRVLET equ drvlet
 13714                                  SNGMSG equ sngmsg
 13715                                  
 13716                                  ; 16/10/2022
 13717                                  
 13718                                  ;---------------------------------------------------------------------------
 13719                                  ;  ask to swap the disk in drive a:
 13720                                  ;	es:di -> bds
 13721                                  ;	ds -> Bios_Data
 13722                                  ;---------------------------------------------------------------------------
 13723                                  
 13724                                  		; 19/10/2022
 13725 0000172D F606[CE08]01            swpdsk:		test	byte [IsWin386], 1			
 13726                                  		;test	ds:IsWin386, 1	; Is win386 present?
 13727 00001732 7405                    		jz	short no_win386	; no, skip SetFocus
 13728                                  		
 13729                                  		; set focus to the correct VM
 13730                                  		;;call	far 70h:8D1h	; MSDOS 6.21 IO.SYS BIOSCODE:179Ah
 13731                                  		; 17/10/2022
 13732 00001734 9A[CF08]7000            		call	DOSBIOSSEG:V86_Crit_SetFocus
 13733                                  		;call	far ptr	V86_Crit_SetFocus ; call far 70h:8D1h
 13734                                  					; call far KERNEL_SEGMENT:V86_Crit_SetFocus
 13735                                  no_win386:				
 13736 00001739 51                      		push	cx
 13737 0000173A 52                      		push	dx
 13738 0000173B 268A5505                		mov	dl, [es:di+5]	; [es:di+BDS.drivelet]
 13739                                  					; get the drive	letter
 13740                                  
 13741                                  ; WARNING : next two instructions assume that if the new disk is for drive B
 13742                                  ;           then existing dsk is drive A & vice versa
 13743                                  
 13744 0000173F 88D6                    		mov	dh, dl
 13745 00001741 80F601                  		xor	dh, 1
 13746 00001744 29C9                    		sub	cx, cx		; nobody has handled swap disk
 13747 00001746 B8004A                  		mov	ax, 4A00h	; multMULT<<8)|multMULTSWPDSK
 13748                                  					; broad	cast code for swap disk
 13749                                  					; Broadcast it
 13750 00001749 CD2F                    		int	2Fh	
 13751 0000174B 41                      		inc	cx		; cx == -1 ?
 13752 0000174C 741E                    		jz	short swpdsk9	; somebody has handled it
 13753                                  
 13754                                  ; using a different drive in a one drive system so request the user change disks
 13755                                  
 13756 0000174E 80C241                  		add	dl, 'A'
 13757                                  		; 17/10/2022
 13758 00001751 2E8816[8B17]            		mov	[cs:DRVLET], dl
 13759                                  		; 16/10/2022
 13760                                  		;;mov	byte [cs:drvlet], dl
 13761                                  		;mov	byte ptr cs:17E4h, dl ; [cs:drvlet]
 13762                                  					; 0070h:3D54h =	2C7h:17E4h
 13763 00001756 BE[6F17]                		mov	si, SNGMSG
 13764                                  		;mov	si, 17C8h	; sngmsg
 13765                                  					; 0070h:3D38h =	2C7h:17C8h
 13766 00001759 53                      		push	bx
 13767 0000175A 2E                      		cs
 13768 0000175B AC                      		lodsb			; get the next character of the message
 13769                                  		;lods	byte ptr cs:[si]
 13770                                  wrmsg_loop:				
 13771 0000175C CD29                    		int	29h		; DOS 2+ internal - FAST PUTCHAR
 13772                                  					; AL = character to display
 13773 0000175E 2E                      		cs
 13774 0000175F AC                      		lodsb
 13775                                  		;lods	byte ptr cs:[si] ; cs lodsb
 13776                                  					; get the next character of the	message
 13777 00001760 08C0                    		or	al, al
 13778 00001762 75F8                    		jnz	short wrmsg_loop
 13779 00001764 E8A0EA                  		call	con_flush	; flush out keyboard queue
 13780                                  					; call rom-bios
 13781 00001767 30E4                    		xor	ah, ah
 13782 00001769 CD16                    		int	16h		; KEYBOARD - READ CHAR FROM BUFFER, WAIT IF EMPTY
 13783                                  					; Return: AH = scan code, AL = character
 13784 0000176B 5B                      		pop	bx
 13785                                  swpdsk9:				
 13786 0000176C 5A                      		pop	dx
 13787 0000176D 59                      		pop	cx
 13788 0000176E C3                      		retn
 13789                                  
 13790                                  ; ---------------------------------------------------------------------------
 13791                                  
 13792                                  ; 16/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 13793                                  
 13794                                  ;--------------------------------------------------------
 13795                                  ; include msbio.cl2 (MSDOS 6.0, 1991)
 13796                                  ;--------------------------------------------------------
 13797                                  ; (MSDOS 6.21 IO.SYS BIOSCODE:17D5h)
 13798                                  ;--------------------------------------------------------
 13799                                  ; 17/03/2019 - Retro DOS v4.0
 13800                                  
 13801                                  		; MSDOS 5.0 IO.SYS offset 0070h:3D38h or 02C7h:17C8h
 13802 0000176F 0D0A                    sngmsg:		db 0Dh,0Ah
 13803 00001771 496E73657274206469-     		db 'Insert diskette for drive '
 13803 0000177A 736B6574746520666F-
 13803 00001783 7220647269766520   
 13804                                  
 13805                                  		; MSDOS 5.0 IO.SYS offset 0070h:3D54h or 02C7h:17E4h
 13806 0000178B 413A20616E64207072-     drvlet:		db 'A: and press any key when ready',0Dh,0Ah
 13806 00001794 65737320616E79206B-
 13806 0000179D 6579207768656E2072-
 13806 000017A6 656164790D0A       
 13807 000017AC 0A00                    		db 0Ah,0
 13808                                  
 13809                                  ; =============== S U B	R O U T	I N E =======================================
 13810                                  
 13811                                  ;---------------------------------------------------------------------------
 13812                                  ; input : es:di points to current bds for drive.
 13813                                  ; return : zero set if no open files
 13814                                  ;	   zero reset if open files
 13815                                  ;---------------------------------------------------------------------------
 13816                                  
 13817                                  chkopcnt:		
 13818 000017AE 26837D2000              		cmp	word [es:di+20h], 0 ; [es:di+BDS.opcnt]
 13819 000017B3 C3                      		retn
 13820                                  
 13821                                  ; =============== S U B	R O U T	I N E =======================================
 13822                                  
 13823                                  ;---------------------------------------------------------------------------
 13824                                  ; at media check time, we need to really get down and check what the change is.
 13825                                  ; this is guaranteed to be expensive.
 13826                                  ;
 13827                                  ;	es:di -> bds, ds -> Bios_Data
 13828                                  ;---------------------------------------------------------------------------
 13829                                  
 13830                                  mediacheck:	
 13831 000017B4 E885F0                  		call	checksingle	; make sure correct disk is in place
 13832 000017B7 31F6                    		xor	si, si
 13833 000017B9 E85501                  		call	haschange
 13834 000017BC 742F                    		jz	short mediaret
 13835 000017BE E84401                  		call	checkromchange
 13836 000017C1 752B                    		jnz	short mediadovolid
 13837 000017C3 50                      		push	ax
 13838 000017C4 52                      		push	dx
 13839 000017C5 268A5504                		mov	dl, [es:di+4]	; [es:di+BDS.drivenum]
 13840                                  					; set logical drive number
 13841 000017C9 B416                    		mov	ah, 16h
 13842 000017CB CD13                    		int	13h		; DISK - FLOPPY	DISK - CHANGE OF DISK STATUS (AT,XT2,XT286,CONV,PS)
 13843                                  					; DL = drive to	check
 13844                                  					; Return: AH = disk change status
 13845 000017CD 5A                      		pop	dx
 13846 000017CE 58                      		pop	ax
 13847 000017CF 721D                    		jb	short mediadovolid
 13848 000017D1 BE0100                  		mov	si, 1		; signal no change
 13849                                  
 13850                                  ; there are some drives with changeline that "lose" the changeline indication
 13851                                  ; if a different drive is accessed after the current one. in order to avoid
 13852                                  ; missing a media change, we return an "i don't know" to dos if the changeline
 13853                                  ; is not active and we are accessing a different drive from the last one.
 13854                                  ; if we are accessing the same drive, then we can safely rely on the changeline
 13855                                  ; status.
 13856                                  		; 19/10/2022
 13857 000017D4 8A1E[1E01]              		mov	bl, [tim_drv]	; get last drive accessed
 13858 000017D8 26385D04                		cmp	[es:di+4], bl	; [es:di+BDS.drivenum]
 13859                                  					; (If the last drive accessed is not current drive
 13860                                  					; media	change status may be incorrect.	So,
 13861                                  					; "I don't now" will be returned even if it is indicated
 13862                                  					; as media is not changed.)
 13863 000017DC 740F                    		jz	short mediaret	; (same	drive,
 13864                                  					; media	changeline indication is reliable)
 13865                                  
 13866                                  ; do the 2 second twiddle. if time >= 2 seconds, do a volid check.
 13867                                  ; otherwise return "i don't know" (strictly speaking, we should return a
 13868                                  ; "not changed" here since the 2 second test said no change.)
 13869                                  
 13870 000017DE 50                      		push	ax
 13871 000017DF 51                      		push	cx
 13872 000017E0 52                      		push	dx
 13873 000017E1 E86FED                  		call	Check_Time_Of_Access
 13874 000017E4 5A                      		pop	dx
 13875 000017E5 59                      		pop	cx
 13876 000017E6 58                      		pop	ax
 13877 000017E7 09F6                    		or	si, si
 13878 000017E9 7403                    		jz	short mediadovolid ; check_time	says ">= 2 secs	passed"
 13879                                  					; (volume id will be checked)
 13880 000017EB 31F6                    		xor	si, si		; return "i don't know"
 13881                                  mediaret:				
 13882 000017ED C3                      		retn
 13883                                  ; ---------------------------------------------------------------------------
 13884                                  
 13885                                  ; somehow the media was changed. look at vid to see. we do not look at fat
 13886                                  ; because this may be different since we only set medbyt when doing a read
 13887                                  ; or write.
 13888                                  
 13889                                  mediadovolid:				
 13890 000017EE E807EE                  		call	GetBp		; build	a new bpb in current bds
 13891 000017F1 72FA                    		jb	short mediaret
 13892 000017F3 E82D00                  		call	check_vid
 13893 000017F6 73F5                    		jnb	short mediaret
 13894 000017F8 E9D6F3                  		jmp	maperror	; fix up al for	return to dos
 13895                                  ; ---------------------------------------------------------------------------
 13896                                  
 13897                                  ; simple, quick check of latched change. if no indication, then return
 13898                                  ; otherwise do expensive check. if the expensive test fails, pop off the
 13899                                  ; return and set al = 15 (for invalid media change) which will be returned to
 13900                                  ; dos.
 13901                                  ;
 13902                                  ; for dos 3.3, this will work only for the drive that has changeline.
 13903                                  
 13904                                  ;	call with es:di -> bds, ds -> Bios_Data
 13905                                  ;	***** warning:  this routine will return one level up on the stack
 13906                                  ;			if an error occurs!
 13907                                  
 13908                                  checklatchio:	
 13909                                  
 13910                                  ; if returning fake bpb then assume the disk has not changed
 13911                                  			
 13912 000017FB E8B0FF                  		call	chkopcnt
 13913 000017FE 741B                    		jz	short checkret	; done if zero
 13914                                  
 13915                                  ; check for past rom indications. if no rom change indicated, then return ok.
 13916                                  
 13917 00001800 E80201                  		call	checkromchange
 13918 00001803 7416                    		jz	short checkret
 13919                                  
 13920                                  ; we now see that a change line has been seen in the past. let's do the
 13921                                  ; expensive verification.
 13922                                  
 13923 00001805 E8F0ED                  		call	GetBp		; build	bpb in current bds
 13924 00001808 720F                    		jb	short ret_no_error_map ; getbp has already called maperror
 13925 0000180A E81600                  		call	check_vid
 13926 0000180D 7207                    		jb	short checklatchret ; disk error trying	to read	in.
 13927 0000180F 09F6                    		or	si, si		; is changed for sure?
 13928 00001811 7908                    		jns	short checkret
 13929 00001813 E87D00                  		call	returnvid
 13930                                  checklatchret:				
 13931 00001816 E8B8F3                  		call	maperror	; fix up al for	return to dos
 13932                                  ret_no_error_map:			
 13933 00001819 F9                      		stc
 13934 0000181A 5E                      		pop	si		; pop off return address
 13935                                  checkret:				
 13936 0000181B C3                      		retn
 13937                                  ; ---------------------------------------------------------------------------
 13938                                  
 13939                                  ; check the fat and the vid. return in di -1 or 0. return with carry set
 13940                                  ; only if there was a disk error. return that error code in ax.
 13941                                  ;
 13942                                  ;	called with es:di -> bds, ds -> Bios_Data
 13943                                  
 13944                                  checkfatvid:				
 13945 0000181C E8CD01                  		call	fat_check	; check	the fat	and the	vid
 13946 0000181F 09F6                    		or	si, si
 13947 00001821 7827                    		js	short changed_drv ;
 13948                                  
 13949                                  ; the fat was the same. fall into check_vid and check volume id.
 13950                                  
 13951                                  		; fall into check_vid
 13952                                  
 13953                                  ; =============== S U B	R O U T	I N E =======================================
 13954                                  
 13955                                  ; now with the extended boot record, the logic should be enhanced.
 13956                                  ;
 13957                                  ; if it is the extended boot record, then we check the volume serial
 13958                                  ; number instead of volume id. if it is different, then set si to -1.
 13959                                  ;
 13960                                  ; if it is same, then si= 1 (no change).
 13961                                  ;
 13962                                  ; if it is not the extended boot record, then just follows the old
 13963                                  ; logic. dos 4.00 will check if the # of fat in the boot record bpb
 13964                                  ; is not 0.  if it is 0 then it must be non_fat based system and
 13965                                  ; should have already covered by extended boot structure checking.
 13966                                  ; so, we will return "i don't know" by setting si to 0.
 13967                                  ;
 13968                                  ; this routine assume the newest valid boot record is in cs:[disksector].
 13969                                  ; (this will be gauranteed by a successful getbp call right before this
 13970                                  ; routine.)
 13971                                  ;
 13972                                  ;	called with es:di -> bds, ds -> bds
 13973                                  
 13974                                  		; 19/10/2022
 13975                                  check_vid:
 13976                                  
 13977                                  ; check the disksector.EXT_BOOT_SIG variable for the extended
 13978                                  ; boot signature. if it is set then go to do the extended
 13979                                  ; id check otherwise continue with code below
 13980                                  
 13981 00001823 803E[7401]29            		cmp	byte [disksector+26h], 29h
 13982                                  					; [disksector+EXT_BOOT.SIG],
 13983                                  					; EXT_BOOT_SIGNATURE
 13984 00001828 7427                    		jz	short do_ext_check_id
 13985 0000182A E8E400                  		call	haschange
 13986 0000182D 74EC                    		jz	short checkret
 13987 0000182F 31F6                    		xor	si, si
 13988 00001831 803E[5E01]00            		cmp	byte [disksector+10h], 0 
 13989                                  					; [disksector+EXT_BOOT.BPB+EBPB.NUMBEROFFATS]
 13990 00001836 7411                    		jz	short checkfatret ; don't read vol id
 13991                                  					; if not fat system
 13992 00001838 E8F600                  		call	read_volume_id
 13993 0000183B 720C                    		jb	short checkfatret
 13994 0000183D E89B01                  		call	check_volume_id
 13995 00001840 BEFFFF                  		mov	si, 0FFFFh	; -1
 13996                                  					; definitely changed
 13997 00001843 7505                    		jnz	short changed_drv
 13998                                  
 13999 00001845 46                      		inc	si		; not changed
 14000                                  vid_no_changed:				
 14001 00001846 E8C200                  		call	resetchanged
 14002                                  		; 12/12/2022
 14003                                  		; cf=0 ('and' instruction in 'resetchanged' clears cf) 
 14004                                  		;clc
 14005                                  checkfatret:				
 14006 00001849 C3                      		retn
 14007                                  ; ---------------------------------------------------------------------------
 14008                                  
 14009                                  		; 12/12/2022
 14010                                  changed_drv:
 14011 0000184A F8                      		clc			; cas -- return	no error
 14012 0000184B C606[1E01]FF            		mov	byte  [tim_drv], 0FFh 
 14013                                  					; ensure that we ask rom for media
 14014 00001850 C3                      		retn			; check	next time round
 14015                                  ; ---------------------------------------------------------------------------
 14016                                  
 14017                                  ; extended id check
 14018                                  
 14019                                  ; 16/10/2022
 14020                                  
 14021                                  ; the code to check extended id is basically a check to see if the
 14022                                  ; volume serial number is still the same. the volume serial number
 14023                                  ; previously read is in cs:disksector.EXT_BOOT_SERIAL
 14024                                  ; ds:di points to the bds of the drive under consideration.
 14025                                  ; the bds has fields containing the high and low words 
 14026                                  ; of the volume serial number of the media in the drive.
 14027                                  ; compare these fields to the fields mentioned above. if these fields
 14028                                  ; do not match the media has changed and so we should jump to the code
 14029                                  ; starting at ext_changed else return "i don't know" status
 14030                                  ; in the register used for the changeline status and continue executing
 14031                                  ; the code given below. for temporary storage use the register which
 14032                                  ; has been saved and restored around this block.
 14033                                  ;
 14034                                  ; bds fields in inc\msbds.inc
 14035                                  
 14036                                  		; 19/10/2022
 14037                                  do_ext_check_id:			
 14038 00001851 50                      		push	ax
 14039                                  		;mov	ax, word ptr ds:disksector+27h
 14040                                  					; [DiskSector+EXT_BOOT.SERIAL]
 14041 00001852 A1[7501]                		mov	ax, [disksector+27h]
 14042 00001855 263B4557                		cmp	ax, [es:di+57h]	; [di+BDS.vol_serial]
 14043 00001859 750E                    		jnz	short ext_changed
 14044 0000185B A1[7701]                		mov	ax, [disksector+29h] ; [DiskSector+EXT_BOOT.SERIAL+2]
 14045 0000185E 263B4559                		cmp	ax, [es:di+59h]	; [di+BDS.vol_serial+2]
 14046 00001862 7505                    		jnz	short ext_changed
 14047 00001864 31F6                    		xor	si, si		; 0
 14048                                  					; don't know
 14049 00001866 58                      		pop	ax
 14050 00001867 EBDD                    		jmp	short vid_no_changed
 14051                                  					; reset the flag
 14052                                  ; ---------------------------------------------------------------------------
 14053                                  
 14054                                  ext_changed:				
 14055 00001869 58                      		pop	ax
 14056 0000186A BEFFFF                  		mov	si, 0FFFFh	; -1
 14057                                  					; disk changed!
 14058                                  		; 12/12/2022
 14059                                  		; ('changed_drv' clears cf)
 14060                                  		;clc
 14061 0000186D EBDB                    		jmp	short changed_drv
 14062                                  
 14063                                  ; ---------------------------------------------------------------------------
 14064                                  
 14065                                  ; at i/o time, we detected the error. now we need to determine whether the
 14066                                  ; media was truly changed or not. we return normally if media change unknown.
 14067                                  ; and we pop off the call and jmp to harderr if we see an error.
 14068                                  ;
 14069                                  ; es:di -> bds
 14070                                  
 14071                                  checkio:				
 14072 0000186F 80FC06                  		cmp	ah, 6
 14073 00001872 75D5                    		jnz	short checkfatret
 14074 00001874 E837FF                  		call	chkopcnt
 14075 00001877 74D0                    		jz	short checkfatret
 14076 00001879 E87CED                  		call	GetBp
 14077 0000187C 7212                    		jb	short no_error_map
 14078 0000187E E89BFF                  		call	checkfatvid
 14079 00001881 7209                    		jb	short checkioret ; disk	error trying to	read in.
 14080 00001883 09F6                    		or	si, si		; is changed for sure?
 14081 00001885 7802                    		js	short checkioerr ; yes changed
 14082 00001887 45                      		inc	bp		; allow	a retry
 14083 00001888 C3                      		retn
 14084                                  ; ---------------------------------------------------------------------------
 14085                                  
 14086                                  checkioerr:				
 14087 00001889 E80700                  		call	returnvid
 14088                                  
 14089                                  checkioret:				
 14090 0000188C F9                      		stc			; make sure carry gets passed through
 14091 0000188D E9F1F2                  		jmp	harderr
 14092                                  ; ---------------------------------------------------------------------------
 14093                                  
 14094                                  no_error_map:				
 14095 00001890 E9F1F2                  		jmp	harderr2
 14096                                  
 14097                                  ; =============== S U B	R O U T	I N E =======================================
 14098                                  
 14099                                  ; return vid sets up the vid for a return to dos.
 14100                                  ;  es:di -> bds, returns pointer in packet to bds_volid
 14101                                  ;  **** trashes si! ****
 14102                                  
 14103                                  returnvid:		
 14104 00001893 BE1600                  		mov	si, 22		; extra
 14105                                  					; offset into pointer to return	value
 14106 00001896 E80700                  		call	vid_into_packet
 14107 00001899 B406                    		mov	ah, 6
 14108 0000189B F9                      		stc
 14109 0000189C C3                      		retn
 14110                                  
 14111                                  ; ---------------------------------------------------------------------------
 14112                                  
 14113                                  ; moves the pointer to the volid for the drive into the original request packet
 14114                                  ; no attempt is made to preserve registers.
 14115                                  ;
 14116                                  ; assumes es:di -> bds
 14117                                  ; **trashes si**
 14118                                  
 14119                                  media_set_vid:				
 14120 0000189D BE0F00                  		mov	si, 15		; trans+1
 14121                                  					; return the value here	in packet
 14122                                  
 14123                                  		; fall into vid_into_packet
 14124                                  
 14125                                  ; =============== S U B	R O U T	I N E =======================================
 14126                                  
 14127                                  ; return pointer to vid in bds at es:di in packet[si]
 14128                                  
 14129                                  		; 19/10/2022
 14130                                  vid_into_packet:
 14131 000018A0 1E                      		push	ds		; return pointer to vid	in bds at es:di	in packet[si]
 14132 000018A1 C51E[1200]              		lds	bx, [ptrsav]
 14133 000018A5 83C74B                  		add	di, 75		; BDS.volid
 14134 000018A8 8938                    		mov	[bx+si], di
 14135 000018AA 83EF4B                  		sub	di, 75		; BDS.volid
 14136 000018AD 8C4002                  		mov	[bx+si+2], es
 14137 000018B0 1F                      		pop	ds
 14138                                  dofloppy:	; 18/12/2022
 14139 000018B1 C3                      		retn
 14140                                  
 14141                                  ; ---------------------------------------------------------------------------
 14142                                  
 14143                                  ;----------------------------------------------------------------------------
 14144                                  ;   hidensity - examine a drive/media descriptor to set the media type. if
 14145                                  ;   the media descriptor is not f9 (not 96tpi or 3 1/2), we return and let the
 14146                                  ;   caller do the rest. otherwise, we pop off the return and jump to the tail
 14147                                  ;   of getbp. for 3.5" media, we just return.
 14148                                  ;
 14149                                  ;   inputs:	es:di point to correct bds for this drive
 14150                                  ;		ah has media byte
 14151                                  ;
 14152                                  ;   outputs:	carry clear
 14153                                  ;		    no registers modified
 14154                                  ;		carry set
 14155                                  ;		    al = sectors/fat
 14156                                  ;		    bh = number of root directory entries
 14157                                  ;		    bl = sectors per track
 14158                                  ;		    cx = number of sectors
 14159                                  ;		    dh = sectors per allocation unit
 14160                                  ;		    dl = number of heads
 14161                                  ;
 14162                                  ;----------------------------------------------------------------------------
 14163                                  
 14164                                  hidensity:
 14165                                  
 14166                                  ; check for correct drive
 14167                                  		
 14168                                  		; 12/12/2022
 14169 000018B2 26F6452302              		test	byte [es:di+23h], 2		
 14170                                  		;test	word [es:di+23h], 2 ; is it special?	
 14171                                  					; [es:di+BDS.flags], fchangeline
 14172 000018B7 74F8                    		jz	short dofloppy	; no, do normal floppy test
 14173                                  
 14174                                  ; we have a media byte that is pretty complex. examine drive information
 14175                                  ; table to see what kind it is.
 14176                                  
 14177 000018B9 26807D2202              		cmp	byte [es:di+22h], 2 ; is it single-media?
 14178 000018BE 74F1                    		jz	short dofloppy	; [es:di+BDS.formfactor], ffSmall
 14179                                  					; yes, use fatid...
 14180                                  ; 96 tpi drive?
 14181 000018C0 80FCF9                  		cmp	ah, 0F9h
 14182 000018C3 75EC                    		jnz	short dofloppy
 14183                                  
 14184                                  ;------ If formfactor of drive = ffother or ff288 it has to be
 14185                                  ;------ a 720K diskette
 14186                                  
 14187 000018C5 26807D2207              		cmp	byte [es:di+22h], 7 ; [es:di+BDS.formfactor]
 14188                                  					; ffOther
 14189 000018CA 7418                    		jz	short Is720K
 14190 000018CC 26807D2209              		cmp	byte [es:di+22h], 9 ; [es:di+BDS.formfactor]
 14191                                  					; ff288
 14192 000018D1 7411                    		jz	short Is720K
 14193 000018D3 B007                    		mov	al, 7		; seven	sectors	/ fat
 14194 000018D5 BB0FE0                  		mov	bx, 57359	; 224*256+0Fh
 14195                                  					; 224 root dir entries
 14196                                  					; & 0Fh sector max
 14197 000018D8 B96009                  		mov	cx, 2400	; 80*15*2
 14198                                  					; 80 tracks, 15 sectors/track,
 14199                                  					; 2 sides
 14200 000018DB BA0201                  		mov	dx, 258		; 1*256+2
 14201                                  					; sectors/allocation unit
 14202                                  					; & head max
 14203 000018DE 83C402                  		add	sp, 2		; pop off return address
 14204 000018E1 E986ED                  		jmp	Has1		; return to tail of getbp
 14205                                  ; ---------------------------------------------------------------------------
 14206                                  
 14207                                  Is720K:					
 14208 000018E4 83C402                  		add	sp, 2		; pop off return address
 14209 000018E7 E947ED                  		jmp	Has720K		; return to 720K code
 14210                                  ; ---------------------------------------------------------------------------
 14211                                  
 14212                                  		; 18/12/2022
 14213                                  ;dofloppy:				
 14214                                  		;retn
 14215                                  
 14216                                  ; =============== S U B	R O U T	I N E =======================================
 14217                                  
 14218                                  ; 16/10/2022
 14219                                  
 14220                                  ;---------------------------------------------------------------------------
 14221                                  ; set_changed_dl - sets flag bits according to bits set in bx.
 14222                                  ;		   essentially used to indicate changeline, or format.
 14223                                  ;
 14224                                  ;   inputs:	dl contains physical drive number
 14225                                  ;		bx contains bits to set in the flag field in the bdss
 14226                                  ;   outputs:	none
 14227                                  ;   registers modified: flags
 14228                                  ;
 14229                                  ;	called from int13 hooker.  Must preserve ALL registers!!!
 14230                                  ;
 14231                                  ; in the virtual drive system we *must* flag the other drives as being changed
 14232                                  ;---------------------------------------------------------------------------
 14233                                  
 14234                                  set_changed_dl:	
 14235 000018EA 06                      		push	es
 14236 000018EB 57                      		push	di
 14237                                  		;les	di, ds:start_bds
 14238                                  		; 19/10/2022
 14239 000018EC C43E[1901]              		les	di, [start_bds]
 14240                                  
 14241                                  ; note: we assume that the list is non-empty
 14242                                  
 14243                                  scan_bds:				
 14244 000018F0 26385504                		cmp	[es:di+4], dl	; [es:di+BDS.drivenum]
 14245 000018F4 7504                    		jnz	short get_next_bds
 14246                                  
 14247                                  ; someone may complain, but this *always* must be done when a disk change is
 14248                                  ; noted. there are *no* other compromising circumstances.
 14249                                  
 14250 000018F6 26095D23                		or	[es:di+23h], bx	; [es:di+BDS.flags]
 14251                                  					; signal change	on other drive
 14252                                  get_next_bds:				
 14253 000018FA 26C43D                  		les	di, [es:di]	; [es:di+BDS.link]
 14254                                  					; go to	next bds
 14255 000018FD 83FFFF                  		cmp	di, 0FFFFh
 14256 00001900 75EE                    		jnz	short scan_bds	; loop unless we hit end of chain
 14257 00001902 5F                      		pop	di
 14258 00001903 07                      		pop	es
 14259 00001904 C3                      		retn
 14260                                  
 14261                                  ; =============== S U B	R O U T	I N E =======================================
 14262                                  
 14263                                  ;---------------------------------------------------------------------------
 14264                                  ; checkromchange - see if external program has diddled rom change line.
 14265                                  ;
 14266                                  ;   inputs:	es:di points to current bds.
 14267                                  ;   outputs:	zero set - no change
 14268                                  ;		zero reset - change
 14269                                  ;   registers modified: none
 14270                                  ;---------------------------------------------------------------------------
 14271                                  
 14272                                  checkromchange:	
 14273                                  		;test	word [es:di+BDS.flags], fchanged ; 40h
 14274                                  		; 10/12/2022
 14275 00001905 26F6452340              		test	byte [es:di+23h], 40h
 14276                                  		;test	word [es:di+23h], 40h ; [es:di+BDS.flags]
 14277                                  					; fchanged
 14278 0000190A C3                      		retn
 14279                                  
 14280                                  ; =============== S U B	R O U T	I N E =======================================
 14281                                  
 14282                                  ;---------------------------------------------------------------------------
 14283                                  ; resetchanged - restore value of change line
 14284                                  ;
 14285                                  ;   inputs:	es:di points to current bds
 14286                                  ;   outputs:	none
 14287                                  ;   registers modified: none
 14288                                  ;---------------------------------------------------------------------------
 14289                                  
 14290                                  resetchanged:	
 14291                                  		;and	word [es:di+BDS.flags], ~fchanged ; 0FFBFh	
 14292                                  		; 10/12/2022
 14293 0000190B 26806523BF              		and	byte [es:di+23h], 0BFh
 14294                                  		;and	word [es:di+23h], 0FFBFh ; [es:di+BDS.flags]
 14295                                  					; ~fchanged
 14296 00001910 C3                      		retn
 14297                                  
 14298                                  ; =============== S U B	R O U T	I N E =======================================
 14299                                  
 14300                                  ;---------------------------------------------------------------------------
 14301                                  ; haschange - see if drive can supply change line
 14302                                  ;
 14303                                  ;   inputs:	es:di points to current bds
 14304                                  ;   outputs:	zero set - no change line available
 14305                                  ;		zero reset - change line available
 14306                                  ;   registers modified: none
 14307                                  ;---------------------------------------------------------------------------
 14308                                  
 14309                                  haschange:
 14310                                  		;test	word [es:di+BDS.flags], fchangeline ; 2
 14311                                  		; 10/12/2022
 14312 00001911 26F6452302              		test	byte [es:di+23h], 2		
 14313                                  		;test	word [es:di+23h], 2 ; [es:di+BDS.flags]
 14314                                  					; fchangeline
 14315 00001916 C3                      		retn
 14316                                  
 14317                                  ; ---------------------------------------------------------------------------
 14318                                  
 14319                                  ; 16/10/2022
 14320                                  
 14321                                  ;-------------------------------------------------------------------------
 14322                                  ; set_volume_id      -	main routine, calls other routines.
 14323                                  ; read_volume_id     -	read the volume id and tells if it has been changed.
 14324                                  ; transfer_volume_id -	copy the volume id from tmp to special drive.
 14325                                  ; check_volume_id    -	compare volume id in tmp area with one expected for drive.
 14326                                  ; fat_check          -	see of the fatid has changed in the specified drive.
 14327                                  ;-------------------------------------------------------------------------
 14328                                  
 14329                                  ; set_volume_id
 14330                                  ;   if drive has changeline support, read in and set the volume_id
 14331                                  ; and the last fat_id byte. if no change line support then do nothing.
 14332                                  ;
 14333                                  ;   on entry:
 14334                                  ;	es:di points to the bds for this disk.
 14335                                  ;	ah contains media byte
 14336                                  ;
 14337                                  ;   on exit:
 14338                                  ;	carry clear:
 14339                                  ;	   successful call
 14340                                  ;	carry set
 14341                                  ;	   error and ax has error code
 14342                                  
 14343                                  set_volume_id:				
 14344 00001917 52                      		push	dx		; save registers
 14345 00001918 50                      		push	ax
 14346 00001919 E8F5FF                  		call	haschange	; does drive have changeline support?
 14347 0000191C 740B                    		jz	short setvret	; no, get out
 14348 0000191E E81000                  		call	read_volume_id
 14349 00001921 7209                    		jb	short seterr
 14350 00001923 E8A200                  		call	transfer_volume_id ; copy the volume id	to special drive
 14351 00001926 E8E2FF                  		call	resetchanged	; restore value	of change line
 14352                                  setvret:				
 14353                                  		; 10/12/2022
 14354                                  		; cf = 0
 14355                                  		;clc			; no error, clear carry flag
 14356 00001929 58                      		pop	ax		; restore registers
 14357 0000192A 5A                      		pop	dx
 14358 0000192B C3                      		retn
 14359                                  ; ---------------------------------------------------------------------------
 14360                                  
 14361                                  seterr:					
 14362 0000192C 5A                      		pop	dx		; pop stack but don't overwrite ax
 14363 0000192D 5A                      		pop	dx		; restore dx
 14364 0000192E C3                      		retn
 14365                                  ; ---------------------------------------------------------------------------
 14366 0000192F 0000                    root_sec:	dw 0			; root sector #
 14367                                  
 14368                                  ; 16/10/2022
 14369                                  ;ROOTSEC equ root_sec - DOSBIOSEG_2C7h		
 14370                                  ; 09/12/2022
 14371                                  ROOTSEC equ root_sec
 14372                                  
 14373                                  ; =============== S U B	R O U T	I N E =======================================
 14374                                  
 14375                                  ; 16/10/2022
 14376                                  
 14377                                  ; read_volume_id read the volume id and tells if it has been changed.
 14378                                  ;
 14379                                  ;   on entry:
 14380                                  ;	es:di points to current bds for drive.
 14381                                  ;
 14382                                  ;   on exit:
 14383                                  ;	carry clear
 14384                                  ;	    si = 1  no change
 14385                                  ;	    si = 0  ?
 14386                                  ;	    si = -1 change
 14387                                  ;
 14388                                  ;	carry set:
 14389                                  ;	    error and ax has error code.
 14390                                  
 14391                                  read_volume_id:
 14392 00001931 52                      		push	dx		; preserve registers
 14393 00001932 51                      		push	cx
 14394 00001933 53                      		push	bx
 14395 00001934 50                      		push	ax
 14396 00001935 06                      		push	es		; stack the bds last
 14397 00001936 57                      		push	di
 14398 00001937 1E                      		push	ds		; point es to Bios_Data
 14399 00001938 07                      		pop	es
 14400 00001939 BF[0A09]                		mov	di, tmp_vid	; "NO NAME	 "
 14401 0000193C BE[FE08]                		mov	si, nul_vid	; "NO NAME	 "
 14402 0000193F B90C00                  		mov	cx, 12		; initialize tmp_vid to	null vi_id
 14403 00001942 F3A4                    		rep movsb
 14404 00001944 5F                      		pop	di
 14405 00001945 07                      		pop	es
 14406 00001946 268A450B                		mov	al, [es:di+11]	; [es:di+BDS.fats]
 14407                                  					; # of fats
 14408 0000194A 268B4D11                		mov	cx, [es:di+17]	; [es:di+BDS.fatsecs]
 14409                                  					; sectors / fat
 14410 0000194E F6E1                    		mul	cl		; size taken by	fats
 14411 00001950 26034509                		add	ax, [es:di+9]	; [es:di+BDS.resectors]
 14412                                  					; add on reserved sectors
 14413                                  					;
 14414                                  					; ax is	now sector # (0	based)
 14415                                  		; 17/10/2022
 14416 00001954 2EA3[2F19]              		mov	[cs:ROOTSEC], ax
 14417                                  		;mov	word ptr cs:198Fh, ax ; [cs:root_sec]
 14418                                  					; 0070h:3EFFh =	2C7h:198Fh
 14419 00001958 268B450C                		mov	ax, [es:di+12]	; [es:di+BDS.direntries]
 14420                                  					; # root dir entries
 14421 0000195C B104                    		mov	cl, 4		; 16 entries/sector
 14422 0000195E D3E8                    		shr	ax, cl		; divide by 16
 14423 00001960 89C1                    		mov	cx, ax		; cx is	# of sectors to	scan
 14424                                  next_sec:				
 14425 00001962 51                      		push	cx		; save outer loop counter
 14426 00001963 2EA1[2F19]              		mov	ax, [cs:ROOTSEC]
 14427                                  		;mov	ax, word ptr cs:198Fh ; [cs:root_sec]
 14428                                  					; get sector #
 14429 00001967 268B4D13                		mov	cx, [es:di+19]	; [es:di+BDS.secpertrack]
 14430                                  					; sectors / track
 14431 0000196B 31D2                    		xor	dx, dx
 14432 0000196D F7F1                    		div	cx
 14433                                  
 14434                                  ; set up registers for call to read_sector
 14435                                  
 14436 0000196F 42                      		inc	dx		; dx= sectors into track
 14437                                  					; ax= track count from 0
 14438 00001970 88D1                    		mov	cl, dl		; sector to read
 14439 00001972 31D2                    		xor	dx, dx
 14440 00001974 26F77515                		div	word [es:di+21] ; [es:di+BDS.heads]
 14441                                  					; # heads on this disc
 14442 00001978 88D6                    		mov	dh, dl		; head number
 14443 0000197A 88C5                    		mov	ch, al		; track	#
 14444 0000197C E8FBED                  		call	read_sector	; get first sector of the root directory,
 14445                                  					; ds:bx	-> directory sector
 14446 0000197F 7243                    		jb	short readviderr
 14447 00001981 B91000                  		mov	cx, 16		; # of dir entries in a	block of root
 14448 00001984 B008                    		mov	al, 8		; volume label bit
 14449                                  fvid_loop:				
 14450 00001986 803F00                  		cmp	byte [bx], 0 ; end of dir?
 14451 00001989 7436                    		jz	short no_vid	; yes, no vol id
 14452 0000198B 803FE5                  		cmp	byte [bx], 0E5h ; empty entry?
 14453 0000198E 7405                    		jz	short ent_loop	; yes, skip
 14454 00001990 84470B                  		test	[bx+11], al	; is volume label bit set in fcb?
 14455 00001993 7511                    		jnz	short found_vid	; jmp yes
 14456                                  ent_loop:				
 14457 00001995 83C320                  		add	bx, 32		; add length of	directory entry
 14458 00001998 E2EC                    		loop	fvid_loop
 14459 0000199A 59                      		pop	cx		; outer loop
 14460 0000199B 2EFF06[2F19]            		inc	word [cs:ROOTSEC]
 14461                                  		;inc	word ptr cs:198Fh ; inc word [root_sec]
 14462                                  					; next sector
 14463 000019A0 E2C0                    		loop	next_sec	; continue
 14464                                  notfound:				
 14465 000019A2 31F6                    		xor	si, si
 14466 000019A4 EB16                    		jmp	short fvid_ret
 14467                                  ; ---------------------------------------------------------------------------
 14468                                  
 14469                                  found_vid:				
 14470 000019A6 59                      		pop	cx		; clean stack of outer loop counter
 14471 000019A7 89DE                    		mov	si, bx		; point	to volume_id
 14472 000019A9 06                      		push	es		; preserve current bds
 14473 000019AA 57                      		push	di
 14474 000019AB 1E                      		push	ds
 14475 000019AC 07                      		pop	es		; point es to Bios_Data
 14476 000019AD BF[0A09]                		mov	di, tmp_vid	; "NO NAME	 "
 14477 000019B0 B90B00                  		mov	cx, 11		; VOLID_SIZ-1
 14478                                  					; length of string minus nul
 14479 000019B3 F3A4                    		rep movsb		; mov volume label to tmp_vid
 14480 000019B5 30C0                    		xor	al, al
 14481 000019B7 AA                      		stosb			; null terminate
 14482 000019B8 31F6                    		xor	si, si
 14483 000019BA 5F                      		pop	di		; restore current bds
 14484 000019BB 07                      		pop	es
 14485                                  fvid_ret:				
 14486 000019BC 58                      		pop	ax
 14487                                  		; 10/12/2022
 14488                                  		; cf = 0
 14489                                  		;clc
 14490                                  rvidret:				
 14491 000019BD 5B                      		pop	bx		; restore registers
 14492 000019BE 59                      		pop	cx
 14493 000019BF 5A                      		pop	dx
 14494 000019C0 C3                      		retn
 14495                                  ; ---------------------------------------------------------------------------
 14496                                  
 14497                                  no_vid:					
 14498 000019C1 59                      		pop	cx		; clean stack of outer loop counter
 14499 000019C2 EBDE                    		jmp	short notfound	; not found
 14500                                  ; ---------------------------------------------------------------------------
 14501                                  
 14502                                  readviderr:				
 14503 000019C4 5E                      		pop	si		; trash the outer loop counter
 14504 000019C5 5E                      		pop	si		; caller's ax, return error code instead 
 14505 000019C6 EBF5                    		jmp	short rvidret
 14506                                  
 14507                                  ; =============== S U B	R O U T	I N E =======================================
 14508                                  
 14509                                  ; transfer_volume_id - copy the volume id from tmp to special drive
 14510                                  ;
 14511                                  ; inputs:	es:di has current bds
 14512                                  ; outputs:	bds for drive has volume id from tmp
 14513                                  
 14514                                  transfer_volume_id:	
 14515 000019C8 57                      		push	di		; copy the volume id from tmp to special drive
 14516 000019C9 56                      		push	si
 14517 000019CA 51                      		push	cx
 14518 000019CB BE[0A09]                		mov	si, tmp_vid	; "NO NAME	 "
 14519                                  		;add	di, BDS.volid
 14520 000019CE 83C74B                  		add	di, 75		; BDS.volid
 14521                                  		;mov	cx, VOLID_SIZ
 14522 000019D1 B90C00                  		mov	cx, 12		; VOLID_SIZ
 14523 000019D4 FC                      		cld
 14524 000019D5 F3A4                    		rep movsb
 14525 000019D7 59                      		pop	cx
 14526 000019D8 5E                      		pop	si
 14527 000019D9 5F                      		pop	di
 14528 000019DA C3                      		retn
 14529                                  
 14530                                  ; =============== S U B	R O U T	I N E =======================================
 14531                                  
 14532                                  ;  check_volume_id - compare volume id in tmp area with
 14533                                  ;		     one expected for drive
 14534                                  ;
 14535                                  ;   inputs:	es:di has current bds for drive
 14536                                  ;   outputs:	zero true means it matched
 14537                                  
 14538                                  check_volume_id:	
 14539 000019DB 57                      		push	di
 14540 000019DC 51                      		push	cx
 14541 000019DD BE[0A09]                		mov	si, tmp_vid	; "NO NAME	 "
 14542                                  		;add	di, BDS.volid
 14543 000019E0 83C74B                  		add	di, 75		; BDS.volid
 14544                                  		;mov	cx, VOLID_SIZ
 14545 000019E3 B90C00                  		mov	cx, 12		; VOLID_SIZ
 14546 000019E6 FC                      		cld
 14547 000019E7 F3A6                    		repe cmpsb		; are the 2 volume_ids the same?
 14548 000019E9 59                      		pop	cx
 14549 000019EA 5F                      		pop	di
 14550 000019EB C3                      		retn
 14551                                  
 14552                                  ; =============== S U B	R O U T	I N E =======================================
 14553                                  
 14554                                  ;   fat_check - see of the fatid has changed in the specified drive.
 14555                                  ;	      - uses the fat id obtained from the boot sector.
 14556                                  ;
 14557                                  ;   inputs:	medbyt is expected fat id
 14558                                  ;		es:di points to current bds
 14559                                  ;
 14560                                  ;   output:	si = -1 if fat id different,
 14561                                  ;		si = 0 otherwise
 14562                                  ;
 14563                                  ;   no other registers changed.
 14564                                  
 14565                                  fat_check:		
 14566 000019EC 50                      		push	ax
 14567 000019ED 31F6                    		xor	si, si		; say fat id's are same.
 14568 000019EF A0[1F01]                		mov	al, [medbyt]	; 19/10/2022
 14569 000019F2 263A4510                		cmp	al, [es:di+10h]	; [es:di+BDS.media]
 14570                                  					; compare it with the bds medbyte
 14571 000019F6 7401                    		jz	short okret1	; carry	clear
 14572 000019F8 4E                      		dec	si
 14573                                  okret1:					
 14574 000019F9 58                      		pop	ax
 14575 000019FA C3                      		retn
 14576                                  
 14577                                  ; ---------------------------------------------------------------------------
 14578                                  
 14579                                  ; BIOSCODE:1A69h (MSDOS 6.21, IO.SYS)
 14580                                  		;times 7 db 0
 14581                                  
 14582                                  ; BIOSCODE:180Bh (MSDOS 5.0 IO.SYS)	
 14583                                  
 14584                                  		; 09/12/2022
 14585                                  		;times 4 db 0	; 17/10/2022
 14586                                  		;db 4 dup(0)	; times 4 db 0
 14587                                  
 14588                                  ; ---------------------------------------------------------------------------
 14589                                  
 14590                                  		; 09/12/2022
 14591                                  		;db 0
 14592                                  
 14593                                  number2div	equ ($-BCode_start)
 14594                                  number2mod	equ (number2div % 16)
 14595                                  
 14596                                  %if (number2mod>0) & (number2mod<16) ; 17/09/2023
 14597 000019FB 00<rep 5h>              		times (16-number2mod) db 0
 14598                                  %endif
 14599                                  
 14600                                  ;align 16
 14601                                  
 14602                                  ; 09/12/2022
 14603                                  BCODE_END	equ $ - BCode_start
 14604                                  ; 29/09/2023
 14605                                  BCODEEND:
 14606                                  ;SYSINITSEG	equ IOSYSCODESEG+(BCODE_END>>4)
 14607                                  ; 13/12/2022
 14608                                  SYSINITOFFSET	equ BCODE_END
 14609                                  ; 29/09/2023
 14610                                  ;SYSINITOFFSET	equ $-$$
 14611                                  SYSINITSEG	equ IOSYSCODESEG+(SYSINITOFFSET>>4)
 14612                                  
 14613                                  ; 28/09/2023
 14614                                  S2SIZE equ $-$$
 14615                                  
 14616                                  ;--- End of DOSBIOS code segment ---------------------------------------------
 14617                                  
 14618                                  ; 16/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 14619                                  ; 01/05/2019 - Retro DOS v4.0 
 14620                                  ; ============================================================================
 14621                                  ; end of BIOSCODE
 14622                                  
 14623                                  ; ----------------------------------------------------------------------------
 14624                                  ; %include sysinit5.s	; 09/12/2022
 14625                                  ; ----------------------------------------------------------------------------
 14626                                  
 14627                                  ;=============================================================================
 14628                                  ; (IO.SYS) SYSINIT SEGMENT 
 14629                                  ;=============================================================================
 14630                                  ; 09/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 14631                                  
 14632                                  section .SYSINIT vstart=0
 14633                                  
 14634                                  ; ****************************************************************************
 14635                                  ; SYSINIT.BIN (MSDOS 5.0 IO.SYS) - RETRO DOS v4.0 by ERDOGAN TAN - 21/10/2022
 14636                                  ; ----------------------------------------------------------------------------
 14637                                  ; Last Update: 04/01/2023 (Modified IO.SYS)  ((Previous: 31/12/2022))
 14638                                  ; ----------------------------------------------------------------------------
 14639                                  ; Beginning: 03/06/2018 (Retro DOS 3.0), 21/03/2019 (Retro DOS 4.0)
 14640                                  ; ----------------------------------------------------------------------------
 14641                                  ; Assembler: NASM version 2.15
 14642                                  ; ----------------------------------------------------------------------------
 14643                                  ;	   ((nasm sysinit5.s -l sysinit5.lst -o SYSINIT5.BIN -Z error.txt)) 	
 14644                                  ; ----------------------------------------------------------------------------
 14645                                  ; Modified from 'sysinit2.s' (SYSINIT2.BIN) file of Retro DOS v3.0 (6/7/2018)
 14646                                  ; ----------------------------------------------------------------------------
 14647                                  ; Derived from 'SYSINIT1.ASM' and 'SYSINIT2.ASM' files of MSDOS 6.0
 14648                                  ; source code by Microsoft, 1991 
 14649                                  ; ----------------------------------------------------------------------------
 14650                                  ; Derived from 'SYSINIT.ASM' file of MSDOS 2.0 (IBM PCDOS v2.0) source code
 14651                                  ; by Microsoft, 12/10/1983
 14652                                  ; ****************************************************************************
 14653                                  ; main file: 'retrodos4.s'
 14654                                  ; incbin 'SYSINIT3.BIN' ; (SYINITSEG)
 14655                                  
 14656                                  ; 21/10/2022
 14657                                  ; ----------------------------------------------------------------------------
 14658                                  ; This source code (version) is based on SYSINIT source code of disassembled
 14659                                  ; MSDOS 5.0 IO.SYS file (SYSINIT.BIN) 
 14660                                  ; Dissassembler: Hex-Rays Interactive Disassembler (IDA)
 14661                                  ; ----------------------------------------------------------------------------
 14662                                  ; Binary file splitter & joiner: FFSJ v3.3
 14663                                  
 14664                                  ;--------------------------------------------------------------
 14665                                  ; SYSINIT.TXT (27/01/1983)
 14666                                  ;--------------------------------------------------------------
 14667                                  ;    SYSINIT is  a module linked behind the OEM bios.  It takes
 14668                                  ;over  the  system  initialization  after  the  OEM  bios   has
 14669                                  ;performed any  initialization  it  needs  to  do.   Control is
 14670                                  ;transfered with a long jump to the external  variable  SYSINIT
 14671                                  ;
 14672                                  ;
 14673                                  ;   The OEM  has  the  following  variables declared external:
 14674                                  ;
 14675                                  ;   CURRENT_DOS_LOCATION    WORD
 14676                                  ;
 14677                                  ;This word  contains  the  segment  number of the DOS before it
 14678                                  ;is relocated.  The OEM bios must set this value.
 14679                                  ;
 14680                                  ;   FINAL_DOS_LOCATION      WORD
 14681                                  ;
 14682                                  ;This word contains the segment number of the DOS after SYSINIT
 14683                                  ;moves it.  The OEM bios must set this value.
 14684                                  ;
 14685                                  ;   DEVICE_LIST             DWORD
 14686                                  ;
 14687                                  ;This  double  word  pointer  points  to  the  linked  list  of
 14688                                  ;character and block device drivers.  The  OEM  must  set  this
 14689                                  ;value.
 14690                                  ;
 14691                                  ;   MEMORY_SIZE             WORD
 14692                                  ;
 14693                                  ;This word  contains  the  number  of  RAM  paragraphs.  If the
 14694                                  ;bios doesn't set  this  variable  SYSINIT  will  automatically
 14695                                  ;calculate it.   NOTE:  systems with PARITY checked memory must
 14696                                  ;size memory in the BIOS.  SYSINITs method is to  write  memory
 14697                                  ;and read it back until it gets a mismatch.
 14698                                  ;
 14699                                  ;   DEFAULT_DRIVE           BYTE
 14700                                  ;
 14701                                  ;This is  the initial default drive when the system first comes
 14702                                  ;up.  drive a=0, drive b=1,  etc.   If  the  bios  doesn't  set
 14703                                  ;it then drive a is assumed.
 14704                                  ;
 14705                                  ;   BUFFERS                 BYTE
 14706                                  ;
 14707                                  ;This is  the  default  number of buffers for the system.  This
 14708                                  ;value may be overridden by the user in  the  CONFIG.SYS  file.
 14709                                  ;It is DBed to 2 in SYSINIT it should be greater than 1.
 14710                                  ;
 14711                                  ;   FILES                   BYTE
 14712                                  ;
 14713                                  ;This is  the  default  number  of  files for the system.  This
 14714                                  ;value may be overridden by the user in  the  CONFIG.SYS  file.
 14715                                  ;It is  DBed  to  8 in SYSINIT, values less than 5 are ignored.
 14716                                  ;
 14717                                  ;   SYSINIT                 FAR
 14718                                  ;
 14719                                  ;The entry  point  of  the  SYSINIT  module.  OEM BIOS jumps to
 14720                                  ;this label at the end of its INIT code.
 14721                                  ;
 14722                                  ;   The OEM  has  the  following  variables declared public:
 14723                                  ;
 14724                                  ;   RE_INIT                 FAR
 14725                                  ;
 14726                                  ;This is an entry point which allows the BIOS to do some INIT
 14727                                  ;work  after  the  DOS is initialized.  ALL REGISTERS MUST BE
 14728                                  ;PRESERVED.  On entry DS points to the first available memory
 14729                                  ;(after  the DOS).  DS:0 points to a 100H byte program header
 14730                                  ;prefix which represents  the  "program"  currently  running.
 14731                                  ;This  program  should  be  thought  of  as  the OEM BIOS and
 14732                                  ;SYSINIT taken together.  This is not  a  normal  program  in
 14733                                  ;that  no  memory  is  allocated to it, it is running in free
 14734                                  ;memory.
 14735                                  ;NOTES:
 14736                                  ;     At the time this routine is called SYSINIT occupies the
 14737                                  ;highest 10K of memory ("highest" is determined by the  value
 14738                                  ;of the MEMORY_SIZE variable), DO NOT DO WRITES THERE.
 14739                                  ;     Since this is called AFTER DOS is initialized, you can
 14740                                  ;make system calls.  This also implies that the code for this
 14741                                  ;routine    CANNOT   be   thrown   away   by   use   of   the
 14742                                  ;FINAL_DOS_LOCATION since the DOS has already been moved.
 14743                                  ;     If you don't want  anything done just set this to point
 14744                                  ;at a FAR RET instruction.
 14745                                  
 14746                                  ; ----------------------------------------------------------------------
 14747                                  ; TITLE   BIOS SYSTEM INITIALIZATION
 14748                                  ; ----------------------------------------------------------------------
 14749                                  
 14750                                  ;include version.inc
 14751                                  ; ----------------------------------------------------------------------
 14752                                  
 14753                                  ;FALSE   EQU     0
 14754                                  ;TRUE    EQU     0FFFFh
 14755                                  
 14756                                  ;IBMVER	    EQU     TRUE
 14757                                  ;IBMCOPYRIGHT EQU   FALSE
 14758                                  ;STACKSW    EQU	    TRUE		;Include Switchable Hardware Stacks
 14759                                  ;IBMJAPVER  EQU     FALSE		; If TRUE set KANJI true also
 14760                                  ;MSVER      EQU     FALSE
 14761                                  ;ALTVECT    EQU     FALSE		; Switch to build ALTVECT version
 14762                                  ;KANJI      EQU     FALSE
 14763                                  
 14764                                  ;(MSDOS 6.0, versiona.inc, 1991)
 14765                                  ; ----------------------------------------------------------------------
 14766                                  ;MAJOR_VERSION  EQU	6
 14767                                  ;;MINOR_VERSION	EQU	0	;6.00
 14768                                  ;MINOR_VERSION  EQU	21	;6.21  ; 21/03/2019 - Retro DOS v4.0
 14769                                  
 14770                                  ; 22/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0)
 14771                                  ; ----------------------------------------------------------------------
 14772                                  MAJOR_VERSION   EQU	5
 14773                                  MINOR_VERSION   EQU	0
 14774                                  
 14775                                  expected_version equ	(MINOR_VERSION<<8)+MAJOR_VERSION
 14776                                  
 14777                                  ;DOSREVNM equ	00000000b       ; m037 - bits 0-2 = revision number of DOS
 14778                                  				; currently 0.
 14779                                  DOSREVNM equ	00000111b	; [[[ 7 for Retro DOS v4.0 ]]] (21/03/2019)	
 14780                                  DOSINROM equ	00001000B       ; bit 3 of ver flags returned in BH
 14781                                  DOSINHMA equ	00010000B       ; bit 4 of ver flags 
 14782                                  
 14783                                  ;      if1
 14784                                  ;      %OUT  ... for DOS Version 5.00 ...
 14785                                  ;      endif
 14786                                  
 14787                                         ;******************************
 14788                                         ;Each assembler program should:
 14789                                         ;  mov ah,030h                   ;DOS Get Version function
 14790                                         ;  int 021h                      ;Version ret. in AX,minor version first
 14791                                         ;  cmp ax,expected_version       ;ALL utilities should check for an
 14792                                         ;  jne error_handler             ; EXACT version match.
 14793                                         ;******************************
 14794                                  
 14795                                  ; ----------------------------------------------------------------------
 14796                                  ; device definitions
 14797                                  
 14798                                  ;Attribute bit masks
 14799                                  DEVTYP  EQU     8000h           ;Bit 15 - 1  if Char, 0 if block
 14800                                  DEVIOCTL EQU    4000h           ;Bit 14 - CONTROL mode bit
 14801                                  ISFATBYDEV EQU  2000h           ;Bit 13 - Device uses FAT ID bytes, comp media.
 14802                                  ISCIN   EQU     0001h           ;Bit 0 - This device is the console input.
 14803                                  ISCOUT  EQU     0002h           ;Bit 1 - This device is the console output.
 14804                                  ISNULL  EQU     0004h           ;Bit 2 - This device is the null device.
 14805                                  ISCLOCK EQU     0008h           ;Bit 3 - This device is the clock device.
 14806                                  ISIBM   EQU     0010h           ;Bit 4 - This device is special
 14807                                  
 14808                                  ; The device table list has the form:
 14809                                  struc	SYSDEV
 14810 00000000 ????????                .NEXT:		resd 1		;Pointer to next device header
 14811 00000004 ????                    .ATT:		resw 1		;Attributes of the device
 14812 00000006 ????                    .STRAT:		resw 1		;Strategy entry point
 14813 00000008 ????                    .INT:		resw 1		;Interrupt entry point
 14814 0000000A ????????????????        .NAME:		resb 8		;Name of device (only first byte used for block)
 14815                                  .size:
 14816                                  endstruc
 14817                                  
 14818                                  ;Static Reguest Header
 14819                                  struc	SRHEAD
 14820 00000000 ??                      .REQLEN:	resb 1		;Length in bytes of request block
 14821 00000001 ??                      .REQUNIT:	resb 1		;Device unit number
 14822 00000002 ??                      .REQFUNC:	resb 1		;Type of request
 14823 00000003 ????                    .REQSTAT:	resw 1		;Status Word
 14824 00000005 ????????????????                	resb 8		;Reserved for queue links
 14825                                  .size:
 14826                                  endstruc
 14827                                  
 14828                                  ;Status word masks
 14829                                  STERR   EQU     8000H           ;Bit 15 - Error
 14830                                  STBUI   EQU     0200H           ;Bit 9 - Buisy
 14831                                  STDON   EQU     0100H           ;Bit 8 - Done
 14832                                  STECODE EQU     00FFH           ;Error code
 14833                                  WRECODE EQU     0
 14834                                  
 14835                                  ;Function codes
 14836                                  DEVINIT EQU     0               ;Initialization
 14837                                  DINITHL EQU     26              ;Size of init header
 14838                                  DEVMDCH EQU     1               ;Media check
 14839                                  DMEDHL  EQU     15              ;Size of media check header
 14840                                  DEVBPB  EQU     2               ;Get BPB
 14841                                  DEVRDIOCTL EQU  3               ;IOCTL read
 14842                                  DBPBHL  EQU     22              ;Size of Get BPB header
 14843                                  DEVRD   EQU     4               ;Read
 14844                                  DRDWRHL EQU     22              ;Size of RD/WR header
 14845                                  DEVRDND EQU     5               ;Non destructive read no wait (character devs)
 14846                                  DRDNDHL EQU     14              ;Size of non destructive read header
 14847                                  DEVIST  EQU     6               ;Input status
 14848                                  DSTATHL EQU     13              ;Size of status header
 14849                                  DEVIFL  EQU     7               ;Input flush
 14850                                  DFLSHL  EQU     15              ;Size of flush header
 14851                                  DEVWRT  EQU     8               ;Write
 14852                                  DEVWRTV EQU     9               ;Write with verify
 14853                                  DEVOST  EQU     10              ;Output status
 14854                                  DEVOFL  EQU     11              ;Output flush
 14855                                  DEVWRIOCTL EQU  12              ;IOCTL write
 14856                                  
 14857                                  ; ----------------------------------------------------------------------
 14858                                  struc	SYS_FCB
 14859 00000000 ??                      .fcb_drive:	resb 1
 14860 00000001 ????????????????        .fcb_name:	resb 8
 14861 00000009 ??????                  .fcb_ext:	resb 3
 14862 0000000C ????                    .fcb_EXTENT:	resw 1
 14863 0000000E ????                    .fcb_RECSIZ:	resw 1	; Size of record (user settable)
 14864 00000010 ????                    .fcb_FILSIZ:	resw 1	; Size of file in bytes; used with the following
 14865                                                          ; word
 14866 00000012 ????                    .fcb_DRVBP:	resw 1	; BP for SEARCH FIRST and SEARCH NEXT
 14867 00000014 ????                    .fcb_FDATE:	resw 1	; Date of last writing
 14868 00000016 ????                    .fcb_FTIME:	resw 1	; Time of last writing
 14869 00000018 ??                      .fcb_DEVID:	resb 1	; Device ID number, bits 0-5 if file.
 14870                                                          ; bit 7=0 for file, bit 7=1 for I/O device
 14871                                                          ; If file, bit 6=0 if dirty
 14872                                                          ; If I/O device, bit 6=0 if EOF (input)
 14873                                                          ;               Bit 5=1 if Raw mode
 14874                                                          ;               Bit 0=1 if console input device
 14875                                                          ;               Bit 1=1 if console output device
 14876                                                          ;               Bit 2=1 if null device
 14877                                                          ;               Bit 3=1 if clock device
 14878 00000019 ????                    .fcb_FIRCLUS:	resw 1	; First cluster of file
 14879 0000001B ????                    .fcb_CLUSPOS:	resw 1	; Position of last cluster accessed
 14880 0000001D ????                    .fcb_LSTCLUS:	resw 1	; Last cluster accessed and directory
 14881 0000001F ??                                   	resb 1	; pack 2 12 bit numbers into 24 bits...
 14882 00000020 ??                      .fcb_NR:	resb 1	; Next record
 14883 00000021 ????????                .fcb_RR:	resb 4	; Random record
 14884                                  .size:
 14885                                  endstruc
 14886                                  
 14887                                  ; ----------------------------------------------------------------------
 14888                                  ; Field definition for I/O buffer information
 14889                                  
 14890                                  ; 22/03/2019 - Retro DOS v4.0 (MSDOS 6.0, BUFFER.INC, 1991)
 14891                                  
 14892                                  struc buffinfo
 14893 00000000 ????                    .buf_next:	resw 1	; Pointer to next buffer in list
 14894 00000002 ????                    .buf_prev:	resw 1	; Pointer to previous buffer in list
 14895 00000004 ??                      .buf_ID:	resb 1	; Drive of buffer (bit 7 = 0)
 14896                                  			; SFT table index (bit 7 = 1)
 14897                                  			; = FFh if buffer free
 14898 00000005 ??                      .buf_flags:	resb 1	; Bit 7 = 1 if Remote file buffer
 14899                                  			;	= 0 if Local device buffer
 14900                                  			; Bit 6 = 1 if buffer dirty
 14901                                  			; Bit 5 = Reserved
 14902                                  			; Bit 4 = Search bit (bit 7 = 1)
 14903                                  			; Bit 3 = 1 if buffer is DATA
 14904                                  			; Bit 2 = 1 if buffer is DIR
 14905                                  			; Bit 1 = 1 if buffer is FAT
 14906                                  			; Bit 0 = Reserved
 14907 00000006 ????????                .buf_sector:	resd 1	; Sector number of buffer (bit 7 = 0)
 14908                                  ; The next two items are often refed as a word (bit 7 = 0)
 14909 0000000A ??                      .buf_wrtcnt:	resb 1	; For FAT sectors, # times sector written out
 14910 0000000B ????                    .buf_wrtcntinc:	resw 1	; "   "     "   , # sectors between each write
 14911 0000000D ????????                .buf_DPB :	resd 1	; Pointer to drive parameters
 14912 00000011 ????                    .buf_fill:	resw 1	; How full buffer is (bit 7 = 1)
 14913 00000013 ??                      .buf_reserved:	resb 1	; make DWORD boundary for 386
 14914                                  .size:
 14915                                  endstruc
 14916                                  
 14917                                  %define buf_offset	dword [buf_sector]
 14918                                  			;For bit 7 = 1, this is the byte
 14919                                  			;offset of the start of the buffer in
 14920                                  			;the file pointed to by buf_ID.  Thus
 14921                                  			;the buffer starts at location
 14922                                  			;buf_offset in the file and contains
 14923                                  			;buf_fill bytes.
 14924                                  
 14925                                  bufinsiz	equ	buffinfo.size ; ; Size of structure in bytes
 14926                                  
 14927                                  
 14928                                  buf_Free	equ	0FFh		; buf_id of free buffer
 14929                                  
 14930                                  ;Flag byte masks
 14931                                  buf_isnet	EQU	10000000B
 14932                                  buf_dirty	EQU	01000000B
 14933                                  ;***
 14934                                  buf_visit	EQU	00100000B
 14935                                  ;***
 14936                                  buf_snbuf	EQU	00010000B
 14937                                  
 14938                                  buf_isDATA	EQU	00001000B
 14939                                  buf_isDIR	EQU	00000100B
 14940                                  buf_isFAT	EQU	00000010B
 14941                                  buf_type_0	EQU	11110001B	; AND sets type to "none"
 14942                                  
 14943                                  buf_NetID	EQU	bufinsiz
 14944                                  
 14945                                  ; ----------------------------------------------------------------------
 14946                                  
 14947                                  ; ----------------------------------------------------------------------
 14948                                  ;**	DPB - Drive Parameter Block
 14949                                  
 14950                                  ; 25/03/2019 - Retro DOS v4.0 (MSDOS 6.0, DPB.INC, 1991)
 14951                                  
 14952                                  ;	BUGBUG - this isn't authorative - it's my probably incomplete and
 14953                                  ;	possibly inaccurate deductions from code study... - jgl
 14954                                  ;
 14955                                  ;	The DPB is DOS's main structure for describing block devices.
 14956                                  ;	It contains info about the "Drive" intermingled with info about
 14957                                  ;	the FAT file system which is presumably on the drive.  I don't know
 14958                                  ;	how those fields are used if it's not the FAT file system - BUGBUG
 14959                                  ;
 14960                                  ;	The DPBs are statically allocated and chained off of DPBHead.
 14961                                  ;	Users scan this chain looking for a match on DPB_DRIVE.
 14962                                  ;	The DPBs are built at init time from info in the SYSDEV structure.
 14963                                  
 14964                                  ; 08/06/2018 - Retro DOS v3.0 (MSDOS 3.3, DPB.INC, 24/07/1987)
 14965                                  
 14966                                  ; 12/05/2019 - Retro DOS v4.0
 14967                                  
 14968                                  struc	DPB
 14969 00000000 ??                      .DRIVE:		resb 1		; Logical drive # assoc with DPB (A=0,B=1,...)
 14970 00000001 ??                      .UNIT:		resb 1		; Driver unit number of DPB
 14971 00000002 ????                    .SECTOR_SIZE:	resw 1		; Size of physical sector in bytes
 14972 00000004 ??                      .CLUSTER_MASK:	resb 1		; Sectors/cluster - 1
 14973 00000005 ??                      .CLUSTER_SHIFT:	resb 1		; Log2 of sectors/cluster
 14974 00000006 ????                    .FIRST_FAT:	resw 1		; Starting record of FATs
 14975 00000008 ??                      .FAT_COUNT:	resb 1		; Number of FATs for this drive
 14976 00000009 ????                    .ROOT_ENTRIES:	resw 1		; Number of directory entries
 14977 0000000B ????                    .FIRST_SECTOR:	resw 1		; First sector of first cluster
 14978 0000000D ????                    .MAX_CLUSTER:	resw 1		; Number of clusters on drive + 1
 14979                                  ;.FAT_SIZE:	resb 1  ; MSDOS 3.3
 14980 0000000F ????                    .FAT_SIZE:	resw 1		; Number of records occupied by FAT
 14981 00000011 ????                    .DIR_SECTOR:	resw 1		; Starting record of directory
 14982 00000013 ????????                .DRIVER_ADDR:	resd 1		; Pointer to driver
 14983 00000017 ??                      .MEDIA:		resb 1		; Media byte
 14984 00000018 ??                      .FIRST_ACCESS:	resb 1		; This is initialized to -1 to force a media
 14985                                  				; check the first time this DPB is used
 14986 00000019 ????????                .NEXT_DPB:	resd 1		; Pointer to next Drive parameter block
 14987 0000001D ????                    .NEXT_FREE:	resw 1		; Cluster # of last allocated cluster
 14988 0000001F ????                    .FREE_CNT:	resw 1		; Count of free clusters, -1 if unknown
 14989                                  .size:
 14990                                  endstruc
 14991                                  
 14992                                  DPBSIZ  EQU     DPB.size	; Size of the structure in bytes
 14993                                  
 14994                                  DSKSIZ  EQU	DPB.MAX_CLUSTER	; Size of disk (temp used during init only)
 14995                                  
 14996                                  ; ----------------------------------------------------------------------
 14997                                  ; 26/03/2018
 14998                                  
 14999                                  ; IOCTL SUB-FUNCTIONS
 15000                                  IOCTL_GET_DEVICE_INFO	EQU	0
 15001                                  IOCTL_SET_DEVICE_INFO	EQU	1
 15002                                  IOCTL_READ_HANDLE	EQU	2
 15003                                  IOCTL_WRITE_HANDLE	EQU	3
 15004                                  IOCTL_READ_DRIVE	EQU	4
 15005                                  IOCTL_WRITE_DRIVE	EQU	5
 15006                                  IOCTL_GET_INPUT_STATUS	EQU	6
 15007                                  IOCTL_GET_OUTPUT_STATUS EQU	7
 15008                                  IOCTL_CHANGEABLE?	EQU	8
 15009                                  IOCTL_SHARING_RETRY	EQU	11
 15010                                  GENERIC_IOCTL_HANDLE	EQU	12
 15011                                  GENERIC_IOCTL		EQU	13
 15012                                  
 15013                                  ; GENERIC IOCTL SUB-FUNCTIONS
 15014                                  RAWIO			EQU	8
 15015                                  
 15016                                  ; RAWIO SUB-FUNCTIONS
 15017                                  GET_DEVICE_PARAMETERS	EQU	60H
 15018                                  SET_DEVICE_PARAMETERS	EQU	40H
 15019                                  READ_TRACK		EQU	61H
 15020                                  WRITE_TRACK		EQU	41H
 15021                                  VERIFY_TRACK		EQU	62H
 15022                                  FORMAT_TRACK		EQU	42H
 15023                                  
 15024                                  ; DEVICETYPE VALUES
 15025                                  MAX_SECTORS_IN_TRACK	EQU	63
 15026                                  DEV_5INCH		EQU	0
 15027                                  DEV_5INCH96TPI		EQU	1
 15028                                  DEV_3INCH720KB		EQU	2
 15029                                  DEV_8INCHSS		EQU	3
 15030                                  DEV_8INCHDS		EQU	4
 15031                                  DEV_HARDDISK		EQU	5
 15032                                  DEV_OTHER		EQU	7
 15033                                  ;DEV_3INCH1440KB	EQU	7
 15034                                  DEV_3INCH2880KB		EQU	9
 15035                                  ; Retro DOS v2.0 - 26/03/2018
 15036                                  ;;DEV_TAPE		EQU	6
 15037                                  ;;DEV_ERIMO		EQU	8
 15038                                  ;DEV_3INCH2880KB	EQU	9
 15039                                  DEV_3INCH1440KB		EQU	10
 15040                                  
 15041                                  ;MAX_DEV_TYPE		EQU	9	; MAXIMUM DEVICE TYPE THAT WE
 15042                                  					; CURRENTLY SUPPORT.
 15043                                  MAX_DEV_TYPE		EQU	10
 15044                                  
 15045                                  struc A_SECTORTABLE
 15046 00000000 ????                    .ST_SECTORNUMBER:	resw	1
 15047 00000002 ????                    .ST_SECTORSIZE:		resw	1
 15048                                  .size:
 15049                                  endstruc
 15050                                  
 15051                                  ; 25/03/2019 - Retro DOS v4.0  (MSDOS 6.0, BPB.INC, IOCTL.INC)
 15052                                  
 15053                                  ;**	BIOS PARAMETER BLOCK DEFINITION
 15054                                  ;
 15055                                  ;	The BPB contains information about the disk structure.  It dates
 15056                                  ;	back to the earliest FAT systems and so FAT information is
 15057                                  ;	intermingled with physical driver information.
 15058                                  ;
 15059                                  ;	A boot sector contains a BPB for its device; for other disks
 15060                                  ;	the driver creates a BPB.  DOS keeps copies of some of this
 15061                                  ;	information in the DPB.
 15062                                  ;
 15063                                  ;	The BDS structure contains a BPB within it.
 15064                                  
 15065                                  struc A_BPB
 15066 00000000 ????                    .BPB_BYTESPERSECTOR:	resw	1
 15067 00000002 ??                      .BPB_SECTORSPERCLUSTER:	resb	1
 15068 00000003 ????                    .BPB_RESERVEDSECTORS:	resw	1
 15069 00000005 ??                      .BPB_NUMBEROFFATS:	resb	1
 15070 00000006 ????                    .BPB_ROOTENTRIES: 	resw	1
 15071 00000008 ????                    .BPB_TOTALSECTORS:	resw	1
 15072 0000000A ??                      .BPB_MEDIADESCRIPTOR:	resb	1
 15073 0000000B ????                    .BPB_SECTORSPERFAT:	resw	1
 15074 0000000D ????                    .BPB_SECTORSPERTRACK:	resw	1
 15075 0000000F ????                    .BPB_HEADS:		resw	1
 15076 00000011 ????                    .BPB_HIDDENSECTORS:	resw	1
 15077 00000013 ????                    			resw	1
 15078 00000015 ????                    .BPB_BIGTOTALSECTORS:	resw	1
 15079 00000017 ????                    			resw	1
 15080 00000019 ????????????            			resb	6	; NOTE:  many times these
 15081                                  ;					; 	 6 bytes are omitted
 15082                                  ;					;	 when BPB manipulations
 15083                                  ;					;	 are performed!
 15084                                  .size:
 15085                                  endstruc
 15086                                  
 15087                                  struc A_DEVICEPARAMETERS
 15088 00000000 ??                      .DP_SPECIALFUNCTIONS:	resb	1
 15089 00000001 ??                      .DP_DEVICETYPE:		resb	1
 15090 00000002 ????                    .DP_DEVICEATTRIBUTES:	resw	1
 15091 00000004 ????                    .DP_CYLINDERS:		resw	1
 15092 00000006 ??                      .DP_MEDIATYPE:		resb	1
 15093 00000007 <res 1Fh>               .DP_BPB:		resb	A_BPB.size
 15094 00000026 ????                    .DP_TRACKTABLEENTRIES:	resw	1
 15095 00000028 <res FCh>               .DP_SECTORTABLE:	resb	MAX_SECTORS_IN_TRACK * A_SECTORTABLE.size
 15096                                  endstruc
 15097                                  
 15098                                  ; ----------------------------------------------------------------------
 15099                                  ; structure, equates for devmark for mem command.
 15100                                  
 15101                                  ; 25/03/2019 - Retro DOS v4.0 (MSDOS 6.0, DEVMARK.INC, 1991)
 15102                                  
 15103                                  struc devmark
 15104 00000000 ??                       .id:	    resb 1
 15105 00000001 ????                     .seg:	    resw 1
 15106 00000003 ????                     .size:	    resw 1
 15107 00000005 ??????                   .dum:	    resb 3
 15108 00000008 ????????????????         .filename: resb 8
 15109                                  endstruc
 15110                                  
 15111                                  devmark_stk	equ	'S'
 15112                                  devmark_device	equ	'D'
 15113                                  devmark_ifs	equ	'I'
 15114                                  devmark_buf	equ	'B'
 15115                                  devmark_cds	equ	'L' ; lastdrive
 15116                                  devmark_files	equ	'F'
 15117                                  devmark_fcbs	equ	'X'
 15118                                  devmark_inst	equ	'T' ; used for sysinit base for install= command.
 15119                                  devmark_ems_stub equ	'E'
 15120                                  
 15121                                  setbrkdone	equ	00000001b
 15122                                  for_devmark	equ	00000010b
 15123                                  not_for_devmark equ	11111101b
 15124                                  
 15125                                  ; ----------------------------------------------------------------------
 15126                                  ; Memory arena structure
 15127                                  
 15128                                  ; 24/03/2019 - Retro DOS v4.0 
 15129                                  ; (MSDOS 6.0, ARENA.INC)
 15130                                  
 15131                                  ;** Arena Header
 15132                                  
 15133                                  struc ARENA
 15134 00000000 ??                      .SIGNATURE:	resb 1		; 4D for valid item, 5A for last item
 15135 00000001 ????                    .OWNER:		resw 1		; owner of arena item
 15136 00000003 ????                    .SIZE:		resw 1		; size in paragraphs of item
 15137 00000005 ??????                  .RESERVED	resb 3		; reserved
 15138 00000008 ????????????????        .NAME:		resb 8		; owner file name
 15139                                  endstruc
 15140                                  
 15141                                  ; 12/04/2019
 15142                                  
 15143                                  arena_owner_system	EQU 0	; free block indication
 15144                                  
 15145                                  arena_signature_normal	EQU 4Dh ; valid signature, not end of arena
 15146                                  arena_signature_end	EQU 5Ah ; valid signature, last block in arena
 15147                                  
 15148                                  ; ----------------------------------------------------------------------
 15149                                  ; Process data block (otherwise known as program header)
 15150                                  
 15151                                  ; 23/03/2019 - Retro DOS v4.0
 15152                                  
 15153                                  ; (MSDOS 6.0 - PDB.INC, 1991)
 15154                                  
 15155                                  FILPERPROC	EQU     20
 15156                                  
 15157                                  struc PDB	; Process_data_block
 15158 00000000 ????                    .EXIT_CALL:	resw 1   	; INT int_abort system terminate
 15159 00000002 ????                    .BLOCK_LEN:	resw 1		; size of execution block
 15160 00000004 ??                                      resb 1
 15161 00000005 ??????????              .CPM_CALL:	resb 5		; ancient call to system
 15162 0000000A ????????                .EXIT:		resd 1		; pointer to exit routine
 15163 0000000E ????????                .CTRL_C:	resd 1		; pointer to ^C routine
 15164 00000012 ????????                .FATAL_ABORT:	resd 1		; pointer to fatal error
 15165 00000016 ????                    .PARENT_PID:	resw 1		; PID of parent (terminate PID)
 15166 00000018 <res 14h>               .JFN_TABLE:     resb FILPERPROC ; indices into system table
 15167 0000002C ????                    .ENVIRON:	resw 1		; seg addr of environment
 15168 0000002E ????????                .USER_STACK:	resd 1		; stack of self during system calls
 15169 00000032 ????                    .JFN_LENGTH:	resw 1 		; number of handles allowed
 15170 00000034 ????????                .JFN_POINTER:	resd 1 		; pointer to JFN table
 15171 00000038 ????????                .NEXT_PDB:	resd 1		; pointer to nested PDB's
 15172 0000003C ??                      .INTERCON:	resb 1 		; *** jh-3/28/90 ***
 15173 0000003D ??                      .APPEND:	resb 1		; *** Not sure if still used ***
 15174 0000003E ????                    .NOVELL_USED:	resb 2		; Novell shell (redir) uses these
 15175 00000040 ????                    .VERSION:	resw 1		; DOS version reported to this app
 15176 00000042 <res Eh>                .PAD1:		resb 14		; 	
 15177 00000050 ??????????              .CALL_SYSTEM:	resb 5		; portable method of system call
 15178 00000055 ??????????????          .PAD2:		resb 7 		; reserved so FCB 1 can be used as an extended FCB
 15179 0000005C <res 10h>               .FCB1:		resb 16		; default FCB 1
 15180 0000006C <res 10h>               .FCB2:		resb 16		; default FCB 2
 15181 0000007C ????????                .PAD3:		resb 4		; not sure if this is used by PDB_FCB2
 15182 00000080 <res 80h>               .TAIL:		resb 128	; command tail and default DTA
 15183                                  ;.size:
 15184                                  endstruc
 15185                                  
 15186                                  ; ----------------------------------------------------------------------
 15187                                  ; <system call definitions>
 15188                                  
 15189                                  ; 23/03/2019 - Retro DOS v4.0
 15190                                  
 15191                                  ; (MSDOS 6.0 - SYSCALL.INC, 1991)
 15192                                  
 15193                                  ABORT                           EQU 0   ;  0      0
 15194                                  STD_CON_INPUT                   EQU 1   ;  1      1
 15195                                  STD_CON_OUTPUT                  EQU 2   ;  2      2
 15196                                  STD_AUX_INPUT                   EQU 3   ;  3      3
 15197                                  STD_AUX_OUTPUT                  EQU 4   ;  4      4
 15198                                  STD_PRINTER_OUTPUT              EQU 5   ;  5      5
 15199                                  RAW_CON_IO                      EQU 6   ;  6      6
 15200                                  RAW_CON_INPUT                   EQU 7   ;  7      7
 15201                                  STD_CON_INPUT_NO_ECHO           EQU 8   ;  8      8
 15202                                  STD_CON_STRING_OUTPUT           EQU 9   ;  9      9
 15203                                  STD_CON_STRING_INPUT            EQU 10  ; 10      A
 15204                                  STD_CON_INPUT_STATUS            EQU 11  ; 11      B
 15205                                  STD_CON_INPUT_FLUSH             EQU 12  ; 12      C
 15206                                  DISK_RESET                      EQU 13  ; 13      D
 15207                                  SET_DEFAULT_DRIVE               EQU 14  ; 14      E
 15208                                  FCB_OPEN                        EQU 15  ; 15      F
 15209                                  FCB_CLOSE                       EQU 16  ; 16     10
 15210                                  DIR_SEARCH_FIRST                EQU 17  ; 17     11
 15211                                  DIR_SEARCH_NEXT                 EQU 18  ; 18     12
 15212                                  FCB_DELETE                      EQU 19  ; 19     13
 15213                                  FCB_SEQ_READ                    EQU 20  ; 20     14
 15214                                  FCB_SEQ_WRITE                   EQU 21  ; 21     15
 15215                                  FCB_CREATE                      EQU 22  ; 22     16
 15216                                  FCB_RENAME                      EQU 23  ; 23     17
 15217                                  GET_DEFAULT_DRIVE               EQU 25  ; 25     19
 15218                                  SET_DMA                         EQU 26  ; 26     1A
 15219                                  GET_DEFAULT_DPB                 EQU 31  ; 31     1F
 15220                                  FCB_RANDOM_READ                 EQU 33  ; 33     21
 15221                                  FCB_RANDOM_WRITE                EQU 34  ; 34     22
 15222                                  GET_FCB_FILE_LENGTH             EQU 35  ; 35     23
 15223                                  GET_FCB_POSITION                EQU 36  ; 36     24
 15224                                  SET_INTERRUPT_VECTOR            EQU 37  ; 37     25
 15225                                  CREATE_PROCESS_DATA_BLOCK       EQU 38  ; 38     26
 15226                                  FCB_RANDOM_READ_BLOCK           EQU 39  ; 39     27
 15227                                  FCB_RANDOM_WRITE_BLOCK          EQU 40  ; 40     28
 15228                                  PARSE_FILE_DESCRIPTOR           EQU 41  ; 41     29
 15229                                  GET_DATE                        EQU 42  ; 42     2A
 15230                                  SET_DATE                        EQU 43  ; 43     2B
 15231                                  GET_TIME                        EQU 44  ; 44     2C
 15232                                  SET_TIME                        EQU 45  ; 45     2D
 15233                                  SET_VERIFY_ON_WRITE             EQU 46  ; 46     2E
 15234                                  ; Extended functionality group
 15235                                  GET_DMA                         EQU 47  ; 47     2F
 15236                                  GET_VERSION                     EQU 48  ; 48     30
 15237                                  KEEP_PROCESS                    EQU 49  ; 49     31
 15238                                  GET_DPB                         EQU 50  ; 50     32
 15239                                  SET_CTRL_C_TRAPPING             EQU 51  ; 51     33
 15240                                  GET_INDOS_FLAG                  EQU 52  ; 52     34
 15241                                  GET_INTERRUPT_VECTOR            EQU 53  ; 53     35
 15242                                  GET_DRIVE_FREESPACE             EQU 54  ; 54     36
 15243                                  CHAR_OPER                       EQU 55  ; 55     37
 15244                                  INTERNATIONAL                   EQU 56  ; 56     38
 15245                                  ;   Directory Group
 15246                                  MKDIR                           EQU 57  ; 57     39
 15247                                  RMDIR                           EQU 58  ; 58     3A
 15248                                  CHDIR                           EQU 59  ; 59     3B
 15249                                  ;   File Group
 15250                                  CREAT                           EQU 60  ; 60     3C
 15251                                  OPEN                            EQU 61  ; 61     3D
 15252                                  CLOSE                           EQU 62  ; 62     3E
 15253                                  READ                            EQU 63  ; 63     3F
 15254                                  WRITE                           EQU 64  ; 64     40
 15255                                  UNLINK                          EQU 65  ; 65     41
 15256                                  LSEEK                           EQU 66  ; 66     42
 15257                                  CHMOD                           EQU 67  ; 67     43
 15258                                  IOCTL                           EQU 68  ; 68     44
 15259                                  XDUP                            EQU 69  ; 69     45
 15260                                  XDUP2                           EQU 70  ; 70     46
 15261                                  CURRENT_DIR                     EQU 71  ; 71     47
 15262                                  ;    Memory Group
 15263                                  ALLOC                           EQU 72  ; 72     48
 15264                                  DEALLOC                         EQU 73  ; 73     49
 15265                                  SETBLOCK                        EQU 74  ; 74     4A
 15266                                  ;    Process Group
 15267                                  EXEC                            EQU 75  ; 75     4B
 15268                                  EXIT                            EQU 76  ; 76     4C
 15269                                  WAITPROCESS			EQU 77  ; 77     4D
 15270                                  FIND_FIRST                      EQU 78  ; 78     4E
 15271                                  ;   Special Group
 15272                                  FIND_NEXT                       EQU 79  ; 79     4F
 15273                                  ; SPECIAL SYSTEM GROUP
 15274                                  SET_CURRENT_PDB                 EQU 80  ; 80     50
 15275                                  GET_CURRENT_PDB                 EQU 81  ; 81     51
 15276                                  GET_IN_VARS                     EQU 82  ; 82     52
 15277                                  SETDPB                          EQU 83  ; 83     53
 15278                                  GET_VERIFY_ON_WRITE             EQU 84  ; 84     54
 15279                                  DUP_PDB                         EQU 85  ; 85     55
 15280                                  RENAME                          EQU 86  ; 86     56
 15281                                  FILE_TIMES                      EQU 87  ; 87     57
 15282                                  ;
 15283                                  ALLOCOPER			EQU 88	; 88     58	
 15284                                  ; Network extention system calls
 15285                                  GetExtendedError		EQU 89	; 89	 59
 15286                                  CreateTempFile			EQU 90	; 90	 5A
 15287                                  CreateNewFile			EQU 91	; 91	 5B
 15288                                  LockOper			EQU 92	; 92	 5C Lock and Unlock
 15289                                  ServerCall			EQU 93	; 93	 5D CommitAll, ServerDOSCall,
 15290                                  					;	    CloseByName, CloseUser,
 15291                                  					;	    CloseUserProcess,
 15292                                  					;	    GetOpenFileList
 15293                                  UserOper			EQU 94	; 94	 5E Get and Set
 15294                                  AssignOper			EQU 95	; 95	 5F On, Off, Get, Set, Cancel
 15295                                  xNameTrans			EQU 96	; 96	 60
 15296                                  PathParse			EQU 97	; 97	 61
 15297                                  GetCurrentPSP			EQU 98	; 98	 62
 15298                                  Hongeul 			EQU 99	; 99	 63
 15299                                  ECS_CALL			EQU 99	; 99	 63  ;; DBCS support
 15300                                  Set_Printer_Flag		EQU 100 ; 100	 64
 15301                                  GetExtCntry			EQU 101 ; 101	 65
 15302                                  GetSetCdPg			EQU 102 ; 102	 66
 15303                                  ExtHandle			EQU 103 ; 103	 67
 15304                                  Commit				EQU 104 ; 104	 68
 15305                                  GetSetMediaID			EQU 105 ; 105	 69
 15306                                  IFS_IOCTL			EQU 107 ; 107	 6B
 15307                                  ExtOpen 			EQU 108 ; 108	 6C
 15308                                  ;
 15309                                  ;ifdef ROMEXEC
 15310                                  ;ROM_FIND_FIRST			EQU 109 ; 109    6D
 15311                                  ;ROM_FIND_NEXT			EQU 110 ; 110    6E
 15312                                  ;ROM_EXCLUDE			EQU 111 ; 111	 6F
 15313                                  ;endif
 15314                                  ;
 15315                                  Set_Oem_Handler 		EQU 248 ; 248	 F8
 15316                                  OEM_C1				EQU 249 ; 249	 F9
 15317                                  OEM_C2				EQU 250 ; 250	 FA
 15318                                  OEM_C3				EQU 251 ; 251	 FB
 15319                                  OEM_C4				EQU 252 ; 252	 FC
 15320                                  OEM_C5				EQU 253 ; 253	 FD
 15321                                  OEM_C6				EQU 254 ; 254	 FE
 15322                                  OEM_C7				EQU 255 ; 255	 FF
 15323                                  
 15324                                  ; ----------------------------------------------------------------------
 15325                                  ; SYSCONF.ASM (MSDOS 3.3 - 24/07/1987) 	
 15326                                  ; ----------------------------------------------------------------------
 15327                                  
 15328                                  ;;	IF	STACKSW
 15329                                  
 15330                                  ;;
 15331                                  ;; Internal Stack Parameters
 15332                                  ;EntrySize		equ	8
 15333                                  ;
 15334                                  ;MinCount		equ	8
 15335                                  ;DefaultCount		equ	9
 15336                                  ;MaxCount		equ	64
 15337                                  ;
 15338                                  ;MinSize 		equ	32
 15339                                  ;DefaultSize		equ	128
 15340                                  ;MaxSize 		equ	512
 15341                                  
 15342                                  ;;	ENDIF
 15343                                  
 15344                                  ; ----------------------------------------------------------------------
 15345                                  ; BIOSTRUC.INC (MSDOS 3.3 - 24/07/1987) 	
 15346                                  ; ----------------------------------------------------------------------
 15347                                  					  ;;Rev 3.30 Modification
 15348                                  ; ROM BIOS CALL PACKET STRUCTURES					  
 15349                                  									  
 15350                                  ;*******************************					  
 15351                                  ;System Service call ( Int 15h )					  
 15352                                  ;*******************************					  
 15353                                  ;Function AH = 0C0h, Return system configuration			  
 15354                                  ;For PC and PCJR on return:						  
 15355                                  ;	(AH)	= 80h							  
 15356                                  ;	(CY)	= 1							  
 15357                                  ;For PCXT, PC PORTABLE and PCAT on return:				  
 15358                                  ;	(AH)	= 86h							  
 15359                                  ;	(CY)	= 1							  
 15360                                  ;For all others:							  
 15361                                  ;	(AH)	= 0							  
 15362                                  ;	(CY)	= 0							  
 15363                                  ;	(ES:BX) = pointer to system descriptor vector in ROS		  
 15364                                  ; System descriptor :							  
 15365                                  ;	DW	xxxx		length of descriptor in bytes,		  
 15366                                  ;				minimum length = 8			  
 15367                                  ;	DB	xx		model byte				  
 15368                                  ;				0FFh	= PC				  
 15369                                  ;				0FEh	= PC/XT, Portable		  
 15370                                  ;				0FDh	= PC/JR 			  
 15371                                  ;				0FCh	= PC/AT				  
 15372                                  ;				0F9h	= Convertable			  
 15373                                  ;				0F8h	= Model 80			  
 15374                                  ;				0E0 thru 0EFh = reserved		  
 15375                                  ;									  
 15376                                  ;	DB	xx		secondary model byte			  
 15377                                  ;				000h	= PC1				  
 15378                                  ;				000h	= PC/XT, Portable		  
 15379                                  ;				000h	= PC/JR 			  
 15380                                  ;				000h	= PC/AT 			  
 15381                                  ;				001h	= PC/AT Model 339		  
 15382                                  ;				003h	= PC/RT				  
 15383                                  ;				000h	= Convertable			  
 15384                                  ;									  
 15385                                  ;	DB	xx		bios revision level			  
 15386                                  ;				00 for first release, subsequent release  
 15387                                  ;				of code with same model byte and	  
 15388                                  ;				secondary model byte require revison level
 15389                                  ;				to increase by one.			  
 15390                                  ;									  
 15391                                  ;	DB	xx		feature information byte 1		  
 15392                                  ;				X0000000 = 1, bios use DMA channel 3	  
 15393                                  ;					 = 0, DMA channel 3 not used	  
 15394                                  ;									  
 15395                                  ;				0X000000 = 1, 2nd Interrupt chip present  
 15396                                  ;					 = 0, 2nd Interrupt chip not present
 15397                                  ;									  
 15398                                  ;				00X00000 = 1, Real Time Clock present	  
 15399                                  ;					 = 0, Real Time Clock not present 
 15400                                  ;									  
 15401                                  ;				000X0000 = 1, Keyboard escape sequence(INT 15h)
 15402                                  ;						called in keyboard interrupt
 15403                                  ;						(Int 09h).		  
 15404                                  ;					 = 0, Keyboard escape sequence not
 15405                                  ;						called. 		  
 15406                                  ;				0000XXXX reserved			  
 15407                                  ;									  
 15408                                  ;	DB	xx		feature information byte 2 - reserved	  
 15409                                  ;									  
 15410                                  ;	DB	xx		feature information byte 2 - reserved	  
 15411                                  ;									  
 15412                                  ;	DB	xx		feature information byte 2 - reserved	  
 15413                                  ;									  
 15414                                  ;	DB	xx		feature information byte 2 - reserved	  
 15415                                  ;									  
 15416                                  
 15417                                  ; 22/03/2019									  
 15418                                  struc ROMBIOS_DESC		; BIOS_SYSTEM_DESCRIPTOR						  
 15419 00000000 ????                    .bios_sd_leng:		resw 1				  
 15420 00000002 ??                      .bios_sd_modelbyte:	resb 1					  
 15421                                  .bios_sd_scnd_modelbyte: 
 15422 00000003 ??                      			resb 1					  
 15423 00000004 ??                      			resb 1					  
 15424 00000005 ??                      .bios_sd_featurebyte1:	resb 1					  
 15425 00000006 ????????                			resb 4					  
 15426                                  endstruc					  
 15427                                  									  
 15428                                  ;FeatureByte1	bit map equates 					  
 15429                                  DMAchannel3		equ 10000000b					  
 15430                                  ScndIntController	equ 01000000b					  
 15431                                  RealTimeClock		equ 00100000b					  
 15432                                  KeyEscapeSeq		equ 00010000b					  
 15433                                  					;;End of Modification
 15434                                  
 15435                                  ; ----------------------------------------------------------------------
 15436                                  ; SYSVAR.INC (MSDOS 6.0 - 1991) 	
 15437                                  ; ----------------------------------------------------------------------
 15438                                  ; 22/03/2019 - Retro DOS v4.0
 15439                                  
 15440                                  ;	SCCSID = @(#)sysvar.asm 1.1 85/04/10
 15441                                  
 15442                                  struc SysInitVars
 15443                                  ; MSDOS 3.3
 15444 00000000 ????????                .SYSI_DPB:    resd 1			; DPB chain
 15445 00000004 ????????                .SYSI_SFT:    resd 1			; SFT chain
 15446 00000008 ????????                .SYSI_CLOCK:  resd 1			; CLOCK device
 15447 0000000C ????????                .SYSI_CON:    resd 1			; CON device
 15448 00000010 ????                    .SYSI_MAXSEC: resw 1			; maximum sector size
 15449 00000012 ????????                .SYSI_BUF:    resd 1			; buffer chain
 15450 00000016 ????????                .SYSI_CDS:    resd 1			; CDS list
 15451 0000001A ????????                .SYSI_FCB:    resd 1			; FCB chain
 15452 0000001E ????                    .SYSI_KEEP:   resw 1			; keep count
 15453 00000020 ??                      .SYSI_NUMIO:  resb 1			; number of block devices
 15454 00000021 ??                      .SYSI_NCDS:   resb 1			; number of CDS's
 15455 00000022 ????????                .SYSI_DEV:    resd 1			; device list
 15456                                  ; MSDOS 6.0
 15457 00000026 ????                    .SYSI_ATTR:	    resw 1		; null device attribute word
 15458 00000028 ????                    .SYSI_STRAT:	    resw 1		; null device strategy entry point
 15459 0000002A ????                    .SYSI_INTER:	    resw 1		; null device interrupt entry point
 15460 0000002C ????????????????        .SYSI_NAME:	    resb 8		; null device name
 15461                                  .SYSI_SPLICE:	    resb 0		; TRUE -> splicees being done
 15462 00000034 ????                    .SYSI_IBMDOS_SIZE:  resw 1		; DOS size in paragraphs
 15463 00000036 ????????                .SYSI_IFS_DOSCALL@: resd 1		; IFS DOS service rountine entry
 15464 0000003A ????????                .SYSI_IFS:	    resd 1	 	; IFS header chain
 15465 0000003E ????????                .SYSI_BUFFERS:	    resw 2		; BUFFERS= values (m,n)
 15466 00000042 ??                      .SYSI_BOOT_DRIVE:   resb 1		; boot drive A=1 B=2,..
 15467 00000043 ??                      .SYSI_DWMOVE:	    resb 1		; 1 if 386 machine
 15468 00000044 ????                    .SYSI_EXT_MEM:	    resw 1		; Extended memory size in KB.
 15469                                  .size:
 15470                                  endstruc
 15471                                  
 15472                                  ;This is added for more information exchage between DOS, BIOS.
 15473                                  ;DOS will give the pointer to SysInitTable in ES:DI. - J.K. 5/29/86
 15474                                  
 15475                                  ; 22/03/2019
 15476                                  struc SysInitVars_Ext
 15477 00000000 ????????                .SYSI_InitVars:	   resd 1	; Points to the above structure.
 15478 00000004 ????????                .SYSI_Country_Tab: resd 1	; DOS_Country_cdpg_info
 15479                                  endstruc
 15480                                  
 15481                                  ; 09/06/2018
 15482                                  ; 08/06/2018 - Retro DOS v3.0 (MSDOS 3.3)
 15483                                  SYSI_DPB    equ	0
 15484                                  SYSI_SFT    equ 4
 15485                                  SYSI_CLOCK  equ 8
 15486                                  SYSI_CON    equ 12
 15487                                  SYSI_MAXSEC equ 16
 15488                                  SYSI_BUF    equ 18 		
 15489                                  SYSI_CDS    equ 22
 15490                                  SYSI_FCB    equ 26
 15491                                  SYSI_KEEP   equ 30
 15492                                  SYSI_NUMIO  equ	32
 15493                                  SYSI_NCDS   equ	33
 15494                                  SYSI_DEV    equ 34
 15495                                  ; 22/03/2019 - Retro DOS v4.0 (MSDOS 6.0)
 15496                                  SYSI_ATTR	  equ 38
 15497                                  SYSI_STRAT	  equ 40
 15498                                  SYSI_INTER	  equ 42
 15499                                  SYSI_NAME	  equ 44
 15500                                  SYSI_SPLICE	  equ 52
 15501                                  SYSI_IBMDOS_SIZE  equ 53
 15502                                  SYSI_IFS_DOSCALL@ equ 55
 15503                                  SYSI_IFS	  equ 59
 15504                                  SYSI_BUFFERS	  equ 63
 15505                                  SYSI_BOOT_DRIVE   equ 67
 15506                                  SYSI_DWMOVE	  equ 68
 15507                                  SYSI_EXT_MEM	  equ 69
 15508                                  
 15509                                  ;The SYSI_BUF of SysInitVars points to the following structure
 15510                                  
 15511                                  EMS_MAP_BUFF_SIZE EQU 12	; EMS map buffer size
 15512                                  
 15513                                  struc BUFFINF 	; BUFFINFO
 15514 00000000 ????????                .Buff_Queue:	   resd	1	; Head of list of buffers
 15515 00000004 ????                    .Dirty_Buff_Count: resw 1	; number of dirty buffers in list
 15516 00000006 ????????                .Cache_ptr:	   resd 1	; pointer to secondary cache
 15517 0000000A ????                    .Cache_count:      resw 1	; number of secondary cache entries
 15518                                  
 15519 0000000C ??                      .Buff_In_HMA:	   resb 1	; flag to indicate that buffers
 15520                                  				; are in HMA
 15521 0000000D ????????                .Lo_Mem_Buff:	   resd 1	; Ptr to scratch buff in Low Mem
 15522                                  				;  used to read/write on disks
 15523 00000011 ????????                .UU_EMS_FIRST_PAGE:	resw 2
 15524 00000015 ????                    .UU_EMS_NPA640:		resw 1
 15525 00000017 ??                      .UU_EMS_mode:		resb 1	 ; no EMS = -1
 15526 00000018 ????                    .UU_EMS_handle:		resw 1	 ; EMS handle for buffers
 15527 0000001A ????                    .UU_EMS_PageFrame_Number: resw 1 ; EMS page frame number
 15528 0000001C ????                    .UU_EMS_Seg_Cnt:	resw 1	 ; EMS segment count
 15529 0000001E ????                    .UU_EMS_Page_Frame:	resw 1	 ; EMS page frame segment address
 15530 00000020 ????                    .UU_EMS_reserved:	resw 1	 ; EMS segment count
 15531 00000022 ??                      .UU_EMS_Map_Buff:	resb 1	 ; map buffer
 15532                                  .size:
 15533                                  endstruc
 15534                                  
 15535                                  ; ----------------------------------------------------------------------
 15536                                  ; CURDIR.INC (MSDOS 6.0 - 1991) 	
 15537                                  ; ----------------------------------------------------------------------
 15538                                  ; 22/03/2019 - Retro DOS v4.0
 15539                                  
 15540                                  ;**	CDS - Current Directory Structure
 15541                                  ;
 15542                                  ; CDS items are used bu the internal routines to store cluster numbers and
 15543                                  ; network identifiers for each logical name.  The ID field is used dually,
 15544                                  ; both as net ID and for a cluster number for local devices. In the case
 15545                                  ; of local devices, the cluster number will be -1 if there is a potential
 15546                                  ; of the disk being changed or if the path must be recracked.
 15547                                  ;
 15548                                  ;	Some pathnames have special preambles, such as
 15549                                  ;
 15550                                  ;		\\machine\sharename\...
 15551                                  ;	For these pathnames we can't allow ".." processing to back us
 15552                                  ;	up into the special front part of the name.  The CURDIR_END field
 15553                                  ;	holds the address of the seperator character which marks
 15554                                  ;	the split between the special preamble and the regular
 15555                                  ;	path list; ".." processing isn't allowed to back us up past
 15556                                  ;	(i.e., before) CURDIR_END
 15557                                  ;	For the root, it points at the leading /. For net
 15558                                  ;	assignments it points at the end (nul) of the initial assignment:
 15559                                  ;	A:/	\\foo\bar	    \\foo\bar\blech\bozo
 15560                                  ;	  ^		 ^		     ^
 15561                                  
 15562                                  DIRSTRLEN	EQU	64+3		; Max length in bytes of directory strings
 15563                                  TEMPLEN 	EQU	DIRSTRLEN*2
 15564                                  
 15565                                  struc 		curdir_list
 15566                                  ; MSDOS 3.3
 15567 00000000 <res 43h>               .cdir_text	resb	DIRSTRLEN	; text of assignment and curdir
 15568 00000043 ????                    .cdir_flags	resw	1		; various flags
 15569 00000045 ????????                .cdir_devptr	resd	1		; local pointer to DPB or net device
 15570 00000049 ????????                .cdir_ID	resw	2		; cluster of current dir (net ID)
 15571 0000004D ????                    .cdir_usr_word	resw	1
 15572 0000004F ????                    .cdir_end	resw	1		; end of assignment
 15573                                  ; MSDOS 6.0
 15574 00000051 ??                      .cdir_type:	resb	1		; IFS drive (2=ifs, 4=netuse)
 15575 00000052 ????????                .cdir_ifd_hdr:	resd	1		; Ptr to File System Header
 15576 00000056 ????                    .cdir_fsda:	resb	2		; File System Dependent Data Area
 15577                                  .size:
 15578                                  endstruc
 15579                                  
 15580                                  curdirlen	EQU	curdir_list.size	; Needed for screwed up
 15581                                  						; ASM87 which doesn't allow
 15582                                  						; Size directive as a macro
 15583                                  						; argument
 15584                                  %define curdir_netID	dword [curdir_list.cdir_ID]
 15585                                  
 15586                                  ;**	Flag values for CURDIR_FLAGS
 15587                                  
 15588                                  ;Flag word masks
 15589                                  curdir_isnet	EQU	1000000000000000B
 15590                                  curdir_isifs	EQU	1000000000000000B
 15591                                  curdir_inuse	EQU	0100000000000000B
 15592                                  curdir_splice	EQU	0010000000000000B
 15593                                  curdir_local	EQU	0001000000000000B
 15594                                  
 15595                                  ; ----------------------------------------------------------------------
 15596                                  ; SF.INC (MSDOS 6.0 - 1991) 	
 15597                                  ; ----------------------------------------------------------------------
 15598                                  ; 25/03/2019 - Retro DOS v4.0
 15599                                  
 15600                                  ; system file table
 15601                                  
 15602                                  ;**	System File Table SuperStructure
 15603                                  ;
 15604                                  ;	The system file table entries are allocated in contiguous groups.
 15605                                  ;	There may be more than one such groups; the SF "superstructure"
 15606                                  ;	tracks the groups.
 15607                                  
 15608                                  struc	SF
 15609 00000000 ????????                .SFLink:	resd	1
 15610 00000004 ????                    .SFCount:	resw	1		; number of entries
 15611 00000006 ????                    .SFTable:	resw	1		; beginning of array of the following
 15612                                  .size:
 15613                                  endstruc
 15614                                  
 15615                                  ;**	System file table entry
 15616                                  ;
 15617                                  ;	These are the structures which are at SFTABLE in the SF structure.
 15618                                  
 15619                                  struc	SF_ENTRY
 15620 00000000 ????                    .sf_ref_count:	resw	1		; number of processes sharing entry
 15621                                  					;   if FCB then ref count
 15622 00000002 ????                    .sf_mode: 	resw	1		; mode of access or high bit on if FCB
 15623 00000004 ??                      .sf_attr: 	resb	1		; attribute of file
 15624 00000005 ????                    .sf_flags:	resw	1		;Bits 8-15
 15625                                  					; Bit 15 = 1 if remote file
 15626                                  					;	 = 0 if local file or device
 15627                                  					; Bit 14 = 1 if date/time is not to be
 15628                                  					;   set from clock at CLOSE.  Set by
 15629                                  					;   FILETIMES and FCB_CLOSE.  Reset by
 15630                                  					;   other reseters of the dirty bit
 15631                                  					;   (WRITE)
 15632                                  					; Bit 13 = Pipe bit (reserved)
 15633                                  					;
 15634                                  					; Bits 0-7 (old FCB_devid bits)
 15635                                  					; If remote file or local file, bit
 15636                                  					; 6=0 if dirty Device ID number, bits
 15637                                  					; 0-5 if local file.
 15638                                  					; bit 7=0 for local file, bit 7
 15639                                  					;      =1 for local I/O device
 15640                                  					; If local I/O device, bit 6=0 if EOF (input)
 15641                                  					;		Bit 5=1 if Raw mode
 15642                                  					;		Bit 0=1 if console input device
 15643                                  					;		Bit 1=1 if console output device
 15644                                  					;		Bit 2=1 if null device
 15645                                  					;		Bit 3=1 if clock device
 15646 00000007 ????????                .sf_devptr:	resd	1		; Points to DPB if local file, points
 15647                                  					; to device header if local device,
 15648                                  					; points to net device header if
 15649                                  					; remote
 15650 0000000B ????                    .sf_firclus:	resw	1		; First cluster of file (bit 15 = 0)
 15651                                  ;.sf_lstclus:	resw	1 ; *	
 15652 0000000D ????                    .sf_time: 	resw	1		; Time associated with file
 15653 0000000F ????                    .sf_date: 	resw	1		; Date associated with file
 15654 00000011 ????????                .sf_size: 	resd	1		; Size associated with file
 15655 00000015 ????????                .sf_position:	resd	1		; Read/Write pointer or LRU count for FCBs
 15656                                  ;
 15657                                  ; Starting here, the next 7 bytes may be used by the file system to store an
 15658                                  ; ID
 15659                                  ;
 15660 00000019 ????                    .sf_cluspos:	resw	1		; Position of last cluster accessed
 15661 0000001B ????                    .sf_dirsec:	resw	1		; Sector number of directory sector for this file
 15662 0000001D ??                      .sf_dirpos:	resb	1		; Offset of this entry in the above
 15663                                  ;
 15664                                  ; End of 7 bytes of file-system specific info.
 15665                                  ;
 15666 0000001E <res Bh>                .sf_name:	resb	11		; 11 character name that is in the
 15667                                  					; directory entry.  This is used by
 15668                                  					; close to detect file deleted and
 15669                                  					; disk changed errors.
 15670                                  ; SHARING INFO
 15671 00000029 ????????                .sf_chain:	resd	1		; link to next SF
 15672 0000002D ????                    .sf_UID:	resw	1
 15673 0000002F ????                    .sf_PID:	resw	1
 15674 00000031 ????                    .sf_MFT:	resw	1
 15675 00000033 ????                    .sf_lstclus:	resw	1 ; *		; Last cluster accessed
 15676 00000035 ????????                .sf_IFS_HDR:	resd 	1 ; **
 15677                                  .size:
 15678                                  endstruc
 15679                                  
 15680                                  ; ----------------------------------------------------------------------
 15681                                  ; DOSCNTRY.INC (MSDOS 3.3 - 24/07/1987) 	
 15682                                  ; ----------------------------------------------------------------------
 15683                                  ; 11/06/2018 - Retro DOS v3.0
 15684                                  
 15685                                  ;Equates for COUNTRY INFORMATION.
 15686                                  SetCountryInfo		EQU	1	;country info
 15687                                  SetUcase		EQU	2	;uppercase table
 15688                                  SetLcase		EQU	3	;lowercase table (Reserved)
 15689                                  SetUcaseFile		EQU	4	;uppercase file spec table
 15690                                  SetFileList		EQU	5	;valid file character list
 15691                                  SetCollate		EQU	6	;collating sequence
 15692                                  SetDBCS 		EQU	7	;double byte character set
 15693                                  SetALL			EQU	-1	;all the entries
 15694                                  
 15695                                  ;DOS country and code page information table structure.
 15696                                  ;Internally, IBMDOS gives a pointer to this table.
 15697                                  ;IBMBIO, MODE and NLSFUNC modules communicate with IBMDOS through
 15698                                  ;this structure.
 15699                                  
 15700                                  struc country_cdpg_info ; DOS_country_cdpg_info
 15701 00000000 ????????????????        .ccInfo_reserved :	resb	8	;reserved for internal use
 15702 00000008 <res 40h>               .ccPath_CountrySys:	resb	64	;path and filename for country info
 15703 00000048 ????                    .ccSysCodePage:		resw	1	;system code page id
 15704 0000004A ????                    .ccNumber_of_entries:	resw	1 ; dw 5
 15705 0000004C ??                      .ccSetUcase:		resb	1 ; db SetUcase ; = 2
 15706 0000004D ????????                .ccUcase_ptr:		resd	1	;pointer to Ucase table
 15707                                  
 15708 00000051 ??                      .ccSetUcaseFile:	resb	1 ; db SetUcaseFile ; = 4
 15709 00000052 ????????                .ccFileUcase_ptr: 	resd	1	;pointer to File Ucase table
 15710                                  
 15711 00000056 ??                      .ccSetFileList:		resb	1 ; db SetFileList ; = 5
 15712 00000057 ????????                .ccFileChar_ptr:	resd	1	;pointer to File char list table
 15713                                  
 15714 0000005B ??                      .ccSetCollate:		resb	1 ; db SetCollate ; = 6
 15715 0000005C ????????                .ccCollate_ptr:		resd	1	;pointer to collate table
 15716                                  
 15717 00000060 ??                      .ccSetCountryInfo:	resb	1 ; db SetCountryInfo ; = 1
 15718 00000061 ????                    .ccCountryInfoLen:	resw	1	;length of country info
 15719 00000063 ????                    .ccDosCountry:		resw	1	;system country code id
 15720 00000065 ????                    .ccDosCodePage:		resw	1	;system code page id
 15721 00000067 ????                    .ccDFormat:		resw	1	;date format
 15722 00000069 ??????????              .ccCurSymbol:		resb	5 ; db "    ",0
 15723                                  					;5 byte of (currency symbol+0)
 15724 0000006E ????                    .cc1000Sep:		resb	2 ; db " ",0 ;2 byte of (1000 sep. + 0)
 15725 00000070 ????                    .ccDecSep:		resb	2 ; db " ",0 ;2 byte of (Decimal sep. + 0)
 15726 00000072 ????                    .ccDateSep:		resb	2 ; db " ",0 ;2 byte of (date sep. + 0)
 15727 00000074 ????                    .ccTimeSep:		resb 	2 ; db " ",0 ;2 byte of (time sep. + 0)
 15728 00000076 ??                      .ccCFormat:		resb	1 	;currency format flags
 15729 00000077 ??                      .ccCSigDigits:		resb	1	;# of digits in currency
 15730 00000078 ??                      .ccTFormat:		resb	1	;time format
 15731 00000079 ????????                .ccMono_Ptr:		resd	1	;monocase routine entry point
 15732 0000007D ????                    .ccListSep:		resb	2 ; db " ",0 ;data list separator
 15733 0000007F <res Ah>                .ccReserved_area: 	resw	5 ; dw 5 dup(?) ;reserved
 15734                                  .size:
 15735                                  endstruc
 15736                                  
 15737                                  NEW_COUNTRY_SIZE    equ  country_cdpg_info.size - country_cdpg_info.ccDosCountry
 15738                                  
 15739                                  ; ======================================================================
 15740                                  ; retrodos4.s (offset addresses in MSDOS.SYS or RETRODOS.SYS)
 15741                                  ; ======================================================================
 15742                                  ; 21/03/2019 - Retro DOS v4.0
 15743                                  ; 21/10/2022 - Retro DOS v4.0 (MOdified MSDOS 5.0 IO.SYS)
 15744                                  
 15745                                  ;KERNEL_SEGMENT	equ 0070h  ; (IO.SYS loading segment, BIOS_DATA segment)
 15746                                  ; 21/10/2022
 15747                                  DOSBIODATASEG equ 0070h	; (IO.SYS loading segment, BIOS_DATA segment)
 15748                                  ; 22/10/2022
 15749                                  ;DOSBIOCODESEG equ 02C7h ; (MSDOS 5.0 IO.SYS, BIOS_CODE segment)
 15750                                  ; 09/12/2022
 15751                                  DOSBIOCODESEG equ IOSYSCODESEG
 15752                                  
 15753                                  ; Note: These offset addresses must be chanqed when the code 
 15754                                  ; 	in retrodos4.s (MSDOS.SYS) file will be changed.
 15755                                  
 15756                                  ; (following addresses can be verified by searching them in retrodos4.lst) 
 15757                                  
 15758                                  ; 09/12/2022
 15759                                  %if 0
 15760                                  
 15761                                  ; 13/05/2019
 15762                                  
 15763                                  ;IsWin386         equ 08CFh
 15764                                  ;V86_Crit_SetFocus equ 08D0h
 15765                                  ; 21/10/2022
 15766                                  IsWin386          equ 08D0h
 15767                                  V86_Crit_SetFocus equ 08D1h 
 15768                                  
 15769                                  ;seg_reinit	  equ 0772h ; not used in Retro DOS v4.0
 15770                                  ; 21/10/2022 - Retro DOS v4.0 (MOdified MSDOS 5.0 IO.SYS)
 15771                                  seg_reinit	  equ 0032h ; DOSBIOCODESEG:0032h
 15772                                  
 15773                                  ;SysinitPresent	  equ 08FCh
 15774                                  ; 21/10/2022
 15775                                  SysinitPresent	  equ 08FDh
 15776                                  
 15777                                  inHMA		  equ 000Dh
 15778                                  xms		  equ 000Eh
 15779                                  ;FreeHMAPtr	  equ 08F6h
 15780                                  ;multrk_flag	  equ 0533h
 15781                                  ;ec35_flag	  equ 0535h
 15782                                  ;EOT		  equ 012Eh
 15783                                  ; 21/10/2022
 15784                                  FreeHMAPtr	  equ 08F7h
 15785                                  multrk_flag	  equ 052Fh
 15786                                  ec35_flag	  equ 0531h
 15787                                  EOT		  equ 012Ch
 15788                                  
 15789                                  ;NextStack	  equ 08BFh
 15790                                  ;IT_StackLoc	  equ 08C5h
 15791                                  ;IT_StackSize	  equ 08C9h
 15792                                  ; 21/10/2022
 15793                                  NextStack	  equ 08C0h
 15794                                  IT_StackLoc	  equ 08C6h
 15795                                  IT_StackSize	  equ 08CAh
 15796                                  
 15797                                  ;MoveDOSIntoHMA	  equ 08F8h
 15798                                  ; 21/10/2022
 15799                                  MoveDOSIntoHMA	  equ 08F9h
 15800                                  
 15801                                  ;INT19SEM equ 0644h ; 01/05/2019 - retrodos4.lst
 15802                                  ;I19_LST  equ 0645h ; 27/03/2019 - retrodos4.lst
 15803                                  ; 21/10/2022
 15804                                  INT19SEM equ 0640h ; (iosys5.txt)
 15805                                  I19_LST  equ 0641h ; (iosys5.txt)
 15806                                  
 15807                                  %endif
 15808                                  
 15809                                  ; 09/12/2022
 15810                                  seg_reinit equ _seg_reinit
 15811                                  ec35_flag  equ ec35flag		
 15812                                  INT19SEM   equ int19sem
 15813                                  I19_LST    equ i19_lst
 15814                                  
 15815                                  INT19OLD02 equ I19_LST+1 ; 0642h ; 21/10/2022
 15816                                  INT19OLD08 equ I19_LST+6
 15817                                  INT19OLD09 equ I19_LST+11
 15818                                  INT19OLD0A equ I19_LST+16
 15819                                  INT19OLD0B equ I19_LST+21
 15820                                  INT19OLD0C equ I19_LST+26
 15821                                  INT19OLD0D equ I19_LST+31
 15822                                  INT19OLD0E equ I19_LST+36
 15823                                  INT19OLD70 equ I19_LST+41
 15824                                  INT19OLD72 equ I19_LST+46
 15825                                  INT19OLD73 equ I19_LST+51
 15826                                  INT19OLD74 equ I19_LST+56
 15827                                  INT19OLD76 equ I19_LST+61
 15828                                  INT19OLD77 equ I19_LST+66 ; 0683h ; 21/10/2022
 15829                                  
 15830                                  ; 09/12/2022
 15831                                  %if 0
 15832                                  
 15833                                  ;keyrd_func	equ 04E9h
 15834                                  ;keysts_func	equ 04EAh
 15835                                  ;t_switch	equ 04F6h
 15836                                  ; 21/10/2022
 15837                                  keyrd_func	equ 04E5h
 15838                                  keysts_func	equ 04E6h
 15839                                  t_switch	equ 04F2h
 15840                                  
 15841                                  ; 22/10/2022
 15842                                  SYSINITSEG	equ 046Dh  ; SYSINIT segment
 15843                                  BCODE_END	equ (SYSINITSEG-DOSBIOCODESEG)*16 ; = 1A60h
 15844                                  BCODE_START	equ 30h  ; (offset BiosDataWord in DOSBIOCODESEG) 
 15845                                  RE_INIT		equ 089Bh ; (re_init offset in DOSBIODATASEG)
 15846                                  
 15847                                  %endif
 15848                                  
 15849                                  ; 09/12/2022
 15850                                  BCODESTART	equ BIOSDATAWORD
 15851                                  RE_INIT		equ re_init
 15852                                  
 15853                                  ; ----------------------------------------------------------------------
 15854                                  ; CONFIG.INC (MSDOS 6.0 - 1991) 	
 15855                                  ; ----------------------------------------------------------------------
 15856                                  ; 15/04/2019 - Retro DOS v4.0
 15857                                  
 15858                                  CONFIG_BEGIN        equ  '['
 15859                                  CONFIG_BREAK        equ  'C'
 15860                                  CONFIG_BUFFERS      equ  'B'
 15861                                  CONFIG_COMMENT      equ  'Y'
 15862                                  CONFIG_COUNTRY      equ  'Q'
 15863                                  CONFIG_DEVICE       equ  'D'
 15864                                  CONFIG_DEVICEHIGH   equ  'U'
 15865                                  CONFIG_DOS          equ  'H'
 15866                                  CONFIG_DRIVPARM     equ  'P'
 15867                                  CONFIG_FCBS         equ  'X'
 15868                                  CONFIG_FILES        equ  'F'
 15869                                  CONFIG_INCLUDE      equ  'J'
 15870                                  CONFIG_INSTALL      equ  'I'
 15871                                  CONFIG_INSTALLHIGH  equ  'W'
 15872                                  CONFIG_LASTDRIVE    equ  'L'
 15873                                  CONFIG_MENUCOLOR    equ  'R'
 15874                                  CONFIG_MENUDEFAULT  equ  'A'
 15875                                  CONFIG_MENUITEM     equ  'E'
 15876                                  CONFIG_MULTITRACK   equ  'M'
 15877                                  CONFIG_NUMLOCK      equ  'N'
 15878                                  CONFIG_REM          equ  '0'
 15879                                  CONFIG_SEMICOLON    equ  ';'
 15880                                  CONFIG_SET          equ  'V'
 15881                                  CONFIG_SHELL        equ  'S'
 15882                                  CONFIG_STACKS       equ  'K'
 15883                                  CONFIG_SUBMENU      equ  'O'
 15884                                  CONFIG_SWITCHES     equ  '1'
 15885                                  
 15886                                  CONFIG_UNKNOWN      equ  'Z'
 15887                                  
 15888                                  CONFIG_OPTION_QUERY equ 80h
 15889                                  
 15890                                  ; ----------------------------------------------------------------------
 15891                                  ; SYSINIT1.ASM (MSDOS 6.0 - 1991) 	
 15892                                  ; ----------------------------------------------------------------------
 15893                                  ; 21/03/2019 - Retro DOS v4.0
 15894                                  
 15895                                  true	equ	0FFFFh
 15896                                  false	equ	0
 15897                                  cr	equ	13
 15898                                  lf	equ	10
 15899                                  tab	equ	9
 15900                                  
 15901                                  multMULT	   equ	4Ah
 15902                                  multMULTGETHMAPTR  equ	1
 15903                                  multMULTALLOCHMA   equ	2
 15904                                  
 15905                                  ;NOEXEC    equ	FALSE
 15906                                  
 15907                                  stacksw    equ	true	;include switchable hardware stacks
 15908                                  mycds_size equ	88	;size of curdir_list. if it is not
 15909                                  			;the same, then will generate compile error.
 15910                                  
 15911                                  entrysize   equ     8
 15912                                  
 15913                                  mincount    equ     8
 15914                                  defaultcount equ    9
 15915                                  maxcount    equ     64
 15916                                  
 15917                                  minsize     equ     32
 15918                                  defaultsize equ     128
 15919                                  maxsize     equ     512
 15920                                  
 15921                                  ;%define allocbyte  byte [es:bp+0]
 15922                                  ;%define intlevel   byte [es:bp+1]
 15923                                  ;%define savedsp    word [es:bp+2]
 15924                                  ;%define savedss    word [es:bp+4]
 15925                                  ;%define newsp	    word [es:bp+6]
 15926                                  
 15927                                  allocbyte   equ     0
 15928                                  intlevel    equ     1
 15929                                  savedsp     equ     2
 15930                                  savedss     equ     4
 15931                                  newsp       equ     6
 15932                                  
 15933                                  free	    equ     0
 15934                                  allocated   equ     1
 15935                                  overflowed  equ     2
 15936                                  clobbered   equ     3
 15937                                  
 15938                                  ;---------------------------------------
 15939                                  ; external variable defined in ibmbio module for multi-track
 15940                                  
 15941                                  multrk_on equ	10000000b ;user specified mutitrack=on,or system turns
 15942                                  			  ; it on after handling config.sys file as a
 15943                                  			  ; default value,if multrk_flag = multrk_off1.
 15944                                  multrk_off1 equ 00000000b ;initial value. no "multitrack=" command entered.
 15945                                  multrk_off2 equ 00000001b ;user specified multitrack=off.
 15946                                  
 15947                                  ; SYSINITSEG	SEGMENT PUBLIC 'SYSTEM_INIT'
 15948                                  
 15949                                  SYSINIT$:
 15950                                  	;IF	STACKSW 
 15951                                  	; include MSSTACK.INC	;Main stack program and data definitions
 15952                                  	; include STKMES.INC	;Fatal stack error message
 15953                                  	;   public Endstackcode
 15954                                  ;Endstackcode	label byte
 15955                                  	;ENDIF
 15956                                  
 15957                                  ; 05/07/2018
 15958                                  ; ----------------------------------------------------------------------
 15959                                  ; 04/06/2018 - Retro DOS v3.0
 15960                                  
 15961                                  ; ----------------------------------------------------------------------
 15962                                  ; 21/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS - SYSINIT)
 15963                                  ; ----------------------------------------------------------------------
 15964                                  
 15965                                  ;	MSStack.inc
 15966                                  ;
 15967                                  ;	Interrupt level 2, 3, 4, 5, 6, 7,(10, 11, 12, 14, 15 - AT level)
 15968                                  ;	should follow the standard Interrupt Sharing Scheme which has
 15969                                  ;	a standard header structure.
 15970                                  ;	Fyi, the following shows the relations between
 15971                                  ;	the interrupt vector and interrupt level.
 15972                                  ; VEC(Hex)    2  8  9  A  B  C	D  E  70  72  73  74  76  77
 15973                                  ; LVL(Deci)   9  0  1  2  3  4	5  6   8  10  11  12  14  15
 15974                                  ;	MSSTACK module modifies the following interrupt vectors
 15975                                  ;	to meet the standard Interrupt Sharing standard;
 15976                                  ;	  A, B, C, D, E, 72, 73, 74, 76, 77.
 15977                                  ;	Also, for interrupt level 7 and 15, the FirstFlag in a standard header
 15978                                  ;	should be initialized to indicat whether this interrupt handler is
 15979                                  ;	the first (= 80h) or not.  The FirstFlag entry of INT77h's
 15980                                  ;	program header is initialized in STKINIT.INC module.
 15981                                  ;	FirstFlag is only meaningful for interrupt level 7 and 15.
 15982                                  ;
 15983                                  
 15984                                  ;  User specifies the number of stack elements - default = 9
 15985                                  ;						 minimum = 8
 15986                                  ;						 maximum = 64
 15987                                  ;
 15988                                  ;  Intercepts Asynchronous Hardware Interrupts only
 15989                                  ;
 15990                                  ;  Picks a stack from pool of stacks and switches to it
 15991                                  ;
 15992                                  ;  Calls the previously saved interrupt vector after pushing flags
 15993                                  ;
 15994                                  ;  On return, returns the stack to the stack pool
 15995                                  ;
 15996                                  
 15997                                  ; This is a modification of STACKS:
 15998                                  ; 1. To fix a bug which was causing the program to take up too much space.
 15999                                  ; 2. To dispense stack space from hi-mem first rather than low-mem first.
 16000                                  ;    . Clobbers the stack that got too big instead of innocent stack
 16001                                  ;    . Allows system to work if the only stack that got too big was the most
 16002                                  ;      deeply nested one
 16003                                  ; 3. Disables NMI interrupts while setting the NMI vector.
 16004                                  ; 4. Does not intercept any interupts on a PCjr.
 16005                                  ; 5. Double checks that a nested interrupt didn't get the same stack.
 16006                                  ; 6. Intercepts Ints 70, 72-77 for PC-ATs and other future products
 16007                                  
 16008                                  		;EVEN
 16009                                  ;align 2
 16010                                  		; 21/10/2022
 16011                                  
 16012 00000000 0000                    		dw	0	; spare field but leave these in order
 16013 00000002 0000                    stackcount:	dw	0
 16014 00000004 0000                    stackat: 	dw	0
 16015 00000006 0000                    stacksize:	dw	0
 16016 00000008 0000                    stacks:		dw	0
 16017 0000000A 0000                    		dw	0
 16018                                  
 16019 0000000C [0800]                  firstentry:	dw	stacks
 16020 0000000E [4800]                  lastentry:	dw	stacks+(defaultcount*entrysize)-entrysize
 16021 00000010 [4800]                  nextentry:	dw	stacks+(defaultcount*entrysize)-entrysize
 16022                                  
 16023                                  ;***********************************************************************
 16024                                  ; THESE ARE THE INDIVIDUAL INTERRUPT HANDLERS
 16025                                  
 16026                                  ; ----------------------------------------------------------------------
 16027                                  
 16028 00000012 00000000                old02:	dd	0
 16029                                  
 16030                                  int02:
 16031                                  
 16032                                  ; *********************************************************************
 16033                                  ;
 16034                                  ; this is special support for the pc convertible / nmi handler
 16035                                  ;
 16036                                  ;	on the pc convertible, there is a situation where an nmi can be 
 16037                                  ;	caused by using the "out" instructions to certain ports. when this
 16038                                  ;	occurs, the pc convertible hardware *guarantees* that **nothing** 
 16039                                  ;	can stop the nmi or interfere with getting to the nmi handler. this
 16040                                  ;	includes other type of interrupts (hardware and software), and
 16041                                  ;	also includes other type of nmi's. when any nmi has occured,
 16042                                  ;	no other interrtupt (hardware, software or nmi) can occur until
 16043                                  ;	the software takes specific steps to allow further interrupting.
 16044                                  ;
 16045                                  ;	for pc convertible, the situation where the nmi is generated by the
 16046                                  ;	"out" to a control port requires "fixing-up" and re-attempting. in
 16047                                  ;	otherwords, it is actually a "restartable exception". in this
 16048                                  ;	case, the software handler must be able to get to the stack in
 16049                                  ;	order to figure out what instruction caused the problem, where
 16050                                  ;	it was "out"ing to and what value it was "out"ing.  therefore,
 16051                                  ;	we will not switch stacks in this situation. this situation is
 16052                                  ;	detected by interrogating port 62h, and checking for a bit value
 16053                                  ;	of 80h. if set, *****do not switch stacks*****.
 16054                                  ;
 16055                                  ; *********************************************************************
 16056                                  
 16057 00000016 50                      	push	ax
 16058 00000017 06                      	push	es
 16059 00000018 B800F0                  	mov	ax,0F000h
 16060 0000001B 8EC0                    	mov	es,ax
 16061                                  	; 02/11/2022
 16062 0000001D 26803EFEFFF9            	cmp	byte [es:0FFFEh],0F9h ; mdl_convert ; check if convertible
 16063 00000023 07                      	pop	es
 16064 00000024 750C                    	jne	short normal02
 16065                                  
 16066 00000026 E462                    	in	al,62h		; PC/XT PPI port C. Bits:
 16067                                  				; 0-3: values of DIP switches
 16068                                  				; 5: 1=Timer 2 channel out
 16069                                  				; 6: 1=I/O channel check
 16070                                  				; 7: 1=RAM parity check error occurred.
 16071 00000028 A880                    	test	al,80h
 16072 0000002A 7406                    	jz	short normal02
 16073                                  special02:
 16074 0000002C 58                      	pop	ax
 16075 0000002D 2EFF2E[1200]            	jmp	far [cs:old02]
 16076                                  normal02:
 16077 00000032 58                      	pop	ax
 16078 00000033 E81101                  	call	do_int_stacks
 16079 00000036 [1200]                  	dw	old02
 16080                                  
 16081                                  ; ----------------------------------------------------------------------
 16082                                  
 16083 00000038 00000000                old08:	dd	0
 16084                                  
 16085                                  int08:
 16086 0000003C E80801                  	call	do_int_stacks
 16087 0000003F [3800]                  	dw	old08
 16088                                  
 16089                                  ; ----------------------------------------------------------------------
 16090                                  
 16091 00000041 00000000                old09:	dd	0
 16092                                  
 16093                                  int09:
 16094                                  
 16095                                  ; keyboard interrupt must have a three byte jump, a nop and a zero byte
 16096                                  ; as its first instruction for compatibility reasons
 16097                                  
 16098 00000045 EB02                    	jmp	short keyboard_lbl
 16099 00000047 90                      	nop
 16100 00000048 00                      	db	0
 16101                                  
 16102                                  keyboard_lbl:
 16103 00000049 E8FB00                  	call	do_int_stacks
 16104 0000004C [4100]                  	dw	old09
 16105                                  
 16106                                  ; ----------------------------------------------------------------------
 16107                                  
 16108 0000004E 00000000                old70:	dd	0
 16109                                  
 16110                                  int70:
 16111 00000052 E8F200                  	call	do_int_stacks
 16112 00000055 [4E00]                  	dw	old70
 16113                                  
 16114                                  ; ----------------------------------------------------------------------
 16115                                  
 16116                                  ;	irp	a,<0a,0b,0c,0d,0e,72,73,74,76,77>
 16117                                  ;public	int&a
 16118                                  ;public	old&a
 16119                                  ;public	firstflag&a
 16120                                  ;int&a	proc	far
 16121                                  ;	jmp	short entry_int&a&_stk
 16122                                  ;old&a	dd	  0		;forward pointer
 16123                                  ;	dw	  424bh 	;compatible signature for int. sharing
 16124                                  ;firstflag&a db   0		;the firstly hooked.
 16125                                  ;	jmp	short intret_&a	;reset routine. we don't care this.
 16126                                  ;	db	7 dup (0)	;reserved for future.
 16127                                  ;entry_int&a&_stk:
 16128                                  ;	call	do_int_stacks
 16129                                  ;	dw	old&a
 16130                                  ;intret_&a:
 16131                                  ;	iret
 16132                                  ;int&a	endp
 16133                                  ;	endm
 16134                                  
 16135                                  ; ----------------------------------------------------------------------
 16136                                  
 16137                                  int0A:
 16138 00000057 EB10                    	jmp	short entry_int0A_stk
 16139 00000059 00000000                old0A:	dd	0	
 16140 0000005D 4B42                    	dw	424Bh
 16141                                  firstflag0A:
 16142 0000005F 00                      	db	0
 16143 00000060 EB0C                    	jmp	short intret_0A
 16144 00000062 00<rep 7h>              	times	7 db 0
 16145                                  
 16146                                  entry_int0A_stk:
 16147 00000069 E8DB00                  	call	do_int_stacks
 16148 0000006C [5900]                  	dw	old0A
 16149                                  intret_0A:
 16150 0000006E CF                      	iret
 16151                                  
 16152                                  ; ----------------------------------------------------------------------
 16153                                  
 16154                                  int0B:
 16155 0000006F EB10                    	jmp	short entry_int0B_stk
 16156 00000071 00000000                old0B:	dd	0	
 16157 00000075 4B42                    	dw	424Bh
 16158                                  firstflag0B:
 16159 00000077 00                      	db	0
 16160 00000078 EB0C                    	jmp	short intret_0B
 16161 0000007A 00<rep 7h>              	times	7 db 0
 16162                                  
 16163                                  entry_int0B_stk:
 16164 00000081 E8C300                  	call	do_int_stacks
 16165 00000084 [7100]                  	dw	old0B
 16166                                  intret_0B:
 16167 00000086 CF                      	iret
 16168                                  
 16169                                  ; ----------------------------------------------------------------------
 16170                                  
 16171                                  int0C:
 16172 00000087 EB10                    	jmp	short entry_int0C_stk
 16173 00000089 00000000                old0C:	dd	0	
 16174 0000008D 4B42                    	dw	424Bh
 16175                                  firstflag0C:
 16176 0000008F 00                      	db	0
 16177 00000090 EB0C                    	jmp	short intret_0C
 16178 00000092 00<rep 7h>              	times	7 db 0
 16179                                  
 16180                                  entry_int0C_stk:
 16181 00000099 E8AB00                  	call	do_int_stacks
 16182 0000009C [8900]                  	dw	old0C
 16183                                  intret_0C:
 16184 0000009E CF                      	iret
 16185                                  
 16186                                  ; ----------------------------------------------------------------------
 16187                                  
 16188                                  int0D:
 16189 0000009F EB10                    	jmp	short entry_int0D_stk
 16190 000000A1 00000000                old0D:	dd	0	
 16191 000000A5 4B42                    	dw	424Bh
 16192                                  firstflag0D:
 16193 000000A7 00                      	db	0
 16194 000000A8 EB0C                    	jmp	short intret_0D
 16195 000000AA 00<rep 7h>              	times	7 db 0
 16196                                  
 16197                                  entry_int0D_stk:
 16198 000000B1 E89300                  	call	do_int_stacks
 16199 000000B4 [A100]                  	dw	old0D
 16200                                  intret_0D:
 16201 000000B6 CF                      	iret
 16202                                  
 16203                                  ; ----------------------------------------------------------------------
 16204                                  
 16205                                  int0E:
 16206 000000B7 EB10                    	jmp	short entry_int0E_stk
 16207 000000B9 00000000                old0E:	dd	0	
 16208 000000BD 4B42                    	dw	424Bh
 16209                                  firstflag0E:
 16210 000000BF 00                      	db	0
 16211 000000C0 EB0C                    	jmp	short intret_0E
 16212 000000C2 00<rep 7h>              	times	7 db 0
 16213                                  
 16214                                  entry_int0E_stk:
 16215 000000C9 E87B00                  	call	do_int_stacks
 16216 000000CC [B900]                  	dw	old0E
 16217                                  intret_0E:
 16218 000000CE CF                      	iret
 16219                                  
 16220                                  ; ----------------------------------------------------------------------
 16221                                  
 16222                                  int72:
 16223 000000CF EB10                    	jmp	short entry_int72_stk
 16224 000000D1 00000000                old72:	dd	0	
 16225 000000D5 4B42                    	dw	424Bh
 16226                                  firstflag72:
 16227 000000D7 00                      	db	0
 16228 000000D8 EB0C                    	jmp	short intret_72
 16229 000000DA 00<rep 7h>              	times	7 db 0
 16230                                  
 16231                                  entry_int72_stk:
 16232 000000E1 E86300                  	call	do_int_stacks
 16233 000000E4 [D100]                  	dw	old72
 16234                                  intret_72:
 16235 000000E6 CF                      	iret
 16236                                  
 16237                                  ; ----------------------------------------------------------------------
 16238                                  
 16239                                  int73:
 16240 000000E7 EB10                    	jmp	short entry_int73_stk
 16241 000000E9 00000000                old73:	dd	0	
 16242 000000ED 4B42                    	dw	424Bh
 16243                                  firstflag73:
 16244 000000EF 00                      	db	0
 16245 000000F0 EB0C                    	jmp	short intret_73
 16246 000000F2 00<rep 7h>              	times	7 db 0
 16247                                  
 16248                                  entry_int73_stk:
 16249 000000F9 E84B00                  	call	do_int_stacks
 16250 000000FC [E900]                  	dw	old73
 16251                                  intret_73:
 16252 000000FE CF                      	iret
 16253                                  
 16254                                  ; ----------------------------------------------------------------------
 16255                                  
 16256                                  int74:
 16257 000000FF EB10                    	jmp	short entry_int74_stk
 16258 00000101 00000000                old74:	dd	0	
 16259 00000105 4B42                    	dw	424Bh
 16260                                  firstflag74:
 16261 00000107 00                      	db	0
 16262 00000108 EB0C                    	jmp	short intret_74
 16263 0000010A 00<rep 7h>              	times	7 db 0
 16264                                  
 16265                                  entry_int74_stk:
 16266 00000111 E83300                  	call	do_int_stacks
 16267 00000114 [0101]                  	dw	old74
 16268                                  intret_74:
 16269 00000116 CF                      	iret
 16270                                  
 16271                                  ; ----------------------------------------------------------------------
 16272                                  
 16273                                  int76:
 16274 00000117 EB10                    	jmp	short entry_int76_stk
 16275 00000119 00000000                old76:	dd	0	
 16276 0000011D 4B42                    	dw	424Bh
 16277                                  firstflag76:
 16278 0000011F 00                      	db	0
 16279 00000120 EB0C                    	jmp	short intret_76
 16280 00000122 00<rep 7h>              	times	7 db 0
 16281                                  
 16282                                  entry_int76_stk:
 16283 00000129 E81B00                  	call	do_int_stacks
 16284 0000012C [1901]                  	dw	old76
 16285                                  intret_76:
 16286 0000012E CF                      	iret
 16287                                  
 16288                                  ; ----------------------------------------------------------------------
 16289                                  
 16290                                  int77:
 16291 0000012F EB10                    	jmp	short entry_int77_stk
 16292 00000131 00000000                old77:	dd	0	
 16293 00000135 4B42                    	dw	424Bh
 16294                                  firstflag77:
 16295 00000137 00                      	db	0
 16296 00000138 EB0C                    	jmp	short intret_77
 16297 0000013A 00<rep 7h>              	times	7 db 0
 16298                                  
 16299                                  entry_int77_stk:
 16300 00000141 E80300                  	call	do_int_stacks
 16301 00000144 [3101]                  	dw	old77
 16302                                  intret_77:
 16303 00000146 CF                      	iret
 16304                                  
 16305                                  ; ----------------------------------------------------------------------
 16306                                  
 16307                                  ;********************************************************************
 16308                                  ;common routines
 16309                                  ;********************************************************************
 16310                                  
 16311                                  ; do interrupt stack switching. the fake return address holds
 16312                                  ; a pointer to the far-pointer of the actual interrupt
 16313                                  ; service routine
 16314                                  
 16315                                  ; 21/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 SYSINIT)
 16316                                  ; 21/03/2019 - Retro DOS v4.0
 16317                                  
 16318                                  ;allocbyte   equ 0
 16319                                  ;intlevel    equ 1
 16320                                  ;savedsp     equ 2
 16321                                  ;savedss     equ 4
 16322                                  ;newsp       equ 6
 16323                                  
 16324                                  do_int_stacks:
 16325 00000147 50                      	push	ax
 16326 00000148 55                      	push	bp
 16327 00000149 06                      	push	es
 16328 0000014A 2E8E06[0A00]            	mov	es,[cs:stacks+2]	; Get segment of stacks
 16329 0000014F 2E8B2E[1000]            	mov	bp,[cs:nextentry]	; get most likely candidate
 16330 00000154 B001                    	mov	al,allocated ; 1
 16331                                  	; 21/10/2022
 16332                                  	;xchg	[es:bp+allocbyte],al 
 16333                                  	; 11/12/2022
 16334 00000156 26864600                	xchg	[es:bp],al		; grab the entry
 16335 0000015A 3C00                    	cmp	al,free ; 0		; still avail?
 16336 0000015C 754F                    	jne	short notfree02
 16337                                  
 16338 0000015E 2E832E[1000]08          	sub	word [cs:nextentry],entrysize ; set for next interrupt
 16339                                  
 16340                                  found02:
 16341 00000164 26896602                	mov	[es:bp+savedsp],sp	; save sp value
 16342 00000168 268C5604                	mov	[es:bp+savedss],ss	; save ss also
 16343                                  
 16344 0000016C 89E8                    	mov	ax,bp			; temp save of table offset
 16345                                  
 16346 0000016E 268B6E06                	mov	bp,[es:bp+newsp]	; get new SP value
 16347                                  	; 21/10/2022
 16348                                  	;mov	bp,[es:bp+6]
 16349                                  	; 11/12/2022
 16350                                  	;cmp	[es:bp+0],ax	
 16351 00000172 26394600                	cmp	[es:bp],ax		; check for offset into table
 16352 00000176 7542                    	jne	short foundbad02
 16353                                  
 16354                                  	;mov	ax,es			; point ss,sp to the new stack
 16355                                  	;mov	es,bp
 16356                                  	;mov	bp,sp
 16357                                  	;mov	bp,[bp+6]
 16358                                  	;mov	ss,ax
 16359                                  	;mov	sp,es
 16360                                  	;mov	es,ax
 16361                                  	;mov	bp,[cs:bp]
 16362                                  
 16363                                  	; 21/10/2022 (MSDOS 5.0 code SYSINIT code)
 16364 00000178 55                      	push    bp
 16365 00000179 89E5                    	mov     bp,sp
 16366 0000017B 8B4608                  	mov     ax,[bp+8]
 16367 0000017E 5D                      	pop     bp
 16368 0000017F 06                      	push    es
 16369 00000180 17                      	pop     ss
 16370 00000181 89EC                    	mov     sp,bp
 16371 00000183 89C5                    	mov     bp,ax
 16372                                  	; 11/12/2022
 16373                                  	;mov	bp,[cs:bp+0]	
 16374 00000185 2E8B6E00                	mov	bp,[cs:bp]	
 16375                                  
 16376 00000189 9C                      	pushf				; go execute the real interrupt handler
 16377                                  	; 11/12/2022
 16378 0000018A 2EFF5E00                	call	far [cs:bp]		;  which will iret back to here
 16379                                  	; 21/10/2022
 16380                                  	;call	far [cs:bp+0]
 16381                                  
 16382 0000018E 89E5                    	mov	bp,sp			; retrieve the table offset for us
 16383                                  	; 11/12/2022
 16384 00000190 268B6E00                	mov	bp,[es:bp]		;  but leave it on the stack
 16385                                  	; 21/10/2022
 16386                                  	;mov	bp,[es:bp+0]
 16387 00000194 268E5604                	mov	ss,[es:bp+savedss]	; get old stack back
 16388 00000198 268B6602                	mov	sp,[es:bp+savedsp]
 16389                                  
 16390                                  	; 11/12/2022
 16391                                  	;mov	byte [es:bp+allocbyte],free ; free the entry
 16392                                  	; 21/10/2022
 16393 0000019C 26C6460000              	mov	byte [es:bp],free ; 0
 16394 000001A1 2E892E[1000]            	mov	[cs:nextentry],bp	; setup to use next time
 16395                                  
 16396 000001A6 07                      	pop	es
 16397 000001A7 5D                      	pop	bp			; saved on entry
 16398 000001A8 58                      	pop	ax			; saved on entry
 16399 000001A9 83C402                  	add	sp,2
 16400 000001AC CF                      	iret				; done with this interrupt
 16401                                  
 16402                                  notfree02:
 16403 000001AD 3C01                    	cmp	al,allocated		; error flag
 16404 000001AF 7404                    	je	short findnext02	;  no, continue
 16405                                  	; 11/12/2022
 16406                                  	;xchg	[es:bp+allocbyte],al	;  yes, restore error value
 16407                                  	; 21/10/2022
 16408 000001B1 26864600                	xchg	[es:bp],al
 16409                                  
 16410                                  findnext02:
 16411 000001B5 E81200                  	call	longpath
 16412 000001B8 EBAA                    	jmp	short found02
 16413                                  
 16414                                  foundbad02:
 16415 000001BA 2E3B2E[0C00]            	cmp	bp,[cs:firstentry]
 16416 000001BF 72F4                    	jc	short findnext02
 16417 000001C1 89C5                    	mov	bp,ax			; flag this entry
 16418                                  	; 11/12/2022
 16419                                  	;mov	byte [es:bp+allocbyte],clobbered
 16420                                  	; 21/10/2022
 16421 000001C3 26C6460003              	mov	byte [es:bp],clobbered ; 3
 16422 000001C8 EBEB                    	jmp	short findnext02	; keep looking
 16423                                  
 16424                                  ; ----------------------------------------------------------------------
 16425                                  
 16426                                  ; Common routines
 16427                                  
 16428                                  longpath:
 16429                                  	; 21/03/2019
 16430 000001CA 2E8B2E[0E00]            	mov	bp,[cs:lastentry]	; start with last entry in table
 16431                                  lploopp:
 16432                                  	; 11/12/2022
 16433                                  	;cmp	byte [es:bp+allocbyte],free ; is entry free?
 16434                                  	; 21/10/2022
 16435 000001CF 26807E0000              	cmp	byte [es:bp],free
 16436 000001D4 7512                    	jne	short inuse		;  no, try next one
 16437                                  
 16438 000001D6 B001                    	mov	al,allocated
 16439                                  	; 11/12/2022
 16440                                  	;xchg	[es:bp+allocbyte],al	; allocate entry
 16441                                  	; 21/10/2022
 16442 000001D8 26864600                	xchg	[es:bp],al
 16443 000001DC 3C00                    	cmp	al,free 		; is it still free?
 16444 000001DE 7414                    	je	short found		;  yes, go use it
 16445                                  
 16446 000001E0 3C01                    	cmp	al,allocated		; is it other than Allocated or Free?
 16447 000001E2 7404                    	je	short inuse		;  no, check the next one
 16448                                  
 16449                                  	; 11/12/2022
 16450                                  	;mov	[es:bp+allocbyte],al	;  yes, put back the error state
 16451                                  	; 21/10/2022
 16452 000001E4 26884600                	mov	[es:bp],al
 16453                                  inuse:
 16454 000001E8 2E3B2E[0C00]            	cmp	bp,[cs:firstentry]
 16455 000001ED 7406                    	je	short fatal
 16456 000001EF 83ED08                  	sub	bp,entrysize
 16457 000001F2 EBDB                    	jmp	short lploopp
 16458                                  found:
 16459 000001F4 C3                      	retn
 16460                                  fatal:
 16461 000001F5 1E                      	push	ds
 16462 000001F6 B800F0                  	mov	ax,0F000h		;look at the model byte
 16463 000001F9 8ED8                    	mov	ds,ax
 16464 000001FB 803EFEFFF9              	cmp	byte [0FFFEh],0F9h ; mdl_convert ; convertible?
 16465 00000200 1F                      	pop	ds
 16466 00000201 7504                    	jne	short skip_nmis
 16467                                  
 16468 00000203 B007                    	mov	al,07h			; disable pc convertible nmis
 16469 00000205 E672                    	out	72h,al
 16470                                  
 16471                                  skip_nmis:
 16472 00000207 FA                      	cli				; disable and mask
 16473 00000208 B0FF                    	mov	al,0FFh			;   all other ints
 16474 0000020A E621                    	out	021h,al
 16475 0000020C E6A1                    	out	0A1h,al
 16476                                  
 16477 0000020E 8CCE                    	mov	si,cs
 16478 00000210 8EDE                    	mov	ds,si
 16479 00000212 BE[3902]                	mov	si,fatal_msg
 16480                                  ;SR;
 16481                                  ;   We set all foci to this VM to issue the stack failure message
 16482                                  ;
 16483 00000215 50                      	push	ax
 16484 00000216 1E                      	push	ds
 16485                                  	;;mov	ax,Bios_Data ; 0070h
 16486                                  	;mov	ax,KERNEL_SEGMENT ; 0070h
 16487                                  	; 21/10/2022
 16488 00000217 B87000                  	mov	ax,DOSBIODATASEG
 16489 0000021A 8ED8                    	mov	ds,ax
 16490                                  
 16491                                  	;test	byte [08D0h],1 	; (MSDOS 6.21, IO.SYS - SYSINIT:021Eh)
 16492 0000021C F606[CE08]01            	test	byte [IsWin386],1 ; (retrodos4.sys, offset: ****h)
 16493 00000221 1F                      	pop	ds
 16494 00000222 58                      	pop	ax
 16495 00000223 7405                    	jz	short fatal_loop	; win386 not present, continue
 16496                                  
 16497                                  	;;call	far ptr 0070h:08D1h ; (MSDOS 621, IO.SYS - SYSINIT:0227h)
 16498                                  	;call	KERNEL_SEGMENT:V86_Crit_SetFocus ; set focus to this VM
 16499                                  	; 21/10/2022
 16500 00000225 9A[CF08]7000            	call	DOSBIODATASEG:V86_Crit_SetFocus ; 0070h:08D1h
 16501                                  ;
 16502                                  ;SR; We do not bother about the returned status of this call. 
 16503                                  ;
 16504                                  fatal_loop:
 16505 0000022A AC                      	lodsb
 16506 0000022B 3C24                    	cmp	al,'$'
 16507 0000022D 7408                    	je	short fatal_done
 16508                                  
 16509 0000022F B307                    	mov	bl,7
 16510 00000231 B40E                    	mov	ah,14
 16511 00000233 CD10                    	int	10h			; whoops, this enables ints
 16512 00000235 EBF3                    	jmp	short fatal_loop
 16513                                  
 16514                                  fatal_done:
 16515 00000237 EBFE                    	jmp	short fatal_done
 16516                                  
 16517                                  
 16518                                  ; 21/03/2019 - Retro DOS v4.0 (MSDOS 6.0, SYSINIT1.ASM, 1991)
 16519                                  ; ----------------------------------------------------------------------
 16520                                  ;	include msbio.cl5		; fatal stack error message
 16521                                  
 16522                                  ; MSDOS 6.21, IO.SYS, SYSINIT:023Bh
 16523                                  
 16524                                  ; STKMES.INC - MSDOS 3.3 (24/07/1987)
 16525                                  ; ----------------------------------------------------------------------
 16526                                  ; 04/06/2018 - Retro DOS v3.0
 16527                                  
 16528                                  fatal_msg:
 16529 00000239 0D0A                    	db	0Dh,0Ah
 16530 0000023B 070D0A                  	db	7,0Dh,0Ah
 16531 0000023E 496E7465726E616C20-     	db	"Internal stack overflow",0Dh,0Ah
 16531 00000247 737461636B206F7665-
 16531 00000250 72666C6F770D0A     
 16532 00000257 53797374656D206861-     	db	"System halted",0Dh,0Ah,"$" 
 16532 00000260 6C7465640D0A24     
 16533                                  
 16534                                  endstackcode:
 16535                                  
 16536                                  ; ----------------------------------------------------------------------
 16537                                  ; SYINIT1.ASM (MSDOS 6.0, 1991) 'SYSINIT' jump addr from 'MSINIT.ASM'
 16538                                  ; ----------------------------------------------------------------------
 16539                                  ; 04/06/2018 - Retro DOS v3.0 (MSDOS 3.3, SYSINIT1.ASM, 24/07/1987)
 16540                                  
 16541                                  ; 22/03/2019 - Retro DOS v4.0
 16542                                  
 16543                                  ; SYSINIT:0269h (MSDOS 6.21 IO.SYS, SYSINIT segment, offset: 0269h)
 16544                                  
 16545                                  ; ('SYSINIT:' location/address is used in 'retrodos4.s'. If following
 16546                                  ; address will be changed, it must also be changed in 'retrodos4.s'.)
 16547                                  
 16548                                  ; 21/10/2022- Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 16549                                  ; ----------------------------------------------------------------------
 16550                                  ; SYSINITSEG:0267h (MSDOS 5.0 IO.SYS, SYSINIT segment, offset: 0267h)
 16551                                  
 16552                                  SYSINIT:	
 16553 00000267 E91C02                          JMP	GOINIT
 16554                                  	;JMP	SYSIN ; 25/02/2018 - Retro DOS 2.0 modification
 16555                                  
 16556                                  ; ----------------------------------------------------------------------
 16557                                  
 16558                                  struc DDHighInfo
 16559 00000000 ????????                 .ddhigh_CSegPtr resd 1	; pointer to code segment to be relocated
 16560 00000004 ????                     .ddhigh_CSegLen resw 1	; length of code segment to be relocated
 16561 00000006 ????????                 .ddhigh_CallBak resd 1	; pointer to the call back routine
 16562                                  endstruc
 16563                                  
 16564                                  ; 22/03/2019 - Retro DOS v4.0
 16565                                  
 16566 0000026A 00                      runhigh: db	0
 16567                                  
 16568                                  ; 02/11/2022
 16569                                  ;align 4
 16570                                  
 16571                                  DOSINFO: 
 16572 0000026B 00000000                	dd	0	; address of the DOS Sysini Variables
 16573                                  ;MSDOS:
 16574                                  dos_temp_location: ; dword ; MSDOS 6.0
 16575                                  dosinit:		; MSDOS 6.0
 16576 0000026F 0000                    	dw	0
 16577                                  
 16578                                  ; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 16579                                  ;FINAL_DOS_LOCATION: ; 20/04/2019 - Retro DOS v4.0
 16580                                  ;	dw	0
 16581                                  ;MSDOS 5.0 IO.SYS - SYSINIT:0271h
 16582                                  
 16583                                  CURRENT_DOS_LOCATION:
 16584 00000271 0000                    	dw	0
 16585                                  
 16586                                  ;DOSSIZE: ; Retro DOS 2.0 feature - 25/02/2018
 16587                                  ;	dw	0   ; 'MSDOS.BIN' kernel size in words
 16588                                  
 16589                                  ; 22/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 16590                                  ; (MSDOS 5.0 MSDOS.SYS size is 37394 bytes)
 16591                                  DOSSIZE	equ	0A000h	; (MSDOS 6.0 - SYSINIT1.ASM - 1991)
 16592                                  
 16593                                  DEVICE_LIST:
 16594 00000273 00000000                	dd	0
 16595                                  
 16596                                  ; 04/06/2018 - Retro DOS v3.0
 16597                                  ; 28/03/2018
 16598                                  ;; MSDOS 3.3 - SYSINIT1.ASM - 24/07/1987
 16599                                  ;
 16600                                  sysi_country:	
 16601 00000277 00000000                	dd	0 ; 5/29/86 Pointer to country table in DOS
 16602                                  
 16603                                  ; MSDOS 6.0
 16604 0000027B 00000000                dos_segreinit:	dw	0,0	; room for dword
 16605                                  
 16606 0000027F 0000                    lo_doscod_size:	dw	0	; dos code size when in low mem
 16607 00000281 0000                    hi_doscod_size:	dw	0	; dos code size when in HMA
 16608                                  
 16609 00000283 0000                    def_php:	dw	0
 16610                                  
 16611                                  ; M022--
 16612                                  ; pointer for calling into Bios_Code for re-initializing segment values.
 16613                                  ;  call with ax = new segment for Bios_Code. Notice that we'll
 16614                                  ;  call it in its temporary home, cuz seg_reinit won't get moved to
 16615                                  ;  the new home.
 16616                                  
 16617                                  ;Bios_Code	equ	KERNEL_SEGMENT  ; 0070h
 16618                                  ; 21/10/2022
 16619                                  ;DOSBIOCODESEG	equ	02C7h ; (MSDOS 5.0 IO.SYS)
 16620                                  
 16621                                  ; 22/10/2022
 16622                                  seg_reinit_ptr:	; label dword
 16623 00000285 [3200]                  		dw	seg_reinit ; Bios_Code:0032h for MSDOS 6.21 IO.SYS
 16624                                  temp_bcode_seg:
 16625                                  		;dw	Bios_Code  ; 02CCh for MSDOS 6.21 IO.SYS
 16626                                  		; 22/10/2022
 16627 00000287 A002                    		dw	DOSBIOCODESEG ; 02C7h for MSDOS 5.0 IO.SYS 		
 16628                                  
 16629                                  fake_floppy_drv:
 16630 00000289 00                      		db	0	; set to 1 if this machine
 16631                                  				; does not have any floppies!!!
 16632                                  
 16633                                  ; Internal Stack Parameters
 16634                                  
 16635 0000028A 0900                    stack_count:	dW	defaultcount ; 9
 16636 0000028C 8000                    stack_size:	dw	defaultsize  ; 128
 16637 0000028E 00000000                stack_addr:	dd	0	
 16638                                  
 16639                                  ; 05/06/2018 - Retro DOS v3.0
 16640                                  
 16641                                  ; various default values
 16642                                  
 16643 00000292 0100                    MEMORY_SIZE:	dw	1
 16644                                  
 16645                                  ; 22/03/2019 - Retro DOS v4.0 (MSDOS 6.0 source, MSDOS 6.21 disassembled src.)
 16646                                  
 16647 00000294 0000                    RPLMemTop:	dw	0  ; 22/10/2022 (MSDOS 5.0 IO.SYS SYSINIT:0294h)	
 16648 00000296 00                      DEFAULT_DRIVE:	db	0	;initialized by ibminit.
 16649 00000297 FFFF                    buffers:	dw	0FFFFh	; initialized during buffer allocation
 16650 00000299 0000                    h_buffers:	dw	0	; # of the heuristic buffers. initially 0.
 16651 0000029B 0000                    singlebuffersize: dw	0	; maximum sector size + buffer head
 16652                                  
 16653 0000029D 08                      FILES:	db	8	; enough files for pipe
 16654 0000029E 04                      FCBS:	db	4	; performance for recycling
 16655 0000029F 00                      KEEP:	db	0	; keep original set
 16656 000002A0 05                      NUM_CDS: db	5	; 5 net drives
 16657                                  ; 22/10/2022 (MSDOS 5.0 SYSINIT)
 16658                                  ;CONFBOT: dw	0
 16659                                  ;ALLOCLIM: dw	0
 16660                                  CONFBOT: ; 02/11/2022
 16661 000002A1 0000                    top_of_cdss: dw 0
 16662                                  ; 02/11/2022 (MSDOS 5.0 SYSINIT)
 16663 000002A3 0000                    ALLOCLIM: dw	0	; (SYSINIT:02A3h)	
 16664                                  
 16665 000002A5 413A5C00                DirStrng: db	"A:\",0	; string for the root directory of a drive
 16666                                  ; 30/10/2022 (MSDOS 5.0 IO.SYS SAYSINIT compatibility)
 16667                                  ; (SYSINIT:02A9h)
 16668                                  command_line:
 16669 000002A9 0200                    	db	2,0
 16670 000002AB 50                      	db	'P'
 16671 000002AC 00                      	db	0
 16672 000002AD 00<rep 7Ch>             	times	124 db 0 ; db 124 dup(0)	
 16673                                  ; (SYSINIT:0329h)
 16674 00000329 00                      ZERO:	db	0
 16675 0000032A 00                      sepchr:	db	0
 16676 0000032B 0000                    linecount: dw	0			; line count in config.sys
 16677 0000032D 20202020200D0A24        showcount: db	'     ',cr,lf,'$'	; used to convert linecount to ascii.
 16678 00000335 0000                    buffer_linenum: dw	0		; line count for "buffers=" command if entered.
 16679                                  
 16680 00000337 FF                      sys_model_byte:	db	0FFh		; model byte used in sysinit
 16681 00000338 00                      sys_scnd_model_byte: db 0		; secondary model byte used in sysinit
 16682                                  
 16683 00000339 0000                    buf_prev_off:	dw	0
 16684                                  
 16685                                          ;IF      NOT NOEXEC
 16686                                  ;COMEXE EXEC0 <0,COMMAND_LINE,DEFAULT_DRIVE,ZERO>
 16687                                          ;ENDIF
 16688                                  
 16689                                  ; 01/05/2018
 16690                                  COMEXE:
 16691 0000033B 0000                    EXEC0.ENVIRON:	dw	0	; seg addr of environment
 16692 0000033D [A902]                  EXEC0.COM_LINE:	dw	command_line ; pointer to asciz command line
 16693 0000033F 0000                    		dw	0 	; SYSINIT segment (0473h for MSDOS 6.21 IO.SYS)
 16694 00000341 [9602]                  EXEC0.5C_FCB:	dw	DEFAULT_DRIVE ; default fcb at 5C
 16695 00000343 0000                    		dw	0	; SYSINIT segment (0473h for MSDOS 6.21 IO.SYS)
 16696 00000345 [2903]                  EXEC0.6C_FCB:	dw	ZERO	; default fcb at 6C
 16697 00000347 0000                    		dw	0
 16698                                  
 16699                                  ; variables for install= command.
 16700                                  
 16701 00000349 00                      multi_pass_id:	db	0		; parameter passed to multi_pass
 16702                                  					;  indicating the pass number
 16703                                  					; 0 - do scan for DOS=HIGH/LOW
 16704                                  					; 1 - load device drivers
 16705                                  					; 2 - was to load IFS
 16706                                  					;      now it is unused
 16707                                  					; 3 - do install=
 16708                                  					; >3 - nop
 16709 0000034A 0000                    install_flag:	dw	0
 16710                                  
 16711                                  have_install_cmd equ	00000001b	; config.sys has install= commands
 16712                                  has_installed	equ	00000010b	; sysinit_base installed.
 16713                                  
 16714 0000034C 0000                    config_size:	dw	0		; size of config.sys file. set by sysconf.asm
 16715 0000034E 00000000                sysinit_base_ptr: dd	0		; pointer to sysinit_base
 16716 00000352 00000000                sysinit_ptr:	dd	0		; returning addr. from sysinit_base
 16717 00000356 0000                    checksum:	dw	0		; used by sum_up
 16718                                  
 16719 00000358 20<rep 14h>             ldexec_fcb:	times 20 db 20h ; db 20 dup (' ') ;big enough
 16720 0000036C 00                      ldexec_line:	db	0		;# of parm characters
 16721 0000036D 20                      ldexec_start:	db	' '
 16722 0000036E 00<rep 50h>             ldexec_parm:	times 80 db 0	; db 80 dup (0)
 16723                                  
 16724                                  ;instexe exec0	<0,ldexec_line,ldexec_fcb,ldexec_fcb>
 16725                                  
 16726                                  instexe:
 16727 000003BE 0000                    iexec.environ:	dw	0		; seg addr of environment
 16728 000003C0 [6C03]                  iexec.ldexec_line: dw	ldexec_line ; pointer to asciz command line
 16729 000003C2 0000                    		dw	0 	; SYSINIT segment (0473h for MSDOS 6.21 IO.SYS)
 16730 000003C4 [5803]                  iexec.ldexec_5c_fcb: dw	ldexec_fcb	; default fcb at 5C
 16731 000003C6 0000                    		dw	0	; SYSINIT segment (0473h for MSDOS 6.21 IO.SYS)
 16732 000003C8 [5803]                  iexec.ldexec_6c_fcb: dw	ldexec_fcb	; default fcb at 6C
 16733 000003CA 0000                    		dw	0
 16734                                  
 16735                                  ; variables for comment=
 16736                                  
 16737 000003CC 00                      com_level:	db	0		; level of " " in command line
 16738 000003CD 00                      cmmt:		db	0		; length of comment string token
 16739 000003CE 00                      cmmt1:		db	0		; token
 16740 000003CF 00                      cmmt2:		db	0		; token
 16741 000003D0 00                      cmd_indicator:	db	0
 16742 000003D1 00                      donotshownum:	db	0
 16743                                  
 16744 000003D2 0000                    count:		dw	0
 16745 000003D4 0000                    org_count:	dw	0
 16746 000003D6 0000                    chrptr:		dw	0
 16747 000003D8 0000                    cntryfilehandle: dw	0
 16748 000003DA 0000                    old_area:	dw	0
 16749 000003DC 0000                    impossible_owner_size: dw 0		; paragraph
 16750                                  
 16751                                  bucketptr: ; label dword
 16752                                  bufptr:	   ; label dword		; leave this stuff in order!
 16753 000003DE 0000                    memlo:	dw	0
 16754                                  prmblk:	   ; label word
 16755 000003E0 0000                    memhi:	dw	0
 16756 000003E2 0000                    ldoff:	dw	0
 16757 000003E4 0000                    area:	dw	0
 16758                                  
 16759                                  ; Following is the request packet used to call INIT routines for 
 16760                                  ; all device drivers. Some fields may be accessed individually in
 16761                                  ; the code, and hence have individual labels, but they should not
 16762                                  ; be separated.
 16763                                  
 16764 000003E6 18                      packet:	db	24			; was 22
 16765 000003E7 00                      	db	0
 16766 000003E8 00                      	db	0			; initialize code
 16767 000003E9 0000                    	dw	0
 16768 000003EB 00<rep 8h>              	times	8 db 0	; db 8 dup (?)
 16769                                  
 16770 000003F3 00                      unitcount:	db	0
 16771 000003F4 00000000                break_addr:	dd	0
 16772 000003F8 00000000                bpb_addr:	dd	0
 16773                                  drivenumber:	; 22/10/2022
 16774 000003FC 00                      devdrivenum:	db	0 
 16775 000003FD 0000                    configmsgflag:	dw	0  ; used to control "error in config.sys line #" message
 16776                                  
 16777                                  ; end of request packet
 16778                                  
 16779                                  ;drivenumber:	db	0  ; 22/03/2019
 16780                                  
 16781                                  toomanydrivesflag:
 16782 000003FF 00                      		db	0  ; >24 fixed disk partitions flag ; M029 
 16783                                  align 2
 16784                                  
 16785                                  BCodeSeg:	; 21/10/2022
 16786 00000400 A002                    	dw	DOSBIOCODESEG ; (02C7h for MSDOS 5.0 IO.SYS)
 16787                                  	;dw	Bios_Code ; = KERNEL_SEGMENT = 0070h (for Retro DOS v4.0)
 16788                                  			   ; BCodeSeg = 2CCh (for MSDOS 6.21 IO.SYS)
 16789                                  
 16790                                  ; 02/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 16791                                  ;; 19/04/2019
 16792                                  ;_timer_lw_:
 16793                                  ;	dw	0  ; MSDOS 6.21 IO.SYS - SYSINIT:038Ch
 16794                                  	
 16795                                  ;SR;
 16796                                  ; This is the communication block between the DOS and the BIOS. It starts at
 16797                                  ;the SysinitPresent flag. Any other data that needs to be communicated 
 16798                                  ;to the DOS should be added after SysinitPresent. The pointer to this block
 16799                                  ;is passed to DOS as part of the DOSINIT call.
 16800                                  ;
 16801                                  
 16802                                  BiosComBlock:
 16803                                  	;dd	Bios_Data:SysinitPresent 
 16804                                  		; 0070h:08FDh for MSDOS 6.21 IO.SYS
 16805 00000402 [FB08]                  	dw	SysinitPresent  ; (retrodos4.sys, offset: ****h)
 16806                                  	;dw	KERNEL_SEGMENT ; 0070h
 16807                                  	; 21/10/2022
 16808 00000404 7000                    	dw	DOSBIODATASEG ; 0070h
 16809                                  
 16810                                  ;align 2
 16811                                  
 16812                                  	; 22/10/2022 - (MSDOS 5.0 IO.SYS, SYSINIT:0406h)
 16813                                  tempstack:	
 16814 00000406 00<rep 80h>             	times	128 db 0  ; db	80h dup (?)
 16815                                  
 16816                                  ; ----------------------------------------------------------------------------
 16817                                  
 16818                                  	; 22/10/2022 - Retro DOS v4.0
 16819                                  	;	; (MSDOS 5.0 IO.SYS, SYSINIT:0486h)
 16820                                  GOINIT:		; (MSDOS 6.21 IO.SYS, SYSINIT:0412h)
 16821                                  	; 12/12/2022
 16822                                  	; 22/03/2019 - Retro DOS v4.0
 16823                                  	; 06/07/2018
 16824                                  	; 04/06/2018 - Retro DOS v3.0
 16825                                  ; before doing anything else, let's set the model byte
 16826 00000486 B4C0                    	mov	ah,0C0h 		; get system configuration
 16827 00000488 CD15                    	int	15h			; *
 16828 0000048A 7217                    	jc	short no_rom_config
 16829                                  
 16830 0000048C 80FC00                  	cmp	ah,0			; double check
 16831 0000048F 7512                    	jne	short no_rom_config
 16832 00000491 268A4702                	mov	al,[es:bx+ROMBIOS_DESC.bios_sd_modelbyte]
 16833 00000495 2EA2[3703]              	mov	[cs:sys_model_byte],al 
 16834 00000499 268A4703                	mov	al,[es:bx+ROMBIOS_DESC.bios_sd_scnd_modelbyte]
 16835 0000049D 2EA2[3803]              	mov	[cs:sys_scnd_model_byte],al
 16836                                  	;jmp	short SYSIN
 16837                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 16838 000004A1 EB2D                    	jmp	short move_myself
 16839                                  
 16840                                  no_rom_config:				; Old ROM
 16841 000004A3 B800F0                  	mov	ax,0F000h
 16842 000004A6 8ED8                    	mov	ds,ax
 16843 000004A8 A0FEFF                  	mov	al,[0FFFEh]
 16844 000004AB 2EA2[3703]              	mov	[cs:sys_model_byte],al	; set the model byte.
 16845                                  
 16846                                  ; set fake_floppy_drv if there is no diskette drives in this machine.
 16847                                  ; execute the equipment determination interrupt and then
 16848                                  ; check the returned value to see if we have any floppy drives
 16849                                  ; if we have no floppy drive we set cs:fake_floppy_drv to 1
 16850                                  ; see the at tech ref bios listings for help on the equipment
 16851                                  ; flag interrupt (11h)	
 16852                                  
 16853                                  	; 22/10/2022
 16854                                  check_for_fake_floppy:			; entry point for rom_config above
 16855 000004AF CD11                    	int	11h			; check equipment flag
 16856                                  
 16857                                  	; 12/12/2022
 16858 000004B1 A801                    	test	al,1		
 16859                                  	;test	ax,1			; have any floppies?
 16860 000004B3 751B                    	jnz	short move_myself	; yes,normal system
 16861                                  
 16862                                  ; Some ROM BIOSs lie that there are no floppy drives. Lets find out
 16863                                  ; whether it is an old ROM BIOS or a new one
 16864                                  ;
 16865                                  ; WARNING !!!
 16866                                  ;
 16867                                  ; This sequence of code is present in MSINIT.ASM also. Any modification
 16868                                  ; here will require an equivalent modification in MSINIT.ASM also
 16869                                  
 16870 000004B5 06                      	push	es
 16871                                  
 16872 000004B6 30C9                    	xor	cl,cl	
 16873 000004B8 B408                    	mov	ah,8			; get disk parameters
 16874 000004BA B200                    	mov	dl,0			; of drive 0
 16875 000004BC CD13                    	int	13h
 16876                                  
 16877 000004BE 07                      	pop	es
 16878                                  
 16879 000004BF 720F                    	jc	short move_myself	; if error lets assume that the
 16880                                  					;  ROM BIOS lied
 16881 000004C1 80F900                  	cmp	cl,0			; double check (max sec no cannot be 0)
 16882 000004C4 740A                    	je	short move_myself
 16883                                  
 16884 000004C6 08D2                    	or	dl,dl			; number of flp drvs == 0?
 16885 000004C8 7506                    	jnz	short move_myself
 16886                                  
 16887 000004CA 2EC606[8902]01          	mov	byte [cs:fake_floppy_drv],1 ; set fake flag.
 16888                                  
 16889                                  move_myself:
 16890 000004D0 FC                      	cld				; set up move
 16891 000004D1 31F6                    	xor	si,si
 16892 000004D3 89F7                    	mov	di,si
 16893                                  
 16894                                  	; 12/12/2022
 16895 000004D5 0E                      	push	cs
 16896 000004D6 1F                      	pop	ds
 16897                                  
 16898                                  	;mov	cx,[cs:MEMORY_SIZE]
 16899 000004D7 8B0E[9202]              	mov	cx,[MEMORY_SIZE] ; 12/12/2022
 16900                                  
 16901                                  	; (MSDOS 6.0 - SYSINIT1.ASM - 1991)
 16902                                  ;;;	if	msver
 16903                                  ;	cmp	cx,1		; 1 means do scan
 16904                                  ;	jnz	short noscan
 16905                                  ;	mov	cx,2048		; start scanning at 32k boundary
 16906                                  ;	xor	bx,bx
 16907                                  ;
 16908                                  ;memscan:inc	cx
 16909                                  ;	jz	setend
 16910                                  ;	mov	ds,cx
 16911                                  ;	mov	al,[bx]
 16912                                  ;	not	al
 16913                                  ;	mov	[bx],al
 16914                                  ;	cmp	al,[bx]
 16915                                  ;	not	al
 16916                                  ;	mov	[bx],al
 16917                                  ;	jz	short memscan
 16918                                  ;setend:
 16919                                  ;	mov	cs:[memory_size],cx
 16920                                  ;;;	endif
 16921                                  
 16922                                  ;noscan: 				; cx is mem size in para
 16923                                  ;;
 16924                                  ;;	cas -- a) if we got our memory size from the ROM, we should test it
 16925                                  ;;		  before we try to run.
 16926                                  ;;	       b) in any case, we should check for sufficient memory and give
 16927                                  ;;		  an appropriate error diagnostic if there isn't enough
 16928                                  ;
 16929                                  ;	push	cs
 16930                                  ;	pop	ds
 16931                                  ;
 16932                                  ;;	cas note:  It would be better to put dos + bios_code BELOW sysinit
 16933                                  ;;	  that way it would be easier to slide them down home in a minimal
 16934                                  ;;	  memory system after sysinit.  As it is, you need room to keep
 16935                                  ;;	  two full non-overlapping copies, since sysinit sits between the
 16936                                  ;;	  temporary home and the final one.  the problem with doing that
 16937                                  ;;	  is that sys*.asm are filled with "mov ax,cs, sub ax,11h" type stuff.
 16938                                  ;
 16939                                  ;	dec	cx			; one para for an arena at end of mem
 16940                                  ;					; in case of UMBs
 16941                                  
 16942                                  	; 22/10/2022
 16943                                  	; (MSDOS 5.0 IO.SYS SYSINIT:04DBh)
 16944                                  
 16945                                  	; 12/12/2022
 16946                                  	;push	cs
 16947                                  	;pop	ds
 16948                                  
 16949 000004DB 49                      	dec	cx
 16950                                  
 16951                                  ;------ Check if an RPL program is present at TOM and do not tromp over it
 16952                                  
 16953 000004DC 31DB                    	xor	bx,bx
 16954 000004DE 8EC3                    	mov	es,bx	; 0
 16955                                  	;mov	bx,[es:(2Fh*4)] ; INT 2Fh address (0:0BCh)
 16956                                  	;mov	es,[es:((2Fh*4)+2)] ; INT 2Fh segment (0:0BEh)
 16957                                  	; 29/09/2023
 16958 000004E0 26C41EBC00              	les	bx,[es:(2Fh*4)]
 16959 000004E5 26817F035250            	cmp	word [es:bx+3],'RP'
 16960 000004EB 751B                    	jne	short NoRPL
 16961 000004ED 26807F054C              	cmp	byte [es:bx+5],'L'
 16962 000004F2 7514                    	jne	short NoRPL
 16963                                  
 16964 000004F4 89CA                    	mov	dx,cx			; get TOM into DX
 16965 000004F6 52                      	push	dx
 16966 000004F7 B8064A                  	mov	ax,4A06h
 16967                                  	;mov	ax,(multMULT<<8)+multMULTRPLTOM
 16968 000004FA CD2F                    	int	2Fh			; Get new TOM from any RPL
 16969 000004FC 58                      	pop	ax
 16970 000004FD 89D1                    	mov	cx,dx
 16971 000004FF 39C2                    	cmp	dx,ax
 16972 00000501 7405                    	je	short NoRPL
 16973                                  	
 16974                                  	; 11/12/2022
 16975                                  	; ds = cs
 16976 00000503 8916[9402]              	mov	[RPLMemTop],dx
 16977                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 16978                                  	;mov	[cs:RPLMemTop],dx
 16979                                  	
 16980 00000507 49                      	dec	cx
 16981                                  NoRPL:
 16982 00000508 B8[E038]                	mov	ax,SI_end		; need this much room for sysinit
 16983                                  					; (SI_end == sysinit code size)
 16984 0000050B E8B806                  	call	off_to_para
 16985 0000050E 29C1                    	sub	cx,ax
 16986                                  
 16987                                  ; we need to leave room for the DOS and (if not ROMDOS) for the BIOS
 16988                                  ; code above sysinit in memory
 16989                                  ;
 16990 00000510 81E9000A                	sub	cx,DOSSIZE/16		; leave this much room for DOS
 16991                                  
 16992 00000514 B8001A                  	mov	ax,BCODE_END 		; (1A60h for MSDOS 5.0 IO.SYS)
 16993 00000517 E8AC06                  	call	off_to_para		; leave this much room for BIOS code
 16994 0000051A 29C1                    	sub	cx,ax
 16995 0000051C 8EC1                    	mov	es,cx			; offset where sysinit will be located
 16996                                  
 16997 0000051E B9[E038]                	mov	cx,SI_end		; (sysinit code size)
 16998 00000521 D1E9                    	shr	cx,1			; divide by 2 to get words
 16999 00000523 F3A5                    	rep	movsw			; relocate sysinit
 17000                                  
 17001 00000525 06                      	push	es			; push relocated segment
 17002 00000526 B8[2B05]                	mov	ax,SYSIN
 17003 00000529 50                      	push	ax			; push relocated entry point
 17004                                  
 17005 0000052A CB                      	retf				; far jump to relocated sysinit
 17006                                  
 17007                                  ; ----------------------------------------------------------------------------
 17008                                  
 17009                                  ;	MOVE THE DOS TO ITS PROPER LOCATION
 17010                                  
 17011                                  	; 22/10/2022 - Retro DOS 4.0 (Modified MSDOS 5.0 IO.SYS)
 17012                                  	; (SYSINIT:0533h)
 17013                                  SYSIN:
 17014                                  	; Retro DOS 4.0 - 22/03/2019
 17015                                  	; Retro DOS 2.0 - 25/02/2018
 17016                                  
 17017                                  	; 23/04/2019
 17018                                  	;;mov	ax,Bios_Data
 17019                                  	;mov	ax,KERNEL_SEGMENT ; 0070h
 17020                                  	; 21/10/2022
 17021 0000052B B87000                  	mov	ax,DOSBIODATASEG ; 0070h
 17022 0000052E 8ED8                    	mov	ds,ax
 17023 00000530 8C0E[F908]              	mov	[MoveDOSIntoHMA+2],cs	; set seg of routine to move DOS
 17024 00000534 C606[FB08]01            	mov	byte [SysinitPresent],1	; flag that MoveDOSIntoHMA can be called
 17025                                  
 17026                                  ; first move the MSDOS.SYS image up to a harmless place 
 17027                                  ; on top of our new sysinitseg
 17028                                  
 17029                                  	; 22/10/2022
 17030 00000539 B8[E038]                	mov	ax,SI_end		; how big is sysinitseg?
 17031 0000053C E88706                  	call	off_to_para
 17032 0000053F 8CC9                    	mov	cx,cs			; pick a buffer for msdos above us
 17033 00000541 01C8                    	add	ax,cx
 17034 00000543 8EC0                    	mov	es,ax
 17035                                  	
 17036 00000545 31F6                    	xor	si,si
 17037 00000547 89F7                    	mov	di,si
 17038                                  
 17039 00000549 2E8E1E[7102]            	mov	ds,[cs:CURRENT_DOS_LOCATION] ; where it is (set by msinit)
 17040                                  
 17041                                  	;mov	ax,cs	
 17042                                  	;mov	ds,ax
 17043                                  
 17044                                  	;;;mov	cx,20480  ; MSDOS 6.21 IO.SYS - SYSINIT:04E2h
 17045                                  	;;mov	cx,dossize/2 ; MSDOS 6.0
 17046                                  	;mov	cx,[DOSSIZE] ; words (not bytes!)  ; Retro DOS v4.0 (3.0, 2.0)
 17047                                  	;mov	es,[FINAL_DOS_LOCATION] ; on top of SYSINIT code
 17048                                  	;mov	ds,[CURRENT_DOS_LOCATION]
 17049                                  
 17050                                  	; 22/10/2022
 17051 0000054E B90050                  	mov	cx,DOSSIZE/2 ; 5000h
 17052 00000551 F3A5                    	rep     movsw
 17053 00000553 2E8C06[7102]            	mov	[cs:CURRENT_DOS_LOCATION],es
 17054                                  
 17055                                  ; The DOS code is ORGed at a non-zero value to allow it to be located in
 17056                                  ; HIMEM. Thus, the DOS segment location must be adjusted accordingly.
 17057                                  ; If this is ROMDOS, however, only the init code is loaded into RAM, so
 17058                                  ; this ORG is not done. The entry point is at offset zero in the segment.
 17059                                  
 17060                                  	; 22/04/2019 (MSDOS 6.0 & MSDOS 6.21 kernel address modification)
 17061                                  	;mov	ax,cs
 17062                                  	; 02/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS, SYSINIT)
 17063                                  	;mov	ds,ax
 17064                                  
 17065                                  ; 29/04/2019 - Retro DOS v4.0 ! important MODIFICATION !
 17066                                  
 17067                                  ;	; 24/04/2019 
 17068                                  ;;ifndef ROMDOS
 17069                                  ;	mov	ax,[es:3] 		; get offset of dos
 17070                                  ;		; ax = 3DE0h for MSDOS 6.21 kernel (MSDOS.SYS, offset 3) 
 17071                                  ;	mov	[dosinit],ax		; that's the entry point offset
 17072                                  ;	call	off_to_para		; subtract this much from segment
 17073                                  ;	; 23/04/2019
 17074                                  ;	;sub	[CURRENT_DOS_LOCATION],ax
 17075                                  ;	sub	[FINAL_DOS_LOCATION],ax
 17076                                  ;;else
 17077                                  ;;	mov	word [dosinit],0	; entry to init is at zero
 17078                                  ;;
 17079                                  ;;endif ; ROMDOS
 17080                                  
 17081                                  	; 29/04/2019 - Retro DOS v4.0 ! important MODIFICATION !
 17082                                  	; (! MSDOS6.BIN starts with DOSDATA ! - Retro DOS v4.0 modification) 
 17083                                  
 17084                                  	;mov	ax,[es:0] ; DOSCODE start address = DOSDATA size (= 136Ah)
 17085                                  	;		  ; (Valid for Retro DOS v4.0 only!)
 17086                                  
 17087                                  	; 22/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS, SYSINIT)
 17088                                  	; (SYSINIT:0563h for MSDOS 5.0 IO.SYS SYSINIT)
 17089 00000558 A10300                  	mov	ax, [3]		; mov ax, word ptr ds:3
 17090                                  
 17091 0000055B 2EA3[6F02]              	mov	[cs:dosinit],ax ; (SYSINIT:0563h for MSDOS 5.0 IO.SYS SYSINIT)
 17092                                  	; 02/11/2022
 17093 0000055F E86406                  	call	off_to_para		; subtract this much from segment
 17094 00000562 2E2906[7102]            	sub	[cs:CURRENT_DOS_LOCATION],ax
 17095                                  
 17096                                  	; Current DOSCODE start address = dword [dosinit]
 17097                                  
 17098                                  ;; If this is not ROMDOS, then the BIOS code is moved to the top of memory
 17099                                  ;; until it is determined whether it will be running in HIMEM or not.
 17100                                  
 17101                                  ;ifndef ROMDOS
 17102                                  
 17103                                  ; now put Bios_Code up on top of that. Assume Bios_Code + dossize < 64k
 17104                                  
 17105                                  	; 22/10/2022
 17106 00000567 8CC0                    	mov	ax,es
 17107 00000569 05000A                  	add	ax,DOSSIZE/16		; get paragraph of end of dos
 17108 0000056C 8EC0                    	mov	es,ax
 17109 0000056E 2E8706[8702]            	xchg	ax,[cs:temp_bcode_seg]	; swap with original home of Bios_Code
 17110 00000573 8ED8                    	mov	ds,ax			; point to loaded image of Bios_Code
 17111                                  
 17112                                  	;mov	si,BCODE_START ; mov si,30h
 17113                                  	; 09/12/2022
 17114 00000575 BE[3000]                	mov	si,BCODESTART
 17115                                  	; 02/11/2022
 17116 00000578 89F7                    	mov	di,si
 17117                                  	;mov	cx,BCODE_END   ; mov cx,1A60h
 17118                                  	;sub	cx,si
 17119                                  	; 29/09/2023
 17120                                  	BCODESIZE equ BCODEEND-BCODESTART
 17121 0000057A B9D019                  	mov	cx,BCODESIZE
 17122 0000057D D1E9                    	shr	cx,1
 17123 0000057F F3A5                    	rep	movsw			; move Bios_Code into place
 17124                                  
 17125 00000581 8CC0                    	mov	ax,es			; tell it what segment it's in
 17126 00000583 2EFF1E[8502]            	call	far [cs:seg_reinit_ptr]	; far call to seg_reinit in Bios_Code (M022)
 17127                                  
 17128                                  ;endif	; not ROMDOS
 17129                                  
 17130                                  ; now call dosinit while it's in its temporary home
 17131                                  
 17132                                  	;mov	ax,cs
 17133                                  	;mov	ds,ax	 
 17134                                  
 17135                                  	;mov	dx,[MEMORY_SIZE]	; set for call to dosinit
 17136                                  
 17137                                  	; 22/10/2022
 17138                                  
 17139 00000588 2EC43E[0204]            	les	di,[cs:BiosComBlock]	; ptr to BIOS communication block
 17140                                  		; es = KERNEL_SEGMENT (70h), di = 'SysInitPresent' address
 17141 0000058D 2EC536[7302]            	lds	si,[cs:DEVICE_LIST]	; set for call to dosinit
 17142                                  		; ds = KERNEL_SEGMENT (70h), si = 'res_dev_list' address
 17143                                  
 17144 00000592 2E8B16[9202]            	mov	dx,[cs:MEMORY_SIZE]	; set for call to dosinit
 17145                                  
 17146 00000597 FA                      	cli
 17147 00000598 8CC8                    	mov	ax,cs
 17148 0000059A 8ED0                    	mov	ss,ax
 17149                                  
 17150                                  ; 22/03/2019 - Retro DOS v4.0 (MSDOS 6.0, SYSINIT1.ASM)
 17151                                  %define locstack ($ - SYSINIT$) & 0FFFEh  ; 532h in MSDOS 6.21 IO.SYS
 17152                                  					  ; 5A6h in MSDOS 5.0 IO.SYS SYSINIT
 17153                                  ;SYSINIT:0532h:
 17154                                  
 17155                                  ; 22/10/2022
 17156                                  ; ----------------------------------------------------------------------------
 17157                                  ;SYSINIT:05A6h:
 17158                                  ;locstack:	; (at SYSINIT:05A6h for MSDOS 5.0 IO.SYS)
 17159                                  
 17160                                  	;mov	sp, 05A6h
 17161 0000059C BC9C05                  	mov     sp,locstack		; set stack
 17162                                  
 17163 0000059F FB                      	sti
 17164                                  
 17165                                  ;align 2
 17166                                  	; 30/03/2018
 17167                                  ;LOCSTACK:
 17168                                          ;CALL	FAR [CS:MSDOS]	; FINAL_DOS_LOCATION:0 
 17169                                  		       		;('jmp DOSINIT' in 'MSHEAD.ASM')
 17170                                  		       		;('DOSINIT:' is in 'MSINIT.ASM')
 17171                                  
 17172                                  	; 22/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 17173                                  	; 22/03/2019 - Retro DOS v4.0 (MSDOS 6.0, 6.21)
 17174                                  
 17175                                  ; This call to DOSINIT will relocate the DOS data from its present location
 17176                                  ; at the top of memory, to its final location in low memory just above the
 17177                                  ; BIOS data. It will then build important DOS data structures in low 
 17178                                  ; memory following the DOS data. It returns (among many other things) the
 17179                                  ; new starting address of free memory.
 17180                                  
 17181 000005A0 2EFF1E[6F02]            	call	far [cs:dosinit]	; call dosinit	
 17182                                  			 ; es:di -> sysinitvars_ext
 17183                                  
 17184 000005A5 2E8C1E[8302]            	mov	[cs:def_php],ds		; save pointer to PSP
 17185                                  	
 17186                                  	; 11/12/2022
 17187                                  	; 22/03/2019
 17188 000005AA 0E                      	push	cs
 17189 000005AB 1F                      	pop	ds
 17190                                  	; 22/10/2022
 17191 000005AC A3[8102]                	mov	[hi_doscod_size],ax
 17192 000005AF 890E[7F02]              	mov	[lo_doscod_size],cx
 17193 000005B3 8916[7B02]              	mov	[dos_segreinit],dx
 17194                                  	
 17195                                  	; 11/12/2022
 17196                                  	; ds = cs
 17197                                  	;mov	[cs:hi_doscod_size],ax	; size of doscode (including exepatch)
 17198                                  	;mov	[cs:lo_doscod_size],cx	; (not including exepatch)
 17199                                  	;mov	[cs:dos_segreinit],dx	; save offset of segreinit
 17200                                  
 17201                                  	; 05/06/2018 - Retro DOS v3.0
 17202                                  	; ES:DI = Address of pointer to SYSINITVARS structure (MSDOS 3.3)
 17203                                  
 17204                                  	; 11/12/2022
 17205                                  	; ds = cs
 17206                                  	; 22/10/2022
 17207                                  	;mov	ax,[es:di+SysInitVars_Ext.SYSI_InitVars] ; 5/29/86
 17208 000005B7 268B05                  	mov	ax,[es:di] ; 22/03/2019
 17209                                  	;mov	[cs:DOSINFO],ax
 17210 000005BA A3[6B02]                	mov	[DOSINFO],ax
 17211                                  	;mov	ax,[es:di+SysInitVars_Ext.SYSI_InitVars+2]
 17212 000005BD 268B4502                	mov	ax,[es:di+2]
 17213                                  	;mov	[cs:DOSINFO+2],ax
 17214 000005C1 A3[6D02]                	mov	[DOSINFO+2],ax	; set the sysvar pointer
 17215                                  
 17216                                  	;mov	ax,[es:di+SysInitVars_Ext.SYSI_Country_Tab]
 17217 000005C4 268B4504                	mov	ax,[es:di+4]
 17218                                  	;mov	[cs:sysi_country],ax
 17219 000005C8 A3[7702]                	mov	[sysi_country],ax
 17220                                  	;mov	ax,[es:di+SysInitVars_Ext.SYSI_Country_Tab+2]
 17221 000005CB 268B4506                	mov	ax,[es:di+6]
 17222                                  	;mov	[cs:sysi_country+2],ax
 17223 000005CF A3[7902]                	mov	[sysi_country+2],ax	; set the SYSI_Country pointer
 17224                                  
 17225                                  	; 20/04/2019
 17226                                  	;mov	ax,[CURRENT_DOS_LOCATION]
 17227                                  	;;mov	es,[CURRENT_DOS_LOCATION]
 17228                                  	;mov	ax,[FINAL_DOS_LOCATION] ; give dos its temporary location
 17229                                  	; 22/10/2022
 17230                                  	;mov	ax,[cs:CURRENT_DOS_LOCATION]
 17231                                  	;;;mov	[dos_segreinit+2],es
 17232                                  	;;mov	[dos_segreinit+2],ax
 17233                                  	;mov	[cs:dos_segreinit+2],ax
 17234                                  	; 11/12/2022
 17235                                  	; ds = cs
 17236 000005D2 8E06[7102]              	mov	es,[CURRENT_DOS_LOCATION]
 17237 000005D6 8C06[7D02]              	mov	[dos_segreinit+2],es
 17238                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 17239                                  	;mov	es,[cs:CURRENT_DOS_LOCATION]
 17240                                  	;mov	[cs:dos_segreinit+2],es
 17241                                  
 17242                                  ; ----------------------------------------------------------------------------
 17243                                  
 17244                                  ;SYSINIT:0577h:
 17245                                  	; ... RPLArena ... MSDOS 6.21 IO.SYS (SYSINIT:0577h to SYSINIT:05D1h)
 17246                                  ;SYSINIT:05D1h:	; NoRPLArena 
 17247                                  
 17248                                  	; 22/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS SYSINIT)
 17249                                  ;------ Cover up RPL code with an arena
 17250                                  ;SYSINIT:05EBh:
 17251                                  	; 11/12/2022
 17252                                  	; ds = cs
 17253 000005DA 31DB                    	xor	bx,bx
 17254 000005DC 391E[9402]              	cmp	[RPLMemTop],bx ; 0
 17255                                  	;cmp	word [RPLMemTop],0
 17256                                  	;;cmp	word [cs:RPLMemTop],0
 17257 000005E0 7450                    	je	short NoRPLArena
 17258                                  
 17259                                  ;------ alloc all memory
 17260                                  
 17261                                  	; 11/12/2022
 17262                                  	;mov	bx,0FFFFh
 17263 000005E2 4B                      	dec	bx
 17264                                  	; bx = 0FFFFh
 17265 000005E3 B448                    	mov	ah,48h
 17266 000005E5 CD21                    	int	21h
 17267                                  			; DOS - 2+ - ALLOCATE MEMORY
 17268                                  			; BX = number of 16-byte paragraphs desired
 17269 000005E7 B448                    	mov	ah,48h
 17270 000005E9 CD21                    	int	21h
 17271                                  
 17272 000005EB 8EC0                    	mov	es,ax			; get it into ES and save it
 17273 000005ED 06                      	push	es
 17274                                  
 17275                                  ;------ resize upto RPL mem
 17276                                  
 17277                                  	; 11/12/2022
 17278                                  	; ds = cs
 17279                                  	;sub	ax,[cs:RPLMemTop]
 17280 000005EE 2B06[9402]              	sub	ax,[RPLMemTop]
 17281 000005F2 F7D8                    	neg	ax
 17282 000005F4 48                      	dec	ax
 17283 000005F5 89C3                    	mov	bx,ax
 17284 000005F7 B44A                    	mov	ah,4Ah
 17285 000005F9 CD21                    	int	21h
 17286                                    			; DOS - 2+ - ADJUST MEMORY BLOCK SIZE (SETBLOCK)
 17287                                  			; ES = segment address of block to change
 17288                                  			; BX = new size in paragraphs
 17289                                  
 17290                                  ;------ allocate the free (RPL MEM)
 17291                                  
 17292 000005FB BBFFFF                  	mov	bx,0FFFFh
 17293 000005FE B448                    	mov	ah,48h
 17294 00000600 CD21                    	int	21h
 17295 00000602 B448                    	mov	ah,48h
 17296 00000604 CD21                    	int	21h
 17297                                  
 17298                                  ;----- mark that it belongs to RPL
 17299                                  
 17300 00000606 48                      	dec	ax
 17301 00000607 8EC0                    	mov	es,ax
 17302                                  	;mov	word [es:arena_owner],8
 17303 00000609 26C70601000800          	mov	word [es:1],8
 17304                                  	;mov	word [es:arena_name],'RP'
 17305 00000610 26C70608005250          	mov	word [es:8],'RP'
 17306                                  	;mov	word [es:arena_name+2],'L'
 17307 00000617 26C7060A004C00          	mov	word [es:10],'L'
 17308                                  	;mov	word [es:arena_name+4],0
 17309 0000061E 26C7060C000000          	mov	word [es:12],0
 17310                                  	;mov	word [es:arena_name+6],0
 17311 00000625 26C7060E000000          	mov	word [es:14],0	
 17312                                  
 17313 0000062C 07                              pop     es                      ; get back ptr to first block
 17314 0000062D B449                            mov     ah,49h	; Dealloc	; and free it
 17315 0000062F CD21                    	int	21h		
 17316                                  					; DOS - 2+ - FREE MEMORY
 17317                                  					; ES = segment address of area to be freed
 17318                                  	; 11/12/2022
 17319 00000631 F8                      	clc
 17320                                  
 17321                                  ; ----------------------------------------------------------------------------
 17322                                  
 17323                                  NoRPLArena:
 17324                                  	; 11/12/2022
 17325                                  	; ds = cs
 17326                                  	; 22/03/2019 - Retro DOS v4.0 (MSDOS 6.0, 6.21, IO.SYS)
 17327 00000632 C43E[6B02]              	les	di,[DOSINFO]	; es:di -> dosinfo
 17328                                  	; 22/10/2022 - Retro DOS v4.0 (MSDOS 5.0 IO.SYS SYSINIT)
 17329                                  	;les	di,[cs:DOSINFO]	; es:di -> dosinfo
 17330                                  
 17331                                  	; 11/12/2022
 17332                                  	;clc				; get the extended memory size
 17333                                  
 17334                                  ;	execute the get extended memory size subfunction in the bios int 15h
 17335                                  ;	if the function reports an error do nothing else store the extended
 17336                                  ;	memory size reported at the appropriate location in the dosinfo buffer
 17337                                  ;	currently pointed to by es:di. use the offsets specified in the
 17338                                  ;	definition of the sysinitvars struct in inc\sysvar.inc
 17339                                  
 17340 00000636 B488                    	mov	ah,88h
 17341 00000638 CD15                    	int	15h			; check extended memory size
 17342 0000063A 720B                    	jc	short no_ext_memory
 17343                                  			; Get Extended Memory Size
 17344                                  			; Return: CF clear on success
 17345                                  			; AX = size of memory above 1M in K	
 17346                                  	;mov	[es:di+SYSI_EXT_MEM],ax ; save extended memory size
 17347                                  	; 22/10/2022
 17348 0000063C 26894545                	mov	[es:di+45h],ax ; save extended memory size
 17349 00000640 09C0                    	or	ax,ax
 17350 00000642 7403                    	jz	short no_ext_memory
 17351 00000644 E8F504                  	call	ClrVDISKHeader
 17352                                  no_ext_memory:
 17353                                  	;mov	ax,[es:di+SYSI_MAXSEC]	; get the sector size
 17354 00000647 268B4510                	mov	ax,[es:di+10h]
 17355                                  	;add	ax,bufinsiz
 17356 0000064B 83C014                  	add	ax,20			; size of buffer header
 17357                                  	; 11/12/2022
 17358                                  	; ds = cs
 17359 0000064E A3[9B02]                	mov	[singlebuffersize],ax	; total size for a buffer
 17360                                  	;mov	[cs:singlebuffersize],ax	
 17361                                  	; 11/12/2022
 17362 00000651 A0[9602]                	mov	al,[DEFAULT_DRIVE]	; get the 1 based boot drive number set by msinit
 17363                                  	;mov	al,[cs:DEFAULT_DRIVE]
 17364                                  	;mov	[es:di+SYSI_BOOT_DRIVE],al ; set sysi_boot_drive
 17365 00000654 26884543                	mov	[es:di+43h],al
 17366                                  
 17367                                  ; determine if 386 system...
 17368                                  
 17369                                  	;get_cpu_type			; macro to determine cpu type
 17370                                  
 17371                                  get_cpu_type:
 17372                                  	; 11/12/2022
 17373 00000658 9C                      	pushf
 17374                                  	;push	bx
 17375                                  	;xor	bx,bx
 17376                                  	; 11/12/2022
 17377                                  	;xor	cx,cx
 17378                                  	;
 17379 00000659 31C0                    	xor	ax,ax
 17380                                  	; ax = 0
 17381 0000065B 50                      	push    ax
 17382 0000065C 9D                      	popf
 17383 0000065D 9C                      	pushf
 17384 0000065E 58                      	pop	ax
 17385 0000065F 2500F0                  	and	ax,0F000h
 17386                                  	;cmp	ax,0F000h
 17387 00000662 80FCF0                  	cmp	ah,0F0h 
 17388 00000665 7410                    	je	short cpu_8086
 17389                                  	;mov	ax,0F000h
 17390 00000667 B4F0                    	mov	ah,0F0h
 17391                                  	; ax = 0F000h
 17392 00000669 50                      	push	ax
 17393 0000066A 9D                      	popf
 17394 0000066B 9C                      	pushf
 17395 0000066C 58                      	pop	ax
 17396                                  	;and	ax,0F000h
 17397 0000066D 80E4F0                  	and	ah,0F0h
 17398 00000670 7405                    	jz	short cpu_286
 17399                                  cpu_386:
 17400                                  	; 11/12/2022
 17401                                  	;;inc	bx
 17402                                  	;inc	cx
 17403                                  	; 11/12/2022
 17404                                  	;mov	byte [es:di+SYSI_DWMOVE],1
 17405 00000672 26C6454401              	mov	byte [es:di+44h],1
 17406                                  cpu_286:
 17407                                  	;;;inc	bx
 17408                                  	;;inc	cx
 17409                                  cpu_8086:
 17410                                  	; 11/12/2022
 17411                                  	;;mov	ax,bx	
 17412                                  	;pop	bx
 17413 00000677 9D                      	popf
 17414                                  
 17415                                  	;...
 17416                                  
 17417                                  	; 11/12/2022
 17418                                  	;or	cl,cl
 17419                                  	;jz	short not_386_system
 17420                                  	; 11/12/202
 17421                                  	;cmp	cl,2
 17422                                  	;;cmp	ax,2			; is it a 386?
 17423                                  	;jne	short not_386_system	; no: don't mess with flag
 17424                                  	;;mov	byte [es:di+SYSI_DWMOVE],1
 17425                                  	; 11/12/2022
 17426                                  	; 22/10/2022
 17427                                  	;mov	byte [es:di+44h],1
 17428                                  not_386_system:
 17429                                  	;mov	al,[es:di+SYSI_NUMIO]
 17430 00000678 268A4520                	mov	al,[es:di+20h]
 17431                                  	; 11/12/2022
 17432                                  	; ds = cs
 17433 0000067C A2[FC03]                	mov	[drivenumber],al	; save start of installable block drvs
 17434                                  	;mov	[cs:drivenumber],al
 17435                                  
 17436 0000067F 8CC8                    	mov	ax,cs
 17437 00000681 83E811                  	sub	ax,11h			; room for PSP we will copy shortly
 17438                                  	; 11/12/2022
 17439                                  	;mov	cx,[singlebuffersize]	; temporary single buffer area
 17440                                  	;;mov	cx,[cs:singlebuffersize]
 17441                                  	;shr	cx,1			
 17442                                  	;shr	cx,1			; divide size by 16...
 17443                                  	;shr	cx,1
 17444                                  	;shr	cx,1			; ...to get paragraphs...
 17445                                  	;inc	cx			; ... and round up
 17446                                  	; 11/12/2022
 17447 00000684 8B1E[9B02]              	mov	bx,[singlebuffersize]
 17448 00000688 B104                    	mov	cl,4
 17449 0000068A D3EB                    	shr	bx,cl
 17450 0000068C 43                      	inc	bx
 17451                                  
 17452                                  ;	cas note: this unorthodox paragraph rounding scheme wastes a byte
 17453                                  ;	  if [singlebuffersize] ever happens to be zero mod 16. Could this
 17454                                  ;	  ever happen? Only if the buffer overhead was zero mod 16, since
 17455                                  ;	  it is probably safe to assume that the sector size always will be.
 17456                                  ;
 17457                                  ;	 mohans also found a bug in CONFIG.SYS processing where it replaces
 17458                                  ;	  EOF's with cr,lf's, without checking for collision with [confbot].
 17459                                  ;	  perhaps the extra byte this code guarantees is what has kept that
 17460                                  ;	  other code from ever causing a problem???
 17461                                  
 17462                                  	; 11/12/2022
 17463 0000068D 29D8                    	sub	ax,bx
 17464                                  	;sub	ax,cx
 17465 0000068F A3[A102]                	mov	[top_of_cdss],ax	; temp "unsafe" location
 17466                                  	; 22/10/2022
 17467                                  	;mov	[cs:top_of_cdss],ax
 17468                                  
 17469                                  ;	chuckst -- 25 Jul 92 -- added code here to pre-allocate space
 17470                                  ;	for 26 temporary CDSs, which makes it easier to use alloclim
 17471                                  ;	for allocating memory for MagicDrv.
 17472                                  
 17473 00000692 06                      	push	es			; preserve pointer to dosinfo
 17474 00000693 57                      	push	di
 17475                                  
 17476                                  	; 22/10/2022
 17477                                  ;	mov	cx,ax			; save pointer for buffer
 17478                                  ;
 17479                                  ;;	now allocate space for 26 CDSs
 17480                                  ;
 17481                                  ;	sub	ax,((26 *(curdirlen))+15)/16
 17482                                  ;	mov	[ALLOCLIM],ax		; init top of free memory pointer
 17483                                  ;	mov	[CONFBOT],ax		; init this in case no CONFIG.SYS
 17484                                  
 17485                                  ; setup and initialize the temporary buffer at cx
 17486                                  
 17487                                  	;les	di,[es:di+SYSI_BUF]	; get the buffer chain entry pointer
 17488 00000694 26C47D12                	les	di,[es:di+12h]
 17489                                  	; 11/12/2022
 17490 00000698 31DB                    	xor	bx,bx
 17491                                  	;xor	ax,ax
 17492                                  	;mov	[es:di+BUFFINF.Dirty_Buff_Count],ax ; 0
 17493                                  	;mov	word [es:di+4],0
 17494 0000069A 26895D04                	mov	[es:di+4],bx ; 0
 17495                                  	;mov	[es:di+BUFFINF.Buff_Queue],ax ; 0
 17496                                  	;mov	word [es:di],0
 17497 0000069E 26891D                  	mov	[es:di],bx ; 0
 17498                                  	;;mov	[es:di+BUFFINF.Buff_Queue+2],cx ; cx = [top_of_cdss]
 17499                                  	;mov	[es:di+BUFFINF.Buff_Queue+2],ax ; ax = [top_of_cdss]
 17500 000006A1 26894502                	mov	[es:di+2],ax
 17501                                  
 17502                                  	;mov	es,cx
 17503 000006A5 8EC0                    	mov	es,ax	; [top_of_cdss] = [CONFBOT]
 17504                                  
 17505                                  	; 11/12/2022
 17506                                  	;xor	ax,ax
 17507                                  	;mov	di,ax			; es:di -> single buffer
 17508 000006A7 89DF                    	mov	di,bx
 17509                                  	; di = 0
 17510                                  
 17511                                  	;mov	[es:di+buffinfo.buf_next],ax ; points to itself
 17512                                  	; 11/12/2022
 17513                                  	;mov	[es:di],ax ; 0
 17514 000006A9 26891D                  	mov	[es:di],bx ; 0
 17515                                  	;mov	[es:di+buffinfo.buf_prev],ax ; points to itself
 17516                                  	; 11/12/2022
 17517                                  	;mov	[es:di+2],ax ; 0
 17518 000006AC 26895D02                	mov	[es:di+2],bx ; 0 
 17519                                  
 17520                                  	; 22/10/2022 - Retro DOS 4.0 (Modified MSDOS 5.0 IO.SYS SYINIT)
 17521                                  	; MSDOS 5.0 IO.SYS - SYSINIT:06E0h
 17522                                  
 17523                                  	;mov	word [es:di+buffinfo.buf_ID],00FFh ; free buffer,clear flag
 17524 000006B0 26C74504FF00            	mov	word [es:di+4],00FFh
 17525                                  ;SYSINIT:06E6h
 17526                                  	;;mov	[es:di+buffinfo.buf_sector],ax ; 0
 17527                                  	;mov	word [es:di+6],0
 17528                                  	; 11/12/2022
 17529                                  	;mov	[es:di+buffinfo.buf_sector],bx ; 0
 17530 000006B6 26895D06                	mov	[es:di+6],bx ; 0
 17531                                  	;;mov	[es:di+buffinfo.buf_sector+2],ax ; 0
 17532                                  	;mov	word [es:di+8],0
 17533                                  	; 11/12/2022
 17534                                  	;mov	[es:di+buffinfo.buf_sector+2],bx ; 0
 17535 000006BA 26895D08                	mov	[es:di+8],bx ; 0
 17536                                  
 17537 000006BE 5F                      	pop	di			; restore pointer to DOSINFO data
 17538 000006BF 07                      	pop	es
 17539                                  
 17540                                  	; 11/12/2022
 17541                                  	; ds = cs
 17542                                  	; 22/10/2022
 17543                                  	;push	cs
 17544                                  	;pop	ds
 17545                                  
 17546 000006C0 E80C05                  	call	TempCDS 		; set up cdss so re_init and sysinit
 17547                                  					;  can make disk system calls
 17548                                  					; tempcds trashes ds
 17549                                  	; 10/05/2019
 17550 000006C3 2E8E1E[8302]            	mov	ds,[cs:def_php]		; retrieve pointer to PSP returned by DOSINIT
 17551                                  
 17552                                  	;if not ibmjapver
 17553                                  	;call	far KERNEL_SEGMENT:re_init ; re-call the bios
 17554                                  	;endif
 17555                                  
 17556                                  	; 22/10/2022
 17557                                  ;SYSINIT:06FEh:	; (MSDOS 5.0 IO.SYS, SYSINIT)
 17558                                  	;call	far ptr 70h:89Bh
 17559 000006C8 9A[9908]7000            	call	DOSBIODATASEG:RE_INIT
 17560                                  
 17561 000006CD FB                      	sti				; ints ok
 17562 000006CE FC                      	cld				; make sure
 17563                                  
 17564                                  ; 23/03/2019
 17565                                  
 17566                                  ;SYSINIT:069Ch
 17567                                  
 17568                                  ; dosinit has set up a default "process" (php) at ds:0. we will move it out
 17569                                  ; of the way by putting it just below sysinit at end of memory.
 17570                                  
 17571 000006CF 8CCB                    	mov	bx,cs
 17572 000006D1 83EB10                  	sub	bx,10h
 17573 000006D4 8EC3                    	mov	es,bx
 17574 000006D6 31F6                    	xor	si,si
 17575 000006D8 89F7                    	mov	di,si
 17576 000006DA B98000                  	mov	cx,128
 17577 000006DD F3A5                    	rep	movsw
 17578                                  
 17579                                  	;mov	[es:PDB.JFN_POINTER+2],es ; Relocate
 17580                                  	; 22/10/2022
 17581 000006DF 268C063600              	mov	[es:36h],es
 17582                                  
 17583                                   	; Set Process Data Block - Program Segment Prefix address
 17584                                  	; BX = PDB/PSP segment
 17585 000006E4 B450                            mov	ah,50h ; SET_CURRENT_PDB
 17586 000006E6 CD21                    	int	21h			; tell DOS we moved it
 17587                                  			; DOS - 2+ internal - SET PSP SEGMENT
 17588                                  			; BX = segment address of new PSP
 17589                                  	; 22/10/2022
 17590                                  	; 27/03/2019
 17591 000006E8 1E                      	push	ds ; */			; preserve DS returned by DOSINIT
 17592                                  
 17593 000006E9 0E                      	push	cs	
 17594 000006EA 1F                      	pop	ds
 17595                                  
 17596                                  	; set up temp. critical error handler
 17597 000006EB BA[A433]                	mov	dx,int24		; set up int 24 handler
 17598                                  	;;mov	ax,(SET_INTERRUPT_VECTOR*256)+24h
 17599                                  	;mov	ax,(SET_INTERRUPT_VECTOR<<8)|24h
 17600 000006EE B82425                  	mov	ax,2524h
 17601 000006F1 CD21                    	int	21h
 17602                                  
 17603 000006F3 803E[FF03]00                    cmp     byte [toomanydrivesflag],0 ; Q: >24 partitions?      M029
 17604 000006F8 7405                            je      short no_err		   ;  N: continue            M029
 17605 000006FA BA[A238]                        mov     dx,TooManyDrivesMsg	   ;  Y: print error message M029
 17606                                          ; 22/10/2022
 17607                                  	;call	print 			   ;		             M029
 17608                                  	; 12/12/2022
 17609 000006FD EB03                    	jmp	short p_dosinit_msg ; 23/03/2019 - Retro DOS v4.0                    
 17610                                  no_err:
 17611                                  	; 12/05/2019
 17612                                  	;----------------------------------------------
 17613                                  	; 27/06/2018 - Retro DOS v3.0	; 23/03/2019 - Retro DOS v4.0
 17614                                  	; 22/10/2022 - Retro DOS v4.0
 17615                                  	; 12/12/2022
 17616 000006FF BA[A833]                	mov	dx,BOOTMES		; Display (fake) MSDOS version message
 17617                                  p_dosinit_msg:
 17618 00000702 E87A2C                  	call	print			; Print message
 17619                                  	;----------------------------------------------
 17620                                  	
 17621                                  	; 11/12/2022
 17622                                  	; 22/10/2022
 17623                                  	; 23/03/2019 - Retro DOS v4.0
 17624                                  	;pop	ds			; start of free memory
 17625                                  	;mov	dl,[cs:DEFAULT_DRIVE]
 17626                                  	
 17627                                  	; 11/12/2022
 17628                                  	; 27/03/2019
 17629 00000705 8A16[9602]              	mov	dl,[DEFAULT_DRIVE]	
 17630 00000709 1F                      	pop	ds ; */
 17631                                  
 17632 0000070A 08D2                    	or	dl,dl
 17633                                  	;jz	short nodrvset		; bios didn't say
 17634 0000070C 7405                    	jz	short ProcessConfig  ; (Retro DOS v4.0 does not contain DBLSPACE code)
 17635                                  	;dec	dl			; A = 0
 17636                                  	; 18/12/2022
 17637 0000070E 4A                      	dec	dx
 17638 0000070F B40E                    	mov	ah,0Eh	; SET_DEFAULT_DRIVE
 17639 00000711 CD21                    	int	21h			; select the disk
 17640                                  			; DOS - SELECT DISK
 17641                                  			; DL = new default drive number (0 = A, 1 = B, etc.)
 17642                                  			; Return: AL = number of logical drives
 17643                                  nodrvset:
 17644                                  	;ifdef	dblspace_hooks
 17645                                  	;	....
 17646                                  	;	....
 17647                                  	;endif	
 17648                                  
 17649                                  ; MSDOS 6.21 IO.SYS, SYSINIT:0744h
 17650                                  
 17651                                  ; 23/03/2019 - Retro DOS v4.0 (MSDOS 6.0, SYSINIT1.ASM, 1991)
 17652                                  ; ----------------------------------------------------------------------------
 17653                                  ; 22/10/2022 - Retro DOS v4.0 (MSDOS 5.0 IO.SYS SYSINIT)
 17654                                  
 17655                                  ProcessConfig:
 17656                                  	;; ds = cs ; 27/03/2019
 17657                                  	; 11/12/2022
 17658                                  	; ds <> cs	
 17659                                  
 17660                                  ; (MSDOS 5.0 IO.SYS - SYSINIT:0746h)
 17661                                  
 17662 00000713 E8FF17                  	call	doconf			; do pre-scan for dos=high/low
 17663                                  
 17664                                  	; 11/12/2022
 17665                                  	; 27/03/2019
 17666                                  	; ds = cs (at return from doconf)
 17667                                  
 17668                                  ; Now, if this is not romdos, we decide what to do with the DOS code.
 17669                                  ; It will either be relocated to low memory, above the DOS data structures,
 17670                                  ; or else it will be located in HiMem, in which case a stub with the DOS
 17671                                  ; code entry points will be located in low memory. Dos_segreinit is used
 17672                                  ; to tell the DOS data where the code has been placed, and to install the
 17673                                  ; low memory stub if necessary. If the DOS is going to go into HiMem, we
 17674                                  ; must first initialize it in its present location and load the installable
 17675                                  ; device drivers. Then, if a HiMem driver has been located, we can actually
 17676                                  ; relocate the DOS code into HiMem.
 17677                                  ;
 17678                                  ; For ROMDOS, if DOS=HIGH is indicated, then we need to call dos_segreinit
 17679                                  ; to install the low memory stub (this must be done before allowing any
 17680                                  ; device drivers to hook interrupt vectors). Otherwise, we don't need to 
 17681                                  ; call dos_segreinit at all, since the interrupt vector table has already 
 17682                                  ; been patched.
 17683                                  
 17684                                  	; 22/10/2022 - Retro DOS v4.0
 17685                                  	; (MSDOS 5.0 IO.SYS - SYSINIT:0749h)
 17686                                  	;cmp	byte [cs:runhigh],0	; Did user choose to run low ?
 17687                                  	; 11/12/2022
 17688 00000716 803E[6A02]00            	cmp	byte [runhigh],0
 17689 0000071B 740C                    	je	short dont_install_stub	; yes, don't install dos low mem stub
 17690                                  
 17691                                  ;------ user chose to load high
 17692                                  
 17693                                  	; 22/10/2022
 17694                                  	;mov	es,[cs:CURRENT_DOS_LOCATION] ; MSDOS 6.21 (& MSDOS 6.0)
 17695                                  	; 11/12/2022
 17696                                  	; ds = cs
 17697 0000071D 8E06[7102]              	mov	es,[CURRENT_DOS_LOCATION]
 17698                                  
 17699                                  	;mov	es,[cs:FINAL_DOS_LOCATION]   ; Retro DOS v4.0
 17700                                  	; 27/03/2019
 17701                                  	;;mov	es,[FINAL_DOS_LOCATION]
 17702                                  
 17703 00000721 31C0                    	xor	ax,ax			; ax = 0 ---> install stub
 17704                                  	; 11/12/2022
 17705                                  	; ds = cs
 17706                                  	;call	far [cs:dos_segreinit]	; call dos segreinit
 17707 00000723 FF1E[7B02]              	call	far [dos_segreinit]
 17708                                  
 17709 00000727 EB10                    	jmp	short do_multi_pass
 17710                                  
 17711                                  ;------ User chose to load dos low
 17712                                  
 17713                                  dont_install_stub:
 17714                                  	; 22/10/2022
 17715 00000729 31DB                    	xor	bx,bx			; M012
 17716                                  					; don't use int 21 call to alloc mem
 17717 0000072B E8D701                  	call	MovDOSLo		; move it !
 17718                                  
 17719 0000072E B80100                  	mov	ax,1			; dont install stub
 17720                                  	; 11/12/2022
 17721                                  	; ds = cs
 17722 00000731 8E06[7102]              	mov	es,[CURRENT_DOS_LOCATION]
 17723                                  	;mov	es,[cs:CURRENT_DOS_LOCATION] ; set_dos_final_position set it up
 17724                                  	;;mov	es,[cs:FINAL_DOS_LOCATION]   ; Retro DOS v4.0
 17725                                  	; 27/03/2019
 17726                                  ;do_multi_pass:
 17727                                  	;;mov	es,[FINAL_DOS_LOCATION] 
 17728                                  
 17729                                  	; 11/12/2022
 17730                                  	; ds =cs
 17731                                  	;call	far [cs:dos_segreinit]	; inform dos about new seg
 17732 00000735 FF1E[7B02]              	call	far [dos_segreinit]
 17733                                  do_multi_pass:
 17734 00000739 E81301                  	call	AllocFreeMem		; allocate all the free mem
 17735                                  					; & update [memhi] & [area]
 17736                                  					; start of free memory.
 17737                                  	;ifdef	dblspace_hooks
 17738                                  	;mov	bx,0			; magic backdoor to place int hooks
 17739                                  	;call	cs:MagicBackdoor
 17740                                  	;endif
 17741                                  
 17742                                  ; Now, process config.sys some more.  
 17743                                  ; Load the device drivers and install programs
 17744                                  
 17745                                  	; 22/10/2022
 17746                                  	;inc	byte [cs:multi_pass_id]	; multi_pass_id = 1
 17747                                  	; 11/12/2022
 17748                                  	; ds = cs
 17749 0000073C FE06[4903]              	inc	byte [multi_pass_id]
 17750 00000740 E86518                  	call	multi_pass		; load device drivers
 17751 00000743 E82825                  	call	ShrinkUMB
 17752 00000746 E84E25                  	call	UnlinkUMB		; unlink all UMBs	;M002
 17753                                  	; 02/11/2022
 17754                                  	;inc	byte [cs:multi_pass_id]	; multi_pass_id = 2
 17755                                  	; 11/12/2022
 17756                                  	; ds = cs
 17757 00000749 FE06[4903]              	inc	byte [multi_pass_id]
 17758 0000074D E85818                  	call	multi_pass		; was load ifs (now does nothing)
 17759                                  
 17760                                  	;ifdef	dblspace_hooks
 17761                                  	;call	MagicPostload		; make sure Magicdrv is final placed
 17762                                  	;endif
 17763                                  
 17764                                  	; ds = cs
 17765                                  	
 17766 00000750 E81405                  	call	endfile			; setup fcbs, files, buffers etc
 17767                                  
 17768                                  	;ifdef	dblspace_hooks
 17769                                  	;call	MagicSetCdss		; disable CDSs of reserved drives
 17770                                  	;endif
 17771                                  
 17772                                  ;Reset SysinitPresent flag here. This is needed for the special fix for lying
 17773                                  ;to device drivers. This has been moved up to this point to avoid problems 
 17774                                  ;with overlays called from installed programs
 17775                                  
 17776                                  	; 11/12/2022
 17777                                  	; ds = cs
 17778                                  
 17779                                  	;;mov	ax,Bios_Data ; 0070h
 17780                                  	;mov	ax,KERNEL_SEGMENT
 17781                                  	; 21/10/2022
 17782 00000753 B87000                  	mov	ax,DOSBIODATASEG ; 0070h
 17783 00000756 8EC0                    	mov	es,ax			; point ES to bios data
 17784                                  
 17785 00000758 26C606[FB08]00          	mov	byte [es:SysinitPresent],0 ; clear SysinitPresent flag
 17786                                  
 17787                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 17788                                  	;test	word [cs:install_flag],have_install_cmd ; 1
 17789                                  	;test	byte [cs:install_flag],1
 17790                                  	; 11/12/2022
 17791                                  	; ds = cs
 17792 0000075E F606[4A03]01            	test	byte [install_flag],1
 17793                                  	;test	byte [cs:install_flag],have_install_cmd
 17794                                  					; are there install commands?
 17795 00000763 7407                    	jz	short dolast		; no, no need for further processing
 17796                                  	;inc	byte [cs:multi_pass_id]	; mult_pass_id = 3
 17797                                  	; 11/12/2022
 17798                                  	; ds =cs
 17799 00000765 FE06[4903]              	inc	byte [multi_pass_id]
 17800 00000769 E83C18                  	call	multi_pass		; execute install= commands
 17801                                  
 17802                                  dolast:
 17803                                  	
 17804                                  ; [area] has the segment address for the allocated memory of sysinit, confbot.
 17805                                  ;  free the confbot area used for config.sys and sysinit itself.
 17806                                  
 17807                                  ; Now if DOS is supposed to run high, we actually move it into high memory 
 17808                                  ; (if HiMem manager is available). For ROMDOS, we don't actually move
 17809                                  ; anything, but just set up the ROM area for suballocation (or print
 17810                                  ; a message if HiMem is not available).
 17811                                  ;
 17812                                  ; There is also this little hack for CPM style DOS calls that needs to
 17813                                  ; be done when A20 is set...
 17814                                  
 17815                                  	; 11/12/2022
 17816                                  	; ds = cs
 17817                                  
 17818                                  	; 22/10/2022
 17819                                  	;cmp	byte [cs:runhigh],0FFh	; are we still waiting to be moved?
 17820                                  	; 11/12/2022
 17821 0000076C 803E[6A02]FF            	cmp	byte [runhigh],0FFh
 17822 00000771 7503                    	jne	short _@@_ ; 09/12/2022 ; no, our job is over
 17823 00000773 E83E01                  	call	LoadDOSHiOrLo
 17824                                  _@@_:
 17825                                  	;cmp	byte [cs:runhigh],0	; are we running low
 17826                                  	; 11/12/2022
 17827                                  	; ds = cs
 17828 00000776 803E[6A02]00            	cmp	byte [runhigh],0
 17829                                  	;je	short _@@@
 17830 0000077B 7403                    	je	short ConfigDone	; yes, no CPM hack needed
 17831 0000077D E83004                  	call	CPMHack			; make ffff:d0 same as 0:c0
 17832                                  _@@@:
 17833                                  
 17834                                  ; We are now done with CONFIG.SYS processing
 17835                                  
 17836                                  ConfigDone:
 17837                                  	; 12/12/2022
 17838                                  	; 22/10/2022
 17839                                  	;mov	byte [cs:donotshownum],1 
 17840                                  					; done with config.sys.
 17841                                  					; do not show line number message.
 17842                                  	;mov	es,[cs:area]
 17843                                  	; 12/12/2022
 17844                                  	; ds = cs
 17845                                  	; 27/03/2019
 17846 00000780 C606[D103]01            	mov	byte [donotshownum],1
 17847 00000785 8E06[E403]              	mov	es,[area]
 17848                                  
 17849 00000789 B449                            mov     ah,49h ; DEALLOC	; free allocated memory for command.com
 17850 0000078B CD21                    	int	21h
 17851                                  			; DOS - 2+ - FREE MEMORY
 17852                                  			; ES = segment address of area to be freed
 17853                                  
 17854                                  	; 22/10/2022
 17855                                  	;test	word [cs:install_flag],2
 17856                                  	;test	word [cs:install_flag],has_installed ; sysinit_base installed?
 17857                                  	;test	byte [cs:install_flag],has_installed
 17858                                  	; 11/12/2022
 17859                                  	; ds = cs
 17860 0000078D F606[4A03]02            	test	byte [install_flag],2 ; has_installed
 17861                                  	;test	byte [install_flag],has_installed
 17862 00000792 741F                    	jz	short skip_free_sysinitbase ; no.
 17863                                  
 17864                                  ; set block from the old_area with impossible_owner_size.
 17865                                  ; this will free the unnecessary sysinit_base that had been put in memory to
 17866                                  ; handle install= command.
 17867                                  
 17868                                  	; 12/12/2022
 17869                                          ;push	es		; BUGBUG 3-30-92 JeffPar: no reason to save ES
 17870                                  	;push	bx
 17871                                  	
 17872                                  	; 22/10/2022
 17873                                  	;mov	es,[cs:old_area]
 17874                                  	;mov	bx,[cs:impossible_owner_size]
 17875                                  	; 12/12/2022
 17876                                  	; ds = cs
 17877 00000794 8E06[DA03]              	mov	es,[old_area]
 17878 00000798 8B1E[DC03]              	mov	bx,[impossible_owner_size]
 17879                                  	
 17880 0000079C B44A                    	mov	ah,4Ah ; SETBLOCK
 17881 0000079E CD21                    	int	21h
 17882                                  			; DOS - 2+ - ADJUST MEMORY BLOCK SIZE (SETBLOCK)
 17883                                  			; ES = segment address of block to change
 17884                                  			; BX = new size in paragraphs
 17885 000007A0 8CC0                    	mov	ax,es
 17886 000007A2 48                      	dec	ax
 17887 000007A3 8EC0                    	mov	es,ax			; point to arena
 17888                                  	;mov	word [es:ARENA.OWNER],8	; set impossible owner
 17889 000007A5 26C70601000800          	mov	word [es:1],8
 17890                                  	;mov	word [es:ARENA.NAME],'SD' ; 4453h ; System Data
 17891 000007AC 26C70608005344          	mov	word [es:8],'SD'
 17892                                  	
 17893                                  	; 12/12/2022
 17894                                  	;pop	bx
 17895                                          ;pop     es		; BUGBUG 3-30-92 JeffPar: no reason to save ES
 17896                                  
 17897                                  skip_free_sysinitbase:
 17898                                  	; 22/10/2022
 17899                                  	;cmp	byte [cs:runhigh],0
 17900                                  	; 12/12/2022
 17901                                  	; ds = cs
 17902 000007B3 803E[6A02]00            	cmp	byte [runhigh],0	
 17903 000007B8 7403                    	je	short _@@@@
 17904                                  
 17905 000007BA E8D502                  	call	InstVDiskHeader	; Install VDISK header (allocates some mem from DOS)
 17906                                  
 17907                                  ; ----------------------------------------------------------------------------
 17908                                  
 17909                                  _@@@@:
 17910                                  	; 12/12/2022
 17911                                  	; ds = cs
 17912                                  	; 22/10/2022
 17913                                  	; 27/03/2019
 17914                                  	;push	cs
 17915                                  	;pop	ds			; point DS to sysinitseg
 17916                                  
 17917                                  ; set up the parameters for command
 17918                                  
 17919                                  	; 22/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS SYSINIT)
 17920                                  ;;ifdef  MULTI_CONFIG
 17921                                  ;	mov	byte [config_cmd],0	; set special code for query_user
 17922                                  ;       call    query_user		; to issue the AUTOEXEC prompt
 17923                                  ;	jnc	short process_autoexec	; we should process autoexec normally
 17924                                  ;	; !!!
 17925                                  ;	or	byte [bQueryOpt],4 ; MSDOS 6.21 IO.SYS - SYSINIT:081Fh
 17926                                  ;       ; !!!
 17927                                  ;	call    disable_autoexec        ; no, we should disable it
 17928                                  ;process_autoexec:
 17929                                  ;;endif	; !!!
 17930                                  ;	call	CheckQueryOpt	; MSDOS 6.21 IO.SYS - SYSINIT:0827h	
 17931                                  ;	; !!!
 17932                                  
 17933                                  	; 22/10/2022 
 17934                                  	;mov     cl,[command_line]
 17935                                          ;mov     ch,0
 17936                                          ;inc     cx
 17937                                          ;mov     si,command_line	
 17938                                  	;add     si,cx
 17939                                          ;mov     byte [si],cr	; cr-terminate command line
 17940                                  
 17941                                  	; 22/10/2022 - Retro DOS 4.0 (Modified MSDOS 5.0 IO.SYS)
 17942                                  	; (SYSINIT:0809h)
 17943                                  	
 17944                                  	;mov	si,(offset command_line+1)
 17945 000007BD BE[AA02]                	mov	si,command_line+1
 17946 000007C0 1E                      	push    ds
 17947 000007C1 07                      	pop     es
 17948 000007C2 89F7                    	mov     di,si
 17949 000007C4 B1FF                    	mov     cl,0FFh ; -1
 17950                                  _@_loop:
 17951 000007C6 FEC1                    	inc     cl ; +1
 17952 000007C8 AC                      	lodsb
 17953 000007C9 AA                      	stosb
 17954 000007CA 08C0                    	or      al,al
 17955 000007CC 75F8                    	jnz     short _@_loop
 17956 000007CE 4F                      	dec     di
 17957 000007CF B00D                    	mov     al,0Dh
 17958 000007D1 AA                      	stosb			; cr-terminate command line
 17959 000007D2 880E[A902]              	mov     [command_line],cl ; command line length (except CR)
 17960                                  
 17961                                  ; ----------------------------------------------------------------------------
 17962                                  
 17963                                  ;   Once we get to this point, the above code, which is below "retry"
 17964                                  ;   in memory, can be trashed (and in fact is -- see references to retry
 17965                                  ;   which follow....)
 17966                                  
 17967                                  retry:
 17968 000007D6 BA[5534]                	mov	dx,commnd	; now pointing to file description
 17969                                  
 17970                                  ; we are going to open the command interpreter and size it as is done in
 17971                                  ; ldfil. the reason we must do this is that sysinit is in free memory. if
 17972                                  ; there is not enough room for the command interpreter,exec will probably
 17973                                  ; overlay our stack and code so when it returns with an error sysinit won't be
 17974                                  ; here to catch it. this code is not perfect (for instance .exe command
 17975                                  ; interpreters are possible) because it does its sizing based on the
 17976                                  ; assumption that the file being loaded is a .com file. it is close enough to
 17977                                  ; correctness to be usable.
 17978                                  
 17979                                  ; first, find out where the command interpreter is going to go.
 17980                                  
 17981 000007D9 52                      	push	dx		; save pointer to name
 17982 000007DA BBFFFF                  	mov	bx,0FFFFh
 17983 000007DD B448                    	mov	ah,48h	; ALLOC
 17984 000007DF CD21                            int     21h             ; get biggest piece
 17985 000007E1 B448                    	mov	ah,48h	; ALLOC
 17986 000007E3 CD21                    	int	21h		; second time gets it
 17987 000007E5 7243                    	jc	short memerrjx	; oooops
 17988                                  
 17989 000007E7 8EC0                    	mov	es,ax
 17990 000007E9 B449                    	mov	ah,49h	; DEALLOC
 17991 000007EB CD21                    	int	21h		; give it right back
 17992 000007ED 89DD                    	mov	bp,bx
 17993                                  
 17994                                  ; es:0 points to block,and bp is the size of the block in para.
 17995                                  
 17996                                  ; we will now adjust the size in bp down by the size of sysinit.
 17997                                  ; we need to do this because exec might get upset if some of the exec
 17998                                  ; data in sysinit is overlayed during the exec.
 17999                                  
 18000                                  	; 22/10/2022
 18001                                  	; (MSDOS 5.0 IO.SYS SYSINIT:083Bh)
 18002 000007EF 8B1E[9202]                      mov     bx,[MEMORY_SIZE] ; get location of end of memory
 18003 000007F3 8CC8                    	mov	ax,cs		 ; get location of beginning of sysinit
 18004                                  
 18005                                  ; Note that the "config_wrkseg" environment data is a segment in
 18006                                  ; unallocated memory (as of the Dealloc of [area], above). This is ideal
 18007                                  ; in one sense, because Exec is going to make a copy of it for COMMAND.COM
 18008                                  ; anyway, and no one has responsibility for freeing "config_wrkseg". But
 18009                                  ; we need to make sure that there's no way Exec will stomp on that data
 18010                                  ; before it can copy it, and one way to do that is to make the available
 18011                                  ; memory calculation even more "paranoid", by subtracting "config_wrkseg"
 18012                                  ; from the "memory_size" segment value (which is typically A000h) instead
 18013                                  ; of the current sysinit CS....
 18014                                  ;
 18015                                  ; The reason I use the term "paranoid" is because this code should have
 18016                                  ; slid the data required by Exec up to the very top of memory, because as
 18017                                  ; it stands, you have to have sizeof(COMMAND.COM) PLUS 64K to load just
 18018                                  ; COMMAND.COM (64k is about what sysinit, and all the goop above sysinit,
 18019                                  ; consumes). Now it's just a little worse (65K or more, depending on
 18020                                  ; the size of your CONFIG.SYS, since the size of the environment workspace
 18021                                  ; is determined by the size of CONFIG.SYS.... -JTP
 18022                                  
 18023                                  	; 22/10/2022
 18024                                  	;mov	cx,[config_envlen]
 18025                                          ;jcxz	no_env		; use config_wrkseg only if there's env data
 18026                                          ;mov	ax,[config_wrkseg]
 18027                                  ;no_env:
 18028                                  	; 22/10/2022
 18029                                  	; (MSDOS 5.0 IO.SYS SYSINIT:0841h)
 18030 000007F5 29C3                      	sub     bx,ax           ; bx is size of sysinit in para
 18031 000007F7 83C311                  	add	bx,11h		; add the sysinit php
 18032 000007FA 29DD                    	sub	bp,bx		; sub sysinit size from amount of free memory
 18033 000007FC 722C                    	jc	short memerrjx	; if there isn't even this much memory, give up
 18034                                  
 18035                                          ;mov	ax,(OPEN<<8)	; open the file being execed
 18036 000007FE B8003D                          mov	ax,3D00h
 18037 00000801 F9                      	stc                     ; in case of int 24
 18038 00000802 CD21                    	int	21h
 18039 00000804 7241                    	jc	short comerr	; ooops
 18040                                  			; DOS - 2+ - OPEN DISK FILE WITH HANDLE
 18041                                  			; DS:DX -> ASCIZ filename
 18042                                  			; AL = access mode
 18043                                  			; 0 - read
 18044                                  	; 22/10/2022
 18045                                  	; (MSDOS 5.0 IO.SYS SYSINIT:0852h)
 18046 00000806 89C3                            mov     bx,ax           ; handle in bx
 18047                                  
 18048                                  ;   If the standard command interpreter is being used, verify it is correct
 18049                                  
 18050                                  	; 22/10/2022
 18051                                  	;cmp	byte [newcmd],0	; was a new shell selected?
 18052                                  	;jne	short skip_validation ; yes
 18053                                  	;mov	dx,retry-4
 18054                                  	;mov	cx,4		;
 18055                                  	;mov	ah,READ		;
 18056                                  	;int	21h		;
 18057                                  	;cmp	byte [retry-4],0E9h
 18058                                  	;jne	short comerr
 18059                                  	;; 20/04/2019 - Retro DOS v4.0
 18060                                  	;cmp	byte [retry-1],64h ; MSDOS 6.21 IO.SYS - SYSINIT:088Ch
 18061                                  	;;cmp	byte [retry-1],((MAJOR_VERSION&0Fh)<<4)|(MINOR_VERSION&0Fh)
 18062                                  	;jne	short comerr	;
 18063                                  
 18064                                  ;skip_validation:
 18065                                  	; 22/10/2022
 18066                                  	; (MSDOS 5.0 IO.SYS SYSINIT:0854h)
 18067 00000808 31C9                    	xor	cx,cx
 18068 0000080A 31D2                    	xor	dx,dx
 18069                                  	;mov	ax,(LSEEK<<8)|2
 18070 0000080C B80242                  	mov	ax,4202h
 18071 0000080F F9                      	stc			;in case of int 24
 18072 00000810 CD21                    	int	21h		; get file size in dx:ax
 18073 00000812 7233                    	jc	short comerr
 18074                                  				; convert size in dx:ax to para in ax
 18075 00000814 83C00F                  	add	ax,15		; round up size for conversion to para
 18076 00000817 83D200                  	adc	dx,0
 18077 0000081A E8A903                  	call	off_to_para
 18078 0000081D B10C                    	mov	cl,12
 18079 0000081F D3E2                    	shl	dx,cl		; low nibble of dx to high nibble
 18080 00000821 09D0                    	or	ax,dx		; ax is now # of para for file
 18081 00000823 83C010                  	add	ax,10h		; 100h byte php
 18082 00000826 39E8                    	cmp	ax,bp		; will command fit in available mem?
 18083 00000828 7203                    	jb	short okld	; jump if yes.
 18084                                  
 18085                                  	; 22/10/2022
 18086                                  memerrjx:	; (MSDOS 5.0 IO.SYS SYSINIT:0876h)
 18087                                  	;jmp	memerr	; (MSDOS 5.0 IO.SYS SYSINIT:34D5h)
 18088                                  	; 02/11/2022
 18089                                  	;jmp	mem_err
 18090                                  	; 11/12/2022
 18091                                  	; ds = cs
 18092 0000082A E9D628                  	jmp	mem_err2
 18093                                  
 18094                                  ;memerrjx:
 18095                                  ;	mov	dx,badmem
 18096                                  ;	call	print
 18097                                  ;       jmp     short continue
 18098                                  
 18099                                  okld:
 18100 0000082D B43E                    	mov	ah,3Eh ; CLOSE
 18101 0000082F CD21                    	int	21h		; close file
 18102                                  
 18103                                  	; 22/10/2022
 18104 00000831 5A                      	pop	dx	; (MSDOS 5.0 IO.SYS SYSINIT:087Dh)
 18105                                  
 18106                                  	; 24/03/2019
 18107                                  
 18108 00000832 0E                      	push	cs		; point es to sysinitseg
 18109 00000833 07                      	pop	es
 18110 00000834 BB[3B03]                        mov     bx,COMEXE	; point to exec block
 18111                                  	; 22/10/2022
 18112                                  	;pop	dx              ; recover pointer to name
 18113                                  
 18114                                  ;;ifdef	MULTI_CONFIG
 18115                                  
 18116                                  ;   If there's any environment data in "config_wrkseg", pass it to shell;
 18117                                  ;   there will be data if there were any valid SET commands and/or if a menu
 18118                                  ;   selection was made (in which case the CONFIG environment variable will be
 18119                                  ;   set to that selection).
 18120                                  
 18121                                  	; 23/10/2022
 18122                                  	;mov	cx,[config_envlen]
 18123                                  	;jcxz	no_envdata
 18124                                          ;mov	cx,[config_wrkseg]
 18125                                  ;no_envdata:
 18126                                  	;;mov	[bx+EXEC0.ENVIRON],cx
 18127                                  	;mov	[bx],cx
 18128                                  
 18129                                  ;;endif	;MULTI_CONFIG
 18130                                  
 18131                                  	; 23/10/2022
 18132                                  	; (MSDOS 5.0 IO.SYS SYSINIT:0883h)
 18133                                  
 18134                                  	;mov	[bx+EXEC0.COM_LINE+2],cs ; set segments
 18135 00000837 8C4F04                  	mov	[bx+4],cs
 18136                                  	;mov	[bx+EXEC0.5C_FCB+2],cs
 18137 0000083A 8C4F08                  	mov	[bx+8],cs
 18138                                  	;mov	[bx+EXEC0.6C_FCB+2],cs
 18139 0000083D 8C4F0C                  	mov	[bx+12],cs
 18140                                  
 18141                                  	;mov	ax,(EXEC<<8) + 0
 18142                                  	; 23/10/2022
 18143 00000840 31C0                    	xor	ax,ax
 18144 00000842 B44B                    	mov	ah,4Bh        
 18145                                  
 18146 00000844 F9                      	stc                     ; in case of int 24
 18147 00000845 CD21                            int     21h             ; go start up command
 18148                                  			; DOS - 2+ - LOAD OR EXECUTE (EXEC)
 18149                                  			; DS:DX -> ASCIZ filename
 18150                                  			; ES:BX -> parameter block
 18151                                  			; AL = subfunc: load & execute program
 18152                                  	;push	cs
 18153                                  	;pop	ds
 18154                                  
 18155                                  	; 23/10/2022
 18156                                  	;push	dx		; push to balance fall-through pop
 18157                                  
 18158                                  ; note fall through if exec returns (an error)
 18159                                  comerr:
 18160                                  	; 23/10/2022
 18161                                  ;;ifdef	MULTI_CONFIG
 18162                                  	;cmp	byte [commnd4],0
 18163                                  	;je	short comerr2	; all defaults exhausted, print err msg
 18164                                  	;cmp	byte [newcmd],0
 18165                                  	;je	short continue	; don't print err msg for defaults just yet
 18166                                  ;comerr2:
 18167                                  ;;endif
 18168 00000847 BA[A537]                        mov     dx,badcom	; want to print command error
 18169 0000084A E8062B                  	call	badfil
 18170                                  continue:
 18171                                  	; 23/10/2022
 18172                                  	;pop	dx
 18173                                  
 18174                                  ;;ifndef MULTI_CONFIG
 18175                                  	;jmp	stall
 18176                                  	; 24/10/2022
 18177                                  stall:		; (MSDOS 5.0 IO.SYS, SYSINIT:0899h)
 18178 0000084D EBFE                    	jmp	short stall
 18179                                  ;;else
 18180                                  	; 23/10/2022
 18181                                  	;mov	ah,GET_DEFAULT_DRIVE ; 19h
 18182                                  	;int	21h             ;
 18183                                  	;add	al,'A'          ;
 18184                                  	;mov	dl,al           ; DL == default drive letter
 18185                                  	;mov	si,commnd2
 18186                                  	;cmp	byte [newcmd],0 ; if a SHELL= was given
 18187                                  	;jne	short do_def2	; then try the 2nd alternate;
 18188                                  	;mov	byte [si],0	; otherwise, the default SHELL= was tried,
 18189                                  	;jmp	short do_def3   ; which is the same as our 2nd alt, so skip it
 18190                                  ;do_def2:			
 18191                                  	;cmp	byte [si],0	; has 2nd alternate been tried?
 18192                                          ;jne	short do_alt    ; no
 18193                                  ;do_def3:
 18194                                  	;mov	si,commnd3
 18195                                  	;cmp	byte [si],0	; has 3rd alternate been tried?
 18196                                  	;jne	short do_alt	; no
 18197                                  	;mov	si,commnd4
 18198                                  	;cmp	byte [si],0	; has 4th alternate been tried?
 18199                                  	;jne	short do_alt	; no
 18200                                  	;push	dx              ;
 18201                                  	;mov	dx,badcomprmpt
 18202                                  	;call	print		;
 18203                                  	;pop	dx              ; recover default drive letter in DL
 18204                                  ;request_input:			;
 18205                                  	;mov	ah,STD_CON_OUTPUT
 18206                                  	;int	21h             ;
 18207                                  	;push	dx              ;
 18208                                  	;mov	dl,'>'          ;
 18209                                  	;int	21h             ;
 18210                                  	;mov	bl,[tmplate+1]	;
 18211                                  	;mov	bh,0            ;
 18212                                  	;mov	byte [commnd+bx],0Dh
 18213                                  	;mov	dx,tmplate
 18214                                  	;mov	ah,STD_CON_STRING_INPUT
 18215                                  	;int	21h             ; read a line of input
 18216                                  	;mov	dx,crlfm	;
 18217                                  	;call	print           ;
 18218                                  	;pop	dx              ;
 18219                                  	;mov	bl,[tmplate+1]	;
 18220                                  	;or	bl,bl           ; was anything typed?
 18221                                  	;jz	short request_input ;
 18222                                  	;mov	byte [newcmd],1 ; disable validation for user-specified binaries
 18223                                  	;mov	byte [commnd+bx],0 ; NULL-terminate it before execing it
 18224                                  	;mov	word [command_line],0D00h
 18225                                  	;jmp	short do_exec   ;
 18226                                  ;do_alt:
 18227                                  	;push	ds
 18228                                  	;pop	es
 18229                                  	;mov	byte [newcmd],0 ; force validation for alternate binaries
 18230                                  	;mov	di,commnd	;
 18231                                  ;do_alt1:
 18232                                  	;lodsb			; copy the alternate, zapping it as we go,
 18233                                  	;mov	byte [si-1],0	; so that we know it's been tried
 18234                                  	;stosb 			;
 18235                                  	;or	al,al		;
 18236                                  	;jnz	short do_alt1	;
 18237                                  	;mov	di,command_line
 18238                                  	;cmp	byte [si+2],':'
 18239                                  	;jne	short do_alt2	;
 18240                                  	;mov	[si+1],dl	; stuff default drive into alt. command line
 18241                                  ;do_alt2:			;
 18242                                  	;lodsb			;
 18243                                  	;stosb			;
 18244                                  	;or	al,al           ;
 18245                                  	;jnz	short do_alt2   ;
 18246                                  	;mov	byte [di-1],cr
 18247                                  
 18248                                  ;;   Last but not least, see if we need to call disable_autoexec
 18249                                  
 18250                                  	; MSDOS 6.0 (SYSINIT1.ASM)
 18251                                  	;;cmp	[command_line-1],0
 18252                                          ;;jne	short do_exec   ;
 18253                                          ;;mov	[command_line-1],'/'
 18254                                  	;;call	disable_autoexec ;
 18255                                  
 18256                                  	; MSDOS 6.21 IO.SYS (SYSINIT:0994h)
 18257                                  	;mov	byte [dae_flag],0 ; 24/03/2019 - Retro DOS v4.0 	
 18258                                  	;call	disable_autoexec
 18259                                  	;call	CheckQueryOpt	; 24/03/2019 - Retro DOS v4.0
 18260                                  ;do_exec:
 18261                                  	;jmp     retry		;
 18262                                  
 18263                                  ;;endif	;MULTI_CONFIG
 18264                                  
 18265                                  ; 24/03/2019 - Retro DOS v4.0
 18266                                  
 18267                                  ; ----------------------------------------------------------------------
 18268                                  ; procedure : AllocFreeMem
 18269                                  ;
 18270                                  ; Allocate Max memory from DOS to find out where to load DOS.
 18271                                  ; DOS is at temporary location when this call is being made
 18272                                  ;
 18273                                  ; Inputs : None
 18274                                  ; Outputs: The biggest chunk of memory is allocated (all mem at init time)
 18275                                  ;	   [area] & [memhi] set to the para value of the start of the
 18276                                  ;	   free memory.
 18277                                  ;
 18278                                  ; Uses   : AX, BX
 18279                                  ;
 18280                                  ; ----------------------------------------------------------------------
 18281                                  
 18282                                  	; 23/10/2022
 18283                                  AllocFreeMem:
 18284 0000084F BBFFFF                  	mov	bx,0FFFFh
 18285 00000852 B448                    	mov	ah,48h ; ALLOC
 18286 00000854 CD21                    	int	21h			; first time fails
 18287 00000856 B448                    	mov	ah,48h ; ALLOC
 18288 00000858 CD21                    	int	21h			; second time gets it
 18289                                  	; 11/12/2022
 18290                                  	; ds = cs
 18291                                  	;mov	[cs:area],ax
 18292                                  	;mov	[cs:memhi],ax		; memhi:memlo now points to
 18293 0000085A A3[E403]                	mov	[area],ax
 18294 0000085D A3[E003]                	mov	[memhi],ax		; memhi:memlo now points to			
 18295 00000860 C3                      	retn				; start of free memory
 18296                                  				
 18297                                  	; include msbio.cl6
 18298                                  ; ----------------------------------------------------------------------
 18299                                  DOSLOMSG:
 18300 00000861 484D41206E6F742061-     	db	'HMA not available: Loading DOS low',0Dh,0Ah,'$'
 18300 0000086A 7661696C61626C653A-
 18300 00000873 204C6F6164696E6720-
 18300 0000087C 444F53206C6F770D0A-
 18300 00000885 24                 
 18301                                  FEmsg:
 18302 00000886 466174616C20457272-     	db	'Fatal Error: Cannot allocate Memory for DOS',0Dh,0Ah,'$'
 18302 0000088F 6F723A2043616E6E6F-
 18302 00000898 7420616C6C6F636174-
 18302 000008A1 65204D656D6F727920-
 18302 000008AA 666F7220444F530D0A-
 18302 000008B3 24                 
 18303                                  
 18304                                  ; ----------------------------------------------------------------------
 18305                                  ;
 18306                                  ; procedure : LoadDOSHiOrLo
 18307                                  ;
 18308                                  ;		Tries to move DOS into HMA. If it fails then loads
 18309                                  ;		DOS into Low memory. For ROMDOS, nothing is actually
 18310                                  ;		moved; this just tries to allocate the HMA, and prints
 18311                                  ;		a message if this is not possible.
 18312                                  ;
 18313                                  ; ----------------------------------------------------------------------
 18314                                  
 18315                                  	; 23/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 18316                                  LoadDOSHiOrLo:
 18317                                  	; 27/03/2019 - Retro DOS v4.0
 18318                                  	; ds = cs
 18319 000008B4 E81F00                  	call	TryToMovDOSHi		; Try moving it into HMA (M024)
 18320                                  	;jc	short LdngLo		; If that don't work...
 18321                                  	;retn
 18322                                  	; 18/12/2022
 18323 000008B7 731C                    	jnc	short LoadDosHi_ok
 18324                                  LdngLo:
 18325                                  	; 23/10/2022
 18326                                  	;push	cs
 18327                                  	;pop	ds
 18328                                  	; 11/12/2022
 18329                                  	; ds = cs
 18330 000008B9 B409                    	mov	ah,9
 18331 000008BB BA[6108]                	mov	dx,DOSLOMSG		; inform user that we are
 18332 000008BE CD21                    	int	21h			; loading low
 18333                                  
 18334                                  ;ifndef ROMDOS
 18335                                  	; actually move the dos, and reinitialize it.
 18336                                  
 18337 000008C0 BB0100                  	mov	bx,1				; M012
 18338                                  						;  use int 21 alloc for mem
 18339 000008C3 E83F00                  	call	MovDOSLo
 18340                                  	; 11/12/2022
 18341                                  	; ds = cs
 18342                                  	;mov	es,[cs:CURRENT_DOS_LOCATION]	; give dos its temporary loc.
 18343                                  	; 23/10/2022
 18344 000008C6 8E06[7102]              	mov	es,[CURRENT_DOS_LOCATION]
 18345                                  	;;mov	es,[cs:FINAL_DOS_LOCATION]  ; 24/03/2019 - Retro DOS v4.0
 18346                                  	;mov	es,[FINAL_DOS_LOCATION] ; 27/03/2019
 18347 000008CA 31C0                    	xor	ax,ax				; ax = 00 ---> install stub
 18348                                  	; 11/12/2022
 18349                                  	; ds = cs
 18350                                  	;call	far [cs:dos_segreinit]		; call dos segreinit
 18351 000008CC FF1E[7B02]              	call	far [dos_segreinit] ; 27/03/2019
 18352                                  	
 18353                                  ;endif ; ROMDOS
 18354                                  	; 23/10/2022
 18355                                  	;mov	byte [cs:runhigh],0		; mark that we are running lo
 18356                                  	; 11/12/2022
 18357                                  	; ds = cs
 18358 000008D0 C606[6A02]00            	mov	byte [runhigh],0 ; 27/03/2019
 18359                                  LoadDosHi_ok:	; 18/12/2022
 18360 000008D5 C3                      	retn
 18361                                  
 18362                                  ; ----------------------------------------------------------------------
 18363                                  ;
 18364                                  ; procedure : TryToMovDOSHi
 18365                                  ;
 18366                                  ;		This tries to move DOS into HMA.
 18367                                  ;		Returns CY if it failed.
 18368                                  ;		If it succeeds returns with carry cleared.
 18369                                  ;
 18370                                  ;		For ROMDOS, dos_segreinit must be called again to allow
 18371                                  ;		the A20 switching code in the low mem stub to be installed.
 18372                                  ; 
 18373                                  ; ----------------------------------------------------------------------
 18374                                  
 18375                                  	; 23/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 18376                                  	; (MSDOS 5.0 IO.SYS - SYSINIT:092Ah)
 18377                                  TryToMovDOSHi:
 18378                                  	; 11/12/2022
 18379                                  	; 27/03/2019 - Retro DOS v4.0
 18380                                  	; ds = cs
 18381 000008D6 E81300                  	call	MovDOSHi
 18382 000008D9 7210                    	jc	short ttldhx
 18383                                  
 18384                                  ;ifndef ROMDOS
 18385                                  	; 23/10/2022
 18386                                  	;mov	es,[cs:CURRENT_DOS_LOCATION] ; give dos its temporary loc.
 18387                                  	;;mov	es,[cs:FINAL_DOS_LOCATION] ; 24/03/2019 - Retro DOS v4.0
 18388                                  	; 11/12/2022
 18389                                  	; ds = cs
 18390 000008DB 8E06[7102]              	mov	es,[CURRENT_DOS_LOCATION]
 18391                                  ;else
 18392                                  ;	..
 18393                                  ;endif ; ROMDOS
 18394                                  
 18395                                  	; 11/12/2022
 18396                                  	; ds = cs
 18397 000008DF 31C0                    	xor	ax,ax			; ax = 00 ---> install stub
 18398                                  	;call	far [cs:dos_segreinit]	; call dos segreinit
 18399 000008E1 FF1E[7B02]              	call	far [dos_segreinit]
 18400                                  	;mov	byte [cs:runhigh],1
 18401 000008E5 C606[6A02]01            	mov	byte [runhigh],1
 18402 000008EA F8                      	clc
 18403                                  ttldhx:
 18404 000008EB C3                      	retn
 18405                                  
 18406                                  ; ----------------------------------------------------------------------
 18407                                  ;
 18408                                  ; procedure : MovDOSHi
 18409                                  ;
 18410                                  ;		Tries to allocate HMA and Move DOS/BIOS code into HMA
 18411                                  ;		For ROMDOS, the code is not actually moved, but the
 18412                                  ;		HMA is allocated and prepared for sub-allocation.
 18413                                  ;
 18414                                  ;		Returns : CY if it failed
 18415                                  ;
 18416                                  ; ----------------------------------------------------------------------
 18417                                  
 18418                                  	; 23/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 18419                                  MovDOSHi:
 18420                                  	; 14/05/2019
 18421                                  	; 27/03/2019 - Retro DOS v4.0
 18422                                  	; ds = cs
 18423 000008EC E8D700                  	call	AllocHMA
 18424 000008EF 7213                    	jc	short mdhx			; did we get HMA?
 18425 000008F1 B8FFFF                  	mov	ax,0FFFFh			; yes, HMA seg = 0ffffh
 18426 000008F4 8EC0                    	mov	es,ax
 18427                                  
 18428                                  ;ifndef ROMDOS
 18429                                  	; actually move the BIOS and DOS
 18430                                  
 18431                                  	; NOTE: Retro DOS v4.0 does not move BIOS (IO.SYS) to HMA
 18432                                  	; 24/03/2019
 18433                                  	
 18434                                  	; 23/10/2022
 18435 000008F6 E83400                  	call	MovBIOS				; First move BIOS into HMA
 18436                                  
 18437                                  	; ES:DI points to free HMA after BIOS
 18438                                  	
 18439                                  	; 14/05/2019
 18440                                  	; 24/03/2019 - Retro DOS v4.0
 18441                                  	;xor	di,di
 18442                                  	
 18443                                  	; 23/10/2022
 18444                                  	;mov	cx,[cs:hi_doscod_size]		; pass the code size of DOS
 18445                                  	; 11/12/2022
 18446                                  	; ds = cs
 18447 000008F9 8B0E[8102]              	mov	cx,[hi_doscod_size]		; when it is in HMA
 18448 000008FD E81100                  	call	MovDOS				; and move it
 18449                                  
 18450                                  	; ES:DI points to free HMA after DOS
 18451                                  ;else
 18452                                  ;	; allocate space at beginning of HMA to allow for CPMHack
 18453                                  ;
 18454                                  ;	mov	di,0E0h				; room for 5 bytes at ffff:d0
 18455                                  ;
 18456                                  ;endif ; ROMDOS
 18457                                  
 18458 00000900 E86102                  	call	SaveFreeHMAPtr			; Save the Free HMA ptr
 18459 00000903 F8                      	clc
 18460                                  mdhx:
 18461 00000904 C3                      	retn
 18462                                  
 18463                                  ; ----------------------------------------------------------------------
 18464                                  ;
 18465                                  ; procedure : MovDOSLo
 18466                                  ;
 18467                                  ;		Allocates memory from DOS and moves BIOS/DOS code into it
 18468                                  ;
 18469                                  ; ----------------------------------------------------------------------
 18470                                  
 18471                                  	; 23/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 18472                                  
 18473                                  ;ifndef ROMDOS
 18474                                  
 18475                                  MovDOSLo:
 18476                                  	; 14/05/2019
 18477                                  	; 27/03/2019 - Retro DOS v4.0
 18478                                  	; ds = cs
 18479 00000905 E84700                  	call	AllocMemForDOS			; incestuosly!!!
 18480                                  	
 18481                                  	; 23/10/2022
 18482                                  	; 14/05/2019
 18483                                  	;inc	ax  ; skip MCB
 18484                                  	
 18485 00000908 8EC0                    	mov	es,ax				; pass the segment to MovBIOS
 18486                                  	; NOTE: Retro DOS v4.0 does not move BIOS (IO.SYS) to HMA
 18487                                  	; 24/03/2019
 18488                                  	
 18489                                  	; 23/10/2022
 18490 0000090A E82000                  	call	MovBIOS
 18491                                  
 18492                                  ;------ ES:DI points memory immediately after BIOS
 18493                                  
 18494                                  	; 14/05/2019
 18495                                  	; NOTE: 
 18496                                  	;     Order of (RETRO) DOS kernel sections at memory:
 18497                                  	;	BIOSDATA+BIOSCODE+BIOSDATAINIT+DOSDATA+DOSCODE(LOW)
 18498                                  
 18499                                  	; 24/03/2019 - Retro DOS v4.0
 18500                                  	;xor	di,di	
 18501                                  
 18502                                  	; 23/10/2022
 18503                                  	;mov	cx,[cs:lo_doscod_size]		; DOS code size when loaded
 18504                                  	; 11/12/2022
 18505                                  	; ds = cs
 18506 0000090D 8B0E[7F02]              	mov	cx,[lo_doscod_size]		; low
 18507                                  	;call	MovDOS
 18508                                  	;retn
 18509                                  	; 11/12/2022
 18510                                  	;jmp	short MovDOS
 18511                                  
 18512                                  ;endif ; ROMDOS
 18513                                  
 18514                                  ; 11/12/2022
 18515                                  
 18516                                  ; ----------------------------------------------------------------------
 18517                                  ;
 18518                                  ; procedure : MovDOS
 18519                                  ;
 18520                                  ;		Moves DOS code into requested area
 18521                                  ;
 18522                                  ;	In : ES:DI - pointer to memory where DOS is to be moved
 18523                                  ;	     CX    - size of DOS code to be moved
 18524                                  ;
 18525                                  ;	Out : ES:DI - pointer to memory immediately after DOS
 18526                                  ;
 18527                                  ; ----------------------------------------------------------------------
 18528                                  
 18529                                  	; 11/12/2022
 18530                                  	; 23/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 18531                                  
 18532                                  ;ifndef ROMDOS
 18533                                  
 18534                                  MovDOS:
 18535                                  	; 14/05/2019
 18536                                  	; 27/03/2019 - Retro DOS v4.0
 18537                                  
 18538                                  	; 11/12/2022
 18539                                  	; ds = cs
 18540                                  
 18541                                  	; 23/10/2022
 18542                                  	;push	ds ; *//
 18543                                  	
 18544 00000911 06                      	push	es
 18545 00000912 57                      	push	di
 18546                                  
 18547                                  	; 11/12/2022
 18548 00000913 1E                      	push	ds ; *// ; 11/12/202
 18549                                  
 18550                                  	; 29/04/2019
 18551 00000914 C536[6F02]              	lds	si,[dosinit] ; 11/12/2022
 18552                                  	; 23/10/2022
 18553                                  	;lds	si,[cs:dosinit]
 18554                                  	;;mov	ax,si
 18555                                  
 18556 00000918 F3A4                    	rep	movsb
 18557                                  
 18558 0000091A 1F                      	pop	ds ; *// ; 11/12/2022
 18559                                  
 18560 0000091B 5B                      	pop	bx				; get back offset into which
 18561                                  						;  DOS was moved
 18562                                  
 18563 0000091C 2EA1[6F02]              	mov	ax,[cs:dosinit]			; get the offset at which DOS
 18564                                  						;  wants to run
 18565 00000920 29D8                    	sub	ax,bx
 18566 00000922 E8A102                  	call	off_to_para
 18567 00000925 5B                      	pop	bx				; get the segment at which
 18568                                  						;  we moved DOS into
 18569 00000926 29C3                    	sub	bx,ax				; Adjust segment
 18570                                  	
 18571                                  	; 11/12/2022
 18572                                  	; 23/10/2022
 18573                                  	;mov	[cs:CURRENT_DOS_LOCATION],bx	; and save it
 18574                                  	;;mov	[cs:FINAL_DOS_LOCATION],bx
 18575                                  	; 11/12/2022
 18576 00000928 891E[7102]              	mov	[CURRENT_DOS_LOCATION],bx
 18577                                  		
 18578                                  	; 27/03/2019
 18579                                  	;pop	ds ; *//
 18580                                  	; ds = cs
 18581                                  	;mov	[FINAL_DOS_LOCATION],bx
 18582                                  
 18583 0000092C C3                      	retn
 18584                                  
 18585                                  ;endif ;ROMDOS
 18586                                  
 18587                                  ; NOTE: Retro DOS v4.0 does not move BIOS (IO.SYS) to HMA
 18588                                  ; 24/03/2019
 18589                                  ; ----------------------------------------------------------------------
 18590                                  ;
 18591                                  ; procedure : MovBIOS
 18592                                  ;
 18593                                  ;		Moves BIOS code into requested segment
 18594                                  ;
 18595                                  ;	In : ES - segment to which BIOS is to be moved
 18596                                  ;		  ( it moves always into offset BCode_Start)
 18597                                  ;
 18598                                  ;	Out : ES:DI - pointer to memory immediately after BIOS
 18599                                  ;
 18600                                  ; ----------------------------------------------------------------------
 18601                                  
 18602                                  	; 23/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 18603                                  
 18604                                  ;ifndef ROMDOS
 18605                                  
 18606                                  MovBIOS: ; proc	near
 18607                                  	; 11/12/2022
 18608 0000092D 1E                      	push	ds ; ds = cs	
 18609                                  	;
 18610                                  	; 23/10/2022
 18611                                  	;mov	ds,[cs:temp_bcode_seg]		; current BIOS code seg
 18612                                  	; 17/09/2023
 18613 0000092E 8E1E[8702]              	mov	ds,[temp_bcode_seg]	
 18614                                  	;mov	si,BCODE_START ; mov si,30h
 18615                                  	; 09/12/2022
 18616 00000932 BE[3000]                	mov	si,BCODESTART
 18617 00000935 89F7                    	mov	di,si
 18618 00000937 B9001A                  	mov	cx,BCODE_END ; mov cx,1A60h
 18619 0000093A 29F1                    	sub	cx,si				; size of BIOS
 18620 0000093C D1E9                    	shr	cx,1				; Both the labels are para
 18621                                  						;  aligned
 18622 0000093E F3A5                    	rep	movsw
 18623                                  	
 18624                                  	; 11/12/2022
 18625 00000940 1F                      	pop	ds ; ds = cs
 18626                                  	;
 18627 00000941 06                      	push	es
 18628 00000942 57                      	push	di				; save end of BIOS
 18629 00000943 8CC0                    	mov	ax,es
 18630                                  	;
 18631                                  	; 11/12/2022
 18632                                  	;mov	[cs:BCodeSeg],ax		; save it for later use
 18633                                  	;;call	dword ptr cs:_seg_reinit_ptr
 18634                                  	;call	far [cs:seg_reinit_ptr]		; far call to seg_reinit (M022)
 18635                                  	; ds = cs
 18636 00000945 A3[0004]                	mov	[BCodeSeg],ax
 18637 00000948 FF1E[8502]              	call	far [seg_reinit_ptr]
 18638                                  	;
 18639 0000094C 5F                      	pop	di
 18640 0000094D 07                      	pop	es				; get back end of BIOS
 18641 0000094E C3                      	retn
 18642                                  
 18643                                  ;MovBIOS endp
 18644                                  
 18645                                  ;endif ; ROMDOS
 18646                                  
 18647                                  ; 11/12/2022
 18648                                  %if 0
 18649                                  
 18650                                  ; 24/03/2019
 18651                                  
 18652                                  ; ----------------------------------------------------------------------
 18653                                  ;
 18654                                  ; procedure : MovDOS
 18655                                  ;
 18656                                  ;		Moves DOS code into requested area
 18657                                  ;
 18658                                  ;	In : ES:DI - pointer to memory where DOS is to be moved
 18659                                  ;	     CX    - size of DOS code to be moved
 18660                                  ;
 18661                                  ;	Out : ES:DI - pointer to memory immediately after DOS
 18662                                  ;
 18663                                  ; ----------------------------------------------------------------------
 18664                                  
 18665                                  	; 23/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 18666                                  
 18667                                  ;ifndef ROMDOS
 18668                                  
 18669                                  MovDOS:
 18670                                  	; 14/05/2019
 18671                                  	; 27/03/2019 - Retro DOS v4.0
 18672                                  
 18673                                  	; 11/12/2022
 18674                                  	; ds = cs
 18675                                  
 18676                                  	; 23/10/2022
 18677                                  	;push	ds ; *//
 18678                                  	
 18679                                  	push	es
 18680                                  	push	di
 18681                                  
 18682                                  	; 11/12/2022
 18683                                  	push	ds ; *// ; 11/12/202
 18684                                  
 18685                                  	; 29/04/2019
 18686                                  	lds	si,[dosinit] ; 11/12/2022
 18687                                  	; 23/10/2022
 18688                                  	;lds	si,[cs:dosinit]
 18689                                  	;;mov	ax,si
 18690                                  
 18691                                  	rep	movsb
 18692                                  
 18693                                  	pop	ds ; *// ; 11/12/2022
 18694                                  
 18695                                  	pop	bx				; get back offset into which
 18696                                  						;  DOS was moved
 18697                                  
 18698                                  	mov	ax,[cs:dosinit]			; get the offset at which DOS
 18699                                  						;  wants to run
 18700                                  	sub	ax,bx
 18701                                  	call	off_to_para
 18702                                  	pop	bx				; get the segment at which
 18703                                  						;  we moved DOS into
 18704                                  	sub	bx,ax				; Adjust segment
 18705                                  	
 18706                                  	; 11/12/2022
 18707                                  	; 23/10/2022
 18708                                  	;mov	[cs:CURRENT_DOS_LOCATION],bx	; and save it
 18709                                  	;;mov	[cs:FINAL_DOS_LOCATION],bx
 18710                                  	; 11/12/2022
 18711                                  	mov	[CURRENT_DOS_LOCATION],bx
 18712                                  		
 18713                                  	; 27/03/2019
 18714                                  	;pop	ds ; *//
 18715                                  	; ds = cs
 18716                                  	;mov	[FINAL_DOS_LOCATION],bx
 18717                                  
 18718                                  	retn
 18719                                  
 18720                                  ;endif ;ROMDOS
 18721                                  
 18722                                  %endif
 18723                                  
 18724                                  ; ----------------------------------------------------------------------
 18725                                  ;
 18726                                  ; procedure : AllocMemForDOS
 18727                                  ;
 18728                                  ;		Allocate memory for DOS/BIOS code from DOS !!!
 18729                                  ;
 18730                                  ;	Out : AX - seg of allocated memoryblock
 18731                                  ;
 18732                                  ; ----------------------------------------------------------------------
 18733                                  
 18734                                  	; 23/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 18735                                  
 18736                                  ;ifndef ROMDOS
 18737                                  
 18738                                  AllocMemForDOS:
 18739                                  	; 11/12/2022
 18740                                  	; 14/05/2019
 18741                                  	; 27/03/2019 - Retro DOS v4.0
 18742                                  	; ds = cs
 18743                                  	;mov	ax,BCode_end
 18744                                  	;sub	ax,BCode_start		; BIOS code size
 18745                                  	; 23/10/2022
 18746 0000094F B8001A                  	mov	ax,BCODE_END ; 1A60h
 18747                                  	;sub	ax,BCODE_START ; 30h
 18748                                  	; 09/12/2022
 18749 00000952 2D[3000]                	sub	ax,BCODESTART 
 18750                                  	; 24/03/2019 - Retro DOS v4.0 
 18751                                  	; 02/11/2022
 18752                                  	;add	ax,[cs:lo_doscod_size]	; DOS code size
 18753                                  	; 11/12/2022
 18754                                  	; ds = cs
 18755 00000955 0306[7F02]              	add	ax,[lo_doscod_size]
 18756 00000959 83C00F                  	add	ax,15
 18757 0000095C E86702                  	call	off_to_para			; convert to para
 18758                                  	; 23/10/2022
 18759                                  	; 14/05/2019
 18760                                  	;inc	ax ; + 1 paragraph for MCB
 18761 0000095F 09DB                    	or	bx,bx				; M012
 18762 00000961 89C3                    	mov	bx,ax				;  can we use int 21 for alloc
 18763 00000963 741A                    	jz	short update_arena		; M012
 18764 00000965 B448                    	mov	ah,48h				; request DOS
 18765 00000967 CD21                    	int	21h
 18766 00000969 7250                    	jc	short FatalErr			; IF ERR WE ARE HOSED
 18767                                   	; 23/10/2022
 18768                                  	; 24/03/2019 - Retro DOS v4.0 (ORG 0)
 18769 0000096B 83E803                  	sub	ax,3				; Take care ORG 30h of
 18770                                  						;  BIOS code
 18771 0000096E 8EC0                    	mov	es,ax
 18772                                  	;mov	word [es:20h+ARENA.OWNER],08h	; mark it as system
 18773                                  	;mov	word [es:20h+ARENA.NAME],'SC'	;  code area
 18774                                  	; 14/05/2019
 18775                                  	;mov	word [es:ARENA.OWNER],08h	; mark it as system
 18776                                  	;mov	word [es:ARENA.NAME],'SC'	;  code area
 18777                                  	; 23/10/2022
 18778 00000970 26C70621000800          	mov	word [es:20h+1],08h		; mark it as system
 18779 00000977 26C70628005343          	mov	word [es:20h+8],'SC'		;  code area
 18780                                  
 18781 0000097E C3                      	retn
 18782                                  
 18783                                  ; BUGBUG -- 5 Aug 92 -- chuckst -- Allocating space for DOS
 18784                                  ;	  using DOS itself causes an arena to be generated.
 18785                                  ;	  Unfortunately, certain programs (like PROTMAN$)
 18786                                  ;	  assume that the device drivers are loaded into
 18787                                  ;	  the first arena. For this reason, MagicDrv's
 18788                                  ;	  main device driver header arena is manually
 18789                                  ;	  truncated from the arena chain, and the space
 18790                                  ;	  for DOS is allocated using the following
 18791                                  ;	  simple code, which also assumes that the
 18792                                  ;	  first arena is the free one where DOS's low
 18793                                  ;	  stub will go.
 18794                                  ;
 18795                                  ; M012 : BEGIN
 18796                                  
 18797                                  	; 23/10/2022
 18798                                  update_arena:
 18799 0000097F 1E                      	push	ds ; ds = cs
 18800 00000980 57                      	push	di
 18801 00000981 51                      	push	cx
 18802 00000982 52                      	push	dx
 18803                                  	; 23/10/2022
 18804                                  	;lds	di,[cs:DOSINFO]			; get ptr to DOS var
 18805                                  	; 11/12/2022
 18806                                  	; ds = cs 
 18807 00000983 C53E[6B02]              	lds	di,[DOSINFO] ; 27/03/2019	
 18808 00000987 4F                      	dec	di
 18809 00000988 4F                      	dec	di				; Arena head is immediately
 18810                                  						;  before sysvar
 18811 00000989 8E05                    	mov	es,[di]				; es = arena head
 18812                                  	;mov	cx,[es:ARENA.SIZE]		; cx = total low mem size
 18813 0000098B 268B0E0300              	mov	cx,[es:3]
 18814 00000990 39D9                    	cmp	cx,bx				; is it sufficient ?
 18815 00000992 7227                    	jb	short FatalErr			; no, fatal error
 18816                                  
 18817                                  	;mov	dl,[es:ARENA.SIGNATURE]
 18818 00000994 268A160000              	mov	dl,[es:0]
 18819 00000999 8CC0                    	mov	ax,es
 18820 0000099B 01D8                    	add	ax,bx				; ax = new arena head
 18821 0000099D 8905                    	mov	[di],ax				; store it in DOS data area
 18822 0000099F 8ED8                    	mov	ds,ax
 18823                                  	;mov	[ARENA.SIGNATURE],dl		; type of arena
 18824 000009A1 88160000                	mov	[0],dl
 18825                                  	;mov	word [ARENA.OWNER],0		; free
 18826 000009A5 C70601000000            	mov	word [1],0
 18827 000009AB 29D9                    	sub	cx,bx				; size of the new block
 18828                                  	;mov	[ARENA.SIZE],cx			; store it in the arena
 18829 000009AD 890E0300                	mov	[3],cx
 18830 000009B1 8CC0                    	mov	ax,es				; return seg to the caller
 18831                                  	; 23/10/2022
 18832                                  	;; 24/03/2019 - Retro DOS v4.0 (ORG 0)	; Take care ORG 30h of
 18833 000009B3 83E803                  	sub	ax,3				;  BIOS code
 18834 000009B6 5A                      	pop	dx
 18835 000009B7 59                      	pop	cx
 18836 000009B8 5F                      	pop	di
 18837 000009B9 1F                      	pop	ds ; ds = cs
 18838 000009BA C3                      	retn
 18839                                  ;
 18840                                  ; M012 : END
 18841                                  ;
 18842                                  FatalErr:
 18843 000009BB 0E                      	push	cs
 18844 000009BC 1F                      	pop	ds
 18845 000009BD BA[8608]                	mov	dx,FEmsg
 18846 000009C0 B409                    	mov	ah,9
 18847 000009C2 CD21                    	int	21h 		; DOS - PRINT STRING
 18848                                  				; DS:DX -> string terminated by "$"
 18849                                          ;jmp	stall
 18850                                  	; 23/10/2022
 18851 000009C4 FA                      	cli
 18852 000009C5 F4                      	hlt
 18853                                  
 18854                                  ;endif ;ROMDOS
 18855                                  
 18856                                  ; 25/03/2019 - Retro DOS v4.0
 18857                                  
 18858                                  ; ----------------------------------------------------------------------
 18859                                  ;
 18860                                  ; procedure : AllocHMA
 18861                                  ;
 18862                                  ;	grab_the_hma tries to enable a20 and make sure there is memory
 18863                                  ;	  up there. If it gets any sort of error, it will return with
 18864                                  ;	  carry set so that we can resort to running low.
 18865                                  ;
 18866                                  ;	It also returns ES: -> 0ffffh if it returns success
 18867                                  ;
 18868                                  ; ----------------------------------------------------------------------
 18869                                  
 18870                                  AllocHMA:
 18871                                  ;	cas note:  The pre-286 check is no longer needed here since the
 18872                                  ;		   presence of XMS is sufficient. However, this code hasn't
 18873                                  ;		   been deleted because it can be recycled for skipping the
 18874                                  ;		   extra pass of CONFIG.SYS and assuming we're running low
 18875                                  ;		   in the case of a pre-286.
 18876                                  
 18877                                  ;;	see if we're running on a pre-286. If not, force low.
 18878                                  ;
 18879                                  ;	xor	ax,ax
 18880                                  ;	pushf			; save flags (like int)
 18881                                  ;	push	ax
 18882                                  ;	popf
 18883                                  ;	pushf
 18884                                  ;	pop	ax
 18885                                  ;	popf			; restore original flags (like int)
 18886                                  ;	and	ax,0F000h
 18887                                  ;	cmp	ax,0F000h	; 8088/8086?
 18888                                  ;	jz	short grab_hma_error
 18889                                  
 18890                                  	; 23/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 18891                                  	; (SYSINIT:0A26h)
 18892                                  
 18893 000009C6 1E                      	push	ds
 18894                                  	;;mov	ax,Bios_Data
 18895                                  	;mov	ax,KERNEL_SEGMENT
 18896                                  	; 21/10/2022
 18897 000009C7 B87000                  	mov	ax,DOSBIODATASEG
 18898 000009CA 8ED8                    	mov	ds,ax
 18899                                  
 18900 000009CC E84A00                  	call	IsXMSLoaded
 18901 000009CF 7545                    	jnz	short grabhma_error
 18902                                  
 18903 000009D1 B81043                  	mov	ax,4310h
 18904 000009D4 CD2F                    	int	2Fh		; get the vector into es:bx
 18905                                  		; - Multiplex - XMS - GET DRIVER ADDRESS
 18906                                  		; Return: ES:BX -> driver entry point
 18907                                  
 18908 000009D6 891E[0E00]              	mov	[xms],bx
 18909                                  	;mov	[0Eh], bx
 18910 000009DA 8C06[1000]              	mov	[xms+2],es
 18911                                  	;mov	[10h],es
 18912                                  
 18913 000009DE B401                    	mov	ah,1		; request HMA
 18914 000009E0 BAFFFF                  	mov	dx,0FFFFh
 18915                                  	;call	dword ptr ds:0Eh
 18916 000009E3 FF1E[0E00]              	call	far [xms]
 18917 000009E7 48                      	dec	ax
 18918 000009E8 7409                    	jz	short allocHMA_1 ; error if not able to allocate HMA
 18919                                  
 18920                                  ;------ Himem may be lying because it has allocated mem for int 15
 18921                                  
 18922 000009EA B488                    	mov	ah,88h
 18923 000009EC CD15                    	int	15h
 18924                                  		; Get Extended Memory Size
 18925                                  		; Return: CF clear on success
 18926                                  		; AX = size of memory above 1M in K
 18927 000009EE 83F840                  	cmp	ax,64		; less than 64 K of hma ?
 18928                                  	;jb	short grabhma_error
 18929                                  	; 11/12/2022
 18930 000009F1 7224                    	jb	short grabhma_err ; cf=1
 18931                                  allocHMA_1:
 18932 000009F3 B405                    	mov	ah,5		; localenableA20
 18933                                  	;call	dword ptr ds:0Eh
 18934 000009F5 FF1E[0E00]              	call	far [xms]
 18935 000009F9 48                      	dec	ax
 18936 000009FA 751A                    	jnz	short grabhma_error ; error if couldn't enable A20
 18937                                  
 18938 000009FC E88901                  	call	IsVDiskInstalled
 18939 000009FF 7415                    	jz	short grabhma_error ; yes, we cant use HMA
 18940                                  
 18941 00000A01 B8FFFF                  	mov	ax,0FFFFh
 18942 00000A04 8EC0                    	mov	es,ax
 18943 00000A06 26C70610003412          	mov	word [es:10h],1234h ; see if we can really read/write there
 18944 00000A0D 26813E10003412          	cmp	word [es:10h],1234h
 18945                                  	;jne	short grabhma_error ; don't try to load there if XMS lied
 18946                                  	; 11/12/2022
 18947 00000A14 7401                    	je	short allocHMA_ok	
 18948                                  
 18949                                  ; 11/12/2022
 18950                                  ;	; 11/12/2022
 18951                                  ;	; cf=0
 18952                                  ;	;clc
 18953                                  ;	pop	ds
 18954                                  ;	retn
 18955                                  
 18956                                  grabhma_error:
 18957 00000A16 F9                      	stc
 18958                                  	; 11/12/022
 18959                                  grabhma_err:	; cf=1
 18960                                  allocHMA_ok:	; cf=0
 18961 00000A17 1F                      	pop	ds
 18962 00000A18 C3                      	retn
 18963                                  
 18964                                  ; ----------------------------------------------------------------------
 18965                                  ;
 18966                                  ; procedure : IsXMSLoaded
 18967                                  ;
 18968                                  ;             Checks whether a XMS driver is loaded
 18969                                  ;
 18970                                  ; Returns : Z flag set if XMS driver loaded
 18971                                  ;           Z flag reset if no XMS drivers are present
 18972                                  ;
 18973                                  ; ----------------------------------------------------------------------
 18974                                  
 18975                                  IsXMSLoaded:
 18976 00000A19 B80043                  	mov	ax,4300h
 18977 00000A1C CD2F                    	int	2Fh		; - Multiplex - XMS - INSTALLATION CHECK
 18978                                  				; Return: AL = 80h XMS driver installed
 18979                                  				; AL <> 80h no driver
 18980 00000A1E 3C80                    	cmp	al,80h		; XMS installed?
 18981 00000A20 C3                      	retn
 18982                                  
 18983                                  ; ----------------------------------------------------------------------
 18984                                  ; procedure : FTryToMovDOSHi
 18985                                  ;
 18986                                  ;		Called from HMA suballoc calls
 18987                                  ;	
 18988                                  ; ----------------------------------------------------------------------
 18989                                  
 18990                                  	; 23/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 18991                                  	; (SYSINIT:0A84h)
 18992                                  
 18993                                  FTryToMovDOSHi:	; proc	far
 18994                                  
 18995 00000A21 50                      	push	ax
 18996 00000A22 53                      	push	bx
 18997 00000A23 51                      	push	cx
 18998 00000A24 52                      	push	dx
 18999 00000A25 56                      	push	si
 19000 00000A26 57                      	push	di
 19001 00000A27 1E                      	push	ds
 19002 00000A28 06                      	push	es
 19003                                  
 19004                                  	; 23/10/2022
 19005                                  	; 27/03/2019 - Retro DOS v4.0
 19006                                  	; 11/12/2022
 19007 00000A29 0E                      	push	cs
 19008 00000A2A 1F                      	pop	ds
 19009                                  
 19010                                  	;cmp	byte [cs:runhigh],0FFh
 19011                                  	; 11/12/2022
 19012 00000A2B 803E[6A02]FF            	cmp	byte [runhigh],0FFh
 19013 00000A30 7503                    	jne	short _ftymdh_1
 19014                                  
 19015                                  	; ds = cs
 19016 00000A32 E8A1FE                  	call	TryToMovDOSHi
 19017                                  _ftymdh_1:
 19018 00000A35 07                      	pop	es
 19019 00000A36 1F                      	pop	ds
 19020 00000A37 5F                      	pop	di
 19021 00000A38 5E                      	pop	si
 19022 00000A39 5A                      	pop	dx
 19023 00000A3A 59                      	pop	cx
 19024 00000A3B 5B                      	pop	bx
 19025 00000A3C 58                      	pop	ax
 19026                                  
 19027 00000A3D CB                      	retf
 19028                                  
 19029                                  ; ----------------------------------------------------------------------
 19030                                  ;
 19031                                  ; following piece of code will be moved into a para boundary. And the para
 19032                                  ; address posted in seg of int 19h vector. Offset of int 19h will point to
 19033                                  ; VDint19. This is to protect HMA from apps which use VDISK header method
 19034                                  ; to determine free extended memory.
 19035                                  ;
 19036                                  ; For more details read "power programming" column by Ray Duncan in the
 19037                                  ; May 30 1989 issue of PC Magazine (pp 377-388) [USING EXTENDED MEMORY,PART 1]
 19038                                  ;
 19039                                  ; ----------------------------------------------------------------------
 19040                                  
 19041                                  StartVDHead:
 19042                                  ;-------------- what follows is a dummy device driver header (not used by DOS)
 19043                                  
 19044 00000A3E 00000000                	dd	0		; link to next device driver
 19045 00000A42 0080                    	dw	8000h		; device attribute
 19046 00000A44 0000                    	dw	0		; strategy routine offset
 19047 00000A46 0000                    	dw	0		; interrupt routine offset
 19048 00000A48 01                      	db	1		; number of units
 19049                                  	;db	7 dup(0) 
 19050 00000A49 00<rep 7h>              	times	7 db 0 		; reserved area
 19051                                  VDiskSig1:
 19052 00000A50 564449534B              	db	'VDISK'
 19053                                  
 19054                                  VLEN1	equ	($-VDiskSig1)
 19055                                  
 19056 00000A55 202056332E33            	db	'  V3.3'	; vdisk label
 19057                                  	;db	15 dup (0)	; pad
 19058 00000A5B 00<rep Fh>              	times	15 db 0
 19059 00000A6A 0000                    	dw	0		; bits 0-15 of free HMA
 19060 00000A6C 11                      	db	11h		; bits 16-23 of free HMA (1M + 64K)
 19061                                  VDInt19:
 19062 00000A6D EA                      	db	0EAh		; jmp to old vector
 19063                                  OldVDInt19:
 19064 00000A6E 00000000                	dd	0		; Saved int 19 vector
 19065                                  
 19066                                  EndVDHead: ; label byte
 19067                                  
 19068                                  VDiskHMAHead:	
 19069 00000A72 000000                  	db	0,0,0		; non-bootable disk
 19070                                  VDiskSig2:
 19071 00000A75 564449534B              	db	'VDISK'
 19072                                  
 19073                                  VLEN2	equ	($-VDiskSig2)
 19074                                  
 19075 00000A7A 332E33                  	db	'3.3'		; OEM - signature
 19076 00000A7D 8000                    	dw	128		; number of bytes/sector
 19077 00000A7F 01                      	db	1		; sectors/cluster
 19078 00000A80 0100                    	dw	1		; reserved sectors
 19079 00000A82 01                      	db	1		; number of FAT copies
 19080 00000A83 4000                    	dw	64		; number of root dir entries
 19081 00000A85 0002                    	dw	512		; number of sectors
 19082 00000A87 FE                      	db	0FEh		; media descriptor
 19083 00000A88 0600                    	dw	6		; number of sectors/FAT
 19084 00000A8A 0800                    	dw	8		; sectors per track
 19085 00000A8C 0100                    	dw	1		; number of heads
 19086 00000A8E 0000                    	dw	0		; number of hidden sectors
 19087 00000A90 4004                    	dw	440h		; Start of free HMA in K (1M+64K)
 19088                                  
 19089                                  EndVDiskHMAHead: ; label byte
 19090                                  
 19091                                  ; ----------------------------------------------------------------------
 19092                                  ;
 19093                                  ; procedure : InstVDiskHeader
 19094                                  ;
 19095                                  ;             Installs the VDISK header to reserve the 64k of HMA
 19096                                  ;	      It puts a 32 byte header at 10000:0 and
 19097                                  ;	      another header at (seg of int19):0
 19098                                  ;
 19099                                  ; Inputs : None
 19100                                  ;
 19101                                  ; Outputs : None
 19102                                  ;
 19103                                  ; USES : DS,SI,AX,CX,DX
 19104                                  ;
 19105                                  ; ----------------------------------------------------------------------
 19106                                  
 19107                                  	; 23/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 19108                                  
 19109                                  InstVDiskHeader:
 19110 00000A92 31C0                    	xor	ax,ax
 19111 00000A94 8ED8                    	mov	ds,ax			; seg of int vect table
 19112                                  
 19113                                  ;-------------- save old int 19 vector
 19114                                  
 19115                                  	; 23/10/2022
 19116 00000A96 A16400                  	mov	ax,[19h*4]
 19117                                  	;mov	[OldVDInt19],ax
 19118 00000A99 2EA3[6E0A]              	mov	[cs:OldVDInt19],ax
 19119 00000A9D A16600                  	mov	ax,[19h*4+2]
 19120                                  	;mov	[OldVDInt19+2],ax
 19121 00000AA0 2EA3[700A]              	mov	[cs:OldVDInt19+2],ax
 19122                                  
 19123                                  ;-------------- calculate seg of new int 19 handler
 19124                                  
 19125 00000AA4 B448                    	mov	ah,48h			; allocate memory
 19126                                  	;mov	bx,(EndVDHead-StartVDHead+15)>>4
 19127                                  	; 23/10/2022
 19128 00000AA6 BB0400                  	mov	bx,4
 19129 00000AA9 CD21                    	int	21h
 19130                                  
 19131                                  ;	if carry, fatal hanging error!!!!!
 19132                                  
 19133 00000AAB 48                      	dec	ax			; point to arena
 19134 00000AAC 8EC0                    	mov	es,ax
 19135                                  	;mov	word [es:ARENA.OWNER],8	; owner = System
 19136 00000AAE 26C70601000800          	mov	word [es:1],8
 19137                                  	;mov	word [es:ARENA.NAME],'SC' ; System Code
 19138 00000AB5 26C70608005343          	mov	word [es:8],'SC'
 19139 00000ABC 40                      	inc	ax
 19140 00000ABD 8EC0                    	mov	es,ax			; get back to allocated memory
 19141                                  
 19142                                  ;-------------- install new int 19 vector
 19143                                  
 19144 00000ABF FA                      	cli				; no reboots at this time
 19145                                  	;mov	word [19h*4],(VDInt19-StartVDHead)
 19146 00000AC0 C70664002F00            	mov	word [19h*4],47
 19147 00000AC6 A36600                  	mov	[19h*4+2],ax
 19148                                  
 19149                                  ;-------------- move the code into proper place
 19150                                  
 19151                                  	;mov	cx,(EndVDHead-StartVDHead)
 19152 00000AC9 B93400                  	mov	cx,52
 19153 00000ACC BE[3E0A]                	mov	si,StartVDHead
 19154 00000ACF 31FF                    	xor	di,di
 19155 00000AD1 0E                      	push	cs
 19156 00000AD2 1F                      	pop	ds
 19157 00000AD3 FC                      	cld
 19158 00000AD4 F3A4                    	rep	movsb
 19159 00000AD6 FB                      	sti				; BUGBUG is sti OK now?
 19160                                  
 19161                                  ;-------------- mov the HMA VDisk head into HMA
 19162                                  
 19163                                  	; 23/10/2022
 19164 00000AD7 57                      	push	di
 19165 00000AD8 06                      	push	es
 19166                                  
 19167 00000AD9 B8FFFF                  	mov	ax,0FFFFh
 19168 00000ADC 8EC0                    	mov	es,ax
 19169 00000ADE BF1000                  	mov	di,10h
 19170                                  	;mov	cx,(EndVDiskHMAHead-VDiskHMAHead)
 19171 00000AE1 B92000                  	mov	cx,32
 19172 00000AE4 BE[720A]                	mov	si,VDiskHMAHead
 19173 00000AE7 F3A4                    	rep	movsb			; ds already set to cs
 19174                                  
 19175 00000AE9 5F                      	pop	di
 19176 00000AEA 07                      	pop	es
 19177                                  
 19178 00000AEB C3                      	retn
 19179                                  
 19180                                  ; ----------------------------------------------------------------------
 19181                                  ; procedure : ClrVDISKHeader
 19182                                  ;
 19183                                  ;		Clears the first 32 bytes at 1MB boundary
 19184                                  ;		So that DOS/HIMEM is not confused about the VDISK header
 19185                                  ;		left by previous DOS=HIGH session
 19186                                  ;
 19187                                  ; ----------------------------------------------------------------------
 19188                                  
 19189                                  struc desc
 19190 00000000 ????                     .seg_lim:	resw	1		; seg limit 64K 
 19191 00000002 ????                     .lo_word:	resw	1		; 24 bit seg physical 
 19192 00000004 ??                       .hi_byte:	resb 	1		; address
 19193 00000005 ??                       .acc_rights:	resb	1		; access rights ( CPL0 - R/W )
 19194 00000006 ????                     .reserved:	resw	1		;
 19195                                   .size:
 19196                                  endstruc
 19197                                  
 19198                                  		; 23/10/2022
 19199                                  bmove:		;label byte
 19200                                  
 19201                                  dummy:		;times desc.size db 0	; desc	<>
 19202 00000AEC 00<rep 8h>              		times 8 db 0		 
 19203                                  gdt:		;times desc.size db 0	; desc	<>
 19204 00000AF4 00<rep 8h>              		times 8 db 0
 19205 00000AFC FFFF                    src_desc:	dw	0FFFFh		; desc	<0ffffh,0,0,93h,0>
 19206 00000AFE 0000                    		dw	0
 19207 00000B00 00                      		db	0
 19208 00000B01 93                      		db	93h
 19209 00000B02 0000                    		dw	0
 19210 00000B04 FFFF                    tgt_desc:	dw	0FFFFh		; desc	<0ffffh,0,10h,93h,0>  ; 1MB
 19211 00000B06 0000                    		dw	0
 19212 00000B08 10                      		db	10h
 19213 00000B09 93                      		db	93h
 19214 00000B0A 0000                    		dw	0
 19215                                  
 19216                                  rombios_code:	;times desc.size db 0	; desc	<>
 19217 00000B0C 00<rep 8h>              		times 8 db 0
 19218                                  temp_stack:	;times desc.size db 0	; desc	<>
 19219 00000B14 00<rep 8h>              		times 8 db 0
 19220                                  
 19221 00000B1C 00<rep 20h>             ClrdVDISKHead:	times 32 db 0		; db 32 dup (0)
 19222                                  
 19223                                  
 19224                                  ; 25/03/2019 - Retro DOS v4.0 (MSDOS 6.21 IO.SYS, MSDOS 6.0 SYSINIt1.ASM)
 19225                                  
 19226                                  ClrVDISKHeader:	; proc	near
 19227                                  
 19228                                  ;;-----------------------------------------------------------	      ;I070
 19229                                  ;; The following workaround get around a problem with the	      ;I070
 19230                                  ;; Tortugas and PS/2 30-286 BIOS when password server mode	      ;I070
 19231                                  ;; is set. On those machines the INT 15h block move code	      ;I070
 19232                                  ;; goes through the 8042 to twiddle A20 instead of port 92h.	      ;I070
 19233                                  ;; In password server mode the 8042 is disabled so the block	      ;I070
 19234                                  ;; move crashes the system. We can do this because these	      ;I070
 19235                                  ;; systems clear all of memory on a cold boot.			      ;I070
 19236                                  ;								      ;I070
 19237                                  ;               in      al,64h         ; Test for password servr mode ;I070
 19238                                  ;               test    al,10h         ; Is keyboard inhibited?	      ;I070
 19239                                  ;               jnz     short ClrVDISKok ; No, go do block move.      ;I070
 19240                                  ;                                      ; Check for Tortugas...	      ;I070
 19241                                  ;               cmp     word [cs:sys_model_byte],19F8h                ;I070
 19242                                  ;               je      short ClrVDISKno                              ;I070
 19243                                  ;                                      ; Check for mod 30-286	      ;I070
 19244                                  ;               cmp     word [cs:sys_model_byte],09FCh                ;I070
 19245                                  ;               jne     short ClrVDISKok			      ;I070
 19246                                  ;ClrVDISKno: 	retn	               ; Return w/o block move.	      ;I070
 19247                                  ;								      ;I070
 19248                                  ;ClrVDISKok:							      ;I070
 19249                                  ;-----------------------------------------------------------	      ;I070
 19250                                  
 19251                                  	; 12/12/2022
 19252                                  	; ds = cs
 19253                                  
 19254 00000B3C 06                      	push	es
 19255 00000B3D 8CC8                    	mov	ax,cs
 19256 00000B3F 89C2                    	mov	dx,ax
 19257 00000B41 B10C                    	mov	cl,12
 19258 00000B43 D3EA                    	shr	dx,cl
 19259 00000B45 B104                    	mov	cl,4
 19260 00000B47 D3E0                    	shl	ax,cl
 19261 00000B49 05[1C0B]                	add	ax,ClrdVDISKHead
 19262 00000B4C 80D200                  	adc	dl,0
 19263                                  
 19264                                  	;; 23/10/2022
 19265                                  	;;mov	[cs:src_desc+desc.lo_word],ax
 19266                                  	;mov	[cs:src_desc+2],ax
 19267                                  	;;mov	[cs:src_desc+desc.hi_byte],dl
 19268                                  	;mov	[cs:src_desc+4],dl
 19269                                  	; 12/12/2022
 19270                                  	;mov	[src_desc+desc.lo_word],ax
 19271 00000B4F A3[FE0A]                	mov	[src_desc+2],ax
 19272                                  	;mov	[src_desc+desc.hi_byte],dl
 19273 00000B52 8816[000B]              	mov	[src_desc+4],dl
 19274                                  
 19275 00000B56 B91000                  	mov	cx,16	; 16 words
 19276 00000B59 0E                      	push	cs
 19277 00000B5A 07                      	pop	es
 19278 00000B5B BE[EC0A]                	mov	si,bmove
 19279 00000B5E B487                    	mov	ah,87h
 19280 00000B60 CD15                    	int	15h	; EXTENDED MEMORY - BLOCK MOVE (AT,XT286,PS)
 19281                                  			; CX = number of words to move 
 19282                                  			; ES:SI -> global descriptor table
 19283                                  			; Return: CF set on error, AH = status
 19284 00000B62 07                      	pop	es
 19285 00000B63 C3                      	retn
 19286                                  
 19287                                  ; ----------------------------------------------------------------------
 19288                                  ;
 19289                                  ; procedure : SaveFreeHMAPtr
 19290                                  ;
 19291                                  ;		Save the Free HMA pointer in BIOS variable for later use.
 19292                                  ;		(INT 2f ax==4a01 call returns pointer to free HMA)
 19293                                  ;		Normalizes the pointer to ffff:xxxx format and stores only
 19294                                  ;		the offset.
 19295                                  ;
 19296                                  ; Inputs : ES:DI - pointer to free HMA
 19297                                  ; Output : FreeHMAPtr in BIOS data segment updated
 19298                                  ;
 19299                                  ; ----------------------------------------------------------------------
 19300                                  
 19301                                  SaveFreeHMAPtr:
 19302 00000B64 8CC3                    	mov	bx,es
 19303 00000B66 B8FFFF                  	mov	ax,0FFFFh		; HMA segment
 19304 00000B69 29D8                    	sub	ax,bx
 19305 00000B6B 83C70F                  	add	di,15			; para round
 19306 00000B6E 83E7F0                  	and	di,0FFF0h
 19307 00000B71 B104                    	mov	cl,4
 19308 00000B73 D3E0                    	shl	ax,cl
 19309 00000B75 29C7                    	sub	di,ax
 19310 00000B77 1E                      	push	ds
 19311                                  	;;mov	ax,Bios_Data ; 0070h
 19312                                  	;mov	ax,KERNEL_SEGMENT ; 0070h
 19313                                  	; 21/10/2022
 19314 00000B78 B87000                  	mov	ax,DOSBIODATASEG ; 0070h
 19315 00000B7B 8ED8                    	mov	ds,ax
 19316 00000B7D 893E[F508]              	mov	[FreeHMAPtr],di	   ; (ds:8F7h for MSDOS 6.21 IO.SYS)
 19317 00000B81 C606[0D00]FF            	mov	byte [inHMA],0FFh  ; (ds:0Dh)
 19318 00000B86 1F                      	pop	ds
 19319 00000B87 C3                      	retn
 19320                                  
 19321                                  ; ----------------------------------------------------------------------
 19322                                  ;
 19323                                  ; procedure : IsVDiskInstalled
 19324                                  ;
 19325                                  ;		Checks for the presence of VDISK header at 1MB boundary
 19326                                  ;		& INT 19 vector
 19327                                  ;
 19328                                  ; Inputs  : A20 flag should be ON
 19329                                  ; Outputs : Zero set if VDISK header found else Zero cleared
 19330                                  ;
 19331                                  ; ----------------------------------------------------------------------
 19332                                  
 19333                                  IsVDiskInstalled:
 19334 00000B88 31C0                    	xor	ax,ax
 19335 00000B8A 8ED8                    	mov	ds,ax
 19336 00000B8C 8E1E4E00                	mov	ds,[19*4+2]
 19337                                  	;mov	si,VDiskSig1-StartVDHead ; 12h
 19338                                  	; 23/10/2022
 19339 00000B90 BE1200                  	mov	si,18
 19340                                  	;mov	cx,VLEN1 ; 5
 19341 00000B93 B90500                  	mov	cx,5
 19342 00000B96 0E                      	push	cs
 19343 00000B97 07                      	pop	es
 19344 00000B98 BF[500A]                	mov	di,VDiskSig1
 19345 00000B9B F3A6                    	rep	cmpsb
 19346 00000B9D 7410                    	je	short ivdins_retn
 19347 00000B9F B8FFFF                  	mov	ax,0FFFFh
 19348 00000BA2 8ED8                    	mov	ds,ax
 19349                                  	;mov	si,10h+(VDiskSig2-VDiskHMAHead) ; 13h
 19350 00000BA4 BE1300                  	mov	si,13h
 19351 00000BA7 BF[750A]                	mov	di,VDiskSig2
 19352                                  	;mov	cx,VLEN2  ; 5
 19353 00000BAA B90500                  	mov	cx,5
 19354 00000BAD F3A6                    	rep	cmpsb
 19355                                  ivdins_retn: 
 19356 00000BAF C3                      	retn			; returns the Zero flag
 19357                                  
 19358                                  ; ----------------------------------------------------------------------
 19359                                  ;
 19360                                  ; procedure : CPMHack
 19361                                  ;
 19362                                  ;		Copies the code from 0:c0 into ffff:0d0h
 19363                                  ;		for CPM compatibility
 19364                                  ;
 19365                                  ; ----------------------------------------------------------------------
 19366                                  
 19367                                  	; 11/12/2022
 19368                                  CPMHack:
 19369 00000BB0 1E                      	push	ds
 19370 00000BB1 B9FFFF                  	mov	cx,0FFFFh
 19371 00000BB4 8EC1                    	mov	es,cx		; ES = FFFF
 19372                                  	;xor	cx,cx
 19373                                  	; 11/12/2022
 19374 00000BB6 41                      	inc	cx  ; cx = 0
 19375 00000BB7 8ED9                    	mov	ds,cx		; DS = 0
 19376 00000BB9 BEC000                  	mov	si,0C0h
 19377 00000BBC BFD000                  	mov	di,0D0h
 19378                                  	;mov	cx,5
 19379 00000BBF B105                    	mov	cl,5
 19380 00000BC1 FC                      	cld
 19381 00000BC2 F3A4                    	rep	movsb		; move 5 bytes from 0:C0 to FFFF:D0
 19382 00000BC4 1F                      	pop	ds
 19383 00000BC5 C3                      	retn
 19384                                  
 19385                                  ; ----------------------------------------------------------------------
 19386                                  ;
 19387                                  ; procedure : off_to_para
 19388                                  ;
 19389                                  ; ----------------------------------------------------------------------
 19390                                  off_to_para:
 19391 00000BC6 D1E8                    	shr	ax,1
 19392 00000BC8 D1E8                    	shr	ax,1
 19393 00000BCA D1E8                    	shr	ax,1
 19394 00000BCC D1E8                    	shr	ax,1
 19395 00000BCE C3                      	retn
 19396                                  
 19397                                  ; ----------------------------------------------------------------------
 19398                                  ;**	TempCDS - Create (Temporary?) CDS
 19399                                  ;
 19400                                  ;	ENTRY	?? BUGBUG
 19401                                  ;		(DS) = SysInitSeg
 19402                                  ;	EXIT	?? BUGBUG
 19403                                  ;	USES	?? BUGBUG
 19404                                  ; ----------------------------------------------------------------------
 19405                                  
 19406                                  	; 23/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 19407                                  TempCDS:
 19408 00000BCF C43E[6B02]              	les	di,[DOSINFO]
 19409 00000BD3 268A4D20                	mov	cl,[es:di+SYSI_NUMIO]
 19410                                  	;mov	cl,[es:di+20h]
 19411 00000BD7 30ED                    	xor	ch,ch			; (cx) = # of block devices
 19412                                  
 19413 00000BD9 26884D21                	mov	[es:di+SYSI_NCDS],cl	; one CDS per device
 19414                                  	;mov	[es:di+21h],cl	
 19415                                  
 19416 00000BDD 88C8                    	mov	al,cl
 19417 00000BDF B458                    	mov	ah,curdirlen ; curdir_list.size ; 88
 19418                                  	;mov	ah,88
 19419 00000BE1 F6E4                    	mul	ah			; (ax) = byte size for those CDSs
 19420 00000BE3 E8D304                  	call	ParaRound		; (ax) = paragraph size for CDSs
 19421 00000BE6 8B36[A102]              	mov	si,[top_of_cdss] ; mov si,[CONFBOT]
 19422                                  
 19423                                  ;	BUGBUG - we don't update confbot - won't someone else use it?
 19424                                  ;	chuckst -- answer: no. Confbot is used to access the CDSs,
 19425                                  ;	25 jul 92  which are stored BELOW it. Alloclim is the
 19426                                  ;		   variable which has the top of free memory for
 19427                                  ;		   device driver loads, etc.
 19428                                  
 19429 00000BEA 29C6                    	sub	si,ax
 19430                                  
 19431                                  ;	chuckst, 25 Jul 92 -- note: I'm removing the code here
 19432                                  ;		that automatically updates alloclim every time we
 19433                                  ;		set up some new CDSs. Instead, I've added code
 19434                                  ;		which pre-allocates space for 26 CDSs. This
 19435                                  ;	        way we've got room for worst case CDSs before
 19436                                  ;		we place MagicDrv.sys
 19437                                  ;
 19438                                  ;	mov	[ALLOCLIM],si		; can't alloc past here!
 19439                                  
 19440                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 19441                                  	; (SYSINIT:0C52h)
 19442 00000BEC 8936[A302]              	mov	[ALLOCLIM],si
 19443                                  
 19444 00000BF0 26897518                	mov	[es:di+SYSI_CDS+2],si
 19445                                  	;mov	[es:di+18h],si
 19446 00000BF4 89F0                    	mov	ax,si
 19447 00000BF6 26C745160000            	mov	word [es:di+SYSI_CDS],0	; set address of CDS list
 19448                                  	;mov	[word es:di+16h],0
 19449                                  	;lds	si,[es:di+SYSI_DPB]	; (ds:si) = address of first DPB
 19450 00000BFC 26C535                  	lds	si,[es:di]
 19451 00000BFF 8EC0                    	mov	es,ax
 19452 00000C01 31FF                    	xor	di,di			; (es:di) = address of 1st CDS
 19453                                  
 19454                                  ;*	Initialize our temporary CDSs. We'll init each CDS with the
 19455                                  ;	info from the corresponding DPB.
 19456                                  ;
 19457                                  ;	(cx) = count of CDSs left to process
 19458                                  ;	(es:di) = address of next CDS
 19459                                  
 19460                                  fooset:
 19461                                  	; 23/10/2022
 19462 00000C03 2EA1[A502]              	mov	ax,[cs:DirStrng] ; "A:"
 19463 00000C07 AB                      	stosw				; setup the root as the curdir
 19464                                  
 19465                                  	;call	get_dpb_for_drive_al	; get dpb for drive in dpb
 19466                                  
 19467                                  ;	(ds:si) = address of DPB
 19468                                  ;		 (si) = -1 if no drive
 19469                                  
 19470 00000C08 2EA1[A702]              	mov	ax,[cs:DirStrng+2] ; "\",0
 19471 00000C0C AB                      	stosw
 19472 00000C0D 2EFE06[A502]            	inc	byte [cs:DirStrng]
 19473 00000C12 31C0                    	xor	ax,ax
 19474 00000C14 51                      	push	cx
 19475                                  	;mov	cx,curdir_list.cdir_flags - 4 ; 63
 19476 00000C15 B93F00                  	mov	cx,63	; 23/10/2022
 19477 00000C18 F3AA                    	rep	stosb			; zero out rest of CURDIR_TEXTs
 19478                                  
 19479                                  ;	should handle the system that does not have any floppies.
 19480                                  ;	in this case,we are going to pretended there are two dummy floppies
 19481                                  ;	in the system. still they have dpb and cds,but we are going to
 19482                                  ;	0 out curdir_flags,curdir_devptr of cds so ibmdos can issue
 19483                                  ;	"invalid drive specification" message when the user try to
 19484                                  ;	access them.
 19485                                  ;
 19486                                  ;	(ax) = 0
 19487                                  ;	(es:di) = CURDIR_FLAGS in the CDS records
 19488                                  ;	(ds:si) = Next DPB (-1 if none)
 19489                                  
 19490 00000C1A 83FEFF                  	cmp	si,-1	; cmp si,0FFFFh
 19491 00000C1D 7414                    	je	short fooset_zero	; don't have any physical drive.
 19492                                  
 19493                                  ;	check to see if we are faking floppy drives. if not go to normcds.
 19494                                  ;	if we are faking floppy drives then see if this cds being initialised
 19495                                  ;	is for drive a: or b: by checking the appropriate field in the dpb
 19496                                  ;	pointed to by ds:si. if not for a: or b: then go to normcds. if
 19497                                  ;	for a: or b: then execute the code given below starting at fooset_zero.
 19498                                  ;	for dpb offsets look at inc\dpb.inc.
 19499                                  
 19500 00000C1F 2E803E[8902]01          	cmp	byte [cs:fake_floppy_drv],1
 19501 00000C25 7513                    	jne	short normcds 		; machine has floppy drives
 19502                                  	;cmp	byte [si+DPB.drive],1	; if dpb_drive = 0 (a) or 1 (b).
 19503 00000C27 803C01                  	cmp	byte [si],1
 19504 00000C2A 770E                    	ja	short normcds
 19505 00000C2C B103                    	mov	cl,3			; the next dbp pointer
 19506                                  					; AX should be zero here
 19507 00000C2E F3AB                    	rep	stosw
 19508 00000C30 59                      	pop	cx
 19509 00000C31 EB18                    	jmp	short get_next_dpb
 19510                                  
 19511                                  ;	(ax) = 0
 19512                                  
 19513                                  fooset_zero:
 19514 00000C33 B103                    	mov	cl,3
 19515 00000C35 F3AB                    	rep	stosw
 19516 00000C37 59                      	pop	cx
 19517 00000C38 EB14                    	jmp	short fincds
 19518                                  
 19519                                  ;*	We have a "normal" DPB and thus a normal CDS.
 19520                                  ;
 19521                                  ;	(ax) = 0
 19522                                  ;	(es:di) = CURDIR_FLAGS in the CDS records
 19523                                  ;	(ds:si) = Next DPB (-1 if none)
 19524                                  
 19525                                  normcds:
 19526 00000C3A 59                      	pop	cx
 19527                                  
 19528                                  ;	if a non-fat based media is detected (by dpb.numberoffat == 0), then
 19529                                  ;	set curdir_flags to 0. this is for signaling ibmdos and ifsfunc that
 19530                                  ;	this media is a non-fat based one.
 19531                                  
 19532                                  	;cmp	byte [si+DPB.FAT_COUNT],0 ; non fat system?
 19533                                  	; 23/10/2022
 19534 00000C3B 807C0800                	cmp	byte [si+8],0
 19535 00000C3F 7403                    	je	short setnormcds	; yes. set curdir_flags to 0. ax = 0 now.
 19536 00000C41 B80040                  	mov	ax,curdir_inuse ; 4000h	; else,fat system. set the flag to curdir_inuse.
 19537                                  	;mov	ax,4000h
 19538                                  setnormcds:
 19539 00000C44 AB                      	stosw				; curdir_flags
 19540 00000C45 89F0                    	mov	ax,si
 19541 00000C47 AB                      	stosw				; curdir_devptr
 19542 00000C48 8CD8                    	mov	ax,ds
 19543 00000C4A AB                      	stosw
 19544                                  
 19545                                  get_next_dpb:				; entry point for fake_fooset_zero
 19546                                  	; 23/10/2022
 19547 00000C4B C57419                  	lds	si,[si+19h]
 19548                                  	;lds	si,[si+DPB.NEXT_DPB] ; [si+19h]
 19549                                  fincds:
 19550 00000C4E B8FFFF                  	mov	ax,-1	; mov ax,0FFFFh
 19551 00000C51 AB                      	stosw				; curdir_id
 19552 00000C52 AB                      	stosw				; curdir_id
 19553 00000C53 AB                      	stosw				; curdir_user_word
 19554 00000C54 B80200                  	mov	ax,2
 19555 00000C57 AB                      	stosw				; curdir_end
 19556 00000C58 B000                    	mov	al,0			; clear out 7 bytes (curdir_type,
 19557 00000C5A AA                      	stosb
 19558 00000C5B AB                      	stosw				;  curdir_ifs_hdr,curdir_fsda)
 19559 00000C5C AB                      	stosw
 19560 00000C5D AB                      	stosw
 19561                                  
 19562 00000C5E E2A3                    	loop	fooset
 19563                                  	
 19564 00000C60 2EC606[A502]41          	mov	byte [cs:DirStrng],"A"	; "A:\"
 19565                                  	
 19566 00000C66 C3                      	retn
 19567                                  
 19568                                  ; ----------------------------------------------------------------------
 19569                                  ;***	get_dpb_for_drive_al -- lookup the DPB for drive in al
 19570                                  ;
 19571                                  ;	entry:
 19572                                  ;	   al == ASCII CAPS drive letter
 19573                                  ;
 19574                                  ;	exit:
 19575                                  ;	   ds:si -> DPB, or si = -1 if not found
 19576                                  ; ----------------------------------------------------------------------
 19577                                  
 19578                                  ;	; 23/10/2022 (get_dpb_for_drive_al
 19579                                  ;
 19580                                  ;get_dpb_for_drive_al:
 19581                                  ;	lds	si,[cs:DOSINFO]		; point to first DPB
 19582                                  ;	;lds	si,[si+SYSI_DPB]	; (ds:si) = address of first DPB
 19583                                  ;	lds	si,[si]
 19584                                  ;	sub	al,'A'
 19585                                  ;
 19586                                  ;get_dpb_for_drive_1:
 19587                                  ;	;cmp	al,[si+DPB.DRIVE]	; match?
 19588                                  ;	cmp	al,[si]
 19589                                  ;	je	short got_dpb_for_drive	;  done if so
 19590                                  ;
 19591                                  ;	lds	si,[si+DPB.NEXT_DPB] ; [si+19h]
 19592                                  ;	cmp	si,-1
 19593                                  ;	jne	short get_dpb_for_drive_1 ; loop until hit end of DPBs
 19594                                  ;
 19595                                  ;got_dpb_for_drive:
 19596                                  ;	retn
 19597                                  
 19598                                  ;=======================================================================
 19599                                  
 19600                                  ;**	EndFile - Build DOS structures
 19601                                  ;
 19602                                  ; This procedure is called after the config.sys has been processed and
 19603                                  ; installable device drivers have been loaded (but before "install="
 19604                                  ; programs are loaded) to create the dos structures such as SFTs, buffers,
 19605                                  ; FCBs, CDSs, etc. It also loads the sysinit_base module in low memory
 19606                                  ; to allow for the safe EXECing of "install=" programs. All memory
 19607                                  ; above these structures is deallocated back to DOS.
 19608                                  ;
 19609                                  ;	ENTRY	?? BUGBUG
 19610                                  ;	EXIT	?? BUGBUG
 19611                                  ;	USES	?? BUGBUG
 19612                                  
 19613                                  ;=======================================================================
 19614                                  ; allocate files
 19615                                  ; ----------------------------------------------------------------------
 19616                                  
 19617                                  	; 23/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 19618                                  	; (SYSINIT:0CCDh)
 19619                                  
 19620                                  endfile:
 19621                                  ; we are now setting up final cdss,buffers,files,fcss strings etc. we no
 19622                                  ; longer need the space taken by the temp stuff below confbot,so set alloclim
 19623                                  ; to confbot.
 19624                                  
 19625                                  ;	if this procedure has been called to take care of install= command,
 19626                                  ;	   then we have to save es,si registers.
 19627                                  
 19628                                  	; 11/12/2022
 19629                                  	; ds = cs
 19630                                  
 19631                                  	; 23/10/2022
 19632                                  	; 31/03/2019
 19633 00000C67 1E                      	push	ds
 19634                                  
 19635                                  	;;mov	ax,Bios_Data ; 0070h
 19636                                  	;mov	ax,KERNEL_SEGMENT ; 0070h
 19637                                  	; 21/10/2022
 19638 00000C68 B87000                  	mov	ax,DOSBIODATASEG ; 0070h
 19639 00000C6B 8ED8                    	mov	ds,ax
 19640                                  
 19641                                  	;cmp	word [052Fh],0
 19642 00000C6D 833E[2F05]00            	cmp	word [multrk_flag],multrk_off1 ;=0,multrack= command entered?
 19643 00000C72 7505                    	jne	short multrk_flag_done
 19644                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 19645                                  	;or	word [multrk_flag],multrk_on ; 80h  ; default will be on.
 19646                                  	; 12/12/2022
 19647 00000C74 800E[2F05]80            	or	byte [multrk_flag],multrk_on ; 80h
 19648                                  multrk_flag_done:
 19649                                  	; 23/10/2022
 19650                                  	; 31/03/2019
 19651 00000C79 1F                      	pop	ds
 19652                                  
 19653                                  	; 11/12/2022
 19654                                  	; ds = cs
 19655 00000C7A A1[A102]                	mov	ax,[top_of_cdss] ; mov ax,[CONFBOT]
 19656 00000C7D A3[A302]                	mov	[ALLOCLIM],ax
 19657                                  	; 23/10/2022
 19658                                  	;mov	ax, [cs:top_of_cdss]
 19659                                  	;mov	[cs:ALLOCLIM], ax 
 19660                                  
 19661                                  	; 11/12/2022
 19662                                  	; ds = cs
 19663                                  	;push	cs
 19664                                  	;pop	ds
 19665                                  	
 19666                                  	;mov	ax,[CONFBOT]
 19667                                  	;mov	[ALLOCLIM],ax
 19668                                  
 19669 00000C80 E83D24                  	call	round
 19670                                  	; 11/12/2022
 19671                                  	; ds = cs
 19672 00000C83 A0[9D02]                	mov	al,[FILES]
 19673                                  	; 23/10/2022
 19674                                  	;mov	al,[cs:FILES]
 19675 00000C86 2C05                    	sub	al,5
 19676 00000C88 764B                    	jbe	short dofcbs
 19677                                  
 19678 00000C8A 50                      	push	ax
 19679                                  	;mov	al,devmark_files ; 'F'
 19680 00000C8B B046                    	mov	al,'F'
 19681 00000C8D E87B07                  	call	setdevmark		; set devmark for sfts (files)
 19682 00000C90 58                      	pop	ax
 19683 00000C91 30E4                    	xor	ah,ah			; do not use cbw instruction!!!!!
 19684                                  					;  it does sign extend.
 19685                                  	; 11/12/2022
 19686                                  	; ds = cs
 19687 00000C93 8B1E[DE03]              	mov	bx,[memlo]
 19688 00000C97 8B16[E003]              	mov	dx,[memhi]
 19689 00000C9B C53E[6B02]              	lds	di,[DOSINFO]		;get pointer to dos data
 19690                                  	; 23/10/2022
 19691                                  	;mov	bx,[cs:memlo]
 19692                                  	;mov	dx,[cs:memhi]
 19693                                  	;lds	di,[cs:DOSINFO]		
 19694                                  
 19695                                  	;lds	di,[di+SYSI_SFT]	;ds:bp points to sft
 19696 00000C9F C57D04                  	lds	di,[di+4]
 19697                                  
 19698                                  	;mov	[di+SF.SFLink],bx
 19699 00000CA2 891D                    	mov	[di],bx
 19700 00000CA4 895502                  	mov	[di+SF.SFLink+2],dx	;set pointer to new sft
 19701                                  
 19702 00000CA7 0E                      	push	cs
 19703 00000CA8 1F                      	pop	ds
 19704                                  
 19705                                  	; 11/12/2022
 19706                                  	; ds = cs
 19707 00000CA9 C43E[DE03]              	les	di,[memlo]		;point to new sft
 19708                                  	; 23/10/2022
 19709                                  	;les	di,[cs:memlo]
 19710                                  
 19711                                  	;mov	word [es:di+SF.SFLink],-1
 19712 00000CAD 26C705FFFF              	mov	word [es:di],-1		; 0FFFFh
 19713                                  	;mov	[es:di+SF.SFCount],ax
 19714 00000CB2 26894504                	mov	[es:di+4],ax
 19715                                  	;mov	bl,SF_ENTRY.size ; 59
 19716 00000CB6 B33B                    	mov	bl,59
 19717 00000CB8 F6E3                    	mul	bl			;ax = number of bytes to clear
 19718 00000CBA 89C1                    	mov	cx,ax
 19719                                  	; 11/12/2022
 19720                                  	; ds = cs
 19721 00000CBC 0106[DE03]              	add	[memlo],ax		;allocate memory
 19722                                  	; 23/10/2022
 19723                                  	;add	[cs:memlo],ax
 19724 00000CC0 B80600                  	mov	ax,6
 19725                                  	; 11/12/2022
 19726 00000CC3 0106[DE03]              	add	[memlo],ax		;remember the header too
 19727                                  	;add	[cs:memlo],ax
 19728                                  	; 11/12/2022
 19729 00000CC7 800E[2E14]02            	or	byte [setdevmarkflag],for_devmark ; 2
 19730                                  	; 23/10/2022
 19731                                  	;or	byte [cs:setdevmarkflag],2
 19732 00000CCC E8F123                  	call	round			; check for mem error before the stosb
 19733 00000CCF 01C7                    	add	di,ax
 19734 00000CD1 31C0                    	xor	ax,ax
 19735 00000CD3 F3AA                    	rep	stosb			;clean out the stuff
 19736                                  
 19737                                  ; allocate fcbs
 19738                                  ; ----------------------------------------------------------------------
 19739                                  
 19740                                  	; 23/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 19741                                  	; (SYSINIT:0D48h)
 19742                                  dofcbs:
 19743                                  	; 11/12/2022
 19744                                  	; ds = cs
 19745                                  	;push	cs
 19746                                  	;pop	ds
 19747 00000CD5 E8E823                  	call	round
 19748                                  	;mov	al,devmark_fcbs	; 'X'	;='x'
 19749 00000CD8 B058                    	mov	al,'X'
 19750 00000CDA E82E07                  	call	setdevmark
 19751                                  	; 11/12/2022
 19752                                  	; ds = cs
 19753 00000CDD A0[9E02]                	mov	al,[FCBS]
 19754                                  	;mov	al,[cs:FCBS]
 19755 00000CE0 30E4                    	xor	ah,ah			; do not use cbw instruction!!!!!
 19756                                  					;  it does sign extend.
 19757                                  	; 11/12/2022
 19758 00000CE2 8B1E[DE03]              	mov	bx,[memlo]
 19759 00000CE6 8B16[E003]              	mov	dx,[memhi]
 19760 00000CEA C53E[6B02]              	lds	di,[DOSINFO]		;get pointer to dos data
 19761                                  	; 23/10/2022
 19762                                  	;mov	bx,[cs:memlo]
 19763                                  	;mov	dx,[cs:memhi]
 19764                                  	;lds	di,[cs:DOSINFO]
 19765                                  
 19766                                  	;mov	[di+SYSI_FCB],bx
 19767                                  	;mov	[di+SYSI_FCB+2],dx ;set pointer to new table
 19768                                  	; 23/10/2022
 19769 00000CEE 895D1A                  	mov	[di+1Ah],bx		; [di+SYSI_FCB]
 19770 00000CF1 89551C                  	mov	[di+1Ch],dx		; [di+SYSI_FCB+2]
 19771                                  
 19772 00000CF4 2E8A1E[9F02]            	mov	bl,[cs:KEEP]
 19773 00000CF9 30FF                    	xor	bh,bh
 19774                                  	;mov	[di+SYSI_KEEP],bx
 19775 00000CFB 895D1E                  	mov	[di+1Eh],bx		; [di+SYSI_KEEP]	
 19776                                  
 19777 00000CFE 0E                      	push	cs
 19778 00000CFF 1F                      	pop	ds
 19779                                  	
 19780 00000D00 C43E[DE03]              	les	di,[memlo]		;point to new table
 19781                                  	;mov	word [es:di+SF.SFLink],-1
 19782 00000D04 26C705FFFF              	mov	word [es:di],-1
 19783                                  	;mov	[es:di+SF.SFCount],ax
 19784                                  	; 02/11/2022
 19785 00000D09 26894504                	mov	[es:di+4],ax
 19786 00000D0D B339                    	mov	bl,SF_ENTRY.size ; 59
 19787 00000D0F 89C1                    	mov	cx,ax
 19788 00000D11 F6E3                    	mul	bl			;ax = number of bytes to clear
 19789 00000D13 0106[DE03]              	add	[memlo],ax		;allocate memory
 19790                                  	;mov	ax,6
 19791 00000D17 B80600                  	mov	ax,SF.size-2 ; 6
 19792 00000D1A 0106[DE03]              	add	[memlo],ax		;remember the header too
 19793                                  	;or	byte [setdevmarkflag],for_devmark ; 2
 19794 00000D1E 800E[2E14]02            	or	byte [setdevmarkflag],2
 19795 00000D23 E89A23                  	call	round			; check for mem error before the stosb
 19796 00000D26 01C7                    	add	di,ax			;skip over header
 19797 00000D28 B041                    	mov	al,'A'
 19798                                  fillloop:
 19799 00000D2A 51                      	push	cx			; save count
 19800 00000D2B B93900                  	mov	cx,SF_ENTRY.size ; 59	; number of bytes to fill
 19801 00000D2E FC                      	cld
 19802 00000D2F F3AA                    	rep	stosb			; filled
 19803                                  
 19804                                  	;mov	word [es:di-(SF_ENTRY.size)+SF_ENTRY.sf_ref_count],0  ; [es:di-59]
 19805                                  	;mov	word [es:di-(SF_ENTRY.size)+SF_ENTRY.sf_position],0   ; [es:di-38]	
 19806                                  	;mov	word [es:di-(SF_ENTRY.size)+SF_ENTRY.sf_position+2],0 ; [es:di-36]
 19807                                  
 19808                                  	; 18/12/2022
 19809                                  	;cx = 0
 19810 00000D31 26894DC7                	mov	[es:di-(SF_ENTRY.size)+SF_ENTRY.sf_ref_count],cx ;0  ; [es:di-59]
 19811 00000D35 26894DDC                	mov	[es:di-(SF_ENTRY.size)+SF_ENTRY.sf_position],cx ;0   ; [es:di-38]	
 19812 00000D39 26894DDE                	mov	[es:di-(SF_ENTRY.size)+SF_ENTRY.sf_position+2],cx ;0 ; [es:di-36]
 19813                                  	
 19814                                  	; 23/10/2022	
 19815                                  	;mov     word [es:di-3Bh],0
 19816                                  	;mov     word [es:di-26h],0
 19817                                  	;mov     word [es:di-24h],0
 19818                                  
 19819 00000D3D 59                      	pop	cx
 19820 00000D3E E2EA                    	loop	fillloop
 19821                                  
 19822                                  ; allocate buffers
 19823                                  ; ----------------------------------------------------------------------
 19824                                  
 19825                                  ; search through the list of media supported and allocate 3 buffers if the
 19826                                  ; capacity of the drive is > 360kb
 19827                                  
 19828                                  	; 18/12/2022
 19829                                  	; cx = 0
 19830 00000D40 833E[9702]FF            	cmp	word [buffers],-1	; has buffers been already set?
 19831 00000D45 7403                    	je	short dodefaultbuff
 19832 00000D47 E98700                  	jmp	dobuff			; the user entered the buffers=.
 19833                                  
 19834                                  dodefaultbuff:
 19835                                  	; 18/12/2022
 19836 00000D4A 890E[9902]              	mov	[h_buffers],cx ; 0
 19837 00000D4E 41                      	inc	cx
 19838 00000D4F 41                      	inc	cx
 19839 00000D50 890E[9702]              	mov	[buffers],cx ; 2	
 19840                                  	
 19841                                  	;mov	word [h_buffers],0	; default is no heuristic buffers.
 19842                                  	;mov	word [buffers],2	; default to 2 buffers
 19843                                  
 19844                                  	; 23/10/2022	
 19845 00000D54 50                      	push	ax
 19846 00000D55 1E                      	push	ds ; 26/03/2019
 19847                                  	;les	bp,[DOSINFO]		; search through the dpb's
 19848 00000D56 2EC42E[6B02]            	les	bp,[cs:DOSINFO]
 19849                                  	;les	bp,[es:bp+SYSI_DPB]	; get first dpb
 19850                                  	; 11/12/2022
 19851 00000D5B 26C46E00                	les	bp,[es:bp]
 19852                                  	; 23/10/2022
 19853                                  	;les	bp,[es:bp+0]	; ! (MSDOS 5.0 IO.SYS address compability) !	
 19854                                  
 19855 00000D5F 0E                      	push	cs
 19856 00000D60 1F                      	pop	ds
 19857                                  ;SYSINIT:0DE2h:
 19858                                  nextdpb:				; test if the drive supports removeable media
 19859                                  	;mov	bl,[es:bp+DPB.drive]
 19860                                  	; 11/12/2022
 19861 00000D61 268A5E00                	mov	bl,[es:bp]
 19862                                  	; 23/10/2022
 19863                                  	;mov	bl,[es:bp+0]	; ! (MSDOS 5.0 IO.SYS address compability) !
 19864                                  
 19865                                  	;inc	bl
 19866                                  	; 18/12/2022
 19867 00000D65 43                      	inc	bx
 19868                                  
 19869                                  	;mov	ax,(IOCTL<<8)|8
 19870 00000D66 B80844                  	mov	ax,4408h
 19871 00000D69 CD21                    	int	21h		; DOS - 2+ - IOCTL -
 19872                                  
 19873                                  ; ignore fixed disks
 19874                                  
 19875 00000D6B 09C0                    	or	ax,ax			; ax is nonzero if disk is nonremoveable
 19876 00000D6D 7534                    	jnz	short nosetbuf
 19877                                  
 19878                                  ; get parameters of drive
 19879                                  
 19880 00000D6F 31DB                    	xor	bx,bx
 19881                                  	;;mov	bl,[es:bp+DPB.drive]
 19882                                  	; 11/12/2022
 19883 00000D71 268A5E00                	mov	bl,[es:bp]
 19884                                  	; 23/10/2022
 19885                                  	;mov	bl,[es:bp+0]	; ! (MSDOS 5.0 IO.SYS address compability) !
 19886                                  	
 19887                                  	;inc	bl
 19888                                  	; 18/12/2022
 19889 00000D75 43                      	inc	bx
 19890                                  
 19891 00000D76 BA[6635]                	mov	dx,deviceparameters
 19892                                  	;mov	ax,(IOCTL<<8)|GENERIC_IOCTL
 19893 00000D79 B80D44                  	mov	ax,440Dh
 19894                                  	;mov	cx,(RAWIO<<8)|GET_DEVICE_PARAMETERS
 19895 00000D7C B96008                  	mov	cx,860h
 19896 00000D7F CD21                    	int	21h		; DOS - 2+ - IOCTL -
 19897 00000D81 7220                    	jc	short nosetbuf		; get next dpb if driver doesn't support
 19898                                  					; generic ioctl
 19899                                  ; determine capacity of drive
 19900                                  ; media capacity = #sectors * bytes/sector
 19901                                  
 19902                                  	;mov	bx,[deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.BPB_TOTALSECTORS]
 19903                                  	; 23/10/2022
 19904 00000D83 8B1E[7535]              	mov	bx,[deviceparameters+15] ; total sectors (16 bit)
 19905                                  	
 19906                                  ; to keep the magnitude of the media capacity within a word,
 19907                                  ; scale the sector size
 19908                                  ; (ie. 1 -> 512 bytes,2 -> 1024 bytes,...)
 19909                                  
 19910                                  	;mov	ax,[deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.BPB_BYTESPERSECTOR]
 19911                                  	; 23/10/2022
 19912 00000D87 A1[6D35]                	mov	ax, [deviceparameters+7] ; bytes per sector
 19913 00000D8A 31D2                    	xor	dx,dx
 19914 00000D8C B90002                  	mov	cx,512
 19915 00000D8F F7F1                    	div	cx			; scale sector size in factor of
 19916                                  					; 512 bytes
 19917 00000D91 F7E3                    	mul	bx			; ax = #sectors * size factor
 19918 00000D93 09D2                    	or	dx,dx			; just in case of large floppies
 19919 00000D95 7505                    	jnz	short setbuf
 19920 00000D97 3DD002                  	cmp	ax,720			; 720 sectors * size factor of 1
 19921 00000D9A 7607                    	jbe	short nosetbuf
 19922                                  setbuf:
 19923                                  	; 18/12/2022
 19924                                  	; word [buffers] = 2
 19925 00000D9C C606[9702]03            	mov	byte [buffers],3
 19926                                  	;mov	word [buffers],3
 19927 00000DA1 EB0D                    	jmp	short chk_memsize_for_buffers ; now check the memory size
 19928                                  					; for default buffer count
 19929                                  nosetbuf:
 19930                                  	; 23/10/2022
 19931                                  	;cmp	word [es:bp+DPB.NEXT_DPB],-1
 19932 00000DA3 26837E19FF              	cmp	word [es:bp+19h], -1 ; 0FFFFh
 19933 00000DA8 7406                    	je	short chk_memsize_for_buffers
 19934                                  	;les	bp,[es:bp+DPB.NEXT_DPB] ; [es:bp+19h]
 19935 00000DAA 26C46E19                	les	bp,[es:bp+19h]
 19936 00000DAE EBB1                    	jmp	short nextdpb
 19937                                  
 19938                                  ;from dos 3.3,the default number of buffers will be changed according to the
 19939                                  ;memory size too.
 19940                                  ; default buffers = 2
 19941                                  ; if diskette media > 360 kb,then default buffers = 3
 19942                                  ; if memory size > 128 kb (2000h para),then default buffers = 5
 19943                                  ; if memory size > 256 kb (4000h para),then default buffers = 10
 19944                                  ; if memory size > 512 kb (8000h para),then default buffers = 15.
 19945                                  
 19946                                  chk_memsize_for_buffers:
 19947                                  	; 18/12/2022
 19948                                  	;cmp	word [MEMORY_SIZE],2000h
 19949                                  	;jbe	short bufset
 19950                                  	;mov	word [buffers],5
 19951                                  	;cmp	word [MEMORY_SIZE],4000h
 19952                                  	;jbe	short bufset
 19953                                  	;mov	word [buffers],10
 19954                                  	;cmp	word [MEMORY_SIZE],8000h
 19955                                  	;jbe	short bufset
 19956                                  	;mov	word [buffers],15
 19957                                  
 19958                                  	; 18/12/2022
 19959                                  	; word [buffers] = 3 or 2
 19960 00000DB0 BB[9702]                	mov	bx,buffers
 19961 00000DB3 A1[9202]                	mov	ax,[MEMORY_SIZE]
 19962 00000DB6 48                      	dec	ax	; [MEMORY_SIZE] - 1
 19963                                  
 19964 00000DB7 80FC20                  	cmp	ah,20h	; ax >= 2000h ([MEMORY_SIZE] > 2000h) ; *
 19965 00000DBA 7213                    	jb	short bufset
 19966 00000DBC C6070F                  	mov	byte [bx],15 ; [buffers] = 15 ; ***
 19967 00000DBF 80FC80                  	cmp	ah,80h	; ax >= 8000h ([MEMORY_SIZE] > 8000h) ; ***
 19968 00000DC2 730B                    	jnb	short bufset
 19969 00000DC4 C6070A                  	mov	byte [bx],10 ; [buffers] = 10 ; **
 19970 00000DC7 80FC40                  	cmp	ah,40h	; ax >= 4000h ([MEMORY_SIZE] > 4000h) ; **
 19971 00000DCA 7303                    	jnb	short bufset
 19972 00000DCC C60705                  	mov	byte [bx],5  ; [buffers] = 5 ; *
 19973                                  bufset:
 19974                                  	; 23/10/2022
 19975                                  	; 26/03/2019
 19976 00000DCF 1F                      	pop	ds
 19977 00000DD0 58                      	pop	ax
 19978                                  
 19979                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 19980                                  ;j.k. here we should put extended stuff and new allocation scheme!!!
 19981                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 19982                                  
 19983                                  ; 26/03/2019
 19984                                  
 19985                                  ;*******************************************************************************
 19986                                  ;									       *
 19987                                  ; function: actually allocate buffers in the memory and initialize it. 	       *
 19988                                  ; input :								       *
 19989                                  ;    memhi:memlo - start of the next available memory			       *
 19990                                  ;    buffers = number of buffers					       *
 19991                                  ;    h_buffers = number of secondary buffers				       *
 19992                                  ;									       *
 19993                                  ; output:								       *
 19994                                  ;	buffinfo.cache_count - # of caches to be installed.		       *
 19995                                  ;	buffinfo set.							       *
 19996                                  ;	bufferqueue set.						       *
 19997                                  ;									       *
 19998                                  ; subroutines to be called:						       *
 19999                                  ;									       *
 20000                                  ;*******************************************************************************
 20001                                  
 20002                                  	; 23/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 20003                                  	; (SYSINIT:0E60h)
 20004                                  dobuff:
 20005                                  	; ds = cs ; 31/03/2019
 20006                                  	; 23/10/2022
 20007 00000DD1 2EC51E[6B02]            	lds	bx,[cs:DOSINFO]	; ds:bx -> sysinitvar
 20008                                  	;mov	ax,[buffers] ; 31/03/2019
 20009                                  	;lds	bx,[DOSINFO]
 20010 00000DD6 2EA1[9702]              	mov	ax,[cs:buffers]	; set sysi_buffers
 20011                                  	;mov	[bx+SYSI_BUFFERS],ax ; [bx+3Fh]
 20012 00000DDA 89473F                  	mov	[bx+3Fh],ax
 20013 00000DDD 2EA1[9902]              	mov	ax,[cs:h_buffers]
 20014                                  	;mov	[bx+SYSI_BUFFERS+2],ax ; [bx+41h]
 20015 00000DE1 894741                  	mov	[bx+41h],ax
 20016 00000DE4 C55F12                  	lds	bx,[bx+12h]
 20017                                  	;lds	bx,[bx+SYSI_BUF] ; now,ds:bx -> buffinfo
 20018 00000DE7 E8D622                  	call	round		; get [memhi]:[memlo]
 20019                                  	;mov	al,devmark_buf	; ='B'
 20020 00000DEA B042                    	mov	al,'B'	
 20021 00000DEC E81C06                  	call	setdevmark
 20022                                  
 20023                                  ;allocate buffers
 20024                                  
 20025 00000DEF 1E                      	push	ds			; save buffer info. ptr.
 20026 00000DF0 53                      	push	bx
 20027                                  
 20028 00000DF1 E85203                  	call	set_buffer
 20029                                  
 20030 00000DF4 5B                      	pop	bx
 20031 00000DF5 1F                      	pop	ds
 20032                                  
 20033                                  ;now set the secondary buffer if specified.
 20034                                  
 20035 00000DF6 2E833E[9902]00          	cmp	word [cs:h_buffers],0
 20036 00000DFC 742D                    	je	short xif16
 20037 00000DFE E8BF22                  	call	round
 20038                                  	; 23/10/2022
 20039 00000E01 2E8B0E[DE03]            	mov	cx,[cs:memlo]
 20040                                  	;mov	[bx+BUFFINF.Cache_ptr],cx  ; [bx+6]
 20041 00000E06 894F06                  	mov	[bx+6],cx
 20042 00000E09 2E8B0E[E003]            	mov	cx,[cs:memhi]
 20043                                  	;mov	[bx+BUFFINF.Cache_ptr+2],cx ; [bx+8]
 20044 00000E0E 894F08                  	mov	[bx+8],cx
 20045 00000E11 2E8B0E[9902]            	mov	cx,[cs:h_buffers]
 20046                                  	;mov	[bx+BUFFINF.Cache_count],cx ; [bx+10]
 20047 00000E16 894F0A                  	mov	[bx+10],cx
 20048 00000E19 B80002                  	mov	ax,512			; 512 byte
 20049 00000E1C F7E1                    	mul	cx
 20050 00000E1E 2EA3[DE03]              	mov	[cs:memlo],ax
 20051                                  	;or	byte [cs:setdevmarkflag],for_devmark ; 2
 20052 00000E22 2E800E[2E14]02          	or	byte [cs:setdevmarkflag],2
 20053 00000E28 E89522                  	call	round
 20054                                  xif16:
 20055                                  
 20056                                  ; ----------------------------------------------------------------------
 20057                                  ; allocate cdss
 20058                                  ; ----------------------------------------------------------------------
 20059                                  
 20060                                  buf1:
 20061 00000E2B E89222                  	call	round
 20062                                  
 20063 00000E2E 50                      	push	ax
 20064                                  	; 23/10/2022
 20065                                  	;mov	ax,devmark_cds		;='L'
 20066 00000E2F B84C00                  	mov	ax, 'L'
 20067 00000E32 E8D605                  	call	setdevmark
 20068 00000E35 58                      	pop	ax
 20069                                  
 20070 00000E36 2EC43E[6B02]            	les	di,[cs:DOSINFO]
 20071                                  	;mov	cl,[es:di+SYSI_NUMIO]
 20072 00000E3B 268A4D20                	mov	cl,[es:di+20h]
 20073 00000E3F 2E3A0E[A002]            	cmp	cl,[cs:NUM_CDS]
 20074 00000E44 7305                    	jae	short gotncds 		; user setting must be at least numio
 20075 00000E46 2E8A0E[A002]            	mov	cl,[cs:NUM_CDS]
 20076                                  gotncds:
 20077 00000E4B 30ED                    	xor	ch,ch
 20078                                  	;mov	[es:di+SYSI_NCDS],cl	; [es:di+33]
 20079 00000E4D 26884D21                	mov	[es:di+21h],cl
 20080 00000E51 2EA1[E003]              	mov	ax,[cs:memhi]
 20081                                  	;mov	[es:di+SYSI_CDS+2],ax
 20082 00000E55 26894518                	mov	[es:di+18h],ax
 20083 00000E59 2EA1[DE03]              	mov	ax,[cs:memlo]
 20084                                  	;mov	[es:di+SYSI_CDS],ax
 20085 00000E5D 26894516                	mov	[es:di+16h],ax
 20086 00000E61 88C8                    	mov	al,cl
 20087                                  	;mov	ah,curdirlen ; curdir_list.size
 20088 00000E63 B458                    	mov	ah,88
 20089 00000E65 F6E4                    	mul	ah
 20090 00000E67 E84F02                  	call	ParaRound
 20091 00000E6A 2E0106[E003]            	add	[cs:memhi],ax
 20092                                  
 20093                                  	;or	byte [cs:setdevmarkflag],for_devmark ; 2
 20094 00000E6F 2E800E[2E14]02          	or	byte [cs:setdevmarkflag],2
 20095 00000E75 E84822                  	call	round			; check for mem error before initializing
 20096                                  	;lds	si,[es:di+SYSI_DPB] ; [es:di+0]
 20097 00000E78 26C535                  	lds	si,[es:di]
 20098                                  	;les	di,[es:di+SYSI_CDS] ; [es:di+22]
 20099 00000E7B 26C47D16                	les	di,[es:di+16h]
 20100 00000E7F E881FD                  	call	fooset
 20101                                  
 20102                                  ; ----------------------------------------------------------------------
 20103                                  ; allocate space for internal stack
 20104                                  ; ----------------------------------------------------------------------
 20105                                  
 20106 00000E82 0E                      	push	cs
 20107 00000E83 1F                      	pop	ds
 20108                                  
 20109                                  ;	if the user did not entered stacks= command, as a default, do not install
 20110                                  ;	sytem stacks for pc1,pc xt,pc portable cases.
 20111                                  ;	otherwise,install it to the user specified value or to the default
 20112                                  ;	value of 9,128 for other systems.
 20113                                  
 20114 00000E84 833E[8E02]FF            	cmp	word [stack_addr],-1 ; has the user entered "stacks=" command?
 20115 00000E89 740E                    	je	short doinstallstack	; then install as specified by the user
 20116 00000E8B 803E[3803]00            	cmp	byte [sys_scnd_model_byte],0 ; pc1,xt has the secondary model byte = 0
 20117 00000E90 7507                    	jne	short doinstallstack	; other model should have default stack of 9,128
 20118 00000E92 803E[3703]FE            	cmp	byte [sys_model_byte],0FEh ; pc1, pc/xt or pc portable ?
 20119 00000E97 736D                    	jae	short skipstack
 20120                                  doinstallstack:
 20121 00000E99 A1[8A02]                	mov	ax,[stack_count]	; stack_count = 0?
 20122 00000E9C 09C0                    	or	ax,ax			; then, stack size must be 0 too.
 20123 00000E9E 7466                    	jz	short skipstack		; don't install stack.
 20124                                  
 20125                                  ;	dynamic relocation of stack code.
 20126                                  
 20127 00000EA0 E81D22                  	call	round			;[memhi] = seg. for stack code
 20128                                  					;[memlo] = 0
 20129                                  
 20130                                  ; set devmark block into memory for mem command
 20131                                  ; devmark_id = 's' for stack
 20132                                  
 20133                                  	;mov	al,devmark_stk	;='S'
 20134                                  	; 23/10/2022
 20135 00000EA3 B053                    	mov	al,'S'
 20136 00000EA5 E86305                  	call	setdevmark
 20137                                  
 20138 00000EA8 A1[E003]                	mov	ax,[memhi]
 20139 00000EAB 8EC0                    	mov	es,ax		;es -> seg. the stack code is going to move.
 20140                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 20141                                  	; 11/12/2022
 20142                                  	; ds = cs
 20143                                  	;push	cs
 20144                                  	;pop	ds
 20145 00000EAD 31F6                    	xor	si,si		;!!we know that stack code is at the beginning of sysinit.
 20146 00000EAF 31FF                    	xor	di,di
 20147 00000EB1 B9[6702]                	mov	cx,endstackcode
 20148 00000EB4 890E[DE03]              	mov	[memlo],cx
 20149 00000EB8 E80522                  	call	round		;have enough space for relocation?
 20150 00000EBB F3A4                    	rep	movsb
 20151                                  
 20152 00000EBD 1E                      	push	ds		; stick the location of the NextStack entry
 20153                                  	;;mov	ax,Bios_Data	; into the Win386 Instance Data tables
 20154                                  	;mov	ax,KERNEL_SEGMENT ; 70h
 20155                                  	; 21/10/2022
 20156 00000EBE B87000                  	mov	ax,DOSBIODATASEG ; 0070h
 20157 00000EC1 8ED8                    	mov	ds,ax
 20158 00000EC3 C706[BE08][1000]        	mov	word [NextStack],nextentry ; (8C0h for MSDOS 6.21 IO.SYS)
 20159 00000EC9 8C06[C008]              	mov	[NextStack+2],es	   ; (8C2h for MSDOS 6.21 IO.SYS)
 20160                                  
 20161 00000ECD 2EA1[DE03]              	mov	ax,[cs:memlo]
 20162 00000ED1 2EA3[8E02]              	mov	[cs:stack_addr],ax ;set for stack area initialization
 20163 00000ED5 A3[C408]                	mov	[IT_StackLoc],ax ; pass it as Instance Data, too
 20164 00000ED8 2EA1[E003]              	mov	ax,[cs:memhi]	;this will be used by stack_init routine.
 20165 00000EDC 2EA3[9002]              	mov	[cs:stack_addr+2],ax
 20166 00000EE0 A3[C608]                	mov	[IT_StackLoc+2],ax
 20167                                  
 20168                                  ;	space for internal stack area = stack_count(entrysize + stack_size)
 20169                                  
 20170                                  	;mov	ax,entrysize ; mov ax,8
 20171                                  	; 23/10/2022
 20172 00000EE3 B80800                  	mov	ax,8
 20173 00000EE6 2E0306[8C02]            	add	ax,[cs:stack_size]
 20174 00000EEB 2EF726[8A02]            	mul	word [cs:stack_count]
 20175                                  
 20176 00000EF0 A3[C808]                	mov	[IT_StackSize],ax ; pass through to Instance Tables
 20177                                  
 20178 00000EF3 1F                      	pop	ds		; no more need to access Instance Table
 20179                                  
 20180 00000EF4 E8C201                  	call	ParaRound	; convert size to paragraphs
 20181                                  	
 20182                                  	; 11/12/2022
 20183                                  	; ds = cs
 20184                                  	;add	[cs:memhi],ax
 20185 00000EF7 0106[E003]              	add	[memhi],ax
 20186                                  	;or	byte [cs:setdevmarkflag],for_devmark ; 2
 20187                                  	;or	byte [cs:setdevmarkflag],2
 20188 00000EFB 800E[2E14]02            	or	byte [setdevmarkflag],2
 20189                                  	;or	byte [setdevmarkflag],for_devmark ; 2
 20190                                  				;to set the devmark_size for stack by round routine.
 20191 00000F00 E8BD21                  	call	round		; check for memory error before
 20192                                  				; continuing
 20193 00000F03 E8E902                  	call	stackinit	; initialize hardware stack. 
 20194                                  				; cs=ds=sysinitseg,es=relocated stack code & data
 20195                                  skipstack:
 20196                                  	; 24/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 20197                                  	; (SYSINIT:0F99h)
 20198                                  
 20199                                  	; 11/12/2022
 20200                                  	; ds = cs
 20201                                  	;push	cs
 20202                                  	;pop	ds
 20203                                  
 20204 00000F06 A0[9D02]                	mov	al,[FILES]
 20205 00000F09 30E4                    	xor	ah,ah		; do not use cbw instruction!!!!!
 20206                                  				;  it does sign extend.
 20207 00000F0B 89C1                    	mov	cx,ax
 20208 00000F0D 31DB                    	xor	bx,bx		;close standard input
 20209 00000F0F B43E                    	mov	ah,3Eh ; CLOSE
 20210 00000F11 CD21                    	int	21h
 20211 00000F13 BB0200                  	mov	bx,2
 20212                                  rcclloop:			;close everybody but standard output
 20213 00000F16 B43E                    	mov	ah,3Eh ; CLOSE	; need output so we can print message
 20214 00000F18 CD21                    	int	21h		; in case we can't get new one open.
 20215 00000F1A 43                      	inc	bx
 20216 00000F1B E2F9                    	loop	rcclloop
 20217                                  
 20218 00000F1D BA[F033]                	mov	dx,condev
 20219 00000F20 B002                    	mov	al,2
 20220 00000F22 B43D                    	mov	ah,3Dh ; OPEN 	;open con for read/write
 20221 00000F24 F9                      	stc			; set for possible int 24
 20222 00000F25 CD21                    	int	21h
 20223 00000F27 7305                    	jnc	short goaux
 20224 00000F29 E82724                  	call	badfil
 20225 00000F2C EB13                    	jmp	short goaux2
 20226                                  goaux:	
 20227 00000F2E 50                      	push	ax
 20228 00000F2F BB0100                  	mov	bx,1		;close standard output
 20229 00000F32 B43E                    	mov	ah,3Eh ; CLOSE
 20230 00000F34 CD21                    	int	21h
 20231 00000F36 58                      	pop	ax
 20232                                  
 20233 00000F37 89C3                    	mov	bx,ax		;new device handle
 20234 00000F39 B445                    	mov	ah,45h ; XDUP
 20235 00000F3B CD21                    	int	21h		;dup to 1,stdout
 20236 00000F3D B445                    	mov	ah,45h ; XDUP
 20237 00000F3F CD21                    	int	21h		;dup to 2,stderr
 20238                                  goaux2: 
 20239 00000F41 BA[F433]                	mov	dx,auxdev
 20240 00000F44 B002                    	mov	al,2		;read/write access
 20241 00000F46 E83B24                  	call	open_dev
 20242                                  
 20243 00000F49 BA[F833]                	mov	dx,prndev
 20244 00000F4C B001                    	mov	al,1		;write only
 20245 00000F4E E83324                  	call	open_dev
 20246                                  
 20247                                  ;global rearm command for shared interrupt devices attached in the system;
 20248                                  ;shared interrupt attachment has some problem when it issues interrupt
 20249                                  ;during a warm reboot. once the interrupt is presented by the attachment,
 20250                                  ;no further interrupts on that level will be presented until a global rearm
 20251                                  ;is issued. by the request of the system architecture group, msbio will
 20252                                  ;issue a global rearm after every device driver is loaded.
 20253                                  ;to issue a global rearm:	;for pc1,xt,palace
 20254                                  ;
 20255                                  ;			  out 02f2h,xx  ; interrupt level 2
 20256                                  ;			  out 02f3h,xx  ; interrupt level 3
 20257                                  ;			  out 02f4h,xx  ; interrupt level 4
 20258                                  ;			  out 02f5h,xx  ; interrupt level 5
 20259                                  ;			  out 02f6h,xx  ; interrupt level 6
 20260                                  ;			  out 02f7h,xx  ; interrupt level 7
 20261                                  ;
 20262                                  ;	for pc at,in addition to the above commands,
 20263                                  ;	need to handle the secondary interrupt handler
 20264                                  ;
 20265                                  ;			  out 06f2h,xx  ; interrupt level 10
 20266                                  ;			  out 06f3h,xx  ; interrupt level 11
 20267                                  ;			  out 06f4h,xx  ; interrupt level 12
 20268                                  ;			  out 06f6h,xx  ; interrupt level 14
 20269                                  ;			  out 06f7h,xx  ; interrupt level 15
 20270                                  ;
 20271                                  ;	for round-up machine
 20272                                  ;
 20273                                  ;			  none.
 20274                                  
 20275                                  ; where xx stands for any value.
 20276                                  ;
 20277                                  ; for your information,after naples level machine,the system service bios
 20278                                  ; call (int 15h),function ah=0c0h returns the system configuration parameters
 20279                                  
 20280                                  	; 24/10/2022
 20281                                  
 20282 00000F51 50                      	push	ax
 20283 00000F52 53                      	push	bx
 20284 00000F53 52                      	push	dx
 20285 00000F54 06                      	push	es
 20286                                  
 20287 00000F55 B0FF                    	mov	al,0FFh 		;reset h/w by writing to port
 20288 00000F57 BAF202                  	mov	dx,2F2h 		;get starting address
 20289 00000F5A EE                      	out	dx,al			; out 02f2h,0ffh
 20290 00000F5B 42                      	inc	dx
 20291 00000F5C EE                      	out	dx,al			; out 02f3h,0ffh
 20292 00000F5D 42                      	inc	dx
 20293 00000F5E EE                      	out	dx,al			; out 02f4h,0ffh
 20294 00000F5F 42                      	inc	dx
 20295 00000F60 EE                      	out	dx,al			; out 02f5h,0ffh
 20296 00000F61 42                      	inc	dx
 20297 00000F62 EE                      	out	dx,al			; out 02f6h,0ffh
 20298 00000F63 42                      	inc	dx
 20299 00000F64 EE                      	out	dx,al			; out 02f7h,0ffh
 20300                                  
 20301                                  ;sb secondary global rearm
 20302                                  
 20303 00000F65 B800F0                  	mov	ax,0F000h		;get machine type
 20304 00000F68 8EC0                    	mov	es,ax
 20305 00000F6A 26803EFEFFFC            	cmp	byte [es:0FFFEh],0FCh ;q:is it a at type machine
 20306 00000F70 740D                    	je	short startrearm	; *if at no need to check
 20307                                  
 20308 00000F72 B4C0                    	mov	ah,0C0h 		;get system configuration
 20309 00000F74 CD15                    	int	15h			; *
 20310 00000F76 7216                    	jc	short finishrearm	; *jmp if old rom
 20311                                  
 20312                                  ; test feature byte for secondary interrupt controller
 20313                                  
 20314 00000F78 26F6470540              	test	byte [es:bx+5],40h
 20315                                  	; 24/10/2022
 20316                                  	;test	byte [es:bx+ROMBIOS_DESC.bios_sd_featurebyte1],ScndIntController
 20317 00000F7D 740F                    	je	short finishrearm	;jmp if it is there
 20318                                  
 20319                                  startrearm:
 20320 00000F7F B0FF                    	mov	al,0FFh 		;write any pattern to port
 20321 00000F81 BAF206                  	mov	dx,6F2h 		;get starting address
 20322 00000F84 EE                      	out	dx,al			;out 06f2h,0ffh
 20323 00000F85 42                      	inc	dx			;bump address
 20324 00000F86 EE                      	out	dx,al			;out 06f3h,0ffh
 20325 00000F87 42                      	inc	dx			;bump address
 20326 00000F88 EE                      	out	dx,al			;out 06f4h,0ffh
 20327 00000F89 42                      	inc	dx			;bump address
 20328 00000F8A 42                      	inc	dx			;bump address
 20329 00000F8B EE                      	out	dx,al			;out 06f6h,0ffh
 20330 00000F8C 42                      	inc	dx			;bump address
 20331 00000F8D EE                      	out	dx,al			;out 06f7h,0ffh
 20332                                  
 20333                                  finishrearm:
 20334 00000F8E 07                      	pop	es
 20335 00000F8F 5A                      	pop	dx
 20336 00000F90 5B                      	pop	bx
 20337 00000F91 58                      	pop	ax
 20338                                  
 20339                                  ;    global rearm end *******************
 20340                                  
 20341                                  ; ----------------------------------------------------------------------
 20342                                  ; allocate sysinit_base for install= command
 20343                                  ; ----------------------------------------------------------------------
 20344                                  ; sysinit_base allocation.
 20345                                  ;   check if endfile has been called to handle install= command.
 20346                                  
 20347                                  set_sysinit_base:
 20348                                  
 20349                                  ; ----------------------------------------------------------------------
 20350                                  ;sysinit_base will be established in the secure area of
 20351                                  ;lower memory when it handles the first install= command.
 20352                                  ;sysinit_base is the place where the actual exec function will be called and
 20353                                  ;will check sysinit module in high memory if it is damaged by the application
 20354                                  ;program.  if sysinit module has been broken,then "memory error..." message
 20355                                  ;is displayed by sysinit_base.
 20356                                  ; ----------------------------------------------------------------------
 20357                                  
 20358                                  	; 24/10/2022 - Retro DOS v4.0 (MSDOS 5.0 IO.SYS, SYSINIT)
 20359                                  	; (SYSINIT:1028h)
 20360                                  
 20361                                  	; 11/12/2022
 20362                                  	; ds = cs
 20363 00000F92 50                      	push	ax			; set devmark for mem command
 20364 00000F93 A1[E003]                	mov	ax,[memhi]
 20365 00000F96 2B06[E403]              	sub	ax,[area]
 20366 00000F9A A3[DC03]                	mov	[impossible_owner_size],ax ;remember the size in case.
 20367                                  	;mov	al,devmark_inst ; 'T'
 20368 00000F9D B054                    	mov	al,'T'
 20369 00000F9F E86904                  	call	setdevmark
 20370 00000FA2 58                      	pop	ax
 20371                                  
 20372 00000FA3 8B3E[E003]              	mov	di,[memhi]
 20373 00000FA7 8EC7                    	mov	es,di
 20374 00000FA9 893E[5003]              	mov	[sysinit_base_ptr+2],di ; save this entry for the next use.
 20375 00000FAD 31FF                    	xor	di,di
 20376 00000FAF 893E[4E03]              	mov	[sysinit_base_ptr],di	; es:di -> destination.
 20377 00000FB3 BE[C510]                	mov	si,sysinit_base		;ds:si -> source code to be relocated.
 20378 00000FB6 B98100                  	mov	cx,end_sysinit_base-sysinit_base ; 129
 20379                                  	; 24/10/2022 
 20380                                  	;mov	cx,128	; 11DCh-115Ch 	; (MSDOS 5.0 IO.SYS, SYSINIT)
 20381 00000FB9 010E[DE03]              	add	[memlo],cx
 20382                                  	;or	byte cs:[setdevmarkflag],for_devmark ; 2
 20383                                  	; 11/12/2022
 20384                                  	; ds = cs
 20385                                  	;or	byte [cs:setdevmarkflag],2
 20386 00000FBD 800E[2E14]02            	or	byte [setdevmarkflag],2
 20387                                  	;or	byte [setdevmarkflag],for_devmark
 20388 00000FC2 E8FB20                  	call	round			; check mem error. also,readjust memhi for the next use.
 20389 00000FC5 F3A4                    	rep	movsb			; reallocate it.
 20390                                  
 20391 00000FC7 C706[5203][9E10]        	mov	word [sysinit_ptr],sysinitptr ; returning address from
 20392 00000FCD 8C0E[5403]              	mov	[sysinit_ptr+2],cs	 ; sysinit_base back to sysinit.
 20393                                  	;or	word [install_flag],has_installed ; set the flag.
 20394                                  	;or	byte [install_flag],has_installed ; 2
 20395                                  	; 11/12/2022
 20396 00000FD1 800E[4A03]02            	or	byte [install_flag],2
 20397                                  	; 24/10/2022
 20398                                  	;or	word [install_flag],2	
 20399                                  
 20400                                  ; ----------------------------------------------------------------------
 20401                                  ; free the rest of the memory from memhi to confbot. still from confbot to
 20402                                  ; the top of the memory will be allocated for sysinit and config.sys if
 20403                                  ; have_install_cmd.
 20404                                  ; ----------------------------------------------------------------------
 20405                                  
 20406 00000FD6 E8E720                  	call	round
 20407 00000FD9 8B1E[E003]              	mov	bx,[memhi]
 20408 00000FDD A1[E403]                	mov	ax,[area]
 20409 00000FE0 A3[DA03]                	mov	[old_area],ax		; save [area]
 20410 00000FE3 8EC0                    	mov	es,ax			;calc what we needed
 20411 00000FE5 29C3                    	sub	bx,ax
 20412                                  	; 24/10/2022
 20413 00000FE7 B44A                    	mov	ah,4Ah ; SETBLOCK
 20414 00000FE9 CD21                    	int	21h			;give the rest back
 20415                                  		; DOS - 2+ - ADJUST MEMORY BLOCK SIZE (SETBLOCK)
 20416                                  		; ES = segment address of block to change
 20417                                  		; BX = new size in paragraphs
 20418 00000FEB 06                      	push	es
 20419 00000FEC 8CC0                    	mov	ax,es
 20420 00000FEE 48                      	dec	ax
 20421 00000FEF 8EC0                    	mov	es,ax			;point to arena
 20422                                  	;mov	word [es:ARENA.OWNER],8	;set impossible owner
 20423                                  	;;mov	word [es:ARENA.NAME],4453h	; System Data
 20424                                  	;mov	word [es:ARENA.NAME],'SD'	; System Data
 20425                                  	; 24/10/2022
 20426 00000FF1 26C70601000800          	mov	word [es:1],8		;set impossible owner
 20427 00000FF8 26C70608005344          	mov	word [es:8],'SD'	; System Data
 20428 00000FFF 07                      	pop	es
 20429                                  
 20430 00001000 BBFFFF                  	mov	bx,0FFFFh
 20431 00001003 B448                    	mov	ah,48h ; ALLOC
 20432 00001005 CD21                    	int	21h
 20433 00001007 B448                    	mov	ah,48h ; ALLOC
 20434 00001009 CD21                    	int	21h			; allocate the rest of the memory
 20435                                  		; DOS - 2+ - ALLOCATE MEMORY
 20436                                  		; BX = number of 16-byte paragraphs desired
 20437 0000100B A3[E003]                	mov	[memhi],ax		; start of the allocated memory
 20438 0000100E C706[DE03]0000          	mov	word [memlo],0		;  to be used next.
 20439                                  
 20440                                  ;;;; at this moment,memory from [memhi]:0 to top-of-the memory is
 20441                                  ;;;; allocated.
 20442                                  ;;;; to protect sysinit,confbot module (from confbot (or =alloclim at
 20443                                  ;;;; this time) to the top-of-the memory),here we are going to
 20444                                  ;;;; 1). "setblock" from memhi to confbot.
 20445                                  ;;;; 2). "alloc" from confbot to the top of the memory.
 20446                                  ;;;; 3). "free alloc memory" from memhi to confbot.
 20447                                  
 20448                                  ;memory allocation for sysinit,confbot module.
 20449                                  
 20450 00001014 8EC0                    	mov	es,ax
 20451                                  	;mov	bx,[CONFBOT]
 20452                                  	; 24/10/2022
 20453 00001016 8B1E[A102]              	mov	bx,[top_of_cdss]
 20454 0000101A 29C3                    	sub	bx,ax			; confbot - memhi
 20455 0000101C 4B                      	dec	bx			; make a room for the memory block id.
 20456 0000101D 4B                      	dec	bx			; make sure!!!.
 20457 0000101E B44A                    	mov	ah,4Ah ; SETBLOCK
 20458 00001020 CD21                    	int	21h			; this will free (confbot to top of memory)
 20459                                  		; DOS - 2+ - ADJUST MEMORY BLOCK SIZE (SETBLOCK)
 20460                                  		; ES = segment address of block to change
 20461                                  		; BX = new size in paragraphs
 20462 00001022 BBFFFF                  	mov	bx,0FFFFh
 20463 00001025 B448                    	mov	ah,48h ; ALLOC
 20464 00001027 CD21                    	int	21h
 20465 00001029 B448                    	mov	ah,48h ; ALLOC
 20466 0000102B CD21                    	int	21h			; allocate (confbot to top of memory)
 20467                                  		; DOS - 2+ - ALLOCATE MEMORY
 20468                                  		; BX = number of 16-byte paragraphs desired
 20469 0000102D A3[E403]                	mov	[area],ax		; save allocated memory segment.
 20470                                  					; need this to free this area for command.com.
 20471 00001030 8E06[E003]              	mov	es,[memhi]
 20472 00001034 B449                    	mov	ah,49h			; free allocated memory.
 20473 00001036 CD21                    	int	21h			; free (memhi to confbot(=area))
 20474                                  		; DOS - 2+ - FREE MEMORY
 20475                                  		; ES = segment address of area to be freed
 20476                                  endfile_ret:
 20477 00001038 C3                      	retn
 20478                                  
 20479                                  ; End of "EndFile" DOS structure configuration.
 20480                                  
 20481                                  ; ----------------------------------------------------------------------
 20482                                  ; 26/03/2019 - Retro DOS v4.0
 20483                                  ; 24/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS, SYSINIT)	
 20484                                  ; ----------------------------------------------------------------------
 20485                                  ; Do_Install_Exec
 20486                                  ;
 20487                                  ; This procedure is used to EXEC a program being loaded via the 
 20488                                  ; "install=" mechanism in config.sys. It does this by setting up
 20489                                  ; the parameters, and then jumping to sysinit_base, which has been
 20490                                  ; setup in low memory. When complete, sysinit_base will jump back
 20491                                  ; up to this procedure (if sysinit remains uncorrupted by the installed
 20492                                  ; program).
 20493                                  
 20494                                  ;SYSINIT:10CFh:
 20495                                  
 20496                                  do_install_exec:			; now,handles install= command.
 20497                                  
 20498 00001039 56                      	push	si			; save si for config.sys again.
 20499                                  
 20500                                  ; we are going to call load/exec function.
 20501                                  ; set es:bx to the parameter block here;;;;;;;
 20502                                  ; set ds:dx to the asciiz string. remember that we already has 0
 20503                                  ; after the filename. so parameter starts after that. if next
 20504                                  ; character is a line feed (i.e. 10),then assume that the 0
 20505                                  ; we already encountered used to be a carrage return. in this
 20506                                  ; case,let's set the length to 0 which will be followed by
 20507                                  ; carridge return.
 20508                                  
 20509                                  ; es:si -> command line in config.sys. points to the first non blank
 20510                                  ;character after =.
 20511                                  
 20512 0000103A 06                      	push	es
 20513 0000103B 1E                      	push	ds
 20514 0000103C 07                      	pop	es
 20515 0000103D 1F                      	pop	ds			; es->sysinitseg,ds->confbot seg
 20516 0000103E 89F2                    	mov	dx,si			; ds:dx->file name,0 in config.sys image.
 20517                                  
 20518 00001040 31C9                    	xor	cx,cx
 20519 00001042 FC                      	cld
 20520 00001043 2EC606[6D03]20          	mov	byte [cs:ldexec_start],' ' ; clear out the parm area
 20521 00001049 BF[6E03]                	mov	di,ldexec_parm
 20522                                  installfilename:			; skip the file name
 20523 0000104C AC                      	lodsb				; al = ds:si; si++
 20524 0000104D 3C00                    	cmp	al,0
 20525 0000104F 7402                    	je	short got_installparm
 20526 00001051 EBF9                    	jmp	short installfilename
 20527                                  got_installparm:			; copy the parameters to ldexec_parm
 20528 00001053 AC                      	lodsb
 20529 00001054 268805                  	mov	[es:di],al
 20530 00001057 3C0A                    	cmp	al,lf	; cmp al,0Ah	; line feed?
 20531 00001059 7405                    	je	short done_installparm
 20532 0000105B FEC1                    	inc	cl			; # of char. in the parm.
 20533 0000105D 47                      	inc	di
 20534 0000105E EBF3                    	jmp	short got_installparm
 20535                                  done_installparm:
 20536 00001060 2E880E[6C03]            	mov	byte [cs:ldexec_line],cl ; length of the parm.
 20537 00001065 80F900                  	cmp	cl,0			; if no parm,then
 20538 00001068 7506                    	jne	short install_seg_set 	; let the parm area
 20539 0000106A 2EC606[6D03]0D          	mov	byte [cs:ldexec_start],cr ; 0Dh 
 20540                                  					; starts with cr.
 20541                                  install_seg_set:
 20542 00001070 2EC70600000000          	mov	word [cs:0],0		; make a null environment segment
 20543 00001077 8CC8                    	mov	ax,cs			; by overlap jmp instruction of sysinitseg.
 20544                                  
 20545                                  ;---------------------------------------------------M067----------------
 20546                                  ;
 20547                                  ; 	the environment pointer is made 0. so the current environment ptr.
 20548                                  ; 	will be the same as pdb_environ which after dosinit is 0.
 20549                                  ;
 20550                                  ; 	mov	cs:[instexe.exec0_environ],0 ; set the environment seg.
 20551                                  ;
 20552                                  ; 	instexe.exec0_environ need not be initialized to 0 above. It was
 20553                                  ; 	done as a fix for bug #529. The actual bug was in NLSFUNC and
 20554                                  ; 	was fixed. 
 20555                                  ;
 20556                                  ; ----------------------------------------------------------------------
 20557                                  
 20558                                  ;;ifdef   MULTI_CONFIG
 20559                                  
 20560                                  ; If there's any environment data in "config_wrkseg", pass to app
 20561                                  
 20562                                  	; 24/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS SYSINIT)
 20563                                          ;mov     cx,ax
 20564                                          ;cmp     word [cs:config_envlen],0
 20565                                          ;je      short no_envdata2
 20566                                          ;mov     cx,[cs:config_wrkseg]
 20567                                  ;no_envdata2:
 20568                                  ;;endif  ;MULTI_CONFIG
 20569                                  
 20570                                  	;mov	[cs:instexe.exec0_environ],cx ; set the environment seg.
 20571                                  	; 24/10/2022
 20572                                  	;mov	[cs:iexec.environ],cx
 20573                                  	; 02/11/2022
 20574 00001079 2EA3[BE03]              	mov	[cs:iexec.environ],ax	
 20575                                  
 20576                                  	;mov	[cs:instexe.exec0_com_line+2],ax ; set the seg.
 20577 0000107D 2EA3[C203]              	mov	[cs:iexec.ldexec_line+2],ax
 20578                                  	;mov	[cs:instexe.exec0_5c_fcb+2],ax
 20579 00001081 2EA3[C603]              	mov	[cs:iexec.ldexec_5c_fcb+2],ax
 20580                                  	;mov	[cs:instexe.exec0_6c_fcb+2],ax
 20581 00001085 2EA3[CA03]              	mov	[cs:iexec.ldexec_6c_fcb+2],ax
 20582 00001089 E86E00                  	call	sum_up
 20583 0000108C 26A3[5603]              	mov	[es:checksum],ax	; save the value of the sum
 20584 00001090 31C0                    	xor	ax,ax
 20585 00001092 B44B                    	mov	ah,4Bh ; EXEC		; load/exec
 20586 00001094 BB[BE03]                	mov	bx,instexe		; es:bx -> parm block.
 20587 00001097 06                      	push	es			; save es,ds for load/exec
 20588 00001098 1E                      	push	ds			; these registers will be restored in sysinit_base.
 20589 00001099 2EFF2E[4E03]            	jmp	far [cs:sysinit_base_ptr] ; jmp to sysinit_base to execute
 20590                                  					; load/exec function and check sum.
 20591                                  
 20592                                  ;----------------------------------------
 20593                                  
 20594                                  ;j.k. this is the returning address from sysinit_base.
 20595                                  
 20596                                  	; 24/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS SYSINIT)
 20597                                  
 20598                                  sysinitptr:				; returning far address from sysinit_base
 20599 0000109E 5E                      	pop	si			; restore si for config.sys file.
 20600 0000109F 06                      	push	es
 20601 000010A0 1E                      	push	ds
 20602 000010A1 07                      	pop	es
 20603 000010A2 1F                      	pop	ds			; now ds - sysinitseg, es - confbot
 20604 000010A3 7306                            jnc     short install_exit_ret
 20605                                  
 20606 000010A5 56                      	push	si			; error in loading the file for install=.
 20607 000010A6 E8AE22                  	call	badload 		; es:si-> path,filename,0.
 20608 000010A9 5E                      	pop	si
 20609                                  
 20610                                  	; 24/10/2022
 20611                                  	;jmp	short sysinitptr_retn ; (MSDOS 5.0 IO.SYS, SYSINIT:1140h)
 20612                                  	; 11/12/2022
 20613                                  	; ds = cs
 20614 000010AA C3                      	retn
 20615                                  
 20616                                  install_exit_ret:
 20617                                  	;retn		; retn (MSDOS 6.21 IO.SYS, SYSINIT:1283h) ; 18/12/2022
 20618                                  
 20619                                  	; 24/10/2022 (MSDOS 5.0 IO.SYS SYSINIT)
 20620                                  ;SYSINIT:1142h:
 20621 000010AB B44D                    	mov     ah,4Dh
 20622 000010AD CD21                    	int     21h             ; DOS - 2+ - GET EXIT CODE OF SUBPROGRAM (WAIT)
 20623 000010AF 80FC03                  	cmp     ah,3
 20624 000010B2 7404                    	jz      short sysinitptr_retn
 20625 000010B4 E89316                  	call    error_line
 20626 000010B7 F9                      	stc
 20627                                  sysinitptr_retn:	; (SYSINIT:114Fh)
 20628 000010B8 C3                      	retn		
 20629                                  
 20630                                  ; ----------------------------------------------------------------------
 20631                                  
 20632                                  ;**	ParaRound - Round Up length to paragraph multiple
 20633                                  ;
 20634                                  ;	ParaRound rounds a byte count up to a multiple of 16, then divides
 20635                                  ;	by 16 yielding a "length in paragraphs" value.
 20636                                  ;
 20637                                  ;	ENTRY	(ax) = byte length
 20638                                  ;	EXIT	(ax) = rounded up length in paragraphs
 20639                                  ;	USES	ax, flags
 20640                                  
 20641                                  ParaRound:
 20642 000010B9 83C00F                  	add	ax,15
 20643 000010BC D1D8                    	rcr	ax,1
 20644 000010BE D1E8                    	shr	ax,1
 20645 000010C0 D1E8                    	shr	ax,1
 20646 000010C2 D1E8                    	shr	ax,1
 20647 000010C4 C3                      	retn
 20648                                  
 20649                                  ; ----------------------------------------------------------------------
 20650                                  ; sysinit_base module.
 20651                                  ;
 20652                                  ; This module is relocated by the routine EndFile to a location in low
 20653                                  ; memory. It is then called by SYSINIT to perform the EXEC of programs
 20654                                  ; that are being loaded by the "install=" command. After the EXEC call
 20655                                  ; completes, this module performs a checksum on the SYSINIT code (at the
 20656                                  ; top of memory) to be sure that the EXECed program did not damage it.
 20657                                  ; If it did, then this module will print an error message and stop the
 20658                                  ; system. Otherwise, it returns control to SYSINIT.
 20659                                  ;
 20660                                  ;in: after relocation,
 20661                                  ;    ax = 4b00h - load and execute the program dos function.
 20662                                  ;    ds = confbot. segment of config.sys file image
 20663                                  ;    es = sysinitseg. segment of sysinit module itself.
 20664                                  ;    ds:dx = pointer to asciiz string of the path,filename to be executed.
 20665                                  ;    es:bx = pointer to a parameter block for load.
 20666                                  ;    SI_end (byte) - offset vaule of end of sysinit module label
 20667                                  ;    bigsize (word) - # of word from confbot to SI_end.
 20668                                  ;    chksum (word) - sum of every byte from confbot to SI_end in a
 20669                                  ;			word boundary moduler form.
 20670                                  ;    sysinit_ptr (dword ptr) - return address to sysinit module.
 20671                                  ;
 20672                                  ;note: sysinit should save necessary registers and when the control is back
 20673                                  
 20674                                  	; 24/10/2022
 20675                                  	; (SYSINIT:115Ch for MSDOS 5.0 SYSINIT)
 20676                                  sysinit_base:				
 20677 000010C5 2E8C166200              	mov	[cs:sysinit_base_ss],ss	; save stack
 20678 000010CA 2E89266400              	mov	[cs:sysinit_base_sp],sp	
 20679 000010CF CD21                    	int	21h			; load/exec dos call.
 20680 000010D1 2E8E166200              	mov	ss,[cs:sysinit_base_ss]	; restore stack
 20681 000010D6 2E8B266400              	mov	sp,[cs:sysinit_base_sp]
 20682 000010DB 1F                      	pop	ds			; restore confbot seg
 20683 000010DC 07                      	pop	es			; restore sysinitseg
 20684 000010DD 7216                    	jc	short sysinit_base_end	; load/exec function failed.
 20685                                  					; at this time,i don't have to worry about
 20686                                  					; that sysinit module has been broken or not.
 20687 000010DF E81800                  	call	sum_up			; otherwise,check if it is good.
 20688 000010E2 263906[5603]            	cmp	[es:checksum],ax
 20689 000010E7 740C                    	je	short sysinit_base_end
 20690                                  
 20691                                  ;	memory broken. show "memory allocation error" message and stall.
 20692                                  
 20693 000010E9 B409                    	mov	ah,9
 20694 000010EB 0E                      	push	cs
 20695 000010EC 1F                      	pop	ds
 20696 000010ED BA6600                  	mov	dx,mem_alloc_err_msgx-sysinit_base ; 65h (for MSDOS 5.0 SYSINIT)
 20697 000010F0 CD21                    	int	21h
 20698                                  		; DOS - PRINT STRING
 20699                                  		; DS:DX -> string terminated by "$"
 20700                                  	; 24/10/2022
 20701                                  _stall: 
 20702                                  	; 11/12/2022
 20703 000010F2 F4                      	hlt 
 20704                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 20705                                  	;hlt				;use HLT to minimize energy consumption
 20706 000010F3 EBFD                            jmp	short _stall
 20707                                  
 20708                                  sysinit_base_end: 
 20709 000010F5 26FF2E[5203]            	jmp	far [es:sysinit_ptr]	;return back to sysinit module
 20710                                  
 20711                                  ;-------------------------------------
 20712                                  
 20713                                  sum_up:
 20714                                  
 20715                                  ;in:   es - sysinitseg.
 20716                                  ;out:  ax - result
 20717                                  ;
 20718                                  ;remark: since this routine will only check starting from "locstack" to the end of
 20719                                  ;	 sysinit segment,the data area, and the current stack area are not
 20720                                  ;	 coverd. in this sense,this check sum routine only gives a minimal
 20721                                  ;	 gaurantee to be safe.
 20722                                  ;
 20723                                  ;first sum up confbot seg.
 20724                                  
 20725 000010FA 1E                      	push	ds
 20726                                  	;mov	ax,[es:CONFBOT]
 20727                                  	; 24/10/2022
 20728 000010FB 26A1[A102]              	mov	ax,[es:top_of_cdss]
 20729 000010FF 8ED8                    	mov	ds,ax
 20730 00001101 31F6                    	xor	si,si
 20731 00001103 31C0                    	xor	ax,ax
 20732 00001105 268B0E[4C03]            	mov	cx,[es:config_size]	; if config_size has been broken,then this
 20733                                  					;whole test better fail.
 20734 0000110A D1E9                    	shr	cx,1			; make it a word count
 20735 0000110C 7406                    	jz	short sum_sys_code	; when config.sys file not exist.
 20736                                  sum1:
 20737 0000110E 0304                    	add	ax,[si]
 20738 00001110 46                      	inc	si
 20739 00001111 46                      	inc	si
 20740 00001112 E2FA                    	loop	sum1
 20741                                  ;now,sum up sysinit module.
 20742                                  sum_sys_code:
 20743                                  	; 24/10/2022
 20744 00001114 BE1411                  	mov	si,locstack ; 5A6h (MSDOS 5.0 IO.SYS, SYSINIT)
 20745                                  				        ; starting after the stack.  M069
 20746                                  					;  this does not cover the possible stack code!!!
 20747                                  	;;mov	cx,22688  ; for MSDOS 6.21 IO.SYS
 20748                                  	; 02/11/2022
 20749                                  	;mov	cx,3D20h  ; (15648) for MSDOS 5.0 IO.SYS (SYSINIT)	
 20750                                  	; 30/12/2022 (BugFix)
 20751                                  	; (SI_End is 39D0h for this -Retro DOS v4.0- IO.SYS)
 20752 00001117 B9[E038]                	mov	cx,SI_end ; (22688) 	; SI_end is the label at the end of sysinit
 20753 0000111A 29F1                    	sub	cx,si			;  from after_checksum to SI_end
 20754 0000111C D1E9                    	shr	cx,1
 20755                                  sum2:
 20756 0000111E 260304                  	add	ax,[es:si]
 20757 00001121 46                      	inc	si
 20758 00001122 46                      	inc	si
 20759 00001123 E2F9                    	loop	sum2
 20760 00001125 1F                      	pop	ds
 20761 00001126 C3                      	retn
 20762                                  
 20763                                  ; 24/10/2022 - Retro DOS 4.0 (Modified MSDOS 5.0 IO.SYS, SYSINIT)
 20764                                  
 20765                                  sysinit_base_ss equ $-sysinit_base  ; = 61 (MSDOS 5.0 IO.SYS, SYSINIT:115Ch)
 20766                                  ;SYSINIT:11BDh:
 20767 00001127 0000                    	dw	0
 20768                                  sysinit_base_sp equ $-sysinit_base  ; = 63 (MSDOS 5.0 IO.SYS, SYSINIT:1161h)
 20769                                  ;SYSINIT:11BFh:
 20770 00001129 0000                    	dw	0
 20771                                  
 20772                                  mem_alloc_err_msgx:
 20773                                  
 20774                                         ;include msbio.cl4		; memory allocation error message
 20775                                  
 20776                                  ;SYSINIT:12F6:  ; MSDOS 6.21 IO.SYS SYSINIT:12F6h
 20777 0000112B 0D0A                    	db	0Dh,0Ah
 20778 0000112D 4D656D6F727920616C-     	db 	'Memory allocation error $'
 20778 00001136 6C6F636174696F6E20-
 20778 0000113F 6572726F722024     
 20779                                  
 20780                                  end_sysinit_base: ; label byte
 20781                                  	; 24/10/2022
 20782                                  	; (SYSINIT:11DCh for MSDOS 5.0 SYSINIT)
 20783                                  
 20784                                  ; ----------------------------------------------------------------------
 20785                                  ; Set_Buffer
 20786                                  ;
 20787                                  ;function: set buffers in the real memory.				  
 20788                                  ;	   lastly set the memhi,memlo for the next available free address.
 20789                                  ;
 20790                                  ;input:    ds:bx -> buffinfo.
 20791                                  ;	   [memhi]:[memlo = 0] = available space for the hash bucket.	  
 20792                                  ;	   singlebuffersize = buffer header size + sector size		  
 20793                                  ;
 20794                                  ;output:   buffers Queue established.	       				   
 20795                                  ;	   [memhi]:[memlo] = address of the next available free space.	   
 20796                                  ; ----------------------------------------------------------------------
 20797                                  
 20798                                  	; 25/10/2022 - Retro DOS 4.0 (Modified MSDOS 5.0 IO.SYS, SYSINIT)
 20799                                  	; (SYSINIT:11DCh)
 20800                                  
 20801                                  set_buffer:
 20802 00001146 30D2                    	xor	dl,dl				; assume buffers not in HMA
 20803 00001148 E85500                  	call	GetBufferAddr
 20804 0000114B 7402                    	jz	short set_buff_1
 20805 0000114D B201                    	mov	dl,1				; buffers in HMA
 20806                                  set_buff_1:
 20807                                  	; 25/10/2022
 20808                                  	;mov	[bx+BUFFINF.Buff_Queue],di	; head of Buff Q
 20809 0000114F 893F                    	mov	[bx],di
 20810                                  	;mov	[bx+BUFFINF.Buff_Queue+2],es
 20811 00001151 8C4702                  	mov	[bx+2],es
 20812                                  	;mov	word [bx+BUFFINF.Dirty_Buff_Count],0 ;set dirty_count to 0.
 20813 00001154 C747040000              	mov	word [bx+4],0
 20814                                  
 20815 00001159 89F8                    	mov	ax,di
 20816 0000115B 2E8B0E[9702]            	mov	cx,[cs:buffers]
 20817 00001160 57                      	push	di				; remember first buffer
 20818                                  
 20819                                  ;	for each buffer
 20820                                  
 20821                                  nxt_buff:
 20822 00001161 E86300                  	call	set_buffer_info 		; set buf_link,buf_id...
 20823 00001164 89C7                    	mov	di,ax
 20824 00001166 E2F9                    	loop	nxt_buff
 20825                                  
 20826 00001168 2E2B3E[9B02]            	sub	di,[cs:singlebuffersize]	; point to last buffer
 20827                                  
 20828 0000116D 59                      	pop	cx				; get first buffer
 20829                                  	;mov	[es:di+buffinfo.buf_next],cx	; last->next = first
 20830 0000116E 26890D                  	mov	[es:di],cx
 20831 00001171 87CF                    	xchg	cx,di
 20832                                  	;mov	[es:di+buffinfo.buf_prev],cx	; first->prev = last
 20833                                  	; 25/10/2022
 20834 00001173 26894D02                	mov	[es:di+2],cx
 20835                                  
 20836 00001177 08D2                    	or	dl,dl				; In HMa ?
 20837 00001179 7417                    	jz	short set_buff_2		; no
 20838                                  	;mov	byte [bx+BUFFINF.Buff_In_HMA],1
 20839 0000117B C6470C01                	mov	byte [bx+12],1
 20840 0000117F 2EA1[E003]              	mov	ax,[cs:memhi]			; seg of scratch buff
 20841                                  	;mov	word [bx+BUFFINF.Lo_Mem_Buff],0	; offset of sctarch buff is 0
 20842 00001183 C7470D0000              	mov	word [bx+13],0
 20843                                  	;mov	[bx+BUFFINF.Lo_Mem_Buff+2],ax
 20844 00001188 89470F                  	mov	word [bx+15],ax
 20845 0000118B 2EA1[9B02]              	mov	ax,[cs:singlebuffersize]	; size of scratch buff
 20846                                  	;sub	ax,bufinsiz ; 20		; buffer head not required
 20847 0000118F 83E814                  	sub	ax,20
 20848                                  set_buff_2:
 20849 00001192 2E0106[DE03]            	add	[cs:memlo],ax
 20850                                  	;or	byte [cs:setdevmarkflag],for_devmark ; 2
 20851 00001197 2E800E[2E14]02          	or	byte [cs:setdevmarkflag],2
 20852                                  	;call	round
 20853                                  	;retn
 20854                                  	; 12/12/2022
 20855 0000119D E9201F                  	jmp	round
 20856                                  
 20857                                  ; ----------------------------------------------------------------------
 20858                                  ; procedure : GetBufferAddr
 20859                                  ;
 20860                                  ;	      Gets the buffer address either in HMA or in Lo Mem
 20861                                  ;
 20862                                  ; returns in es:di the buffer adress
 20863                                  ; returns NZ if allocated in HMA
 20864                                  ; ----------------------------------------------------------------------
 20865                                  
 20866                                  	; 25/10/2022 
 20867                                  GetBufferAddr:
 20868 000011A0 53                      	push	bx
 20869 000011A1 52                      	push	dx
 20870 000011A2 2EA1[9B02]              	mov	ax, [cs:singlebuffersize]
 20871 000011A6 2EF726[9702]            	mul	word [cs:buffers]
 20872                                  	;add	ax,0Fh
 20873 000011AB 83C00F                  	add	ax,15 
 20874                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 20875                                  	;and	ax,~15	; 0FFF0h	; para round
 20876                                  	; 12/12/2022
 20877 000011AE 24F0                    	and	al,~15	; 0F0h
 20878 000011B0 89C3                    	mov	bx,ax
 20879 000011B2 B8024A                  	mov	ax,4A02h
 20880                                  	;mov	ax,((multMULT<<8)+multMULTALLOCHMA)
 20881 000011B5 CD2F                    	int	2Fh
 20882 000011B7 83FFFF                  	cmp	di,0FFFFh
 20883 000011BA 7508                    	jne	short got_hma
 20884 000011BC BF0000                  	mov	di,0			; dont xor di,di Z flag needed
 20885                                  	;zf=1
 20886                                  	;xor	di,di	; 25/10/2022
 20887                                  	;zf=1
 20888 000011BF 2E8E06[E003]            	mov	es,[cs:memhi]
 20889                                  got_hma:
 20890 000011C4 5A                      	pop	dx
 20891 000011C5 5B                      	pop	bx
 20892 000011C6 C3                      	retn
 20893                                  
 20894                                  ; ----------------------------------------------------------------------
 20895                                  
 20896                                  set_buffer_info:
 20897                                  
 20898                                  ;function: set buf_link,buf_id,buf_sector
 20899                                  ;
 20900                                  ;in: es:di -> buffer header to be set.
 20901                                  ;    ax = di
 20902                                  ;
 20903                                  ;out:
 20904                                  ;    above entries set.
 20905                                  
 20906                                  	; 25/10/2022 
 20907 000011C7 2EFF36[3903]            	push	word [cs:buf_prev_off]
 20908                                  	;pop	word [es:di+buffinfo.buf_prev]
 20909 000011CC 268F4502                	pop	word [es:di+2]
 20910 000011D0 2EA3[3903]              	mov	[cs:buf_prev_off],ax
 20911 000011D4 2E0306[9B02]            	add	ax,[cs:singlebuffersize]	;adjust ax
 20912                                  	;mov	[es:di+buffinfo.buf_next],ax
 20913 000011D9 268905                  	mov	[es:di],ax
 20914                                  	;mov	word [es:di+buffinfo.buf_ID],00FFh  ; new buffer free
 20915 000011DC 26C74504FF00            	mov	word [es:di+4],00FFh
 20916                                  	;mov	word [es:di+buffinfo.buf_sector],0   ; to compensate the masm 3 bug
 20917 000011E2 26C745060000            	mov	word [es:di+6],0
 20918                                  	;mov	word [es:di+buffinfo.buf_sector+2],0 ; to compensate the masm 3 bug
 20919 000011E8 26C745080000            	mov	word [es:di+8],0
 20920 000011EE C3                      	retn
 20921                                  
 20922                                  ; ======================================================================
 20923                                  ; MSSTACK initialization routine - MSDOS 6.0 - SYSDINIT1.ASM - 1991
 20924                                  ; ----------------------------------------------------------------------
 20925                                  ; 27/03/2019 - Retro DOS v4.0
 20926                                  
 20927                                  ; ----------------------------------------------------------------------
 20928                                  ; ibmstack initialization routine.
 20929                                  ;
 20930                                  ;	to follow the standard interrupt sharing scheme, msstack.asm
 20931                                  ;	has been modified. this initialization routine also has to
 20932                                  ;	be modified because for the interrupt level 7 and 15, firstflag
 20933                                  ;	should be set to signal that this interrupt handler is the
 20934                                  ;	first handler hooked to this interrupt vector.
 20935                                  ;	we determine this by looking at the instruction pointed by
 20936                                  ;	this vector. if it is iret, then this handler should be the
 20937                                  ;	first one. in our case, only the interrupt vector 77h is the
 20938                                  ;	interrupt level 15. (we don't hook interrupt level 7.)
 20939                                  ;
 20940                                  ;	the followings are mainly due to m.r.t; ptm fix of p886 12/3/86
 20941                                  ;	some design changes are needed to the above interrupt sharing
 20942                                  ;	method. the above sharing scheme assumes that 1). interrupt
 20943                                  ;	sharing is never done on levels that have bios support. 2). "phantom"
 20944                                  ;	interrupts would only be generated on levels 7 and 15.
 20945                                  ;	these assumptions are not true any more. we have to use the firstflag
 20946                                  ;	for every level of interrupt. we will set the firstflag on the following
 20947                                  ;	conditions:
 20948                                  ;
 20949                                  ;	 a.	 if the cs portion of the vector is 0000, then "first"
 20950                                  ;	 b. else if cs:ip points to valid shared header, then not "first"
 20951                                  ;	 c. else if cs:ip points to an iret, then "first"
 20952                                  ;	 d. else if cs:ip points to dummy, then "first"
 20953                                  ;
 20954                                  ;	where dummy is - the cs portion must be f000, and the ip portion must
 20955                                  ;	be equal to the value at f000:ff01. this location is the initial value
 20956                                  ;	from vector_table for interrupt 7, one of the preserved addresses in all
 20957                                  ;	the bioses for all of the machines.
 20958                                  ;
 20959                                  ;	system design group requests bios to handle the phantom interrupts.
 20960                                  ;
 20961                                  ;	the "phantom" interrupt is an illegal interrupt such as an interrupt
 20962                                  ;	produced by the bogus adapter card even without interrupt request is
 20963                                  ;	set.  more specifically, 1). the 8259 has a feature when running in
 20964                                  ;	edge triggered mode to latch a pulse and present the interrupt when
 20965                                  ;	the processor indicates interrupt acknowledge (inta). the interrupt
 20966                                  ;	pulse was exist at the time of inta to get a "phantom" interrupt.
 20967                                  ;	2). or, this is caused by adapter cards placing a glitch on the
 20968                                  ;	interrupt line.
 20969                                  ;
 20970                                  ;	to handle those "phantom" interrupts, the main stack code will check
 20971                                  ;	the own firstflag, and if it is not "first" (which means the forward
 20972                                  ;	pointer points to the legal shared interrupt handler), then pass the
 20973                                  ;	control. if it is the first, then the following action should be
 20974                                  ;	taken. we don't have to implement skack logic in this case.
 20975                                  ;
 20976                                  ;	to implement this logic, we rather choose a simple method.
 20977                                  ;	if ont of the above "firstflag" conditions is met, we are not
 20978                                  ;	going to hook this interrupt vector. the reason is if the original
 20979                                  ;	vector points to "iret" and do nothing, we don't need
 20980                                  ;	to implement the stack logic for it. this will simplify implementation
 20981                                  ;	while maintaining compatibility with the old version of dos.
 20982                                  ;	this implies that in the main stack code, there might be a stack code
 20983                                  ;	that will never be used, a dead code.
 20984                                  ;
 20985                                  ;in - cs, ds -> sysinitseg, es -> relocated stack code & data.
 20986                                  
 20987                                  	; 25/10/2022 - Retro DOS 4.0 (Modified MSDOS 5.0 IO.SYS, SYSINIT)
 20988                                  	; (SYSINIT:1287h)
 20989                                  
 20990                                  	; 14/12/2022
 20991                                  stackinit:
 20992 000011EF 50                      	push	ax
 20993 000011F0 1E                      	push	ds
 20994 000011F1 06                      	push	es
 20995 000011F2 53                      	push	bx
 20996 000011F3 51                      	push	cx
 20997 000011F4 52                      	push	dx
 20998 000011F5 57                      	push	di
 20999 000011F6 56                      	push	si
 21000 000011F7 55                      	push	bp
 21001                                  
 21002                                  ;currently es -> stack code area
 21003                                  
 21004                                  	; 12/12/2022
 21005                                  	; ds = cs
 21006 000011F8 A1[8A02]                	mov	ax,[stack_count]
 21007 000011FB 89C1                    	mov	cx,ax  ; *!*!*  
 21008                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 21009                                  	; (MSDOS 5.0 IO.SYS - SYSINIT:1290h)
 21010                                  	;mov	ax,[cs:stack_count] ; !!	;defined in cs
 21011 000011FD 26A3[0200]              	mov	[es:stackcount],ax		;defined in stack code area
 21012                                  	; (MSDOS 5.0 IO.SYS - SYSINIT:1298h)
 21013 00001201 A1[8C02]                	mov	ax,[stack_size]	 ; !!		;in cs
 21014 00001204 26A3[0600]              	mov	[es:stacksize],ax
 21015                                  	; 12/12/2022
 21016 00001208 A1[8E02]                	mov	ax,[stack_addr]			; offset
 21017                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 21018                                  	; (MSDOS 5.0 IO.SYS - SYSINIT:129Fh)
 21019                                  	;mov	ax,[cs:stack_addr]  ; !!
 21020 0000120B 26A3[0800]              	mov	[es:stacks],ax
 21021                                  	; 12/12/2022
 21022 0000120F 89C5                    	mov	bp,ax ; *!*
 21023 00001211 A1[9002]                	mov	ax,[stack_addr+2]
 21024                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 21025                                  	; (MSDOS 5.0 IO.SYS - SYSINIT:129Fh)
 21026                                  	;mov	ax,[cs:stack_addr+2] ; !!	; segment
 21027 00001214 26A3[0A00]              	mov	[es:stacks+2],ax
 21028                                  
 21029                                  ; initialize the data fields with the parameters
 21030                                  
 21031                                  ; "firstentry" will always be at stacks
 21032                                  
 21033                                  	;mov	bp,[es:stacks]			; get offset of stack
 21034                                  	; 12/12/2022
 21035                                  	; bp = [es:stacks] ; *!*
 21036 00001218 26892E[0C00]            	mov	[es:firstentry],bp
 21037                                  
 21038                                  ; the stacks will always immediately follow the table entries
 21039                                  
 21040 0000121D B80800                  	mov	ax,entrysize ; 8
 21041                                  	;mov	cx,[es:stackcount]
 21042                                  	; 12/12/2022
 21043                                  	; cx = [es:stackcount] ; *!*!*
 21044 00001220 F7E1                    	mul	cx
 21045 00001222 01E8                    	add	ax,bp
 21046 00001224 26A3[0400]              	mov	[es:stackat],ax
 21047 00001228 89C3                    	mov	bx,ax
 21048 0000122A 83EB02                  	sub	bx,2
 21049                                  
 21050                                  ; zero the entire stack area to start with
 21051                                  
 21052 0000122D 268B3E[0400]            	mov	di,[es:stackat]
 21053 00001232 26A1[0600]              	mov	ax,[es:stacksize]
 21054 00001236 F7E1                    	mul	cx
 21055 00001238 89C1                    	mov	cx,ax
 21056 0000123A 31C0                    	xor	ax,ax
 21057 0000123C 06                      	push	es
 21058 0000123D 1F                      	pop	ds				;ds = relocated stack code seg.
 21059                                  
 21060                                  ;now, ds -> stack code area
 21061                                  
 21062 0000123E 8E06[0A00]              	mov	es,[stacks+2]			; get segment of stack area.
 21063 00001242 FC                      	cld
 21064 00001243 F3AA                    	rep	stosb
 21065                                  
 21066 00001245 8B0E[0200]              	mov	cx,[stackcount]
 21067                                  
 21068                                  ; loop for "count" times, building a table entry
 21069                                  ;  cs = sysinitseg, ds = relocated stack code seg, es = segment of stack space
 21070                                  ;  cx = number of entries
 21071                                  ;  es:bp => base of stacks - 2
 21072                                  ;  es:bx => first table entry
 21073                                  
 21074                                  buildloop:
 21075                                  	; 11/12/2022
 21076                                  	;mov	byte [es:bp+allocbyte],free	; mov [es:bp+0],0
 21077                                  	; 25/10/2022
 21078 00001249 26C6460000              	mov	byte [es:bp],free
 21079 0000124E 26884601                	mov	[es:bp+intlevel],al	; ax = 0
 21080                                  	;mov	[es:bp+1],al
 21081 00001252 26894602                	mov	[es:bp+savedsp],ax
 21082                                  	;mov	[es:bp2],ax
 21083 00001256 26894604                	mov	[es:bp+savedss],ax
 21084                                  	;mov	[es:bp+4],ax
 21085 0000125A 031E[0600]              	add	bx,[stacksize]
 21086 0000125E 26895E06                	mov	[es:bp+newsp],bx		; mov [es:bp+6],bx
 21087                                  	;mov	[es:bp+6],bx
 21088 00001262 26892F                  	mov	[es:bx],bp
 21089 00001265 83C508                  	add	bp,entrysize ; 8
 21090                                  
 21091 00001268 E2DF                    	loop	buildloop
 21092                                  
 21093 0000126A 83ED08                  	sub	bp,entrysize ; 8
 21094 0000126D 892E[0E00]              	mov	[lastentry],bp
 21095 00001271 892E[1000]              	mov	[nextentry],bp
 21096                                  
 21097 00001275 1E                      	push	ds
 21098 00001276 B800F0                  	mov	ax,0F000h		;look at the model byte
 21099 00001279 8ED8                    	mov	ds,ax
 21100 0000127B 803EFEFFF9              	cmp	byte [0FFFEh],0F9h ; mdl_convert ;convertible?
 21101 00001280 1F                      	pop	ds
 21102 00001281 7504                    	jne	short skip_disablenmis
 21103                                  
 21104 00001283 B007                    	mov	al,07h			; disable convertible nmis
 21105 00001285 E672                    	out	72h,al
 21106                                  
 21107                                  skip_disablenmis:
 21108 00001287 31C0                    	xor	ax,ax
 21109 00001289 8EC0                    	mov	es,ax			;es - segid of vector table at 0
 21110                                  					;ds - relocated stack code segment
 21111 0000128B FA                      	cli
 21112                                  
 21113                                  	;irp	aa,<02,08,09,70>
 21114                                  	;
 21115                                  	;mov	si,aa&h*4		;pass where vector is to be adjusted
 21116                                  	;mov	di,offset int19old&aa	;we have to set old&aa for int19 handler too.
 21117                                  	;mov	bx,offset old&aa	;pass where to save original owner pointer
 21118                                  	;mov	dx,offset int&aa	;pass where new handler is
 21119                                  	;call	new_init_loop		;adjust the vector to new handler,
 21120                                  	;				;saving pointer to original owner
 21121                                  	;endm
 21122                                  
 21123                                  stkinit_02:
 21124 0000128C BE0800                  	mov	si,02h*4 ; 8
 21125 0000128F BF[4206]                	mov	di,INT19OLD02
 21126 00001292 BB[1200]                	mov	bx,old02
 21127 00001295 BA[1600]                	mov	dx,int02
 21128 00001298 E84901                  	call	new_init_loop
 21129                                  stkinit_08:
 21130 0000129B BE2000                  	mov	si,08h*4 ; 32
 21131 0000129E BF[4706]                	mov	di,INT19OLD08
 21132 000012A1 BB[3800]                	mov	bx,old08
 21133 000012A4 BA[3C00]                	mov	dx,int08
 21134 000012A7 E83A01                  	call	new_init_loop
 21135                                  stkinit_09:
 21136 000012AA BE2400                  	mov	si,09h*4 ; 36
 21137 000012AD BF[4C06]                	mov	di,INT19OLD09
 21138 000012B0 BB[4100]                	mov	bx,old09
 21139 000012B3 BA[4500]                	mov	dx,int09
 21140 000012B6 E82B01                  	call	new_init_loop
 21141                                  stkinit_70:
 21142 000012B9 BEC001                  	mov	si,70h*4 ; 448
 21143 000012BC BF[6A06]                	mov	di,INT19OLD70
 21144 000012BF BB[4E00]                	mov	bx,old70
 21145 000012C2 BA[5200]                	mov	dx,int70
 21146 000012C5 E81C01                  	call	new_init_loop
 21147                                  
 21148                                  	;irp	aa,<0a,0b,0c,0d,0e,72,73,74,76,77> ;shared interrupts
 21149                                  	;
 21150                                  	;mov	si,aa&h*4		;pass where vector is to be adjusted
 21151                                  	;push	ds			;save relocated stack code segment
 21152                                  	;lds	bx, es:[si]		;ds:bx -> original interrupt handler
 21153                                  	;push	ds
 21154                                  	;pop	dx			;dx = segment value
 21155                                  	;	
 21156                                  	;cmp	dx,0
 21157                                  	;jz	int&aa&_first
 21158                                  	;
 21159                                  	;cmp	byte ptr ds:[bx],0cfh	;does vector point to an iret?
 21160                                  	;jz	int&aa&_first
 21161                                  	;
 21162                                  	;cmp	word ptr ds:[bx.6],424bh ;magic offset (see int&aa, msstack.inc)
 21163                                  	;jz	int&aa&_not_first
 21164                                  	;
 21165                                  	;cmp	dx,0f000h		;rom bios segment
 21166                                  	;jnz	int&aa&_not_first
 21167                                  	;
 21168                                  	;push	es
 21169                                  	;push	dx
 21170                                  	;mov	dx,0f000h
 21171                                  	;mov	es,dx
 21172                                  	;cmp	bx,word ptr es:0ff01h
 21173                                         	;pop	dx
 21174                                  	;pop	es
 21175                                  	;jz	int&aa&_first
 21176                                  	;
 21177                                  ;int&aa&_not_first:			;not the first. we are going to hook vector.
 21178                                  	;pop	ds
 21179                                  	;mov	di, offset int19old&aa	;we have to set old&aa for int19 handler too.
 21180                                  	;mov	bx, offset old&aa	;pass where to save original owner pointer
 21181                                  	;mov	dx, offset int&aa	;pass where new handler is
 21182                                  	;call	new_init_loop		;adjust the vector to new handler, saving
 21183                                  	;				;pointer to original owner.
 21184                                  	;jmp	short int&aa&_end
 21185                                  ;int&aa&_first:				;the first. don't have to hook stack code.
 21186                                  	;pop	ds
 21187                                  ;int&aa&_end:
 21188                                  	;
 21189                                  	;endm
 21190                                  
 21191                                  stkinit_0A:
 21192 000012C8 BE2800                  	mov	si,0Ah*4 ; 40
 21193                                  	
 21194                                  ; 14/12/2022
 21195                                  %if 0	
 21196                                  	; 25/10/2022 (MSDOS 5.0 IO.SYS compatibility)
 21197                                  	push	ds
 21198                                  	
 21199                                  	lds	bx,[es:si]
 21200                                  	push	ds
 21201                                  	pop	dx
 21202                                  		
 21203                                  	cmp	dx,0
 21204                                  	je	short int_0A_first
 21205                                  	
 21206                                  	cmp	byte [bx],0CFh
 21207                                  	je	short int_0A_first
 21208                                  	
 21209                                  	cmp	word [bx+6],424Bh
 21210                                  	je	short int_0A_not_first
 21211                                  	
 21212                                  	cmp	dx,0F000h
 21213                                  	jne	short int_0A_not_first
 21214                                  	
 21215                                  	push	es
 21216                                  	push	dx
 21217                                  	mov	dx,0F000h
 21218                                  	mov	es,dx
 21219                                  	cmp	bx,[es:0FF01h]
 21220                                         	pop	dx
 21221                                  	pop	es
 21222                                  	je	short int_0A_first
 21223                                  %Endif
 21224                                  
 21225                                  	; 14/12/2022
 21226                                  	; 25/10/2022
 21227 000012CB E8EB00                  	call	int_xx_first_check ; 27/03/2019 - Retro DOS v4.0
 21228 000012CE 730C                    	jnc	short int_0A_first
 21229                                  	
 21230                                  int_0A_not_first:
 21231                                  	; 14/12/2022
 21232                                  	; 25/10/2022
 21233                                  	;pop	ds
 21234 000012D0 BF[5106]                	mov	di,INT19OLD0A
 21235 000012D3 BB[5900]                	mov	bx,old0A
 21236 000012D6 BA[5700]                	mov	dx,int0A
 21237 000012D9 E80801                  	call	new_init_loop
 21238                                  	
 21239                                  	; 14/12/2022	
 21240                                  	;jmp	short int_0A_end
 21241                                  ;int_0A_first:
 21242                                  	; 25/10/2022
 21243                                  	;pop	ds
 21244                                  
 21245                                  	; 14/12/2022
 21246                                  int_0A_first:
 21247                                  int_0A_end:
 21248                                  
 21249                                  stkinit_0B:
 21250 000012DC BE2C00                  	mov	si,0Bh*4 ; 44
 21251                                  	
 21252                                  	; 14/12/2022
 21253                                  	; 25/10/2022
 21254 000012DF E8D700                  	call	int_xx_first_check ; 27/03/2019 - Retro DOS v4.0
 21255 000012E2 730C                    	jnc	short int_0B_end ; int_0B_first
 21256                                  
 21257                                  ; 14/12/2022
 21258                                  %if 0	
 21259                                  	; 25/10/2022 (MSDOS 5.0 IO.SYS compatibility)
 21260                                  	push	ds
 21261                                  	lds	bx,[es:si]
 21262                                  	push	ds
 21263                                  	pop	dx
 21264                                  		
 21265                                  	cmp	dx,0
 21266                                  	je	short int_0B_first
 21267                                  
 21268                                  	cmp	byte [bx],0CFh
 21269                                  	je	short int_0B_first
 21270                                  	
 21271                                  	cmp	word [bx+6],424Bh
 21272                                  	je	short int_0B_not_first
 21273                                  	
 21274                                  	cmp	dx,0F000h
 21275                                  	jne	short int_0B_not_first
 21276                                  
 21277                                  	push	es
 21278                                  	push	dx
 21279                                  	mov	dx,0F000h
 21280                                  	mov	es,dx
 21281                                  	cmp	bx,[es:0FF01h]
 21282                                  	pop	dx
 21283                                  	pop	es
 21284                                  	je	short int_0B_first
 21285                                  %endif
 21286                                  
 21287                                  int_0B_not_first:
 21288                                  	; 14/12/2022
 21289                                  	; 25/10/2022
 21290                                  	;pop	ds
 21291 000012E4 BF[5606]                	mov	di,INT19OLD0B
 21292 000012E7 BB[7100]                	mov	bx,old0B
 21293 000012EA BA[6F00]                	mov	dx,int0B
 21294 000012ED E8F400                  	call	new_init_loop
 21295                                  
 21296                                  	; 14/12/2022
 21297                                  	;jmp	short int_0B_end
 21298                                  ;int_0B_first:
 21299                                  	; 25/10/2022
 21300                                  	;pop	ds
 21301                                  
 21302                                  int_0B_end:
 21303                                  	
 21304                                  stkinit_0C:
 21305 000012F0 BE3000                  	mov	si,0Ch*4 ; 48
 21306                                  	
 21307                                  	; 14/12/2022
 21308                                  	; 25/10/2022
 21309 000012F3 E8C300                  	call	int_xx_first_check
 21310 000012F6 730C                    	jnc	short int_0C_end ; int_0C_first
 21311                                  
 21312                                  ; 14/12/2022
 21313                                  %if 0	
 21314                                  	; 25/10/2022 (MSDOS 5.0 IO.SYS compatibility)
 21315                                  	push	ds
 21316                                  	lds	bx,[es:si]
 21317                                  	push	ds
 21318                                  	pop	dx
 21319                                  		
 21320                                  	cmp	dx,0
 21321                                  	je	short int_0C_first
 21322                                  
 21323                                  	cmp	byte [bx],0CFh
 21324                                  	je	short int_0C_first
 21325                                  	
 21326                                  	cmp	word [bx+6],424Bh
 21327                                  	je	short int_0C_not_first
 21328                                  	
 21329                                  	cmp	dx,0F000h
 21330                                  	jne	short int_0C_not_first
 21331                                  
 21332                                  	push	es
 21333                                  	push	dx
 21334                                  	mov	dx,0F000h
 21335                                  	mov	es,dx
 21336                                  	cmp	bx,[es:0FF01h]
 21337                                  	pop	dx
 21338                                  	pop	es
 21339                                  	je	short int_0C_first
 21340                                  %endif
 21341                                  	
 21342                                  int_0C_not_first:
 21343                                  	; 14/12/2022
 21344                                  	; 25/10/2022
 21345                                  	;pop	ds
 21346 000012F8 BF[5B06]                	mov	di,INT19OLD0C
 21347 000012FB BB[8900]                	mov	bx,old0C
 21348 000012FE BA[8700]                	mov	dx,int0C
 21349 00001301 E8E000                  	call	new_init_loop
 21350                                  
 21351                                  	; 14/12/2022
 21352                                  	;jmp	short int_0C_end
 21353                                  ;int_0C_first:
 21354                                  	; 25/10/2022
 21355                                  	;pop	ds
 21356                                  
 21357                                  int_0C_end:
 21358                                  
 21359                                  stkinit_0D:
 21360 00001304 BE3400                  	mov	si,0Dh*4 ; 52
 21361                                  
 21362                                  	; 14/12/2022	
 21363                                  	; 25/10/2022
 21364 00001307 E8AF00                  	call	int_xx_first_check
 21365 0000130A 730C                    	jnc	short int_0D_end ; int_0D_first
 21366                                  
 21367                                  ; 14/12/2022
 21368                                  %if 0	
 21369                                  	; 25/10/2022 (MSDOS 5.0 IO.SYS compatibility)
 21370                                  	push	ds
 21371                                  	lds	bx,[es:si]
 21372                                  	push	ds
 21373                                  	pop	dx
 21374                                  		
 21375                                  	cmp	dx,0
 21376                                  	je	short int_0D_first
 21377                                  
 21378                                  	cmp	byte [bx],0CFh
 21379                                  	je	short int_0D_first
 21380                                  	
 21381                                  	cmp	word [bx+6],424Bh
 21382                                  	je	short int_0D_not_first
 21383                                  	
 21384                                  	cmp	dx,0F000h
 21385                                  	jne	short int_0D_not_first
 21386                                  
 21387                                  	push	es
 21388                                  	push	dx
 21389                                  	mov	dx,0F000h
 21390                                  	mov	es,dx
 21391                                  	cmp	bx,[es:0FF01h]
 21392                                  	pop	dx
 21393                                  	pop	es
 21394                                  	je	short int_0D_first
 21395                                  %endif
 21396                                  	
 21397                                  int_0D_not_first:
 21398                                  	; 14/12/2022
 21399                                  	; 25/10/2022
 21400                                  	;pop	ds
 21401 0000130C BF[6006]                	mov	di,INT19OLD0D
 21402 0000130F BB[A100]                	mov	bx,old0D
 21403 00001312 BA[9F00]                	mov	dx,int0D
 21404 00001315 E8CC00                  	call	new_init_loop
 21405                                  
 21406                                  	; 14/12/2022
 21407                                  	;jmp	short int_0D_end
 21408                                  	; 02/11/2022
 21409                                  ;int_0D_first:
 21410                                  	;pop	ds
 21411                                  
 21412                                  int_0D_end:
 21413                                  
 21414                                  stkinit_0E:
 21415 00001318 BE3800                  	mov	si,0Eh*4 ; 56
 21416                                  
 21417                                  	; 14/12/2022	
 21418                                  	; 25/10/2022
 21419 0000131B E89B00                  	call	int_xx_first_check
 21420 0000131E 730C                    	jnc	short int_0E_end ; int_0E_first
 21421                                  
 21422                                  ; 14/12/2022
 21423                                  %if 0	
 21424                                  	; 25/10/2022 (MSDOS 5.0 IO.SYS compatibility)
 21425                                  	push	ds
 21426                                  	lds	bx,[es:si]
 21427                                  	push	ds
 21428                                  	pop	dx
 21429                                  		
 21430                                  	cmp	dx,0
 21431                                  	je	short int_0E_first
 21432                                  
 21433                                  	cmp	byte [bx],0CFh
 21434                                  	je	short int_0E_first
 21435                                  	
 21436                                  	cmp	word [bx+6],424Bh
 21437                                  	je	short int_0E_not_first
 21438                                  	
 21439                                  	cmp	dx,0F000h
 21440                                  	jne	short int_0E_not_first
 21441                                  
 21442                                  	push	es
 21443                                  	push	dx
 21444                                  	mov	dx,0F000h
 21445                                  	mov	es,dx
 21446                                  	cmp	bx,[es:0FF01h]
 21447                                  	pop	dx
 21448                                  	pop	es
 21449                                  	je	short int_0E_first
 21450                                  %endif
 21451                                  	
 21452                                  int_0E_not_first:
 21453                                  	; 14/12/2022
 21454                                  	; 25/10/2022
 21455                                  	;pop	ds
 21456 00001320 BF[6506]                	mov	di,INT19OLD0E
 21457 00001323 BB[B900]                	mov	bx,old0E
 21458 00001326 BA[B700]                	mov	dx,int0E
 21459 00001329 E8B800                  	call	new_init_loop
 21460                                  
 21461                                  	; 14/12/2022
 21462                                  	;jmp	short int_0E_end
 21463                                  ;int_0E_first:
 21464                                  	; 25/10/2022
 21465                                  	;pop	ds	
 21466                                  
 21467                                  int_0E_end:
 21468                                  
 21469                                  stkinit_72:
 21470 0000132C BEC801                  	mov	si,72h*4 ; 456
 21471                                  	
 21472                                  	; 14/12/2022
 21473                                  	; 25/10/2022
 21474 0000132F E88700                  	call	int_xx_first_check
 21475 00001332 730C                    	jnc	short int_72_end ; int_72_first
 21476                                  
 21477                                  ; 14/12/2022
 21478                                  %if 0	
 21479                                  	; 25/10/2022 (MSDOS 5.0 IO.SYS compatibility)
 21480                                  	push	ds
 21481                                  	lds	bx,[es:si]
 21482                                  	push	ds
 21483                                  	pop	dx
 21484                                  		
 21485                                  	cmp	dx,0
 21486                                  	je	short int_72_first
 21487                                  
 21488                                  	cmp	byte [bx],0CFh
 21489                                  	je	short int_72_first
 21490                                  	
 21491                                  	cmp	word [bx+6],424Bh
 21492                                  	je	short int_72_not_first
 21493                                  	
 21494                                  	cmp	dx,0F000h
 21495                                  	jne	short int_72_not_first
 21496                                  
 21497                                  	push	es
 21498                                  	push	dx
 21499                                  	mov	dx,0F000h
 21500                                  	mov	es,dx
 21501                                  	cmp	bx,[es:0FF01h]
 21502                                  	pop	dx
 21503                                  	pop	es
 21504                                  	je	short int_72_first
 21505                                  %endif
 21506                                  	
 21507                                  int_72_not_first:
 21508                                  	; 14/12/2022
 21509                                  	; 25/10/2022
 21510                                  	;pop	ds
 21511 00001334 BF[6F06]                	mov	di,INT19OLD72
 21512 00001337 BB[D100]                	mov	bx,old72
 21513 0000133A BA[CF00]                	mov	dx,int72
 21514 0000133D E8A400                  	call	new_init_loop
 21515                                  
 21516                                  	; 14/12/2022
 21517                                  	;jmp	short int_72_end
 21518                                  ;int_72_first:
 21519                                  	; 25/10/2022
 21520                                  	;pop	ds
 21521                                  
 21522                                  int_72_end:
 21523                                  
 21524                                  stkinit_73:
 21525 00001340 BECC01                  	mov	si,73h*4 ; 460
 21526                                  	
 21527                                  	; 14/12/2022
 21528                                  	; 25/10/2022
 21529 00001343 E87300                  	call	int_xx_first_check
 21530 00001346 730C                    	jnc	short int_73_end ; int_73_first
 21531                                  
 21532                                  ; 14/12/2022
 21533                                  %if 0	
 21534                                  	; 25/10/2022 (MSDOS 5.0 IO.SYS compatibility)
 21535                                  	push	ds
 21536                                  	lds	bx,[es:si]
 21537                                  	push	ds
 21538                                  	pop	dx
 21539                                  		
 21540                                  	cmp	dx,0
 21541                                  	je	short int_73_first
 21542                                  
 21543                                  	cmp	byte [bx],0CFh
 21544                                  	je	short int_73_first
 21545                                  	
 21546                                  	cmp	word [bx+6],424Bh
 21547                                  	je	short int_73_not_first
 21548                                  	
 21549                                  	cmp	dx,0F000h
 21550                                  	jne	short int_73_not_first
 21551                                  
 21552                                  	push	es
 21553                                  	push	dx
 21554                                  	mov	dx,0F000h
 21555                                  	mov	es,dx
 21556                                  	cmp	bx,[es:0FF01h]
 21557                                  	pop	dx
 21558                                  	pop	es
 21559                                  	je	short int_73_first
 21560                                  %endif	
 21561                                  	
 21562                                  int_73_not_first:
 21563                                  	; 14/12/2022
 21564                                  	; 25/10/2022
 21565                                  	;pop	ds
 21566 00001348 BF[7406]                	mov	di,INT19OLD73
 21567 0000134B BB[E900]                	mov	bx,old73
 21568 0000134E BA[E700]                	mov	dx,int73
 21569 00001351 E89000                  	call	new_init_loop
 21570                                  
 21571                                  	; 14/12/2022
 21572                                  	;jmp	short int_73_end
 21573                                  ;int_73_first:
 21574                                  	; 25/10/2022
 21575                                  	;pop	ds
 21576                                  
 21577                                  int_73_end:
 21578                                  
 21579                                  stkinit_74:
 21580 00001354 BED001                  	mov	si,74h*4 ; 464
 21581                                  	
 21582                                  	; 14/12/2022
 21583                                  	; 25/10/2022
 21584 00001357 E85F00                  	call	int_xx_first_check
 21585 0000135A 730C                    	jnc	short int_74_end ; int_74_first
 21586                                  
 21587                                  ; 14/12/2022
 21588                                  %if 0		
 21589                                  	; 25/10/2022 (MSDOS 5.0 IO.SYS compatibility)
 21590                                  	push	ds
 21591                                  	lds	bx,[es:si]
 21592                                  	push	ds
 21593                                  	pop	dx
 21594                                  		
 21595                                  	cmp	dx,0
 21596                                  	je	short int_74_first
 21597                                  
 21598                                  	cmp	byte [bx],0CFh
 21599                                  	je	short int_74_first
 21600                                  	
 21601                                  	cmp	word [bx+6],424Bh
 21602                                  	je	short int_74_not_first
 21603                                  	
 21604                                  	cmp	dx,0F000h
 21605                                  	jne	short int_74_not_first
 21606                                  
 21607                                  	push	es
 21608                                  	push	dx
 21609                                  	mov	dx,0F000h
 21610                                  	mov	es,dx
 21611                                  	cmp	bx,[es:0FF01h]
 21612                                  	pop	dx
 21613                                  	pop	es
 21614                                  	je	short int_74_first
 21615                                  %endif
 21616                                  
 21617                                  int_74_not_first:
 21618                                  	; 14/12/2022
 21619                                  	; 25/10/2022
 21620                                  	;pop	ds
 21621 0000135C BF[7906]                	mov	di,INT19OLD74
 21622 0000135F BB[0101]                	mov	bx,old74
 21623 00001362 BA[FF00]                	mov	dx,int74
 21624 00001365 E87C00                  	call	new_init_loop
 21625                                  	
 21626                                  	; 14/12/2022
 21627                                  	;jmp	short int_74_end
 21628                                  ;int_74_first:
 21629                                  	; 25/10/2022
 21630                                  	;pop	ds
 21631                                  
 21632                                  int_74_end:
 21633                                  
 21634                                  stkinit_76:
 21635 00001368 BED801                  	mov	si,76h*4 ; 472
 21636                                  	
 21637                                  	; 14/12/2022
 21638                                  	; 25/10/2022
 21639 0000136B E84B00                  	call	int_xx_first_check
 21640 0000136E 730E                    	jnc	short int_76_end ; int_76_first
 21641                                  
 21642                                  ; 14/12/2022
 21643                                  %if 0	
 21644                                  	; 25/10/2022 (MSDOS 5.0 IO.SYS compatibility)
 21645                                  	push	ds
 21646                                  	lds	bx,[es:si]
 21647                                  	push	ds
 21648                                  	pop	dx
 21649                                  		
 21650                                  	cmp	dx,0
 21651                                  	je	short int_76_first
 21652                                  
 21653                                  	cmp	byte [bx],0CFh
 21654                                  	je	short int_76_first
 21655                                  	
 21656                                  	cmp	word [bx+6],424Bh
 21657                                  	je	short int_76_not_first
 21658                                  	
 21659                                  	cmp	dx,0F000h
 21660                                  	jne	short int_76_not_first
 21661                                  
 21662                                  	push	es
 21663                                  	push	dx
 21664                                  	mov	dx,0F000h
 21665                                  	mov	es,dx
 21666                                  	cmp	bx,[es:0FF01h]
 21667                                  	pop	dx
 21668                                  	pop	es
 21669                                  	je	short int_76_first
 21670                                  %endif
 21671                                  	
 21672                                  int_76_not_first:
 21673                                  	; 14/12/2022
 21674                                  	; 25/10/2022
 21675                                  	;pop	ds
 21676 00001370 BF[7E06]                	mov	di,INT19OLD76
 21677 00001373 BB[1901]                	mov	bx,old76
 21678 00001376 BA[1701]                	mov	dx,int76
 21679 00001379 E86800                  	call	new_init_loop
 21680                                  
 21681                                  	; 14/12/2022
 21682 0000137C EB00                    	jmp	short int_76_end
 21683                                  ;int_76_first:
 21684                                  	; 25/10/2022
 21685                                  	;pop	ds
 21686                                  
 21687                                  int_76_end:
 21688                                  
 21689                                  stkinit_77:
 21690 0000137E BEDC01                  	mov	si,77h*4 ; 476
 21691                                  	
 21692                                  	; 14/12/2022
 21693                                  	; 25/10/2022
 21694 00001381 E83500                  	call	int_xx_first_check
 21695 00001384 730C                    	jnc	short int_77_end ; int_77_first
 21696                                  
 21697                                  ; 14/12/2022
 21698                                  %if 0	
 21699                                  	; 25/10/2022 (MSDOS 5.0 IO.SYS compatibility)
 21700                                  	push	ds
 21701                                  	lds	bx,[es:si]
 21702                                  	push	ds
 21703                                  	pop	dx
 21704                                  		
 21705                                  	cmp	dx,0
 21706                                  	je	short int_77_first
 21707                                  
 21708                                  	cmp	byte [bx],0CFh
 21709                                  	je	short int_77_first
 21710                                  	
 21711                                  	cmp	word [bx+6],424Bh
 21712                                  	je	short int_77_not_first
 21713                                  	
 21714                                  	cmp	dx,0F000h
 21715                                  	jne	short int_77_not_first
 21716                                  
 21717                                  	push	es
 21718                                  	push	dx
 21719                                  	mov	dx,0F000h
 21720                                  	mov	es,dx
 21721                                  	cmp	bx,[es:0FF01h]
 21722                                  	pop	dx
 21723                                  	pop	es
 21724                                  	je	short int_77_first
 21725                                  %endif
 21726                                  	
 21727                                  int_77_not_first:
 21728                                  	; 14/12/2022
 21729                                  	; 25/10/2022
 21730                                  	;pop	ds
 21731 00001386 BF[8306]                	mov	di,INT19OLD77
 21732 00001389 BB[3101]                	mov	bx,old77
 21733 0000138C BA[2F01]                	mov	dx,int77
 21734 0000138F E85200                  	call	new_init_loop
 21735                                  
 21736                                  	; 14/12/2022
 21737                                  	;jmp	short int_77_end
 21738                                  ;int_77_first:
 21739                                  	; 25/10/2022
 21740                                  	;pop	ds
 21741                                  
 21742                                  int_77_end:
 21743 00001392 1E                      	push	ds
 21744 00001393 B800F0                  	mov	ax,0F000h		; look at the model byte
 21745 00001396 8ED8                    	mov	ds,ax
 21746 00001398 803EFEFFF9              	cmp	byte [0FFFEh],0F9h ; mdl_convert ; pc convertible?
 21747 0000139D 1F                      	pop	ds
 21748 0000139E 7504                    	jne	short skip_enablenmis
 21749                                  
 21750 000013A0 B027                    	mov	al,27h			; enable convertible nmis
 21751 000013A2 E672                    	out	72h,al
 21752                                  
 21753                                  ; 25/10/2022
 21754                                  ; (MSDOS 5.0 SYSINIT:15FBh)
 21755                                  
 21756                                  skip_enablenmis:
 21757 000013A4 FB                      	sti
 21758                                  	;;mov	ax,Bios_Data ; 70h
 21759                                  	;mov	ax,KERNEL_SEGMENT ; 70h
 21760                                  	; 21/10/2022
 21761 000013A5 B87000                  	mov	ax,DOSBIODATASEG ; 0070h
 21762 000013A8 8ED8                    	mov	ds,ax
 21763                                  
 21764                                  	;mov	[640h],1 ; SYSINIT:1736h for MSDOS 6.21 IO.SYS
 21765                                  
 21766 000013AA C606[4006]01            	mov	byte [INT19SEM],1	; indicate that int 19
 21767                                  					; initialization is complete
 21768                                  
 21769 000013AF 5D                      	pop	bp			; restore all
 21770 000013B0 5E                      	pop	si
 21771 000013B1 5F                      	pop	di
 21772 000013B2 5A                      	pop	dx
 21773 000013B3 59                      	pop	cx
 21774 000013B4 5B                      	pop	bx
 21775 000013B5 07                      	pop	es
 21776 000013B6 1F                      	pop	ds
 21777 000013B7 58                      	pop	ax
 21778 000013B8 C3                      	retn
 21779                                  
 21780                                  ; 14/12/2022
 21781                                  ; ----------------------------------------------------------------------
 21782                                  
 21783                                  	; 14/12/2022
 21784                                  	; 25/10/2022
 21785                                  ;%if 0
 21786                                  	; 27/03/2019 - Retro DOS v4.0
 21787                                  int_xx_first_check:
 21788 000013B9 1E                      	push	ds
 21789 000013BA 26C51C                  	lds	bx,[es:si]
 21790 000013BD 1E                      	push	ds
 21791 000013BE 5A                      	pop	dx
 21792                                  		
 21793 000013BF 83FA00                  	cmp	dx,0
 21794 000013C2 741E                    	je	short int_xx_first
 21795                                  	
 21796 000013C4 803FCF                  	cmp	byte [bx],0CFh
 21797 000013C7 7419                    	je	short int_xx_first
 21798                                  	
 21799 000013C9 817F064B42              	cmp	word [bx+6],424Bh
 21800 000013CE 7411                    	je	short int_xx_not_first
 21801                                  	
 21802 000013D0 81FA00F0                	cmp	dx,0F000h
 21803 000013D4 750B                    	jne	short int_xx_not_first
 21804                                  
 21805 000013D6 06                      	push	es
 21806                                  	;push	dx
 21807                                  	;mov	dx,0F000h
 21808 000013D7 8EC2                    	mov	es,dx
 21809 000013D9 263B1E01FF              	cmp	bx,[es:0FF01h]
 21810                                        	;pop	dx
 21811 000013DE 07                      	pop	es
 21812 000013DF 7401                    	je	short int_xx_first
 21813                                  
 21814                                  int_xx_not_first:
 21815 000013E1 F9                      	stc
 21816                                  int_xx_first:
 21817 000013E2 1F                      	pop	ds
 21818 000013E3 C3                      	retn
 21819                                  
 21820                                  ;%endif
 21821                                  
 21822                                  ; ----------------------------------------------------------------------
 21823                                  ; 27/03/2019 - Retro DOS v4.0
 21824                                  
 21825                                  ; 25/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS, SYSINIT)
 21826                                  ; (SYSINIT:1610h)
 21827                                  
 21828                                  new_init_loop:
 21829                                  
 21830                                  ;input: si=ofset into vector table of the particular int vector being adjusted
 21831                                  ;	bx=ds:offset of oldxx, where will be saved the pointer to original owner
 21832                                  ;	dx=ds:offset of intxx, the new interrupt handler
 21833                                  ;	di=offset value of int19old&aa variable in bios.
 21834                                  ;	es=zero, segid of vector table
 21835                                  ;	ds=relocated stack code segment
 21836                                  
 21837 000013E4 268B04                  	mov	ax,[es:si]		;remember offset in vector
 21838 000013E7 8907                    	mov	[bx],ax			; to original owner in ds
 21839 000013E9 268B4402                	mov	ax,[es:si+2]		;remember segid in vector
 21840 000013ED 894702                  	mov	[bx+2],ax		; to original owner in ds
 21841                                  
 21842 000013F0 1E                      	push	ds
 21843                                  	;;mov	ax,Bios_Data ; 70h
 21844                                  	;mov	ax,KERNEL_SEGMENT ; 70h
 21845                                  	; 21/10/2022
 21846 000013F1 B87000                  	mov	ax,DOSBIODATASEG ; 0070h
 21847 000013F4 8ED8                    	mov	ds,ax			;set int19oldxx value in bios for
 21848 000013F6 268B04                  	mov	ax,[es:si]		;int 19 handler
 21849 000013F9 8905                    	mov	[di],ax
 21850 000013FB 268B4402                	mov	ax,[es:si+2]
 21851 000013FF 894502                  	mov	word [di+2],ax
 21852 00001402 1F                      	pop	ds
 21853                                  
 21854 00001403 268914                  	mov	[es:si],dx  	;set vector to point to new int handler
 21855 00001406 268C5C02                	mov	[es:si+2],ds
 21856 0000140A C3                      	retn
 21857                                  
 21858                                  ; End of STACK initialization routine
 21859                                  ; ----------------------------------------------------------------------
 21860                                  
 21861                                  ; ----------------------------------------------------------------------
 21862                                  ;set the devmark for mem command.
 21863                                  ;in: [memhi] - the address to place devmark
 21864                                  ;    [memlo] = 0
 21865                                  ;    al = id for devmark_id
 21866                                  ;out: devmark established.
 21867                                  ;     the address saved in cs:[devmark_addr]
 21868                                  ;     [memhi] increase by 1.
 21869                                  ; ----------------------------------------------------------------------
 21870                                  
 21871                                  ; 25/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS, SYSINIT)
 21872                                  ; (SYSINIT:1637h)
 21873                                  
 21874                                  setdevmark:
 21875                                  
 21876 0000140B 06                      	push	es
 21877 0000140C 51                      	push	cx
 21878                                  
 21879 0000140D 2E8B0E[E003]            	mov	cx,[cs:memhi]
 21880 00001412 2E890E[2C14]            	mov	[cs:devmark_addr],cx
 21881 00001417 8EC1                    	mov	es,cx
 21882                                  	; 25/10/2022
 21883                                  	;mov	[es:devmark.id],al
 21884 00001419 26A20000                	mov	[es:0],al
 21885 0000141D 41                      	inc	cx
 21886                                  	;mov	[es:devmark.seg],cx
 21887 0000141E 26890E0100              	mov	[es:1],cx
 21888                                  
 21889 00001423 59                      	pop	cx
 21890 00001424 07                      	pop	es
 21891 00001425 2EFF06[E003]            	inc	word [cs:memhi]
 21892 0000142A C3                      	retn
 21893                                  
 21894                                  ; ----------------------------------------------------------------------
 21895                                  ; SYSCONF.ASM - MSDOS 6.0 - 1991
 21896                                  ; ----------------------------------------------------------------------
 21897                                  ; 27/03/2019 - Retro DOS v4.0
 21898                                  
 21899                                  ;MULTI_CONFIG	equ 1
 21900                                  
 21901                                  HIGH_FIRST 	equ 080h		; from ARENA.INC - modifier for
 21902                                                                          ; allocation strategy call
 21903                                  
 21904                                  ;have_install_cmd equ 00000001b 	; config.sys has install= commands
 21905                                  ;has_installed	  equ 00000010b 	; sysinit_base installed.
 21906                                  
 21907                                  default_filenum equ 8
 21908                                  
 21909                                  ;stacksw	equ true		; include switchable hardware stacks
 21910                                  
 21911                                  ; external variable defined in ibmbio module for multi-track
 21912                                  
 21913                                  ;multrk_on	equ 10000000b		;user spcified mutitrack=on,or system turns
 21914                                  					; it on after handling config.sys file as a
 21915                                  					; default value,if multrk_flag = multrk_off1.
 21916                                  ;multrk_off1	equ 00000000b		;initial value. no "multitrack=" command entered.
 21917                                  ;multrk_off2	equ 00000001b		;user specified multitrack=off.
 21918                                  
 21919                                  ; if stacksw
 21920                                  
 21921                                  ; internal stack parameters
 21922                                  
 21923                                  ;entrysize	equ 8
 21924                                  
 21925                                  ;mincount	equ 8
 21926                                  ;defaultcount	equ 9
 21927                                  ;maxcount	equ 64
 21928                                  
 21929                                  ;minsize 	equ 32
 21930                                  ;defaultsize	equ 128
 21931                                  ;maxsize 	equ 512
 21932                                  
 21933                                  DOS_FLAG_OFFSET	equ 86h
 21934                                  
 21935                                  ;ifdef MULTI_CONFIG
 21936                                  ;
 21937                                  ;   config_envlen must immediately precede config_wrkseg, because they
 21938                                  ;   may be loaded as a dword ptr
 21939                                  
 21940                                  ; 25/10/2022
 21941                                  ;config_envlen:	dw  0  			; when config_wrkseg is being used as
 21942                                  ;               			;  a scratch env, this is its length
 21943                                  ;config_wrkseg:	dw  0			; config work area (above confbot)
 21944                                  ;                   			;  segment of work area
 21945                                  ;
 21946                                  ;config_cmd:	db  0  			; current config cmd
 21947                                  ;                 			;  (with CONFIG_OPTION_QUERY bit intact)
 21948                                  ;config_multi:	db  0                   ; non-zero if multi-config config.sys
 21949                                  
 21950                                  ;endif ; MULTI_CONFIG
 21951                                  
 21952 0000142B 00                      multdeviceflag:	db  0
 21953                                  
 21954 0000142C 0000                    devmark_addr:	dw  0			;segment address for devmark.
 21955                                  
 21956 0000142E 00                      setdevmarkflag: db  0			;flag used for devmark
 21957                                  
 21958                                  ; 12/12/2022
 21959                                  ;driver_units:	db  0			;total unitcount for driver
 21960                                  
 21961                                  ; 12/12/2022
 21962                                  ;ems_stub_installed:
 21963                                  ;		db  0
 21964                                  
 21965                                  ; 12/12/2022	
 21966                                  ;align 2
 21967                                  
 21968                                  badparm_ptr:	; label	dword
 21969 0000142F 0000                    badparm_off:	dw  0
 21970 00001431 0000                    badparm_seg:	dw  0
 21971                                  
 21972                                  ;******************************************************************************
 21973                                  ;take care of config.sys file.
 21974                                  ;system parser data and code.
 21975                                  ;******************************************************************************
 21976                                  
 21977                                  ;*******************************************************************
 21978                                  ; parser options set for msbio sysconf module
 21979                                  ;*******************************************************************
 21980                                  ;
 21981                                  ;**** default assemble swiches definition **************************
 21982                                  
 21983                                  ;farsw	equ 0		; near call expected
 21984                                  ;datesw	equ 0		; check date format
 21985                                  ;timesw	equ 0		; check time format
 21986                                  ;filesw	equ 1		; check file specification
 21987                                  ;capsw	equ 0		; perform caps if specified
 21988                                  ;cmpxsw	equ 0		; check complex list
 21989                                  ;numsw	equ 1		; check numeric value
 21990                                  ;keysw	equ 0		; support keywords
 21991                                  ;swsw	equ 1		; support switches
 21992                                  ;val1sw	equ 1		; support value definition 1
 21993                                  ;val2sw	equ 0		; support value definition 2
 21994                                  ;val3sw	equ 1		; support value definition 3
 21995                                  ;drvsw	equ 1		; support drive only format
 21996                                  ;qussw	equ 0		; support quoted string format
 21997                                  
 21998                                  ; psdata_seg equ cs
 21999                                  
 22000                                  	;.xlist
 22001                                  	;include parse.asm		;together with psdata.inc
 22002                                  	;.list
 22003                                  
 22004                                  ; PSDATA.INC - MSDOS 6.0 - 1991
 22005                                  ; ======================================================================
 22006                                  ; 27/03/2019 - Retro DOS v4.0
 22007                                  
 22008                                  ; 30/03/2019
 22009                                  ; VERSION.INC (MSDOS 6.0) 
 22010                                  ; Set DBCS Blank constant
 22011                                  
 22012                                  ; ifndef DBCS
 22013                                  DB_SPACE EQU 2020h
 22014                                  DB_SP_HI EQU 20h
 22015                                  DB_SP_LO EQU 20h
 22016                                  ; else
 22017                                  
 22018                                  ;*******************************************************************
 22019                                  ; Parser include file
 22020                                  ;*******************************************************************
 22021                                  
 22022                                  ;**** Equation field
 22023                                  ;-------- Character code definition
 22024                                  
 22025                                  _$P_DBSP1	   equ	DB_SP_HI	;AN000; 1st byte of DBCS blank
 22026                                  _$P_DBSP2	   equ	DB_SP_LO	;AN000; 2nd byte of DBCS blank
 22027                                  _$P_Period	   equ	"."             ;AN020;
 22028                                  _$P_Slash	   equ	"/"             ;AN020;
 22029                                  _$P_Space	   equ	" "             ;AN000; SBCS blank
 22030                                  _$P_Comma	   equ	","             ;AN000;
 22031                                  _$P_Switch	   equ	"/"             ;AN000;
 22032                                  _$P_Keyword	   equ	"="             ;AN000;
 22033                                  _$P_Colon	   equ	":"             ;AN000;
 22034                                  _$P_Plus 	   equ	"+"             ;AN000;
 22035                                  _$P_Minus	   equ	"-"             ;AN000;
 22036                                  _$P_Rparen	   equ	")"             ;AN000;
 22037                                  _$P_Lparen	   equ	"("             ;AN000;
 22038                                  ;_$P_SQuote        equ  "'"			;AN025; deleted
 22039                                  _$P_DQuote	   equ	'"'             ;AN000;
 22040                                  _$P_NULL 	   equ	0		;AN000;
 22041                                  _$P_TAB		   equ	9		;AN000;
 22042                                  _$P_CR		   equ	0Dh		;AN000;
 22043                                  _$P_LF		   equ	0Ah		;AN000;
 22044                                  _$P_ASCII80	   equ	80h		;AN000; ASCII 80h character code
 22045                                  
 22046                                  ;-------- Masks
 22047                                  _$P_Make_Lower	   equ	20h		;AN000; make lower case character
 22048                                  _$P_Make_Upper	   equ	0FFh-_$P_Make_Lower ;AN000; make upper case character
 22049                                  
 22050                                  ;-------- DOS function call related equs
 22051                                  
 22052                                  _$P_DOS_Get_CDI	   equ	3800h		;AN000; get country dependent information
 22053                                  					; by this call, following information
 22054                                  struc _$P_CDI	
 22055 00000000 ????                     .DateF: resw 1
 22056 00000002 ??????????               .Money: resb 5
 22057 00000007 ????                     .1000:	 resb 2
 22058 00000009 ????                     .Dec:	 resb 2
 22059 0000000B ????                     .DateS: resb 2
 22060 0000000D ????                     .TimeS: resb 2
 22061 0000000F ??                          	 resb 1
 22062 00000010 ??                      	 resb 1
 22063 00000011 ??                       .TimeF: resb 1	 
 22064 00000012 ????????                	 resw 2
 22065 00000016 ????                    	 resb 2
 22066 00000018 <res Ah>                	 resw 5
 22067                                   .size:
 22068                                  endstruc
 22069                                  
 22070                                  _$P_Date_MDY	   equ	0		;AN000;
 22071                                  _$P_Date_DMY	   equ	1		;AN000;
 22072                                  _$P_Date_YMD	   equ	2		;AN000;
 22073                                  ;-------------
 22074                                  _$P_DOS_GetEV	   equ	6300h		;AN000; get DBCS EV call
 22075                                  					;AN000; DS:SI will points to DBCS EV
 22076                                  ;-------------
 22077                                  _$P_DOS_Get_TBL	   equ	65h		;AN000; get uppercase table call
 22078                                  					;AN000; following parameters are set
 22079                                  					;AN000; to get casemap table.
 22080                                  _$P_DOSTBL_Def	   equ	-1		;AN000; get default
 22081                                  _$P_DOSTBL_BL	   equ	5		;AN000; buffer length for Tbl pointer
 22082                                  _$P_DOSTBL_File	   equ	4		;AN000; get file uppercase table
 22083                                  _$P_DOSTBL_Char	   equ	2		;AN000; get character uppercase table
 22084                                  					; By this call following information
 22085                                  					; is returned.
 22086                                  struc _$P_DOS_TBL
 22087 00000000 ??                       .InfoID: resb 1			;AN000; information id for the table
 22088 00000001 ????                     .Off:	 resw 1				;AN000; offset address of the table
 22089 00000003 ????                     .Seg:	 resw 1				;AN000; segment address of the table
 22090                                  endstruc
 22091                                  
 22092                                  ; ----------------------------------------------------------------------------
 22093                                  ; PARMS 	LABEL	BYTE
 22094                                  ;		DW	PARMSX
 22095                                  ;		DB	2		; NUMBER OF STRINGS (0, 1, 2)
 22096                                  ;		DB	length		; LENGTH OF THE NEXT LIST, 0 IF NONE
 22097                                  ;		DB	" .. "          ; EXTRA DELIMITER LIST,
 22098                                  ;					; TYPICAL ARE ";", "="
 22099                                  ;					; "," & WHITESPACE ALWAYS
 22100                                  ;		DB	length		; LENGTH OF THE NEXT LIST, 0 IF NONE
 22101                                  ;		DB	" .. "          ; EXTRA END OF LINE LIST, CR, LF OR 0 ALWAYS
 22102                                  ; ----------------------------------------------------------------------------
 22103                                  
 22104                                  ;-------------------------------- PARMS block structure
 22105                                  struc _$P_PARMS_Blk
 22106 00000000 ????                     .PARMSX_Address:  resw 1		;AN000; Address of PARMSX
 22107 00000002 ??                       .Num_Extra:	   resb 1		;AN000; Number of extra stuff
 22108 00000003 ??                       .Len_Extra_Delim: resb 1		;AN000; Length of extra delimiter
 22109                                  endstruc
 22110                                  
 22111                                  _$P_Len_PARMS	   equ	4		;AN000;
 22112                                  _$P_I_Use_Default  equ	0		;AN000; no extra stuff specified
 22113                                  _$P_I_Have_Delim   equ	1		;AN000; extra delimiter specified
 22114                                  _$P_I_Have_EOL	   equ	2		;AN000; extra EOL specified
 22115                                  
 22116                                  ; ----------------------------------------------------------------------------
 22117                                  ; PARMSX	LABEL	BYTE
 22118                                  ;		DB	minp,maxp	; MIN, MAX POSITIONAL OPERANDS ALLOWED
 22119                                  ;		DW	CONTROL 	; DESCRIPTION OF POSITIONAL 1
 22120                                  ;		:			; REPEATS maxp-1 TIMES
 22121                                  ;		DB	maxs		; # OF SWITCHES
 22122                                  ;		DW	CONTROL 	; DESCRIPTION OF SWITCH 1
 22123                                  ;		:			; REPEATS maxs-1 TIMES
 22124                                  ;		DB	maxk		; # OF KEYWORD
 22125                                  ;		DW	CONTROL 	; DESCRIPTION OF KEYWORD 1
 22126                                  ;		:			; REPEATS maxk-1 TIMES
 22127                                  ; ----------------------------------------------------------------------------
 22128                                  
 22129                                  ;-------------------------------- PARMSX block structure
 22130                                  struc _$P_PARMSX_Blk		;AN000;
 22131 00000000 ??                       .MinP: resb 1			;AN000; Minimum positional number
 22132 00000001 ??                       .MaxP:	resb 1			;AN000; Maximum positional number
 22133 00000002 ????                     .1st_Control: resw 1		;AN000; Address of the 1st CONTROL block
 22134                                  endstruc
 22135                                  
 22136                                  ; ----------------------------------------------------------------------------
 22137                                  ; << Control field definition  >>
 22138                                  ;
 22139                                  ;
 22140                                  ;CONTROL   LABEL   BYTE
 22141                                  ;	   DW	   MATCH_FLAGS	   ; CONTROLS TYPE MATCHED
 22142                                  ;				   ; 8000H=NUMERIC VALUE, (VALUE LIST WILL BE CHECKED)
 22143                                  ;				   ; 4000H=SIGNED NUMERIC VALUE (VALUE LIST WILL BE CHECKED)
 22144                                  ;				   ; 2000H=SIMPLE STRING(VALUE LIST WILL BE CHECKED)
 22145                                  ;				   ; 1000H=DATE STRING (VALUE LIST WON'T BE CHECKED)
 22146                                  ;				   ; 0800H=TIME STRING (VALUE LIST WON'T BE CHECKED)
 22147                                  ;				   ; 0400H=COMPLEX LIST (VALUE LIST WON'T BE CHECKED)
 22148                                  ;				   ; 0200H=FILE SPEC (VALUE LIST WON'T BE CHECKED)
 22149                                  ;				   ; 0100H=DRIVE ONLY (VALUE LIST WON'T BE CHECKED)
 22150                                  ;				   ; 0080H=QUOTED STRING (VALUE LIST WON'T BE CHECKED)
 22151                                  ;				   ; 0010H=IGNORE ":" AT END IN MATCH
 22152                                  ;				   ; 0002H=REPEATS ALLOWED
 22153                                  ;				   ; 0001H=OPTIONAL
 22154                                  ;	   DW	   FUNCTION_FLAGS
 22155                                  ;				   ; 0001H=CAP RESULT BY FILE TABLE
 22156                                  ;				   ; 0002H=CAP RESULT BY CHAR TABLE
 22157                                  ;				   ; 0010H=REMOVE ":" AT END
 22158                                  ; (tm10)			   ; 0020H=colon is not necessary for switch
 22159                                  ;	   DW	   RESULT	   ; RESULT BUFFER
 22160                                  ;	   DW	   VALUES	   ; VALUE LISTS
 22161                                  ;	   DB	   nid		   ; NUMBER OF KEYWORD/SWITCH SYNONYMS IN FOLLOWING LIST
 22162                                  ;	   DB	   "...",0         ; IF n >0, KEYWORD 1
 22163                                  ;	   :
 22164                                  ;
 22165                                  ;Note:
 22166                                  ;    - The MATCH_FLAG is bit significant. You can set, for example, TIME bit and
 22167                                  ;      DATE bit simalteniously.
 22168                                  ;
 22169                                  ;      The parser examins each bit along with the following priority.
 22170                                  ;
 22171                                  ;      COMPLEX -> DATE -> TIME -> NUMERIC VAL -> SIGNED NUMERIC VAL -> DRIVE ->
 22172                                  ;      FILE SPEC -> SIMPLE STRING.
 22173                                  ;
 22174                                  ;    - When the FUNCTION_FLAG is 0001 or 0002, the STRING pointed to by a pointer
 22175                                  ;      in the result buffer is capitalized.
 22176                                  ;
 22177                                  ;    - Match_Flags 0001H and 0002H have meaning only for the positional.
 22178                                  ;
 22179                                  ;    - The "...",0 (bottom most line) does require '=' or '/'. When you need a
 22180                                  ;      switch, for example, '/A', then STRING points to;
 22181                                  ;
 22182                                  ;			DB    1 	; number of following synonyms
 22183                                  ;			DB   '/A',0
 22184                                  ;
 22185                                  ;      When you need a keyword, for example, 'CODEPAGE=', then "...",0 will be;
 22186                                  ;
 22187                                  ;			DB    1 	; number of following synonyms
 22188                                  ;			DB   'CODEPAGE=',0
 22189                                  ;
 22190                                  ;    - "..." must consist of upper case characters only because the parser
 22191                                  ;      performs pattern matching after converting input to upper case (by
 22192                                  ;      using the current country upper case table)
 22193                                  ;
 22194                                  ;    - One "..." can contain only one switch or keyword. If you need, for
 22195                                  ;      example /A and /B, the format will be;
 22196                                  ;
 22197                                  ;			DB    2 	; number of following synonyms
 22198                                  ;			DB    '/A',0
 22199                                  ;			DB    '/B',0
 22200                                  ; ----------------------------------------------------------------------------
 22201                                  
 22202                                  ;**** Match_Flags
 22203                                  
 22204                                  _$P_Num_Val	   equ	8000h		;AN000; Numeric Value
 22205                                  _$P_SNum_Val	   equ	4000h		;AN000; Signed numeric value
 22206                                  _$P_Simple_S	   equ	2000h		;AN000; Simple string
 22207                                  _$P_Date_S	   equ	1000h		;AN000; Date string
 22208                                  _$P_Time_S	   equ	0800h		;AN000; Time string
 22209                                  _$P_Cmpx_S	   equ	0400h		;AN000; Complex string
 22210                                  _$P_File_Spc	   equ	0200h		;AN000; File Spec
 22211                                  _$P_Drv_Only	   equ	0100h		;AN000; Drive Only
 22212                                  _$P_Qu_String	   equ	0080h		;AN000; Quoted string
 22213                                  _$P_Ig_Colon	   equ	0010h		;AN000; Ignore colon at end in match
 22214                                  _$P_Repeat	   equ	0002h		;AN000; Repeat allowed
 22215                                  _$P_Optional	   equ	0001h		;AN000; Optional
 22216                                  
 22217                                  ;**** Function flags
 22218                                  
 22219                                  _$P_CAP_File	   equ	0001h		;AN000; CAP result by file table
 22220                                  _$P_CAP_Char	   equ	0002h		;AN000; CAP result by character table
 22221                                  _$P_Rm_Colon	   equ	0010h		;AN000; Remove ":" at the end
 22222                                  _$P_colon_is_not_necessary equ 0020h	;AN000;(tm10) /+10 and /+:10
 22223                                  
 22224                                  ;-------------------------------- Control block structure
 22225                                  struc _$P_Control_Blk
 22226 00000000 ????                     .Match_Flag:	 resw 1		;AN000; Controls type matched
 22227 00000002 ????                     .Function_Flag: resw 1		;AN000; Function should be taken
 22228 00000004 ????                     .Result_Buf:	 resw 1		; Result buffer address
 22229 00000006 ????                     .Value_List:	 resw 1		;AN000; Value list address
 22230 00000008 ??                       .nid:		 resb 1		;AN000; # of keyword/SW synonyms
 22231 00000009 ??                       .KEYorSW:	 resb 1		;AN000; keyword or sw
 22232                                  endstruc
 22233                                  
 22234                                  ; ----------------------------------------------------------------------------
 22235                                  ; << Value List Definition >>
 22236                                  ;
 22237                                  ;VALUES 	LABEL	BYTE
 22238                                  ;		DB	nval			; NUMBER OF VALUE DEFINITIONS (0 - 3)
 22239                                  ;	     +-
 22240                                  ;	     |	DB	nrng			; NUMBER OF RANGES
 22241                                  ;	     | +DB	ITEM_TAG		; RETURN VALUE IF RANGE MATCHED
 22242                                  ;	     | +DD	X,Y			; RANGE OF VALUES
 22243                                  ;	     |	:
 22244                                  ;	     |	DB	nnval			; NUMBER OF CHOICES
 22245                                  ;	     | +DB	ITEM_TAG		; RETURN VALUE IF NUMBER CHOICE MATCHED
 22246                                  ;	     | +DD	VALUE			; SPECIFIC CHOICE IF NUMBER
 22247                                  ;	     |	:
 22248                                  ;	     |	DB	nstrval 		; NUMBER OF CHOICES
 22249                                  ;	     | +DB	ITEM_TAG		; RETURN VALUE IF STRING CHOICE MATCHED
 22250                                  ;	     | +DW	STRING			; SPECIFIC CHOICE IF STING
 22251                                  ;	     +-	:
 22252                                  ;
 22253                                  ;STRING 	DB	"...",0                 ; ASCIIZ STRING IMAGE
 22254                                  ;
 22255                                  ;Note:
 22256                                  ;    - ITEM_TAG must not be 0FFH, which will be used in the result buffer
 22257                                  ;      when no choice lists are provided.
 22258                                  ;
 22259                                  ;    - STRING must consist of upper case characters only because the parser
 22260                                  ;      performs pattern matching after converting input to upper case (by
 22261                                  ;      using the current country upper case table)
 22262                                  ; ----------------------------------------------------------------------------
 22263                                  
 22264                                  _$P_nval_None	   equ	0		;AN000; no value list ID
 22265                                  _$P_nval_Range	   equ	1		;AN000; range list ID
 22266                                  _$P_nval_Value	   equ	2		;AN000; value list ID
 22267                                  _$P_nval_String	   equ	3		;AN000; string list ID
 22268                                  _$P_Len_Range	   equ	9		;AN000; Length of a range choice(two DD plus one DB)
 22269                                  _$P_Len_Value	   equ	5		;AN000; Length of a value choice(one DD plus one DB)
 22270                                  _$P_Len_String	   equ	3		;AN000; Length of a string choice(one DW plus one DB)
 22271                                  _$P_No_nrng	   equ	0		;AN000; (tm07) no nrng. nnval must not be 0.
 22272                                  
 22273                                  struc _$P_Val_List
 22274 00000000 ??                       .NumofList: resb 1			;AN000; number of following choice
 22275 00000001 ????                     .Val_XL:    resw 1			;AN000; lower word of value
 22276 00000003 ????                     .Val_XH:    resw 1			;AN000; higher word of value
 22277 00000005 ????                     .Val_YL:    resw 1			;AN000; lower word of another value
 22278 00000007 ????                     .Val_YH:    resw 1			;AN000; higher word of another value
 22279                                  endstruc
 22280                                  
 22281                                  ; ----------------------------------------------------------------------------
 22282                                  ; << Result Buffer Definition  >>
 22283                                  ;
 22284                                  ;RESULT 	LABEL	BYTE			; BELOW FILLED IN FOR DEFAULTS
 22285                                  ;		DB	type			; TYPE RETURNED: 0=RESERVED,
 22286                                  ;						;	1=NUMBER, 2=LIST INDEX,
 22287                                  ;						;	3=STRING, 4=COMPLEX,
 22288                                  ;						;	5=FILESPEC, 6=DRIVE
 22289                                  ;						;	7=DATE, 8=TIME
 22290                                  ;						;	9=QUOTED STRING
 22291                                  ;		DB	ITEM_TAG		; MATCHED ITEM TAG
 22292                                  ;
 22293                                  ;		dw	synonym@		; es:@ points to found SYNONYM if provided.
 22294                                  ;
 22295                                  ;            +-
 22296                                  ;	    | DD	n			; VALUE IF NUMBER
 22297                                  ;	    | or
 22298                                  ;	    |	DW	i			; INDEX (OFFSET) INTO VALUE LIST
 22299                                  ;	    |					; (ES presents Segment address)
 22300                                  ;	    | or
 22301                                  ;	    |	DD	STRING			; OFFSET OF STRING VALUE
 22302                                  ;	    | or
 22303                                  ;	    |	DB	drv			; DRIVE NUMBER (1-A, 2-B,..., 26-Z)
 22304                                  ;	    | or
 22305                                  ;	    |	DW	YEAR	   ;(1980-2099)  IN CASE OF DATE
 22306                                  ;	    |	DB	MONTH	   ;(1-12)	 Note: Range check is not performed.
 22307                                  ;	    |	DB	DATE	   ;(1-31)	       0 is filled when the corresponding field was not specified.
 22308                                  ;	    | or
 22309                                  ;	    |	DB	HOUR	   ;(0-23)	  IN CASE OF TIME
 22310                                  ;	    |	DB	MINUTES    ;(0-59)	  Note: Range check is not performed .
 22311                                  ;	    |	DB	SECONDS    ;(0-59)		0 is filled when the corresponding field was not specified .
 22312                                  ;	    |	DB	HUNDREDTHS ;(0-99)
 22313                                  ;	    +-
 22314                                  ;
 22315                                  ;
 22316                                  ;Note: ITEM_TAG is 0FFH when the caller does not specify the choice
 22317                                  ;      list.
 22318                                  ;
 22319                                  ;      YEAR: If the input value for the year is less than 100, parser
 22320                                  ;	     adds 1900 to it.  For example, when 87 is input to parser for
 22321                                  ;	     the year value, he returns 1987.
 22322                                  ; ----------------------------------------------------------------------------
 22323                                  
 22324                                  ;-------------------------------- Result block structure
 22325                                  struc _$P_Result_Blk
 22326 00000000 ??                       .Type:        resb 1		;AN000; Type returned
 22327 00000001 ??                       .Item_Tag:    resb 1		;AN000; Matched item tag
 22328 00000002 ????                     .SYNONYM_Ptr: resw 1		;AN000; pointer to Synonym list returned
 22329 00000004 ????????                 .Picked_Val:  resb 4		;AN000; value
 22330                                  endstruc
 22331                                  
 22332                                  ;--------------------------------
 22333                                  ;**** values for the type field in the result block
 22334                                  
 22335                                  _$P_EOL		   equ	0		;AN000; End of line
 22336                                  _$P_Number	   equ	1		;AN000; Number
 22337                                  _$P_List_Idx	   equ	2		;AN000; List Index
 22338                                  _$P_String	   equ	3		;AN000; String
 22339                                  _$P_Complex	   equ	4		;AN000; Complex
 22340                                  _$P_File_Spec	   equ	5		;AN000; File Spec
 22341                                  _$P_Drive	   equ	6		;AN000; Drive
 22342                                  _$P_Date_F	   equ	7		;AN000; Date
 22343                                  _$P_Time_F	   equ	8		;AN000; Time
 22344                                  _$P_Quoted_String  equ	9		;AN000; Quoted String
 22345                                  
 22346                                  _$P_No_Tag	   equ	0FFh		;AN000; No ITEM_TAG found
 22347                                  
 22348                                  ;**** Return code
 22349                                  ;
 22350                                  ; following return code will be returned in the AX register.
 22351                                  
 22352                                  _$P_No_Error	   equ	0		;AN000; No error
 22353                                  _$P_Too_Many	   equ	1		;AN000; Too many operands
 22354                                  _$P_Op_Missing	   equ	2		;AN000; Required operand missing
 22355                                  _$P_Not_In_SW	   equ	3		;AN000; Not in switch list provided
 22356                                  _$P_Not_In_Key	   equ	4		;AN000; Not in keyword list provided
 22357                                  _$P_Out_Of_Range   equ	6		;AN000; Out of range specified
 22358                                  _$P_Not_In_Val	   equ	7		;AN000; Not in value list provided
 22359                                  _$P_Not_In_Str	   equ	8		;AN000; Not in string list provided
 22360                                  _$P_Syntax	   equ	9		;AN000; Syntax error
 22361                                  _$P_RC_EOL	   equ	-1		;AN000; End of command line
 22362                                  
 22363                                  ; DATA - Retro DOS v4.0 - 27/03/2019
 22364                                  
 22365                                  ; MSDOS 6.2 IO.SYS SYSINIT:179Ch
 22366                                  
 22367                                  ;********************** Local Data *************************************
 22368 00001433 0000                    _$P_ORDINAL:	   dw	0		;AN000; Operand ordinal save area
 22369 00001435 0000                    _$P_RC:		   dw	0		;AN000; Return code from parser
 22370 00001437 0000                    _$P_SI_Save:	   dw	0		;AN000; Pointer of command buffer
 22371 00001439 0000                    _$P_DX:		   dw	0		;AN000; Return result buffer address
 22372 0000143B 00                      _$P_Terminator:	   db	0		;AN000; Terminator code (ASCII)
 22373 0000143C 0000                    _$P_DBCSEV_OFF:	   dw	0		;AN000; Offset of DBCS EV
 22374 0000143E 0000                    _$P_DBCSEV_SEG:	   dw	0		;AN000; Segment of DBCS EV
 22375 00001440 0000                    _$P_Flags:	   dw	0		;AN000; Parser internal flags
 22376                                  %define _$P_Flags1 _$P_Flags		;AN038; to reference first byte flags
 22377                                  %define _$P_Flags2 _$P_Flags+1		;AN038; to reference second byte flags only
 22378                                  
 22379                                  ;in second byte of _$P_Flags, referenced as _$P_Flags2:
 22380                                  _$P_equ		   equ	01h	      ;AN000; "=" packed in string buffet
 22381                                  _$P_Neg		   equ	02h	      ;AN000; Negative value
 22382                                  _$P_Time12	   equ	04h	      ;AN000; set when PM is specified
 22383                                  _$P_Key_Cmp	   equ	08h	      ;AN000; set when keyword compare
 22384                                  _$P_SW_Cmp	   equ	10h	      ;AN000; set when switch compare
 22385                                  _$P_Extra	   equ	20h	      ;AN000; set when extra delimiter found
 22386                                  _$P_SW		   equ	40h	      ;AN000; set when switch found (tm08)
 22387                                  _$P_Signed	   equ	80h	      ;AN000; signed numeric specified
 22388                                  
 22389                                  ;in first byte of _$P_Flags, referenced as _$P_Flags1:
 22390                                  _$P_time12am	   equ	01h	      ;AN038; set when AM is specified on time
 22391                                  _$P_TIME_AGAIN	   equ	02h	      ;AN039; SET WHEN READY TO RE-PARSE TIME
 22392                                  
 22393 00001442 0000                    _$P_SaveSI_Cmpx:   dw	0		;AN000; save si for later use by complex
 22394 00001444 0000                    _$P_KEYorSW_Ptr:   dw	0		;AN000; points next to "=" or ":" code
 22395 00001446 0000                    _$P_Save_EOB:	   dw	0		;AN000; save pointer to EOB
 22396 00001448 0000                    _$P_Found_SYNONYM: dw	0		;AN000; es:@ points to found synonym
 22397                                  
 22398 0000144A 00<rep 80h>             _$P_STRING_BUF:	   times 128 db 0	;AN000; Pick a operand from command line
 22399                                  _$P_STRING_BUF_END equ	$		;AN000;
 22400                                  
 22401                                  ; 25/10/2022
 22402                                  ; (MSDOS 5.0 IO.SYS, SYSINIT:16F8h)
 22403                                  
 22404 000014CA FF                      _$P_Char_CAP_Ptr:  db	0FFh		;AN000; info id
 22405 000014CB 0000                    		   dw	0		;AN000; offset	of char case map table
 22406 000014CD 0000                    		   dw	0		;AN000; segment of char case map table
 22407                                  ; 25/10/2022
 22408                                  ;_$P_File_CAP_Ptr: db	0FFh		;AN000; info id
 22409                                  ;		   dw	0		;AN000; offset	of file case map table
 22410                                  ;		   dw	0		;AN000; segment of file case map table
 22411                                  
 22412                                  ; (tm06) IF FileSW			;AN000;(Check if file spec is supported)
 22413                                  ;
 22414                                  
 22415                                  ;M029
 22416                                  ;!!!WARNING!!!
 22417                                  ; In routine SYSPARSE (parse.asm), _$P_FileSp_Char is reinitialized using 
 22418                                  ;hardcoded strings. If the chars in the string are changed here, corresponding
 22419                                  ;changes need to be made in SYSPARSE
 22420                                  
 22421                                  ;IF FileSW+DrvSW 			;AN000;(Check if file spec is supported)
 22422                                  
 22423                                  ; 25/10/2022
 22424                                  ; (MSDOS 5.0 IO.SYS, SYSINIT:16FDh)
 22425                                  
 22426 000014CF 5B5D7C3C3E2B3D3B22      _$P_FileSp_Char	   db	'[]|<>+=;"'     ;AN000; delimitter of file spec
 22427                                  _$P_FileSp_Len	   equ	$-_$P_FileSp_Char ;AN000;
 22428                                  
 22429                                  ;ENDIF					;AN000;(of FileSW)
 22430                                  
 22431                                  ; delimiter parsing
 22432                                  _$P_colon_period   equ	01h		;AN032; check for colon & period
 22433                                  _$P_period_only	   equ	02h		;AN032; check only for period
 22434                                  
 22435                                  ;filespec error flag
 22436 000014D8 00                      _$P_err_flag:	   db	0		;AN033; flag set if filespec parsing error
 22437                                  					;AN033;  was detected.
 22438                                  _$P_error_filespec equ	01h		;AN033; mask to set flag
 22439                                  
 22440                                  
 22441                                  ; PARSE.ASM - MSDOS 6.0 - 1991
 22442                                  ; ======================================================================
 22443                                  ; 27/03/2019 - Retro DOS v4.0
 22444                                  
 22445                                  ;***********************************************************************
 22446                                  ; SysParse;
 22447                                  ;
 22448                                  ;  Function : Parser Entry
 22449                                  ;
 22450                                  ;  Input: DS:SI -> command line
 22451                                  ;	  ES:DI -> parameter block
 22452                                  ;	  cs -> psdata.inc
 22453                                  ;	  CX = operand ordinal
 22454                                  ;
 22455                                  ;	  Note:  ES is the segment containing all the control blocks defined
 22456                                  ;		 by the caller, except for the DOS COMMAND line parms, which
 22457                                  ;		 is in DS.
 22458                                  ;
 22459                                  ;  Output: CY = 1   error of caller, means invalid parameter block or
 22460                                  ;		    invalid value list. But this parser does NOT implement
 22461                                  ;		    this feature. Therefore CY always zero.
 22462                                  ;
 22463                                  ;	   CY = 0   AX = return code
 22464                                  ;		    BL = terminated delimiter code
 22465                                  ;		    CX = new operand ordinal
 22466                                  ;		    SI = set past scaned operand
 22467                                  ;		    DX = selected result buffer
 22468                                  ;
 22469                                  ; Use:	_$P_Skip_Delim, _$P_Chk_EOL, _$P_Chk_Delim, _$P_Chk_DBCS
 22470                                  ;	_$P_Chk_Swtch, _$P_Chk_Pos_Control, _$P_Chk_Key_Control
 22471                                  ;	_$P_Chk_Sw_Control, _$P_Fill_Result
 22472                                  ;
 22473                                  ; Vars: _$P_Ordinal(RW), _$P_RC(RW), _$P_SI_Save(RW), _$P_DX(R), _$P_Terminator(R)
 22474                                  ;	_$P_SaveSI_Cmpx(W), _$P_Flags(RW), _$P_Found_SYNONYM(R), _$P_Save_EOB(W)
 22475                                  ;
 22476                                  ;-------- Modification History -----------------------------------------
 22477                                  ;
 22478                                  ;  4/04/87 : Created by K. K,
 22479                                  ;  4/28/87 : _$P_Val_YH assemble error (tm01)
 22480                                  ;	   : JMP SHORT assemble error (tm02)
 22481                                  ;  5/14/87 : Someone doesn't want to include psdata (tm03)
 22482                                  ;  6/12/87 : _$P_Bridge is missing when TimeSw equ 0 and (CmpxSw equ 1 or
 22483                                  ;	     DateSW equ 1)	      (tm04)
 22484                                  ;  6/12/87 : _$P_SorD_Quote is missing when QusSw equ 0 and CmpxSW equ 1
 22485                                  ;				      (tm05) in PSDATA.INC
 22486                                  ;  6/12/87 : _$P_FileSp_Char and _$P_FileSP_Len are missing
 22487                                  ;	     when FileSW equ 0 and DrvSW equ 1 (tm06) in PSDATA.INC
 22488                                  ;  6/18/87 : $VAL1 and $VAL3, $VAL2 and $VAL3 can be used in the same
 22489                                  ;	     value-list block	      (tm07)
 22490                                  ;  6/20/87 : Add _$P_SW to check if there's an omiting parameter after
 22491                                  ;	     switch (keyword) or not. If there is, backup si for next call
 22492                                  ;	     (tm08)
 22493                                  ;  6/24/87 : Complex Item checking does not work correctly when CmpSW equ 1
 22494                                  ;	     and DateSW equ 0 and TimeSW equ 0 (tm09)
 22495                                  ;  6/24/87 : New function flag _$P_colon_is_not_necessary for switch
 22496                                  ;	     /+15 and /+:15 are allowed for user (tm10)
 22497                                  ;  6/29/87 : ECS call changes DS register but it causes the address problem
 22498                                  ;	     in user's routines. _$P_Chk_DBCS (tm11)
 22499                                  ;  7/10/87 : Switch with no_match flag (0x0000H) does not work correctly
 22500                                  ;					  (tm12)
 22501                                  ;  7/10/87 : Invalid switch/keyword does not work correctly
 22502                                  ;					  (tm13)
 22503                                  ;  7/10/87 : Drive_only breaks 3 bytes after the result buffer
 22504                                  ;					  (tm14)
 22505                                  ;  7/12/87 : Too_Many_Operands sets DX=0 as the PARSE result
 22506                                  ;					  (tm15)
 22507                                  ;  7/24/87 : Negative lower bound on numeric ranges cause trouble
 22508                                  
 22509                                  ;  7/24/87 : Quoted strings being returned with quotes.
 22510                                  
 22511                                  ;  7/28/87 : Kerry S (;AN018;)
 22512                                  ;	     Non optional value on switch (match flags<>0 and <>1) not flagged
 22513                                  ;	     as an error when missing.	Solution: return error 2.  Modules
 22514                                  ;	     affected: _$P_Chk_SW_Control.
 22515                                  
 22516                                  ;  7/29/87 : Kerry S (;AN019;)
 22517                                  ;	     Now allow the optional bit in match flags for switches.  This
 22518                                  ;	     allows the switch to be encountered with a value or without a
 22519                                  ;	     value and no error is returned.
 22520                                  ;
 22521                                  
 22522                                  ;  8/28/87 : Ed K, Kerry S (;AN020;)
 22523                                  ;  9/14/87   In PROC _$P_Get_DecNum, when checking for field separators
 22524                                  ;	     within a date response, instead of checking just for the one
 22525                                  ;	     character defined by the COUNTRY DEPENDENT INFO, check for
 22526                                  ;	     all three chars, "-", "/", and ".". Change _$P_Chk_Switch to allow
 22527                                  ;	     slashes in date strings when DateSw (assembler switch) is set.
 22528                                  
 22529                                  ;  9/1/87  : Kerry S (;AN021)
 22530                                  ;	     In PROC _$P_String_Comp, when comparing the switch or keyword on
 22531                                  ;	     the command line with the string in the control block the
 22532                                  ;	     comparing was stopping at a colon (switch) or equal (keyword)
 22533                                  ;	     on the command line and assuming a match.	This allowed a shorter
 22534                                  ;	     string on the command line than in the synonym list in the control
 22535                                  ;	     block.  I put in a test for a null in the control block so the
 22536                                  ;	     string in the control block must be the same length as the string
 22537                                  ;	     preceeding the colon or equal on the command line.
 22538                                  
 22539                                  ;  8/28/87 : Kerry S (;AN022;)
 22540                                  ;	     All references to data in PSDATA.INC had CS overrides.  This caused
 22541                                  ;	     problems for people who included it themselves in a segment other
 22542                                  ;	     than CS.  Added switch to allow including PSDATA.INC in any
 22543                                  ;	     segment.
 22544                                  
 22545                                  ;  9/16/87 : Ed K (;AN023;) PTM1040
 22546                                  ;	     in _$P_set_cdi PROC, it assumes CS points to psdata. Change Push CS
 22547                                  ;	     into PUSH cs.  In _$P_Get_DecNum PROC, fix AN020
 22548                                  ;	     forced both TIME and DATE to use the delims, "-","/",".".
 22549                                  ;	     Created FLag, in _$P_time_Format PROC, to request the delim in
 22550                                  ;	     BL be used if TIME is being parsed.
 22551                                  
 22552                                  ;  9/24/87 : Ed K
 22553                                  ;	     Removed the include to STRUC.INC.	Replaced the STRUC macro
 22554                                  ;	     invocations with their normally expanded code; made comments
 22555                                  ;	     out of the STRUC macro invocation statements to maintain readability.
 22556                                  
 22557                                  ;  9/24/87 : Ed K (;AN024;) PTM1222
 22558                                  ;	     When no CONTROL for a keyword found, tried to fill in RESULT
 22559                                  ;	     pointed to by non-existant CONTROL.
 22560                                  
 22561                                  ; 10/15/87 : Ed K (;AN025;) PTM1672
 22562                                  ;	     A quoted text string can be framed only by double quote.  Remove
 22563                                  ;	     support to frame quoted text string with single quote.
 22564                                  ;	     (apostrophe) _$P_SorD_Quote is removed from PSDATA.INC.
 22565                                  ;	     _$P_SQuote EQU also removed from PSDATA.INC.  Any references to
 22566                                  ;	     single quote in PROC prologues are left as is for history reasons.
 22567                                  
 22568                                  ;	     This fixes another bug, not mentioned in p1672, in that two
 22569                                  ;	     quote chars within a quoted string is supposed to be reported as
 22570                                  ;	     one quote character, but is reported as two quotes.  This changed
 22571                                  ;	     two instructions in PROC _$P_Quoted_Str.
 22572                                  
 22573                                  ;	     Also fixed are several JMP that caused a NOP, these changed to
 22574                                  ;	     have the SHORT operator to avoid the unneeded NOP.
 22575                                  
 22576                                  ;	     The code and PSDATA.INC have been aligned for ease of reading.
 22577                                  
 22578                                  ; 10/26/87 : Ed K (;AN026;) PTM2041, DATE within SWITCH, BX reference to
 22579                                  ;	     psdata buffer should have cs.
 22580                                  
 22581                                  ; 10/27/87 : Ed K (;AN027;) PTM2042 comma between keywords implies
 22582                                  ;	     positional missing.
 22583                                  
 22584                                  ; 11/06/87 : Ed K (;AN028;) PTM 2315 Parser should not use line feed
 22585                                  ;	     as a line delimiter, should use carriage return.
 22586                                  ;	     Define switch: LFEOLSW, if on, accept LF as end of line char.
 22587                                  
 22588                                  ; 11/11/87 : Ed K (;AN029;) PTM 1651 GET RID OF WHITESPACE AROUND "=".
 22589                                  
 22590                                  ; 11/18/87 : Ed K (;AN030;) PTM 2551 If filename is just "", then
 22591                                  ;	     endless loop since SI is returned still pointing to start
 22592                                  ;	     of that parm.
 22593                                  
 22594                                  ; 11/19/87 : Ed K (;AN031;) PTM 2585 date & time getting bad values.
 22595                                  ;	     Vector to returned string has CS instead of cs, but
 22596                                  ;	     when tried to fix it on previous version, changed similar
 22597                                  ;	     but wrong place.
 22598                                  
 22599                                  ; 12/09/87 : Bill L (;AN032;) PTM 2772 colon and period are now valid
 22600                                  ;	     delimiters between hours, minutes, seconds for time. And period
 22601                                  ;	     and comma are valid delimiters between seconds and 100th second.
 22602                                  
 22603                                  ; 12/14/87 : Bill L (;AN033;) PTM 2722 if illegal delimiter characters
 22604                                  ;	     in a filespec, then flag an error.
 22605                                  
 22606                                  ; 12/22/87 : Bill L (;AN034;)	    All local data to parser is now
 22607                                  ;	     indexed off of the cs equate instead of the DS register.
 22608                                  ;	     Using this method, DS can point to the segment of PSP or to psdata
 22609                                  ;  -->	     local parser data. Why were some references to local data changed
 22610                                  ;	     to do this before, but not all ?????
 22611                                  
 22612                                  ; 02/02/88 : Ed K (;AC035;) INSPECT utility, suggests optimizations.
 22613                                  
 22614                                  ; 02/05/88 : Ed K (;AN036;) P3372-UPPERCASE TRANSLATION, cs HOSED.
 22615                                  ;
 22616                                  ; 02/08/88 : Ed K (;AN037;) P3410-AVOID POP OF CS, CHECK BASESW FIRST.
 22617                                  
 22618                                  ; 02/19/88 : Ed K (;AN038;) p3524 above noon and "am" should be error
 22619                                  
 22620                                  ; 02/23/88 : Ed K (;AN039;) p3518 accept "comma" and "period" as decimal
 22621                                  ;	     separator in TIME before hundredths field.
 22622                                  ;
 22623                                  ; 08/09/90 : SA	M005	Prevented parser from recognizing '=' signs within
 22624                                  ;			strings as keywords.
 22625                                  ;
 22626                                  ;***********************************************************************
 22627                                  
 22628                                  ;IF FarSW				;AN000;(Check if need far return)
 22629                                  ;SysParse proc far			;AN000;
 22630                                  ;ELSE					;AN000;
 22631                                  ;SysParse proc near			;AN000;
 22632                                  ;ENDIF					;AN000;(of FarSW)
 22633                                  
 22634                                  ; 27/03/2019 - Retro DOS v4.0
 22635                                  ; (MSDOS 6.21 IO.SYS - SYSINIT:1842h)
 22636                                  
 22637                                  ; 25/10/2022 - Retro DOS v4.0
 22638                                  ; (MSDOS 5.0 IO.SYS - SYSINIT:1707h)
 22639                                  
 22640                                  SysParse:
 22641 000014D9 2EC706[4014]0000        	mov	word [cs:_$P_Flags],0	;AC034; Clear all internal flags
 22642 000014E0 FC                      	cld				;AN000; confirm forward direction
 22643 000014E1 2E890E[3314]            	mov	word [cs:_$P_ORDINAL],cx ;AC034; save operand ordinal
 22644 000014E6 2EC706[3514]0000        	mov	word [cs:_$P_RC],_$P_No_Error ;AC034; Assume no error
 22645 000014ED 2EC706[4814]0000        	mov	word [cs:_$P_Found_SYNONYM],0 ;AC034; initalize synonym pointer
 22646                                  
 22647 000014F4 2EC706[3914]0000        	mov	word [cs:_$P_DX],0	;AC034; (tm15)
 22648                                  
 22649                                  ;M029 -- Begin changes
 22650                                  ; The table of special chars _$P_FileSp_Char should be initialized on every
 22651                                  ;entry to SysParse. This is in the non-checksum region and any program that
 22652                                  ;corrupts this table but does not corrupt the checksum region will leave
 22653                                  ;command.com parsing in an inconsistent state.
 22654                                  ; NB: The special characters string has been hardcoded here. If any change
 22655                                  ;is made to it in psdata.inc, a corresponding change needs to be made here.
 22656                                  
 22657                                  ;IF FileSW + DrvSW
 22658 000014FB 2EC706[CF14]5D5B        	mov	word [cs:_$P_FileSp_Char], ']['
 22659 00001502 2EC706[D114]3C7C        	mov	word [cs:_$P_FileSp_Char+2], '<|'
 22660 00001509 2EC706[D314]2B3E        	mov	word [cs:_$P_FileSp_Char+4], '+>'
 22661 00001510 2EC706[D514]3B3D        	mov 	word [cs:_$P_FileSp_Char+6], ';='
 22662                                  ;ENDIFtHHH
 22663                                  
 22664                                  ;M029 -- End of changes
 22665                                  
 22666 00001517 E8BC06                  	call	_$P_Skip_Delim		;AN000; Move si to 1st non white space
 22667 0000151A 7313                    	jnc	short _$P_Start		;AN000; If EOL is not encountered, do parse
 22668                                  ;--------------------------- End of Line
 22669 0000151C B8FFFF                  	mov	ax,_$P_RC_EOL		;AN000; set exit code to -1
 22670 0000151F 53                      	push	bx			;AN000;
 22671                                  	;mov	bx,[es:di+_$P_PARMS_Blk.PARMSX_Address]
 22672                                  					;AN000; Get the PARMSX address to
 22673 00001520 268B1D                  	mov	bx,[es:di]
 22674                                  	;cmp	cl,[es:bx+_$P_PARMSX_Blk.MinP]
 22675                                  					;AN000; check ORDINAL to see if the minimum
 22676 00001523 263A0F                  	cmp	cl,[es:bx]	
 22677 00001526 7303                    	jae	short _$P_Fin		;AN000; positional found.
 22678                                  
 22679 00001528 B80200                  	mov	ax,_$P_Op_Missing	;AN000; If no, set exit code to missing operand
 22680                                  _$P_Fin: 				;AN000;
 22681 0000152B 5B                      	pop	bx			;AN000;
 22682 0000152C E92301                  	jmp	_$P_Single_Exit		;AN000; return to the caller
 22683                                  ;---------------------------
 22684                                  _$P_Start:				;AN000;
 22685 0000152F 2E8936[4214]            	mov	[cs:_$P_SaveSI_Cmpx],si ;AN000;AC034; save ptr to command line for later use by complex,
 22686 00001534 53                      	push	bx			;AN000; quoted string or file spec.
 22687 00001535 57                      	push	di			;AN000;
 22688 00001536 55                      	push	bp			;AN000;
 22689                                  	;lea	bx,[cs:_$P_STRING_BUF] ;AC034; set buffer to copy from command string
 22690                                  	; 02/11/2022
 22691 00001537 8D1E[4A14]              	lea	bx,[_$P_STRING_BUF]
 22692 0000153B 2EF606[4114]20          	test	byte [cs:_$P_Flags2],_$P_Extra ;AC034; 3/9 extra delimiter encountered ?
 22693 00001541 7543                    	jnz	short _$P_Pack_End	;AN000; 3/9 if yes, no need to copy
 22694                                  
 22695                                  _$P_Pack_Loop:				;AN000;
 22696 00001543 AC                      	lodsb				;AN000; Pick a operand from buffer
 22697 00001544 E84907                  	call	_$P_Chk_Switch		;AN000; Check switch character
 22698 00001547 723C                    	jc	short _$P_Pack_End_BY_EOL ;AN020; if carry set found delimiter type slash, need backup si, else continue
 22699                                  
 22700 00001549 E8AD06                  	call	_$P_Chk_EOL		;AN000; Check EOL character
 22701 0000154C 7437                    	je	short _$P_Pack_End_BY_EOL ;AN000; need backup si
 22702                                  
 22703 0000154E E8DE06                  	call	_$P_Chk_Delim		;AN000; Check delimiter
 22704 00001551 7518                    	jne	short _$P_PL01 		;AN000; If no, process next byte
 22705                                  
 22706 00001553 2EF606[4114]20          	test	byte [cs:_$P_Flags2],_$P_Extra ;AC034; 3/9 If yes and white spec,
 22707                                  ; (tm08)jne	short _$P_Pack_End	;AN000; 3/9 then
 22708 00001559 7505                    	jnz	short _$P_Pack_End_backup_si ;AN000; (tm08)
 22709                                  
 22710 0000155B E87806                  	call	_$P_Skip_Delim		;AN000; skip subsequent white space,too
 22711 0000155E EB26                    	jmp	short _$P_Pack_End	;AN000; finish copy by placing NUL at end
 22712                                  
 22713                                  _$P_Pack_End_backup_si:			;AN000; (tm08)
 22714 00001560 2EF606[4114]41          	test	byte [cs:_$P_Flags2],_$P_SW+_$P_equ ;AN000;AC034;  (tm08)
 22715 00001566 741E                    	jz	short _$P_Pack_End	;AN000; (tm08)
 22716                                  
 22717 00001568 4E                      	dec	si			;AN000; (tm08)
 22718 00001569 EB1B                    	jmp	short _$P_Pack_End	;AN025; (tm08)
 22719                                  
 22720                                  _$P_PL01:				;AN000;
 22721 0000156B 2E8807                  	mov	[cs:bx],al		;AN000; move byte to STRING_BUF
 22722 0000156E 3C3D                    	cmp	al,_$P_Keyword  ;'='	;AN000; if it is equal character,
 22723 00001570 7506                    	jne	short _$P_PL00 		;AN000; then
 22724                                  
 22725 00001572 2E800E[4114]01          	or	byte [cs:_$P_Flags2],_$P_equ ;AC034; remember it in flag
 22726                                  _$P_PL00:				;AN000;
 22727 00001578 43                      	inc	bx			;AN000; ready to see next byte
 22728 00001579 E82E07                  	call	_$P_Chk_DBCS		;AN000; was it 1st byte of DBCS ?
 22729 0000157C 73C5                    	jnc	_$P_Pack_Loop		;AN000; if no, process to next byte
 22730                                  
 22731 0000157E AC                      	lodsb				;AN000; if yes, store
 22732 0000157F 2E8807                  	mov	[cs:bx],al		;AN000;    2nd byte of DBCS
 22733 00001582 43                      	inc	bx			;AN000; update pointer
 22734 00001583 EBBE                    	jmp	short _$P_Pack_Loop	;AN000; process to next byte
 22735                                  
 22736                                  _$P_Pack_End_BY_EOL:			;AN000;
 22737 00001585 4E                      	dec	si			;AN000; backup si pointer
 22738                                  _$P_Pack_End:				;AN000;
 22739 00001586 2E8936[3714]            	mov	[cs:_$P_SI_Save],si     ;AC034; save next pointer, SI
 22740 0000158B 2EC60700                	mov	byte [cs:bx],_$P_NULL	;AN000; put NULL at the end
 22741 0000158F 2E891E[4614]            	mov	[cs:_$P_Save_EOB],bx    ;AC034; 3/17/87 keep the address for later use of complex
 22742                                  	;mov	bx,[es:di+_$P_PARMS_Blk.PARMSX_Address] ;AN000; get PARMSX address
 22743 00001594 268B1D                  	mov	bx,[es:di]
 22744                                  	;lea	si,[cs:_$P_STRING_BUF]	;AC034;
 22745                                  	; 02/11/2022
 22746 00001597 8D36[4A14]              	lea	si,[_$P_STRING_BUF]
 22747 0000159B 2E803C2F                	cmp	byte [cs:si],_$P_Switch ;AN000; the operand begins w/ switch char ?
 22748 0000159F 7436                    	je	short _$P_SW_Manager	;AN000; if yes, process as switch
 22749                                  
 22750 000015A1 2E803C22                	cmp	byte [cs:si],_$P_DQuote	;M005;is it a string?
 22751 000015A5 7408                    	je	short _$P_Positional_Manager ;M005;if so, process as one!
 22752                                  
 22753 000015A7 2EF606[4114]01          	test	byte [cs:_$P_Flags2],_$P_equ ;AC034; the operand includes equal char ?
 22754 000015AD 7554                    	jnz	short _$P_Key_Manager	;AN000; if yes, process as keyword
 22755                                  
 22756                                  _$P_Positional_Manager:			;AN000; else process as positional
 22757 000015AF 268A4701                	mov	al,[es:bx+_$P_PARMSX_Blk.MaxP] ;AN000; get maxp
 22758 000015B3 30E4                    	xor	ah,ah			;AN000; ax = maxp
 22759 000015B5 2E3906[3314]            	cmp	[cs:_$P_ORDINAL],ax	;AC034; too many positional ?
 22760 000015BA 7312                    	jae	short _$P_Too_Many_Error ;AN000; if yes, set exit code to too many
 22761                                  
 22762 000015BC 2EA1[3314]              	mov	ax,[cs:_$P_ORDINAL]	;AC034; see what the current ordinal
 22763 000015C0 D1E0                    	shl	ax,1			;AN000; ax = ax*2
 22764 000015C2 43                      	inc	bx			;AC035; add '2' to
 22765 000015C3 43                      	inc	bx			;AC035;  BX reg
 22766                                  					;AN000; now bx points to 1st CONTROL
 22767 000015C4 01C3                    	add	bx,ax			;AN000; now bx points to specified CONTROL address
 22768 000015C6 268B1F                  	mov	bx,[es:bx]		;AN000; now bx points to specified CONTROL itself
 22769 000015C9 E88800                  	call	_$P_Chk_Pos_Control	;AN000; Do process for positional
 22770 000015CC EB69                    	jmp	short _$P_Return_to_Caller ;AN000; and return to the caller
 22771                                  
 22772                                  _$P_Too_Many_Error:			;AN000;
 22773 000015CE 2EC706[3514]0100        	mov	word [cs:_$P_RC],_$P_Too_Many ;AC034; set exit code
 22774 000015D5 EB60                    	jmp	short _$P_Return_to_Caller ;AN000; and return to the caller
 22775                                  
 22776                                  _$P_SW_Manager:				;AN000;
 22777 000015D7 268A4701                	mov	al,[es:bx+_$P_PARMSX_Blk.MaxP] ;AN000; get maxp
 22778 000015DB 30E4                    	xor	ah,ah			;AN000; ax = maxp
 22779 000015DD 40                      	inc	ax			;AN000;
 22780 000015DE D1E0                    	shl	ax,1			;AN000; ax = (ax+1)*2
 22781 000015E0 01C3                    	add	bx,ax			;AN000; now bx points to maxs
 22782 000015E2 268A0F                  	mov	cl,[es:bx]		;AN000;
 22783 000015E5 30ED                    	xor	ch,ch			;AN000; cx = maxs
 22784 000015E7 09C9                    	or	cx,cx			;AN000; at least one switch ?
 22785 000015E9 740F                    	jz	short _$P_SW_Not_Found 	;AN000;
 22786                                  
 22787 000015EB 43                      	inc	bx			;AN000; now bx points to 1st CONTROL address
 22788                                  
 22789                                  _$P_SW_Mgr_Loop: 			;AN000;
 22790 000015EC 53                      	push	bx			;AN000;
 22791 000015ED 268B1F                  	mov	bx,[es:bx]		;AN000; bx points to Switch CONTROL itself
 22792 000015F0 E8C400                  	call	_$P_Chk_SW_Control	;AN000; do process for switch
 22793 000015F3 5B                      	pop	bx			;AN000;
 22794 000015F4 7341                    	jnc	short _$P_Return_to_Caller ;AN000; if the CONTROL is for the switch, exit
 22795                                  
 22796 000015F6 43                      	inc	bx			;AC035; add '2' to
 22797 000015F7 43                      	inc	bx			;AC035;  BX reg
 22798                                  					;AN000; else bx points to the next CONTROL
 22799 000015F8 E2F2                    	loop	_$P_SW_Mgr_Loop		;AN000; and loop
 22800                                  
 22801                                  _$P_SW_Not_Found:			;AN000;
 22802 000015FA 2EC706[3514]0300        	mov	word [cs:_$P_RC],_$P_Not_In_SW ;AC034; here no CONTROL for the switch has
 22803 00001601 EB34                    	jmp	short _$P_Return_to_Caller ;AN000; not been found, means error.
 22804                                  
 22805                                  _$P_Key_Manager: 			;AN000;
 22806 00001603 268A4701                	mov	al,[es:bx+_$P_PARMSX_Blk.MaxP] ;AN000; get maxp
 22807 00001607 30E4                    	xor	ah,ah			;AN000; ax = maxp
 22808 00001609 40                      	inc	ax			;AN000;
 22809 0000160A D1E0                    	shl	ax,1			;AN000; ax = (ax+1)*2
 22810 0000160C 01C3                    	add	bx,ax			;AN000; now bx points to maxs
 22811 0000160E 268A07                  	mov	al,[es:bx]		;AN000;
 22812 00001611 30E4                    	xor	ah,ah			;AN000; ax = maxs
 22813 00001613 D1E0                    	shl	ax,1			;AN000;
 22814 00001615 40                      	inc	ax			;AN000; ax = ax*2+1
 22815 00001616 01C3                    	add	bx,ax			;AN000; now bx points to maxk
 22816 00001618 268A0F                  	mov	cl,[es:bx]		;AN000;
 22817 0000161B 30ED                    	xor	ch,ch			;AN000; cx = maxk
 22818 0000161D 09C9                    	or	cx,cx			;AN000; at least one keyword ?
 22819 0000161F 740F                    	je	short _$P_Key_Not_Found	;AN000;
 22820                                  
 22821 00001621 43                      	inc	bx			;AN000; now bx points to 1st CONTROL
 22822                                  
 22823                                  _$P_Key_Mgr_Loop:			;AN000;
 22824 00001622 53                      	push	bx			;AN000;
 22825 00001623 268B1F                  	mov	bx,[es:bx]		;AN000; bx points to keyword CONTROL itself
 22826 00001626 E85B00                  	call	_$P_Chk_Key_Control	;AN000; do process for keyword
 22827 00001629 5B                      	pop	bx			;AN000;
 22828 0000162A 730B                    	jnc	short _$P_Return_to_Caller ;AN000; if the CONTROL is for the keyword, exit
 22829                                  
 22830 0000162C 43                      	inc	bx			;AC035; add '2' to
 22831 0000162D 43                      	inc	bx			;AC035;  BX reg
 22832                                  					;AN000; else bx points to the next CONTROL
 22833 0000162E E2F2                    	loop	_$P_Key_Mgr_Loop 	;AN000; and loop
 22834                                  
 22835                                  _$P_Key_Not_Found:			;AN000;
 22836 00001630 2EC706[3514]0400        	mov	word [cs:_$P_RC],_$P_Not_In_Key ;AC034; here no CONTROL for the keyword has
 22837                                  _$P_Return_to_Caller:			;AN000;
 22838 00001637 5D                      	pop	bp			;AN000;
 22839 00001638 5F                      	pop	di			;AN000;
 22840 00001639 5B                      	pop	bx			;AN000;
 22841 0000163A 2E8B0E[3314]            	mov	cx,[cs:_$P_ORDINAL]	;AC034; return next ordinal
 22842 0000163F 2EA1[3514]              	mov	ax,[cs:_$P_RC]		;AC034; return exit code
 22843 00001643 2E8B36[3714]            	mov	si,[cs:_$P_SI_Save]	;AC034; return next operand pointer
 22844 00001648 2E8B16[3914]            	mov	dx,[cs:_$P_DX]		;AC034; return result buffer address
 22845 0000164D 2E8A1E[3B14]            	mov	bl,[cs:_$P_Terminator]	;AC034; return delimiter code found
 22846                                  _$P_Single_Exit: 			;AN000;
 22847 00001652 F8                      	clc				;AN000;
 22848 00001653 C3                      	retn				;AN000;
 22849                                  
 22850                                  ;***********************************************************************
 22851                                  ; _$P_Chk_Pos_Control
 22852                                  ;
 22853                                  ; Function: Parse CONTROL block for a positional
 22854                                  ;
 22855                                  ; Input:     ES:BX -> CONTROL block
 22856                                  ;	     cs:SI -> _$P_STRING_BUF
 22857                                  ;
 22858                                  ; Output:    None
 22859                                  ;
 22860                                  ; Use:	 _$P_Fill_Result, _$P_Check_Match_Flags
 22861                                  ;
 22862                                  ; Vars: _$P_Ordinal(W), _$P_RC(W)
 22863                                  ;***********************************************************************
 22864                                  
 22865                                  _$P_Chk_Pos_Control:
 22866 00001654 50                      	push	ax			;AN000;
 22867                                  	;mov	ax,[es:bx+_$P_Control_Blk.Match_Flag] ;AN000;
 22868 00001655 268B07                  	mov	ax,[es:bx]
 22869                                  	; 12/12/2022
 22870 00001658 A802                    	test	al,_$P_Repeat
 22871                                  	;test	ax,_$P_Repeat		;AN000; repeat allowed ?
 22872 0000165A 7505                    	jnz	short _$P_CPC00		;AN000; then do not increment ORDINAL
 22873                                  
 22874 0000165C 2EFF06[3314]            	inc	word [cs:_$P_ORDINAL]	;AC034; update the ordinal
 22875                                  _$P_CPC00:				;AN000;
 22876 00001661 2E803C00                	cmp	byte [cs:si],_$P_NULL	;AN000; no data ?
 22877 00001665 7518                    	jne	short _$P_CPC01		;AN000;
 22878                                  
 22879                                  	; 12/12/2022
 22880 00001667 A801                    	test	al,_$P_Optional
 22881                                  	;test	ax,_$P_Optional		;AN000; yes, then is it optional ?
 22882 00001669 7509                    	jnz	short _$P_CPC02		;AN000;
 22883                                  
 22884 0000166B 2EC706[3514]0200        	mov	word [cs:_$P_RC],_$P_Op_Missing ;AC034; no, then error 3/17/87
 22885 00001672 EB0E                    	jmp	short _$P_CPC_Exit	;AN000;
 22886                                  
 22887                                  _$P_CPC02:				;AN000;
 22888 00001674 50                      	push	ax			;AN000;
 22889 00001675 B003                    	mov	al,_$P_String		;AN000; if it is optional return NULL
 22890 00001677 B4FF                    	mov	ah,_$P_No_Tag		;AN000; no item tag indication
 22891 00001679 E89B00                  	call	_$P_Fill_Result		;AN000;
 22892 0000167C 58                      	pop	ax			;AN000;
 22893 0000167D EB03                    	jmp	short _$P_CPC_Exit	;AN000;
 22894                                  
 22895                                  _$P_CPC01:				;AN000;
 22896 0000167F E81A01                  	call	_$P_Check_Match_Flags	;AN000;
 22897                                  _$P_CPC_Exit:				;AN000;
 22898 00001682 58                      	pop	ax			;AN000;
 22899 00001683 C3                      	retn				;AN000;
 22900                                  
 22901                                  ;***********************************************************************
 22902                                  ; _$P_Chk_Key_Control
 22903                                  ;
 22904                                  ; Function: Parse CONTROL block for a keyword
 22905                                  ;
 22906                                  ; Input:     ES:BX -> CONTROL block
 22907                                  ;	     cs:SI -> _$P_STRING_BUF
 22908                                  ;
 22909                                  ; Output:    CY = 1 : not match
 22910                                  ;
 22911                                  ; Use:	 _$P_Fill_Result, _$P_Search_KEYorSW, _$P_Check_Match_Flags
 22912                                  ;
 22913                                  ; Vars: _$P_RC(W), _$P_SaveSI_Cmpx(W), _$P_KEYorSW_Ptr(R), _$P_Flags(W)
 22914                                  ;***********************************************************************
 22915                                  
 22916                                  _$P_Chk_Key_Control:
 22917 00001684 F9                      	stc				;AN000; this logic works when the KeySW
 22918 00001685 C3                      	retn				;AN000; is reset.
 22919                                  
 22920                                  ;***********************************************************************
 22921                                  ; _$P_Search_KEYorSW:
 22922                                  ;
 22923                                  ; Function: Seach specified keyword or switch from CONTROL
 22924                                  ;
 22925                                  ; Input:     ES:BX -> CONTROL block
 22926                                  ;	     cs:SI -> _$P_STRING_BUF
 22927                                  ;
 22928                                  ; Output:    CY = 1 : not match
 22929                                  ;
 22930                                  ; Use:	 _$P_String_Comp, _$P_MoveBP_NUL, _$P_Found_SYNONYM
 22931                                  ;***********************************************************************
 22932                                  
 22933                                  	; 25/10/2022 - Retro DOS v4.0
 22934                                  	; (MSDOS 5.0 IO.SYS - SYSINIT:18B6h)
 22935                                  
 22936                                  _$P_Search_KEYorSW:			;AN000;
 22937 00001686 55                      	push	bp			;AN000;
 22938 00001687 51                      	push	cx			;AN000;
 22939 00001688 268A4F08                	mov	cl,[es:bx+_$P_Control_Blk.nid] ;AN000; Get synonym count
 22940 0000168C 30ED                    	xor	ch,ch			;AN000; and set it to cx
 22941 0000168E 09C9                    	or	cx,cx			;AN000; No synonyms specified ?
 22942 00001690 740D                    	jz	short _$P_KEYorSW_Not_Found ;AN000; then indicate not found by CY
 22943                                  
 22944                                  	;lea	bp,[es:bx+_$P_Control_Blk.KEYorSW] ;AN000; BP points to the 1st synonym
 22945                                  	; 25/10/2022
 22946 00001692 8D6F09                  	lea	bp,[bx+_$P_Control_Blk.KEYorSW]
 22947                                  	;lea	bp,[bx+9]
 22948                                  _$P_KEYorSW_Loop:			;AN000;
 22949 00001695 E8D803                  	call	_$P_String_Comp		;AN000; compare string in buffer w/ the synonym
 22950 00001698 7308                    	jnc	short _$P_KEYorSW_Found	;AN000; If match, set it to synonym pointer
 22951                                  
 22952 0000169A E80E00                  	call	_$P_MoveBP_NUL		;AN000; else, bp points to the next string
 22953 0000169D E2F6                    	loop	_$P_KEYorSW_Loop 	;AN000; loop nid times
 22954                                  _$P_KEYorSW_Not_Found:			;AN000;
 22955 0000169F F9                      	stc				;AN000; indicate not found in synonym list
 22956 000016A0 EB06                    	jmp	short _$P_KEYorSW_Exit	;AN000; and exit
 22957                                  
 22958                                  _$P_KEYorSW_Found:			;AN000;
 22959 000016A2 2E892E[4814]            	mov	[cs:_$P_Found_SYNONYM],bp ;AC034; set synonym pointer
 22960 000016A7 F8                      	clc				;AN000; indicate found
 22961                                  _$P_KEYorSW_Exit:			;AN000;
 22962 000016A8 59                      	pop	cx			;AN000;
 22963 000016A9 5D                      	pop	bp			;AN000;
 22964 000016AA C3                      	retn				;AN000;
 22965                                   
 22966                                  ;***********************************************************************
 22967                                  ; _$P_MoveBP_NUL
 22968                                  ;***********************************************************************
 22969                                  
 22970                                  _$P_MoveBP_NUL:
 22971                                  _$P_MBP_Loop:				;AN000;
 22972                                  	; 11/12/2022
 22973 000016AB 26807E0000              	cmp	byte [es:bp],_$P_NULL	;AN000; Increment BP that points
 22974                                  	; 25/10/2022 (MSDOS 5.0 IO.SYS compatibility)
 22975                                  	; (SYSINIT:18DBh)
 22976                                   	;cmp     byte [es:bp+0],0
 22977 000016B0 7403                    	je	short _$P_MBP_Exit	;AN000; to the synomym list
 22978                                  
 22979 000016B2 45                      	inc	bp			;AN000; until
 22980 000016B3 EBF6                    	jmp	short _$P_MBP_Loop	;AN000; NULL encountered.
 22981                                  
 22982                                  _$P_MBP_Exit:				;AN000;
 22983 000016B5 45                      	inc	bp			;AN000; bp points to next to NULL
 22984 000016B6 C3                      	retn				;AN000;
 22985                                  
 22986                                  ;***********************************************************************
 22987                                  ; _$P_Chk_SW_Control
 22988                                  ;
 22989                                  ; Function: Parse CONTROL block for a switch
 22990                                  ;
 22991                                  ; Input:     ES:BX -> CONTROL block
 22992                                  ;	     cs:SI -> _$P_STRING_BUF
 22993                                  ;
 22994                                  ; Output:    CY = 1 : not match
 22995                                  ;
 22996                                  ; Use:	 _$P_Fill_Result, _$P_Search_KEYorSW, _$P_Check_Match_Flags
 22997                                  ;
 22998                                  ; Vars:  _$P_SaveSI_Cmpx(W), _$P_KEYorSW_Ptr(R), _$P_Flags(W)
 22999                                  ;***********************************************************************
 23000                                  
 23001                                  _$P_Chk_SW_Control:
 23002                                  
 23003                                  ;IF SwSW				;AN000;(Check if switch is supported)
 23004                                  	;or	byte [cs:_$P_Flags+1],10h
 23005 000016B7 2E800E[4114]10          	or	byte [cs:_$P_Flags2],_$P_SW_Cmp ;AC034; Indicate switch for later string comparison
 23006 000016BD E8C6FF                  	call	_$P_Search_KEYorSW	;AN000; Search the switch in the CONTROL block
 23007 000016C0 7248                    	jc	short _$P_Chk_SW_Err0	;AN000; not found, then try next CONTROL
 23008                                  
 23009                                  	;and	[cs:_$P_Flags+],0EFh
 23010 000016C2 2E8026[4114]EF          	and	byte [cs:_$P_Flags2],0FFh-_$P_SW_Cmp 
 23011                                  					;AC034; reset the indicator previously set
 23012 000016C8 50                      	push	ax			;AN000; 	      /switch:
 23013 000016C9 2EA1[4414]              	mov	ax,[cs:_$P_KEYorSW_Ptr] ;AC034;	      ^       ^
 23014 000016CD 29F0                    	sub	ax,si			;AN000;  SI	KEYorSW
 23015 000016CF 2E0106[4214]            	add	[cs:_$P_SaveSI_Cmpx],ax	;AC034; update for complex list
 23016 000016D4 58                      	pop	ax			;AN000;
 23017                                  
 23018 000016D5 2E8B36[4414]            	mov	si,[cs:_$P_KEYorSW_Ptr] ;AC034; set si at the end or colon
 23019 000016DA 2E803C00                	cmp	byte [cs:si],_$P_NULL	;AN000; any data after colon
 23020 000016DE 7525                    	jne	short _$P_CSW00		;AN000; if yes, process match flags
 23021                                  
 23022 000016E0 2E807CFF3A              	cmp	byte [cs:si-1],_$P_Colon ;AN000; if no, the switch terminated by colon ?
 23023 000016E5 7509                    	jne	short _$P_Chk_if_data_required ;AN000; if yes,
 23024                                  
 23025 000016E7 2EC706[3514]0900        	mov	word [cs:_$P_RC],_$P_Syntax ;AC034; return syntax error
 23026 000016EE EB1C                    	jmp	short _$P_Chk_SW_Exit	;AN000;
 23027                                  
 23028                                  _$P_Chk_if_data_required:		;AN018; no data, no colon
 23029                                  	;cmp	word [es:bx+_$P_Control_Blk.Match_Flag],0 
 23030 000016F0 26833F00                	cmp	word [es:bx],0		;AN018; should have data? zero match flag means switch followed by nothing is OK
 23031 000016F4 7416                    	je	short _$P_Chk_SW_Exit	;AN018; match flags not zero so should have something if optional bit is not on
 23032                                  
 23033                                  	;test	word [es:bx+_$P_Control_Blk.Match_Flag],_$P_Optional 
 23034                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYINIT compatibility)
 23035                                  	;test	word [es:bx],1
 23036                                  	; 12/12/2022
 23037                                  	;test	word [es:bx],_$P_Optional ;AN019; see if no value is valid
 23038 000016F6 26F60701                	test	byte [es:bx],_$P_Optional
 23039 000016FA 7510                    	jnz	short _$P_Chk_SW_Exit	;AN019; if so, then leave, else yell
 23040                                  
 23041 000016FC 2EC706[3514]0200        	mov	word [cs:_$P_RC],_$P_Op_Missing ;AC034; return required operand missing
 23042 00001703 EB07                    	jmp	short _$P_Chk_SW_Exit	;AN018;
 23043                                  
 23044                                  _$P_CSW00:				;AN000;
 23045 00001705 E89400                  	call	_$P_Check_Match_Flags	;AN000; process match flag
 23046 00001708 F8                      	clc				;AN000; indicate match
 23047                                  	;jmp	short _$P_Chk_SW_Single_Exit ;AN000;
 23048                                  	; 12/12/2022
 23049 00001709 C3                      	retn
 23050                                  
 23051                                  _$P_Chk_SW_Err0: 			;AN000;
 23052 0000170A F9                      	stc				;AN000; not found in switch synonym list
 23053                                  	;jmp	short _$P_Chk_SW_Single_Exit ;AN000;
 23054                                  	; 12/12/2022
 23055 0000170B C3                      	retn	
 23056                                  
 23057                                  _$P_Chk_SW_Exit: 			;AN000;
 23058 0000170C 50                      	push	ax			;AN000;
 23059 0000170D B003                    	mov	al,_$P_String		;AN000; set
 23060 0000170F B4FF                    	mov	ah,_$P_No_Tag		;AN000;    result
 23061 00001711 E80300                  	call	_$P_Fill_Result		;AN000; 	 buffer
 23062 00001714 58                      	pop	ax			;AN000;
 23063 00001715 F8                      	clc				;AN000;
 23064                                  _$P_Chk_SW_Single_Exit:			;AN000;
 23065 00001716 C3                      	retn				;AN000;
 23066                                  ;ELSE					;AN000;(of IF SwSW)
 23067                                  ;	stc				;AN000; this logic works when the SwSW
 23068                                  ;	retn				;AN000; is reset.
 23069                                  
 23070                                  ;***********************************************************************
 23071                                  ; _$P_Fill_Result
 23072                                  ;
 23073                                  ; Function: Fill the result buffer
 23074                                  ;
 23075                                  ; Input:    AH = Item tag
 23076                                  ;	    AL = type
 23077                                  ;		  AL = 1: CX,DX has 32bit number (CX = high)
 23078                                  ;		  AL = 2: DX has index(offset) into value list
 23079                                  ;		  AL = 6: DL has driver # (1-A, 2-B, ... , 26 - Z)
 23080                                  ;		  AL = 7: DX has year, CL has month and CH has date
 23081                                  ;		  AL = 8: DL has hours, DH has minutes, CL has seconds,
 23082                                  ;			  amd CH has hundredths
 23083                                  ;		  AL = else: cs:SI points to returned string buffer
 23084                                  ;	    ES:BX -> CONTROL block
 23085                                  ;
 23086                                  ; Output:   None
 23087                                  ;
 23088                                  ; Use:	_$P_Do_CAPS_String, _$P_Remove_Colon, _$P_Found_SYNONYM
 23089                                  ;
 23090                                  ; Vars: _$P_DX(W)
 23091                                  ;***********************************************************************
 23092                                  
 23093                                  _$P_Fill_Result:
 23094 00001717 57                      	push	di			;AN000;
 23095 00001718 268B7F04                	mov	di,[es:bx+_$P_Control_Blk.Result_Buf]
 23096                                  					;AN000; di points to result buffer
 23097 0000171C 2E893E[3914]            	mov	[cs:_$P_DX],di		;AC034; set returned result address
 23098 00001721 268805                  	mov	[es:di+_$P_Result_Blk.Type],al ;AN000; store type
 23099 00001724 26886501                	mov	[es:di+_$P_Result_Blk.Item_Tag],ah ;AN000; store item tag
 23100 00001728 50                      	push	ax			;AN000;
 23101 00001729 2EA1[4814]              	mov	ax,[cs:_$P_Found_SYNONYM] ;AC034; if yes,
 23102 0000172D 26894502                	mov	[es:di+_$P_Result_Blk.SYNONYM_Ptr],ax 
 23103                                  					;AN000;   then set it to the result
 23104 00001731 58                      	pop	ax			;AN000;
 23105                                  _$P_RLT04:				;AN000;
 23106 00001732 3C01                    	cmp	al,_$P_Number		;AN000; if number
 23107 00001734 750A                    	jne	short _$P_RLT00		;AN000;
 23108                                  
 23109                                  _$P_RLT02:				;AN000;
 23110 00001736 26895504                	mov	[es:di+_$P_Result_Blk.Picked_Val],dx ;AN000; then store 32bit
 23111 0000173A 26894D06                	mov	[es:di+_$P_Result_Blk.Picked_Val+2],cx ;AN000; number
 23112 0000173E EB5A                    	jmp	short _$P_RLT_Exit	;AN000;
 23113                                  
 23114                                  _$P_RLT00:				;AN000;
 23115 00001740 3C02                    	cmp	al,_$P_List_Idx		;AN000; if list index
 23116 00001742 7506                    	jne	short _$P_RLT01		;AN000;
 23117                                  
 23118 00001744 26895504                	mov	word [es:di+_$P_Result_Blk.Picked_Val],dx 
 23119                                  					;AN000; then store list index
 23120 00001748 EB50                    	jmp	short _$P_RLT_Exit	;AN000;
 23121                                  
 23122                                  _$P_RLT01:				;AN000;
 23123 0000174A 3C07                    	cmp	al,_$P_Date_F		;AN000; Date format ?
 23124 0000174C 74E8                    	je	short _$P_RLT02		;AN000;
 23125                                  
 23126 0000174E 3C08                    	cmp	al,_$P_Time_F		;AN000; Time format ?
 23127 00001750 74E4                    	je	short _$P_RLT02		;AN000;
 23128                                  
 23129 00001752 3C06                    	cmp	al,_$P_Drive		;AN000; drive format ?
 23130 00001754 7506                    	jne	short _$P_RLT03		;AN000;
 23131                                  
 23132 00001756 26885504                	mov	[es:di+_$P_Result_Blk.Picked_Val],dl ;AN000; store drive number
 23133 0000175A EB3E                    	jmp	short _$P_RLT_Exit	;AN000;
 23134                                  
 23135                                  _$P_RLT03:				;AN000;
 23136 0000175C 3C04                    	cmp	al,_$P_Complex		;AN000; complex format ?
 23137 0000175E 750F                    	jne	short _$P_RLT05		;AN000;
 23138                                  
 23139 00001760 2EA1[4214]              	mov	ax,[cs:_$P_SaveSI_Cmpx] ;AC034; then get pointer in command buffer
 23140 00001764 40                      	inc	ax			;AN000; skip left Parentheses
 23141 00001765 26894504                	mov	[es:di+_$P_Result_Blk.Picked_Val],ax ;AN000; store offset
 23142 00001769 268C5D06                	mov	[es:di+_$P_Result_Blk.Picked_Val+2],ds ;AN000; store segment
 23143 0000176D EB2B                    	jmp	short _$P_RLT_Exit	;AN000;
 23144                                  
 23145                                  _$P_RLT05:				;AN000;
 23146                                  ;------------------------  AL = 3, 5, or 9
 23147 0000176F 26897504                	mov	[es:di+_$P_Result_Blk.Picked_Val],si 
 23148                                  					;AN000; store offset of STRING_BUF
 23149 00001773 268C4D06                	mov	[es:di+_$P_Result_Blk.Picked_Val+2],cs 
 23150                                  					;AN031; store segment of STRING_BUF
 23151 00001777 50                      	push	ax			;AN000;
 23152 00001778 26F6470201              	test	byte [es:bx+_$P_Control_Blk.Function_Flag],_$P_CAP_File 
 23153                                  					;AN000; need CAPS by file table?
 23154 0000177D 7404                    	jz	short _$P_RLT_CAP00	;AN000;
 23155                                  
 23156 0000177F B004                    	mov	al,_$P_DOSTBL_File	;AN000; use file upper case table
 23157 00001781 EB09                    	jmp	short _$P_RLT_CAP02	;AN000;
 23158                                  
 23159                                  _$P_RLT_CAP00:				;AN000;
 23160 00001783 26F6470202              	test	byte [es:bx+_$P_Control_Blk.Function_Flag],_$P_CAP_Char 
 23161                                  					;AN000; need CAPS by char table ?
 23162 00001788 7405                    	jz	short _$P_RLT_CAP01	;AN000;
 23163                                  
 23164 0000178A B002                    	mov	al,_$P_DOSTBL_Char	;AN000; use character upper case table
 23165                                  _$P_RLT_CAP02:				;AN000;
 23166 0000178C E8E000                  	call	_$P_Do_CAPS_String	;AN000;  process CAPS along the table
 23167                                  _$P_RLT_CAP01:				;AN000;
 23168 0000178F 58                      	pop	ax			;AN000;
 23169 00001790 26F6470210              	test	byte [es:bx+_$P_Control_Blk.Function_Flag],_$P_Rm_Colon 
 23170                                  					;AN000; removing colon at end ?
 23171 00001795 7403                    	jz	short _$P_RLT_Exit	;AN000;
 23172                                  
 23173 00001797 E8AF00                  	call	_$P_Remove_Colon 	;AN000; then process it.
 23174                                  _$P_RLT_Exit:				;AN000;
 23175 0000179A 5F                      	pop	di			;AN000;
 23176 0000179B C3                      	retn				;AN000;
 23177                                  
 23178                                  ;***********************************************************************
 23179                                  ; _$P_Check_Match_Flags
 23180                                  ;
 23181                                  ; Function:  Check the mutch_flags and make the exit code and set the
 23182                                  ;	     result buffer
 23183                                  ;
 23184                                  ;	    Check for types in this order:
 23185                                  ;		Complex
 23186                                  ;		Date
 23187                                  ;		Time
 23188                                  ;		Drive
 23189                                  ;		Filespec
 23190                                  ;		Quoted String
 23191                                  ;		Simple String
 23192                                  ;
 23193                                  ; Input:     cs:SI -> _$P_STRING_BUF
 23194                                  ;	     ES:BX -> CONTROL block
 23195                                  ;
 23196                                  ; Output:    None
 23197                                  ;
 23198                                  ; Use:	     _$P_Value, P$_SValue, _$P_Simple_String, _$P_Date_Format
 23199                                  ;	     _$P_Time_Format, _$P_Complex_Format, _$P_File_Foemat
 23200                                  ;	     _$P_Drive_Format
 23201                                  ;***********************************************************************
 23202                                  
 23203                                  	; 25/10/2022 - Retro DOS v4.0
 23204                                  	; (MSDOS 5.0 IO.SYS - SYSINIT:19CFh)
 23205                                  
 23206                                  	; 12/12/2022
 23207                                  _$P_Check_Match_Flags:
 23208 0000179C 2EC606[D814]00          	mov	byte [cs:_$P_err_flag],_$P_NULL 
 23209                                  					;AN033;AC034;; clear filespec error flag.
 23210 000017A2 50                      	push	ax			;AN000;
 23211                                  	;mov	ax,[es:bx+_$P_Control_Blk.Match_Flag]
 23212 000017A3 268B07                  	mov	ax,[es:bx]		;AN000; load match flag(16bit) to ax
 23213 000017A6 09C0                    	or	ax,ax			;AC035; test ax for zero
 23214 000017A8 7518                    	jnz	short _$P_Mat		;AN000; (tm12)
 23215 000017AA 50                      	push	ax			;AN000; (tm12)
 23216 000017AB 53                      	push	bx			;AN000; (tm12)
 23217 000017AC 52                      	push	dx			;AN000; (tm12)
 23218 000017AD 57                      	push	di			;AN000; (tm12)
 23219 000017AE 2EC706[3514]0900        	mov	word [cs:_$P_RC],_$P_Syntax ;AC034; (tm12)
 23220 000017B5 B4FF                    	mov	ah,_$P_No_Tag		;AN000; (tm12)
 23221 000017B7 B003                    	mov	al,_$P_String		;AN000; (tm12)
 23222 000017B9 E85BFF                  	call	_$P_Fill_Result		;AN000; (tm12)
 23223 000017BC 5F                      	pop	di			;AN000; (tm12)
 23224 000017BD 5A                      	pop	dx			;AN000; (tm12)
 23225 000017BE 5B                      	pop	bx			;AN000; (tm12)
 23226 000017BF 58                      	pop	ax			;AN000; (tm12)
 23227                                  	; 12/12/2022
 23228                                  	;jmp	short _$P_Bridge 	;AC035; (tm12)
 23229                                  	; 12/12/2022
 23230                                  ;_$P_Mat: 				;AN000; (tm12)
 23231                                  	;jmp	short _$P_Match03	;AN025; (tm09)
 23232                                  _$P_Bridge:
 23233 000017C0 EB6E                    	jmp	short _$P_Match_Exit	;AN000; (tm02)
 23234                                  	
 23235                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 23236                                  	; (SYSINIT:19F9h)
 23237                                  	; 12/12/2022
 23238                                  	;nop	; db 90h
 23239                                  
 23240                                  ; 12/12/2022
 23241                                  _$P_Mat:
 23242                                  _$P_Match03:				;AN000;
 23243 000017C2 A90080                  	test	ax,_$P_Num_Val		;AN000; Numeric value
 23244 000017C5 7412                    	jz	short _$P_Match04	;AN000;
 23245                                  
 23246 000017C7 2EC706[3514]0000        	mov	word [cs:_$P_RC],_$P_No_Error ;AC034; assume no error
 23247 000017CE E82601                  	call	_$P_Value		;AN000; do process
 23248 000017D1 2E833E[3514]09          	cmp	word [cs:_$P_RC],_$P_Syntax ;AC034; if error, examine the next type
 23249 000017D7 7557                    	jne	short _$P_Match_Exit	;AN000;
 23250                                  _$P_Match04:				;AN000;
 23251 000017D9 A90040                  	test	ax,_$P_SNum_Val		;AN000; Signed numeric value
 23252 000017DC 7412                    	jz	short _$P_Match05	;AN000;
 23253                                  
 23254 000017DE 2EC706[3514]0000        	mov	word [cs:_$P_RC],_$P_No_Error ;AC034; assume no error
 23255 000017E5 E8EB00                  	call	_$P_SValue		;AN000; do process
 23256 000017E8 2E833E[3514]09          	cmp	word [cs:_$P_RC],_$P_Syntax ;AC034; if error, examine the next type
 23257 000017EE 7540                    	jne	short _$P_Match_Exit	;AN000;
 23258                                  _$P_Match05:				;AN000;
 23259 000017F0 A90001                  	test	ax,_$P_Drv_Only		;AN000; Drive only
 23260 000017F3 7415                    	jz	short _$P_Match06	;AN000;
 23261                                  
 23262 000017F5 2EC706[3514]0000        	mov	word [cs:_$P_RC],_$P_No_Error ;AC034; assume no error
 23263 000017FC E80F03                  	call	_$P_File_Format		;AN000; 1st, call file format
 23264 000017FF E89103                  	call	_$P_Drive_Format	;AN000; check drive format, next
 23265 00001802 2E833E[3514]09          	cmp	word [cs:_$P_RC],_$P_Syntax ;AC034; if error, examine the next type
 23266 00001808 7526                    	jne	short _$P_Match_Exit	;AN000;
 23267                                  _$P_Match06:				;AN000;
 23268 0000180A A90002                  	test	ax,_$P_File_Spc		;AN000; File spec
 23269 0000180D 7412                    	jz	short _$P_Match07	;AN000;
 23270                                  
 23271 0000180F 2EC706[3514]0000        	mov	word [cs:_$P_RC],_$P_No_Error ;AC034; assume no error
 23272 00001816 E8F502                  	call	_$P_File_Format		;AN000; do process
 23273 00001819 2E833E[3514]09          	cmp	word [cs:_$P_RC],_$P_Syntax ;AC034; if error, examine the next type
 23274 0000181F 750F                    	jne	short _$P_Match_Exit	;AN000;
 23275                                  _$P_Match07:				;AN000;
 23276 00001821 A90020                  	test	ax,_$P_Simple_S		;AN000; Simple string
 23277 00001824 740A                    	jz	short _$P_Match09	;AN000;
 23278                                  
 23279 00001826 2EC706[3514]0000        	mov	word [cs:_$P_RC],_$P_No_Error ;AC034; assume no error
 23280 0000182D E8D701                  	call	_$P_Simple_String	;AN000; do process
 23281                                  _$P_Match09:				;AN000;
 23282                                  _$P_Match_Exit:				;AN000;
 23283 00001830 2E833E[D814]01          	cmp	word [cs:_$P_err_flag],_$P_error_filespec ;AC034; bad filespec ?
 23284 00001836 750F                    	jne	short _$P_Match2_Exit	;AN033; no, continue
 23285 00001838 2E833E[3514]00          	cmp	word [cs:_$P_RC],_$P_No_Error ;AN033;AC034;; check for other errors ?
 23286 0000183E 7507                    	jne	short _$P_Match2_Exit	;AN033; no, continue
 23287 00001840 2EC706[3514]0900        	mov	word [cs:_$P_RC],_$P_Syntax ;AN033;AC034;; set error flag
 23288                                  _$P_Match2_Exit: 			;AN033;
 23289 00001847 58                      	pop	ax			;AN000;
 23290 00001848 C3                      	retn				;AN000;
 23291                                  
 23292                                  ;***********************************************************************
 23293                                  ; _$P_Remove_Colon;
 23294                                  ;
 23295                                  ; Function: Remove colon at end
 23296                                  ;
 23297                                  ; Input:    cs:SI points to string buffer to be examineed
 23298                                  ;
 23299                                  ; Output:   None
 23300                                  ;
 23301                                  ; Use:	_$P_Chk_DBCS
 23302                                  ;***********************************************************************
 23303                                  
 23304                                  _$P_Remove_Colon:
 23305 00001849 50                      	push	ax			;AN000;
 23306 0000184A 56                      	push	si			;AN000;
 23307                                  _$P_RCOL_Loop:				;AN000;
 23308 0000184B 2E8A04                  	mov	al,[cs:si]		;AN000; get character
 23309 0000184E 08C0                    	or	al,al			;AN000; end of string ?
 23310 00001850 741A                    	jz	short _$P_RCOL_Exit	;AN000; if yes, just exit
 23311                                  
 23312 00001852 3C3A                    	cmp	al,_$P_Colon		;AN000; is it colon ?
 23313 00001854 750D                    	jne	short _$P_RCOL00	;AN000;
 23314                                  
 23315 00001856 2E807C0100              	cmp	byte [cs:si+1],_$P_NULL ;AN000; if so, next is NULL ?
 23316 0000185B 7506                    	jne	short _$P_RCOL00	;AN000; no, then next char
 23317                                  
 23318 0000185D 2EC60400                	mov	byte [cs:si],_$P_NULL	;AN000; yes, remove colon
 23319 00001861 EB09                    	jmp	short _$P_RCOL_Exit	;AN000; and exit.
 23320                                  
 23321                                  _$P_RCOL00:				;AN000;
 23322 00001863 E84404                  	call	_$P_Chk_DBCS		;AN000; if not colon, then check if
 23323 00001866 7301                    	jnc	short _$P_RCOL01	;AN000; DBCS leading byte.
 23324                                  
 23325 00001868 46                      	inc	si			;AN000; if yes, skip trailing byte
 23326                                  _$P_RCOL01:				;AN000;
 23327 00001869 46                      	inc	si			;AN000; si points to next byte
 23328 0000186A EBDF                    	jmp	short _$P_RCOL_Loop	;AN000; loop until NULL encountered
 23329                                  
 23330                                  _$P_RCOL_Exit:				;AN000;
 23331 0000186C 5E                      	pop	si			;AN000;
 23332 0000186D 58                      	pop	ax			;AN000;
 23333 0000186E C3                      	retn				;AN000;
 23334                                  
 23335                                  ;***********************************************************************
 23336                                  ; _$P_Do_CAPS_String;
 23337                                  ;
 23338                                  ; Function: Perform capitalization along with the file case map table
 23339                                  ;	    or character case map table.
 23340                                  ;
 23341                                  ; Input:    AL = 2 : Use character table
 23342                                  ;	    AL = 4 : Use file table
 23343                                  ;	    cs:SI points to string buffer to be capitalized
 23344                                  ;
 23345                                  ; Output:   None
 23346                                  ;
 23347                                  ; Use:	_$P_Do_CAPS_Char, _$P_Chk_DBCS
 23348                                  ;***********************************************************************
 23349                                  
 23350                                  _$P_Do_CAPS_String:
 23351 0000186F 56                      	push	si			;AN000;
 23352 00001870 52                      	push	dx			;AN000;
 23353 00001871 88C2                    	mov	dl,al			;AN000; save info id
 23354                                  
 23355                                  _$P_DCS_Loop:				;AN000;
 23356 00001873 2E8A04                  	mov	al,[cs:si]		;AN000; load charater and
 23357 00001876 E83104                  	call	_$P_Chk_DBCS		;AN000; check if DBCS leading byte
 23358 00001879 720C                    	jc	short _$P_DCS00		;AN000; if yes, do not need CAPS
 23359                                  
 23360 0000187B 08C0                    	or	al,al			;AN000; end of string ?
 23361 0000187D 740C                    	jz	short _$P_DCS_Exit	;AN000; then exit.
 23362                                  
 23363 0000187F E80C00                  	call	_$P_Do_CAPS_Char 	;AN000; Here a SBCS char need to be CAPS
 23364 00001882 2E8804                  	mov	[cs:si],al		;AN000; stored upper case char to buffer
 23365 00001885 EB01                    	jmp	short _$P_DCS01		;AN000; process next
 23366                                  _$P_DCS00:				;AN000;
 23367 00001887 46                      	inc	si			;AN000; skip DBCS leading and trailing byte
 23368                                  _$P_DCS01:				;AN000;
 23369 00001888 46                      	inc	si			;AN000; si point to next byte
 23370 00001889 EBE8                    	jmp	short _$P_DCS_Loop	;AN000; loop until NULL encountered
 23371                                  _$P_DCS_Exit:				;AN000;
 23372 0000188B 5A                      	pop	dx			;AN000;
 23373 0000188C 5E                      	pop	si			;AN000;
 23374 0000188D C3                      	retn
 23375                                  
 23376                                  ;***********************************************************************
 23377                                  ; _$P_Do_CAPS_Char;
 23378                                  ;
 23379                                  ; Function: Perform capitalization along with the file case map table
 23380                                  ;	    or character case map table.
 23381                                  ;
 23382                                  ; Input:    DL = 2 : Use character table
 23383                                  ;	    DL = 4 : Use file table
 23384                                  ;	    AL = character to be capitalized
 23385                                  ;
 23386                                  ; Output:   None
 23387                                  ;
 23388                                  ; Use:	INT 21h /w AH=65h
 23389                                  ;***********************************************************************
 23390                                  
 23391                                  _$P_Do_CAPS_Char:
 23392 0000188E 3C80                    	cmp	al,_$P_ASCII80	;80h	;AN000; need upper case table ?
 23393 00001890 730C                    	jae	short _$P_DCC_Go	;AN000;
 23394                                  
 23395 00001892 3C61                    	cmp	al,"a"                  ;AN000; if no,
 23396 00001894 723C                    	jb	short _$P_CAPS_Ret	;AN000;   check if  "a" <= AL <= "z"
 23397                                  
 23398 00001896 3C7A                    	cmp	al,"z"                  ;AN000;
 23399 00001898 7738                    	ja	short _$P_CAPS_Ret	;AN000;   if yes, make CAPS
 23400                                  
 23401 0000189A 24DF                    	and	al,_$P_Make_Upper ;0DFh ;AN000;   else do nothing.
 23402 0000189C EB34                    	jmp	short _$P_CAPS_Ret	;AN000;
 23403                                  
 23404                                  _$P_DCC_Go:				;AN000;
 23405 0000189E 53                      	push	bx			;AN000;
 23406 0000189F 06                      	push	es			;AN000;
 23407 000018A0 57                      	push	di			;AN000;
 23408                                  
 23409                                  	;lea	di,[cs:_$P_Char_CAP_Ptr] ;AC034; or use char CAPS table ?
 23410 000018A1 8D3E[CA14]              	lea	di,[_$P_Char_CAP_Ptr]
 23411                                  _$P_DCC00:				;AN000;
 23412 000018A5 2E3815                  	cmp	[cs:di],dl		;AN000; already got table address ?
 23413 000018A8 7417                    	je	short _$P_DCC01		;AN000; if no,
 23414                                  
 23415                                  ;In this next section, ES will be used to pass a 5 byte workarea to INT 21h,
 23416                                  ; the GET COUNTYRY INFO call. This usage of ES is required by the function
 23417                                  ; call, regardless of what base register is currently be defined as cs.
 23418                                  
 23419 000018AA 50                      	push	ax			;AN000; get CAPS table thru DOS call
 23420 000018AB 51                      	push	cx			;AN000;
 23421 000018AC 52                      	push	dx			;AN000;
 23422                                  
 23423 000018AD 0E                      	push	cs			;AC036; pass current base seg into
 23424                                  					;(Note: this used to push CS.  BUG...
 23425 000018AE 07                      	pop	es			;AN000;   ES reg, required for
 23426                                  					;get extended country information
 23427 000018AF B465                    	mov	ah,_$P_DOS_Get_TBL	;AN000; get extended CDI
 23428 000018B1 88D0                    	mov	al,dl			;AN000; upper case table
 23429 000018B3 BBFFFF                  	mov	bx,_$P_DOSTBL_Def	;AN000; get active CON
 23430 000018B6 B90500                  	mov	cx,_$P_DOSTBL_BL 	;AN000; buffer length
 23431 000018B9 BAFFFF                  	mov	dx,_$P_DOSTBL_Def	;AN000; get for default code page
 23432                                  					;DI already set to point to buffer
 23433 000018BC CD21                    	int	21h			;AN000; es:di point to buffer that
 23434                                  					;now has been filled in with info
 23435 000018BE 5A                      	pop	dx			;AN000;
 23436 000018BF 59                      	pop	cx			;AN000;
 23437 000018C0 58                      	pop	ax			;AN000;
 23438                                  
 23439                                  _$P_DCC01:				;AN000;
 23440                                  
 23441                                  ;In this next section, ES will be used as the base of the XLAT table, provided
 23442                                  ; by the previous GET COUNTRY INFO DOS call.  This usage of ES is made
 23443                                  ; regardless of which base reg is currently the cs reg.
 23444                                  
 23445 000018C1 2E8B5D01                	mov	bx,[cs:di+_$P_DOS_TBL.Off] ;AN000; get offset of table
 23446 000018C5 2E8E4503                	mov	es,[cs:di+_$P_DOS_TBL.Seg] ;AN000; get segment of table
 23447 000018C9 43                      	inc	bx			;AC035; add '2' to
 23448 000018CA 43                      	inc	bx			;AC035;  BX reg
 23449                                  					;AN000; skip length field
 23450 000018CB 2C80                    	sub	al,_$P_ASCII80 ; 80h	;AN000; make char to index
 23451                                  	;xlat	es:[bx] 		;AN000; perform case map
 23452 000018CD 26                      	es
 23453 000018CE D7                      	xlat
 23454 000018CF 5F                      	pop	di			;AN000;
 23455 000018D0 07                      	pop	es			;AN000;
 23456 000018D1 5B                      	pop	bx			;AN000;
 23457                                  _$P_CAPS_Ret:				;AN000;
 23458 000018D2 C3                      	retn				;AN000;
 23459                                  
 23460                                  ;***********************************************************************
 23461                                  ; _$P_Value / _$P_SValue
 23462                                  ;
 23463                                  ; Function:  Make 32bit value from cs:SI and see value list
 23464                                  ;	     and make result buffer.
 23465                                  ;	     _$P_SValue is an entry point for the signed value
 23466                                  ;	     and this will simply call _$P_Value after the handling
 23467                                  ;	     of the sign character, "+" or "-"
 23468                                  ;
 23469                                  ; Input:     cs:SI -> _$P_STRING_BUF
 23470                                  ;	     ES:BX -> CONTROL block
 23471                                  ;
 23472                                  ; Output:    None
 23473                                  ;
 23474                                  ; Use:	_$P_Fill_Result, _$P_Check_OVF
 23475                                  ;
 23476                                  ; Vars: _$P_RC(W), _$P_Flags(RW)
 23477                                  ;***********************************************************************
 23478                                  
 23479                                  	; 26/10/2022 - Retro DOS v4.0
 23480                                  	; (MSDOS 5.0 IO.SYS - SYSINIT:1B0Bh)
 23481                                  
 23482                                  _$P_SValue:				;AN000; when signed value here
 23483 000018D3 50                      	push	ax			;AN000;
 23484 000018D4 2E800E[4114]80          	or	byte [cs:_$P_Flags2],_$P_Signed ;AC034; indicate a signed numeric
 23485 000018DA 2E8026[4114]FD          	and	byte [cs:_$P_Flags2],0FFh-_$P_Neg ;AC034; assume positive value
 23486 000018E0 2E8A04                  	mov	al,[cs:si]		;AN000; get sign
 23487 000018E3 3C2B                    	cmp	al,_$P_Plus		;AN000; "+" ?
 23488 000018E5 740A                    	je	short _$P_SVal00	;AN000;
 23489                                  
 23490 000018E7 3C2D                    	cmp	al,_$P_Minus		;AN000; "-" ?
 23491 000018E9 7507                    	jne	short _$P_Sval01	;AN000; else
 23492                                  
 23493 000018EB 2E800E[4114]02          	or	byte [cs:_$P_Flags2],_$P_Neg ;AC034; set this is negative value
 23494                                  _$P_SVal00:				;AN000;
 23495 000018F1 46                      	inc	si			;AN000; skip sign char
 23496                                  _$P_Sval01:				;AN000;
 23497 000018F2 E80200                  	call	_$P_Value		;AN000; and process value
 23498 000018F5 58                      	pop	ax			;AN000;
 23499 000018F6 C3                      	retn
 23500                                  
 23501                                  ;***********************************************************************
 23502                                  
 23503                                  	; 26/10/2022
 23504                                  _$P_Value:				;AN000;
 23505 000018F7 50                      	push	ax			;AN000;
 23506 000018F8 51                      	push	cx			;AN000;
 23507 000018F9 52                      	push	dx			;AN000;
 23508 000018FA 56                      	push	si			;AN000;
 23509 000018FB 31C9                    	xor	cx,cx			;AN000; cx = higher 16 bits
 23510 000018FD 31D2                    	xor	dx,dx			;AN000; dx = lower 16 bits
 23511 000018FF 53                      	push	bx			;AN000; save control pointer
 23512                                  _$P_Value_Loop:				;AN000;
 23513 00001900 2E8A04                  	mov	al,[cs:si]		;AN000; get character
 23514 00001903 08C0                    	or	al,al			;AN000; end of line ?
 23515 00001905 7442                    	jz	short _$P_Value00	;AN000;
 23516                                  
 23517 00001907 E8F000                  	call	_$P_0099 		;AN000; make asc(0..9) to bin(0..9)
 23518 0000190A 7239                    	jc	short _$P_Value_Err0	;AN000;
 23519                                  
 23520 0000190C 30E4                    	xor	ah,ah			;AN000;
 23521 0000190E 89C5                    	mov	bp,ax			;AN000; save binary number
 23522 00001910 D1E2                    	shl	dx,1			;AN000; to have 2*x
 23523 00001912 D1D1                    	rcl	cx,1			;AN000; shift left w/ carry
 23524 00001914 E8D100                  	call	_$P_Check_OVF		;AN000; Overflow occurred ?
 23525 00001917 722C                    	jc	short _$P_Value_Err0	;AN000; then error, exit
 23526                                  
 23527 00001919 89D3                    	mov	bx,dx			;AN000; save low(2*x)
 23528 0000191B 89C8                    	mov	ax,cx			;AN000; save high(2*x)
 23529 0000191D D1E2                    	shl	dx,1			;AN000; to have 4*x
 23530 0000191F D1D1                    	rcl	cx,1			;AN000; shift left w/ carry
 23531 00001921 E8C400                  	call	_$P_Check_OVF		;AN000; Overflow occurred ?
 23532 00001924 721F                    	jc	short _$P_Value_Err0	;AN000; then error, exit
 23533                                  
 23534 00001926 D1E2                    	shl	dx,1			;AN000; to have 8*x
 23535 00001928 D1D1                    	rcl	cx,1			;AN000; shift left w/ carry
 23536 0000192A E8BB00                  	call	_$P_Check_OVF		;AN000; Overflow occurred ?
 23537 0000192D 7216                    	jc	short _$P_Value_Err0	;AN000; then error, exit
 23538                                  
 23539 0000192F 01DA                    	add	dx,bx			;AN000; now have 10*x
 23540 00001931 11C1                    	adc	cx,ax			;AN000; 32bit ADD
 23541 00001933 E8B200                  	call	_$P_Check_OVF		;AN000; Overflow occurred ?
 23542 00001936 720D                    	jc	short _$P_Value_Err0	;AN000; then error, exit
 23543                                  
 23544 00001938 01EA                    	add	dx,bp			;AN000; Add the current one degree decimal
 23545 0000193A 83D100                  	adc	cx,0			;AN000; if carry, add 1 to high 16bit
 23546 0000193D E8A800                  	call	_$P_Check_OVF		;AN000; Overflow occurred ?
 23547 00001940 7203                    	jc	short _$P_Value_Err0	;AN000; then error, exit
 23548                                  
 23549 00001942 46                      	inc	si			;AN000; update pointer
 23550 00001943 EBBB                    	jmp	short _$P_Value_Loop	;AN000; loop until NULL encountered
 23551                                  ;
 23552                                  _$P_Value_Err0:				;AN000;
 23553 00001945 5B                      	pop	bx			;AN000;
 23554 00001946 E98C00                  	jmp	_$P_Value_Err		;AN000; Bridge
 23555                                  ;
 23556                                  _$P_Value00:				;AN000;
 23557 00001949 5B                      	pop	bx			;AN000; restore control pointer
 23558 0000194A 2EF606[4114]02          	test	byte [cs:_$P_Flags2],_$P_Neg ;AC034; here cx,dx = 32bit value
 23559 00001950 740A                    	jz	short _$P_Value01	;AN000; was it negative ?
 23560                                  
 23561 00001952 F7D1                    	not	cx			;AN000; +
 23562 00001954 F7D2                    	not	dx			;AN000; |- Make 2's complement
 23563 00001956 83C201                  	add	dx,1			;AN000; |
 23564 00001959 83D100                  	adc	cx,0			;AN000; +
 23565                                  
 23566                                  _$P_Value01:				;AN000; / nval =0
 23567 0000195C 268B7706                	mov	si,[es:bx+_$P_Control_Blk.Value_List] ;AN000; si points to value list
 23568 00001960 268A04                  	mov	al,[es:si]		;AN000; get nval
 23569 00001963 3C00                    	cmp	al,_$P_nval_None 	;AN000; no value list ?
 23570 00001965 7506                    	jne	short _$P_Value02	;AN000;
 23571                                  
 23572 00001967 B001                    	mov	al,_$P_Number		;AN000; Set type
 23573 00001969 B4FF                    	mov	ah,_$P_No_Tag		;AN000; No ITEM_TAG set
 23574 0000196B EB73                    	jmp	short _$P_Value_Exit	;AN000;
 23575                                  
 23576                                  	; 26/10/2022 (MSDOS 5.0 IO.SYS, SYSINIT compatibility)
 23577                                  	; (SYSINIT:1BA5h)
 23578                                  	; 12/12/2022
 23579                                  	;nop	; db  90h
 23580                                  
 23581                                  _$P_Value02:				;AN000; / nval = 1
 23582                                  ;IF	Val1SW				;AN000;(Check if value list id #1 is supported)
 23583                                  ;(tm07) cmp	al,_$P_nval_Range	;AN000; have range list ?
 23584                                  ;(tm07) jne	short _$P_Value03	;AN000;
 23585                                  
 23586 0000196D 46                      	inc	si			;AN000;
 23587 0000196E 268A04                  	mov	al,[es:si]		;AN000; al = number of range
 23588 00001971 3C00                    	cmp	al,_$P_No_nrng		;AN000; (tm07)
 23589 00001973 7460                    	je	short _$P_Value03	;AN000; (tm07)
 23590                                  
 23591 00001975 46                      	inc	si			;AN000; si points to 1st item_tag
 23592                                  _$P_Val02_Loop:				;AN000;
 23593 00001976 2EF606[4114]80          	test	byte [cs:_$P_Flags2],_$P_Signed ;AC034;
 23594 0000197C 751E                    	jnz	short _$P_Val02_Sign	;AN000;
 23595                                  
 23596 0000197E 263B4C03                	cmp	cx,[es:si+_$P_Val_List.Val_XH] ;AN000; comp cx with XH
 23597 00001982 7236                    	jb	short _$P_Val02_Next	;AN000;
 23598 00001984 7706                    	ja	short _$P_Val_In	;AN000;
 23599                                  
 23600 00001986 263B5401                	cmp	dx,[es:si+_$P_Val_List.Val_XL] ;AN000; comp dx with XL
 23601 0000198A 722E                    	jb	short _$P_Val02_Next	;AN000;
 23602                                  
 23603                                  _$P_Val_In:				;AN000;
 23604 0000198C 263B4C07                	cmp	cx,[es:si+_$P_Val_List.Val_YH] ;AN000; comp cx with YH (tm01)
 23605 00001990 7728                    	ja	short _$P_Val02_Next	;AN000;
 23606 00001992 723A                    	jb	short _$P_Val_Found	;AN000;
 23607                                  
 23608 00001994 263B5405                	cmp	dx,[es:si+_$P_Val_List.Val_YL] ;AN000; comp dx with YL
 23609 00001998 7720                    	ja	short _$P_Val02_Next	;AN000;
 23610                                  
 23611 0000199A EB32                    	jmp	short _$P_Val_Found	;AN000;
 23612                                  
 23613                                  _$P_Val02_Sign:				;AN000;
 23614 0000199C 263B4C03                	cmp	cx,[es:si+_$P_Val_List.Val_XH]	;AN000; comp cx with XH
 23615 000019A0 7C18                    	jl	short _$P_Val02_Next	;AN000;
 23616 000019A2 7F06                    	jg	short _$P_SVal_In	;AN000;
 23617                                  
 23618 000019A4 263B5401                	cmp	dx,[es:si+_$P_Val_List.Val_XL]	;AN000; comp dx with XL
 23619 000019A8 7C10                    	jl	short _$P_Val02_Next	;AN000;
 23620                                  
 23621                                  _$P_SVal_In:				;AN000;
 23622 000019AA 263B4C07                	cmp	cx,[es:si+_$P_Val_List.Val_YH]	;AN000; comp cx with YH
 23623 000019AE 7F0A                    	jg	short _$P_Val02_Next	;AN000;
 23624                                  
 23625 000019B0 7C1C                    	jl	short _$P_Val_Found	;AN000;
 23626                                  
 23627 000019B2 263B5405                	cmp	dx,[es:si+_$P_Val_List.Val_YL]	;AN000; comp dx with YL
 23628 000019B6 7F02                    	jg	short _$P_Val02_Next	;AN000;
 23629                                  
 23630 000019B8 EB14                    	jmp	short _$P_Val_Found	;AN000;
 23631                                  
 23632                                  _$P_Val02_Next:				;AN000;
 23633 000019BA 83C609                  	add	si,_$P_Len_Range 	;AN000;
 23634 000019BD FEC8                    	dec	al			;AN000; loop nrng times in AL
 23635 000019BF 75B5                    	jne	short _$P_Val02_Loop	;AN000;
 23636                                  					; / Not found
 23637 000019C1 2EC706[3514]0600        	mov	word [cs:_$P_RC],_$P_Out_Of_Range ;AC034;
 23638 000019C8 B001                    	mov	al,_$P_Number		;AN000;
 23639 000019CA B4FF                    	mov	ah,_$P_No_Tag		;AN000; No ITEM_TAG set
 23640 000019CC EB12                    	jmp	short _$P_Value_Exit	;AN000;
 23641                                  
 23642                                  _$P_Val_Found:				;AN000;
 23643 000019CE B001                    	mov	al,_$P_Number		;AN000;
 23644 000019D0 268A24                  	mov	ah,[es:si]		;AN000; found ITEM_TAG set
 23645 000019D3 EB0B                    	jmp	short _$P_Value_Exit	;AN000;
 23646                                  
 23647                                  _$P_Value03:				;AN000; / nval = 2
 23648                                  
 23649                                  ;IF	Val2SW				;AN000;(Check if value list id #2 is supported)
 23650                                  ;;;;	cmp	al,$P_nval_Value	; have match list ? ASSUME nval=2,
 23651                                  ;;;;	jne	$P_Value04		; even if it is 3 or more.
 23652                                  ;(tm07) inc	si			;AN000;
 23653                                  ;(tm07) mov	al,es:[si]		;AN000; al = nrng
 23654                                  ;	mov	ah,$P_Len_Range 	;AN000;
 23655                                  ;	mul	ah			;AN000;  Skip nrng field
 23656                                  ;	inc	ax			;AN000;
 23657                                  ;	add	si,ax			;AN000; si points to nnval
 23658                                  ;	mov	al,es:[si]		;AN000; get nnval
 23659                                  ;	inc	si			;AN000; si points to 1st item_tag
 23660                                  ;$P_Val03_Loop:				;AN000;
 23661                                  ;	cmp	cx,es:[si+$P_Val_XH]	;AN000; comp cx with XH
 23662                                  ;	jne	$P_Val03_Next		;AN000;
 23663                                  ;
 23664                                  ;	cmp	dx,es:[si+$P_Val_XL]	;AN000; comp dx with XL
 23665                                  ;	je	$P_Val_Found		;AN000;
 23666                                  ;
 23667                                  ;$P_Val03_Next:				;AN000;
 23668                                  ;	add	si,$P_Len_Value 	;AN000; points to next value choice
 23669                                  ;	dec	al			;AN000; loop nval times in AL
 23670                                  ;	jne	$P_Val03_Loop		;AN000;
 23671                                  ;					;AN000; / Not found
 23672                                  ;	mov	psdata_seg:$P_RC,$P_Not_in_Val ;AC034;
 23673                                  ;	mov	al,$P_Number		;AN000;
 23674                                  ;	mov	ah,$P_No_Tag		;AN000; No ITEM_TAG set
 23675                                  ;	jmp	short $P_Value_Exit	;AN000;
 23676                                  ;
 23677                                  ;ENDIF					;AN000;(of Val2SW)
 23678                                  ;$P_Value04:
 23679                                  
 23680                                  _$P_Value_Err:				;AN000;
 23681 000019D5 2EC706[3514]0900        	mov	word [cs:_$P_RC],_$P_Syntax ;AC034;
 23682 000019DC B003                    	mov	al,_$P_String		;AN000; Set type
 23683 000019DE B4FF                    	mov	ah,_$P_No_Tag		;AN000; No ITEM_TAG set
 23684                                  _$P_Value_Exit:				;AN000;
 23685 000019E0 E834FD                  	call	_$P_Fill_Result		;AN000;
 23686 000019E3 5E                      	pop	si			;AN000;
 23687 000019E4 5A                      	pop	dx			;AN000;
 23688 000019E5 59                      	pop	cx			;AN000;
 23689 000019E6 58                      	pop	ax			;AN000;
 23690 000019E7 C3                      	retn				;AN000;
 23691                                  
 23692                                  ; 28/03/2019 - Retro DOS v4.0
 23693                                  
 23694                                  ;***********************************************************************
 23695                                  ; _$P_Check_OVF
 23696                                  ;
 23697                                  ; Function:  Check if overflow is occurred with consideration of
 23698                                  ;	     signed or un-signed numeric value
 23699                                  ;
 23700                                  ; Input:     Flag register
 23701                                  ;
 23702                                  ; Output:    CY = 1  :	Overflow
 23703                                  ;
 23704                                  ; Vars:     _$P_Flags(R)
 23705                                  ;***********************************************************************
 23706                                  
 23707                                  	; 26/10/2022
 23708                                  _$P_Check_OVF:
 23709 000019E8 9C                      	pushf				;AN000;
 23710 000019E9 2EF606[4114]02          	test	byte [cs:_$P_Flags2],_$P_Neg ;AC034; is it negative value ?
 23711 000019EF 7502                    	jnz	short _$P_COVF 		;AN000; if no, check overflow
 23712                                  
 23713 000019F1 9D                      	popf				;AN000; by the CY bit
 23714 000019F2 C3                      	retn				;AN000;
 23715                                  
 23716                                  _$P_COVF:				;AN000;
 23717 000019F3 9D                      	popf				;AN000; else,
 23718 000019F4 7002                    	jo	short _$P_COVF00	;AN000; check overflow by the OF
 23719                                  
 23720 000019F6 F8                      	clc				;AN000; indicate it with CY bit
 23721 000019F7 C3                      	retn				;AN000; CY=0 means no overflow
 23722                                  
 23723                                  _$P_COVF00:				;AN000;
 23724 000019F8 F9                      	stc				;AN000; and CY=1 means overflow
 23725 000019F9 C3                      	retn				;AN000;
 23726                                  
 23727                                  ;***********************************************************************
 23728                                  ; _$P_0099;
 23729                                  ;
 23730                                  ; Function:  Make ASCII 0-9 to Binary 0-9
 23731                                  ;
 23732                                  ; Input:     AL = character code
 23733                                  ;
 23734                                  ; Output:    CY = 1 : AL is not number
 23735                                  ;	     CY = 0 : AL contains binary value
 23736                                  ;***********************************************************************
 23737                                  
 23738                                  _$P_0099:
 23739 000019FA 3C30                    	cmp	al,"0"                  ;AN000;
 23740                                  	;jb	short _$P_0099Err	;AN000; must be 0 =< al =< 9
 23741                                  	; 12/12/2022
 23742 000019FC 7208                    	jb	short _$P_0099Err2  ; cf=1
 23743                                  
 23744 000019FE 3C39                    	cmp	al,"9"                  ;AN000;
 23745 00001A00 7703                    	ja	short _$P_0099Err	;AN000; must be 0 =< al =< 9
 23746                                  
 23747 00001A02 2C30                    	sub	al,"0"                  ;AN000; make char -> bin
 23748                                  	; 12/12/2022
 23749                                  	; cf=0	
 23750                                  	;clc				;AN000; indicate no error
 23751 00001A04 C3                      	retn				;AN000;
 23752                                  
 23753                                  _$P_0099Err:				;AN000;
 23754 00001A05 F9                      	stc				;AN000; indicate error
 23755                                  _$P_0099Err2: ; 12/12/2022	
 23756 00001A06 C3                      	retn				;AN000;
 23757                                  
 23758                                  ;***********************************************************************
 23759                                  ; _$P_Simple_String
 23760                                  ;
 23761                                  ; Function:  See value list for the simple string
 23762                                  ;	     and make result buffer.
 23763                                  ;
 23764                                  ; Input:     cs:SI -> _$P_STRING_BUF
 23765                                  ;	     ES:BX -> CONTROL block
 23766                                  ;
 23767                                  ; Output:    None
 23768                                  ;
 23769                                  ; Use:	_$P_Fill_Result, _$P_String_Comp
 23770                                  ;
 23771                                  ; Vars: _$P_RC(W)
 23772                                  ;***********************************************************************
 23773                                  
 23774                                  _$P_Simple_String:
 23775 00001A07 50                      	push	ax			;AN000;
 23776 00001A08 53                      	push	bx			;AN000;
 23777 00001A09 52                      	push	dx			;AN000;
 23778 00001A0A 57                      	push	di			;AN000;
 23779 00001A0B 268B7F06                	mov	di,[es:bx+_$P_Control_Blk.Value_List] ;AN000; di points to value list
 23780 00001A0F 268A05                  	mov	al,[es:di]		;AN000; get nval
 23781 00001A12 08C0                    	or	al,al			;AN000; no value list ?
 23782 00001A14 7504                    	jnz	short _$P_Sim00		;AN000; then
 23783                                  
 23784 00001A16 B4FF                    	mov	ah,_$P_No_Tag		;AN000; No ITEM_TAG set
 23785 00001A18 EB4C                    	jmp	short _$P_Sim_Exit	;AN000; and set result buffer
 23786                                  
 23787                                  _$P_Sim00:				;AN000;
 23788                                  ;IF	Val3SW+KeySW			;AN000;(Check if keyword or value list id #3 is supported)
 23789 00001A1A 3C03                    	cmp	al,_$P_nval_String	;AN000; String choice list provided ?
 23790 00001A1C 753F                    	jne	short _$P_Sim01		;AN000; if no, syntax error
 23791                                  
 23792 00001A1E 47                      	inc	di			;AN000;
 23793 00001A1F 268A05                  	mov	al,[es:di]		;AN000; al = nrng
 23794 00001A22 B409                    	mov	ah,_$P_Len_Range 	;AN000;
 23795 00001A24 F6E4                    	mul	ah			;AN000; Skip nrng field
 23796 00001A26 40                      	inc	ax			;AN000; ax = (nrng*9)+1
 23797 00001A27 01C7                    	add	di,ax			;AN000; di points to nnval
 23798 00001A29 268A05                  	mov	al,[es:di]		;AN000; get nnval
 23799 00001A2C B405                    	mov	ah,_$P_Len_Value 	;AN000;
 23800 00001A2E F6E4                    	mul	ah			;AN000; Skip nnval field
 23801 00001A30 40                      	inc	ax			;AN000; ax = (nnval*5)+1
 23802 00001A31 01C7                    	add	di,ax			;AN000; di points to nstrval
 23803 00001A33 268A05                  	mov	al,[es:di]		;AN000; get nstrval c
 23804 00001A36 47                      	inc	di			;AC035; add '2' to
 23805 00001A37 47                      	inc	di			;AC035;  DI reg
 23806                                  					;AN000; di points to 1st string in list
 23807                                  _$P_Sim_Loop:				;AN000;
 23808 00001A38 268B2D                  	mov	bp,[es:di]		;AN000; get string pointer
 23809 00001A3B E83200                  	call	_$P_String_Comp		;AN000; compare it with operand
 23810 00001A3E 7312                    	jnc	short _$P_Sim_Found	;AN000; found on list ?
 23811                                  
 23812 00001A40 83C703                  	add	di,_$P_Len_String ; 3	;AN000; if no, point to next choice
 23813 00001A43 FEC8                    	dec	al			;AN000; loop nstval times in AL
 23814 00001A45 75F1                    	jne	short _$P_Sim_Loop	;AN000;
 23815                                  					;AN000; / Not found
 23816 00001A47 2EC706[3514]0800        	mov	word [cs:_$P_RC],_$P_Not_In_Str ;AC034;
 23817 00001A4E B4FF                    	mov	ah,_$P_No_Tag		;AN000; No ITEM_TAG set
 23818 00001A50 EB14                    	jmp	short _$P_Sim_Exit	;AN000;
 23819                                  
 23820                                  _$P_Sim_Found:				;AN000;
 23821 00001A52 268A65FF                	mov	ah,[es:di-1]		;AN000; set item_tag
 23822 00001A56 B002                    	mov	al,_$P_List_Idx		;AN000;
 23823 00001A58 268B15                  	mov	dx,[es:di]		;AN000; get address of STRING
 23824 00001A5B EB0B                    	jmp	short _$P_Sim_Exit0	;AN000;
 23825                                  ;ENDIF					;AN000;(of Val3SW+KeySW)
 23826                                  _$P_Sim01:				;AN000;
 23827 00001A5D 2EC706[3514]0900        	mov	word [cs:_$P_RC],_$P_Syntax ;AC034;
 23828 00001A64 B4FF                    	mov	ah,_$P_No_Tag		;AN000; No ITEM_TAG set
 23829                                  _$P_Sim_Exit:				;AN000;
 23830 00001A66 B003                    	mov	al,_$P_String		;AN000; Set type
 23831                                  _$P_Sim_Exit0:				;AN000;
 23832 00001A68 E8ACFC                  	call	_$P_Fill_Result		;AN000;
 23833 00001A6B 5F                      	pop	di			;AN000;
 23834 00001A6C 5A                      	pop	dx			;AN000;
 23835 00001A6D 5B                      	pop	bx			;AN000;
 23836 00001A6E 58                      	pop	ax			;AN000;
 23837 00001A6F C3                      	retn				;AN000;
 23838                                  
 23839                                  ;***********************************************************************
 23840                                  ; _$P_String_Comp:
 23841                                  ;
 23842                                  ; Function:  Compare two string
 23843                                  ;
 23844                                  ; Input:     cs:SI -> 1st string
 23845                                  ;	     ES:BP -> 2nd string  (Must be upper case)
 23846                                  ;	     ES:BX -> CONTROL block
 23847                                  ;
 23848                                  ; Output:    CY = 1 if not match
 23849                                  ;
 23850                                  ; Use:	_$P_Chk_DBCS, _$P_Do_CAPS_Char
 23851                                  ;
 23852                                  ; Vars: _$P_KEYor_SW_Ptr(W), _$P_Flags(R). _$P_KEYorSW_Ptr
 23853                                  ;***********************************************************************
 23854                                  
 23855                                  _$P_String_Comp:
 23856 00001A70 50                      	push	ax			;AN000;
 23857 00001A71 55                      	push	bp			;AN000;
 23858 00001A72 52                      	push	dx			;AN000;
 23859 00001A73 56                      	push	si			;AN000;
 23860 00001A74 B202                    	mov	dl,_$P_DOSTBL_Char	;AN000; use character case map table
 23861                                  _$P_SCOM_Loop:				;AN000;
 23862 00001A76 2E8A04                  	mov	al,[cs:si]		;AN000; get command character
 23863 00001A79 E82E02                  	call	_$P_Chk_DBCS		;AN000; DBCS ?
 23864 00001A7C 723A                    	jc	short _$P_SCOM00	;AN000; yes,DBCS
 23865                                  
 23866 00001A7E E80DFE                  	call	_$P_Do_CAPS_Char 	;AN000; else, upper case map before comparison
 23867                                  ;IF KeySW+SwSW				;AN000;(Check if keyword or switch is supported)
 23868 00001A81 2EF606[4114]08          	test	byte [cs:_$P_Flags2],_$P_Key_Cmp ;AC034; keyword search ?
 23869 00001A87 740D                    	jz	short _$P_SCOM04	;AN000;
 23870                                  
 23871 00001A89 3C3D                    	cmp	al,_$P_Keyword		;AN000; "=" is delimiter
 23872 00001A8B 751F                    	jne	short _$P_SCOM03	;AN000; IF "=" on command line AND  (bp+1=> char after the "=" in synonym list)
 23873                                  
 23874 00001A8D 26807E0100              	cmp	byte [es:bp+1],_$P_NULL ;AN021;  at end of keyword string in the control block THEN
 23875 00001A92 756D                    	jne	short _$P_SCOM_Differ	;AN021;
 23876                                  
 23877 00001A94 EB13                    	jmp	short _$P_SCOM05 	;AN000; keyword found in synonym list
 23878                                  
 23879                                  _$P_SCOM04:				;AN000;
 23880 00001A96 2EF606[4114]10          	test	byte [cs:_$P_Flags2],_$P_SW_Cmp ;AC034; switch search ?
 23881 00001A9C 740E                    	jz	short _$P_SCOM03	;AN000;
 23882                                  
 23883 00001A9E 3C3A                    	cmp	al,_$P_Colon		;AN000; ":" is delimiter, at end of switch on command line
 23884 00001AA0 750A                    	jne	short _$P_SCOM03	;AN000; continue compares
 23885                                  
 23886                                  	; 26/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 23887                                  	;cmp	byte [es:bp+0],_$P_NULL
 23888                                  	; 11/12/2022
 23889 00001AA2 26807E0000              	cmp	byte [es:bp],_$P_NULL	;AN021; IF at end of switch on command AND
 23890 00001AA7 7558                    	jne	short _$P_SCOM_Differ	;AN021;   at end of switch string in the control block THEN
 23891                                  
 23892                                  _$P_SCOM05:				;AN000;   found a match
 23893 00001AA9 46                      	inc	si			;AN000; si points to just after "=" or ":"
 23894 00001AAA EB58                    	jmp	short _$P_SCOM_Same	;AN000; exit
 23895                                  
 23896                                  _$P_SCOM03:				;AN000;
 23897                                  ;ENDIF					;AN000;(of KeySW+SwSW)
 23898                                  	; 26/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 23899                                  	;cmp	al,[es:bp+0]
 23900                                  	; 11/12/2022
 23901 00001AAC 263A4600                	cmp	al,[es:bp]		;AN000; compare operand w/ a synonym
 23902 00001AB0 751B                    	jne	short _$P_SCOM_Differ0 	;AN000; if different, check ignore colon option
 23903                                  
 23904 00001AB2 08C0                    	or	al,al			;AN000; end of line
 23905 00001AB4 744E                    	jz	short _$P_SCOM_Same	;AN000; if so, exit
 23906                                  
 23907                                  	; 12/12/2022
 23908                                  	;inc	si			;AN000; update operand pointer
 23909                                  	;inc	bp			;AN000;    and synonym pointer
 23910                                  	; 26/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 23911 00001AB6 EB11                    	jmp	short _$P_SCOM01 	;AN000; loop until NULL or "=" or ":" found in case
 23912                                  
 23913                                  _$P_SCOM00:				;AN000; Here al is DBCS leading byte
 23914                                  	; 26/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 23915                                  	;cmp	al,[es:bp+0]
 23916                                  	; 11/12/2022
 23917 00001AB8 263A4600                	cmp	al,[es:bp]		;AN000; compare leading byte
 23918 00001ABC 7543                    	jne	short _$P_SCOM_Differ	;AN000; if not match, say different
 23919                                  
 23920 00001ABE 46                      	inc	si			;AN000; else, load next byte
 23921 00001ABF 2E8A04                  	mov	al,[cs:si]		;AN000; and
 23922 00001AC2 45                      	inc	bp			;AN000;
 23923                                  	; 26/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 23924                                  	;cmp	al,[es:bp+0]
 23925                                  	; 11/12/2022
 23926 00001AC3 263A4600                	cmp	al,[es:bp]		;AN000; compare 2nd byte
 23927 00001AC7 7538                    	jne	short _$P_SCOM_Differ	;AN000; if not match, say different, too
 23928                                  
 23929                                  	; 26/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 23930                                  	; 12/12/2022
 23931                                  _$P_SCOM01:
 23932 00001AC9 46                      	inc	si			;AN000; else update operand pointer
 23933 00001ACA 45                      	inc	bp			;AN000; 		and synonym pointer
 23934                                  ;_$P_SCOM01:				;AN000;
 23935 00001ACB EBA9                    	jmp	short _$P_SCOM_Loop	;AN000; loop until NULL or "=" or "/" found in case
 23936                                  
 23937                                  _$P_SCOM_Differ0:			;AN000;
 23938                                  ;IF SwSW				;AN000;(tm10)
 23939 00001ACD 2EF606[4114]40          	test	byte [cs:_$P_Flags2],_$P_SW ;AC034;(tm10)
 23940 00001AD3 740E                    	jz	short _$P_not_applicable ;AN000;(tm10)
 23941                                  
 23942                                  	; 26/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 23943                                  	;test	word [es:bx+_$P_Control_Blk.Function_Flag],_$P_colon_is_not_necessary ;AN000;(tm10)
 23944                                  	; 12/12/2022
 23945 00001AD5 26F6470220              	test	byte [es:bx+_$P_Control_Blk.Function_Flag],_$P_colon_is_not_necessary
 23946 00001ADA 7407                    	je	short _$P_not_applicable ;AN000;(tm10)
 23947                                  
 23948                                  	; 26/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)	
 23949                                  	;cmp	byte [es:bp+0],_$P_NULL
 23950                                  	; 11/12/2022
 23951 00001ADC 26807E0000              	cmp	byte [es:bp],_$P_NULL	;AN000;(tm10)
 23952                                  ;(deleted ;AN025;) jne short _$P_not_applicable ;AN000;(tm10)
 23953 00001AE1 7421                    	je	short _$P_SCOM_Same	;AN025;(tm10)
 23954                                  
 23955                                  _$P_not_applicable:			;AN000;(tm10)
 23956                                  ;ENDIF					;AN000;(tm10)
 23957                                  
 23958                                  	;test	word [es:bx+_$P_Control_Blk.Match_Flag],_$P_Ig_Colon 
 23959                                  					;AN000; ignore colon option specified ?
 23960                                  	;test	byte [es:bx+_$P_Control_Blk.Match_Flag],_$P_Ig_Colon
 23961                                  	; 12/12/2022
 23962 00001AE3 26F60710                	test	byte [es:bx],_$P_Ig_Colon
 23963                                  	; 26/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)	
 23964                                  	;test	word [es:bx],_$P_Ig_Colon ; 10h
 23965 00001AE7 7418                    	jz	short _$P_SCOM_Differ	;AN000; if no, say different.
 23966                                  
 23967 00001AE9 3C3A                    	cmp	al,_$P_Colon		;AN000; End up with ":" and
 23968 00001AEB 7509                    	jne	short _$P_SCOM02	;AN000;    subseqently
 23969                                  
 23970                                  	; 26/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)	
 23971                                  	;cmp	byte [es:bp+0],_$P_NULL
 23972                                  	; 11/12/2022
 23973 00001AED 26807E0000              	cmp	byte [es:bp],_$P_NULL	;AN000; NULL ?
 23974 00001AF2 750D                    	jne	short _$P_SCOM_Differ	;AN000; if no, say different
 23975                                  
 23976 00001AF4 EB0E                    	jmp	short _$P_SCOM_Same	;AN000; else, say same
 23977                                  
 23978                                  _$P_SCOM02:				;AN000;
 23979 00001AF6 3C00                    	cmp	al,_$P_NULL		;AN000; end up NULL and :
 23980 00001AF8 7507                    	jne	short _$P_SCOM_Differ	;AN000;
 23981                                  
 23982                                  	; 26/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)	
 23983                                  	;cmp	byte [es:bp+0],_$P_Colon
 23984                                  	; 11/12/2022
 23985 00001AFA 26807E003A              	cmp	byte [es:bp],_$P_Colon	;AN000; if no, say different
 23986 00001AFF 7403                    	je	short _$P_SCOM_Same	;AN000; else, say same
 23987                                  
 23988                                  _$P_SCOM_Differ: 			;AN000;
 23989 00001B01 F9                      	stc				;AN000; indicate not found
 23990 00001B02 EB05                    	jmp	short _$P_SCOM_Exit	;AN000;
 23991                                  
 23992                                  _$P_SCOM_Same:				;AN000;
 23993                                  	; 12/12/2022
 23994                                  	; cf=0
 23995 00001B04 2E8936[4414]            	mov	[cs:_$P_KEYorSW_Ptr],si ;AC034; for later use by keyword or switch
 23996                                  	; 12/12/2022
 23997                                  	;clc				;AN000; indicate found
 23998                                  _$P_SCOM_Exit:				;AN000;
 23999 00001B09 5E                      	pop	si			;AN000;
 24000 00001B0A 5A                      	pop	dx			;AN000;
 24001 00001B0B 5D                      	pop	bp			;AN000;
 24002 00001B0C 58                      	pop	ax			;AN000;
 24003 00001B0D C3                      	retn
 24004                                  
 24005                                  ; 30/03/2019
 24006                                  
 24007                                  ;IF FileSW+DrvSW			;AN000;(Check if file spec or drive only is supported)
 24008                                  
 24009                                  ;***********************************************************************
 24010                                  ; _$P_File_Format;
 24011                                  ;
 24012                                  ; Function:  Check if the input string is valid file spec format.
 24013                                  ;	     And set the result buffer.
 24014                                  ;
 24015                                  ; Input:     cs:SI -> _$P_STRING_BUF
 24016                                  ;	     ES:BX -> CONTROL block
 24017                                  ;
 24018                                  ; Output:    None
 24019                                  ;
 24020                                  ; Use:	_$P_Fill_Result, _$P_Chk_DBCS, _$P_FileSp_Chk
 24021                                  ;
 24022                                  ; Vars: _$P_RC(W), _$P_SI_Save(W), _$P_Terminator(W), _$P_SaveSI_Cmpx(R)
 24023                                  ;	_$P_SaveSI_Cmpx(R)
 24024                                  ;***********************************************************************
 24025                                  
 24026                                  _$P_File_Format:
 24027 00001B0E 50                      	push	ax			;AN000;
 24028 00001B0F 57                      	push	di			;AN000;
 24029 00001B10 56                      	push	si			;AN000;
 24030 00001B11 2E8B3E[4214]            	mov	di,[cs:_$P_SaveSI_Cmpx]	;AC034; get user buffer address
 24031                                  _$P_FileF_Loop0: 			;AN000; / skip special characters
 24032 00001B16 2E8A04                  	mov	al,[cs:si]		;AN000; load character
 24033 00001B19 08C0                    	or	al,al			;AN000; end of line ?
 24034 00001B1B 7413                    	jz	short _$P_FileF_Err	;AN000; if yes, error exit
 24035                                  
 24036 00001B1D E85E00                  	call	_$P_FileSp_Chk		;AN000; else, check if file special character
 24037 00001B20 7523                    	jne	short _$P_FileF03	;AN000; if yes,
 24038                                  
 24039 00001B22 2EC606[D814]01          	mov	byte [cs:_$P_err_flag],_$P_error_filespec 
 24040                                  					;AN033;AC034;; set error flag- bad char.
 24041 00001B28 5E                      	pop	si			;AN033;
 24042 00001B29 2EC60400                	mov	byte [cs:si],_$P_NULL	;AN033;
 24043 00001B2D 5F                      	pop	di			;AN033;
 24044 00001B2E EB3E                    	jmp	short _$P_FileF02	;AN033;
 24045                                  
 24046                                  _$P_FileF_Err:				;AN000;
 24047 00001B30 5E                      	pop	si			;AN000;
 24048 00001B31 2EC60400                	mov	byte [cs:si],_$P_NULL	;AN000;
 24049 00001B35 5F                      	pop	di			;AN000;
 24050                                  
 24051                                  	;test	word [es:bx+_$P_Control_Blk.Match_Flag],_$P_Optional ;AN000; is it optional ?
 24052                                  	;test	byte [es:bx+_$P_Control_Blk.Match_Flag],_$P_Optional
 24053                                  	; 12/12/2022
 24054 00001B36 26F60701                	test	byte [es:bx],_$P_Optional
 24055                                  	; 26/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)	
 24056                                  	;test	word [es:bx],_$P_Optional
 24057 00001B3A 7532                    	jnz	short _$P_FileF02	;AN000;
 24058                                  
 24059 00001B3C 2EC706[3514]0200        	mov	word [cs:_$P_RC],_$P_Op_Missing ;AC034; 3/17/87
 24060 00001B43 EB29                    	jmp	short _$P_FileF02	;AN000;
 24061                                  
 24062                                  _$P_FileF03:				;AN000;
 24063 00001B45 58                      	pop	ax			;AN000; discard save si
 24064 00001B46 56                      	push	si			;AN000; save new si
 24065                                  _$P_FileF_Loop1: 			;AN000;
 24066 00001B47 2E8A04                  	mov	al,[cs:si]		;AN000; load character (not special char)
 24067 00001B4A 08C0                    	or	al,al			;AN000; end of line ?
 24068 00001B4C 741E                    	jz	short _$P_FileF_RLT	;AN000;
 24069                                  
 24070 00001B4E E82D00                  	call	_$P_FileSp_Chk		;AN000; File special character ?
 24071 00001B51 740B                    	je	short _$P_FileF00	;AN000;
 24072                                  
 24073 00001B53 E85401                  	call	_$P_Chk_DBCS		;AN000; no, then DBCS ?
 24074 00001B56 7302                    	jnc	short _$P_FileF01	;AN000;
 24075 00001B58 47                      	inc	di			;AN000; if yes, skip next byte
 24076 00001B59 46                      	inc	si			;AN000;
 24077                                  _$P_FileF01:				;AN000;
 24078 00001B5A 47                      	inc	di			;AN000;
 24079 00001B5B 46                      	inc	si			;AN000;
 24080 00001B5C EBE9                    	jmp	short _$P_FileF_Loop1	;AN000;
 24081                                  ;
 24082                                  _$P_FileF00:				;AN000;
 24083 00001B5E 2EA2[3B14]              	mov	[cs:_$P_Terminator],al	;AC034;
 24084 00001B62 2EC60400                	mov	byte [cs:si],_$P_NULL	;AN000; update end of string
 24085 00001B66 47                      	inc	di			;AN000;
 24086 00001B67 2E893E[3714]            	mov	[cs:_$P_SI_Save],di	;AC034; update next pointer in command line
 24087                                  _$P_FileF_RLT:				;AN000;
 24088 00001B6C 5E                      	pop	si			;AN000;
 24089 00001B6D 5F                      	pop	di			;AN000;
 24090                                  _$P_FileF02:				;AN000;
 24091 00001B6E 58                      	pop	ax			;AN000; (tm14)
 24092 00001B6F A90002                  	test	ax,_$P_File_Spc		;AN000; (tm14)
 24093 00001B72 7409                    	jz	short _$P_Drv_Only_Exit	;AN000; (tm14)
 24094                                  
 24095 00001B74 50                      	push	ax			;AN000;  (tm14)
 24096                                  
 24097 00001B75 B4FF                    	mov	ah,_$P_No_Tag		;AN000; set
 24098 00001B77 B005                    	mov	al,_$P_File_Spec 	;AN000;    result
 24099 00001B79 E89BFB                  	call	_$P_Fill_Result		;AN000; 	 buffer to file spec
 24100 00001B7C 58                      	pop	ax			;AN000;
 24101                                  
 24102                                  _$P_Drv_Only_Exit:			;AN000; (tm14)
 24103 00001B7D C3                      	retn				;AN000;
 24104                                  
 24105                                  ;***********************************************************************
 24106                                  ; _$P_FileSp_Chk
 24107                                  ;
 24108                                  ; Function:  Check if the input byte is one of file special characters
 24109                                  ;
 24110                                  ; Input:     cs:SI -> _$P_STRING_BUF
 24111                                  ;	     AL = character code to be examineed
 24112                                  ;
 24113                                  ; Output:    ZF = 1 , AL is one of special characters
 24114                                  ;***********************************************************************
 24115                                  
 24116                                  _$P_FileSp_Chk:
 24117 00001B7E 53                      	push	bx			;AN000;
 24118 00001B7F 51                      	push	cx			;AN000;
 24119                                  	;lea	bx,[cs:_$P_FileSp_Char] ;AC034; special character table
 24120 00001B80 8D1E[CF14]              	lea	bx,[_$P_FileSp_Char]
 24121 00001B84 B90900                  	mov	cx,_$P_FileSp_Len	;AN000; load length of it
 24122                                  _$P_FileSp_Loop: 			;AN000;
 24123 00001B87 2E3A07                  	cmp	al,[cs:bx]		;AN000; is it one of special character ?
 24124 00001B8A 7404                    	je	short _$P_FileSp_Exit	;AN000;
 24125                                  
 24126 00001B8C 43                      	inc	bx			;AN000;
 24127 00001B8D E2F8                    	loop	_$P_FileSp_Loop		;AN000;
 24128                                  
 24129 00001B8F 41                      	inc	cx			;AN000; reset ZF
 24130                                  _$P_FileSp_Exit: 			;AN000;
 24131 00001B90 59                      	pop	cx			;AN000;
 24132 00001B91 5B                      	pop	bx			;AN000;
 24133 00001B92 C3                      	retn
 24134                                  
 24135                                  ;ENDIF					;AN000;(of FileSW+DrvSW)
 24136                                  
 24137                                  ;IF	DrvSW				;AN000;(Check if drive only is supported)
 24138                                  
 24139                                  ;***********************************************************************
 24140                                  ; _$P_Drive_Format;
 24141                                  ;
 24142                                  ; Function:  Check if the input string is valid drive only format.
 24143                                  ;	     And set the result buffer.
 24144                                  ;
 24145                                  ; Input:     cs:SI -> _$P_STRING_BUF
 24146                                  ;	     ES:BX -> CONTROL block
 24147                                  ;
 24148                                  ; Output:    None
 24149                                  ;
 24150                                  ; Use:	_$P_Fill_Result, _$P_Chk_DBCS
 24151                                  ;
 24152                                  ; Vars: _$P_RC(W)
 24153                                  ;***********************************************************************
 24154                                  
 24155                                  _$P_Drive_Format:
 24156 00001B93 50                      	push	ax			;AN000;
 24157 00001B94 52                      	push	dx			;AN000;
 24158 00001B95 2E8A04                  	mov	al,[cs:si]		;AN000;
 24159 00001B98 08C0                    	or	al,al			;AN000; if null string
 24160 00001B9A 7437                    	je	short _$P_Drv_Exit	;AN000; do nothing
 24161                                  
 24162 00001B9C E80B01                  	call	_$P_Chk_DBCS		;AN000; is it leading byte ?
 24163 00001B9F 722B                    	jc	short _$P_Drv_Err	;AN000;
 24164                                  
 24165 00001BA1 2E837C013A              	cmp	word [cs:si+1],_$P_Colon ;AN000; "d", ":", 0  ?
 24166 00001BA6 740D                    	je	short _$P_DrvF00	;AN000;
 24167                                  
 24168                                  	;test	word [es:bx+_$P_Control_Blk.Match_Flag],_$P_Ig_Colon 
 24169                                  	;test	byte [es:bx+_$P_Control_Blk.Match_Flag],_$P_Ig_Colon ;AN000; colon can be ignored?
 24170                                  	; 12/12/2022
 24171 00001BA8 26F60710                	test	byte [es:bx],_$P_Ig_Colon
 24172                                  	; 26/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)	
 24173                                  	;test	word [es:bx],_$P_Ig_Colon
 24174 00001BAC 741E                    	jz	short _$P_Drv_Err	;AN000;
 24175                                  
 24176 00001BAE 2E807C0100              	cmp	byte [cs:si+1],_$P_NULL ;AN000; "d", 0  ?
 24177 00001BB3 7517                    	jne	short _$P_Drv_Err	;AN000;
 24178                                  
 24179                                  _$P_DrvF00:				;AN000;
 24180 00001BB5 0C20                    	or	al,_$P_Make_Lower	;AN000; lower case
 24181 00001BB7 3C61                    	cmp	al,"a"                  ;AN000; drive letter must
 24182 00001BB9 7211                    	jb	short _$P_Drv_Err	;AN000; in range of
 24183                                  
 24184 00001BBB 3C7A                    	cmp	al,"z"                  ;AN000; "a" - "z"
 24185 00001BBD 770D                    	ja	short _$P_Drv_Err	;AN000; if no, error
 24186                                  
 24187 00001BBF 2C60                    	sub	al,"a"-1                ;AN000; make text drive to binary drive
 24188 00001BC1 88C2                    	mov	dl,al			;AN000; set
 24189 00001BC3 B4FF                    	mov	ah,_$P_No_Tag		;AN000;    result
 24190 00001BC5 B006                    	mov	al,_$P_Drive		;AN000; 	 buffer
 24191 00001BC7 E84DFB                  	call	_$P_Fill_Result		;AN000; 	       to drive
 24192 00001BCA EB07                    	jmp	short _$P_Drv_Exit	;AN000;
 24193                                  
 24194                                  _$P_Drv_Err:				;AN000;
 24195 00001BCC 2EC706[3514]0900        	mov	word [cs:_$P_RC],_$P_Syntax ;AC034;
 24196                                  _$P_Drv_Exit:				;AN000;
 24197 00001BD3 5A                      	pop	dx			;AN000;
 24198 00001BD4 58                      	pop	ax			;AN000;
 24199 00001BD5 C3                      	retn				;AN000;
 24200                                  
 24201                                  ;ENDIF					;AN000;(of DrvSW)
 24202                                  
 24203                                  ;***********************************************************************
 24204                                  ; _$P_Skip_Delim;
 24205                                  ;
 24206                                  ; Function: Skip delimiters specified in the PARMS list, white space
 24207                                  ;	    and comma.
 24208                                  ;
 24209                                  ; Input:    DS:SI -> Command String
 24210                                  ;	    ES:DI -> Parameter List
 24211                                  ;
 24212                                  ; Output:   CY = 1 if the end of line encounterd
 24213                                  ;	    CY = 0 then SI move to 1st non-delimiter character
 24214                                  ;	    AL = Last examineed character
 24215                                  ;
 24216                                  ; Use:	    _$P_Chk_EOL, _$P_Chk_Delim,
 24217                                  ;
 24218                                  ; Vars:     _$P_Flags(R)
 24219                                  ;***********************************************************************
 24220                                  
 24221                                  _$P_Skip_Delim:
 24222                                  _$P_Skip_Delim_Loop:			;AN000;
 24223 00001BD6 AC                      	lodsb				;AN000;
 24224 00001BD7 E81F00                  	call	_$P_Chk_EOL		;AN000; is it EOL character ?
 24225 00001BDA 7417                    	jz	short _$P_Skip_Delim_CY	;AN000; if yes, exit w/ CY on
 24226                                  
 24227 00001BDC E85000                  	call	_$P_Chk_Delim		;AN000; is it one of delimiters ?
 24228 00001BDF 7515                    	jnz	short _$P_Skip_Delim_NCY ;AN000; if no, exit w/ CY off
 24229                                  
 24230 00001BE1 2EF606[4114]20          	test	byte [cs:_$P_Flags2],_$P_Extra ;AC034; extra delim or comma found ?
 24231 00001BE7 74ED                    	jz	short _$P_Skip_Delim_Loop ;AN000; if no, loop
 24232                                  
 24233 00001BE9 2EF606[4114]41          	test	byte [cs:_$P_Flags2],_$P_SW+_$P_equ ;AC034; /x , or xxx=zzz , (tm08)
 24234 00001BEF 7407                    	jz	short _$P_Exit_At_Extra	;AN000; no switch, no keyword (tm08)
 24235                                  
 24236                                  	;dec	si			;AN000; backup si for next call (tm08)
 24237                                  	;jmp	short _$P_Exit_At_Extra	;AN000; else exit w/ CY off
 24238                                  	; 12/12/2022
 24239                                  	; cf=0
 24240 00001BF1 EB04                    	jmp	short _$P_Skip_Delim_Exit
 24241                                  
 24242                                  _$P_Skip_Delim_CY:			;AN000;
 24243 00001BF3 F9                      	stc				;AN000; indicate EOL
 24244 00001BF4 EB01                    	jmp	short _$P_Skip_Delim_Exit ;AN000;
 24245                                  
 24246                                  _$P_Skip_Delim_NCY:			;AN000;
 24247 00001BF6 F8                      	clc				;AN000; indicate non delim
 24248                                  _$P_Skip_Delim_Exit:			;AN000; in this case, need
 24249 00001BF7 4E                      	dec	si			;AN000;  backup index pointer
 24250                                  	; 12/12/2022
 24251                                  _$P_Exit_At_Extra:	 ; cf=0
 24252 00001BF8 C3                      	retn				;AN000;
 24253                                  
 24254                                  	; 12/12/2022
 24255                                  ;_$P_Exit_At_Extra:			;AN000;
 24256                                  	;clc				;AN000; indicate extra delim
 24257                                  	;retn				;AN000;
 24258                                  
 24259                                  ;***********************************************************************
 24260                                  ; _$P_Chk_EOL;
 24261                                  ;
 24262                                  ; Function: Check if AL is one of End of Line characters.
 24263                                  ;
 24264                                  ; Input:    AL = character code
 24265                                  ;	    ES:DI -> Parameter List
 24266                                  ;
 24267                                  ; Output:   ZF = 1 if one of End of Line characters
 24268                                  ;**********************************************************************
 24269                                  
 24270                                  _$P_Chk_EOL:
 24271 00001BF9 53                      	push	bx			;AN000;
 24272 00001BFA 51                      	push	cx			;AN000;
 24273 00001BFB 3C0D                    	cmp	al,_$P_CR		;AN000; Carriage return ?
 24274 00001BFD 742D                    	je	short _$P_Chk_EOL_Exit 	;AN000;
 24275                                  
 24276 00001BFF 3C00                    	cmp	al,_$P_NULL		;AN000; zero ?
 24277 00001C01 7429                    	je	short _$P_Chk_EOL_Exit 	;AN000;
 24278                                  
 24279                                  ;IF LFEOLSW				;AN028; IF LF TO BE ACCEPTED AS EOL
 24280 00001C03 3C0A                    	cmp	al,_$P_LF		;AN000; Line feed ?
 24281 00001C05 7425                    	je	short _$P_Chk_EOL_Exit 	;AN000;
 24282                                  ;ENDIF					;AN028;
 24283                                  
 24284 00001C07 26807D0202              	cmp	byte [es:di+_$P_PARMS_Blk.Num_Extra],_$P_I_Have_EOL 
 24285                                  					;AN000; EOL character specified ?
 24286 00001C0C 721E                    	jb	short _$P_Chk_EOL_Exit 	;AN000;
 24287                                  
 24288 00001C0E 31DB                    	xor	bx,bx			;AN000;
 24289 00001C10 268A5D03                	mov	bl,[es:di+_$P_PARMS_Blk.Len_Extra_Delim]
 24290                                  					;AN000; get length of delimiter list
 24291 00001C14 83C304                  	add	bx,_$P_Len_PARMS 	;AN000; skip it
 24292 00001C17 26803900                	cmp	byte [es:bx+di],_$P_I_Use_Default ;AN000; No extra EOL character ?
 24293 00001C1B 740D                    	je	short _$P_Chk_EOL_NZ	;AN000;
 24294                                  
 24295                                  	;xor	cx,cx			;AN000; Get number of extra character
 24296 00001C1D 30ED                    	xor	ch,ch
 24297 00001C1F 268A09                  	mov	cl,[es:bx+di]		;AN000;
 24298                                  _$P_Chk_EOL_Loop:			;AN000;
 24299 00001C22 43                      	inc	bx			;AN000;
 24300 00001C23 263A01                  	cmp	al,[es:bx+di]		;AN000; Check extra EOL character
 24301 00001C26 7404                    	je	short _$P_Chk_EOL_Exit 	;AN000;
 24302                                  
 24303 00001C28 E2F8                    	loop	_$P_Chk_EOL_Loop 	;AN000;
 24304                                  
 24305                                  _$P_Chk_EOL_NZ:				;AN000;
 24306 00001C2A 3C0D                    	cmp	al,_$P_CR		;AN000; reset ZF
 24307                                  _$P_Chk_EOL_Exit:			;AN000;
 24308 00001C2C 59                      	pop	cx			;AN000;
 24309 00001C2D 5B                      	pop	bx			;AN000;
 24310 00001C2E C3                      	retn
 24311                                  
 24312                                  ;***********************************************************************
 24313                                  ; _$P_Chk_Delim;
 24314                                  ;
 24315                                  ; Function: Check if AL is one of delimiter characters.
 24316                                  ;	    if AL+[si] is DBCS blank, it is replaced with two SBCS
 24317                                  ;	    blanks.
 24318                                  ;
 24319                                  ; Input:    AL = character code
 24320                                  ;	    DS:SI -> Next Character
 24321                                  ;	    ES:DI -> Parameter List
 24322                                  ;
 24323                                  ; Output:   ZF = 1 if one of delimiter characters
 24324                                  ;	    SI points to the next character
 24325                                  ; Vars:  _$P_Terminator(W), _$P_Flags(W)
 24326                                  ;***********************************************************************
 24327                                  
 24328                                  _$P_Chk_Delim:
 24329 00001C2F 53                      	push	bx			;AN000;
 24330 00001C30 51                      	push	cx			;AN000;
 24331 00001C31 2EC606[3B14]20          	mov	byte [cs:_$P_Terminator],_$P_Space 
 24332                                  					;AC034; Assume terminated by space
 24333                                  	;and	byte [cs:_$P_Flags20,0DFh
 24334 00001C37 2E8026[4114]DF          	and	byte [cs:_$P_Flags2],0FFh-_$P_Extra ;AC034;
 24335 00001C3D 3C20                    	cmp	al,_$P_Space ; 20h	;AN000; Space ?
 24336 00001C3F 7436                    	je	short _$P_Chk_Delim_Exit ;AN000;
 24337                                  
 24338 00001C41 3C09                    	cmp	al,_$P_TAB		;AN000; TAB ?
 24339 00001C43 7432                    	je	short _$P_Chk_Delim_Exit ;AN000;
 24340                                  
 24341 00001C45 3C2C                    	cmp	al,_$P_Comma		;AN000; Comma ?
 24342 00001C47 7431                    	je	short _$P_Chk_Delim_Exit0 ;AN000;
 24343                                  
 24344                                  	; 26/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 24345                                  _$P_Chk_Delim00: 			;AN000;
 24346 00001C49 3C20                    	cmp	al,_$P_DBSP1	; 20h	;AN000; 1st byte of DBCS Space ?
 24347 00001C4B 750C                    	jne	short _$P_Chk_Delim01	;AN000;
 24348                                  
 24349 00001C4D 803C20                  	cmp	byte [si],_$P_DBSP2 ; 20h ;AN000; 2nd byte of DBCS Space ?
 24350 00001C50 7507                    	jne	short _$P_Chk_Delim01	;AN000;
 24351                                  
 24352 00001C52 B020                    	mov	al,_$P_Space		;AN000;
 24353 00001C54 46                      	inc	si			;AN000; make si point to next character
 24354 00001C55 38C0                    	cmp	al,al			;AN000; Set ZF
 24355 00001C57 EB1E                    	jmp	short _$P_Chk_Delim_Exit ;AN000;
 24356                                  
 24357                                  _$P_Chk_Delim01: 			;AN000;
 24358 00001C59 26807DFE01              	cmp	byte [es:di-_$P_PARMS_Blk.Num_Extra],_$P_I_Have_Delim 
 24359                                  					;AN000; delimiter character specified ?
 24360 00001C5E 7217                    	jb	short _$P_Chk_Delim_Exit ;AN000;
 24361                                  
 24362                                  	;xor	cx,cx			;AN000;
 24363 00001C60 30ED                    	xor	ch,ch
 24364                                  	;mov	cl,[es:di+3]
 24365 00001C62 268A4D03                	mov	cl,[es:di+_$P_PARMS_Blk.Len_Extra_Delim] 
 24366                                  					;AN000; get length of delimiter list
 24367 00001C66 09C9                    	or	cx,cx			;AN000; No extra Delim character ?
 24368 00001C68 740B                    	jz	short _$P_Chk_Delim_NZ 	;AN000;
 24369                                  
 24370 00001C6A BB0300                  	mov	bx,_$P_Len_PARMS-1 ; 3	;AN000; set bx to 1st extra delimiter
 24371                                  _$P_Chk_Delim_Loop:			;AN000;
 24372 00001C6D 43                      	inc	bx			;AN000;
 24373 00001C6E 263A01                  	cmp	al,[es:bx+di]		;AN000; Check extra Delim character
 24374 00001C71 7407                    	je	short _$P_Chk_Delim_Exit0 ;AN000;
 24375                                  
 24376 00001C73 E2F8                    	loop	_$P_Chk_Delim_Loop	;AN000; examine all extra delimiter
 24377                                  
 24378                                  _$P_Chk_Delim_NZ:			;AN000;
 24379 00001C75 3C20                    	cmp	al,_$P_Space		;AN000; reset ZF
 24380                                  _$P_Chk_Delim_Exit:			;AN000;
 24381                                  _$P_ChkDfin:				;AN000;
 24382 00001C77 59                      	pop	cx			;AN000;
 24383 00001C78 5B                      	pop	bx			;AN000;
 24384 00001C79 C3                      	retn				;AN000;
 24385                                  
 24386                                  _$P_Chk_Delim_Exit0:			;AN000;
 24387 00001C7A 2EA2[3B14]              	mov	[cs:_$P_Terminator],al ;AC034; keep terminated delimiter
 24388 00001C7E 2EF606[4114]01          	test	byte [cs:_$P_Flags2],_$P_equ ;AN027;AC034;; if terminating a key=
 24389 00001C84 7506                    	jnz	short _$P_No_Set_Extra 	;AN027; then do not set the EXTRA bit
 24390                                  
 24391 00001C86 2E800E[4114]20          	or	byte [cs:_$P_Flags2],_$P_Extra 
 24392                                  					;AC034; flag terminated extra delimiter or comma
 24393                                  _$P_No_Set_Extra:			;AN027;
 24394 00001C8C 38C0                    	cmp	al,al			;AN000; set ZF
 24395 00001C8E EBE7                    	jmp	short _$P_Chk_Delim_Exit ;AN000;
 24396                                  
 24397                                  
 24398                                  ;***********************************************************************
 24399                                  ; _$P_Chk_Switch;
 24400                                  ;
 24401                                  ; Function: Check if AL is the switch character not in first position of
 24402                                  ;	    _$P_STRING_BUF
 24403                                  ;
 24404                                  ; Input:    AL = character code
 24405                                  ;	    BX = current pointer within _$P_String_Buf
 24406                                  ;	    SI =>next char on command line (following the one in AL)
 24407                                  ;
 24408                                  ; Output:   CF = 1 (set)if AL is switch character, and not in first
 24409                                  ;		 position, and has no chance of being part of a date string,
 24410                                  ;		 i.e. should be treated as a delimiter.
 24411                                  
 24412                                  ;	    CF = 0 (reset, cleared) if AL is not a switch char, is in the first
 24413                                  ;		 position, or is a slash but may be part of a date string, i.e.
 24414                                  ;		 should not be treated as a delimiter.
 24415                                  ;
 24416                                  ; Vars:  _$P_Terminator(W)
 24417                                  
 24418                                  ; Use:	 _$P_0099
 24419                                  ;***********************************************************************
 24420                                  
 24421                                  _$P_Chk_Switch:
 24422                                  	;lea	bp,[cs:_$P_STRING_BUF]	;AN020;AC034
 24423 00001C90 8D2E[4A14]              	lea	bp,[_$P_STRING_BUF]	; BP=OFFSET of _$P_String_Buf even in group addressing
 24424                                  ;	.IF <BX NE BP> THEN		;AN020;IF not first char THEN
 24425 00001C94 39EB                    	cmp	bx,bp			;AN000;
 24426 00001C96 7406                    	je	short _$P_STRUC_L2	;AN000;
 24427                                  
 24428                                  ;	    .IF <AL EQ _$P_Switch> THEN	;AN020;otherwise see if a slash
 24429 00001C98 3C2F                    	cmp	al,_$P_Switch		;AN000;
 24430 00001C9A 750C                    	jne	short _$P_STRUC_L5 	;AN000;
 24431                                  
 24432 00001C9C F9                      	stc				;AN020;not in first position and is slash
 24433                                  	;jmp     short _$P_STRUC_L1	;AN000;
 24434                                  	; 12/12/2022
 24435 00001C9D C3                      	retn
 24436                                  
 24437                                  ; 12/12/2022
 24438                                  ;_$P_STRUC_L5:				;AN000;
 24439                                  ;	CLC				;AN020;not a slash
 24440                                  ;;	    .ENDIF			;AN020;
 24441                                  ;;	.ELSE				;AN020;is first char in the buffer, ZF=0
 24442                                  ;	jmp	short _$P_STRUC_L1	;AN000;
 24443                                  
 24444                                  _$P_STRUC_L2:				;AN000;
 24445                                  ;	    .IF <AL EQ _$P_Switch> THEN	;AN020;
 24446 00001C9E 3C2F                    	cmp     al,_$P_Switch		;AN000;
 24447 00001CA0 7506                    	jne	short _$P_STRUC_L12	;AN000;
 24448                                  
 24449 00001CA2 2E800E[4114]40          	or	byte [cs:_$P_Flags2],_$P_SW ;AN020;AC034;;could be valid switch, first char and is slash
 24450                                  ;	    .ENDIF			;AN020;
 24451                                  
 24452                                  	; 12/12/2022
 24453                                  	; cf=0
 24454                                  	;retn
 24455                                  
 24456                                  _$P_STRUC_L5:
 24457                                  	; 12/12/2022
 24458                                  _$P_STRUC_L12:				;AN000;
 24459 00001CA8 F8                      	clc				;AN020;CF=0 indicating first char
 24460                                  ;	.ENDIF				;AN020;
 24461                                  _$P_STRUC_L1:				;AN000;
 24462 00001CA9 C3                      	retn				;AN000;
 24463                                  
 24464                                  ;**************************************************************************
 24465                                  ; _$P_Chk_DBCS:
 24466                                  ;
 24467                                  ;  Function: Check if a specified byte is in ranges of the DBCS lead bytes
 24468                                  ;
 24469                                  ;  Input:
 24470                                  ;	  AL	= Code to be examineed
 24471                                  ;
 24472                                  ;  Output:
 24473                                  ;	  If CF is on then a lead byte of DBCS
 24474                                  ;
 24475                                  ; Use: INT 21h w/AH=63
 24476                                  ;
 24477                                  ; Vars:  _$P_DBCSEV_Seg(RW), _$P_DBCSEV_Off(RW)
 24478                                  ;***************************************************************************
 24479                                  
 24480                                  _$P_Chk_DBCS:
 24481 00001CAA 1E                      	push	ds			;AN000;
 24482 00001CAB 56                      	push	si			;AN000;
 24483 00001CAC 53                      	push	bx			;AN000; (tm11)
 24484                                  	
 24485 00001CAD 2E833E[3E14]00          	cmp	word [cs:_$P_DBCSEV_SEG],0 ;AC034; ALREADY SET ?
 24486 00001CB3 7527                    	jne	short _$P_DBCS00	;AN000;
 24487                                  
 24488 00001CB5 50                      	push	ax			;AN000;
 24489 00001CB6 1E                      	push	ds			;AN000; (tm11)
 24490 00001CB7 51                      	push	cx			;AN000;
 24491 00001CB8 52                      	push	dx			;AN000;
 24492 00001CB9 57                      	push	di			;AN000;
 24493 00001CBA 55                      	push	bp			;AN000;
 24494 00001CBB 06                      	push	es			;AN000;
 24495 00001CBC 31F6                    	xor	si,si			;AN000;
 24496 00001CBE 8EDE                    	mov	ds,si			;AN000;
 24497 00001CC0 B80063                  	MOV	ax,_$P_DOS_GetEV ; 6300h ;AN000; GET DBCS EV CALL
 24498 00001CC3 CD21                    	int	21h			;AN000;
 24499                                  		; DOS - 3.2+ only - GET DOUBLE BYTE CHARACTER SET LEAD TABLE
 24500 00001CC5 8CDB                    	mov	bx,ds			;AN000; (tm11)
 24501 00001CC7 09DB                    	or	bx,bx			;AN000; (tm11)
 24502 00001CC9 07                      	pop	es			;AN000;
 24503 00001CCA 5D                      	pop	bp			;AN000;
 24504 00001CCB 5F                      	pop	di			;AN000;
 24505 00001CCC 5A                      	pop	dx			;AN000;
 24506 00001CCD 59                      	pop	cx			;AN000;
 24507 00001CCE 1F                      	pop	ds			;AN000; (tm11)
 24508 00001CCF 58                      	pop	ax			;AN000;
 24509 00001CD0 7429                    	jz	short _$P_NON_DBCS	;AN000;
 24510                                  
 24511                                  _$P_DBCS02:				;AN000;
 24512 00001CD2 2E8936[3C14]            	mov	[cs:_$P_DBCSEV_OFF],si	;AC034; save EV offset
 24513 00001CD7 2E891E[3E14]            	mov	[cs:_$P_DBCSEV_SEG],bx	;AC034; save EV segment (tm11)
 24514                                  _$P_DBCS00:				;AN000;
 24515 00001CDC 2E8B36[3C14]            	mov	si,[cs:_$P_DBCSEV_OFF]	;AC034; load EV offset
 24516 00001CE1 2E8E1E[3E14]            	mov	ds,[cs:_$P_DBCSEV_SEG]	;AC034; and segment
 24517                                  
 24518                                  _$P_DBCS_LOOP:				;AN000;
 24519 00001CE6 833C00                  	cmp	word [si],0		;AN000; zero vector ?
 24520 00001CE9 7410                    	je	short _$P_NON_DBCS	;AN000; then exit
 24521                                  
 24522 00001CEB 3A04                    	cmp	al,[si] 		;AN000;
 24523 00001CED 7208                    	jb	short _$P_DBCS01	;AN000; Check if AL is in
 24524                                  
 24525 00001CEF 3A4401                  	cmp	al,[si+1]		;AN000;   range of
 24526 00001CF2 7703                    	ja	short _$P_DBCS01	;AN000;      the vector
 24527                                  
 24528 00001CF4 F9                      	stc				;AN000; if yes, indicate DBCS and exit
 24529 00001CF5 EB04                    	jmp	short _$P_DBCS_EXIT	;AN000;
 24530                                  
 24531                                  _$P_DBCS01:				;AN000;
 24532 00001CF7 46                      	inc	si			;AC035; add '2' to
 24533 00001CF8 46                      	inc	si			;AC035;  SI reg
 24534                                  					;AN000; get next vector
 24535 00001CF9 EBEB                    	jmp	short _$P_DBCS_LOOP	;AN000; loop until zero vector found
 24536                                  
 24537                                  _$P_NON_DBCS:				;AN000;
 24538                                  	; 12/12/2022
 24539                                  	; cf=0
 24540                                  	;clc				;AN000; indicate SBCS
 24541                                  _$P_DBCS_EXIT:				;AN000;
 24542 00001CFB 5B                      	pop	bx			;AN000; (tm11)
 24543 00001CFC 5E                      	pop	si			;AN000;
 24544 00001CFD 1F                      	pop	ds			;AN000;
 24545 00001CFE C3                      	retn				;AN000;
 24546                                  
 24547                                  ; SYSCONF.ASM - MSDOS 6.0 - 1991
 24548                                  ; ======================================================================
 24549                                  ; 27/03/2019 - Retro DOS v4.0
 24550                                  
 24551                                  ;control block definitions for parser.
 24552                                  ;-----------------------------------------------------------------------
 24553                                  ; buffer = [n | n,m] {/e}
 24554                                  
 24555                                  ; 30/03/2019
 24556                                  
 24557                                  struc p_parms
 24558 00000000 ????                    	resw	1	; dw ?
 24559 00000002 ??                      	resb	1	; db 1	; an extra delimiter list
 24560 00000003 ??                      	resb	1	; db 1	; length is 1
 24561 00000004 ??                      	resb 	1	; db ';' ; delimiter
 24562                                  .size:
 24563                                  endstruc
 24564                                  
 24565                                  struc p_pos
 24566 00000000 ????                    	resw	1	; dw ?	; numeric value??
 24567 00000002 ????                    	resw	1	; dw ?	; function
 24568 00000004 ????                    	resw	1	; dw ?	; result value buffer
 24569                                  
 24570                                  ; note: by defining result_val before this structure, we could remove
 24571                                  ;  the "result_val" from every structure invocation
 24572                                  
 24573 00000006 ????                    	resw	1	; dw ?	; value list
 24574 00000008 ??                      	resb	1	; db 0	; no switches/keywords
 24575                                  .size:
 24576                                  endstruc
 24577                                  
 24578                                  struc	p_range
 24579 00000000 ??                      	resb	1	; db 1	; range definition
 24580 00000001 ??                      	resb 	1	; db 1	; 1 definition of range
 24581 00000002 ??                      	resb 	1	; db 1	; item tag for this range
 24582 00000003 ????????                	resd	1	; dd ?	; numeric min
 24583 00000007 ????????                	resd	1	; dd ?	; numeric max
 24584                                  .size:
 24585                                  endstruc
 24586                                  
 24587                                  ;-----------------------------------------------------------------------
 24588                                  
 24589                                  	; 26/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 24590                                  	; (SYSINIT:1F48h)
 24591                                  
 24592                                  ; buffer = [n | n,m] {/e}
 24593                                  
 24594                                  ;buf_parms p_parms <buf_parmsx>
 24595                                  buf_parms: 
 24596 00001CFF [041D]                  	dw	buf_parmsx
 24597 00001D01 01                      	db	1	; an extra delimiter list
 24598 00001D02 01                      	db	1	; length is 1
 24599 00001D03 3B                      	db	';'	; delimiter
 24600                                  
 24601                                  buf_parmsx:
 24602 00001D04 0102[0E1D][221D]        	dw	201h,buf_pos1,buf_pos2	; min 1, max 2 positionals
 24603 00001D0A 01                      	db	1			; one switch
 24604 00001D0B [361D]                  	dw	sw_x_ctrl
 24605 00001D0D 00                      	db	0			; no keywords
 24606                                  
 24607                                  ;buf_pos1 p_pos <8000h,0,result_val,buf_range_1>  ; numeric
 24608                                  buf_pos1:
 24609 00001D0E 0080                    	dw	8000h	; numeric value??
 24610 00001D10 0000                    	dw	0	; function
 24611 00001D12 [481D]                  	dw	result_val ; result value buffer	
 24612 00001D14 [171D]                  	dw	buf_range_1 ; value list
 24613 00001D16 00                      	db	0  	; no switches/keywords
 24614                                  
 24615                                  ;buf_range_1 p_range <,,,1,99>		; M050
 24616                                  buf_range_1:
 24617 00001D17 01                      	db	1	; range definition
 24618 00001D18 01                      	db	1	; 1 definition of range
 24619 00001D19 01                      	db	1	; item tag for this range
 24620 00001D1A 01000000                	dd	1	; numeric min
 24621 00001D1E 63000000                	dd	99	; numeric max
 24622                                  
 24623                                  ;buf_pos2 p_pos <8001h,0,result_val,buf_range_2> ; optional num.
 24624                                  buf_pos2:
 24625 00001D22 0180                    	dw	8001h
 24626 00001D24 0000                    	dw	0
 24627 00001D26 [481D]                  	dw	result_val	
 24628 00001D28 [2B1D]                  	dw	buf_range_2
 24629 00001D2A 00                      	db	0
 24630                                  
 24631                                  ;buf_range_2 p_range <,,,0,8>
 24632                                  buf_range_2:
 24633 00001D2B 01                      	db	1
 24634 00001D2C 01                      	db	1
 24635 00001D2D 01                      	db	1
 24636 00001D2E 00000000                	dd	0
 24637 00001D32 08000000                	dd	8
 24638                                  
 24639                                  ;sw_x_ctrl p_pos <0,0,result_val,noval,1> ; followed by one switch
 24640                                  sw_x_ctrl:
 24641 00001D36 0000                    	dw	0
 24642 00001D38 0000                    	dw	0
 24643 00001D3A [481D]                  	dw	result_val	
 24644 00001D3C [471D]                  	dw	noval
 24645 00001D3E 01                      	db	1	; 1 switch
 24646                                  	
 24647                                  switch_x:
 24648 00001D3F 2F5800                  	db	'/X',0		; M016
 24649                                  
 24650                                  p_buffers:
 24651 00001D42 0000                    	dw	0	; local variables
 24652                                  p_h_buffers:
 24653 00001D44 0000                    	dw	0
 24654                                  	; 26/10/2022  (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 24655                                  p_buffer_slash_x:
 24656 00001D46 00                      	db	0 ; 31/03/2019
 24657                                  
 24658                                  ;-- common definitions -------------------------------------------------
 24659                                  
 24660 00001D47 00                      noval:	db	0
 24661                                  
 24662                                  result_val: 	;label	byte
 24663 00001D48 00                      	db	0		; type returned
 24664                                  result_val_itag:
 24665 00001D49 00                      	db	0		; item tag returned
 24666                                  result_val_swoff:
 24667 00001D4A 0000                    	dw	0		; es:offset of the switch defined
 24668                                  rv_byte:	;label	byte
 24669 00001D4C 00000000                rv_dword: dd	0		; value if number,or seg:offset to string.
 24670                                  
 24671                                  ;-----------------------------------------------------------------------
 24672                                  
 24673                                  	; 27/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 24674                                  	; (SYSINIT:1F99h)
 24675                                  
 24676                                  ; break = [ on | off ]
 24677                                  
 24678                                  ;brk_parms p_parms  <brk_parmsx>
 24679                                  brk_parms:
 24680 00001D50 [551D]                  	dw	brk_parmsx
 24681 00001D52 01                      	db	1	; an extra delimiter list
 24682 00001D53 01                      	db	1	; length is 1
 24683 00001D54 3B                      	db	';'	; delimiter
 24684                                  
 24685                                  brk_parmsx:
 24686 00001D55 0101[5B1D]              	dw	101h,brk_pos	; min,max = 1 positional
 24687 00001D59 00                      	db	0		; no switches
 24688 00001D5A 00                      	db	0		; no keywords
 24689                                  
 24690                                  ;brk_pos p_pos <2000h,0,result_val,on_off_string> ; simple string
 24691                                  brk_pos:
 24692 00001D5B 0020                    	dw	2000h
 24693 00001D5D 0000                    	dw	0
 24694 00001D5F [481D]                  	dw	result_val	
 24695 00001D61 [641D]                  	dw	on_off_string
 24696 00001D63 00                      	db	0
 24697                                  
 24698                                  on_off_string:	;label	byte
 24699 00001D64 03                      	db	3		; signals that there is a string choice
 24700 00001D65 00                      	db	0		; no range definition
 24701 00001D66 00                      	db	0		; no numeric values choice
 24702 00001D67 02                      	db	2		; 2 strings for choice
 24703 00001D68 01                      	db	1		; the 1st string tag
 24704 00001D69 [6E1D]                  	dw	on_string
 24705 00001D6B 02                      	db	2		; the 2nd string tag
 24706 00001D6C [711D]                  	dw	off_string
 24707                                  
 24708                                  on_string:
 24709 00001D6E 4F4E00                  	db	"ON",0
 24710                                  off_string:
 24711 00001D71 4F464600                	db	"OFF",0
 24712                                  
 24713                                  p_ctrl_break:
 24714 00001D75 00                      	db	0	; local variable
 24715                                  
 24716                                  ;-----------------------------------------------------------------------
 24717                                  
 24718                                  	; 27/10/2022
 24719                                  
 24720                                  ; country = n {m {path}}
 24721                                  ; or
 24722                                  ; country = n,,path
 24723                                  
 24724                                  ;cntry_parms p_parms <cntry_parmsx>
 24725                                  cntry_parms:
 24726 00001D76 [7B1D]                  	dw	cntry_parmsx
 24727 00001D78 01                      	db	1
 24728 00001D79 01                      	db	1
 24729 00001D7A 3B                      	db	';'
 24730                                  	
 24731                                  cntry_parmsx:
 24732 00001D7B 0103[851D][991D]-       	dw	301h,cntry_pos1,cntry_pos2,cntry_pos3 ; min 1, max 3 pos.
 24732 00001D81 [A21D]             
 24733 00001D83 00                      	db	0		; no switches
 24734 00001D84 00                      	db	0		; no keywords
 24735                                  
 24736                                  ;cntry_pos1 p_pos <8000h,0,result_val,cc_range> ; numeric value
 24737                                  cntry_pos1:
 24738 00001D85 0080                    	dw	8000h
 24739 00001D87 0000                    	dw	0
 24740 00001D89 [481D]                  	dw	result_val	
 24741 00001D8B [8E1D]                  	dw	cc_range
 24742 00001D8D 00                      	db	0
 24743                                  
 24744                                  ;cc_range p_range <,,,1,999>
 24745                                  cc_range:
 24746 00001D8E 01                      	db	1
 24747 00001D8F 01                      	db	1
 24748 00001D90 01                      	db	1
 24749 00001D91 01000000                	dd	1
 24750 00001D95 E7030000                	dd	999
 24751                                  
 24752                                  ;cntry_pos2 p_pos <8001h,0,result_val,cc_range> ; optional num.
 24753                                  cntry_pos2:
 24754 00001D99 0180                    	dw	8001h
 24755 00001D9B 0000                    	dw	0
 24756 00001D9D [481D]                  	dw	result_val	
 24757 00001D9F [8E1D]                  	dw	cc_range
 24758 00001DA1 00                      	db	0
 24759                                  
 24760                                  ;cntry_pos3 p_pos <201h,0,result_val,noval>     ; optional filespec
 24761                                  cntry_pos3:
 24762 00001DA2 0102                    	dw	201h
 24763 00001DA4 0000                    	dw	0
 24764 00001DA6 [481D]                  	dw	result_val	
 24765 00001DA8 [471D]                  	dw	noval
 24766 00001DAA 00                      	db	0	
 24767                                  
 24768                                  p_cntry_code:
 24769 00001DAB 0000                    	dw	0	; local variable
 24770                                  p_code_page:
 24771 00001DAD 0000                    	dw	0	; local variable
 24772                                  
 24773                                  ;-----------------------------------------------------------------------
 24774                                  
 24775                                  	; 27/10/2022
 24776                                  
 24777                                  ; files = n
 24778                                  
 24779                                  ;files_parms p_parms <files_parmsx>
 24780                                  files_parms:
 24781 00001DAF [B41D]                  	dw	files_parmsx
 24782 00001DB1 01                      	db	1
 24783 00001DB2 01                      	db	1
 24784 00001DB3 3B                      	db	';'
 24785                                  
 24786                                  files_parmsx:
 24787 00001DB4 0101[BA1D]              	dw	101h,files_pos	; min,max 1 positional
 24788 00001DB8 00                      	db	0		; no switches
 24789 00001DB9 00                      	db	0		; no keywords
 24790                                  
 24791                                  ;files_pos p_pos <8000h,0,result_val,files_range,0> ; numeric value
 24792                                  files_pos:
 24793 00001DBA 0080                    	dw	8000h
 24794 00001DBC 0000                    	dw	0
 24795 00001DBE [481D]                  	dw	result_val	
 24796 00001DC0 [C31D]                  	dw	files_range
 24797 00001DC2 00                      	db	0
 24798                                  
 24799                                  ;files_range p_range <,,,8,255>
 24800                                  files_range:
 24801 00001DC3 01                      	db	1
 24802 00001DC4 01                      	db	1
 24803 00001DC5 01                      	db	1
 24804 00001DC6 08000000                	dd	8
 24805 00001DCA FF000000                	dd	255
 24806                                  
 24807                                  p_files:
 24808 00001DCE 00                      	db	0		; local variable
 24809                                  
 24810                                  ;-----------------------------------------------------------------------
 24811                                  
 24812                                  	; 27/10/2022
 24813                                  
 24814                                  ; fcbs = n,m
 24815                                  
 24816                                  ;fcbs_parms p_parms <fcbs_parmsx>
 24817                                  fcbs_parms:
 24818 00001DCF [D41D]                  	dw	fcbs_parmsx
 24819 00001DD1 01                      	db	1
 24820 00001DD2 01                      	db	1
 24821 00001DD3 3B                      	db	';'
 24822                                  
 24823                                  fcbs_parmsx:
 24824 00001DD4 0102[DC1D][F01D]        	dw	201h,fcbs_pos_1,fcbs_pos_2 ; min,max = 2 positional
 24825 00001DDA 00                      	db	0		; no switches
 24826 00001DDB 00                      	db	0		; no keywords
 24827                                  
 24828                                  ;fcbs_pos_1 p_pos <8000h,0,result_val,fcbs_range> ; numeric value
 24829                                  fcbs_pos_1:
 24830 00001DDC 0080                    	dw	8000h
 24831 00001DDE 0000                    	dw	0
 24832 00001DE0 [481D]                  	dw	result_val	
 24833 00001DE2 [E51D]                  	dw	fcbs_range
 24834 00001DE4 00                      	db	0
 24835                                  
 24836                                  ;fcbs_range p_range <,,,1,255>
 24837                                  fcbs_range:
 24838 00001DE5 01                      	db	1
 24839 00001DE6 01                      	db	1
 24840 00001DE7 01                      	db	1
 24841 00001DE8 01000000                	dd	1
 24842 00001DEC FF000000                	dd	255
 24843                                  
 24844                                  ;fcbs_pos_2 p_pos <8000h,0,result_val,fcbs_keep_range> ; numeric value
 24845                                  fcbs_pos_2:
 24846 00001DF0 0080                    	dw	8000h
 24847 00001DF2 0000                    	dw	0
 24848 00001DF4 [481D]                  	dw	result_val	
 24849 00001DF6 [F91D]                  	dw	fcbs_keep_range
 24850 00001DF8 00                      	db	0
 24851                                  
 24852                                  ;fcbs_keep_range p_range <,,,0,255>
 24853                                  fcbs_keep_range:
 24854 00001DF9 01                      	db	1
 24855 00001DFA 01                      	db	1
 24856 00001DFB 01                      	db	1
 24857 00001DFC 00000000                	dd	0
 24858 00001E00 FF000000                	dd	255
 24859                                  
 24860 00001E04 00                      p_fcbs:	db	0		; local variable
 24861 00001E05 00                      p_keep:	db	0		; local variable
 24862                                  
 24863                                  ;-----------------------------------------------------------------------
 24864                                  
 24865                                  	; 27/10/2022
 24866                                  
 24867                                  ; lastdrive = x
 24868                                  
 24869                                  ;ldrv_parms p_parms <ldrv_parmsx>
 24870                                  ldrv_parms:
 24871 00001E06 [0B1E]                  	dw	ldrv_parmsx
 24872 00001E08 01                      	db	1
 24873 00001E09 01                      	db	1
 24874 00001E0A 3B                      	db	';'
 24875                                  
 24876                                  ldrv_parmsx:
 24877 00001E0B 0101[111E]              	dw	101h,ldrv_pos	; min,max = 1 positional
 24878 00001E0F 00                      	db	0		; no switches
 24879 00001E10 00                      	db	0		; no keywords
 24880                                  
 24881                                  ;ldrv_pos p_pos	<110h,10h,result_val,noval> ; drive only, ignore colon
 24882                                  ldrv_pos:				    ; remove colon at end
 24883 00001E11 1001                    	dw	110h
 24884 00001E13 1000                    	dw	10h
 24885 00001E15 [481D]                  	dw	result_val	
 24886 00001E17 [471D]                  	dw	noval
 24887 00001E19 00                      	db	0
 24888                                  	
 24889 00001E1A 00                      p_ldrv:	db	0		; local variable
 24890                                  
 24891                                  ;-----------------------------------------------------------------------
 24892                                  
 24893                                  	; 27/10/2022
 24894                                  
 24895                                  ; stacks = n,m
 24896                                  
 24897                                  ;stks_parms p_parms <stks_parmsx>
 24898                                  stks_parms:
 24899 00001E1B [201E]                  	dw	stks_parmsx
 24900 00001E1D 01                      	db	1
 24901 00001E1E 01                      	db	1
 24902 00001E1F 3B                      	db	';'
 24903                                  
 24904                                  stks_parmsx:
 24905 00001E20 0202[281E][3C1E]        	dw	202h,stks_pos_1,stks_pos_2 ; min,max = 2 positionals
 24906 00001E26 00                      	db	0		; no switches
 24907 00001E27 00                      	db	0		; no keywords
 24908                                  
 24909                                  ;stks_pos_1 p_pos <8000h,0,result_val,stks_range> ; numeric value
 24910                                  stks_pos_1:
 24911 00001E28 0080                    	dw	8000h
 24912 00001E2A 0000                    	dw	0
 24913 00001E2C [481D]                  	dw	result_val	
 24914 00001E2E [311E]                  	dw	stks_range
 24915 00001E30 00                      	db	0
 24916                                  
 24917                                  ;stks_range p_range <,,,0,64>
 24918                                  stks_range:
 24919 00001E31 01                      	db	1
 24920 00001E32 01                      	db	1
 24921 00001E33 01                      	db	1
 24922 00001E34 00000000                	dd	0
 24923 00001E38 40000000                	dd	64
 24924                                  
 24925                                  ;stks_pos_2 p_pos <8000h,0,result_val,stk_size_range> ; numeric value
 24926                                  stks_pos_2:
 24927 00001E3C 0080                    	dw	8000h
 24928 00001E3E 0000                    	dw	0
 24929 00001E40 [481D]                  	dw	result_val	
 24930 00001E42 [451E]                  	dw	stk_size_range
 24931 00001E44 00                      	db	0
 24932                                  
 24933                                  ;stk_size_range p_range <,,,0,512>
 24934                                  stk_size_range:
 24935 00001E45 01                      	db	1
 24936 00001E46 01                      	db	1
 24937 00001E47 01                      	db	1
 24938 00001E48 00000000                	dd	0
 24939 00001E4C 00020000                	dd	512	
 24940                                  
 24941                                  p_stack_count:
 24942 00001E50 0000                    	dw	0	; local variable
 24943                                  p_stack_size:
 24944 00001E52 0000                    	dw	0	; local variable
 24945                                  
 24946                                  ;-----------------------------------------------------------------------
 24947                                  
 24948                                  	; 27/10/2022
 24949                                  
 24950                                  ; multitrack = [ on | off ]
 24951                                  
 24952                                  ;mtrk_parms p_parms <mtrk_parmsx>
 24953                                  mtrk_parms:
 24954 00001E54 [591E]                  	dw	mtrk_parmsx
 24955 00001E56 01                      	db	1
 24956 00001E57 01                      	db	1
 24957 00001E58 3B                      	db	';'
 24958                                  
 24959                                  mtrk_parmsx:
 24960 00001E59 0101[5F1E]              	dw	101h,mtrk_pos	; min,max = 1 positional
 24961 00001E5D 00                      	db	0		; no switches
 24962 00001E5E 00                      	db	0		; no keywords
 24963                                  
 24964                                  ;mtrk_pos p_pos <2000h,0,result_val,on_off_string> ; simple string
 24965                                  mtrk_pos:
 24966 00001E5F 0020                    	dw	2000h
 24967 00001E61 0000                    	dw	0
 24968 00001E63 [481D]                  	dw	result_val	
 24969 00001E65 [641D]                  	dw	on_off_string
 24970 00001E67 00                      	db	0
 24971                                  
 24972 00001E68 00                      p_mtrk:	db	0		; local variable
 24973                                  
 24974                                  ;-----------------------------------------------------------------------
 24975                                  
 24976                                  	; 27/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 24977                                  	; (SYSINIT:20B2h)
 24978                                  
 24979                                  ; switches=/k
 24980                                  
 24981                                  ;swit_parms p_parms <swit_parmsx>
 24982                                  swit_parms:
 24983 00001E69 [6E1E]                  	dw	swit_parmsx
 24984 00001E6B 01                      	db	1
 24985 00001E6C 01                      	db	1
 24986 00001E6D 3B                      	db	';'
 24987                                  
 24988                                  swit_parmsx:
 24989 00001E6E 0000                    	dw	0		; no positionals
 24990                                  	;db	5               ; # of switches
 24991                                  	; 27/10/2022 - Retro DOS v4.0 (MSDOS 5.0 IO.SYS, SYSINIT)
 24992 00001E70 03                      	db	3
 24993 00001E71 [781E]                  	dw	swit_k_ctrl	; /k control
 24994                                  	;dw	swit_n_ctrl     ; /n control (for MULTI_CONFIG only)
 24995                                  	;dw	swit_f_ctrl     ; /f control (for MULTI_CONFIG only)
 24996 00001E73 [841E]                  	dw	swit_t_ctrl     ; /t control
 24997 00001E75 [901E]                  	dw	swit_w_ctrl     ; /w control
 24998 00001E77 00                      	db	0		; no keywords
 24999                                  
 25000                                  ;swit_k_ctrl p_pos <0,0,result_val,noval,1> ; switch string follows
 25001                                  swit_k_ctrl:
 25002 00001E78 00000000[481D]-         	dw	0,0,result_val,noval
 25002 00001E7E [471D]             
 25003 00001E80 01                      	db	1
 25004 00001E81 2F4B00                  swit_k:	db	'/K',0
 25005                                  
 25006                                  ; 27/10/2022 - Retro DOS v4.0 (MSDOS 5.0 IO.SYS, SYSINIT)
 25007                                  ;
 25008                                  ;;swit_n_ctrl p_pos <0,0,result_val,noval,1> ; switch string follows
 25009                                  ;swit_n_ctrl:
 25010                                  ;	dw	0,0,result_val,noval
 25011                                  ;	db	1
 25012                                  ;swit_n: db	'/N',0
 25013                                  ;
 25014                                  ;;swit_f_ctrl p_pos <0,0,result_val,noval,1> ; switch string follows
 25015                                  ;swit_f_ctrl:
 25016                                  ;	dw	0,0,result_val,noval
 25017                                  ;	db	1
 25018                                  ;swit_f: db 	'/F',0
 25019                                  
 25020                                  	; 27/10/2022
 25021                                  
 25022                                  ;swit_t_ctrl p_pos <0,0,result_val,noval,1> ; switch string follows	M059
 25023                                  swit_t_ctrl:
 25024 00001E84 00000000[481D]-         	dw	0,0,result_val,noval
 25024 00001E8A [471D]             
 25025 00001E8C 01                      	db	1
 25026 00001E8D 2F5400                  swit_t:	db	'/T',0			   ;				M059
 25027                                  ;swit_w_ctrl p_pos <0,0,result_val,noval,1> ; switch string follows	M063
 25028                                  swit_w_ctrl:
 25029 00001E90 00000000[481D]-         	dw	0,0,result_val,noval
 25029 00001E96 [471D]             
 25030 00001E98 01                      	db	1
 25031 00001E99 2F5700                  swit_w:	db	'/W',0			   ;				M063
 25032                                  
 25033                                  ;   There doesn't need to be p_swit_n or p_swit_f because /N and /F are
 25034                                  ;   acted upon during MULTI_CONFIG processing; we only needed entries
 25035                                  ;   in the above table to prevent the parsing code from complaining about them
 25036                                  
 25037 00001E9C 00                      p_swit_k:	db     0	; local variable
 25038 00001E9D 00                      p_swit_t:	db     0	; local variable			M059
 25039 00001E9E 00                      p_swit_w:	db     0	; local variable			M063
 25040                                  
 25041                                  ;-----------------------------------------------------------------------
 25042                                  
 25043                                  	; 27/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 25044                                  	; (SYSINIT:20E8h)
 25045                                  
 25046                                  ; DOS = [ high | low ]
 25047                                  
 25048                                  ;dos_parms p_parms  <dos_parmsx>
 25049                                  dos_parms:
 25050 00001E9F [A41E]                  	dw	dos_parmsx
 25051 00001EA1 01                      	db	1
 25052 00001EA2 01                      	db	1
 25053 00001EA3 3B                      	db	';'
 25054                                  dos_parmsx:
 25055 00001EA4 01                      	db	1		; min parameters
 25056 00001EA5 02                      	db	2		; max parameters
 25057 00001EA6 [AC1E]                  	dw	dos_pos		; 
 25058 00001EA8 [AC1E]                  	dw	dos_pos		; 
 25059 00001EAA 00                      	db	0		; no switches
 25060 00001EAB 00                      	db	0		; no keywords
 25061                                  
 25062                                  ;dos_pos p_pos	<2000h,0,result_val,dos_strings> ; simple string
 25063                                  ;        p_pos	<2000h,0,result_val,dos_strings> ; simple string
 25064                                  dos_pos:
 25065 00001EAC 00200000[481D]-         	dw	2000h,0,result_val,dos_strings
 25065 00001EB2 [BE1E]             
 25066 00001EB4 00                      	db	0
 25067 00001EB5 00200000[481D]-         	dw	2000h,0,result_val,dos_strings
 25067 00001EBB [BE1E]             
 25068 00001EBD 00                      	db	0	
 25069                                  
 25070                                  dos_strings:	;label	byte
 25071 00001EBE 03                      	db	3		; signals that there is a string choice
 25072 00001EBF 00                      	db	0		; no range definition
 25073 00001EC0 00                      	db	0		; no numeric values choice
 25074 00001EC1 04                      	db	4		; 4 strings for choice
 25075 00001EC2 01                      	db	1		; the 1st string tag
 25076 00001EC3 [CE1E]                  	dw	hi_string
 25077 00001EC5 02                      	db	2		; the 2nd string tag
 25078 00001EC6 [D31E]                  	dw	lo_string
 25079 00001EC8 03                      	db	3
 25080 00001EC9 [D71E]                  	dw	umb_string
 25081 00001ECB 04                      	db	4
 25082 00001ECC [DB1E]                  	dw	noumb_string
 25083                                  
 25084 00001ECE 4849474800              hi_string:	db	"HIGH",0
 25085 00001ED3 4C4F5700                lo_string:	db	"LOW",0
 25086 00001ED7 554D4200                umb_string:	db	"UMB",0
 25087 00001EDB 4E4F554D4200            noumb_string:	db	"NOUMB",0
 25088                                  
 25089 00001EE1 00                      p_dos_hi:	db	0	; local variable
 25090                                  				; BUGBUG : I dont know whether PARSER uses
 25091                                  				;          this variable or not
 25092                                  
 25093                                  ; 27/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 25094                                  
 25095                                  %if 0
 25096                                  
 25097                                  ;****************************************************************** RICHID ****
 25098                                  
 25099                                  ;include	highvar.inc	; devicehigh variables (used by loadhigh also)
 25100                                  
 25101                                  ; 30/03/2019 - Retro DOS v4.0
 25102                                  ;------------------------------------------------------------------------------
 25103                                  
 25104                                  ;   Module:   HIGHVAR.INC - Data common to LOADHIGH and DEVICEHIGH, res seg
 25105                                  ;
 25106                                  ;   Date:     May 14, 1992
 25107                                  ;
 25108                                  ;******************************************************************************
 25109                                  ;
 25110                                  ;   Modification log:
 25111                                  ;
 25112                                  ;     DATE    WHO      DESCRIPTION
 25113                                  ;   --------  -------  --------------------------------------------------------
 25114                                  ;   05/14/92  t-richj  Original
 25115                                  ;   06/21/92  t-richj  Final revisions before check-in
 25116                                  ;
 25117                                  ;******************************************************************************
 25118                                  ;
 25119                                  ; There are two primary definitions which need to be made, selectively, before
 25120                                  ; this include file should be used.  These are:
 25121                                  ;    HV_Extern - If this has been defined, variables for this module will be
 25122                                  ;                declared as external.  Otherwise, variables will be declared
 25123                                  ;                public, as well as defined, here.  LoadHigh declares HV_Extern
 25124                                  ;                in stub.asm and loadhi.asm, and does not declare it in
 25125                                  ;                rdata.asm... DeviceHigh does not declare HV_Extern anywhere
 25126                                  ;                (as only one module, sysconf.asm, includes this file).
 25127                                  ;    HV_LoadHigh - This should be defined when this module is going into
 25128                                  ;                  command.com, for LoadHigh.  All of loadhi.asm, stub.asm and
 25129                                  ;                  rdata.asm define this, while io.sys' sysconf.asm does not.
 25130                                  ;
 25131                                  ;******************************************************************************
 25132                                  
 25133                                  ; To keep track of which UMBs were specified on the DH/LH command lines, and
 25134                                  ; to keep track of the minimum sizes given for each, there're two arrays kept
 25135                                  ; in { IO.SYS: sysinitseg / COMMAND.COM: DATARES }... each is MAXUMB elements
 25136                                  ; big.  16 should be around 14 too many for most users, so there's no expected
 25137                                  ; space problem (it's just such a nice round number, eh?).
 25138                                  
 25139                                  MAXUMB	equ	16
 25140                                  
 25141                                  ; Memory elements owned by the system are marked as PSP address 8 in both the
 25142                                  ; USA and Japan; Japanese systems also use 9 under more bizzarre conditions.
 25143                                  
 25144                                  FreePSPOwner	equ	0	; Free MCBs all have an owner PSP address of 0
 25145                                  SystemPSPOwner	equ	8
 25146                                  ;JapanPSPOwner	equ	9
 25147                                  
 25148                                  ; for LoadHigh and DeviceHigh:
 25149                                  ;
 25150                                  ;	fInHigh - Is set to 1 during HideUMBs(), and back to zero in
 25151                                  ;	          UnHideUMBs().
 25152                                  ;	fUmbTiny - Is set to 1 iff the user has specified /S on the command-
 25153                                  ;	           line.
 25154                                  ;	SegLoad - Segment address for first UMB specified; set automatically.
 25155                                  ;	UmbLoad - The load UMB number; for example, this is 3 if the user has
 25156                                  ;	          given a command-line like "/L:3,500;4"
 25157                                  ;	UmbUsed - An array of characters, each of which is 1 iff the UMB
 25158                                  ;	          matching its index number was specified on the command-line;
 25159                                  ;	          for example, after "/L:3,500;4;7", UmbUsed[3], [4] and [7]
 25160                                  ;	          will be set to 1.  All others will be set to 0.
 25161                                  ;	UmbSize - An array of words, each of which is interpereted as a size
 25162                                  ;	          specified by the user for a UMB (in the above example, all
 25163                                  ;	          elements would be zero save UmbSize[3], which would be 500.
 25164                                  ;	fm_umb - Set to the old UMB link-state (0x80 or 0x00)
 25165                                  ;	fm_strat - Set to the old memory-allocation strategy (0$00000???)
 25166                                  ;	fm_argc  - Number of arguments received by ParseVar() (see ParseVar()
 25167                                  ;	           for details).
 25168                                  
 25169                                  fInHigh:  db	0
 25170                                  fUmbTiny: db	0
 25171                                  SegLoad:  dw	0
 25172                                  UmbLoad:  db	0
 25173                                  UmbUsed:  times MAXUMB db 0 ; times 16 db 0  ; db 16 dup(?)
 25174                                  UmbSize:  times MAXUMB dw 0 ; times 16 dw 0  ; dw 16 dup(?)
 25175                                  fm_umb:   db	0
 25176                                  fm_strat: db	0
 25177                                  fm_argc:  db	0	
 25178                                  
 25179                                  ; UmbLoad is set to UNSPECIFED, below, until /L:umb is read; at which point
 25180                                  ; UmbLoad is set to the UMB number given.
 25181                                  
 25182                                  UNSPECIFIED	equ	-1
 25183                                  
 25184                                  %endif
 25185                                  
 25186                                  ;****************************************************************** RICHID ****
 25187                                  
 25188                                  ; 30/03/2019 - Retro DOS v4.0 (MSDOS 6.0, SYSCONF.ASM)
 25189                                  ; ((MSDOS 6.21 IO.SYS -> SYNINIT:22BAh))
 25190                                  
 25191                                  ; 27/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 25192                                  ; (SYSINIT:212Bh)	
 25193                                  
 25194                                  		;public	DevEntry
 25195                                  
 25196 00001EE2 0000                    DevSize:	dw	0	; size of the device driver being loaded(paras)
 25197 00001EE4 0000                    DevLoadAddr:	dw	0	; Mem addr where the device driver is 2 b loaded
 25198 00001EE6 0000                    DevLoadEnd:	dw	0	; MaxAddr to which device can be loaded
 25199 00001EE8 00000000                DevEntry:	dd	0	; Entry point to the device driver
 25200 00001EEC 00000000                DevBrkAddr:	dd	0	; Break address of the device driver
 25201                                  ; 27/10/2022 
 25202                                  ;ConvLoad:	db	0	; Use conventional (dos 5 -style) InitDevLoad?
 25203                                  ;
 25204 00001EF0 00                      DevUMB:		db	0	; byte indicating whether to load DDs in UMBs
 25205 00001EF1 0000                    DevUMBAddr:	dw	0	; cuurent UMB used fro loading devices (paras)
 25206 00001EF3 0000                    DevUMBSize:	dw	0	; Size of the current UMB being used   (paras)
 25207 00001EF5 0000                    DevUMBFree:	dw	0	; Start of free are in the current UMB (paras)
 25208                                  ;
 25209 00001EF7 00000000                DevXMSAddr:	dd	0
 25210                                  ;
 25211 00001EFB 0000                    DevExecAddr:	dw	0	; Device load address parameter to Exec call
 25212 00001EFD 0000                    DevExecReloc:	dw	0	; Device load relocation factor
 25213                                  ;
 25214 00001EFF 00                      DeviceHi:	db	0	; Flag indicating whther the current device
 25215                                  				;  is being loaded into UMB
 25216 00001F00 0000                    DevSizeOption:	dw	0	; SIZE= option
 25217                                  ;
 25218 00001F02 00                      Int12Lied:	db	0	; did we trap int 12 ?
 25219 00001F03 0000                    OldInt12Mem:	dw	0	; value in 40:13h (int 12 ram)
 25220 00001F05 50524F544D414E24        ThreeComName:	db	'PROTMAN$'	; 3Com Device name
 25221                                  ;
 25222 00001F0D 00                      FirstUMBLinked:	db	0
 25223 00001F0E 0000                    DevDOSData:	dw	0	; segment of DOS Data
 25224 00001F10 00000000                DevCmdLine:	dd	0	; Current Command line
 25225 00001F14 00                      DevSavedDelim:	db	0	; The delimiter which was replaced with null
 25226                                  				; to use the file name in the command line
 25227                                  ;
 25228                                  ;	ifdef	dblspace_hooks
 25229                                  ;MagicHomeFlag:	db	0	; set non-zero when MagicDrv is final placed
 25230                                  ;	endif
 25231                                  
 25232                                  ; ===========================================================================
 25233                                  
 25234                                  ; 31/03/2019 - Retro DOS v4.0
 25235                                  
 25236                                  ; 27/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 25237                                  ; (SYSINIT:215Eh)
 25238                                  
 25239                                  ;----------------------------------------------------------------------------
 25240                                  ;
 25241                                  ; procedure : doconf
 25242                                  ;
 25243                                  ;             Config file is parsed initially with this routine. For the
 25244                                  ;             Subsequent passes 'multi_pass' entry is used .
 25245                                  ;
 25246                                  ;----------------------------------------------------------------------------
 25247                                  
 25248                                  	; 27/10/2022
 25249                                  doconf:
 25250 00001F15 0E                      	push	cs
 25251 00001F16 1F                      	pop	ds
 25252                                  
 25253 00001F17 B80037                  	mov	ax,3700h
 25254                                          ;mov	ax,(CHAR_OPER<<8)	; get switch character
 25255 00001F1A CD21                    	int	21h
 25256 00001F1C 8816[AA02]              	mov	[command_line+1],dl	; set in default command line
 25257                                  
 25258                                  ; 27/10/2022
 25259                                  ;;ifdef	MULTI_CONFIG
 25260                                  ;	;mov	[command_line-1],dl     ; save default switchchar
 25261                                  ;	mov	[def_swchr],dl ; 31/03/2019 
 25262                                  ;;endif	;MULTI_CONFIG
 25263                                  
 25264 00001F20 BA[FC33]                	mov	dx,config ;'\CONFIG.SYS' ;now pointing to file description
 25265 00001F23 B8003D                  	mov	ax,3D00h
 25266                                  	;mov	ax,OPEN<<8		;open file "config.sys"
 25267 00001F26 F9                      	stc				;in case of int 24
 25268 00001F27 CD21                    	int	21h			;function request
 25269 00001F29 7306                    	jnc	short noprob		; brif opened okay
 25270                                  
 25271                                  ; 27/10/2022
 25272                                  ;;ifdef	MULTI_CONFIG
 25273                                  ;      	call	kbd_read		; we still want to give the guy
 25274                                  ;					; a chance to select clean boot!
 25275                                  ;;endif					; (ie, no autoexec.bat processing)
 25276 00001F2B C606[4903]0B            	mov	byte [multi_pass_id],11	; set it to unreasonable number
 25277 00001F30 C3                      	retn
 25278                                  noprob: 				;get file size (note < 64k!!)
 25279 00001F31 89C3                    	mov	bx,ax  ; File handle
 25280 00001F33 31C9                    	xor	cx,cx
 25281 00001F35 31D2                    	xor	dx,dx
 25282                                  	;mov	ax,4202h
 25283 00001F37 B80242                  	mov	ax,(LSEEK<<8)|2
 25284 00001F3A CD21                    	int	21h
 25285 00001F3C A3[D203]                	mov	[count],ax
 25286                                  
 25287 00001F3F 31D2                    	xor	dx,dx
 25288                                  	;mov	ax,4200h
 25289 00001F41 B80042                  	mov	ax,LSEEK<<8		;reset pointer to beginning of file
 25290 00001F44 CD21                    	int	21h
 25291                                  
 25292                                  	;mov	dx,[ALLOCLIM]		;use current alloclim value
 25293                                  	; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 25294 00001F46 8B16[A102]              	mov	dx,[top_of_cdss] 
 25295                                  
 25296 00001F4A A1[D203]                	mov	ax,[count]
 25297 00001F4D A3[4C03]                	mov	[config_size],ax	;save the size of config.sys file.
 25298 00001F50 E866F1                  	call	ParaRound
 25299 00001F53 29C2                    	sub	dx,ax
 25300                                  
 25301                                  ; 27/10/2022
 25302                                  ;;ifdef	MULTI_CONFIG
 25303                                  ;;
 25304                                  ;;  The size of the CONFIG.SYS workspace (for recreating the in-memory
 25305                                  ;;  CONFIG.SYS image, and later for building the initial environment) need
 25306                                  ;;  not be any larger than CONFIG.SYS itself, EXCEPT for the fact that
 25307                                  ;;  we (may) add a variable to the environment that does not explicity appear
 25308                                  ;;  in CONFIG.SYS, and that variable is CONFIG (as in CONFIG=COMMON).
 25309                                  ;;  The default setting for CONFIG cannot result in more than 1 paragraph
 25310                                  ;;  of extra space, so here we account for it (the worst case of course is
 25311                                  ;;  when CONFIG.SYS is some very small size, like 0 -JTP)
 25312                                  ;;
 25313                                  ;       dec     dx                      ;reserve 1 additional paragraph
 25314                                  ;       mov     [config_wrkseg],dx      ;this is the segment to be used for
 25315                                  ;       sub     dx,ax                   ;rebuilding the config.sys memory image
 25316                                  ;;endif	;MULTI_CONFIG
 25317                                  
 25318 00001F55 83EA11                  	sub	dx,11h			;room for header
 25319                                  	
 25320                                  	;mov	[ALLOCLIM],dx		;config starts here. new alloclim value.
 25321                                  	;mov	[CONFBOT],dx
 25322                                  	; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 25323 00001F58 8916[A102]              	mov	[top_of_cdss],dx
 25324 00001F5C E870EC                  	call    TempCDS 
 25325                                  	; 11/12/2022
 25326                                  	; ds <> cs 
 25327 00001F5F 2E8B16[A102]            	mov	dx,[cs:top_of_cdss]
 25328                                   
 25329 00001F64 8EDA                    	mov	ds,dx
 25330 00001F66 8EC2                    	mov	es,dx
 25331                                  
 25332 00001F68 31D2                    	xor	dx,dx
 25333 00001F6A 2E8B0E[D203]            	mov	cx,[cs:count]
 25334 00001F6F B43F                    	mov	ah,3Fh
 25335                                  	;mov	ah,READ  ; 3Fh
 25336 00001F71 F9                      	stc				;in case of int 24
 25337 00001F72 CD21                    	int	21h			;function request
 25338 00001F74 9C                      	pushf
 25339                                  
 25340                                  ; find the eof mark in the file. if present,then trim length.
 25341                                  
 25342 00001F75 50                      	push	ax
 25343 00001F76 57                      	push	di
 25344 00001F77 51                      	push	cx
 25345 00001F78 B01A                    	mov	al,1Ah			; eof mark
 25346 00001F7A 89D7                    	mov	di,dx			; point to buffer
 25347 00001F7C E305                    	jcxz	puteol			; no chars
 25348 00001F7E F2AE                    	repnz	scasb			; find end
 25349 00001F80 7501                    	jnz	short puteol		; none found and count exhausted
 25350                                  
 25351                                  ; we found a 1a. back up
 25352                                  
 25353 00001F82 4F                      	dec	di			; backup past 1Ah
 25354                                  
 25355                                  ;  just for the halibut, stick in an extra eol
 25356                                  
 25357                                  puteol:
 25358 00001F83 B00D                    	mov	al,cr ; 0Dh
 25359 00001F85 AA                      	stosb
 25360 00001F86 B00A                    	mov	al,lf  ;0Ah
 25361 00001F88 AA                      	stosb
 25362 00001F89 29D7                    	sub	di,dx			; difference moved
 25363                                  	; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 25364                                  	;mov	[cs:count],di		; new count
 25365                                  
 25366                                  	; 11/12/2022	
 25367                                  	; 31/03/2019 - Retro DOS v4.0
 25368 00001F8B 0E                      	push	cs
 25369 00001F8C 1F                      	pop	ds
 25370                                  
 25371 00001F8D 893E[D203]              	mov	[count],di		; new count
 25372                                  
 25373 00001F91 59                      	pop	cx
 25374 00001F92 5F                      	pop	di
 25375 00001F93 58                      	pop	ax
 25376                                  
 25377                                  	; 11/12/2022
 25378                                  	; 27/10/2022
 25379                                  	;push	cs
 25380                                  	;pop	ds
 25381                                  
 25382 00001F94 50                      	push	ax
 25383                                  	;mov	ah,CLOSE
 25384 00001F95 B43E                    	mov	ah,3Eh
 25385 00001F97 CD21                    	int	21h
 25386 00001F99 58                      	pop	ax
 25387 00001F9A 9D                      	popf
 25388 00001F9B 7204                    	jc	short conferr 		;if not we've got a problem
 25389 00001F9D 39C1                    	cmp	cx,ax
 25390 00001F9F 742C                    	jz	short getcom		;couldn't read the file
 25391                                  conferr:
 25392 00001FA1 BA[FC33]                	mov	dx,config		;want to print config error
 25393 00001FA4 E8AC13                  	call	badfil
 25394                                  endconv:
 25395 00001FA7 C3                      	retn
 25396                                  
 25397                                  ;----------------------------------------------------------------------------
 25398                                  ;
 25399                                  ; entry : multi_pass
 25400                                  ;
 25401                                  ;             called to execute device=,install= commands
 25402                                  ;
 25403                                  ;----------------------------------------------------------------------------
 25404                                  
 25405                                  	; 27/10/2022
 25406                                  multi_pass:
 25407 00001FA8 0E                      	push	cs
 25408 00001FA9 1F                      	pop	ds
 25409                                  
 25410 00001FAA 803E[4903]0A            	cmp	byte [multi_pass_id],10
 25411                                  ;jae_endconv:
 25412 00001FAF 73F6                    	jae	short endconv 		; do nothing. just return.
 25413                                  
 25414                                  	;push	word [CONFBOT]
 25415                                  	; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 25416 00001FB1 FF36[A102]              	push	word [top_of_cdss]
 25417 00001FB5 07                      	pop	es			; es -> confbot
 25418                                  
 25419 00001FB6 8B36[D403]              	mov	si,[org_count]
 25420 00001FBA 8936[D203]              	mov	[count],si		; set count
 25421 00001FBE 31F6                    	xor	si,si ; 0
 25422 00001FC0 8936[D603]                      mov     [chrptr],si		; reset chrptr
 25423 00001FC4 8936[2B03]                      mov     [linecount],si		; reset linecount
 25424                                  
 25425 00001FC8 E86807                  	call	getchr
 25426 00001FCB EB06                    	jmp	short conflp
 25427                                  
 25428                                  getcom:
 25429 00001FCD E8B10E                          call    organize                ; organize the file
 25430 00001FD0 E86007                  	call	getchr
 25431                                  conflp: 
 25432 00001FD3 72D2                    	jc	short endconv
 25433                                  
 25434 00001FD5 FF06[2B03]                      inc     word [linecount]	; increase linecount
 25435                                  
 25436 00001FD9 C606[2B14]00            	mov	byte [multdeviceflag],0	; reset multdeviceflag.
 25437 00001FDE C606[2E14]00            	mov	byte [setdevmarkflag],0	; reset setdevmarkflag.
 25438 00001FE3 3C0A                    	cmp	al,lf			; linefeed?
 25439 00001FE5 7416                    	je	short blank_line	;  then ignore this line.
 25440                                  
 25441                                  ; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 25442                                  %if 0
 25443                                  
 25444                                  ;ifdef	MULTI_CONFIG
 25445                                  
 25446                                  ;   If this is a genuine CONFIG.SYS command, then there should be a line
 25447                                  ;   number immediately following it....
 25448                                  
 25449                                          mov     [config_cmd],al         ; save original command code
 25450                                  	;and	al,NOT CONFIG_OPTION_QUERY
 25451                                  	and	al,~CONFIG_OPTION_QUERY ; and al,7Fh
 25452                                          cmp     byte [config_multi],0	; is this a multi-config config.sys?
 25453                                          je      short not_final		; no, line number is not embedded
 25454                                  
 25455                                          push    ax                      ;
 25456                                          call    getchr                  ; ignore end-of-image errors,
 25457                                          mov     ah,al                   ; because if there's an error
 25458                                          call    getchr                  ; fetching the line number that's
 25459                                          xchg    al,ah                   ; supposed to be there, the next
 25460                                          mov     [linecount],ax          ; getchr call will get the same error
 25461                                          pop     ax
 25462                                  ;
 25463                                  ;   HACK: when 4DOS.COM is the shell and it doesn't have an environment from
 25464                                  ;   which to obtain its original program name, it grovels through all of
 25465                                  ;   memory to find the filename that was used to exec it; it wants to find
 25466                                  ;   the SHELL= line in the in-memory copy of CONFIG.SYS, and it knows that
 25467                                  ;   sysinit converts the SHELL= keyword to an 'S', so it expects to find an 'S'
 25468                                  ;   immediately before the filename, but since we are now storing line # info
 25469                                  ;   in the config.sys memory image, 4DOS fails to find the 'S' in the right
 25470                                  ;   spot.
 25471                                  ;
 25472                                  ;   So, on the final pass of CONFIG.SYS, copy the command code (eg, 'S')
 25473                                  ;   over the line number info, since we no longer need that info anyway. This
 25474                                  ;   relies on the fact that getchr leaves ES:SI pointing to the last byte
 25475                                  ;   retrieved.
 25476                                  ;
 25477                                          cmp	byte [multi_pass_id],2	; final pass?
 25478                                          jb	short not_final		; no
 25479                                          ;test	word [install_flag],have_install_cmd
 25480                                  	test	byte [install_flag],have_install_cmd ; 1
 25481                                          jz	short final		; no install cmds, so yes it is
 25482                                          cmp	byte [multi_pass_id],3	; final pass?
 25483                                          jb	short not_final		; no
 25484                                  final:                                  ;
 25485                                  	mov	[es:si],al		; save backward-compatible command code
 25486                                  not_final:                              ;
 25487                                  ;endif
 25488                                  
 25489                                  %endif
 25490 00001FE7 88C4                    	mov	ah,al
 25491 00001FE9 E84707                  	call	getchr
 25492 00001FEC 7314                    	jnc	short tryi
 25493                                  
 25494 00001FEE 803E[4903]02            	cmp	byte [multi_pass_id],2
 25495                                  	;jae	short jae_endconv	; do not show badop again for multi_pass.
 25496                                  	; 27/10/2022
 25497 00001FF3 73B2                    	jnb	short endconv	
 25498 00001FF5 E90707                  	jmp	badop
 25499                                  	
 25500                                  coff:	
 25501                                  	; 11/12/2022
 25502                                  	; ds = cs
 25503                                  	;push	cs
 25504                                  	;pop	ds
 25505 00001FF8 E89D10                  	call	newline
 25506 00001FFB EBD6                    	jmp	short conflp	; 13/05/2019
 25507                                  
 25508                                  blank_line:
 25509 00001FFD E83307                  	call	getchr
 25510 00002000 EBD1                    	jmp	short conflp
 25511                                  
 25512                                  	; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 25513                                  ; 11/12/2022
 25514                                  ; (there is not a jump or call to here from anywhere!)
 25515                                  ;coff_p:
 25516                                  	;push	cs
 25517                                  	;pop	ds
 25518                                  
 25519                                  ;to handle install= commands,we are going to use multi-pass.
 25520                                  ;the first pass handles the other commands and only set install_flag when
 25521                                  ;it finds any install command. the second pass will only handle the
 25522                                  ;install= command.
 25523                                  
 25524                                  ;------------------------------------------------------------------------------
 25525                                  ;install command
 25526                                  ;------------------------------------------------------------------------------
 25527                                  
 25528                                  	; 27/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 25529                                  	; (SYSINIT:2250h)
 25530                                  tryi:
 25531 00002002 803E[4903]00            	cmp	byte [multi_pass_id],0	; the initial pass for DOS=HI
 25532 00002007 7503                    	jne	short not_init_pass
 25533 00002009 E92301                  	jmp	multi_try_doshi
 25534                                  not_init_pass:
 25535 0000200C 803E[4903]02            	cmp	byte [multi_pass_id],2	; the second pass was for ifs=
 25536                                          ; 11/12/2022
 25537                                  	;je	short multi_pass_coff2	; now it is NOPs
 25538 00002011 74E5                    	je	short coff
 25539                                  	; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 25540                                  	;je	short multi_pass_coff	
 25541                                  					; This pass can be made use of if
 25542                                  					; we want do some config.sys process
 25543                                  					; after device drivers are loaded
 25544                                  					; and before install= commands
 25545                                  					; are processed
 25546                                  
 25547 00002013 803E[4903]03            	cmp	byte [multi_pass_id],3	; the third pass for install= ?
 25548 00002018 7411                    	je	short multi_try_i
 25549 0000201A 80FC48                          cmp     ah, CONFIG_DOS  ; 'H'
 25550                                  	; 11/12/2022
 25551                                  	;je	short multi_pass_coff2
 25552 0000201D 74D9                    	je	short coff
 25553                                  	; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 25554                                  	;je	short multi_pass_coff	
 25555                                  
 25556                                  ;       make note of any INSTALL= or INSTALLHIGH= commands we find,
 25557                                  ;       but don't process them now.        
 25558                                          
 25559 0000201F 80FC49                          cmp     ah,CONFIG_INSTALL ; 'I'	; install= command?
 25560                                  	;jne	short precheck_installhigh ; the first pass is for normal operation.
 25561                                  	; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 25562 00002022 752A                    	jne	short tryb	
 25563                                  	
 25564                                  	;or	word [install_flag],have_install_cmd ; set the flag
 25565 00002024 800E[4A03]01            	or	byte [install_flag],have_install_cmd ; 1
 25566                                  multi_pass_coff2:
 25567 00002029 EBCD                    	jmp	short coff ; 13/05/2019	; and handles the next command
 25568                                  
 25569                                  	; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 25570                                  ;precheck_installhigh:
 25571                                  ;       cmp     ah,CONFIG_INSTALLHIGH ; 'W' ; signifier for INSTALLHIGH
 25572                                  ;       jne     short tryb		; carry on with normal processing
 25573                                  ;	;or	word [install_flag],have_install_cmd
 25574                                  ;	or	byte [install_flag],have_install_cmd ; 1
 25575                                  ;       jmp	short coff
 25576                                  
 25577                                  multi_try_i:
 25578 0000202B 80FC49                          cmp     ah, CONFIG_INSTALL ; 'I' ; install= command?
 25579                                  	;jne	short multi_try_n	; no, check for installhigh
 25580                                  	; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 25581 0000202E 7505                    	jne	short multi_pass_filter
 25582                                  
 25583                                  ; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 25584                                  ;;ifdef	MULTI_CONFIG
 25585                                  ;       call    query_user              ; query the user if config_cmd
 25586                                  ;       jc	short multi_pass_filter	; has the CONFIG_OPTION_QUERY bit set
 25587                                  ;;endif
 25588                                  
 25589 00002030 E806F0                  	call	do_install_exec 	;install it.
 25590 00002033 EBC3                    	jmp	short coff		;to handle next install= command.
 25591                                  
 25592                                  ; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 25593                                  %if 0
 25594                                  
 25595                                  multi_try_n:
 25596                                          cmp     ah,CONFIG_INSTALLHIGH   ; installhigh= command?
 25597                                          jne	short multi_pass_filter	; no. ignore this.
 25598                                  ;ifdef	MULTI_CONFIG
 25599                                          call    query_user              ; query the user if config_cmd
 25600                                          jc      short multi_pass_filter	; has the CONFIG_OPTION_QUERY bit set
 25601                                  ;endif
 25602                                  
 25603                                  ;       The memory environment is in its normal DOS state, so do
 25604                                  ;       the standard calls to set the alloc strategy for loading high
 25605                                  
 25606                                  	mov	ax,(ALLOCOPER<<8)|0 ; 5800h
 25607                                  	int	21h			;get alloc strategy
 25608                                  	mov	bx,ax
 25609                                          push    bx                      ; save for the return
 25610                                  
 25611                                          or	bx,HIGH_FIRST  ; 80h	;set alloc to HighFirst
 25612                                  	mov	ax,(ALLOCOPER<<8)|1 ; 5801h
 25613                                  	int	21h			;set alloc strategy
 25614                                  
 25615                                  	mov     ax,(ALLOCOPER<<8)|2 ; 5802h
 25616                                          int     21h                     ; get link state
 25617                                          xor     ah,ah                   ; clear top byte
 25618                                          push    ax                      ; save for return
 25619                                  
 25620                                          mov	ax,(ALLOCOPER<<8)|3 ; 5803h
 25621                                  	mov	bx,1
 25622                                  	int	21h			;link in UMBs
 25623                                  
 25624                                  	call	do_install_exec 	;install it.
 25625                                  
 25626                                          mov     ax,(ALLOCOPER<<8)|3
 25627                                          pop     bx                      ; recover original link state
 25628                                          int     21h
 25629                                          pop     bx                      ; recover original alloc strategy
 25630                                          mov     ax,(ALLOCOPER<<8)|1
 25631                                          int     21h
 25632                                  
 25633                                  	jmp	coff			;to handle next install= command.
 25634                                  
 25635                                  %endif
 25636                                  
 25637                                  multi_pass_filter:
 25638 00002035 80FC59                          cmp     ah,CONFIG_COMMENT ; 'Y' ; comment?
 25639 00002038 740A                    	je	short multi_pass_adjust
 25640 0000203A 80FC5A                          cmp     ah,CONFIG_UNKNOWN ; 'Z' ; bad command?
 25641 0000203D 7405                    	je	short multi_pass_adjust
 25642 0000203F 80FC30                          cmp     ah,CONFIG_REM  ; '0' 	; rem?
 25643 00002042 7508                    	jne	short multi_pass_coff 	; ignore the rest of the commands.
 25644                                  
 25645                                  multi_pass_adjust:			; these commands need to
 25646 00002044 FF0E[D603]              	dec	word [chrptr]		;  adjust chrptr,count
 25647 00002048 FF06[D203]              	inc	word [count]		;  for newline proc.
 25648                                  
 25649                                  multi_pass_coff:
 25650                                  	; 11/12/2022
 25651 0000204C EBAA                    	jmp	short coff		; to handle next install= commands.
 25652                                  
 25653                                  ;------------------------------------------------------------------------------
 25654                                  ; buffer command
 25655                                  ;------------------------------------------------------------------------------
 25656                                  
 25657                                  ;******************************************************************************
 25658                                  ;									      *
 25659                                  ; function: parse the parameters of buffers= command.			      *
 25660                                  ;									      *
 25661                                  ; input :								      *
 25662                                  ;	es:si -> parameters in command line.				      *
 25663                                  ; output:								      *
 25664                                  ;	buffers set							      *
 25665                                  ;	buffer_slash_x	flag set if /x option chosen.			      *
 25666                                  ;	h_buffers set if secondary buffer cache specified.		      *
 25667                                  ;									      *
 25668                                  ; subroutines to be called:						      *
 25669                                  ;	sysinit_parse							      *
 25670                                  ; logic:								      *
 25671                                  ; {									      *
 25672                                  ;	set di points to buf_parms;  /*parse control definition*/	      *
 25673                                  ;	set dx,cx to 0; 						      *
 25674                                  ;	reset buffer_slash_x;						      *
 25675                                  ;	while (end of command line)					      *
 25676                                  ;	{ sysinit_parse;						      *
 25677                                  ;	  if (no error) then						      *
 25678                                  ;	       if (result_val._$P_synonym_ptr == slash_e) then /*not a switch *
 25679                                  ;		    buffer_slash_x = 1					      *
 25680                                  ;	       else if	 (cx == 1) then 	    /* first positional */    *
 25681                                  ;			  buffers = result_val._$P_picked_val;		      *
 25682                                  ;		    else  h_buffers = result_val._$P_picked_val; 	      *
 25683                                  ;	  else	{show error message;error exit} 			      *
 25684                                  ;	};								      *
 25685                                  ;	if (buffer_slash_x is off & buffers > 99) then show_error;	      *
 25686                                  ; };									      *
 25687                                  ;									      *
 25688                                  ;******************************************************************************
 25689                                  
 25690                                  	; 27/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 25691                                  	; (SYSINIT:229Ch)
 25692                                  tryb:
 25693 0000204E 80FC42                          cmp     ah,CONFIG_BUFFERS ; 'B'
 25694 00002051 7557                    	jne	short tryc
 25695                                  
 25696                                  ; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 25697                                  ;;ifdef	MULTI_CONFIG
 25698                                  ;       call    query_user              ; query the user if config_cmd
 25699                                  ;       jc      short tryc		; has the CONFIG_OPTION_QUERY bit set
 25700                                  ;;endif
 25701                                  
 25702                                  	; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 25703                                  	; 18/12/2022
 25704 00002053 31C9                    	xor	cx,cx
 25705                                  	;mov	byte [p_buffer_slash_x],0 ; 31/03/2019
 25706 00002055 880E[461D]              	mov	[p_buffer_slash_x],cl ; 0
 25707                                  
 25708 00002059 BF[FF1C]                	mov	di,buf_parms
 25709                                  	;xor	cx,cx	; 18/12/2022
 25710                                  	; 04/01/2023
 25711                                  	;mov	dx,cx
 25712                                  do7:
 25713 0000205C E87D06                  	call	sysinit_parse
 25714 0000205F 7303                    	jnc	short if7		; parse error,
 25715                                  	; 04/01/2023
 25716                                  	;call	badparm_p		;  and show messages and end the search loop.
 25717                                  	;;jmp	short sr7
 25718                                  	; 31/12/2022
 25719                                  ;sr7:
 25720                                  	;jmp	coff
 25721                                  	; 04/01/2023
 25722 00002061 E9F605                  	jmp	badparm_p_coff
 25723                                  if7:
 25724 00002064 83F8FF                  	cmp	ax,_$P_RC_EOL ; 0FFFFh	; end of line?
 25725 00002067 741A                    	je	short en7		;  then jmp to $endloop for semantic check
 25726                                  	;cmp	word [result_val_swoff],switch_x
 25727 00002069 813E[4A1D][3F1D]        	cmp	word [result_val+_$P_Result_Blk.SYNONYM_Ptr],switch_x
 25728                                  	;jne	short if11
 25729                                  	; 31/12/2022
 25730 0000206F 74EB                    	je	short do7 ;je short en11
 25731                                  
 25732                                  ;	mov	byte [p_buffer_slash_x],1 ; set the flag M016
 25733                                  	;jmp	short en11 ; 31/12/2022
 25734                                  if11:
 25735                                  	;mov	ax,[rv_dword]
 25736 00002071 A1[4C1D]                	mov	ax,[result_val+_$P_Result_Blk.Picked_Val]
 25737 00002074 83F901                  	cmp	cx,1
 25738 00002077 7505                    	jne	short if13
 25739                                  
 25740 00002079 A3[421D]                	mov	[p_buffers],ax
 25741                                  	;jmp	short en11
 25742                                  	; 31/12/2022
 25743 0000207C EBDE                    	jmp	short do7
 25744                                  if13:
 25745 0000207E A3[441D]                	mov	[p_h_buffers],ax
 25746                                  en11:
 25747 00002081 EBD9                    	jmp	short do7
 25748                                  en7:
 25749 00002083 833E[421D]63            	cmp	word [p_buffers],99
 25750 00002088 760B                    	jbe	short if18
 25751                                  
 25752                                  ;	cmp	byte [p_buffer_slash_x],0 ; M016
 25753                                  ;	jne	short if18
 25754                                  
 25755 0000208A E87E06                  	call	badparm_p
 25756 0000208D C706[441D]0000          	mov	word [p_h_buffers],0
 25757 00002093 EB12                    	jmp	short sr7
 25758                                  if18:
 25759 00002095 A1[421D]                	mov	ax,[p_buffers]	; we don't have any problem.
 25760 00002098 A3[9702]                	mov	[buffers],ax	; now,let's set it really.
 25761                                  
 25762 0000209B A1[441D]                	mov	ax,[p_h_buffers]
 25763 0000209E A3[9902]                	mov	[h_buffers],ax
 25764                                  
 25765                                  ;	mov	al,[p_buffer_slash_x]	; M016
 25766                                  ;	mov	[buffer_slash_x],al
 25767                                  
 25768 000020A1 A1[2B03]                	mov	ax,[linecount]
 25769 000020A4 A3[3503]                	mov	[buffer_linenum],ax ; save the line number for the future use.
 25770                                  	; 31/12/2022
 25771                                  	;jmp	short sr7
 25772                                  	; 04/01/2023
 25773                                  sr7:
 25774 000020A7 E94EFF                  	jmp	coff
 25775                                  
 25776                                  ;------------------------------------------------------------------------------
 25777                                  ; break command
 25778                                  ;------------------------------------------------------------------------------
 25779                                  
 25780                                  ;****************************************************************************
 25781                                  ;									    *
 25782                                  ; function: parse the parameters of break = command.			    *
 25783                                  ;									    *
 25784                                  ; input :								    *
 25785                                  ;	es:si -> parameters in command line.				    *
 25786                                  ; output:								    *
 25787                                  ;	turn the control-c check on or off.				    *
 25788                                  ;									    *
 25789                                  ; subroutines to be called:						    *
 25790                                  ;	sysinit_parse							    *
 25791                                  ; logic:								    *
 25792                                  ; {									    *
 25793                                  ;	set di to brk_parms;						    *
 25794                                  ;	set dx,cx to 0; 						    *
 25795                                  ;	while (end of command line)					    *
 25796                                  ;	{ sysinit_parse;						    *
 25797                                  ;	  if (no error) then						    *
 25798                                  ;	       if (result_val._$P_item_tag == 1) then	  /*on		 */ *
 25799                                  ;		   set p_ctrl_break,on;					    *
 25800                                  ;	       else					  /*off 	 */ *
 25801                                  ;		   set p_ctrl_break,off;				    *
 25802                                  ;	  else {show message;error_exit};				    *
 25803                                  ;	};								    *
 25804                                  ;	if (no error) then						    *
 25805                                  ;	   dos function call to set ctrl_break check according to	    *
 25806                                  ; };									    *
 25807                                  ;									    *
 25808                                  ;****************************************************************************
 25809                                  
 25810                                  	; 27/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 25811                                  	; (SYSINIT:22FFh)
 25812                                  tryc:
 25813 000020AA 80FC43                          cmp     ah,CONFIG_BREAK ; 'C'
 25814 000020AD 7534                    	jne	short trym
 25815                                  
 25816                                  ; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 25817                                  ;;ifdef MULTI_CONFIG
 25818                                  ;       call    query_user              ; query the user if config_cmd
 25819                                  ;       jc	short trym		; has the CONFIG_OPTION_QUERY bit set
 25820                                  ;;endif
 25821 000020AF BF[501D]                	mov	di,brk_parms
 25822 000020B2 31C9                    	xor	cx,cx
 25823                                  	; 04/01/2023
 25824                                  	;mov	dx,cx
 25825                                  do22:
 25826 000020B4 E82506                  	call	sysinit_parse
 25827 000020B7 7303                    	jnc	short if22		; parse error
 25828                                  	;call	badparm_p		;  show message and end the search loop.
 25829                                  	;;jmp	short sr22
 25830                                  	; 31/12/2022
 25831                                  ;sr22:
 25832                                  	;jmp	coff
 25833                                  	; 04/01/2023
 25834 000020B9 E99E05                  	jmp	badparm_p_coff
 25835                                  if22:
 25836 000020BC 83F8FF                  	cmp	ax,_$P_RC_EOL		; end of line?
 25837 000020BF 7415                    	je	short en22		; then end the $endloop
 25838                                  
 25839                                  	;cmp	byte [result_val_itag],1
 25840 000020C1 803E[491D]01            	cmp	byte [result_val+_$P_Result_Blk.Item_Tag],1
 25841 000020C6 7507                    	jne	short if26
 25842                                  
 25843 000020C8 C606[751D]01            	mov	byte [p_ctrl_break],1	; turn it on
 25844                                  	;jmp	short en26
 25845                                  	; 31/12/2022
 25846 000020CD EBE5                    	jmp	short do22
 25847                                  if26:
 25848 000020CF C606[751D]00            	mov	byte [p_ctrl_break],0	; turn it off
 25849                                  en26:
 25850 000020D4 EBDE                    	jmp	short do22		; we actually set the ctrl break
 25851                                  en22:
 25852 000020D6 B433                    	mov	ah,SET_CTRL_C_TRAPPING ; if we don't have any parse error.
 25853 000020D8 B001                    	mov	al,1
 25854 000020DA 8A16[751D]              	mov	dl,[p_ctrl_break]
 25855 000020DE CD21                    	int	21h
 25856                                  	; 31/12/2022
 25857                                  	;jmp	short sr22
 25858                                  	; 04/01/2023
 25859                                  sr22:
 25860 000020E0 E915FF                  	jmp	coff
 25861                                  
 25862                                  ;------------------------------------------------------------------------------
 25863                                  ; multitrack command
 25864                                  ;------------------------------------------------------------------------------
 25865                                  
 25866                                  ;******************************************************************************
 25867                                  ;									      *
 25868                                  ; function: parse the parameters of multitrack= command.		      *
 25869                                  ;									      *
 25870                                  ; input :								      *
 25871                                  ;	es:si -> parameters in command line.				      *
 25872                                  ; output:								      *
 25873                                  ;	turn multrk_flag on or off.					      *
 25874                                  ;									      *
 25875                                  ; subroutines to be called:						      *
 25876                                  ;	sysinit_parse							      *
 25877                                  ; logic:								      *
 25878                                  ; {									      *
 25879                                  ;	set di to brk_parms;						      *
 25880                                  ;	set dx,cx to 0; 						      *
 25881                                  ;	while (end of command line)					      *
 25882                                  ;	{ sysinit_parse;						      *
 25883                                  ;	  if (no error) then						      *
 25884                                  ;	       if (result_val._$P_item_tag == 1) then	  /*on		 */   *
 25885                                  ;		   set p_mtrk,on;					      *
 25886                                  ;	       else					  /*off 	 */   *
 25887                                  ;		   set p_mtrk,off;					      *
 25888                                  ;	  else {show message;error_exit};				      *
 25889                                  ;	};								      *
 25890                                  ;	if (no error) then						      *
 25891                                  ;	   dos function call to set multrk_flag according to p_mtrk.	      *
 25892                                  ;									      *
 25893                                  ; };									      *
 25894                                  ;									      *
 25895                                  ;******************************************************************************
 25896                                  
 25897                                  	; 27/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 25898                                  trym:
 25899 000020E3 80FC4D                          cmp     ah,CONFIG_MULTITRACK  ; 'M'
 25900 000020E6 7569                    	jne	short tryu
 25901                                  
 25902                                  ; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 25903                                  ;;ifdef	MULTI_CONFIG
 25904                                  ;       call    query_user      ; query the user if config_cmd
 25905                                  ;       jc      short tryu	; has the CONFIG_OPTION_QUERY bit set
 25906                                  ;;endif
 25907 000020E8 BF[541E]                	mov	di,mtrk_parms
 25908 000020EB 31C9                    	xor	cx,cx
 25909                                  	; 04/01/2023
 25910                                  	;mov	dx,cx
 25911                                  do31:
 25912 000020ED E8EC05                  	call	sysinit_parse
 25913 000020F0 7303                    	jnc	short if31	; parse error
 25914                                  	;call	badparm_p	;  show message and end the search loop.
 25915                                  	;;jmp	short sr31
 25916                                  	; 31/12/2022
 25917                                  ;sr31:
 25918                                  	;jmp	coff
 25919                                  	; 04/01/2023
 25920 000020F2 E96505                  	jmp	badparm_p_coff
 25921                                  if31:
 25922 000020F5 83F8FF                  	cmp	ax,_$P_RC_EOL	; end of line?
 25923 000020F8 7415                    	je	short en31	; then end the $endloop
 25924                                  
 25925                                  	;cmp	byte [result_val_itag],1
 25926 000020FA 803E[491D]01            	cmp	byte [result_val+_$P_Result_Blk.Item_Tag],1
 25927 000020FF 7507                    	jne	short if35
 25928                                  
 25929 00002101 C606[681E]01            	mov	byte [p_mtrk],1	; turn it on temporarily.
 25930                                  	;jmp	short en35
 25931                                  	; 31/12/2022
 25932 00002106 EBE5                    	jmp	short do31
 25933                                  if35:
 25934 00002108 C606[681E]00            	mov	byte [p_mtrk],0	; turn it off temporarily.
 25935                                  en35:
 25936 0000210D EBDE                    	jmp	short do31	; we actually set the multrk_flag here
 25937                                  en31:
 25938 0000210F 1E                      	push	ds
 25939                                  	;;mov	ax,Bios_Data ; 70h
 25940                                  	;mov	ax,KERNEL_SEGMENT ; 70h
 25941                                  	; 21/10/2022
 25942 00002110 B87000                  	mov	ax,DOSBIODATASEG ; 0070h
 25943 00002113 8ED8                    	mov	ds,ax
 25944                                  
 25945 00002115 2E803E[681E]00          	cmp	byte [cs:p_mtrk],0
 25946 0000211B 7508                    	jne	short if39
 25947                                  
 25948 0000211D C706[2F05]0100          	mov	word [multrk_flag],multrk_off2	; 0001h
 25949 00002123 EB06                    	jmp	short en39
 25950                                  if39:
 25951 00002125 C706[2F05]8000          	mov	word [multrk_flag],multrk_on	; 0080h
 25952                                  en39:
 25953 0000212B 1F                      	pop	ds
 25954                                  	; 31/12/2022
 25955                                  	;jmp	short sr31
 25956                                  	; 04/01/2023
 25957                                  sr31:
 25958 0000212C E9C9FE                  	jmp	coff
 25959                                  
 25960                                  ;----------------------------------------------------------------------------
 25961                                  ; DOS=HIGH/LOW command
 25962                                  ;----------------------------------------------------------------------------
 25963                                  
 25964                                  	; 27/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 25965                                  multi_try_doshi:
 25966 0000212F 80FC48                          cmp     ah,CONFIG_DOS ; 'H'
 25967 00002132 7403                    	je	short it_is_h
 25968                                  skip_it:
 25969 00002134 E9FEFE                  	jmp	multi_pass_filter
 25970                                  it_is_h:				; M003 - removed initing DevUMB
 25971                                  					;	 & runhigh
 25972                                  ; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 25973                                  ;;ifdef	MULTI_CONFIG
 25974                                  ;       call    query_user              ; query the user if config_cmd
 25975                                  ;       jc      short skip_it		; has the CONFIG_OPTION_QUERY bit set
 25976                                  ;;endif
 25977 00002137 BF[9F1E]                	mov	di,dos_parms
 25978 0000213A 31C9                    	xor	cx,cx
 25979                                  	; 04/01/2023
 25980                                  	;mov	dx,cx
 25981                                  h_do_parse:
 25982 0000213C E89D05                  	call	sysinit_parse
 25983 0000213F 7303                    	jnc	short h_parse_ok	; parse error
 25984                                  h_badparm:
 25985                                  	; 04/01/2023
 25986                                  	;call	badparm_p		; show message and end the search loop.
 25987                                  	;;jmp	short h_end
 25988                                  	; 11/12/2022
 25989                                  ;h_end:
 25990                                  	;jmp	coff
 25991                                  	; 04/01/2023
 25992 00002141 E91605                  	jmp	badparm_p_coff	
 25993                                  h_parse_ok:
 25994 00002144 83F8FF                  	cmp	ax,_$P_RC_EOL		; end of line?
 25995 00002147 7405                    	je	short h_end		; then end the $endloop
 25996 00002149 E82D06                  	call	ProcDOS
 25997 0000214C EBEE                    	jmp	short h_do_parse
 25998                                  	; 11/12/2022
 25999                                  	; 04/01/2023
 26000                                  h_end:
 26001 0000214E E9A7FE                  	jmp	coff
 26002                                  
 26003                                  ;-----------------------------------------------------------------------------
 26004                                  ; devicehigh command
 26005                                  ;-----------------------------------------------------------------------------
 26006                                  
 26007                                  	; 28/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 26008                                  tryu:
 26009 00002151 80FC55                          cmp     ah,CONFIG_DEVICEHIGH ; 'U'
 26010 00002154 7539                    	jne	short tryd
 26011                                  
 26012                                  ; 28/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 26013                                  ;;ifdef	MULTI_CONFIG
 26014                                  ;       call    query_user              ; query the user if config_cmd
 26015                                  ;       jc	short tryd		; has the CONFIG_OPTION_QUERY bit set
 26016                                  ;;endif
 26017                                  
 26018                                  ; 28/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 26019                                  ;	call	InitVar
 26020                                  ;	call	ParseSize		; process the size= option
 26021                                  ;	;jnc	short tryu_0
 26022                                  	
 26023                                  	;jc	short tryu_1 ; 31/03/2019 - Retro DOS v4.0
 26024                                  
 26025                                  	; 28/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 26026                                  	;mov	[cs:badparm_off], si	; stash it there in case of an error
 26027                                  	;mov	[cs:badparm_seg], es
 26028                                  	; 11/12/2022
 26029                                  	; ds = cs
 26030 00002156 8936[2F14]              	mov	[badparm_off], si
 26031 0000215A 8C06[3114]              	mov	[badparm_seg], es
 26032                                  	;
 26033 0000215E E88A08                  	call	ParseSize
 26034 00002161 7303                    	jnc	short tryu_2	; 28/10/2022
 26035                                  
 26036                                  	;call	badparm_p
 26037                                  	;jmp	coff
 26038                                  	; 04/01/2023
 26039 00002163 E9F404                  	jmp	badparm_p_coff
 26040                                  
 26041                                  ; 28/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 26042                                  ;tryu_0:
 26043                                  ;	mov	ax,[cs:DevSizeOption]
 26044                                  ;	or	ax,ax
 26045                                  ;	jnz	short tryu_2
 26046                                  ;
 26047                                  ;	call	ParseVar
 26048                                  ;	jnc	short tryu_2
 26049                                  ;tryu_1:
 26050                                  ;	mov	[cs:badparm_off], si	; If ParseVar up there failed, then
 26051                                  ;	mov	[cs:badparm_seg], es	; ES:SI points to its problem area...
 26052                                  ;	call	badparm_p		; so all we have to do is choke and
 26053                                  ;	jmp	coff			; die, rather verbosely.
 26054                                  
 26055                                  tryu_2:	
 26056 00002166 56                      	push	si
 26057 00002167 06                      	push	es
 26058                                  tryu_3:
 26059 00002168 268A04                  	mov	al,[es:si]
 26060 0000216B 3C0D                    	cmp	al,cr
 26061 0000216D 740C                    	je	short tryu_4
 26062 0000216F 3C0A                    	cmp	al,lf
 26063 00002171 7408                    	je	short tryu_4
 26064 00002173 E8070F                  	call	delim
 26065 00002176 7403                    	jz	short tryu_4
 26066 00002178 46                      	inc	si
 26067 00002179 EBED                    	jmp	short tryu_3
 26068                                  tryu_4:	
 26069                                  	; 11/12/2022
 26070                                  	; ds = cs
 26071 0000217B A2[141F]                	mov	[DevSavedDelim],al
 26072                                  	;mov	[cs:DevSavedDelim],al	; Save the delimiter before replacing
 26073                                  					;  it with null
 26074                                  	; 18/12/2022
 26075 0000217E 29DB                    	sub	bx,bx
 26076 00002180 26881C                  	mov	[es:si],bl ; 0
 26077                                   	;mov	byte [es:si],0
 26078                                  
 26079 00002183 07                      	pop	es
 26080 00002184 5E                      	pop	si
 26081                                  
 26082                                  ;------------------------------------------------------------------------------
 26083                                  ; BEGIN PATCH TO CHECK FOR NON-EXISTANT UMBs   -- t-richj 7-21-92
 26084                                  ;------------------------------------------------------------------------------
 26085                                  
 26086                                  ; 28/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 26087                                  ;
 26088                                  ;	call	UmbTest			; See if UMBs are around...
 26089                                  ;	jnc	short NrmTst		; ...yep. So do that normal thang.
 26090                                  ;
 26091                                  ;	mov	byte [cs:DeviceHi],0	; ...nope... so load low.
 26092                                  ;	jmp	short LoadDevice
 26093                                  
 26094                                  ;------------------------------------------------------------------------------
 26095                                  ; END PATCH TO CHECK FOR NON-EXISTANT UMBs   -- t-richj 7-21-92
 26096                                  ;------------------------------------------------------------------------------
 26097                                  
 26098                                  NrmTst:
 26099                                  	; 11/12/2022
 26100                                  	; ds = cs
 26101                                  	;;mov	byte [cs:DeviceHi],0
 26102                                  	;mov	byte [DeviceHi],0
 26103                                  	; 18/12/2022
 26104                                  	; bx = 0
 26105 00002185 381E[F01E]              	cmp	[DevUMB],bl ; 0
 26106                                  	;cmp	byte [DevUMB],0
 26107                                  	;;cmp	byte [cs:DevUMB],0	; do we support UMBs
 26108 00002189 7417                    	je	short LoadDevice	; no, we don't
 26109                                  	;mov	byte [cs:DeviceHi],1
 26110                                  	; 11/12/2022
 26111                                  	;mov	byte [DeviceHi],1
 26112                                  	; 18/12/2022
 26113 0000218B FEC3                    	inc	bl ; mov bl,1 ; (*)
 26114                                  	; 11/12/2022
 26115                                  	;jmp	short LoadDevice2	; 11/12/2022
 26116 0000218D EB13                    	jmp	short LoadDevice
 26117                                  
 26118                                  ;------------------------------------------------------------------------------
 26119                                  ; device command
 26120                                  ;------------------------------------------------------------------------------
 26121                                  
 26122                                  	; 28/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 26123                                  	; (SYSINIT:2401h)
 26124                                  tryd:
 26125                                  	; 11/12/2022
 26126 0000218F 31DB                    	xor 	bx, bx
 26127                                  	;
 26128 00002191 80FC44                          cmp     ah,CONFIG_DEVICE ;  'D'
 26129 00002194 7403                    	je	short gotd
 26130                                  skip_it2:
 26131 00002196 E93502                  	jmp	tryq
 26132                                  gotd:
 26133                                  
 26134                                  ; 28/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 26135                                  ;;ifdef	MULTI_CONFIG
 26136                                  ;       call    query_user              ; query the user if config_cmd
 26137                                  ;       jc	short skip_it2		; has the CONFIG_OPTION_QUERY bit set
 26138                                  ;;endif
 26139                                  	; 11/12/2022
 26140                                  	; ds = cs
 26141                                  	;mov	byte [DeviceHi],0
 26142                                  	;mov	word [DevSizeOption],0
 26143 00002199 891E[001F]              	mov	[DevSizeOption],bx ; 0
 26144 0000219D C606[141F]20            	mov	byte [DevSavedDelim],' '
 26145                                  	;mov	byte [cs:DeviceHi],0	; not to be loaded in UMB ;M007
 26146                                  	;mov	word [cs:DevSizeOption],0
 26147                                  	;mov	byte [cs:DevSavedDelim],' ' ; In case of DEVICE= the null has to
 26148                                  					;  be replaced with a ' '
 26149                                  LoadDevice:                             ; device= or devicehigh= command.
 26150                                  	; 11/12/2022
 26151                                  	;mov	byte [DeviceHi],0
 26152 000021A2 881E[FF1E]              	mov	byte [DeviceHi],bl	; 0 or 1 (*)
 26153                                  LoadDevice2:
 26154                                  	; 28/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)        
 26155                                  	;
 26156                                  	;push    cs
 26157                                          ;pop     ds
 26158                                  	;
 26159                                  	;mov	[bpb_addr],si		; pass the command line to the dvice
 26160                                  	;mov	[bpb_addr+2],es
 26161                                  	;
 26162                                  	;mov	[DevCmdLine],si		; save it for ourself
 26163                                  	;mov	[DevCmdLine+2],es
 26164                                  	;
 26165                                  	;mov	byte [driver_units],0	; clear total block units for driver	
 26166                                  
 26167                                  	; 11/12/2022
 26168                                  	; ds = cs
 26169                                  	;mov	bx,cs
 26170                                  	;mov	ds,bx
 26171                                  
 26172                                  	;mov	[cs:bpb_addr],si	; pass the command line to the dvice
 26173 000021A6 8936[F803]              	mov	[bpb_addr],si
 26174                                  	;mov	[cs:bpb_addr+2],es
 26175 000021AA 8C06[FA03]              	mov	[bpb_addr+2],es
 26176                                  
 26177                                  	;mov	[cs:DevCmdLine],si	; save it for ourself
 26178 000021AE 8936[101F]              	mov	[DevCmdLine],si
 26179                                  	;mov	[cs:DevCmdLine+2],es	
 26180 000021B2 8C06[121F]              	mov	[DevCmdLine+2],es	
 26181                                  
 26182 000021B6 E8070F                  	call	round
 26183                                  	
 26184 000021B9 E83F07                  	call	SizeDevice
 26185 000021BC 7215                    	jc	short BadFile
 26186                                  
 26187                                  	; 11/12/2022
 26188                                  	; ds = cs
 26189                                  
 26190                                  ; - Begin DeviceHigh primary logic changes ------------------------------------
 26191                                  
 26192                                  ; 28/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 26193                                  ;
 26194                                  ;	mov	byte [ConvLoad],1	; Doesn't matter if DeviceHi==0
 26195                                  ;
 26196                                  ;	mov	al,[DeviceHi]		; If not using upper memory,
 26197                                  ;	or	byte [DeviceHi],0	; Skip all this and go on to
 26198                                  ;	jz	short DevConvLoad	; the actual load.
 26199                                  ;
 26200                                  ;	;call	GetLoadUMB		; Returns first UMB spec'ed in AX
 26201                                  ;	mov	al,[UmbLoad]	; 19/04/2019 - Retro DOS v4.0
 26202                                  ;
 26203                                  ;	cmp	al,-1			; If umb0 not specified, it's old style
 26204                                  ;	jz	short DevConvLoad	; so load high even if SIZE= is smaller
 26205                                  ;
 26206                                  ;	dec	byte [ConvLoad] ; 0 	; They specified /L, so use new loader
 26207                                  ;
 26208                                  ;	call	GetLoadSize		; Returns size of first UMB specified
 26209                                  ;	or	ax,ax
 26210                                  ;	jz	short tryd_1		; If size1 not specified, nada to do:
 26211                                  ;
 26212                                  ;	cmp	ax,[DevSize]		; /L:...,Size < DevSize?
 26213                                  ;	jge	short DevConvLoad
 26214                                  ;
 26215                                  ;tryd_1: mov	ax,[DevSize]		; Size < DevSize, so write DevSize as
 26216                                  ;	call	StoLoadSize		; minsize for load UMB.
 26217                                  
 26218                                  ; - End DeviceHigh primary logic changes --------------------------------------
 26219                                  
 26220                                  DevConvLoad:
 26221                                  	; 28/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 26222 000021BE E84F06                  	call	InitDevLoad
 26223                                  
 26224                                  	; 11/12/2022
 26225                                  	; ds = cs
 26226 000021C1 A1[E41E]                	mov	ax,[DevLoadAddr]
 26227 000021C4 0306[E21E]              	add	ax,[DevSize]
 26228 000021C8 7206                    	jc	short NoMem
 26229 000021CA 3906[E61E]              	cmp	[DevLoadEnd],ax
 26230 000021CE 7312                    	jae	short LoadDev
 26231                                  	
 26232                                  	; 11/12/2022
 26233                                  	;mov	ax,[cs:DevLoadAddr]
 26234                                  	;add	ax,[cs:DevSize]
 26235                                  	;jc	short NoMem
 26236                                  	;cmp	[cs:DevLoadEnd],ax
 26237                                  	;jae	short LoadDev
 26238                                  NoMem:
 26239                                  	; 11/12/2022
 26240                                  	; ds = cs
 26241                                  	;jmp	mem_err
 26242 000021D0 E9300F                  	jmp	mem_err2
 26243                                  
 26244                                  BadFile:
 26245                                  	;28/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 26246                                  	;call	RetFromUM		; Does nothing if didn't call HideUMBs
 26247                                  	;cmp    byte [es:si],' '
 26248                                          ;jae	short tryd_2
 26249 000021D3 26803C0D                	cmp	byte [es:si],0Dh	; cr
 26250 000021D7 7503                            jne	short tryd_2
 26251 000021D9 E92305                  	jmp	badop
 26252                                  tryd_2:
 26253 000021DC E87811                  	call	badload
 26254 000021DF E916FE                  	jmp	coff
 26255                                  
 26256                                  LoadDev:
 26257 000021E2 06                      	push	es
 26258 000021E3 1F                      	pop	ds
 26259                                  
 26260 000021E4 89F2                    	mov	dx,si			;ds:dx points to file name
 26261 000021E6 E86307                  	call	ExecDev			; load device driver using exec call
 26262                                  badldreset:
 26263 000021E9 1E                      	push	ds
 26264 000021EA 07                      	pop	es			;es:si back to config.sys
 26265 000021EB 0E                      	push	cs
 26266 000021EC 1F                      	pop	ds			;ds back to sysinit
 26267 000021ED 72E4                    	jc	short BadFile
 26268                                  goodld:
 26269                                  	; 11/12/2022
 26270                                  	; ds = cs
 26271                                  
 26272 000021EF 06                      	push	es
 26273 000021F0 56                      	push	si
 26274 000021F1 E87507                  	call	RemoveNull
 26275 000021F4 06                      	push	es
 26276 000021F5 56                      	push	si
 26277                                  
 26278 000021F6 0E                      	push	cs
 26279 000021F7 07                      	pop	es
 26280                                  
 26281 000021F8 1E                      	push	ds
 26282 000021F9 56                      	push	si
 26283                                  
 26284                                  	;lds	si,[cs:DevEntry]	; peeks the header attribute
 26285                                  	; 31/12/2022
 26286                                  	; ds = cs
 26287 000021FA C536[E81E]              	lds	si,[DevEntry]
 26288                                  	
 26289                                  	;test	word [si+4],8000h
 26290                                  	; 11/12/2022
 26291 000021FE F6440580                	test	byte [si+SYSDEV.ATT+1],DEVTYP>>8
 26292                                  	;test	word [si+SYSDEV.ATT],DEVTYP ; block device driver?
 26293 00002202 7511                    	jnz	short got_device_com_cont   ; no.
 26294                                  
 26295 00002204 2EC536[6B02]            	lds	si,[cs:DOSINFO]		; ds:si -> sys_var
 26296                                  	;cmp	byte [si+32],26
 26297 00002209 807C201A                	cmp	byte [si+SYSI_NUMIO],26	; no more than 26 drive number
 26298 0000220D 7206                    	jb	short got_device_com_cont
 26299                                  
 26300 0000220F 5E                      	pop	si
 26301 00002210 1F                      	pop	ds
 26302                                  
 26303 00002211 5E                      	pop	si			; clear the stack
 26304 00002212 07                      	pop	es
 26305                                  
 26306                                  	; 28/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 26307                                  	;call	RetFromUM		; Do this before we leave
 26308                                  
 26309 00002213 EB57                    	jmp	short badnumblock
 26310                                  
 26311                                  got_device_com_cont:
 26312 00002215 5E                      	pop	si
 26313 00002216 1F                      	pop	ds
 26314                                  
 26315                                  	; 11/12/2022
 26316                                  	; ds = cs
 26317                                  
 26318 00002217 E88205                  	call	LieInt12Mem
 26319 0000221A E8E105                  	call	UpdatePDB		; update the PSP:2 value M020
 26320                                  
 26321                                  	; 11/12/2022
 26322                                  	; ds = cs
 26323 0000221D 803E[2B14]00            	cmp	byte [multdeviceflag],0
 26324                                  	;cmp	byte [cs:multdeviceflag],0 ; Pass limit only for the 1st device
 26325                                  					;  driver in the file ; M027
 26326 00002222 750E                    	jne	short skip_pass_limit	;		      ; M027
 26327                                  
 26328                                  	; 11/12/2022
 26329                                  	; ds = cs
 26330                                  	;mov	word [cs:break_addr],0	; pass the limit to the DD
 26331                                  	;mov	bx,[cs:DevLoadEnd]
 26332                                  	;mov	[cs:break_addr+2],bx
 26333                                  
 26334 00002224 C706[F403]0000          	mov	word [break_addr],0
 26335 0000222A 8B1E[E61E]              	mov	bx,[DevLoadEnd]
 26336 0000222E 891E[F603]              	mov	[break_addr+2],bx
 26337                                  
 26338                                  skip_pass_limit:
 26339                                  ;	Note: sysi_numio (in DOS DATA) currently reflects the REAL
 26340                                  ;	number of installed devices (including DblSpace drives) where
 26341                                  ;	"drivenumber" is the number that the next block device will
 26342                                  ;	be assigned to. Because some naughty device drivers (like
 26343                                  ;	interlnk) look at the internal DOS variable instead of the
 26344                                  ;	value we pass it, we'll temporarily stick our value into
 26345                                  ;	DOS DATA while we're initializing the device drivers.
 26346                                  ;
 26347                                  ;	Note that this will make it impossible for this device
 26348                                  ;	driver to access the DblSpace drive letters, whether
 26349                                  ;	they are swapped-hosts or unswapped compressed drives,
 26350                                  ;	during its initialization phase.
 26351                                  
 26352                                  	; 29/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 26353                                  	;push	ds
 26354                                  	;lds	bx,[cs:DOSINFO]		; ds:bx -> sys_var
 26355                                  	;
 26356                                  	;mov	al,[cs:drivenumber]	; temporarily use this next drv value
 26357                                  	;mov	[cs:devdrivenum],al	; pass drive number in packet to driver
 26358                                  	;mov	ah,al
 26359                                  	;
 26360                                  	;xchg	ax,[bx+SYSI_NUMIO]	; swap with existing values
 26361                                  	;pop	ds
 26362                                  	;
 26363                                  	;push	ax			; save real sysi_numio/ncds in ax
 26364                                  
 26365                                  	; 29/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 26366                                  	; (SYSINIT:24B9h)
 26367                                  
 26368 00002232 BB0600                  	mov	bx,SYSDEV.STRAT ; 6
 26369 00002235 E8D40E                  	call	calldev 		; calldev (sdevstrat);
 26370 00002238 BB0800                  	mov	bx,SYSDEV.INT ; 8
 26371 0000223B E8CE0E                  	call	calldev 		; calldev (sdevint);
 26372                                  
 26373                                  	; 11/12/2022
 26374                                  	; ds <> cs
 26375                                  
 26376                                  	; 29/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 26377                                  	;pop	ax			; get real sysi_numio value
 26378                                  	;push	ds
 26379                                  	;lds	bx,[cs:DOSINFO]		; ds:bx -> sys_var
 26380                                  	;mov	[bx+SYSI_NUMIO],ax	; swap with existing values
 26381                                  	;pop	ds
 26382                                  
 26383                                  	; 11/12/2022
 26384 0000223E 0E                      	push	cs
 26385 0000223F 1F                      	pop	ds
 26386                                  
 26387 00002240 E88905                  	call	TrueInt12Mem
 26388                                  
 26389                                  	; 11/12/2022
 26390                                  	; ds = cs
 26391                                  	;mov	ax,[cs:break_addr]	; move break addr from the req packet
 26392                                  	;mov	[cs:DevBrkAddr],ax
 26393                                  	;mov	ax,[cs:break_addr+2]
 26394                                  	;mov	[cs:DevBrkAddr+2],ax
 26395 00002243 A1[F403]                	mov	ax,[break_addr]	
 26396 00002246 A3[EC1E]                	mov	[DevBrkAddr],ax
 26397 00002249 A1[F603]                	mov	ax,[break_addr+2]
 26398 0000224C A3[EE1E]                	mov	[DevBrkAddr+2],ax
 26399                                  
 26400                                  	; 29/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 26401                                  	;call	RetFromUM		; There we go... all done.
 26402                                  
 26403                                  	; 11/12/2022
 26404 0000224F 803E[F01E]00            	cmp	byte [DevUMB],0	
 26405                                  	;cmp	byte [cs:DevUMB],0
 26406 00002254 7403                    	je	short tryd_3
 26407 00002256 E83608                  	call	AllocUMB
 26408                                  	; 31/12/2022
 26409                                  	; ds= cs
 26410                                  tryd_3:
 26411                                  
 26412                                  ;ifndef ROMDOS
 26413                                  ;------ If we are waiting to be moved into hma lets try it now !!!
 26414                                  
 26415                                  	; 11/12/2022
 26416                                  	; ds = cs
 26417                                  	
 26418                                  	;cmp	byte [cs:runhigh],0FFh
 26419 00002259 803E[6A02]FF            	cmp	byte [runhigh],0FFh ; 11/12/2022
 26420 0000225E 7503                    	jne	short tryd_4
 26421                                  	
 26422                                  	; 11/12/2022
 26423                                  	; ds = cs
 26424 00002260 E873E6                  	call	TryToMovDOSHi		; move DOS into HMA if reqd
 26425                                  tryd_4:
 26426                                  ;endif ; ROMDOS
 26427                                  
 26428 00002263 5E                      	pop	si
 26429 00002264 1F                      	pop	ds
 26430 00002265 C60400                  	mov	byte [si],0		; *p = 0;
 26431                                  
 26432 00002268 0E                      	push	cs
 26433 00002269 1F                      	pop	ds
 26434                                  
 26435 0000226A EB1F                    	jmp	short was_device_com
 26436                                  
 26437                                  ;----------------------------------------------------------------------------
 26438                                  
 26439                                  ;02/04/2019 - Retro DOS v4.0
 26440                                  
 26441                                  badnumblock:
 26442 0000226C 0E                      	push	cs
 26443 0000226D 1F                      	pop	ds
 26444 0000226E BA[5038]                	mov	dx,badblock
 26445 00002271 E80B11                  	call	print
 26446                                  
 26447                                  ;------ fall thru -----------------------------------------------------------
 26448                                  
 26449                                  erase_dev_do:				; modified to show message "error in config.sys..."
 26450                                  	
 26451                                  	;call	CheckDoubleSpace ; MSDOS 6.21 IO.SYS SYSINIT:27BBh
 26452                                  	
 26453 00002274 5E                      	pop	si
 26454 00002275 07                      	pop	es
 26455                                  
 26456 00002276 0E                      	push	cs
 26457 00002277 1F                      	pop	ds
 26458                                  
 26459                                  skip1_resetmemhi:
 26460                                  	; 11/12/2022
 26461                                  	; ds = cs
 26462 00002278 833E[FD03]00            	cmp	word [configmsgflag],0
 26463                                  	;cmp	word [cs:configmsgflag],0
 26464 0000227D 7409                    	je	short no_error_line_msg
 26465                                  
 26466 0000227F E8C804                  	call	error_line		; no "error in config.sys" msg for device driver. dcr d493
 26467                                  	; 11/12/2022
 26468                                  	; ds = cs
 26469                                  	;mov	word [cs:configmsgflag],0
 26470 00002282 C706[FD03]0000          	mov	word [configmsgflag],0	; set the default value again.
 26471                                  
 26472                                  no_error_line_msg:
 26473 00002288 E96DFD                  	jmp	coff
 26474                                  
 26475                                  ;----------------------------------------------------------------------------
 26476                                  
 26477                                  was_device_com:
 26478                                  	; 14/12/2022
 26479                                  	; ds = cs
 26480 0000228B A1[EE1E]                	mov	ax,[DevBrkAddr+2]
 26481                                  	;mov	ax,[cs:DevBrkAddr+2] ; 13/05/2019
 26482 0000228E 3B06[E61E]              	cmp	ax,[DevLoadEnd]
 26483                                  	;cmp	ax,[cs:DevLoadEnd]
 26484 00002292 7605                    	jbe	short breakok
 26485                                  
 26486 00002294 5E                      	pop	si
 26487 00002295 07                      	pop	es
 26488 00002296 E93AFF                  	jmp	BadFile
 26489                                  
 26490                                  breakok:
 26491                                  	; 14/12/2022
 26492                                  	; ds = cs
 26493 00002299 C43E[6B02]              	les	di,[DOSINFO] 
 26494 0000229D C516[E81E]              	lds	dx,[DevEntry]
 26495                                  	;lds	dx,[cs:DevEntry]	;set ds:dx to header
 26496 000022A1 89D6                    	mov	si,dx
 26497                                  
 26498                                  	; 14/11/2022
 26499                                  	;les	di,[cs:DOSINFO] 	;es:di point to dos info
 26500                                  
 26501                                  	; 14/12/2022
 26502                                  	; ds <> cs
 26503                                  	
 26504                                  	;mov	ax,[si+4]
 26505 000022A3 8B4404                  	mov	ax,[si+SYSDEV.ATT]	;get attributes
 26506                                  	; 12/12/2022
 26507 000022A6 F6C480                  	test	ah,DEVTYP>>8 ; 80h 
 26508                                  	;test	ax,DEVTYP ; 8000h	;test if block dev
 26509 000022A9 7426                    	jz	short isblock
 26510                                  
 26511                                  ;------ lets deal with character devices
 26512                                  
 26513 000022AB 2E800E[2E14]02          	or	byte [cs:setdevmarkflag],for_devmark ; 2
 26514 000022B1 E8E806                  	call	DevSetBreak		;go ahead and alloc mem for device
 26515                                  jc_edd:
 26516 000022B4 72BE                    	jc	short erase_dev_do	;device driver's init routine failed.
 26517                                  
 26518                                  	; 12/12/2022
 26519 000022B6 A801                    	test	al,ISCIN
 26520                                  	;test	ax,ISCIN ; 1		;is it a console in?
 26521 000022B8 7408                    	jz	short tryclk
 26522                                  
 26523 000022BA 2689550C                	mov	[es:di+SYSI_CON],dx   ; es:di+12
 26524 000022BE 268C5D0E                	mov	[es:di+SYSI_CON+2],ds ; es:di+14
 26525                                  tryclk: 
 26526                                  	; 12/12/2022
 26527 000022C2 A808                    	test	al,ISCLOCK
 26528                                  	;test	ax,ISCLOCK ; 8		;is it a clock device?
 26529 000022C4 7408                    	jz	short golink
 26530                                  
 26531 000022C6 26895508                	mov	[es:di+SYSI_CLOCK],dx	; es:di+8
 26532 000022CA 268C5D0A                	mov	[es:di+SYSI_CLOCK+2],ds ; es:di+10
 26533                                  golink: 
 26534 000022CE E9B000                  	jmp	linkit
 26535                                  
 26536                                  ;------ deal with block device drivers
 26537                                  
 26538                                  isblock:
 26539 000022D1 2EA0[F303]              	mov	al,[cs:unitcount]	;if no units found,erase the device
 26540 000022D5 08C0                    	or	al,al
 26541 000022D7 749B                    	jz	short erase_dev_do
 26542                                  	;mov	[si+10],al
 26543 000022D9 88440A                  	mov	[si+SYSDEV.NAME],al	; number of units in name field
 26544                                  	; 29/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 26545                                  	;add	[cs:driver_units],al	; keep total for all drivers in file
 26546                                  perdrv:
 26547 000022DC 98                      	cbw				; warning no device > 127 units
 26548 000022DD 89C1                    	mov	cx,ax
 26549 000022DF 88E6                    	mov	dh,ah
 26550                                  	;mov	dl,[es:di+32]
 26551 000022E1 268A5520                	mov	dl,[es:di+SYSI_NUMIO]	;get number of devices
 26552 000022E5 88D4                    	mov	ah,dl
 26553 000022E7 00C4                    	add	ah,al			; check for too many devices
 26554 000022E9 80FC1A                  	cmp	ah,26			; 'A' - 'Z' is 26 devices
 26555 000022EC 7603                    	jbe	short ok_block
 26556 000022EE E97BFF                  	jmp	badnumblock
 26557                                  
 26558                                  ok_block:
 26559 000022F1 2E800E[2E14]02          	or	byte [cs:setdevmarkflag],for_devmark ; 2
 26560 000022F7 E8A206                  	call	DevSetBreak		; alloc the device
 26561 000022FA 72B8                    	jc	short jc_edd
 26562 000022FC 26004520                	add	[es:di+SYSI_NUMIO],al	; update the amount
 26563                                  
 26564 00002300 2E0006[FC03]            	add	[cs:drivenumber],al	; remember amount for next device
 26565 00002305 2EC51E[F803]            	lds	bx,[cs:bpb_addr]	; point to bpb array
 26566                                  perunit:
 26567 0000230A 2EC42E[6B02]            	les	bp,[cs:DOSINFO]
 26568                                  	;les	bp,[es:bp+SYSI_DPB]	; get first dpb
 26569                                  	; 11/12/2022
 26570 0000230F 26C46E00                	les	bp,[es:bp]
 26571                                  	; 29/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 26572                                  	;les	bp,[es:bp+0]		; [es:bp+SYSI_DPB]
 26573                                  scandpb:
 26574                                  	;cmp	word [es:bp+25],-1
 26575 00002313 26837E19FF              	cmp	word [es:bp+DPB.NEXT_DPB],-1
 26576 00002318 7406                    	je	short foundpb
 26577                                  	;les	bp,[es:bp+25]
 26578 0000231A 26C46E19                	les	bp,[es:bp+DPB.NEXT_DPB]
 26579 0000231E EBF3                    	jmp	short scandpb
 26580                                  foundpb:
 26581 00002320 2EA1[EC1E]              	mov	ax,[cs:DevBrkAddr]
 26582 00002324 26894619                	mov	[es:bp+DPB.NEXT_DPB],ax
 26583 00002328 2EA1[EE1E]              	mov	ax,[cs:DevBrkAddr+2]
 26584 0000232C 2689461B                	mov	[es:bp+DPB.NEXT_DPB+2],ax
 26585                                  
 26586 00002330 2EC42E[EC1E]            	les	bp,[cs:DevBrkAddr]
 26587 00002335 2E8306[EC1E]21          	add	word [cs:DevBrkAddr],DPBSIZ ; 33
 26588                                  
 26589 0000233B E83D06                  	call	RoundBreakAddr
 26590                                  
 26591 0000233E 26C74619FFFF            	mov	word [es:bp+DPB.NEXT_DPB],-1
 26592 00002344 26C64618FF              	mov	byte [es:bp+DPB.FIRST_ACCESS],-1
 26593                                  
 26594 00002349 8B37                    	mov	si,[bx] 		;ds:si points to bpb
 26595 0000234B 43                      	inc	bx
 26596 0000234C 43                      	inc	bx			;point to next guy
 26597                                  	;mov	[es:bp+DPB.DRIVE],dx
 26598                                  	; 11/12/2022
 26599 0000234D 26895600                	mov	[es:bp],dx ; 13/05/2019
 26600                                  	; 29/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 26601                                  	;mov	[es:bp+0],dx		; [es:bp+DPB.DRIVE]
 26602                                  	
 26603 00002351 B453                    	mov	ah,SETDPB ; 53h		;hidden system call
 26604 00002353 CD21                    	int	21h
 26605                                  			; DOS - 2+ internal - TRANSLATE BIOS PARAMETER BLOCK
 26606                                  			; DS:SI -> BPB (BIOS Parameter Block)
 26607                                  			; ES:BP -> buffer for DOS Drive Parameter Block
 26608                                  
 26609                                  	;mov	ax,[es:bp+2]
 26610 00002355 268B4602                	mov	ax,[es:bp+DPB.SECTOR_SIZE]
 26611 00002359 06                      	push	es
 26612 0000235A 2EC43E[6B02]            	les	di,[cs:DOSINFO] 	;es:di point to dos info
 26613                                  	;cmp	ax,[es:di+10h]
 26614 0000235F 263B4510                	cmp	ax,[es:di+SYSI_MAXSEC]
 26615 00002363 07                      	pop	es
 26616                                  	;jna	short iblk_1
 26617                                  	;jmp	short bad_bpb_size_sector
 26618                                  	; 29/10/2022
 26619 00002364 775A                    	ja	short bad_bpb_size_sector
 26620                                  iblk_1:
 26621 00002366 1E                      	push	ds
 26622 00002367 52                      	push	dx
 26623                                  
 26624 00002368 2EC516[E81E]            	lds	dx,[cs:DevEntry]
 26625                                  	;mov	[es:bp+13h],dx
 26626 0000236D 26895613                	mov	[es:bp+DPB.DRIVER_ADDR],dx
 26627                                  	;mov	[es:bp+15h],ds
 26628 00002371 268C5E15                	mov	[es:bp+DPB.DRIVER_ADDR+2],ds
 26629                                  
 26630 00002375 5A                      	pop	dx
 26631 00002376 1F                      	pop	ds
 26632                                  
 26633 00002377 42                      	inc	dx
 26634 00002378 FEC6                    	inc	dh
 26635 0000237A E28E                    	loop	perunit
 26636                                  
 26637 0000237C 0E                      	push	cs
 26638 0000237D 1F                      	pop	ds
 26639                                  
 26640 0000237E E84EE8                  	call	TempCDS 		; set cds for new drives
 26641                                  linkit:
 26642 00002381 2EC43E[6B02]            	les	di,[cs:DOSINFO] 	;es:di = dos table
 26643 00002386 268B4D22                	mov	cx,[es:di+SYSI_DEV]	;dx:cx = head of list
 26644 0000238A 268B5524                	mov	dx,[es:di+SYSI_DEV+2]
 26645                                  
 26646 0000238E 2EC536[E81E]            	lds	si,[cs:DevEntry]	;ds:si = device location
 26647 00002393 26897522                	mov	[es:di+SYSI_DEV],si	;set head of list in dos
 26648 00002397 268C5D24                	mov	[es:di+SYSI_DEV+2],ds
 26649 0000239B 8B04                    	mov	ax,[si]			;get pointer to next device
 26650 0000239D 2EA3[E81E]              	mov	[cs:DevEntry],ax	;and save it
 26651                                  
 26652 000023A1 890C                    	mov	[si],cx			;link in the driver
 26653 000023A3 895402                  	mov	[si+2],dx
 26654                                  enddev:
 26655 000023A6 5E                      	pop	si
 26656 000023A7 07                      	pop	es
 26657 000023A8 40                      	inc	ax			;ax = ffff (no more devs if yes)?
 26658 000023A9 740B                    	jz	short coffj3
 26659                                  
 26660 000023AB 2EFE06[2B14]            	inc	byte [cs:multdeviceflag] ; possibly multiple device driver.
 26661 000023B0 E80B06                  	call	DevBreak		; M009
 26662                                  	; 11/12/2022
 26663                                  	; ds = cs (DevBreak)
 26664                                  
 26665                                  	; 03/04/2019 - Retro DOS v4.0
 26666                                  	; MSDOS 6.21 IO.SYS - SYSINIT:290Dh
 26667 000023B3 E939FE                  	jmp	goodld			; otherwise pretend we loaded it in
 26668                                  coffj3: 
 26669                                  	; 18/12/2022
 26670                                  	; ax = 0
 26671 000023B6 2EA2[2B14]              	mov	[cs:multdeviceflag],al ; 0
 26672                                  	;mov	byte [cs:multdeviceflag],0 ; reset the flag
 26673 000023BA E80106                  	call	DevBreak
 26674                                  	; 11/12/2022
 26675                                  	; ds = cs (DevBreak)
 26676                                  	
 26677                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS compatibility)
 26678                                  	;call	CheckProtmanArena	; adjust alloclim if Protman$ just
 26679                                  ;					;  created a bogus arena to try
 26680                                  ;					;  to protect some of its resident-
 26681                                  ;					;  init code.
 26682                                  	;call	CheckDoubleSpace
 26683 000023BD E938FC                  	jmp	coff
 26684                                  
 26685                                  ;----------------------------------------------------------------------------
 26686                                  
 26687                                  ;CheckDoubleSpace:
 26688                                  ;;;;	ifdef	dblspace_hooks
 26689                                  ;
 26690                                  ;;	Now check for two special MagicDrv cases:
 26691                                  ;;
 26692                                  ;;       a) the last driver load was MagicDrv final placement:
 26693                                  ;;	   -> add number of MagicDrv reserved drives to drivenumber
 26694                                  ;;
 26695                                  ;;       b) MagicDrv is currently in temporary home:
 26696                                  ;;          -> call it to give it a chance to mount and shuffle drives
 26697                                  ;
 26698                                  ;	cmp	byte [cs:MagicHomeFlag],0 ; already home?
 26699                                  ;	jnz	short no_more_magic_calls ;  nothing more to do if so
 26700                                  ;
 26701                                  ;;	Now inquire of driver whether it is present, and final located
 26702                                  ;
 26703                                  ;	mov	ax,multMagicdrv ; 4A11h
 26704                                  ;	mov	bx,MD_VERSION ; 0
 26705                                  ;	int	2fh			; ch = number of MagicDrv drive letters
 26706                                  ;	or	ax,ax			; is it there?
 26707                                  ;	jnz	short no_more_magic_calls ; done if not
 26708                                  ;
 26709                                  ;	test	dx,8000h		; is it final placed?
 26710                                  ;	jnz	short magic_not_yet_home ;  skip if not
 26711                                  ;
 26712                                  ;;	Okay, now the driver is final placed!  Set the flag so we
 26713                                  ;;	don't keep checking it, and add its number of drive letters
 26714                                  ;;	to drivenumber.
 26715                                  ;
 26716                                  ;	mov	byte [cs:MagicHomeFlag],0ffh ; set the flag!
 26717                                  ;	add	[cs:drivenumber],ch	; add number of MagicDrv volumes to
 26718                                  ;;					;  the drive number we'll pass to the
 26719                                  ;;					;  next loadable block device.
 26720                                  ;
 26721                                  ;	jmp	short no_more_magic_calls ; and finished.
 26722                                  ;
 26723                                  ;magic_not_yet_home:
 26724                                  ;	push	es
 26725                                  ;	push	si
 26726                                  ;
 26727                                  ;	mov	cx,[cs:memhi]		; pass it a work buffer
 26728                                  ;	mov	dx,[cs:ALLOCLIM]	;   address in cx (segment)
 26729                                  ;	sub	dx,cx			;   for len dx (paragraphs)
 26730                                  ;
 26731                                  ;	mov	bx,2
 26732                                  ;	mov	al,[cs:driver_units]	; shuffle magicdrives and new drives
 26733                                  ;;					;   by this many units
 26734                                  ;
 26735                                  ;;BUGBUG 29-Oct-1992 bens Take this 55h out after Beta 4
 26736                                  ;	mov	ah,55h			; backdoor won't shuffle unless it
 26737                                  ;;					;  sees this, to prevent bad things
 26738                                  ;;					;  from happening if people run the
 26739                                  ;;					;  new driver with an old BIOS
 26740                                  ;	call	far [cs:MagicBackdoor]
 26741                                  ;
 26742                                  ;	pop	si
 26743                                  ;	pop	es
 26744                                  ;
 26745                                  ;no_more_magic_calls:
 26746                                  ;
 26747                                  ;;;;	endif
 26748                                  ;	retn
 26749                                  
 26750                                  ; 03/04/2019 - Retro DOS v4.0
 26751                                  
 26752                                  bad_bpb_size_sector:
 26753 000023C0 5E                      	pop	si
 26754 000023C1 07                      	pop	es
 26755 000023C2 BA[7237]                	mov	dx,badsiz_pre
 26756 000023C5 BB[5037]                	mov	bx,crlfm
 26757 000023C8 E8920F                  	call	prnerr
 26758                                  
 26759 000023CB E92AFC                  	jmp	coff
 26760                                  
 26761                                  ;------------------------------------------------------------------------------
 26762                                  ; country command
 26763                                  ;      the syntax is:
 26764                                  ;	country=country id {,codepage {,path}}
 26765                                  ;	country=country id {,,path}	:default codepage id in dos
 26766                                  ;------------------------------------------------------------------------------
 26767                                  
 26768                                  	; 30/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 26769                                  	; (SYSINIT:2663h)
 26770                                  tryq:
 26771 000023CE 80FC51                          cmp     ah,CONFIG_COUNTRY ; 'Q'
 26772 000023D1 7403                    	je	short tryq_cont
 26773                                  skip_it3:
 26774 000023D3 E90801                  	jmp	tryf
 26775                                  tryq_cont:
 26776                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 26777                                  ;;ifdef	MULTI_CONFIG
 26778                                  ;       call    query_user		; query the user if config_cmd
 26779                                  ;       jc      short skip_it3		; has the CONFIG_OPTION_QUERY bit set
 26780                                  ;;endif
 26781                                  	; 14/12/2022
 26782                                  	; ds = cs
 26783                                  	; bx = 0
 26784                                  	;mov	byte [cs:cntry_drv],0	; reset the drive,path to default value.
 26785                                  	;mov	word [cs:p_code_page],0
 26786 000023D6 881E[0834]              	mov	[cntry_drv],bl ; 0
 26787 000023DA 891E[AD1D]              	mov	[p_code_page],bx ; 0
 26788                                  	
 26789 000023DE BF[761D]                	mov	di,cntry_parms
 26790 000023E1 31C9                    	xor	cx,cx
 26791                                  	; 04/01/2023
 26792                                  	;mov	dx,cx
 26793                                  do52:
 26794 000023E3 E8F602                  	call	sysinit_parse
 26795 000023E6 730B                    	jnc	short if52		; parse error,check error code and
 26796                                  
 26797 000023E8 E8E000                  	call	cntry_error		; show message and end the search loop.
 26798                                  	; 14/12/2022
 26799                                  	; ds = cs
 26800 000023EB C706[AB1D]FFFF          	mov	word [p_cntry_code],-1
 26801                                  	;mov	word [cs:p_cntry_code],-1 ; signals that parse error.
 26802 000023F1 EB34                    	jmp	short sr52
 26803                                  if52:
 26804 000023F3 83F8FF                  	cmp	ax,_$P_RC_EOL ; 0FFFFh	; end of line?
 26805 000023F6 742F                    	jz	short sr52		; then end the search loop
 26806                                  
 26807                                  	;cmp	byte [cs:result_val+_$P_Result_Blk.Type],_$P_number ; numeric?
 26808                                  	; 14/12/2022
 26809                                  	; ds = cs
 26810 000023F8 803E[481D]01            	cmp	byte [result_val],_$P_Number	
 26811                                  	;cmp	byte [cs:result_val],_$P_Number
 26812 000023FD 7512                    	jnz	short if56
 26813                                  
 26814                                  	;;mov	ax,[cs:rw_dword]
 26815                                  	;mov	ax,[cs:result_val+_$P_Result_Blk.Picked_Val]
 26816                                  	; 14/12/2022
 26817 000023FF A1[4C1D]                	mov	ax,[result_val+_$P_Result_Blk.Picked_Val]
 26818 00002402 83F901                  	cmp	cx,1
 26819 00002405 7505                    	jne	short if57
 26820                                  
 26821                                  	;mov	[cs:p_cntry_code],ax
 26822                                  	; 14/12/2022
 26823 00002407 A3[AB1D]                	mov	[p_cntry_code],ax
 26824                                  
 26825                                  	; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 26826                                  	;jmp	short en57
 26827                                  	; 12/12/2022
 26828                                  	;jmp	short en56
 26829 0000240A EBD7                    	jmp	short do52
 26830                                  
 26831                                  if57:
 26832                                  	;mov	[cs:p_code_page],ax
 26833                                  	; 14/12/2022
 26834                                  	; ds = cs
 26835 0000240C A3[AD1D]                	mov	[p_code_page],ax
 26836                                  en57:
 26837                                  	;jmp	short en56		; path entered
 26838                                  	; 12/12/2022
 26839 0000240F EBD2                    	jmp	short do52
 26840                                  
 26841                                  if56:
 26842 00002411 1E                      	push	ds
 26843 00002412 06                      	push	es
 26844 00002413 56                      	push	si
 26845 00002414 57                      	push	di
 26846                                  
 26847 00002415 0E                      	push	cs
 26848 00002416 07                      	pop	es
 26849                                  
 26850                                  	;lds	si,[cs:rv_dword]	; move the path to known place.
 26851                                  	; 14/12/2022
 26852 00002417 C536[4C1D]              	lds	si,[rv_dword]
 26853 0000241B BF[0834]                	mov	di,cntry_drv
 26854 0000241E E82A0F                  	call	move_asciiz
 26855                                  
 26856 00002421 5F                      	pop	di
 26857 00002422 5E                      	pop	si
 26858 00002423 07                      	pop	es
 26859 00002424 1F                      	pop	ds
 26860                                  
 26861                                  en56:
 26862 00002425 EBBC                    	jmp	short do52
 26863                                  
 26864                                  sr52:
 26865                                  	; 14/12/2022
 26866                                  	; ds = cs
 26867 00002427 833E[AB1D]FF            	cmp	word [p_cntry_code],-1
 26868                                  	;cmp	word [cs:p_cntry_code],-1	; had a parse error?
 26869 0000242C 7509                    	jne	short tryq_open
 26870 0000242E E9C7FB                  	jmp	coff
 26871                                  
 26872                                  tryqbad:				;"invalid country code or code page"
 26873 00002431 F9                      	stc
 26874 00002432 BA[B937]                	mov     dx,badcountry
 26875 00002435 EB79                    	jmp     tryqchkerr
 26876                                  
 26877                                  tryq_open:
 26878                                  	; 14/12/2022
 26879                                  	; ds = cs
 26880 00002437 803E[0834]00            	cmp	byte [cntry_drv],0
 26881                                  	;cmp	byte [cs:cntry_drv],0
 26882 0000243C 7405                    	je	short tryq_def
 26883 0000243E BA[0834]                	mov	dx,cntry_drv
 26884 00002441 EB03                    	jmp	short tryq_openit
 26885                                  
 26886                                  tryq_def:
 26887 00002443 BA[0A34]                	mov	dx,cntry_root
 26888                                  tryq_openit:
 26889 00002446 B8003D                  	mov	ax,3D00h		;open a file
 26890 00002449 F9                      	stc
 26891 0000244A CD21                    	int	21h
 26892 0000244C 7242                    	jc	short tryqfilebad	;open failure
 26893                                  
 26894                                  	; 14/12/2022
 26895                                  	; ds = cs
 26896 0000244E A3[D803]                	mov	[cntryfilehandle],ax
 26897                                  	;mov	[cs:cntryfilehandle],ax	;save file handle
 26898 00002451 89C3                    	mov	bx,ax
 26899 00002453 A1[AB1D]                	mov	ax,[p_cntry_code]
 26900 00002456 8B16[AD1D]              	mov	dx,[p_code_page]
 26901                                  	;mov	ax,[cs:p_cntry_code]
 26902                                  	;mov	dx,[cs:p_code_page]	; now,ax=country id,bx=filehandle
 26903                                  	;mov	cx,[cs:memhi]
 26904 0000245A 8B0E[E003]              	mov	cx,[memhi]
 26905 0000245E 81C18001                	add	cx,384			; need 6k buffer to handle country.sys
 26906                                  					; M023
 26907                                  	; 14/12/2022
 26908                                  	; ds = cs
 26909 00002462 3B0E[A302]              	cmp	cx,[ALLOCLIM]
 26910                                  	;cmp	cx,[cs:ALLOCLIM]
 26911 00002466 7745                    	ja	short tryqmemory	;cannot allocate the buffer for country.sys
 26912                                  
 26913 00002468 BE[0834]                	mov	si,cntry_drv		;ds:si -> cntry_drv
 26914 0000246B 803C00                  	cmp	byte [si],0 		;default path?
 26915 0000246E 7502                    	jne	short tryq_set_for_dos
 26916                                  
 26917 00002470 46                      	inc	si
 26918 00002471 46                      	inc	si			;ds:si -> cntry_root
 26919                                  
 26920                                  tryq_set_for_dos:
 26921                                  	; 14/12/2022
 26922                                  	; ds = cs
 26923 00002472 C43E[7702]              	les	di,[sysi_country]
 26924                                  	;les	di,[cs:sysi_country]	;es:di -> country info tab in dos
 26925 00002476 57                      	push	di			;save di
 26926                                  	;add	di,8
 26927 00002477 83C708                  	add	di,country_cdpg_info.ccPath_CountrySys ; 8
 26928 0000247A E8CE0E                  	call	move_asciiz		;set the path to country.sys in dos.
 26929 0000247D 5F                      	pop	di			;es:di -> country info tab again.
 26930                                  
 26931                                  	; 14/12/2022	
 26932 0000247E 8B0E[E003]              	mov	cx,[memhi]
 26933                                  	;mov	cx,[cs:memhi]
 26934 00002482 8ED9                    	mov	ds,cx
 26935 00002484 31F6                    	xor	si,si			;ds:si -> 2k buffer to be used.
 26936 00002486 E8060D                  	call	setdoscountryinfo	;now do the job!!!
 26937                                  	; ds <> cs ; 14/12/2022
 26938 00002489 7325                    	jnc	short tryqchkerr	;read error or could not find country,code page combination
 26939                                  
 26940 0000248B 83F9FF                  	cmp	cx,-1			;could not find matching country_id,code page?
 26941 0000248E 74A1                    	je	short tryqbad 		;then "invalid country code or code page"
 26942                                  
 26943                                  tryqfilebad:
 26944 00002490 0E                      	push	cs
 26945 00002491 07                      	pop	es
 26946 00002492 2E803E[0834]00          	cmp	byte [cs:cntry_drv],0	;is the default file used?
 26947 00002498 7405                    	je	short tryqdefbad
 26948                                  
 26949 0000249A BE[0834]                	mov	si,cntry_drv
 26950 0000249D EB03                    	jmp	short tryqbadload
 26951                                  
 26952                                  tryqdefbad:				;default file has been used.
 26953 0000249F BE[0A34]                	mov	si,cntry_root		;es:si -> \country.sys in sysinit_seg
 26954                                  tryqbadload:
 26955 000024A2 E8B20E                  	call	badload 		;ds will be restored to sysinit_seg
 26956                                  	;mov	cx,[cs:CONFBOT]
 26957                                  	; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 26958                                  	;mov	cx,[cs:top_of_cdss]
 26959                                  	; 11/12/2022
 26960                                  	; ds = cs
 26961 000024A5 8B0E[A102]              	mov	cx,[top_of_cdss]  ; mov cx,[CONFBOT]	
 26962 000024A9 8EC1                    	mov	es,cx			;restore es -> confbot.
 26963 000024AB EB13                    	jmp	short coffj4
 26964                                  
 26965                                  tryqmemory:
 26966 000024AD BA[FC37]                	mov	dx,insufmemory
 26967                                  tryqchkerr:
 26968                                  	;mov	cx,[cs:CONFBOT]
 26969                                  	; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 26970                                  	;mov	cx,[cs:top_of_cdss]
 26971                                  	; 12/12/2022
 26972 000024B0 0E                      	push	cs
 26973 000024B1 1F                      	pop	ds
 26974 000024B2 8B0E[A102]              	mov	cx,[top_of_cdss]  ; mov cx,[CONFBOT]
 26975 000024B6 8EC1                    	mov	es,cx			;restore es -> confbot seg
 26976                                  	;push	cs
 26977                                  	;pop	ds			;restore ds to sysinit_seg
 26978 000024B8 7306                    	jnc	short coffj4		;if no error,then exit
 26979                                  
 26980 000024BA E8C20E                  	call	print			;else show error message
 26981 000024BD E88A02                  	call	error_line
 26982                                  coffj4:
 26983                                  	;mov	bx,[cs:cntryfilehandle]
 26984                                  	; 11/12/2022
 26985                                  	; ds = cs
 26986 000024C0 8B1E[D803]              	mov	bx,[cntryfilehandle]
 26987 000024C4 B43E                    	mov	ah,3Eh
 26988 000024C6 CD21                    	int	21h			;close a file. don't care even if it fails.
 26989 000024C8 E92DFB                  	jmp	coff
 26990                                  
 26991                                  ;--------------------------------------------
 26992                                  
 26993                                  cntry_error:
 26994                                  
 26995                                  ;function: show "invalid country code or code page" messages,or
 26996                                  ;		"error in country command" depending on the error code
 26997                                  ;		in ax returned by sysparse;
 26998                                  ;in:	ax - error code
 26999                                  ;	ds - sysinitseg
 27000                                  ;	es - confbot
 27001                                  ;out:	show message.  dx destroyed.
 27002                                  
 27003 000024CB 83F806                  	cmp	ax,_$P_Out_Of_Range ; 6
 27004 000024CE 7505                    	jne	short if64
 27005 000024D0 BA[B937]                	mov	dx,badcountry		;"invalid country code or code page"
 27006 000024D3 EB03                    	jmp	short en64
 27007                                  if64:
 27008 000024D5 BA[DF37]                	mov	dx,badcountrycom	;"error in contry command"
 27009                                  en64:
 27010 000024D8 E8A40E                  	call	print
 27011                                  	;call	error_line
 27012                                  	;retn
 27013                                  	; 11/12/2022
 27014 000024DB E96C02                  	jmp	error_line
 27015                                  
 27016                                  ;------------------------------------------------------------------------------
 27017                                  ; files command
 27018                                  ;------------------------------------------------------------------------------
 27019                                  
 27020                                  ;******************************************************************************
 27021                                  ; function: parse the parameters of files= command.			      *
 27022                                  ;									      *
 27023                                  ; input :								      *
 27024                                  ;	es:si -> parameters in command line.				      *
 27025                                  ; output:								      *
 27026                                  ;	variable files set.						      *
 27027                                  ;									      *
 27028                                  ; subroutines to be called:						      *
 27029                                  ;	sysinit_parse							      *
 27030                                  ; logic:								      *
 27031                                  ; {									      *
 27032                                  ;	set di points to files_parms;					      *
 27033                                  ;	set dx,cx to 0; 						      *
 27034                                  ;	while (end of command line)					      *
 27035                                  ;	{ sysinit_parse;						      *
 27036                                  ;	  if (no error) then						      *
 27037                                  ;	     files = result_val._$P_picked_val				      *
 27038                                  ;	  else								      *
 27039                                  ;	     error exit;						      *
 27040                                  ;	};								      *
 27041                                  ; };									      *
 27042                                  ;									      *
 27043                                  ;******************************************************************************
 27044                                  
 27045                                  tryf:
 27046 000024DE 80FC46                          cmp     ah,CONFIG_FILES ;  'F'
 27047 000024E1 7523                    	jne	short tryl
 27048                                  
 27049                                  	; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 27050                                  ;;ifdef	MULTI_CONFIG
 27051                                  ;       call    query_user              ; query the user if config_cmd
 27052                                  ;       jc      short tryl		; has the CONFIG_OPTION_QUERY bit set
 27053                                  ;;endif
 27054                                  
 27055                                  	; 14/12/2022
 27056                                  	; ds = cs
 27057                                  
 27058 000024E3 BF[AF1D]                	mov	di,files_parms
 27059 000024E6 31C9                    	xor	cx,cx
 27060                                  	; 04/01/2023
 27061                                  	;mov	dx,cx
 27062                                  do67:
 27063 000024E8 E8F101                  	call	sysinit_parse
 27064 000024EB 7303                    	jnc	short if67		; parse error
 27065                                  	;call	badparm_p		;  and show messages and end the search loop.
 27066                                  	;jmp	short sr67
 27067                                  	; 04/01/2023
 27068 000024ED E96A01                  	jmp	badparm_p_coff
 27069                                  if67:
 27070 000024F0 83F8FF                  	cmp	ax,_$P_RC_EOL		; end of line?
 27071 000024F3 7408                    	je	short en67		; then end the $endloop
 27072                                  
 27073                                  	; 14/12/2022
 27074                                  	; ds = cs
 27075                                  	;;mov	al,[cs:rv_dword]
 27076                                  	;mov	al,[cs:result_val+_$P_Result_Blk.Picked_Val]
 27077                                  	;mov	[cs:p_files],al		; save it temporarily
 27078                                  	;mov	al,[rv_dword]
 27079 000024F5 A0[4C1D]                	mov	al,[result_val+_$P_Result_Blk.Picked_Val]
 27080 000024F8 A2[CE1D]                	mov	[p_files],al
 27081                                  
 27082 000024FB EBEB                    	jmp	short do67
 27083                                  en67:
 27084                                  	; 14/12/2022
 27085                                  	; ds = cs
 27086 000024FD A0[CE1D]                	mov	al,[p_files]
 27087 00002500 A2[9D02]                	mov	[FILES],al	
 27088                                  	;mov	al,[cs:p_files]
 27089                                  	;mov	[cs:FILES],al		; no error. really set the value now.
 27090                                  sr67:
 27091 00002503 E9F2FA                  	jmp	coff
 27092                                  
 27093                                  ; 04/04/2019 - Retro DOS v4.0
 27094                                  
 27095                                  ;------------------------------------------------------------------------------
 27096                                  ; lastdrive command
 27097                                  ;------------------------------------------------------------------------------
 27098                                  
 27099                                  ;******************************************************************************
 27100                                  ; function: parse the parameters of lastdrive= command. 		      *
 27101                                  ;									      *
 27102                                  ; input :								      *
 27103                                  ;	es:si -> parameters in command line.				      *
 27104                                  ; output:								      *
 27105                                  ;	set the variable num_cds.					      *
 27106                                  ;									      *
 27107                                  ; subroutines to be called:						      *
 27108                                  ;	sysinit_parse							      *
 27109                                  ; logic:								      *
 27110                                  ; {									      *
 27111                                  ;	set di points to ldrv_parms;					      *
 27112                                  ;	set dx,cx to 0; 						      *
 27113                                  ;	while (end of command line)					      *
 27114                                  ;	{ sysinit_parse;						      *
 27115                                  ;	  if (no error) then						      *
 27116                                  ;	     set num_cds to the returned value; 			      *
 27117                                  ;	  else	/*error exit*/						      *
 27118                                  ;	     error exit;						      *
 27119                                  ;	};								      *
 27120                                  ; };									      *
 27121                                  ;									      *
 27122                                  ;******************************************************************************
 27123                                  
 27124                                  tryl:
 27125 00002506 80FC4C                          cmp     ah,CONFIG_LASTDRIVE ; 'L'
 27126 00002509 7523                    	jne	short tryp
 27127                                  
 27128                                  	; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 27129                                  ;;ifdef	MULTI_CONFIG
 27130                                  ;       call    query_user      ; query the user if config_cmd
 27131                                  ;       jc	short tryp	; has the CONFIG_OPTION_QUERY bit set
 27132                                  ;;endif
 27133                                  	; 14/12/2022
 27134                                  	; ds = cs
 27135                                  
 27136 0000250B BF[061E]                	mov	di,ldrv_parms
 27137 0000250E 31C9                    	xor	cx,cx
 27138                                  	; 04/01/2023
 27139                                  	;mov	dx,cx
 27140                                  do73:
 27141 00002510 E8C901                  	call	sysinit_parse
 27142 00002513 7303                    	jnc	short if73	; parse error
 27143                                  	;call	badparm_p	;  and show messages and end the search loop.
 27144                                  	;jmp	short sr73
 27145                                  	; 04/01/2023
 27146 00002515 E94201                  	jmp	badparm_p_coff
 27147                                  if73:
 27148 00002518 83F8FF                  	cmp	ax,_$P_RC_EOL	; end of line?
 27149 0000251B 7408                    	je	short en73	; then end the $endloop
 27150                                  
 27151                                  	; 14/12/2022
 27152                                  	; ds = cs
 27153                                  	;;mov	al,[cs:rv_dword]
 27154                                  	;mov	al,[cs:rv_byte]	; pick up the drive number
 27155                                  	;mov	[cs:p_ldrv],al	; save it temporarily
 27156                                  
 27157                                  	;mov	al,[rv_dword]
 27158 0000251D A0[4C1D]                	mov	al,[rv_byte]
 27159 00002520 A2[1A1E]                	mov	[p_ldrv],al
 27160                                  
 27161 00002523 EBEB                    	jmp	short do73
 27162                                  en73:
 27163                                  	; 14/12/2022
 27164                                  	; ds = cs
 27165 00002525 A0[1A1E]                	mov	al,[p_ldrv]
 27166 00002528 A2[A002]                	mov	[NUM_CDS],al
 27167                                  	;mov	al,[cs:p_ldrv]
 27168                                  	;mov	[cs:NUM_CDS],al	; no error. really set the value now.
 27169                                  sr73:
 27170 0000252B E9CAFA                  	jmp	coff
 27171                                  
 27172                                  ;--------------------------------------------------------------------------
 27173                                  ; setting drive parameters
 27174                                  ;--------------------------------------------------------------------------
 27175                                  
 27176                                  tryp:
 27177 0000252E 80FC50                          cmp     ah,CONFIG_DRIVPARM ; 'P'
 27178 00002531 7511                    	jne	short tryk
 27179                                  
 27180                                  	; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 27181                                  ;;ifdef	MULTI_CONFIG
 27182                                  ;       call    query_user      ; query the user if config_cmd
 27183                                  ;       jc      short tryk	; has the CONFIG_OPTION_QUERY bit set
 27184                                  ;;endif
 27185                                  
 27186 00002533 E86908                  	call	parseline
 27187 00002536 7209                    	jc	short trypbad
 27188 00002538 E88907                  	call	setparms
 27189 0000253B E8BF07                  	call	diddleback
 27190                                  
 27191                                  ; No error check here, because setparms and diddleback have no error 
 27192                                  ; returns, and setparms as coded now can return with carry set. 
 27193                                  ;       jc	short trypbad
 27194                                  
 27195                                  	; 12/12/2022
 27196                                  	; cf = 0
 27197                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 27198                                  	;jc	short trypbad
 27199                                  	
 27200 0000253E E9B7FA                  	jmp	coff
 27201                                  trypbad:
 27202 00002541 E9BB01                  	jmp	badop
 27203                                  
 27204                                  ;--------------------------------------------------------------------------
 27205                                  ; setting internal stack parameters
 27206                                  ; stacks=m,n where
 27207                                  ;	m is the number of stacks (range 8 to 64,default 9)
 27208                                  ;	n is the stack size (range 32 to 512 bytes,default 128)
 27209                                  ; j.k. 5/5/86: stacks=0,0 implies no stack installation.
 27210                                  ;	any combinations that are not within the specified limits will
 27211                                  ;	result in "unrecognized command" error.
 27212                                  ;--------------------------------------------------------------------------
 27213                                  
 27214                                  ;**************************************************************************
 27215                                  ;									  *
 27216                                  ; function: parse the parameters of stacks= command.			  *
 27217                                  ;	    the minimum value for "number of stacks" and "stack size" is  *
 27218                                  ;	    8 and 32 each.  in the definition of sysparse value list,they *
 27219                                  ;	    are set to 0.  this is for accepting the exceptional case of  *
 27220                                  ;	    stacks=0,0 case (,which means do not install the stack.)	  *
 27221                                  ;	    so,after sysparse is done,we have to check if the entered	  *
 27222                                  ;	    values (stack_count,stack_size) are within the actual range,  *
 27223                                  ;	    (or if "0,0" pair has been entered.)			  *
 27224                                  ; input :								  *
 27225                                  ;	es:si -> parameters in command line.				  *
 27226                                  ; output:								  *
 27227                                  ;	set the variables stack_count,stack_size.			  *
 27228                                  ;									  *
 27229                                  ; subroutines to be called:						  *
 27230                                  ;	sysinit_parse							  *
 27231                                  ; logic:								  *
 27232                                  ; {									  *
 27233                                  ;	set di points to stks_parms;					  *
 27234                                  ;	set dx,cx to 0; 						  *
 27235                                  ;	while (end of command line)					  *
 27236                                  ;	{ sysinit_parse;						  *
 27237                                  ;	  if (no error) then						  *
 27238                                  ;	     { if (cx == 1) then /* first positional = stack count */	  *
 27239                                  ;		   p_stack_count = result_val._$P_picked_val;		  *
 27240                                  ;	       if (cx == 2) then /* second positional = stack size */	  *
 27241                                  ;		   p_stack_size = result_val._$P_picked_val;		  *
 27242                                  ;	     }								  *
 27243                                  ;	  else	/*error exit*/						  *
 27244                                  ;	     error exit;						  *
 27245                                  ;	};								  *
 27246                                  ;	here check p_stack_count,p_stack_size if it meets the condition;  *
 27247                                  ;	if o.k.,then set stack_count,stack_size;			  *
 27248                                  ;	 else error_exit;						  *
 27249                                  ; };									  *
 27250                                  ;**************************************************************************
 27251                                  
 27252                                  tryk:
 27253                                          ;if      stacksw
 27254                                  
 27255 00002544 80FC4B                          cmp     ah,CONFIG_STACKS ; 'K'
 27256 00002547 7402                    	je	short do_tryk
 27257                                  skip_it4:
 27258 00002549 EB74                    	jmp	short trys	; 15/12/2022
 27259                                  do_tryk:
 27260                                  	; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 27261                                  ;;ifdef	MULTI_CONFIG
 27262                                  ;       call    query_user              ; query the user if config_cmd
 27263                                  ;       jc	short skip_it4		; has the CONFIG_OPTION_QUERY bit set
 27264                                  ;;endif
 27265                                  	; 14/12/2022
 27266                                  	; ds = cs
 27267                                  
 27268 0000254B BF[1B1E]                	mov	di,stks_parms
 27269 0000254E 31C9                    	xor	cx,cx
 27270                                  	; 04/01/2023
 27271                                  	;mov	dx,cx
 27272                                  do79:
 27273 00002550 E88901                  	call	sysinit_parse
 27274 00002553 730B                    	jnc	short if79		; parse error
 27275                                  
 27276 00002555 BA[6B38]                	mov	dx,badstack		; "invalid stack parameter"
 27277 00002558 E8240E                  	call	print			;  and show messages and end the search loop.
 27278 0000255B E8EC01                  	call	error_line
 27279                                  	;jmp	sr79
 27280                                  	; 11/12/2022
 27281 0000255E EB39                    	jmp	short sr79
 27282                                  if79:
 27283 00002560 83F8FF                  	cmp	ax,_$P_RC_EOL		; end of line?
 27284 00002563 7412                    	je	short en79		; then end the $endloop
 27285                                  
 27286                                  	; 14/12/2022
 27287                                  	; ds = cs
 27288                                  
 27289                                  	;;mov	ax,[cs:rv_dword]
 27290                                  	;mov	ax,[cs:result_val+_$P_Result_Blk.Picked_Val]
 27291                                  	;mov	ax,[rv_dword]
 27292 00002565 A1[4C1D]                	mov	ax,[result_val+_$P_Result_Blk.Picked_Val]
 27293                                  
 27294 00002568 83F901                  	cmp	cx,1
 27295 0000256B 7505                    	jne	short if83
 27296                                  
 27297                                  	; 14/12/2022
 27298                                  	;mov	[cs:p_stack_count],ax
 27299                                  	;jmp	short en83
 27300 0000256D A3[501E]                	mov	[p_stack_count],ax
 27301 00002570 EBDE                    	jmp	short do79
 27302                                  if83:
 27303                                  	; 14/12/2022
 27304                                  	;mov	[cs:p_stack_size],ax
 27305 00002572 A3[521E]                	mov	[p_stack_size],ax
 27306                                  en83:
 27307 00002575 EBD9                    	jmp	short do79
 27308                                  en79:
 27309                                  	; 14/12/2022
 27310                                  	; ds = cs
 27311 00002577 A1[501E]                	mov	ax,[p_stack_count]
 27312 0000257A 09C0                    	or	ax,ax
 27313 0000257C 741E                    	jz	short if87		
 27314                                  
 27315                                  	; 14/12/2022
 27316                                  	;cmp	word [p_stack_count],0
 27317                                  	;;cmp	word [cs:p_stack_count],0
 27318                                  	;je	short if87
 27319                                  
 27320                                  	; 14/12/2022
 27321 0000257E 83F808                  	cmp	ax, mincount ; 8
 27322                                  	;cmp	word [cs:p_stack_count],mincount ; 8
 27323                                  	; 15/12/2022
 27324 00002581 721F                    	jb	short en87
 27325 00002583 833E[521E]20            	cmp	word [p_stack_size],minsize ; 32
 27326                                  	;cmp	word [cs:p_stack_size],minsize ; 32
 27327                                  	; 15/12/2022
 27328 00002588 7218                    	jb	short en87
 27329                                  if94:
 27330                                  	; 14/12/2022
 27331                                  	; ds = cs
 27332                                  	; ax = [p_stack_count]
 27333                                  	;mov	ax,[p_stack_count]
 27334                                  	;;mov	ax,[cs:p_stack_count]
 27335 0000258A A3[8A02]                	mov	[stack_count],ax
 27336                                  	;mov	[cs:stack_count],ax
 27337                                  	;mov	ax,[cs:p_stack_size]
 27338 0000258D A1[521E]                	mov	ax,[p_stack_size]
 27339                                  	;mov	[cs:stack_size],ax
 27340 00002590 A3[8C02]                	mov	[stack_size],ax
 27341                                  	;mov	word [cs:stack_addr],-1	; stacks= been accepted.
 27342 00002593 C706[8E02]FFFF          	mov	word [stack_addr],-1
 27343                                  sr79:
 27344 00002599 E95CFA                  	jmp	coff
 27345                                  
 27346                                  if87:
 27347                                  	; 14/12/2022
 27348 0000259C 3906[521E]              	cmp	[p_stack_size],ax ; 0
 27349 000025A0 74E8                    	je	short if94 ; ax = [p_stack_count] = 0
 27350                                  	;cmp	word [cs:p_stack_size],0
 27351                                  	;je	short if94
 27352                                  en87:
 27353                                  	; 15/12/2022
 27354                                  	; ([p_stack_count] is invalid, use default values)
 27355                                  	; 14/12/2022
 27356                                  	; ds = cs
 27357 000025A2 C706[8A02]0900          	mov	word [stack_count],defaultcount ; 9
 27358 000025A8 C706[8C02]8000          	mov	word [stack_size],defaultsize ; 128
 27359 000025AE C706[8E02]0000          	mov	word [stack_addr],0
 27360                                  	;mov	word [cs:stack_count],defaultcount ; 9
 27361                                  	;				; reset to default value.
 27362                                  	;mov	word [cs:stack_size],defaultsize ; 128
 27363                                  	;mov	word [cs:stack_addr],0
 27364                                  
 27365 000025B4 BA[6B38]                	mov	dx,badstack
 27366 000025B7 E8C50D                  	call	print
 27367 000025BA E88D01                  	call	error_line
 27368 000025BD EBDA                    	jmp	short sr79
 27369                                  
 27370                                  ; 15/12/2022
 27371                                  %if 0
 27372                                  	mov	di,stks_parms
 27373                                  	xor	cx,cx
 27374                                  	; 04/01/2023
 27375                                  	;mov	dx,cx
 27376                                  do79:
 27377                                  	call	sysinit_parse
 27378                                  	jnc	short if79		; parse error
 27379                                  
 27380                                  	mov	dx,badstack		; "invalid stack parameter"
 27381                                  	call	print			;  and show messages and end the search loop.
 27382                                  	call	error_line
 27383                                  	;jmp	sr79
 27384                                  	; 11/12/2022
 27385                                  	jmp	short sr79
 27386                                  if79:
 27387                                  	cmp	ax,_$P_RC_EOL		; end of line?
 27388                                  	je	short en79		; then end the $endloop
 27389                                  
 27390                                  	;mov	ax,[cs:rv_dword]
 27391                                  	mov	ax,[cs:result_val+_$P_Result_Blk.Picked_Val]
 27392                                  	cmp	cx,1
 27393                                  	jne	short if83
 27394                                  
 27395                                  	mov	[cs:p_stack_count],ax
 27396                                  	jmp	short en83
 27397                                  if83:
 27398                                  	mov	[cs:p_stack_size],ax
 27399                                  en83:
 27400                                  	jmp	short do79
 27401                                  en79:
 27402                                  	cmp	word [cs:p_stack_count],0
 27403                                  	je	short if87
 27404                                  
 27405                                  	cmp	word [cs:p_stack_count],mincount ; 8
 27406                                  	jb	short ll88
 27407                                  	cmp	word [cs:p_stack_size],minsize ; 32
 27408                                  	jnb	short if88
 27409                                  ll88:
 27410                                  	mov	word [cs:p_stack_count],-1 ; invalid
 27411                                  if88:
 27412                                  	jmp	short en87
 27413                                  
 27414                                  	; 11/12/2022
 27415                                  if94:
 27416                                  	mov	ax,[cs:p_stack_count]
 27417                                  	mov	[cs:stack_count],ax
 27418                                  	mov	ax,[cs:p_stack_size]
 27419                                  	mov	[cs:stack_size],ax
 27420                                  	mov	word [cs:stack_addr],-1	; stacks= been accepted.
 27421                                  sr79:
 27422                                  	jmp	coff
 27423                                  
 27424                                  if87:
 27425                                  	cmp	word [cs:p_stack_size],0
 27426                                  	je	short en87
 27427                                  	mov	word [cs:p_stack_count],-1 ; invalid
 27428                                  en87:
 27429                                  	cmp	word [cs:p_stack_count],-1 ; invalid?
 27430                                  	jne	short if94
 27431                                  
 27432                                  	mov	word [cs:stack_count],defaultcount ; 9
 27433                                  					; reset to default value.
 27434                                  	mov	word [cs:stack_size],defaultsize ; 128
 27435                                  	mov	word [cs:stack_addr],0
 27436                                  
 27437                                  	mov	dx,badstack
 27438                                  	call	print
 27439                                  	call	error_line
 27440                                  	jmp	short sr79
 27441                                  
 27442                                  %endif
 27443                                  
 27444                                  ; 11/12/2022
 27445                                  %if 0 
 27446                                  
 27447                                  if94:
 27448                                  	mov	ax,[cs:p_stack_count]
 27449                                  	mov	[cs:stack_count],ax
 27450                                  	mov	ax,[cs:p_stack_size]
 27451                                  	mov	[cs:stack_size],ax
 27452                                  	mov	word [cs:stack_addr],-1	; stacks= been accepted.
 27453                                  sr79:
 27454                                  	jmp	coff
 27455                                  
 27456                                  %endif
 27457                                  
 27458                                  	;endif
 27459                                  
 27460                                  ;------------------------------------------------------------------------
 27461                                  ; shell command
 27462                                  ;------------------------------------------------------------------------
 27463                                  
 27464                                  trys:
 27465 000025BF 80FC53                          cmp     ah,CONFIG_SHELL ; 'S'
 27466 000025C2 753C                    	jne	short tryx
 27467                                  
 27468                                  	; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 27469                                  ;;ifdef	MULTI_CONFIG
 27470                                  ;       call    query_user              ; query the user if config_cmd
 27471                                  ;       jc	short tryx		; has the CONFIG_OPTION_QUERY bit set
 27472                                  ;       mov	byte [cs:newcmd],1
 27473                                  ;;endif
 27474                                  
 27475                                  	;;mov	word [cs:command_line],0 ; zap length,first byte of command-line
 27476                                  	; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 27477                                  	;mov	byte [cs:command_line+1],0
 27478                                  	; 15/12/2022
 27479                                  	; ds = cs
 27480 000025C4 C606[AA02]00            	mov	byte [command_line+1],0
 27481                                  
 27482 000025C9 BF[5634]                        mov     di,commnd+1		; we already have the first char
 27483 000025CC 8845FF                          mov     [di-1],al               ; of the new shell in AL, save it now
 27484                                  storeshell:
 27485 000025CF E86101                  	call	getchr
 27486 000025D2 08C0                            or      al,al                   ; this is the normal case: "organize"
 27487 000025D4 7419                            jz	short getshparms	; put a ZERO right after the filename
 27488                                  
 27489 000025D6 3C20                            cmp     al," "                  ; this may happen if there are no args
 27490 000025D8 7205                            jb	short endofshell	; I suppose...
 27491 000025DA 8805                    	mov	[di],al
 27492 000025DC 47                      	inc	di
 27493                                          ;cmp    di,commnd+63		; this makes sure we don't overflow
 27494                                          ;jb	short storeshell	; commnd (the filename)
 27495                                          ;jmp	short endofshell
 27496                                  	; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 27497 000025DD EBF0                    	jmp	short storeshell
 27498                                  
 27499                                  ; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 27500                                  ;getshparms:
 27501                                  ;	mov     byte [di],0		; zero-terminate the filename
 27502                                  ;	mov     di,command_line+1	; prepare to process the command-line
 27503                                  ;
 27504                                  ;parmloop:
 27505                                  ;	call	getchr
 27506                                  ;	cmp	al," "
 27507                                  ;	jb	short endofparms
 27508                                  ;	mov	[di],al
 27509                                  ;	inc	di
 27510                                  ;	cmp     di,command_line+126
 27511                                  ;	jb	short parmloop
 27512                                  ;endofparms:
 27513                                  ;	mov     cx,di
 27514                                  ;	sub     cx,command_line+1
 27515                                  ;	mov     [cs:command_line],cl
 27516                                  ;
 27517                                  ;endofshell:
 27518                                  ;	mov     byte [di],0		; zero-terminate the filename (or
 27519                                  ;					; the command-line as the case may be)
 27520                                  ;skipline:
 27521                                  ;       cmp     al,lf	; 0Ah		; the safest way to eat the rest of
 27522                                  ;       je	short endofline		; the line: watch for ever-present LF
 27523                                  ;call	getchr
 27524                                  ;       jnc	short skipline		; keep it up as long as there are chars
 27525                                  ;
 27526                                  ;endofline:
 27527                                  ;       jmp     conflp
 27528                                  
 27529                                  	; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 27530                                  endofshell:
 27531 000025DF C60500                       	mov     byte [di],0		; zero-terminate the filename (or
 27532                                  					; the command-line as the case may be)
 27533 000025E2 E84E01                  	call	getchr
 27534                                  skipline:
 27535 000025E5 3C0A                    	cmp     al,lf	; 0Ah		; the safest way to eat the rest of
 27536 000025E7 7403                    	je	short endofline		; the line: watch for ever-present LF
 27537 000025E9 E84701                  	call	getchr
 27538                                  endofline:
 27539 000025EC E9E4F9                  	jmp     conflp
 27540                                  
 27541                                  	; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 27542                                  getshparms:
 27543                                  	; 18/12/2022
 27544                                  	; al = 0
 27545 000025EF 8805                    	mov	[di],al ; 0
 27546                                  	;mov	byte [di],0		; zero-terminate the filename
 27547 000025F1 BF[AA02]                	mov     di,command_line+1	; prepare to process the command-line
 27548                                  parmloop:
 27549 000025F4 E83C01                  	call	getchr
 27550 000025F7 3C20                    	cmp	al," " ; 20h
 27551 000025F9 72E4                    	jb	short endofshell
 27552 000025FB 8805                    	mov	[di],al
 27553 000025FD 47                      	inc	di
 27554 000025FE EBF4                    	jmp	short parmloop
 27555                                  
 27556                                  ;------------------------------------------------------------------------
 27557                                  ; fcbs command
 27558                                  ;------------------------------------------------------------------------
 27559                                  
 27560                                  ;************************************************************************
 27561                                  ; function: parse the parameters of fcbs= command.			*
 27562                                  ;									*
 27563                                  ; input :								*
 27564                                  ;	es:si -> parameters in command line.				*
 27565                                  ; output:								*
 27566                                  ;	set the variables fcbs,keep.					*
 27567                                  ;									*
 27568                                  ; subroutines to be called:						*
 27569                                  ;	sysinit_parse							*
 27570                                  ; logic:								*
 27571                                  ; {									*
 27572                                  ;	set di points to fcbs_parms;					*
 27573                                  ;	set dx,cx to 0; 						*
 27574                                  ;	while (end of command line)					*
 27575                                  ;	{ sysparse;							*
 27576                                  ;	  if (no error) then						*
 27577                                  ;	     { if (cx == 1) then /* first positional = fcbs */		*
 27578                                  ;		   fcbs = result_val._$P_picked_val;			*
 27579                                  ;	       if (cx == 2) then /* second positional = keep */ 	*
 27580                                  ;		   keep = result_val._$P_picked_val;			*
 27581                                  ;	     }								*
 27582                                  ;	  else	/*error exit*/						*
 27583                                  ;	     error exit;						*
 27584                                  ;	};								*
 27585                                  ; };									*
 27586                                  ;************************************************************************
 27587                                  
 27588                                  tryx:
 27589 00002600 80FC58                          cmp     ah,CONFIG_FCBS  ; 'X'
 27590                                          ;jne	short try1
 27591                                  	; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 27592 00002603 752F                    	jne	short tryy	; comment command
 27593                                  
 27594                                  	; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 27595                                  ;;ifdef	MULTI_CONFIG
 27596                                  ;       call    query_user      ; query the user if config_cmd
 27597                                  ;       jc	short try1	; has the CONFIG_OPTION_QUERY bit set
 27598                                  ;;endif
 27599                                  
 27600 00002605 BF[CF1D]                	mov	di,fcbs_parms
 27601 00002608 31C9                    	xor	cx,cx
 27602                                  	; 04/01/2023
 27603                                  	;mov	dx,cx
 27604                                  do98:
 27605 0000260A E8CF00                  	call	sysinit_parse
 27606                                          ; 04/01/2023
 27607                                  	;jnc	short if98	; parse error
 27608                                          ;call	badparm_p	;  and show messages and end the search loop.
 27609                                  	;jmp	short sr98
 27610                                  	;------------------------
 27611                                  	; 04/01/2023
 27612 0000260D 724B                    	jc	short badparm_p_coff
 27613                                  if98:
 27614 0000260F 83F8FF                  	cmp	ax,_$P_RC_EOL	; end of line?
 27615 00002612 7412                    	je	short en98	; then end the $endloop
 27616                                  
 27617                                  	;;mov	al,[cs:rv_dword]
 27618                                  	;mov	al,[cs:result_val+_$P_Result_Blk.Picked_Val]
 27619                                  	; 15/12/2022
 27620                                  	; ds = cs
 27621 00002614 A0[4C1D]                	mov	al,[result_val+_$P_Result_Blk.Picked_Val]
 27622 00002617 83F901                  	cmp	cx,1		; the first positional?
 27623 0000261A 7505                    	jne	short if102
 27624                                  	;mov	[cs:p_fcbs],al
 27625                                  	; 15/12/2022
 27626 0000261C A2[041E]                	mov	[p_fcbs],al
 27627                                  	;jmp	short en102
 27628 0000261F EBE9                    	jmp	short do98
 27629                                  if102:
 27630                                  	;mov	[cs:p_keep],al
 27631                                  	; 15/12/2022
 27632 00002621 A2[051E]                	mov	[p_keep],al
 27633                                  en102:
 27634 00002624 EBE4                    	jmp	short do98
 27635                                  en98:
 27636                                  	; 15/12/2022
 27637                                  	; ds = cs
 27638 00002626 A0[041E]                	mov	al,[p_fcbs]
 27639 00002629 A2[9E02]                	mov	[FCBS],al
 27640 0000262C C606[9F02]00            	mov	byte [KEEP],0
 27641                                  	;mov	al,[cs:p_fcbs]	 ; M017
 27642                                  	;mov	[cs:FCBS],al	 ; M017
 27643                                  	;mov	byte [cs:KEEP],0 ; M017
 27644                                  sr98:
 27645 00002631 E9C4F9                  	jmp	coff
 27646                                  
 27647                                  ; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 27648                                  ;-------------------------------------------------------------------------
 27649                                  ; comment= do nothing. just decrease chrptr,and increase count for correct
 27650                                  ;		line number
 27651                                  ;-------------------------------------------------------------------------
 27652                                  
 27653                                  tryy:
 27654 00002634 80FC59                  	cmp     ah,CONFIG_COMMENT ; 'Y'
 27655 00002637 750B                    	jne	short try0
 27656                                  
 27657                                  donothing:
 27658                                  	; 15/12/2022
 27659                                  	; ds = cs
 27660 00002639 FF0E[D603]              	dec	word [chrptr]
 27661 0000263D FF06[D203]              	inc	word [count]
 27662                                  	; 02/11/2022
 27663                                  	;dec	word [cs:chrptr]
 27664                                  	;inc	word [cs:count]
 27665                                  
 27666 00002641 E9B4F9                  	jmp	coff
 27667                                  
 27668                                  ;------------------------------------------------------------------------
 27669                                  ; rem command
 27670                                  ;------------------------------------------------------------------------
 27671                                  
 27672                                  try0:				; do nothing with this line.
 27673 00002644 80FC30                  	cmp     ah,CONFIG_REM ; '0'
 27674 00002647 74F0                    	je	short donothing
 27675                                  
 27676                                  ; 07/04/2019 - Retro DOS v4.0
 27677                                  
 27678                                  ;-----------------------------------------------------------------------
 27679                                  ; switches command
 27680                                  ;-----------------------------------------------------------------------
 27681                                  
 27682                                  ;***********************************************************************
 27683                                  ;								       *
 27684                                  ; function: parse the option switches specified.		       *
 27685                                  ; note - this command is intended for the future use also.	       *
 27686                                  ; when we need to set system data flag,use this command.	       *
 27687                                  ;								       *
 27688                                  ; input :							       *
 27689                                  ;	es:si -> parameters in command line.			       *
 27690                                  ; output:							       *
 27691                                  ;	p_swit_k set if /k option chosen.			       *
 27692                                  ;								       *
 27693                                  ; subroutines to be called:					       *
 27694                                  ;	sysinit_parse						       *
 27695                                  ; logic:							       *
 27696                                  ; {								       *
 27697                                  ;	set di points to swit_parms;  /*parse control definition*/     *
 27698                                  ;	set dx,cx to 0; 					       *
 27699                                  ;	while (end of command line)				       *
 27700                                  ;	{ sysinit_parse;					       *
 27701                                  ;	  if (no error) then					       *
 27702                                  ;	       if (result_val._$P_synonym_ptr == swit_k) then	       *
 27703                                  ;		    p_swit_k = 1				       *
 27704                                  ;	       endif						       *
 27705                                  ;	  else {show error message;error exit}			       *
 27706                                  ;	};							       *
 27707                                  ; };								       *
 27708                                  ;								       *
 27709                                  ;***********************************************************************
 27710                                  
 27711                                  SUPPRESS_WINA20	EQU 00000010b	; M025 ; (DOSSYM.INC, MSDOS 6.0)
 27712                                  
 27713                                  try1:
 27714 00002649 80FC31                          cmp     ah,CONFIG_SWITCHES ; '1'
 27715 0000264C 7402                    	je	short do_try1	; switches= command entered?
 27716                                  skip_it5:
 27717                                  	;jmp	tryv
 27718                                  	; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 27719 0000264E EB7A                    	jmp	tryz
 27720                                  
 27721                                  do_try1:
 27722                                  
 27723                                  	; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 27724                                  ;;ifdef	MULTI_CONFIG
 27725                                  ;       call    query_user      ; query the user if config_cmd
 27726                                  ;       jc	short skip_it5	; has the CONFIG_OPTION_QUERY bit set
 27727                                  ;;endif
 27728                                  
 27729 00002650 BF[691E]                	mov	di,swit_parms
 27730 00002653 31C9                    	xor	cx,cx
 27731                                  	; 04/01/2023
 27732                                  	;mov	dx,cx
 27733                                  do110:
 27734 00002655 E88400                  	call	sysinit_parse
 27735 00002658 7306                    	jnc	short if110	; parse error
 27736                                  	;call	badparm_p	;  and show messages and end the search loop.
 27737                                  	;jmp	short sr110
 27738                                  	; -----------------------
 27739                                  	; 04/01/2023
 27740                                  badparm_p_coff:
 27741 0000265A E8AE00                  	call	badparm_p
 27742 0000265D E998F9                  	jmp	coff
 27743                                  	;------------------------
 27744                                  if110:
 27745 00002660 83F8FF                  	cmp	ax,_$P_RC_EOL	; end of line?
 27746 00002663 742D                    	je	short en110	; then jmp to $endloop for semantic check
 27747                                  
 27748                                  	; 15/12/2022
 27749                                  	; ds = cs
 27750                                  	;;cmp	word [cs:result_val_swoff],swit_k
 27751                                  	;cmp	word [cs:result_val+_$P_Result_Blk.SYNONYM_Ptr],swit_k 
 27752 00002665 813E[4A1D][811E]        	cmp	word [result_val+_$P_Result_Blk.SYNONYM_Ptr],swit_k 
 27753 0000266B 7507                    	jne	short if115	;				;M059
 27754                                  	; 15/12/2022
 27755 0000266D C606[9C1E]01            	mov	byte [p_swit_k],1
 27756                                  	;mov	byte [cs:p_swit_k],1	; set the flag
 27757 00002672 EBE1                    	jmp	short do110
 27758                                  if115:	
 27759                                  	; 15/12/2022							;M059
 27760                                  	;;cmp	word [cs:result_val_swoff],swit_t
 27761                                  	;cmp	word [cs:result_val+_$P_Result_Blk.SYNONYM_Ptr],swit_t	;M059
 27762 00002674 813E[4A1D][8D1E]        	cmp	word [result_val+_$P_Result_Blk.SYNONYM_Ptr],swit_t
 27763 0000267A 7507                    	jne	short if116					;M059 M063
 27764                                  	; 15/12/2022
 27765 0000267C C606[9D1E]01            	mov	byte [p_swit_t],1
 27766                                  	;mov	byte [cs:p_swit_t],1				;M059
 27767 00002681 EBD2                    	jmp	short do110					;M059
 27768                                  if116:
 27769                                  	; 15/12/2022
 27770                                  	;;cmp	word [cs:result_val_swoff],swit_w
 27771                                  	;cmp	word [cs:result_val+_$P_Result_Blk.SYNONYM_Ptr],swit_w	;M063
 27772 00002683 813E[4A1D][991E]        	cmp	word [result_val+_$P_Result_Blk.SYNONYM_Ptr],swit_w
 27773 00002689 75CA                    	jne	short do110					;M063
 27774                                  	; 15/12/2022
 27775 0000268B C606[9E1E]01            	mov	byte [p_swit_w],1
 27776                                  	;mov	byte [cs:p_swit_w],1				;M063
 27777 00002690 EBC3                    	jmp	short do110					;M063
 27778                                  en110:
 27779                                  	; 15/12/2022
 27780                                  	; ds = cs
 27781 00002692 803E[9C1E]01            	cmp	byte [p_swit_k],1
 27782                                  	;cmp	byte [cs:p_swit_k],1	; if /k entered,
 27783 00002697 1E                      	push	ds
 27784                                  	;;mov	ax,Bios_Data
 27785                                  	;mov	ax,KERNEL_SEGMENT ; 0070h
 27786                                  	; 21/10/2022
 27787 00002698 B87000                  	mov	ax,DOSBIODATASEG ; 0070h
 27788 0000269B 8ED8                    	mov	ds,ax
 27789 0000269D 750A                    	jne	short if117
 27790 0000269F C606[E504]00            	mov	byte [keyrd_func],0 ; 4E5h ; use the conventional keyboard functions
 27791 000026A4 C606[E604]01            	mov	byte [keysts_func],1 ; 4E6h (for MSDOS 6.21 IO.SYS)
 27792                                  if117:
 27793                                  	; 15/12/2022
 27794                                  	; ds <> cs
 27795 000026A9 2EA0[9D1E]              	mov	al,[cs:p_swit_t]				;M059
 27796 000026AD A2[F204]                	mov	[t_switch],al	; 4F2h (for MSDOS 6.21 IO.SYS)	;M059
 27797                                  
 27798 000026B0 2E803E[9E1E]00          	cmp	byte [cs:p_swit_w],0				;M063
 27799 000026B6 740E                    	je	short skip_dos_flag				;M063
 27800 000026B8 06                      	push	es
 27801 000026B9 53                      	push	bx
 27802 000026BA B452                    	mov	ah,GET_IN_VARS ; 52h				;M063
 27803 000026BC CD21                    	int	21h						;M063
 27804                                  			; DOS - 2+ internal - GET LIST OF LISTS
 27805                                  			; Return: ES:BX -> DOS list of lists
 27806                                  	;or	bytes [es:86h],2
 27807 000026BE 26800E860002            	or	byte [es:DOS_FLAG_OFFSET],SUPPRESS_WINA20 ; 2	;M063
 27808 000026C4 5B                      	pop	bx
 27809 000026C5 07                      	pop	es
 27810                                  skip_dos_flag:							;M063
 27811 000026C6 1F                      	pop	ds
 27812                                  sr110:
 27813 000026C7 E92EF9                  	jmp	coff
 27814                                  
 27815                                  ; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 27816                                  ;
 27817                                  ;tryv:
 27818                                  ;
 27819                                  ;;ifdef	MULTI_CONFIG
 27820                                  ;;------------------------------------------------------------------------
 27821                                  ;; set command (as in "set var=value<cr/lf>")
 27822                                  ;;------------------------------------------------------------------------
 27823                                  ;
 27824                                  ;       cmp     ah,CONFIG_SET  ; 'V'
 27825                                  ;       jne	short tryn
 27826                                  ;       call    query_user      ; query the user if config_cmd
 27827                                  ;       jc	short tryn 	; has the CONFIG_OPTION_QUERY bit set
 27828                                  ;       call    copy_envvar     ; copy var at ES:SI to "config_wrkseg"
 27829                                  ;       jnc	short sr110	; no error
 27830                                  ;err:    
 27831                                  ;	call    error_line      ; whoops, display error in line XXX
 27832                                  ;       jmp     short sr110     ; jump to coff (to skip to next line)
 27833                                  ;
 27834                                  ;;------------------------------------------------------------------------
 27835                                  ;; numlock command (as in "numlock=on|off")
 27836                                  ;;------------------------------------------------------------------------
 27837                                  ;tryn:
 27838                                  ;       cmp     ah,CONFIG_NUMLOCK  ;'N'
 27839                                  ;       jne	short tryy            ;
 27840                                  ;       call    query_user      ; query thye user if config_cmd
 27841                                  ;       jc	short tryy	; has the CONFIG_OPTION_QUERY bit set
 27842                                  ;       call    set_numlock
 27843                                  ;       jc	short err
 27844                                  ;       jmp	short sr110	; all done
 27845                                  ;
 27846                                  ;;endif	;MULTI_CONFIG
 27847                                  
 27848                                  ; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 27849                                  ;;-------------------------------------------------------------------------
 27850                                  ;; comment= do nothing. just decrese chrptr,and increase count for correct
 27851                                  ;;		line number
 27852                                  ;;-------------------------------------------------------------------------
 27853                                  ;
 27854                                  ;tryy:
 27855                                  ;       cmp     ah,CONFIG_COMMENT ; 'Y'
 27856                                  ;	jne	short try0
 27857                                  ;donothing:
 27858                                  ;	dec	word [chrptr]
 27859                                  ;	inc	word [count]
 27860                                  ;	jmp	coff
 27861                                  ;
 27862                                  ;;------------------------------------------------------------------------
 27863                                  ;; rem command
 27864                                  ;;------------------------------------------------------------------------
 27865                                  ;
 27866                                  ;try0:				;do nothing with this line.
 27867                                  ;	cmp     ah,CONFIG_REM ; '0'
 27868                                  ;	je	short donothing
 27869                                  
 27870                                  ; 30/10/2022
 27871                                  ; (MSSOS 5.0 IO.SYS - SYSINIT:29D7h)
 27872                                  
 27873                                  ;------------------------------------------------------------------------
 27874                                  ; bogus command
 27875                                  ;------------------------------------------------------------------------
 27876                                  
 27877                                  tryz:
 27878 000026CA 80FCFF                          cmp     ah,0FFh		;null command? (BUGBUG - who sets FFh anyway?)
 27879                                  	;je	short donothing
 27880                                  	; 02/11/2022
 27881 000026CD 740A                    	je	short tryz_donothing
 27882                                  
 27883 000026CF FF0E[D603]              	dec	word [chrptr]
 27884 000026D3 FF06[D203]              	inc	word [count]
 27885 000026D7 EB26                    	jmp	short badop
 27886                                  
 27887                                  	; 02/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 27888                                  tryz_donothing:
 27889 000026D9 E95DFF                  	jmp	donothing
 27890                                  
 27891                                  ; 07/04/2019 - Retro DOS v4.0
 27892                                  
 27893                                  ;------------------------------------------------------------------------------
 27894                                  
 27895                                  ; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 27896                                  ;
 27897                                  ;
 27898                                  ;;***	CheckProtmanArena -- special hack for adjusting alloclim with Protman$
 27899                                  ;;
 27900                                  ;;	adjusts alloclim if Protman$ reduced our arena through a manual hack.
 27901                                  ;
 27902                                  ;CheckProtmanArena:
 27903                                  ;	push	es
 27904                                  ;	mov	ax,[cs:area]	; get our arena header
 27905                                  ;	dec	ax
 27906                                  ;	mov	es,ax
 27907                                  ;	add	ax,[es:3]	; find end of arena
 27908                                  ;	inc	ax
 27909                                  ;	cmp	ax,[cs:ALLOCLIM] ; is it less than alloclim?
 27910                                  ;	ja	short CheckProtmanDone
 27911                                  ;
 27912                                  ;	mov	[cs:ALLOCLIM],ax ; reduce alloclim then
 27913                                  ;CheckProtmanDone:
 27914                                  ;	pop	es
 27915                                  ;	retn
 27916                                  
 27917                                  ;------------------------------------------------------------------------------
 27918                                  
 27919                                  sysinit_parse:
 27920                                  
 27921                                  ;------------------------------------------------------------------------------
 27922                                  ;set up registers for sysparse
 27923                                  ;in)	es:si -> command line in confbot
 27924                                  ;	di -> offset of the parse control definition.
 27925                                  ;
 27926                                  ;out)	calls sysparse.
 27927                                  ;	carry will set if parse error.
 27928                                  ;	*** the caller should check the eol condition by looking at ax
 27929                                  ;	*** after each call.
 27930                                  ;	*** if no parameters are found,then ax will contain a error code.
 27931                                  ;	*** if the caller needs to look at the synomym@ of the result,
 27932                                  ;	***  the caller should use cs:@ instead of es:@.
 27933                                  ;	cx register should be set to 0 at the first time the caller calls this
 27934                                  ;	 procedure.
 27935                                  ;	ax - exit code
 27936                                  ;	bl - terminated delimeter code
 27937                                  ;	cx - new positional ordinal
 27938                                  ;	si - set to pase scanned operand
 27939                                  ;	dx - selected result buffer
 27940                                  ;------------------------------------------------------------------------------
 27941                                  
 27942                                  	; 24/10/2022
 27943 000026DC 06                      	push	es			;save es,ds
 27944 000026DD 1E                      	push	ds
 27945                                  
 27946 000026DE 06                      	push	es
 27947 000026DF 1F                      	pop	ds			;now ds:si -> command line
 27948                                  
 27949 000026E0 0E                      	push	cs
 27950 000026E1 07                      	pop	es			;now es:di -> control definition
 27951                                  
 27952 000026E2 2E8C1E[3114]            	mov	[cs:badparm_seg],ds	;save the pointer to the parm
 27953 000026E7 2E8936[2F14]            	mov	[cs:badparm_off],si	;we are about to parse for badparm msg.
 27954                                  	;mov	dx,0
 27955                                  	; 04/01/2023
 27956 000026EC 29D2                    	sub	dx,dx ; 0
 27957 000026EE E8E8ED                  	call	SysParse
 27958 000026F1 83F800                  	cmp	ax,_$P_No_Error	; 0	;no error
 27959                                  
 27960                                  ;**cas note:  when zero true after cmp, carry clear
 27961                                  
 27962                                  	;je	short ll4
 27963                                  	; 24/10/2022 (MSDOS 5.0 IO.SYS compatibility, SYSINIT:2A02h)
 27964                                  	; 12/12/2022
 27965 000026F4 7406                    	je	short en4 ; cf=0
 27966 000026F6 83F8FF                  	cmp	ax,_$P_RC_EOL ; 0FFFFh	;or the end of line?
 27967                                  	;jne	short if4
 27968                                  	; 12/12/2022
 27969 000026F9 7401                    	je	short en4 ; cf=0
 27970                                  
 27971                                  ; 12/12/2022
 27972                                  ;ll4:
 27973                                  ;	; 12/12/2022
 27974                                  ;	; cf=0
 27975                                  ;	;clc
 27976                                  ;	jmp	short en4
 27977                                  
 27978                                  if4:
 27979                                  	; 24/10/2022
 27980 000026FB F9                      	stc
 27981                                  en4:
 27982 000026FC 1F                      	pop	ds
 27983 000026FD 07                      	pop	es
 27984 000026FE C3                      	retn
 27985                                  
 27986                                  ; 11/12/2022
 27987                                  %if 0
 27988                                  
 27989                                  ;----------------------------------------------------------------------------
 27990                                  ;
 27991                                  ; procedure : badop_p
 27992                                  ;
 27993                                  ;             same thing as badop,but will make sure to set ds register back
 27994                                  ;             to sysinitseg and return back to the caller.
 27995                                  ;
 27996                                  ;----------------------------------------------------------------------------
 27997                                  
 27998                                  badop_p:
 27999                                  	push	cs
 28000                                  	pop	ds		;set ds to configsys seg.
 28001                                  	mov	dx,badopm
 28002                                  	call	print
 28003                                          ;call	error_line
 28004                                  	;retn
 28005                                  	; 11/12/2022
 28006                                  	jmp	error_line
 28007                                  
 28008                                  %endif
 28009                                  
 28010                                  ;----------------------------------------------------------------------------
 28011                                  ;
 28012                                  ; label : badop
 28013                                  ;
 28014                                  ;----------------------------------------------------------------------------
 28015                                  
 28016                                  badop:	
 28017 000026FF BA[2C37]                	mov	dx,badopm	;want to print command error "unrecognized command..."
 28018 00002702 E87A0C                  	call	print
 28019 00002705 E84200                  	call	error_line	;show "error in config.sys ..." .
 28020 00002708 E9EDF8                  	jmp	coff
 28021                                  
 28022                                  ;----------------------------------------------------------------------------
 28023                                  ;
 28024                                  ; procedure : badparm_p
 28025                                  ;
 28026                                  ;             show "bad command or parameters - xxxxxx"
 28027                                  ;             in badparm_seg,badparm_off -> xxxxx
 28028                                  ;
 28029                                  ;----------------------------------------------------------------------------
 28030                                  
 28031                                  	; 24/10/2022
 28032                                  badparm_p:
 28033                                  	; 11/12/2022
 28034                                  	; ds = cs
 28035                                  	; 11/12/2022
 28036                                  	;push	ds ; *
 28037 0000270B 52                      	push	dx
 28038 0000270C 56                      	push	si
 28039                                  
 28040                                  	; 11/12/2022
 28041                                  	; ds = cs
 28042                                  	;push	cs
 28043                                  	;pop	ds
 28044                                  
 28045 0000270D BA[5337]                	mov	dx,badparm
 28046 00002710 E86C0C                  	call	print			; "bad command or parameters - "
 28047 00002713 C536[2F14]              	lds	si,[badparm_ptr]
 28048                                  
 28049                                  ;	print "xxxx" until cr.
 28050                                  
 28051                                  do1:
 28052 00002717 8A14                    	mov	dl,[si]			; get next character
 28053 00002719 80FA0D                  	cmp	dl,cr ; 0Dh		; is a carriage return?
 28054 0000271C 7407                    	je	short en1		; exit loop if so
 28055                                  
 28056 0000271E B402                    	mov	ah,2 ; STD_CON_OUTPUT	; function 2
 28057 00002720 CD21                    	int	21h			; display character
 28058 00002722 46                      	inc	si			; next character
 28059 00002723 EBF2                    	jmp	short do1
 28060                                  en1:
 28061 00002725 0E                      	push	cs
 28062 00002726 1F                      	pop	ds
 28063                                  
 28064 00002727 BA[5037]                	mov	dx,crlfm
 28065 0000272A E8520C                  	call	print
 28066 0000272D E81A00                  	call	error_line
 28067                                  
 28068 00002730 5E                      	pop	si
 28069 00002731 5A                      	pop	dx
 28070                                  	; 11/12/2022
 28071                                  	;pop	ds ; *
 28072                                  badparmp_ret:
 28073 00002732 C3                      	retn
 28074                                  
 28075                                  ;----------------------------------------------------------------------------
 28076                                  ;
 28077                                  ; procedure : getchr
 28078                                  ;
 28079                                  ;----------------------------------------------------------------------------
 28080                                  
 28081                                  	; 24/10/2022
 28082                                  getchr:
 28083                                  	; 12/12/2022
 28084                                  	;push	cx
 28085                                  	;mov	cx,[count]
 28086                                  	;jcxz	nochar
 28087                                  	; 12/12/2022
 28088 00002733 833E[D203]01            	cmp	word [count],1 
 28089 00002738 720F                    	jb	short nochar ; cf=1 ([count] = 0)
 28090                                  	
 28091 0000273A 8B36[D603]              	mov	si,[chrptr]
 28092 0000273E 268A04                  	mov	al,[es:si]
 28093 00002741 FF0E[D203]              	dec	word [count]
 28094 00002745 FF06[D603]              	inc	word [chrptr]
 28095                                  	; 12/12/202
 28096                                  	; cf=0
 28097                                  	;clc
 28098                                  ;get_ret:
 28099                                  	;pop	cx
 28100                                  	;retn
 28101                                  nochar: 
 28102                                  	; 12/12/2022
 28103                                  	; cf=1
 28104                                  	;stc
 28105                                  	;jmp	short get_ret
 28106                                  	
 28107 00002749 C3                      	retn
 28108                                  
 28109                                  ; 11/12/2022
 28110                                  %if 0
 28111                                  
 28112                                  ;----------------------------------------------------------------------------
 28113                                  ;
 28114                                  ; procedure : incorrect_order
 28115                                  ;
 28116                                  ;             show "incorrect order in config.sys ..." message.
 28117                                  ;
 28118                                  ;----------------------------------------------------------------------------
 28119                                  
 28120                                  incorrect_order:
 28121                                  	mov	dx,badorder
 28122                                  	call	print
 28123                                  	call	showlinenum
 28124                                  	retn
 28125                                  
 28126                                  %endif
 28127                                  
 28128                                  ;----------------------------------------------------------------------------
 28129                                  ;
 28130                                  ; procedure : error_line
 28131                                  ;
 28132                                  ;             show "error in config.sys ..." message.
 28133                                  ;
 28134                                  ;----------------------------------------------------------------------------
 28135                                  
 28136                                  	; 11/12/2022
 28137                                  	; 24/10/2022
 28138                                  error_line:
 28139                                  	; 11/12/2022
 28140                                  	; ds = cs
 28141                                  	;push	cs
 28142                                  	;pop	ds
 28143                                  
 28144 0000274A BA[8838]                	mov	dx,errorcmd
 28145 0000274D E82F0C                  	call	print
 28146                                  	;call	showlinenum
 28147                                  	;retn
 28148                                  	; 11/12/2022
 28149                                  	;jmp	short shortlinemum
 28150                                  
 28151                                  ;----------------------------------------------------------------------------
 28152                                  ;
 28153                                  ; procedure : showlinenum
 28154                                  ;
 28155                                  ; convert the binary linecount to decimal ascii string in showcount
 28156                                  ; and display showcount at the current curser position.
 28157                                  ; in.) linecount
 28158                                  ;
 28159                                  ; out) the number is printed.
 28160                                  ;
 28161                                  ;----------------------------------------------------------------------------
 28162                                  
 28163                                  	; 11/12/2022
 28164                                  	; ds = cs
 28165                                  	; 24/10/2022
 28166                                  showlinenum:
 28167 00002750 06                      	push	es
 28168                                  	; 11/12/2022
 28169                                  	;push	ds
 28170 00002751 57                      	push	di
 28171                                  
 28172 00002752 0E                      	push	cs
 28173 00002753 07                      	pop	es		; es=cs
 28174                                  
 28175                                  	; 11/12/2022
 28176                                  	;push	cs
 28177                                  	;pop	ds
 28178                                  
 28179 00002754 BF[3103]                	mov	di,showcount+4	; di -> the least significant decimal field.
 28180 00002757 B90A00                  	mov	cx,10		; decimal divide factor
 28181                                  	;mov	ax,[cs:linecount]
 28182                                  	; 11/12/2022
 28183 0000275A A1[2B03]                	mov	ax,[linecount]
 28184                                  sln_loop:
 28185                                  	; 11/12/2022
 28186 0000275D 39C8                    	cmp	ax,cx ; < 10 ?
 28187                                  	;cmp	ax,10		; < 10?
 28188 0000275F 720C                    	jb	short sln_last
 28189                                  
 28190 00002761 31D2                    	xor	dx,dx
 28191 00002763 F7F1                    	div	cx	; cx = 10
 28192 00002765 80CA30                  	or	dl,30h		; add "0" (= 30h) to make it an ascii.
 28193 00002768 8815                    	mov	[di],dl
 28194 0000276A 4F                      	dec	di
 28195 0000276B EBF0                    	jmp	short sln_loop
 28196                                  
 28197                                  sln_last:
 28198 0000276D 0C30                    	or	al,30h	; "0"
 28199 0000276F 8805                    	mov	[di],al
 28200 00002771 89FA                    	mov	dx,di
 28201 00002773 E8090C                  	call	print		; show it.
 28202 00002776 5F                      	pop	di
 28203                                  	; 11/12/2022
 28204                                  	;pop	ds
 28205 00002777 07                      	pop	es
 28206 00002778 C3                      	retn
 28207                                  
 28208                                  ; 07/04/2019 - Retro DOS v4.0
 28209                                  ; (MSDOS 6.21 IO.SYS, SYSINIT:2E44h)
 28210                                  
 28211                                  ;----------------------------------------------------------------------------
 28212                                  ;
 28213                                  ; procedure : ProcDOS
 28214                                  ;
 28215                                  ;	Process the result of DOS= parsing
 28216                                  ;
 28217                                  ;	result_val._$P_item_tag	= 1 for DOS=HIGH
 28218                                  ;				= 2 for DOS=LOW
 28219                                  ;				= 3 for DOS=UMB
 28220                                  ;				= 4 for DOS=NOUMB
 28221                                  ;----------------------------------------------------------------------------
 28222                                  
 28223                                  	; 01/11/2022 - Retro DOS v4.0 (Modififed MSDOS 5.0 IO.SYS)
 28224                                  	; (SYTSINIT:2AB5h)
 28225                                  ProcDOS:
 28226                                  	; 01/01/2023
 28227                                  	; ds = cs
 28228 00002779 30E4                    	xor	ah,ah
 28229                                  	;;mov	al,[cs:result_val_itag]
 28230                                  	;mov	al,[cs:result_val+_$P_Result_Blk.Item_Tag]
 28231                                  	; 04/01/2023
 28232 0000277B A0[491D]                	mov	al,[result_val+_$P_Result_Blk.Item_Tag]
 28233 0000277E 48                      	dec	ax
 28234 0000277F 7415                    	jz	short pd_hi
 28235 00002781 48                      	dec	ax
 28236 00002782 740E                    	jz	short pd_lo
 28237 00002784 48                      	dec	ax
 28238 00002785 7405                    	jz	short pd_umb
 28239                                  	;;mov	byte [cs:DevUMB],0
 28240                                  	; 18/12/2022
 28241                                  	;mov	byte [cs:DevUMB],ah ; 0
 28242                                  	; 01/01/2023
 28243 00002787 8826[F01E]              	mov	byte [DevUMB],ah ; 0
 28244 0000278B C3                      	retn
 28245                                  pd_umb:
 28246                                  	; 04/01/2023
 28247 0000278C C606[F01E]FF            	mov	byte [DevUMB],0FFh
 28248                                  	;mov	byte [cs:DevUMB],0FFh
 28249 00002791 C3                      	retn
 28250                                  pd_lo:
 28251                                  	; 04/01/2023
 28252 00002792 A2[6A02]                	mov	[runhigh],al ; 0
 28253                                  	; 18/12/2022
 28254                                  	;mov	[cs:runhigh],al ; 0
 28255                                  	;;mov	byte [cs:runhigh],0
 28256 00002795 C3                      	retn
 28257                                  pd_hi:
 28258                                  	; 04/01/2023
 28259 00002796 C606[6A02]FF            	mov	byte [runhigh],0FFh
 28260                                  	;mov	byte [cs:runhigh],0FFh
 28261                                  limx:	; 11/12/2022
 28262 0000279B C3                      	retn
 28263                                  
 28264                                  ;----------------------------------------------------------------------------
 28265                                  ;
 28266                                  ; procedure : LieInt12Mem
 28267                                  ;
 28268                                  ;	Input : DevEntry points to Device Start address (offset == 0)
 28269                                  ;		alloclim set to the limit of low memory.
 28270                                  ;
 28271                                  ;	Output : none
 28272                                  ;
 28273                                  ;	Changes the ROM BIOS variable which stores the total low memory
 28274                                  ;	If a 3com device driver (any character device with name 'PROTMAN$')
 28275                                  ;	is being loaded alloclim is converted into Ks and stored in 40:13h
 28276                                  ;	Else if a device driver being loaded into UMB the DevLoadEnd is
 28277                                  ;	converted into Ks and stored in 40:13h
 28278                                  ;
 28279                                  ;----------------------------------------------------------------------------
 28280                                  
 28281                                  LieInt12Mem:
 28282                                  	; 11/12/2022
 28283                                  	; ds = cs
 28284 0000279C A1[A302]                	mov	ax,[ALLOCLIM]
 28285                                  	;mov	ax,[cs:ALLOCLIM]	; lie INT 12 as alloclim
 28286                                  					; assuming that it is 3Com
 28287 0000279F E84400                  	call	IsIt3Com		; Is it 3Com driver?
 28288 000027A2 740A                    	jz	short lim_set		; yes, lie to him differently
 28289                                  	; 13/05/2019
 28290                                  	;cmp	byte [cs:DeviceHi],0	; Is the DD being loaded in UMB
 28291                                  	;je	short limx		; no, don't lie
 28292                                  	;mov	ax,[cs:DevLoadEnd]	; lie INT 12 as end of UMB
 28293                                  	; 11/12/2022
 28294                                  	; ds = cs
 28295 000027A4 803E[FF1E]00            	cmp	byte [DeviceHi],0
 28296 000027A9 74F0                    	je	short limx
 28297 000027AB A1[E61E]                	mov	ax,[DevLoadEnd]
 28298                                  lim_set:
 28299                                  	; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 28300                                  	; 11/12/2022
 28301                                  	;call	SetInt12Mem
 28302                                  ;limx:
 28303                                  	;retn
 28304                                  	
 28305                                  	;jmp	short SetInt12Mem 
 28306                                  
 28307                                  ;----------------------------------------------------------------------------
 28308                                  ;
 28309                                  ; procedure : SetInt12Mem
 28310                                  ;
 28311                                  ;	Input : AX = Memory size to be set (in paras)
 28312                                  ;	Output : none
 28313                                  ;
 28314                                  ;	Sets the variable 40:13 to the memory size passed in AX
 28315                                  ;	It saves the old value in 40:13 in OldInt12Mem,
 28316                                  ;	It also sets a flag Int12Lied to 0ffh, which is checked before
 28317                                  ;	restoring the value of 40:13
 28318                                  ;
 28319                                  ;----------------------------------------------------------------------------
 28320                                  
 28321                                  	; 01/11/2022
 28322                                  SetInt12Mem:
 28323 000027AE 1E                      	push	ds
 28324 000027AF BB4000                  	mov	bx,40h
 28325 000027B2 8EDB                    	mov	ds,bx			; ROM BIOS Data Segment
 28326 000027B4 8B1E1300                	mov	bx,[13h]		; INT 12 memory variable
 28327 000027B8 2E891E[031F]            	mov	[cs:OldInt12Mem],bx	; save it
 28328 000027BD B106                    	mov	cl,6
 28329 000027BF D3E8                    	shr	ax,cl			; convert paras into Ks
 28330 000027C1 A31300                  	mov	[13h],ax		; Lie
 28331 000027C4 2EC606[021F]FF          	mov	byte [cs:Int12Lied],0FFh ; mark that we are lying
 28332 000027CA 1F                      	pop	ds
 28333                                  ;limx:
 28334 000027CB C3                      	retn
 28335                                  
 28336                                  ;----------------------------------------------------------------------------
 28337                                  ;
 28338                                  ; procedure : TrueInt12Mem
 28339                                  ;
 28340                                  ;	Input : Int12Lied = 0 if we are not lying currently
 28341                                  ;			  = 0ffh if we are lying
 28342                                  ;		OldInt12Mem = Saved value of 40:13h
 28343                                  ;
 28344                                  ;	Output : none
 28345                                  ;
 28346                                  ;	Resets the INT 12 Memory variable if we were lying about int 12
 28347                                  ;	and resets the flag which indicates that we were lying
 28348                                  ;
 28349                                  ;----------------------------------------------------------------------------
 28350                                  
 28351                                  TrueInt12Mem:
 28352                                  	; 11/12/2022
 28353                                  	; ds = cs
 28354 000027CC 803E[021F]00            	cmp	byte [Int12Lied],0
 28355                                  	;cmp	byte [cs:Int12Lied],0	; were we lying so far?
 28356                                  	; 01/11/2022 (MSDOS 5.0 IO.SYS, SYS.INIT:2B1Dh)
 28357                                  	;mov	byte [cs:Int12Lied],0	; reset it anyway
 28358 000027D1 7412                    	je	short timx		; no, we weren't
 28359                                  	; 18/12/2022
 28360 000027D3 B84000                  	mov	ax,40h
 28361 000027D6 8826[021F]              	mov	[Int12Lied],ah ; 0
 28362                                  	;mov	byte [Int12Lied],0
 28363                                  	;mov	byte [cs:Int12Lied],0
 28364 000027DA 1E                      	push	ds
 28365                                  	;mov	ax,40h
 28366 000027DB 8ED8                    	mov	ds,ax
 28367 000027DD 2EA1[031F]              	mov	ax,[cs:OldInt12Mem]
 28368 000027E1 A31300                  	mov	[13h],ax		; restore INT 12 memory
 28369 000027E4 1F                      	pop	ds
 28370                                  timx:
 28371 000027E5 C3                      	retn
 28372                                  
 28373                                  ;----------------------------------------------------------------------------
 28374                                  ;
 28375                                  ; procedure : IsIt3Com?
 28376                                  ;
 28377                                  ;	Input : DevEntry = Seg:0 of device driver
 28378                                  ;	Output : Zero flag set if device name is 'PROTMAN$'
 28379                                  ;		 else Zero flag is reset
 28380                                  ;
 28381                                  ;----------------------------------------------------------------------------
 28382                                  
 28383                                  IsIt3Com:
 28384                                  	; 11/12/2022
 28385                                  	; ds = cs
 28386 000027E6 1E                      	push	ds
 28387 000027E7 06                      	push	es
 28388 000027E8 56                      	push	si
 28389                                  	; 11/12/2022
 28390 000027E9 C536[E81E]              	lds	si,[DevEntry]
 28391                                  	;lds	si,[cs:DevEntry]	; ptr to device header
 28392 000027ED 83C60A                  	add	si,SYSDEV.NAME ; 10 	; ptr device name
 28393 000027F0 0E                      	push	cs
 28394 000027F1 07                      	pop	es
 28395 000027F2 BF[051F]                	mov	di,ThreeComName
 28396 000027F5 B90800                  	mov	cx,8			; name length
 28397 000027F8 F3A6                    	rep	cmpsb
 28398 000027FA 5E                      	pop	si
 28399 000027FB 07                      	pop	es
 28400 000027FC 1F                      	pop	ds
 28401 000027FD C3                      	retn
 28402                                  
 28403                                  ;M020 : BEGIN
 28404                                  ;----------------------------------------------------------------------------
 28405                                  
 28406                                  UpdatePDB:
 28407 000027FE 1E                      	push	ds
 28408 000027FF B462                    	mov	ah,62h
 28409 00002801 CD21                    	int	21h	; DOS - 3+ - GET PSP ADDRESS
 28410 00002803 8EDB                    	mov	ds,bx
 28411 00002805 2E8B1E[A302]            	mov	bx,[cs:ALLOCLIM]
 28412                                  	;mov	[2],bx
 28413 0000280A 891E0200                	mov	[PDB.BLOCK_LEN],bx
 28414 0000280E 1F                      	pop	ds
 28415 0000280F C3                      	retn
 28416                                  
 28417                                  ; M020 : END
 28418                                  
 28419                                  ;----------------------------------------------------------------------------
 28420                                  
 28421                                  ; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 28422                                  
 28423                                  %if 0
 28424                                  
 28425                                  ;include highload.inc	; Routines for devicehigh parsing, control of HIDDEN
 28426                                  ;include highexit.inc	; umb's, etc
 28427                                  
 28428                                  ; ----------------------------------------------------------------------
 28429                                  ; HIGHLOAD.INC (MSDOS 6.0 - 1991) 	
 28430                                  ; ----------------------------------------------------------------------
 28431                                  ; 07/04/2019 - Retro DOS v4.0
 28432                                  
 28433                                  ;******************************************************************************
 28434                                  ;
 28435                                  ; This file contains routines needed to parse and implement user-given
 28436                                  ; command-line options of the form "/S/L:3,0x500;2;7,127;0x0BE4". InitVar()
 28437                                  ; and Parsevar() are used to parse this data and place it in encoded form into
 28438                                  ; the variables in highvar.inc, for use by the rest of the routines.
 28439                                  ;
 28440                                  ; DeviceHigh accepts this command-line (handled in sysconf.asm, not here):
 28441                                  ;    DEVICEHIGH SIZE=hhhhhh module opts
 28442                                  ; Or, DeviceHigh and LoadHigh accept any of the following:
 28443                                  ;    DH/LH module opts
 28444                                  ;    DH/LH [/S][/L:umb[,size][;umb[,size]]*] module opts
 28445                                  ;    DH/LH [/L:umb[,size][;umb[,size]]*][/S] module opts
 28446                                  ; The initial UMB,SIZE pair designates the module's load address; the remainder
 28447                                  ; of the UMB and SIZE pairs are used to indicate specific UMBs to be left
 28448                                  ; available during the load.
 28449                                  ;
 28450                                  ; When an actual load is ready to be performed, a call to HideUMBs() will
 28451                                  ; temporarily allocate (as owner 8+"HIDDEN  ") all free elements in any
 28452                                  ; upper-memory block which was not specified by the user... in addition, if
 28453                                  ; UMBs were marked to shrink (/S option) to a certain size ("umb,size"), any
 28454                                  ; elements in that umb SAVE the lower-half of the newly-shrunken one are also
 28455                                  ; allocated.  After the load, the function UnHideUMBs() (in highexit.inc) will
 28456                                  ; free any UMBs so allocated.
 28457                                  ;
 28458                                  ; When a device driver loads, there is the additional problem of allocating its
 28459                                  ; initial load site; this should be restricted to the first UMB specified on
 28460                                  ; the command-line. The function FreezeUM temporarily allocates all remaining
 28461                                  ; free upper-memory elements (as owner 8+"FROZEN  "), except those in the load
 28462                                  ; UMB. Then the initial allocation may be made, and a call to UnFreeze will
 28463                                  ; return any so-allocated memory elements to FREE, for the true load. Note
 28464                                  ; that UnFreeze leaves HIDDEN elements allocated; it only frees FROZEN ones.
 28465                                  ;
 28466                                  ;******************************************************************************
 28467                                  
 28468                                  SWTCH	equ	'/'		; Switch character
 28469                                  
 28470                                  DOS_CHECK_STRATEGY  equ	5800h	; Int 21h, Func 58h, Svc 0 = check alloc strat
 28471                                  DOS_SET_STRATEGY    equ	5801h	; Int 21h, Func 58h, Svc 1 = set alloc strategy
 28472                                  DOS_CHECK_UMBLINK   equ	5802h	; Int 21h, Func 58h, Svc 2 = check link state
 28473                                  DOS_GET_UMBLINK	    equ 5802h ; 20/04/2019
 28474                                  DOS_SET_UMBLINK     equ	5803h	; Int 21h, Func 58h, Svc 3 = set link state
 28475                                  DOS_GET_DOS_LISTS   equ	  52h	; Int 21h, Func 52h = return list of lists
 28476                                  DOS_UMB_HEAD        equ	  8Ch	; Offset from ES (after func52h) to get UMBHead
 28477                                  
 28478                                  CR	equ	0Dh		; Carriage Return
 28479                                  LF	equ	0Ah		; Line Feed
 28480                                  TAB	equ	09h		; Tab character (^I)
 28481                                  
 28482                                  ; -----------------------------------------------------------------------------
 28483                                  ;*** InitVar - initializes all the variables used in ParseVar and HideUMBs
 28484                                  ; -----------------------------------------------------------------------------
 28485                                  ; ENTRY:       None
 28486                                  ; EXIT:        Variables listed in highvar.inc are initialized
 28487                                  ; ERROR EXIT:  None
 28488                                  ; USES:        Flags, variables in highvar.inc
 28489                                  ; -----------------------------------------------------------------------------
 28490                                  ; Note that element 0 references UMB 0 (conventional), not UMB 1.  Its contents
 28491                                  ; are largely ignored, but it is initialized nonetheless.
 28492                                  ; -----------------------------------------------------------------------------
 28493                                  
 28494                                  InitVar:
 28495                                  	;pushreg <ax, cx, di, es>
 28496                                  	push	ax
 28497                                  	push	cx
 28498                                  	push	di
 28499                                  	push	es
 28500                                  
 28501                                  	;dataseg es			;Point ES into appropriate data segment
 28502                                  	push	cs
 28503                                  	pop	es
 28504                                  
 28505                                  	xor	ax,ax
 28506                                  	mov	[es:fUmbTiny],al	;Shrink UMBs? (made 1 if /S given)
 28507                                  	mov	[es:fInHigh],al		;Set to 1 when DH/LH has been called
 28508                                  	mov	[es:SegLoad],ax		;Load Address (seg), used for DH only
 28509                                  	mov	byte [es:UmbLoad],UNSPECIFIED ; 0FFh
 28510                                  					;Later is the # of the 1st spec'd UMB
 28511                                  	mov	[es:fm_argc], al	;Start with zero args having been read
 28512                                  
 28513                                  	cld
 28514                                  
 28515                                  	mov	cx,MAXUMB ; 16		;For each entry
 28516                                  	mov	di,UmbUsed		;on the UmbUsed array,
 28517                                  	rep	stosb			;	Store 0
 28518                                  
 28519                                  	mov	cx,MAXUMB ; 16		;Okay... for each entry
 28520                                  	mov	di,UmbSize		;on the UmbSize array,
 28521                                  	rep	stosw			;	Store 0
 28522                                  
 28523                                  	;normseg es			; Return ES
 28524                                  
 28525                                  	;popreg	<es, di, cx, ax>
 28526                                  	pop	es
 28527                                  	pop	di
 28528                                  	pop	cx
 28529                                  	pop	ax	 	
 28530                                  
 28531                                  	retn
 28532                                  
 28533                                  ; -----------------------------------------------------------------------------
 28534                                  ;*** FixMem - scans the upper memory chain and concatenates adjacent free MCBs
 28535                                  ; -----------------------------------------------------------------------------
 28536                                  ; ENTRY   : None
 28537                                  ; EXIT    : None
 28538                                  ; ERROR   : None
 28539                                  ; USES    : Flags, fm_umb, fm_strat
 28540                                  ; -----------------------------------------------------------------------------
 28541                                  
 28542                                  FixMem:
 28543                                  	push	ax
 28544                                  	push	bx
 28545                                  	push	cx
 28546                                  	push	dx
 28547                                  	push	es
 28548                                  
 28549                                  	call	fm_link		; Link in UMBs
 28550                                  
 28551                                  	call	UmbHead		; Get first upper-memory MCB address (0x9FFF)
 28552                                  	jc	short fmX	; (if couldn't get it, leave now).
 28553                                  
 28554                                  	mov	es,ax		; It returns in AX, so move it to ES.
 28555                                  
 28556                                  ; - Walk MCB Chain ------------------------------------------------------------
 28557                                  
 28558                                  	xor	dx,dx		; We're keeping the address of the last MCB
 28559                                  	mov 	cx,dx		; in CX... and the last owner
 28560                                  	inc	dx		; in dx as we go through the loop:
 28561                                  
 28562                                  ; ------------------------------------------
 28563                                  ; FM10--DX  = last MCB's owner's PSP address
 28564                                  ;       CX  = last MCB's address (segment)
 28565                                  ; ------------------------------------------
 28566                                  
 28567                                  fm10:	mov	al,[es:ARENA.SIGNATURE] ; if 'Z', don't repeat loop
 28568                                  	mov	bx,[es:ARENA.OWNER]	; if not zero, do nothing
 28569                                  	or	bx,dx			; dx was owner of previous MCB
 28570                                  	jnz	short fm30		; If not both zero, don't cat.
 28571                                  
 28572                                  	; - Coalesce memory blocks at ES:00 and CX:00 -------------------------
 28573                                  
 28574                                  fm20:	mov	bx,[es:ARENA.SIZE]	; Grab this block's Size,
 28575                                  	mov	es,cx			; Go back to prev MCB's address
 28576                                  	mov	[es:ARENA.SIGNATURE],al ; & move the SECOND sig here
 28577                                  
 28578                                  	add	bx,[es:ARENA.SIZE]	; Size += first MCB's size
 28579                                  	add	bx,1			; And add one for the header
 28580                                  	mov	[es:ARENA.SIZE],bx	; Write the size
 28581                                  
 28582                                  	; ---------------------------------------------------------------------
 28583                                  
 28584                                  fm30:	mov	cx,es			; Put this address on the stack
 28585                                  	mov	dx,[es:ARENA.OWNER]	; And remember its owner
 28586                                  
 28587                                  	mov	bx,es			; Move to the next MCB
 28588                                  	add	bx,[es:ARENA.SIZE]
 28589                                  	inc	bx
 28590                                  	mov	es,bx
 28591                                  
 28592                                  	;cmp	al,'Z'
 28593                                  	cmp	al,arena_signature_end
 28594                                  	jne	short fm10		; If signature != 'Z', there are more.
 28595                                  fmX:	
 28596                                  	call	fm_unlink		; Unlink UMBs
 28597                                  
 28598                                  	pop	es
 28599                                  	pop	dx
 28600                                  	pop	cx
 28601                                  	pop	bx
 28602                                  	pop	ax
 28603                                  
 28604                                  	retn
 28605                                  
 28606                                  ; -----------------------------------------------------------------------------
 28607                                  ;*** fm_link - links UMBs not already linked in
 28608                                  ; -----------------------------------------------------------------------------
 28609                                  ; ENTRY:    None
 28610                                  ; EXIT:     fm_umb == 0 if not linked in previously, 1 if already linked in
 28611                                  ; ERROR:    None
 28612                                  ; USES:     AX, BX, fm_umb
 28613                                  ; -----------------------------------------------------------------------------
 28614                                  
 28615                                  fm_link:
 28616                                  	mov	ax,DOS_CHECK_UMBLINK ; 5802h
 28617                                  	int	21h			; Current link-state is now in al
 28618                                  
 28619                                  	;putdata fm_umb,al		; So store it in fm_umb for later
 28620                                  	;
 28621                                  	;push	es
 28622                                  	;push	cs
 28623                                  	;pop	es
 28624                                  	;mov	[es:fm_umb],al
 28625                                  	;pop	es
 28626                                  	
 28627                                  	mov	[cs:fm_umb],al
 28628                                  
 28629                                  	mov	ax,DOS_SET_UMBLINK ; 5803h
 28630                                  	mov	bx,1
 28631                                  	int	21h
 28632                                  	retn
 28633                                  
 28634                                  ; -----------------------------------------------------------------------------
 28635                                  ;*** fm_unlink - unlinks UMBs if fm_umb is set to 0
 28636                                  ; -----------------------------------------------------------------------------
 28637                                  ; ENTRY:    fm_umb == 1 : leave linked, else unlink
 28638                                  ; EXIT:     None
 28639                                  ; ERROR:    None
 28640                                  ; USES:     AX, BX
 28641                                  ; -----------------------------------------------------------------------------
 28642                                  
 28643                                  fm_unlink:
 28644                                  	xor	bx,bx
 28645                                  	
 28646                                  	;getdata bl,fm_umb		; fm_umb already has the old link-state
 28647                                  	;
 28648                                  	;push	ds
 28649                                  	;push	cs
 28650                                  	;pop	ds
 28651                                  	;mov	bl,[fm_umb]	
 28652                                  	;pop	ds
 28653                                  	
 28654                                  	mov	bl,[cs:fm_umb]
 28655                                  
 28656                                  	mov	ax,DOS_SET_UMBLINK ; 5803h
 28657                                  	int	21h			; so just use that, and call int 21h
 28658                                  	retn
 28659                                  
 28660                                  ; 08/04/2019 - Retro DOS v4.0
 28661                                  
 28662                                  ; -----------------------------------------------------------------------------
 28663                                  ;*** ParseVar - parses [/S][/L:umb[,size][;umb[,size]]*] and builds the table
 28664                                  ; laid out in highvar.inc
 28665                                  ; -----------------------------------------------------------------------------
 28666                                  ; ENTRY:    ES:SI points to command tail of LoadHigh/DeviceHigh (whitespace ok)
 28667                                  ; EXIT:     ES:SI points to first character in child program name
 28668                                  ; ERROR:    ES:SI points to character which caused error, carry set, AX == code
 28669                                  ; USES:     ES:SI, AX, flags, variables in highvar.inc
 28670                                  ; -----------------------------------------------------------------------------
 28671                                  ; Error codes (in AX if carry set on return):
 28672                                  ;
 28673                                  PV_InvArg	equ	1	; Invalid argument passed
 28674                                  PV_BadUMB	equ	2	; Bad UMB number passed (duplicate?)
 28675                                  PV_InvSwt	equ	3	; Unrecognized switch passed
 28676                                  ;
 28677                                  ; This routine exects ES:SI to point to a string much like the following:
 28678                                  ;    "/S/L:1,200;2 module options"
 28679                                  ; Optionally, the string can begin with whitespace; neither /S nor /L is
 28680                                  ; required, though that's what this routine is supposed to parse.
 28681                                  ;
 28682                                  optS		equ	'S'	; /S
 28683                                  optL		equ	'L'	; /L:...
 28684                                  ;
 28685                                  ; -----------------------------------------------------------------------------
 28686                                  ; LoadHigh has a list of arguments, returned by cparse, which is used to create
 28687                                  ; a command-line for spawning a child process. For a typical LH command, say,
 28688                                  ;     lh /l:1,1000;2 print/d:lpt2
 28689                                  ; the arguments would look like (one per line):
 28690                                  ;     lh
 28691                                  ;     /l
 28692                                  ;     1
 28693                                  ;     1000
 28694                                  ;     2
 28695                                  ;     print
 28696                                  ;     /d
 28697                                  ;     :lpt2
 28698                                  ; In short, if "print" were, say, "43", there'd be no way to determine which
 28699                                  ; arg was the filename. So, inside this routine, we keep a running counter
 28700                                  ; of the number of arguments LH will need to skip in order to get to the
 28701                                  ; program name. The "lh" is implicit--it'll always have to skip that. So if
 28702                                  ; there's no "/l" or "/s", fm_argc will be 0 ... other than that, 1 is added
 28703                                  ; for:
 28704                                  ;    Each /L
 28705                                  ;    Each /S (there should be only one)
 28706                                  ;    Each UMB number (they follow ":" or ";")
 28707                                  ;    Each UMB size   (they follow ",")
 28708                                  ; So, in the above example, fm_argc would be 4-- and LH would skip right to
 28709                                  ; "print".  Note that InitVar initializes fm_argc to zero.
 28710                                  ; -----------------------------------------------------------------------------
 28711                                  
 28712                                  ParseVar:
 28713                                  	;pushreg <di, ds, es>
 28714                                  	push	di
 28715                                  	push	ds
 28716                                  	push	es
 28717                                  
 28718                                  	push	es		; Make DS:SI point to it, as well as ES:SI
 28719                                  	pop	ds		; (regardless if we're in devhigh or loadhigh)
 28720                                  	cld
 28721                                  
 28722                                  ; ------------------------------------------------
 28723                                  ; PV10--ES:SI = any whitespace on the command-line
 28724                                  ; ------------------------------------------------
 28725                                  
 28726                                  pv10:	lodsb			; here, ES:SI=="  /L..."--must eat whitespace
 28727                                  	call	isWhite
 28728                                  	jz	short pv10	;       ES:SI==" /L..."--keep eating.
 28729                                  	;cmp	al,'/'
 28730                                  	cmp	al,SWTCH
 28731                                  	je	short pv20	;       ES:SI=="/L..."--go process a switch
 28732                                  
 28733                                  	dec	si		; Backup--it's now "odule options", and we need
 28734                                  	clc			; that "m" we just read (or whatever it is).
 28735                                  	jmp	short pvX	; Then return with carry clear == we're done.
 28736                                  
 28737                                  pv20:	lodsb			; Just read 'S' or 'L', hopefully
 28738                                  	;toUpper al		; So we make it upper-case, and...
 28739                                  	and	al,0DFh
 28740                                  	;cmp	al,'S'
 28741                                  	cmp	al,optS		; just read 'S'?
 28742                                  	jne	short pv30
 28743                                  
 28744                                  	;call	incArgc		; If it's /S, it's another arg for LH to skip.
 28745                                  	inc	byte [cs:fm_argc] ; 19/04/2019
 28746                                  
 28747                                  	;putdata fUmbTiny,1	; /S, so ES:SI=="  /L..." or " module opts", or
 28748                                  	;
 28749                                  	;push	es
 28750                                  	;push	cs
 28751                                  	;pop	es
 28752                                  	;mov	[es:fUmbTiny],1	
 28753                                  	;pop	es
 28754                                  
 28755                                  	mov	byte [cs:fUmbTiny],1
 28756                                  
 28757                                  	jmp	short pv10	; possibly even "/L...".
 28758                                  
 28759                                  pv30:	;cmp	al,'L'
 28760                                  	cmp	al,optL		; If it's not 'L' either, then 'tis a bad
 28761                                  	jne	short pvE1		; switch!
 28762                                  
 28763                                  	;call	incArgc		; If it's /L, it's another arg for LH to skip.
 28764                                  	inc	byte [cs:fm_argc] ; 19/04/2019
 28765                                  
 28766                                  	call	parseL
 28767                                  	jnc	short pv10	; If no carry, go back and look for more
 28768                                  
 28769                                  	dec	si		; Else, back up and exit.
 28770                                  	jmp	short pvErr	; AX has already been set by parseL
 28771                                  
 28772                                  pvE1:	;mov	ax,3
 28773                                  	mov	ax,PV_InvSwt	; Unrecognized switch passed
 28774                                  pvErr:	dec	si
 28775                                  	dec	si
 28776                                  	stc
 28777                                  pvX:	;popreg	<es, ds, di>
 28778                                  	pop	es
 28779                                  	pop	ds
 28780                                  	pop	di
 28781                                  	retn
 28782                                  
 28783                                  ; -----------------------------------------------------------------------------
 28784                                  ;*** parseL - parses ":nnnn[,nnnn][;nnnn[,nnnn]]*" for ParseVar
 28785                                  ; -----------------------------------------------------------------------------
 28786                                  ; ENTRY:    ES:SI points to colon
 28787                                  ; EXIT:     ES:SI points to first character not parsed
 28788                                  ; ERROR:    Carry set; rewind three characters and return (see ParseVar)
 28789                                  ; USES:     ES:SI, flags, AX, CX, DX, variables in highvar.inc
 28790                                  ; -----------------------------------------------------------------------------
 28791                                  ; If the string here is terminated with anything other than whitespace or a
 28792                                  ; switchchar (perhaps it's /S or another /L:... ), then we return with carry
 28793                                  ; set, indicating that they've screwed up the syntax.  The 3-character rewind
 28794                                  ; makes sure the app /L: is reported as being the culprit.
 28795                                  ; -----------------------------------------------------------------------------
 28796                                  
 28797                                  parseL:
 28798                                  	lodsb
 28799                                  	cmp	al,':'		; Make sure they did /L:
 28800                                  	jne	short plE1	; If they didn't, return with carry set.
 28801                                  
 28802                                  ; ------------------------------------------
 28803                                  ; PL10--ES:SI = a UMB number, after /L: or ;
 28804                                  ; ------------------------------------------
 28805                                  
 28806                                  pl10:	call	GetXNum		; After this, 'tis ",size" or ";umb" or " mod"
 28807                                  	jc	short plE2	; And error if it's a bad number.
 28808                                  	call	convUMB		; Convert any address to a UMB number
 28809                                  
 28810                                  	mov	cl,al		; Remember the UMB number
 28811                                  	call	stowUMB		; Mark this UMB # as used;
 28812                                  	jc	short plE2	; If it was already marked, it'll error
 28813                                  
 28814                                  	;call	incArgc		; Each UMB number is another arg for LH to skip
 28815                                  	inc	byte [cs:fm_argc] ; 08/04/2019 - Retro DOS v4.0
 28816                                  
 28817                                  	lodsb
 28818                                  	cmp	al,';'		; Did "umb;" ?
 28819                                  	je	short pl10	; Yep: go back and get another UMB.
 28820                                  
 28821                                  	call	isWhite		; Did "umb " ?
 28822                                  	jz	short plX	; Yep: return (it'll go back to whitespace)
 28823                                  
 28824                                  	call	isEOL		; Did "umb" ?
 28825                                  	jz	short plSwX	; If so, backup and exit like everything's ok
 28826                                  
 28827                                  	;cmp	al,'/'
 28828                                  	cmp	al,SWTCH 	; Did "umb/" ? (as in, "/L:1,100;2/S")
 28829                                  	je	short plSwX	; If so, back up ES:SI one character and return
 28830                                  
 28831                                  	cmp	al,','		; Did "umb," ?
 28832                                  	jne	short plE1	; Just what the heck DID they do? Return error.
 28833                                  
 28834                                  ; --- Read a size -------------------------------------------------------------
 28835                                  
 28836                                  	call	GetXNum		; Stop on "size;" or "size " or anything else
 28837                                  	jc	short plE1	; And error if it's a bad size.
 28838                                  
 28839                                  	call	toPara		; Convert from bytes to paragraphs
 28840                                  
 28841                                  	call	stowSiz		; CL still has the UMB number for this routine
 28842                                  
 28843                                  	;call	incArgc		; Each UMB size is another arg for LH to skip
 28844                                  	inc	byte [cs:fm_argc] ; 08/04/2019 - Retro DOS v4.0
 28845                                  
 28846                                  	lodsb
 28847                                  	cmp	al,';'		; They did "umb,size;", so get another UMB.
 28848                                  	je	short pl10	;
 28849                                  
 28850                                  	call	isWhite		; Did it end with whitespace?
 28851                                  	jz	short plX	; If so, we're done here--go back.
 28852                                  
 28853                                  	call	isEOL		; Did they do "umb,size" and end??? (stupid)
 28854                                  	jz	short plSwX	; If so, backup and exit like everything's ok
 28855                                  
 28856                                  	;cmp	al,'/'
 28857                                  	cmp	al,SWTCH	; Did they do "umb,size/" ?
 28858                                  	je	short plSwX	; If so, again, we're done here.
 28859                                  plE1:	
 28860                                  	;mov	ax,1
 28861                                  	mov	ax,PV_InvArg	; If not, we don't know WHAT they did...
 28862                                  	dec	si
 28863                                  	stc
 28864                                  	retn
 28865                                  
 28866                                  plE2:	;mov	ax,2
 28867                                  	mov	ax,PV_BadUMB	; In this case, they've specified a UMB twice
 28868                                  	; 12/12/2022
 28869                                  	; cf=1
 28870                                  	;stc
 28871                                  	retn
 28872                                  plSwX:	
 28873                                  	dec	si		; If we hit a '/' character, back up one char
 28874                                  				; so the whitespace checker will see it too.
 28875                                  plX:	; 12/12/2022
 28876                                  	; cf=0
 28877                                  	;clc			; Then just return with carry clear, so
 28878                                  	retn			; ParseVar will go about its business.
 28879                                  
 28880                                  ; -----------------------------------------------------------------------------
 28881                                  ;*** incArgc - increments fm_argc, for use with LoadHigh command-line parsing
 28882                                  ; -----------------------------------------------------------------------------
 28883                                  ; ENTRY:    None
 28884                                  ; EXIT:     None
 28885                                  ; ERROR:    None
 28886                                  ; USES:     fm_argc, flags
 28887                                  ; -----------------------------------------------------------------------------
 28888                                  
 28889                                  ;incArgc:
 28890                                  	;push	ax
 28891                                  
 28892                                  	;;getdata al, fm_argc	; Obtain previous value of fm_argc,
 28893                                  
 28894                                  	;mov	al,[cs:fm_argc]
 28895                                  
 28896                                  	;inc	al		; Increment it,
 28897                                  
 28898                                  	;;putdata fm_argc, al	; And store it right back.
 28899                                  
 28900                                  	;mov	[cs:fm_argc],al
 28901                                  
 28902                                  	;pop	ax
 28903                                  	;retn
 28904                                  
 28905                                  ; -----------------------------------------------------------------------------
 28906                                  ;*** isEOL - returns with ZF set if AL contains CR or LF, or 0
 28907                                  ; -----------------------------------------------------------------------------
 28908                                  ; ENTRY:    AL contains character to test
 28909                                  ; EXIT:     ZF set iff AL contains CR or LF, or 0
 28910                                  ; ERROR:    None
 28911                                  ; USES:     ZF
 28912                                  ; -----------------------------------------------------------------------------
 28913                                  
 28914                                  isEOL:
 28915                                  	cmp	al,0		; Null-terminator
 28916                                  	je	short ieX
 28917                                  	cmp	al,CR ; 0Dh	; Carriage Return
 28918                                  	je	short ieX
 28919                                  	cmp	al,LF ; 0Ah	; LineFeed
 28920                                  ieX:	
 28921                                  	retn
 28922                                  
 28923                                  ; -----------------------------------------------------------------------------
 28924                                  ;*** isWhite - returns with ZF set if AL contains whitespace (or "=")
 28925                                  ; -----------------------------------------------------------------------------
 28926                                  ; ENTRY:    AL contains character to test
 28927                                  ; EXIT:     ZF set iff AL contains space, tab, or equals
 28928                                  ; ERROR:    None
 28929                                  ; USES:     ZF
 28930                                  ; -----------------------------------------------------------------------------
 28931                                  
 28932                                  isWhite:
 28933                                  	cmp	al,' '		; Space
 28934                                  	je	short iwX
 28935                                  	cmp	al,'='		; Equals (treat as whitespace)
 28936                                  	je	short iwX
 28937                                  	cmp	al,tab ; 9	; Tab
 28938                                  iwX:	
 28939                                  	retn
 28940                                  
 28941                                  ; -----------------------------------------------------------------------------
 28942                                  ;*** unMarkUMB - marks a given UMB as unused, even if previously marked used
 28943                                  ; -----------------------------------------------------------------------------
 28944                                  ; ENTRY:    AL contains UMB number
 28945                                  ; EXIT:     None
 28946                                  ; ERROR:    None
 28947                                  ; USES:     Flags, variables in highvar.inc
 28948                                  ; -----------------------------------------------------------------------------
 28949                                  
 28950                                  unMarkUMB:
 28951                                  	push	ax
 28952                                  	push	bx
 28953                                  	push	di
 28954                                  	push	es
 28955                                  
 28956                                  	push	cs
 28957                                  	pop	es
 28958                                  
 28959                                  	xor	ah,ah
 28960                                  	mov	bx,ax
 28961                                  
 28962                                  	; 19/04/2019
 28963                                  	
 28964                                  	;mov	byte [es:bx+UmbUsed],0
 28965                                  	mov	[es:bx+UmbUsed],ah ; 0
 28966                                  
 28967                                  	cmp	[es:UmbLoad],al
 28968                                  	jne	short umu10
 28969                                  
 28970                                  	;mov	[es:UmbLoad],0	; If unmarked the load UMB, load into convent.
 28971                                  	mov	[es:UmbLoad],ah ; 0
 28972                                  umu10:	
 28973                                  	pop	es
 28974                                  	pop	di
 28975                                  	pop	bx
 28976                                  	pop	ax
 28977                                  	retn
 28978                                  
 28979                                  ; -----------------------------------------------------------------------------
 28980                                  ;*** stowUMB - marks a given UMB as used, if it hasn't been so marked before
 28981                                  ;            -- accepts a UMB # in AL, and makes sure it hasn't yet been
 28982                                  ; listed in the /L:... chain. If it's the first one specified, it sets UmbLoad
 28983                                  ; to that UMB #... and in any case, it marks the UMB as specified.
 28984                                  ; -----------------------------------------------------------------------------
 28985                                  ; ENTRY:    AL contains UMB number, as specified by the user
 28986                                  ; EXIT:     None
 28987                                  ; ERROR:    Carry set if UMB # is less than 0 or >= MAXUMB (see highvar.inc)
 28988                                  ; USES:     AX, Flags, variables in highvar.inc
 28989                                  ; -----------------------------------------------------------------------------
 28990                                  
 28991                                  stowUMB:
 28992                                  	cmp	al,MAXUMB ; 16
 28993                                  	jb	short su10
 28994                                  	stc
 28995                                  	retn			; Ooops-- UMB>=MAXUMB
 28996                                  su10:	
 28997                                  	push	bx
 28998                                  	push	di
 28999                                  	push	si
 29000                                  	push	ds
 29001                                  	push	es
 29002                                  	push	cs
 29003                                  	pop	es
 29004                                  	push	cs
 29005                                  	pop	ds
 29006                                  	
 29007                                  	;cmp	byte [UmbLoad],0FFh
 29008                                  	cmp	byte [UmbLoad],UNSPECIFIED ; If this, we haven't been here before
 29009                                  	jne	short su20
 29010                                  	mov	[UmbLoad],al	; So remember this UMB as the load UMB slot.
 29011                                  su20:	
 29012                                  	or	al,al		; If they gave UMB 0, there's really nothing
 29013                                  	jz	short su30	; that we should do here.
 29014                                  
 29015                                  	mov	bl,al
 29016                                  	xor	bh,bh
 29017                                  	mov	ax,1		; Now, AX = 1, and BX = UMB Number
 29018                                  
 29019                                  	xchg	[es:bx+UmbUsed],al
 29020                                  
 29021                                  	or	al,al		; If it was already 1, then al==1... and that
 29022                                  	jz	short su30	; means an error.
 29023                                  
 29024                                  	stc			; OOOPS!  This one's been used before.  :(
 29025                                  su30:	
 29026                                  	pop	es
 29027                                  	pop	ds
 29028                                  	pop	si
 29029                                  	pop	di
 29030                                  	pop	bx
 29031                                  	retn
 29032                                  
 29033                                  ; -----------------------------------------------------------------------------
 29034                                  ;*** stowSiz - marks a given UMB as having a given minimum size
 29035                                  ; -----------------------------------------------------------------------------
 29036                                  ; ENTRY:    CL contains UMB number, AX contains size
 29037                                  ; EXIT:     None
 29038                                  ; ERROR:    None
 29039                                  ; USES:     AX, DX, Flags, variables in highvar.inc
 29040                                  ; -----------------------------------------------------------------------------
 29041                                  
 29042                                  ; 13/05/2019
 29043                                  
 29044                                  stowSiz:
 29045                                  	push	bx
 29046                                  	;push	di ; ?
 29047                                  	push	es
 29048                                  
 29049                                  	push	cs
 29050                                  	pop	es	
 29051                                  
 29052                                  	mov	bl,cl			; Now bl==UMB number, AX==size
 29053                                  	mov	bh,0			;     bx==UMB number, AX==size
 29054                                  	shl	bl,1			;     bx==offset into array, AX=size
 29055                                  	mov	[es:bx+UmbSize],ax	; Store the size
 29056                                  	
 29057                                  	pop	es
 29058                                  	;pop	di ; ?
 29059                                  	pop	bx
 29060                                  
 29061                                  	retn
 29062                                  
 29063                                  ; -----------------------------------------------------------------------------
 29064                                  ;*** toDigit - converts a character-digit to its binary counterpart
 29065                                  ;            -- verifies that CL contains a valid character-digit; if so, it
 29066                                  ; changes CL to its counterpart binary digit ((CL-'0') or (CL-'A'+10)).
 29067                                  ; A-F are considered valid iff gnradix is 16.
 29068                                  ; -----------------------------------------------------------------------------
 29069                                  ; ENTRY:    CL contains a digit ('0' to '9' or, if gnradix==16, 'A' to 'F')
 29070                                  ; EXIT:     CL contains digit in binary (0 to 9 or, if gnradix==16, 0 to 15)
 29071                                  ; ERROR:    Carry set indicates invalid digit; carry clear indicates good digit
 29072                                  ; USES:     CL, Flags
 29073                                  ; -----------------------------------------------------------------------------
 29074                                  ; If the string is preceeded with "0x", the value is read as hexadecimal; else,
 29075                                  ; as decimal. After a read, you may check the radix by examining gnradix--it
 29076                                  ; will be 10 or 16.
 29077                                  ; -----------------------------------------------------------------------------
 29078                                  
 29079                                  gnradix:
 29080                                  	dw	0		; Must be a word--16x16 multiplication
 29081                                  
 29082                                  toDigit:
 29083                                  	cmp	word [cs:gnradix],16
 29084                                  	jne	short td20	; Don't check hex digits if radix isn't 16
 29085                                  
 29086                                  toDigit_hex:
 29087                                  	cmp	cl,'a'	; 61h
 29088                                  	jb	short td10
 29089                                  	cmp	cl,'f'	; 66h
 29090                                  	ja	short tdE	; Nothing valid above 'z' at all...
 29091                                  	sub	cl,'a'-10 ; 57h	; Make 'a'==10 and return.
 29092                                  	;clc			; <- CLC is implicit from last SUB
 29093                                  	retn
 29094                                  td10:	
 29095                                  	cmp	cl,'A'  ; 41h
 29096                                  	jb	short td20	; Below 'A'?  Not a letter...
 29097                                  	cmp	cl,'F'	; 46h
 29098                                  	ja	short tdE	; Above 'F'?  Not a digit.
 29099                                  	sub	cl,'A'-10 ; 37h	; Make 'A'==10 and return.
 29100                                  	;clc			; <- CLC is implicit from last SUB
 29101                                  	retn
 29102                                  toDigit_dec:
 29103                                  td20:	
 29104                                  	cmp	cl,'0'		; If less than zero,
 29105                                  	;jb	short tdE	; Done.
 29106                                  	jb	short tdEr ; 08/04/2019
 29107                                  	cmp	cl,'9'		; Or, if greater than nine,
 29108                                  	ja	short tdE	; Done.
 29109                                  	sub	cl,'0'	; 30h	; Okay--make '0'==0 and return.
 29110                                  	;clc			; <- CLC is implicit from last SUB
 29111                                  	retn
 29112                                  tdE:	
 29113                                  	stc
 29114                                  tdEr:		; 08/04/2019 - Retro DOS v4.0	
 29115                                  	retn
 29116                                  
 29117                                  ; -----------------------------------------------------------------------------
 29118                                  ;*** GetXNum - reads a 32-bit ASCII number at ES:SI and returns it in DX:AX
 29119                                  ; -----------------------------------------------------------------------------
 29120                                  ; ENTRY:    ES:SI points to an ascii string to scan
 29121                                  ; EXIT:     ES:SI moved to first invalid digit, DX:AX contains value read
 29122                                  ; ERROR:    Carry set if # is too big, or has no digits (EOL possibly)
 29123                                  ; USES:     ES:SI, DX, AX, Flags, gnradix
 29124                                  ; -----------------------------------------------------------------------------
 29125                                  ; If the string is preceeded with "0x", the value is read as hexadecimal; else,
 29126                                  ; as decimal. After a read, you may check the radix by examining gnradix--it
 29127                                  ; will be 10 or 16.
 29128                                  ; -----------------------------------------------------------------------------
 29129                                  
 29130                                  ; 08/04/2019 - Retro DOS v4.0
 29131                                  
 29132                                  GetXNum:
 29133                                  	;pushreg <bx, cx, ds>
 29134                                  	push	bx
 29135                                  	push	cx
 29136                                  	push	ds
 29137                                  
 29138                                  	cld
 29139                                  	xor	ax,ax
 29140                                  	xor	bx,bx
 29141                                  	xor	cx,cx
 29142                                  	xor	dx,dx			; Start with 0 (makes sense)
 29143                                  
 29144                                  	mov	word [cs:gnradix],10	; And default to a radix of 10 (dec)
 29145                                  
 29146                                  	mov	cl,[es:si]		; Now AX=0, BX=0, CH=0/CL=char, DX=0
 29147                                  	;call	toDigit
 29148                                  	call	toDigit_dec
 29149                                  	jc	short gxnE		; If it's not a digit, leave now.
 29150                                  
 29151                                  	or	cl,cl
 29152                                  	jnz	short gxn20		; Doesn't have '0x'
 29153                                  	mov	cl,[es:si+1]
 29154                                  	cmp	cl,'x'			; Either 'x'...
 29155                                  	je	short gxn10
 29156                                  	cmp	cl,'X'			; ...or 'X' means it's hexadecimal
 29157                                  	jne	short gxn20
 29158                                  
 29159                                  gxn10:	
 29160                                  	mov	word [cs:gnradix], 16
 29161                                  	inc	si			; Since we read "0x", march over it.
 29162                                  	inc	si
 29163                                  
 29164                                  ; ------------------------------------------------------
 29165                                  ; GXN20--ES:SI = a digit in a number; if not, we're done
 29166                                  ;        DX:AX = current total
 29167                                  ;        BX    = 0
 29168                                  ;        CH    = 0
 29169                                  ; ------------------------------------------------------
 29170                                  
 29171                                  gxn20:	
 29172                                  	mov	cl,[es:si]	; Now DX:AX=current total, CH=0/CL=char
 29173                                  	inc	si
 29174                                  
 29175                                  	call	toDigit		; Accepts only valid digits, A-F -> 10-16
 29176                                  	jc	short gxnQ	; <- Ah... wasn't a digit. Stop.
 29177                                  
 29178                                  	call	mul32		; Multiply DX:AX by gnradix
 29179                                  	jc	short gxnX	; (if it's too big, error out)
 29180                                  
 29181                                  	add	ax,cx		; Add the digit
 29182                                  	adc	dx,bx		; (BX is 0!)--Adds 1 iff last add wrapped
 29183                                  	;jc	short gxnX	; If _that_ wrapped, it's too big.
 29184                                  	;jmp	short gxn20
 29185                                  	jnc	short gxn20
 29186                                  gxnE:	
 29187                                  	;stc			; In this case, we need to set the carry
 29188                                  	jmp	short gxnX	; and leave--there were no digits given.
 29189                                  gxnQ:	
 29190                                  	dec	si		; Don't read in the offensive character.
 29191                                  	clc			; And clear carry, so they know it's okay.
 29192                                  gxnX:	
 29193                                  	pop	ds
 29194                                  	pop	cx
 29195                                  	pop	bx
 29196                                  	retn
 29197                                  
 29198                                  ; -----------------------------------------------------------------------------
 29199                                  ;*** mul32 - multiplies the number in DX:AX by gnradix
 29200                                  ; -----------------------------------------------------------------------------
 29201                                  ; ENTRY:   DX:AX = the number to be multiplied, BX = 0, gnradix = multiplier
 29202                                  ; EXIT:    DX:AX has been multiplied by gnradix if carry clear; BX still 0
 29203                                  ; ERROR:   Carry set if number was too large
 29204                                  ; USES:    Flags, AX, DX
 29205                                  ; -----------------------------------------------------------------------------
 29206                                  
 29207                                  mul32:
 29208                                  	push	ax		; DX=old:hi, AX=old:lo, TOS=old:lo, BX=0
 29209                                  	mov	ax,dx		; DX=old:hi, AX=old:hi, TOS=old:lo, BX=0
 29210                                  	mul	word [cs:gnradix] ; DX=?, AX=new:hi, TOS=old:lo, BX=0
 29211                                  	jc	short m32E	; Too big?
 29212                                  
 29213                                  	mov	dx,ax		; DX=new:hi, AX=new:hi, TOS=old:lo, BX=0
 29214                                  	pop	ax		; DX=new:hi, AX=old:lo, TOS=orig, BX=0
 29215                                  
 29216                                  	xchg	dx,bx		; DX=0, AX=old:lo, TOS=orig, BX=new:hi
 29217                                  	mul	word [cs:gnradix] ; DX=carry,  AX=new:lo, TOS=orig, BX=new:hi
 29218                                  	xchg	dx,bx		; DX=new:hi, AX=new:lo, TOS=orig, BX=carry
 29219                                  	add	dx,bx		; DX=new:hi, AX=new:lo, TOS=orig, BX=carry
 29220                                  	xor	bx,bx		; DX=new:hi, AX=new:lo, TOS=orig, BX=0
 29221                                  	retn
 29222                                  m32E:	
 29223                                  	pop	ax
 29224                                  	retn
 29225                                  
 29226                                  ; -----------------------------------------------------------------------------
 29227                                  ;*** toPara - divides DX:AX by 16; result in AX only (discards extra DX data)
 29228                                  ; -----------------------------------------------------------------------------
 29229                                  ; ENTRY:   DX:AX = the number to be divided
 29230                                  ; EXIT:    Interpereting DX:AX as bytes, AX=paragraph equivalent, 0xFFFF max
 29231                                  ; ERROR:   None
 29232                                  ; USES:    Flags, AX, DX
 29233                                  ; -----------------------------------------------------------------------------
 29234                                  ; Note: The 386 has a 32-bit SHR, which would work perfectly for this... but we
 29235                                  ;       can't ensure a 386 host machine. Sorry.
 29236                                  ; -----------------------------------------------------------------------------
 29237                                  
 29238                                  toPara:
 29239                                  	push	cx		; DX:AX=HHHH hhhh hhhh hhhh:LLLL llll llll llll
 29240                                  
 29241                                  	mov	cl,4		;
 29242                                  	shr	ax,cl		; DX:AX=HHHH hhhh hhhh hhhh:0000 LLLL llll llll
 29243                                  	xchg	ax,dx		; DX:AX=0000 LLLL llll llll:HHHH hhhh hhhh hhhh
 29244                                  	mov	cl,12
 29245                                  	shl	ax,cl		; DX:AX=0000 LLLL llll llll:hhhh 0000 0000 0000
 29246                                  	or	ax,dx		;    AX=hhhh LLLL llll llll
 29247                                  
 29248                                  	pop	cx
 29249                                  	retn
 29250                                  
 29251                                  ; -----------------------------------------------------------------------------
 29252                                  ;*** UmbHead - returns in AX the address of the first UMB block (0x9FFF)
 29253                                  ; -----------------------------------------------------------------------------
 29254                                  ; ENTRY:  Nothing
 29255                                  ; EXIT:   AX contains 0x9FFF for most systems
 29256                                  ; ERROR:  Carry set if pointer is 0xFFFF (if not set up yet--DH runs into this)
 29257                                  ; USES:   Flags, AX
 29258                                  ; -----------------------------------------------------------------------------
 29259                                  ; Early in the boot-cycle, the pointer used to obtain this value isn't set up;
 29260                                  ; to be precise, before a UMB provider is around. In this event, the pointer
 29261                                  ; is always set to 0xFFFF; it changes once a provider is around. On most
 29262                                  ; machines (all of 'em I've seen), it changes to 0x9FFF at that point.
 29263                                  ; -----------------------------------------------------------------------------
 29264                                  
 29265                                  UmbHead:
 29266                                  	; 13/05/2019 (because of callers, pushs & pops are not needed here)
 29267                                  
 29268                                  	;push	si ; ?
 29269                                  	;push	ds ; ? 
 29270                                  	;push	es
 29271                                  	;push	bx ; *	
 29272                                  
 29273                                  	; 09/04/2019
 29274                                  	; !!! No need to save es,bx,ds,si above !!! (es,bx are changed here)
 29275                                  
 29276                                  	mov	ah,GET_IN_VARS		; Call int 21h, function 52h...
 29277                                  	int	21h
 29278                                  
 29279                                  	mov	ax,[es:DOS_UMB_HEAD]	; And read what's in ES:[008C]
 29280                                  	cmp	ax,0FFFFh
 29281                                  	je	short uhE		; If it's 0xFFFF, it's an error...
 29282                                  
 29283                                  	clc				; Else, it isn't (CLC done by prev cmp)
 29284                                  	;jmp	short uhX
 29285                                  	; 12/12/2022
 29286                                  	retn
 29287                                  uhE:	
 29288                                  	stc
 29289                                  uhX:	
 29290                                  	;pop	bx ; *
 29291                                  	;pop	es
 29292                                  	;pop	ds ; ?
 29293                                  	;pop	si ; ?
 29294                                  	retn
 29295                                  
 29296                                  ; -----------------------------------------------------------------------------
 29297                                  ;*** isSysMCB - sets ZF if ES points to an MCB owned by "SC" + (8 or 9)
 29298                                  ; -----------------------------------------------------------------------------
 29299                                  ; ENTRY:  ES:0 should point to a valid MCB
 29300                                  ; EXIT:   ZF set if owned by SC+8 or SC+9 (for japan)
 29301                                  ; USES:   Flags
 29302                                  ; -----------------------------------------------------------------------------
 29303                                  
 29304                                  isSysMCB:
 29305                                  	;push	ax
 29306                                  
 29307                                  	;mov	ax,[es:ARENA.OWNER]	; Check the owner...
 29308                                  	;cmp	ax,SystemPSPOwner	; 8 (for US OR Japan) is valid
 29309                                  	;je	short ism10
 29310                                  	;cmp	ax,JapanPSPOwner	; 9 (for Japan) is valid
 29311                                  	;;je	short ism10
 29312                                  	;;jmp	short ismX		; Anything else isn't.
 29313                                  	;jne	short ismX
 29314                                  	cmp	word [es:ARENA.OWNER],SystemPSPOwner ; 8  ; 09/04/2019
 29315                                  	jne	short ismX 
 29316                                  ism10:	
 29317                                  	;mov	ax,[es:ARENA.NAME]	; Check the name...
 29318                                  	;cmp	ax,'SC' ; 4353h
 29319                                  	cmp	word [es:ARENA.NAME],'SC'
 29320                                  ismX:	
 29321                                  	;pop	ax
 29322                                  	retn
 29323                                  
 29324                                  ; 09/04/2019 - Retro DOS v4.0
 29325                                  
 29326                                  ; -----------------------------------------------------------------------------
 29327                                  ;*** AddrToUmb - converts a segment address in AX to its appropriate UMB number
 29328                                  ; -----------------------------------------------------------------------------
 29329                                  ; ENTRY:  AX contains a segment address
 29330                                  ; EXIT:   AX will contain the UMB number which contains the address (0==conv)
 29331                                  ; ERROR:  If the address is above UM Range, AX will return as FFFF.
 29332                                  ; USES:   Flags, AX
 29333                                  ; -----------------------------------------------------------------------------
 29334                                  ; An address in the following areas is treated as:
 29335                                  ;    0      <-> umbhead (0x9FFF)          = Conventional memory
 29336                                  ;    0x9FFF <-> addr of first UM sys MCB  = UMB #1
 29337                                  ;      ...
 29338                                  ;    addr of last UM sys MCB <-> TOM      = invalid; returns #0xFFFF
 29339                                  ; -----------------------------------------------------------------------------
 29340                                  
 29341                                  AddrToUmb:
 29342                                  	push	cx
 29343                                  	push	dx
 29344                                  	push	es
 29345                                  
 29346                                  	mov	dx,ax		; DX = address to search for
 29347                                  
 29348                                  	call	UmbHead		; AX = first segment
 29349                                  	jc	short atuE	; If it couldn't get it, error out.
 29350                                  
 29351                                  	mov	es,ax		; ES = first UMB segment
 29352                                  	xor	cx,cx		; Pretend we're on UMB 0 for now... (cx = UMB#)
 29353                                  
 29354                                  ; ----------------------------------------
 29355                                  ; ATU10--ES - Current MCB address
 29356                                  ;        DX - Address given for conversion
 29357                                  ;        CX - Current UMB #
 29358                                  ; ----------------------------------------
 29359                                  
 29360                                  atu10:	mov	ax,es
 29361                                          cmp	ax,dx		; Present segment >= given segment?
 29362                                  	jae	short atuX	; Yep--done.
 29363                                  
 29364                                  	call	isSysMCB	; Returns with ZF set if this is a system MCB
 29365                                  	jnz	short atu20
 29366                                  
 29367                                  	inc	cx		; If it _was_ a system MCB, we're in a new UMB.
 29368                                  atu20:	
 29369                                  	mov	al,[es:ARENA.SIGNATURE]
 29370                                  	cmp	al,arena_signature_end  ; 'Z'
 29371                                  	je	short atu30		; 'Z' means this was the last MCB... that's it.
 29372                                  
 29373                                  	;NextMCB es, ax
 29374                                  
 29375                                  	mov     ax,es
 29376                                  	;add	ax,[es:3]
 29377                                  	add     ax,[es:ARENA.SIZE]
 29378                                  	inc     ax
 29379                                  	mov     es,ax
 29380                                  	
 29381                                  	jmp	short atu10
 29382                                  
 29383                                  ; -----------------------------------------------------------------------------
 29384                                  ; if we get to atu30, they specified a number that was past the last MCB.
 29385                                  ; make sure it's not _inside_ that MCB before we return an error condition.
 29386                                  ; -----------------------------------------------------------------------------
 29387                                  
 29388                                  atu30:	
 29389                                  	mov	ax,es
 29390                                  	add	ax,[es:ARENA.SIZE]
 29391                                  	cmp	ax,dx		; Present >= given?
 29392                                  	jae	short atuX	; Yep! It _was_ inside.
 29393                                  atuE:	
 29394                                  	xor	cx,cx		; Else, fall through with UMB # == -1
 29395                                  	dec	cx		; (that makes it return 0xFFFF and sets CF)
 29396                                  atuX:	
 29397                                  	mov	ax, cx		; Return the UMB number in AX
 29398                                  	
 29399                                  	pop	es	
 29400                                  	pop	dx
 29401                                  	pop	cx
 29402                                  	retn
 29403                                  
 29404                                  ; -----------------------------------------------------------------------------
 29405                                  ;*** convUMB - checks after GetXNum to convert an address to a UMB number
 29406                                  ;            -- if GetXNum read a hex number, we interperete that as a segment
 29407                                  ; address rather than a UMB number... and use that address to look up a UMB.
 29408                                  ; This routine checks for that condition and calls AddrToUmb if necessary.
 29409                                  ; -----------------------------------------------------------------------------
 29410                                  ; ENTRY:  AX contains a UMB number or segment, gnradix has been set by GetXNum
 29411                                  ; EXIT:   AX will contain a UMB number
 29412                                  ; ERROR:  None
 29413                                  ; USES:   Flags, AX
 29414                                  ; -----------------------------------------------------------------------------
 29415                                  
 29416                                  convUMB:
 29417                                  	cmp	word [cs:gnradix],16
 29418                                  	jne	short cu10	; If it didn't read in hex, it's not an address
 29419                                  	call	AddrToUmb	; Else, convert the address to a UMB number
 29420                                  	cmp	ax,0FFFFh
 29421                                  	jne	short cu10
 29422                                  	inc	ax		; If too high, ignore it (make it conventional)
 29423                                  cu10:	
 29424                                  	retn
 29425                                  
 29426                                  ; -----------------------------------------------------------------------------
 29427                                  ;*** setUMBs - links umbs and sets allocation strategy for a load
 29428                                  ;            -- if LoadHigh, the allocation strategy MAY be LOW_FIRST instead
 29429                                  ; of the usual HIGH_FIRST.  See the code.
 29430                                  ; -----------------------------------------------------------------------------
 29431                                  ; ENTRY:  None
 29432                                  ; EXIT:   None
 29433                                  ; ERROR:  None
 29434                                  ; USES:   Flags, fm_umb, fm_strat
 29435                                  ; -----------------------------------------------------------------------------
 29436                                  
 29437                                  setUMBs:
 29438                                  	push	ax
 29439                                  	push	bx
 29440                                  	call	fm_link
 29441                                  	pop	bx
 29442                                  	pop	ax
 29443                                  	retn
 29444                                  
 29445                                  ; -----------------------------------------------------------------------------
 29446                                  ;*** loadLow - returns AL==0 if UMB0 == 0, else AL==1
 29447                                  ; -----------------------------------------------------------------------------
 29448                                  ; ENTRY:  None
 29449                                  ; EXIT:   AL==0 if mem strategy should be set to LOW_FIRST, else AL==1
 29450                                  ;         Carry set if UMB0 not specified (_NOT_ an error)
 29451                                  ; ERROR:  None
 29452                                  ; USES:   Flags, fm_strat, fm_umb
 29453                                  ; -----------------------------------------------------------------------------
 29454                                  ; We want to set the memory strategy to LOW_FIRST if the user specified a
 29455                                  ; load UMB, and it is 0.  That 0 can be either from the user having _specified_
 29456                                  ; zero (/L:0;...), or from having specified a too-big min size (/L:1,99999999)
 29457                                  ; such that the load UMB is too small, and shouldn't be used.
 29458                                  ; -----------------------------------------------------------------------------
 29459                                  
 29460                                  loadLow:
 29461                                  	;push	ds
 29462                                  	;push	cs		; Point DS into appropriate data segment
 29463                                  	;pop	ds	
 29464                                  
 29465                                  	;mov	al,[UmbLoad]
 29466                                  	mov	al,[cs:UmbLoad]
 29467                                  	cmp	al,UNSPECIFIED ; 0FFh, -1
 29468                                  	jne	short ll10
 29469                                  
 29470                                  	stc
 29471                                  ll15:
 29472                                  	mov	al,1		; Return with AL==1 && STC if no UMBs specified
 29473                                  	;stc
 29474                                  	;jmp	short llX
 29475                                  	retn
 29476                                  ll10:	
 29477                                  	or	al,al		; AL=the load UMB: Is it == 0?
 29478                                  	;jz	short llX	; Yep... CF==0 (from OR) && AL=0, so just exit
 29479                                  
 29480                                  	jnz	short ll15	; 09/04/2019 - Retro DOS v4.0
 29481                                  	retn
 29482                                  
 29483                                  	;mov	al,1
 29484                                  	;clc
 29485                                  ;llX:
 29486                                  	;pop	ds		; Return DS to where it was
 29487                                  	;retn
 29488                                  
 29489                                  ; -----------------------------------------------------------------------------
 29490                                  ;*** HideUMBs - links UMBs and hides upper-memory as appropriate
 29491                                  ; -----------------------------------------------------------------------------
 29492                                  ; ENTRY:  None
 29493                                  ; EXIT:   None
 29494                                  ; ERROR:  None
 29495                                  ; USES:   Flags, fm_strat, fm_umb
 29496                                  ; -----------------------------------------------------------------------------
 29497                                  
 29498                                  HideUMBs:
 29499                                  	push	ax
 29500                                  	push	cx
 29501                                  	push	ds
 29502                                  	push	es
 29503                                  
 29504                                  	call	UmbTest		; See if we REALLY linked in anything...
 29505                                  	jc	short husX	; ...if not, there's nothing for us to do.
 29506                                  
 29507                                  	call	FixMem		; Concatenate adjacent free MCBs in upper mem
 29508                                  	call	setUMBs		; Link UMBs and set memory-allocation strategy
 29509                                  
 29510                                  	;putdata fInHigh,1	; Remember that we're now running high
 29511                                  	mov	byte [cs:fInHigh],1
 29512                                  
 29513                                  	;call	GetLoadUMB	; See if they gave us a list to leave free
 29514                                  	mov	al,[cs:UmbLoad] ; 09/04/2019 - Retro DOS v4.0
 29515                                  
 29516                                  	cmp	al,UNSPECIFIED	; If they didn't,
 29517                                  	je	short husX	; then we shouldn't do this loop:
 29518                                  
 29519                                  	xor	cx,cx
 29520                                  
 29521                                  ; -----------------------------------------------
 29522                                  ; HUS10-CX - UMB number (after inc, 1==first UMB)
 29523                                  ; -----------------------------------------------
 29524                                  
 29525                                  hus10:	inc	cx		; For each UMB:
 29526                                  	cmp	cx,MAXUMB ; 16
 29527                                  	jae	short hus20
 29528                                  
 29529                                  	mov	al,cl		; (stopping as soon as we're outside of the
 29530                                  	push	es
 29531                                  	call	findUMB		; valid range of UMBs)
 29532                                  	pop	es		; push/pop: trash what findumb finds.  :-)
 29533                                  	jc	short hus20
 29534                                  
 29535                                  	call	_hideUMB_	; hide what we need to hide.
 29536                                  
 29537                                  	jmp	short hus10
 29538                                  hus20:	
 29539                                  	;call	GetLoadUMB	; Now check if they offered /L:0
 29540                                  	mov	al,[cs:UmbLoad] ; 09/04/2019 - Retro DOS v4.0	
 29541                                  
 29542                                  	or	al,al		; --Is the load UMB 0? (-1==unspecified)
 29543                                  	jnz	short husX	; If not, we're done.
 29544                                  
 29545                                  	call	hl_unlink	; If so, however, fix UMBs and strategy.
 29546                                  husX:	
 29547                                  	pop	es
 29548                                  	pop	ds
 29549                                  	pop	cx
 29550                                  	pop	ax
 29551                                  	retn
 29552                                  
 29553                                  ; -----------------------------------------------------------------------------
 29554                                  ;*** GetLoadUMB - Returns the load UMB number in AL (-1 if not specified)
 29555                                  ; -----------------------------------------------------------------------------
 29556                                  ; ENTRY:  None
 29557                                  ; EXIT:   AL == load UMB
 29558                                  ; ERROR:  None
 29559                                  ; USES:   Flags, AX
 29560                                  ; -----------------------------------------------------------------------------
 29561                                  
 29562                                  ;GetLoadUMB:
 29563                                  ;	;getdata al, UmbLoad
 29564                                  ;	push	ds
 29565                                  ;	push	cs
 29566                                  ;	pop	ds
 29567                                  ;	mov	al,[UmLoad]
 29568                                  ;	pop	ds
 29569                                  ;	retn
 29570                                  
 29571                                  ; -----------------------------------------------------------------------------
 29572                                  ;*** GetLoadSize - Returns the load UMB minimum size (0 if not specified)
 29573                                  ; -----------------------------------------------------------------------------
 29574                                  ; ENTRY:  None
 29575                                  ; EXIT:   AX == load UMB minimum size
 29576                                  ; ERROR:  None
 29577                                  ; USES:   Flags, AX
 29578                                  ; -----------------------------------------------------------------------------
 29579                                  
 29580                                  GetLoadSize:
 29581                                  	; 09/04/2019 - Retro DOS v4.0
 29582                                  	mov	al,[cs:UmbLoad]
 29583                                  	jmp	short GetSize
 29584                                  
 29585                                  	;push	bx
 29586                                  	;;push	si
 29587                                  	;push	ds
 29588                                  	;push	cs
 29589                                  	;pop	ds
 29590                                  
 29591                                  	;mov	al,[UmbLoad]
 29592                                  
 29593                                  	;xor	ah,ah			;    ax==UMB
 29594                                  	;mov	bx,UmbSize		;    bx==array
 29595                                  	;shl	al,1	                ;    ax==offset
 29596                                  	;;add	ax,bx			;    ax==element index
 29597                                  	;;mov	si,ax			; ds:si==element index
 29598                                  
 29599                                  	;;lodsw				;    ax==size
 29600                                  
 29601                                  	;add	bx,ax
 29602                                  	;mov	ax,[bx]
 29603                                  
 29604                                  	;pop	ds
 29605                                  	;;pop	si
 29606                                  	;pop	bx
 29607                                  	;retn
 29608                                  
 29609                                  ; -----------------------------------------------------------------------------
 29610                                  ;*** GetSize - Returns the UMB in AL's minimum size (0 if not specified)
 29611                                  ; -----------------------------------------------------------------------------
 29612                                  ; ENTRY:  AL == a UMB number
 29613                                  ; EXIT:   AX == UMB minimum size, as specified by the user
 29614                                  ; ERROR:  None
 29615                                  ; USES:   Flags, AX
 29616                                  ; -----------------------------------------------------------------------------
 29617                                  
 29618                                  GetSize:
 29619                                  	; 09/04/2019 - Retro DOS v4.0
 29620                                  
 29621                                  	push	bx
 29622                                  	;push	si
 29623                                  	;push	ds
 29624                                  	;push	cs
 29625                                  	;pop	ds
 29626                                  
 29627                                  	xor	ah,ah			;    ax==UMB
 29628                                  	mov	bx,UmbSize		;    bx==array
 29629                                  	shl	al,1	                ;    ax==offset
 29630                                  	;add	ax,bx			;    ax==element index
 29631                                  	;mov	si,ax			; ds:si==element index
 29632                                  
 29633                                  	;lodsw				;    ax==size
 29634                                  
 29635                                  	add	bx,ax
 29636                                  	;mov	ax,[bx]
 29637                                  	mov	ax,[cs:bx]
 29638                                  
 29639                                  	;pop	ds
 29640                                  	;pop	si
 29641                                  	pop	bx
 29642                                  	retn
 29643                                  
 29644                                  ; -----------------------------------------------------------------------------
 29645                                  ;*** StoLoadUMB - Overrides the load UMB number with what's in AL
 29646                                  ; -----------------------------------------------------------------------------
 29647                                  ; ENTRY:   AL == new load UMB
 29648                                  ; EXIT:    None
 29649                                  ; ERROR:   None
 29650                                  ; USES:    Flags, AX
 29651                                  ; -----------------------------------------------------------------------------
 29652                                  ; CAUTION: Should only be used if /L:... was used.  Logically, that is the only
 29653                                  ;          time you would ever need this, so that's okay.
 29654                                  ; -----------------------------------------------------------------------------
 29655                                  
 29656                                  ;StoLoadUMB:
 29657                                  ;	;putdata UmbLoad, al
 29658                                  ;	push	es
 29659                                  ;	push	cs
 29660                                  ;	pop	es
 29661                                  ;	mov	[es:UmbLoad],al
 29662                                  ;	pop	es
 29663                                  ;	retn
 29664                                  
 29665                                  ; -----------------------------------------------------------------------------
 29666                                  ;*** StoLoadSize - Overrides the load UMB minimum size with what's in AX
 29667                                  ; -----------------------------------------------------------------------------
 29668                                  ; ENTRY:  AL == new load size
 29669                                  ; EXIT:   None
 29670                                  ; ERROR:  None
 29671                                  ; USES:   Flags, AX
 29672                                  ; -----------------------------------------------------------------------------
 29673                                  
 29674                                  StoLoadSize:
 29675                                  	push	dx
 29676                                  
 29677                                  	;getdata dl, UmbLoad		; Put UMB# in DL and size in AX
 29678                                  	;
 29679                                  	;push	ds
 29680                                  	;push	cs
 29681                                  	;pop	ds
 29682                                  	;mov	dl,[UmbLoad]
 29683                                  	;pop	ds	
 29684                                  
 29685                                  	mov	dl,[cs:UmbLoad]
 29686                                  
 29687                                  	cmp	dl,UNSPECIFIED ; 0FFh
 29688                                  	je	short sls10
 29689                                  
 29690                                  	call	stowSiz			; We've got a function to do just this
 29691                                  sls10:	
 29692                                  	pop	dx
 29693                                  	retn
 29694                                  
 29695                                  ; -----------------------------------------------------------------------------
 29696                                  ;*** hideUMB - marks as HIDDEN all FREE elements in UMB passed as AL
 29697                                  ; -----------------------------------------------------------------------------
 29698                                  ; ENTRY:    AL must indicate a valid UMB; 0==conv && is invalid.
 29699                                  ; EXIT:     None; free elements in UMB marked as hidden
 29700                                  ; ERROR:    None
 29701                                  ; USES:     Flags
 29702                                  ; -----------------------------------------------------------------------------
 29703                                  
 29704                                  hideUMB:
 29705                                  	push	ax
 29706                                  	push	es
 29707                                  
 29708                                  	call	findUMB		; Returns with carry if err, else ES == MCB
 29709                                  	jc	short huX
 29710                                  
 29711                                  ; ------------------------------------------------
 29712                                  ; HU10--ES - MCB inside UMB; if it's a system MCB,
 29713                                  ;            we're not in the same UMB, so exit.
 29714                                  ; ------------------------------------------------
 29715                                  
 29716                                  hu10:	call	isSysMCB	; Returns with ZF set if owner is SYSTEM
 29717                                  	jz	short huX	; If it is, we've finished the UMB.
 29718                                  	;call	isFreeMCB	; Returns with ZF set if owner is 0
 29719                                  	or	word [es:ARENA.OWNER],0
 29720                                  	jnz	short hu20
 29721                                  
 29722                                  	call	hideMCB
 29723                                  hu20:	
 29724                                  	mov	al,[es:ARENA.SIGNATURE]
 29725                                  	cmp	al,arena_signature_end  ;'Z'
 29726                                  	jz	short huX	; 'Z' means this was the last MCB... that's it.
 29727                                  
 29728                                  	;NextMCB es, ax		; Go on forward.
 29729                                  	mov     ax,es
 29730                                  	;add	ax,[es:3]
 29731                                  	add     ax,[es:ARENA.SIZE]
 29732                                  	inc     ax
 29733                                  	mov     es,ax
 29734                                  
 29735                                  	jmp	short hu10
 29736                                  huX:	
 29737                                  	pop	es
 29738                                  	pop	ax
 29739                                  	retn
 29740                                  
 29741                                  ; -----------------------------------------------------------------------------
 29742                                  ;*** isTiny - returns with ZF set if user didn't specify /S
 29743                                  ; -----------------------------------------------------------------------------
 29744                                  ; ENTRY:    None
 29745                                  ; EXIT:     ZF set if user DIDN'T specify /S
 29746                                  ; ERROR:    None
 29747                                  ; USES:     Flags
 29748                                  ; -----------------------------------------------------------------------------
 29749                                  
 29750                                  isTiny:
 29751                                  	push	ax
 29752                                  
 29753                                  	;getdata al, fUmbTiny
 29754                                  	;
 29755                                  	;push	ds
 29756                                  	;push	cs
 29757                                  	;pop	ds
 29758                                  	;mov	al,[fUmbTiny]
 29759                                  	;pop	ds
 29760                                  
 29761                                  	mov	al,[cs:fUmbTiny]		
 29762                                  
 29763                                  	or	al,al
 29764                                  	pop	ax
 29765                                  	retn
 29766                                  
 29767                                  ; -----------------------------------------------------------------------------
 29768                                  ;*** isFreeMCB - returns with ZF set if current MCB (ES:0) is FREE
 29769                                  ; -----------------------------------------------------------------------------
 29770                                  ; ENTRY:    ES:0 should point to an MCB
 29771                                  ; EXIT:     ZF set if MCB is free, else !ZF
 29772                                  ; ERROR:    None
 29773                                  ; USES:     Flags
 29774                                  ; -----------------------------------------------------------------------------
 29775                                  
 29776                                  ;isFreeMCB:
 29777                                  ;	or	word [es:ARENA.OWNER],0
 29778                                  ;	retn
 29779                                  
 29780                                  ; -----------------------------------------------------------------------------
 29781                                  ;*** hideMCB - marks as HIDDEN the MCB at ES:0
 29782                                  ; -----------------------------------------------------------------------------
 29783                                  ; ENTRY:    ES:0 should point to an MCB
 29784                                  ; EXIT:     None; MCB marked as HIDDEN
 29785                                  ; ERROR:    None
 29786                                  ; USES:     None
 29787                                  ; -----------------------------------------------------------------------------
 29788                                  
 29789                                  hideMCB:
 29790                                  	mov	word [es:ARENA.OWNER],SystemPSPOwner ; 8
 29791                                  	mov	word [es:ARENA.NAME+0], 'HI' ; 4948h
 29792                                  	mov	word [es:ARENA.NAME+2], 'DD' ; 4444h
 29793                                  	mov	word [es:ARENA.NAME+4], 'EN' ; 4E45h
 29794                                  	mov	word [es:ARENA.NAME+6], '  ' ; 2020h	
 29795                                  	retn
 29796                                  
 29797                                  ; -----------------------------------------------------------------------------
 29798                                  ;*** unHideMCB - marks as FREE the MCB at ES:0
 29799                                  ; -----------------------------------------------------------------------------
 29800                                  ; ENTRY:    ES:0 should point to an MCB
 29801                                  ; EXIT:     None; MCB marked as FREE
 29802                                  ; ERROR:    None
 29803                                  ; USES:     None
 29804                                  ; -----------------------------------------------------------------------------
 29805                                  
 29806                                  unHideMCB:
 29807                                  	push	ax
 29808                                  	mov	word [es:ARENA.OWNER],FreePSPOwner ; 0
 29809                                  	mov	ax,'  ' ; 2020h
 29810                                  	mov	[es:ARENA.NAME+0],ax
 29811                                  	mov	[es:ARENA.NAME+2],ax
 29812                                  	mov	[es:ARENA.NAME+4],ax
 29813                                  	mov	[es:ARENA.NAME+6],ax
 29814                                  	pop	ax
 29815                                  	retn
 29816                                  
 29817                                  ; -----------------------------------------------------------------------------
 29818                                  ;*** findUMB - makes ES:0 point to the first MCB in UMB given as AL
 29819                                  ;            -- returns UmbHEAD pointer (0x9FFF) if passed AL==0
 29820                                  ; -----------------------------------------------------------------------------
 29821                                  ; ENTRY:    AL should be to a valid UMB number
 29822                                  ; EXIT:     ES:0 points to first MCB in UMB (_not_ the 8+SC MCB that heads it)
 29823                                  ; ERROR:    Carry set if couldn't reach UMB (too high)
 29824                                  ; USES:     Flags, ES
 29825                                  ; -----------------------------------------------------------------------------
 29826                                  
 29827                                  findUMB:
 29828                                  	push	ax
 29829                                  	push	cx
 29830                                  	push	dx
 29831                                  
 29832                                  	xor	ah,ah		; Zap ah, so al==ax
 29833                                  
 29834                                  	mov	dx,ax		; Store the to-be-found UMB number in DX
 29835                                  
 29836                                  	call	UmbHead		; Returns first UMB segment in AX
 29837                                  	mov	es,ax
 29838                                  	xor	cx,cx		; Pretend we're on UMB 0 for now...
 29839                                  
 29840                                  ; ---------------------------------------------
 29841                                  ; FU10--CX - This UMB number; 0 == conventional
 29842                                  ;       DX - The UMB number they're looking for
 29843                                  ;       ES - The current MCB address
 29844                                  ; ---------------------------------------------
 29845                                  
 29846                                  fu10:	
 29847                                  	cmp	cx,dx		; If CX==DX, we've found the UMB we're
 29848                                  	je	short fuX	; searching for--so exit.
 29849                                  
 29850                                  	call	isSysMCB	; Returns with ZF set if owner is SYSTEM
 29851                                  	jnz	short fu20
 29852                                  
 29853                                  	inc	cx		; If it _was_ SYSTEM, we're in a new UMB.
 29854                                  fu20:	
 29855                                  	mov	al,[es:ARENA.SIGNATURE]
 29856                                  	cmp	al,arena_signature_end ; 'Z'
 29857                                  	je	short fuE	; 'Z' means this was the last MCB... that's it.
 29858                                  
 29859                                  	;NextMCB es, ax		; Go on forward.
 29860                                  	mov     ax,es
 29861                                  	;add	ax,[es:3]
 29862                                  	add     ax,[es:ARENA.SIZE]
 29863                                  	inc     ax
 29864                                  	mov     es,ax
 29865                                  
 29866                                  	jmp	short fu10
 29867                                  fuE:	
 29868                                  	stc
 29869                                  fuX:
 29870                                  	pop	dx
 29871                                  	pop	cx
 29872                                  	pop	ax		; The address is already in ES.
 29873                                  	retn
 29874                                  
 29875                                  ; -----------------------------------------------------------------------------
 29876                                  ;*** BigFree - makes ES:0 point to the largest free MCB in UMB given as AL
 29877                                  ; -----------------------------------------------------------------------------
 29878                                  ; ENTRY:    AL should be to a valid UMB number
 29879                                  ; EXIT:     ES:0 points to largest free MCB in UMB, AX returns its size
 29880                                  ; ERROR:    Carry set if couldn't reach UMB (0 or too high)
 29881                                  ; USES:     Flags, ES
 29882                                  ; -----------------------------------------------------------------------------
 29883                                  
 29884                                  BigFree:
 29885                                  	push	bx
 29886                                  	push	cx
 29887                                  
 29888                                  	call	findUMB			; Returns with CF if err, else ES==MCB
 29889                                  	jc	short bfX		; (would be "jc bfE"; it just does stc)
 29890                                  
 29891                                  	xor	bx,bx			; Segment address of largest free MCB
 29892                                  	xor	cx,cx			; Size of largest free MCB
 29893                                  
 29894                                  ; ---------------------------------------------
 29895                                  ; BF10--ES - Current MCB address
 29896                                  ;       BX - Address of largest free MCB so far
 29897                                  ;       CX - Size of largest free MCB so far
 29898                                  ; ---------------------------------------------
 29899                                  
 29900                                  bf10:	
 29901                                  	call	isSysMCB		; If we've left the MCB, we're done.
 29902                                  	jz	short bf30
 29903                                  
 29904                                  	;call	isFreeMCB		; Returns with ZF set if owner is 0
 29905                                  	or	word [es:ARENA.OWNER],0
 29906                                  	jnz	short bf20
 29907                                  
 29908                                  	mov	ax,[es:ARENA.SIZE]
 29909                                  	;cmp	cx,[es:ARENA.SIZE]	; Compare sizes...
 29910                                  	cmp	cx,ax
 29911                                  	jg	short bf20		; Unless we're bigger,
 29912                                  
 29913                                  	mov	bx,es			; Store this new element's address,
 29914                                  	;mov	cx,[es:ARENA.SIZE]	; and its size.
 29915                                  	mov	cx,ax
 29916                                  
 29917                                  bf20:	mov	al,[es:ARENA.SIGNATURE]
 29918                                  	cmp	al,arena_signature_end	; 'Z'
 29919                                  	jz	short bf30		; 'Z' means this was the last MCB.
 29920                                  
 29921                                  	;NextMCB es,ax		; Go on forward.
 29922                                  	mov     ax,es
 29923                                  	;add	ax,[es:3]
 29924                                  	add     ax,[es:ARENA.SIZE]
 29925                                  	inc     ax
 29926                                  	mov     es,ax
 29927                                  
 29928                                  	jmp	short bf10
 29929                                  
 29930                                  bf30:	mov	es,bx			; Return the address
 29931                                  	mov	ax,cx			; Return the size
 29932                                  	or	bx,bx
 29933                                  	jnz	short bfX		; (if size==0, there's nothing free)
 29934                                  bfE:	
 29935                                  	stc
 29936                                  bfX:
 29937                                  	pop	cx
 29938                                  	pop	bx
 29939                                  	retn
 29940                                  
 29941                                  ; -----------------------------------------------------------------------------
 29942                                  ;*** isSpecified - sets ZF if UMB in AL wasn't specified in DH/LH line.
 29943                                  ; -----------------------------------------------------------------------------
 29944                                  ; ENTRY:    AL should be to a valid UMB number
 29945                                  ; EXIT:     ZF set if UMB wasn't specified, ZF clear if it was
 29946                                  ; ERROR:    None
 29947                                  ; USES:     Flags
 29948                                  ; -----------------------------------------------------------------------------
 29949                                  
 29950                                  isSpecified:
 29951                                  	push	ax
 29952                                  
 29953                                  	xor	bh,bh
 29954                                  	mov	bl,al
 29955                                  
 29956                                  	;getdata al, DS:UmbUsed[bx]
 29957                                  	;
 29958                                  	;push	ds
 29959                                  	;push	cs
 29960                                  	;pop	ds
 29961                                  	;mov	al,[bx+UmbUsed]
 29962                                  	;pop	ds
 29963                                  	
 29964                                  	mov	al,[cs:bx+UmbUsed]
 29965                                  	or	al,al			; Sets ZF if al==0 (ie, if unspecified)
 29966                                  
 29967                                  	pop	ax
 29968                                  	retn
 29969                                  
 29970                                  ; -----------------------------------------------------------------------------
 29971                                  ;*** shrinkMCB - breaks an MCB into two pieces, the lowest one's size==AX
 29972                                  ; -----------------------------------------------------------------------------
 29973                                  ; ENTRY:    AX == new size, ES:0 == current MCB
 29974                                  ; EXIT:     None; MCB broken if carry clear
 29975                                  ; ERROR:    Carry set if MCB isn't as large as AX+0x20 (not a useful split)
 29976                                  ; USES:     Flags
 29977                                  ; -----------------------------------------------------------------------------
 29978                                  ; If the size of the to-be-split MCB isn't at least 0x20 bytes greater than
 29979                                  ; the specified new size, the split is useless; if it's only 0x10 bytes, that
 29980                                  ; 0x10 will be used to make a header that mentions a 0-byte free space, and
 29981                                  ; that just sucks up 0x10 bytes for nothing. So we make 0x20 bytes the
 29982                                  ; minimum for performing a split.
 29983                                  ; -----------------------------------------------------------------------------
 29984                                  
 29985                                  MIN_SPLIT_SIZE	equ	20h
 29986                                  
 29987                                  shrinkMCB:
 29988                                  	;pushreg <bx, cx, es>
 29989                                  	push	bx
 29990                                  	push	cx
 29991                                  	push	es
 29992                                  
 29993                                  	mov	bx,ax			; Move things around... and
 29994                                  	mov	ax,es			; save this one for later.
 29995                                  
 29996                                  	mov	cx,[es:ARENA.SIZE]
 29997                                  	sub	cx,MIN_SPLIT_SIZE ; 32
 29998                                  	;cmp	bx,cx			; {New size} vs {Current Size-20h}
 29999                                  	;ja	short smE		; if wanted_size > cur-20h, abort.
 30000                                  	; 18/12/2022
 30001                                  	cmp	cx,bx
 30002                                  	jb	short smE ; (*)
 30003                                  
 30004                                  	mov	dl,[es:ARENA.SIGNATURE]
 30005                                  	mov	cx,[es:ARENA.SIZE]
 30006                                  
 30007                                  	mov	[es:ARENA.SIZE],bx
 30008                                  	mov	byte [es:ARENA.SIGNATURE],'M'
 30009                                  
 30010                                  	add	ax,bx
 30011                                  	inc	ax
 30012                                  	mov	es,ax			; Move to new arena area
 30013                                  
 30014                                  	mov	ax,cx
 30015                                  	sub	ax,bx
 30016                                  	; 12/12/2022
 30017                                  	; ax > 0
 30018                                  	dec	ax			; And prepare the new size
 30019                                  
 30020                                  	; 18/12/2022
 30021                                  	mov	[es:ARENA.SIGNATURE],dl
 30022                                  	;mov	word [es:ARENA.OWNER],0 ; (**)
 30023                                  	mov	[es:ARENA.SIZE],ax
 30024                                  	;mov	ax,'  ' ; 2020h
 30025                                  	;mov	[es:ARENA.NAME+0],ax ; (**)
 30026                                  	;mov	[es:ARENA.NAME+2],ax ; (**)
 30027                                  	;mov	[es:ARENA.NAME+4],ax ; (**)
 30028                                  	;mov	[es:ARENA.NAME+6],ax ; (**)
 30029                                  
 30030                                  	; 18/12/2022
 30031                                  	call	freeMCB	; (**)
 30032                                  
 30033                                  	; 12/12/2022
 30034                                  	; cf=0
 30035                                  	;clc
 30036                                  	; 18/12/2022
 30037                                  	;jmp	short smX
 30038                                  smE:	
 30039                                  	; 18/12/2022
 30040                                  	; cf=1 (*)
 30041                                  	;stc
 30042                                  smX:	
 30043                                  	;popreg	<es, cx, bx>
 30044                                  	pop	es
 30045                                  	pop	cx
 30046                                  	pop	bx
 30047                                  	retn
 30048                                  
 30049                                  ; -----------------------------------------------------------------------------
 30050                                  ;*** hideUMB? - hides as appropriate the UMB in CL
 30051                                  ; -----------------------------------------------------------------------------
 30052                                  ; ENTRY:    CL should be to a valid UMB number, and AX to its address (findUMB)
 30053                                  ; EXIT:     None; UMB is hidden as necessary
 30054                                  ; ERROR:    None
 30055                                  ; USES:     Flags, AX, CX
 30056                                  ; -----------------------------------------------------------------------------
 30057                                  ; PRIMARY LOGIC:
 30058                                  ;
 30059                                  ; If the UMB is specified in the DH/LH statement, then:
 30060                                  ;    If the largest free segment is too small (check specified size), then:
 30061                                  ;       Pretend it wasn't ever specified, and fall out of this IF.
 30062                                  ;    Else, if largest free segment is LARGER than specified size, then:
 30063                                  ;       If /S was given on the command-line, then:
 30064                                  ;          Break that element into two pieces
 30065                                  ;          Set a flag that we're shrinking
 30066                                  ;       Endif
 30067                                  ;    Endif
 30068                                  ; Endif
 30069                                  ; If the UMB is NOT specified (or was removed by the above):
 30070                                  ;    Hide all free elements in the UMB
 30071                                  ;    If the flag that we're shrinking was set, then:
 30072                                  ;       UN-hide the lower portion of the shrunken UMB
 30073                                  ;    ENDIF
 30074                                  ; ENDIF
 30075                                  ; -----------------------------------------------------------------------------
 30076                                  
 30077                                  _hideUMB_:
 30078                                  	push	bx
 30079                                  	push	dx
 30080                                  	push	es
 30081                                  
 30082                                  	mov	al,cl
 30083                                  	call	isSpecified	; Returns ZF set if al's umb was NOT specified
 30084                                  	jz	short hu_20
 30085                                  
 30086                                  	mov	al,cl		; Retrieve the size of the largest
 30087                                  	call	BigFree		; free element in AX; put its address in ES
 30088                                  	jc	short hu_20	; Oops. Errors mean skip this part.
 30089                                  
 30090                                  	push	ax		; TOS==size of BigFree in UMB (popped as BX)
 30091                                  	mov	al,cl		; Retrieve the user's specified
 30092                                  	call	GetSize		; minimum size for this umb (into AX)
 30093                                  	pop	bx		; Now BX==BigFree, AX==Specified Size
 30094                                  
 30095                                  	or	ax,ax		; If they didn't specify one,
 30096                                  	jz	short hu_20	; Skip over all this.
 30097                                  
 30098                                  	cmp	ax,bx		; Ah... if (specified > max free)
 30099                                  	jbe	short hu_10
 30100                                  
 30101                                  	mov	al,cl		;   Then mark that UMB as unused. Nya nya.
 30102                                  	call	unMarkUMB
 30103                                  	jmp	short hu_20
 30104                                  hu_10:	
 30105                                  	call	isTiny		; Returns ZF clear if user specified /S
 30106                                  	jz	short hu_20
 30107                                  
 30108                                  	call	shrinkMCB	; They specified /S, so shrink the MCB to AX
 30109                                  	jc	short hu_20	; Ah... if didn't shrink after all, skip this:
 30110                                  
 30111                                  	mov	dx,es
 30112                                  	jmp	short hu_30	; Skip the spec check.. we wanna hide this one.
 30113                                  
 30114                                  hu_20:	mov	ax,cx
 30115                                  	call	isSpecified	; If they specified this UMB, we're done...
 30116                                  	jnz	short hu_X	; so leave.
 30117                                  
 30118                                  	xor	dx,dx
 30119                                  hu_30:	
 30120                                  	mov	al,cl
 30121                                  
 30122                                  	call	hideUMB		; Hides everything in UMB #al
 30123                                  
 30124                                  	or	dx,dx		; Did we shrink a UMB? If not, DX==0,
 30125                                  	jz	short hu_X	; So we should leave.
 30126                                  
 30127                                  	mov	es,dx		; Ah, but if it isn't, DX==the MCB's address;
 30128                                  	call	unHideMCB	; Un-hides the lower portion of that MCB.
 30129                                  hu_X:	
 30130                                  	pop	es
 30131                                  	pop	dx
 30132                                  	pop	bx
 30133                                  	retn
 30134                                  
 30135                                  ; -----------------------------------------------------------------------------
 30136                                  ;*** UnFreeze - Marks FROZEN elements as FREE
 30137                                  ; -----------------------------------------------------------------------------
 30138                                  ; Entry:  None
 30139                                  ; Exit:   None; all 8+FROZEN elements are marked as FREE, from any UMB.
 30140                                  ; Error:  None
 30141                                  ; Uses:   Flags
 30142                                  ; -----------------------------------------------------------------------------
 30143                                  
 30144                                  UnFreeze:
 30145                                  	push	ax
 30146                                  	push	es
 30147                                  
 30148                                  	call	UmbHead		; Returns with carry if err, else ES == MCB
 30149                                  	jc	short ufX
 30150                                  
 30151                                  	mov	es,ax
 30152                                  
 30153                                  ; ------------------------------
 30154                                  ; UF10--ES - Current MCB address
 30155                                  ; ------------------------------
 30156                                  
 30157                                  uf10:	call	isFrozMCB	; Returns with ZF set if MCB is FROZEN
 30158                                  	jnz	short uf20
 30159                                  	call	unHideMCB
 30160                                  uf20:	
 30161                                  	mov	al,[es:ARENA.SIGNATURE]
 30162                                  
 30163                                  	cmp	al,arena_signature_end ; 'Z'
 30164                                  	jz	short ufX	; 'Z' means this was the last MCB... that's it.
 30165                                  
 30166                                  	;NextMCB es, ax		; Go on forward.
 30167                                  	mov     ax,es
 30168                                  	;add	ax,[es:3]
 30169                                  	add     ax,[es:ARENA.SIZE]
 30170                                  	inc     ax
 30171                                  	mov     es,ax
 30172                                  
 30173                                  	jmp	short uf10
 30174                                  ufX:	
 30175                                  	pop	es
 30176                                  	pop	ax
 30177                                  	retn
 30178                                  
 30179                                  ; -----------------------------------------------------------------------------
 30180                                  ;*** isFrozMCB - returns with ZF set if current MCB (ES:0) is FROZEN
 30181                                  ; -----------------------------------------------------------------------------
 30182                                  ; ENTRY:    ES:0 should point to an MCB
 30183                                  ; EXIT:     ZF set if MCB is frozen, else !ZF
 30184                                  ; ERROR:    None
 30185                                  ; USES:     Flags
 30186                                  ; -----------------------------------------------------------------------------
 30187                                  
 30188                                  isFrozMCB:
 30189                                  	;push	ax
 30190                                  
 30191                                  	;mov	ax,[es:ARENA.OWNER]	; Check the owner...
 30192                                  	;cmp	ax,SystemPSPOwner	; 8 (for US OR Japan) is valid
 30193                                  	cmp	word [es:ARENA.OWNER],SystemPSPOwner
 30194                                  	jne	short ifmX
 30195                                  
 30196                                  	;mov	ax,[es:ARENA.NAME+0]
 30197                                  	;cmp	ax,'FR' ; 5246h
 30198                                  	cmp	word [es:ARENA.NAME+0],'FR'
 30199                                  	jne	short ifmX
 30200                                  	;mov	ax,[es:ARENA.NAME+2]
 30201                                  	;cmp	ax,'OZ' ; 5A4Fh
 30202                                  	cmp	word [es:ARENA.NAME+2],'OZ'
 30203                                  	jne	short ifmX
 30204                                  	;mov	ax,[es:ARENA.NAME+4]
 30205                                  	;cmp	ax,'EN' ; 4E45h
 30206                                  	cmp	word [es:ARENA.NAME+4],'EN'
 30207                                  	jne	short ifmX
 30208                                  	;mov	ax,[es:ARENA.NAME+6]
 30209                                  	;cmp	ax,'  ' ; 2020h
 30210                                  	cmp	word [es:ARENA.NAME+6],'  '
 30211                                  ifmX:	
 30212                                  	;pop	ax
 30213                                  	retn
 30214                                  
 30215                                  ; -----------------------------------------------------------------------------
 30216                                  ;*** frezMCB - marks as 8+FROZEN the MCB at ES:0
 30217                                  ; -----------------------------------------------------------------------------
 30218                                  ; ENTRY:    ES:0 should point to an MCB
 30219                                  ; EXIT:     None; MCB frozen
 30220                                  ; ERROR:    None
 30221                                  ; USES:     None
 30222                                  ; -----------------------------------------------------------------------------
 30223                                  
 30224                                  frezMCB:
 30225                                  	mov	word [es:ARENA.OWNER],SystemPSPOwner ; 8
 30226                                  	mov	word [es:ARENA.NAME+0],'FR'
 30227                                  	mov	word [es:ARENA.NAME+2],'OZ'
 30228                                  	mov	word [es:ARENA.NAME+4],'EN'
 30229                                  	mov	word [es:ARENA.NAME+6],'  '
 30230                                  	retn
 30231                                  
 30232                                  ; -----------------------------------------------------------------------------
 30233                                  ;*** FreezeUM - Marks FROZEN all UM elements now FREE, save those in load UMB
 30234                                  ; -----------------------------------------------------------------------------
 30235                                  ; Entry:  None
 30236                                  ; Exit:   None; all free elements not in load UMB marked as 8+FROZEN
 30237                                  ; Error:  None
 30238                                  ; Uses:   Flags
 30239                                  ; -----------------------------------------------------------------------------
 30240                                  
 30241                                  FreezeUM:
 30242                                  	push	ax
 30243                                  	push	cx
 30244                                  	push	dx
 30245                                  	push	es
 30246                                  
 30247                                  	;call	GetLoadUMB
 30248                                  	mov	al,[cs:UmbLoad] ; 19/04/2019 - Retro DOS v4.0
 30249                                  
 30250                                  	xor	ah,ah		; Zap ah, so al==ax
 30251                                  	mov	dx,ax		; Store the load UMB in DX, so we can skip it
 30252                                  
 30253                                  	call	UmbHead		; Returns first UMB segment in AX
 30254                                  	mov	es,ax
 30255                                  	xor	cx,cx		; Pretend we're on UMB 0 for now...
 30256                                  
 30257                                  ; -----------------------------------------
 30258                                  ; FUM10--ES - Current MCB address
 30259                                  ;        CX - Current UMB number
 30260                                  ;        DX - UMB number to skip (load UMB)
 30261                                  ; -----------------------------------------
 30262                                  
 30263                                  fum10:	call	isSysMCB	; Returns with ZF set if owner is SYSTEM
 30264                                  	jnz	short fum20
 30265                                  
 30266                                  	inc	cx		; If it _was_ SYSTEM, we're in a new UMB.
 30267                                  fum20:	
 30268                                  	cmp	cx,dx		; If this is the load UMB, we don't want to
 30269                                  	je	short fum30	; freeze anything... so skip that section.
 30270                                  
 30271                                  	;call	isFreeMCB	; Oh. If it's not free, we can't freeze it
 30272                                  	or	word [es:ARENA.OWNER],0
 30273                                  	jnz	short fum30	; either.
 30274                                  
 30275                                  	call	frezMCB
 30276                                  fum30:	
 30277                                  	mov	al,[es:ARENA.SIGNATURE]
 30278                                  	cmp	al,arena_signature_end ; 'Z'
 30279                                  	je	short fumX	; 'Z' means this was the last MCB... that's it.
 30280                                  
 30281                                  	;NextMCB es, ax		; Go on forward.
 30282                                  	mov     ax,es
 30283                                  	;add	ax,[es:3]
 30284                                  	add     ax,[es:ARENA.SIZE]
 30285                                  	inc     ax
 30286                                  	mov     es,ax
 30287                                  	
 30288                                  	jmp	short fum10
 30289                                  
 30290                                  fumX:	pop	es
 30291                                  	pop	dx
 30292                                  	pop	cx
 30293                                  	pop	ax
 30294                                  	retn
 30295                                  
 30296                                  ; -----------------------------------------------------------------------------
 30297                                  ;*** UmbTest - returns with carry set if UMBs are not available, else CF==false
 30298                                  ; -----------------------------------------------------------------------------
 30299                                  ; ENTRY:    None
 30300                                  ; EXIT:     Carry is clear if UMBs are available, or set if they are not
 30301                                  ; ERROR:    None
 30302                                  ; USES:     CF (AX,BX,DS,ES pushed 'cause they're used by others)
 30303                                  ; -----------------------------------------------------------------------------
 30304                                  
 30305                                  UmbTest:
 30306                                  	push	ax
 30307                                  	push	bx
 30308                                  	push	ds
 30309                                  	push	es
 30310                                  
 30311                                  	call	fm_link			; Link in UMBs (if not already linked)
 30312                                  	call	WalkMem			; Check to see if they're really linked
 30313                                  	pushf				; And remember what we found out
 30314                                  	call	fm_unlink		; Unlink UMBs (if WE have linked 'em)
 30315                                  	popf				; And restore what we found out.
 30316                                  
 30317                                  	pop	es
 30318                                  	pop	ds
 30319                                  	pop	bx
 30320                                  	pop	ax
 30321                                  	retn
 30322                                  
 30323                                  ; -----------------------------------------------------------------------------
 30324                                  ;*** WalkMem - travels memory chain and returns carry clear iff UMBs are linked
 30325                                  ; -----------------------------------------------------------------------------
 30326                                  ; ENTRY:    None
 30327                                  ; EXIT:     Carry SET if MCB chain stops before 9FFF, CLEAR if stops >= 9FFF.
 30328                                  ; ERROR:    None
 30329                                  ; USES:     Flags
 30330                                  ; -----------------------------------------------------------------------------
 30331                                  
 30332                                  WalkMem:
 30333                                  	push	ax ; ?
 30334                                  	push	bx ; ?
 30335                                  	push	es ; ? no need to save contents of these registers ?
 30336                                  		   	
 30337                                  	mov	ah,GET_IN_VARS		; Call int 21h, function 52h...
 30338                                  	int	21h
 30339                                  
 30340                                  	mov	ax,[es:bx-2]
 30341                                  	mov	es,ax
 30342                                  
 30343                                  ; ------------------------------
 30344                                  ; UM10: ES = Current MCB pointer
 30345                                  ; ------------------------------
 30346                                  
 30347                                  um10:	mov	al,[es:ARENA.SIGNATURE]
 30348                                  	cmp	al,arena_signature_end ;  'Z'
 30349                                  	je	short um20		; If signature == 'Z', hay no more.
 30350                                  
 30351                                  	;NextMCB es, bx			; Move to the next MCB
 30352                                  
 30353                                  	mov     bx,es
 30354                                  	;add	bx,[es:3]
 30355                                  	add     bx,[es:ARENA.SIZE]
 30356                                  	inc     bx
 30357                                  	mov     es,bx
 30358                                  		
 30359                                  	jmp	short um10		; And restart the loop.
 30360                                  um20:	
 30361                                  	mov	ax,es
 30362                                  
 30363                                  	cmp	ax,9FFFh		; This sets CF iff ax < 9FFF.
 30364                                  
 30365                                  	pop	es ; ?
 30366                                  	pop	bx ; ?
 30367                                  	pop	ax ; ?
 30368                                  	retn
 30369                                  
 30370                                  ; -----------------------------------------------------------------------------
 30371                                  ;*** hl_unlink - unlinks UMBs if fm_umb is set to 0; restores strategy too
 30372                                  ; -----------------------------------------------------------------------------
 30373                                  ; ENTRY:    fm_umb == 1 : leave linked, else unlink
 30374                                  ; EXIT:     None
 30375                                  ; ERROR:    None
 30376                                  ; USES:     AX, BX
 30377                                  ; -----------------------------------------------------------------------------
 30378                                  
 30379                                  hl_unlink:
 30380                                  	xor	bh,bh
 30381                                  
 30382                                  	;getdata bl,fm_umb		; Restore original link-state
 30383                                  	;
 30384                                  	;push	ds
 30385                                  	;push	cs
 30386                                  	;pop	ds
 30387                                  	;mov	bl,[fm_umb]
 30388                                  	;pop	ds
 30389                                  
 30390                                  	mov	bl,[cs:fm_umb]
 30391                                  
 30392                                  	mov	ax,DOS_SET_UMBLINK ; 5803h
 30393                                  	int	21h
 30394                                  	retn
 30395                                  
 30396                                  ; ----------------------------------------------------------------------
 30397                                  ; HIGHEXIT.INC (MSDOS 6.0 - 1991) 	
 30398                                  ; ----------------------------------------------------------------------
 30399                                  ; 09/04/2019 - Retro DOS v4.0
 30400                                  
 30401                                  ;   Module:   HIGHEXIT.INC - Code executed after LoadHigh or DeviceHigh
 30402                                  ;   Date:     May 14, 1992
 30403                                  
 30404                                  ;   Modification log:
 30405                                  ;
 30406                                  ;     DATE    WHO      DESCRIPTION
 30407                                  ;   --------  -------  --------------------------------------------------------
 30408                                  ;   05/14/92  t-richj  Original
 30409                                  ;   06/21/92  t-richj  Final revisions before check-in
 30410                                  
 30411                                  UMB_HeadIdx	equ	8Ch	; Offset from ES (after func52h) to get UMBHead
 30412                                  
 30413                                  ; -----------------------------------------------------------------------------
 30414                                  ;*** UnHideUMBs - Marks HIDDEN elements as FREE
 30415                                  ; -----------------------------------------------------------------------------
 30416                                  ; ENTRY:  None; perhaps, earlier, HideUMBs was called... if not, we have
 30417                                  ;               very little to do, as no elelments will be marked as HIDDEN.
 30418                                  ; EXIT:   Sets InHigh to zero; carry clear if HideUMBs was called earlier.
 30419                                  ; ERROR:  None
 30420                                  ; USES:   fInHigh (from highvar.inc), carry flag
 30421                                  ; -----------------------------------------------------------------------------
 30422                                  
 30423                                  UnHideUMBs:
 30424                                  	push	ax		; Save ax for what we're about to do
 30425                                  
 30426                                  ; -----------------------------------------------------------------------------
 30427                                  ; BUGBUG t-richj 11-8-92: The following six lines were commented out for a good
 30428                                  ;    length of time. Those six constitute a check of whether or not we should
 30429                                  ;    indeed clean up the upper-memory chain; without such a check, COMMAND.COM
 30430                                  ;    will destroy the current link-state and memory-allocation strategy after
 30431                                  ;    every command execution.
 30432                                  ; -----------------------------------------------------------------------------
 30433                                  
 30434                                  	;getdata al,fInHigh	; Get InHigh from data segment
 30435                                  	;
 30436                                  	;push	ds
 30437                                  	;push	cs
 30438                                  	;pop	ds
 30439                                  	;mov	al,[fInHigh]
 30440                                  	;pop	ds	
 30441                                  
 30442                                  	mov	al,[cs:fInHigh]
 30443                                  
 30444                                  	or	al,al
 30445                                  	jnz	short uhu10	; If didn't call loadhigh/devicehigh earlier,
 30446                                  
 30447                                  	pop	ax		; then there's nothing to do here... so
 30448                                  	stc			; restore everything and return. Just like
 30449                                  	retn			; that.
 30450                                  uhu10:	
 30451                                  	call	linkumb		; Make sure UMBs are linked in.
 30452                                  	call	FreeUMBs
 30453                                  
 30454                                  	;putdata fInHigh,0	; We're leaving, so update fInHigh.
 30455                                  	;
 30456                                  	;push	es
 30457                                  	;push	cs
 30458                                  	;pop	es
 30459                                  	;mov	byte [es:fInHigh],0
 30460                                  	;pop	ds	
 30461                                  
 30462                                  	mov	byte [cs:fInHigh],0	
 30463                                  
 30464                                  	call	he_unlink	; Unlink UMBs
 30465                                  
 30466                                  	pop	ax
 30467                                  	; 12/12/2022
 30468                                  	;clc	; 12/12/2022 (this clc may not be necessary!?)
 30469                                  	retn
 30470                                  
 30471                                  ; -----------------------------------------------------------------------------
 30472                                  ;*** he_unlink - unlinks UMBs if fm_umb is set to 0
 30473                                  ; -----------------------------------------------------------------------------
 30474                                  ; ENTRY:    fm_umb == 1 : leave linked, else unlink
 30475                                  ; EXIT:     None
 30476                                  ; ERROR:    None
 30477                                  ; USES:     AX, BX
 30478                                  ; -----------------------------------------------------------------------------
 30479                                  
 30480                                  he_unlink:
 30481                                  	xor	bh, bh
 30482                                  
 30483                                  	;getdata bl, fm_umb	; Restore original link-state
 30484                                  	mov	bl,[cs:fm_umb]	
 30485                                  
 30486                                  	mov	ax,DOS_SET_UMBLINK ; 5803h
 30487                                  	int	21h
 30488                                  	retn
 30489                                  
 30490                                  ; -----------------------------------------------------------------------------
 30491                                  ;*** freeUMBs - frees all HIDDEN memory elements in upper-memory.
 30492                                  ; -----------------------------------------------------------------------------
 30493                                  ; ENTRY:    None
 30494                                  ; EXIT:     None; HIDDEN memory elements returned to FREE
 30495                                  ; ERROR:    None (ignore CF)
 30496                                  ; USES:     Flags
 30497                                  ; -----------------------------------------------------------------------------
 30498                                  
 30499                                  FreeUMBs:
 30500                                  	push	ax
 30501                                  	push	es
 30502                                  
 30503                                  	call	HeadUmb		; Returns with carry if err, else ES == MCB
 30504                                  	jc	short fusX
 30505                                  
 30506                                  	mov	es,ax		; Prepare for the loop; ES = current MCB addr.
 30507                                  fus10:	
 30508                                  	call	isHideMCB	; Returns with ZF set if owner is 0
 30509                                  	jnz	short fus20
 30510                                  	call	freeMCB
 30511                                  fus20:	   
 30512                                  	mov	al,[es:ARENA.SIGNATURE]
 30513                                  	cmp	al,arena_signature_end ; 'Z'
 30514                                  	jz	short fusX	; That means this was the last MCB--that's it.
 30515                                  
 30516                                  	mov	ax,es
 30517                                  	add	ax,[es:ARENA.SIZE]
 30518                                  	inc	ax
 30519                                  	mov	es,ax		; Go on forward.
 30520                                  
 30521                                  	jmp	short fus10
 30522                                  fusX:	
 30523                                  	pop	es
 30524                                  	pop	ax
 30525                                  	retn
 30526                                  
 30527                                  ; -----------------------------------------------------------------------------
 30528                                  ;*** isHideMCB - returns with ZF set if current MCB (ES:0) is HIDDEN
 30529                                  ; -----------------------------------------------------------------------------
 30530                                  ; ENTRY:    ES:0 should point to an MCB
 30531                                  ; EXIT:     ZF set if MCB is hidden, else !ZF
 30532                                  ; ERROR:    None
 30533                                  ; USES:     Flags
 30534                                  ; -----------------------------------------------------------------------------
 30535                                  
 30536                                  isHideMCB:
 30537                                  	;push	ax
 30538                                  
 30539                                  	cmp	word [es:ARENA.OWNER],SystemPSPOwner ; If the owner's SYSTEM
 30540                                  	jne	short ihm_x				; then check for HIDDEN
 30541                                  
 30542                                  	;mov	ax,[es:ARENA.NAME]
 30543                                  	;cmp	ax,'HI' ; 4948h
 30544                                  	cmp	word [es:ARENA.NAME+0],'HI'
 30545                                  	jne	short ihm_x
 30546                                  	;mov	ax,[es:ARENA.NAME+2]
 30547                                  	;cmp	ax,'DD' ; 4444h
 30548                                  	cmp	word [es:ARENA.NAME+2],'DD'
 30549                                  	jne	short ihm_x
 30550                                  	;mov	ax,[es:ARENA.NAME+4]
 30551                                  	;cmp	ax,'EN' ; 4E45h
 30552                                  	cmp	word [es:ARENA.NAME+4],'EN'
 30553                                  	jne	short ihm_x
 30554                                  	;mov	ax,[es:ARENA.NAME+6]
 30555                                  	;cmp	ax,'  ' ; 2020h
 30556                                  	cmp	word [es:ARENA.NAME+6],'  '
 30557                                  ihm_x:	
 30558                                  	;pop	ax
 30559                                  	retn
 30560                                  
 30561                                  ; -----------------------------------------------------------------------------
 30562                                  ;*** freeMCB - marks as free the MCB at ES:0
 30563                                  ; -----------------------------------------------------------------------------
 30564                                  ; ENTRY:    ES:0 should point to an MCB
 30565                                  ; EXIT:     None; MCB free'd
 30566                                  ; ERROR:    None
 30567                                  ; USES:     AX
 30568                                  ; -----------------------------------------------------------------------------
 30569                                  
 30570                                  freeMCB:
 30571                                  	mov	word [es:ARENA.OWNER],0
 30572                                  	mov	ax,'  '
 30573                                  	mov	[es:ARENA.NAME+0],ax
 30574                                  	mov	[es:ARENA.NAME+2],ax
 30575                                  	mov	[es:ARENA.NAME+4],ax
 30576                                  	mov	[es:ARENA.NAME+6],ax
 30577                                  	retn
 30578                                  
 30579                                  ; -----------------------------------------------------------------------------
 30580                                  ;*** HeadUmb - returns in AX the address of the first UMB block (0x9FFF)
 30581                                  ; -----------------------------------------------------------------------------
 30582                                  ; ENTRY:  Nothing
 30583                                  ; EXIT:   AX contains 0x9FFF for most systems
 30584                                  ; ERROR:  Carry set if pointer is 0xFFFF (if not set up yet--DH runs into this)
 30585                                  ; USES:   Flags, AX
 30586                                  ; -----------------------------------------------------------------------------
 30587                                  
 30588                                  HeadUmb:
 30589                                  	; 13/05/2019
 30590                                  
 30591                                  	;push	si ; ?
 30592                                  	;push	ds ; ?
 30593                                  	;push	es
 30594                                  	;push	bx ; *
 30595                                  
 30596                                  	; 09/04/2019
 30597                                  	; !!! No need to save es,bx,ds,si above !!! (es,bx are changed here)
 30598                                  
 30599                                  	mov	ah,GET_IN_VARS		; Call int 21h, function 52h...
 30600                                  	int	21h
 30601                                  			; DOS - 2+ internal - GET LIST OF LISTS
 30602                                  			; Return: ES:BX -> DOS list of lists
 30603                                  	;mov	ax,[es:8Ch]
 30604                                  	mov	ax,[es:UMB_HeadIdx]	; And read what's in ES:008C
 30605                                  	cmp	ax,0FFFFh
 30606                                  	;je	short xhu_e		; If it's 0xFFFF, it's an error...
 30607                                  
 30608                                  	;clc				; Else, it isn't.
 30609                                  	;jmp	short xhu_x
 30610                                  xhu_e:	
 30611                                  	;stc
 30612                                  	cmc	; 09/04/2019 - Retro DOS v4.0 ; *
 30613                                  xhu_x:	
 30614                                  	;pop	bx ; *
 30615                                  	;pop	es	
 30616                                  	;pop	ds ; ?
 30617                                  	;pop	si ; ?
 30618                                  	retn
 30619                                  
 30620                                  ; -----------------------------------------------------------------------------
 30621                                  ;*** linkumb - links UMBs not already linked in; updates fm_umb as needed
 30622                                  ; -----------------------------------------------------------------------------
 30623                                  ; ENTRY:    None
 30624                                  ; EXIT:     fm_umb == 0 if not linked in previously, 1 if already linked in
 30625                                  ; ERROR:    None
 30626                                  ; USES:     AX, BX, fm_umb
 30627                                  ; -----------------------------------------------------------------------------
 30628                                  
 30629                                  linkumb:
 30630                                  	mov	ax,DOS_GET_UMBLINK ; 5802h
 30631                                  	int	21h			; Current link-state is now in al
 30632                                  
 30633                                  	or	al,al			; BUGBUG: proper check?
 30634                                  	jnz	short lumbX		; Jumps if UMBs already linked in
 30635                                  
 30636                                  	mov	ax,DOS_SET_UMBLINK ; 5803h
 30637                                  	mov	bx,1
 30638                                  	int	21h
 30639                                  lumbX:
 30640                                  	retn
 30641                                  
 30642                                  %endif
 30643                                  
 30644                                  ; 01/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 30645                                  ; (SYSINIT:2B5Fh)
 30646                                  
 30647                                  ; ----------------------------------------------------------------------
 30648                                  ; SYSCONF.ASM (MSDOS 6.0 - 1991) 	
 30649                                  ; ----------------------------------------------------------------------
 30650                                  ; 09/04/2019 - Retro DOS v4.0
 30651                                  
 30652                                  ;----------------------------------------------------------------------------
 30653                                  ;
 30654                                  ; procedure : InitDevLoad
 30655                                  ;
 30656                                  ;	Input : DeviceHi = 0 indicates load DD in low memory
 30657                                  ;			 = 1 indicates load in UMB:
 30658                                  ;		           ConvLoad = 0 indicates a new-style load (see below)
 30659                                  ;		                    = 1 indicates a DOS 5-style load
 30660                                  ;		DevSize  = Size of the device driver file in paras
 30661                                  ;
 30662                                  ;	Output : none
 30663                                  ;
 30664                                  ;	Initializes DevLoadAddr, DevLoadEnd & DevEntry.
 30665                                  ;	Also sets up a header for the Device driver entry for mem utility
 30666                                  ;
 30667                                  ;----------------------------------------------------------------------------
 30668                                  ; For a "new-style load", we break off the current DevEntry and link the umbs
 30669                                  ; as we see fit, using HideUMBs (and UnHideUMBs at exit, though _it_ decides
 30670                                  ; whether it's entitled to do anything). HideUMBs uses the chart built by
 30671                                  ; ParseVar to determine which UMBs to leave FREE, and which not.
 30672                                  ;----------------------------------------------------------------------------
 30673                                  
 30674                                  	; 01/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 30675                                  InitDevLoad:
 30676                                  	; 11/12/2022
 30677                                  	; ds = cs
 30678 00002810 803E[FF1E]00            	cmp	byte [DeviceHi],0
 30679                                  	;cmp	byte [cs:DeviceHi],0	; Are we loading in UMB ?
 30680                                  	;je	short InitForLo		; no, init for lo mem
 30681 00002815 741F                    	je	short initforlo_x ; 09/04/2019
 30682                                  
 30683                                  ; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 30684                                  ;	cmp	byte [cs:ConvLoad],1	; Are we loading as per DOS 5?
 30685                                  ;	je	short InitForConv
 30686                                  ;
 30687                                  ;; There are two stages to preparing upper-memory; first, we mark as 8+HIDDEN
 30688                                  ;; any areas not specified on the /L:... chain. Second, we mark as 8+FROZEN
 30689                                  ;; any areas left in upper-memory, except for elements in the load UMB...
 30690                                  ;; we then malloc space as per Dos-5 style, and mark as free any spaces which
 30691                                  ;; are 8+FROZEN (but leave 8+HIDDEN still hidden). The load is performed,
 30692                                  ;; and UnHideUMBs later on marks all 8+HIDDEN as free.
 30693                                  ;
 30694                                  ;	call	ShrinkUMB		; Stop using the old device arena
 30695                                  ;
 30696                                  ;	call	HideUMBs		; Mark up the UM area as we see fit
 30697                                  ;	call	FreezeUM		; Hide everything BUT the load area
 30698                                  ;	call	GetUMBForDev		; And grab that load area as needed
 30699                                  ;	pushf
 30700                                  ;	call	UnFreeze		; Then unhide everything frozen
 30701                                  ;	popf
 30702                                  ;
 30703                                  ;	jc	short InitForLo		; (if carry, it's loading low)
 30704                                  ;
 30705                                  ;	jmp	short InitForHi
 30706                                  
 30707                                  	; 01/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 30708                                  	; (SYSINIT:2B67h)
 30709                                  InitForConv:
 30710                                  	; 11/12/2022
 30711                                  	; ds = cs
 30712 00002817 E83700                  	call	SpaceInUMB		; Do we have space left in the
 30713                                  					;  current UMB ?
 30714 0000281A 7308                    	jnc	short InitForHi		; yes, we have
 30715 0000281C E84F04                  	call	ShrinkUMB		; shrink the current UMB in use
 30716 0000281F E84500                  	call	GetUMBForDev		; else try to allocate new UMB
 30717 00002822 720D                    	jc	short InitForLo		; we didn't succeed, so load
 30718                                  					;  in low memory
 30719                                  InitForHi:
 30720                                  	; 11/12/2022
 30721                                  	; ds = cs
 30722                                  	;mov	ax,[cs:DevUMBFree]	; get Para addr of free mem
 30723                                  	;mov	dx,[cs:DevUMBAddr]	; UMB start addr
 30724                                  	;add	dx,[cs:DevUMBSize]	; DX = UMB End addr
 30725 00002824 A1[F51E]                	mov	ax,[DevUMBFree]
 30726 00002827 8B16[F11E]              	mov	dx,[DevUMBAddr]
 30727 0000282B 0316[F31E]              	add	dx,[DevUMBSize]
 30728 0000282F EB0C                    	jmp	short idl1
 30729                                  
 30730                                  InitForLo:
 30731                                  	; 11/12/2022
 30732                                  	; ds = cs
 30733                                  	;mov	byte [cs:DeviceHi],0	; in case we failed to load
 30734 00002831 C606[FF1E]00            	mov	byte [DeviceHi],0
 30735                                  initforlo_x:
 30736                                  	; 11/12/2022
 30737                                  	; ds = cs
 30738                                  					;  into UMB indicate that
 30739                                  					;  we are loading low
 30740                                  	;mov	ax,[cs:memhi]		; AX = start of Low memory
 30741                                  	;mov	dx,[cs:ALLOCLIM]	; DX = End of Low memory
 30742 00002836 A1[E003]                	mov	ax,[memhi]
 30743 00002839 8B16[A302]              	mov	dx,[ALLOCLIM]
 30744                                  idl1:
 30745 0000283D E86C00                  	call	DevSetMark		; setup a sub-arena for DD
 30746                                  	; 11/12/2022
 30747                                  	; ds = cs
 30748                                  	;mov	[cs:DevLoadAddr],ax	; init the Device load address
 30749                                  	;mov	[cs:DevLoadEnd],dx	; init the limit of the block
 30750                                  	;mov	word [cs:DevEntry],0	; init Entry point to DD
 30751                                  	;mov	[cs:DevEntry+2],ax
 30752 00002840 A3[E41E]                	mov	[DevLoadAddr],ax
 30753 00002843 8916[E61E]              	mov	[DevLoadEnd],dx
 30754 00002847 C706[E81E]0000          	mov	word [DevEntry],0
 30755 0000284D A3[EA1E]                	mov	[DevEntry+2],ax
 30756 00002850 C3                      	retn
 30757                                  
 30758                                  ;----------------------------------------------------------------------------
 30759                                  ;
 30760                                  ; procedure : SpaceInUMB?
 30761                                  ;
 30762                                  ;	Input : DevUMBAddr, DevUMBSize, DevUMBFree & DevSize
 30763                                  ;	Output : Carry set if no space in UMB
 30764                                  ;		 Carry clear if Space is available for the device in
 30765                                  ;		   current UMB
 30766                                  ;
 30767                                  ;----------------------------------------------------------------------------
 30768                                  
 30769                                  SpaceInUMB:
 30770                                  	; 11/12/2022
 30771                                  	; ds = cs
 30772                                  	;mov	ax,[cs:DevUMBSize]
 30773                                  	;add	ax,[cs:DevUMBAddr]	; End of UMB
 30774                                  	;sub	ax,[cs:DevUMBFree]	; - Free = Remaining space
 30775 00002851 A1[F31E]                	mov	ax,[DevUMBSize]
 30776 00002854 0306[F11E]              	add	ax,[DevUMBAddr]		; End of UMB
 30777 00002858 2B06[F51E]              	sub	ax,[DevUMBFree]		; - Free = Remaining space
 30778                                  	; 11/12/2022
 30779                                  	;or	ax,ax			; Nospace ?
 30780                                  	;jnz	short spcinumb1
 30781                                  	;stc
 30782                                  	;retn
 30783                                  	; 11/12/2022
 30784 0000285C 83F801                  	cmp	ax,1
 30785 0000285F 7205                    	jb	short spcinumb2	; cf=1
 30786                                  spcinumb1:
 30787 00002861 48                      	dec	ax			; space for sub-arena
 30788                                  	; 11/12/2022
 30789                                  	; ds = cs
 30790 00002862 3B06[E21E]              	cmp	ax,[DevSize]
 30791                                  	;cmp	ax,[cs:DevSize]		; do we have space ?
 30792                                  spcinumb2:
 30793 00002866 C3                      	retn
 30794                                  
 30795                                  ;----------------------------------------------------------------------------
 30796                                  ;
 30797                                  ; procedure : PrepareMark
 30798                                  ;
 30799                                  ;	Input : AX==Address of MCB (not addr of free space), BX==Size
 30800                                  ;	Output : None; MCB marked appropriately and DevUMB* set as needed.
 30801                                  ;
 30802                                  ;----------------------------------------------------------------------------
 30803                                  
 30804                                  ;	; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 30805                                  ;
 30806                                  ;PrepareMark:
 30807                                  ;	push	ds
 30808                                  ;	mov	ds,ax
 30809                                  ;	mov	word [ARENA.OWNER],8
 30810                                  ;	mov	word [ARENA.NAME],'SD' ; 4453h
 30811                                  ;	pop	ds
 30812                                  ;
 30813                                  ;	inc	ax
 30814                                  ;	mov	[cs:DevUMBAddr],ax
 30815                                  ;	mov	[cs:DevUMBFree],ax
 30816                                  ;	mov	[cs:DevUMBSize],bx	; update the UMB Variables
 30817                                  ;	retn
 30818                                  
 30819                                  ;----------------------------------------------------------------------------
 30820                                  ;
 30821                                  ; procedure : GetUMBForDev
 30822                                  ;
 30823                                  ;	Input : DevSize
 30824                                  ;	Output : Carry set if couldn't allocate a UMB to fit the
 30825                                  ;		 the device.
 30826                                  ;		 If success carry clear
 30827                                  ;
 30828                                  ;	Allocates the biggest UMB for loading devices and updates
 30829                                  ;	DevUMBSize, DevUMBAddr & DevUMBFree if it succeeded in allocating
 30830                                  ;	UMB.
 30831                                  ;
 30832                                  ;	This routine relies on the fact that all of the low memory
 30833                                  ;	is allocated, and any DOS alloc calls should return memory
 30834                                  ;	from the UMB pool.
 30835                                  ;
 30836                                  ;----------------------------------------------------------------------------
 30837                                  
 30838                                  	; 01/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 30839                                  	; (SYSINIT:2BC6h)
 30840                                  
 30841                                  GetUMBForDev:
 30842                                  	; 11/12/2022
 30843                                  	; ds = cs
 30844 00002867 BBFFFF                  	mov	bx,0FFFFh
 30845 0000286A B80048                  	mov	ax,4800h
 30846 0000286D CD21                    	int	21h
 30847                                  		; DOS - 2+ - ALLOCATE MEMORY
 30848                                  		; BX = number of 16-byte paragraphs desired
 30849                                  
 30850 0000286F 09DB                    	or	bx,bx
 30851 00002871 742C                    	jz	short gufd_err
 30852                                  
 30853 00002873 4B                      	dec	bx
 30854                                  	; 11/12/2022
 30855                                  	; ds = cs
 30856 00002874 391E[E21E]              	cmp	[DevSize],bx
 30857                                  	;cmp	[cs:DevSize],bx
 30858 00002878 7725                    	ja	short gufd_err
 30859 0000287A 43                      	inc	bx
 30860                                  
 30861 0000287B B80048                  	mov	ax,4800h
 30862 0000287E CD21                    	int	21h
 30863 00002880 721D                    	jc	short gufd_err
 30864                                  
 30865                                  	; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 30866                                  	;dec	ax
 30867                                  	;call	PrepareMark
 30868                                  	;
 30869                                  PrepareMark:
 30870 00002882 1E                      	push	ds
 30871 00002883 48                      	dec	ax
 30872 00002884 8ED8                    	mov	ds,ax
 30873 00002886 C70601000800            	mov	word [ARENA.OWNER],8
 30874 0000288C C70608005344            	mov	word [ARENA.NAME],'SD' ; 4453h
 30875 00002892 40                      	inc	ax
 30876 00002893 1F                      	pop	ds
 30877                                  	; 11/12/2022
 30878                                  	; ds = cs
 30879                                  	;mov	[cs:DevUMBSize],bx	; update the UMB Variables
 30880                                  	;mov	[cs:DevUMBAddr],ax
 30881                                  	;mov	[cs:DevUMBFree],ax
 30882 00002894 891E[F31E]              	mov	[DevUMBSize],bx		; update the UMB Variables
 30883 00002898 A3[F11E]                	mov	[DevUMBAddr],ax
 30884 0000289B A3[F51E]                	mov	[DevUMBFree],ax
 30885                                  	;
 30886                                  	; 11/12/2022
 30887                                  	; cf=0
 30888                                  	;clc				; mark no error
 30889 0000289E C3                      	retn
 30890                                  gufd_err:
 30891 0000289F 31C0                    	xor	ax,ax ; 0
 30892                                  	; 11/12/2022
 30893                                  	; ds = cs
 30894                                  	;mov	[cs:DevUMBSize],ax	; erase the previous values
 30895                                  	;mov	[cs:DevUMBAddr],ax
 30896                                  	;mov	[cs:DevUMBFree],ax
 30897 000028A1 A3[F31E]                	mov	[DevUMBSize],ax		; erase the previous values
 30898 000028A4 A3[F11E]                	mov	[DevUMBAddr],ax
 30899 000028A7 A3[F51E]                	mov	[DevUMBFree],ax
 30900 000028AA F9                      	stc
 30901 000028AB C3                      	retn
 30902                                  
 30903                                  ;----------------------------------------------------------------------------
 30904                                  ;
 30905                                  ; procedure : DevSetMark
 30906                                  ;
 30907                                  ;	Input : AX - Free segment were device is going to be loaded
 30908                                  ;	Output : AX - Segment at which device can be loaded (AX=AX+1)
 30909                                  ;
 30910                                  ;	Creates a sub-arena for the device driver
 30911                                  ;	puts 'D' marker in the sub-arena
 30912                                  ;	Put the owner of the sub-arena as (AX+1)
 30913                                  ;	Copies the file name into sub-arena name field
 30914                                  ;
 30915                                  ;	Size field of the sub-arena will be set only at succesful
 30916                                  ;	completion of Device load.
 30917                                  ;
 30918                                  ;----------------------------------------------------------------------------
 30919                                  
 30920                                  	; 01/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 30921                                  	; (SYSINIT:2C13h)
 30922                                  
 30923                                  DevSetMark:
 30924 000028AC 06                      	push	es
 30925 000028AD 57                      	push	di
 30926 000028AE 1E                      	push	ds
 30927 000028AF 56                      	push	si
 30928 000028B0 8EC0                    	mov	es,ax
 30929 000028B2 26C606000044            	mov	byte [es:devmark.id],devmark_device ; 'D'
 30930 000028B8 40                      	inc	ax
 30931 000028B9 26A30100                	mov	[es:devmark.seg],ax
 30932                                  
 30933                                  ;-------------- Copy file name
 30934                                  
 30935 000028BD 50                      	push	ax			; save load addr
 30936 000028BE 2EC536[F803]            	lds	si,[cs:bpb_addr]	; command line is still there
 30937                                  
 30938 000028C3 89F7                    	mov	di,si
 30939 000028C5 FC                      	cld
 30940                                  dsm_again:
 30941 000028C6 AC                      	lodsb
 30942 000028C7 3C3A                    	cmp	al,':'
 30943 000028C9 7504                    	jne	short isit_slash
 30944 000028CB 89F7                    	mov	di,si
 30945 000028CD EBF7                    	jmp	short dsm_again
 30946                                  isit_slash:
 30947 000028CF 3C5C                    	cmp	al, '\'
 30948 000028D1 7504                    	jne	short isit_null
 30949 000028D3 89F7                    	mov	di,si
 30950 000028D5 EBEF                    	jmp	short dsm_again
 30951                                  isit_null:
 30952 000028D7 08C0                    	or	al,al
 30953 000028D9 75EB                    	jnz	short dsm_again
 30954 000028DB 89FE                    	mov	si,di
 30955                                  
 30956 000028DD BF0800                  	mov	di,devmark.filename ; 8
 30957 000028E0 B90800                  	mov	cx,8			; maximum 8 characters
 30958                                  dsm_next_char:
 30959 000028E3 AC                      	lodsb
 30960 000028E4 08C0                    	or	al, al
 30961 000028E6 7407                    	jz	short blankout
 30962 000028E8 3C2E                    	cmp	al, '.'
 30963 000028EA 7403                    	je	short blankout
 30964 000028EC AA                      	stosb
 30965 000028ED E2F4                    	loop	dsm_next_char
 30966                                  blankout:
 30967 000028EF E304                    	jcxz	dsm_exit
 30968 000028F1 B020                    	mov	al, ' '
 30969 000028F3 F3AA                    	rep	stosb			; blank out the rest
 30970                                  dsm_exit:
 30971 000028F5 58                      	pop	ax			; restore load addr
 30972 000028F6 5E                      	pop	si
 30973 000028F7 1F                      	pop	ds
 30974 000028F8 5F                      	pop	di
 30975 000028F9 07                      	pop	es
 30976 000028FA C3                      	retn
 30977                                  
 30978                                  ;----------------------------------------------------------------------------
 30979                                  ;
 30980                                  ; procedure : SizeDevice
 30981                                  ;
 30982                                  ;	Input : ES:SI - points to device file to be sized
 30983                                  ;
 30984                                  ;	Output : Carry set if file cannot be opened or if it is an OS2EXE file
 30985                                  ;
 30986                                  ;	Calculates the size of the device file in paras and stores it
 30987                                  ;	in DevSize
 30988                                  ;
 30989                                  ;----------------------------------------------------------------------------
 30990                                  
 30991                                  	; 01/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 30992                                  SizeDevice:
 30993                                  	; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 30994                                  	; 11/12/2022 ; *
 30995 000028FB 1E                      	push	ds ; *
 30996 000028FC 06                      	push	es
 30997 000028FD 1F                      	pop	ds
 30998 000028FE 89F2                    	mov	dx,si			; ds:dx -> file name
 30999 00002900 B8003D                  	mov	ax,3D00h		; open
 31000 00002903 CD21                    	int	21h
 31001 00002905 7243                    	jc	short sd_err		; open failed
 31002                                  
 31003 00002907 89C3                    	mov	bx,ax			; BX - file handle
 31004 00002909 B80242                  	mov	ax,4202h		; seek
 31005 0000290C 31C9                    	xor	cx,cx
 31006 0000290E 89CA                    	mov	dx,cx			; to end of file
 31007 00002910 CD21                    	int	21h
 31008 00002912 722F                    	jc	short sd_close		; did seek fail (impossible)
 31009 00002914 83C00F                  	add	ax,15			; para convert
 31010 00002917 83D200                  	adc	dx,0
 31011 0000291A F7C2F0FF                	test	dx,0FFF0h		; size > 0ffff paras ?
 31012 0000291E 7409                    	jz	short szdev1		; no
 31013 00002920 2EC706[E21E]FFFF        	mov	word [cs:DevSize],0FFFFh ; invalid device size
 31014                                  					; assuming that we fail later
 31015 00002927 EB1A                    	jmp	short sd_close
 31016                                  szdev1:
 31017 00002929 B104                    	mov	cl,4			; convert it to paras
 31018 0000292B D3E8                    	shr	ax,cl
 31019 0000292D B10C                    	mov	cl,12
 31020 0000292F D3E2                    	shl	dx,cl
 31021 00002931 09D0                    	or	ax,dx
 31022                                  	;
 31023                                  	; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 31024 00002933 2E3B06[001F]            	cmp     ax,[cs:DevSizeOption]
 31025                                  	;ja	short szdev2
 31026                                  	; 14/08/2023
 31027 00002938 7305                    	jnb	short szdev2
 31028 0000293A 2EA1[001F]              	mov     ax,[cs:DevSizeOption]
 31029                                  	; 12/12/2022
 31030 0000293E F8                      	clc
 31031                                  szdev2:
 31032 0000293F 2EA3[E21E]              	mov	[cs:DevSize],ax		; save file size
 31033                                  
 31034                                  	; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 31035                                  	; 12/12/2022
 31036                                  	; cf=0
 31037                                  	;clc
 31038                                  sd_close:
 31039 00002943 9C                      	pushf				; let close not spoil our
 31040                                  					;  carry flag
 31041 00002944 B8003E                  	mov	ax,3E00h		; close
 31042 00002947 CD21                    	int	21h			; we are not checking for err
 31043 00002949 9D                      	popf
 31044                                  sd_err:
 31045                                  	; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 31046                                  	; 11/12/2022 ; *
 31047 0000294A 1F                      	pop     ds ; *
 31048 0000294B C3                      	retn
 31049                                  
 31050                                  ;----------------------------------------------------------------------------
 31051                                  ;
 31052                                  ; procedure : ExecDev
 31053                                  ;
 31054                                  ;	Input : ds:dx -> device to be executed
 31055                                  ;		DevLoadAddr - contains where device has to be loaded
 31056                                  ;
 31057                                  ;	Output : Carry if error
 31058                                  ;		 Carry clear if no error
 31059                                  ;
 31060                                  ;	Loads a device driver using the 4b03h function call
 31061                                  ;
 31062                                  ;----------------------------------------------------------------------------
 31063                                  
 31064                                  	; 01/11/2022
 31065                                  ExecDev:
 31066 0000294C 2E8B1E[E41E]            	mov	bx,[cs:DevLoadAddr]
 31067 00002951 2E891E[FB1E]            	mov	[cs:DevExecAddr],bx	; Load the parameter block
 31068                                  					;  block for exec with
 31069                                  					;  Load address
 31070 00002956 2E891E[FD1E]            	mov	[cs:DevExecReloc],bx
 31071 0000295B 8CCB                    	mov	bx,cs
 31072 0000295D 8EC3                    	mov	es,bx
 31073 0000295F BB[FB1E]                	mov	bx,DevExecAddr		;es:bx points to parameters
 31074 00002962 B003                    	mov	al,3	; (load program only)
 31075 00002964 B44B                    	mov	ah,EXEC ; 4Bh
 31076 00002966 CD21                    	int	21h			;load in the device driver
 31077                                   		; DOS - 2+ - LOAD OR EXECUTE (EXEC)
 31078                                  		; DS:DX -> ASCIZ filename
 31079                                  		; ES:BX -> parameter block
 31080                                  		; AL = subfunction 
 31081 00002968 C3                      	retn
 31082                                  
 31083                                  ;----------------------------------------------------------------------------
 31084                                  ;
 31085                                  ; procedure : RetFromUM
 31086                                  ;
 31087                                  ;	Input : None
 31088                                  ;	Output : ConvLoad set if didn't previously call HideUMBs
 31089                                  ;		 ConvLoad clear if did.
 31090                                  ;
 31091                                  ;	Prepares memory for more devices after returning from loading one
 31092                                  ;	using the DOS 6 options (/L:... etc).
 31093                                  ;
 31094                                  ;----------------------------------------------------------------------------
 31095                                  
 31096                                  	; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 31097                                  ;RetFromUM:
 31098                                  ;	pushf
 31099                                  ;	mov	byte [cs:ConvLoad],1
 31100                                  ;	call	UnHideUMBs
 31101                                  ;	jc	short rfUM1		; Skip this if didn't HideUMBs
 31102                                  ;	mov	byte [cs:ConvLoad],0
 31103                                  ;rfUM1:	
 31104                                  ;	popf
 31105                                  ;	retn
 31106                                  
 31107                                  ;----------------------------------------------------------------------------
 31108                                  ;
 31109                                  ; procedure : RemoveNull
 31110                                  ;
 31111                                  ;	Input : ES:SI points to a null terminated string
 31112                                  ;
 31113                                  ;	Output : none
 31114                                  ;
 31115                                  ;	Replaces the null at the end of a string with blank
 31116                                  ;
 31117                                  ;----------------------------------------------------------------------------
 31118                                  
 31119                                  	; 01/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 31120                                  	; (SYSINIT:2CCEh)
 31121                                  RemoveNull:
 31122                                  	; 11/12/2022
 31123                                  	; ds = cs
 31124                                  rn_next:
 31125 00002969 268A1C                  	mov	bl,[es:si]
 31126 0000296C 08DB                    	or	bl,bl			; null ?
 31127 0000296E 7403                    	jz	short rn_gotnull
 31128 00002970 46                      	inc	si			; advance the pointer
 31129 00002971 EBF6                    	jmp	short rn_next
 31130                                  rn_gotnull:
 31131                                  	; 11/12/2022
 31132 00002973 8A1E[141F]              	mov	bl,[DevSavedDelim]
 31133                                  	;mov	bl,[cs:DevSavedDelim]
 31134 00002977 26881C                  	mov	[es:si],bl		; replace null with blank
 31135                                  	; 02/11/2022
 31136                                  ; 11/12/2022
 31137                                  rba_ok:		; 10/04/2019
 31138 0000297A C3                      	retn
 31139                                  
 31140                                  ;----------------------------------------------------------------------------
 31141                                  ;
 31142                                  ; procedure : RoundBreakAddr
 31143                                  ;
 31144                                  ;	Input : DevBrkAddr
 31145                                  ;	Output : DevBrkAddr
 31146                                  ;
 31147                                  ;	Rounds DevBrkAddr to a para address so that it is of the form xxxx:0
 31148                                  ;
 31149                                  ;----------------------------------------------------------------------------
 31150                                  
 31151                                  RoundBreakAddr:
 31152 0000297B 2EA1[EC1E]              	mov	ax,[cs:DevBrkAddr]
 31153 0000297F E837E7                  	call	ParaRound
 31154 00002982 2E0106[EE1E]            	add	[cs:DevBrkAddr+2],ax
 31155 00002987 2EC706[EC1E]0000        	mov	word [cs:DevBrkAddr],0
 31156 0000298E 2EA1[E61E]              	mov	ax,[cs:DevLoadEnd]
 31157 00002992 2E3906[EE1E]            	cmp	[cs:DevBrkAddr+2],ax
 31158 00002997 76E1                    	jbe	short rba_ok
 31159 00002999 E96507                  	jmp	mem_err
 31160                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 31161                                  	; 11/12/2022
 31162                                  ;rba_ok:
 31163                                  ;	retn
 31164                                  
 31165                                  ;----------------------------------------------------------------------------
 31166                                  ;
 31167                                  ; procedure : DevSetBreak
 31168                                  ;
 31169                                  ;	Input : DevBrkAddr
 31170                                  ;	Output : Carry set if Device returned Init failed
 31171                                  ;		 Else carry clear
 31172                                  ;
 31173                                  ;----------------------------------------------------------------------------
 31174                                  
 31175                                  DevSetBreak:
 31176 0000299C 50                      	push	ax
 31177                                  
 31178 0000299D 2EA1[EE1E]              	mov	ax,[cs:DevBrkAddr+2]	 ;remove the init code
 31179 000029A1 2E803E[2B14]00          	cmp	byte [cs:multdeviceflag],0
 31180 000029A7 750F                    	jne	short set_break_continue ;do not check it.
 31181 000029A9 2E3B06[E41E]            	cmp	ax,[cs:DevLoadAddr]
 31182 000029AE 7508                    	jne	short set_break_continue ;if not same, then o.k.
 31183                                  
 31184                                  	;cmp	word [cs:DevBrkAddr],0
 31185                                  	;je	short break_failed	;[DevBrkAddr+2]=[memhi] & [DevBrkAddr]=0
 31186                                  	; 12/12/2022
 31187 000029B0 2E833E[EC1E]01          	cmp	word [cs:DevBrkAddr],1
 31188 000029B6 7204                    	jb	short break_failed
 31189                                  
 31190                                  set_break_continue:
 31191 000029B8 E8C0FF                  	call	RoundBreakAddr
 31192                                  	; 12/12/2022
 31193 000029BB F8                      	clc
 31194                                  break_failed:
 31195 000029BC 58                      	pop	ax
 31196                                  	;clc
 31197 000029BD C3                      	retn
 31198                                  
 31199                                  	; 12/12/2022
 31200                                  ;break_failed:
 31201                                  	;pop	ax
 31202                                  	;stc
 31203                                  	;retn
 31204                                  
 31205                                  ;----------------------------------------------------------------------------
 31206                                  ;
 31207                                  ; procedure : DevBreak
 31208                                  ;
 31209                                  ;	Input : DevLoadAddr & DevBrkAddr
 31210                                  ;	Output : none
 31211                                  ;
 31212                                  ;	Marks a succesful install of a device driver
 31213                                  ;	Sets device size field in sub-arena &
 31214                                  ;	Updates Free ptr in UMB or adjusts memhi
 31215                                  ;
 31216                                  ;----------------------------------------------------------------------------
 31217                                  
 31218                                  	; 11/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 31219                                  DevBreak:
 31220                                  	;push	ds ; 11/12/2022
 31221                                  
 31222                                  	; 11/12/2022
 31223 000029BE 0E                      	push	cs
 31224 000029BF 1F                      	pop	ds
 31225                                  	;mov	ax,[cs:DevLoadAddr]
 31226                                  	;mov	bx,[cs:DevBrkAddr+2]
 31227 000029C0 A1[E41E]                	mov	ax,[DevLoadAddr]
 31228 000029C3 8B1E[EE1E]              	mov	bx,[DevBrkAddr+2]
 31229                                  	; 11/12/2022
 31230 000029C7 1E                      	push	ds
 31231                                  
 31232 000029C8 48                      	dec	ax			; seg of sub-arena
 31233 000029C9 8ED8                    	mov	ds,ax
 31234 000029CB 40                      	inc	ax			; Back to Device segment
 31235 000029CC 29D8                    	sub	ax,bx
 31236 000029CE F7D8                    	neg	ax			; size of device in paras
 31237 000029D0 A30300                  	mov	[devmark.size],ax	; store it in sub-arena
 31238                                  	
 31239                                  	; 11/12/2022
 31240 000029D3 1F                      	pop	ds
 31241                                  	; ds = cs
 31242                                   	
 31243 000029D4 803E[FF1E]00            	cmp	byte [DeviceHi],0
 31244                                  	;cmp	byte [cs:DeviceHi],0
 31245 000029D9 7405                    	je	short db_lo
 31246                                  	;mov	[cs:DevUMBFree],bx	; update Free ptr in UMB
 31247                                  	;jmp	short db_exit
 31248                                  	; 11/12/2022
 31249 000029DB 891E[F51E]              	mov	[DevUMBFree],bx
 31250 000029DF C3                      	retn	
 31251                                  db_lo:
 31252                                  	; 11/12/2022
 31253                                  	; ds = cs
 31254                                  	;mov	[cs:memhi],bx
 31255                                  	;mov	word [cs:memlo],0
 31256 000029E0 891E[E003]              	mov	[memhi],bx
 31257 000029E4 C706[DE03]0000          	mov	word [memlo],0 ; 18/12/2022
 31258                                  db_exit:
 31259                                  	;pop	ds ; 11/12/2022
 31260 000029EA C3                      	retn
 31261                                  
 31262                                  ; 10/04/2019 - Retro DOS v4.0
 31263                                  
 31264                                  ;----------------------------------------------------------------------------
 31265                                  ;
 31266                                  ; procedure : ParseSize
 31267                                  ;
 31268                                  ;	Parses the command line for SIZE= command
 31269                                  ;
 31270                                  ;	ES:SI = command line to parsed
 31271                                  ;
 31272                                  ;	returns ptr to command line after SIZE= option in ES:SI
 31273                                  ;	updates the DevSizeOption variable with value supplied
 31274                                  ;	in SIZE=option
 31275                                  ;	Returns carry if the SIZE option was invalid
 31276                                  ;
 31277                                  ;----------------------------------------------------------------------------
 31278                                  
 31279                                  	; 02/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 31280                                  	; (SYSINIT:2D5Ah)
 31281                                  ParseSize:
 31282                                  	;push	bx
 31283                                  	;mov	bx,si
 31284                                  
 31285                                  	; 11/12/2022
 31286                                  	; ds = cs
 31287                                  	;mov	word [cs:DevSizeOption],0 ; init the value
 31288                                  	;mov	[cs:DevCmdLine],si
 31289                                  	;mov	[cs:DevCmdLine+2],es
 31290 000029EB C706[001F]0000          	mov	word [DevSizeOption],0 ; init the value
 31291 000029F1 8936[101F]              	mov	[DevCmdLine],si
 31292 000029F5 8C06[121F]              	mov	[DevCmdLine+2],es	
 31293 000029F9 E82800                  	call	SkipDelim
 31294 000029FC 26813C5349              	cmp	word [es:si],'SI' ; 4953h
 31295 00002A01 751F                    	jne	short ps_no_size
 31296 00002A03 26817C025A45            	cmp	word [es:si+2],'ZE' ; 455Ah
 31297 00002A09 7517                    	jne	short ps_no_size
 31298 00002A0B 268A4404                	mov	al,[es:si+4]
 31299 00002A0F E86B06                  	call	delim
 31300 00002A12 750E                    	jne	short ps_no_size
 31301 00002A14 83C605                  	add	si,5
 31302 00002A17 E81500                  	call	GetHexNum
 31303 00002A1A 7207                    	jc	short ps_err
 31304                                  	; 11/12/2022
 31305                                  	; ds = cs
 31306                                  	;mov	[cs:DevSizeOption],ax
 31307 00002A1C A3[001F]                	mov	[DevSizeOption],ax
 31308 00002A1F E80200                  	call	SkipDelim
 31309                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 31310                                  	;mov	bx,si
 31311                                  ps_no_size:	
 31312                                  	;mov	si,bx
 31313                                  	;pop	bx
 31314 00002A22 F8                      	clc	; cf=0
 31315                                  	;retn
 31316                                  	; 11/12/2022
 31317                                  ps_err:		; cf=1
 31318                                  sd_ret:		; cf=?
 31319 00002A23 C3                      	retn
 31320                                  ;ps_err:
 31321                                  	; 02/11/2022
 31322                                  	;pop	bx
 31323                                  	;stc
 31324                                  	; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 31325                                  	; 11/12/2022
 31326                                  	; cf=1
 31327                                  	;stc
 31328                                  	; 11/12/2022
 31329                                  ;sd_ret: 
 31330                                  	; 22/07/2023
 31331                                  	; 12/04/2019
 31332                                  	;retn
 31333                                  
 31334                                  ; 12/04/2019 - Retro DOS v4.0
 31335                                  
 31336                                  ;----------------------------------------------------------------------------
 31337                                  ;
 31338                                  ; procedure : SkipDelim
 31339                                  ;
 31340                                  ;	Skips delimiters in the string pointed to by ES:SI
 31341                                  ;	Returns ptr to first non-delimiter character in ES:SI
 31342                                  ;
 31343                                  ;----------------------------------------------------------------------------
 31344                                  	
 31345                                  	; 01/11/2022
 31346                                  SkipDelim:
 31347                                  sd_next_char:
 31348 00002A24 268A04                  	mov	al,[es:si]
 31349 00002A27 E85306                  	call	delim
 31350 00002A2A 75F7                    	jnz	short sd_ret
 31351 00002A2C 46                      	inc	si
 31352 00002A2D EBF5                    	jmp	short sd_next_char ; 01/11/2022
 31353                                  	; 11/12/2022
 31354                                  	; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 31355                                  ;sd_ret:
 31356                                  	;retn
 31357                                  
 31358                                  ;----------------------------------------------------------------------------
 31359                                  ;
 31360                                  ; procedure : GetHexNum
 31361                                  ;
 31362                                  ;	Converts an ascii string terminated by a delimiter into binary.
 31363                                  ;	Assumes that the ES:SI points to a Hexadecimal string
 31364                                  ;
 31365                                  ;	Returns in AX the number number of paras equivalent to the
 31366                                  ;	hex number of bytes specified by the hexadecimal string.
 31367                                  ;
 31368                                  ;	Returns carry in case it encountered a non-hex character or
 31369                                  ;	if it encountered crlf
 31370                                  ;
 31371                                  ;----------------------------------------------------------------------------
 31372                                  
 31373                                  ; 13/05/2019
 31374                                  
 31375                                  	; 01/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 31376                                  	; (SYSINIT:2DA5h)
 31377                                  GetHexNum:
 31378 00002A2F 31C0                    	xor	ax,ax
 31379 00002A31 31D2                    	xor	dx,dx
 31380                                  ghn_next:
 31381 00002A33 268A1C                  	mov	bl,[es:si]
 31382 00002A36 80FB0D                  	cmp	bl,cr  ; 0Dh
 31383 00002A39 7436                    	je	short ghn_err
 31384 00002A3B 80FB0A                  	cmp	bl,lf  ; 0Ah
 31385 00002A3E 7431                    	je	short ghn_err
 31386 00002A40 50                      	push	ax
 31387 00002A41 88D8                    	mov	al,bl
 31388 00002A43 E83706                  	call	delim
 31389 00002A46 58                      	pop	ax
 31390                                  	; 04/01/2023
 31391 00002A47 B90400                  	mov	cx, 4
 31392 00002A4A 7410                    	jz	short ghn_into_paras
 31393 00002A4C E82400                  	call	GetNibble
 31394                                  	;jc	short ghn_err
 31395                                  	; 11/12/2022
 31396 00002A4F 7221                    	jc	short ghn_ret ; cf=1
 31397                                  	; 04/01/2023
 31398                                  	;mov	cx,4
 31399                                  ghn_shift1:
 31400 00002A51 D1E0                    	shl	ax,1
 31401 00002A53 D1D2                    	rcl	dx,1
 31402 00002A55 E2FA                    	loop	ghn_shift1
 31403 00002A57 08D8                    	or	al,bl
 31404 00002A59 46                      	inc	si
 31405 00002A5A EBD7                    	jmp	short ghn_next
 31406                                  ghn_into_paras:
 31407 00002A5C 83C00F                  	add	ax,15
 31408 00002A5F 83D200                  	adc	dx,0
 31409 00002A62 F7C2F0FF                	test	dx,0FFF0h
 31410 00002A66 7509                    	jnz	short ghn_err
 31411                                  	; 04/01/2023
 31412                                  	;mov	cx,4
 31413                                  ghn_shift2:
 31414 00002A68 F8                      	clc
 31415 00002A69 D1DA                    	rcr	dx,1
 31416 00002A6B D1D8                    	rcr	ax,1
 31417 00002A6D E2F9                    	loop	ghn_shift2
 31418 00002A6F F8                      	clc
 31419 00002A70 C3                      	retn
 31420                                  	; 11/12/2022
 31421                                  ghn_err:
 31422                                  gnib_err:
 31423 00002A71 F9                      	stc
 31424                                  ghn_ret:
 31425                                  gnib_ret:
 31426 00002A72 C3                      	retn
 31427                                  
 31428                                  ;----------------------------------------------------------------------------
 31429                                  ;
 31430                                  ; procedure : GetNibble
 31431                                  ;
 31432                                  ;	Convert one nibble (hex digit) in BL into binary
 31433                                  ;
 31434                                  ;	Retruns binary value in BL
 31435                                  ;
 31436                                  ;	Returns carry if BL contains non-hex digit
 31437                                  ;
 31438                                  ;----------------------------------------------------------------------------
 31439                                  
 31440                                  GetNibble:
 31441 00002A73 80FB30                  	cmp	bl,'0'
 31442                                  	;jb	short gnib_err
 31443                                  	; 11/12/2022
 31444 00002A76 72FA                    	jb	short gnib_ret ; cf=1
 31445 00002A78 80FB39                  	cmp	bl,'9'
 31446 00002A7B 7704                    	ja	short is_it_hex
 31447 00002A7D 80EB30                  	sub	bl,'0'		; clc
 31448 00002A80 C3                      	retn
 31449                                  is_it_hex:
 31450 00002A81 80FB41                  	cmp	bl,'A'
 31451                                  	;jb	short gnib_err
 31452                                  	; 11/12/2022
 31453 00002A84 72EC                    	jb	short gnib_ret ; cf=1
 31454 00002A86 80FB46                  	cmp	bl,'F'
 31455 00002A89 77E6                    	ja	short gnib_err ; 11/12/2022
 31456 00002A8B 80EB37                  	sub	bl,'A'- 10	; clc
 31457 00002A8E C3                      	retn
 31458                                  	; 11/12/2022
 31459                                  ;gnib_err:
 31460                                  ;	stc
 31461                                  ;gnib_ret:
 31462                                  ;	retn
 31463                                  
 31464                                  ;============================================================================
 31465                                  
 31466                                  ; 12/04/2019 - Retro DOS v4.0
 31467                                  
 31468                                  ; umb.inc (MSDOS 6.0, 1991)
 31469                                  DOS_ARENA	equ 24h		; offset of arena_head var in DOS data segm.
 31470                                  UMB_ARENA	equ 8Ch		; offset of umb_head in DOS data
 31471                                  
 31472                                  XMM_REQUEST_UMB	equ 10h
 31473                                  XMM_RELEASE_UMB	equ 11h
 31474                                  
 31475                                  ;----------------------------------------------------------------------------
 31476                                  ;
 31477                                  ; procedure : AllocUMB
 31478                                  ;
 31479                                  ;	Allocate all UMBs and link it to DOS arena chain
 31480                                  ;
 31481                                  ;----------------------------------------------------------------------------
 31482                                  
 31483                                  AllocUMB:
 31484                                  	; 31/12/2022
 31485                                  	; ds = cs
 31486 00002A8F E81000                  	call	InitAllocUMB		; link in the first UMB
 31487 00002A92 720D                    	jc	short au_exit		; quit on error
 31488                                  au_next:
 31489 00002A94 E83900                  	call	umb_allocate		; allocate
 31490 00002A97 7205                    	jc	short au_coalesce
 31491 00002A99 E85200                  	call	umb_insert		; & insert till no UMBs
 31492 00002A9C EBF6                    	jmp	short au_next
 31493                                  au_coalesce:
 31494 00002A9E E80B01                  	call	umb_coalesce		; coalesce all UMBs
 31495                                  au_exit:
 31496                                  	; 31/12/2022
 31497                                  	; ds = cs
 31498 00002AA1 C3                      	retn
 31499                                  
 31500                                  ;----------------------------------------------------------------------------
 31501                                  ;
 31502                                  ; procedure : InitAllocUMB
 31503                                  ;
 31504                                  ;----------------------------------------------------------------------------
 31505                                  
 31506                                  InitAllocUMB:
 31507                                  	; 31/12/2022
 31508                                  	; ds = cs
 31509 00002AA2 E874DF                  	call	IsXMSLoaded
 31510 00002AA5 7527                    	jnz	short iau_err		; quit on no XMS driver
 31511 00002AA7 B452                    	mov	ah,52h
 31512 00002AA9 CD21                    	int	21h			; get DOS DATA seg
 31513                                  	; 31/12/2022
 31514                                  	; ds = cs
 31515                                  	;mov	[cs:DevDOSData],es	; & save it for later
 31516 00002AAB 8C06[0E1F]              	mov	[DevDOSData],es		; & save it for later
 31517 00002AAF B81043                  	mov	ax,4310h
 31518 00002AB2 CD2F                    	int	2Fh
 31519                                  	;mov	[cs:DevXMSAddr],bx	; get XMS driver address
 31520                                  	;mov	[cs:DevXMSAddr+2],es
 31521 00002AB4 891E[F71E]              	mov	[DevXMSAddr],bx		; get XMS driver address
 31522 00002AB8 8C06[F91E]              	mov	[DevXMSAddr+2],es	
 31523                                  	; 31/12/2022
 31524 00002ABC 803E[0D1F]00            	cmp	byte [FirstUMBLinked],0 
 31525                                  	;cmp	byte [cs:FirstUMBLinked],0 ; have we already linked a UMB?
 31526                                  	;jne	short ia_1		; quit if we already did it
 31527                                  	; 12/12/2022
 31528 00002AC1 770A                    	ja	short ia_1 ; cf=0
 31529 00002AC3 E83401                  	call	LinkFirstUMB		; else link the first UMB
 31530                                  	;jc	short iau_err
 31531                                  	; 12/12/2022
 31532 00002AC6 7207                    	jc	short iau_err2  ; cf=1
 31533                                  	; 31/12/2022
 31534                                  	; ds = cs
 31535 00002AC8 C606[0D1F]FF            	mov	byte [FirstUMBLinked],0FFh ; mark that 1st UMB linked
 31536                                  	;mov	byte [cs:FirstUMBLinked],0FFh ; mark that 1st UMB linked
 31537                                  ia_1:
 31538                                  	; 12/12/2022
 31539                                  	; cf=0
 31540                                  	;clc
 31541 00002ACD C3                      	retn
 31542                                  iau_err:
 31543 00002ACE F9                      	stc
 31544                                  iau_err2:
 31545 00002ACF C3                      	retn
 31546                                  
 31547                                  ;-------------------------------------------------------------------------
 31548                                  ;
 31549                                  ; Procedure Name	: umb_allocate
 31550                                  ;
 31551                                  ; Inputs		: DS = data
 31552                                  ;
 31553                                  ; Outputs		: if UMB available
 31554                                  ;				Allocates the largest available UMB and 
 31555                                  ;			  	BX = segment of allocated block
 31556                                  ;				DX = size of allocated block
 31557                                  ;				NC
 31558                                  ;			  else 
 31559                                  ;				CY
 31560                                  ;
 31561                                  ; Uses			: BX, DX
 31562                                  ;
 31563                                  ;-------------------------------------------------------------------------
 31564                                  
 31565                                  umb_allocate:
 31566                                  	; 31/12/2022
 31567                                  	; ds = cs
 31568 00002AD0 50                      	push	ax
 31569 00002AD1 B410                    	mov	ah,XMM_REQUEST_UMB ; 16
 31570 00002AD3 BAFFFF                  	mov	dx,0FFFFh		; try to allocate largest
 31571                                  					;   possible
 31572                                  	; 31/12/2022
 31573 00002AD6 FF1E[F71E]              	call	far [DevXMSAddr]
 31574                                  	;call	far [cs:DevXMSAddr]
 31575                                  					; dx now contains the size of
 31576                                  					; the largest UMB
 31577 00002ADA 09D2                    	or	dx,dx
 31578 00002ADC 740D                    	jz	short ua_err
 31579                                  	
 31580 00002ADE B410                    	mov	ah,XMM_REQUEST_UMB ; 16
 31581                                  
 31582                                  	; 31/12/2022
 31583 00002AE0 FF1E[F71E]              	call	far [DevXMSAddr]
 31584                                  	;call	far [cs:DevXMSAddr]
 31585                                  
 31586 00002AE4 83F801                  	cmp	ax,1			; Q: was the reqst successful
 31587 00002AE7 7502                    	jne	short ua_err		; N: error
 31588                                  	;clc
 31589                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 31590                                  	; 12/12/2022
 31591                                  	; cf=0
 31592                                  	;clc 
 31593                                  ua_done:
 31594 00002AE9 58                      	pop	ax
 31595 00002AEA C3                      	retn
 31596                                  ua_err:
 31597 00002AEB F9                      	stc
 31598 00002AEC EBFB                    	jmp	short ua_done
 31599                                  
 31600                                  ;---------------------------------------------------------------------------
 31601                                  ;
 31602                                  ; Procedure Name	: umb_insert
 31603                                  ;
 31604                                  ; Inputs		: DOSDATA:UMB_HEAD = start of umb chain
 31605                                  ;			: BX = seg address of UMB to be linked in
 31606                                  ;			: DX = size of UMB to be linked in paras
 31607                                  ;			; DS = data
 31608                                  ;
 31609                                  ; Outputs		: links the UMB into the arena chain
 31610                                  ;
 31611                                  ; Uses			: AX, CX, ES, DX, BX
 31612                                  ;
 31613                                  ;---------------------------------------------------------------------------
 31614                                  
 31615                                  umb_insert:
 31616 00002AEE 1E                      	push	ds
 31617                                  
 31618                                  	; 31/12/2022
 31619                                  	; ds = cs
 31620                                  
 31621                                  	;mov	ds,[cs:DevDOSData]
 31622 00002AEF 8E1E[0E1F]              	mov	ds,[DevDOSData] ; 31/12/2022 
 31623                                  	;mov	ds,[8Ch]
 31624 00002AF3 8E1E8C00                	mov	ds,[UMB_ARENA]		; es = UMB_HEAD
 31625 00002AF7 8CD8                    	mov	ax,ds
 31626 00002AF9 8EC0                    	mov	es,ax
 31627                                  ui_next:
 31628 00002AFB 39D8                    	cmp	ax,bx			; Q: is current block above
 31629                                  					;    new block
 31630 00002AFD 770F                    	ja	short ui_insert		; Y: insert it
 31631                                  					; Q: is current block the
 31632                                  					;    last
 31633 00002AFF 26803E00005A            	cmp	byte [es:ARENA.SIGNATURE],arena_signature_end ; 'Z'
 31634 00002B05 745C                    	je	short ui_append		; Y: append new block to chain
 31635                                  					; N: get next block
 31636 00002B07 8ED8                    	mov	ds,ax			; M005
 31637                                  	;call	get_next		; ax = es = next block
 31638 00002B09 E8E200                  	call	_get_next_ ; 13/04/2019 - Retro DOS v4.0
 31639 00002B0C EBED                    	jmp	short ui_next
 31640                                  
 31641                                  ui_insert:
 31642 00002B0E 8CD9                    	mov	cx,ds			; ds = previous arena
 31643 00002B10 41                      	inc	cx			; top of previous block
 31644                                  
 31645 00002B11 29D9                    	sub	cx,bx
 31646 00002B13 F7D9                    	neg	cx			; cx = size of used block
 31647                                  	;mov	byte [0],'M'
 31648 00002B15 C60600004D              	mov	byte [ARENA.SIGNATURE],arena_signature_normal ; 'M'
 31649                                  	;mov	word [1],8
 31650 00002B1A C70601000800            	mov	word [ARENA.OWNER],8	; mark as system owned
 31651                                  	;mov	[3],cx
 31652 00002B20 890E0300                	mov	[ARENA.SIZE],cx	
 31653                                  	;mov	word [8],4353h ; 'SC'
 31654 00002B24 C70608005343            	mov	word [ARENA.NAME],'SC' ; 4353h
 31655                                  
 31656                                  ; prepare the arena at start of new block
 31657                                  
 31658 00002B2A 8EC3                    	mov	es,bx
 31659 00002B2C 26C60600004D            	mov	byte [es:ARENA.SIGNATURE],arena_signature_normal ; 'M'
 31660 00002B32 26C70601000000          	mov	word [es:ARENA.OWNER],arena_owner_system ; 0
 31661                                  					; mark as free
 31662 00002B39 83EA02                  	sub	dx,2			; make room for arena at
 31663                                  					; start & end of new block
 31664 00002B3C 2689160300              	mov	[es:ARENA.SIZE],dx
 31665                                  
 31666                                  ; prepare arena at end of new block
 31667                                  	
 31668 00002B41 01D3                    	add	bx,dx
 31669 00002B43 43                      	inc	bx
 31670 00002B44 8EC3                    	mov	es,bx			; es=arena at top of new block
 31671 00002B46 43                      	inc	bx			; bx=top of new block
 31672                                  
 31673                                  					; ax contains arena just above
 31674                                  					; this block
 31675 00002B47 29D8                    	sub	ax,bx			; ax = size of used block
 31676                                  	
 31677 00002B49 26C60600004D            	mov	byte [es:ARENA.SIGNATURE],arena_signature_normal
 31678 00002B4F 26C70601000800          	mov	word [es:ARENA.OWNER],8	; mark as system owned
 31679 00002B56 26A30300                	mov	[es:ARENA.SIZE],ax	
 31680 00002B5A 26C70608005343          	mov	word [es:ARENA.NAME],'SC' ; 4353h
 31681                                  
 31682 00002B61 EB47                    	jmp	short ui_done
 31683                                  
 31684                                  ui_append:
 31685                                  					; es = arena of last block	
 31686 00002B63 2603060300              	add	ax,[es:ARENA.SIZE]	; ax=top of last block-1 para
 31687 00002B68 26832E030001            	sub	word [es:ARENA.SIZE],1	; reflect the space we are
 31688                                  					; going to rsrv on top of this 
 31689                                  					; block for the next arena.
 31690                                  	; 13/05/2019
 31691 00002B6E 26C60600004D            	mov	byte [es:ARENA.SIGNATURE],arena_signature_normal
 31692                                  
 31693 00002B74 89C1                    	mov	cx,ax			; cx=top of prev block-1
 31694 00002B76 40                      	inc	ax
 31695 00002B77 29D8                    	sub	ax,bx			; ax=top of prev block - 
 31696                                  					;    seg. address of new block
 31697 00002B79 F7D8                    	neg	ax
 31698                                  
 31699 00002B7B 8EC1                    	mov	es,cx			; ds = arena of unused block
 31700                                  
 31701 00002B7D 26C60600004D            	mov	byte [es:ARENA.SIGNATURE],arena_signature_normal
 31702 00002B83 26C70601000800          	mov	word [es:ARENA.OWNER],8	; mark as system owned
 31703 00002B8A 26A30300                	mov	[es:ARENA.SIZE],ax	
 31704 00002B8E 26C70608005343          	mov	word [es:ARENA.NAME],'SC'
 31705                                  
 31706                                  ; prepare the arena at start of new block
 31707 00002B95 8EC3                    	mov	es,bx
 31708 00002B97 26C60600005A            	mov	byte [es:ARENA.SIGNATURE],arena_signature_end
 31709 00002B9D 26C70601000000          	mov	word [es:ARENA.OWNER],arena_owner_system
 31710                                  					; mark as free
 31711 00002BA4 4A                      	dec	dx			; make room for arena
 31712 00002BA5 2689160300              	mov	[es:ARENA.SIZE],dx	
 31713                                  ui_done:
 31714                                  uc_done: ; 31/12/2022 ; *!
 31715 00002BAA 1F                      	pop	ds
 31716                                  	; ds = cs ; 31/12/2022
 31717                                  ;uc_done:	; 18/12/2022
 31718 00002BAB C3                      	retn
 31719                                  
 31720                                  ; 13/04/2019 - Retro DOS v4.0
 31721                                  
 31722                                  ;----------------------------------------------------------------------------
 31723                                  ;
 31724                                  ;**	umb_coalesce - Combine free blocks ahead with current block
 31725                                  ;
 31726                                  ;	Coalesce adds the block following the argument to the argument block,
 31727                                  ;	iff it's free.  Coalesce is usually used to join free blocks, but
 31728                                  ;	some callers (such as $setblock) use it to join a free block to it's
 31729                                  ;	preceeding allocated block.
 31730                                  ;
 31731                                  ;	EXIT	'C' clear if OK
 31732                                  ;		  (ds) unchanged, this block updated
 31733                                  ;		  (ax) = address of next block, IFF not at end
 31734                                  ;		'C' set if arena trashed
 31735                                  ;	USES	cx, di, ds, es
 31736                                  ;
 31737                                  ;----------------------------------------------------------------------------
 31738                                  
 31739                                  umb_coalesce:
 31740                                  	; 31/12/2022
 31741                                  	; ds = cs
 31742 00002BAC 1E                      	push	ds ; *!
 31743                                  
 31744 00002BAD 31FF                    	xor	di, di
 31745                                  
 31746                                  	;mov	es,[cs:DevDOSData]
 31747                                  	; 31/12/2022
 31748 00002BAF 8E06[0E1F]              	mov	es,[DevDOSData]
 31749 00002BB3 268E068C00              	mov	es,[es:UMB_ARENA]	; es = UMB_HEAD
 31750                                  uc_nextfree:
 31751 00002BB8 8CC0                    	mov	ax,es
 31752 00002BBA 8ED8                    	mov	ds,ax
 31753                                  	;cmp	[es:1],di
 31754 00002BBC 26393E0100              	cmp	[es:ARENA.OWNER],di	; Q: is current arena free
 31755 00002BC1 7407                    	je	short uc_again		; Y: try to coalesce with next block
 31756                                  					; N: get next arena
 31757 00002BC3 E82100                  	call	get_next		; es, ax = next arena
 31758 00002BC6 72E2                    	jc	short uc_done	; *!
 31759 00002BC8 EBEE                    	jmp	short uc_nextfree
 31760                                  uc_again:
 31761 00002BCA E81A00                  	call	get_next		; ES, AX <- next block
 31762 00002BCD 72DB                    	jc	short uc_done	; *!
 31763                                  uc_check:
 31764 00002BCF 26393E0100              	cmp     [es:ARENA.OWNER],di	; Q: is arena free
 31765 00002BD4 75E2                    	jne	short uc_nextfree	; N: get next free arena
 31766                                  					; Y: coalesce
 31767 00002BD6 268B0E0300              	mov     cx,[es:ARENA.SIZE]      ; cx <- next block size
 31768 00002BDB 41                      	inc     cx                      ; cx <- cx + 1 (for header size)
 31769                                  	;add	[3],cx
 31770 00002BDC 010E0300                	add     [ARENA.SIZE],cx		; current size <- current size + cx
 31771 00002BE0 268A0D                  	mov     cl,[es:di]              ; move up signature
 31772 00002BE3 880D                    	mov     [di],cl
 31773 00002BE5 EBE3                    	jmp     short uc_again		; try again
 31774                                  
 31775                                  	; 18/12/2022
 31776                                  ;uc_done:
 31777                                  	;retn
 31778                                  
 31779                                  ;----------------------------------------------------------------------------
 31780                                  ;
 31781                                  ;**	get_next - Find Next item in Arena
 31782                                  ;
 31783                                  ;	ENTRY	dS - pointer to block head
 31784                                  ;	EXIT	AX,ES - pointers to next head
 31785                                  ;		'C' set if arena damaged
 31786                                  ;
 31787                                  ;----------------------------------------------------------------------------
 31788                                  
 31789                                  	; 01/11/2022
 31790                                  get_next:
 31791 00002BE7 803E00005A              	cmp	byte [0],arena_signature_end ; 'Z'
 31792 00002BEC 740A                    	je	short gn_err
 31793                                  _get_next_:
 31794 00002BEE 8CD8                    	mov     ax,ds                   ; ax=current block
 31795 00002BF0 03060300                	add     ax,[ARENA.SIZE]		; ax=ax + current block length
 31796 00002BF4 40                      	inc     ax                      ; remember that header!
 31797 00002BF5 8EC0                    	mov	es,ax
 31798                                  	;clc
 31799                                  	; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 31800                                  	; 11/12/2022
 31801                                  	; cf=0
 31802                                  	;clc
 31803 00002BF7 C3                      	retn
 31804                                  gn_err:
 31805 00002BF8 F9                      	stc
 31806                                  	; 11/12/2022	
 31807                                  lfu_err:	 ; cf=1
 31808 00002BF9 C3                      	retn
 31809                                  
 31810                                  ;----------------------------------------------------------------------------
 31811                                  ;
 31812                                  ; procedure : LinkFirstUMB
 31813                                  ;
 31814                                  ;----------------------------------------------------------------------------
 31815                                  
 31816                                  	; 01/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 31817                                  	; (SYSINIT:2F81h)
 31818                                  LinkFirstUMB:
 31819                                  	; 31/12/2022
 31820                                  	; ds = cs
 31821 00002BFA E8D3FE                  	call	umb_allocate
 31822 00002BFD 72FA                    	jc	short lfu_err  ; ds = cs ; 31/12/2022
 31823                                  
 31824                                  ; bx = segment of allocated UMB
 31825                                  ; dx = size of UMB
 31826                                  
 31827                                  	; 31/12/2022
 31828                                  	; ds = cs
 31829                                  
 31830 00002BFF CD12                    	int	12h			; ax = size of memory
 31831 00002C01 B106                    	mov	cl,6
 31832 00002C03 D3E0                    	shl	ax,cl			; ax = size in paragraphs
 31833                                  
 31834 00002C05 89C1                    	mov	cx,ax			; cx = size in paras
 31835 00002C07 29D8                    	sub	ax,bx			; ax = - size of unused block
 31836                                  
 31837 00002C09 F7D8                    	neg	ax
 31838                                  
 31839 00002C0B 83E901                  	sub	cx,1			; cx = first umb_arena
 31840 00002C0E 8EC1                    	mov	es,cx			; es = first umb_arena
 31841                                  	
 31842 00002C10 26C60600004D            	mov	byte [es:ARENA.SIGNATURE],arena_signature_normal ; 'M'
 31843 00002C16 26C70601000800          	mov	word [es:ARENA.OWNER],8	; mark as system owned
 31844                                  					
 31845 00002C1D 26A30300                	mov	[es:ARENA.SIZE],ax	
 31846 00002C21 26C70608005343          	mov	word [es:ARENA.NAME],'SC' ; 4353h
 31847                                  
 31848                                  ; put in the arena for the first UMB
 31849                                  
 31850 00002C28 8EC3                    	mov	es,bx			; es has first free umb seg
 31851 00002C2A 26C60600005A            	mov	byte [es:ARENA.SIGNATURE],arena_signature_end ; 'Z'
 31852 00002C30 26C70601000000          	mov	word [es:ARENA.OWNER],arena_owner_system ; 0	
 31853                                  					; mark as free 
 31854 00002C37 4A                      	dec	dx			; make room for arena
 31855 00002C38 2689160300              	mov	[es:ARENA.SIZE],dx	
 31856                                  
 31857                                  	;mov	es,[cs:DevDOSData]
 31858                                  	; 31/12/2022
 31859 00002C3D 8E06[0E1F]              	mov	es,[DevDOSData] ; ds = cs
 31860 00002C41 BF8C00                  	mov	di,UMB_ARENA ; 8Ch
 31861 00002C44 26890D                  	mov	[es:di],cx		; initialize umb_head in DOS
 31862                                  					;  data segment with the arena
 31863                                  					;  just below Top of Mem
 31864                                  
 31865                                  ; we must now scan the arena chain and update the size of the last arena
 31866                                  
 31867 00002C47 BF2400                  	mov	di,DOS_ARENA ; 24h
 31868 00002C4A 268E05                  	mov	es,[es:di]		; es = start arena
 31869 00002C4D 31FF                    	xor	di,di
 31870                                  ;scan_next
 31871                                  ; 09/12/2022
 31872                                  scannext:
 31873 00002C4F 26803D5A                	cmp	byte [es:di],arena_signature_end  ; 'Z'
 31874 00002C53 740C                    	je	short got_last
 31875                                  	
 31876 00002C55 8CC0                    	mov	ax,es
 31877 00002C57 2603060300              	add	ax,[es:ARENA.SIZE]
 31878 00002C5C 40                      	inc	ax
 31879 00002C5D 8EC0                    	mov	es,ax
 31880                                  	;jmp	short scan_next
 31881                                  	; 09/12/2022
 31882 00002C5F EBEE                    	jmp	short scannext
 31883                                  got_last:
 31884 00002C61 26832E030001            	sub	word [es:ARENA.SIZE],1
 31885 00002C67 26C60600004D            	mov	byte [es:ARENA.SIGNATURE],arena_signature_normal ; 'M'
 31886                                  	;clc
 31887                                  	; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 31888                                  	; 11/12/2022
 31889                                  	; cf=0
 31890                                  	;clc
 31891 00002C6D C3                      	retn
 31892                                  
 31893                                  ; 11/12/2022
 31894                                  ;;lfu_err:
 31895                                  ;	;stc
 31896                                  ;	; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 31897                                  ;	; 11/12/2022
 31898                                  ;	; cf=1
 31899                                  ;	;stc
 31900                                  ;	retn
 31901                                  
 31902                                  ;----------------------------------------------------------------------------
 31903                                  ;
 31904                                  ; procedure : ShrinkUMB
 31905                                  ;
 31906                                  ;	Shrinks the current UMB in use, so that the unused portions
 31907                                  ;	of the UMB is given back to the DOS free mem pool
 31908                                  ;
 31909                                  ;----------------------------------------------------------------------------
 31910                                  
 31911                                  ShrinkUMB:
 31912                                  	; 12/12/2022
 31913                                  	; ds = cs
 31914 00002C6E 833E[F11E]00            	cmp	word [DevUMBAddr],0
 31915                                  	;cmp	word [cs:DevUMBAddr],0
 31916 00002C73 7421                    	je	short su_exit
 31917 00002C75 06                      	push	es
 31918 00002C76 53                      	push	bx
 31919                                  	; 12/12/2022
 31920                                  	;mov	bx,[cs:DevUMBFree]
 31921                                  	;sub	bx,[cs:DevUMBAddr]
 31922                                  	;mov	es,[cs:DevUMBAddr]
 31923 00002C77 8B1E[F51E]              	mov	bx,[DevUMBFree]
 31924 00002C7B 2B1E[F11E]              	sub	bx,[DevUMBAddr]
 31925 00002C7F 8E06[F11E]              	mov	es,[DevUMBAddr]
 31926                                  	
 31927 00002C83 B8004A                  	mov	ax,4A00h
 31928 00002C86 CD21                    	int	21h
 31929                                  		; DOS - 2+ - ADJUST MEMORY BLOCK SIZE (SETBLOCK)
 31930                                  		; ES = segment address of block to change
 31931                                  		; BX = new size in paragraphs
 31932 00002C88 8CC0                    	mov	ax,es
 31933 00002C8A 48                      	dec	ax
 31934 00002C8B 8EC0                    	mov	es,ax
 31935 00002C8D 26C70601000800          	mov	word [es:ARENA.OWNER],8
 31936 00002C94 5B                      	pop	bx
 31937 00002C95 07                      	pop	es
 31938                                  su_exit:
 31939 00002C96 C3                      	retn
 31940                                  
 31941                                  ;----------------------------------------------------------------------------
 31942                                  ;
 31943                                  ; procedure : UnlinkUMB
 31944                                  ;
 31945                                  ;	Unlinks the UMBs from the DOS arena chain
 31946                                  ;
 31947                                  ;----------------------------------------------------------------------------
 31948                                  
 31949                                  UnlinkUMB:
 31950                                  	; 12/12/2022
 31951                                  	; ds = cs
 31952 00002C97 1E                      	push	ds
 31953 00002C98 06                      	push	es
 31954                                  	; 12/12/2022
 31955 00002C99 803E[0D1F]00            	cmp	byte [FirstUMBLinked],0
 31956                                  	;cmp	byte [cs:FirstUMBLinked],0
 31957 00002C9E 7420                    	je	short ulu_x		; nothing to unlink
 31958                                  	; 12/12/2022
 31959 00002CA0 8E06[0E1F]              	mov	es,[DevDOSData]
 31960                                  	;mov	es,[cs:DevDOSData]	; get DOS data seg
 31961 00002CA4 268E1E2400              	mov	ds,[es:DOS_ARENA]
 31962 00002CA9 268B3E8C00              	mov	di,[es:UMB_ARENA]
 31963                                  ulu_next:
 31964 00002CAE E836FF                  	call	get_next
 31965 00002CB1 720D                    	jc	short ulu_x
 31966 00002CB3 39C7                    	cmp	di,ax			; is the next one UMB ?
 31967 00002CB5 7404                    	je	short ulu_found
 31968 00002CB7 8ED8                    	mov	ds,ax
 31969 00002CB9 EBF3                    	jmp	short ulu_next
 31970                                  ulu_found:
 31971                                  	;mov	byte [0],'Z'
 31972 00002CBB C60600005A              	mov     byte [ARENA.SIGNATURE],arena_signature_end ; 'Z'
 31973                                  ulu_x:
 31974 00002CC0 07                      	pop	es
 31975 00002CC1 1F                      	pop	ds
 31976 00002CC2 C3                      	retn
 31977                                  
 31978                                  ; ----------------------------------------------------------------------
 31979                                  ; SYSINIT2.ASM - MSDOS 6.0 - 1991
 31980                                  ; ----------------------------------------------------------------------
 31981                                  ; 14/04/2019 - Retro DOS v4.0
 31982                                  
 31983                                  ; Multiple configuration block support  Created 16-Mar-1992 by JeffPar
 31984                                  ;
 31985                                  ; Summary:
 31986                                  ;
 31987                                  ;   The procedure "organize" crunches the in-memory copy of config.sys
 31988                                  ;   into lines delimited by CR/LF (sometimes no CR, but *always* an LF)
 31989                                  ;   with the leading "keyword=" replaced by single character codes (eg, B
 31990                                  ;   for BUFFERS, D for DEVICE, Z for any unrecognized keyword); see comtab
 31991                                  ;   and/or config.inc for the full list.
 31992                                  ;
 31993                                  ;   [blockname] and INCLUDE are the major syntactical additions for multi-
 31994                                  ;   configuration support. blockname is either MENU, which contains one
 31995                                  ;   or more MENUITEM lines, an optional MENUDEFAULT (which includes optional
 31996                                  ;   time-out), or any user-defined keyword, such as NETWORK, CD-ROM, etc.
 31997                                  ;   INCLUDE allows the current block to name another block for inclusion
 31998                                  ;   during the processing phase of CONFIG.SYS. An INCLUDE is only honored
 31999                                  ;   once, precluding nasty infinite-loop scenarios. If blocks are present
 32000                                  ;   without a MENU block, then only lines inside COMMON blocks are processed.
 32001                                  ;
 32002                                  ; Example:
 32003                                  ;
 32004                                  ;   [menu]
 32005                                  ;   menuitem=misc,Miscellaneous
 32006                                  ;   menuitem=network,Network Configuration
 32007                                  ;   menudefault=network,15
 32008                                  ;
 32009                                  ;   [network]
 32010                                  ;   include misc
 32011                                  ;   device=foo
 32012                                  ;
 32013                                  ;   [misc]
 32014                                  ;   device=bar
 32015                                  ;   include alternate
 32016                                  ;
 32017                                  ;   [alternate]
 32018                                  ;   device=tar
 32019                                  ;
 32020                                  ;
 32021                                  ;   When the menu is displayed
 32022                                  ;
 32023                                  ;    1. Miscellaneous
 32024                                  ;    2. Network Configuration
 32025                                  ;
 32026                                  ;   #2 is highlighted as the default option, and will be automatically
 32027                                  ;   selected after 15 seconds. It will invoke the following lines in the
 32028                                  ;   following order:
 32029                                  ;
 32030                                  ;       DEVICE=BAR
 32031                                  ;       DEVICE=TAR
 32032                                  ;       DEVICE=FOO
 32033                                  ;
 32034                                  
 32035                                  ;MULTI_CONFIG equ 1
 32036                                  
 32037                                  ; the following depend on the positions of the various letters in switchlist
 32038                                  
 32039                                  switchnum	equ 11111000b ; 0F8h	; which switches require number
 32040                                  
 32041                                  flagec35	equ 00000100b ; 4	; electrically compatible 3.5 inch disk drive
 32042                                  flagdrive	equ 00001000b ; 8 
 32043                                  flagcyln	equ 00010000b ; 16
 32044                                  flagseclim	equ 00100000b ; 32
 32045                                  flagheads	equ 01000000b ; 64
 32046                                  flagff		equ 10000000b ; 128
 32047                                  
 32048                                  ;----------------------------------------------------------------------------
 32049                                  ; 19/04/2019 - Retro DOS v4.0
 32050                                  
 32051                                  ; MSDOS 6.21 IO.SYS - SYSINIT:3E78h
 32052                                  
 32053                                  ; 01/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 32054                                  ; MSDOS 5.0 IO.SYS - SYSINIT:3054h
 32055                                  
 32056 00002CC3 00                      insert_blank:	db 	0
 32057                                  
 32058                                  ;----------------------------------------------------------------------------
 32059                                  ;
 32060                                  ; procedure : setparms
 32061                                  ;
 32062                                  ; the following set of routines is used to parse the drivparm = command in
 32063                                  ; the config.sys file to change the default drive parameters.
 32064                                  ;
 32065                                  ;----------------------------------------------------------------------------
 32066                                  
 32067                                  setparms:
 32068 00002CC4 1E                      	push	ds
 32069 00002CC5 50                      	push	ax
 32070 00002CC6 53                      	push	bx
 32071 00002CC7 51                      	push	cx
 32072 00002CC8 52                      	push	dx
 32073                                  
 32074 00002CC9 0E                      	push	cs
 32075 00002CCA 1F                      	pop	ds
 32076                                  
 32077 00002CCB 31DB                    	xor	bx,bx
 32078 00002CCD 8A1E[8E36]              	mov	bl,[drive]
 32079                                  	; 18/12/2022
 32080 00002CD1 43                      	inc	bx
 32081                                  	;inc	bl			; get it correct for ioctl call
 32082                                  					; (1=a,2=b...)
 32083 00002CD2 BA[6635]                	mov	dx,deviceparameters
 32084 00002CD5 B444                    	mov	ah,IOCTL ; 44h
 32085 00002CD7 B00D                    	mov	al,GENERIC_IOCTL ; 0Dh
 32086 00002CD9 B508                    	mov	ch,RAWIO ; 8
 32087 00002CDB B140                    	mov	cl,SET_DEVICE_PARAMETERS ; 40h
 32088 00002CDD CD21                    	int	21h
 32089                                  
 32090                                  ; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 32091                                  ;
 32092                                  ;	;;mov	ax,Bios_Data		; get Bios_Data segment
 32093                                  ;	;mov	ax,KERNEL_SEGMENT ; 70h
 32094                                  ;	; 21/10/2022
 32095                                  ;	mov	ax,DOSBIODATASEG ; 0070h	
 32096                                  ;	mov	ds,ax			; set Bios_Data segment
 32097                                  ;
 32098                                  ;	test	word [cs:switches],flagec35 ; 4
 32099                                  ;	jz	short not_ec35
 32100                                  
 32101                                  	; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 32102                                  	;test	word [switches],flagec35 ; 4
 32103                                  	; 12/12/2022
 32104 00002CDF F606[8F36]04            	test	byte [switches],flagec35 ; 4
 32105 00002CE4 7411                    	jz	short eot_ok
 32106                                  
 32107                                  	;mov	cl,[cs:drive]		; which drive was this for?
 32108                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 32109 00002CE6 8A0E[8E36]              	mov	cl,[drive]
 32110 00002CEA B87000                  	mov	ax,DOSBIODATASEG ; 0070h	
 32111 00002CED 8ED8                    	mov	ds,ax	
 32112                                  
 32113 00002CEF B001                    	mov	al,1			; assume drive 0
 32114 00002CF1 D2E0                    	shl	al,cl			; set proper bit depending on drive
 32115                                  	;or	[531h],al ; (MSDOS 6.21 IO.SYS Offset SYINIT:3EACh)
 32116 00002CF3 0806[3105]              	or	[ec35_flag],al		; set the bit in the permanent flags
 32117                                  
 32118                                  ; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 32119                                  ;
 32120                                  ;not_ec35:
 32121                                  ;;	Now adjust the BIOS's EOT variable if our new drive has more
 32122                                  ;;	sectors per track than any old ones.
 32123                                  ;
 32124                                  ;	;mov	al,[cs:deviceparameters+20]
 32125                                  ;	mov	al,[cs:deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.BPB_SECTORSPERTRACK]
 32126                                  ;	;cmp	al,[12Ch] ; (MSDOS 6.21 IO.SYS Offset SYINIT:3EB4h)
 32127                                  ;	cmp	al,[EOT]
 32128                                  ;	jbe	short eot_ok
 32129                                  ;	mov	[EOT],al
 32130                                  
 32131                                  eot_ok:
 32132 00002CF7 5A                      	pop	dx			; fix up all the registers
 32133 00002CF8 59                      	pop	cx
 32134 00002CF9 5B                      	pop	bx
 32135 00002CFA 58                      	pop	ax
 32136 00002CFB 1F                      	pop	ds ; 13/05/2019
 32137 00002CFC C3                      	retn
 32138                                  
 32139                                  ;----------------------------------------------------------------------------
 32140                                  ;
 32141                                  ; procedure : diddleback
 32142                                  ;
 32143                                  ; replace default values for further drivparm commands
 32144                                  ;
 32145                                  ;----------------------------------------------------------------------------
 32146                                  
 32147                                  diddleback:
 32148 00002CFD 1E                      	push	ds
 32149 00002CFE 0E                      	push	cs
 32150 00002CFF 1F                      	pop	ds
 32151                                  	;mov	word [deviceparameters+4],80
 32152 00002D00 C706[6A35]5000          	mov	word [deviceparameters+A_DEVICEPARAMETERS.DP_CYLINDERS],80
 32153                                  	;mov	byte [deviceparameters+1],2
 32154 00002D06 C606[6735]02            	mov	byte [deviceparameters+A_DEVICEPARAMETERS.DP_DEVICETYPE],DEV_3INCH720KB ; 2
 32155                                  	;mov	word [deviceparameters+2],0
 32156 00002D0B C706[6835]0000          	mov	word [deviceparameters+A_DEVICEPARAMETERS.DP_DEVICEATTRIBUTES],0
 32157 00002D11 C706[8F36]0000          	mov	word [switches],0	    ; zero all switches
 32158 00002D17 1F                      	pop	ds
 32159 00002D18 C3                      	retn
 32160                                  
 32161                                  ; 04/01/2023
 32162                                  %if 0
 32163                                  
 32164                                  ; 15/04/2019 - Retro DOS v4.0
 32165                                  
 32166                                  ;----------------------------------------------------------------------------
 32167                                  ;
 32168                                  ; procedure : parseline
 32169                                  ;
 32170                                  ; entry point is parseline. al contains the first character in command line.
 32171                                  ;
 32172                                  ;----------------------------------------------------------------------------
 32173                                  
 32174                                  	; 01/11/2022 - Retrodos v4.0 (Modified MSDOS 5.0 IO.SYS)
 32175                                  	; (SYSINIT:30ACh)
 32176                                  
 32177                                  parseline:
 32178                                  	push	ds
 32179                                  
 32180                                  	push	cs
 32181                                  	pop	ds
 32182                                  
 32183                                  nextswtch:
 32184                                  	cmp	al,cr			; carriage return?
 32185                                  	je	short done_line
 32186                                  	cmp	al,lf			; linefeed?
 32187                                  	je	short put_back		; put it back and done
 32188                                  
 32189                                  ; anything less or equal to a space is ignored.
 32190                                  
 32191                                  	cmp	al,' '                  ; space?
 32192                                  	jbe	short getnext		; skip over space
 32193                                  	cmp	al,'/'
 32194                                  	je	short getparm
 32195                                  	stc				; mark error invalid-character-in-input
 32196                                  	jmp	short exitpl
 32197                                  
 32198                                  getparm:
 32199                                  	call	check_switch
 32200                                  	mov	[switches],bx		; save switches read so far
 32201                                  	jc	short swterr
 32202                                  getnext:
 32203                                  	call	getchr
 32204                                  	jc	short done_line
 32205                                  	jmp	short nextswtch
 32206                                  swterr:
 32207                                  	jmp	short exitpl		; exit if error
 32208                                  
 32209                                  done_line:
 32210                                  	; 12/12/2022
 32211                                  	test	byte [switches],flagdrive ; 8
 32212                                  	;test	word [switches],flagdrive ; 8 ; see if drive specified
 32213                                  	jnz	short okay
 32214                                  	stc				; mark error no-drive-specified
 32215                                  	jmp	short exitpl
 32216                                  
 32217                                  okay:
 32218                                  	mov	ax,[switches]
 32219                                  	and	ax,0003h	    ; get flag bits for changeline and non-rem
 32220                                  	mov	[deviceparameters+A_DEVICEPARAMETERS.DP_DEVICEATTRIBUTES],ax
 32221                                  	mov	word [deviceparameters+A_DEVICEPARAMETERS.DP_TRACKTABLEENTRIES],0
 32222                                  	;clc			    ; everything is fine
 32223                                  	; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 32224                                  	; 12/12/2022
 32225                                  	; cf=0
 32226                                  	;clc
 32227                                  	call	setdeviceparameters
 32228                                  exitpl:
 32229                                  	pop	ds
 32230                                  	retn
 32231                                  put_back:
 32232                                  	inc	word [count]		; one more char to scan
 32233                                  	dec	word [chrptr]		; back up over linefeed
 32234                                  	jmp	short done_line
 32235                                  
 32236                                  %endif
 32237                                  
 32238                                  ;----------------------------------------------------------------------------
 32239                                  ;
 32240                                  ; procedure : check_switch
 32241                                  ;
 32242                                  ; processes a switch in the input. it ensures that the switch is valid, and
 32243                                  ; gets the number, if any required, following the switch. the switch and the
 32244                                  ; number *must* be separated by a colon. carry is set if there is any kind of
 32245                                  ; error.
 32246                                  ;
 32247                                  ;----------------------------------------------------------------------------
 32248                                  
 32249                                  check_switch:
 32250 00002D19 E817FA                  	call	getchr
 32251                                  	;jc	short err_check
 32252 00002D1C 724E                    	jc	short err_chk
 32253 00002D1E 24DF                            and     al,0DFh                 ; convert it to upper case
 32254 00002D20 3C41                    	cmp	al,'A'
 32255                                  	;jb	short err_check
 32256 00002D22 7248                    	jb	short err_chk ; 15/04/2019 - Retro DOS v4.0
 32257 00002D24 3C5A                    	cmp	al,'Z'
 32258 00002D26 7743                    	ja	short err_check
 32259                                  
 32260 00002D28 06                      	push	es
 32261                                  
 32262 00002D29 0E                      	push	cs
 32263 00002D2A 07                      	pop	es
 32264                                  
 32265 00002D2B 8A0E[2237]              	mov	cl,[switchlist]		; get number of valid switches
 32266 00002D2F B500                    	mov	ch,0
 32267 00002D31 BF[2337]                	mov	di,1+switchlist		; point to string of valid switches
 32268 00002D34 F2AE                    	repne	scasb
 32269                                  
 32270 00002D36 07                      	pop	es
 32271 00002D37 7532                    	jnz	short err_check
 32272                                  
 32273 00002D39 B80100                  	mov	ax,1
 32274 00002D3C D3E0                    	shl	ax,cl			; set bit to indicate switch
 32275 00002D3E 8B1E[8F36]              	mov	bx,[switches]		; get switches so far
 32276 00002D42 09C3                    	or	bx,ax			; save this with other switches
 32277 00002D44 89C1                    	mov	cx,ax
 32278                                  	; 12/12/2022
 32279 00002D46 A8F8                    	test	al,switchnum ; 0F8h
 32280                                  	;test	ax,switchnum ; 0F8h	; test against switches that require number to follow
 32281 00002D48 741E                    	jz	short done_swtch
 32282                                  
 32283 00002D4A E8E6F9                  	call	getchr
 32284 00002D4D 721A                    	jc	short err_swtch
 32285                                  
 32286 00002D4F 3C3A                    	cmp	al,':'
 32287 00002D51 7516                    	jne	short err_swtch
 32288                                  
 32289 00002D53 E8DDF9                  	call	getchr
 32290 00002D56 53                      	push	bx			; preserve switches
 32291                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 32292                                  	;mov	byte [cs:sepchr],' '	; allow space separators
 32293                                  	; 12/12/2022
 32294                                  	; ds = cs
 32295 00002D57 C606[2A03]20            	mov	byte [sepchr],' '
 32296 00002D5C E8D803                  	call	getnum
 32297                                  	;mov	byte [cs:sepchr],0
 32298                                  	; 12/12/2022
 32299 00002D5F C606[2A03]00            	mov	byte [sepchr],0
 32300 00002D64 5B                      	pop	bx			; restore switches
 32301                                  
 32302                                  ; because getnum does not consider carriage-return or line-feed as ok, we do
 32303                                  ; not check for carry set here. if there is an error, it will be detected
 32304                                  ; further on (hopefully).
 32305                                  
 32306 00002D65 E80500                  	call	process_num
 32307                                  
 32308                                  done_swtch:
 32309                                  	;clc
 32310                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 32311                                  	; 12/12/2022
 32312                                  	; cf=0
 32313                                  	;clc
 32314 00002D68 C3                      	retn
 32315                                  
 32316                                  err_swtch:
 32317 00002D69 31CB                    	xor	bx,cx			; remove this switch from the records
 32318                                  err_check:
 32319 00002D6B F9                      	stc
 32320                                  err_chk:
 32321 00002D6C C3                      	retn
 32322                                  
 32323                                  ;----------------------------------------------------------------------------
 32324                                  ;
 32325                                  ; procedure : process_num
 32326                                  ;
 32327                                  ; this routine takes the switch just input, and the number following (if any),
 32328                                  ; and sets the value in the appropriate variable. if the number input is zero
 32329                                  ; then it does nothing - it assumes the default value that is present in the
 32330                                  ; variable at the beginning. zero is ok for form factor and drive, however.
 32331                                  ;
 32332                                  ;----------------------------------------------------------------------------
 32333                                  
 32334                                  	; 02/11/2022 - Retrodos v4.0 (Modified MSDOS 5.0 IO.SYS)
 32335                                  	; (SYSINIT:3156h)
 32336                                  process_num:
 32337 00002D6D 850E[8F36]              	test	[switches],cx		; if this switch has been done before,
 32338 00002D71 752B                    	jnz	short done_ret		; ignore this one.
 32339                                  	; 12/12/2022
 32340 00002D73 F6C108                  	test	cl,flagdrive ; 8
 32341                                  	;test	cx,flagdrive ; 8
 32342 00002D76 7404                    	jz	short try_f
 32343 00002D78 A2[8E36]                	mov	byte [drive],al
 32344                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 32345                                  	;jmp	short done_ret
 32346                                  	; 12/12/2022
 32347                                  	; cf=0
 32348 00002D7B C3                      	retn	; 13/05/2019
 32349                                  try_f:
 32350                                  	; 12/12/2022
 32351 00002D7C F6C180                  	test	cl,flagff ; 80h
 32352                                  	;test	cx,flagff ; 80h
 32353 00002D7F 7404                    	jz	short try_t
 32354                                  
 32355                                  ; ensure that we do not get bogus form factors that are not supported
 32356                                  
 32357                                  	;mov	[deviceparameters+1],al
 32358 00002D81 A2[6735]                	mov	[deviceparameters+A_DEVICEPARAMETERS.DP_DEVICETYPE],al
 32359                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 32360                                  	;jmp	short done_ret
 32361                                  	; 12/12/2022
 32362                                  	; cf=0
 32363 00002D84 C3                      	retn	; 13/05/2019
 32364                                  try_t:
 32365 00002D85 09C0                    	or	ax,ax
 32366 00002D87 7415                    	jz	short done_ret		; if number entered was 0, assume default value
 32367                                  	; 12/12/2022
 32368 00002D89 F6C110                  	test	cl,flagcyln ; 10h
 32369                                  	;test	cx,flagcyln ; 10h
 32370 00002D8C 7404                    	jz	short try_s
 32371                                  
 32372                                  	;mov	[deviceparameters+4],ax
 32373 00002D8E A3[6A35]                	mov	[deviceparameters+A_DEVICEPARAMETERS.DP_CYLINDERS],ax
 32374                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 32375                                  	;jmp	short done_ret
 32376                                  	; 12/12/2022
 32377                                  	; cf=0
 32378 00002D91 C3                      	retn	; 13/05/2019
 32379                                  try_s:
 32380                                  	; 12/12/2022
 32381 00002D92 F6C120                  	test	cl,flagseclim ; 20h
 32382                                  	;test	cx,flagseclim ; 20h
 32383 00002D95 7404                    	jz	short try_h
 32384 00002D97 A3[8C36]                	mov	[slim],ax
 32385                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 32386                                  	;jmp	short done_ret
 32387                                  	; 12/12/2022
 32388                                  	; cf=0
 32389 00002D9A C3                      	retn	; 13/05/2019
 32390                                  
 32391                                  ; must be for number of heads
 32392                                  
 32393                                  try_h:
 32394 00002D9B A3[8A36]                	mov	[hlim],ax
 32395                                  done_ret:
 32396                                  	;clc
 32397                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 32398                                  	; 12/12/2022
 32399                                  	; cf=0 (test instruction resets cf)
 32400                                  	;clc
 32401 00002D9E C3                      	retn
 32402                                  
 32403                                  ; 04/01/2023 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 32404                                  %if 1
 32405                                  
 32406                                  ; 15/04/2019 - Retro DOS v4.0
 32407                                  
 32408                                  ;----------------------------------------------------------------------------
 32409                                  ;
 32410                                  ; procedure : parseline
 32411                                  ;
 32412                                  ; entry point is parseline. al contains the first character in command line.
 32413                                  ;
 32414                                  ;----------------------------------------------------------------------------
 32415                                  
 32416                                  	; 01/11/2022 - Retrodos v4.0 (Modified MSDOS 5.0 IO.SYS)
 32417                                  	; (SYSINIT:30ACh)
 32418                                  parseline:
 32419                                  	; 04/01/2023
 32420                                  	; ds = cs ; *
 32421                                  
 32422                                  	;push	ds ; *
 32423                                  
 32424                                  	;push	cs ; *
 32425                                  	;pop	ds ; *
 32426                                  
 32427                                  nextswtch:
 32428 00002D9F 3C0D                    	cmp	al,cr			; carriage return?
 32429 00002DA1 741C                    	je	short done_line
 32430 00002DA3 3C0A                    	cmp	al,lf			; linefeed?
 32431 00002DA5 7421                    	je	short put_back		; put it back and done
 32432                                  
 32433                                  ; anything less or equal to a space is ignored.
 32434                                  
 32435 00002DA7 3C20                    	cmp	al,' '                  ; space?
 32436 00002DA9 760F                    	jbe	short getnext		; skip over space
 32437 00002DAB 3C2F                    	cmp	al,'/'
 32438 00002DAD 7402                    	je	short getparm
 32439 00002DAF F9                      	stc				; mark error invalid-character-in-input
 32440                                  	;jmp	short exitpl
 32441                                  	; 04/01/2023
 32442                                  swterr:
 32443 00002DB0 C3                      	retn
 32444                                  
 32445                                  getparm:
 32446 00002DB1 E865FF                  	call	check_switch
 32447 00002DB4 891E[8F36]              	mov	[switches],bx		; save switches read so far
 32448 00002DB8 72F6                    	jc	short swterr
 32449                                  getnext:
 32450 00002DBA E876F9                  	call	getchr
 32451                                  	;jc	short done_line
 32452                                  	;jmp	short nextswtch
 32453                                  	; 04/01/2023
 32454 00002DBD 73E0                    	jnc	short nextswtch
 32455                                  ;swterr:
 32456                                  	;jmp	short exitpl		; exit if error
 32457                                  
 32458                                  done_line:
 32459                                  	; 12/12/2022
 32460 00002DBF F606[8F36]08            	test	byte [switches],flagdrive ; 8
 32461                                  	;test	word [switches],flagdrive ; 8 ; see if drive specified
 32462 00002DC4 750C                    	jnz	short okay
 32463 00002DC6 F9                      	stc				; mark error no-drive-specified
 32464                                  	;jmp	short exitpl
 32465                                  	; 04/01/2023
 32466 00002DC7 C3                      	retn
 32467                                  
 32468                                  ;exitpl:
 32469                                  	; 04/01/2023
 32470                                  	; ds = cs
 32471                                  	;;pop	ds ; *
 32472                                  	;retn
 32473                                  
 32474                                  put_back:
 32475 00002DC8 FF06[D203]              	inc	word [count]		; one more char to scan
 32476 00002DCC FF0E[D603]              	dec	word [chrptr]		; back up over linefeed
 32477 00002DD0 EBED                    	jmp	short done_line
 32478                                  
 32479                                  okay:
 32480 00002DD2 A1[8F36]                	mov	ax,[switches]
 32481 00002DD5 83E003                  	and	ax,0003h	    ; get flag bits for changeline and non-rem
 32482 00002DD8 A3[6835]                	mov	[deviceparameters+A_DEVICEPARAMETERS.DP_DEVICEATTRIBUTES],ax
 32483 00002DDB C706[8C35]0000          	mov	word [deviceparameters+A_DEVICEPARAMETERS.DP_TRACKTABLEENTRIES],0
 32484                                  	;clc			    ; everything is fine
 32485                                  	; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 32486                                  	; 12/12/2022
 32487                                  	; cf=0
 32488                                  	;clc
 32489                                  	;call	setdeviceparameters
 32490                                  	; 04/01/2023
 32491                                  	;jmp	short setdeviceparameters
 32492                                  
 32493                                  %endif
 32494                                  
 32495                                  ;	M047 -- Begin modifications (too numerous to mark specifically)
 32496                                  
 32497                                  ;----------------------------------------------------------------------------
 32498                                  ;
 32499                                  ; procedure : setdeviceparameters
 32500                                  ;
 32501                                  ; setdeviceparameters sets up the recommended bpb in each bds in the
 32502                                  ; system based on the form factor. it is assumed that the bpbs for the
 32503                                  ; various form factors are present in the bpbtable. for hard files,
 32504                                  ; the recommended bpb is the same as the bpb on the drive.
 32505                                  ; no attempt is made to preserve registers since we are going to jump to
 32506                                  ; sysinit straight after this routine.
 32507                                  ;
 32508                                  ;	if we return carry, the DRIVPARM will be aborted, but presently
 32509                                  ;	  we always return no carry
 32510                                  ;
 32511                                  ;	note:  there is a routine by the same name in msdioctl.asm
 32512                                  ;
 32513                                  ;----------------------------------------------------------------------------
 32514                                  
 32515                                  ; 15/04/2019 - Retro DOS v4.0
 32516                                  
 32517                                  	; 02/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 32518                                  setdeviceparameters:
 32519                                  	; 04/01/2023
 32520                                  	; ds = cs
 32521                                  	
 32522 00002DE1 06                      	push	es
 32523                                  
 32524 00002DE2 0E                      	push	cs
 32525 00002DE3 07                      	pop	es
 32526                                  
 32527 00002DE4 31DB                    	xor	bx,bx
 32528 00002DE6 8A1E[6735]              	mov	bl,[deviceparameters+A_DEVICEPARAMETERS.DP_DEVICETYPE]
 32529 00002DEA 80FB00                  	cmp	bl,DEV_5INCH ; 0
 32530 00002DED 7506                    	jne	short got_80
 32531                                  
 32532 00002DEF C706[6A35]2800          	mov	word [deviceparameters+A_DEVICEPARAMETERS.DP_CYLINDERS],40
 32533                                  							; 48 tpi=40 cyl
 32534                                  got_80:
 32535 00002DF5 D1E3                    	shl	bx,1			; get index into bpb table
 32536 00002DF7 8BB7[0E37]              	mov	si,[bpbtable+bx]	; get address of bpb
 32537                                  
 32538                                  	;mov	di,deviceparameters+7	
 32539                                  	; 02/11/2022
 32540 00002DFB BF[6D35]                	mov	di,deviceparameters+A_DEVICEPARAMETERS.DP_BPB ; es:di -> bpb
 32541 00002DFE B91F00                  	mov	cx,A_BPB.size ; 31
 32542 00002E01 FC                      	cld
 32543                                  	;repe	movsb
 32544                                  	; 02/11/2022
 32545 00002E02 F3A4                    	rep	movsb
 32546                                  
 32547 00002E04 07                      	pop	es
 32548                                  
 32549                                  	; 12/12/2022
 32550 00002E05 F606[8F36]20            	test	byte [switches],flagseclim ; 20h
 32551                                  	;test	word [switches],flagseclim ; 20h
 32552 00002E0A 7406                    	jz	short see_heads
 32553                                  
 32554 00002E0C A1[8C36]                	mov	ax,[slim]
 32555                                  	;mov	[deviceparameters+20],ax
 32556 00002E0F A3[7A35]                	mov	[deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.BPB_SECTORSPERTRACK],ax
 32557                                  
 32558                                  see_heads:
 32559                                  	; 12/12/2022
 32560 00002E12 F606[8F36]40            	test	byte [switches],flagheads ; 40h
 32561                                  	;test	word [switches],flagheads ; 40h
 32562 00002E17 7406                    	jz	short heads_not_altered
 32563                                  
 32564 00002E19 A1[8A36]                	mov	ax,[hlim]
 32565                                  	;mov	[deviceparameters+22],ax	
 32566 00002E1C A3[7C35]                	mov	[deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.BPB_HEADS],ax
 32567                                  
 32568                                  heads_not_altered:
 32569                                  
 32570                                  ; set up correct media descriptor byte and sectors/cluster
 32571                                  ;   sectors/cluster is always 2 except for any one sided disk or 1.44M
 32572                                  
 32573                                  	;mov	byte [deviceparameters+9],2
 32574                                  	; 02/11/2022
 32575                                  	;mov	byte [deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.BPB_SECTORSPERCLUSTER],2
 32576                                  	; 04/01/2023
 32577 00002E1F B80200                  	mov	ax,2	
 32578 00002E22 A2[6F35]                	mov	[deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.BPB_SECTORSPERCLUSTER],al ; 2
 32579                                  
 32580 00002E25 B3F0                    	mov	bl,0F0h			; get default mediabyte
 32581                                  
 32582                                  ;	preload the mediadescriptor from the bpb into bh for convenient access
 32583                                  
 32584                                  	;mov	bh,[deviceparameters+17]
 32585                                  	; 02/11/2022
 32586 00002E27 8A3E[7735]              	mov	bh,[deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.BPB_MEDIADESCRIPTOR]
 32587                                  
 32588                                  	; 04/01/2023
 32589                                  	; ax = 2
 32590 00002E2B 3906[7C35]              	cmp	[deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.BPB_HEADS],ax ; >2 heads?
 32591                                  	;cmp	word [deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.BPB_HEADS],2 ; >2 heads?
 32592 00002E2F 773C                    	ja	short got_correct_mediad ; just use default if heads>2
 32593                                  
 32594 00002E31 7524                    	jne	short only_one_head	; one head, do one head stuff
 32595                                  
 32596                                  ;	two head drives will use the mediadescriptor from the bpb
 32597                                  
 32598 00002E33 88FB                    	mov	bl,bh			; get mediadescriptor from bpb
 32599                                  
 32600                                  ;	two sided drives have two special cases to look for. One is
 32601                                  ;	   a 320K diskette (40 tracks, 8 secs per track). It uses
 32602                                  ;	   a mediaid of 0fch. The other is 1.44M, which uses only
 32603                                  ;	   one sector/cluster.
 32604                                  
 32605                                  ;	any drive with 18secs/trk, 2 heads, 80 tracks, will be assumed
 32606                                  ;	   to be a 1.44M and use only 1 sector per cluster. Any other
 32607                                  ;	   type of 2 headed drive is all set.
 32608                                  
 32609 00002E35 833E[7A35]12            	cmp	word [deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.BPB_SECTORSPERTRACK],18
 32610 00002E3A 7509                    	jne	short not_144m
 32611 00002E3C 833E[6A35]50            	cmp	word [deviceparameters+A_DEVICEPARAMETERS.DP_CYLINDERS],80
 32612 00002E41 7502                    	jne	short not_144m
 32613                                  
 32614                                  ;	We've got cyl=80, heads=2, secpertrack=18. Set cluster size to 1.
 32615                                  
 32616 00002E43 EB24                    	jmp	short got_one_secperclus_drive
 32617                                  
 32618                                  ;	check for 320K
 32619                                  
 32620                                  not_144m:
 32621 00002E45 833E[6A35]28            	cmp	word [deviceparameters+A_DEVICEPARAMETERS.DP_CYLINDERS],40
 32622 00002E4A 7521                    	jne	short got_correct_mediad
 32623 00002E4C 833E[7A35]08            	cmp	word [deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.BPB_SECTORSPERTRACK],8
 32624 00002E51 751A                    	jne	short got_correct_mediad
 32625                                  
 32626 00002E53 B3FC                    	mov	bl,0FCh
 32627 00002E55 EB16                    	jmp	short got_correct_mediad
 32628                                  
 32629                                  only_one_head:
 32630                                  
 32631                                  ;	if we don't have a 360K drive, then just go use 0f0h as media descr.
 32632                                  
 32633 00002E57 803E[6735]00            	cmp	byte [deviceparameters+A_DEVICEPARAMETERS.DP_DEVICETYPE],DEV_5INCH ; 0
 32634 00002E5C 740B                    	je	short got_one_secperclus_drive
 32635                                  
 32636                                  ;	single sided 360K drive uses either 0fch or 0feh, depending on
 32637                                  ;	  whether sectorspertrack is 8 or 9. For our purposes, anything
 32638                                  ;	  besides 8 will be considered 0fch
 32639                                  
 32640 00002E5E B3FC                    	mov	bl,0FCh			; single sided 9 sector media id
 32641 00002E60 833E[7A35]08            	cmp	word [deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.BPB_SECTORSPERTRACK],8
 32642                                  	; 12/12/2022
 32643 00002E65 7502                    	jne	short got_one_secperclus_drive ; okay if anything besides 8
 32644                                  
 32645 00002E67 B3FE                    	mov	bl,0FEh			; 160K mediaid
 32646                                  
 32647                                  ;	we've either got a one sided drive, or a 1.44M drive
 32648                                  ;	  either case we'll use 1 sector per cluster instead of 2
 32649                                  
 32650                                  got_one_secperclus_drive:
 32651                                  	; 04/01/2023
 32652                                  	; ax = 2
 32653 00002E69 48                      	dec	ax  ; ax = 1
 32654 00002E6A A2[6F35]                	mov	[deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.BPB_SECTORSPERCLUSTER],al ; 1
 32655                                  	;mov	byte [deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.BPB_SECTORSPERCLUSTER],1
 32656                                  
 32657                                  got_correct_mediad:
 32658 00002E6D 881E[7735]              	mov	[deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.BPB_MEDIADESCRIPTOR],bl
 32659                                  
 32660                                  ;	 Calculate the correct number of Total Sectors on medium
 32661                                  
 32662 00002E71 A1[6A35]                	mov	ax,[deviceparameters+A_DEVICEPARAMETERS.DP_CYLINDERS]
 32663 00002E74 F726[7C35]              	mul	word [deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.BPB_HEADS]
 32664 00002E78 F726[7A35]              	mul	word [deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.BPB_SECTORSPERTRACK]
 32665 00002E7C A3[7535]                	mov	word [deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.BPB_TOTALSECTORS],ax
 32666 00002E7F F8                      	clc				; we currently return no errors
 32667                                  
 32668 00002E80 C3                      	retn
 32669                                  
 32670                                  ;	M047 -- end rewritten routine
 32671                                  
 32672                                  ;----------------------------------------------------------------------------
 32673                                  ;
 32674                                  ; procedure : organize
 32675                                  ;
 32676                                  ;----------------------------------------------------------------------------
 32677                                  
 32678                                  	; 02/11/2022 - Retrodos v4.0 (Modified MSDOS 5.0 IO.SYS)
 32679                                  	; (SYSINIT:3234h)
 32680                                  
 32681                                  organize:
 32682                                  	; 04/01/2023
 32683                                  	; ds = cs
 32684 00002E81 8B0E[D203]              	mov	cx,[count]
 32685                                  	;mov	cx,[cs:count]
 32686 00002E85 E326                    	jcxz	nochar1
 32687                                  
 32688                                  ;ifndef	MULTI_CONFIG
 32689                                  ;
 32690                                  ;;   In MULTI_CONFIG, we map to upper case on a line-by-line basis,
 32691                                  ;;   because we the case of values in SET commands preserved
 32692                                  ;
 32693                                  ;	call	mapcase
 32694                                  ;endif
 32695                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 32696 00002E87 E81B02                  	call	mapcase
 32697                                  
 32698 00002E8A 31F6                    	xor	si,si
 32699 00002E8C 89F7                    	mov	di,si
 32700 00002E8E 31C0                    	xor	ax,ax
 32701                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)	
 32702                                  	;;mov	byte [cs:com_level],0
 32703                                  	; 12/12/2022
 32704                                  	;mov	[cs:com_level],al ; 0
 32705                                  	; 04/01/2023
 32706                                  	; ds = cs
 32707 00002E90 A2[CC03]                	mov	[com_level],al ; 0
 32708                                  org1:
 32709 00002E93 E8B101                  	call	skip_comment
 32710 00002E96 740D                    	jz	short end_commd_line	; found a comment string and skipped.
 32711 00002E98 E89601                  	call	get2			; not a comment string. then get a char.
 32712 00002E9B 3C0A                    	cmp	al,lf ; 0Ah
 32713 00002E9D 7406                    	je	short end_commd_line	; starts with a blank line.
 32714 00002E9F 3C20                    	cmp	al,' ' ; 20h
 32715 00002EA1 76F0                    	jbe	short org1		; skip leading control characters
 32716 00002EA3 EB0A                    	jmp	short findit
 32717                                  
 32718                                  end_commd_line:
 32719 00002EA5 AA                      	stosb				; store line feed char in buffer for the linecount.
 32720                                  	;mov	byte [cs:com_level],0	; reset the command level.
 32721                                  	; 04/01/2023
 32722                                  	; ds = cs
 32723 00002EA6 C606[CC03]00            	mov	byte [com_level],0
 32724 00002EAB EBE6                    	jmp	short org1
 32725                                  
 32726                                  nochar1:
 32727 00002EAD F9                      	stc
 32728 00002EAE C3                      	retn
 32729                                  
 32730                                  findit:
 32731 00002EAF 51                      	push	cx
 32732 00002EB0 56                      	push	si
 32733 00002EB1 57                      	push	di
 32734 00002EB2 89F5                    	mov	bp,si
 32735 00002EB4 4D                      	dec	bp
 32736 00002EB5 BE[D534]                        mov     si,comtab		; prepare to search command table
 32737 00002EB8 B500                    	mov	ch,0
 32738                                  findcom:
 32739 00002EBA 89EF                    	mov	di,bp
 32740 00002EBC 8A0C                    	mov	cl,[si]
 32741 00002EBE 46                      	inc	si
 32742 00002EBF E324                    	jcxz	nocom
 32743                                  
 32744                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 32745                                  
 32746                                  ;ifdef	MULTI_CONFIG
 32747                                  ;
 32748                                  ;;   Simplify future parsing by collapsing ";" onto "REM", and at the same
 32749                                  ;;   time skip the upcoming delimiter test (since ";" need not be followed by
 32750                                  ;;   anything in particular)
 32751                                  ;
 32752                                  ;       cmp     byte [es:di],CONFIG_SEMICOLON  ; ';'
 32753                                  ;       je	short semicolon
 32754                                  ;loopcom:
 32755                                  ;       mov     al,[es:di]
 32756                                  ;       inc     di
 32757                                  ;       and     al,~20h ; 0DFh		; force upper case
 32758                                  ;       inc     si                      ; compare to byte @es:di
 32759                                  ;       cmp     al,[si-1]
 32760                                  ;       loope   loopcom
 32761                                  ;;else
 32762                                  ;;	repe	cmpsb
 32763                                  ;endif
 32764                                  	; 02/11/2022
 32765 00002EC1 F3A6                    	repe	cmpsb
 32766                                  
 32767 00002EC3 9F                      	lahf
 32768 00002EC4 01CE                            add     si,cx                   ; bump to next position without affecting flags
 32769 00002EC6 9E                      	sahf
 32770 00002EC7 AC                              lodsb                           ; get indicator letter
 32771 00002EC8 75F0                    	jnz	short findcom
 32772 00002ECA 26803D0D                        cmp     byte [es:di],cr		; the next char might be cr,lf
 32773 00002ECE 7410                    	je	short gotcom0 		; such as in "rem",cr,lf case.
 32774 00002ED0 26803D0A                	cmp	byte [es:di],lf
 32775 00002ED4 740A                    	je	short gotcom0
 32776                                  
 32777                                  ; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 32778                                  ;
 32779                                  ;;ifdef	MULTI_CONFIG
 32780                                  ;
 32781                                  ;;   Skip the delimiter test for the BEGIN identifier (it doesn't have one).
 32782                                  ;
 32783                                  ;       cmp     al,CONFIG_BEGIN  ; '['
 32784                                  ;       je	short gotcom0
 32785                                  ;;endif
 32786                                  ;	push	ax
 32787                                  ;       mov     al,[es:di]		; now the next char. should be a delim.
 32788                                  ;
 32789                                  ;;ifdef	MULTI_CONFIG
 32790                                  ;
 32791                                  ;;   If keyword is *immediately* followed by a question mark (?), then
 32792                                  ;;   set the high bit of the ASCII command code (CONFIG_OPTION_QUERY) that is
 32793                                  ;;   stored in the CONFIG.SYS memory image.
 32794                                  ;
 32795                                  ;       cmp     al,'?'                  ; explicit interactive command?
 32796                                  ;       jne	short no_query		; no
 32797                                  ;       pop     ax                      ; yes, so retrieve the original code
 32798                                  ;       or      al,CONFIG_OPTION_QUERY  ; and set the QUERY bit
 32799                                  ;       jmp     short gotcom0           ;
 32800                                  ;semicolon:
 32801                                  ;       mov     al,CONFIG_REM
 32802                                  ;       jmp     short gotcom0
 32803                                  ;no_query:
 32804                                  ;;endif  ;MULTI_CONFIG
 32805                                  
 32806                                  	; 02/11/2022
 32807 00002ED6 50                      	push	ax
 32808 00002ED7 268A05                  	mov	al,[es:di]		; now the next char. should be a delim.
 32809                                  
 32810 00002EDA E8A001                  	call	delim
 32811                                  no_delim:
 32812 00002EDD 58                      	pop	ax
 32813 00002EDE 75DA                    	jnz	short findcom
 32814                                  gotcom0:
 32815 00002EE0 5F                      	pop	di
 32816 00002EE1 5E                      	pop	si
 32817 00002EE2 59                      	pop	cx
 32818 00002EE3 EB0F                    	jmp	short gotcom
 32819                                  nocom:
 32820 00002EE5 5F                      	pop	di
 32821 00002EE6 5E                      	pop	si
 32822 00002EE7 59                      	pop	cx
 32823 00002EE8 B05A                            mov     al,CONFIG_UNKNOWN  ; 'Z'
 32824 00002EEA AA                      	stosb				; save indicator char.
 32825                                  _skipline:
 32826 00002EEB E84301                  	call	get2
 32827 00002EEE 3C0A                    	cmp	al,lf ; 0Ah		; skip this bad command line
 32828 00002EF0 75F9                            jne     short _skipline
 32829 00002EF2 EBB1                    	jmp	short end_commd_line	; handle next command line
 32830                                  gotcom:
 32831 00002EF4 AA                              stosb                           ; save indicator char in buffer
 32832                                  
 32833                                  ; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 32834                                  ;;ifdef	MULTI_CONFIG
 32835                                  ;
 32836                                  ;;   Don't pollute "cmd_indicator" with the CONFIG_OPTION_QUERY bit though;
 32837                                  ;;   it screws up the direct comparisons below.
 32838                                  ;
 32839                                  ;       and     al,~CONFIG_OPTION_QUERY ; 7Fh
 32840                                  ;;endif
 32841                                  ;	mov	[cs:cmd_indicator],al	; save it for the future use.
 32842                                  ;
 32843                                  ;;ifdef	MULTI_CONFIG
 32844                                  ;
 32845                                  ;;   There is no whitespace/delimiter between the "begin block" character
 32846                                  ;;   ([) and the name of block (eg, [menu]), therefore skip this delimiter
 32847                                  ;;   skipping code
 32848                                  ;
 32849                                  ;       cmp     al,CONFIG_BEGIN
 32850                                  ;       je	short org31
 32851                                  ;       cmp     al,CONFIG_SUBMENU ; 'O'
 32852                                  ;       je      short no_mapcase
 32853                                  ;       cmp     al,CONFIG_MENUITEM ; 'E'
 32854                                  ;       je      short no_mapcase
 32855                                  ;       cmp     al,CONFIG_MENUDEFAULT ; 'A'
 32856                                  ;       je      short no_mapcase
 32857                                  ;       cmp     al,CONFIG_INCLUDE ; 'J'
 32858                                  ;       je      short no_mapcase
 32859                                  ;       call    mapcase                 ; map case of rest of line to UPPER
 32860                                  ;no_mapcase:
 32861                                  ;;endif
 32862                                  
 32863                                  	; 02/11/2022
 32864                                  	;mov	[cs:cmd_indicator],al	; save it for the future use.
 32865                                  	; 04/01/2023
 32866                                  	; ds = cs
 32867 00002EF5 A2[D003]                	mov	[cmd_indicator],al
 32868                                  org2:	
 32869 00002EF8 E83601                  	call    get2                    ; skip the command name until delimiter
 32870 00002EFB 3C0A                            cmp     al,lf
 32871 00002EFD 740B                    	je	short org21
 32872 00002EFF 3C0D                    	cmp	al,cr
 32873 00002F01 7407                    	je	short org21
 32874                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 32875                                  	;cmp	al, '/'			; T-RICHJ: Added to allow DEVHIGH/L:...
 32876                                  	;je	short org21		; T-RICHJ: to be parsed properly.
 32877                                  
 32878 00002F03 E87701                  	call	delim
 32879 00002F06 75F0                            jnz	short org2
 32880 00002F08 EB02                    	jmp	short org3
 32881                                  org21:					;if cr or lf then
 32882 00002F0A 4E                      	dec	si			; undo si, cx register
 32883 00002F0B 41                      	inc	cx			;  and continue
 32884                                  org3:	
 32885                                  	;cmp	byte [cs:cmd_indicator],CONFIG_COMMENT ; 'Y'
 32886                                  	;je	short get_cmt_token
 32887                                  	;; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 32888                                          ;;cmp	byte [cs:cmd_indicator],CONFIG_DEVICE ; 'D'
 32889                                  	;;je	short org_file
 32890                                          ;cmp     byte [cs:cmd_indicator],CONFIG_INSTALL ; 'I'
 32891                                  	;je	short org_file
 32892                                          ;;cmp	byte [cs:cmd_indicator],CONFIG_INSTALLHIGH ; 'W'
 32893                                          ;;je	short org_file
 32894                                  	;; 02/11/2022
 32895                                  	;cmp     byte [cs:cmd_indicator],CONFIG_DEVICE ; 'D'
 32896                                  	;je	short org_file
 32897                                          ;cmp     byte [cs:cmd_indicator],CONFIG_SHELL ; 'S'
 32898                                  	;je	short org_file
 32899                                          ;cmp	byte [cs:cmd_indicator],CONFIG_SWITCHES ; '1'
 32900                                  	;je	short org_switch
 32901                                  
 32902                                  	; 04/01/2023
 32903                                  	; ds = cs
 32904                                  
 32905 00002F0C 803E[D003]59            	cmp	byte [cmd_indicator],CONFIG_COMMENT ; 'Y'
 32906 00002F11 7456                    	je	short get_cmt_token
 32907                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 32908                                          ;cmp	byte [cmd_indicator],CONFIG_DEVICE ; 'D'
 32909                                  	;je	short org_file
 32910 00002F13 803E[D003]49                    cmp     byte [cmd_indicator],CONFIG_INSTALL ; 'I'
 32911 00002F18 7429                    	je	short org_file
 32912                                          ;cmp	byte [cmd_indicator],CONFIG_INSTALLHIGH ; 'W'
 32913                                          ;je	short org_file
 32914                                  	; 02/11/2022
 32915 00002F1A 803E[D003]44            	cmp     byte [cmd_indicator],CONFIG_DEVICE ; 'D'
 32916 00002F1F 7422                    	je	short org_file
 32917 00002F21 803E[D003]53                    cmp     byte [cmd_indicator],CONFIG_SHELL ; 'S'
 32918 00002F26 741B                    	je	short org_file
 32919 00002F28 803E[D003]31                    cmp	byte [cmd_indicator],CONFIG_SWITCHES ; '1'
 32920 00002F2D 7403                    	je	short org_switch
 32921                                  	
 32922                                  org31:
 32923 00002F2F E99500                  	jmp	org4
 32924                                  
 32925                                  org_switch:
 32926 00002F32 E81201                  	call	skip_comment
 32927 00002F35 7472                    	jz	short end_commd_line_brdg
 32928                                  
 32929 00002F37 E8F700                  	call	get2
 32930 00002F3A E84801                  	call	org_delim
 32931 00002F3D 74F3                    	jz	short org_switch
 32932                                  
 32933 00002F3F AA                      	stosb
 32934 00002F40 E99300                  	jmp	org5
 32935                                  
 32936                                  org_file:			; get the filename and put 0 at end
 32937 00002F43 E80101                  	call	skip_comment
 32938 00002F46 7464                    	jz	short org_put_zero
 32939                                  
 32940 00002F48 E8E600                  	call	get2		; not a comment
 32941 00002F4B E82F01                  	call	delim
 32942 00002F4E 74F3                    	jz	short org_file	; skip the possible delimiters
 32943                                  
 32944 00002F50 AA                      	stosb			; copy the first non delim char found in buffer
 32945                                  
 32946                                  org_copy_file:
 32947 00002F51 E8F300                  	call	skip_comment	; comment char in the filename?
 32948 00002F54 7456                    	jz	short org_put_zero ; then stop copying filename at that point
 32949                                  
 32950 00002F56 E8D800                  	call	get2
 32951 00002F59 3C2F                    	cmp	al,'/'		; a switch char? (device=filename/xxx)
 32952 00002F5B 7457                    	je	short end_file_slash ; this will be the special case.
 32953                                  
 32954 00002F5D AA                      	stosb			; save the char. in buffer
 32955 00002F5E E81C01                  	call	delim
 32956 00002F61 7459                    	jz	short end_copy_file
 32957                                  
 32958 00002F63 3C20                    	cmp	al, ' '
 32959 00002F65 77EA                    	ja	short org_copy_file ; keep copying
 32960 00002F67 EB53                    	jmp	short end_copy_file ; otherwise, assume end of the filename.
 32961                                  
 32962                                  get_cmt_token:			; get the token. just max. 2 char.
 32963 00002F69 E8C500                  	call	get2
 32964 00002F6C 3C20                    	cmp	al,' '		; skip white spaces or "=" char.
 32965 00002F6E 74F9                    	je	short get_cmt_token ; (we are allowing the other special
 32966 00002F70 3C09                    	cmp	al,tab ; 9 	;  characters can used for comment id.
 32967 00002F72 74F5                    	je	short get_cmt_token ;  character.)
 32968 00002F74 3C3D                    	cmp	al,'='		; = is special in this case.
 32969 00002F76 74F1                    	je	short get_cmt_token
 32970 00002F78 3C0D                    	cmp	al,cr
 32971 00002F7A 7426                    	je	short get_cmt_end ; cannot accept the carriage return
 32972 00002F7C 3C0A                    	cmp	al,lf
 32973 00002F7E 7422                    	je	short get_cmt_end
 32974                                  
 32975                                  	; 04/01/2023
 32976                                  	; ds = cs
 32977                                  	;mov	[cs:cmmt1],al	; store it
 32978                                  	;mov	byte [cs:cmmt],1 ; 1 char. so far.
 32979 00002F80 A2[CE03]                	mov	[cmmt1],al	; store it
 32980 00002F83 C606[CD03]01            	mov	byte [cmmt],1 ; 1 char. so far.
 32981 00002F88 E8A600                  	call	get2
 32982 00002F8B 3C20                    	cmp	al,' ' ; 20h
 32983 00002F8D 7413                    	je	short get_cmt_end
 32984 00002F8F 3C09                    	cmp	al,tab ; 9
 32985 00002F91 740F                    	je	short get_cmt_end
 32986 00002F93 3C0D                    	cmp	al,cr  ; 0Dh
 32987 00002F95 740B                    	je	short get_cmt_end
 32988 00002F97 3C0A                    	cmp	al,lf  ; 0Ah
 32989 00002F99 740E                    	je	short end_commd_line_brdg
 32990                                  
 32991                                  	;mov	[cs:cmmt2],al
 32992                                  	;inc	byte [cs:cmmt]
 32993                                  	; 04/01/2023
 32994 00002F9B A2[CF03]                	mov	[cmmt2],al
 32995 00002F9E FE06[CD03]              	inc	byte [cmmt]
 32996                                  
 32997                                  get_cmt_end:
 32998 00002FA2 E88C00                  	call	get2
 32999 00002FA5 3C0A                    	cmp	al,lf
 33000 00002FA7 75F9                    	jne	short get_cmt_end	; skip it.
 33001                                  end_commd_line_brdg: 
 33002 00002FA9 E9F9FE                  	jmp	end_commd_line		; else jmp to end_commd_line
 33003                                  
 33004                                  org_put_zero:				; make the filename in front of
 33005 00002FAC 26C60500                	mov	byte [es:di],0		;  the comment string to be an asciiz.
 33006 00002FB0 47                      	inc	di
 33007 00002FB1 E9F1FE                  	jmp	end_commd_line		;  (maybe null if device=/*)
 33008                                  
 33009                                  end_file_slash: 			; al = "/" option char.
 33010 00002FB4 26C60500                	mov	byte [es:di],0		; make a filename an asciiz
 33011 00002FB8 47                      	inc	di			; and
 33012 00002FB9 AA                      	stosb				; store "/" after that.
 33013 00002FBA EB1A                    	jmp	short org5		; continue with the rest of the line
 33014                                  
 33015                                  end_copy_file:
 33016 00002FBC 26C645FF00              	mov	byte [es:di-1],0	; make it an asciiz and handle the next char.
 33017 00002FC1 3C0A                    	cmp	al,lf
 33018 00002FC3 74E4                    	je	short end_commd_line_brdg
 33019 00002FC5 EB0F                    	jmp	short org5
 33020                                  
 33021                                  org4:					; org4 skips all delimiters after the command name except for '/'
 33022 00002FC7 E87D00                  	call	skip_comment
 33023 00002FCA 74DD                    	jz	short end_commd_line_brdg
 33024                                  
 33025 00002FCC E86200                  	call	get2
 33026 00002FCF E8B300                  	call	org_delim		; skip delimiters except '/' (mrw 4/88)
 33027 00002FD2 74F3                    	jz	short org4
 33028 00002FD4 EB08                    	jmp	short org51
 33029                                  
 33030                                  org5:					; rest of the line
 33031 00002FD6 E86E00                  	call	skip_comment		; comment?
 33032 00002FD9 74CE                    	jz	short end_commd_line_brdg
 33033 00002FDB E85300                  	call	get2			; not a comment.
 33034                                  
 33035                                  org51:
 33036 00002FDE AA                      	stosb				; copy the character
 33037 00002FDF 3C22                    	cmp	al,'"' 	; 22h		; a quote ?
 33038 00002FE1 743A                    	je	short at_quote
 33039 00002FE3 3C20                    	cmp	al,' '  ; 20h
 33040 00002FE5 77EF                    	ja	short org5
 33041                                  					; M051 - Start
 33042                                  	; 04/01/2023
 33043                                  	; ds = cs
 33044 00002FE7 803E[D003]55                    cmp	byte [cmd_indicator],CONFIG_DEVICEHIGH
 33045                                  	;cmp	byte [cs:cmd_indicator],CONFIG_DEVICEHIGH ; Q: is this devicehigh
 33046 00002FEC 7514                    	jne	short not_dh		; N: 
 33047 00002FEE 3C0A                    	cmp	al,lf			; Q: is this line feed
 33048 00002FF0 7416                    	je	short org_dhlf		; Y: stuff a blank before the lf
 33049 00002FF2 3C0D                    	cmp	al,cr			; Q: is this a cr
 33050 00002FF4 75E0                    	jne	short org5		; N: 
 33051 00002FF6 26C645FF20              	mov	byte [es:di-1],' '	; overwrite cr with blank
 33052 00002FFB AA                      	stosb				; put cr after blank
 33053 00002FFC FE06[C32C]              	inc	byte [insert_blank]
 33054                                  	;inc	byte [cs:insert_blank]	; indicate that blank has been 
 33055                                  					; inserted
 33056 00003000 EBD4                    	jmp	short org5
 33057                                  not_dh:					; M051 - End
 33058                                  
 33059 00003002 3C0A                    	cmp	al,lf			; line feed?
 33060 00003004 740F                    	je	short org1_brdg		; handles the next command line.
 33061 00003006 EBCE                    	jmp	short org5		; handles next char in this line.
 33062                                  
 33063                                  org_dhlf:				; M051 - Start
 33064                                  	; 04/01/2023
 33065                                  	; ds = cs
 33066 00003008 803E[C32C]01            	cmp	byte [insert_blank],1
 33067                                  	;cmp	byte [cs:insert_blank],1 ; Q:has a blank already been inserted
 33068 0000300D 7406                    	je	short org1_brdg		; Y:
 33069 0000300F 26C645FF20              	mov	byte [es:di-1],' '	; overwrite lf with blank
 33070 00003014 AA                      	stosb				; put lf after blank
 33071                                  					; M051 - End
 33072                                  org1_brdg:
 33073 00003015 C606[C32C]00            	mov	byte [insert_blank],0 
 33074                                  	;mov	byte [cs:insert_blank],0 ; M051: clear blank indicator for 
 33075                                  					; M051: devicehigh
 33076 0000301A E976FE                  	jmp	org1
 33077                                  
 33078                                  at_quote:
 33079 0000301D 803E[CC03]00            	cmp	byte [com_level],0
 33080                                  	;cmp	byte [cs:com_level],0
 33081 00003022 7407                    	je	short up_level
 33082                                  	;mov	byte [cs:com_level],0	; reset it.
 33083 00003024 C606[CC03]00            	mov	byte [com_level],0
 33084 00003029 EBAB                    	jmp	short org5
 33085                                  
 33086                                  up_level:
 33087                                  	;inc	byte [cs:com_level]	; set it.
 33088 0000302B FE06[CC03]              	inc	byte [com_level]
 33089 0000302F EBA5                    	jmp	short org5
 33090                                  
 33091                                  ;----------------------------------------------------------------------------
 33092                                  ;
 33093                                  ; procedure : get2
 33094                                  ;
 33095                                  ;----------------------------------------------------------------------------
 33096                                  
 33097                                  	; 02/11/2022 - Retrodos v4.0 (Modified MSDOS 5.0 IO.SYS)
 33098                                  	; (SYSINIT:33FAh)
 33099                                  	; 04/01/2023
 33100                                  get2:
 33101 00003031 E304                    	jcxz	noget
 33102                                  	;
 33103                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 33104                                  	;;lods	byte ptr es:[si]
 33105                                  	; 12/12/2022
 33106 00003033 26                      	es	
 33107 00003034 AC                      	lodsb
 33108                                  	;mov	al, [es:si]
 33109                                  	;inc	si
 33110                                  	;
 33111 00003035 49                      	dec	cx
 33112 00003036 C3                      	retn
 33113                                  noget:
 33114 00003037 59                      	pop	cx
 33115                                  	; 04/01/2023
 33116                                  	; ds = cs
 33117                                  	;mov	[cs:count],di ; 13/05/2019
 33118                                  	;mov	[cs:org_count],di
 33119 00003038 893E[D203]              	mov	[count],di
 33120 0000303C 893E[D403]              	mov	[org_count],di
 33121 00003040 31F6                    	xor	si,si
 33122                                  	;mov	[cs:chrptr],si
 33123 00003042 8936[D603]              	mov	[chrptr],si
 33124                                  
 33125                                  ; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 33126                                  ;;ifndef MULTI_CONFIG
 33127                                  ;;	retn
 33128                                  ;;else
 33129                                  ;
 33130                                  ;;   This was the rather kludgy way out of procedure "organize", but instead
 33131                                  ;;   of returning to doconf, we now want to check config.sys BEGIN/END blocks
 33132                                  ;;   and the new boot menu stuff...
 33133                                  ;
 33134                                  ;	mov     cx,di
 33135                                  ;	jmp     menu_check
 33136                                  ;;endif
 33137                                  
 33138                                  	; 02/11/2022
 33139 00003046 C3                      	retn
 33140                                  
 33141                                  ;----------------------------------------------------------------------------
 33142                                  ;
 33143                                  ; procedure : skip_comment
 33144                                  ;
 33145                                  ;skip the commented string until lf, if current es:si-> a comment string.
 33146                                  ;in) es:si-> string
 33147                                  ;	 cx -> length.
 33148                                  ;out) zero flag not set if not found a comment string.
 33149                                  ;	  zero flag set if found a comment string and skipped it. al will contain
 33150                                  ;	  the line feed character at this moment when return.
 33151                                  ;	  ax register destroyed.
 33152                                  ;	  if found, si, cx register adjusted accordingly.
 33153                                  ;
 33154                                  ;----------------------------------------------------------------------------
 33155                                  
 33156                                  	; 04/01/2023 - Retro DOS v4.0
 33157                                  
 33158                                  skip_comment:
 33159 00003047 E3EE                    	jcxz	noget		; get out of the organize routine.
 33160                                  
 33161                                  	; 04/01/2023
 33162                                  	; ds = cs	
 33163                                  
 33164 00003049 803E[CC03]00            	cmp	byte [com_level],0
 33165                                  	;cmp	byte [cs:com_level],0 ; only check it if parameter level is 0.
 33166 0000304E 752C                    	jne	short no_commt	 ; (not inside quotations)
 33167                                  
 33168 00003050 803E[CD03]01            	cmp	byte [cmmt],1
 33169                                  	;cmp	byte [cs:cmmt],1
 33170 00003055 7225                    	jb	short no_commt
 33171                                  
 33172 00003057 268A04                  	mov	al,[es:si]
 33173                                  	
 33174 0000305A 3806[CE03]              	cmp	[cmmt1],al
 33175                                  	;cmp	[cs:cmmt1],al
 33176 0000305E 751C                    	jne	short no_commt
 33177                                  
 33178 00003060 803E[CD03]02            	cmp	byte [cmmt],2
 33179                                  	;cmp	byte [cs:cmmt],2
 33180 00003065 750A                    	jne	short skip_cmmt
 33181                                  
 33182 00003067 268A4401                	mov	al,[es:si+1]
 33183                                  	
 33184 0000306B 3806[CF03]              	cmp	[cmmt2],al
 33185                                  	;cmp	[cs:cmmt2],al
 33186 0000306F 750B                    	jne	short no_commt
 33187                                  skip_cmmt:
 33188 00003071 E3C4                    	jcxz	noget		; get out of organize routine.
 33189 00003073 268A04                  	mov	al,[es:si]
 33190 00003076 46                      	inc	si
 33191 00003077 49                      	dec	cx
 33192 00003078 3C0A                    	cmp	al,lf		; line feed?
 33193 0000307A 75F5                    	jne	short skip_cmmt
 33194                                  no_commt:
 33195 0000307C C3                      	retn
 33196                                  
 33197                                  ; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 33198                                  %if 0
 33199                                  
 33200                                  ;ifdef	MULTI_CONFIG
 33201                                  
 33202                                  ;----------------------------------------------------------------------------
 33203                                  ;
 33204                                  ;   kbd_read: wait for keystroke
 33205                                  ;
 33206                                  ;   INPUT
 33207                                  ;       DS == CS == sysinitseg
 33208                                  ;
 33209                                  ;   OUTPUT
 33210                                  ;       Carry SET to clean boot, CLEAR otherwise
 33211                                  ;
 33212                                  ;   OTHER REGS USED
 33213                                  ;       All
 33214                                  ;
 33215                                  ;   HISTORY
 33216                                  ;       Created 16-Nov-1992 by JeffPar
 33217                                  ;
 33218                                  ;----------------------------------------------------------------------------
 33219                                  
 33220                                  kbd_read:
 33221                                          test    byte [bDisableUI],2
 33222                                          jnz     short kbd_nodelay
 33223                                  
 33224                                          push    ds              ; the bios timer tick count is incremented
 33225                                          sub     ax,ax           ; 18.2 times per second;
 33226                                          mov     ds,ax           ; watch the timer tick count for 37 transitions
 33227                                  	;mov	dx,[046Ch]	; get initial value
 33228                                  kbd_loop:
 33229                                          mov     ah,1            ;
 33230                                          int     16h             ; peek the keyboard
 33231                                          jnz	short kbd_loopdone ; something's there, get out
 33232                                          mov     ah,2            ; peek the shift states
 33233                                          int     16h             ;
 33234                                          test    al,03h          ; either right or left shift key bits set?
 33235                                          jnz	short kbd_loopdone ; yes
 33236                                          mov     ax,[046Ch]	;
 33237                                  	;sub	ax,dx           ; get difference
 33238                                  	; 15/04/2019 - Retro DOS v4.0
 33239                                  	sub	ax,[cs:_timer_lw_] ; MSDOS 6.21 IO.SYS - SYSINIT:42E5h        
 33240                                  
 33241                                  	cmp     al,37           ; reached limit?
 33242                                          jb	short kbd_loop	; not yet
 33243                                  kbd_loopdone:
 33244                                          pop     ds              ; delay complete!
 33245                                  kbd_nodelay:
 33246                                          sub     bx,bx           ; assume clean boot
 33247                                          mov     ah,2            ; peek the shift states
 33248                                          int     16h             ;
 33249                                          test    al,03h          ; either right or left shift key bits set?
 33250                                          jz      short kbd_notshift ; no
 33251                                          inc     bx              ; yes
 33252                                          inc     bx
 33253                                  	; MSDOS 6.21 IO.SYS - SYSINIT:4301h
 33254                                  	or	byte [bQueryOpt],4
 33255                                  kbd_notshift:                   ;
 33256                                          mov     ah,1            ; peek the keyboard
 33257                                          int     16h             ;
 33258                                          jz	short kbd_test	; no key present
 33259                                          or      al,al           ; is it a function key?
 33260                                          jnz	short kbd_test	; no
 33261                                  
 33262                                  	; MSDOS 6.21 IO.SYS - SYSINIT:430Bh
 33263                                          cmp     ah,62h          ; CTRL F5
 33264                                          je	short kbd_cfg_bypass
 33265                                  	
 33266                                          cmp     ah,3Fh          ; F5 function key?
 33267                                          jne	short kbd_notf5	; no
 33268                                  kbd_cfg_bypass:
 33269                                          mov     dx,_$CleanMsg
 33270                                          call    print
 33271                                  	; MSDOS 6.21 IO.SYS - SYSINIT:431Bh
 33272                                  	or	byte [bQueryOpt],4           ;
 33273                                          jmp     short kbd_eat   ; yes, clean boot selected
 33274                                  kbd_notf5:
 33275                                  	; MSDOS 6.21 IO.SYS - SYSINIT:4322h
 33276                                          cmp     ah,65h          ; CTRL F8
 33277                                          je	short kbd_cfg_confirm
 33278                                  
 33279                                          cmp     ah,42h          ; F8 function key?
 33280                                          jne	short kbd_exit	; no
 33281                                  kbd_cfg_confirm:
 33282                                          mov     dx,_$InterMsg
 33283                                          call    print           ;
 33284                                          mov     bl,1            ; yes, interactive-boot option enabled
 33285                                          mov     [bQueryOpt],bl  ; change default setting
 33286                                  kbd_eat:                        ;
 33287                                          mov     ah,0            ;
 33288                                          int     16h             ; eat the key we assumed was a signal
 33289                                          mov	byte [secElapsed],-1
 33290                                          or      bx,bx           ;
 33291                                          jz	short kbd_clean	;
 33292                                  kbd_test:                       ;
 33293                                          cmp     bl,2            ;
 33294                                          jb	short kbd_exit	;
 33295                                  kbd_clean:                      ;
 33296                                          call    disable_autoexec; yes, tell COMMAND to skip autoexec.bat
 33297                                          stc                     ; set carry to indicate abort
 33298                                          retn			;
 33299                                  kbd_exit:                       ;
 33300                                          clc                     ; clear carry to indicate success
 33301                                          retn			;
 33302                                  
 33303                                  ;----------------------------------------------------------------------------
 33304                                  ;
 33305                                  ;   set_numlock: set numlock LED
 33306                                  ;
 33307                                  ;   INPUT
 33308                                  ;       ES:SI -> numlock setting (ie, "ON" or "OFF")
 33309                                  ;
 33310                                  ;   OUTPUT
 33311                                  ;       None
 33312                                  ;
 33313                                  ;   OTHER REGS USED
 33314                                  ;       None
 33315                                  ;
 33316                                  ;   HISTORY
 33317                                  ;       Created 16-Nov-1992 by JeffPar
 33318                                  ;
 33319                                  ;----------------------------------------------------------------------------
 33320                                  
 33321                                  set_numlock:
 33322                                          push    ax
 33323                                          push    ds
 33324                                          sub     ax,ax
 33325                                          mov     ds,ax
 33326                                          mov     ax,[es:si]      ; get 1st 2 bytes of value (ON or OF)
 33327                                          cmp     ax,[cs:OnOff+2]	; should we turn it off?
 33328                                          jne	short not_off	; no
 33329                                          and     byte [0417h],~20h ; 0DFh
 33330                                          jmp     short set_done
 33331                                  not_off:
 33332                                          cmp     ax,[cs:OnOff]	; should we turn it on?
 33333                                          stc
 33334                                          jne	short set_done	; no
 33335                                          or      byte [0417h],20h
 33336                                  set_done:
 33337                                          pop     ds
 33338                                          pop     ax
 33339                                          retn
 33340                                  
 33341                                  ; 16/04/2019 - Retro DOS v4.0
 33342                                  
 33343                                  ;----------------------------------------------------------------------------
 33344                                  ;
 33345                                  ;   menu_check:  check for presence of menu (and other) configuration blocks
 33346                                  ;
 33347                                  ;   INPUT
 33348                                  ;       CX == "organized" config.sys memory image length
 33349                                  ;    ES:SI -> "organized" config.sys memory image
 33350                                  ;       DS == CS == sysinitseg
 33351                                  ;
 33352                                  ;   OUTPUT
 33353                                  ;       Same as above;  the idea is that menu_check simply transforms
 33354                                  ;       a block-structured config.sys image into a conventional image,
 33355                                  ;       based on the user's block selection and any other boot-time options
 33356                                  ;       the user may have employed...
 33357                                  ;
 33358                                  ;   OTHER REGS USED
 33359                                  ;       All
 33360                                  ;
 33361                                  ;   NOTES
 33362                                  ;       [count] and [org_count] are set to the new config.sys image length
 33363                                  ;
 33364                                  ;   HISTORY
 33365                                  ;       Created 16-Mar-1992 by JeffPar
 33366                                  ;
 33367                                  ;----------------------------------------------------------------------------
 33368                                  
 33369                                  menu_check:
 33370                                  
 33371                                  ;   Search for SWITCHES, determine if /N or /F are present;  if so, then
 33372                                  ;   disable clean/interactive boot options
 33373                                  
 33374                                          push    cx              ;
 33375                                          push    si              ;
 33376                                          sub     bx,bx           ; remains ZERO until first block
 33377                                  swchk_loop:                     ;
 33378                                          call    get_char        ; get first char of current line
 33379                                          jc	short swchk_end	; hit eof
 33380                                          cmp     al,CONFIG_BEGIN ;
 33381                                          jne	short swchk_next1 ;
 33382                                          inc     bx              ; remember that we've seen a block
 33383                                          jmp     short swchk_nextline
 33384                                  swchk_next1:                    ;
 33385                                          cmp     al,CONFIG_NUMLOCK
 33386                                          jne	short swchk_next2 ;
 33387                                          or      bx,bx           ; only do NUMLOCK commands that exist
 33388                                          jnz	short swchk_nextline ; before the first block
 33389                                          call    set_numlock     ; REM it out so we don't act on it later, too
 33390                                          mov     byte [es:si-1],CONFIG_REM
 33391                                          jmp     short swchk_nextline
 33392                                  swchk_next2:                    ;
 33393                                          cmp     al,CONFIG_SWITCHES
 33394                                          jne	short swchk_nextline ; this line ain't it
 33395                                  swchk_scan:                     ;
 33396                                          call    get_char        ; look for /N or /F
 33397                                  swchk_scan1:                    ;
 33398                                          cmp     al,LF           ; end of line?
 33399                                          je	short swchk_nextline ; yes
 33400                                          cmp     al,'/'          ; switch-char?
 33401                                          jne	short swchk_scan ; no
 33402                                          call    get_char        ;
 33403                                          and     al,~20h ; 0DFh	; convert to upper case
 33404                                          cmp     al,[swit_n+1]
 33405                                          jne	short swchk_scan2 ; no
 33406                                          or      byte [bDisableUI],1
 33407                                          jmp	short swchk_scan ; continue looking for switches of interest
 33408                                  swchk_scan2:                    ;
 33409                                          cmp     al,[swit_f+1]
 33410                                          jne	short swchk_scan1 ; no
 33411                                          or      byte [bDisableUI],2
 33412                                          jmp     short swchk_scan ; continue looking for switches of interest
 33413                                  swchk_nextline:                 ;
 33414                                          call    skip_opt_line   ;
 33415                                          jmp     short swchk_loop ;
 33416                                  swchk_end:                      ;
 33417                                          pop     si              ;
 33418                                          pop     cx              ;
 33419                                  
 33420                                  ;   Do the keyboard tests for clean/interactive boot now, but only if
 33421                                  ;   the DisableUI flag is still clear
 33422                                  
 33423                                          test    byte [bDisableUI],1
 33424                                          jnz	short menu_search
 33425                                  ;
 33426                                  ;   Wait for 2 seconds first, UNLESS the /F bit was set in bDisableUI, or
 33427                                  ;   there is anything at all in the keyboard buffer
 33428                                  ;
 33429                                          call    kbd_read
 33430                                          jnc	short menu_search
 33431                                          jmp	menu_abort
 33432                                  
 33433                                  ;   Search for MENU block;  it is allowed to be anywhere in config.sys
 33434                                  
 33435                                  menu_search:
 33436                                          sub     bx,bx           ; if no MENU, default to zero for no_selection
 33437                                          mov     di,szMenu	;
 33438                                          call    find_block      ; find the MENU block
 33439                                          jnc	short menu_found ;
 33440                                          mov     byte [szBoot],0
 33441                                          jmp	no_selection ; not found
 33442                                  
 33443                                  ;   Process the requested menu color(s)
 33444                                  
 33445                                  menu_color:
 33446                                          push    cx              ;
 33447                                          push    dx              ;
 33448                                          mov     dx,0007h        ; default color setting
 33449                                          call    get_number	; get first number
 33450                                          and     bl,0Fh		; first # is foreground color (for low nibble)
 33451                                          mov     ch,bl           ; save it in CH
 33452                                          and     dl,0F0h         ;
 33453                                          or      dl,bl           ;
 33454                                          call    delim           ; did we hit a delimiter
 33455                                          jne	short check_color ; no, all done
 33456                                          call    get_number	; get next number
 33457                                          and     bl,0Fh		; second # is background color (for high nibble)
 33458                                          mov     dh,bl           ; save it in DH
 33459                                          and     dl,0Fh		;
 33460                                          mov     cl,4            ;
 33461                                          shl     bl,cl           ;
 33462                                          or      dl,bl           ;
 33463                                  check_color:                    ;
 33464                                          cmp     ch,dh           ; are foreground/background the same?
 33465                                          jne	short set_color	; no
 33466                                          xor     dl,08h          ; yes, so modify the fgnd intensity
 33467                                  set_color:
 33468                                          mov     [bMenuColor],dl ;
 33469                                          pop     dx              ;
 33470                                          pop     cx              ;
 33471                                          jmp	menu_nextitem
 33472                                  
 33473                                  ;   Back to our regularly scheduled program (the COLOR and other goop
 33474                                  ;   above is there simply to alleviate short jump problems)
 33475                                  
 33476                                  menu_found:
 33477                                          mov     byte [bDefBlock],1
 33478                                          mov     word [offDefBlock],0
 33479                                          mov     byte [secTimeOut],-1
 33480                                          and     byte [bQueryOpt],~2 ; 0FDh
 33481                                  
 33482                                          call    skip_opt_line   ; skip to next line
 33483                                          sub     dx,dx           ; initialize total block count (0 => none yet)
 33484                                  
 33485                                  ;   Process the menu block now
 33486                                  
 33487                                  menu_process:
 33488                                          call    get_char        ; get first char of current line
 33489                                          jc	short to_menu_getdefault ; could happen if menu block at end (rare)
 33490                                          and     al,~CONFIG_OPTION_QUERY ; 7Fh
 33491                                          cmp     al,CONFIG_BEGIN ; BEGIN implies END
 33492                                          je	short to_menu_getdefault
 33493                                          cmp     al,CONFIG_SUBMENU
 33494                                          je	short menu_item	; go process sub-menu
 33495                                          cmp     al,CONFIG_MENUITEM
 33496                                          je	short menu_item	; go process menu item
 33497                                          cmp     al,CONFIG_MENUDEFAULT
 33498                                          je	short menu_default ; go process menu default
 33499                                          cmp     al,CONFIG_MENUCOLOR
 33500                                          je	short menu_color ; go process menu color
 33501                                          cmp     al,CONFIG_NUMLOCK
 33502                                          je	short menu_numlock ;
 33503                                          cmp     al,CONFIG_REM   ; allow remarks in menu block
 33504                                          je	short menu_nextitem ;
 33505                                          call    any_delim       ; allow blank lines and such
 33506                                          je	short menu_nextitem ;
 33507                                          stc                     ;
 33508                                          call    print_error     ; non-MENU command!
 33509                                          jmp     short menu_nextitem
 33510                                  menu_numlock:
 33511                                          call    set_numlock
 33512                                          jmp     short menu_nextitem
 33513                                  to_menu_getdefault:
 33514                                          jmp     short menu_getdefault
 33515                                  
 33516                                  ;   Save the offset of the default block name, we'll need it later
 33517                                  
 33518                                  menu_default:
 33519                                          mov     [offDefBlock],si; save address of default block name
 33520                                          cmp     byte [secElapsed],0
 33521                                          jne	short timeout_skip ; secElapsed is only zero for the FIRST menu,
 33522                                          call    skip_token      ; and for subsequent menus IF nothing was typed;
 33523                                          jc	short menu_nextitem ; secElapsed becomes -1 forever as soon as
 33524                                          call    skip_delim      ; something is typed
 33525                                          jc	short menu_nextitem ;
 33526                                          mov     si,bx           ;
 33527                                          call    get_number      ; get number (of seconds for timeout)
 33528                                          cmp     bl,90           ; limit it to a reasonable number
 33529                                          jb	short timeout_ok ; (besides, 99 is the largest # my simple
 33530                                          mov     bl,90           ;  display function can handle)
 33531                                  timeout_ok:                     ;
 33532                                          mov     [secTimeOut],bl ;
 33533                                  timeout_skip:
 33534                                          jmp     short menu_nextitem
 33535                                  
 33536                                  ;   Verify that this is a valid menu item by searching for the named block
 33537                                  
 33538                                  menu_item:
 33539                                          cmp     dl,MAX_MULTI_CONFIG ; have we reached the max # of items yet?
 33540                                          jae	short menu_nextitem ;
 33541                                          mov     di,si           ; DS:DI -> block name to search for
 33542                                          call    srch_block      ;
 33543                                          je	short menu_itemfound ;
 33544                                          stc                     ;
 33545                                          call    print_error     ; print error and pause
 33546                                          jmp     short menu_nextitem ; if not found, ignore this menu item
 33547                                  
 33548                                  ;   srch_block, having succeeded, returns DI -> past the token that it
 33549                                  ;   just matched, which in this case should be a descriptive string; ES:SI
 33550                                  ;   and CX are unmodified
 33551                                  
 33552                                  menu_itemfound:
 33553                                          inc     dx              ; otherwise, increment total block count
 33554                                          mov     bx,dx           ; and use it to index the arrays of offsets
 33555                                          mov	[abBlockType+bx],al
 33556                                          add     bx,bx           ; of recorded block names and descriptions
 33557                                  
 33558                                  ;   There should be a description immediately following the block name on
 33559                                  ;   MENUITEM line; failing that, we'll just use the block name as the
 33560                                  ;   description...
 33561                                  
 33562                                          mov     [aoffBlockName+bx],si
 33563                                          mov     [aoffBlockDesc+bx],si
 33564                                          mov     di,bx           ; skip_delim modifies BX, so stash it in DI
 33565                                          call    skip_token      ;
 33566                                          jc	short menu_nextitem ; hit eol/eof
 33567                                          call    skip_delim      ;
 33568                                          jc	short menu_nextitem ; hit eol/eof
 33569                                          xchg    bx,di           ;
 33570                                          mov     [aoffBlockDesc+bx],di
 33571                                  
 33572                                  menu_nextitem:
 33573                                          call    skip_opt_line   ;
 33574                                          jmp     menu_process    ; go back for more lines
 33575                                  
 33576                                  ;   Display menu items now, after determining which one is default
 33577                                  
 33578                                  menu_getdefault:
 33579                                          or      dl,dl           ; where there any valid blocks at all?
 33580                                          jnz	short menu_valid ; yes
 33581                                          sub     bx,bx           ; no, so force autoselect of 0
 33582                                          jmp     menu_autoselect ; (meaning: process common blocks only)
 33583                                  menu_valid:
 33584                                          sub     bx,bx           ;
 33585                                          mov     [bMaxBlock],dl  ; first, record how many blocks we found
 33586                                          mov     di,[offDefBlock];
 33587                                          or      di,di           ; does a default block exist?
 33588                                          jz	short menu_nodefault ; no
 33589                                          inc     bx              ; yes, walk name table, looking for default
 33590                                  menu_chkdefault:
 33591                                          push    bx              ;
 33592                                          add     bx,bx           ;
 33593                                          mov     si,[aoffBlockName+bx]
 33594                                          mov     cx,128          ; arbitrary maximum length of a name
 33595                                          push    ds              ;
 33596                                          push    es              ;
 33597                                          pop     ds              ;
 33598                                          call    comp_names      ; is this block the same as the default?
 33599                                          pop     ds              ;
 33600                                          pop     bx              ;
 33601                                          je	short menu_setdefault ; yes
 33602                                          inc     bx              ;
 33603                                          cmp     bl,[bMaxBlock]  ; all done searching?
 33604                                          jbe	short menu_chkdefault ; not yet
 33605                                  menu_nodefault:
 33606                                          mov     bl,1            ; if no default, force default to #1
 33607                                  menu_setdefault:
 33608                                          mov     [bDefBlock],bl  ; yes, this will be the initial current block
 33609                                  
 33610                                  ;   If the timeout was explicitly set to 0 (or technically, anything that
 33611                                  ;   failed to resolve to a number, like "NONE" or "EAT POTATOES"), then we're
 33612                                  ;   supposed to skip menu display and run with the specified default block;
 33613                                  ;   however, if the user hit Enter prior to boot, thereby requesting fully
 33614                                  ;   INTERACTIVE boot, then we shall display the menu block anyway (though still
 33615                                  ;   with no timeout)
 33616                                  
 33617                                          cmp     byte [secTimeOut],0 ; is timeout zero? (ie, assume default)
 33618                                          jne	short menu_display ; no
 33619                                          test    byte [bQueryOpt],1 ; yes, but was INTERACTIVE requested?
 33620                                          jnz	short menu_display ; yes, so *don't* assume default after all
 33621                                          jmp     not_topmenu	;
 33622                                  
 33623                                  ;   Reset the mode, so that we know screen is clean and cursor is home
 33624                                  
 33625                                  menu_display:
 33626                                          mov     ah,0Fh          ; get current video mode
 33627                                          int     10h             ;
 33628                                          mov     ah,00h          ; just re-select that mode
 33629                                          int     10h             ;
 33630                                          push    es              ;
 33631                                          mov     ax,40h          ; reach down into the ROM BIOS data area
 33632                                          mov     es,ax           ; and save the current (default) video page
 33633                                          mov     ax,[es:004Eh]   ; start address and page #, in case the
 33634                                          mov     [wCRTStart],ax  ; undocumented QUIET option was enabled
 33635                                          mov     al,[es:0062h]   ;
 33636                                          mov     [bCRTPage],al   ;
 33637                                          mov     ax,[bMenuPage]	; select new page for menu
 33638                                          int     10h             ;
 33639                                          mov     ax,0600h        ; clear entire screen
 33640                                          mov     bh,[bMenuColor] ; using this color
 33641                                          sub     cx,cx           ; upper left row/col
 33642                                          ;mov	dl,[es:CRT_Cols] 
 33643                                          mov	dl,[es:4Ah]
 33644                                  	dec     dl              ;
 33645                                          ;mov	dh,[es:CRT_Rows];
 33646                                          mov	dh,[es:84h]
 33647                                  	or      dh,dh           ; # of rows valid?
 33648                                          jnz	short menu_clear ; hopefully
 33649                                          mov     dh,[bLastRow]   ; no, use a default
 33650                                  menu_clear:
 33651                                          int     10h             ; clear the screen using the req. attribute
 33652                                          pop     es              ;
 33653                                          mov     [bLastRow],dh   ; save DH
 33654                                          mov     dx,_$MenuHeader
 33655                                          call    print           ; cursor now on row 3 (numbered from 0)
 33656                                  
 33657                                          test    byte [bDisableUI],1
 33658                                          jnz     short menu_nostatus
 33659                                          mov     bh,[bMenuPage]  ;
 33660                                          mov     dh,[bLastRow]   ; restore DH
 33661                                          mov     dl,0            ; print the status line on row DH, col 0,
 33662                                          mov     ah,02h          ; now that we can trash the cursor position
 33663                                          int     10h             ;
 33664                                          mov     dx,_$StatusLine
 33665                                          call    print           ;
 33666                                          mov     ah,3            ; get cursor position
 33667                                          int     10h             ;
 33668                                          sub     dl,2            ;
 33669                                          mov     [bLastCol],dl   ; save column where status char will go
 33670                                  
 33671                                  menu_nostatus:
 33672                                          mov     bx,1            ; now prepare to display all the menu items
 33673                                  menu_disploop:
 33674                                          call    print_item	; print item #BL
 33675                                          inc     bx              ; why "inc bx"?  because it's a 1-byte opcode
 33676                                          cmp     bl,[bMaxBlock]  ; all done?
 33677                                          jbe	short menu_disploop ; not yet
 33678                                  
 33679                                  ;   Set cursor position to just below the menu items
 33680                                  
 33681                                          mov     dl,0            ; select column
 33682                                          mov     dh,bl           ;
 33683                                          add     dh,4            ; select row below menu
 33684                                          mov     bh,[bMenuPage]  ;
 33685                                          mov     ah,02h          ; set cursor position beneath the block list
 33686                                          int     10h             ;
 33687                                  
 33688                                          mov     dx,_$MenuPrmpt
 33689                                          call    print           ;
 33690                                          call    select_item     ; make a selection, return # in BX
 33691                                          mov     dx,crlfm	
 33692                                          call    print           ;
 33693                                          push    word [bDisableUI]
 33694                                          or      byte [bDisableUI],1
 33695                                          call    show_status     ; clear the status line now
 33696                                          pop     word [bDisableUI]
 33697                                  
 33698                                  ;   Now begins the "re-organization" process...
 33699                                  
 33700                                  menu_autoselect:
 33701                                          cmp     bx,-1           ; clean boot requested?
 33702                                          jne	short normal_boot ; no
 33703                                          call    disable_autoexec; basically, add a /D to the command.com line
 33704                                  menu_abort:
 33705                                          sub     cx,cx           ; then immediately exit with 0 config.sys image
 33706                                          jmp	menu_exit	;
 33707                                  
 33708                                  normal_boot:
 33709                                          cmp     bx,-2           ; back to top-level menu?
 33710                                          jne	short not_topmenu ; no
 33711                                          mov     cx,[count]      ; yes, start all over
 33712                                          sub     si,si           ;
 33713                                          jmp     menu_search
 33714                                  
 33715                                  not_topmenu:
 33716                                          cmp     byte [abBlockType+bx],CONFIG_SUBMENU
 33717                                          jne	short not_submenu
 33718                                          add     bx,bx           ;
 33719                                          mov     di,[aoffBlockName+bx]
 33720                                          call    srch_block      ; THIS CANNOT FAIL!
 33721                                          mov     si,di           ;
 33722                                          mov     cx,bx           ; ES:SI and CX are ready for another round
 33723                                          jmp     menu_found
 33724                                  
 33725                                  not_submenu:
 33726                                          add     bx,bx           ; get BX -> name of selected block
 33727                                          mov     bx,[aoffBlockName+bx]
 33728                                  
 33729                                  ;   BX should now either be ZERO (meaning no block has been selected) or
 33730                                  ;   the offset relative to ES of the block name to be processed (along with
 33731                                  ;   all the "common" lines of course)
 33732                                  
 33733                                  no_selection:
 33734                                          mov     [offDefBlock],bx; save selection
 33735                                          mov     cx,[count]      ; reset ES:SI and CX for reprocessing
 33736                                          sub     si,si           ;
 33737                                          push    ds              ;
 33738                                          mov     ds,[config_wrkseg]; this is where we'll store new config.sys image
 33739                                          sub     di,di           ;
 33740                                  
 33741                                  ;   ES:SI-> config.sys, DS:DI -> new config.sys workspace
 33742                                  ;
 33743                                  ;   Work our way through the config.sys image again, this time copying
 33744                                  ;   all lines that are (A) "common" lines outside any block or (B) lines
 33745                                  ;   within the requested block.  Lines inside INCLUDEd blocks are transparently
 33746                                  ;   copied by copy_block in a recursive fashion;  the amount of recursion is
 33747                                  ;   limited by the fact INCLUDE statements are REMed by copy_block as they are
 33748                                  ;   processed and by the number of unique INCLUDE stmts in config.sys...
 33749                                  ;
 33750                                  ;   BUGBUG 20-Mar-1992 JeffPar: If we can figure out the lower bound of the
 33751                                  ;   stack we're running on, then we should check it inside copy_block
 33752                                  
 33753                                  copyblock_loop:
 33754                                          push    bx              ; save selected block name
 33755                                          call    copy_block      ; process (named or common) block
 33756                                          pop     bx              ;
 33757                                          jc	short move_config ; hit eof
 33758                                  
 33759                                  ;   copy_block can only return for two reasons:  it hit eof or a new block
 33760                                  
 33761                                  copyblock_begin:
 33762                                          push    ax              ;
 33763                                          push    cx              ;
 33764                                          push    si              ;
 33765                                          push    di              ; always do "common" blocks
 33766                                          mov     di,szCommon
 33767                                          push    ds              ;
 33768                                          push    cs              ;
 33769                                          pop     ds              ;
 33770                                          call    comp_names      ;
 33771                                          pop     ds              ;
 33772                                          pop     di              ;
 33773                                          pop     si              ;
 33774                                          pop     cx              ;
 33775                                          pop     ax              ;
 33776                                          je	short copyblock_check
 33777                                          or      bx,bx           ; is there a block name to check?
 33778                                          jz	short copyblock_skip ; no
 33779                                          push    di              ;
 33780                                          mov     di,bx           ; check block against given block name
 33781                                          push    ds              ;
 33782                                          push    es              ;
 33783                                          pop     ds              ;
 33784                                          call    comp_names      ; is this the block we really want to do?
 33785                                          pop     ds              ;
 33786                                          pop     di              ;
 33787                                  copyblock_check:
 33788                                          jc	short move_config ; hit eof
 33789                                          jne	short copyblock_skip  ;
 33790                                          call    skip_opt_line   ;
 33791                                          jmp	short copyblock_loop 
 33792                                  
 33793                                  copyblock_skip:                 ;
 33794                                          call    skip_opt_line   ; this ain't the block we wanted, so skip it
 33795                                          call    get_char        ;
 33796                                          jc	short move_config ; hit eof
 33797                                          and     al,~CONFIG_OPTION_QUERY ; 7Fh
 33798                                          cmp     al,CONFIG_BEGIN ;
 33799                                          je	short copyblock_begin
 33800                                          jmp     short copyblock_skip ; anything else is just skipped
 33801                                  ;
 33802                                  ;   To create as little risk to the rest of SysInit as little as possible,
 33803                                  ;   and to free the workspace at "config_wrkseg" for creating an environment,
 33804                                  ;   copy the new config.sys image to "confbot"
 33805                                  ;
 33806                                  move_config:
 33807                                          mov     cx,di           ; now copy workspace at DS:DI to "confbot"
 33808                                          push    cx              ;
 33809                                  ;
 33810                                  ;   But first, copy the CONFIG=<configuration><0> string to the workspace,
 33811                                  ;   since the configuration name only currently exists in the "confbot" area
 33812                                  ;
 33813                                   	;mov	cx,7
 33814                                  	mov     cx,szMenu-szBoot-1
 33815                                          mov     si,szBoot	; first copy the CONFIG= part
 33816                                          inc     di              ; skip a byte, in case absolutely nothing
 33817                                                                  ; was copied to the workspace, because we always
 33818                                                                  ; zero the first byte of the workspace (below)
 33819                                  copy_boot: 
 33820                                  	;lods    byte ptr cs:[si];
 33821                                          cs
 33822                                  	lodsb
 33823                                  	mov     [di],al         ;
 33824                                          inc     di              ;
 33825                                          loop    copy_boot       ;
 33826                                  
 33827                                          push    es              ; then copy the configuration name
 33828                                          mov     cx,128-7        ; put an upper limit on the name, to be safe
 33829                                          mov     si,[cs:offDefBlock]; ES:SI -> default block name
 33830                                          or      si,si           ; valid?
 33831                                          jnz	short l1	; yes
 33832                                          push    cs              ;
 33833                                          pop     es              ;
 33834                                          mov     si,szCommon
 33835                                  l1:     mov     al,[es:si]      ;
 33836                                          call    any_delim       ;
 33837                                          je	short l2	;
 33838                                          mov     [di],al         ;
 33839                                          inc     si              ;
 33840                                          inc     di              ;
 33841                                          loop    l1              ;
 33842                                  l2:     mov     byte [di],lf	; terminate the configuration string
 33843                                          pop     es              ;
 33844                                  
 33845                                  ;   Now we can copy "config_wrkseg" (DS) to "confbot" (ES)
 33846                                  
 33847                                          sub     di,di           ;
 33848                                          mov     [cs:config_envlen],di
 33849                                          sub     si,si           ;
 33850                                          pop     cx              ; recover the size of "config_wrkseg"
 33851                                  
 33852                                          push    cx              ;
 33853                                          rep     movsb           ; moved!
 33854                                          pop     cx              ;
 33855                                          mov     ax,ds           ;
 33856                                          pop     ds              ;
 33857                                  
 33858                                  ;   Now that the config_wrkseg is available once again, we shall
 33859                                  ;   use it to create an environment. The first thing to go in will be
 33860                                  ;   the "CONFIG=configuration" thing. It is also important to zero
 33861                                  ;   the first byte of the workspace, so that copy_envvar knows the buffer
 33862                                  ;   is empty.
 33863                                  
 33864                                          push    es              ;
 33865                                          mov     es,ax           ;
 33866                                          inc     si              ; ES:SI -> "CONFIG=configuration"
 33867                                          mov     byte [es:0],0	;empty the environment block
 33868                                          call    copy_envvar     ; copy envvar at ES:SI to "config_wrkseg"
 33869                                          pop     es
 33870                                  
 33871                                  ;   Before returning, restore the default video page setting but do NOT
 33872                                  ;   do it using INT 10h's Set Active Page function, because if the menu was
 33873                                  ;   displayed on a different page, then it's because we don't want to see
 33874                                  ;   all the device driver/TSR goop (which goes to the default page)
 33875                                  
 33876                                  menu_done:
 33877                                          cmp     byte [bMenuPage],0
 33878                                          je	short menu_exit	;
 33879                                          push    es              ;
 33880                                          mov     ax,40h          ;
 33881                                          mov     es,ax           ;
 33882                                          mov     ax,[wCRTStart]  ;
 33883                                          mov     [es:004Eh],ax   ;
 33884                                          mov     al,[bCRTPage]   ;
 33885                                          mov     [es:0062h],al   ;
 33886                                          pop     es              ;
 33887                                  menu_exit:
 33888                                          mov     [count],cx      ; set new counts
 33889                                          mov     [org_count],cx  ;
 33890                                          sub     si,si           ; always return ES:SI pointing to config.sys
 33891                                          retn
 33892                                  
 33893                                  ;----------------------------------------------------------------------------
 33894                                  ;
 33895                                  ;   copy_envvar:  copy the envvar at ES:SI to "config_wrkseg"
 33896                                  ;
 33897                                  ;   INPUT
 33898                                  ;    ES:SI -> environment variable (in the form "var=string<cr/lf>")
 33899                                  ;
 33900                                  ;   OUTPUT
 33901                                  ;       config_envlen (ie, where to put next envvar) updated appropriately
 33902                                  ;       carry set if error (eg, missing =); clear otherwise
 33903                                  ;
 33904                                  ;   OTHER REGS USED
 33905                                  ;       None
 33906                                  ;
 33907                                  ;   NOTES
 33908                                  ;       None
 33909                                  ;
 33910                                  ;   HISTORY
 33911                                  ;       Created 29-Mar-1992 by JeffPar
 33912                                  ;
 33913                                  ;----------------------------------------------------------------------------
 33914                                  
 33915                                  copy_envvar:
 33916                                          push    cx              ;
 33917                                          push    si              ;
 33918                                          push    ds              ;
 33919                                          push    es              ;
 33920                                          push    es              ;
 33921                                          mov     es,[config_wrkseg] ; ES:DI to point to next available byte
 33922                                          pop     ds                 ; DS:SI to point to envvar
 33923                                  
 33924                                  ;   Have to calculate the length of the variable name (and if we hit
 33925                                  ;   the end of the line before we hit '=', then it's curtains for this
 33926                                  ;   config.sys line)
 33927                                  ;
 33928                                  ;   The check for NULL is important because copy_envvar is also used to copy
 33929                                  ;   the initial CONFIG= setting, which will have been zapped by a NULL if no
 33930                                  ;   menu block existed (in order to prevent the creation of an environment)
 33931                                  
 33932                                          sub     cx,cx           ;
 33933                                  copy_varlen:                    ;
 33934                                          lodsb                   ;
 33935                                          or      al,al           ; NULL?
 33936                                          stc                     ;
 33937                                          jz	short copy_envexit ; yes, abort
 33938                                          cmp     al,cr          ;
 33939                                          stc                     ;
 33940                                          je	short copy_envexit
 33941                                          cmp     al,lf          ;
 33942                                          stc                     ;
 33943                                          je	short copy_envexit
 33944                                          inc     cx              ;
 33945                                          cmp     al,'='          ;
 33946                                          jne	short copy_varlen
 33947                                          mov     al,0            ;
 33948                                          mov     ah,[si]         ; save char after '='
 33949                                          sub     si,cx           ; back up to given varname
 33950                                          dec     cx              ; CX == # of bytes in varname
 33951                                          sub     di,di           ; start looking for DS:SI at ES:0
 33952                                  copy_varsrch:
 33953                                          cmp     byte [es:di],al
 33954                                          je	short copy_envprep ; search failed, just copy var
 33955                                          mov     bx,di           ; ES:BX -> start of this varname
 33956                                          push    cx              ;
 33957                                          push    si              ;
 33958                                          repe    cmpsb           ;
 33959                                          pop     si              ;
 33960                                          pop     cx              ;
 33961                                          jne	short copy_varnext ; no match, skip to next varname
 33962                                          cmp     byte [es:di],'='
 33963                                          jne     short copy_varnext ; no match, there's more characters
 33964                                  
 33965                                  ;   Previous occurrence of variable has been found; determine the
 33966                                  ;   entire length and then destroy it
 33967                                  
 33968                                          mov     cx,-1           ;
 33969                                          repne   scasb           ; guaranteed to get null (since we put it there)
 33970                                          push    si              ;
 33971                                          mov     si,di           ;
 33972                                          mov     di,bx           ;
 33973                                          mov     cx,[cs:config_envlen]
 33974                                          sub     cx,si           ; destroy variable now
 33975                                  	;rep movs byte ptr es:[di],byte ptr es:[si]
 33976                                  	;;db 0F3h,26h,0A4h ; MSDOS 6.21 IO:SYS - SYSINIT:4724h
 33977                                  
 33978                                  	rep	; 0F3h
 33979                                  	es	; 26h
 33980                                  	movsb	; 0A4h
 33981                                  
 33982                                  	pop     si
 33983                                  copy_envprep:
 33984                                          cmp     ah,cr          ; if there is nothing after the '='
 33985                                          je	short copy_envdel ; then just exit with variable deleted
 33986                                          cmp     ah,lf           ;
 33987                                          je	short copy_envdel
 33988                                          jmp     short copy_envloop
 33989                                  
 33990                                  copy_varnext:                   ;
 33991                                          push    cx              ;
 33992                                          mov     cx,-1           ;
 33993                                          repne   scasb           ;
 33994                                          pop     cx              ;
 33995                                          jmp	short copy_varsrch
 33996                                  
 33997                                  copy_envloop:                   ;
 33998                                          lodsb                   ;
 33999                                          cmp     al,cr           ;
 34000                                          je	short copy_envdone
 34001                                          cmp     al,lf           ;
 34002                                          je	short copy_envdone
 34003                                          stosb                   ;
 34004                                          jmp     short copy_envloop
 34005                                  
 34006                                  copy_envdone:                   ;
 34007                                          sub     al,al           ; do SUB to clear carry as well
 34008                                          stosb                   ; always null-terminate these puppies
 34009                                  copy_envdel:                    ;
 34010                                          mov     [es:di],al      ; and stick another null to terminate the env.
 34011                                          mov     [cs:config_envlen],di
 34012                                  
 34013                                  copy_envexit:                   ;
 34014                                          pop     es              ;
 34015                                          pop     ds              ;
 34016                                          pop     si              ;
 34017                                          pop     cx              ;
 34018                                  
 34019                                  copy_done:	; 18/12/2022
 34020                                          retn
 34021                                  
 34022                                  ;----------------------------------------------------------------------------
 34023                                  ;
 34024                                  ;   copy_block:  copy the current block to the new config.sys workspace
 34025                                  ;
 34026                                  ;   INPUT
 34027                                  ;       CX == remaining bytes in "organized" config.sys memory image
 34028                                  ;    ES:SI -> remaining bytes in "organized" config.sys memory image
 34029                                  ;    DS:DI -> new config.sys workspace (equal in size to the original
 34030                                  ;             config.sys image) where the current block is to be copied
 34031                                  ;
 34032                                  ;   OUTPUT
 34033                                  ;       Same as above
 34034                                  ;       AL also equals the last character read from the organized image
 34035                                  ;
 34036                                  ;   OTHER REGS USED
 34037                                  ;       All
 34038                                  ;
 34039                                  ;   NOTES
 34040                                  ;       None
 34041                                  ;
 34042                                  ;   HISTORY
 34043                                  ;       Created 16-Mar-1992 by JeffPar
 34044                                  ;
 34045                                  ;----------------------------------------------------------------------------
 34046                                  
 34047                                  copy_block:
 34048                                          call    get_char        ; check for include
 34049                                          jc	short copy_done	;
 34050                                  	and     al,~CONFIG_OPTION_QUERY ; 7Fh
 34051                                  	cmp     al,CONFIG_BEGIN ; another BEGIN implies END as well
 34052                                          je	short copy_done ;
 34053                                  
 34054                                          cmp     al,CONFIG_INCLUDE ; 'J'
 34055                                          mov     al,ah           ; AL == the original line code
 34056                                          jne	short copy_line	; not an "include" line
 34057                                  
 34058                                  ;   We have hit an "INCLUDE" line; first, REM out the line so that we
 34059                                  ;   never try to include the block again (no infinite include loops please),
 34060                                  ;   then search for the named block and call copy_block again.
 34061                                  
 34062                                          mov     byte [es:si-1],CONFIG_REM ; '0'
 34063                                          push    di              ;
 34064                                  
 34065                                          mov     di,szMenu
 34066                                          call    comp_names_safe ; don't allow INCLUDE MENU
 34067                                          je	short copy_skip	;
 34068                                  
 34069                                          mov     di,szCommon
 34070                                          call    comp_names_safe ; don't allow INCLUDE COMMON
 34071                                          je	short copy_skip	;
 34072                                  
 34073                                          mov     di,si           ; try to find the block
 34074                                          call    srch_block      ;
 34075                                          mov     dx,di           ;
 34076                                          pop     di              ;
 34077                                          jne	short copy_error ; no such block
 34078                                          push    cx              ;
 34079                                          mov     cx,bx           ;
 34080                                          push    si              ;
 34081                                          dec     dx              ;
 34082                                          mov     si,dx           ;
 34083                                          call    skip_line       ; skip the rest of the "block name" line
 34084                                          call    copy_block      ; and copy in the rest of that block
 34085                                          pop     si              ;
 34086                                          pop     cx              ;
 34087                                          sub     al,al           ; force skip_opt_line to skip...
 34088                                          jmp     short copy_nextline
 34089                                  
 34090                                  copy_skip:
 34091                                          pop     di
 34092                                  copy_error:
 34093                                          clc                     ;
 34094                                          call    print_error     ; note that carry is clear, no pause
 34095                                          jmp     short copy_nextline
 34096                                  
 34097                                  ;   Copy the line at ES:SI to the current location at DS:DI
 34098                                  
 34099                                  copy_line:
 34100                                          mov     [di],al         ;
 34101                                          inc     di              ;
 34102                                          cmp     al,' '          ; is this is a "real" line with a "real" code?
 34103                                          jb	short copy_nextline ; no
 34104                                          cmp     byte [cs:config_multi],0
 34105                                          je	short copy_loop	; not a multi-config config.sys, don't embed #s
 34106                                          call    get_linenum	; BX == line # of line @ES:SI
 34107                                          mov     [di],bx         ; stash it immediately following the line code
 34108                                          inc     di              ;
 34109                                          inc     di              ;
 34110                                          jmp     short copy_next ;
 34111                                  copy_loop:                      ;
 34112                                          call    get_char        ;
 34113                                          jc	short copy_done ; end of file
 34114                                          mov     [di],al         ;
 34115                                          inc     di              ;
 34116                                  copy_next:
 34117                                          cmp     al,lf ; 0Ah	; done with line?
 34118                                          jne	short copy_loop	; nope
 34119                                  
 34120                                  copy_nextline:
 34121                                          call    skip_opt_line   ;
 34122                                          jmp     short copy_block
 34123                                  
 34124                                  	; 18/12/2022
 34125                                  ;copy_done:
 34126                                          ;retn
 34127                                  
 34128                                  ;----------------------------------------------------------------------------
 34129                                  ;
 34130                                  ;   get_linenum:  return line # (in BX) of current line (@ES:SI)
 34131                                  ;
 34132                                  ;   INPUT
 34133                                  ;    ES:SI -> some line in the config.sys memory image
 34134                                  ;
 34135                                  ;   OUTPUT
 34136                                  ;       BX == line # (relative to 1)
 34137                                  ;
 34138                                  ;   OTHER REGS USED
 34139                                  ;       DX
 34140                                  ;
 34141                                  ;   NOTES
 34142                                  ;       None
 34143                                  ;
 34144                                  ;   HISTORY
 34145                                  ;       Created 16-Mar-1992 by JeffPar
 34146                                  ;
 34147                                  ;----------------------------------------------------------------------------
 34148                                  
 34149                                  get_linenum:
 34150                                          push    ax              ;
 34151                                          sub     bx,bx           ; BX == line # (to be returned)
 34152                                          push    cx              ;
 34153                                          mov     dx,si           ; DX == the offset we're looking for
 34154                                          push    si              ;
 34155                                          mov     cx,[cs:count]   ;
 34156                                          sub     si,si           ; prepare to scan entire file
 34157                                  get_linenum_loop:               ;
 34158                                          call    skip_line       ;
 34159                                          jc	short get_linenum_done
 34160                                          inc     bx              ;
 34161                                          cmp     si,dx           ; have we exceeded the desired offset yet?
 34162                                          jb	short get_linenum_loop ; no
 34163                                  get_linenum_done:               ;
 34164                                          pop     si              ;
 34165                                          pop     cx              ;
 34166                                          pop     ax              ;
 34167                                          retn
 34168                                  
 34169                                  ;----------------------------------------------------------------------------
 34170                                  ;
 34171                                  ;   srch_block:  searches entire config.sys for block name @ES:DI
 34172                                  ;
 34173                                  ;   INPUT
 34174                                  ;       ES -> config.sys image
 34175                                  ;    ES:DI -> block name to find
 34176                                  ;
 34177                                  ;   OUTPUT
 34178                                  ;       ZF flag set, if found
 34179                                  ;    ES:DI -> just past the name in the block heading, if found
 34180                                  ;       BX == # bytes remaining from that point, if found
 34181                                  ;
 34182                                  ;   OTHER REGS USED
 34183                                  ;       None
 34184                                  ;
 34185                                  ;   NOTES
 34186                                  ;       This differs from "find_block" in that it searches the ENTIRE
 34187                                  ;       config.sys image, not merely the remaining portion, and that it
 34188                                  ;       takes a pointer to block name that is *elsewhere* in the image
 34189                                  ;       (ie, ES) as opposed to some string constant in our own segment (DS).
 34190                                  ;
 34191                                  ;   HISTORY
 34192                                  ;       Created 16-Mar-1992 by JeffPar
 34193                                  ;
 34194                                  ;----------------------------------------------------------------------------
 34195                                  
 34196                                  srch_block:	          ; returns BX -> named block in CONFIG.SYS
 34197                                          push    ax              ;
 34198                                          push    cx              ;
 34199                                          mov     cx,[cs:count]   ;
 34200                                          push    si              ;
 34201                                          sub     si,si           ;
 34202                                          push    ds              ;
 34203                                          push    es              ;
 34204                                          pop     ds              ;
 34205                                          call    find_block      ;
 34206                                          mov     di,si           ;
 34207                                          mov     bx,cx           ;
 34208                                          pop     ds              ;
 34209                                          pop     si              ;
 34210                                          pop     cx              ;
 34211                                          pop     ax              ;
 34212                                  find_exit: ; 16/04/2019
 34213                                          retn			;
 34214                                  
 34215                                  ;----------------------------------------------------------------------------
 34216                                  ;
 34217                                  ;   find_block:  searches rest of config.sys for block name @DS:DI
 34218                                  ;
 34219                                  ;   INPUT
 34220                                  ;    DS:DI -> block name to find
 34221                                  ;    ES:SI -> remainder of config.sys image
 34222                                  ;       CX == remaining size of config.sys image
 34223                                  ;
 34224                                  ;   OUTPUT
 34225                                  ;       ZF flag set, if found (also, CF set if EOF)
 34226                                  ;    ES:SI -> where the search stopped (at end of block name or EOF)
 34227                                  ;       CX == # bytes remaining from that point
 34228                                  ;
 34229                                  ;   OTHER REGS USED
 34230                                  ;       AX
 34231                                  ;
 34232                                  ;   NOTES
 34233                                  ;       This differs from "srch_block" in that it searches only the
 34234                                  ;       remaining portion of the config.sys image and leaves SI and CX
 34235                                  ;       pointing to where the search left off, and that it takes a pointer
 34236                                  ;       to search string in our own segment (DS:DI instead of ES:DI).
 34237                                  ;
 34238                                  ;   HISTORY
 34239                                  ;       Created 16-Mar-1992 by JeffPar
 34240                                  ;
 34241                                  ;----------------------------------------------------------------------------
 34242                                  
 34243                                  find_block:
 34244                                          call    get_char        ; get line code
 34245                                          jc	short find_exit	; end of file
 34246                                          and     al,~CONFIG_OPTION_QUERY
 34247                                          cmp     al,CONFIG_BEGIN ; beginning of a block?
 34248                                          je	short check_line ; no
 34249                                          cmp     al,CONFIG_INCLUDE
 34250                                          jne	short next_line	;
 34251                                          or	byte [cs:config_multi],1
 34252                                          jmp     short next_line ;
 34253                                  check_line:
 34254                                          or      byte [cs:config_multi],1
 34255                                          call    comp_names      ; compare block names
 34256                                          jbe	short find_exit	; end of file, or names matched
 34257                                  next_line:
 34258                                          call    skip_opt_line   ; no, so skip to next line
 34259                                          jmp	short find_block  ;
 34260                                  ;find_exit:
 34261                                  ;	retn
 34262                                  
 34263                                  ;----------------------------------------------------------------------------
 34264                                  ;
 34265                                  ;   comp_names:  compares keyword @DS:DI to position in config.sys @ES:SI
 34266                                  ;
 34267                                  ;   INPUT
 34268                                  ;    DS:DI -> keyword to compare
 34269                                  ;    ES:SI -> position in config.sys
 34270                                  ;       CX == remaining bytes in config.sys
 34271                                  ;
 34272                                  ;   OUTPUT
 34273                                  ;       ZF flag set, if match (also, CF set if EOF)
 34274                                  ;    ES:SI -> where the comparison stopped (at end of block name or EOF)
 34275                                  ;       CX == # bytes remaining from that point
 34276                                  ;
 34277                                  ;   OTHER REGS USED
 34278                                  ;       AX
 34279                                  ;
 34280                                  ;   NOTES
 34281                                  ;       None
 34282                                  ;
 34283                                  ;   HISTORY
 34284                                  ;       Created 16-Mar-1992 by JeffPar
 34285                                  ;
 34286                                  ;----------------------------------------------------------------------------
 34287                                  
 34288                                  comp_names:
 34289                                          push    di              ;
 34290                                  comp_loop:                      ;
 34291                                          call    get_char        ;
 34292                                          jc	short comp_exit	;
 34293                                          call    any_delim       ; is next character a delimiter?
 34294                                          mov     ah,[di]         ; (get next character we're supposed to match)
 34295                                          je	short comp_almost ; yes, it *could* be a match
 34296                                          inc     di              ;
 34297                                          and     ax,~2020h ; 0DFDFh 
 34298                                  				; BUGBUG -- assumes both names are alphanumeric -JTP
 34299                                          cmp     al,ah           ; match?
 34300                                          je	short comp_loop ; yes, keep looking at the characters
 34301                                          clc                     ; prevent erroneous eof indication: clear carry
 34302                                  comp_exit:                      ;
 34303                                          pop     di              ;
 34304                                          retn			;
 34305                                  comp_almost:                    ;
 34306                                          xchg    al,ah           ; we don't know for sure if it's a match
 34307                                          call    any_delim       ; until we verify that the second string has
 34308                                          xchg    al,ah           ; been exhausted also...
 34309                                          jmp     comp_exit       ; if we are, this call to any_delim will tell...
 34310                                  
 34311                                  ;----------------------------------------------------------------------------
 34312                                  
 34313                                  comp_names_safe:
 34314                                          push    ax
 34315                                          push    cx
 34316                                          push	si
 34317                                          push    ds
 34318                                          push    cs
 34319                                          pop     ds
 34320                                          call    comp_names
 34321                                          pop     ds
 34322                                  	pop	si
 34323                                          pop     cx
 34324                                          pop     ax
 34325                                          retn
 34326                                  
 34327                                  ;----------------------------------------------------------------------------
 34328                                  ;
 34329                                  ;   print_item:  display menu item #BL
 34330                                  ;
 34331                                  ;   INPUT
 34332                                  ;       BL == menu item # to display
 34333                                  ;
 34334                                  ;   OUTPUT
 34335                                  ;       Menu item displayed, with appropriate highlighting if BL == bDefBlock
 34336                                  ;
 34337                                  ;   OTHER REGS USED
 34338                                  ;       None
 34339                                  ;
 34340                                  ;   NOTES
 34341                                  ;       This function saves/restores the current cursor position, so you
 34342                                  ;       needn't worry about it.
 34343                                  ;
 34344                                  ;   HISTORY
 34345                                  ;       Created 16-Mar-1992 by JeffPar
 34346                                  ;
 34347                                  ;----------------------------------------------------------------------------
 34348                                  
 34349                                  print_item:		; prints menu item #BL (1 to N)
 34350                                          push    ax              ;
 34351                                          push    bx              ;
 34352                                          push    cx              ;
 34353                                          push    dx              ;
 34354                                          push    si              ;
 34355                                          mov     ah,03h          ; get cursor position
 34356                                          mov     bh,[bMenuPage]  ; always page zero
 34357                                          int     10h             ; DH/DL = row/column
 34358                                          push    dx              ; save it
 34359                                          mov     ah,02h          ; set cursor position
 34360                                          mov     dh,bl           ;
 34361                                          add     dh,3            ;
 34362                                          mov     dl,5            ;
 34363                                          int     10h             ; set cursor position for correct row/col
 34364                                          mov     al,bl           ;
 34365                                          add     al,'0'          ; convert menu item # to ASCII digit
 34366                                          mov     ah,[bMenuColor] ; normal attribute
 34367                                          cmp     bl,[bDefBlock]  ; are we printing the current block?
 34368                                          jne	short print_other ; no
 34369                                          or      ah,70h          ; yes, set bgnd color to white
 34370                                          mov     ch,ah           ;
 34371                                          mov     cl,4            ;
 34372                                          rol     ch,cl           ;
 34373                                          cmp     ch,ah           ; are fgnd/bgnd the same?
 34374                                          jne	short print_other ; no
 34375                                          xor     ah,08h          ; yes, so modify the fgnd intensity
 34376                                  print_other:                    ;
 34377                                          mov     bh,0            ;
 34378                                          add     bx,bx           ;
 34379                                          mov     di,[aoffBlockDesc+bx]
 34380                                          mov     bl,ah           ; put the attribute in the correct register now
 34381                                          mov     bh,[bMenuPage]  ; get correct video page #
 34382                                          mov     ah,09h          ; write char/attr
 34383                                          mov     cx,1            ;
 34384                                          int     10h             ;
 34385                                          inc     dl              ; increment column
 34386                                          mov     ah,02h          ;
 34387                                          int     10h             ;
 34388                                          ;mov	ax,0900h+'.'    ;
 34389                                          mov	ax,092Eh
 34390                                  	int     10h             ; display '.'
 34391                                          inc     dl              ; increment column
 34392                                          mov     ah,02h          ;
 34393                                          int     10h             ;
 34394                                          ;mov	ax,0900h+' '    ;
 34395                                          mov	ax,0920h
 34396                                  	int     10h             ; display ' '
 34397                                          inc     dl              ; increment column
 34398                                          mov     ah,02h          ;
 34399                                          int     10h             ;
 34400                                          push    es              ;
 34401                                  print_loop:                     ;
 34402                                          mov     al,[es:di]	; get a character of the description
 34403                                          inc     di              ;
 34404                                          cmp     al,TAB ; 9	; substitute spaces for tabs
 34405                                          jne	short print_nontab ;
 34406                                          mov     al,' '          ;
 34407                                  print_nontab:                   ;
 34408                                          cmp     al,' '          ;
 34409                                          jb	short print_done ; stop at the 1st character < space
 34410                                          cmp     al,'$'          ;
 34411                                          je	short print_done ; also stop on $
 34412                                          mov     ah,09h          ; display function #
 34413                                          int     10h             ;
 34414                                          inc     dl              ; increment column
 34415                                          cmp     dl,78           ; far enough?
 34416                                          jae	short print_done ; yes
 34417                                          mov     ah,02h          ;
 34418                                          int     10h             ;
 34419                                          jmp     print_loop      ;
 34420                                  print_done:                     ;
 34421                                          pop     es              ;
 34422                                          pop     dx              ;
 34423                                          mov     ah,02h          ;
 34424                                          int     10h             ; restore previous row/col
 34425                                          pop     si              ;
 34426                                          pop     dx              ;
 34427                                          pop     cx              ;
 34428                                          pop     bx              ;
 34429                                          pop     ax              ;
 34430                                          retn			;
 34431                                  
 34432                                  ;----------------------------------------------------------------------------
 34433                                  ;
 34434                                  ;   select_item:  wait for user to select menu item, with time-out
 34435                                  ;
 34436                                  ;   INPUT
 34437                                  ;       None
 34438                                  ;
 34439                                  ;   OUTPUT
 34440                                  ;       BX == menu item # (1-N), or -1 for clean boot
 34441                                  ;       Selected menu item highlighted
 34442                                  ;       Cursor positioned beneath menu, ready for tty-style output now
 34443                                  ;
 34444                                  ;   OTHER REGS USED
 34445                                  ;       None
 34446                                  ;
 34447                                  ;   NOTES
 34448                                  ;       None
 34449                                  ;
 34450                                  ;   HISTORY
 34451                                  ;       Created 16-Mar-1992 by JeffPar
 34452                                  ;
 34453                                  ;----------------------------------------------------------------------------
 34454                                  
 34455                                  select_item:		; returns digit value in BX (trashes AX/CX/DX)
 34456                                          mov     bl,[bDefBlock]  ; BL will be the default block #
 34457                                          mov     al,bl           ;
 34458                                          call    disp_num        ;
 34459                                          call    show_status     ; display current interactive status
 34460                                          cmp     byte [secTimeOut],-1
 34461                                          je	short input_key	; no time-out, just go to input
 34462                                          mov     ah,GET_TIME ; 2Ch
 34463                                          int     21h             ;
 34464                                          mov     bh,dh           ; BH = initial # of seconds
 34465                                  check_time:
 34466                                          mov     al,[secTimeOut] ;
 34467                                          sub     al,[secElapsed] ;
 34468                                          jae	short show_time	;
 34469                                          or      byte [bQueryOpt],2  ; disable all further prompting
 34470                                          mov     byte [secElapsed],0
 34471                                          jmp	select_done	; time's up!
 34472                                  show_time:
 34473                                          push    bx              ;
 34474                                          mov     bl,al           ; save # in BL
 34475                                          mov     bh,[bMenuPage]  ;
 34476                                          mov     ah,03h          ; get cursor position
 34477                                          int     10h             ;
 34478                                          push    dx              ;
 34479                                  	add	dl,8		; move cursor to the right
 34480                                          mov     ah,02h          ; set cursor position
 34481                                          int     10h             ;
 34482                                          mov     dx,_$TimeOut
 34483                                          call    print           ; print the "Time remaining: " prompt
 34484                                          mov     al,bl           ; recover # from BL
 34485                                          cbw                     ; this works because AL is always <= 90
 34486                                          mov     cl,10           ;
 34487                                          div     cl              ; AL = tens digit, AH = ones digit
 34488                                          mov     cl,ah           ;
 34489                                          add     al,'0'          ;
 34490                                          mov     ah,0Eh          ;
 34491                                          int     10h             ; write TTY tens digit
 34492                                          mov     al,cl           ;
 34493                                          add     al,'0'          ;
 34494                                          mov     ah,0Eh          ;
 34495                                          int     10h             ; write TTY ones digit
 34496                                          pop     dx
 34497                                          mov     ah,02h          ; set cursor position back to where it was
 34498                                          int     10h             ;
 34499                                          pop     bx              ;
 34500                                  input_key:
 34501                                          mov     ah,RAW_CON_IO ; 6
 34502                                          mov     dl,0FFh         ; input request
 34503                                          int     21h             ;
 34504                                          jnz	short got_key	;
 34505                                          cmp     byte [secTimeOut],-1; is there a time-out?
 34506                                          je	short input_key	; no, just go back to input
 34507                                          mov     ah,GET_TIME     ;
 34508                                          int     21h             ; DH = seconds
 34509                                          mov     ah,dh           ;
 34510                                          sub     dh,bh           ; should generally be zero or one
 34511                                          mov     bh,ah           ;
 34512                                          jnc	short got_time	;
 34513                                          mov     dh,1            ; it wrapped back to zero, so assume one
 34514                                  got_time:
 34515                                          or      dh,dh           ; any change?
 34516                                          jz	short input_key	; no
 34517                                          add     [secElapsed],dh ;
 34518                                          jmp	short check_time ;
 34519                                  got_key:
 34520                                          push    ax              ;
 34521                                          mov     ax,-1           ; zap both secTimeOut and secElapsed
 34522                                          xchg    [secTimeOut],ax
 34523                                          cmp     al,-1           ; was time-out already disabled?
 34524                                          je	short timeout_disabled ; yes
 34525                                          push    bx              ; let's disable # seconds display
 34526                                          mov     ax,0A20h        ; write multiple spaces
 34527                                          mov     bx,[bMenuColor]
 34528                                          mov     cx,80           ; 80 of them, to be safe
 34529                                          int     10h             ; to completely obliterate # seconds display
 34530                                          pop     bx   		;
 34531                                  
 34532                                  timeout_disabled:
 34533                                          pop     ax              ;
 34534                                          or      al,al           ; extended key pressed?
 34535                                          jnz	short normal_key ; no
 34536                                          int     21h             ; get the next part of the key then
 34537                                          jz	short input_key	; hmmm, what happened to the second part?
 34538                                  
 34539                                          cmp     al,48h          ; up arrow?
 34540                                          jne	short not_up	; no
 34541                                          cmp     bl,1            ; are we as up as up can get?
 34542                                          jbe	short input_key	; yes, ignore it
 34543                                          dec     byte [bDefBlock] ;
 34544                                          call    print_item      ; re-print the current item
 34545                                          dec     bl              ; and then print the new current item
 34546                                          jmp     short print1
 34547                                  not_up:
 34548                                          cmp     al,50h          ; down arrow?
 34549                                          jne	short not_down	; no
 34550                                          cmp     bl,[bMaxBlock]  ; are we as down as down can get?
 34551                                          jae	short to_input_key ; yes, ignore it
 34552                                          inc     byte [bDefBlock] ;
 34553                                          call    print_item      ; re-print the current item
 34554                                          inc     bx              ; and then print the new current item
 34555                                  print1: 
 34556                                  	mov     al,bl           ;
 34557                                  print2: 
 34558                                  	call    print_item      ;
 34559                                          call    disp_num        ;
 34560                                  to_input_key:
 34561                                          jmp     input_key       ;
 34562                                  not_down:
 34563                                          test    byte [bDisableUI],1
 34564                                          jnz	short to_input_key ; don't allow F8 or F5
 34565                                          cmp     al,42h          ; F8 function key?
 34566                                          jne	short not_f8	; no
 34567                                          xor     byte [bQueryOpt],1
 34568                                          call    show_status     ;
 34569                                          jmp     input_key	;
 34570                                  not_f8:
 34571                                          cmp     al,3Fh          ; F5 function key?
 34572                                          jne	short to_input_key ; no
 34573                                          mov     bx,-1           ; special return code (-1) indicating clean boot
 34574                                          mov     al,' '          ; don't want to display anything really;
 34575                                          jmp     short disp_input; just want to display the cr/lf sequence...
 34576                                  
 34577                                  normal_key:
 34578                                          cmp     al,0Dh          ; Enter?
 34579                                          je	short select_done ; yes
 34580                                          cmp     al,08h          ; backspace?
 34581                                          jne	short not_backspace ; no
 34582                                          mov     bx,-2 ; 0FFFEh	; yes, special return code
 34583                                          retn			;
 34584                                  not_backspace:
 34585                                          sub     al,'0'          ; is greater than '0'?
 34586                                          jbe	short to_input_key ; no
 34587                                          cmp     al,[bMaxBlock]  ; is less than or equal to the maximum digit?
 34588                                          ja	short to_input_key ; no
 34589                                          mov	[bDefBlock],al  ;
 34590                                          call    print_item      ; redisplay the current selection
 34591                                          mov     bl,al           ; set new selection
 34592                                          jmp	short print2
 34593                                  
 34594                                  select_done:
 34595                                          mov     bh,0            ; return a full 16-bit value (for indexing)
 34596                                          mov     al,bl           ;
 34597                                          add     al,'0'          ; convert it into a digit, then display it
 34598                                  
 34599                                  	; fall into disp_input
 34600                                  
 34601                                  ; 16/04/2019 - Retro DOS v4.0
 34602                                  
 34603                                  ;----------------------------------------------------------------------------
 34604                                  ;
 34605                                  ;   disp_input:  display a single character + cr/lf
 34606                                  ;
 34607                                  ;   INPUT
 34608                                  ;       AL == character to display
 34609                                  ;
 34610                                  ;   OUTPUT
 34611                                  ;       None
 34612                                  ;
 34613                                  ;   OTHER REGS USED
 34614                                  ;       None
 34615                                  ;
 34616                                  ;   NOTES
 34617                                  ;       This function is used not only for the menu input selection but
 34618                                  ;       also for the interactive line prompting (the y/n/a thing).
 34619                                  ;
 34620                                  ;   HISTORY
 34621                                  ;       Created 16-Mar-1992 by JeffPar
 34622                                  ;
 34623                                  ;----------------------------------------------------------------------------
 34624                                  
 34625                                  disp_input:
 34626                                          push    ax
 34627                                          cmp     al,' '
 34628                                          jae	short disp_ok
 34629                                          mov     al,' '
 34630                                  disp_ok:
 34631                                          mov     dl,al
 34632                                          mov     ah,STD_CON_OUTPUT ; 2
 34633                                          int     21h
 34634                                          mov     dx,crlfm
 34635                                          call    print
 34636                                          pop     ax
 34637                                          retn
 34638                                  
 34639                                  ;----------------------------------------------------------------------------
 34640                                  
 34641                                  disp_num:
 34642                                          push    bx
 34643                                          add     al,'0'
 34644                                          mov     ah,0Ah
 34645                                          mov     bx,[bMenuColor]
 34646                                          mov     cx,1
 34647                                          int     10h
 34648                                          pop     bx
 34649                                          retn
 34650                                  
 34651                                  ;----------------------------------------------------------------------------
 34652                                  ;
 34653                                  ;   show_status:  display current interactive mode setting (on/off/none)
 34654                                  ;
 34655                                  ;   INPUT
 34656                                  ;       None
 34657                                  ;
 34658                                  ;   OUTPUT
 34659                                  ;       None
 34660                                  ;
 34661                                  ;   OTHER REGS USED
 34662                                  ;       None
 34663                                  ;
 34664                                  ;   NOTES
 34665                                  ;       None
 34666                                  ;
 34667                                  ;   HISTORY
 34668                                  ;       Created 16-Mar-1992 by JeffPar
 34669                                  ;
 34670                                  ;----------------------------------------------------------------------------
 34671                                  
 34672                                  show_status:
 34673                                          push    bx              ; BL = video page #
 34674                                          mov     bx,[bMenuColor]
 34675                                          mov     ah,03h          ; get cursor position
 34676                                          int     10h             ;
 34677                                          push    dx              ; save it
 34678                                          mov     ah,02h          ; set cursor position
 34679                                          mov     dx,[bLastCol]   ; set correct row/col
 34680                                          test    byte [bDisableUI],1
 34681                                          jz	short show_onoff ; just show on/off
 34682                                          mov     dl,0            ;
 34683                                          int     10h             ;
 34684                                          mov     ax,0A20h        ; write multiple spaces
 34685                                          mov     cx,80           ; 80 of them, to be exact
 34686                                          int     10h             ; to obliterate the status line
 34687                                          jmp     short show_done ;
 34688                                  show_onoff: 
 34689                                          int     10h
 34690                                  		; - VIDEO - WRITE CHARACTERS ONLY AT CURSOR POSITION
 34691                                  		; AL = character, BH = display page - alpha mode
 34692                                  		; BL = color of character (graphics mode, PCjr only)
 34693                                  		; CX = number of times to write character
 34694                                  
 34695                                          mov     al,[_$NO]	; assume OFF
 34696                                          cmp     byte [bQueryOpt],1 ; is interactive mode on?
 34697                                          jne	short show_noton ; no
 34698                                          mov     al,[_$YES]	; yes
 34699                                  show_noton:                     ;
 34700                                          mov     ah,0Eh          ; write TTY
 34701                                          int     10h             ;
 34702                                  show_done:                      ;
 34703                                          pop     dx              ;
 34704                                          mov     ah,02h          ;
 34705                                          int     10h             ; restore original cursor position
 34706                                          pop     bx              ;
 34707                                          retn			;
 34708                                  
 34709                                  ; 16/04/2019 - Retro DOS v4.0
 34710                                  
 34711                                  ;----------------------------------------------------------------------------
 34712                                  ;
 34713                                  ;   skip_token: advances ES:SI/CX past the current token
 34714                                  ;
 34715                                  ;   INPUT
 34716                                  ;    ES:SI -> position in config.sys
 34717                                  ;       CX == remaining bytes in config.sys
 34718                                  ;
 34719                                  ;   OUTPUT
 34720                                  ;       CF set if EOL/EOF hit
 34721                                  ;       AL == 1st char of delimiter
 34722                                  ;    ES:SI -> just past the delimiter
 34723                                  ;       CX == # bytes remaining from that point
 34724                                  ;
 34725                                  ;   OTHER REGS USED
 34726                                  ;       AX
 34727                                  ;
 34728                                  ;   NOTES
 34729                                  ;       None
 34730                                  ;
 34731                                  ;   HISTORY
 34732                                  ;       Created 16-Mar-1992 by JeffPar
 34733                                  ;
 34734                                  ;----------------------------------------------------------------------------
 34735                                  
 34736                                  skip_token:
 34737                                          call    get_char
 34738                                          jc	short skip_token_done
 34739                                          call    any_delim
 34740                                          jne	short skip_token
 34741                                  skip_check_eol:
 34742                                          cmp     al,cr ; 0Dh
 34743                                          je	short skip_token_eol
 34744                                          cmp     al,lf ; 0Ah
 34745                                          je	short skip_token_eol
 34746                                          clc
 34747                                          ;jmp	short skip_token_done
 34748                                  	retn
 34749                                  skip_token_eol:
 34750                                          stc
 34751                                  skip_token_done:
 34752                                          retn
 34753                                  
 34754                                  ;----------------------------------------------------------------------------
 34755                                  ;
 34756                                  ;   skip_delim: advances ES:SI/CX past the current delimiter
 34757                                  ;
 34758                                  ;   INPUT
 34759                                  ;    ES:SI -> position in config.sys
 34760                                  ;       CX == remaining bytes in config.sys
 34761                                  ;
 34762                                  ;   OUTPUT
 34763                                  ;       CF set if EOF hit
 34764                                  ;       AL == 1st char of token
 34765                                  ;    ES:SI -> just past the token
 34766                                  ;       CX == # bytes remaining from that point
 34767                                  ;    ES:BX -> new token (since ES:SI is already pointing 1 byte past token)
 34768                                  ;
 34769                                  ;   OTHER REGS USED
 34770                                  ;       AX
 34771                                  ;
 34772                                  ;   NOTES
 34773                                  ;       None
 34774                                  ;
 34775                                  ;   HISTORY
 34776                                  ;       Created 16-Mar-1992 by JeffPar
 34777                                  ;
 34778                                  ;----------------------------------------------------------------------------
 34779                                  
 34780                                  skip_delim:       ; returns carry set if eol/eof
 34781                                          call    get_char        ;
 34782                                          lea     bx,[si-1]       ; also returns BX -> next token
 34783                                          jc	short skip_token_done ;
 34784                                          call    delim           ;
 34785                                          je	short skip_delim ;
 34786                                          jmp	short skip_check_eol  ; 13/05/2019
 34787                                  
 34788                                  ;----------------------------------------------------------------------------
 34789                                  ;
 34790                                  ;   skip_opt_line: same as skip_line provided AL != LF
 34791                                  ;
 34792                                  ;   INPUT
 34793                                  ;       AL == last character read
 34794                                  ;    ES:SI -> position in config.sys
 34795                                  ;       CX == remaining bytes in config.sys
 34796                                  ;
 34797                                  ;   OUTPUT
 34798                                  ;       CF set if EOF hit
 34799                                  ;       AL == 1st char of new line
 34800                                  ;    ES:SI -> just past 1st char of new line
 34801                                  ;       CX == # bytes remaining from that point
 34802                                  ;
 34803                                  ;   OTHER REGS USED
 34804                                  ;       AX
 34805                                  ;
 34806                                  ;   NOTES
 34807                                  ;       In other words, the purpose here is to skip to the next line,
 34808                                  ;       unless ES:SI is already sitting at the front of the next line (which
 34809                                  ;       it would be if the last character fetched -- AL -- was a linefeed)
 34810                                  ;
 34811                                  ;   HISTORY
 34812                                  ;       Created 16-Mar-1992 by JeffPar
 34813                                  ;
 34814                                  ;----------------------------------------------------------------------------
 34815                                  
 34816                                  skip_opt_line:
 34817                                          cmp     al,lf ; 0Ah
 34818                                          je	short skip_line_done
 34819                                       
 34820                                  	; fall into skip_line
 34821                                  
 34822                                  ;----------------------------------------------------------------------------
 34823                                  ;
 34824                                  ;   skip_line: skip to the next line
 34825                                  ;
 34826                                  ;   INPUT
 34827                                  ;    ES:SI -> position in config.sys
 34828                                  ;       CX == remaining bytes in config.sys
 34829                                  ;
 34830                                  ;   OUTPUT
 34831                                  ;       CF set if EOF hit
 34832                                  ;    ES:SI -> just past 1st char of new line
 34833                                  ;       CX == # bytes remaining from that point
 34834                                  ;
 34835                                  ;   OTHER REGS USED
 34836                                  ;       AX
 34837                                  ;
 34838                                  ;   NOTES
 34839                                  ;       None
 34840                                  ;
 34841                                  ;   HISTORY
 34842                                  ;       Created 16-Mar-1992 by JeffPar
 34843                                  ;
 34844                                  ;----------------------------------------------------------------------------
 34845                                  
 34846                                  skip_line:
 34847                                          call    get_char
 34848                                          jc	short skip_line_done
 34849                                          cmp     al,lf ; 0Ah
 34850                                          jne	short skip_line
 34851                                  skip_line_done:
 34852                                  num_done:	; 18/12/2022
 34853                                          retn
 34854                                  
 34855                                  ;----------------------------------------------------------------------------
 34856                                  ;
 34857                                  ;   get_number: return binary equivalent of numeric string
 34858                                  ;
 34859                                  ;   INPUT
 34860                                  ;    ES:SI -> position in config.sys
 34861                                  ;       CX == remaining bytes in config.sys
 34862                                  ;
 34863                                  ;   OUTPUT
 34864                                  ;       AL == non-digit encountered
 34865                                  ;       BX == binary #
 34866                                  ;    ES:SI -> just past 1st non-digit
 34867                                  ;       CX == # bytes remaining from that point
 34868                                  ;
 34869                                  ;   OTHER REGS USED
 34870                                  ;       AX
 34871                                  ;
 34872                                  ;   NOTES
 34873                                  ;       None
 34874                                  ;
 34875                                  ;   HISTORY
 34876                                  ;       Created 16-Mar-1992 by JeffPar
 34877                                  ;
 34878                                  ;----------------------------------------------------------------------------
 34879                                  
 34880                                  ; 13/05/2019
 34881                                  
 34882                                  get_number:
 34883                                          sub     bx,bx           ; BX = result
 34884                                  num_loop:
 34885                                          call    get_char        ;
 34886                                          jc	short num_done	;
 34887                                          cmp     al,'0'          ; convert to value
 34888                                          jb	short num_done	; no more number
 34889                                          cmp     al,'9'          ;
 34890                                          ja	short num_done	;
 34891                                          push    ax              ;
 34892                                          mov     ax,10           ;
 34893                                          push    dx              ;
 34894                                          mul     bx              ;
 34895                                          pop     dx              ;
 34896                                          mov     bx,ax           ;
 34897                                          pop     ax              ;
 34898                                          sub     al,'0'          ;
 34899                                          cbw                     ;
 34900                                          add     bx,ax           ;
 34901                                          jmp	short num_loop	;
 34902                                  
 34903                                  	; 18/12/2022
 34904                                  ;num_done:
 34905                                          ;retn
 34906                                  
 34907                                  ;----------------------------------------------------------------------------
 34908                                  ;
 34909                                  ;   get_char:  return next character, advance ES:SI, and decrement CX
 34910                                  ;
 34911                                  ;   INPUT
 34912                                  ;    ES:SI -> position in config.sys
 34913                                  ;       CX == remaining bytes in config.sys
 34914                                  ;
 34915                                  ;   OUTPUT
 34916                                  ;       AL == next character
 34917                                  ;    ES:SI -> just past next character
 34918                                  ;       CX == # bytes remaining from that point
 34919                                  ;
 34920                                  ;   OTHER REGS USED
 34921                                  ;       AX
 34922                                  ;
 34923                                  ;   NOTES
 34924                                  ;       None
 34925                                  ;
 34926                                  ;   HISTORY
 34927                                  ;       Created 16-Mar-1992 by JeffPar
 34928                                  ;
 34929                                  ;----------------------------------------------------------------------------
 34930                                  
 34931                                  get_char:
 34932                                          sub     cx,1            ; use SUB to set carry,zero
 34933                                          jb	short get_fail	; out of data
 34934                                          ;lods	byte ptr es:[si] ;
 34935                                  	es	
 34936                                  	lodsb
 34937                                          mov     ah,al           ;
 34938                                          retn			;
 34939                                  get_fail:                       ; restore CX to zero
 34940                                          mov     cx,0            ; leave carry set, zero not set
 34941                                  nearby_ret:
 34942                                          retn
 34943                                  
 34944                                  ;----------------------------------------------------------------------------
 34945                                  ;
 34946                                  ;   query_user: ask user whether to execute current config.sys command
 34947                                  ;
 34948                                  ;   INPUT
 34949                                  ;       AL == current command code
 34950                                  ;    ES:SI -> current command line in config.sys
 34951                                  ;    config_cmd == current command code, but with QUERY bit intact
 34952                                  ;                  (00h used to generate "Process AUTOEXEC.BAT" prompt)
 34953                                  ;
 34954                                  ;   OUTPUT
 34955                                  ;       CF set if command should be ignored (it is also REM'ed out)
 34956                                  ;
 34957                                  ;   OTHER REGS USED
 34958                                  ;       BX, CX, DX, DI
 34959                                  ;
 34960                                  ;   NOTES
 34961                                  ;       None
 34962                                  ;
 34963                                  ;   HISTORY
 34964                                  ;       Created 16-Mar-1992 by JeffPar
 34965                                  ;
 34966                                  ;----------------------------------------------------------------------------
 34967                                  
 34968                                  	; 12/12/2022
 34969                                  query_user:
 34970                                          test    byte [bQueryOpt],4	; answer no to everything?
 34971                                          ;jz	short qu_1		;
 34972                                          ; 12/12/2022
 34973                                  	;jmp	short skip_all		;
 34974                                  	jnz	short skip_all
 34975                                  qu_1:
 34976                                  	test    byte [bQueryOpt],2	; answer yes to everything?
 34977                                          jnz	short nearby_ret	; yes (and return carry clear!)
 34978                                          push    ax                      ;
 34979                                          mov     al,[config_cmd]         ;
 34980                                          test    byte [bQueryOpt],1	; query every command?
 34981                                          jnz	short query_all		; yes
 34982                                          test    al,CONFIG_OPTION_QUERY  ;
 34983                                          ;jnz	short query_all		;
 34984                                          ; 12/12/2022
 34985                                  	;jmp	short do_cmd		;
 34986                                  	jz	short do_cmd ; cf=0
 34987                                  query_all:
 34988                                  
 34989                                  ;   Search for the command code (AL) in "comtab", and then print
 34990                                  ;   out the corresponding keyword, followed by the rest of the actual
 34991                                  ;   line pointed to by ES:SI
 34992                                  
 34993                                          push    si                      ; save pointer to rest of CONFIG.SYS line
 34994                                          mov     dx,_$AutoPrmpt    	;
 34995                                          and     al,~CONFIG_OPTION_QUERY ; 7Fh
 34996                                          jz	short generic_prompt	; config_cmd must have been 0
 34997                                  
 34998                                          mov     dh,al                   ; save config_cmd in DH
 34999                                          sub     bx,bx                   ;
 35000                                          mov     di,comtab		;
 35001                                  find_match:                             ;
 35002                                          mov     bl,[di]                 ; get size of current keyword
 35003                                          or      bl,bl                   ;
 35004                                          jz	short line_print	; end of table
 35005                                          inc     di                      ;
 35006                                          cmp     al,[di+bx]              ; match?
 35007                                          je	short cmd_match		; yes
 35008                                          lea     di,[di+bx+1]            ; otherwise, skip this command code
 35009                                  	; 13/05/2019	
 35010                                          jmp	short find_match	; loop
 35011                                  cmd_match:                              ;
 35012                                          mov     cl,[di-1]               ;
 35013                                          mov     ch,0                    ;
 35014                                          mov     ah,STD_CON_OUTPUT ; 2
 35015                                  cmd_print:                              ;
 35016                                          mov     al,[di]                 ;
 35017                                          inc     di                      ;
 35018                                          mov     dl,al                   ;
 35019                                          int     21h                     ;
 35020                                          loop    cmd_print               ;
 35021                                          mov     dl,'='                  ;
 35022                                          cmp     dh,CONFIG_SET  ; 'V'    ; for SET commands, don't display a '='
 35023                                          jne	short cmd_notset	;
 35024                                          mov     dl,' '                  ;
 35025                                  cmd_notset:
 35026                                          int     21h                     ; '=' looks funny on SET commands
 35027                                  line_print:                             ;
 35028                                  	;lods	byte ptr es:[si]        ;
 35029                                          es
 35030                                  	lodsb
 35031                                  	or      al,al                   ;
 35032                                          jnz	short non_null		;
 35033                                          mov     al,' '                  ;
 35034                                  non_null:                               ;
 35035                                          cmp     al,' '                  ; control code?
 35036                                          jb	short prompt_user	; yes, assume end of line
 35037                                          jne	short non_space		;
 35038                                          cmp     byte [es:si],' '	;
 35039                                          jb	short prompt_user	;
 35040                                  non_space:                              ;
 35041                                          mov     dl,al                   ;
 35042                                          mov     ah,STD_CON_OUTPUT ; 2	;
 35043                                          int     21h                     ;
 35044                                          jmp	short line_print	;
 35045                                  prompt_user:                            ;
 35046                                          mov     dx,_$InterPrmpt		;
 35047                                  
 35048                                  generic_prompt:
 35049                                          call    print                   ;
 35050                                  input_loop:                             ;
 35051                                          mov     ah,0                    ; read a key
 35052                                          int     16h                     ;
 35053                                          or      al,al                   ; is it a function key?
 35054                                          jnz	short not_func		; no
 35055                                          cmp     ah,3Fh                  ; F5 function key?
 35056                                          jne	short input_loop	; no
 35057                                          mov     al,[_$NO]                  ;
 35058                                          or      byte [bQueryOpt],4	; no more queries
 35059                                          jmp     short legal_char        ;
 35060                                  not_func:
 35061                                          and     al,~20h ; 0DFh		; converting to upper case
 35062                                          cmp     al,[_$NO]		; verify character is legal
 35063                                          je	short legal_char	;
 35064                                          cmp     al,[_$YES]		;
 35065                                          je	short legal_char	;
 35066                                          cmp     byte [config_cmd],0	;
 35067                                          je	short input_loop	; don't allow Esc on this query
 35068                                          cmp     al,1Bh                  ; Esc?
 35069                                          jne	short input_loop	;
 35070                                          or      byte [bQueryOpt],2	; no more interactive boot prompts
 35071                                          mov     al,[_$YES]
 35072                                  legal_char:                             ;
 35073                                          call    disp_input              ;
 35074                                          pop     si                      ; restore pointer to rest of CONFIG.SYS line
 35075                                  
 35076                                          cmp     al,[_$NO]		; process line?
 35077                                          je	short skip_cmd		; no
 35078                                  	; 12/12/2022
 35079                                  	clc
 35080                                  do_cmd:
 35081                                  	pop     ax			;
 35082                                  	; 12/12/2022
 35083                                  	; cf=0
 35084                                  	;clc				; just do the command
 35085                                  	retn
 35086                                  
 35087                                  skip_cmd:
 35088                                  	pop     ax			;
 35089                                  skip_all:
 35090                                  	mov     ah,CONFIG_REM ; '0'	; fake out the rest of sysinit's processing
 35091                                  	stc
 35092                                  	retn
 35093                                  
 35094                                  ;----------------------------------------------------------------------------
 35095                                  ;
 35096                                  ;   print_error: displays multi-config error conditions
 35097                                  ;
 35098                                  ;   INPUT
 35099                                  ;    Carry set to pause, clear to not
 35100                                  ;    ES:SI -> current command line in config.sys
 35101                                  ;
 35102                                  ;   OUTPUT
 35103                                  ;       None
 35104                                  ;
 35105                                  ;   OTHER REGS USED
 35106                                  ;       None
 35107                                  ;
 35108                                  ;   NOTES
 35109                                  ;       None
 35110                                  ;
 35111                                  ;   HISTORY
 35112                                  ;       Created 16-Mar-1992 by JeffPar
 35113                                  ;
 35114                                  ;----------------------------------------------------------------------------
 35115                                  
 35116                                  print_error:
 35117                                          push    ax
 35118                                          push    bx
 35119                                          push    cx
 35120                                          push    dx
 35121                                          push    ds
 35122                                          push    cs
 35123                                          pop     ds
 35124                                          pushf
 35125                                          call    get_linenum
 35126                                          mov     [linecount],bx
 35127                                          call    error_line
 35128                                          popf
 35129                                          jnc	short pe_ret
 35130                                          mov     dx,_$PauseMsg
 35131                                          call    print
 35132                                          mov     ax,0C07h		; flush input buffer, then wait for key
 35133                                          int     21h			; wait for a key
 35134                                          or      al,al			; extended key?
 35135                                          jnz	short pe_1		; no
 35136                                          mov     ah,07h			; yes
 35137                                          int     21h			; eat it too
 35138                                  pe_1:     
 35139                                  	mov     dx,crlfm
 35140                                          call    print
 35141                                  pe_ret: 
 35142                                  	pop     ds
 35143                                          pop     dx
 35144                                          pop     cx
 35145                                          pop     bx
 35146                                          pop     ax
 35147                                  	retn
 35148                                  
 35149                                  ;----------------------------------------------------------------------------
 35150                                  
 35151                                  ;   This function is very simple:  it merely prepends a "/D" to the
 35152                                  ;   command-line for the shell;  this (undocumented) switch disables
 35153                                  ;   AUTOEXEC.BAT processing and the date/time prompt that is usually
 35154                                  ;   displayed when there's no AUTOEXEC.BAT.
 35155                                  
 35156                                  disable_autoexec:
 35157                                  	; MSDOS 6.21 IO.SYS -  SYSINIT:4BE2h
 35158                                  	; 17/04/2019 - Retro DOS v4.0
 35159                                  
 35160                                  	test	byte [bQueryOpt],4
 35161                                  	jz	short disable_exit
 35162                                  	test	byte [dae_flag],1
 35163                                  	jnz	short disable_exit
 35164                                  	or	byte [dae_flag],1
 35165                                          ;or	byte [bQueryOpt],2 ; MSDOS 6.0 
 35166                                  	or      word [bQueryOpt],102h	; [bDefBlock] = 1
 35167                                  	mov     dx,'D ' ; 2044h
 35168                                  dae_1:
 35169                                          ;mov	al,[def_swchr]
 35170                                  	mov     al,[command_line-1]     ; get default switchchar
 35171                                          or      al,al                   ; anything there?
 35172                                          jz	short disable_exit	; no, disable_autoexec already called
 35173                                          mov     bl,[command_line]       ;
 35174                                          mov     bh,0                    ; BX == command-line length
 35175                                          mov     cx,bx                   ;
 35176                                          add     bl,3                    ;
 35177                                          cmp     bl,126                  ;
 35178                                          ja	short disable_exit	;
 35179                                          mov     [command_line],bl       ; update length
 35180                                          add     bx,command_line+1	; make sure we move the NULL too
 35181                                          inc     cx                      ; (just for consistency sake)
 35182                                  disable_loop:                           ;
 35183                                          mov     ah,[bx-3]               ;
 35184                                          mov     [bx],ah                 ;
 35185                                          dec     bx                      ;
 35186                                          loop    disable_loop            ;
 35187                                          mov     [bx-2],al               ;
 35188                                  	;mov	word [bx-1],'D ' ; 2044h ; /D is stuffed into place now
 35189                                  	mov	[bx-1],dx  ; MSDOS 6.21 IO.SYS - SYSINIT:4C29h		
 35190                                          ;mov	byte [command_line-1],0 ;
 35191                                  disable_exit:                           ;
 35192                                          retn
 35193                                  
 35194                                  CheckQueryOpt:	; MSDOS 6.21 IO.YSYS - SYSINIT:4C2Dh
 35195                                  	cmp     byte [bQueryOpt],1
 35196                                  	jnz     short disable_exit
 35197                                  	test	byte [dae_flag],2
 35198                                  	jnz     short disable_exit
 35199                                  	or      byte [dae_flag],2
 35200                                  	mov     dx,'Y ' ; 2059h ; 11/09/2023
 35201                                  	jmp     short dae_1
 35202                                  
 35203                                  ;endif  ;MULTI_CONFIG
 35204                                  
 35205                                  %endif	; 02/11/2022
 35206                                  
 35207                                  
 35208                                  ; 19/04/2019 - Retro DOS v4.0
 35209                                  
 35210                                  ;----------------------------------------------------------------------------
 35211                                  ;
 35212                                  ; procedure : delim
 35213                                  ;
 35214                                  ;----------------------------------------------------------------------------
 35215                                  
 35216                                  ;	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 35217                                  ;
 35218                                  ;;ifdef	MULTI_CONFIG
 35219                                  ;
 35220                                  ;any_delim:
 35221                                  ;       cmp     al,cr
 35222                                  ;       je	short delim_ret
 35223                                  ;       cmp     al,lf
 35224                                  ;       je	short delim_ret
 35225                                  ;       cmp     al,'['
 35226                                  ;       je	short delim_ret
 35227                                  ;       cmp     al,']'
 35228                                  ;       je	short delim_ret
 35229                                  ;
 35230                                  ;;endif  ;MULTI_CONFIG
 35231                                  
 35232                                  	; 02/11/2022 - Retrodos v4.0 (Modified MSDOS 5.0 IO.SYS)
 35233                                  	; (SYSINIT:3450h)	
 35234                                  delim:
 35235 0000307D 3C2F                    	cmp	al,'/'		; ibm will assume "/" as an delimeter.
 35236 0000307F 7416                    	je	short delim_ret
 35237                                  
 35238 00003081 3C00                    	cmp	al,0		; special case for sysinit!!!
 35239 00003083 7412                    	je	short delim_ret
 35240                                  
 35241                                  org_delim:			; used by organize routine except for getting
 35242 00003085 3C20                    	cmp	al,' '          ; the filename.
 35243 00003087 740E                    	je	short delim_ret
 35244 00003089 3C09                            cmp     al,tab ; 9
 35245 0000308B 740A                    	je	short delim_ret
 35246 0000308D 3C3D                    	cmp	al,'='
 35247 0000308F 7406                    	je	short delim_ret
 35248 00003091 3C2C                    	cmp	al,','
 35249 00003093 7402                    	je	short delim_ret
 35250 00003095 3C3B                    	cmp	al,';'
 35251                                  
 35252                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 35253                                  ;;ifdef	MULTI_CONFIG
 35254                                  ;;   Make sure there's no chance of a false EOF indication
 35255                                  ;	clc
 35256                                  ;;endif
 35257                                  
 35258                                  	; 02/11/2022
 35259                                  delim_ret:
 35260 00003097 C3                      	retn
 35261                                  
 35262                                  ;----------------------------------------------------------------------------
 35263                                  ;
 35264                                  ; procedure : newline
 35265                                  ;
 35266                                  ;  newline returns with first character of next line
 35267                                  ;
 35268                                  ;----------------------------------------------------------------------------
 35269                                  
 35270                                  newline:
 35271 00003098 E898F6                  	call	getchr			;skip non-control characters
 35272 0000309B 7207                    	jc	short nl_ret
 35273 0000309D 3C0A                    	cmp	al,lf			;look for line feed
 35274 0000309F 75F7                    	jne	short newline
 35275 000030A1 E88FF6                  	call	getchr
 35276                                  nl_ret:
 35277 000030A4 C3                      	retn
 35278                                  
 35279                                  ;----------------------------------------------------------------------------
 35280                                  ; 
 35281                                  ; procedure : mapcase
 35282                                  ;
 35283                                  ;----------------------------------------------------------------------------
 35284                                  
 35285                                  	; 02/11/2022 - Retro DOS 4.0 (Modified MSDOS 5.0 IO.SYS)
 35286                                  mapcase:
 35287 000030A5 51                      	push	cx
 35288 000030A6 56                      	push	si
 35289 000030A7 1E                      	push	ds
 35290                                  
 35291 000030A8 06                      	push	es
 35292 000030A9 1F                      	pop	ds
 35293                                  
 35294                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 35295                                  ;;ifdef	MULTI_CONFIG
 35296                                  ;
 35297                                  ;	mov	bl,al                   ; same cmd code this line
 35298                                  ;;else
 35299                                  ;;	xor	si,si
 35300                                  ;;endif
 35301                                  	; 02/11/2022
 35302 000030AA 31F6                    	xor	si, si
 35303                                  
 35304                                  convloop:
 35305 000030AC AC                      	lodsb
 35306 000030AD 3C61                    	cmp	al,'a'
 35307 000030AF 7209                    	jb	short noconv
 35308 000030B1 3C7A                    	cmp	al,'z'
 35309 000030B3 7705                    	ja	short noconv
 35310 000030B5 2C20                    	sub	al,20h
 35311 000030B7 8844FF                  	mov	[si-1],al
 35312                                  noconv:
 35313                                  
 35314                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 35315                                  ;;ifdef	MULTI_CONFIG
 35316                                  ;;
 35317                                  ;;   When MULTI_CONFIG enabled, "mapcase" is used to map everything to
 35318                                  ;;   upper-case a line at a time, after we've been able to figure out whether
 35319                                  ;;   the line is a SET command or not (since we don't want to upper-case
 35320                                  ;;   anything after the "=" in a SET)
 35321                                  ;;
 35322                                  ;       cmp     bl,CONFIG_SET  ; 'V'	; preserve case for part of the line?
 35323                                  ;       jne	short check_eol		; no, just check for end-of-line
 35324                                  ;       cmp     al,'='                  ; separator between SET var and value?
 35325                                  ;       je	short convdone		; yes
 35326                                  ;check_eol:
 35327                                  ;       cmp     al,cr
 35328                                  ;       je	short convdone
 35329                                  ;       cmp     al,lf
 35330                                  ;       je	short convdone
 35331                                  ;;endif
 35332                                  	
 35333                                  	; 02/11/2022
 35334 000030BA E2F0                    	loop	convloop
 35335                                  convdone:
 35336 000030BC 1F                      	pop	ds
 35337 000030BD 5E                      	pop	si
 35338 000030BE 59                      	pop	cx
 35339 000030BF C3                      	retn
 35340                                  
 35341                                  ;----------------------------------------------------------------------------
 35342                                  ;
 35343                                  ; procedure : round
 35344                                  ;
 35345                                  ; round the values in memlo and memhi to paragraph boundary.
 35346                                  ; perform bounds check.
 35347                                  ;
 35348                                  ;----------------------------------------------------------------------------
 35349                                  
 35350                                  round:
 35351 000030C0 50                      	push	ax
 35352 000030C1 2EA1[DE03]              	mov	ax,[cs:memlo]
 35353                                  
 35354 000030C5 E8F1DF                  	call	ParaRound		; para round up
 35355                                  
 35356 000030C8 2E0106[E003]            	add	[cs:memhi],ax
 35357 000030CD 2EC706[DE03]0000        	mov	word [cs:memlo],0
 35358 000030D4 2EA1[E003]              	mov	ax,[cs:memhi]		; ax = new memhi
 35359 000030D8 2E3B06[A302]            	cmp	ax,[cs:ALLOCLIM]	; if new memhi >= alloclim, error
 35360 000030DD 7322                    	jae	short mem_err
 35361 000030DF 2EF606[2E14]02          	test	byte [cs:setdevmarkflag],for_devmark ; 2
 35362 000030E5 7418                    	jz	short skip_set_devmarksize
 35363 000030E7 06                      	push	es
 35364 000030E8 56                      	push	si
 35365 000030E9 2E8B36[2C14]            	mov	si,[cs:devmark_addr]
 35366 000030EE 8EC6                    	mov	es,si
 35367 000030F0 29F0                    	sub	ax,si
 35368 000030F2 48                      	dec	ax
 35369                                  	;mov	[es:3],ax
 35370 000030F3 26A30300                	mov	[es:devmark.size],ax	; paragraph
 35371 000030F7 2E8026[2E14]FD          	and	byte [cs:setdevmarkflag],not_for_devmark ; 0FDh
 35372 000030FD 5E                      	pop	si
 35373 000030FE 07                      	pop	es
 35374                                  skip_set_devmarksize:
 35375 000030FF 58                      	pop	ax
 35376                                  	; 11/12/2022
 35377                                  	; cf = 0
 35378                                  	; 02/11/2022
 35379                                  	;clc	; ? (not needed here)	; clear carry
 35380 00003100 C3                      	retn
 35381                                  
 35382                                  ;----------------------------------------------------------------------------
 35383                                  
 35384                                  mem_err:
 35385                                  	; 11/12/2022
 35386 00003101 0E                      	push	cs
 35387 00003102 1F                      	pop	ds
 35388                                  mem_err2:
 35389 00003103 BA[2938]                	mov	dx,badmem
 35390                                  	;push	cs
 35391                                  	;pop	ds
 35392 00003106 E87602                  	call	print
 35393 00003109 E941D7                  	jmp	stall
 35394                                  
 35395                                  ;----------------------------------------------------------------------------
 35396                                  ;
 35397                                  ; procedure : calldev
 35398                                  ;
 35399                                  ;----------------------------------------------------------------------------
 35400                                  
 35401                                  	; 02/11/2022 - Retrodos v4.0 (Modified MSDOS 5.0 IO.SYS)
 35402                                  	; (SYSINIT:34E0h)
 35403                                  calldev:
 35404 0000310C 2E8E1E[EA1E]            	mov	ds,[cs:DevEntry+2]
 35405 00003111 2E031E[E81E]            	add	bx,[cs:DevEntry]	; do a little relocation
 35406 00003116 8B07                    	mov	ax,[bx]
 35407                                  
 35408 00003118 2EFF36[E81E]            	push	word [cs:DevEntry]
 35409 0000311D 2EA3[E81E]              	mov	word [cs:DevEntry],ax
 35410 00003121 BB[E603]                	mov	bx,packet
 35411 00003124 2EFF1E[E81E]            	call	far [cs:DevEntry]
 35412 00003129 2E8F06[E81E]            	pop	word [cs:DevEntry]
 35413 0000312E C3                      	retn
 35414                                  
 35415                                  ;----------------------------------------------------------------------------
 35416                                  ;
 35417                                  ; procedure : todigit
 35418                                  ;
 35419                                  ;----------------------------------------------------------------------------
 35420                                  
 35421                                  todigit:
 35422 0000312F 2C30                    	sub	al,'0'
 35423                                  	;jb	short notdig  ; 02/11/2022
 35424                                  	; 12/12/2022
 35425 00003131 7203                    	jb	short notdig2
 35426                                  	;cmp	al,9
 35427                                  	;ja	short notdig
 35428                                  	;clc
 35429                                  	;retn
 35430                                  	; 12/12/2022
 35431 00003133 3C0A                    	cmp	al,10
 35432 00003135 F5                      	cmc
 35433                                  notdig:
 35434                                  	;stc
 35435                                  notdig2:
 35436 00003136 C3                      	retn
 35437                                  
 35438                                  ;----------------------------------------------------------------------------
 35439                                  ;
 35440                                  ; procedure : getnum
 35441                                  ;
 35442                                  ; getnum parses a decimal number.
 35443                                  ; returns it in ax, sets zero flag if ax = 0 (may be considered an
 35444                                  ; error), if number is bad carry is set, zero is set, ax=0.
 35445                                  ;
 35446                                  ;----------------------------------------------------------------------------
 35447                                  
 35448                                  getnum:
 35449 00003137 53                      	push	bx
 35450 00003138 31DB                    	xor	bx,bx			; running count is zero
 35451                                  b2:
 35452 0000313A E8F2FF                  	call	todigit 		; do we have a digit ?
 35453 0000313D 7247                    	jc	short badnum		; no, bomb
 35454                                  
 35455 0000313F 93                      	xchg	ax,bx			; put total in ax
 35456 00003140 53                      	push	bx			; save digit (0 to 9)
 35457                                  	;mov	bx,10			; base of arithmetic
 35458                                  	; 12/12/2022
 35459 00003141 B30A                    	mov	bl,10
 35460 00003143 F7E3                    	mul	bx			; shift by one decimal digit
 35461 00003145 5B                      	pop	bx			; get back digit (0 to 9)
 35462 00003146 00D8                    	add	al,bl			; get total
 35463 00003148 80D400                  	adc	ah,0			; make that 16 bits
 35464 0000314B 7239                    	jc	short badnum		; too big a number
 35465                                  
 35466 0000314D 93                      	xchg	ax,bx			; stash total
 35467                                  
 35468 0000314E E8E2F5                  	call	getchr			;get next digit
 35469 00003151 722D                    	jc	short b1		; no more characters
 35470 00003153 3C20                    	cmp	al,' ' 			; space?
 35471 00003155 741F                    	je	short b15		; then end of digits
 35472 00003157 3C2C                    	cmp	al,',' 			; ',' is a seperator!!!
 35473 00003159 741B                    	je	short b15		; then end of digits.
 35474 0000315B 3C09                    	cmp	al, tab ; 9		; tab
 35475 0000315D 7417                    	je	short b15
 35476 0000315F 2E3A06[2A03]            	cmp	al,[cs:sepchr]		; allow 0 or special separators
 35477 00003164 7410                    	je	short b15
 35478 00003166 3C2F                    	cmp	al,'/'			; see if another switch follows
 35479                                  	;nop				; cas - remnant of old bad code
 35480                                  	;nop
 35481                                  	; 12/12/2022
 35482                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 35483                                  	;nop
 35484                                  	;nop
 35485 00003168 740C                    	je	short b15
 35486 0000316A 3C0A                    	cmp	al,lf			; line-feed?
 35487 0000316C 7408                    	je	short b15
 35488 0000316E 3C0D                    	cmp	al,cr			; carriage return?
 35489 00003170 7404                    	je	short b15
 35490 00003172 08C0                    	or	al,al			; end of line separator?
 35491 00003174 75C4                    	jnz	short b2		; no, try as a valid char...
 35492                                  b15:
 35493 00003176 2EFF06[D203]            	inc	word [cs:count]		; one more character to s...
 35494 0000317B 2EFF0E[D603]            	dec	word [cs:chrptr]	; back up over separator
 35495                                  b1:
 35496 00003180 89D8                    	mov	ax,bx			; get proper count
 35497 00003182 09C0                    	or	ax,ax			; clears carry, sets zero accordingly
 35498 00003184 5B                      	pop	bx
 35499 00003185 C3                      	retn
 35500                                  badnum:
 35501                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 35502                                  	;mov	byte [cs:sepchr],0
 35503 00003186 31C0                    	xor	ax,ax			; set zero flag, and ax = 0
 35504                                  	; 12 /12/2022
 35505 00003188 2EA2[2A03]              	mov	[cs:sepchr],al ; 0
 35506 0000318C 5B                      	pop	bx
 35507 0000318D F9                      	stc				; and carry set
 35508 0000318E C3                      	retn
 35509                                  
 35510                                  ;****************************************************************************
 35511                                  
 35512                                  setdoscountryinfo:
 35513                                  
 35514                                  ;----------------------------------------------------------------------------
 35515                                  ;input: es:di -> pointer to dos_country_cdpg_info
 35516                                  ;	ds:0  -> buffer.
 35517                                  ;	si = 0
 35518                                  ;	ax = country id
 35519                                  ;	dx = code page id. (if 0, then use ccsyscodepage as a default.)
 35520                                  ;	bx = file handle
 35521                                  ;	this routine can handle maximum 438 country_data entries.
 35522                                  ;
 35523                                  ;output: dos_country_cdpg_info set.
 35524                                  ;	 carry set if any file read failure or wrong information in the file.
 35525                                  ;	 carry set and cx = -1 if cannot find the matching country_id, 
 35526                                  ;	 codepage_id in the file.
 35527                                  ;----------------------------------------------------------------------------
 35528                                  
 35529 0000318F 57                      	push	di
 35530 00003190 50                      	push	ax
 35531 00003191 52                      	push	dx
 35532                                  
 35533 00003192 31C9                    	xor	cx,cx
 35534 00003194 31D2                    	xor	dx,dx
 35535 00003196 B80002                  	mov	ax,512			;read 512 bytes
 35536 00003199 E84F01                  	call	readincontrolbuffer	;read the file header
 35537 0000319C 724D                    	jc	short setdosdata_fail
 35538                                  
 35539 0000319E 06                      	push	es
 35540 0000319F 56                      	push	si
 35541                                  
 35542 000031A0 0E                      	push	cs
 35543 000031A1 07                      	pop	es
 35544                                  
 35545 000031A2 BF[4B34]                	mov	di,country_file_signature ; db 0FFh,'COUNTRY'
 35546 000031A5 B90800                  	mov	cx,8			;length of the signature
 35547 000031A8 F3A6                    	repz	cmpsb
 35548                                  
 35549 000031AA 5E                      	pop	si
 35550 000031AB 07                      	pop	es
 35551 000031AC 753D                    	jnz	short setdosdata_fail 	;signature mismatch
 35552                                  
 35553 000031AE 83C612                  	add	si,18			;si -> county info type
 35554 000031B1 803C01                  	cmp	byte [si],1		;only accept type 1 (currently only 1 header type)
 35555 000031B4 7535                    	jne	short setdosdata_fail 	;cannot proceed. error return
 35556                                  
 35557 000031B6 46                      	inc	si			;si -> file offset
 35558 000031B7 8B14                    	mov	dx,[si]			;get the info file offset.
 35559 000031B9 8B4C02                  	mov	cx,[si+2]
 35560 000031BC B80018                  	mov	ax,6144			;read 6144 bytes.
 35561 000031BF E82901                  	call	readincontrolbuffer	;read info
 35562 000031C2 7227                    	jc	short setdosdata_fail
 35563                                  
 35564 000031C4 8B0C                    	mov	cx,[si]			;get the # of country, codepage combination entries
 35565 000031C6 81F9B601                	cmp	cx, 438			;cannot handle more than 438 entries.
 35566 000031CA 771F                    	ja	short setdosdata_fail
 35567                                  
 35568 000031CC 46                      	inc	si
 35569 000031CD 46                      	inc	si			;si -> entry information packet
 35570 000031CE 5A                      	pop	dx			;restore code page id
 35571 000031CF 58                      	pop	ax			;restore country id
 35572 000031D0 5F                      	pop	di
 35573                                  
 35574                                  setdoscntry_find:			;search for desired country_id,codepage_id.
 35575 000031D1 3B4402                  	cmp	ax,[si+2]		;compare country_id
 35576 000031D4 750A                    	jne	short setdoscntry_next
 35577                                  
 35578 000031D6 83FA00                  	cmp	dx,0			;no user specified code page ?
 35579 000031D9 7415                    	je	short setdoscntry_any_codepage ;then no need to match code page id.
 35580 000031DB 3B5404                  	cmp	dx,[si+4]		;compare code page id
 35581 000031DE 7413                    	je	short setdoscntry_got_it
 35582                                  
 35583                                  setdoscntry_next:
 35584 000031E0 0334                    	add	si,[si]			;next entry
 35585 000031E2 46                      	inc	si
 35586 000031E3 46                      	inc	si			;take a word for size of entry itself
 35587 000031E4 E2EB                    	loop	setdoscntry_find
 35588                                  
 35589 000031E6 B9FFFF                  	mov	cx,-1			;signals that bad country id entered.
 35590                                  setdoscntry_fail:
 35591 000031E9 F9                      	stc
 35592 000031EA C3                      	retn
 35593                                  
 35594                                  setdosdata_fail:
 35595 000031EB 5E                      	pop	si
 35596 000031EC 59                      	pop	cx
 35597 000031ED 5F                      	pop	di
 35598 000031EE EBF9                    	jmp	short setdoscntry_fail
 35599                                  
 35600                                  setdoscntry_any_codepage:		;use the code_page_id of the country_id found.
 35601 000031F0 8B5404                  	mov	dx,[si+4]
 35602                                  
 35603                                  setdoscntry_got_it:			;found the matching entry
 35604 000031F3 2E8916[5334]            	mov	[cs:cntrycodepage_id],dx ;save code page id for this country.
 35605 000031F8 8B540A                  	mov	dx,[si+10]		;get the file offset of country data
 35606 000031FB 8B4C0C                  	mov	cx,[si+12]
 35607 000031FE B80002                  	mov	ax,512 			;read 512 bytes
 35608 00003201 E8E700                  	call	readincontrolbuffer
 35609 00003204 72E3                    	jc	short setdoscntry_fail
 35610                                  
 35611 00003206 8B0C                    	mov	cx,[si]			;get the number of entries to handle.
 35612 00003208 46                      	inc	si
 35613 00003209 46                      	inc	si			;si -> first entry
 35614                                  
 35615                                  setdoscntry_data:
 35616 0000320A 57                      	push	di			;es:di -> dos_country_cdpg_info
 35617 0000320B 51                      	push	cx			;save # of entry left
 35618 0000320C 56                      	push	si			;si -> current entry in control buffer
 35619                                  
 35620 0000320D 8A4402                  	mov	al,[si+2]		;get data entry id
 35621 00003210 E8AA00                  	call	getcountrydestination	;get the address of destination in es:di
 35622 00003213 727D                    	jc	short setdoscntry_data_next ;no matching data entry id in dos
 35623                                  
 35624 00003215 8B5404                  	mov	dx,[si+4]		;get offset of data
 35625 00003218 8B4C06                  	mov	cx,[si+6]
 35626 0000321B B80042                  	mov	ax,4200h
 35627 0000321E F9                      	stc
 35628 0000321F CD21                    	int	21h			;move pointer
 35629 00003221 72C8                    	jc	short setdosdata_fail
 35630                                  
 35631 00003223 BA0002                  	mov	dx,512			;start of data buffer
 35632 00003226 B91400                  	mov	cx,20			;read 20 bytes only. we only need to
 35633 00003229 B43F                    	mov	ah,3Fh			;look at the length of the data in the file.
 35634 0000322B F9                      	stc
 35635 0000322C CD21                    	int	21h			;read the country.sys data
 35636 0000322E 72BB                    	jc	short setdosdata_fail 	;read failure
 35637                                  
 35638 00003230 39C8                    	cmp	ax,cx
 35639 00003232 75B7                    	jne	short setdosdata_fail ; 13/05/2019
 35640                                  
 35641 00003234 8B5404                  	mov	dx,[si+4]		;get offset of data again.
 35642 00003237 8B4C06                  	mov	cx,[si+6]
 35643 0000323A B80042                  	mov	ax,4200h
 35644 0000323D F9                      	stc
 35645 0000323E CD21                    	int	21h			;move pointer back again
 35646 00003240 72A9                    	jc	short setdosdata_fail
 35647                                  
 35648 00003242 56                      	push	si
 35649 00003243 BE0802                  	mov	si,(512+8)		;get length of the data from the file
 35650 00003246 8B0C                    	mov	cx,[si]
 35651 00003248 5E                      	pop	si
 35652 00003249 BA0002                  	mov	dx,512			;start of data buffer
 35653 0000324C 83C10A                  	add	cx,10			;signature + a word for the length itself
 35654 0000324F B43F                    	mov	ah,3Fh			;read the data from the file.
 35655 00003251 F9                      	stc
 35656 00003252 CD21                    	int	21h
 35657 00003254 7295                    	jc	short setdosdata_fail
 35658                                  
 35659 00003256 39C8                    	cmp	ax,cx
 35660 00003258 7591                    	jne	short setdosdata_fail
 35661                                  
 35662 0000325A 8A4402                  	mov	al,[si+2]		;save data id for future use.
 35663 0000325D BE0802                  	mov	si,(512+8)		;si-> data buffer + id tag field
 35664 00003260 8B0C                    	mov	cx,[si]			;get the length of the file
 35665 00003262 41                      	inc	cx			;take care of a word for lenght of tab
 35666 00003263 41                      	inc	cx			;itself.
 35667 00003264 81F9F805                	cmp	cx,(2048-512-8)	; 1528	;fit into the buffer?
 35668 00003268 7781                    	ja	short setdosdata_fail
 35669                                  
 35670                                  	;if	bugfix
 35671 0000326A E83500                  	call	setdbcs_before_copy
 35672                                  	;endif
 35673                                  
 35674 0000326D 3C01                    	cmp	al,SetCountryInfo ; 1	;is the data for setcountryinfo table?
 35675 0000326F 7512                    	jne	short setdoscntry_mov 	;no, don't worry
 35676                                  
 35677 00003271 26FF7518                	push	word [es:di+country_cdpg_info.ccMono_Ptr-country_cdpg_info.ccCountryInfoLen]  
 35678                                  	;push	word [es:di+24]		;cannot destroy ccmono_ptr address. save them.
 35679 00003275 26FF751A                	push	word [es:di+country_cdpg_info.ccMono_Ptr-country_cdpg_info.ccCountryInfoLen+2] 
 35680                                  	;push	word [es:di+26]		;at this time di -> cccountryinfolen
 35681                                  	
 35682 00003279 57                      	push	di			;save di
 35683                                  
 35684 0000327A 50                      	push	ax
 35685 0000327B 2EA1[5334]              	mov	ax,[cs:cntrycodepage_id] ;do not use the code page info in country_info
 35686 0000327F 894404                  	mov	[si+4],ax		;use the saved one for this !!!!
 35687 00003282 58                      	pop	ax
 35688                                  
 35689                                  setdoscntry_mov:
 35690 00003283 F3A4                    	rep	movsb			;copy the table into dos
 35691 00003285 3C01                    	cmp	al,SetCountryInfo	;was the ccmono_ptr saved?
 35692 00003287 7509                    	jne	short setdoscntry_data_next
 35693                                  
 35694 00003289 5F                      	pop	di			;restore di
 35695 0000328A 268F451A                	pop	word [es:di+country_cdpg_info.ccMono_Ptr-country_cdpg_info.ccCountryInfoLen+2]
 35696                                  	;pop	word [es:di+26]		;restore
 35697 0000328E 268F4518                	pop	word [es:di+country_cdpg_info.ccMono_Ptr-country_cdpg_info.ccCountryInfoLen] 
 35698                                  	;pop	word [es:di+24]
 35699                                  
 35700                                  setdoscntry_data_next:
 35701 00003292 5E                      	pop	si			;restore control buffer pointer
 35702 00003293 59                      	pop	cx			;restore # of entries left
 35703 00003294 5F                      	pop	di			;restore pointer to dso_country_cdpg
 35704 00003295 0334                    	add	si,[si]			;try to get the next entry
 35705 00003297 46                      	inc	si
 35706 00003298 46                      	inc	si			;take a word of entry length itself
 35707 00003299 49                      	dec	cx
 35708 0000329A 83F900                  	cmp	cx,0
 35709 0000329D 741D                    	je	short setdoscntry_ok
 35710 0000329F E968FF                  	jmp	setdoscntry_data
 35711                                  
 35712                                  	; 18/12/2022
 35713                                  ;setdoscntry_ok:
 35714                                  	;retn
 35715                                  
 35716                                  ;----------------------------------------------------------------------------
 35717                                  
 35718                                  	;if	bugfix
 35719                                  
 35720                                  setdbcs_before_copy:
 35721 000032A2 3C07                    	cmp	al,SetDBCS ; 7		; dbcs vector set?
 35722 000032A4 7516                    	jne	short sdbcsbc		; jump if not
 35723 000032A6 26833D00                	cmp	word [es:di],0		; zero byte data block?
 35724 000032AA 7410                    	je	short sdbcsbc		; jump if so
 35725                                  
 35726 000032AC 57                      	push	di
 35727 000032AD 50                      	push	ax
 35728 000032AE 51                      	push	cx
 35729 000032AF 268B0D                  	mov	cx,[es:di]		; load block length
 35730 000032B2 83C702                  	add	di,2			; points actual data
 35731 000032B5 30C0                    	xor	al,al			; fill bytes
 35732 000032B7 F3AA                    	rep	stosb			; clear data block
 35733 000032B9 59                      	pop	cx
 35734 000032BA 58                      	pop	ax
 35735 000032BB 5F                      	pop	di
 35736                                  sdbcsbc:
 35737                                  setdoscntry_ok:	; 18/12/2022	
 35738 000032BC C3                      	retn
 35739                                  
 35740                                  	;endif
 35741                                  
 35742                                  ;----------------------------------------------------------------------------
 35743                                  
 35744                                  getcountrydestination:
 35745                                  
 35746                                  ;get the destination address in the dos country info table.
 35747                                  ;input: al - data id
 35748                                  ;	es:di -> dos_country_cdpg_info
 35749                                  ;on return:
 35750                                  ;	es:di -> destination address of the matching data id
 35751                                  ;	carry set if no matching data id found in dos.
 35752                                  
 35753 000032BD 51                      	push	cx
 35754                                  	;add	di,74
 35755 000032BE 83C74A                  	add	di,country_cdpg_info.ccNumber_of_entries	
 35756                                  					;skip the reserved area, syscodepage etc.
 35757 000032C1 268B0D                  	mov	cx,[es:di]		;get the number of entries
 35758 000032C4 47                      	inc	di
 35759 000032C5 47                      	inc	di			;si -> the first start entry id
 35760                                  
 35761                                  getcntrydest:
 35762 000032C6 263805                  	cmp	byte [es:di],al
 35763 000032C9 7413                    	je	short getcntrydest_ok
 35764 000032CB 26803D01                	cmp	byte [es:di],SetCountryInfo ;was it setcountryinfo entry?
 35765 000032CF 7405                    	je	short getcntrydest_1
 35766                                  
 35767 000032D1 83C705                  	add	di,5			;next data id
 35768 000032D4 EB03                    	jmp	short getcntrydest_loop
 35769                                  
 35770                                  getcntrydest_1:
 35771                                  	;add	di,41
 35772 000032D6 83C729                  	add	di,NEW_COUNTRY_SIZE+3	;next data id
 35773                                  getcntrydest_loop:
 35774 000032D9 E2EB                    	loop	getcntrydest
 35775 000032DB F9                      	stc
 35776 000032DC EB0B                    	jmp	short getcntrydest_exit
 35777                                  
 35778                                  getcntrydest_ok:
 35779 000032DE 3C01                    	cmp	al,SetCountryInfo ; 1	;select country info?
 35780 000032E0 7503                    	jne	short getcntrydest_ok1
 35781                                  
 35782 000032E2 47                      	inc	di			;now di -> cccountryinfolen
 35783 000032E3 EB04                    	jmp	short getcntrydest_exit
 35784                                  
 35785                                  getcntrydest_ok1:
 35786 000032E5 26C47D01                	les	di,[es:di+1]		;get the destination in es:di
 35787                                  
 35788                                  getcntrydest_exit:
 35789 000032E9 59                      	pop	cx
 35790 000032EA C3                      	retn
 35791                                  
 35792                                  ;----------------------------------------------------------------------------
 35793                                  
 35794                                  readincontrolbuffer:
 35795                                  
 35796                                  ;move file pointer to cx:dx
 35797                                  ;read ax bytes into the control buffer. (should be less than 2 kb)
 35798                                  ;si will be set to 0 hence ds:si points to the control buffer.
 35799                                  ;entry:  cx,dx offset from the start of the file where the read/write pointer
 35800                                  ;	 be moved.
 35801                                  ;	 ax - # of bytes to read
 35802                                  ;	 bx - file handle
 35803                                  ;	 ds - buffer seg.
 35804                                  ;return: the control data information is read into ds:0 - ds:0200.
 35805                                  ;	 cx,dx value destroyed.
 35806                                  ;	 carry set if error in reading file.
 35807                                  
 35808 000032EB 50                      	push	ax			;# of bytes to read
 35809 000032EC B80042                  	mov	ax,4200h
 35810 000032EF F9                      	stc
 35811 000032F0 CD21                    	int	21h			;move pointer
 35812 000032F2 59                      	pop	cx			;# of bytes to read
 35813 000032F3 7209                    	jc	short ricb_exit
 35814                                  
 35815 000032F5 31D2                    	xor	dx,dx			;ds:dx -> control buffer
 35816 000032F7 31F6                    	xor	si,si
 35817 000032F9 B43F                    	mov	ah,3Fh			;read into the buffer
 35818 000032FB F9                      	stc
 35819 000032FC CD21                    	int	21h			;should be less than 1024 bytes.
 35820                                  ricb_exit:
 35821 000032FE C3                      	retn
 35822                                  
 35823                                  ;----------------------------------------------------------------------------
 35824                                  
 35825                                  set_country_path:
 35826                                  
 35827                                  ;in:  ds - sysinitseg, es - confbot, si -> start of the asciiz path string
 35828                                  ;     dosinfo_ext, cntry_drv, cntry_root, cntry_path
 35829                                  ;     assumes current directory is the root directory.
 35830                                  ;out: ds:di -> full path (cntry_drv).
 35831                                  ;     set the cntry_drv string from the country=,,path command.
 35832                                  ;     ds, es, si value saved.
 35833                                  
 35834 000032FF 56                      	push	si
 35835                                  
 35836 00003300 1E                      	push	ds			;switch ds, es
 35837 00003301 06                      	push	es
 35838 00003302 1F                      	pop	ds
 35839 00003303 07                      	pop	es			;now ds -> confbot, es -> sysinitseg
 35840                                  
 35841 00003304 E82E00                  	call	chk_drive_letter	;current ds:[si] is a drive letter?
 35842 00003307 7206                    	jc	short scp_default_drv 	;no, use current default drive.
 35843                                  
 35844 00003309 8A04                    	mov	al,[si]
 35845 0000330B 46                      	inc	si
 35846 0000330C 46                      	inc	si			;si -> next char after ":"
 35847 0000330D EB06                    	jmp	short scp_setdrv
 35848                                  
 35849                                  scp_default_drv:
 35850 0000330F B419                    	mov	ah,19h
 35851 00003311 CD21                    	int	21h
 35852 00003313 0441                    	add	al,"A"			;convert it to a character.
 35853                                  
 35854                                  scp_setdrv:
 35855 00003315 2EA2[0834]              	mov	[cs:cntry_drv],al	;set the drive letter.
 35856 00003319 BF[0B34]                	mov	di,cntry_path
 35857 0000331C 8A04                    	mov	al,[si]
 35858 0000331E 3C5C                    	cmp	al, "\"
 35859 00003320 7406                    	je	short scp_root_dir
 35860                                  
 35861 00003322 3C2F                    	cmp	al,"/"			;let's accept "/" as an directory delim
 35862 00003324 7402                    	je	short scp_root_dir
 35863                                  
 35864 00003326 EB01                    	jmp	short scp_path
 35865                                  
 35866                                  scp_root_dir:
 35867 00003328 4F                      	dec	di			;di -> cntry_root
 35868                                  scp_path:
 35869 00003329 E81F00                  	call	move_asciiz		;copy it
 35870                                  
 35871 0000332C BF[0834]                	mov	di,cntry_drv
 35872                                  scpath_exit:
 35873                                  
 35874 0000332F 1E                      	push	ds			;switch ds, es
 35875 00003330 06                      	push	es
 35876 00003331 1F                      	pop	ds
 35877 00003332 07                      	pop	es			;ds, es value restored
 35878                                  
 35879 00003333 5E                      	pop	si
 35880 00003334 C3                      	retn
 35881                                  
 35882                                  ;----------------------------------------------------------------------------
 35883                                  
 35884                                  chk_drive_letter:
 35885                                  
 35886                                  ;check if ds:[si] is a drive letter followed by ":".
 35887                                  ;assume that every alpha character is already converted to upper case.
 35888                                  ;carry set if not.
 35889                                  
 35890 00003335 50                      	push	ax
 35891 00003336 803C41                  	cmp	byte [si],"A"
 35892                                  	;jb	short cdletter_no
 35893 00003339 720E                    	jb	short cdletter_exit
 35894 0000333B 803C5A                  	cmp	byte [si],"Z"
 35895 0000333E 7708                    	ja	short cdletter_no
 35896 00003340 807C013A                	cmp	byte [si+1],":"
 35897 00003344 7502                    	jne	short cdletter_no
 35898                                  
 35899 00003346 EB01                    	jmp	short cdletter_exit
 35900                                  
 35901                                  cdletter_no:
 35902 00003348 F9                      	stc
 35903                                  cdletter_exit:
 35904 00003349 58                      	pop	ax
 35905 0000334A C3                      	retn
 35906                                  
 35907                                  ;----------------------------------------------------------------------------
 35908                                  
 35909                                  move_asciiz:
 35910                                  
 35911                                  ;in: ds:si -> source es:di -> target
 35912                                  ;out: copy the string until 0.
 35913                                  ;assumes there exists a 0.
 35914                                  
 35915                                  masciiz_loop:
 35916 0000334B A4                      	movsb
 35917 0000334C 807CFF00                	cmp	byte [si-1],0	; was it 0?
 35918 00003350 75F9                    	jne	short masciiz_loop
 35919 00003352 C3                      	retn
 35920                                  
 35921                                  ;----------------------------------------------------------------------------
 35922                                  
 35923                                  ;	ds:dx points to string to output (asciz)
 35924                                  ;
 35925                                  ;	prints <badld_pre> <string> <badld_post>
 35926                                  
 35927                                  badfil:
 35928 00003353 0E                      	push	cs
 35929 00003354 07                      	pop	es
 35930                                  
 35931 00003355 89D6                    	mov	si,dx
 35932                                  badload:
 35933 00003357 BA[9337]                	mov	dx,badld_pre	; want to print config error
 35934 0000335A BB[5037]                	mov	bx,crlfm
 35935                                  prnerr:
 35936 0000335D 0E                      	push	cs
 35937 0000335E 1F                      	pop	ds ; *
 35938 0000335F E81D00                  	call	print
 35939                                  prn1:
 35940 00003362 268A14                  	mov	dl,[es:si]
 35941 00003365 08D2                    	or	dl,dl
 35942 00003367 7407                    	jz	short prn2
 35943 00003369 B402                    	mov	ah,STD_CON_OUTPUT ; 2 
 35944 0000336B CD21                    	int	21h
 35945 0000336D 46                      	inc	si
 35946 0000336E EBF2                    	jmp	short prn1
 35947                                  prn2:
 35948 00003370 89DA                    	mov	dx,bx
 35949 00003372 E80A00                  	call	print
 35950                                  	; 11/12/2022
 35951                                  	; ds = cs ; *
 35952 00003375 803E[D103]01            	cmp	byte [donotshownum],1 ; suppress line number when handling command.com
 35953                                  	;cmp	byte [cs:donotshownum],1 
 35954 0000337A 7407                    	je	short prnexit
 35955                                  	
 35956                                  	; 18/12/2022
 35957                                  	;call	error_line
 35958 0000337C E9CBF3                  	jmp	error_line
 35959                                  ;prnexit:
 35960                                  	;retn
 35961                                  
 35962                                  ;----------------------------------------------------------------------------
 35963                                  
 35964                                  print:
 35965 0000337F B409                    	mov	ah,STD_CON_STRING_OUTPUT ; 9
 35966 00003381 CD21                    	int	21h
 35967                                  prnexit:	; 18/12/2022
 35968 00003383 C3                      	retn
 35969                                  
 35970                                  ;----------------------------------------------------------------------------
 35971                                  
 35972                                  ;  open device pointed to by dx, al has access code
 35973                                  ;   if unable to open do a device open null device instead
 35974                                  
 35975                                  	; 02/11/2022 - Retrodos v4.0 (Modified MSDOS 5.0 IO.SYS)
 35976                                  	; (SYSINIT:3764h)
 35977                                  open_dev:
 35978 00003384 E80500                  	call	open_file
 35979 00003387 7309                    	jnc	short open_dev3
 35980                                  
 35981                                  open_dev1:
 35982 00003389 BA[EC33]                	mov	dx,nuldev
 35983                                  	; 18/12/2022
 35984                                  	;call	open_file
 35985                                  ;of_retn:
 35986                                  	;retn
 35987                                  	; 18/12/2022
 35988                                  	;jmp	short open_file
 35989                                  open_file:
 35990 0000338C B43D                    	mov	ah,OPEN	; 3Dh
 35991 0000338E F9                      	stc
 35992 0000338F CD21                    	int	21h
 35993                                  of_retn:	; 18/12/2022
 35994 00003391 C3                      	retn
 35995                                  
 35996                                  open_dev3:
 35997 00003392 89C3                    	mov	bx,ax			; handle from open to bx
 35998                                  	;;xor	ax,ax			; get device info
 35999                                  	;;mov	ah,IOCTL ; 44h
 36000                                  	;mov	ax,(IOCTL<<8) ; 13/05/2019
 36001                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 36002                                  	;xor	ax,ax
 36003                                  	;mov	ah,44h	; IOCTL
 36004                                  	; 11/12/2022
 36005 00003394 B80044                  	mov	ax,4400h ; IOCTL<<8 
 36006                                  
 36007 00003397 CD21                    	int	21h
 36008                                  
 36009 00003399 F6C280                  	test	dl,10000000b ; 80h
 36010 0000339C 75F3                    	jnz	short of_retn
 36011                                  
 36012 0000339E B43E                    	mov	ah,CLOSE ; 3Eh
 36013 000033A0 CD21                    	int	21h
 36014 000033A2 EBE5                    	jmp	short open_dev1
 36015                                  
 36016                                  ;----------------------------------------------------------------------------
 36017                                  
 36018                                  ; 18/12/2022
 36019                                  %if 0
 36020                                  open_file:
 36021                                  	mov	ah,OPEN	; 3Dh
 36022                                  	stc
 36023                                  	int	21h
 36024                                  	retn
 36025                                  %endif
 36026                                  
 36027                                  ;----------------------------------------------------------------------------
 36028                                  
 36029                                  ; test int24. return back to dos with the fake user response of "fail"
 36030                                  
 36031                                  int24:
 36032 000033A4 B003                    	mov	al,3			; fail the system call
 36033 000033A6 CF                      	iret				; return back to dos.
 36034                                  
 36035                                  ; 19/04/2019 - Retro DOS v4.0
 36036                                  
 36037                                  ;----------------------------------------------------------------------------
 36038                                  ; DATA
 36039                                  ;----------------------------------------------------------------------------
 36040                                  
 36041                                  ;include copyrigh.inc			; copyright statement
 36042                                  
 36043                                  ; MSDOS 6.21 IO.SYS - SYSINIT:4FA3h
 36044                                  
 36045                                  ;MsDosVersion6Copyr:
 36046                                  ;	db	'MS DOS Version 6 (C)Copyright 1981-1993 Microsoft Corp '
 36047                                  ;	db	'Licensed Material - Property of Microsoft All rights reserved '
 36048                                  
 36049                                  ; 22/10/2022
 36050                                  ; MSDOS 5.0 IO.SYS - SYSINIT:378Ch
 36051                                  
 36052                                  ; 04/01/2023
 36053                                  %if 0
 36054                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 36055                                  MsDosVersion5Copyr:
 36056                                  	db	'MS DOS Version 5.00 (C)Copyright 1981-1991 Microsoft Corp '
 36057                                  	db	'Licensed Material - Property of Microsoft All rights reserved '
 36058                                  %endif
 36059                                  
 36060                                  ; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 36061                                  ; 22/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 36062                                  ; 20/04/2019 - Retro DOS v4.0
 36063                                  ;BOOTMES:
 36064                                  ;	db      13
 36065                                  ;	db      10
 36066                                  ;	db      "MS-DOS version "
 36067                                  ;	db      MAJOR_VERSION + "0"
 36068                                  ;	db      "."
 36069                                  ;	db      (MINOR_VERSION / 10) + "0"
 36070                                  ;	db      (MINOR_VERSION % 10) + "0"
 36071                                  ;	db      13,10
 36072                                  ;	;db	"Copyright 1981-1993 Microsoft Corp.",13,10,"$"
 36073                                  ;	; 22/10/2022
 36074                                  ;	db	"Copyright 1981-1991 Microsoft Corp.",13,10,"$"
 36075                                  ;	;
 36076                                  ;	db	0
 36077                                  
 36078                                  	; 12/12/2022
 36079 000033A7 00                      	db	0
 36080                                  ; 12/12/2022
 36081                                  BOOTMES:
 36082 000033A8 0D0A                    	db	13,10
 36083 000033AA 526574726F20444F53-     	db 	"Retro DOS v4.0 (Modified MSDOS 5.0) "
 36083 000033B3 2076342E3020284D6F-
 36083 000033BC 646966696564204D53-
 36083 000033C5 444F5320352E302920 
 36084 000033CE 0D0A                    	db	13,10
 36085                                  	;db	"by Erdogan Tan [2022] "
 36086 000033D0 6279204572646F6761-     	db	"by Erdogan Tan [2023] " ; 04/01/2023
 36086 000033D9 6E2054616E205B3230-
 36086 000033E2 32335D20           
 36087 000033E6 0D0A                    	db	13,10
 36088 000033E8 0D0A2400                	db	13,10,"$",0
 36089                                  
 36090 000033EC 4E554C00                nuldev:	db	"NUL",0
 36091 000033F0 434F4E00                condev:	db	"CON",0
 36092 000033F4 41555800                auxdev:	db	"AUX",0
 36093 000033F8 50524E00                prndev:	db	"PRN",0
 36094                                  
 36095                                  ;IFDEF	CONFIGPROC
 36096 000033FC 5C434F4E4649472E53-     config:	db	"\CONFIG.SYS",0
 36096 00003405 595300             
 36097                                  
 36098 00003408 413A                    cntry_drv:  db	"A:"
 36099 0000340A 5C                      cntry_root: db	"\"
 36100 0000340B 434F554E5452592E53-     cntry_path: db	"COUNTRY.SYS",0
 36100 00003414 595300             
 36101                                  	    ;db	52 dup (0)
 36102 00003417 00<rep 34h>             	    times 52 db 0	
 36103                                  
 36104                                  country_file_signature:
 36105 0000344B FF434F554E545259        	db	0FFh,'COUNTRY'
 36106                                  
 36107                                  cntrycodepage_id: 
 36108 00003453 0000                    	dw	0 	
 36109                                  
 36110                                  ;ENDIF ; CONFIGPROC
 36111                                  
 36112                                  ; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 36113                                  ;;ifdef	MULTI_CONFIG
 36114                                  ;newcmd:  db	0			; non-zero if non-std shell specified
 36115                                  ;tmplate: db	64                      ; must precede commnd
 36116                                  ;;endif
 36117                                  	; 02/11/2022
 36118                                  	;db	12                      ; size of commnd line (excl. null)
 36119                                  
 36120 00003455 5C434F4D4D414E442E-     commnd:	db	"\COMMAND.COM",0
 36120 0000345E 434F4D00           
 36121                                  	;db	51 dup (0)
 36122 00003462 00<rep 33h>             	times	51 db 0
 36123                                  ;endif
 36124                                  
 36125                                  ; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 36126                                  ;;ifdef	MULTI_CONFIG
 36127                                  ;commnd2: db 	"\COMMAND.COM",0	; alternate commands to exec,
 36128                                  ;	 db	2,"/P",0 		; followed by their respective alternate
 36129                                  ;commnd3: db	"\MSDOS\COMMAND.COM",0	; command lines
 36130                                  ;	 db	11,"A:\MSDOS /P",0 	;(the drive letter are dynamically replaced)
 36131                                  ;commnd4: db	"\DOS\COMMAND.COM",0 	;
 36132                                  ;	 db	9,"A:\DOS /P",0		;
 36133                                  ;def_swchr:	
 36134                                  ;	 db	0			; default switchchar (referenced as command_line-1)
 36135                                  ;;endif
 36136                                  
 36137                                  	; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 36138                                  ;command_line:
 36139                                  ;	db	2,"/P"			; default command.com args
 36140                                  ;	;db	125 dup (0)
 36141                                  ;	times	125 db 0
 36142                                  
 36143                                  pathstring:
 36144                                  	;db	64 dup (0)
 36145 00003495 00<rep 40h>             	times	64 db 0
 36146                                  
 36147                                  ; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 36148                                  %if 0
 36149                                  
 36150                                  dae_flag:
 36151                                  	db	0 ; MSDOS 6.21 IO.SYS - SYSINIT:51D2h 	
 36152                                  
 36153                                  ;ifdef	MULTI_CONFIG
 36154                                  
 36155                                  MAX_MULTI_CONFIG equ 10
 36156                                  
 36157                                  ;   Beware of byte pairs accessed as words (see all "KEEP AFTER" notes below)
 36158                                  
 36159                                  bMenuColor:	db      07h ;1Fh        ; default fgnd/bgnd color
 36160                                  bMenuPage:	db      0               ; menu video page (KEEP AFTER bMenuColor)
 36161                                  		db      5               ; video page function # (KEEP AFTER bMenuPage)
 36162                                  bLastCol:	db      0               ; ending column on status line
 36163                                  bLastRow:	db      24              ; row # of status line (KEEP AFTER bLastCol)
 36164                                  bDisableUI:	db      0               ; 1=disable clean/interactive
 36165                                                                          ; 2=disable default 2-second delay
 36166                                  bCRTPage:	db      0               ; value saved from BIOS data area
 36167                                  wCRTStart:	dw      0               ; value saved from BIOS data area
 36168                                  bQueryOpt:	db      0               ; 0=off, 1=prompt all, 2=prompt none, 4=skip all
 36169                                  bDefBlock:	db      1               ; default block #
 36170                                  bMaxBlock:	db      0               ; maxmimum block #
 36171                                  offDefBlock:	dw      0               ; offset of name of default block (if any)
 36172                                  secTimeOut:	db      -1              ; # of seconds for timeout (-1 == indefinite)
 36173                                  secElapsed:	db      0               ; # of seconds elapsed so far (KEEP AFTER secTimeOut)
 36174                                  abBlockType:	times MAX_MULTI_CONFIG+1 db 0 ; array of block types
 36175                                  aoffBlockName:	times MAX_MULTI_CONFIG+1 dw 0 ; array of offsets of block names
 36176                                  aoffBlockDesc:	times MAX_MULTI_CONFIG+1 dw 0 ; array of offsets of block descriptions
 36177                                  
 36178                                  szBoot:		db      "CONFIG=",0
 36179                                  szMenu:		db      "MENU",0
 36180                                  szCommon:	db      "COMMON",0
 36181                                  
 36182                                  ;endif	;MULTI_CONFIG
 36183                                  
 36184                                  comtab:	 ; label byte
 36185                                  
 36186                                  ;            cmd len    command         cmd code
 36187                                  ;            -------    -------         --------
 36188                                  
 36189                                  ;ifdef MULTI_CONFIG
 36190                                          db      1,      "[",            CONFIG_BEGIN
 36191                                  ;endif
 36192                                          db      5,      "BREAK",        CONFIG_BREAK
 36193                                          db      7,      "BUFFERS",      CONFIG_BUFFERS
 36194                                          db      7,      "COMMENT",      CONFIG_COMMENT
 36195                                          db      7,      "COUNTRY",      CONFIG_COUNTRY
 36196                                          db      6,      "DEVICE",       CONFIG_DEVICE
 36197                                          db      10,     "DEVICEHIGH",   CONFIG_DEVICEHIGH
 36198                                          db      3,      "DOS",          CONFIG_DOS
 36199                                          db      8,      "DRIVPARM",     CONFIG_DRIVPARM
 36200                                          db      4,      "FCBS",         CONFIG_FCBS
 36201                                          db      5,      "FILES",        CONFIG_FILES
 36202                                  ;ifdef MULTI_CONFIG
 36203                                          db      7,      "INCLUDE",      CONFIG_INCLUDE
 36204                                  ;endif
 36205                                          db      7,      "INSTALL",      CONFIG_INSTALL
 36206                                          db      11,     "INSTALLHIGH",  CONFIG_INSTALLHIGH
 36207                                          db      9,      "LASTDRIVE",    CONFIG_LASTDRIVE
 36208                                  ;ifdef MULTI_CONFIG
 36209                                          db      7,      "SUBMENU",      CONFIG_SUBMENU
 36210                                          db      9,      "MENUCOLOR",    CONFIG_MENUCOLOR
 36211                                          db      11,     "MENUDEFAULT",  CONFIG_MENUDEFAULT
 36212                                          db      8,      "MENUITEM",     CONFIG_MENUITEM
 36213                                  ;endif
 36214                                          db      10,     "MULTITRACK",   CONFIG_MULTITRACK
 36215                                  ;ifdef MULTI_CONFIG
 36216                                          db      7,      "NUMLOCK",      CONFIG_NUMLOCK
 36217                                  ;endif
 36218                                          db      3,      "REM",          CONFIG_REM
 36219                                  ;ifdef MULTI_CONFIG
 36220                                          db      3,      "SET",          CONFIG_SET
 36221                                  ;endif
 36222                                          db      5,      "SHELL",        CONFIG_SHELL
 36223                                  ;if    STACKSW
 36224                                          db      6,      "STACKS",       CONFIG_STACKS
 36225                                  ;endif
 36226                                          db      8,      "SWITCHES",     CONFIG_SWITCHES
 36227                                  	db	0
 36228                                  %endif
 36229                                  
 36230                                  comtab:
 36231                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 36232                                  	; (SYSINIT:38EDh)
 36233 000034D5 074255464645525342      	db      7,      "BUFFERS",      CONFIG_BUFFERS
 36234 000034DE 05425245414B43          	db      5,      "BREAK",        CONFIG_BREAK
 36235 000034E5 0644455649434544        	db      6,      "DEVICE",       CONFIG_DEVICE
 36236 000034ED 0A4445564943454849-     	db      10,     "DEVICEHIGH",   CONFIG_DEVICEHIGH
 36236 000034F6 474855             
 36237 000034F9 0546494C455346          	db      5,      "FILES",        CONFIG_FILES
 36238 00003500 044643425358            	db      4,      "FCBS",         CONFIG_FCBS
 36239 00003506 094C41535444524956-     	db      9,      "LASTDRIVE",    CONFIG_LASTDRIVE
 36239 0000350F 454C               
 36240 00003511 0A4D554C5449545241-     	db      10,     "MULTITRACK",   CONFIG_MULTITRACK
 36240 0000351A 434B4D             
 36241 0000351D 08445249565041524D-     	db      8,      "DRIVPARM",     CONFIG_DRIVPARM
 36241 00003526 50                 
 36242 00003527 06535441434B534B        	db      6,      "STACKS",       CONFIG_STACKS
 36243 0000352F 07434F554E54525951      	db      7,      "COUNTRY",      CONFIG_COUNTRY
 36244 00003538 055348454C4C53          	db      5,      "SHELL",        CONFIG_SHELL
 36245 0000353F 07494E5354414C4C49      	db      7,      "INSTALL",      CONFIG_INSTALL
 36246 00003548 07434F4D4D454E5459      	db      7,      "COMMENT",      CONFIG_COMMENT
 36247 00003551 0352454D30              	db      3,      "REM",          CONFIG_REM
 36248 00003556 085357495443484553-     	db      8,      "SWITCHES",     CONFIG_SWITCHES
 36248 0000355F 31                 
 36249 00003560 03444F5348              	db      3,      "DOS",          CONFIG_DOS
 36250 00003565 00                      	db	0
 36251                                  
 36252                                  deviceparameters:	
 36253                                  	; A_DEVICEPARAMETERS <0,dev_3inch720kb,0,80>
 36254                                  devp.specialfunc:	; deviceparameters +
 36255 00003566 00                      	db	0	; A_DEVICEPARAMETERS.DP_SPECIALFUNCTIONS
 36256                                  devp.devtype:
 36257 00003567 02                      	db	2	; A_DEVICEPARAMETERS.DP_DEVICETYPE
 36258                                  devp.devattr:
 36259 00003568 0000                    	dw	0	; A_DEVICEPARAMETERS.DP_DEVICEATTRIBUTES
 36260                                  devp.cylinders:
 36261 0000356A 5000                    	dw	80	; A_DEVICEPARAMETERS.DP_CYLINDERS
 36262                                  
 36263 0000356C 00<rep 11Eh>            	times	286	db 0
 36264                                  	
 36265 0000368A 0200                    hlim:	dw	2
 36266 0000368C 0900                    slim:	dw	9
 36267                                  
 36268 0000368E 00                      drive:	db	0
 36269                                  
 36270                                  switches:
 36271 0000368F 0000                    	dw	0
 36272                                  
 36273                                  ; the following are the recommended bpbs for the media that
 36274                                  ; we know of so far.
 36275                                  
 36276                                  ; 02/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 36277                                  ; MSDOS 5.0 IO.SYS - SYSINIT:3AA9h
 36278                                  
 36279                                  ; 48 tpi diskettes
 36280                                  
 36281 00003691 0002                    bpb48t	dw	512
 36282 00003693 02                      	db	2
 36283 00003694 0100                    	dw	1
 36284 00003696 02                      	db	2
 36285 00003697 7000                    	dw	112
 36286 00003699 D002                    	dw	2*9*40 ; 720
 36287 0000369B FD                      	db	0FDh
 36288 0000369C 0200                    	dw	2
 36289 0000369E 0900                    	dw	9
 36290 000036A0 0200                    	dw	2
 36291 000036A2 00000000                	dd	0
 36292 000036A6 00000000                        dd      0
 36293                                  
 36294                                  ; 96tpi diskettes
 36295                                  
 36296 000036AA 0002                    bpb96t:	dw	512
 36297 000036AC 01                      	db	1
 36298 000036AD 0100                    	dw	1
 36299 000036AF 02                      	db	2
 36300 000036B0 E000                    	dw	224
 36301 000036B2 6009                    	dw	2*15*80 ; 2400
 36302 000036B4 F9                      	db	0F9h
 36303 000036B5 0700                    	dw	7
 36304 000036B7 0F00                    	dw	15
 36305 000036B9 0200                    	dw	2
 36306 000036BB 00000000                	dd	0
 36307 000036BF 00000000                        dd      0
 36308                                  
 36309                                  ; 3 1/2 inch diskette bpb
 36310                                  
 36311 000036C3 0002                    bpb35:	dw	512
 36312 000036C5 02                      	db	2
 36313 000036C6 0100                    	dw	1
 36314 000036C8 02                      	db	2
 36315 000036C9 7000                    	dw	112
 36316 000036CB A005                    	dw	2*9*80 ; 1440
 36317 000036CD F9                      	db	0F9h
 36318 000036CE 0300                    	dw	3
 36319 000036D0 0900                    	dw	9
 36320 000036D2 0200                    	dw	2
 36321 000036D4 00000000                	dd	0
 36322 000036D8 00000000                        dd      0
 36323                                        
 36324 000036DC 0002                    bpb35h:	dw	512
 36325 000036DE 01                      	db	1
 36326 000036DF 0100                    	dw	1
 36327 000036E1 02                      	db	2
 36328 000036E2 E000                    	dw	224
 36329 000036E4 400B                    	dw	2*18*80 ; 2880
 36330 000036E6 F0                      	db	0F0h
 36331 000036E7 0900                    	dw	9
 36332 000036E9 1200                    	dw	18
 36333 000036EB 0200                    	dw	2
 36334 000036ED 00000000                	dd	0
 36335 000036F1 00000000                        dd      0
 36336                                  
 36337                                  ; m037 - BEGIN
 36338                                  
 36339 000036F5 0002                    bpb288:	dw	512
 36340 000036F7 02                      	db	2
 36341 000036F8 0100                    	dw	1
 36342 000036FA 02                      	db	2
 36343 000036FB F000                    	dw	240
 36344 000036FD 8016                    	dw	2*36*80 ; 5760
 36345 000036FF F0                      	db	0F0h
 36346 00003700 0900                    	dw	9
 36347 00003702 2400                    	dw	36
 36348 00003704 0200                    	dw	2
 36349 00003706 00000000                	dd	0
 36350 0000370A 00000000                        dd      0
 36351                                  
 36352                                  ; m037 - END
 36353                                  
 36354                                  ; 12/05/2019
 36355                                  
 36356                                  align 2
 36357                                  
 36358                                  ; 02/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 36359                                  ; MSDOS 5.0 IO.SYS - SYSINIT:3B26h
 36360                                  
 36361 0000370E [9136]                  bpbtable:   dw	    bpb48t		; 48tpi drives
 36362 00003710 [AA36]                  	    dw	    bpb96t		; 96tpi drives
 36363 00003712 [C336]                  	    dw	    bpb35		; 3.5" drives
 36364                                  ; the following are not supported, so default to 3.5" media layout
 36365 00003714 [C336]                  	    dw	    bpb35		; not used - 8" drives
 36366 00003716 [C336]                  	    dw	    bpb35		; not used - 8" drives
 36367 00003718 [C336]                  	    dw	    bpb35		; not used - hard files
 36368 0000371A [C336]                  	    dw	    bpb35		; not used - tape drives
 36369 0000371C [DC36]                  	    dw	    bpb35h		; 3-1/2" 1.44mb drive
 36370 0000371E [C336]                  	    dw	    bpb35		; ERIMO				m037
 36371 00003720 [F536]                  	    dw	    bpb288		; 2.88 MB diskette drives	m037
 36372                                  
 36373                                  switchlist: 
 36374 00003722 08464853544449434E      	db	8,"FHSTDICN"	     ; preserve the positions of n and c.
 36375                                  
 36376                                  ;----------------------------------------------------------------------------
 36377                                  ; Messages
 36378                                  ;----------------------------------------------------------------------------
 36379                                  
 36380                                  ; 19/04/2019 - Retro DOS v4.0
 36381                                  
 36382                                  ; MSDOS 6.21 IO.SYS - SYSINIT:54D1h
 36383                                  
 36384 0000372B 00                      	db 	0
 36385                                  
 36386                                  ; 02/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 36387                                  ; MSDOS 5.0 IO.SYS - SYSINIT:3B44h
 36388                                  
 36389                                  badopm:
 36390 0000372C 0D0A                    	db	0Dh,0Ah 
 36391 0000372E 556E7265636F676E69-     	db	'Unrecognized command in CONFIG.SYS'
 36391 00003737 7A656420636F6D6D61-
 36391 00003740 6E6420696E20434F4E-
 36391 00003749 4649472E535953     
 36392                                  crlfm:
 36393 00003750 0D0A24                  	db	0Dh,0Ah,'$'
 36394                                  badparm:
 36395 00003753 0D0A                    	db	0Dh,0Ah
 36396 00003755 42616420636F6D6D61-     	db	'Bad command or parameters - $'
 36396 0000375E 6E64206F7220706172-
 36396 00003767 616D6574657273202D-
 36396 00003770 2024               
 36397                                  badsiz_pre:
 36398 00003772 0D0A                    	db	0Dh,0Ah
 36399 00003774 536563746F72207369-     	db	'Sector size too large in file $'
 36399 0000377D 7A6520746F6F206C61-
 36399 00003786 72676520696E206669-
 36399 0000378F 6C652024           
 36400                                  badld_pre:
 36401 00003793 0D0A                    	db	0Dh,0Ah
 36402 00003795 426164206F72206D69-     	db	'Bad or missing $'
 36402 0000379E 7373696E672024     
 36403                                  badcom:
 36404 000037A5 436F6D6D616E642049-     	db	'Command Interpreter',0
 36404 000037AE 6E7465727072657465-
 36404 000037B7 7200               
 36405                                  badcountry:
 36406 000037B9 0D0A                    	db	0Dh,0Ah
 36407 000037BB 496E76616C69642063-     	db	'Invalid country code or code page',0Dh,0Ah,'$'
 36407 000037C4 6F756E74727920636F-
 36407 000037CD 6465206F7220636F64-
 36407 000037D6 6520706167650D0A24 
 36408                                  badcountrycom:
 36409 000037DF 0D0A                    	db	0Dh,0Ah
 36410 000037E1 4572726F7220696E20-     	db	'Error in COUNTRY command',0Dh,0Ah,'$'
 36410 000037EA 434F554E5452592063-
 36410 000037F3 6F6D6D616E640D0A24 
 36411                                  insufmemory:
 36412 000037FC 0D0A                    	db	0Dh,0Ah
 36413 000037FE 496E73756666696369-     	db	'Insufficient memory for COUNTRY.SYS file',0Dh,0Ah,'$'
 36413 00003807 656E74206D656D6F72-
 36413 00003810 7920666F7220434F55-
 36413 00003819 4E5452592E53595320-
 36413 00003822 66696C650D0A24     
 36414                                  badmem:
 36415 00003829 0D0A                    	db	0Dh,0Ah
 36416 0000382B 436F6E666967757261-     	db	'Configuration too large for memory',0Dh,0Ah,'$'
 36416 00003834 74696F6E20746F6F20-
 36416 0000383D 6C6172676520666F72-
 36416 00003846 206D656D6F72790D0A-
 36416 0000384F 24                 
 36417                                  badblock:
 36418 00003850 0D0A                    	db	0Dh,0Ah
 36419 00003852 546F6F206D616E7920-     	db	'Too many block devices',0Dh,0Ah,'$'
 36419 0000385B 626C6F636B20646576-
 36419 00003864 696365730D0A24     
 36420                                  badstack:
 36421 0000386B 0D0A                    	db	0Dh,0Ah
 36422 0000386D 496E76616C69642053-     	db	'Invalid STACK parameters',0Dh,0Ah,'$'
 36422 00003876 5441434B2070617261-
 36422 0000387F 6D65746572730D0A24 
 36423                                  	; 18/12/2022
 36424                                  ;badorder:
 36425                                  	;db	0Dh,0Ah
 36426                                  	;db	'Incorrect order in CONFIG.SYS line $'
 36427                                  errorcmd:
 36428 00003888 4572726F7220696E20-     	db	'Error in CONFIG.SYS line $'
 36428 00003891 434F4E4649472E5359-
 36428 0000389A 53206C696E652024   
 36429                                  
 36430                                  ; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 36431                                  %if 0
 36432                                  
 36433                                  OnOff:	db	'ON'
 36434                                  OnOff2:	db	'OFF'
 36435                                  
 36436                                  StartMsg:
 36437                                  	db	'Starting MS-DOS...',0Dh,0Ah
 36438                                  	db	0Ah,0
 36439                                  _$PauseMsg:
 36440                                  	db	'Press any key to continue . . .',0Dh,0Ah,'$'
 36441                                  _$CleanMsg:
 36442                                  	db	'MS-DOS is bypassing your CONFIG.SYS and AUTOEXEC.BAT files.',0Dh,0Ah,'$'
 36443                                  _$InterMsg:
 36444                                  	db	'MS-DOS will prompt you to confirm each CONFIG.SYS command.',0Dh,0Ah,'$'
 36445                                  _$MenuHeader:
 36446                                  	db	0Dh,0Ah
 36447                                  	db	'  MS-DOS 6.2 Startup Menu',0Dh,0Ah
 36448                                  	db	'  =======================',0Dh,0Ah,'$'
 36449                                  _$MenuPrmpt:
 36450                                  	db	'  Enter a choice: $'
 36451                                  _$StatusLine:
 36452                                  	db	'F5=Bypass startup files F8=Confirm each line of CONFIG.SYS'
 36453                                  	db	'and AUTOEXEC.BAT [ ]$'
 36454                                  _$InterPrmpt:
 36455                                  	db	' [Y,N]?$'
 36456                                  _$YES:	db	'YES$'
 36457                                  _$NO:	db	'NO $'
 36458                                  _$TimeOut:
 36459                                  	db	'Time remaining: $'
 36460                                  badcomprmpt:
 36461                                  	db	'Enter correct name of Command Interpreter (eg, C:\COMMAND.COM)'
 36462                                  	db	0Dh,0Ah,'$'
 36463                                  _$AutoPrmpt:
 36464                                  	db	'Process AUTOEXEC.BAT [Y,N]?$'
 36465                                  
 36466                                  %endif
 36467                                  
 36468                                  ; 02/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 36469                                  ; MSDOS 5.0 IO.SYS - SYSINIT:3CE0h
 36470                                  
 36471                                  TooManyDrivesMsg:
 36472 000038A2 5741524E494E472120-     	db	'WARNING! Logical drives past Z: exist and will be ignored',0Dh,0Ah,'$'
 36472 000038AB 4C6F676963616C2064-
 36472 000038B4 726976657320706173-
 36472 000038BD 74205A3A2065786973-
 36472 000038C6 7420616E642077696C-
 36472 000038CF 6C2062652069676E6F-
 36472 000038D8 7265640D0A24       
 36473                                  
 36474                                  ;MSDOS 6.21 IO.SYS - SYSINIT:587Ch
 36475                                  	;db	'Wrong DBLSPACE.BIN version',0Dh,0Ah,'$'
 36476                                  	;db	7 dup(0)
 36477                                  
 36478                                  	;times	7 db 0
 36479                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 36480                                  ;MSDOS 5.0 IO.SYS - SYSINIT:3D1Ch
 36481                                  	; 09/12/2022
 36482                                  	;times	4 db 0
 36483                                  
 36484                                  ;----------------------------------------------------------------------------
 36485                                  		; 09/12/2022
 36486                                  		;db 0
 36487                                  
 36488                                  number3div	equ ($-SYSINIT$)
 36489                                  number3mod	equ (number3div % 16)
 36490                                  
 36491                                  %if (number3mod>0) & (number3mod<16) ; 17/09/2023
 36492 000038DE 00<rep 2h>              		times (16-number3mod) db 0
 36493                                  %endif
 36494                                  
 36495                                  ;---------------------------------------------------------------------------- 
 36496                                  ; 09/12/2022 - MSDOS 5.0 IO.SYS:3D20h ;;; SI_end = 3D20h for MSDOS 5.0 IO.SYS 
 36497                                  ;---------------------------------------------------------------------------- 
 36498                                  
 36499                                  ;MSDOS 6.21 IO.SYS - SYSINIT:5899h
 36500                                  
 36501                                  ;----------------------------------------------------------------------------
 36502                                  ; 20/04/2019 - Retro DOS v4.0
 36503                                  
 36504                                  ; 09/12/2022
 36505                                  ;
 36506                                  ;bss_start:
 36507                                  ;
 36508                                  ;ABSOLUTE bss_start
 36509                                  ;
 36510                                  ;alignb 16
 36511                                  
 36512                                  SI_end:  ; SI_end equ $
 36513                                  
 36514                                  ;----------------------------------------------------------------------------
 36515                                  
 36516                                  ;sysinitseg	ends
 36517                                  
 36518                                  ; ***************************************************************************
 36519                                  
 36520                                  ; 09/12/2022 - MSDOS 5.0 IO.SYS:3D20h ;;; SI_end = 3D20h for MSDOS 5.0 IO.SYS
 36521                                  
 36522                                  SYSINITSIZE	equ SI_end - SYSINIT$
 36523                                  DOSLOADSEG	equ SYSINITSEG+((SYSINITSIZE+15)/16)
 36524                                  
 36525                                  ;----------------------------------------------------------------------------
 36526                                  ; End of Retro DOS v4.0 (MSDOS 5.0) IO.SYS source by Erdogan Tan - 09/12/2022
 36527                                  ;----------------------------------------------------------------------------
 36528                                  
 36529                                  ; 21/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0)
 36530                                  ;----------------------------------------------------------------------------
 36531                                  ;----------------------------------------------------------------------------
 36532                                  
 36533                                  ; ----------------------------------------------------------------------------
 36534                                  ; START OF MSDOS 6.0 -IBMDOS.COM- KERNEL CODE (MSDOS.SYS) -will be relocated-
 36535                                  ; ----------------------------------------------------------------------------
 36536                                  ; 18/03/2019 - Retro DOS v4.0 
 36537                                  ; 11/06/2018 - Retro DOS v3.0 
 36538                                  
 36539                                  MSDOS_BIN_OFFSET: ; this offset must be paragraph aligned
 36540                                  		;; 28/06/2019 ('msdos6.s') 
 36541                                  		;incbin	'MSDOS6.BIN' ; Retro DOS 4.0 - MSDOS 6.21 KERNEL
 36542                                  		
 36543                                  		; 27/09/2023 (BugFix)
 36544                                  		; 19/09/2023
 36545                                  		; 28/12/2022 (BugFix)
 36546                                  		; 22/12/2022
 36547                                  		; 21/12/2022 ('msdos5.s')
 36548 000038E0 <bin 90F0h>             		incbin 'MSDOS5.BIN'  ; Retro DOS 4.0 - MSDOS 5.0+ KERNEL
 36549                                  	
 36550                                  ; 28/09/2023	
 36551                                  ;msdos_bin_size equ $ - MSDOS_BIN_OFFSET
 36552                                  
 36553                                  align 2
 36554                                  
 36555                                  ; 21/12/2022
 36556                                  ;;END_OF_KERNEL:
 36557                                  ;END_OF_KERNEL equ $
 36558                                  
 36559                                  ; 28/09/2023
 36560                                  S3SIZE equ $-$$
 36561                                  KERNEL_SIZE equ S1SIZE+S2SIZE+S3SIZE
 36562                                  
 36563                                  ;=============================================================================
 36564                                  ;	END
 36565                                  ;=============================================================================
 36566                                  ; Retro DOS v4.0 by Erdogan Tan (Redevelopment of MSDOS 5.0 KERNEL via NASM)
 36567                                  ; ------------------------------
 36568                                  ; DECEMBER 2022, ISTANBUL - TURKIYE.
