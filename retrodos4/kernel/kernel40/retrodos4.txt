     1                                  ; ****************************************************************************
     2                                  ; RETRODOS.SYS (MSDOS 5.0 Kernel) - RETRO DOS v4.0 by ERDOGAN TAN - 01/10/2022
     3                                  ; ----------------------------------------------------------------------------
     4                                  ; Last Update: 11/09/2023 (Previous: 28/08/2023)
     5                                  ; ----------------------------------------------------------------------------
     6                                  ; Beginning: 25/05/2018 (Retro DOS 3.0), 26/12/2018 (Retro DOS 4.0)
     7                                  ; ----------------------------------------------------------------------------
     8                                  ; Assembler: NASM version 2.15
     9                                  ; ----------------------------------------------------------------------------
    10                                  ;	   ((nasm retrodos.s -l retrodos.lst -o MSDOS.SYS -Z error.txt)) 
    11                                  ; ----------------------------------------------------------------------------
    12                                  
    13                                  ; 20/12/2022 - Modifications for initiating IO.SYS by Retro DOS v2 boot sector
    14                                  ;
    15                                  ;	       (Retro DOS v2 BS loads IO.SYS & MSDOS.SYS as single kernel file
    16                                  ;	       with name of 'MSDOS.SYS'. Retro DOS init code -for IO.SYS init-
    17                                  ;	       is different than original MSDOS IO.SYS LOADER and INIT code.)
    18                                  ;
    19                                  ;	       ((RETRODOS.SYS/MSDOS.SYS can be loaded by a fake IO.SYS for
    20                                  ;		using it with MSDOS 5.0 boot sector & as bootable MSDOS disk.
    21                                  ;		For that, fake IO.SYS must load 'MSDOS.SYS' at 1000h:0000h.))		-	
    22                                  ; 		
    23                                  ; 18/12/2022 - Modified MSDOS 5.0 IO.SYS (for using with MSDOS 5 boot sector)
    24                                  ; 09/12/2022 - Multisection binary file format (BIOSDATA & BIOSCODE sections)
    25                                  ; 01/10/2022 - Erdogan Tan (Istanbul)
    26                                  
    27                                  ;Note: This code is a part of Retro DOS 4.0 kernel source code
    28                                  ;     (as included binary, 'IOSYS5.BIN') 
    29                                  ;     Equivalent of MSDOS 5.0 IO.SYS, BIOSCODE and BIOSDATA and SYSINIT
    30                                  ;						        (except MSLOAD code)
    31                                        
    32                                  ;------- Retro DOS v2 (v3) boot sector loads RETRODOS.SYS (MSDOS.SYS)
    33                                  ;	 at 1000h:0000h and loader (initialization) part of RETRODOS kernel
    34                                  ;	 moves IO.SYS (DOSBIOSCODE & DOSBIOSDATA, 'IOSYS5.BIN') to 70h:0000h.
    35                                  ;	 Then SYSINIT code to the next segment (46Dh for original MSDOS 5.0)..
    36                                  ;	 SYSINIT code relocates itself and DOSBIOSCODE and MSDOS.SYS
    37                                  ;	 (MSDOS5.BIN) according to request/setting in 'config.sys' file.
    38                                  
    39                                  ; ----------------------------------------------------------------------------
    40                                  
    41                                  ;=============================================================================
    42                                  ; Modified from 'retrodos3.s', Retro DOS v3.0 Kernel (IBMBIO.COM) Source code
    43                                  ; by Erdogan Tan, 10/09/2018
    44                                  ;=============================================================================
    45                                  
    46                                  ; MSBIO (IO.SYS 6.0) source files:
    47                                  ; 	MSBIO1.ASM,MSCHAR.ASM,MSDISK.ASM,MSDIOCTL.ASM,MSINT13.ASM,MSBIO2.ASM
    48                                  ;	MSINIT.ASM,SYSINIT1.ASM,SYSCONF.ASM,SYSPRE.ASM,SYSINIT2.ASM 
    49                                  ;	SYSIMES.ASM,POWER.ASM,PTIME.ASM,MSEND.ASM
    50                                  
    51                                  ;=============================================================================
    52                                  ; MSBIO
    53                                  ;=============================================================================
    54                                  ;msbio1+mschar+msdisk+msdioctl+msint13+msbio2+
    55                                  ;msinit+sysinit1+sysconf+syspre+sysinit2+sysimes+power+ptime+
    56                                  ;msend,msbio,msbio;
    57                                  
    58                                  ;=============================================================================
    59                                  ; RETRO DOS kernel versions by Erdogan Tan (2018-2022)
    60                                  ;=============================================================================
    61                                  
    62                                  ;Retro DOS v1.0 == MSDOS 1.25 -- derived from MSDOS 1.25 source code 
    63                                  ;Retro DOS v2.0 == MSDOS 2.11 -- derived from MSDOS 2.11 source code 
    64                                  ;Retro DOS v3.0 == MSDOS 3.30 -- derived from MSDOS 3.3 & 6.0 source code 
    65                                  ;Retro DOS v4.0 == MSDOS 6.21 -- derived from MSDOS 6.0 source code (2019) (*)
    66                                  ;Retro DOS v4.0 == MSDOS 5.0+ -- derived from MSDOS 6.0 source code (2022) (**)
    67                                  ;Retro DOS v4.1 == MSDOS 5.0+ -- will be optimized -shortened- version (2023)
    68                                  ;Retro DOS v4.2 == MSDOS 6.21 -- will be MSDOS 6.21 (6.22) compatible (2023)(?)
    69                                  ;Retro DOS v5.0 == PCDOS 7.10 -- will be derived from IBM PCDOS 7.1 source code
    70                                  
    71                                  ;(*) unfinished, draft, canceled (failed in 2019)
    72                                  ;(**) MSDOS 5.0 IO.SYS & SYSINIT, MSDOS 5.0-6.22 mixed MSDOS.SYS (successed)
    73                                  ;(?) MSDOS 6.21 IO.SYS & SYSINIT, MSDOS 6.21 MSDOS.SYS except doublespace
    74                                  
    75                                  ;Disassembly: (reverse engineering via IDA Pro Free)
    76                                  
    77                                  ;Retro DOS v1.0 <-- IBM PCDOS 1.1
    78                                  ;Retro DOS v2.0 <-- IBM PCDOS 2.1 & MSDOS 2.11
    79                                  ;Retro DOS v3.0 <-- IBM PCDOS 3.3 & MSDOS 3.3
    80                                  ;Retro DOS v4.0 <-- MSDOS 6.21 ; 2018-2019 (*)
    81                                  ;Retro DOS v4.0 <-- MSDOS 5.0 ; 2022 (**)
    82                                  ;Retro DOS v5.0 <-- IBM PCDOS 7.1 
    83                                  
    84                                  ;-----------------------------------------------------------------------------
    85                                  ; MSDOS 6.21 IO.SYS (13/02/1994)
    86                                  ;-----------------------------------------------------------------------------
    87                                  
    88                                  SECTOR_SIZE     equ     0200h		; size of a sector
    89                                  PAUSE_KEY       equ     7200h		; scancode + charcode of PAUSE key
    90                                  KEYBUF_NEXT     equ     041Ah		; next character in keyboard buffer
    91                                  KEYBUF_FREE     equ     041Ch		; next free slot in keyboard buffer
    92                                  KEYBUF          equ     041Eh		; keyboard buffer data
    93                                  LOGICAL_DRIVE   equ     0504h		; linear address of logical drive byte
    94                                  ;DOS_SEGMENT	equ     00BFh ; v1.1	; segment in which DOS will run
    95                                  DOS_SEGMENT	equ     00C4h		; Retro DOS v1.0 - 13/02/2018
    96                                  BIO_SEGMENT     equ     0060h		; segment in which BIO is running
    97                                  
    98                                  ; 24/02/2018 (Retro DOS 2.0 - MSDOS 3.3 "DISKPRM.INC" - 24/07/1987)
    99                                  ; The following structure defines the disk parameter table
   100                                  ; pointed to by Interrupt vector 1EH (location 0:78H)
   101                                  
   102                                  struc	DISK_PARMS
   103 00000000 ??                      .DISK_SPECIFY_1:  resb	1
   104 00000001 ??                      .DISK_SPECIFY_2:  resb	1
   105 00000002 ??                      .DISK_MOTOR_WAIT: resb  1	; Wait till motor off
   106 00000003 ??                      .DISK_SECTOR_SIZ: resb 	1	; Bytes/Sector (2 = 512)
   107 00000004 ??                      .DISK_EOT:	  resb  1	; Sectors per track (MAX)
   108 00000005 ??                      .DISK_RW_GAP:	  resb  1	; Read Write Gap
   109 00000006 ??                      .DISK_DTL:	  resb	1
   110 00000007 ??                      .DISK_FORMT_GAP:  resb  1	; Format Gap Length
   111 00000008 ??                      .DISK_FILL:	  resb  1	; Format Fill Byte
   112 00000009 ??                      .DISK_HEAD_STTL:  resb  1	; Head Settle Time (MSec)
   113 0000000A ??                      .DISK_MOTOR_STRT: resb  1	; Motor start delay
   114                                  .size:
   115                                  endstruc
   116                                  
   117                                  ; 09/03/2019 - Retro DOS v4.0
   118                                  ; -------------------------------------------------------------------------
   119                                  ; MSEQU.INC, MSDOS 6.0, 1991
   120                                  
   121                                  ftoobig 	equ	80h
   122                                  fbig		equ	40h
   123                                  romstatus	equ	1
   124                                  romread 	equ	2
   125                                  romwrite	equ	3
   126                                  romverify	equ	4
   127                                  romformat	equ	5
   128                                  
   129                                  ; 26/12/2018 (Retro DOS 4.0 - MSDOS 6.0 "MSBDS.INC" - 1991)
   130                                  ; -------------------------------------------------------------------------
   131                                  ; 24/02/2018 (Retro DOS 2.0 - MSDOS 3.3 "MSBDS.INC" - 24/07/1987)
   132                                  ;
   133                                  ;  BDS is the Bios Data Structure.
   134                                  ;
   135                                  ;  There is one BDS for each logical drive in the system. All the BDS's
   136                                  ;  are linked together in a list with the pointer to the first BDS being
   137                                  ;  found in START_BDS. The BDS hold various values important to the disk
   138                                  ;  drive. For example there is a field for last time accesses. As actions
   139                                  ;  take place in the system the BDS are update to reflect the actions.
   140                                  ;  For example is there is a read to a disk the last access field for the
   141                                  ;  BDS for that drive is update to the current time.
   142                                  ;
   143                                  ; Values for various flags in BDS.flags.
   144                                  ;
   145                                  
   146                                  fnon_removable	    equ     01h 	;For non-removable media
   147                                  fchangeline	    equ     02h 	;If changeline supported on drive
   148                                  return_fake_bpb     equ     04h 	; When set, don't do a build BPB
   149                                  					; just return the fake one
   150                                  good_tracklayout    equ     08h 	; The track layout has no funny sectors
   151                                  fi_am_mult	    equ     10h 	;If more than one logical for this physical
   152                                  fi_own_physical     equ     20h 	;Signify logical owner of this physical
   153                                  fchanged	    equ     40h 	;Indicates media changed
   154                                  set_dasd_true	    equ     80h 	; Set DASD before next format
   155                                  fchanged_by_format  equ    100h		;Media changed by format
   156                                  ; MSDOS 6.0
   157                                  unformatted_media   equ    200h 	;Fixed disk only
   158                                  
   159                                  ;
   160                                  ; Various form factors to describe media
   161                                  ;
   162                                  
   163                                  ff48tpi 	    equ     0
   164                                  ff96tpi 	    equ     1
   165                                  ffSmall 	    equ     2
   166                                  ffHardFile	    equ     5
   167                                  ffOther 	    equ     7
   168                                  ; MSDOS 6.0 ("MSBDS.INC", 1991)
   169                                  ff288		    equ     9	; 2.88 MB drive
   170                                  ; Retro DOS v4.0 feature only !
   171                                  ;ff144		    equ	   10	; 1.44 MB drive			
   172                                  
   173                                  ; 26/05/2019
   174                                  
   175                                  struc	BDS	; BDS_Type
   176 00000000 ????????                .link:		resd 1		; Link to next BDS
   177 00000004 ??                      .drivenum:	resb 1		; Physical drive number
   178 00000005 ??                      .drivelet:	resb 1		; DOS drive number
   179                                  
   180                                  	;We want to embed a BPB declaration here, but we can't initialize
   181                                  	;it properly if we do, so we duplicate the byte/word/dword architecture
   182                                  	;of the BPB declaration.
   183                                  .BPB:	
   184 00000006 ????                    .bytespersec:	resw 1		; bytes per sectors ; def = 512
   185 00000008 ??                      .secperclus:	resb 1		; sectors per cluster
   186 00000009 ????                    .resectors:	resw 1		; reserved sectors
   187 0000000B ??                      .fats:		resb 1		; number of fats
   188 0000000C ????                    .direntries:	resw 1		; number of root directory entries
   189 0000000E ????                    .totalsecs16:	resw 1		; total sectors on medium
   190 00000010 ??                      .media:		resb 1		; media descriptor byte ; def = 0F8h
   191 00000011 ????                    .fatsecs: 	resw 1		; number of fat sectors
   192 00000013 ????                    .secpertrack:	resw 1		; sectors per track
   193 00000015 ????                    .heads:		resw 1		; number of heads
   194                                  ;.hiddensecs:	resw 1		; hidden sectors
   195                                  ; MSDOS 6.0
   196 00000017 ????????                .hiddensecs:	resd 1		; hidden sectors	
   197 0000001B ????????                .totalsecs32:	resd 1		; big total sectors		
   198                                  ;
   199 0000001F ??                      .fatsiz:	resb 1		; flags...
   200 00000020 ????                    .opcnt:		resw 1		; open ref. count
   201                                  ;.volid:	resb 12		; volume ID of medium
   202 00000022 ??                      .formfactor:	resb 1		; form factor index
   203 00000023 ????                    .flags:		resw 1		; various flags ; def: 0020h
   204 00000025 ????                    .cylinders:	resw 1		; number of cylinders
   205                                  ;
   206                                  .R_BPB:  			; recommended BPB
   207 00000027 ????                    .rbytespersec:	resw 1		
   208 00000029 ??                      .rsecperclus:	resb 1
   209 0000002A ????                    .rresectors: 	resw 1
   210 0000002C ??                      .rfats:		resb 1
   211 0000002D ????                    .rdirentries:	resw 1
   212 0000002F ????                    .rtotalsecs16:	resw 1
   213 00000031 ??                      .rmedia: 	resb 1
   214 00000032 ????                    .rfatsecs:	resw 1
   215 00000034 ????                    .rsecpertrack: 	resw 1
   216 00000036 ????                    .rheads:	resw 1
   217 00000038 ????????                .rhidsecs: 	resd 1
   218 0000003C ????????                .rtotalsecs32: 	resd 1
   219 00000040 ????????????            .rreserved:	resb 6		; not used (reserved)
   220                                  ;
   221 00000046 ??                      .track:		resb 1		; last track accessed on drive
   222                                  .bdsm_ismini:
   223 00000047 ????                    .tim_lo:	resw 1		; time of last access. keep
   224                                  .bdsm_hidden_trks:
   225 00000049 ????                    .tim_hi:	resw 1		; these contiguous.
   226 0000004B <res Ch>                .volid:		resb 12		; volume id of medium
   227                                  	       ;db "NO NAME    ",0
   228 00000057 ????????                .vol_serial:	resd 1	; current volume serial number from boot record
   229 0000005B <res 9h>                .filesys_id:	resb 9	; current file system id from boot record
   230                                  	       ;db "FAT12   ",0
   231                                  .size:			
   232                                  endstruc
   233                                  
   234                                  ;The assembler will generate bad data for "size bds_volid",
   235                                  ;so we'll define an equate here.
   236                                  
   237                                  VOLID_SIZ	equ	12
   238                                  
   239                                  ;bdsm_ismini	equ	bds_tim_lo	; overlapping bds_tim_lo
   240                                  ;bdsm_hidden_trks equ	bds_tim_hi	; overlapping bds_tim_hi
   241                                  
   242                                  max_mini_dsk_num equ 23	; max # of mini disk ibmbio can support
   243                                  
   244                                  ; 29/12/2018
   245                                  ; Retro DOS v4.0
   246                                  ;
   247                                  ; MSDOS 6.0 - BOOTFORM.INC
   248                                  
   249                                  BOOT_SIZE	    EQU	 512
   250                                  EXT_BOOT_SIGNATURE  EQU	 29h ; 41 ; Extended boot signature
   251                                  
   252                                  struc EBPB ; EXT_BPB_INFO
   253 00000000 ????                    .BYTESPERSECTOR:    resw 1
   254 00000002 ??                      .SECTORSPERCLUSTER: resb 1
   255 00000003 ????                    .RESERVEDSECTORS:   resw 1
   256 00000005 ??                      .NUMBEROFFATS:	    resb 1
   257 00000006 ????                    .ROOTENTRIES:	    resw 1
   258 00000008 ????                    .TOTALSECTORS:	    resw 1
   259 0000000A ??                      .MEDIADESCRIPTOR:   resb 1
   260 0000000B ????                    .SECTORSPERFAT:	    resw 1
   261 0000000D ????                    .SECTORSPERTRACK:   resw 1
   262 0000000F ????                    .HEADS:		    resw 1
   263 00000011 ????????                .HIDDENSECTORS:	    resd 1
   264 00000015 ????????                .BIGTOTALSECTORS:   resd 1
   265                                  .size:
   266                                  endstruc
   267                                  
   268                                  ;EXT_PHYDRV, EXT_CURHD included in the header for OS2.
   269                                  struc EXT_BOOT ; EXT_IBMBOOT_HEADER
   270 00000000 ??????                  .JUMP:		resb 3
   271 00000003 ????????????????        .OEM:		resb 8
   272 0000000B <res 19h>               .BPB:		resb EBPB.size
   273 00000024 ??                      .PHYDRV:	resb 1
   274 00000025 ??                      .CURHD:		resb 1
   275 00000026 ??                      .SIG:		resb 1
   276 00000027 ????????                .SERIAL:	resd 1
   277 0000002B <res Bh>                .VOL_LABEL:	resb 11
   278 00000036 ????????????????        .SYSTEM_ID:	resb 8
   279                                  .size:
   280                                  endstruc
   281                                  
   282                                  %define BOOT_SIGNATURE	[BOOT_SIZE-2]
   283                                  
   284                                  ; 23/03/2018
   285                                  
   286                                  ;STATIC REQUEST HEADER (DEVSYM.INC, MSDOS 6.0, 1991)
   287                                  STRUC SRHEAD
   288 00000000 ??                      .REQLEN:	resb 1		;LENGTH IN BYTES OF REQUEST BLOCK
   289 00000001 ??                      .REQUNIT:	resb 1		;DEVICE UNIT NUMBER
   290 00000002 ??                      .REQFUNC:	resb 1		;TYPE OF REQUEST
   291 00000003 ????                    .REQSTAT:	resw 1		;STATUS WORD
   292 00000005 ????????????????        	       	resb 8		;RESERVED FOR QUEUE LINKS
   293                                  .size:
   294                                  endstruc
   295                                  
   296                                  ; GENERIC IOCTL REQUEST STRUCTURE (DEVSYM.INC, MSDOS 6.0, 1991)
   297                                  ;	SEE THE DOS 4.0 DEVICE DRIVER SPEC FOR FURTHER ELABORATION.
   298                                  ;
   299                                  struc IOCTL_REQ
   300                                  	       ;DB    (SIZE SRHEAD) DUP(?)
   301 00000000 <res Dh>                		resb SRHEAD.size	
   302                                  			    	; GENERIC IOCTL ADDITION.
   303 0000000D ??                      .MAJORFUNCTION:	resb 1		;FUNCTION CODE
   304 0000000E ??                      .MINORFUNCTION:	resb 1		;FUNCTION CATEGORY
   305 0000000F ????                    .REG_SI:	resw 1
   306 00000011 ????                    .REG_DI:	resw 1
   307 00000013 ????????                .GENERICIOCTL_PACKET: resd 1	; POINTER TO DATA BUFFER
   308                                  endstruc
   309                                  
   310                                  ; GENERIC IOCTL CATEGORY CODES  (IOCTL.INC, MSDOS 6.0, 1991)
   311                                  IOC_OTHER	EQU	0	; Other device control J.K. 4/29/86
   312                                  IOC_SE		EQU	1	; SERIAL DEVICE CONTROL
   313                                  IOC_TC		EQU	2	; TERMINAL CONTROL
   314                                  IOC_SC		EQU	3	; SCREEN CONTROL
   315                                  IOC_KC		EQU	4	; KEYBOARD CONTROL
   316                                  IOC_PC		EQU	5	; PRINTER CONTROL
   317                                  IOC_DC		EQU	8	; DISK CONTROL (SAME AS RAWIO)
   318                                  
   319                                  ; DEFINITIONS FOR IOCTL_REQ.MINORFUNCTION
   320                                  GEN_IOCTL_WRT_TRK   EQU   40H
   321                                  GEN_IOCTL_RD_TRK    EQU   60H
   322                                  GEN_IOCTL_FN_TST    EQU   20H	; USED TO DIFF. BET READS AND WRTS
   323                                  
   324                                  ;struc A_RETRYCOUNT  ; (IOCTL.INC, MSDOS 6.0, 1991)
   325                                  ;.RC_COUNT:	resw 	1
   326                                  ;endstruc
   327                                  
   328                                  ; 29/05/2019 - Retro DOS v4.0 (DEVSYM.INC, MSDOS 6.0, 1991)
   329                                  
   330                                  ;	THE DEVICE TABLE LIST HAS THE FORM:
   331                                  
   332                                  ;struc SYSDEV
   333                                  ; .NEXT:  resd 1	;POINTER TO NEXT DEVICE HEADER
   334                                  ; .ATT:	  resw 1	;ATTRIBUTES OF THE DEVICE
   335                                  ; .STRAT: resw 1	;STRATEGY ENTRY POINT
   336                                  ; .INT:	  resw 1	;INTERRUPT ENTRY POINT
   337                                  ; .NAME:  resb 8	;NAME OF DEVICE (ONLY FIRST BYTE USED FOR BLOCK)
   338                                  ; .size:
   339                                  ;endstruc
   340                                  
   341                                  ; 27/03/2018 - DEVSYM.INC - MSDOS 3.3 - 24/07/1987
   342                                  
   343                                  ;
   344                                  ; ATTRIBUTE BIT MASKS
   345                                  ;
   346                                  ; CHARACTER DEVICES:
   347                                  ;
   348                                  ; BIT 15 -> MUST BE 1
   349                                  ;     14 -> 1 IF THE DEVICE UNDERSTANDS IOCTL CONTROL STRINGS
   350                                  ;     13 -> 1 IF THE DEVICE SUPPORTS OUTPUT-UNTIL-BUSY
   351                                  ;     12 -> UNUSED
   352                                  ;     11 -> 1 IF THE DEVICE UNDERSTANDS OPEN/CLOSE
   353                                  ;     10 -> MUST BE 0
   354                                  ;      9 -> MUST BE 0
   355                                  ;      8 -> UNUSED
   356                                  ;      7 -> UNUSED
   357                                  ;      6 -> UNUSED
   358                                  ;      5 -> UNUSED
   359                                  ;      4 -> 1 IF DEVICE IS RECIPIENT OF INT 29H
   360                                  ;      3 -> 1 IF DEVICE IS CLOCK DEVICE
   361                                  ;      2 -> 1 IF DEVICE IS NULL DEVICE
   362                                  ;      1 -> 1 IF DEVICE IS CONSOLE OUTPUT
   363                                  ;      0 -> 1 IF DEVICE IS CONSOLE INPUT
   364                                  ;
   365                                  ; BLOCK DEVICES:
   366                                  ;
   367                                  ; BIT 15 -> MUST BE 0
   368                                  ;     14 -> 1 IF THE DEVICE UNDERSTANDS IOCTL CONTROL STRINGS
   369                                  ;     13 -> 1 IF THE DEVICE DETERMINES MEDIA BY EXAMINING THE FAT ID BYTE.
   370                                  ;	    THIS REQUIRES THE FIRST SECTOR OF THE FAT TO *ALWAYS* RESIDE IN
   371                                  ;	    THE SAME PLACE.
   372                                  ;     12 -> UNUSED
   373                                  ;     11 -> 1 IF THE DEVICE UNDERSTANDS OPEN/CLOSE/REMOVABLE MEDIA
   374                                  ;     10 -> MUST BE 0
   375                                  ;      9 -> MUST BE 0
   376                                  ;      8 -> UNUSED
   377                                  ;      7 -> UNUSED
   378                                  ;      6 -> IF DEVICE HAS SUPPORT FOR GETMAP/SETMAP OF LOGICAL DRIVES.
   379                                  ;	    IF THE DEVICE UNDERSTANDS GENERIC IOCTL FUNCTION CALLS.
   380                                  ;      5 -> UNUSED
   381                                  ;      4 -> UNUSED
   382                                  ;      3 -> UNUSED
   383                                  ;      2 -> UNUSED
   384                                  ;      1 -> UNUSED
   385                                  ;      0 -> UNUSED
   386                                  ;
   387                                  
   388                                  DEVTYP	       EQU   8000H	    ; BIT 15 - 1 IF CHAR, 0 IF BLOCK
   389                                  CHARDEV        EQU   8000H
   390                                  DEVIOCTL       EQU   4000H	    ; BIT 14 - CONTROL MODE BIT
   391                                  ISFATBYDEV     EQU   2000H	    ; BIT 13 - DEVICE USES FAT ID BYTES,
   392                                  				    ;  COMP MEDIA.
   393                                  OUTTILBUSY     EQU   2000H	    ; OUTPUT UNTIL BUSY IS ENABLED
   394                                  ISNET	       EQU   1000H	    ; BIT 12 - 1 IF A NET DEVICE, 0 IF
   395                                  				    ;  NOT.  CURRENTLY BLOCK ONLY.
   396                                  DEVOPCL        EQU   0800H	    ; BIT 11 - 1 IF THIS DEVICE HAS
   397                                  				    ;  OPEN,CLOSE AND REMOVABLE MEDIA
   398                                  				    ;  ENTRY POINTS, 0 IF NOT
   399                                  
   400                                  EXTENTBIT      EQU   0400H	    ; BIT 10 - CURRENTLY 0 ON ALL DEVS
   401                                  				    ;  THIS BIT IS RESERVED FOR FUTURE USE
   402                                  				    ;  TO EXTEND THE DEVICE HEADER BEYOND
   403                                  				    ;  ITS CURRENT FORM.
   404                                  
   405                                  ; NOTE BIT 9 IS CURRENTLY USED ON IBM SYSTEMS TO INDICATE "DRIVE IS SHARED".
   406                                  ;    SEE IOCTL FUNCTION 9. THIS USE IS NOT DOCUMENTED, IT IS USED BY SOME
   407                                  ;    OF THE UTILITIES WHICH ARE SUPPOSED TO FAIL ON SHARED DRIVES ON SERVER
   408                                  ;    MACHINES (FORMAT,CHKDSK,RECOVER,..).
   409                                  
   410                                  ; 18/03/2019 - Retro DOS v4.0
   411                                  IOQUERY	       EQU   0080H	    ;Bit 7 - Supports generic IOCtl query M017
   412                                  
   413                                  DEV320	       EQU   0040H	    ;BIT 6 - FOR BLOCK DEVICES, THIS
   414                                  				    ;DEVICE SUPPORTS SET/GET MAP OF
   415                                  				    ;LOGICAL DRIVES, AND SUPPORTS
   416                                  				    ;GENERIC IOCTL CALLS.
   417                                  				    ;FOR CHARACTER DEVICES, THIS
   418                                  				    ;DEVICE SUPPORTS GENERIC IOCTL.
   419                                  				    ;THIS IS A DOS 3.2 DEVICE DRIVER.
   420                                  ISSPEC	       EQU   0010H	    ;BIT 4 - THIS DEVICE IS SPECIAL
   421                                  ISCLOCK        EQU   0008H	    ;BIT 3 - THIS DEVICE IS THE CLOCK DEVICE.
   422                                  ISNULL	       EQU   0004H	    ;BIT 2 - THIS DEVICE IS THE NULL DEVICE.
   423                                  ISCOUT	       EQU   0002H	    ;BIT 1 - THIS DEVICE IS THE CONSOLE OUTPUT.
   424                                  ISCIN	       EQU   0001H	    ;BIT 0 - THIS DEVICE IS THE CONSOLE INPUT.
   425                                  ; 23/07/2019 - Retro DOS v4.0
   426                                  EXTDRVR	       EQU   0002h ; (MSDOS 6.0, DEVSYM.INC, 1991)
   427                                  
   428                                  ; 27/05/2018 - Retro DOS v3.0 
   429                                  ; [MSDOS 3.3, MSDISK.ASM]
   430                                  
   431                                  struc INT13FRAME
   432 00000000 ????                    .oldbp:	resw 1
   433 00000002 ????                    .oldax:	resw 1
   434 00000004 ????                    .oldbx:	resw 1
   435 00000006 ????                    .oldcx:	resw 1
   436 00000008 ????                    .olddx:	resw 1
   437 0000000A ????????                .olddd:	resd 1
   438 0000000E ????                    .oldf:	resw 1
   439                                  .size:
   440                                  endstruc
   441                                  
   442                                  ; 02/06/2018 - Retro DOS v3.0
   443                                  ; [MSDOS 3.3, BIOSTRUC.INC]
   444                                  
   445                                  struc ROMBIOS_DESC		; BIOS_SYSTEM_DESCRIPTOR						  
   446 00000000 ????                    .bios_sd_leng:		resw 1				  
   447 00000002 ??                      .bios_sd_modelbyte:	resb 1					  
   448                                  .bios_sd_scnd_modelbyte: 
   449 00000003 ??                      			resb 1					  
   450 00000004 ??                      			resb 1					  
   451 00000005 ??                      .bios_sd_featurebyte1:	resb 1					  
   452 00000006 ????????                			resb 4					  
   453                                  endstruc
   454                                  
   455                                  ;-----------------------------------------------------------------------------
   456                                  ; MSDIOCTL.ASM - MSDOS 6.0 - 1991
   457                                  ;-----------------------------------------------------------------------------
   458                                  ; 11/03/2019 - Retro DOS v4.0
   459                                  
   460                                  ; 18/03/2019
   461                                  DSK_TIMEOUT_ERR 	EQU	80h	; Time out error (no media present).
   462                                  DSK_CHANGELINE_ERR	EQU	06h	; Change line error
   463                                  DSK_ILLEGAL_COMBINATION EQU	0Ch	; Return code of ah=18h function.
   464                                  MULTI_TRK_ON		EQU	10000000b ; User specified multitrack=on,
   465                                  					  ; or system turns
   466                                  ; IOCTL.INC - MSDOS 6.0 - 1991
   467                                  ; ............................................................................
   468                                  
   469                                  ;*** J.K.
   470                                  ;General Guide -
   471                                  ;Category Code:
   472                                  ; 0... .... DOS Defined
   473                                  ; 1... .... User defined
   474                                  ; .xxx xxxx Code
   475                                  
   476                                  ;Function Code:
   477                                  ; 0... .... Return error if unsupported
   478                                  ; 1... .... Ignore if unsupported
   479                                  ; .0.. .... Intercepted by DOS
   480                                  ; .1.. .... Passed to driver
   481                                  ; ..0. .... Sends data/commands to device
   482                                  ; ..1. .... Quries data/info from device
   483                                  ; ...x .... Subfunction
   484                                  ;
   485                                  ; Note that "Sends/queries" data bit is intended only to regularize the
   486                                  ; function set.  It plays no critical role; some functions may contain both
   487                                  ; command and query elements. The convention is that such commands are
   488                                  ; defined as "sends data".
   489                                  
   490                                  ;*****************************;*
   491                                  ; BLOCK DRIVERS 	      ;*
   492                                  ;*****************************;*
   493                                  
   494                                  ; IOCTL SUB-FUNCTIONS
   495                                  IOCTL_GET_DEVICE_INFO	EQU	0
   496                                  IOCTL_SET_DEVICE_INFO	EQU	1
   497                                  IOCTL_READ_HANDLE	EQU	2
   498                                  IOCTL_WRITE_HANDLE	EQU	3
   499                                  IOCTL_READ_DRIVE	EQU	4
   500                                  IOCTL_WRITE_DRIVE	EQU	5
   501                                  IOCTL_GET_INPUT_STATUS	EQU	6
   502                                  IOCTL_GET_OUTPUT_STATUS EQU	7
   503                                  IOCTL_CHANGEABLE?	EQU	8
   504                                  IOCTL_DeviceLocOrRem?	EQU	9
   505                                  IOCTL_HandleLocOrRem?	EQU	0Ah   ;10
   506                                  IOCTL_SHARING_RETRY	EQU	0Bh   ;11
   507                                  GENERIC_IOCTL_HANDLE	EQU	0Ch   ;12
   508                                  GENERIC_IOCTL		EQU	0Dh   ;13
   509                                  IOCTL_GET_DRIVE_MAP 	EQU	0Eh   ;14
   510                                  IOCTL_SET_DRIVE_MAP	EQU	0Fh   ;15
   511                                  IOCTL_QUERY_HANDLE	EQU	10h   ;16
   512                                  IOCTL_QUERY_BLOCK	EQU	11h   ;17
   513                                  
   514                                  ; GENERIC IOCTL SUB-FUNCTIONS
   515                                  RAWIO			EQU	8
   516                                  
   517                                  ; RAWIO SUB-FUNCTIONS
   518                                  GET_DEVICE_PARAMETERS	EQU	60H
   519                                  SET_DEVICE_PARAMETERS	EQU	40H
   520                                  READ_TRACK		EQU	61H
   521                                  WRITE_TRACK		EQU	41H
   522                                  VERIFY_TRACK		EQU	62H
   523                                  FORMAT_TRACK		EQU	42H
   524                                  GET_MEDIA_ID		EQU	66h	;AN000;AN003;changed from 63h
   525                                  SET_MEDIA_ID		EQU	46h	;AN000;AN003;changed from 43h
   526                                  GET_ACCESS_FLAG 	EQU	67h	;AN002;AN003;Unpublished function.Changed from 64h
   527                                  SET_ACCESS_FLAG 	EQU	47h	;AN002;AN003;Unpublished function.Changed from 44h
   528                                  SENSE_MEDIA_TYPE	EQU	68H	;Added for 5.00
   529                                  
   530                                  
   531                                  ; SPECIAL FUNCTION FOR GET DEVICE PARAMETERS
   532                                  BUILD_DEVICE_BPB	EQU	000000001B
   533                                  
   534                                  ; SPECIAL FUNCTIONS FOR SET DEVICE PARAMETERS
   535                                  INSTALL_FAKE_BPB	EQU	000000001B
   536                                  ONLY_SET_TRACKLAYOUT	EQU	000000010B
   537                                  TRACKLAYOUT_IS_GOOD	EQU	000000100B
   538                                  
   539                                  ; SPECIAL FUNCTION FOR FORMAT TRACK
   540                                  STATUS_FOR_FORMAT	EQU	000000001B
   541                                  DO_FAST_FORMAT		EQU	000000010B ;AN001;
   542                                  ; CODES RETURNED FROM FORMAT STATUS CALL
   543                                  FORMAT_NO_ROM_SUPPORT	EQU	000000001B
   544                                  FORMAT_COMB_NOT_SUPPORTED EQU	000000010B
   545                                  
   546                                  ; DEVICETYPE VALUES
   547                                  MAX_SECTORS_IN_TRACK	EQU	63	; MAXIMUM SECTORS ON A DISK.(Was 40 in DOS 3.2)
   548                                  DEV_5INCH		EQU	0
   549                                  DEV_5INCH96TPI		EQU	1
   550                                  DEV_3INCH720KB		EQU	2
   551                                  DEV_8INCHSS		EQU	3
   552                                  DEV_8INCHDS		EQU	4
   553                                  DEV_HARDDISK		EQU	5
   554                                  DEV_OTHER		EQU	7
   555                                  ;DEV_3INCH1440KB	EQU	7
   556                                  DEV_3INCH2880KB		EQU	9
   557                                  ; Retro DOS v2.0 - 26/03/2018
   558                                  ;;DEV_TAPE		EQU	6
   559                                  ;;DEV_ERIMO		EQU	8
   560                                  ;DEV_3INCH2880KB	EQU	9
   561                                  DEV_3INCH1440KB		EQU	10
   562                                  
   563                                  ;MAX_DEV_TYPE		EQU	9	; MAXIMUM DEVICE TYPE THAT WE
   564                                  					; CURRENTLY SUPPORT.
   565                                  MAX_DEV_TYPE		EQU	10
   566                                  
   567                                  struc A_SECTORTABLE
   568 00000000 ????                    .ST_SECTORNUMBER:	resw	1
   569 00000002 ????                    .ST_SECTORSIZE:		resw	1
   570                                  .size:
   571                                  endstruc
   572                                  
   573                                  ; MSDOS 6.0 - BPB.INC - 1991
   574                                  ; ####
   575                                  ;**	BIOS PARAMETER BLOCK DEFINITION
   576                                  ;
   577                                  ;	The BPB contains information about the disk structure. It dates
   578                                  ;	back to the earliest FAT systems and so FAT information is
   579                                  ;	intermingled with physical driver information.
   580                                  ;
   581                                  ;	A boot sector contains a BPB for its device; for other disks
   582                                  ;	the driver creates a BPB. DOS keeps copies of some of this
   583                                  ;	information in the DPB.
   584                                  ;
   585                                  ;	The BDS structure contains a BPB within it.
   586                                  ;
   587                                  
   588                                  struc A_BPB
   589 00000000 ????                    .BPB_BYTESPERSECTOR:	resw	1
   590 00000002 ??                      .BPB_SECTORSPERCLUSTER:	resb	1
   591 00000003 ????                    .BPB_RESERVEDSECTORS:	resw	1
   592 00000005 ??                      .BPB_NUMBEROFFATS:	resb	1
   593 00000006 ????                    .BPB_ROOTENTRIES: 	resw	1
   594 00000008 ????                    .BPB_TOTALSECTORS:	resw	1
   595 0000000A ??                      .BPB_MEDIADESCRIPTOR:	resb	1
   596 0000000B ????                    .BPB_SECTORSPERFAT:	resw	1
   597 0000000D ????                    .BPB_SECTORSPERTRACK:	resw	1
   598 0000000F ????                    .BPB_HEADS:		resw	1
   599 00000011 ????                    .BPB_HIDDENSECTORS:	resw	1
   600 00000013 ????                    			resw	1
   601 00000015 ????                    .BPB_BIGTOTALSECTORS:	resw	1
   602 00000017 ????                    			resw	1
   603 00000019 ????????????            			resb	6	; NOTE:  many times these
   604                                  ;					; 	 6 bytes are omitted
   605                                  ;					;	 when BPB manipulations
   606                                  ;					;	 are performed!
   607                                  .size:
   608                                  endstruc
   609                                  ; ####
   610                                  
   611                                  struc A_DEVICEPARAMETERS
   612 00000000 ??                      .DP_SPECIALFUNCTIONS:	resb	1
   613 00000001 ??                      .DP_DEVICETYPE:		resb	1
   614 00000002 ????                    .DP_DEVICEATTRIBUTES:	resw	1
   615 00000004 ????                    .DP_CYLINDERS:		resw	1
   616 00000006 ??                      .DP_MEDIATYPE:		resb	1
   617 00000007 <res 1Fh>               .DP_BPB:		resb	A_BPB.size
   618 00000026 ????                    .DP_TRACKTABLEENTRIES:	resw	1
   619 00000028 <res FCh>               .DP_SECTORTABLE:	resb	MAX_SECTORS_IN_TRACK * A_SECTORTABLE.size
   620                                  endstruc
   621                                  
   622                                  struc A_TRACKREADWRITEPACKET
   623 00000000 ??                      .TRWP_SPECIALFUNCTIONS:	resb	1
   624 00000001 ????                    .TRWP_HEAD:		resw	1
   625 00000003 ????                    .TRWP_CYLINDER:		resw	1
   626 00000005 ????                    .TRWP_FIRSTSECTOR:	resw	1
   627 00000007 ????                    .TRWP_SECTORSTOREADWRITE: resw	1
   628 00000009 ????????                .TRWP_TRANSFERADDRESS:	resd	1
   629                                  endstruc
   630                                  
   631                                  ;AN001; - FP_TRACKCOUNT is only meaningful when FP_SPECIALFUNCTIONS bit 1 = 1.
   632                                  struc A_FORMATPACKET
   633 00000000 ??                      .FP_SPECIALFUNCTIONS:	resb	1  ; db ?
   634 00000001 ????                    .FP_HEAD: 		resw	1  ; dw ? 
   635 00000003 ????                    .FP_CYLINDER:		resw	1  ; dw ?
   636 00000005 ????                    .FP_TRACKCOUNT:		resw	1  ; dw 1 ; !
   637                                  endstruc
   638                                  
   639                                  struc A_VERIFYPACKET
   640 00000000 ??                      .VP_SPECIALFUNCTIONS:	resb	1
   641 00000001 ????                    .VP_HEAD: 		resw	1
   642 00000003 ????                    .VP_CYLINDER:		resw	1
   643                                  endstruc
   644                                  
   645                                  struc A_MEDIA_ID_INFO
   646 00000000 ????                    .MI_LEVEL:		resw	1  ; dw 0 ; !		;J.K. 87 Info. level
   647 00000002 ????????                .MI_SERIAL:		resd	1  ; dd ?		;J.K. 87 Serial #
   648 00000006 <res Bh>                .MI_LABEL:		resb	11 ; db 11 DUP (' ') ;!	;J.K. 87 volume label
   649 00000011 ????????????????        .MI_SYSTEM:		resb 	8  ; db 8 DUP (' ')  ;!	;J.K. 87 File system type
   650                                  endstruc
   651                                  
   652                                  struc A_DISKACCESS_CONTROL	   ;AN002; Unpublished function. Only for Hard file.
   653 00000000 ??                      .DAC_SPECIALFUNCTIONS:	resb 	1  ; db 0 ; ! ;AN002; Always 0
   654 00000001 ??                      .DAC_ACCESS_FLAG: 	resb 	1  ; db 0 ; ! 
   655                                  				   ; Non Zero - allow disk I/O to unformatted hard file
   656                                  endstruc			   ; 0 - Disallow disk I/O to unformatted hard file
   657                                  
   658                                  
   659                                  struc A_MEDIA_SENSE			; Media sense structure added 5.00
   660 00000000 ??                      .MS_ISDEFAULT:		resb	1	; If 1 type returned is drv default
   661 00000001 ??                      .MS_DEVICETYPE:		resb	1	; Drive type 
   662 00000002 ??                      .MS_RESERVED1:		resb	1	; RESERVED
   663 00000003 ??                      .MS_RESERVED2:		resb 	1	; RESERVED 
   664                                  endstruc
   665                                  
   666                                  ;********************************;*
   667                                  ; CHARACTER DEVICES (PRINTERS)	 ;*
   668                                  ;********************************;*
   669                                  
   670                                  ;RAWIO SUB-FUNCTIONS
   671                                  GET_RETRY_COUNT 	EQU	65H
   672                                  SET_RETRY_COUNT 	EQU	45H
   673                                  
   674                                  struc A_RETRYCOUNT
   675 00000000 ????                    .RC_COUNT:		resw 1
   676                                  endstruc
   677                                  
   678                                  ;********************************;*		;J.K. 4/29/86
   679                                  ; CHARACTER DEVICES (SCREEN)	 ;*
   680                                  ;********************************;*		;J.K. 4/29/86
   681                                  ;
   682                                  ;SC_MODE_INFO	 struc
   683                                  ;SC_INFO_LENGTH 	 DW	 9
   684                                  ;SC_MODE		 DB	 0
   685                                  ;SC_COLORS		 DW	 0
   686                                  ;SC_WIDTH		 DW	 0
   687                                  ;SC_LENGTH		 DW	 0
   688                                  ;SC_MODE_INFO	 ends
   689                                  ;
   690                                  ;SC_INFO_PACKET_LENGTH	 EQU	 9		 ;LENGTH OF THE INFO PACKET.
   691                                  
   692                                  ;SUBFUNCTIONS FOR CON$GENIOCTL
   693                                  ;GET_SC_MODE		 EQU	 60h
   694                                  ;SET_SC_MODE		 EQU	 40h
   695                                  ;The following subfunctions are reserved for installable CODE PAGE switch
   696                                  ;console devices. - J.K. 4/29/86
   697                                  ;Get_active_codepage	 equ	 6Ah
   698                                  ;Invoke_active_codepage  equ	 4Ah
   699                                  ;Start_designate_codepage equ	 4Ch
   700                                  ;End_designate_codepage  equ	 4Dh
   701                                  ;Get_list_of_designated_codepage equ 6Bh
   702                                  ;J.K. 4/29/86 *** End of Con$genioctl equates & structures
   703                                  
   704                                  ;-----------------------------------------------------------------------------
   705                                  ; MULT.INC - MSDOS 6.0 - 1991
   706                                  ;-----------------------------------------------------------------------------
   707                                  ; 18/03/2019
   708                                  
   709                                  ; The current set of defined multiplex channels is (* means documented):
   710                                  ;
   711                                  ;   Channel(h)  Issuer          Receiver    Function
   712                                  ;      00       server          PSPRINT     print job control
   713                                  ;     *01       print/apps      PRINT       Queueing of files
   714                                  ;      02       BIOS            REDIR       signal open/close of printers
   715                                  ;
   716                                  ;      05       command         REDIR       obtain text of net int 24 message
   717                                  ;     *06       server/assign   ASSIGN      Install check
   718                                  ;
   719                                  ;      08       external driver IBMBIO      interface to internal routines
   720                                  ;
   721                                  ;      10       sharer/server   Sharer      install check
   722                                  ;      11       DOS/server      Redir       install check/redirection funcs
   723                                  ;      12       sharer/redir    DOS         dos functions and structure maint
   724                                  ;      13       MSNET           MSNET       movement of NCBs
   725                                  ;      13       external driver IBMBIO      Reset_Int_13, allows installation
   726                                  ;                                           of alternative INT_13 drivers after
   727                                  ;                                           boot_up
   728                                  ;      14 (IBM) DOS             NLSFUNC     down load NLS country info,DOS 3.3
   729                                  ;      14 (MS)  APPS            POPUP       MSDOS 4 popup screen functions
   730                                  ;      15       APPS            MSCDEX      CD-ROM extensions interface
   731                                  ;      16       WIN386          WIN386      Windows communications
   732                                  ;      17       Clipboard       WINDOWS     Clipboard interface
   733                                  ;     *18       Applications    MS-Manger   Toggle interface to manager
   734                                  ;      19       Shell
   735                                  ;      1A       Ansi.sys
   736                                  ;      1B       Fastopen,Vdisk   IBMBIO     EMS INT 67H stub handler
   737                                  ;
   738                                  ;      40h      OS/2
   739                                  ;      41h      Lanman
   740                                  ;      42h      Lanman
   741                                  ;      43h      Himem
   742                                  ;                               AL = 20h    reserved for Mach 20 Himem support
   743                                  ;                               AL = 30h    reserved for Himem external A20 code
   744                                  ;      44h      Dosextender
   745                                  ;      45H      Windows profiler
   746                                  ;      46h      Windows/286 DOS extender
   747                                  ;      47h      Basic Compiler Vn. 7.0
   748                                  ;      48h      Doskey
   749                                  ;      49h      DOS 5.x install 
   750                                  ;      4Ah      Multi Purpose
   751                                  ;                multMULTSWPDSK         0 - Swap Disk in drive A (BIOS)
   752                                  ;                multMULTGETHMAPTR      1 - Get available HMA & ptr
   753                                  ;                multMULTALLOCHMA       2 - Allocate HMA (bx == no of bytes)
   754                                  ;                multMULTTASKSHELL      5 - Shell/switcher API
   755                                  ;                multMULTRPLTOM         6 - Top Of Memory for RPL support
   756                                  ;
   757                                  ;                multSmartdrv           10h
   758                                  ;                multMagicdrv           11h
   759                                  ;      4Bh      Task Switcher API
   760                                  ;
   761                                  ;      4Ch      APPS            APM             Advanced power management
   762                                  ;      4Dh      Kana Kanji Converter, MSKK
   763                                  ;
   764                                  ;      51h      ODI real mode support driver (for Chicago)
   765                                  ;
   766                                  ;      53h      POWER.EXE - used for broadcasting APM events    ; M036
   767                                  ;      54h      POWER.EXE - used for POWER API                  ; M036
   768                                  ;
   769                                  ;      55h      COMMAND.COM
   770                                  ;                multCOMFIRST           0 - API to determine whether 1st
   771                                  ;                                           instance of command.com
   772                                  ;                multCOMFIRSTROM        1 - API to determine whether 1st
   773                                  ;                                           instance of ROM COMMAND
   774                                  ;      56h      Sewell Development
   775                                  ;               INTERLNK
   776                                  ;
   777                                  ;      57h      Iomega Corp.
   778                                  ;
   779                                  ;      AB       Unspecified IBM use
   780                                  ;      AC       Graphics
   781                                  ;      AD       NLS (toronto)
   782                                  ;      AE
   783                                  ;      AF       Mode
   784                                  ;      B0       GRAFTABL        GRAFTABL
   785                                  ;
   786                                  ;      D7       Banyan VINES
   787                                  
   788                                  multMULT	  equ	4Ah
   789                                  
   790                                  multMULTSWPDSK	  equ	0	; Swap Disk in drive A (BIOS)
   791                                  multMULTGETHMAPTR equ	1	; Get available HMA & ptr
   792                                  multMULTALLOCHMA  equ	2	; Allocate HMA (bx == no of bytes)
   793                                  multMULTTASKSHELL equ	5	; Shell/switcher API
   794                                  multMULTRPLTOM	  equ	6	; Top Of Memory for RPL support
   795                                  
   796                                  ;-----------------------------------------------------------------------------
   797                                  ; WIN386.INC - MSDOS 6.0 - 1991
   798                                  ;-----------------------------------------------------------------------------
   799                                  ; 18/03/2019
   800                                  
   801                                  ; WIN386.INC
   802                                  ;
   803                                  ;  Symbols and structures relating to WIN386 support.
   804                                  ;
   805                                  ;  Used by files in both the DOS and the BIOS.
   806                                  ;
   807                                  ;  Created: 7-13-89 by MRW
   808                                  ;
   809                                  
   810                                  ; WIN386 broadcast int 2fh multiplex number and subfunction numbers
   811                                  
   812                                  MultWin386		equ     16h	; Int 2f multiplex number
   813                                  
   814                                  Win386_Init		equ	05h	; Win386 initialization
   815                                  Win386_Exit		equ	06h	; Win386 exit
   816                                  Win386_Devcall		equ	07h	; Win386 device call out
   817                                  Win386_InitDone		equ	08h	; Win386 initialization is complete
   818                                  
   819                                  ; ============================================================================
   820                                  
   821                                  ;bpbx		struc ;	(sizeof=0x19)	
   822                                  ;
   823                                  ;bytespersec	dw ?			; base 10
   824                                  ;secperclust	db ?			; base 10
   825                                  ;rsvdsecs	dw ?			; base 10
   826                                  ;numfats	db ?			; base 10
   827                                  ;rootdirents	dw ?			; base 10
   828                                  ;totalsize16	dw ?			; base 10
   829                                  ;mediaid	db ?
   830                                  ;fatsecs	dw ?			; base 10
   831                                  ;secpertrack	dw ?			; base 10
   832                                  ;heads		dw ?			; base 10
   833                                  ;hiddensecs_lw	dw ?			; base 10
   834                                  ;hiddensecs_hw	dw ?			; base 10
   835                                  ;totalsecs_lw	dw ?			; base 10
   836                                  ;totalsecs_hw	dw ?			; base 10
   837                                  ;
   838                                  ;bpbx		ends
   839                                  
   840                                  ;-----------------------------------------------------------------------------
   841                                  ;
   842                                  ; +-------------------------------------------------------------------------+
   843                                  ; |   This file	has been generated by The Interactive Disassembler (IDA)    |
   844                                  ; |	      Copyright	(c) 2013 Hex-Rays, <support@hex-rays.com>	    |
   845                                  ; |			 Licensed to: Freeware version			    |
   846                                  ; +-------------------------------------------------------------------------+
   847                                  ;
   848                                  ; Input	MD5   :	B2FA03653E5C5D545327EE28B8A24356
   849                                  ; Input	CRC32 :	20FC79BF
   850                                  
   851                                  ;-----------------------------------------------------------------------------
   852                                  
   853                                  ;		.386
   854                                  ;		.model flat
   855                                  
   856                                  ; ============================================================================
   857                                  
   858                                  ; 10/12/2022
   859                                  ; 09/12/2022
   860                                  ; 21/10/2022
   861                                  ; 19/10/2022
   862                                  ; 17/10/2022, 18/10/2022
   863                                  ; 15/10/2022, 16/10/2022
   864                                  ; 03/10/2022
   865                                  ; 02/10/2022
   866                                  ; 01/10/2022 - Erdogan Tan
   867                                  
   868                                  ; [[ Most of comments here are from the original MSDOS 6.0 source code ]]
   869                                  
   870                                  ;-----------------------------------------------------------------------------
   871                                  ; Start of (MSDOS 5.0) IO.SYS (IBMBIO.COM)
   872                                  ;-----------------------------------------------------------------------------
   873                                  
   874                                  		; [ORG 0]		; segment 0x0070h
   875                                  
   876                                  ;=============================================================================
   877                                  ; DOS BIOS (IO.SYS) DATA SEGMENT 
   878                                  ;=============================================================================
   879                                  ; 09/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
   880                                  
   881                                  section .BIOSDATA vstart=0
   882                                  
   883                                  ;--- DOSBIOS data segment ----------------------------------------------------
   884                                  ;-----------------------------------------------------------------------------
   885                                  
   886                                  ;Bios_Data segment
   887                                  
   888                                  BData_start:				
   889 00000000 E96017                  hdrv_pat:	jmp	init		; MSBIO1.ASM, MSSBDATA.INC
   890                                  ; ----------------------------------------------------------------------------
   891                                  
   892 00000003 0000                    DosDataSg:	dw 0
   893                                  
   894                                  ; DOS's int 2f handler will exit via a jump through here.
   895                                  ; This is how the BIOS hooks int2f
   896                                  			
   897 00000005 EA                      bios_i2f:	db 0EAh			; far jump to int_2f (segment may not be at 70h)
   898 00000006 [9108]                  off_706:	dw int_2f
   899 00000008 7000                    word_708:	dw 70h			; KERNEL_SEGMENT
   900                                  
   901 0000000A 0000                    romstartaddr:	dw 0			; The start address for the romfind routines
   902                                  					; This is to maintain binary compatibility
   903                                  					; with DISK based DOS 5.0
   904                                  
   905                                  ; This is a byte used for special key handling in the resident
   906                                  ; console device driver. It must be here so that it can be included
   907                                  ; in the WIN386 instance table (in INC\LMSTUB.ASM).
   908                                  
   909 0000000C 00                      altah:		db 0			; special key handling
   910                                  			
   911 0000000D 00                      inHMA:		db 0			; flag indicates we're running from HMA
   912 0000000E 00000000                xms:		dd 0			; entry point to xms if above is true
   913                                  
   914                                  ; PTRSAV - pointer save
   915                                  ;
   916                                  ; This variable holds the pointer to the Request Header passed by a program
   917                                  ; wishing to use a device driver. When the strategy routine is called it 
   918                                  ; puts the address of the Request header in this variable and returns.
   919                                  		
   920 00000012 00000000                ptrsav:		dd 0			
   921                                  auxbuf:		;db 4 dup(0)		; set of 1 byte buffers for com 1,2,3, and 4
   922 00000016 00000000                		db 0, 0, 0, 0 ; 19/10/2022
   923 0000001A 0000                    zeroseg:	dw 0			; easy way to load segment registers with zero			
   924 0000001C 0000                    i13_ds:		dw 0			; ds register for int13 call through	
   925 0000001E 0000                    prevoper:	dw 0			; holds int 13 request (i.e. register ax).			
   926 00000020 00                      number_of_sec:	db 0			; holds number of secs. to read on an ecc error
   927 00000021 0000                    auxnum:		dw 0			; which aux device was requested			
   928                                  
   929                                  ;-----------------------------------------------------------------------------
   930                                  
   931                                  res_dev_list:
   932                                  
   933                                  ; Device Header for the CON Device Driver
   934                                  
   935                                  CONHeader:				; HEADER FOR DEVICE "CON"
   936 00000023 [3500]                  		dw auxdev2
   937 00000025 7000                    		dw 70h	
   938 00000027 1380                    word_727:	dw 8013h
   939 00000029 [F506]                  		dw strategy
   940 0000002B [0007]                  		dw con_entry
   941 0000002D 434F4E2020202020        aCon:		db 'CON     '           
   942 00000035 [4700]                  auxdev2:	dw prndev2		; HEADER FOR DEVICE "AUX"	
   943 00000037 7000                    		dw 70h
   944 00000039 0080                    		dw 8000h
   945 0000003B [F506]                  		dw strategy
   946 0000003D [2107]                  		dw aux0_entry
   947 0000003F 4155582020202020        aAux:		db 'AUX     '
   948 00000047 [5900]                  prndev2:	dw timdev		; HEADER FOR DEVICE "PRN"
   949 00000049 7000                    		dw 70h
   950 0000004B C0A0                    word_74B:	dw 0A0C0h
   951 0000004D [F506]                  		dw strategy
   952 0000004F [0507]                  		dw prn0_entry
   953 00000051 50524E2020202020        aPrn:		db 'PRN     '		; HEADER FOR DEVICE "CLOCK$"
   954 00000059 [6B00]                  timdev:		dw dskdev	
   955 0000005B 7000                    		dw 70h
   956 0000005D 0880                    		dw 8008h
   957 0000005F [F506]                  		dw strategy
   958 00000061 [3907]                  		dw tim_entry
   959 00000063 434C4F434B242020        aClock:		db 'CLOCK$  '
   960 0000006B [7B00]                  dskdev:		dw com1dev		; HEADER FOR DISK DEVICES
   961 0000006D 7000                    		dw 70h
   962 0000006F C208                    		dw 8C2h
   963                                  		;dw offset strategy
   964                                  		;dw offset dsk_entry
   965                                  		; 19/10/2022
   966 00000071 [F506]                  		dw strategy
   967 00000073 [3E07]                  		dw dsk_entry
   968                                  
   969                                  ; maximum number of drives
   970                                  
   971 00000075 04                      drvmax:		db 4			
   972 00000076 FE                      step_drv:	db 0FEh	 ; -2		; last drive accessed		
   973 00000077 00                      fhave96:	db 0			; flag to indicate presence of
   974                                  					; 96tpi support		
   975 00000078 00                      single:		db 0			; used to detect single drive systems		
   976 00000079 00                      fhavek09:	db 0			; indicates if this is a k09 or not
   977                                  					; used by console driver.			
   978 0000007A 00                      fsetowner:	db 0			; = 1 if we are setting the owner of a
   979                                  					; drive. (examined by checksingle).
   980                                  		
   981 0000007B [8D00]                  com1dev:	dw lpt1dev		; Device Header for device "COM1"	
   982 0000007D 7000                    		dw 70h
   983 0000007F 0080                    		dw 8000h
   984 00000081 [F506]                  		dw strategy
   985 00000083 [2107]                  		dw aux0_entry
   986 00000085 434F4D3120202020        aCom1:		db 'COM1    '
   987 0000008D [9F00]                  lpt1dev:	dw lpt2dev		; Device Header for device LPT1	
   988 0000008F 7000                    		dw 70h
   989 00000091 C0A0                    		dw 0A0C0h
   990 00000093 [F506]                  		dw strategy
   991 00000095 [0C07]                  		dw prn1_entry
   992 00000097 4C50543120202020        aLpt1:		db 'LPT1    '
   993 0000009F [B800]                  lpt2dev:	dw lpt3dev		; Device Header for device LPT2	
   994 000000A1 7000                    		dw 70h
   995 000000A3 C0A0                    		dw 0A0C0h
   996 000000A5 [F506]                  		dw strategy
   997 000000A7 [1307]                  		dw prn2_entry
   998 000000A9 4C5054322020202000-     aLpt2:		db 'LPT2    ',0,0,0
   998 000000B2 0000               
   999                                  
  1000                                  ;M058; Start of changes
  1001                                  ; Orig13 needs to be at offset 0B4h for the CMS floppy driver to work.
  1002                                  ;These guys patch Orig13 with their own int 13h hook and so this offset
  1003                                  ;cannot change for them to work. Even ProComm does this.
  1004                                  
  1005 000000B4 00000000                Orig13:		dd 0			; to make Orig13 offset 0B4h		
  1006                                  
  1007 000000B8 [CA00]                  lpt3dev:	dw com2dev		; Device Header for device LPT3	
  1008 000000BA 7000                    		dw 70h
  1009 000000BC C0A0                    		dw 0A0C0h
  1010 000000BE [F506]                  		dw strategy
  1011 000000C0 [1A07]                  		dw prn3_entry
  1012 000000C2 4C50543320202020        aLpt3:		db 'LPT3    '
  1013 000000CA [DC00]                  com2dev:	dw com3dev		; Device Header for device "COM2"
  1014 000000CC 7000                    		dw 70h
  1015 000000CE 0080                    		dw 8000h
  1016 000000D0 [F506]                  		dw strategy
  1017 000000D2 [2707]                  		dw aux1_entry
  1018                                  		; 19/10/2022
  1019 000000D4 434F4D3220202020        aCom2:		db 'COM2    '
  1020                                  com3dev:	;dw offset com4dev	; Device Header for device "COM3"
  1021 000000DC [EE00]                  		dw com4dev
  1022 000000DE 7000                    		dw 70h
  1023 000000E0 0080                    		dw 8000h
  1024                                  		;dw offset strategy
  1025                                  		;dw offset aux2_entry
  1026 000000E2 [F506]                  		dw strategy
  1027 000000E4 [2D07]                  		dw aux2_entry	
  1028 000000E6 434F4D3320202020        aCom3:		db 'COM3    '
  1029 000000EE FFFF                    com4dev:	dw 0FFFFh		; Device Header for device "COM4"	
  1030 000000F0 7000                    		dw 70h
  1031 000000F2 0080                    		dw 8000h
  1032 000000F4 [F506]                  		dw strategy
  1033 000000F6 [3307]                  		dw aux3_entry
  1034 000000F8 434F4D3420202020        		db 'COM4    '
  1035                                  
  1036                                  ;-----------------------------------------------------------------------------
  1037                                  
  1038 00000100 10                      RomVectors:	db 10h			
  1039 00000101 00000000                Old10:		dd 0
  1040 00000105 13                      		db 13h
  1041 00000106 00000000                Old13:		dd 0			
  1042 0000010A 15                      		db 15h
  1043 0000010B 00000000                Old15:		dd 0			
  1044 0000010F 19                      		db 19h
  1045 00000110 00000000                Old19:		dd 0
  1046 00000114 1B                      		db 1Bh
  1047 00000115 00000000                Old1B:		dd 0
  1048                                  
  1049                                  ;EndRomVectors	equ $
  1050                                  
  1051                                  ;NUMROMVECTORS	equ ((EndRomVectors - RomVectors)/5)
  1052                                  
  1053                                  ;-----------------------------------------------------------------------------
  1054                                  
  1055 00000119 [4E03]                  start_bds:	dw bds1			; Start	of linked list of BDS's
  1056 0000011B 7000                    		dw 70h			; KERNEL_SEGMENT
  1057                                  
  1058                                  ; (MSDOS 3.3) NOTE:
  1059                                  ; Some floppy drives do not have changeline support. The result is a
  1060                                  ; large amount of inefficiency in the code. A media-check always returns
  1061                                  ; "I don`t know". This cause DOS to reread the FAT on every access and
  1062                                  ; always discard any cached data.
  1063                                  ;    We get around this inefficiency by implementing a "Logical Door Latch".
  1064                                  ; The following three items are used to do this. The logical door latch is
  1065                                  ; based on the premise that it is not physically possible to change floppy
  1066                                  ; disks in a drive in under two seconds (most people take about 10). The
  1067                                  ; logical door latch is implemented by saving the time of the last successful
  1068                                  ; disk operation (in the value TIM_DRV). When a new request is made the
  1069                                  ; current time is compared to the saved time. If less than two seconds have
  1070                                  ; passed then the value "No Change" is returned. If more than two seconds
  1071                                  ; have passed the value "Don't Know" is returned.
  1072                                  ;    There is one complecation to this algorithm. Some programs change the
  1073                                  ; value of the timer. In this unfortunate case we have an invalid timer.
  1074                                  ; This possibility is detected by counting the number of disk operations
  1075                                  ; which occur without any time passing. If this count exceeds the value of
  1076                                  ; "AccessMax" we assume the counter is invalid and always return "Don't
  1077                                  ; Know". The variable "AccessCount" is used to keep track of the number
  1078                                  ; of disk operation which occur without the time changing.
  1079                                  
  1080 0000011D 00                      accesscount:	db 0			
  1081 0000011E FF                      tim_drv:	db 0FFh			
  1082 0000011F 00                      medbyt:		db 0
  1083                                  wrtverify:	; 15/10/2022			
  1084 00000120 02                      rflag:		db 2			; 2 for	read, 3	for write
  1085 00000121 00                      verify:		db 0			; 1 if verify after write
  1086 00000122 0000                    seccnt:		dw 0			
  1087 00000124 00                      		db 0			; -- pad where hardnum was
  1088 00000125 01                      dsktnum:	db 1			; number of diskette drives			
  1089                                  
  1090                                  ; (MSDOS 3.3) NOTE:
  1091                                  ; Some of the older versions of the IBM rom-bios always assumed a seek would
  1092                                  ; have to be made to read the diskette. Consequently a large head settle
  1093                                  ; time was always used in the I/O operations. To get around this problem
  1094                                  ; we need to continually adjust the head settle time. The following
  1095                                  ; algorithm is used:
  1096                                  ;
  1097                                  ;   Get the current head settle value.
  1098                                  ;   If it is 1, then
  1099                                  ;	set slow = 15
  1100                                  ;   else
  1101                                  ;	set slow = value
  1102                                  ;   ...
  1103                                  ;   if we are seeking and writing then
  1104                                  ;	use slow
  1105                                  ;   else
  1106                                  ;	use fast
  1107                                  ;   ...
  1108                                  ;   restore current head settle value
  1109                                  
  1110 00000126 00                      motorstartup:	db 0			; value from table
  1111 00000127 00                      settlecurrent:	db 0			; value	from table
  1112 00000128 00                      settleslow:	db 0			; slow settle value
  1113 00000129 00                      nextspeed:	db 0			; value	of speed to be used
  1114 0000012A 00                      save_head_sttl:	db 0			; used by read_sector routine
  1115 0000012B 00                      save_eot:	db 0			; saved	eot from the default DPT
  1116 0000012C 09                      eot:		db 9			
  1117 0000012D 00000000                dpt:		dd 0			; pointer to Disk Parameter Table			
  1118 00000131 00                      cursec:		db 0			; current sector
  1119 00000132 00                      curhd:		db 0			; current head
  1120 00000133 0000                    curtrk:		dw 0			; current track
  1121 00000135 0000                    spsav:		dw 0			; save the stack pointer
  1122 00000137 08                      formt_eot:	db 8			; eot used for format
  1123 00000138 00                      hdnum:		db 0			; head number
  1124 00000139 0000                    trknum:		dw 0			; track	being manipulated
  1125 0000013B 50                      gap_patch:	db 50h			; format gap patched into dpt
  1126                                  
  1127                                  ;-----------------------------------------------------------------------------
  1128                                  
  1129                                  ; disk errors returned from the IBM rom
  1130                                  
  1131 0000013C CC                      errin:		db 0CCh			; write	fault error
  1132 0000013D 80                      		db 80h			; no response
  1133 0000013E 40                      		db 40h			; seek failure
  1134 0000013F 10                      		db 10h			; bad crc
  1135 00000140 08                      		db 8			; dma overrun
  1136 00000141 06                      		db 6			; media	change
  1137 00000142 04                      		db 4			; sector not found
  1138 00000143 03                      		db 3			; write	attempt	to write-protect disk
  1139 00000144 00                      lsterr:		db 0			; all other errors
  1140                                  
  1141                                  ; returned error codes corresponding to above
  1142                                  
  1143 00000145 0A                      errout:		db 10			; write	fault error
  1144 00000146 02                      		db 2			; no response
  1145 00000147 06                      		db 6			; seek failure
  1146 00000148 04                      		db 4			; bad crc
  1147 00000149 04                      		db 4			; dma overrun
  1148 0000014A 0F                      		db 15			; invalid media	change
  1149 0000014B 08                      		db 8			; sector not found
  1150 0000014C 00                      		db 0			; write	attempt	to write-protect disk
  1151 0000014D 0C                      		db 12			; general error
  1152                                  
  1153                                  ;-----------------------------------------------------------------------------
  1154                                  
  1155                                  ; 30/12/2018 - Retro DOS v4.0
  1156                                  
  1157                                  ; read in boot sector here, read done in readboot.
  1158                                  ; also read sector for dma check for hard disk.
  1159                                  ;
  1160                                  ; This buffer is word aligned because certain AMI BIOSs have a bug
  1161                                  ; in them which causes the byte after the buffer to be trashed
  1162                                  ; on floppy reads to odd-byte boundaries. Although no general effort 
  1163                                  ; is made to enforce this in the bigger picture, this one small sacrifice
  1164                                  ; makes that system more-or-less work.
  1165                                  
  1166                                  disksector:	;db 512 dup(0)		; read in boot sector here
  1167                                  		; 19/10/2022
  1168 0000014E 00<rep 200h>            		times 512 db 0
  1169                                  
  1170                                  ;-----------------------------------------------------------------------------
  1171                                  
  1172                                  ; 30/12/2018 - Retro DOS v4.0
  1173                                  ;-----------------------------------------------------------------------------
  1174                                  ; 25/05/2018 (04/04/2018)
  1175                                  ;*****************************************************************************
  1176                                  ;	"bds" contains information for each drive in the system.
  1177                                  ;	various values are patched whenever actions are performed.
  1178                                  ;	sectors/alloc. unit in bpb initially set to -1 to signify that
  1179                                  ;	the bpb has not been filled. link also set to -1 to signify end
  1180                                  ;	of list. # of cylinders in maxparms initialized to -1 to indicate
  1181                                  ;	that the parameters have not been set.
  1182                                  
  1183                                  bds1:		;dw offset bds2
  1184 0000034E [B203]                  		dw bds2	; 19/10/2022
  1185 00000350 7000                    		dw 70h			; dword	link to	next structure
  1186 00000352 00                      		db 0			; int 13h drive	number
  1187 00000353 00                      		db 0			; logical drive	letter
  1188 00000354 0002                    fdrive1:	dw 512			
  1189                                  					; physical sector size in bytes
  1190 00000356 FF                      		db 0FFh			; sectors/allocation unit
  1191 00000357 0100                    		dw 1			; reserved sectors for dos
  1192 00000359 02                      		db 2			; no of	file allocation	tables
  1193 0000035A 4000                    		dw 64			; number of root directory entries
  1194 0000035C 6801                    		dw 360			; number sectors (at 512 bytes each)
  1195 0000035E 00                      		db 0			; media	descriptor, initially 0
  1196 0000035F 0200                    		dw 2			; number of fat	sectors
  1197 00000361 0900                    		dw 9			; sector limit (sectors	per track)
  1198 00000363 0100                    		dw 1			; head limit (number of	heads -	1)
  1199 00000365 0000                    		dw 0			; hidden sector	count (low word)
  1200 00000367 0000                    		dw 0			; hidden sector	(high)
  1201 00000369 0000                    		dw 0			; number sectors (low)
  1202 0000036B 0000                    		dw 0			; number sectors (high)
  1203 0000036D 00                      		db 0			; true => large	fats
  1204 0000036E 0000                    		dw 0			; open ref. count
  1205 00000370 03                      		db 3			; form factor
  1206 00000371 2000                    		dw 20h			; various flags
  1207 00000373 2800                    		dw 40			; number of cylinders
  1208 00000375 0002                    recommended_bps: dw 512			; recommended bps for this drive
  1209 00000377 01                      		db 1
  1210 00000378 0100                    		dw 1
  1211 0000037A 02                      		db 2
  1212 0000037B E000                    		dw 224			; number of root directory entries
  1213 0000037D 6801                    		dw 360
  1214 0000037F F0                      		db 0F0h			; media	descriptor, initially 0F0h
  1215 00000380 0200                    		dw 2
  1216 00000382 0900                    		dw 9
  1217 00000384 0200                    		dw 2
  1218 00000386 0000                    		dw 0
  1219 00000388 0000                    		dw 0
  1220 0000038A 0000                    		dw 0
  1221 0000038C 0000                    		dw 0
  1222                                  		;db 6 dup(0)
  1223 0000038E 00<rep 6h>              		times 6 db 0		; 19/10/2022
  1224 00000394 FF                      		db 0FFh			; last track accessed on this drive
  1225 00000395 FFFF                    word_A95:	dw 0FFFFh		; keep these two contiguous (?)
  1226 00000397 FFFF                    		dw 0FFFFh
  1227 00000399 4E4F204E414D452020-     		db 'NO NAME    ',0      ; volume id for this disk
  1227 000003A2 202000             
  1228 000003A5 00000000                		dd 0			; current volume serial	from boot record
  1229 000003A9 464154313220202000      		db 'FAT12   ',0         ; current file system id from boot record
  1230                                  ; ----
  1231                                  
  1232 000003B2 [1604]                  bds2:		dw bds3		
  1233 000003B4 7000                    		dw 70h
  1234 000003B6 00                      		db 0
  1235 000003B7 00                      		db 0
  1236 000003B8 0002                    fdrive2:	dw 512			
  1237 000003BA FF0100024000680100-     byte_ABA:	db 0FFh, 1, 0, 2, 40h, 0, 68h, 1, 0, 2,	0, 9, 0, 1, 0
  1237 000003C3 020009000100       
  1238 000003C9 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 3, 20h, 0, 28h, 0
  1238 000003D2 00000320002800     
  1239 000003D9 000201010002E00068-     		db 0, 2, 1, 1, 0, 2, 0E0h, 0, 68h, 1, 0F0h, 2, 0, 9, 0
  1239 000003E2 01F002000900       
  1240 000003E8 020000000000000000-     		db 2, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0FFh
  1240 000003F1 00000000000000FF   
  1241 000003F9 FFFFFFFF4E4F204E41-     		db 0FFh, 0FFh, 0FFh, 0FFh, 4Eh,	4Fh, 20h, 4Eh, 41h, 4Dh
  1241 00000402 4D                 
  1242 00000403 452020202000000000-     		db 45h,	20h, 20h, 20h, 20h, 0, 0, 0, 0,	0, 46h,	41h, 54h
  1242 0000040C 00464154           
  1243 00000410 313220202000            		db 31h,	32h, 20h, 20h, 20h, 0
  1244                                  ; ----
  1245                                  
  1246 00000416 [7A04]                  bds3:		dw bds4		
  1247 00000418 7000                    		dw 70h
  1248 0000041A 00                      		db 0
  1249 0000041B 00                      		db 0
  1250 0000041C 0002                    fdrive3:	dw 512			
  1251 0000041E FF0100024000680100-     		db 0FFh, 1, 0, 2, 40h, 0, 68h, 1, 0, 2,	0, 9, 0, 1, 0
  1251 00000427 020009000100       
  1252 0000042D 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 3, 20h, 0, 28h, 0
  1252 00000436 00000320002800     
  1253 0000043D 000201010002E00068-     		db 0, 2, 1, 1, 0, 2, 0E0h, 0, 68h, 1, 0F0h, 2, 0, 9, 0
  1253 00000446 01F002000900       
  1254 0000044C 020000000000000000-     		db 2, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0FFh
  1254 00000455 00000000000000FF   
  1255 0000045D FFFFFFFF4E4F204E41-     		db 0FFh, 0FFh, 0FFh, 0FFh, 4Eh,	4Fh, 20h, 4Eh, 41h, 4Dh
  1255 00000466 4D                 
  1256 00000467 452020202000000000-     		db 45h,	20h, 20h, 20h, 20h, 0, 0, 0, 0,	0, 46h,	41h, 54h
  1256 00000470 00464154           
  1257 00000474 313220202000            		db 31h,	32h, 20h, 20h, 20h, 0
  1258                                  ; ----
  1259                                  
  1260 0000047A FFFF                    bds4:		dw 0FFFFh		
  1261 0000047C 7000                    		dw 70h
  1262 0000047E 00                      		db 0
  1263 0000047F 00                      		db 0
  1264 00000480 0002                    fdrive4:	dw 512			
  1265 00000482 FF0100024000680100-     byte_B82:	db 0FFh, 1, 0, 2, 40h, 0, 68h, 1, 0, 2,	0, 9, 0, 1, 0
  1265 0000048B 020009000100       
  1266 00000491 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 3, 20h, 0, 28h, 0
  1266 0000049A 00000320002800     
  1267 000004A1 000201010002E00068-     		db 0, 2, 1, 1, 0, 2, 0E0h, 0, 68h, 1, 0F0h, 2, 0, 9, 0
  1267 000004AA 01F002000900       
  1268 000004B0 020000000000000000-     		db 2, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0FFh
  1268 000004B9 00000000000000FF   
  1269 000004C1 FFFFFFFF4E4F204E41-     		db 0FFh, 0FFh, 0FFh, 0FFh, 4Eh,	4Fh, 20h, 4Eh, 41h, 4Dh
  1269 000004CA 4D                 
  1270 000004CB 452020202000000000-     		db 45h,	20h, 20h, 20h, 20h, 0, 0, 0, 0,	0, 46h,	41h, 54h
  1270 000004D4 00464154           
  1271 000004D8 313220202000            		db 31h,	32h, 20h, 20h, 20h, 0
  1272                                  
  1273                                  ;-----------------------------------------------------------------------------
  1274                                  
  1275 000004DE 03                      sm92:		db 3			; .spf			
  1276 000004DF 09                      		db 9			; .spt
  1277 000004E0 70                      		db 112	; 70h		; .cdire
  1278 000004E1 A005                    		dw 1440	; 2*9*80	; .csec
  1279 000004E3 02                      		db 2			; .spau
  1280 000004E4 02                      		db 2			; .chead
  1281                                  
  1282 000004E5 00                      keyrd_func:	db 0			
  1283 000004E6 01                      keysts_func:	db 1			
  1284 000004E7 00                      printdev:	db 0			; printer device index
  1285                                  
  1286                                  wait_count:	;dw 4 dup(50h)		; retry	counts for printers
  1287 000004E8 5000<rep 4h>            		times 4 dw 50h		; 19/10/2022
  1288                                  
  1289 000004F0 0000                    daycnt:		dw 0			
  1290 000004F2 00                      t_switch:	db 0			; flag for updating daycnt
  1291 000004F3 00                      havecmosclock:	db 0			
  1292 000004F4 13                      base_century:	db 19			
  1293 000004F5 50                      base_year:	db 80			
  1294 000004F6 1F1C1F1E1F1E1F1F1E-     month_tab:	db 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31 
  1294 000004FF 1F1E1F             
  1295 00000502 [FD14]                  bintobcd:	dw bin_to_bcd		; points to bin_to_bcd proc in msinit
  1296 00000504 7000                    		dw 70h ; 17/10/2022	
  1297 00000506 [2C14]                  daycnttoday:	dw daycnt_to_day	; points to daycnt_to_day in msinit
  1298 00000508 7000                    		dw 70h ; 17/10/2022
  1299 0000050A 00                      set_id_flag:	db 0			; flag for getbp routine
  1300 0000050B 464154313220202000      fat_12_id:	db 'FAT12   ',0         
  1301 00000514 464154313620202000      fat_16_id:	db 'FAT16   ',0         
  1302 0000051D 4E4F204E414D452020-     vol_no_name:	db 'NO NAME    ',0      
  1302 00000526 202000             
  1303                                  
  1304 00000529 0000                    temp_h:		dw 0			; temporary for	32 bit calculation
  1305 0000052B 0000                    start_sec_h:	dw 0			; starting sector number high word
  1306 0000052D 0000                    saved_word:	dw 0			; tempory saving place for a word
  1307 0000052F 0000                    multrk_flag:	dw 0			
  1308 00000531 00                      ec35flag:	db 0			; flags	for 3.5	inch disk drives
  1309 00000532 0000                    vretry_cnt:	dw 0			
  1310 00000534 0000                    soft_ecc_cnt:	dw 0			
  1311 00000536 00                      multitrk_format_flag: db 0		; multi	track format request flag
  1312 00000537 0000                    xfer_seg:	dw 0			; temp for transfer segment
  1313                                  
  1314                                  ; variables for msdioctl.asm module
  1315                                  
  1316                                  ; tracktable contains a 4-tuples (c,h,r,n) for each sector in a track
  1317                                  ; c = cylinder number,h = head number,r = sector id,n = bytes per sector
  1318                                  ;	n	bytes per sector
  1319                                  ;      ---	----------------
  1320                                  ;	0	      128
  1321                                  ;	1	      256
  1322                                  ;	2	      512
  1323                                  ;	3	     1024
  1324                                  
  1325                                  ;max_sectors_curr_sup equ 63		; current maximum sec/trk that
  1326                                  ;					; we support (was 40 in dos 3.2)
  1327                                  
  1328 00000539 2400                    sectorspertrack: dw 36			
  1329 0000053B 00000102                tracktable:	db 0, 0, 1, 2		
  1330 0000053F 00000202                		db 0, 0, 2, 2
  1331 00000543 00000302                		db 0, 0, 3, 2
  1332 00000547 00000402                		db 0, 0, 4, 2
  1333 0000054B 00000502                		db 0, 0, 5, 2
  1334 0000054F 00000602                		db 0, 0, 6, 2
  1335 00000553 00000702                		db 0, 0, 7, 2
  1336 00000557 00000802                		db 0, 0, 8, 2
  1337 0000055B 00000902                		db 0, 0, 9, 2
  1338 0000055F 00000A02                		db 0, 0, 10, 2
  1339 00000563 00000B02                		db 0, 0, 11, 2
  1340 00000567 00000C02                		db 0, 0, 12, 2
  1341 0000056B 00000D02                		db 0, 0, 13, 2
  1342 0000056F 00000E02                		db 0, 0, 14, 2
  1343 00000573 00000F02                		db 0, 0, 15, 2
  1344 00000577 00001002                		db 0, 0, 16, 2
  1345 0000057B 00001102                		db 0, 0, 17, 2
  1346 0000057F 00001202                		db 0, 0, 18, 2
  1347 00000583 00001302                		db 0, 0, 19, 2
  1348 00000587 00001402                		db 0, 0, 20, 2
  1349 0000058B 00001502                		db 0, 0, 21, 2
  1350 0000058F 00001602                		db 0, 0, 22, 2
  1351 00000593 00001702                		db 0, 0, 23, 2
  1352 00000597 00001802                		db 0, 0, 24, 2
  1353 0000059B 00001902                		db 0, 0, 25, 2
  1354 0000059F 00001A02                		db 0, 0, 26, 2
  1355 000005A3 00001B02                		db 0, 0, 27, 2
  1356 000005A7 00001C02                		db 0, 0, 28, 2
  1357 000005AB 00001D02                		db 0, 0, 29, 2
  1358 000005AF 00001E02                		db 0, 0, 30, 2
  1359 000005B3 00001F02                		db 0, 0, 31, 2
  1360 000005B7 00002002                		db 0, 0, 32, 2
  1361 000005BB 00002102                		db 0, 0, 33, 2
  1362 000005BF 00002202                		db 0, 0, 34, 2
  1363 000005C3 00002302                		db 0, 0, 35, 2
  1364 000005C7 00002402                		db 0, 0, 36, 2
  1365 000005CB 00<rep 6Ch>             		times 108 db 0		; 19/10/2022
  1366                                  		;db 108 dup(0)		; 4*max_sectors_curr_sup - ($ -	tracktable) dup	(0)
  1367                                  					; times	((4*63)	- 144) db 0
  1368                                  
  1369                                  ;-----------------------------------------------------------------------------
  1370                                  
  1371                                  ; this is a real ugly place to put this
  1372                                  ; it should really go in the bds
  1373                                  
  1374 00000637 00                      mediatype:	db 0			
  1375 00000638 00                      media_set_for_format: db 0		; 1 if we have done an int 13 set media
  1376                                  					; type for format call
  1377 00000639 00                      had_format_error: db 0			; 1 if the previous format operation
  1378                                  					; failed.
  1379                                  
  1380                                  ; temp disk base table. it holds the the current dpt which is then replaced by
  1381                                  ; the one passed by "new roms" before we perform a format operation. the old
  1382                                  ; dpt is restored in restoreolddpt. the first entry (disk_specify_1) is -1 if
  1383                                  ; this table does not contain the previously saved dpt.
  1384                                  		
  1385 0000063A FFFFFFFF                tempdpt:	dd 0FFFFFFFFh ; -1	; temp disk base table
  1386 0000063E FF                      model_byte:	db 0FFh			; model	byte set at init time
  1387 0000063F 00                      secondary_model_byte: db 0
  1388                                  		
  1389 00000640 00                      int19sem:	db 0			; indicate that all int 19
  1390                                  					; initialization is complete
  1391                                  		
  1392                                  ;; we assume the following remain contiguous and their order doesn't change
  1393                                  ;i19_lst:
  1394                                  ;	irp	aa,<02,08,09,0a,0b,0c,0d,0e,70,72,73,74,76,77>
  1395                                  ;	public	int19old&aa
  1396                                  ;		db	aa&h	; store the number as a byte
  1397                                  ;int19old&aa	dd	-1	; original hardware int. vectors for int 19h.
  1398                                  ;	endm
  1399                                  
  1400                                  ; 21/10/2022
  1401                                  
  1402 00000641 02                      i19_lst:	db 2			
  1403                                  					; Int19old&aa
  1404 00000642 FFFFFFFF                int19old02:	dd 0FFFFFFFFh ; -1
  1405 00000646 08                      		db 8
  1406 00000647 FFFFFFFF                int19old08:	dd 0FFFFFFFFh		; original hardware int. vectors for int 19h
  1407 0000064B 09                      		db 9
  1408 0000064C FFFFFFFF                int19old09:	dd 0FFFFFFFFh
  1409 00000650 0A                      		db 0Ah
  1410 00000651 FFFFFFFF                int19old0A:	dd 0FFFFFFFFh
  1411 00000655 0B                      		db 0Bh
  1412 00000656 FFFFFFFF                int19old0B:	dd 0FFFFFFFFh
  1413 0000065A 0C                      		db 0Ch
  1414 0000065B FFFFFFFF                int19old0C:	dd 0FFFFFFFFh
  1415 0000065F 0D                      		db 0Dh
  1416 00000660 FFFFFFFF                int19old0D:	dd 0FFFFFFFFh
  1417 00000664 0E                      		db 0Eh
  1418 00000665 FFFFFFFF                int19old0E:	dd 0FFFFFFFFh
  1419 00000669 70                      		db 70h
  1420 0000066A FFFFFFFF                int19old70:	dd 0FFFFFFFFh
  1421 0000066E 72                      		db 72h
  1422 0000066F FFFFFFFF                int19old72:	dd 0FFFFFFFFh
  1423 00000673 73                      		db 73h
  1424 00000674 FFFFFFFF                int19old73:	dd 0FFFFFFFFh
  1425 00000678 74                      		db 74h
  1426 00000679 FFFFFFFF                int19old74:	dd 0FFFFFFFFh
  1427 0000067D 76                      		db 76h
  1428 0000067E FFFFFFFF                int19old76:	dd 0FFFFFFFFh
  1429 00000682 77                      		db 77h
  1430 00000683 FFFFFFFF                int19old77:	dd 0FFFFFFFFh
  1431                                  
  1432                                  ;num_i19	equ ($ - i19_lst)/5  ; 18/03/2019
  1433                                  
  1434                                  ;-----------------------------------------------------------------------------
  1435                                  
  1436 00000687 [5403]                  dskdrvs:	dw fdrive1	
  1437 00000689 [B803]                  		dw fdrive2
  1438 0000068B [1C04]                  		dw fdrive3
  1439 0000068D [8004]                  		dw fdrive4
  1440                                  
  1441                                  ;M011 -- made all hard drive stuff variable
  1442                                  		;dw 22 dup(0)		; up to	26 drives for mini disks
  1443 0000068F 0000<rep 16h>           		times 22 dw 0	; 19/10/2022
  1444                                  
  1445                                  ;-----------------------------------------------------------------------------
  1446                                  
  1447                                  ; 01/10/2022 - Retro DOS v4.0 (MSDOS v5.0 -actual-)
  1448                                  ; 30/12/2018 - Retro DOS v4.0 (MSDOS v6.21 -draft-)
  1449                                  ; 01/06/2018 - Retro DOS v3.0 (MSDOS v3.3)
  1450                                  
  1451                                  ;variables for dynamic relocatable modules
  1452                                  ;these should be stay resident.
  1453                                  
  1454 000006BB 00000000                int6c_ret_addr:	dd 0			; return address from int 6Ch
  1455                                  					; for p12 machine
  1456                                  
  1457                                  ; data structures for real-time date and time
  1458                                  			
  1459 000006BF 00000000                bin_date_time:	db 0, 0, 0, 0		; century, year, month,	day
  1460                                  
  1461 000006C3 0000                    month_table:	dw 0			; january
  1462 000006C5 1F00                    		dw 31			; february
  1463 000006C7 3B00                    		dw 59
  1464 000006C9 5A00                    		dw 90
  1465 000006CB 7800                    		dw 120
  1466 000006CD 9700                    		dw 151
  1467 000006CF B500                    		dw 181
  1468 000006D1 D400                    		dw 212
  1469 000006D3 F300                    		dw 243
  1470 000006D5 1101                    		dw 273
  1471 000006D7 3001                    		dw 304
  1472 000006D9 4E01                    		dw 334			; december
  1473                                  
  1474 000006DB 0000                    daycnt2:	dw 0			
  1475 000006DD 00                      feb29:		db 0			; february 29 in a leap	year flag
  1476                                  
  1477                                  ;-----------------------------------------------------------------------------
  1478                                  ;
  1479                                  ; 01/10/2022 - (New/Actual) Retro DOS v4.0 (will run as MSDOS 5.0)	
  1480                                  ; by Erdogan Tan (Istanbul) ! free source code !
  1481                                  ; 31/12/2018 - (old/draft) Retro DOS v4.0 (will/would run as MSDOS 6.21)
  1482                                  
  1483                                  ; ----------------------------------------------------------------------------
  1484                                  
  1485                                  ;************************************************************************
  1486                                  ;*									*
  1487                                  ;*	Entry points into Bios_Code routines. The segment values	*
  1488                                  ;*	  are plugged in by seg_reinit.					*
  1489                                  ;*									*
  1490                                  ;************************************************************************
  1491                                  
  1492                                  ; 01/10/2022 - Retro DOS v4.0 - IO.SYS (MSDOS v5.0)
  1493                                  ; BIOSCODE_SEGMENT equ 2C7h
  1494                                  ; BIOSDATA_SEGMENT equ 70h ; KERNEL_SEGMENT equ 70h
  1495                                  
  1496                                  ; 01/10/2022 - Erdogan Tan
  1497                                  ; (disassembled MSDOS 5.0 IO.SYS code here with fixed function/routine
  1498                                  ;  addresses, they will be changed to table labels later)
  1499                                  
  1500                                  ; 09/12/2022
  1501                                  %if 0
  1502                                  cdev:		dw 43h,	2C7h		; chardev_entry
  1503                                  					; at 2C7h:43h =	70h:25B3h
  1504                                  ttticks:	dw 396h, 2C7h		; time_to_ticks
  1505                                  					; at 2C7h:396h = 70h:2906h
  1506                                  bcode_i2f:	dw 1302h, 2C7h		; i2f_handler
  1507                                  					; at 2C7h:1302h	= 70h:3872h
  1508                                  i13x:		dw 154Bh, 2C7h		; i13z
  1509                                  					; at 2C7h:154Bh	= 70h:3ABBh
  1510                                  %endif
  1511                                  
  1512                                  ; 09/12/2022
  1513 000006DE [4300]A102              cdev:		dw chardev_entry, IOSYSCODESEG
  1514 000006E2 [8B03]A102              ttticks:	dw time_to_ticks, IOSYSCODESEG
  1515 000006E6 [B912]A102              bcode_i2f:	dw i2f_handler, IOSYSCODESEG
  1516 000006EA [F614]A102              i13x:		dw i13z, IOSYSCODESEG
  1517                                  
  1518                                  end_BC_entries:	; 15/10/2022
  1519                                  
  1520                                  ;************************************************************************
  1521                                  ;*									*
  1522                                  ;*	cbreak - break key handling - simply set altah=3 and iret	*
  1523                                  ;*									*
  1524                                  ;************************************************************************
  1525                                  
  1526                                  cbreak:					
  1527 000006EE 2EC606[0C00]03          		mov	byte [cs:altah], 3 ; break key handling
  1528                                  					; indicate break key set
  1529                                  intret:					
  1530 000006F4 CF                      		iret
  1531                                  
  1532                                  ; =============== S U B	R O U T	I N E ========================================
  1533                                  
  1534                                  
  1535                                  ;************************************************************************
  1536                                  ;*									*
  1537                                  ;*	strategy - store es:bx (device driver request packet)		*
  1538                                  ;*		     away at [ptrsav] for next driver function call	*
  1539                                  ;*									*
  1540                                  ;************************************************************************
  1541                                  
  1542                                  strategy:	; proc far		
  1543 000006F5 2E891E[1200]            		mov	[cs:ptrsav], bx ; store es:bx (device driver request packet)
  1544                                  					; away at [ptrsav] for next driver function call
  1545 000006FA 2E8C06[1400]            		mov	[cs:ptrsav+2], es
  1546 000006FF CB                      		retf
  1547                                  
  1548                                  ; ----------------------------------------------------------------------------
  1549                                  
  1550                                  ;************************************************************************
  1551                                  ;*									*
  1552                                  ;*	device driver entry points. these are the initial		*
  1553                                  ;*	  'interrupt' hooks out of the device driver chain.		*
  1554                                  ;*	  in the case of our resident drivers, they'll just		*
  1555                                  ;*	  stick a fake return address on the stack which		*
  1556                                  ;*	  points to dispatch tables and possibly some unit		*
  1557                                  ;*	  numbers, and then call through a common entry point		*
  1558                                  ;*	  which can take care of a20 switching				*
  1559                                  ;*									*
  1560                                  ;************************************************************************
  1561                                  
  1562                                  ; 01/10/2022 - Erdogan Tan
  1563                                  ; (disassembled MSDOS 5.0 IO.SYS code here with fixed table
  1564                                  ;  addresses, they will be changed to table labels later)
  1565                                  
  1566                                  ; 09/12/2022
  1567                                  
  1568                                  con_entry:				
  1569 00000700 E84000                  		call	cdev_entry
  1570                                  ; ----------------------------------------------------------------------------
  1571                                  		;dw 0E4h		; con_table
  1572 00000703 [E300]                  		dw con_table	
  1573                                  					; 2C7h:0E4h = 70h:2654h
  1574                                  ; ----------------------------------------------------------------------------
  1575                                  
  1576                                  prn0_entry:				
  1577 00000705 E83B00                  		call	cdev_entry
  1578                                  ; ----------------------------------------------------------------------------
  1579                                  		;dw 0FBh		; prn_table
  1580 00000708 [FA00]                  		dw prn_table
  1581                                  					; 2C7h:0FBh = 70h:266Bh
  1582 0000070A 0000                    		db 0, 0
  1583                                  ; ----------------------------------------------------------------------------
  1584                                  
  1585                                  prn1_entry:				
  1586 0000070C E83400                  		call	cdev_entry
  1587                                  ; ----------------------------------------------------------------------------
  1588                                  		;dw 0FBh		; prn_table
  1589 0000070F [FA00]                  		dw prn_table
  1590                                  					; 2C7h:0FBh = 70h:266Bh
  1591 00000711 0001                    		db 0, 1
  1592                                  ; ----------------------------------------------------------------------------
  1593                                  
  1594                                  prn2_entry:				
  1595 00000713 E82D00                  		call	cdev_entry
  1596                                  ; ----------------------------------------------------------------------------
  1597                                  		;dw 0FBh		; prn_table
  1598 00000716 [FA00]                  		dw prn_table
  1599                                  					; 2C7h:0FBh = 70h:266Bh
  1600 00000718 0102                    		db 1, 2
  1601                                  ; ----------------------------------------------------------------------------
  1602                                  
  1603                                  prn3_entry:				
  1604 0000071A E82600                  		call	cdev_entry
  1605                                  ; ----------------------------------------------------------------------------
  1606                                  		;dw 0FBh		; prn_table
  1607 0000071D [FA00]                  		dw prn_table
  1608                                  					; 2C7h:0FBh = 70h:266Bh
  1609 0000071F 0203                    		db 2, 3
  1610                                  ; ----------------------------------------------------------------------------
  1611                                  
  1612                                  aux0_entry:				
  1613 00000721 E81F00                  		call	cdev_entry
  1614                                  ; ----------------------------------------------------------------------------
  1615                                  		;dw 130h		; aux_table
  1616 00000724 [2F01]                  		dw aux_table
  1617                                  					; 2C7h:130h = 70h:26A0h
  1618 00000726 00                      		db 0
  1619                                  ; ----------------------------------------------------------------------------
  1620                                  
  1621                                  aux1_entry:				
  1622 00000727 E81900                  		call	cdev_entry
  1623                                  ; ----------------------------------------------------------------------------
  1624                                  		;dw 130h		; aux_table
  1625 0000072A [2F01]                  		dw aux_table
  1626                                  					; 2C7h:130h = 70h:26A0h
  1627 0000072C 01                      		db 1
  1628                                  ; ----------------------------------------------------------------------------
  1629                                  
  1630                                  aux2_entry:				
  1631 0000072D E81300                  		call	cdev_entry
  1632                                  ; ----------------------------------------------------------------------------
  1633                                  		;dw 130h		; aux_table
  1634 00000730 [2F01]                  		dw aux_table
  1635                                  					; 2C7h:130h = 70h:26A0h
  1636 00000732 02                      		db 2
  1637                                  ; ----------------------------------------------------------------------------
  1638                                  
  1639                                  aux3_entry:				
  1640 00000733 E80D00                  		call	cdev_entry
  1641                                  ; ----------------------------------------------------------------------------
  1642                                  		;dw 130h		; aux_table
  1643 00000736 [2F01]                  		dw aux_table
  1644                                  					; 2C7h:130h = 70h:26A0h
  1645 00000738 03                      		db 3
  1646                                  ; ----------------------------------------------------------------------------
  1647                                  
  1648                                  tim_entry:				
  1649 00000739 E80700                  		call	cdev_entry
  1650                                  ; ----------------------------------------------------------------------------
  1651                                  		;dw 147h		; tim_table
  1652 0000073C [4601]                  		dw tim_table
  1653                                  					; 2C7h:147h = 70h:26B7h
  1654                                  ; ----------------------------------------------------------------------------
  1655                                  
  1656                                  ; 15/10/2022
  1657                                  ;DSKTBL	equ dsktbl - DOSBIOSEG_2C7h	; dsktbl - 2C70h
  1658                                  ; 09/12/2022
  1659                                  DSKTBL equ dsktbl
  1660                                  
  1661                                  dsk_entry:				
  1662 0000073E E80200                  		call	cdev_entry
  1663                                  ; ----------------------------------------------------------------------------
  1664                                  		;dw 4A2h		; dsktbl
  1665 00000741 [9604]                  		dw DSKTBL		; 09/12/2022
  1666                                  					; 2C7h:4A2h = 70h:2A12h
  1667                                  
  1668                                  ; =============== S U B	R O U T	I N E ========================================
  1669                                  
  1670                                  ;************************************************************************
  1671                                  ;*									*
  1672                                  ;*	Ensure A20 is enabled before jumping into code in HMA.		*
  1673                                  ;*	This code assumes that if Segment of Device request packet is	*
  1674                                  ;*	DOS DATA segment then the Device request came from DOS & that	*
  1675                                  ;*	A20 is already on.						*
  1676                                  ;*									*
  1677                                  ;************************************************************************
  1678                                  
  1679                                  cdev_entry:	; proc near		
  1680 00000743 2E803E[0D00]00          		cmp	byte [cs:inHMA], 0
  1681 00000749 740D                    		jz	short ce_enter_codeseg
  1682                                  				; optimized for DOS in HMA
  1683 0000074B 50                      		push	ax
  1684 0000074C 2EA1[0300]              		mov	ax, [cs:DosDataSg]
  1685 00000750 2E3906[1400]            		cmp	[cs:ptrsav+2], ax
  1686 00000755 58                      		pop	ax
  1687 00000756 7505                    		jnz	short not_from_dos
  1688                                  				; jump is coded this way to fall thru
  1689                                  				; in 99.99% of the cases
  1690                                  ce_enter_codeseg:
  1691 00000758 2EFF2E[DE06]            		jmp	far [cs:cdev]			
  1692                                  		;jmp	dword ptr cs:cdev
  1693                                  ;-----------------------------------------------------------------------------
  1694                                  
  1695                                  not_from_dos:				
  1696 0000075D E86200                  		call	EnsureA20On
  1697 00000760 EBF6                    		jmp	short ce_enter_codeseg
  1698                                  
  1699                                  ;************************************************************************
  1700                                  ;*									*
  1701                                  ;*	outchr - this is our int 29h handler. it writes the		*
  1702                                  ;*	   character in al on the display using int 10h ttywrite	*
  1703                                  ;*									*
  1704                                  ;************************************************************************
  1705                                  
  1706                                  outchr:					
  1707 00000762 50                      		push	ax		; int 29h handler
  1708 00000763 56                      		push	si
  1709 00000764 57                      		push	di
  1710 00000765 55                      		push	bp
  1711 00000766 53                      		push	bx
  1712 00000767 B40E                    		mov	ah, 0Eh
  1713 00000769 BB0700                  		mov	bx, 7
  1714 0000076C CD10                    		int	10h		; - VIDEO - WRITE CHARACTER AND	ADVANCE	CURSOR (TTY WRITE)
  1715                                  					; AL = character, BH = display page (alpha modes)
  1716                                  					; BL = foreground color	(graphics modes)
  1717 0000076E 5B                      		pop	bx
  1718 0000076F 5D                      		pop	bp
  1719 00000770 5F                      		pop	di
  1720 00000771 5E                      		pop	si
  1721 00000772 58                      		pop	ax
  1722 00000773 CF                      		iret
  1723                                  ;-----------------------------------------------------------------------------
  1724                                  
  1725                                  ;************************************************************************
  1726                                  ;*									*
  1727                                  ;*	block13 - our int13 hooker					*
  1728                                  ;*									*
  1729                                  ;************************************************************************
  1730                                  
  1731                                  block13:				
  1732 00000774 2E803E[0D00]00          		cmp	byte [cs:inHMA], 0
  1733 0000077A 7408                    		jz	short skipa20
  1734 0000077C E85400                  		call	IsA20Off	; A20 Off?
  1735 0000077F 7503                    		jnz	short skipa20
  1736 00000781 E84300                  		call	EnableA20	; assure a20 enabled
  1737                                  
  1738                                  skipa20:				
  1739 00000784 2E8C1E[1C00]            		mov	[cs:i13_ds], ds	; save caller's ds for call-through
  1740 00000789 9C                      		pushf			; fake interrupt
  1741 0000078A 2EFF1E[EA06]            		call	far [cs:i13x]
  1742                                  		;call	dword ptr cs:i13x
  1743                                  					; call through Bios_Code entry table
  1744 0000078F 2E8E1E[1C00]            		mov	ds, [cs:i13_ds]
  1745 00000794 CA0200                  		retf	2
  1746                                  
  1747                                  ; =============== S U B	R O U T	I N E =======================================
  1748                                  
  1749                                  ; the int13 hook calls back here to call-through to the ROM
  1750                                  ; this is necessary because some people have extended their
  1751                                  ; ROM BIOSs to use ds as a parameter/result register and
  1752                                  ; our int13 hook relies heavily on ds to access Bios_Data
  1753                                  
  1754                                  call_orig13:	; proc far		
  1755 00000797 8E1E[1C00]              		mov	ds, [i13_ds]	; get caller's ds register
  1756 0000079B 9C                      		pushf			; simulate an int13
  1757 0000079C 2EFF1E[B400]            		call	far [cs:Orig13]
  1758                                  		;call	cs:Orig13
  1759 000007A1 2E8C1E[1C00]            		mov	[cs:i13_ds], ds
  1760 000007A6 0E                      		push	cs
  1761 000007A7 1F                      		pop	ds		; restore ds ->	Bios_Data before return
  1762                                  
  1763 000007A8 9C                      		pushf
  1764                                  		; 10/12/2022
  1765                                  		; ds = cs
  1766 000007A9 803E[0D00]00            		cmp	byte [inHMA], 0	; 16/10/2022
  1767                                  		;cmp	byte [cs:inHMA], 0
  1768 000007AE 7408                    		jz	short corig13_popf_retf
  1769 000007B0 E82000                  		call	IsA20Off
  1770 000007B3 7503                    		jnz	short corig13_popf_retf
  1771 000007B5 E80F00                  		call	EnableA20
  1772                                  corig13_popf_retf:			
  1773 000007B8 9D                      		popf
  1774 000007B9 CB                      		retf
  1775                                  
  1776                                  ;-----------------------------------------------------------------------------
  1777                                  
  1778                                  ; BIOSDATA:07BBh (MSDOS 6.21, IO.SYS)
  1779                                  ; BIOSDATA:07BBh (MSDOS 5.0, IO.SYS) ; 16/10/2022
  1780                                  
  1781 000007BA 9000FFFF                HiMem:		dd 0FFFF0090h		
  1782 000007BE 80000000                LoMem:		dd 80h
  1783                                  
  1784                                  ; ----------------------------------------------------------------------------			
  1785                                  
  1786                                  ; =============== S U B	R O U T	I N E ========================================
  1787                                  
  1788                                  
  1789                                  ;************************************************************************
  1790                                  ;*									*
  1791                                  ;*	EnsureA20On - ensure that a20 is enabled if we're running	*
  1792                                  ;*	  in the HMA before interrupt entry points into Bios_Code	*
  1793                                  ;*									*
  1794                                  ;************************************************************************
  1795                                  
  1796                                  EnsureA20On:	; proc near		
  1797 000007C2 E80E00                  		call	IsA20Off
  1798                                  		;jz	short EnableA20
  1799                                  		;retn
  1800                                  		; 18/12/2022
  1801 000007C5 750B                    		jnz	short A20On_retn	
  1802                                  
  1803                                  ; =============== S U B	R O U T	I N E ========================================
  1804                                  
  1805                                  
  1806                                  EnableA20:	; proc near		
  1807 000007C7 50                      		push	ax
  1808 000007C8 53                      		push	bx
  1809 000007C9 B405                    		mov	ah, 5	 ; local enable a20
  1810                                  		;call	cs:xms
  1811 000007CB 2EFF1E[0E00]            		call	far [cs:xms] ; 16/10/2022
  1812 000007D0 5B                      		pop	bx
  1813 000007D1 58                      		pop	ax
  1814                                  A20On_retn:	; 18/12/2022	
  1815 000007D2 C3                      		retn
  1816                                  
  1817                                  ; =============== S U B	R O U T	I N E ========================================
  1818                                  
  1819                                  
  1820                                  IsA20Off:	; proc near		
  1821 000007D3 1E                      		push	ds
  1822 000007D4 06                      		push	es
  1823 000007D5 51                      		push	cx
  1824 000007D6 56                      		push	si
  1825 000007D7 57                      		push	di
  1826 000007D8 2EC536[BA07]            		lds	si, [cs:HiMem]
  1827 000007DD 2EC43E[BE07]            		les	di, [cs:LoMem]
  1828 000007E2 B90800                  		mov	cx, 8
  1829 000007E5 F3A7                    		repe cmpsw
  1830 000007E7 5F                      		pop	di
  1831 000007E8 5E                      		pop	si
  1832 000007E9 59                      		pop	cx
  1833 000007EA 07                      		pop	es
  1834 000007EB 1F                      		pop	ds
  1835 000007EC C3                      		retn
  1836                                  
  1837                                  ; ----------------------------------------------------------------------------
  1838                                  
  1839                                  DisableA20:
  1840 000007ED 50                      		push	ax
  1841 000007EE 53                      		push	bx
  1842 000007EF B406                    		mov	ah, 6		; local disable A20
  1843 000007F1 2EFF1E[0E00]            		call	far [cs:xms]
  1844                                  		;call	cs:xms
  1845 000007F6 5B                      		pop	bx
  1846 000007F7 58                      		pop	ax
  1847 000007F8 C3                      		retn
  1848                                  
  1849                                  ; ----------------------------------------------------------------------------
  1850                                  
  1851                                  ;************************************************************************
  1852                                  ;*									*
  1853                                  ;*	int19 - bootstrap interrupt -- we must restore a bunch of the	*
  1854                                  ;*	  interrupt vectors before resuming the original int19 code	*
  1855                                  ;*									*
  1856                                  ;************************************************************************
  1857                                  
  1858                                  int19:					
  1859 000007F9 0E                      		push	cs
  1860 000007FA 1F                      		pop	ds
  1861 000007FB 8E06[1A00]              		mov	es, [zeroseg]	; 16/10/2022
  1862 000007FF B90500                  		mov	cx, 5		; NUMROMVECTORS
  1863                                  		;mov	si, offset RomVectors
  1864 00000802 BE[0001]                		mov	si, RomVectors	; 19/10/2022
  1865                                  next_int:				
  1866 00000805 AC                      		lodsb			; get int number
  1867 00000806 98                      		cbw			; assume < 128
  1868 00000807 D1E0                    		shl	ax, 1
  1869 00000809 D1E0                    		shl	ax, 1		; int *	4
  1870 0000080B 89C7                    		mov	di, ax
  1871 0000080D AD                      		lodsw
  1872 0000080E AB                      		stosw
  1873 0000080F AD                      		lodsw
  1874 00000810 AB                      		stosw			; install the saved vector
  1875 00000811 E2F2                    		loop	next_int
  1876 00000813 803E[4006]00            		cmp	byte [int19sem], 0 ; 19/10/2022
  1877 00000818 7422                    		jz	short doint19
  1878 0000081A BE[4106]                		mov	si, i19_lst	; stacks code has changed these hardware interrupt vectors
  1879                                  					; stkinit in sysinit1 will initialize int19oldxx values
  1880 0000081D B90E00                  		mov	cx, 14		; num_i19
  1881                                  
  1882                                  i19_restore_loop:			
  1883 00000820 AC                      		lodsb			; get interrupt	number
  1884 00000821 98                      		cbw			; assume < 128
  1885 00000822 89C7                    		mov	di, ax
  1886 00000824 AD                      		lodsw			; get original vector offset
  1887 00000825 89C3                    		mov	bx, ax		; save it
  1888 00000827 AD                      		lodsw
  1889 00000828 83FBFF                  		cmp	bx, 0FFFFh	; check	for 0ffffh (unlikely segment)
  1890 0000082B 740D                    		jz	short i19_restor_1 ; opt no need to check selector too
  1891 0000082D 83F8FF                  		cmp	ax, 0FFFFh	; opt 0ffffh is	unlikely offset
  1892 00000830 7408                    		jz	short i19_restor_1
  1893 00000832 01FF                    		add	di, di
  1894 00000834 01FF                    		add	di, di
  1895 00000836 93                      		xchg	ax, bx
  1896 00000837 AB                      		stosw
  1897 00000838 93                      		xchg	ax, bx
  1898 00000839 AB                      		stosw			; put the vector back
  1899                                  
  1900                                  i19_restor_1:				
  1901 0000083A E2E4                    		loop	i19_restore_loop
  1902                                  
  1903                                  doint19:				
  1904 0000083C 803E[0D00]00            		cmp	byte [inHMA], 0	; ; Is dos running from	HMA
  1905 00000841 7403                    		jz	short SkipVDisk
  1906 00000843 E83000                  		call	EraseVDiskHead	; Then erase our VDISK header at 1MB boundary
  1907                                  					; Some m/c's (AST 386 & HP QS/16 do not clear
  1908                                  					; the memory above 1MB during a	warm boot.
  1909                                  SkipVDisk:				
  1910 00000846 CD19                    		int	19h		; DISK BOOT
  1911                                  					; causes reboot	of disk	system
  1912                                  
  1913                                  ; =============== S U B	R O U T	I N E ========================================
  1914                                  
  1915                                  ;-----------------------------------------------------------------------------
  1916                                  ;
  1917                                  ; procedure : int15
  1918                                  ;
  1919                                  ;		Int15 handler for recognizing ctrl-alt-del seq
  1920                                  ;		If it recognizes ctrl-alt-del and if DOS was
  1921                                  ;		is running high, it Erases the VDISK header
  1922                                  ;		present at 1MB boundary
  1923                                  ;
  1924                                  ;-----------------------------------------------------------------------------
  1925                                  
  1926                                  ; 16/10/2022
  1927                                  ;DELKEY		equ	53h
  1928                                  ;ROMDATASEG	equ	40h
  1929                                  KBFLAG		equ	17h
  1930                                  ;CTRLSTATE	equ	04h
  1931                                  ;ALTSTATE	equ	08h
  1932                                  
  1933                                  Int15:		; proc near		
  1934                                  		;cmp	ax, 4F00h+DELKEY
  1935 00000848 3D534F                  		cmp	ax, 4F53h	; del keystroke ?
  1936 0000084B 7405                    		jz	short int15_1
  1937 0000084D 2EFF2E[0B01]            		jmp	far [cs:Old15]	; 16/10/2022
  1938                                  		;jmp	cs:Old15
  1939                                  ; ----------------------------------------------------------------------------
  1940                                  
  1941                                  int15_1:				
  1942 00000852 1E                      		push	ds
  1943 00000853 50                      		push	ax
  1944 00000854 B84000                  		mov	ax, 40h		; ROMDATASEG
  1945 00000857 8ED8                    		mov	ds, ax
  1946                                  		;mov	al, ds:17h	; [KBFLAG]
  1947                                  		; 16/10/2022
  1948 00000859 A01700                  		mov	al, [KBFLAG]
  1949 0000085C 240C                    		and	al, 0Ch		; (CTRLSTATE | ALTSTATE)
  1950 0000085E 3C0C                    		cmp	al, 0Ch		; (CTRLSTATE | ALTSTATE)
  1951 00000860 750C                    		jnz	short int15_2
  1952 00000862 0E                      		push	cs
  1953 00000863 1F                      		pop	ds
  1954 00000864 803E[0D00]00            		cmp	byte [inHMA], 0	; is DOS running from HMA
  1955 00000869 7403                    		jz	short int15_2
  1956 0000086B E80800                  		call	EraseVDiskHead
  1957                                  int15_2:				
  1958 0000086E 58                      		pop	ax
  1959 0000086F 1F                      		pop	ds
  1960 00000870 F9                      		stc
  1961 00000871 2EFF2E[0B01]            		jmp	far [cs:Old15]	; 16/10/2022
  1962                                  		;jmp	cs:Old15
  1963                                  
  1964                                  ; =============== S U B	R O U T	I N E ========================================
  1965                                  
  1966                                  ;-----------------------------------------------------------------------------
  1967                                  ;
  1968                                  ; procedure : EraseVDiskHead
  1969                                  ;
  1970                                  ;		Erases the VDisk Header present in the 1MB boundary
  1971                                  ;
  1972                                  ;-----------------------------------------------------------------------------
  1973                                  
  1974                                  EraseVDiskHead:	; proc near		
  1975 00000876 50                      		push	ax
  1976 00000877 51                      		push	cx
  1977 00000878 57                      		push	di
  1978 00000879 06                      		push	es
  1979 0000087A E845FF                  		call	EnsureA20On
  1980 0000087D B8FFFF                  		mov	ax, 0FFFFh	; HMA seg
  1981 00000880 8EC0                    		mov	es, ax
  1982 00000882 BF1000                  		mov	di, 10h		; point	to VDISK header
  1983 00000885 B91000                  		mov	cx, 10h		; size of vdisk	header
  1984 00000888 31C0                    		xor	ax, ax
  1985 0000088A F3AB                    		rep stosw		; clear	it
  1986 0000088C 07                      		pop	es
  1987 0000088D 5F                      		pop	di
  1988 0000088E 59                      		pop	cx
  1989 0000088F 58                      		pop	ax
  1990 00000890 C3                      		retn
  1991                                  
  1992                                  ; ----------------------------------------------------------------------------
  1993                                  
  1994                                  ;************************************************************************
  1995                                  ;*									*
  1996                                  ;*	the int2f handler chains up to Bios_Code through here.		*
  1997                                  ;*	  it returns through one of the three functions that follow.	*
  1998                                  ;*	  notice that we'll assume we're being entered from DOS, so	*
  1999                                  ;*	  that we're guaranteed to be A20 enabled if needed		*
  2000                                  ;*									*
  2001                                  ;************************************************************************
  2002                                  
  2003                                  int_2f:		
  2004 00000891 2EFF2E[E606]            		jmp	far [cs:bcode_i2f] ; 16/10/2022			
  2005                                  		;jmp	dword ptr cs:bcode_i2f ; far [cs:bcode_i2f]
  2006                                  
  2007                                  ; ----------------------------------------------------------------------------
  2008                                  
  2009                                  ; re-enter here to transition out of hma mode and jmp to dsk_entry
  2010                                  ; note:  is it really necessary to transiton out and then back in?
  2011                                  ;	 It's not as if this is a really speed critical function.
  2012                                  ;	 might as well do whatever's most compact.
  2013                                  
  2014                                  i2f_dskentry:				
  2015 00000896 E9A5FE                  		jmp	dsk_entry
  2016                                  
  2017                                  ; ----------------------------------------------------------------------------
  2018                                  
  2019                                  ;************************************************************************
  2020                                  ;*									*
  2021                                  ;*	re_init - called back by sysinit after a bunch of stuff		*
  2022                                  ;*		is done. presently does nothing. affects no		*
  2023                                  ;*		registers!						*
  2024                                  ;*									*
  2025                                  ;************************************************************************
  2026                                  
  2027                                  ; 09/12/2022
  2028                                  ; re_init_:
  2029                                  re_init:				; called back by sysinit after
  2030 00000899 CB                      		retf			; a bunch of stuff is done.
  2031                                  					; presently does nothing
  2032                                  
  2033                                  ; ----------------------------------------------------------------------------
  2034                                  
  2035                                  ;SR; WIN386 support
  2036                                  
  2037                                  ; WIN386 instance data structure
  2038                                  ;
  2039                                  ; Here is a Win386 startup info structure which we set up and to which
  2040                                  ; we return a pointer when Win386 initializes.
  2041                                  
  2042 0000089A 0300                    Win386_SI:	db 3, 0			; SI_Version
  2043                                  					; Startup Info for Win386
  2044 0000089C 00000000                SI_Next:	dd 0			; pointer to next info structure
  2045 000008A0 00000000                		dd 0			; a field we don't need
  2046 000008A4 00000000                		dd 0			; another field	we don't need
  2047 000008A8 [AC08]                  SI_Instance:	dw Instance_Table
  2048 000008AA 7000                    		dw 70h	; Bios_Data	; far pointer to instance table
  2049                                  
  2050                                  ; This table gives Win386 the instance data in the BIOS and ROM-BIOS data
  2051                                  ; areas. Note that the address and size of the hardware stacks must
  2052                                  ; be calculated and inserted at boot time.
  2053                                  
  2054 000008AC 00005000                Instance_Table:	dw 0, 50h		; print	screen status...
  2055 000008B0 0200                    		dw 2			; ... 2	bytes
  2056 000008B2 0E005000                		dw 0Eh,	50h		; ROM Basic data...
  2057 000008B6 1400                    		dw 14h			; ... 14H bytes
  2058 000008B8 [0C00]                  		dw altah		; a con	device buffer...
  2059 000008BA 7000                    		dw 70h			; Bios_Data segment
  2060 000008BC 0100                    		dw 1			; ... 1 byte
  2061                                  
  2062                                  NextStack:
  2063                                  
  2064                                  ; NOTE:  If stacks are disabled by STACKS=0,0, the following
  2065                                  ;	instance items WILL NOT be filled in by SYSINIT.
  2066                                  ;	That's just fine as long as these are the last items
  2067                                  ;	in the instance list since the first item is initialized
  2068                                  ;	to 0000 at load time.
  2069                                  
  2070 000008BE 00000000                		dw 0, 0			; pointer to next stack	to be used...
  2071 000008C2 0200                    		dw 2			; ... 2 bytes
  2072 000008C4 00000000                IT_StackLoc:	dd 0			; location of hardware stacks
  2073 000008C8 0000                    IT_StackSize:	dw 0			; size of hardware stacks
  2074 000008CA 00000000                		dd 0			; terminate the	instance table
  2075                                  
  2076                                  					;SR;
  2077 000008CE 00                      IsWin386:	db 0			; Flag to indicate whether
  2078                                  					; Win386 is running or not
  2079                                  ;-----------------------------------------------------------------------------
  2080                                  
  2081                                  ;This routine was originally in BIOS_CODE but this causes a lot of problems
  2082                                  ;when we call it including checking of A20. The code being only about 
  2083                                  ;30 bytes, we might as well put it in BIOS_DATA
  2084                                  
  2085                                  V86_Crit_SetFocus:			
  2086 000008CF 57                      		push	di
  2087 000008D0 06                      		push	es
  2088 000008D1 53                      		push	bx
  2089 000008D2 50                      		push	ax
  2090 000008D3 31FF                    		xor	di, di
  2091 000008D5 8EC7                    		mov	es, di
  2092 000008D7 BB1500                  		mov	bx, 15h		; Device ID of DOSMGR device
  2093 000008DA B88416                  		mov	ax, 1684h	; Get API entry	point
  2094 000008DD CD2F                    		int	2Fh		; - Multiplex -	MS WINDOWS - GET DEVICE	API ENTRY POINT
  2095                                  					; BX = virtual device (VxD) ID,	ES:DI =	0000h:0000h
  2096                                  					; Return: ES:DI	-> VxD API entry point,	or 0:0 if the VxD does not support an API
  2097 000008DF 8CC0                    		mov	ax, es
  2098 000008E1 09F8                    		or	ax, di
  2099 000008E3 740B                    		jz	short Skip	; Here,	es:di is address of API	routine.
  2100                                  					; Set up stack frame to	simulate a call.
  2101 000008E5 0E                      		push	cs
  2102                                  		;mov	ax, offset Skip
  2103 000008E6 B8[F008]                		mov	ax, Skip
  2104 000008E9 50                      		push	ax
  2105 000008EA 06                      		push	es
  2106 000008EB 57                      		push	di		; API far call address
  2107 000008EC B80100                  		mov	ax, 1		; SetFocus function number
  2108 000008EF CB                      		retf			; do the call
  2109                                  ;-----------------------------------------------------------------------------
  2110                                  
  2111                                  Skip:					
  2112 000008F0 58                      		pop	ax
  2113 000008F1 5B                      		pop	bx
  2114 000008F2 07                      		pop	es
  2115 000008F3 5F                      		pop	di
  2116 000008F4 CB                      		retf
  2117                                  
  2118                                  ;End WIN386 support
  2119                                  
  2120                                  ; ----------------------------------------------------------------------------
  2121                                  
  2122                                  ; 17/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
  2123                                  
  2124                                  ; 09/12/2022
  2125                                  ;SYSINITSEG	equ 46Dh  ; SYSINIT segment
  2126                                  ;DOSLOADSEG	equ 83Fh  ; MSDOS.SYS (kernel) loading segment		
  2127                                  ; (followings are in sysinit segment)
  2128                                  ;FTryToMovDOSHi	equ 0A84h ; (procedure in SYSINIT segment)
  2129                                  FTRYTOMOVDOSHI	equ FTryToMovDOSHi ; SYSINIT section
  2130                                  ;DEVICELIST	equ 273h
  2131                                  DEVICELIST	equ DEVICE_LIST	; SYSINIT section 	
  2132                                  ;MEMORYSIZE	equ 292h	
  2133                                  MEMORYSIZE	equ MEMORY_SIZE	; SYSINIT section
  2134                                  ;DEFAULTDRIVE	equ 296h
  2135                                  DEFAULTDRIVE	equ DEFAULT_DRIVE ; SYSINIT section
  2136                                  ;;currentdoslocation equ 271h
  2137                                  ;CURRENTDOSLOCATION equ 271h
  2138                                  CURRENTDOSLOCATION equ CURRENT_DOS_LOCATION  ; SYSINIT section
  2139                                  ;SYSINITSTART	equ 267h
  2140                                  SYSINITSTART	equ SYSINIT  ; SYSINIT section
  2141                                  ; 18/10/2022
  2142                                  ;toomanydrivesflag equ 3FFh 
  2143                                  TOOMANYDRIVESFLAG equ toomanydrivesflag ; SYSINIT section	
  2144                                  
  2145                                  ; ----------------------------------------------------------------------------
  2146                                  
  2147 000008F5 FFFF                    FreeHMAPtr:	dw 0FFFFh		
  2148                                  ;MoveDOSIntoHMA: dd 46D0A84h 		; FTryToMovDOSHi
  2149                                  					; (procedure in	SYSINIT	segment)
  2150                                  ; 17/10/2022
  2151 000008F7 [290A]                  MoveDOSIntoHMA:	dw FTRYTOMOVDOSHI	; 09/12/2022
  2152 000008F9 4104                    		dw SYSINITSEG	
  2153                                  
  2154                                  ;SR;
  2155                                  ; A communication block has been setup between the DOS and the BIOS. All
  2156                                  ;the data starting from SysinitPresent will be part of the data block. 
  2157                                  ;Right now, this is the only data being communicated. It can be expanded 
  2158                                  ;later to add more stuff
  2159                                  
  2160 000008FB 00                      SysinitPresent:	db 0			
  2161 000008FC 0000                    endfloppy:	db 0, 0
  2162                                  
  2163                                  ; ----------------------------------------------------------------------------			
  2164                                  
  2165                                  ; Bios_Data ends
  2166                                  	
  2167                                  ; Possibly disposable BIOS data
  2168                                  ; This data follows the	regular	BIOS data,
  2169                                  ; and is part of the same group.
  2170                                  
  2171 000008FE 4E4F204E414D452020-     nul_vid:	db 'NO NAME    ',0      
  2171 00000907 202000             
  2172                                  					; null volume id
  2173 0000090A 4E4F204E414D452020-     tmp_vid:	db 'NO NAME    ',0      
  2173 00000913 202000             
  2174                                  					; vid scratch buffer
  2175 00000916 80                      harddrv:	db 80h			
  2176                                  
  2177                                  end96tpi:
  2178                                  
  2179                                  ;;*********************************************************************
  2180                                  ;;memory allocation for bdss
  2181                                  ;;*********************************************************************
  2182                                  ;
  2183                                  ;;max_mini_dsk_num equ 23	; max # of mini disk ibmbio can support
  2184                                  ;
  2185                                  ;;bdss	BDS_STRUC (2+max_mini_dsk_num) dup (<>)	; currently max. 25
  2186                                  ;
  2187                                  ;bdss:	times BDS.size*(2+max_mini_dsk_num) db 0
  2188                                  
  2189 00000917 FFFF                    bdss:		dw 0FFFFh		
  2190 00000919 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2190 00000922 0210000000F8       
  2191 00000928 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2191 00000931 000000000000000003 
  2192 0000093A 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2192 00000943 00000000000000     
  2193 0000094A 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2193 00000953 000000000000000000 
  2194 0000095C 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2194 00000965 4E414D45           
  2195 00000969 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2195 00000972 46415431           
  2196 00000976 3220202000              		db 32h,	20h, 20h, 20h, 0
  2197 0000097B FFFF                    		dw 0FFFFh
  2198 0000097D 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2198 00000986 0210000000F8       
  2199 0000098C 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2199 00000995 000000000000000003 
  2200 0000099E 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2200 000009A7 00000000000000     
  2201 000009AE 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2201 000009B7 000000000000000000 
  2202 000009C0 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2202 000009C9 4E414D45           
  2203 000009CD 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2203 000009D6 46415431           
  2204 000009DA 3220202000              		db 32h,	20h, 20h, 20h, 0
  2205 000009DF FFFF                    		dw 0FFFFh
  2206 000009E1 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2206 000009EA 0210000000F8       
  2207 000009F0 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2207 000009F9 000000000000000003 
  2208 00000A02 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2208 00000A0B 00000000000000     
  2209 00000A12 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2209 00000A1B 000000000000000000 
  2210 00000A24 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2210 00000A2D 4E414D45           
  2211 00000A31 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2211 00000A3A 46415431           
  2212 00000A3E 3220202000              		db 32h,	20h, 20h, 20h, 0
  2213 00000A43 FFFF                    		dw 0FFFFh
  2214 00000A45 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2214 00000A4E 0210000000F8       
  2215 00000A54 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2215 00000A5D 000000000000000003 
  2216 00000A66 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2216 00000A6F 00000000000000     
  2217 00000A76 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2217 00000A7F 000000000000000000 
  2218 00000A88 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2218 00000A91 4E414D45           
  2219 00000A95 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2219 00000A9E 46415431           
  2220 00000AA2 3220202000              		db 32h,	20h, 20h, 20h, 0
  2221 00000AA7 FFFF                    		dw 0FFFFh
  2222 00000AA9 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2222 00000AB2 0210000000F8       
  2223 00000AB8 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2223 00000AC1 000000000000000003 
  2224 00000ACA 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2224 00000AD3 00000000000000     
  2225 00000ADA 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2225 00000AE3 000000000000000000 
  2226 00000AEC 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2226 00000AF5 4E414D45           
  2227 00000AF9 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2227 00000B02 46415431           
  2228 00000B06 3220202000              		db 32h,	20h, 20h, 20h, 0
  2229 00000B0B FFFF                    		dw 0FFFFh
  2230 00000B0D 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2230 00000B16 0210000000F8       
  2231 00000B1C 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2231 00000B25 000000000000000003 
  2232 00000B2E 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2232 00000B37 00000000000000     
  2233 00000B3E 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2233 00000B47 000000000000000000 
  2234 00000B50 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2234 00000B59 4E414D45           
  2235 00000B5D 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2235 00000B66 46415431           
  2236 00000B6A 3220202000              		db 32h,	20h, 20h, 20h, 0
  2237 00000B6F FFFF                    		dw 0FFFFh
  2238 00000B71 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2238 00000B7A 0210000000F8       
  2239 00000B80 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2239 00000B89 000000000000000003 
  2240 00000B92 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2240 00000B9B 00000000000000     
  2241 00000BA2 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2241 00000BAB 000000000000000000 
  2242 00000BB4 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2242 00000BBD 4E414D45           
  2243 00000BC1 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2243 00000BCA 46415431           
  2244 00000BCE 3220202000              		db 32h,	20h, 20h, 20h, 0
  2245 00000BD3 FFFF                    		dw 0FFFFh
  2246 00000BD5 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2246 00000BDE 0210000000F8       
  2247 00000BE4 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2247 00000BED 000000000000000003 
  2248 00000BF6 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2248 00000BFF 00000000000000     
  2249 00000C06 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2249 00000C0F 000000000000000000 
  2250 00000C18 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2250 00000C21 4E414D45           
  2251 00000C25 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2251 00000C2E 46415431           
  2252 00000C32 3220202000              		db 32h,	20h, 20h, 20h, 0
  2253 00000C37 FFFF                    		dw 0FFFFh
  2254 00000C39 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2254 00000C42 0210000000F8       
  2255 00000C48 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2255 00000C51 000000000000000003 
  2256 00000C5A 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2256 00000C63 00000000000000     
  2257 00000C6A 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2257 00000C73 000000000000000000 
  2258 00000C7C 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2258 00000C85 4E414D45           
  2259 00000C89 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2259 00000C92 46415431           
  2260 00000C96 3220202000              		db 32h,	20h, 20h, 20h, 0
  2261 00000C9B FFFF                    		dw 0FFFFh
  2262 00000C9D 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2262 00000CA6 0210000000F8       
  2263 00000CAC 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2263 00000CB5 000000000000000003 
  2264 00000CBE 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2264 00000CC7 00000000000000     
  2265 00000CCE 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2265 00000CD7 000000000000000000 
  2266 00000CE0 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2266 00000CE9 4E414D45           
  2267 00000CED 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2267 00000CF6 46415431           
  2268 00000CFA 3220202000              		db 32h,	20h, 20h, 20h, 0
  2269 00000CFF FFFF                    		dw 0FFFFh
  2270 00000D01 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2270 00000D0A 0210000000F8       
  2271 00000D10 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2271 00000D19 000000000000000003 
  2272 00000D22 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2272 00000D2B 00000000000000     
  2273 00000D32 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2273 00000D3B 000000000000000000 
  2274 00000D44 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2274 00000D4D 4E414D45           
  2275 00000D51 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2275 00000D5A 46415431           
  2276 00000D5E 3220202000              		db 32h,	20h, 20h, 20h, 0
  2277 00000D63 FFFF                    		dw 0FFFFh
  2278 00000D65 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2278 00000D6E 0210000000F8       
  2279 00000D74 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2279 00000D7D 000000000000000003 
  2280 00000D86 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2280 00000D8F 00000000000000     
  2281 00000D96 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2281 00000D9F 000000000000000000 
  2282 00000DA8 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2282 00000DB1 4E414D45           
  2283 00000DB5 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2283 00000DBE 46415431           
  2284 00000DC2 3220202000              		db 32h,	20h, 20h, 20h, 0
  2285 00000DC7 FFFF                    		dw 0FFFFh
  2286 00000DC9 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2286 00000DD2 0210000000F8       
  2287 00000DD8 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2287 00000DE1 000000000000000003 
  2288 00000DEA 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2288 00000DF3 00000000000000     
  2289 00000DFA 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2289 00000E03 000000000000000000 
  2290 00000E0C 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2290 00000E15 4E414D45           
  2291 00000E19 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2291 00000E22 46415431           
  2292 00000E26 3220202000              		db 32h,	20h, 20h, 20h, 0
  2293 00000E2B FFFF                    		dw 0FFFFh
  2294 00000E2D 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2294 00000E36 0210000000F8       
  2295 00000E3C 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2295 00000E45 000000000000000003 
  2296 00000E4E 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2296 00000E57 00000000000000     
  2297 00000E5E 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2297 00000E67 000000000000000000 
  2298 00000E70 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2298 00000E79 4E414D45           
  2299 00000E7D 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2299 00000E86 46415431           
  2300 00000E8A 3220202000              		db 32h,	20h, 20h, 20h, 0
  2301 00000E8F FFFF                    		dw 0FFFFh
  2302 00000E91 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2302 00000E9A 0210000000F8       
  2303 00000EA0 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2303 00000EA9 000000000000000003 
  2304 00000EB2 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2304 00000EBB 00000000000000     
  2305 00000EC2 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2305 00000ECB 000000000000000000 
  2306 00000ED4 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2306 00000EDD 4E414D45           
  2307 00000EE1 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2307 00000EEA 46415431           
  2308 00000EEE 3220202000              		db 32h,	20h, 20h, 20h, 0
  2309 00000EF3 FFFF                    		dw 0FFFFh
  2310 00000EF5 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2310 00000EFE 0210000000F8       
  2311 00000F04 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2311 00000F0D 000000000000000003 
  2312 00000F16 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2312 00000F1F 00000000000000     
  2313 00000F26 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2313 00000F2F 000000000000000000 
  2314 00000F38 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2314 00000F41 4E414D45           
  2315 00000F45 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2315 00000F4E 46415431           
  2316 00000F52 3220202000              		db 32h,	20h, 20h, 20h, 0
  2317 00000F57 FFFF                    		dw 0FFFFh
  2318 00000F59 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2318 00000F62 0210000000F8       
  2319 00000F68 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2319 00000F71 000000000000000003 
  2320 00000F7A 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2320 00000F83 00000000000000     
  2321 00000F8A 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2321 00000F93 000000000000000000 
  2322 00000F9C 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2322 00000FA5 4E414D45           
  2323 00000FA9 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2323 00000FB2 46415431           
  2324 00000FB6 3220202000              		db 32h,	20h, 20h, 20h, 0
  2325 00000FBB FFFF                    		dw 0FFFFh
  2326 00000FBD 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2326 00000FC6 0210000000F8       
  2327 00000FCC 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2327 00000FD5 000000000000000003 
  2328 00000FDE 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2328 00000FE7 00000000000000     
  2329 00000FEE 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2329 00000FF7 000000000000000000 
  2330 00001000 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2330 00001009 4E414D45           
  2331 0000100D 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2331 00001016 46415431           
  2332 0000101A 3220202000              		db 32h,	20h, 20h, 20h, 0
  2333 0000101F FFFF                    		dw 0FFFFh
  2334 00001021 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2334 0000102A 0210000000F8       
  2335 00001030 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2335 00001039 000000000000000003 
  2336 00001042 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2336 0000104B 00000000000000     
  2337 00001052 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2337 0000105B 000000000000000000 
  2338 00001064 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2338 0000106D 4E414D45           
  2339 00001071 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2339 0000107A 46415431           
  2340 0000107E 3220202000              		db 32h,	20h, 20h, 20h, 0
  2341 00001083 FFFF                    		dw 0FFFFh
  2342 00001085 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2342 0000108E 0210000000F8       
  2343 00001094 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2343 0000109D 000000000000000003 
  2344 000010A6 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2344 000010AF 00000000000000     
  2345 000010B6 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2345 000010BF 000000000000000000 
  2346 000010C8 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2346 000010D1 4E414D45           
  2347 000010D5 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2347 000010DE 46415431           
  2348 000010E2 3220202000              		db 32h,	20h, 20h, 20h, 0
  2349 000010E7 FFFF                    		dw 0FFFFh
  2350 000010E9 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2350 000010F2 0210000000F8       
  2351 000010F8 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2351 00001101 000000000000000003 
  2352 0000110A 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2352 00001113 00000000000000     
  2353 0000111A 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2353 00001123 000000000000000000 
  2354 0000112C 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2354 00001135 4E414D45           
  2355 00001139 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2355 00001142 46415431           
  2356 00001146 3220202000              		db 32h,	20h, 20h, 20h, 0
  2357 0000114B FFFF                    		dw 0FFFFh
  2358 0000114D 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2358 00001156 0210000000F8       
  2359 0000115C 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2359 00001165 000000000000000003 
  2360 0000116E 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2360 00001177 00000000000000     
  2361 0000117E 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2361 00001187 000000000000000000 
  2362 00001190 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2362 00001199 4E414D45           
  2363 0000119D 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2363 000011A6 46415431           
  2364 000011AA 3220202000              		db 32h,	20h, 20h, 20h, 0
  2365 000011AF FFFF                    		dw 0FFFFh
  2366 000011B1 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2366 000011BA 0210000000F8       
  2367 000011C0 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2367 000011C9 000000000000000003 
  2368 000011D2 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2368 000011DB 00000000000000     
  2369 000011E2 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2369 000011EB 000000000000000000 
  2370 000011F4 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2370 000011FD 4E414D45           
  2371 00001201 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2371 0000120A 46415431           
  2372 0000120E 3220202000              		db 32h,	20h, 20h, 20h, 0
  2373 00001213 FFFF                    		dw 0FFFFh
  2374 00001215 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2374 0000121E 0210000000F8       
  2375 00001224 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2375 0000122D 000000000000000003 
  2376 00001236 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2376 0000123F 00000000000000     
  2377 00001246 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2377 0000124F 000000000000000000 
  2378 00001258 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2378 00001261 4E414D45           
  2379 00001265 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2379 0000126E 46415431           
  2380 00001272 3220202000              		db 32h,	20h, 20h, 20h, 0
  2381 00001277 FFFF                    		dw 0FFFFh
  2382 00001279 000050030002010100-     		db 0, 0, 50h, 3, 0, 2, 1, 1, 0,	2, 10h,	0, 0, 0, 0F8h
  2382 00001282 0210000000F8       
  2383 00001288 010000000000000000-     		db 1, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 3
  2383 00001291 000000000000000003 
  2384 0000129A 200028000000000000-     		db 20h,	0, 28h,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0
  2384 000012A3 00000000000000     
  2385 000012AA 000000000000000000-     		db 0, 0, 0, 0, 0, 0, 0,	0, 0, 0, 0, 0, 0, 0, 0,	0, 0, 0
  2385 000012B3 000000000000000000 
  2386 000012BC 00FF010000004E4F20-     		db 0, 0FFh, 1, 0, 0, 0,	4Eh, 4Fh, 20h, 4Eh, 41h, 4Dh, 45h
  2386 000012C5 4E414D45           
  2387 000012C9 202020200000000000-     		db 20h,	20h, 20h, 20h, 0, 0, 0,	0, 0, 46h, 41h,	54h, 31h
  2387 000012D2 46415431           
  2388 000012D6 3220202000              		db 32h,	20h, 20h, 20h, 0
  2389 000012DB 00                      		db 0
  2390                                  
  2391                                  ;---------------------------------------------------------------------------
  2392                                  ; Possibly disposable data, goes at end of data group
  2393                                  ;***************************************************************************
  2394                                  
  2395                                  ; Possibly disposable data, goes at end of data group
  2396                                  
  2397                                  ;***	ibm_disk_io - main routine, fixes at rom bug
  2398                                  ;
  2399                                  ;	entry:	(ah) = function, 02 or 0a for read.
  2400                                  ;		(dl) = drive number (80h or 81h).
  2401                                  ;		(dh) = head number.
  2402                                  ;		(ch) = cylinder number.
  2403                                  ;		(cl) = sector number (high 2 bits has cylinder number).
  2404                                  ;		(al) = number of sectors.
  2405                                  ;		(es:bx) = address of read buffer.
  2406                                  ;		for more on register contents see rom bios listing.
  2407                                  ;		stack set up for return by an iret.
  2408                                  ;
  2409                                  ;	exit:	(ah) = status of current operation.
  2410                                  ;		(cy) = 1 if failed, 0 if successful.
  2411                                  ;		for other register contents see rom bios listing.
  2412                                  ;
  2413                                  ;	uses:	
  2414                                  ;
  2415                                  ;
  2416                                  ;	warning: uses old13 vector for non-read calls.
  2417                                  ;		does direct calls to the at rom.
  2418                                  ;		does segment arithmatic.
  2419                                  ;
  2420                                  ;	effects: performs disk i/o operation.
  2421                                  
  2422                                  ; 16/10/2022
  2423                                  ; 28/05/2019
  2424                                  cmd_block equ 42h ; ROMBIOS DATA segment (40h) offset 42h ; 13/12/2022
  2425                                  
  2426                                  ;* offsets into cmd_block for registers
  2427                                  
  2428                                  pre_comp equ 0	;write pre-compensation
  2429                                  sec_cnt	 equ 1	;sector count
  2430                                  sec_num	 equ 2	;sector number
  2431                                  cyl_low	 equ 3	;cylinder number, low part
  2432                                  cyl_high equ 4	;cylinder number, high part
  2433                                  drv_head equ 5	;drive/head (bit 7 = ecc mode, bit 5 = 512 byte sectors, 
  2434                                  		;            bit 4 = drive number, bits 3-0 have head number)
  2435                                  cmd_reg  equ 6	;command register
  2436                                  
  2437                                  ; 01/10/2022
  2438                                  disk_status1	equ 74h
  2439                                  hf_num		equ 75h
  2440                                  control_byte	equ 76h
  2441                                  
  2442                                  ibm_disk_io:				
  2443 000012DC 80FA80                  		cmp	dl, 80h		; main routine,	fixes at rom bug
  2444 000012DF 720A                    		jb	short atd1	; pass through floppy disk calls. 
  2445 000012E1 80FC02                  		cmp	ah, 2
  2446 000012E4 740A                    		jz	short atd2	; intercept call 02 (read sectors).
  2447 000012E6 80FC0A                  		cmp	ah, 0Ah
  2448 000012E9 7405                    		jz	short atd2	; and call 0Ah (read long).
  2449                                  atd1:
  2450 000012EB 2EFF2E[0601]            		jmp	far [cs:Old13]					
  2451                                  		;jmp	cs:Old13	; use rom int 13h handler
  2452                                  ;-----------------------------------------------------------------------------
  2453                                  
  2454                                  atd2:					
  2455 000012F0 53                      		push	bx
  2456 000012F1 51                      		push	cx
  2457 000012F2 52                      		push	dx
  2458 000012F3 57                      		push	di
  2459 000012F4 1E                      		push	ds
  2460 000012F5 06                      		push	es
  2461 000012F6 50                      		push	ax
  2462 000012F7 B84000                  		mov	ax, 40h		; bioseg (rombios data segment)
  2463                                  					; establish bios segment addressing
  2464 000012FA 8ED8                    		mov	ds, ax
  2465                                  		; 16/10/2022
  2466 000012FC C606740000              		mov	byte [disk_status1], 0
  2467                                  		;mov	byte ptr ds:74h, 0 ; [disk_status1]
  2468                                  					; initially no error code.
  2469 00001301 80E27F                  		and	dl, 7Fh		; mask to hard disk number
  2470 00001304 3A167500                		cmp	dl, [hf_num]
  2471                                  		;cmp	dl, ds:75h	; [hf_num] ; 40h:75h
  2472 00001308 7207                    		jb	short atd3	; disk number in range
  2473                                  		;mov	byte ptr ds:74h, 1 ; bad_disk
  2474 0000130A C606740001              		mov	byte [disk_status1], 1
  2475 0000130F EB20                    		jmp	short atd4	; disk number out of range error,
  2476                                  					; return
  2477                                  ; ----------------------------------------------------------------------------
  2478                                  
  2479                                  atd3:					
  2480 00001311 53                      		push	bx
  2481 00001312 8CC0                    		mov	ax, es
  2482 00001314 C1EB04                  		shr	bx, 4		; make es:bx to seg:000x form.
  2483 00001317 01D8                    		add	ax, bx
  2484 00001319 8EC0                    		mov	es, ax
  2485 0000131B 5B                      		pop	bx
  2486 0000131C 83E30F                  		and	bx, 0Fh
  2487 0000131F 0E                      		push	cs
  2488 00001320 E8DF00                  		call	check_dma
  2489 00001323 720C                    		jb	short atd4	; abort if dma across segment boundary
  2490 00001325 58                      		pop	ax
  2491 00001326 50                      		push	ax
  2492 00001327 E81A00                  		call	setcmd		; set up command block for disk op
  2493 0000132A BAF603                  		mov	dx, 3F6h	; hf_reg_port 
  2494 0000132D EE                      		out	dx, al		; write out command modifier
  2495 0000132E E86B00                  		call	docmd		; carry out command
  2496                                  ; ----------------------------------------------------------------------------
  2497                                  
  2498                                  atd4:	
  2499                                  
  2500                                  ;  new code - let logical or clear carry and then set carry if ah!=0
  2501                                  ;	      and save a couple bytes while were at it.
  2502                                  				
  2503 00001331 58                      		pop	ax
  2504                                  		;mov	ah, ds:74h	; [disk_status1]
  2505 00001332 8A267400                		mov	ah, [disk_status1]
  2506 00001336 08E4                    		or	ah, ah
  2507 00001338 7401                    		jz	short atd5
  2508 0000133A F9                      		stc
  2509                                  atd5:					
  2510 0000133B 07                      		pop	es
  2511 0000133C 1F                      		pop	ds
  2512 0000133D 5F                      		pop	di
  2513 0000133E 5A                      		pop	dx
  2514 0000133F 59                      		pop	cx
  2515 00001340 5B                      		pop	bx
  2516 00001341 CA0200                  		retf	2		; far return, dropping flags
  2517                                  
  2518                                  ; =============== S U B	R O U T	I N E ========================================
  2519                                  
  2520                                  ;***	setcmd - set up cmd_block for the disk operation
  2521                                  ;
  2522                                  ;	entry:	(ds) = bios data segment.
  2523                                  ;		(es:bx) in seg:000x form.
  2524                                  ;		other registers as in int 13h call
  2525                                  ;	
  2526                                  ;	exit:	cmd_block set up for disk read call.
  2527                                  ;		control_byte set up for disk operation.
  2528                                  ;		(al) = control byte modifier
  2529                                  ;
  2530                                  ;	sets the fields of cmd_block using the register contents
  2531                                  ;	and the contents of the disk parameter block for the given drive.
  2532                                  ;
  2533                                  ;	warning: (ax) destroyed.
  2534                                  ;		does direct calls to the at rom.
  2535                                  
  2536                                  setcmd:		; proc near		
  2537                                  		;mov	ds:43h,	al	; [cmd_block+sec_cnt]
  2538                                  		; 16/10/2022
  2539 00001344 A24300                  		mov	[cmd_block+sec_cnt], al
  2540                                  		;mov	byte ptr ds:48h, 20h ; [cmd_block+cmd_reg]
  2541 00001347 C606480020              		mov	byte [cmd_block+cmd_reg], 20h ; assume function 02h (read)
  2542 0000134C 80FC02                  		cmp	ah, 2
  2543 0000134F 7405                    		jz	short setc1	; cmd_reg = 20h	if function 02h	(read)
  2544 00001351 C606480022              		mov	byte [cmd_block+cmd_reg], 22h
  2545                                  		;mov	byte ptr ds:48h, 22h ; [cmd_block+cmd_reg]
  2546                                  					; cmd_reg = 22h	if function 0Ah	(read long)
  2547                                  setc1:					
  2548 00001356 88C8                    		mov	al, cl
  2549 00001358 243F                    		and	al, 3Fh		; mask sector number
  2550                                  		;mov	ds:44h,	al	; [cmd_block+sec_num]
  2551                                  		;mov	ds:45h,	ch	; [cmd_block+cyl_low]
  2552 0000135A A24400                  		mov	[cmd_block+sec_num], al ; mov [44h],al
  2553 0000135D 882E4500                		mov	[cmd_block+cyl_low], ch ; mov [45h],ch
  2554 00001361 88C8                    		mov	al, cl
  2555 00001363 C0E806                  		shr	al, 6		; get two high bits of cylinder	number
  2556                                  		;mov	ds:46h,	al	; [cmd_block+cyl_high]
  2557 00001366 A24600                  		mov	[cmd_block+cyl_high], al ; mov [46h],al
  2558 00001369 89D0                    		mov	ax, dx
  2559 0000136B C0E004                  		shl	al, 4		; drive	number
  2560 0000136E 80E40F                  		and	ah, 0Fh
  2561 00001371 08E0                    		or	al, ah		; head number
  2562 00001373 0CA0                    		or	al, 0A0h	; set ecc and 512 bytes	per sector
  2563                                  		;mov	ds:47h,	al	; [cmd_block+drv_head]
  2564 00001375 A24700                  		mov	[cmd_block+drv_head], al  ; mov [47h],al 
  2565 00001378 06                      		push	es
  2566 00001379 53                      		push	bx
  2567 0000137A 0E                      		push	cs
  2568 0000137B E85C00                  		call	get_vec
  2569 0000137E 268B4705                		mov	ax, [es:bx+5]	; [es:bx+fdp_precomp]
  2570                                  			 		; write pre-comp from disk parameters
  2571 00001382 C1E802                  		shr	ax, 2
  2572                                  		;mov	ds:42h,	al	; [cmd_block+pre_comp]
  2573 00001385 A24200                  		mov	[cmd_block+pre_comp], al ; mov [42h],al
  2574                                  					; only use low part
  2575 00001388 268A4708                		mov	al, [es:bx+8]	; [es:bx+fdp_control]
  2576                                  					; control byte modifier
  2577 0000138C 5B                      		pop	bx
  2578 0000138D 07                      		pop	es
  2579                                  		;mov	ah, ds:76h	; [control_byte]
  2580 0000138E 8A267600                		mov	ah, [control_byte] ; mov ah,[76h]
  2581 00001392 80E4C0                  		and	ah, 0C0h	; keep disable retry bits	
  2582 00001395 08C4                    		or	ah, al
  2583                                  		;mov	ds:76h,	ah
  2584 00001397 88267600                		mov	[control_byte], ah ; mov [76h],al
  2585 0000139B C3                      		retn
  2586                                  
  2587                                  ; =============== S U B	R O U T	I N E ========================================
  2588                                  
  2589                                  ;***	docmd - carry out read operation to at hard disk
  2590                                  ;
  2591                                  ;	entry:	(es:bx) = address for read in data.
  2592                                  ;		cmd_block set up for disk read.
  2593                                  ;
  2594                                  ;	exit:	buffer at (es:bx) contains data read.
  2595                                  ;		disk_status1 set to error code (0 if success).
  2596                                  ;
  2597                                  ;	
  2598                                  ;
  2599                                  ;	warning: (ax), (bl), (cx), (dx), (di) destroyed.
  2600                                  ;		no check is made for dma boundary overrun.
  2601                                  ;
  2602                                  ;	effects: programs disk controller.
  2603                                  ;		performs disk input.
  2604                                  
  2605                                  docmd:		; proc near		
  2606 0000139C 89DF                    		mov	di, bx
  2607 0000139E 0E                      		push	cs
  2608 0000139F E84000                  		call	command
  2609 000013A2 7535                    		jnz	short doc3
  2610                                  doc1:					
  2611 000013A4 0E                      		push	cs
  2612 000013A5 E84200                  		call	waitt		; wait for controller to complete read
  2613 000013A8 752F                    		jnz	short doc3
  2614 000013AA B90001                  		mov	cx, 256		; 256 words per sector
  2615 000013AD BAF001                  		mov	dx, 1F0h	; hf_port
  2616 000013B0 FC                      		cld			; string op goes up
  2617 000013B1 FA                      		cli			; disable interrupts
  2618                                  					; (bug was forgetting this)
  2619                                  
  2620                                  ;	M062 -- some of these old machines have intermittent failures
  2621                                  ;		when the read is done at full speed. Instead of using
  2622                                  ;		a string rep instruction, we'll use a loop. There is
  2623                                  ;		a slight performance hit, but it only affects these
  2624                                  ;		very old machines with an exact date code match, and
  2625                                  ;		it makes said machines more reliable
  2626                                  ;
  2627                                  ;M062	repz	insw		;read in sector
  2628                                  
  2629                                  rsct_loop:				
  2630 000013B2 6D                      		insw
  2631 000013B3 E2FD                    		loop	rsct_loop
  2632 000013B5 FB                      		sti
  2633                                  		; 16/10/2022
  2634 000013B6 F606480002              		test	byte [cmd_block+cmd_reg], 02h
  2635                                  		;test	byte ptr ds:48h, 2 ; [cmd_block+cmd_reg]
  2636                                  					; (ds =	40h)
  2637 000013BB 7410                    		jz	short doc2	; no ecc bytes to read.
  2638 000013BD 0E                      		push	cs
  2639 000013BE E83100                  		call	wait_drq	; wait for controller to complete read
  2640 000013C1 7216                    		jb	short doc3
  2641 000013C3 B90400                  		mov	cx, 4		; 4 bytes of ecc
  2642 000013C6 BAF001                  		mov	dx, 1F0h	; hf_port
  2643 000013C9 FA                      		cli
  2644 000013CA F36C                    		rep insb		; read in ecc
  2645 000013CC FB                      		sti
  2646                                  doc2:					
  2647 000013CD 0E                      		push	cs
  2648 000013CE E82900                  		call	check_status
  2649 000013D1 7506                    		jnz	short doc3	; operation failed
  2650                                  		;dec	byte ptr ds:43h	; [cmd_block+sec_cnt]
  2651 000013D3 FE0E4300                		dec	byte [cmd_block+sec_cnt]
  2652 000013D7 75CB                    		jnz	short doc1	; loop while more sectors to read
  2653                                  doc3:					
  2654 000013D9 C3                      		retn
  2655                                  
  2656                                  ; =============== S U B	R O U T	I N E ========================================
  2657                                  
  2658                                  ;***	define where the rom routines are actually located
  2659                                  ;	   in the buggy old AT BIOS that we might need to
  2660                                  ;	   install a special level of int13 handler for
  2661                                  
  2662                                  ; 16/10/2022
  2663                                  
  2664                                  romsegment 	equ 0F000h  ; segment
  2665                                  romcommand 	equ 2E1Eh   ; offset in romsegment
  2666                                  romwait		equ 2E7Fh   ; offset in romsegment
  2667                                  romwait_drq 	equ 2EE2h   ; offset in romsegment
  2668                                  romcheck_status equ 2EF8h   ; offset in romsegment
  2669                                  romcheck_dma 	equ 2F69h   ; offset in romsegment	
  2670                                  romget_vec	equ 2F8Eh   ; offset in romsegment
  2671                                  romfret		equ 0FF65h  ; far return in rom	
  2672                                  
  2673                                  ;***	get_vec - get pointer to hard disk parameters.
  2674                                  ;
  2675                                  ;	entry:	(dl) = low bit has hard disk number (0 or 1).
  2676                                  ;
  2677                                  ;	exit:	(es:bx) = address of disk parameters table.
  2678                                  ;
  2679                                  ;	uses:	ax for segment computation.
  2680                                  ;
  2681                                  ;	loads es:bx from interrupt table in low memory, vector 46h (disk 0)
  2682                                  ;	or 70h (disk 1).
  2683                                  ;	
  2684                                  ;	warning: (ax) destroyed.
  2685                                  ;		this does a direct call to the at rom.
  2686                                  
  2687                                  get_vec:	; proc near		
  2688                                  		;push	0FF65h		; romfret ; far	return in rom
  2689                                  		;jmp	far ptr	0F000h:2F8Eh
  2690                                  		; 16/10/2022
  2691 000013DA 6865FF                  		push	romfret		; far return in rom
  2692 000013DD EA8E2F00F0              		jmp	romsegment:romget_vec
  2693                                  
  2694                                  ; =============== S U B	R O U T	I N E ========================================
  2695                                  
  2696                                  ;***	command - send contents of cmd_block to disk controller.
  2697                                  ;
  2698                                  ;	entry:	control_byte 
  2699                                  ;		cmd_block - set up with values for hard disk controller.
  2700                                  ;
  2701                                  ;	exit:	disk_status1 = error code.
  2702                                  ;		nz if error, zr for no error.
  2703                                  ;
  2704                                  ;
  2705                                  ;	warning: (ax), (cx), (dx) destroyed.
  2706                                  ;		does a direct call to the at rom.
  2707                                  ;
  2708                                  ;	effects: programs disk controller.
  2709                                  
  2710                                  command:	; proc near		
  2711                                  		;push	0FF65h		; romfret ; far	return in rom
  2712                                  		;jmp	far ptr	0F000h:2E1Eh
  2713                                  		; 16/10/2022
  2714 000013E2 6865FF                  		push	romfret		; far return in rom
  2715 000013E5 EA1E2E00F0              		jmp	romsegment:romcommand
  2716                                  
  2717                                  ; =============== S U B	R O U T	I N E ========================================
  2718                                  
  2719                                  ;***	waitt - wait for disk interrupt
  2720                                  ;
  2721                                  ;	entry:	nothing.
  2722                                  ;
  2723                                  ;	exit:	disk_status1 = error code.
  2724                                  ;		nz if error, zr if no error.
  2725                                  ;
  2726                                  ;
  2727                                  ;	warning: (ax), (bl), (cx) destroyed.
  2728                                  ;		does a direct call to the at rom.
  2729                                  ;		
  2730                                  ;	effects: calls int 15h, function 9000h.
  2731                                  
  2732                                  waitt:		; proc near		
  2733                                  		;push	0FF65h		; romfret ; far	return in rom
  2734                                  		;jmp	far ptr	0F000h:2E7Fh
  2735                                  		; 16/10/2022
  2736 000013EA 6865FF                  		push	romfret		; far return in rom
  2737 000013ED EA7F2E00F0              		jmp	romsegment:romwait
  2738                                  
  2739                                  ; =============== S U B	R O U T	I N E ========================================
  2740                                  
  2741                                  ;***	wait_drq - wait for data request.
  2742                                  ;
  2743                                  ;	entry:	nothing.
  2744                                  ;
  2745                                  ;	exit:	disk_status1 = error code.
  2746                                  ;		cy if error, nc if no error.
  2747                                  ;
  2748                                  ;	warning: (al), (cx), (dx) destroyed.
  2749                                  ;		does a direct call to the at rom.
  2750                                  
  2751                                  wait_drq:	; proc near		
  2752                                  		;push	0FF65h		; romfret ; far	return in rom
  2753                                  		;jmp	far ptr	0F000h:2EE2h
  2754                                  		; 16/10/2022
  2755 000013F2 6865FF                  		push	romfret		; far return in rom
  2756 000013F5 EAE22E00F0              		jmp	romsegment:romwait_drq
  2757                                  
  2758                                  ; =============== S U B	R O U T	I N E ========================================
  2759                                  
  2760                                  ;***	check_status - check hard disk status.
  2761                                  ;
  2762                                  ;	entry:	nothing.
  2763                                  ;
  2764                                  ;	exit:	disk_status1 = error code.
  2765                                  ;		nz if error, zr if no error.
  2766                                  ;
  2767                                  ;	warning: (ax), (cx), (dx) destroyed.
  2768                                  ;		does a direct call to the at rom.
  2769                                  
  2770                                  check_status:	; proc near		
  2771                                  		;push	0FF65h		; romfret ; far	return in rom
  2772                                  		;jmp	far ptr	0F000h:2EF8h
  2773                                  		; 16/10/2022
  2774 000013FA 6865FF                  		push	romfret		; far return in rom
  2775 000013FD EAF82E00F0              		jmp	romsegment:romcheck_status
  2776                                  
  2777                                  ; =============== S U B	R O U T	I N E ========================================
  2778                                  
  2779                                  ;***	check_dma - check for dma overrun 64k segment.
  2780                                  ;
  2781                                  ;	entry:	(es:bx) = addr. of memory buffer in seg:000x form.
  2782                                  ;		cmd_block set up for operation.
  2783                                  ;
  2784                                  ;	exit:	disk_status1 - error code.
  2785                                  ;		cy if error, nc if no error.
  2786                                  ;
  2787                                  ;	warning: does a direct call to the at rom.
  2788                                  
  2789                                  check_dma:	; proc near		
  2790                                  		;push	0FF65h		; romfret ; far	return in rom
  2791                                  		;jmp	far ptr	0F000h:2F69h
  2792                                  		; 16/10/2022
  2793 00001402 6865FF                  		push	romfret		; far return in rom
  2794 00001405 EA692F00F0              		jmp	romsegment:romcheck_dma
  2795                                  
  2796                                  ;-----------------------------------------------------------------------------
  2797                                  
  2798                                  endatrom:
  2799                                  
  2800                                  ; ----------------------------------------------------------------------------
  2801                                  
  2802                                  ;; M015 -- begin changes
  2803                                  ;;
  2804                                  ;; Certain old COMPAQ '286 machines have a bug in their ROM BIOS.
  2805                                  ;; When Int13 is done with AH > 15h and DL >= 80h, they trash
  2806                                  ;; the byte at DS:74h, assuming that DS points to ROM_DATA.
  2807                                  ;; If our init code detects this error, it will install this
  2808                                  ;; special Int13 hook through the same mechanism that was set
  2809                                  ;; up for the IBM patch above. This code is also dynamically
  2810                                  ;; relocated by MSINIT.
  2811                                  
  2812                                  compaq_disk_io:
  2813 0000140A 80FC15                  		cmp	ah, 15h		; compaq_disk_io proc far
  2814                                  					;
  2815                                  					; the following	label defines the end of the at	rom patch.
  2816                                  					; this is used at configuration	time.
  2817                                  					;
  2818                                  					; warning!!!
  2819                                  					; this code will be dynamically	relocated by msinit
  2820 0000140D 7705                    		ja	short mebbe_hookit ; only deal with functions > 15h
  2821                                  no_hookit:				
  2822                                  		;jmp	cs:Old13
  2823                                  		; 16/10/2022
  2824 0000140F 2EFF2E[0601]            		jmp	far [cs:Old13]
  2825                                  
  2826                                  ; ----------------------------------------------------------------------------
  2827                                  
  2828                                  mebbe_hookit:				
  2829 00001414 80FA80                  		cmp	dl, 80h
  2830 00001417 72F6                    		jb	short no_hookit
  2831 00001419 1E                      		push	ds
  2832 0000141A 50                      		push	ax
  2833 0000141B B84000                  		mov	ax, 40h
  2834 0000141E 8ED8                    		mov	ds, ax
  2835 00001420 58                      		pop	ax
  2836 00001421 9C                      		pushf
  2837                                  		;call	cs:Old13
  2838                                  		; 16/10/2022
  2839 00001422 2EFF1E[0601]            		call	far [cs:Old13]
  2840 00001427 1F                      		pop	ds
  2841 00001428 CA0200                  		retf	2
  2842                                  
  2843                                  ; ----------------------------------------------------------------------------
  2844                                  
  2845 0000142B 00                      end_compaq_i13hook: db 0			
  2846                                  
  2847                                  ; =============== S U B	R O U T	I N E ========================================
  2848                                  
  2849                                  ; CMOS Clock setting support routines used by MSCLOCK.		
  2850                                  ; Warning!!! This code will be dynamically relocated by MSINIT.
  2851                                  
  2852                                  daycnt_to_day:	; proc far
  2853                                  
  2854                                  ; entry: [daycnt] = number of days since 1-1-80
  2855                                  ;
  2856                                  ; return: ch - century in bcd
  2857                                  ;	  cl - year in bcd
  2858                                  ;	  dh - month in bcd
  2859                                  ;	  dl - day in bcd
  2860                                  
  2861                                  		; 16/10/2022		
  2862 0000142C 2EFF36[F004]            		push	word [cs:daycnt] ; save daycnt
  2863 00001431 2E813E[F004]891C        		cmp	word [cs:daycnt], 7305	; (365*20+(20/4))
  2864                                  					; # days from 1-1-1980 to 1-1-2000
  2865 00001438 730E                    		jnb	short century20
  2866 0000143A 2EC606[F404]13          		mov	byte [cs:base_century], 19
  2867 00001440 2EC606[F504]50          		mov	byte [cs:base_year], 80
  2868 00001446 EB13                    		jmp	short years
  2869                                  ; ----------------------------------------------------------------------------
  2870                                  		
  2871                                  century20:				
  2872 00001448 2EC606[F404]14          		mov	byte [cs:base_century], 20
  2873 0000144E 2EC606[F504]00          		mov	byte [cs:base_year], 0
  2874 00001454 2E812E[F004]891C        		sub	word [cs:daycnt], 7305	; (365*20+(20/4))
  2875                                  					; adjust daycnt
  2876                                  years:					
  2877 0000145B 31D2                    		xor	dx, dx
  2878 0000145D 2EA1[F004]              		mov	ax, [cs:daycnt]
  2879 00001461 BBB505                  		mov	bx, 1461	; (366+365*3)
  2880                                  					; # of days in a Leap year block
  2881 00001464 F7F3                    		div	bx		; AX = # of leap block,	DX = daycnt
  2882 00001466 2E8916[F004]            		mov	[cs:daycnt], dx	; save daycnt left
  2883 0000146B B304                    		mov	bl, 4
  2884 0000146D F6E3                    		mul	bl		; AX = # of years. Less	than 100
  2885 0000146F 2E0006[F504]            		add	[cs:base_year], al ; So, ah = 0. Adjust year
  2886 00001474 2EFF06[F004]            		inc	word [cs:daycnt]	; set daycnt to	1 base
  2887 00001479 2E813E[F004]6E01        		cmp	word [cs:daycnt], 366	; daycnt=remainder of leap year	bk
  2888 00001480 7626                    		jbe	short leapyear	; within 366+355+355+355 days.
  2889 00001482 2EFE06[F504]            		inc	byte [cs:base_year]	; if daycnt <= 366, then leap year
  2890 00001487 2E812E[F004]6E01        		sub	word [cs:daycnt], 366	; else daycnt--, base_year++ ;
  2891 0000148E B90300                  		mov	cx, 3		; And next three years are normal
  2892                                  regularyear:				
  2893 00001491 2E813E[F004]6D01        		cmp	word [cs:daycnt], 365	; for(i=1; i>3 or daycnt <=365;	i++)
  2894 00001498 7614                    		jbe	short yeardone	; {if (daycnt >	365)
  2895 0000149A 2EFE06[F504]            		inc	byte [cs:base_year]	;   { daycnt -=	365
  2896 0000149F 2E812E[F004]6D01        		sub	word [cs:daycnt], 365	;   }
  2897 000014A6 E2E9                    		loop	regularyear	; }
  2898                                  					;
  2899                                  					; should never fall through loop
  2900                                  leapyear:				
  2901 000014A8 2EC606[F704]1D          		mov	byte [cs:month_tab+1], 29 ; leap year.
  2902                                  					; change month table.
  2903                                  yeardone:				
  2904 000014AE 31DB                    		xor	bx, bx
  2905 000014B0 31D2                    		xor	dx, dx
  2906 000014B2 2EA1[F004]              		mov	ax, [cs:daycnt]
  2907                                  		;mov	si, offset month_tab
  2908 000014B6 BE[F604]                		mov	si, month_tab	; 19/10/2022
  2909 000014B9 B90C00                  		mov	cx, 12
  2910                                  months:					
  2911 000014BC FEC3                    		inc	bl
  2912                                  
  2913                                  		; !!! -- 16/10/2022 -- (if DS=CS, what for CS: prefixes are used !?)
  2914                                  		;mov	dl, [cs:si]
  2915                                  		; !!! -- 16/10/2022 -- (may be to keep code addrs as unchanged/fix!?)
  2916                                  		; ds = cs !? ((ofcourse ds must be same with cs here))
  2917                                  		;mov	dl, [si] ; 20/03/2019 (MSDOS 6.21 IO.SYS, BIOSDATA:14C0h)
  2918                                  		;mov	dl, [si] ; 16/10/2022 (MSDOS 5.0 IO.SYS, BIOSDATA:14C0h)
  2919                                  		
  2920 000014BE 8A14                    		mov	dl, [si] ; ?	; mov dl, [cs:si]
  2921 000014C0 39D0                    		cmp	ax, dx		; cmp daycnt for each month till fit
  2922                                  					; dh=0
  2923 000014C2 7605                    		jbe	short month_done
  2924 000014C4 46                      		inc	si		; next month
  2925 000014C5 29D0                    		sub	ax, dx		; adjust daycnt
  2926 000014C7 E2F3                    		loop	months		;
  2927                                  					; should never fall through loop
  2928                                  month_done:				
  2929 000014C9 2EC606[F704]1C          		mov	byte [cs:month_tab+1], 28
  2930                                  					; restore month table value
  2931 000014CF 88DA                    		mov	dl, bl
  2932 000014D1 2E8A36[F504]            		mov	dh, [cs:base_year]
  2933 000014D6 2E8A0E[F404]            		mov	cl, [cs:base_century] ; al=day,dl=month,dh=year,cl=cntry
  2934 000014DB 2EFF1E[0205]            		call	far [cs:bintobcd]
  2935                                  		;call	cs:bintobcd	; convert "day"	to bcd
  2936                                  					; dl = bcd day,	al = month
  2937 000014E0 86D0                    		xchg	dl, al
  2938 000014E2 2EFF1E[0205]            		call	far [cs:bintobcd]
  2939                                  		;call	cs:bintobcd	; dh = bcd month, al = year
  2940 000014E7 86F0                    		xchg	dh, al
  2941 000014E9 2EFF1E[0205]            		call	far [cs:bintobcd]
  2942                                  		;call	cs:bintobcd	; cl = bcd year, al = century
  2943 000014EE 86C8                    		xchg	cl, al
  2944 000014F0 2EFF1E[0205]            		call	far [cs:bintobcd]
  2945                                  		;call	cs:bintobcd	; ch = bcd century
  2946 000014F5 88C5                    		mov	ch, al
  2947 000014F7 2E8F06[F004]            		pop	word [cs:daycnt] ; restore original value
  2948 000014FC CB                      		retf
  2949                                  
  2950                                  enddaycnttoday:	
  2951                                  
  2952                                  ; =============== S U B	R O U T	I N E ========================================
  2953                                  
  2954                                  bin_to_bcd:	; proc far		; real time clock support
  2955                                  
  2956                                  ;convert a binary input in al (less than 63h or 99 decimal)
  2957                                  ;into a bcd value in al. ah destroyed.	
  2958                                  		
  2959 000014FD 51                      		push	cx		
  2960 000014FE D40A                    		aam			; al=high digit	bcd, ah=low digit bc
  2961 00001500 B104                    		mov	cl, 4
  2962 00001502 D2E4                    		shl	ah, cl		; mov the high digit to	high nibble
  2963 00001504 08E0                    		or	al, ah
  2964 00001506 59                      		pop	cx
  2965 00001507 CB                      		retf
  2966                                  
  2967                                  ; ----------------------------------------------------------------------------
  2968                                  
  2969                                  ; the k09 requires the routines for reading the clock because of the suspend/
  2970                                  ; resume facility. the system clock needs to be reset after resume.
  2971                                  
  2972                                  ; the following routine is executed at resume time when the system
  2973                                  ; powered on after suspension. it reads the real time clock and
  2974                                  ; resets the system time and date, and then irets.
  2975                                  
  2976                                  ; warning!!! this code will be dynamically relocated by msinit.
  2977                                  
  2978                                  int6c:					
  2979 00001508 0E                      		push	cs
  2980 00001509 1F                      		pop	ds
  2981 0000150A 8F06[BB06]              		pop	word [int6c_ret_addr]	; pop off return address
  2982 0000150E 8F06[BD06]              		pop	word [int6c_ret_addr+2]
  2983 00001512 9D                      		popf
  2984 00001513 E81300                  		call	read_real_date	; get the date from the clock
  2985 00001516 FA                      		cli
  2986 00001517 8936[F004]              		mov	[daycnt], si	; update dos copy of date
  2987 0000151B FB                      		sti
  2988 0000151C E8CB00                  		call	read_real_time	; get the time from the	rtc
  2989 0000151F FA                      		cli
  2990 00001520 B401                    		mov	ah, 1
  2991 00001522 CD1A                    		int	1Ah		; CLOCK	- SET TIME OF DAY
  2992                                  					; CX:DX	= clock	count
  2993                                  					; Return: time of day set
  2994 00001524 FB                      		sti
  2995                                  		;jmp	int6c_ret_addr	; long jump
  2996                                  		; 16/10/2022
  2997 00001525 FF2E[BB06]              		jmp	far [int6c_ret_addr] ; long jump
  2998                                  
  2999                                  ; =============== S U B	R O U T	I N E ========================================
  3000                                  
  3001                                  ;   read_real_date reads real-time clock for date and returns the number
  3002                                  ;   of days elapsed since 1-1-80 in si
  3003                                  
  3004                                  read_real_date:	; proc near		
  3005 00001529 50                      		push	ax
  3006 0000152A 51                      		push	cx
  3007 0000152B 52                      		push	dx
  3008 0000152C 30E4                    		xor	ah, ah		; throw	away clock roll	over
  3009 0000152E CD1A                    		int	1Ah		; CLOCK	- GET TIME OF DAY
  3010                                  					; Return: CX:DX	= clock	count
  3011                                  					; AL = 00h if clock was	read or	written	(via AH=0,1) since the previous
  3012                                  					; midnight
  3013                                  					; Otherwise, AL	> 0
  3014 00001530 5A                      		pop	dx
  3015 00001531 59                      		pop	cx
  3016 00001532 58                      		pop	ax
  3017 00001533 50                      		push	ax
  3018 00001534 53                      		push	bx
  3019 00001535 51                      		push	cx
  3020 00001536 52                      		push	dx
  3021 00001537 2EC706[DB06]0100        		mov	word [cs:daycnt2], 1
  3022                                  					; REAL TIME CLOCK ERROR	FLAG (+1 DAY)
  3023 0000153E B404                    		mov	ah, 4
  3024 00001540 CD1A                    		int	1Ah		; CLOCK	- READ DATE FROM REAL TIME CLOCK (AT,XT286,CONV,PS)
  3025                                  					; Return: DL = day in BCD
  3026                                  					; DH = month in	BCD
  3027                                  					; CL = year in BCD
  3028                                  					; CH = century (19h or 20h)
  3029 00001542 7303                    		jnb	short read_ok
  3030 00001544 E99300                  		jmp	r_d_ret
  3031                                  ;-----------------------------------------------------------------------------
  3032                                  
  3033                                  read_ok:				
  3034 00001547 882E[BF06]              		mov	[bin_date_time], ch
  3035 0000154B 880E[C006]              		mov	[bin_date_time+1], cl
  3036 0000154F 8836[C106]              		mov	[bin_date_time+2], dh
  3037 00001553 8816[C206]              		mov	[bin_date_time+3], dl
  3038 00001557 2EC706[DB06]0200        		mov	word [cs:daycnt2], 2 ; READ OF R-T CLOCK SUCCESSFUL
  3039 0000155E E84201                  		call	bcd_verify	; verify bcd values in range
  3040 00001561 7277                    		jb	short r_d_ret	;  some	value out of range
  3041 00001563 2EC706[DB06]0300        		mov	word [cs:daycnt2], 3
  3042 0000156A E8E600                  		call	date_verify
  3043 0000156D 726B                    		jb	short r_d_ret
  3044 0000156F 2EC706[DB06]0000        		mov	word [cs:daycnt2], 0
  3045 00001576 E8AA00                  		call	in_bin
  3046 00001579 A0[C006]                		mov	al, [bin_date_time+1]
  3047 0000157C 98                      		cbw
  3048 0000157D 803E[BF06]14            		cmp	byte [bin_date_time], 20 ; 20th century?
  3049 00001582 7503                    		jnz	short century_19 ; no
  3050 00001584 83C064                  		add	ax, 100		; add in a century
  3051                                  
  3052                                  century_19:				
  3053 00001587 83E850                  		sub	ax, 80		; subtract off 1-1-80
  3054 0000158A B104                    		mov	cl, 4		; leap year every 4
  3055 0000158C F6F1                    		div	cl		; al= #	leap year blocks, ah= remainder
  3056 0000158E 88E3                    		mov	bl, ah		; save odd years
  3057 00001590 98                      		cbw			; zero ah
  3058 00001591 B9B505                  		mov	cx, 1461	; 366+(3*365)
  3059                                  					; # of days in leap year blocks
  3060 00001594 F7E1                    		mul	cx
  3061 00001596 2EA3[DB06]              		mov	[cs:daycnt2], ax ; SAVE COUNT OF DAYS
  3062 0000159A 88D8                    		mov	al, bl		; get odd years	count
  3063 0000159C 98                      		cbw
  3064 0000159D 09C0                    		or	ax, ax
  3065 0000159F 740C                    		jz	short leap_year
  3066 000015A1 B96D01                  		mov	cx, 365		; days in year
  3067 000015A4 F7E1                    		mul	cx
  3068 000015A6 2E0106[DB06]            		add	[cs:daycnt2], ax ; ADD ON DAYS IN ODD YEARS
  3069 000015AB EB07                    		jmp	short leap_adjustment ;	account	for leap year
  3070                                  					; possibly account for a leap day
  3071                                  ;-----------------------------------------------------------------------------
  3072                                  
  3073                                  leap_year:				
  3074 000015AD 803E[C106]02            		cmp	byte [bin_date_time+2], 2 ; is	month february?
  3075 000015B2 7605                    		jbe	short no_leap_adjustment ; jan or feb. no leap day yet.
  3076                                  leap_adjustment:			
  3077 000015B4 2EFF06[DB06]            		inc	word [cs:daycnt2] ; account for leap day
  3078                                  no_leap_adjustment:			
  3079 000015B9 8A0E[C206]              		mov	cl, [bin_date_time+3] ; get days of month
  3080 000015BD 30ED                    		xor	ch, ch
  3081 000015BF 49                      		dec	cx		; because of offset from day 1,	not day	0
  3082 000015C0 2E010E[DB06]            		add	[cs:daycnt2], cx ; GET DAYS IN MONTHS PRECEEDING
  3083 000015C5 8A0E[C106]              		mov	cl, [bin_date_time+2] ; get month
  3084 000015C9 30ED                    		xor	ch, ch
  3085 000015CB 49                      		dec	cx		; january starts at offset 0
  3086 000015CC D1E1                    		shl	cx, 1		; word offset
  3087 000015CE BE[C306]                		mov	si, month_table
  3088 000015D1 01CE                    		add	si, cx
  3089                                  		; 16/10/2022
  3090                                  		; ds must be same with cs here, if so..
  3091                                  		; what for cs: prefixes are used !?)
  3092                                  		; mov	ax, [cs:si]
  3093                                  		; mov	ax, [si] ; 16/10/2022 (MSDOS 5.0 IO.SYS - BIOSDATA:15D5h)
  3094 000015D3 8B04                    		mov	ax, [si]	; mov ax, [cs:si]
  3095                                  					; get #	days in	previous months
  3096 000015D5 2E0106[DB06]            		add	[cs:daycnt2], ax
  3097                                  r_d_ret:				
  3098 000015DA 2E8B36[DB06]            		mov	si, [cs:daycnt2]
  3099 000015DF 5A                      		pop	dx
  3100 000015E0 59                      		pop	cx
  3101 000015E1 5B                      		pop	bx
  3102 000015E2 58                      		pop	ax
  3103 000015E3 C3                      		retn
  3104                                  
  3105                                  ;-----------------------------------------------------------------------------
  3106                                  
  3107                                  r_t_retj:				
  3108 000015E4 31C9                    		xor	cx, cx
  3109 000015E6 31D2                    		xor	dx, dx
  3110 000015E8 EB38                    		jmp	short r_t_ret
  3111                                  
  3112                                  ; =============== S U B	R O U T	I N E ========================================
  3113                                  
  3114                                  ; read_real_time reads the time from the rtc. on exit, it has the number of
  3115                                  ; ticks (at 18.2 ticks per sec.) in cx:dx.
  3116                                  
  3117                                  read_real_time:	; proc near		
  3118 000015EA B402                    		mov	ah, 2
  3119 000015EC CD1A                    		int	1Ah		; CLOCK	- READ REAL TIME CLOCK (AT,XT286,CONV,PS)
  3120                                  					; Return: CH = hours in	BCD
  3121                                  					; CL = minutes in BCD
  3122                                  					; DH = seconds in BCD
  3123 000015EE 72F4                    		jb	short r_t_retj
  3124 000015F0 882E[BF06]              		mov	[bin_date_time], ch ; hours
  3125 000015F4 880E[C006]              		mov	[bin_date_time+1], cl ; minutes
  3126 000015F8 8836[C106]              		mov	[bin_date_time+2], dh ; seconds
  3127 000015FC C606[C206]00            		mov	byte [bin_date_time+3], 0 ; unused for time
  3128 00001601 E89F00                  		call	bcd_verify
  3129 00001604 72DE                    		jb	short r_t_retj
  3130 00001606 E88500                  		call	time_verify
  3131 00001609 72D9                    		jb	short r_t_retj
  3132 0000160B E81500                  		call	in_bin		; from bcd to bin
  3133 0000160E 8A2E[BF06]              		mov	ch, [bin_date_time]
  3134 00001612 8A0E[C006]              		mov	cl, [bin_date_time+1]
  3135 00001616 8A36[C106]              		mov	dh, [bin_date_time+2]
  3136 0000161A 8A16[C206]              		mov	dl, [bin_date_time+3]
  3137                                  		; 16/10/2022
  3138                                  		; 17/09/2022
  3139                                  		; 31/05/2019
  3140 0000161E FF1E[E206]              		call	far [ttticks] 
  3141                                  		;call	dword ptr ttticks ; note: indirect far call
  3142                                  					; cx:dx	= number of ticks
  3143                                  					; (at 18.2 ticks per sec.)
  3144                                  r_t_ret:				
  3145 00001622 C3                      		retn
  3146                                  
  3147                                  ; =============== S U B	R O U T	I N E =======================================
  3148                                  
  3149                                  ;   in_bin converts bin_date_time values from bcd to bin
  3150                                  
  3151                                  in_bin:		; proc near		
  3152 00001623 A0[BF06]                		mov	al, [bin_date_time] ; century or hours
  3153 00001626 E81F00                  		call	bcd_to_bin
  3154 00001629 A2[BF06]                		mov	[bin_date_time], al
  3155 0000162C A0[C006]                		mov	al, [bin_date_time+1] ; years or minutes
  3156 0000162F E81600                  		call	bcd_to_bin
  3157 00001632 A2[C006]                		mov	[bin_date_time+1], al
  3158 00001635 A0[C106]                		mov	al, [bin_date_time+2] ; months or seconds
  3159 00001638 E80D00                  		call	bcd_to_bin
  3160 0000163B A2[C106]                		mov	[bin_date_time+2], al
  3161 0000163E A0[C206]                		mov	al, [bin_date_time+3] ; days (not used for time)
  3162 00001641 E80400                  		call	bcd_to_bin
  3163 00001644 A2[C206]                		mov	[bin_date_time+3], al
  3164 00001647 C3                      		retn
  3165                                  
  3166                                  ; =============== S U B	R O U T	I N E =======================================
  3167                                  
  3168                                  ;   bcd_to_bin converts two bcd nibbles in al (value <= 99.) to
  3169                                  ;   a binary representation in al
  3170                                  ;   ah is destroyed
  3171                                  
  3172                                  bcd_to_bin:	; proc near		
  3173 00001648 88C4                    		mov	ah, al
  3174 0000164A 240F                    		and	al, 0Fh
  3175 0000164C B104                    		mov	cl, 4
  3176 0000164E D2EC                    		shr	ah, cl
  3177 00001650 D50A                    		aad
  3178 00001652 C3                      		retn
  3179                                  
  3180                                  ; =============== S U B	R O U T	I N E ========================================
  3181                                  
  3182                                  ;   date_verify loosely checks bcd date values to be in range
  3183                                  ;   in bin_date_time
  3184                                  
  3185                                  date_verify:	; proc near		
  3186 00001653 803E[BF06]20            		cmp	byte [bin_date_time], 20h ; century check
  3187 00001658 7732                    		ja	short date_error
  3188 0000165A 740E                    		jz	short century_20 ; jmp in 21th century
  3189 0000165C 803E[BF06]19            		cmp	byte [bin_date_time], 19h ; century check
  3190                                  		;jb	short date_error
  3191                                  		; 12/12/2022
  3192 00001661 722A                    		jb	short date_err2
  3193 00001663 803E[C006]80            		cmp	byte [bin_date_time+1], 80h ; year check
  3194                                  		;jb	short date_error
  3195                                  		; 12/12/2022
  3196 00001668 7223                    		jb	short date_err2
  3197                                  century_20:				
  3198 0000166A 803E[C006]99            		cmp	byte [bin_date_time+1], 99h ; year check
  3199 0000166F 771B                    		ja	short date_error
  3200 00001671 803E[C106]12            		cmp	byte [bin_date_time+2], 12h ; month check
  3201 00001676 7714                    		ja	short date_error
  3202 00001678 803E[C106]00            		cmp	byte [bin_date_time+2], 0
  3203                                  		;jbe	short date_error
  3204 0000167D 760D                    		jna	short date_error
  3205 0000167F 803E[C206]31            		cmp	byte [bin_date_time+3], 31h ; day check
  3206 00001684 7706                    		ja	short date_error
  3207                                  		;cmp	byte [bin_date_time+3], 0 ; day check
  3208                                  		;;jbe	short date_error
  3209                                  		;jna	short date_error
  3210                                  		; 12/12/2022
  3211                                  		; cf=0
  3212                                  		;clc
  3213                                  		; 12/12/2022
  3214 00001686 803E[C206]01            		cmp	byte [bin_date_time+3], 1 ; day check
  3215 0000168B C3                      		retn
  3216                                  ;-----------------------------------------------------------------------------
  3217                                  
  3218                                  date_error:				
  3219 0000168C F9                      		stc
  3220                                  date_err2:
  3221 0000168D C3                      		retn
  3222                                  
  3223                                  ; =============== S U B	R O U T	I N E ========================================
  3224                                  
  3225                                  ; time_verify very loosely checks bcd date values to be in range
  3226                                  ; in bin_date_time
  3227                                  
  3228                                  time_verify:	; proc near		
  3229 0000168E 803E[BF06]24            		cmp	byte [bin_date_time], 24h ; hour check
  3230 00001693 770C                    		ja	short time_error
  3231 00001695 803E[C006]59            		cmp	byte [bin_date_time+1], 59h ; minute check
  3232 0000169A 7705                    		ja	short time_error
  3233                                  		; 12/12/2022h
  3234                                  		;cmp	byte [bin_date_time+2], 59h ; second check
  3235                                  		;ja	short time_error
  3236                                  		;clc
  3237                                  		;retn
  3238                                  		; 12/12/2022
  3239 0000169C 803E[C106]5A            		cmp	byte  [bin_date_time+2], 5Ah	
  3240                                  time_error:
  3241                                  bv_error:	
  3242 000016A1 F5                      		cmc	; cf=0 -> cf=1, cf=1 -> cf=0
  3243 000016A2 C3                      		retn
  3244                                  
  3245                                  ; ----------------------------------------------------------------------------
  3246                                  
  3247                                  ;time_error:				
  3248                                  		;stc
  3249                                  		;retn
  3250                                  
  3251                                  ; =============== S U B	R O U T	I N E ========================================
  3252                                  
  3253                                  ;   bcd_verify checks values in bin_date_time to be valid
  3254                                  ;   bcd numerals.  carry set if any nibble out of range
  3255                                  
  3256                                  bcd_verify:	; proc near		
  3257 000016A3 B90400                  		mov	cx, 4		; 4 bytes to check
  3258 000016A6 BB[BF06]                		mov	bx, bin_date_time
  3259                                  bv_loop:				
  3260 000016A9 8A07                    		mov	al, [bx]	; get a	bcd number (0..99)
  3261 000016AB 88C4                    		mov	ah, al
  3262 000016AD 250FF0                  		and	ax, 0F00Fh	; 10's place in high ah, 1's in al
  3263                                  					; is 1's place in range?
  3264 000016B0 3C0A                    		cmp	al, 10
  3265 000016B2 77ED                    		ja	short bv_error	; jmp out of range
  3266 000016B4 D0EC                    		shr	ah, 1
  3267 000016B6 D0EC                    		shr	ah, 1
  3268 000016B8 D0EC                    		shr	ah, 1
  3269 000016BA D0EC                    		shr	ah, 1
  3270 000016BC 80E40F                  		and	ah, 0Fh		; get rid of any erroneous bits
  3271 000016BF 80FC0A                  		cmp	ah, 10		; is 10's place in range
  3272 000016C2 77DD                    		ja	short bv_error	; jmp out of range
  3273 000016C4 43                      		inc	bx		; next byte
  3274 000016C5 49                      		dec	cx
  3275 000016C6 75E1                    		jnz	short bv_loop
  3276 000016C8 F8                      		clc			; set success flag
  3277 000016C9 C3                      		retn
  3278                                  ; ----------------------------------------------------------------------------
  3279                                  
  3280                                  		; 12/12/2022
  3281                                  ;bv_error:				
  3282                                  		;stc			; set error flag
  3283                                  		;retn
  3284                                  
  3285                                  ; ----------------------------------------------------------------------------
  3286                                  
  3287                                  endk09:
  3288                                  
  3289                                  ; ----------------------------------------------------------------------------
  3290                                  
  3291                                  ;------------------------------------------------------------------------
  3292                                  ;									:
  3293                                  ;	System initialization						:
  3294                                  ;									:
  3295                                  ;	The entry conditions are established by the bootstrap		:
  3296                                  ;	loader and are considered unknown. The following jobs		:
  3297                                  ;	will be performed by this module:				:
  3298                                  ;									:
  3299                                  ;	1.	All device initialization is performed			:
  3300                                  ;	2.	A local stack is set up and DS:SI are set		:
  3301                                  ;		to point to an initialization table. Then		:
  3302                                  ;		an inter-segment call is made to the first		:
  3303                                  ;		byte of the dos 					:
  3304                                  ;	3.	Once the dos returns from this call the ds		:
  3305                                  ;		register has been set up to point to the start		:
  3306                                  ;		of free memory. The initialization will then		:
  3307                                  ;		load the command program into this area 		:
  3308                                  ;		beginning at 100 hex and transfer control to		:
  3309                                  ;		this program.						:
  3310                                  ;									:
  3311                                  ;------------------------------------------------------------------------
  3312                                  
  3313                                  ; 01/10/2022
  3314                                  ; 08/01/2018 - Retro DOS v4.0
  3315                                  
  3316                                  ; drvfat must be the first location of freeable space!
  3317                                  
  3318                                  
  3319                                  align 2
  3320                                  		;db 90h
  3321                                  
  3322                                  ; 20/12/2022 - Retro DOS v4.0 (MSDOS 5.0 combined/single kernel file)
  3323                                  ; ((no need to read/load 'MSDOS.SYS', it is already loaded))
  3324                                  ; (((bios_l,bios_h,doscnt,fatloc,md_sectorsize,temp_cluster,last_fat_sec_num
  3325                                  ;   would be used to read 'MSDOS.SYS' from disk, now they are not needed)))
  3326                                  	
  3327 000016CA 0000                    drvfat:		dw 0			; drive	and fat	id of dos
  3328                                  ;bios_l:	dw 0			; first	sector of data (low word)
  3329                                  ;bios_h:	dw 0			; first	sector of data (high word)
  3330                                  ;doscnt:	dw 0			; how many sectors to read
  3331 000016CC 00                      fbigfat:	db 0			; flags	for drive
  3332                                  ;fatloc:	dw 0			; seg addr of fat sector
  3333 000016CD 0000                    init_bootseg:	dw 0			; seg addr of buffer for reading boot record
  3334 000016CF 80                      rom_drv_num:	db 80h			; rom drive number
  3335                                  ;md_sectorsize:	dw 200h			; used by get_fat_sector proc.
  3336                                  ;temp_cluster:	dw 0			; used by get_fat_sector proc.
  3337                                  ;last_fat_sec_num: dw 0FFFFh		; used by get_fat_sector proc.
  3338                                  
  3339                                  ; the following two bytes are used to save the info returned by int 13, ah = 8
  3340                                  ; call to determine drive parameters.
  3341                                  
  3342 000016D0 02                      num_heads:	db 2			; number of heads returned by rom
  3343 000016D1 09                      sec_trk:	db 9			; sec/trk returned by rom
  3344 000016D2 28                      num_cyln:	db 40			; number of cylinders returned by rom
  3345 000016D3 00                      fakefloppydrv:	db 0			; if 1,	then no	diskette drives	in the system.
  3346                                  
  3347                                  ; ----------------------------------------------------------------------------
  3348                                  
  3349 000016D4 0002000140000000        disktable:	dw 512,	256, 64, 0	; warning !!! old values
  3350 000016DC 0008010270000000        		dw 2048, 513, 112, 0
  3351 000016E4 0020020400010000        		dw 8192, 1026, 256, 0
  3352 000016EC A87F030800020000        		dw 32680, 2051,	512, 0	; warning !!! old values
  3353 000016F4 FFFF041000040000        		dw 65535, 4100,	1024, 0	; default disktable under
  3354                                  					; the assumption of total fat size <= 128 kb,
  3355                                  					; and the maximum size of fat entry = 16 bit.
  3356                                  
  3357 000016FC 0000A87F0308000200-     disktable2:	dw 0, 32680, 2051, 512,	0 
  3357 00001705 00                 
  3358                                  					; for compatibility.
  3359 00001706 040000000204000240-     		dw 4, 0, 402h, 200h, 40h ; covers upto 134 mb media.
  3359 0000170F 00                 
  3360                                  					; fbig = 40h
  3361 00001710 080000000308000240-     		dw 8, 0, 803h, 200h, 40h ; upto	268 mb
  3361 00001719 00                 
  3362 0000171A 100000000410000240-     		dw 10h,	0, 1004h, 200h,	40h ; upto 536 mb
  3362 00001723 00                 
  3363 00001724 200000000520000240-     		dw 20h,	0, 2005h, 200h,	40h ; upto 1072	mb
  3363 0000172D 00                 
  3364 0000172E 400000000640000240-     		dw 40h,	0, 4006h, 200h,	40h ; upto 2144	mb
  3364 00001737 00                 
  3365 00001738 800000000780000240-     		dw 80h,	0, 8007h, 200h,	40h ; upto 4288	mb...
  3365 00001741 00                 
  3366                                  					
  3367                                  ; ----------------------------------------------------------------------------
  3368                                  
  3369                                  ;******************************************************
  3370                                  ;variables for mini disk initialization
  3371                                  ;******************************************************
  3372                                  
  3373                                  ; 01/10/2022
  3374                                  ; [ Note: Minidisk == logical dos drive (in extended dos partition) ] 
  3375                                  
  3376 00001742 00                      rom_minidisk_num: db 0			; temp variable	for phys unit
  3377 00001743 00                      hnum:		db 0			; real number of hardfiles
  3378 00001744 [8706]                  last_dskdrv_table: dw dskdrvs		; index	into dskdrv table
  3379 00001746 [1709]                  end_of_bdss:	dw bdss			; offset value of the ending address
  3380                                  					; of bds table. needed to figure out
  3381                                  					; the dosdatasg address.
  3382 00001748 0000                    mini_hdlim:	dw 0			
  3383 0000174A 0000                    mini_seclim:	dw 0
  3384                                  
  3385                                  ;end of mini disk init variables **********************
  3386                                  
  3387                                  ; ----------------------------------------------------------------------------
  3388                                  			
  3389 0000174C 30312F31302F383400      bios_date:	db '01/10/84',0 	; used for checking at rom bios	date.
  3390                                  
  3391                                  ; 13/12/2022
  3392                                  %if 0
  3393                                  
  3394                                  ;align 2
  3395                                  		db  90h	
  3396                                  
  3397                                  ; the following are the recommended bpbs for the media that we know of so far.
  3398                                  
  3399                                  ;struc bpbx
  3400                                  ;   resw 1 ; 512
  3401                                  ;   resb 1
  3402                                  ;   resw 1 ; 1
  3403                                  ;   resb 1 ; 2
  3404                                  ;   resw 1
  3405                                  ;   resw 1
  3406                                  ;   resb 1
  3407                                  ;   resw 1
  3408                                  ;   resw 1
  3409                                  ;   resw 1 ; 2
  3410                                  ;   resw 1
  3411                                  ;   resw 1 ; hidden sector high
  3412                                  ;   resd 1 ; extended total sectors
  3413                                  ;.size:
  3414                                  ;endstruc
  3415                                  
  3416                                  ; 08/01/2019 - Retro DOS v4.0
  3417                                  
  3418                                  ; 20/04/2019
  3419                                  
  3420                                  ; 01/10/2022 - Retro DOS v4.0 (MSDOS 5.0) IO.SYS
  3421                                  
  3422                                  ; 09/12/2022
  3423                                  BPB48T:
  3424                                  ;bpb48t:	; bpbx <512, 2, 1, 2, 112, 720, 0FDh, 2, 9, 2, 0, 0, 0, 0> 
  3425                                  		; 48 tpi diskettes	;
  3426                                  		dw	512		; physical sector size in bytes
  3427                                  		db	2		; sectors/allocation unit
  3428                                  		dw	1		; reserved sectors for dos
  3429                                  		db	2		; number of allocation tables
  3430                                  		dw	112		; number of directory entries
  3431                                  		dw	720 ; 2*9*40	; number of sectors (at 512 bytes each)
  3432                                  		db	0FDh		; media descriptor
  3433                                  		dw	2		; number of fat sectors
  3434                                  		dw	9		; sectors per track
  3435                                  		dw	2		; heads
  3436                                  		dw	0		; hidden sector count (low word)
  3437                                  		dw	0		; hidden sector (high)
  3438                                  		dw	0		; number of sectors (low)
  3439                                  		dw	0		; number of sectors (high)					
  3440                                  
  3441                                  		db 90h
  3442                                  ;align 2
  3443                                  BPB96T:
  3444                                  ;bpb96t:	; bpbx <512, 1, 1, 2, 224, 2400, 0F9h, 7, 15, 2, 0, 0, 0, 0> 
  3445                                  		; 96 tpi diskettes	;
  3446                                  		dw	512		; physical sector size in bytes
  3447                                  		db	1		; sectors/allocation unit
  3448                                  		dw	1		; reserved sectors for dos
  3449                                  		db	2		; number of allocation tables
  3450                                  		dw	224		; number of directory entries
  3451                                  		dw	2400 ; 2*15*80	; number of sectors (at 512 bytes each)
  3452                                  		db	0F9h		; media descriptor
  3453                                  		dw	7		; number of fat sectors
  3454                                  		dw	15		; sectors per track
  3455                                  		dw	2		; heads
  3456                                  		dw	0		; hidden sector count (low word)
  3457                                  		dw	0		; hidden sector (high)
  3458                                  		dw	0		; number of sectors (low)
  3459                                  		dw	0		; number of sectors (high)
  3460                                  
  3461                                  		db 90h
  3462                                  ;align 2
  3463                                  BPB35:
  3464                                  ;bpb35:		; bpbx <512, 2, 1, 2, 112, 1440, 0F9h, 3, 9, 2, 0, 0, 0, 0> 
  3465                                  		; 3.5" diskettes - 720 KB ;		
  3466                                  		dw	512		; physical sector size in bytes
  3467                                  		db	2		; sectors/allocation unit
  3468                                  		dw	1		; reserved sectors for dos
  3469                                  		db	2		; number of allocation tables
  3470                                  		dw	112		; number of directory entries
  3471                                  		dw	1440 ; 2*9*80	; number of sectors (at 512 bytes each)
  3472                                  		db	0F9h		; media descriptor
  3473                                  		dw	3		; number of fat sectors
  3474                                  		dw	9		; sectors per track
  3475                                  		dw	2		; heads
  3476                                  		dw	0		; hidden sector count (low word)
  3477                                  		dw	0		; hidden sector (high)
  3478                                  		dw	0		; number of sectors (low)
  3479                                  		dw	0		; number of sectors (high)
  3480                                  
  3481                                  		db 90h
  3482                                  ;align 2
  3483                                  
  3484                                  ;align 2
  3485                                  ;BPB144:
  3486                                  ;bpb144:	; Retro DOS v4.0 feature only !	; 1.44MB diskettes
  3487                                  ;
  3488                                  ;		dw	512		; physical sector size in bytes
  3489                                  ;		db	1		; sectors/allocation unit
  3490                                  ;		dw	1		; reserved sectors for dos
  3491                                  ;		db	2		; number of allocation tables
  3492                                  ;		dw	224		; number of directory entries
  3493                                  ;		dw	2880 ; 2*18*80	; number of sectors (at 512 bytes each)
  3494                                  ;		db	0F0h		; media descriptor
  3495                                  ;		dw	9		; number of fat sectors
  3496                                  ;		dw	18		; sectors per track
  3497                                  ;		dw	2		; heads
  3498                                  ;		dw	0		; hidden sector count (low word)
  3499                                  ;		dw	0		; hidden sector (high)
  3500                                  ;		dw	0		; number of sectors (low)
  3501                                  ;		dw	0		; number of sectors (high)
  3502                                  ;
  3503                                  ;		db 90h
  3504                                  ;align 2
  3505                                  
  3506                                  BPB288:
  3507                                  ;bpb288:	; bpbx <512, 2, 1, 2, 240, 5760, 0F0h, 9, 36, 2, 0, 0, 0, 0>
  3508                                  		; 3.5" diskettes - 2.88 MB ;	 
  3509                                  		dw	512		; physical sector size in bytes
  3510                                  		db	2		; sectors/allocation unit
  3511                                  		dw	1		; reserved sectors for dos
  3512                                  		db	2		; number of allocation tables
  3513                                  		dw	240		; number of directory entries
  3514                                  		dw	5760 ; 2*36*80	; number of sectors (at 512 bytes each)
  3515                                  		db	0F0h		; media descriptor
  3516                                  		dw	3		; number of fat sectors
  3517                                  		dw	9		; sectors per track
  3518                                  		dw	2		; heads
  3519                                  		dw	0		; hidden sector count (low word)
  3520                                  		dw	0		; hidden sector (high)
  3521                                  		dw	0		; number of sectors (low)
  3522                                  		dw	0		; number of sectors (high)
  3523                                  
  3524                                  		db 90h			;
  3525                                  ;align 2
  3526                                  
  3527                                  %endif
  3528                                  
  3529                                  ; ----------------------------------------------------------------------------
  3530                                  					; align	2
  3531                                  ; 09/12/2022
  3532                                  %if 0
  3533                                  bpbtable:	dw bpb48t		; 48tpi	drives
  3534                                  		dw bpb96t		; 96tpi	drives
  3535                                  		dw bpb35		; 3.5" drives
  3536                                  		dw bpb35		; unused 8" diskette
  3537                                  		dw bpb35		; unused 8" diskette
  3538                                  		dw bpb35		; used for hard	disk
  3539                                  		dw bpb35		; used for tape	drive
  3540                                  		dw bpb35		; FFOTHER
  3541                                  		dw bpb35		; ERIMO
  3542                                  		dw bpb288		; 2.88MB drive
  3543                                  		;
  3544                                  		;dw bpb144		; 1.44MB drive - Retro DOS v4.0 feature !
  3545                                  %endif
  3546                                  
  3547                                  ; 13/12/2022
  3548                                  %if 0
  3549                                  BPBTABLE:	dw BPB48T		; 48tpi	drives
  3550                                  		dw BPB96T		; 96tpi	drives
  3551                                  		dw BPB35		; 3.5" drives
  3552                                  		dw BPB35		; unused 8" diskette
  3553                                  		dw BPB35		; unused 8" diskette
  3554                                  		dw BPB35		; used for hard	disk
  3555                                  		dw BPB35		; used for tape	drive
  3556                                  		dw BPB35		; FFOTHER
  3557                                  		dw BPB35		; ERIMO
  3558                                  		dw BPB288		; 2.88MB drive
  3559                                  		;
  3560                                  		;dw BPB144		; 1.44MB drive - Retro DOS v4.0 feature !
  3561                                  
  3562                                  %endif
  3563                                  
  3564                                  ; ----------------------------------------------------------------------------
  3565                                  
  3566                                  ;	entry point to call utility functions in Bios_Code. At this time,
  3567                                  ;	  we aren't doing any A20 switching. During MSINIT time Bios_Code
  3568                                  ;	  will not yet be moved to its final resting place, so we know
  3569                                  ;	  it'll be low.
  3570                                  ;
  3571                                  ;	to use this function, do a "push cs" and load bp with the offset of
  3572                                  ;	  the function you want to call in Bios_Code. This routine will
  3573                                  ;	  push the address of a retf in Bios_Code onto the stack which
  3574                                  ;	  will get executed when the utility function finishes. It will
  3575                                  ;	  then transfer control to Bios_Code:bp using a couple of pushes
  3576                                  ;	  and a retf
  3577                                  
  3578                                  ; 16/10/2022
  3579                                  ;BC_RETF equ bc_retf - DOSBIOSEG_2C7h
  3580                                  ; 09/12/2022
  3581                                  BC_RETF equ bc_retf
  3582                                  
  3583                                  addr_of_bcretf:	;dw 0C8h		; dw bc_retf
  3584                                  					; 2C7h:0C8h = 70h:2638h
  3585 00001755 [C800]                  		dw BC_RETF
  3586                                  
  3587                                  ; ----------------------------------------------------------------------------
  3588                                  
  3589                                  call_bios_code:	; proc far			
  3590 00001757 2EFF36[5517]            		push	word [cs:addr_of_bcretf] 
  3591                                  					; set up near return to far return
  3592 0000175C 2EFF36[E006]            		push	word [cs:cdev+2] ; push Bios_Code segment
  3593 00001761 55                      		push	bp		; save offset of utility function
  3594 00001762 CB                      		retf			; far jump to (DOS)BIOS code
  3595                                  
  3596                                  ; ----------------------------------------------------------------------------
  3597                                  		
  3598                                  		; 20/12/2022
  3599                                  ;flp_drvs	db 0			
  3600                                  
  3601                                  ; ----------------------------------------------------------------------------
  3602                                  
  3603                                  ; 01/10/2022 - Retro DOS v4.0 (MSDOS 5.0, classic/old MICROSOFT DOS method)
  3604                                  ; 20/12/2022 - Retro DOS v4.0 (combined kernel files, original/new method) (*)
  3605                                  ;      (*) (for using Retro DOS kernel 'MSDOS.SYS' with Retro DOS boot sector)
  3606                                  
  3607                                  ;-----------------------------------------------------------------------------
  3608                                  ; entry point from boot sector
  3609                                  ;-----------------------------------------------------------------------------
  3610                                  
  3611                                  init:		; 27/12/2018
  3612                                  		; MSDOS 6.0 (MSINIT.ASM)
  3613                                  		;=============================================================
  3614                                  		;
  3615                                  		; entry from boot sector. the register contents are:
  3616                                  		;
  3617                                  		;   dl = int 13 drive number we booted from
  3618                                  		;   ch = media byte
  3619                                  		;   bx = first data sector on disk.
  3620                                  		;   ax = first data sector (high)
  3621                                  		;   di = sectors/fat for the boot media.
  3622                                  
  3623                                  		; 07/04/2018
  3624                                  		;=============================================================
  3625                                  		; Retro DOS v2.0 - registers from FD Boot Sector 
  3626                                                  ; DL = [bsDriveNumber]
  3627                                  		; DH = [bsMedia]
  3628                                  		; AX = [bsSectors] ; Total sectors
  3629                                  		; DS = 0, SS = 0
  3630                                  		; BP = 7C00h
  3631                                  	
  3632                                  ; 20/12/2022
  3633                                  ; Changing original MSDOS 5.0 IO.SYS init code with Retro DOS v4.0 init code.		
  3634                                  %if 0	
  3635                                  		cli
  3636                                  
  3637                                  		push	ax
  3638                                  		xor	ax, ax
  3639                                  		mov	ds, ax
  3640                                  		pop	ax
  3641                                  %endif
  3642                                  
  3643                                  ; 20/12/2022 - Retro DOS v4.0 (combined kernel)
  3644                                  
  3645                                  KERNEL_SEGMENT equ 70h	; (DOS BIOSDATA SEGMENT)
  3646                                  BSSECPERTRACK equ 18h	; boot sector offset 18h (for Retro DOS & MSDOS)	
  3647                                  
  3648                                  ;-----------------------------------------------------------------------------
  3649                                  ; initialization - stage 1
  3650                                  ;-----------------------------------------------------------------------------
  3651                                  ; 02/06/2018 - Retro DOS v3.0
  3652                                  		
  3653                                  		; 21/12/2022
  3654                                  		; Move Retro DOS v2.0 boot sector parameters to 0060h:0
  3655                                  		;mov	bx, 60h
  3656                                  		;mov	es, bx
  3657                                  		;mov	si, bp
  3658                                  		;sub	di, di
  3659                                  		;mov	cx, 35 ; 70 bytes, 35 words
  3660                                  		;;mov	cl, 35
  3661                                  		;rep	movsw
  3662                                  
  3663 00001763 0E                      		push	cs
  3664 00001764 1F                      		pop	ds
  3665                                  
  3666                                  		; 20/03/2019 - Retro DOS v4.0
  3667                                  		;cli		; turn interrupts off while manupulating stack
  3668                                  		;mov	ss, cx	; set stack segment register
  3669 00001765 BC0007                  		mov	sp, 0700h ; move stack pointer to safe place
  3670                                  		;sti		; turn interrupts on
  3671                                  
  3672                                  		; 27/03/2018
  3673                                  		;mov	cx, KERNEL_SIZE	; words !
  3674                                  
  3675                                  		; 20/03/2019
  3676 00001768 B90080                  		mov	cx, 32768 ; 65536 bytes
  3677                                  
  3678                                  		; 21/12/2022
  3679                                  		; 07/04/2018
  3680 0000176B BB7000                  		mov	bx, KERNEL_SEGMENT ; 0070h
  3681                                  		;mov	bl, KERNEL_SEGMENT
  3682 0000176E 8EC3                    		mov	es, bx
  3683 00001770 31FF                    		xor	di, di
  3684 00001772 89FE                    		mov	si, di
  3685                                  		
  3686                                  		; Move KERNEL file from 1000h:0 to 0070h:0
  3687                                  		; (Retro DOS v2 BS loads 'MSDOS.SYS' at 1000h:0000h)
  3688 00001774 F3A5                    		rep	movsw
  3689                                  
  3690                                  		; 20/03/2019 - Retro DOS v4.0
  3691 00001776 53                      		push	bx
  3692 00001777 68[7B17]                		push	init0
  3693 0000177A CB                      		retf
  3694                                  init0:	
  3695                                  		; 20/12/2022
  3696                                  		; (combined kernel file > 64KB)
  3697                                  
  3698                                  		; 20/03/2019
  3699 0000177B B520                    		mov	ch, 20h
  3700 0000177D 8ED9                    		mov	ds, cx ; 2000h
  3701                                  		;mov	cx, 1070h
  3702 0000177F B97010                  		mov	cx, KERNEL_SEGMENT+1000h ; 20/12/2022
  3703 00001782 8EC1                    		mov	es, cx
  3704                                  		
  3705                                  		; 21/12/2022
  3706                                  		KERNEL_SIZE equ END_OF_KERNEL - BData_start
  3707                                  
  3708 00001784 B9[E049]                		mov	cx, KERNEL_SIZE - 32768
  3709                                  		;xor	si, si
  3710                                  		;xor	di, di
  3711 00001787 F3A5                    		rep	movsw
  3712                                  
  3713                                  		; 17/06/2018 
  3714 00001789 8EDB                    		mov	ds, bx
  3715                                  		; 21/03/2019
  3716 0000178B 8EC3                    		mov	es, bx
  3717                                  ;init0:
  3718                                  ;		;push	es
  3719                                  ;		push	bx ; 20/03/2019
  3720                                  ;		push	init1 ; 07/04/2018
  3721                                  ;		retf	; jump to 0070h:init1
  3722                                  ;init:
  3723                                  init1:
  3724                                  		; 20/12/2022
  3725                                  		; Change INT 1Eh diskette parameters table and INT 1Eh address
  3726                                  		; for full MSDOS compatibility.
  3727                                  
  3728 0000178D 8EC1                    		mov	es, cx ; 0
  3729 0000178F 8ED9                    		mov	ds, cx ; 0
  3730                                  
  3731 00001791 B82205                  		mov	ax, SEC9
  3732                                  
  3733                                  		;mov	bx, 1Eh*4  ; [0078h] ; INT 1Eh vector/pointer
  3734 00001794 B378                    		mov	bl, 1Eh*4
  3735                                  				; INT 1Eh points to diskette parms table
  3736                                  
  3737                                  		; check if the table is already at 0:SEC9 (0:0522h)
  3738                                   		; (do not move the DPT if is not original ROMBIOS table)
  3739                                  
  3740                                  		;;or	[bx+2],cx [(1Eh*4)+2] ; [007Ah] ; segment
  3741                                  		;;jnz	short mov_dpt
  3742                                  
  3743                                  		;cmp	ax, [bx]  ; [1Eh*4] = 0522h ?
  3744                                  		;je	short dont_mov_dpt
  3745                                  
  3746                                  		;mov	si, [bx] ; [1Eh*4]		
  3747                                  ;mov_dpt:
  3748                                  		;mov	ds, [bx+2] ; [(1Eh*4)+2] ; [007Ah] ; segment
  3749 00001796 C537                    		lds	si, [bx]
  3750 00001798 89C7                    		mov	di, ax  ; SEC9
  3751 0000179A B10B                    		mov	cl, 11
  3752                                  		;cld
  3753 0000179C F3A4                    		rep	movsb
  3754                                  
  3755                                  		; Set INT 1Eh vector/pointer to the new DPT address
  3756 0000179E 8ED9                    		mov	ds, cx ; 0
  3757 000017A0 8907                    		mov	[bx], ax ; SEC9	; [007Eh] ; 1Eh*4  ; offset
  3758 000017A2 894F02                  		mov	[bx+2], cx ; 0  ; [007Ah] ; 1Eh*4+2 ; segment
  3759                                  ;dont_mov_dpt:
  3760                                  
  3761                                  ; 20/12/2022 - Retro DOS v4.0
  3762                                  %if 0
  3763                                  		; 27/12/2018 - Retro DOS v4.0
  3764                                  		; 'Starting MS-DOS...' message
  3765                                  		; (MSDOS 6.21, IO.SYS Segment: 423h, Offset: 5673h)
  3766                                  		; (0070h:96A3h)
  3767                                  
  3768                                    	    	mov     si, SYSINIT_START+StartMsg ; 18/03/2019
  3769                                  		mov     ah, 0Eh
  3770                                  		;bh = 0
  3771                                          	mov     bl, 7		; "normal" attribute and page
  3772                                  startmsg_nxt_chr:  
  3773                                  		lodsb
  3774                                  		or	al, al
  3775                                          	jz	short startmsg_ok
  3776                                         
  3777                                  		int	10h		; video write
  3778                                          	jmp	short startmsg_nxt_chr
  3779                                  
  3780                                  ;flp_drvs:	db  0 	; 27/12/2018 - Retro DOS v4.0
  3781                                  
  3782                                  startmsg_ok:
  3783                                  
  3784                                  %endif
  3785                                  
  3786                                  ;-----------------------------------------------------------------------------
  3787                                  ; initialization - stage 2
  3788                                  ;-----------------------------------------------------------------------------
  3789                                  ; 20/12/2022 - Retro DOS v4.0 (combined kernel)
  3790                                  
  3791                                  
  3792                                  ; 19/03/2018
  3793                                  ; Retro DOS v2.0 (24/02/2018)
  3794                                  ; [REF: MSDOS 3.3, MSBIO, "MSINIT.ASM"  (24/07/1987)]
  3795                                  
  3796                                  ;------------------------------------------------------------------------
  3797                                  ;									:
  3798                                  ;	System initialization						:
  3799                                  ;									:
  3800                                  ;	The entry conditions are established by the bootstrap		:
  3801                                  ;	loader and are considered unknown. The following jobs		:
  3802                                  ;	will be performed by this module:				:
  3803                                  ;									:
  3804                                  ;	1.	All device initialization is performed			:
  3805                                  ;	2.	A local stack is set up and DS:SI are set		:
  3806                                  ;		to point to an initialization table. Then		:
  3807                                  ;		an inter-segment call is made to the first		:
  3808                                  ;		byte of the dos 					:
  3809                                  ;	3.	Once the dos returns from this call the ds		:
  3810                                  ;		register has been set up to point to the start		:
  3811                                  ;		of free memory. The initialization will then		:
  3812                                  ;		load the command program into this area 		:
  3813                                  ;		beginning at 100 hex and transfer control to		:
  3814                                  ;		this program.						:
  3815                                  ;									:
  3816                                  ;------------------------------------------------------------------------
  3817                                  		
  3818                                  		; 20/12/2022
  3819                                  		; ----------------------
  3820                                  		; Registers
  3821                                  		; ----------------------
  3822                                  		; DL = [bsDriveNumber]
  3823                                  		; DH = [bsMedia]
  3824                                  		; DS = 0, ES = 0, SS = 0
  3825                                  		; BP = 7C00h
  3826                                  		; SP = 700h
  3827                                  		; ----------------------
  3828                                  		; CX = 0				
  3829                                  
  3830                                  ; 02/10/2022 - 20/12/2022
  3831                                  ; ------------------------------------------------------------------------------
  3832                                  ; Note: Retro DOS v4.0 Kernel does not use/contain MSLOAD part of IO.SYS (5.0)
  3833                                  ; 	Because, Retro DOS v2 boot sector loads complete/entire MSDOS.SYS
  3834                                  ;	(RETRODOS.SYS) Kernel file (IO.SYS & MSDOS.SYS together).
  3835                                  ;	As result of boot sector ve init differences, Retro DOS init code (here)
  3836                                  ;	moves kernel to segment 70h at first, then sets diskette parameters
  3837                                  ;	at segment 50h (while MSDOS 5.0 boot sector and then MSLOAD sets this).
  3838                                  ; ------------------------------------------------------------------------------
  3839                                  
  3840                                  ; msload will check the extended boot record and set ax, bx accordingly.
  3841                                  ;
  3842                                  ;;	msload passes a 32 bit sector number hi word in ax and low in bx
  3843                                  ;;	save this in cs:bios_h and cs:bios_l. this is for the start of
  3844                                  ;;	data sector of the bios.
  3845                                  ;
  3846                                  ;		mov	[cs:bios_h], ax	; (start of) dos bios (IO.SYS) data sector
  3847                                  ;		mov	[cs:bios_l], bx
  3848                                  
  3849                                  ; with the following information from msload, we don't need the
  3850                                  ;     boot sector any more.-> this will solve the problem of 29 kb size
  3851                                  ;     limitation of msbio.com file.
  3852                                  
  3853                                  		; 21/12/2022
  3854 000017A5 FA                      		cli
  3855                                  
  3856 000017A6 0E                      		push	cs		; Save a peck of interrupt vectors...
  3857 000017A7 07                      		pop	es
  3858                                  		;push	cx
  3859                                  		;push	di
  3860                                  		; 20/12/2022
  3861 000017A8 B105                    		mov	cl, 5
  3862                                  		;mov	cx, 5		; NUMROMVECTORS
  3863                                  					; no. of rom vectors to	be saved
  3864                                  		;mov	si, offset RomVectors ; point to list of int vectors
  3865 000017AA BE[0001]                		mov	si, RomVectors
  3866                                  next_int_:		
  3867 000017AD 2E                      		cs	; 16/10/2022
  3868 000017AE AC                      		lodsb		
  3869                                  		;lods	byte ptr cs:[si] ; cs lodsb
  3870 000017AF 98                      		cbw			; ax = interrupt number
  3871 000017B0 D1E0                    		shl	ax, 1
  3872 000017B2 D1E0                    		shl	ax, 1		; int no * 4
  3873 000017B4 89C7                    		mov	di, ax		; interrupt vector address
  3874 000017B6 87F7                    		xchg	si, di		; rombios interrupt vector address in si
  3875                                  					; saving address in di
  3876                                  		;lodsw			; movsw
  3877                                  		;stosw
  3878                                  		;lodsw			; movsw
  3879                                  		;stosw			; save the vector
  3880                                  		; 20/12/2022
  3881 000017B8 A5                      		movsw
  3882 000017B9 A5                      		movsw		
  3883                                  
  3884 000017BA 87F7                    		xchg	si, di
  3885 000017BC E2EF                    		loop	next_int_
  3886                                  		
  3887                                  		;pop	di
  3888                                  		;pop	cx
  3889                                  
  3890                                  ; we need to save int13 in two places in case we are running on an at.
  3891                                  ; on ats we install the ibm supplied rom_bios patch which hooks
  3892                                  ; int13 ahead of orig13. since int19 must unhook int13 to point to the
  3893                                  ; rom int13 routine, we must have that rom address also stored away.
  3894                                  
  3895                                  		; 20/12/2022
  3896                                  		;mov	ax, [cs:Old13]	; save old13 in orig13 also
  3897                                  		;mov	[cs:Orig13], ax
  3898                                  		;mov	ax, [cs:Old13+2]
  3899                                  		;mov	[cs:Orig13+2], ax
  3900                                  
  3901                                  		; 16/10/2022
  3902 000017BE C7064C00[7407]          		mov	word [13h*4], block13
  3903                                  		;mov	word ptr ds:4Ch, offset	block13	; 13h*4
  3904                                  					; set up int 13	for new	action
  3905 000017C4 8C0E4E00                		mov	[13h*4+2], cs
  3906                                  		;mov	word ptr ds:4Eh, cs ; 13h*4+2
  3907 000017C8 C7065400[4808]          		mov	word [15h*4], Int15
  3908                                  		;mov	word ptr ds:54h, offset	Int15 ;	15h*4
  3909                                  					; set up int 15	for new	action
  3910 000017CE 8C0E5600                		mov	[15h*4+2], cs
  3911                                  		;mov	word ptr ds:56h, cs ; 15h*4+2
  3912 000017D2 C7066400[F907]          		mov	word [19h*4], int19
  3913                                  		;mov	word ptr ds:64h, offset	int19 ;	19h*4
  3914                                  					; set up int 19	for new	action
  3915 000017D8 8C0E6600                		mov	[19h*4+2], cs
  3916                                  		;mov	word ptr ds:66h, cs ; 19h*4+2
  3917                                  
  3918                                  		; 20/12/2022
  3919 000017DC 0E                      		push	cs
  3920 000017DD 1F                      		pop	ds
  3921                                  		
  3922 000017DE A1[0601]                		mov	ax, [Old13]	; save old13 in orig13 also
  3923 000017E1 A3[B400]                		mov	[Orig13], ax
  3924 000017E4 A1[0801]                		mov	ax, [Old13+2]
  3925 000017E7 A3[B600]                		mov	[Orig13+2], ax
  3926                                  					; ;
  3927 000017EA FB                      		sti
  3928 000017EB CD11                    		int	11h		; EQUIPMENT DETERMINATION
  3929                                  					; Return: AX = equipment flag bits
  3930                                  
  3931                                  ; we have to support a system that does not have any diskette
  3932                                  ; drives but only hardfiles. this system will ipl from the hardfile.
  3933                                  ; if the equipment flag bit 0 is 1, then the system has diskette drive(s).
  3934                                  ; otherwise, the system has only hardfiles.
  3935                                  ;
  3936                                  ; important thing is that still, for compatibility reason, the drive letter
  3937                                  ; for the hardfiles start from "c".  so, we still need to allocate dummy bds
  3938                                  ; drive a and drive b. at sysinit time, we are going to set cds table entry
  3939                                  ; of dpb pointer for these drives to 0, so any user attempt to access this
  3940                                  ; drives will get "invalid drive letter ..." message. we are going to
  3941                                  ; establish "fakefloppydrv" flag. ***sysinit module should call int 11h to
  3942                                  ; determine whether there are any diskette drivers in the system or not.!!!***
  3943                                  
  3944                                  ; check the register returned by the equipment determination interrupt
  3945                                  ; we have to handle the case of no diskettes in the system by faking
  3946                                  ; two dummy drives.
  3947                                  ;
  3948                                  ; if the register indicates that we do have floppy drives we don't need
  3949                                  ; to do anything special.
  3950                                  ;
  3951                                  ; if the register indicates that we don't have any floppy drives then
  3952                                  ; what we need to do is set the fakefloppydrv variable, change the
  3953                                  ; register to say that we do have floppy drives and then go to execute
  3954                                  ; the code which starts at notsingle. this is because we can skip the
  3955                                  ; code given below which tries to find if there are one or two drives
  3956                                  ; since we already know about this.
  3957                                  
  3958                                  		; 06/05/2019 - Retro DOS v4.0
  3959 000017ED 88C1                    		mov	cl, al
  3960                                  
  3961                                  		; 12/12/2022
  3962 000017EF A801                    		test	al, 1
  3963                                  		;test	ax, 1		; floppy drives	present	?
  3964 000017F1 751F                    		jnz	short normalfloppydrv ;	yes.
  3965                                  
  3966                                  ; Some ROM BIOSs lie that there are no floppy drives. Lets find out
  3967                                  ; whether it is an old ROM BIOS or a new one
  3968                                  ;
  3969                                  ; WARNING !!!
  3970                                  ;
  3971                                  ; This sequence of code is present in SYSINIT1.ASM also. Any modification
  3972                                  ; here will require an equivalent modification in SYSINIT1.ASM also
  3973                                  
  3974                                  		; 20/12/2022
  3975                                  		;push	ax
  3976                                  		;push	bx
  3977                                  		;push	cx
  3978 000017F3 52                      		push	dx
  3979                                  		;push	di
  3980 000017F4 06                      		push	es
  3981 000017F5 B408                    		mov	ah, 8
  3982 000017F7 B200                    		mov	dl, 0
  3983 000017F9 CD13                    		int	13h		; DISK - DISK -	GET CURRENT DRIVE PARAMETERS (XT,AT,XT286,CONV,PS)
  3984                                  					; DL = drive number
  3985                                  					; Return: CF set on error, AH =	status code, BL	= drive	type
  3986                                  					; DL = number of consecutive drives
  3987                                  					; DH = maximum value for head number, ES:DI -> drive parameter
  3988 000017FB 7202                    		jc	short _gdskp_error
  3989                                  		;;mov	[cs:flp_drvs], dl
  3990                                  		; 20/12/2022
  3991                                  		; ds = cs
  3992                                  		;mov	[flp_drvs], dl
  3993 000017FD 88D1                    		mov	cl, dl
  3994                                  _gdskp_error:	
  3995                                  		; 20/12/2022			
  3996 000017FF 07                      		pop	es
  3997                                  		;pop	di
  3998 00001800 5A                      		pop	dx
  3999                                  		;pop	cx
  4000                                  		;pop	bx
  4001                                  		;pop	ax
  4002                                  		
  4003 00001801 720F                    		jc	short normalfloppydrv
  4004                                  					; if error it is an old ROM BIOS
  4005                                  					; so, lets assume that ROM BIOS lied
  4006                                  		; 20/12/2022
  4007                                  		; ds = cs
  4008                                  		;cmp	byte [flp_drvs], 0
  4009                                  		;;cmp	byte [cs:flp_drvs], 0 ; number of drvs == 0?
  4010                                  		;jz	short _set_fake_flpdrv
  4011                                  		;;mov	al, [cs:flp_drvs]
  4012                                  		;mov	al, [flp_drvs]
  4013                                  		;;dec	al		; make it zero based
  4014                                  		;; 18/12/2022
  4015                                  		;dec	ax
  4016                                  		;jmp	short got_num_flp_drvs
  4017                                  		
  4018                                  		; 20/12/2022
  4019 00001803 08C9                    		or	cl, cl ; [flp_drvs]
  4020 00001805 7403                    		jz	short _set_fake_flpdrv		
  4021 00001807 49                      		dec	cx	
  4022 00001808 EB0C                    		jmp	short got_num_flp_drvs
  4023                                  ; ----------------------------------------------------------------------------
  4024                                  
  4025                                  _set_fake_flpdrv:
  4026                                  		;20/12/2022
  4027                                  		; ds = cs
  4028 0000180A FEC1                    		inc	cl	; cl = 1
  4029 0000180C 880E[D316]              		mov	[fakefloppydrv], cl ; 1
  4030                                  		;mov	byte [fakefloppydrv], 1		
  4031                                  		;;mov	byte [cs:fakefloppydrv], 1
  4032                                  					; we don't have any floppy drives.
  4033                                  		; 20/12/2022
  4034                                  		;mov	ax, 1
  4035 00001810 EB0A                    		jmp	short settwodrive ; well then set it for two drives!
  4036                                  ; ----------------------------------------------------------------------------
  4037                                  
  4038                                  normalfloppydrv:			; yes, bit 0 is 1.			
  4039                                  		; 20/12/2022
  4040                                  		;rol	al, 1		; there	exist floppy drives.
  4041                                  		;rol	al, 1		; put bits 6 & 7 into bits 0 & 1
  4042 00001812 D0C1                    		rol	cl, 1
  4043 00001814 D0C1                    		rol	cl, 1
  4044                                  got_num_flp_drvs:			
  4045                                  		;;and	ax, 3		; only look at bits 0 &	1
  4046                                  		; 18/12/2022
  4047                                  		;and	al, 3
  4048                                  		; 20/12/2022
  4049 00001816 80E103                  		and	cl, 3
  4050 00001819 7505                    		jnz	short notsingle	; zero means single drive system
  4051                                  		; 20/12/2022
  4052 0000181B 41                      		inc	cx
  4053                                  		;inc	ax		; pretend it's a two drive system
  4054                                  settwodrive:				; set this to two fakedrives
  4055                                  		; 20/12/2022
  4056                                  		; ds = cs
  4057 0000181C FE06[7800]              		inc	byte [single]
  4058                                  		;inc	byte [cs:single] ; remember this
  4059                                  notsingle:	
  4060                                  		; 20/12/2022			
  4061                                  		;inc	ax		; ax has number	of drives, 2-4
  4062                                  		;			; is also 0 indexed boot drive if we
  4063                                  		;			; booted off hard file
  4064                                  		;mov	cl, al		; ch is	fat id,	cl # floppies
  4065                                  		; 20/12/2022
  4066 00001820 FEC1                    		inc	cl	; cl >= 2
  4067                                  
  4068                                  ; 16/10/2022
  4069                                  ; MSDOS 3.3 - "MSEQU.INC" (24/07/1987)
  4070                                  INITSPOT EQU	534h	; IBM wants 4 zeros here
  4071                                  BRKADR	 EQU	1BH * 4	; 6CH, 1BH break vector address
  4072                                  TIMADR	EQU	1CH * 4	; 70H, 1CH timer interrupt
  4073                                  DSKADR	EQU	1EH * 4	; address of ptr to disk parameters
  4074                                  SEC9	EQU	522h	; address of disk parameters
  4075                                  CHROUT	EQU	29h
  4076                                  LSTDRV	EQU     504h
  4077                                  
  4078                                  ; determine whether we booted from floppy or hard disk...
  4079                                  
  4080                                  		; 20/12/2022
  4081 00001822 88C8                    		mov	al, cl	; 26/05/2019
  4082                                  
  4083 00001824 F6C280                  		test	dl, 80h		; boot from floppy ?
  4084 00001827 7502                    		jnz	short gothrd	; no.
  4085 00001829 31C0                    		xor	ax, ax		; indicate boot	from drive a
  4086                                  gothrd:					
  4087                                  
  4088                                  ; MSDOS 6.0
  4089                                  ;   ax = 0-based drive we booted from
  4090                                  ;   bios_l, bios_h set.
  4091                                  ;   cl = number of floppies including fake one
  4092                                  ;   ch = media byte
  4093                                  
  4094                                  ; Retro DOS 4.0 - 27/12/2018 
  4095                                  ;  (from Retro DOS v2.0 boot sector)
  4096                                  ;   dl = int 13 drive number we booted from
  4097                                  ;   dh = media byte
  4098                                  
  4099                                  		; 20/12/2022
  4100 0000182B 88F5                    		mov	ch, dh		; 01/07/2018
  4101                                  
  4102                                  		; cl = number of floppies
  4103                                  		; ch = media byte
  4104                                  
  4105                                  		; set up local stack
  4106                                  
  4107                                  		; 20/12/2022
  4108                                  		;xor	dx, dx		; ax = 0-based drive we	booted from
  4109                                  					; bios_l, bios_h set.
  4110                                  					; cl = number of floppies including fake one
  4111                                  					; ch = media byte
  4112                                  		; 20/12/2022
  4113                                  		; es = ds = cs
  4114                                  		; ss = 0
  4115                                  		; sp = 700h
  4116                                  
  4117                                  		; 20/12/2022
  4118                                  		;cli
  4119                                  		;mov	ss, dx		; set stack segment and stack pointer
  4120                                  		;mov	sp, 700h
  4121                                  		;sti
  4122                                  
  4123 0000182D 51                      		push	cx ; (***) 	; save number of floppies and media byte
  4124                                  		
  4125 0000182E 88EC                    		mov	ah, ch		; FAT ID to AH
  4126 00001830 50                      		push	ax ; (**)	; save boot drive number and media byte
  4127                                  		
  4128                                  ; let model_byte, secondary_model_byte be set here!!!
  4129                                  
  4130 00001831 B4C0                    		mov	ah, 0C0h
  4131 00001833 CD15                    		int	15h	; SYSTEM - GET CONFIGURATION (XT after 1/10/86,AT mdl 3x9,CONV,XT286,PS)
  4132 00001835 7215                    		jb	short no_rom_system_conf ; just	use Model_Byte
  4133 00001837 80FC00                  		cmp	ah, 0
  4134 0000183A 7510                    		jnz	short no_rom_system_conf
  4135                                  
  4136                                  ;		; 20/12/2022
  4137                                  ;		; (Programmer's Guide to the AMIBIOS, page 268)
  4138                                  ;		; (https://stanislavs.org/helppc/int_15-c0.html)
  4139                                  ;
  4140                                  ;		INT 15h, ah = C0h - Return System Configuration Parameters (PS/2 only)
  4141                                  ;
  4142                                  ;		on return:
  4143                                  ;		CF = 0 if successful
  4144                                  ;		   = 1 if error
  4145                                  ;		AH = when CF set, 80h for PC & PCjr, 86h for XT
  4146                                  ;	     	    (BIOS after 11/8/82) and AT (BIOS after 1/10/84)
  4147                                  ;
  4148                                  ;		ES:BX = pointer to system descriptor table in ROM of the format:
  4149                                  ;
  4150                                  ;		Offset Size	     Description
  4151                                  ;
  4152                                  ;		  00   word   length of descriptor (8 minimum)
  4153                                  ;		  02   byte   model byte (same as F000:FFFE, not reliable)
  4154                                  ;		  03   byte   secondary model byte
  4155                                  ;		  04   byte   BIOS revision level (zero based)
  4156                                  ;		  05   byte   feature information, see below
  4157                                  ;		  06   dword  reserved
  4158                                  
  4159                                  		; 20/12/2022
  4160                                  		; ds = cs
  4161 0000183C 268A4702                		mov	al, [es:bx+2]	; [es:bx+ROMBIOS_DESC.bios_sd_modelbyte]
  4162 00001840 A2[3E06]                		mov	[model_byte], al
  4163                                  		;mov	[cs:model_byte], al
  4164                                  					; get/save model byte
  4165 00001843 268A4703                		mov	al, [es:bx+3]	; [es:bx+ROMBIOS_DESC.bios_sd_scnd_modelbyte]
  4166 00001847 A2[3F06]                		mov	[secondary_model_byte], al
  4167                                  		;mov	[cs:secondary_model_byte], al
  4168                                  					; get/save secondary model byte
  4169 0000184A EB0C                    		jmp	short turn_timer_on
  4170                                  ;-----------------------------------------------------------------------------
  4171                                  
  4172                                  no_rom_system_conf:			
  4173 0000184C BEFFFF                  		mov	si, 0FFFFh
  4174 0000184F 8EC6                    		mov	es, si
  4175                                  		; 20/12/2022
  4176 00001851 26A00E00                		mov	al, [es:0Eh]	; get model byte (from 0FFFFh:0Eh)
  4177 00001855 A2[3E06]                		mov	[model_byte], al
  4178                                  		;mov	[cs:model_byte], al ; save model byte
  4179                                  turn_timer_on:				
  4180 00001858 B020                    		mov	al, 20h	; ' '   ; turn on the timer
  4181 0000185A E620                    		out	20h, al		; Interrupt controller,	8259A.
  4182                                  					; AKPORT
  4183                                  
  4184                                  ; some olivetti m24 machines have an 8530 serial communications
  4185                                  ; chip installed at io address 50h and 52h. if we're running
  4186                                  ; on one of those, we must inhibit the normal aux port initialization
  4187                                  
  4188                                  		; 20/12/2022
  4189                                  		; ds = cs
  4190 0000185C 803E[3E06]00            		cmp	byte [model_byte], 0
  4191                                  		;cmp	byte [cs:model_byte], 0 ; next to last	byte in	rom bios
  4192 00001861 7510                    		jnz	short not_olivetti_m24 ; skip for all other machines
  4193                                  					; (except olivetti m24)
  4194 00001863 E466                    		in	al, 66h		; is 8530 installed?
  4195 00001865 A820                    		test	al, 20h
  4196 00001867 740A                    		jz	short not_olivetti_m24 ; we're done if not
  4197 00001869 B00F                    		mov	al, 0Fh		; double check
  4198 0000186B E650                    		out	50h, al
  4199 0000186D E450                    		in	al, 50h
  4200 0000186F A801                    		test	al, 1		; this test was	copied from olivetti
  4201 00001871 7414                    		jz	short skip_aux_port_init ; take	this branch if 8530 installed
  4202                                  
  4203                                  not_olivetti_m24:
  4204 00001873 B003                    		mov	al, 3		; init com4
  4205 00001875 E89F08                  		call	aux_init
  4206 00001878 B002                    		mov	al, 2		; init com3
  4207 0000187A E89A08                  		call	aux_init
  4208 0000187D B001                    		mov	al, 1		; init com2
  4209 0000187F E89508                  		call	aux_init
  4210 00001882 30C0                    		xor	al, al		; init com1
  4211 00001884 E89008                  		call	aux_init
  4212                                  
  4213                                  skip_aux_port_init:			
  4214 00001887 B002                    		mov	al, 2		; init lpt3
  4215 00001889 E88308                  		call	print_init
  4216 0000188C B001                    		mov	al, 1		; init lpt2
  4217 0000188E E87E08                  		call	print_init
  4218 00001891 30C0                    		xor	al, al		; init lpt1
  4219 00001893 E87908                  		call	print_init
  4220                                  
  4221 00001896 31D2                    		xor	dx, dx	; 0
  4222 00001898 8EDA                    		mov	ds, dx		; to initialize	print screen vector
  4223 0000189A 8EC2                    		mov	es, dx
  4224 0000189C 31C0                    		xor	ax, ax
  4225                                  		; 16/10/2022
  4226 0000189E BF3405                  		mov	di, INITSPOT	; 0534h
  4227                                  		;mov	di, 534h	; INITSPOT (0000h:0534h)
  4228                                  					; IBM wants 4 zeros here
  4229 000018A1 AB                      		stosw
  4230 000018A2 AB                      		stosw
  4231 000018A3 8CC8                    		mov	ax, cs		; fetch	segment
  4232 000018A5 C7066C00[EE06]          		mov	word [BRKADR], cbreak
  4233                                  		;mov	word ptr ds:6Ch, offset	cbreak ; [BRKADR]
  4234                                  					; break	entry point
  4235 000018AB A36E00                  		mov	[BRKADR+2], ax		
  4236                                  		;mov	ds:6Eh,	ax	; vector for break
  4237 000018AE C706A400[6207]          		mov	word [CHROUT*4], outchr
  4238                                  		;mov	word ptr ds:0A4h, offset outchr	; [CHROUT*4]
  4239 000018B4 A3A600                  		mov	[CHROUT*4+2], ax
  4240                                  		;mov	ds:0A6h, ax	; [CHROUT*4+2]
  4241                                  
  4242 000018B7 BF0400                  		mov	di, 4
  4243 000018BA BB[F406]                		mov	bx, intret ; 19/10/2022
  4244                                  		;mov	bx, offset intret ; intret (cs:intret)
  4245                                  					; will initialize rest of interrupts
  4246 000018BD 93                      		xchg	ax, bx
  4247 000018BE AB                      		stosw			; location 4
  4248 000018BF 93                      		xchg	ax, bx		; cs:
  4249 000018C0 AB                      		stosw			; int 1	; location 6
  4250 000018C1 83C704                  		add	di, 4
  4251 000018C4 93                      		xchg	ax, bx
  4252 000018C5 AB                      		stosw			; location 12
  4253 000018C6 93                      		xchg	ax, bx		; cs:
  4254 000018C7 AB                      		stosw			; int 3	; location 14
  4255 000018C8 93                      		xchg	ax, bx
  4256 000018C9 AB                      		stosw			; location 16
  4257 000018CA 93                      		xchg	ax, bx		; cs:
  4258 000018CB AB                      		stosw			; int 4	; location 18
  4259                                  
  4260                                  
  4261                                  ;		; 20/12/2022
  4262                                  ;		; (https://stanislavs.org/helppc/bios_data_area.html)
  4263                                  ;		Address Size	   Description	 (BIOS/DOS Data Area)
  4264                                  ;	
  4265                                  ;		50:00	byte	Print screen status byte
  4266                                  ;				 00 = PrtSc not active,
  4267                                  ;				 01 = PrtSc in progress
  4268                                  ;				 FF = error
  4269                                  ;		50:01  3 bytes	Used by BASIC
  4270                                  ;		50:04	byte	DOS single diskette mode flag, 0=A:, 1=B:
  4271                                  ;		50:05  10bytes	POST work area
  4272                                  ;		50:0F	byte	BASIC shell flag; set to 2 if current shell
  4273                                  ;		50:10	word	BASICs default DS value (DEF SEG)
  4274                                  ;		50:12	dword	Pointer to BASIC INT 1C interrupt handler
  4275                                  ;		50:16	dword	Pointer to BASIC INT 23 interrupt handler
  4276                                  ;		50:1A	dword	Pointer to BASIC INT 24 disk error handler
  4277                                  ;		50:20	word	DOS dynamic storage
  4278                                  ;		50:22  14bytes	DOS diskette initialization table (INT 1E)
  4279                                  ;		50:30	4bytes	MODE command
  4280                                  ;		70:00		I/O drivers from IO.SYS/IBMBIO.COM
  4281                                  
  4282 000018CC 89160005                		mov	[0500h], dx ; 0
  4283                                  		;mov	ds:500h, dx	; set print screen & break = 0
  4284 000018D0 89160405                		mov	[LSTDRV], dx	; [0504h]
  4285                                  		;mov	ds:504h, dx	; clean	out last drive spec
  4286                                  
  4287                                  ; we need to initialize the cs:motorstartup variable from the disk
  4288                                  ; parameter table at sec9. the offsets in this table are defined in
  4289                                  ; the disk_parms struc in msdskprm.inc. 2 locs
  4290                                  
  4291 000018D4 A02C05                  		mov	al, [SEC9+0Ah]	; 16/10/2022 
  4292                                  		;mov	al, ds:52Ch	; [SEC9+DISK_PARMS.DISK_MOTOR_STRT]
  4293                                  					; [522h+0Ah]
  4294                                  		; 20/12/2022
  4295                                  		; ds = 0
  4296                                  
  4297 000018D7 2EA2[2601]              		mov	[cs:motorstartup], al
  4298 000018DB 2E803E[3E06]FD          		cmp	byte [cs:model_byte], 0FDh ; is this an old rom?
  4299 000018E1 720B                    		jb	short no_diddle	; no
  4300 000018E3 C7062B050F02            		mov	word [SEC9+09h], 20Fh
  4301                                  		;mov	word ptr ds:52Bh, 20Fh ; [SEC9+DISK_PARMS.DISK_HEAD_STTL], 0200h+NORMSETTLE
  4302                                  					; set head settle and motor start on pc-1 pc-2 pc-xt hal0
  4303 000018E9 C6062205DF              		mov	byte [SEC9+0], 0DFh
  4304                                  		;mov	byte ptr ds:522h, 0DFh ; [SEC9+DISK_PARMS.DISK_SPECIFY_1]
  4305                                  					;  set 1st specify byte	on pc-1	pc-2 pc-xt hal0
  4306                                  no_diddle:				
  4307 000018EE CD12                    		int	12h		; MEMORY SIZE -
  4308                                  					; Return: AX = number of contiguous 1K blocks of memory
  4309 000018F0 B106                    		mov	cl, 6
  4310 000018F2 D3E0                    		shl	ax, cl		; convert memory size to 16-byte blocks	(segment no.)
  4311                                  		
  4312                                  		; 20/12/2022
  4313                                  		; 03/07/2018 - 27/12/2018
  4314                                  		;pop	cx ; (**)
  4315                                  		;mov	[cs:drvfat], cx
  4316                                  		
  4317 000018F4 50                      		push	ax ; (*)	; save real top	of memory
  4318                                  
  4319                                  		; 27/12/2018 - (MSDOS 6.0, 6.21)
  4320                                  
  4321                                  ;M068 - BEGIN
  4322                                  ;------ Check if an RPL program is present at TOM and do not tromp over it
  4323                                  
  4324                                  		; 20/12/2022
  4325                                  		; ds = 0
  4326                                  
  4327                                  		;push	ds
  4328                                  		;push	bx		; pushes not required but since this
  4329                                  					; happens to be a last minute change
  4330                                  					; & since it is only init code.
  4331                                  		;xor	bx, bx
  4332                                  		;mov	ds, bx
  4333                                  		
  4334                                  		;mov	bx, ds:0BCh	; [2Fh*4]
  4335 000018F5 8B1EBC00                		mov	bx, [2Fh*4]
  4336                                  		;mov	ds, word ptr ds:0BEh ; [2Fh*4+2]
  4337 000018F9 8E1EBE00                		mov	ds, [2Fh*4+2]
  4338 000018FD 817F035250              		cmp	word [bx+3], 'RP' ; 'RPL'
  4339                                  		;cmp	word ptr [bx+3], 'PR' ; 'RPL'
  4340 00001902 750F                    		jnz	short SkipRPL
  4341 00001904 807F054C                		cmp	byte [bx+5], 'L'
  4342                                  		;cmp	byte ptr [bx+5], 'L'
  4343 00001908 7509                    		jnz	short SkipRPL
  4344 0000190A 89C2                    		mov	dx, ax		; get TOM into DX
  4345 0000190C B8064A                  		mov	ax, 4A06h	; (multMULT shl	8) + multMULTRPLTOM
  4346 0000190F CD2F                    		int	2Fh		; Get new TOM from any RPL
  4347 00001911 89D0                    		mov	ax, dx
  4348                                  SkipRPL:	
  4349                                  		; 20/12/2022		
  4350                                  		;pop	bx
  4351                                  		;pop	ds
  4352                                  
  4353                                  ;M068 - END
  4354                                  		; 20/12/2022
  4355                                  		; 27/12/2018
  4356 00001913 0E                      		push	cs
  4357 00001914 1F                      		pop	ds
  4358                                  
  4359                                  		; 18/03/2019 - Retro DOS v4.0
  4360                                  		;sub	ax, 64		; room for fatloc segment. (1 kb buffer)
  4361                                  		;mov	[cs:fatloc], ax	; location to read fat
  4362                                  
  4363                                  		; 01/07/2018
  4364                                  		; 08/04/2018
  4365                                  		; 28/03/2018
  4366                                  		; MSDOS 6.0 - MSINIT.ASM, 1991
  4367 00001915 83E840                  		sub	ax, 64
  4368 00001918 A3[CD16]                		mov	[init_bootseg], ax ; 20/12/2022
  4369                                  		;mov	[cs:init_bootseg], ax
  4370                                  
  4371                                  		; 27/12/2018 - Retro DOS v4.0
  4372                                  		;pop	ax ; (*)	; get back real top of memory
  4373 0000191B 5A                      		pop	dx ; (*)
  4374                                  
  4375                                  		; 20/12/2022
  4376                                  		; 27/12/2018
  4377 0000191C 59                      		pop	cx ; (**)
  4378 0000191D 890E[CA16]              		mov	[drvfat], cx	; save drive to load dos, and fat id
  4379                                  
  4380                                  		; 20/12/2022
  4381                                  
  4382                                  		;mov	dx, 46Dh	; SYSINIT segment
  4383 00001921 BA4104                  		mov	dx, SYSINITSEG	; 17/10/2022
  4384 00001924 8EDA                    		mov	ds, dx
  4385                                  
  4386                                  ; set pointer to resident device driver chain
  4387                                  
  4388                                  		; 17/10/2022
  4389 00001926 C706[7302][2300]        		mov	word [DEVICELIST], res_dev_list
  4390                                  		;mov	word [273h], res_dev_list
  4391                                  		;;mov	word ptr ds:273h, offset res_dev_list
  4392                                  					; [SYSINIT+DEVICE_LIST]
  4393 0000192C 8C0E[7502]              		mov	[DEVICELIST+2], cs		
  4394                                  		;mov	[275h], cs
  4395                                  		;;mov	word ptr ds:275h, cs ; [SYSINIT+DEVICE_LIST+2]
  4396                                  
  4397 00001930 A3[9202]                		mov	[MEMORYSIZE], ax
  4398                                  		;mov	[292h], ax
  4399                                  		;;mov	ds:292h, ax	; [SYSINIT+MEMORY_SIZE]
  4400                                  
  4401 00001933 FEC1                    		inc	cl
  4402 00001935 880E[9602]              		mov	[DEFAULTDRIVE], cl
  4403                                  		;mov	[296h], cl
  4404                                  		;;mov	ds:296h, cl	; [SYSINIT+DEFAULT_DRIVE]
  4405                                  
  4406 00001939 C706[7102]D007          		mov	word [CURRENTDOSLOCATION], DOSLOADSEG
  4407                                  		;mov	word [271h], 83Fh ; (MSDOS.SYS segment)
  4408                                  		;;mov	word ptr ds:271h, 83Fh ; [SYSINIT+CURRENT_DOS_LOCATION]
  4409                                  					; dos_load_seg
  4410                                  
  4411                                  ; important: some old ibm hardware generates spurious int 0F's due to bogus
  4412                                  ; printer cards. we initialize this value to point to an iret only if
  4413                                  ;
  4414                                  ; 1) the original segment points to storage inside valid ram.
  4415                                  ;
  4416                                  ; 2) the original segment is 0F000:xxxx
  4417                                  
  4418                                  		;;mov	ax, 46Dh	; SYSINIT segment
  4419                                  		;mov	ax, SYSINITSEG	; 17/10/2022
  4420                                  		;mov	es, ax
  4421                                  		; 20/12/2022
  4422                                  		;push	ds ; SYSINITSEG
  4423                                  		;pop	es
  4424 0000193F 8EC2                    		mov	es, dx ; SYSINITSEG
  4425 00001941 31C0                    		xor	ax, ax ; 0
  4426 00001943 8ED8                    		mov	ds, ax		; segment 0
  4427                                  		;mov	ax, ds:3Eh	; [0Fh*4+2]
  4428 00001945 A13E00                  		mov	ax, [0Fh*4+2]	; segment for INT 0Fh
  4429                                  		; 18/10/2022
  4430 00001948 263B06[9202]            		cmp	ax, [es:MEMORYSIZE] ; es:292h
  4431                                  		;cmp	ax, es:292h	; [ES:SYSINIT+MEMORY_SIZE]  ; (condition 1)
  4432 0000194D 7605                    		jbe	short resetintf
  4433 0000194F 3D00F0                  		cmp	ax, 0F000h	; (condition 2)
  4434 00001952 750A                    		jnz	short keepintf
  4435                                  resetintf:	
  4436 00001954 C7063C00[F406]          		mov	word [0Fh*4], intret			
  4437                                  		;mov	word ptr ds:3Ch, offset	intret ; [0Fh*4]
  4438 0000195A 8C0E3E00                		mov	word [0Fh*4+2], cs
  4439                                  		;mov	word ptr ds:3Eh, cs ; [0Fh*4+2]
  4440                                  keepintf:				
  4441                                  ; end important
  4442                                  
  4443                                  ; 17/10/2022
  4444                                  ; 28/12/2018 - Retro DOS v4.0
  4445                                  
  4446                                  ; (MSDOS 6.0, MSINIT.ASM, 1991)
  4447                                  ;
  4448                                  ; we will check if the system has ibm extended keyboard by
  4449                                  ; looking at a byte at 40:96. if bit 4 is set, then extended keyboard
  4450                                  ; is installed, and we are going to set keyrd_func to 10h, keysts_func to 11h
  4451                                  ; for the extended keyboard function. use cx as the temporary register.
  4452                                  
  4453                                  		; 20/12/2022
  4454                                  		; ds = 0
  4455                                  		;xor	cx, cx
  4456                                  		;mov	ds, cx
  4457                                  
  4458 0000195E 8A0E9604                		mov	cl, [496h]	; get keyboard flag
  4459                                  
  4460                                  		; 20/12/2022
  4461                                  		; 20/03/2019
  4462 00001962 0E                      		push	cs
  4463 00001963 1F                      		pop	ds
  4464                                  
  4465                                  		;test	cl, 00010000b ; 10h
  4466 00001964 F6C110                  		test	cl, 10h		; extended keyboard ?
  4467 00001967 740A                    		jz	short org_key	; no, original keyboard
  4468                                  
  4469                                  		; 20/12/2022
  4470                                  		;  ds = cs
  4471 00001969 C606[E504]10            		mov	byte [keyrd_func], 10h ; extended keyboard
  4472 0000196E C606[E604]11            		mov	byte [keysts_func], 11h
  4473                                  		;mov	byte [cs:keyrd_func], 10h ; extended keyboard
  4474                                  		;mov	byte [cs:keysts_func], 11h
  4475                                  					; change for extended keyboard functions
  4476                                  org_key:
  4477                                  
  4478                                  ; 02/06/2018 - Retro DOS v3.0
  4479                                  
  4480                                  ;**************************************************************
  4481                                  ;	will initialize the number of drives
  4482                                  ;	after the equipment call (int 11h) bits 6&7 will tell
  4483                                  ;	the indications are as follows:
  4484                                  ;
  4485                                  ;	bits	7	6	drives
  4486                                  ;		0	0	1
  4487                                  ;		0	1	2
  4488                                  ;		1	0	3
  4489                                  ;		1	1	4
  4490                                  ;**************************************************************
  4491                                  		
  4492                                  		; 20/12/2022
  4493                                  		; ds = cs		
  4494                                  		;push	cs
  4495                                  		;pop	ds
  4496                                  		; 21/12/2022
  4497                                  		;push	cs
  4498                                  		;pop	es
  4499                                  
  4500 00001973 E8E608                  		call	cmos_clock_read	; If cmos clock	exists,
  4501                                  					; then set the system time according to	that.
  4502                                  					; also,	reset the cmos clock rate.
  4503                                  		; 18/10/2022
  4504                                  		;mov	word ptr BData_start, offset harddrv ;
  4505                                  					; set up pointer to hdrive
  4506                                  		; 02/10/2022
  4507 00001976 C706[0000][1609]        		mov	word [hdrv_pat], harddrv 
  4508                                  		
  4509                                  		; 20/12/2022
  4510                                  		; 28/12/2018 - Retro DOS v4.0 (MSDOS 6.21)			
  4511 0000197C 58                      		pop	ax ; (***)	; number of floppies and FAT ID
  4512 0000197D 30E4                    		xor	ah, ah		; chuck	fat id byte
  4513 0000197F A2[7500]                		mov	[drvmax], al	; remember which drive is hard disk
  4514 00001982 A2[2501]                		mov	[dsktnum], al	; and set initial number of drives
  4515 00001985 D1E0                    		shl	ax, 1
  4516 00001987 0106[4417]              		add	[last_dskdrv_table], ax
  4517                                  
  4518 0000198B B280                    		mov	dl, 80h
  4519 0000198D B408                    		mov	ah, 8
  4520 0000198F CD13                    		int	13h		; DISK - DISK -	GET CURRENT DRIVE PARAMETERS (XT,AT,XT286,CONV,PS)
  4521                                  					; DL = drive number
  4522                                  					; Return: CF set on error, AH =	status code, BL	= drive	type
  4523                                  					; DL = number of consecutive drives
  4524                                  					; DH = maximum value for head number, ES:DI -> drive parameter
  4525 00001991 7204                    		jc	short enddrv
  4526 00001993 8816[4317]              		mov	[hnum], dl	; save number of hard disk drives
  4527                                  enddrv:
  4528                                  		; 21/12/2022
  4529 00001997 0E                      		push	cs
  4530 00001998 07                      		pop	es
  4531                                  
  4532                                  ; scan the list of drives to determine their type. we have three flavors of
  4533                                  ; diskette drives:
  4534                                  ;
  4535                                  ;   48tpi drives    we do nothing special for them
  4536                                  ;   96tpi drives    mark the fact that they have changeline support.
  4537                                  ;   3.5"  drives    mark changeline support and small.
  4538                                  ;
  4539                                  ; the following code uses registers for certain values:
  4540                                  ;
  4541                                  ;   dl - physical drive
  4542                                  ;   ds:di - points to current bds
  4543                                  ;   cx - flag bits for bds
  4544                                  ;   dh - form factor for the drive (1 - 48tpi, 2 - 96tpi, 3 - 3.5" medium)
  4545                                  					
  4546 00001999 30D2                    		xor	dl, dl
  4547                                  
  4548                                  		; 20/12/2022
  4549                                  		; ds = cs
  4550                                  		; 17/06/2018		 
  4551                                  		;push	cs
  4552                                  		;pop	ds
  4553                                  
  4554 0000199B C606[2C01]09            		mov	byte [eot], 9
  4555 000019A0 BF[1901]                		mov	di, start_bds 	; if we	are faking floppy drives we need
  4556                                  					; to set aside two bdss	for the	two fake floppy	drives
  4557                                  
  4558                                  ; 02/10/2022 - Retro DOS v4.0 (MSDOS 5.0 IO.SYS)
  4559                                  ; 28/12/2018 - Retro DOS v4.0 (MSDOS 6.0, MSINIT.ASM)
  4560                                  
  4561                                  ; check to see if we are faking floppy drives. if not we don't
  4562                                  ; do anything special. if we are faking floppy drives we need
  4563                                  ; to set aside two bdss for the two fake floppy drives. we
  4564                                  ; don't need to initalise any fields though. so starting at start_bds
  4565                                  ; use the link field in the bds structure to go to the second bds
  4566                                  ; in the list and initalise it's link field to -1 to set the end of
  4567                                  ; the list. then jump to the routine at dohard to allocate/initialise
  4568                                  ; the bds for harddrives.
  4569                                  
  4570 000019A3 803E[D316]01            		cmp	byte [fakefloppydrv], 1
  4571 000019A8 750B                    		jnz	short loop_drive
  4572 000019AA 8B3D                    		mov	di, [di]	; [di+BDS.link]
  4573                                  					; di <-	first bds link
  4574 000019AC 8B3D                    		mov	di, [di]	; [di+BDS.link]
  4575                                  					; di <-	second bds link
  4576 000019AE C705FFFF                		mov	word [di], 0FFFFh ; -1 ; set end of link
  4577 000019B2 E90F01                  		jmp	dohard		; allocate/initialise bds for harddrives
  4578                                  ;-----------------------------------------------------------------------------
  4579                                  
  4580                                  loop_drive:				
  4581 000019B5 3A16[7500]              		cmp	dl, [drvmax]
  4582 000019B9 7203                    		jb	short got_more
  4583 000019BB E90201                  		jmp	done_drives
  4584                                  ;-----------------------------------------------------------------------------
  4585                                  
  4586                                  got_more:				
  4587 000019BE 31C9                    		xor	cx, cx		; zero all flags
  4588 000019C0 8B3D                    		mov	di, [di]	; [di+BDS.link]
  4589                                  					; get next bds
  4590 000019C2 B600                    		mov	dh, 0 ; ff48tpi
  4591                                  					; set form factor to 48	tpi
  4592 000019C4 C606[D216]28            		mov	byte [num_cyln], 40 ; 40 tracks per	side
  4593                                  		
  4594                                  		; 20/12/2022
  4595                                  		;push	ds ; 11/05/2019	
  4596 000019C9 57                      		push	di
  4597 000019CA 52                      		push	dx
  4598 000019CB 51                      		push	cx
  4599 000019CC 06                      		push	es ; ((*)) ; 20/12/2022	
  4600                                  		
  4601 000019CD B408                    		mov	ah, 8
  4602 000019CF CD13                    		int	13h		; DISK - DISK -	GET CURRENT DRIVE PARAMETERS (XT,AT,XT286,CONV,PS)
  4603                                  					; DL = drive number
  4604                                  					; Return: CF set on error, AH =	status code, BL	= drive	type
  4605                                  					; DL = number of consecutive drives
  4606                                  					; DH = maximum value for head number, ES:DI -> drive parameter
  4607 000019D1 7276                    		jc	short noparmsfromrom
  4608                                  
  4609                                  ; if cmos is bad, it gives es,ax,bx,cx,dh,di=0. cy=0.
  4610                                  ; in this case, we are going to put bogus informations to bds table.
  4611                                  ; we are going to set ch=39,cl=9,dh=1 to avoid divide overflow when
  4612                                  ; they are calculated at the later time. this is just for the diagnostic
  4613                                  ; diskette which need msbio,msdos to boot up before it sets cmos.
  4614                                  ; this should only happen with drive b.
  4615                                  
  4616 000019D3 80FD00                  		cmp	ch, 0		; if ch=0, then	cl,dh=0	too.
  4617 000019D6 7505                    		jnz	short pfr_ok
  4618                                  
  4619                                  		;mov	ch, 39		; rom gave wrong info.
  4620                                  		;mov	cl, 9		; let's default to 360k.
  4621                                  		; 20/12/2022
  4622 000019D8 B90927                  		mov	cx, 2709h
  4623                                  
  4624 000019DB B601                    		mov	dh, 1
  4625                                  pfr_ok:					
  4626 000019DD FEC6                    		inc	dh		; make number of heads 1-based
  4627 000019DF FEC5                    		inc	ch		; make number of cylinders 1-based
  4628 000019E1 8836[D016]              		mov	[num_heads], dh	; save parms returned by rom
  4629 000019E5 80E13F                  		and	cl, 3Fh	; 00111111b ; extract sectors/track
  4630 000019E8 880E[D116]              		mov	[sec_trk], cl
  4631 000019EC 882E[D216]              		mov	[num_cyln], ch	; assume less than 256 cylinders!!
  4632                                  
  4633                                  ; make sure that eot contains the max number of sec/trk in system of floppies
  4634                                  
  4635 000019F0 3A0E[2C01]              		cmp	cl, [eot]	; may set carry
  4636                                  		;jbe	short eot_ok
  4637                                  		; 09/12/2022
  4638                                  		;jne	short eotok  ; wrong ! 14/08/2023
  4639                                  		; 14/08/2023
  4640 000019F4 7604                    		jbe	short eotok
  4641 000019F6 880E[2C01]              		mov	[eot], cl
  4642                                  ;eot_ok:					
  4643                                  eotok:
  4644                                  		; 20/12/2022
  4645 000019FA 07                      		pop	es ; ((*)) es = cs = ds		
  4646 000019FB 59                      		pop	cx
  4647 000019FC 5A                      		pop	dx
  4648 000019FD 5F                      		pop	di
  4649                                  		;pop	ds ; 20/12/2022
  4650                                  
  4651                                  ; Check	for presence of	changeline
  4652                                  
  4653 000019FE B415                    		mov	ah, 15h
  4654 00001A00 CD13                    		int	13h		; DISK - DISK -	GET TYPE (AT,XT2,XT286,CONV,PS)
  4655                                  					; DL = drive ID
  4656                                  					; Return: CF set on error, AH =	disk type (3 = hard drive)
  4657                                  					; CX:DX	= number of sectors on the media
  4658 00001A02 720D                    		jc	short changeline_done
  4659 00001A04 80FC02                  		cmp	ah, 2		; check	for presence of	changeline
  4660 00001A07 7508                    		jnz	short changeline_done
  4661                                  
  4662                                  ; we have a drive with change line support.
  4663                                  
  4664 00001A09 80C902                  		or	cl, 2		; fchangeline
  4665                                  					; signal type
  4666 00001A0C C606[7700]01            		mov	byte [fhave96], 1 ; remember that we have 96tpi disks
  4667                                  
  4668                                  ; we now try to set up the form factor for the types of media that we know
  4669                                  ; and can recognise. for the rest, we set the form factor as "other".
  4670                                  
  4671                                  changeline_done:
  4672                                  
  4673                                  ; 40 cylinders and 9 or less sec/trk, treat as 48 tpi medium.
  4674                                  			
  4675 00001A11 803E[D216]28            		cmp	byte [num_cyln], 40
  4676 00001A16 750B                    		jnz	short try_80
  4677 00001A18 803E[D116]09            		cmp	byte [sec_trk], 9
  4678 00001A1D 7653                    		jbe	short nextdrive
  4679                                  gotother:				
  4680 00001A1F B607                    		mov	dh, 7 ; ffOther ; we have a "strange" medium 
  4681 00001A21 EB4F                    		jmp	short nextdrive
  4682                                  ;-----------------------------------------------------------------------------
  4683                                  
  4684                                  ; 80 cylinders and 9 sectors/track => 720 kb device
  4685                                  ; 80 cylinders and 15 sec/trk => 96 tpi medium
  4686                                  
  4687                                  try_80:					
  4688 00001A23 803E[D216]50            		cmp	byte [num_cyln], 80
  4689 00001A28 75F5                    		jnz	short gotother
  4690 00001A2A B609                    		mov	dh, 9 ; ff288	; assume 2.88 MB drive
  4691 00001A2C 803E[D116]24            		cmp	byte [sec_trk], 36 ; is it	?
  4692 00001A31 743F                    		jz	short nextdrive	; yeah,	go update
  4693                                  
  4694                                  		; 12/05/2019 (ff144 type will not be used -compatibility problem-)
  4695                                  		; 08/01/2018 - Retro DOS v4.0 feature only ! for 1.44MB diskettes
  4696                                  		;mov	dh, ff144
  4697                                  		;cmp	byte [sec_trk], 18
  4698                                  		;je	short nextdrive
  4699                                  
  4700 00001A33 803E[D116]0F            		cmp	byte [sec_trk], 15
  4701 00001A38 740B                    		jz	short got96
  4702                                  		
  4703 00001A3A 803E[D116]09            		cmp	byte [sec_trk], 9
  4704 00001A3F 75DE                    		jnz	short gotother
  4705                                  		
  4706 00001A41 B602                    		mov	dh, 2 ; ffSmall
  4707 00001A43 EB2D                    		jmp	short nextdrive
  4708                                  ; ----------------------------------------------------------------------------
  4709                                  
  4710                                  got96:					
  4711 00001A45 B601                    		mov	dh, 1 ; ff96tpi
  4712 00001A47 EB29                    		jmp	short nextdrive
  4713                                  ; ----------------------------------------------------------------------------
  4714                                  
  4715                                  ; we have an old rom, so we either have a 48tpi or 96tpi drive. if the drive
  4716                                  ; has changeline, we assume it is a 96tpi, otherwise we treat it as a 48tpi.
  4717                                  
  4718                                  noparmsfromrom:				
  4719                                  		; 20/12/2022
  4720 00001A49 07                      		pop	es ; ((*)) 
  4721 00001A4A 59                      		pop	cx
  4722 00001A4B 5A                      		pop	dx
  4723 00001A4C 5F                      		pop	di
  4724                                  		;pop	ds ; 20/12/2022
  4725                                  		
  4726 00001A4D B415                    		mov	ah, 15h
  4727 00001A4F CD13                    		int	13h		; DISK - DISK -	GET TYPE (AT,XT2,XT286,CONV,PS)
  4728                                  					; DL = drive ID
  4729                                  					; Return: CF set on error, AH =	disk type (3 = hard drive)
  4730                                  					; CX:DX	= number of sectors on the media
  4731 00001A51 721F                    		jc	short nextdrive
  4732                                  		
  4733 00001A53 80FC02                  		cmp	ah, 2		; is there changeline?
  4734 00001A56 751A                    		jnz	short nextdrive
  4735                                  
  4736 00001A58 80C902                  		or	cl, 2 ; fchangeline
  4737 00001A5B C606[7700]01            		mov	byte [fhave96], 1 ; remember that we have 96tpi drives
  4738 00001A60 C606[D216]50            		mov	byte [num_cyln], 80
  4739 00001A65 B601                    		mov	dh, 1 ; ff96tpi 
  4740 00001A67 B00F                    		mov	al, 15
  4741 00001A69 3A06[2C01]              		cmp	al, [eot]
  4742 00001A6D 7603                    		jbe	short nextdrive ; eot_ok2
  4743 00001A6F A2[2C01]                		mov	[eot], al
  4744                                  ; ----------------------------------------------------------------------------
  4745                                  
  4746                                  ;eot_ok2:
  4747                                  nextdrive:				
  4748 00001A72 80C920                  		or	cl, 20h	; fi_own_physical
  4749                                  					; set this true	for all	drives
  4750 00001A75 88D7                    		mov	bh, dl		; save int13 drive number
  4751                                  
  4752                                  ; we need to do special things if we have a single drive system and are setting
  4753                                  ; up a logical drive. it needs to have the same int13 drive number as its
  4754                                  ; counterpart, but the next drive letter. also reset ownership flag.
  4755                                  ; we detect the presence of this situation by examining the flag single for the
  4756                                  ; value 2.
  4757 00001A77 803E[7800]02            		cmp	byte [single], 2
  4758 00001A7C 7505                    		jnz	short not_special
  4759 00001A7E FECF                    		dec	bh		; int13	drive number same for logical drive
  4760 00001A80 80F120                  		xor	cl, 20h	; fi_own_physical
  4761                                  					; reset	ownership flag for logical drive
  4762                                  not_special:
  4763                                  
  4764                                  ; the values that we put in for BDS_RBPB.BPB_HEADS and
  4765                                  ; BDS_RBPB.BPB_SECTORSPERTRACK will only remain if the
  4766                                  ; form factor is of type "ffother".
  4767                                  				
  4768 00001A83 31C0                    		xor	ax, ax		; fill BDS for drive
  4769 00001A85 A0[D016]                		mov	al, [num_heads]
  4770 00001A88 894536                  		mov	[di+36h], ax	; [di+BDS.rheads]
  4771 00001A8B A0[D116]                		mov	al, [sec_trk]
  4772 00001A8E 894534                  		mov	[di+34h], ax	; [di+BDS.rsecpertrack]
  4773 00001A91 894D23                  		mov	[di+23h], cx	; [di+BDS.flags]
  4774 00001A94 887522                  		mov	[di+22h], dh	; [di+BDS.formfactor]
  4775 00001A97 885505                  		mov	[di+5],	dl	; [di+BDS.drivelet]
  4776 00001A9A 887D04                  		mov	[di+4],	bh	; [di+BDS.drivenum]
  4777 00001A9D 8A1E[D216]              		mov	bl, [num_cyln]
  4778 00001AA1 885D25                  		mov	[di+25h], bl	; [di+BDS.cylinders]
  4779 00001AA4 803E[7800]01            		cmp	byte [single], 1 ; Special case for single drive system
  4780 00001AA9 7511                    		jnz	short no_single
  4781 00001AAB C606[7800]02            		mov	byte [single], 2 ; Don't forget we have
  4782                                  					; single drive system
  4783                                  		; 18/12/2022
  4784 00001AB0 80C910                  		or	cl, 10h
  4785                                  		;or	cx, 10h	; fi_am_mult
  4786                                  					; set that this	is one of several drives
  4787 00001AB3 094D23                  		or	[di+23h], cx	; [di+BDS.flags]
  4788                                  					; save flags
  4789 00001AB6 8B3D                    		mov	di, [di]	; [di+BDS.link]
  4790                                  					; move to next BDS in list
  4791 00001AB8 FEC2                    		inc	dl		; add a	number
  4792 00001ABA EBB6                    		jmp	short nextdrive	; Use same info	for BDS	as previous
  4793                                  ; ----------------------------------------------------------------------------
  4794                                  
  4795                                  no_single:				
  4796                                  		;inc	dl
  4797                                  		; 18/12/2022
  4798 00001ABC 42                      		inc	dx
  4799 00001ABD E9F5FE                  		jmp	loop_drive
  4800                                  ; ----------------------------------------------------------------------------
  4801                                  
  4802                                  done_drives:	
  4803                                  		;mov	word [di+BDS.link], -1			
  4804 00001AC0 C705FFFF                		mov	word [di], -1	; set link to null
  4805                                  
  4806                                  ; set up all the hard drives in	the system
  4807                                  
  4808                                  		; 20/12/2022
  4809                                  		; 28/12/2018 - Retro DOS v4.0 (MSDOS 6.21)
  4810                                  dohard:					
  4811 00001AC4 8A36[4317]              		mov	dh, [hnum]
  4812 00001AC8 08F6                    		or	dh, dh		; done if no hardfiles
  4813 00001ACA 745B                    		jz	short static_configure
  4814 00001ACC B280                    		mov	dl, 80h
  4815                                  dohard1:				
  4816 00001ACE 52                      		push	dx
  4817 00001ACF 8B3E[4617]              		mov	di, [end_of_bdss]
  4818 00001AD3 8A1E[7500]              		mov	bl, [drvmax]
  4819 00001AD7 B700                    		mov	bh, 0		; first	primary	partition (or active)
  4820 00001AD9 E8C601                  		call	sethard
  4821 00001ADC 7208                    		jb	short hardfile_err
  4822 00001ADE E83107                  		call	dmax_check	; error	if already 26 drives
  4823 00001AE1 7303                    		jnb	short hardfile_err
  4824 00001AE3 E84107                  		call	xinstall_bds	; insert new bds into linked list
  4825                                  hardfile_err:				
  4826 00001AE6 5A                      		pop	dx
  4827 00001AE7 FEC2                    		inc	dl		; next hard drive
  4828 00001AE9 FECE                    		dec	dh
  4829 00001AEB 75E1                    		jnz	short dohard1
  4830                                  
  4831                                  ; end of physical drive	initialization
  4832                                  
  4833                                  ; *** do not change the position of the following statement.
  4834                                  ; *** domini routine will use [drvmax] value for the start of the logical
  4835                                  ; *** drive number of mini disk(s).
  4836                                  					
  4837 00001AED E83006                  		call	domini		; for setting up mini disks, if found
  4838                                  
  4839                                  ; -- begin added section
  4840                                  
  4841 00001AF0 8A36[4317]              		mov	dh, [hnum]	; we already know this is >0
  4842 00001AF4 B280                    		mov	dl, 80h
  4843                                  dohardx1:				
  4844 00001AF6 B701                    		mov	bh, 1		; do all subsequent primary partitions
  4845                                  dohardx2:				
  4846 00001AF8 52                      		push	dx
  4847 00001AF9 53                      		push	bx
  4848 00001AFA 8B3E[4617]              		mov	di, [end_of_bdss]
  4849 00001AFE 8A1E[7500]              		mov	bl, [drvmax]
  4850 00001B02 E89D01                  		call	sethard
  4851 00001B05 720E                    		jb	short dohardx4	; move to next hardfile	if error
  4852 00001B07 E80807                  		call	dmax_check	; make sure <=26 drives
  4853 00001B0A 7309                    		jnb	short dohardx4	; skip if error
  4854 00001B0C E81807                  		call	xinstall_bds	; insert new bds into linked list
  4855 00001B0F 5B                      		pop	bx		; get partition	number
  4856 00001B10 5A                      		pop	dx		; restore physical drive counts
  4857 00001B11 FEC7                    		inc	bh
  4858 00001B13 EBE3                    		jmp	short dohardx2	; keep looping until we	fail
  4859                                  ; ----------------------------------------------------------------------------
  4860                                  
  4861                                  dohardx4:				
  4862 00001B15 5B                      		pop	bx		; unjunk partition number from stack
  4863 00001B16 5A                      		pop	dx		; restore physical drive counts
  4864 00001B17 FEC2                    		inc	dl		; next hard drive
  4865 00001B19 FECE                    		dec	dh
  4866 00001B1B 75D9                    		jnz	short dohardx1
  4867                                  
  4868                                  ; -- end changed section
  4869                                  
  4870                                  ;******************************************************************************
  4871                                  ; if more than 2 diskette drives on the system, then it is necessary to remap
  4872                                  ; the bds chain to adjust the logical drive num (drive letter) with greater
  4873                                  ; than two diskette drives
  4874                                  ;
  4875                                  ; new scheme:	if more than 2 disktte drives, first map the bds structure
  4876                                  ;		as usual and then rescan the bds chain to adjust the  drive
  4877                                  ;		letters. to do this, scan for disk drives and assign logical
  4878                                  ;		drive number starting from 2 and then rescan diskette drives
  4879                                  ;		and assign next to the last logical drive number of last disk
  4880                                  ;		drive to the 3rd and 4th diskette drives.
  4881                                  ;******************************************************************************
  4882                                  
  4883 00001B1D 803E[2501]02            		cmp	byte [dsktnum], 2 ; >2 diskette drives
  4884                                  		;jbe	short static_configure ; no - no need for remapping
  4885 00001B22 7603                    		jbe	short no_remap
  4886 00001B24 E8F700                  		call	remap		; remap	bds chain to adjust driver letters
  4887                                  no_remap:
  4888                                  
  4889                                  ; End of drive initialization.
  4890                                  
  4891                                  ; ----------------------------------------------------------------------------
  4892                                  
  4893                                  ;we now decide, based on the configurations available so far, what
  4894                                  ;code or data we need to keep as a stay resident code. the following table
  4895                                  ;shows the configurations under consideration. they are listed in the order
  4896                                  ;of their current position memory.
  4897                                  ;
  4898                                  ;configuration will be done in two ways:
  4899                                  ;
  4900                                  ;first, we are going to set "static configuration". static configuration will
  4901                                  ;consider from basic configuration to endof96tpi configuration. the result
  4902                                  ;of static configuration will be the address the dynamic configuration will
  4903                                  ;use to start with.
  4904                                  ;
  4905                                  ;secondly, "dynamic configuration" will be performed. dynamic configuration
  4906                                  ;involves possible relocation of code or data. dynamic configuration routine
  4907                                  ;will take care of bdsm tables and at rom fix module thru k09 suspend/resume
  4908                                  ;code individually. after these operation, [dosdatasg] will be set.
  4909                                  ;this will be the place sysinit routine will relocate msdos module for good.
  4910                                  
  4911                                  ; -- begin changed section
  4912                                  ;
  4913                                  ;   1.	 basic configuration for msbio (endfloppy)
  4914                                  ;   2.   end96tpi	; a system that supports "change line error"
  4915                                  ;   3.	 end of bdss	; end of bdss for hard disks
  4916                                  ;   4.	 endatrom	;some of at rom fix module.
  4917                                  ;   5.	 endcmosclockset;supporting program for cmos clock write.
  4918                                  ;   6.	 endk09 	;k09 cmos clock module to handle suspend/resume operation.
  4919                                  ;
  4920                                  
  4921                                  ; 02/10/2022 - Retro DOS v4.0 (MSDOS v5.0 IO.SYS)
  4922                                  
  4923                                  static_configure:			
  4924 00001B27 8B3E[4617]              		mov	di, [end_of_bdss]
  4925 00001B2B 81FF[1709]              		cmp	di, bdss	; 19/10/2022
  4926                                  		;cmp	di, offset bdss	; did we allocate any hard drive bdss?
  4927 00001B2F 750D                    		jnz	short dynamic_configure	; that's the end, then
  4928                                  		; 18/10/2022
  4929 00001B31 BF[1709]                		mov	di, end96tpi
  4930                                  		;mov	di, offset harddrv ; end96tpi
  4931                                  					; keep everything up to	end96tpi
  4932 00001B34 803E[7700]00            		cmp	byte [fhave96], 0
  4933 00001B39 7503                    		jnz	short dynamic_configure
  4934                                  		
  4935 00001B3B BF[FC08]                		mov	di, endfloppy
  4936                                  dynamic_configure:
  4937                                  		; 20/12/2022
  4938                                  		;push	cs
  4939                                  		;pop	es
  4940                                  		
  4941 00001B3E FC                      		cld			; clear direction
  4942                                  
  4943                                  ; -- end changed section
  4944                                  
  4945                                  		; 20/12/2022
  4946                                  		; ds = cs <> es
  4947                                  		; ss = 0
  4948                                  		; sp = 700h
  4949                                  
  4950 00001B3F 803E[3E06]FC            		cmp	byte [model_byte], 0FCh ; AT ?
  4951 00001B44 7577                    		jnz	short checkcmosclock
  4952 00001B46 803E[4317]00            		cmp	byte [hnum], 0	; No hard file?
  4953 00001B4B 7470                    		jz	short checkcmosclock
  4954 00001B4D 97                      		xchg	ax, di		; save allocation pointer in ax
  4955 00001B4E BE00F0                  		mov	si, 0F000h
  4956 00001B51 8EC6                    		mov	es, si		; ES ->	ROM BIOS segment
  4957 00001B53 BE[4C17]                		mov	si, bios_date	; "01/10/84"
  4958 00001B56 BFF5FF                  		mov	di, 0FFF5h	; ROM BIOS string is at	F000:FFF5
  4959 00001B59 B90900                  		mov	cx, 9		; bdate_l
  4960                                  					; Only patch ROM for bios 01/10/84
  4961 00001B5C F3A6                    		repe cmpsb		; check	for date + zero	on end
  4962 00001B5E 97                      		xchg	ax, di		; restore allocation pointer
  4963                                  
  4964                                  ; M015 -- begin changes
  4965                                  
  4966                                  		;jnz	short checkcmosclock
  4967                                  		; 02/10/2022
  4968 00001B5F 7508                    		jnz	short checkcompaqbug
  4969                                  
  4970                                  ; install at rom fix
  4971                                  
  4972                                  		; 19/10/2022
  4973                                  		;mov	cx, offset endatrom
  4974 00001B61 B9[0A14]                		mov	cx, endatrom
  4975                                  		;mov	si, offset ibm_disk_io
  4976 00001B64 BE[DC12]                		mov	si, ibm_disk_io
  4977 00001B67 EB46                    		jmp	short install_int13_patch
  4978                                  ; ----------------------------------------------------------------------------
  4979                                  
  4980                                  ; M065 -- begin changes
  4981                                  ;
  4982                                  ; On certain systems with Western Digital disk controllers, the
  4983                                  ; following detection scheme caused an unpredictable and serious
  4984                                  ; failure. In particular, they've implemented a nonstandard
  4985                                  ; Int13(ah=16h) which reconfigures the hard drive, depending on
  4986                                  ; what happens to be at es:[bx] and other memory locations indexed
  4987                                  ; off of it.
  4988                                  ;
  4989                                  ; Compaq was unable to tell us exactly which kind of systems have
  4990                                  ; the bug, except that they guarantee that the bug was fixed in
  4991                                  ; ROM BIOSs dated 08/04/86 and later. We'll check for the COMPAQ
  4992                                  ; string, and then look for date codes before 08/04/86 to decide
  4993                                  ; when to install the hook.
  4994                                  
  4995                                  ;checkcmosclock:
  4996                                  ; 02/10/2022				
  4997                                  checkcompaqbug:
  4998                                  		; 20/12/2022
  4999                                  		; es = 0F000h
  5000                                  		;mov	ax, 0F000h	; point	to ROM BIOS
  5001                                  		;mov	es, ax
  5002                                  
  5003                                  		; 19/10/2022
  5004 00001B69 26813EEAFF434F          		cmp	word [es:0FFEAh], 'CO'
  5005                                  		;cmp	word ptr es:0FFEAh, 'OC' ; look for COMPAQ
  5006 00001B70 754B                    		jnz	short not_compaq_patch
  5007 00001B72 26813EECFF4D50          		cmp	word [es:0FFECh], 'MP'
  5008                                  		;cmp	word ptr es:0FFECh, 'PM'
  5009 00001B79 7542                    		jnz	short not_compaq_patch
  5010 00001B7B 26813EEEFF4151          		cmp	word [es:0FFEEh], 'AQ'
  5011                                  		;cmp	word ptr es:0FFEEh, 'QA'
  5012 00001B82 7539                    		jnz	short not_compaq_patch
  5013                                  
  5014                                  ; We're running on a COMPAQ. Now look at the date code.
  5015                                  
  5016 00001B84 26A1FBFF                		mov	ax, [es:0FFFBh]	; get year
  5017 00001B88 86E0                    		xchg	ah, al
  5018 00001B8A 3D3638                  		cmp	ax, 3836h ; 02/10/2022 (NASM syntax)
  5019                                  		;cmp	ax, '86'        ; 3836h
  5020                                  					; is it	86?
  5021 00001B8D 772E                    		ja	short not_compaq_patch
  5022 00001B8F 7218                    		jb	short do_compaq_patch
  5023 00001B91 26A1F5FF                		mov	ax, [es:0FFF5h]	; get month
  5024 00001B95 86E0                    		xchg	ah, al
  5025 00001B97 3D3830                  		cmp	ax, 3038h ; 02/10/2022 (NASM syntax)
  5026                                  		;cmp	ax, '08'        ; 3038h
  5027                                  					; is it	08?
  5028 00001B9A 7721                    		ja	short not_compaq_patch
  5029 00001B9C 720B                    		jb	short do_compaq_patch
  5030 00001B9E 26A1F8FF                		mov	ax, [es:0FFF8h]	; get day
  5031 00001BA2 86E0                    		xchg	ah, al
  5032 00001BA4 3D3430                  		cmp	ax, 3034h ; 02/10/2022 (NASM syntax)
  5033                                  		;cmp	ax, '04'        ; 3034h
  5034                                  					; is it	04?
  5035 00001BA7 7314                    		jnb	short not_compaq_patch
  5036                                  
  5037                                  do_compaq_patch:			
  5038 00001BA9 B9[2B14]                		mov	cx, end_compaq_i13hook
  5039 00001BAC BE[0A14]                		mov	si, endatrom
  5040                                  
  5041                                  install_int13_patch:			
  5042 00001BAF 0E                      		push	cs
  5043 00001BB0 07                      		pop	es
  5044                                  		; 18/10/2022
  5045 00001BB1 893E[B400]              		mov	[Orig13], di	; set new rom bios int 13 vector
  5046 00001BB5 8C0E[B600]              		mov	[Orig13+2], cs
  5047 00001BB9 29F1                    		sub	cx, si		; size of rom fix module
  5048 00001BBB F3A4                    		rep movsb		; relocate it
  5049                                  
  5050                                  ; M065 -- end changes
  5051                                  
  5052                                  ; ----------------------------------------------------------------------------
  5053                                  not_compaq_patch:			; M065
  5054                                  		; 17/10/2022
  5055                                  checkcmosclock:	
  5056                                  		; 18/10/2022		
  5057 00001BBD 0E                      		push	cs
  5058 00001BBE 07                      		pop	es
  5059                                  
  5060                                  		; 20/12/2022
  5061                                  		; ds = cs = es
  5062                                  		; ss = 0
  5063                                  		; sp = 700h
  5064                                  
  5065 00001BBF 803E[F304]01            		cmp	byte [havecmosclock], 1 ; cmos clock exists?
  5066 00001BC4 7518                    		jnz	short checkk09	; no
  5067                                  
  5068 00001BC6 893E[0605]              		mov	word [daycnttoday], di
  5069                                  		;mov	word ptr ds:daycnttoday, di ; set the address for mschar
  5070 00001BCA B9D100                  		mov	cx, 209	 ; enddaycnttoday - daycnt_to_day
  5071 00001BCD BE[2C14]                		mov	si, daycnt_to_day
  5072 00001BD0 F3A4                    		rep movsb
  5073 00001BD2 893E[0205]              		mov	word [bintobcd], di
  5074                                  		;mov	word ptr ds:bintobcd, di ; set the address for msclock
  5075                                  					; let original segment stay
  5076 00001BD6 B90B00                  		mov	cx, 11	; endcmosclockset - bin_to_bcd
  5077 00001BD9 BE[FD14]                		mov	si, bin_to_bcd
  5078 00001BDC F3A4                    		rep movsb
  5079                                  checkk09:				
  5080 00001BDE 57                      		push	di ; ? ; save ? ; 20/12/2022
  5081 00001BDF B80141                  		mov	ax, 4101h	; wait for bh=es:[di]
  5082 00001BE2 B301                    		mov	bl, 1		; wait for 1 clock tick
  5083 00001BE4 268A3D                  		mov	bh, [es:di]
  5084 00001BE7 F9                      		stc			; Assume we will fail
  5085 00001BE8 CD15                    		int	15h		; SYSTEM - WAIT	ON EXTERNAL EVENT (CONVERTIBLE)
  5086                                  					; AL = condition type, BH = condition compare or mask value
  5087                                  					; BL = timeout value times 55 milliseconds, 00h	means no timeout
  5088                                  					; DX = I/O port	address	if AL bit 4 set
  5089 00001BEA 5F                      		pop	di ; ?
  5090 00001BEB 721B                    		jc	short configdone ; 20/12/2022
  5091                                  
  5092 00001BED C606[7900]01            		mov	byte [fhavek09], 1
  5093                                  					; remember we have a k09 type
  5094 00001BF2 1E                      		push	ds
  5095 00001BF3 31C0                    		xor	ax, ax
  5096 00001BF5 8ED8                    		mov	ds, ax
  5097                                  		
  5098 00001BF7 893EB001                		mov	[6Ch*4], di
  5099                                  		;mov	ds:1B0h, di	; [6Ch*4]
  5100                                  					; new int 6ch handler
  5101                                  		;mov	word ptr ds:1B2h, cs ; [6Ch*4+2]
  5102 00001BFB 8C0EB201                		mov	word [6Ch*4+2], cs
  5103 00001BFF 1F                      		pop	ds
  5104                                  		; 20/12/2022
  5105                                  		; ds = cs = es
  5106 00001C00 BE[0815]                		mov	si, int6c
  5107 00001C03 B9C201                  		mov	cx, endk09-int6c ; 459
  5108                                  		;mov	cx, 459		; endk09 - int6c
  5109                                  					; size of k09 routine
  5110 00001C06 F3A4                    		rep movsb		;
  5111                                  					; set up config	stuff for sysinit
  5112                                  ; ----------------------------------------------------------------------------
  5113                                  ; Set up config stuff for SYSINIT
  5114                                  
  5115                                  ; 17/10/2022
  5116                                  ;SETDRIVE equ SetDrive - DOSBIOSEG_2C7h ; (4D7h for MSDOS 5.0 IO.SYS)
  5117                                  ;GETBP equ GetBp - DOSBIOSEG_2C7h ; (606h for MSDOS 5.0 IO.SYS)
  5118                                  ; 09/12/2022
  5119                                  SETDRIVE equ SetDrive
  5120                                  GETBP equ GetBp
  5121                                  		
  5122                                  		; 17/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
  5123                                  configdone:	
  5124                                  		; 21/12/2022			
  5125                                  		; 20/03/2019
  5126                                  		;push	cs		; di is	final ending address of	msbio.
  5127                                  		;pop	ds
  5128                                  		
  5129 00001C08 83C70F                  		add	di, 15		; round	(up) to	paragraph
  5130                                  		; 10/12/2022
  5131                                  		;shr	di, 1
  5132                                  		;shr	di, 1
  5133                                  		;shr	di, 1
  5134                                  		;shr	di, 1
  5135 00001C0B B104                    		mov	cl, 4
  5136 00001C0D D3EF                    		shr	di, cl		
  5137                                  		; 10/12/2022
  5138                                  		;add	di, 70h		; KERNEL_SEGMENT (in fact: IO.SYS loading segment)
  5139                                  		; 19/10/2022 - Temporary !
  5140                                  		;db	81h, 0C7h, 70h, 0 ; add di, 0070h
  5141                                  		; 13/08/2023
  5142 00001C0F 83C770                  		add	di, 70h
  5143 00001C12 893E[0300]              		mov	[DosDataSg], di	; where	the dos	data segment will be
  5144                                  
  5145                                  ; 21/12/2022 - Retro DOS v4.0 (MSDOS 5.0 combined/single kernel file)
  5146                                  
  5147                                  ; 19/03/2018 - No need to read remain clusters of MSDOS kernel because
  5148                                  	     ; Retro DOS v2.0 boot sector has loaded all of the kernel file before.
  5149                                  	     
  5150                                  	     ; ("MSINIT.ASM" contains kernel file reading code here, below...)
  5151                                  
  5152                                  ; ----------------------------------------------------------------------------
  5153                                  ; ----------------------------------------------------------------------------
  5154                                  %if 0
  5155                                  		mov	ax, [drvfat]	; get drive and	fat id
  5156                                  		; 22/12/2022
  5157                                  		; Note: SETDRIVES uses AL (drive number) only
  5158                                  		mov	bp, SETDRIVE
  5159                                  		;mov	bp, 4D7h	; set_drive (in	dosbios	code segment)
  5160                                  					; at 2C7h:4D7h = 70h:2A47h
  5161                                  		push	cs		; simulate far call
  5162                                  		call	call_bios_code	; get bds for drive
  5163                                  		mov	bp, GETBP	; ensure valid bpb is present	
  5164                                  		;mov	bp, 606h	; GetBp (2C7h:606h = 70h:2B76h) 
  5165                                  		push	cs
  5166                                  		call	call_bios_code
  5167                                  
  5168                                  	; resort to funky old segment definitions for now
  5169                                  
  5170                                  		; 22/12/2022
  5171                                  		;push	es		; copy bds to ds:di
  5172                                  		;pop	ds
  5173                                  
  5174                                  	; the following read of es:0000 was spurious anyway. Should look into it.
  5175                                  	;
  5176                                  	; hmmmmmm. j.k. took out a call to getfat right here a while
  5177                                  	;	  back. Apparently it was what actually setup es: for the following
  5178                                  	; cas----
  5179                                  
  5180                                  		; 22/12/2022
  5181                                  		;xor	di, di
  5182                                  		;mov	al, [es:di]	; get fat id byte
  5183                                  		;;mov	byte ptr es:drvfat+1, al ; save fat byte
  5184                                  		;mov	[es:drvfat+1], al
  5185                                  		;mov	ax, [es:drvfat]
  5186                                  		
  5187                                  		; 22/12/2022
  5188                                  		; ds = cs
  5189                                  	;;;	mov	al, [drvfat]
  5190                                  
  5191                                  	; cas -- why do a SECOND setdrive here???
  5192                                  
  5193                                  		; 22/12/2022
  5194                                  		;push	es		; save whatever's in es
  5195                                  		;push	ds		; copy bds to es:di
  5196                                  		;pop	es
  5197                                  		;push	cs		; copy Bios_Data to ds
  5198                                  		;pop	ds
  5199                                  	
  5200                                  	; 22/12/2022
  5201                                  	;;;	mov	bp, SETDRIVE
  5202                                  	;;;	;mov	bp, 4D7h	; SetDrive (2C7h:47Dh = 70h:2A47h)
  5203                                  	;;;	push	cs		; simulate far call
  5204                                  	;;;	call	call_bios_code	; get correct bds for this drive
  5205                                  	
  5206                                  		; 22/12/2022
  5207                                  		;push	es		; copy bds back to ds:di
  5208                                  		;pop	ds
  5209                                  		;pop	es		; pop whatever was in es
  5210                                  
  5211                                  	; Now we load in the MSDOS.SYS file
  5212                                  
  5213                                  	; 22/12/2022
  5214                                  	; -----
  5215                                  	;	mov	bx, [di+6]	; [di+BDS.BDS_BPB.BPB_BYTESPERSECTOR]
  5216                                  	;	mov	[cs:md_sectorsize], bx	; used by get_fat_sector proc.
  5217                                  	;	mov	bl, [di+1Fh]	; [di+BDS.fatsiz]
  5218                                  	;				; get size of fat on media
  5219                                  	;	;mov	es:16DEh, bl
  5220                                  	;	mov	[es:fbigfat], bl
  5221                                  	;	mov	cl, [di+8]
  5222                                  	;	mov	ax, [di+17h] ; [di+BDS.BDS_BPB.BPB_HIDDENSECTORS]
  5223                                  	;	;sub	es:16D8h, ax
  5224                                  	;	sub	[es:bios_l], ax	; subtract hidden sectors since we
  5225                                  	;				; need a logical sector number that will
  5226                                  	;				; be used by getclus(diskrd procedure)
  5227                                  	;	mov	ax, [di+19h] ; [di+BDS.BDS_BPB.BPB_HIDDENSECTORS+2]
  5228                                  	;	;sbb	es:16DAh, ax
  5229                                  	;	sbb	[es:bios_h], ax	; subtract upper 16 bits of sector num
  5230                                  	; -----
  5231                                  		
  5232                                  	; -----	; 22/12/2022
  5233                                  		mov	bx, [es:di+6]	; [di+BDS.BDS_BPB.BPB_BYTESPERSECTOR]
  5234                                  		mov	[md_sectorsize], bx ; used by get_fat_sector proc.
  5235                                  		mov	bl, [es:di+1Fh]	; [di+BDS.fatsiz]
  5236                                  					; get size of fat on media
  5237                                  		mov	[fbigfat], bl
  5238                                  		mov	cl, [es:di+8]
  5239                                  		mov	ax, [es:di+17h] ; [di+BDS.BDS_BPB.BPB_HIDDENSECTORS]
  5240                                  		sub	[bios_l], ax	; subtract hidden sectors since we
  5241                                  					; need a logical sector number that will
  5242                                  					; be used by getclus(diskrd procedure)
  5243                                  		mov	ax, [es:di+19h] ; [di+BDS.BDS_BPB.BPB_HIDDENSECTORS+2]
  5244                                  		sbb	[bios_h], ax	; subtract upper 16 bits of sector num
  5245                                  	; ------
  5246                                  
  5247                                  		xor	ch, ch	 ; cx = sectors/cluster
  5248                                  
  5249                                  	; the boot program has left the directory at 0:500h
  5250                                  
  5251                                  		push	ds
  5252                                  		xor	di, di
  5253                                  		mov	ds, di
  5254                                  		mov	bx, [53Ah]
  5255                                  		;mov	bx, ds:53Ah	; clus=*53Ah
  5256                                  					; (First cluster field of 2nd dir entry
  5257                                  					; of root directory in the buffer at 500h)
  5258                                  		pop	ds
  5259                                  loadit:
  5260                                  		mov	ax, SYSINITSEG	; 46Dh
  5261                                  		;mov	ax, 46Dh	; sysinit segment
  5262                                  		mov	es, ax
  5263                                  		mov	es, [es:CURRENTDOSLOCATION] ; 09/12/2022
  5264                                  		;mov	es, [es:271h]
  5265                                  
  5266                                  		call	getclus		; read cluster at ES:DI (DI is updated)
  5267                                  ; ----------------------------------------------------------------------------
  5268                                  
  5269                                  		;test	byte [cs:fbigfat], fbig
  5270                                  		test	byte [cs:fbigfat], 40h ; fbig
  5271                                  		jnz	short eofbig
  5272                                  		cmp	bx, 0FF7h
  5273                                  		jmp	short iseofx
  5274                                  ; ----------------------------------------------------------------------------
  5275                                  
  5276                                  eofbig:
  5277                                  		cmp	bx, 0FFF7h
  5278                                  iseofx:
  5279                                  		jb	short loadit	; keep loading until cluster = eof
  5280                                  
  5281                                  %endif
  5282                                  ; ----------------------------------------------------------------------------
  5283                                  ; ----------------------------------------------------------------------------
  5284                                  
  5285 00001C16 E83D04                  		call	setdrvparms	; 
  5286                                  
  5287                                  		;;jmp	far ptr	46Dh:267h ; jmp	SYSINIT_SEG:SYSINIT_START
  5288                                  		;jmp	far 46Dh:267h
  5289 00001C19 EA[6702]4104            		jmp	SYSINITSEG:SYSINITSTART
  5290                                  
  5291                                  ; =============== S U B	R O U T	I N E ========================================
  5292                                  
  5293                                  ; Following are subroutines to support resident device driver initialization
  5294                                  ;
  5295                                  ;M011 -- note:  deleted setup_bdsms and reset_bdsms here
  5296                                  
  5297                                  ;	M035 -- begin changed section
  5298                                  
  5299                                  ;******************************************************************************
  5300                                  ; module name: remap
  5301                                  ;
  5302                                  ; descriptive name: all the code for himem that could be separated from msbio
  5303                                  ;
  5304                                  ; function:  remap the bds chain to adjusted logical drive numbers (drive
  5305                                  ;	     letters) if more than two diskette drives on the system.
  5306                                  ;
  5307                                  ;     scheme:  if more than 2 diskette drives, first map the bds structure
  5308                                  ;	       as usual and then rescan the bds chain to adjust the drive
  5309                                  ;	       letters. to do this, scan for disk drives and assign logical
  5310                                  ;	       drive number starting from 2 and then rescan diskette drives
  5311                                  ;	       and assign next to the last logical drive number of last disk
  5312                                  ;	       drive to the 3rd and 4th diskette drives.
  5313                                  
  5314                                  ; input:       none
  5315                                  ; exit:	drive letters have been remapped in bds chain
  5316                                  ; exit error:  none
  5317                                  ; called from: msinit
  5318                                  ;
  5319                                  ; notes:  this function  will be called only if more than 2 diskettes are
  5320                                  ;	  found in the system
  5321                                  ;	  this function assumes that there are no more than 26 drives assigned
  5322                                  ;	    this is guaranteed by the code that creates bdss for partitions
  5323                                  ;	  this function assumes that the first entries in the chain are
  5324                                  ;	   floppy drives, and all the rest are hard drives
  5325                                  ;	  will alter the boot drive if necessary to reflect remapping
  5326                                  ;
  5327                                  ;******************************************************************************
  5328                                  
  5329                                  ; 17/10/2022
  5330                                  ; 02/10/2022
  5331                                  
  5332                                  remap:		; proc near		
  5333 00001C1E 2E8B3E[1901]            		mov	di, [cs:start_bds] ; get first bds
  5334                                  
  5335                                  ; search for 1st fixed disk physical drive num
  5336                                  
  5337                                  drive_loop:				
  5338 00001C23 807D0480                		cmp	byte [di+4], 80h ; [di+BDS.drivenum]
  5339                                  					; first	hard disk??
  5340 00001C27 7409                    		jz	short fdrv_found ; yes,	continue
  5341 00001C29 8B3D                    		mov	di, [di]	; [di+BDS.link]
  5342                                  					; get next bds,	assume segment
  5343 00001C2B 83FFFF                  		cmp	di, -1		; last bds?
  5344 00001C2E 75F3                    		jnz	short drive_loop ; loop	if not
  5345 00001C30 EB4F                    		jmp	short rmap_exit	; yes, no hard drive on	system
  5346                                  
  5347                                  ;------------------------------------------------------------------------------
  5348                                  ;first disk drive bds, now change the logical drive num to 2 and the subsequent
  5349                                  ;logical drive nums to 3, 4, 5 etc.
  5350                                  ;------------------------------------------------------------------------------
  5351                                  
  5352                                  fdrv_found:				
  5353 00001C32 B002                    		mov	al, 2		; start	with logical drv num=2
  5354                                  fdrv_loop:				
  5355 00001C34 884505                  		mov	[di+5],	al	; [di+BDS.drivelet]
  5356                                  					; found	??
  5357 00001C37 8B3D                    		mov	di, [di]	; [di+BDS.link]
  5358                                  					; ds:di--> next	bds
  5359                                  		;inc	al		; set num for next drive
  5360                                  		; 18/12/2022
  5361 00001C39 40                      		inc	ax
  5362 00001C3A 83FFFF                  		cmp	di, 0FFFFh	; last hard drive ??
  5363 00001C3D 75F5                    		jnz	short fdrv_loop	; no - assign more disk	drives
  5364                                  
  5365                                  ;------------------------------------------------------------------------------
  5366                                  ; now, rescan and find bds of 3rd floppy drive and assign next drive letter
  5367                                  ; in al to 3rd. if the current drive letter is past z, then do not allocate
  5368                                  ; any more.
  5369                                  ;------------------------------------------------------------------------------
  5370                                  
  5371 00001C3F 2E8B3E[1901]            		mov	di, [cs:start_bds] ; [start_bds]
  5372                                  					; get first bds
  5373 00001C44 8B3D                    		mov	di, [di]	; [di+BDS.link]
  5374                                  					; ds:di-->bds2
  5375 00001C46 2E8A26[2501]            		mov	ah, [cs:dsktnum] ; get number of floppies to remap
  5376 00001C4B 80EC02                  		sub	ah, 2		; adjust for a:	& b:
  5377                                  remap_loop1:				
  5378 00001C4E 8B3D                    		mov	di, [di]	; [di+BDS.link]
  5379                                  					; set new num to next floppy
  5380 00001C50 884505                  		mov	[di+5],	al	; [di+BDS.drivelet]
  5381 00001C53 FEC0                    		inc	al		; new number for next floppy
  5382 00001C55 FECC                    		dec	ah		; count	down extra floppies
  5383 00001C57 75F5                    		jnz	short remap_loop1
  5384                                  
  5385                                  ; now we've got to adjust the boot drive if we reassigned it
  5386                                  
  5387 00001C59 2EA0[CA16]              		mov	al, [cs:drvfat]
  5388 00001C5D 3C02                    		cmp	al, 2		; is it	a: or b: ?
  5389 00001C5F 7220                    		jb	short rmap_exit
  5390 00001C61 2E2A06[2501]            		sub	al, [cs:dsktnum] ; is it one of the other floppies?
  5391 00001C66 7204                    		jb	short remap_boot_flop ;	brif so
  5392                                  
  5393                                  ; we've got to remap the boot hard drive
  5394                                  ; subtract the number of EXTRA floppies from it
  5395                                  
  5396 00001C68 0402                    		add	al, 2		; bootdrv -= (dsktnum-2)
  5397 00001C6A EB05                    		jmp	short remap_change_boot_drv
  5398                                  ; ---------------------------------------------------------------------------
  5399                                  
  5400                                  ; we've got to remap the boot floppy.
  5401                                  ; add the number of hard drive partitions to it
  5402                                  
  5403                                  remap_boot_flop:			
  5404 00001C6C 2E0206[7500]            		add	al, [cs:drvmax]	; bootdrv += (drvmax-dsktnum)
  5405                                  remap_change_boot_drv:			
  5406 00001C71 2EA2[CA16]              		mov	[cs:drvfat], al ; alter msdos.sys load drive
  5407 00001C75 FEC0                    		inc	al
  5408 00001C77 1E                      		push	ds
  5409 00001C78 BF4104                  		mov	di, SYSINITSEG	; 46Dh
  5410                                  		;mov	di, 46Dh	; SYSINIT segment
  5411 00001C7B 8EDF                    		mov	ds, di
  5412 00001C7D A2[9602]                		mov	[DEFAULTDRIVE], al
  5413                                  		;mov	ds:296h, al	; [SYSINIT+DEFAULT_DRIVE]
  5414                                  					; pass it to sysinit as	well
  5415 00001C80 1F                      		pop	ds
  5416                                  rmap_exit:				
  5417 00001C81 C3                      		retn
  5418                                  
  5419                                  ; =============== S U B	R O U T	I N E =======================================
  5420                                  
  5421                                  ; 17/10/2022
  5422                                  ; 02/10/2022 - Retro DOS v4.0 (MSDOS 5.0 -actual-)
  5423                                  ; 28/12/2018 - Retro DOS v4.0 (MSDOS 6.21 -draft-)
  5424                                  ; 02/06/2018 - Retro DOS v3.0 (MSDOS 3.3)	
  5425                                  ; 19/03/2018 - Retro DOS v2.0 (MSDOS 2.11)
  5426                                  ;**************************************************
  5427                                  ; getboot - get the boot sector for a hard disk
  5428                                  ;
  5429                                  ; Reads the boot sector from a specified drive into
  5430                                  ; a buffer at the top of memory.
  5431                                  ;
  5432                                  ; dl = int13 drive number to read boot sector for
  5433                                  ;**************************************************
  5434                                  
  5435                                  ; 17/10/2022
  5436                                  bootbias equ 200h
  5437                                  
  5438                                  getboot:	; proc near		
  5439                                  		
  5440                                  		; 08/04/2018
  5441                                  		; Retro DOS v2.0 (IBMBIO.COM, IBMDOS 2.1)
  5442                                  		; 28/03/2018 - MSDOS 6.0 - MSINIT.ASM, 1991
  5443                                  		; 02/10/2022 - Retro DOS v4.0
  5444                                  		;	      (disassembled IO.SYS code of MSDOS 5.0)
  5445                                  
  5446 00001C82 2EA1[CD16]              		mov	ax, [cs:init_bootseg] ; 17/10/2022
  5447 00001C86 8EC0                    		mov	es, ax
  5448                                  		; 17/10/2022
  5449 00001C88 BB0002                  		mov	bx, bootbias ; 200h
  5450                                  		;mov	bx, 200h	; bootbias
  5451                                  					; load BX, ES:BX is where sector goes
  5452 00001C8B B80102                  		mov	ax, 201h
  5453 00001C8E 30F6                    		xor	dh, dh
  5454 00001C90 B90100                  		mov	cx, 1
  5455 00001C93 CD13                    		int	13h		; DISK - READ SECTORS INTO MEMORY
  5456                                  					; AL = number of sectors to read, CH = track, CL = sector
  5457                                  					; DH = head, DL	= drive, ES:BX -> buffer to fill
  5458                                  					; Return: CF set on error, AH =	status,	AL = number of sectors read
  5459 00001C95 7209                    		jb	short erret
  5460                                  		; 17/10/2022
  5461 00001C97 26813EFE0355AA          		cmp	word [es:bootbias+1FEh], 0AA55h
  5462                                  		;cmp	word ptr es:3FEh, 0AA55h ; [es:bootbias+1FEh]
  5463                                  					; Dave Litton magic word?
  5464 00001C9E 7401                    		jz	short norm_ret	; yes
  5465                                  erret:					
  5466 00001CA0 F9                      		stc
  5467                                  norm_ret:				
  5468 00001CA1 C3                      		retn
  5469                                  
  5470                                  ; =============== S U B	R O U T	I N E =======================================
  5471                                  
  5472                                  ; 28/12/2018 - Retro DOS v4.0 
  5473                                  
  5474                                  ;***************************************************************************
  5475                                  ;   sethard - generate bpb for a variable sized hard file. ibm has a
  5476                                  ;   partitioned hard file; we must read physical sector 0 to determine where
  5477                                  ;   our own logical sectors start. we also read in our boot sector to
  5478                                  ;   determine version number
  5479                                  ;
  5480                                  ;   inputs:	dl is rom drive number (80...)
  5481                                  ;		bh is partition number (0....) 
  5482                                  ;		ds:di points to bds
  5483                                  ;   outputs:	carry clear -> bpb is filled in
  5484                                  ;		carry set   -> bpb is left uninitialized due to error
  5485                                  ;	trashes (at least) si, cx
  5486                                  ;	MUST PRESERVE ES:!!!!
  5487                                  ;***************************************************************************
  5488                                  
  5489                                  sethard:	; proc near		
  5490 00001CA2 57                      		push	di
  5491 00001CA3 53                      		push	bx
  5492 00001CA4 1E                      		push	ds
  5493 00001CA5 06                      		push	es
  5494 00001CA6 885D05                  		mov	[di+5],	bl	; [di+BDS.drivelet]
  5495 00001CA9 885504                  		mov	[di+4],	dl	; [di+BDS.drivenum]
  5496 00001CAC 804D2301                		or	byte [di+23h], 1 ; [di+BDS.flags]
  5497                                  					; fnon_removable
  5498 00001CB0 C6452205                		mov	byte [di+22h], 5 ; [di+BDS.formfactor]
  5499                                  					; ffHardFile
  5500 00001CB4 C606[CC16]00            		mov	byte [fbigfat], 0 ; assume 12 bit FAT
  5501 00001CB9 88FE                    		mov	dh, bh		; partition number
  5502 00001CBB 52                      		push	dx
  5503 00001CBC B408                    		mov	ah, 8
  5504 00001CBE CD13                    		int	13h		; DISK - DISK -	GET CURRENT DRIVE PARAMETERS (XT,AT,XT286,CONV,PS)
  5505                                  					; DL = drive number
  5506                                  					; Return: CF set on error, AH =	status code, BL	= drive	type
  5507                                  					; DL = number of consecutive drives
  5508                                  					; DH = maximum value for head number, ES:DI -> drive parameter
  5509 00001CC0 FEC6                    		inc	dh
  5510 00001CC2 887515                  		mov	[di+15h], dh	; [di+BDS.heads] ; get number of heads
  5511 00001CC5 5A                      		pop	dx
  5512 00001CC6 7263                    		jb	short setret	; error	if no hard disk
  5513 00001CC8 80E13F                  		and	cl, 3Fh
  5514 00001CCB 884D13                  		mov	[di+13h], cl	; [di+BDS.secpertrack]
  5515 00001CCE 52                      		push	dx		; save partition number
  5516 00001CCF E8B0FF                  		call	getboot
  5517 00001CD2 5A                      		pop	dx		; restore partition number
  5518 00001CD3 7256                    		jb	short setret
  5519 00001CD5 BBC203                  		mov	bx, 3C2h	; 1C2h+bootbias
  5520                                  
  5521                                  ; The first 'active' partition is 00, the second is 01....
  5522                                  ;   then the remainder of the 'primary' but non-active partitions
  5523                                  
  5524                                  act_part:				
  5525 00001CD8 26F647FC80              		test	byte [es:bx-4], 80h ; is the partition active?
  5526 00001CDD 7418                    		jz	short no_act	; no
  5527 00001CDF 26803F01                		cmp	byte [es:bx], 1 ; reject if partitiontype != 1, 4 or 6
  5528 00001CE3 740C                    		jz	short got_good_act
  5529 00001CE5 26803F04                		cmp	byte [es:bx], 4
  5530 00001CE9 7406                    		jz	short got_good_act
  5531 00001CEB 26803F06                		cmp	byte [es:bx], 6
  5532 00001CEF 7506                    		jnz	short no_act
  5533                                  got_good_act:				
  5534 00001CF1 08F6                    		or	dh, dh		; is this our target partition #?
  5535 00001CF3 743A                    		jz	short set2	; WE GOT THE ONE WANTED!!
  5536 00001CF5 FECE                    		dec	dh		; count	down
  5537                                  no_act:					
  5538 00001CF7 83C310                  		add	bx, 16
  5539 00001CFA 81FB0204                		cmp	bx, 402h	; 202h+bootbias
  5540                                  					; last entry done?
  5541 00001CFE 75D8                    		jnz	short act_part	; no, process next entry
  5542 00001D00 BBC203                  		mov	bx, 3C2h	; 1C2h+bootbias
  5543                                  					; restore original value of bx
  5544                                  
  5545                                  ; Now scan the non-active partitions
  5546                                  
  5547                                  get_primary:				
  5548 00001D03 26F647FC80              		test	byte [es:bx-4], 80h
  5549 00001D08 7518                    		jnz	short not_prim	; we've already scanned
  5550                                  					; the ACTIVE ones
  5551 00001D0A 26803F01                		cmp	byte [es:bx], 1 ; see if partitiontype == 1, 4 or 6
  5552 00001D0E 740C                    		jz	short got_prim
  5553 00001D10 26803F04                		cmp	byte [es:bx], 4
  5554 00001D14 7406                    		jz	short got_prim
  5555 00001D16 26803F06                		cmp	byte [es:bx], 6
  5556 00001D1A 7506                    		jnz	short not_prim
  5557                                  got_prim:				
  5558 00001D1C 08F6                    		or	dh, dh		; is this our target partition?
  5559 00001D1E 740F                    		jz	short set2
  5560 00001D20 FECE                    		dec	dh
  5561                                  not_prim:				
  5562 00001D22 83C310                  		add	bx, 16
  5563 00001D25 81FB0204                		cmp	bx, 402h	; 202h+bootbias
  5564 00001D29 75D8                    		jnz	short get_primary ; loop till we've gone through table
  5565                                  setret:					
  5566 00001D2B F9                      		stc			; error	return
  5567 00001D2C E9DC02                  		jmp	ret_hard_err
  5568                                  
  5569                                  ; ---------------------------------------------------------------------------
  5570                                  
  5571                                  ;  until we get the real logical boot record and get the bpb,
  5572                                  ;  BDS_BPB.BPB_BIGTOTALSECTORS will be used instead of BDS_BPB.BPB_TOTALSECTORS
  5573                                  ;  for the convenience of the computation.
  5574                                  ;
  5575                                  ;  at the end of this procedure, if a bpb information is gotten from
  5576                                  ;  the valid boot record, then we are going to use those bpb information
  5577                                  ;  without change.
  5578                                  ;
  5579                                  ;  otherwise, if (hidden sectors + total sectors) <= a word, then we will move
  5580                                  ;  BDS_BPB.BPB_BIGTOTALSECTORS (low) to BDS_BPB.BPB_TOTALSECTORS and zero out
  5581                                  ;  BDS_BPB.BPB_BIGTOTALSECTORS entry to make it a conventional bpb format.
  5582                                  
  5583                                  set2:					
  5584 00001D2F 2E8816[CF16]            		mov	[cs:rom_drv_num], dl
  5585                                  			; save the rom bios drive number we are handling now.
  5586 00001D34 268B4704                		mov	ax, [es:bx+4]	; hidden sectors (start	sector)
  5587 00001D38 268B5706                		mov	dx, [es:bx+6]
  5588                                  
  5589                                  ; decrement the sector count by 1 to make it zero based. exactly 64k
  5590                                  ; sectors should be allowed	
  5591                                  
  5592 00001D3C 83E801                  		sub	ax, 1
  5593 00001D3F 83DA00                  		sbb	dx, 0
  5594 00001D42 26034708                		add	ax, [es:bx+8]	; sectors in partition
  5595 00001D46 2613570A                		adc	dx, [es:bx+10]
  5596 00001D4A 7305                    		jnb	short okdrive
  5597 00001D4C 800E[CC16]80            		or	byte [fbigfat], 80h ; ftoobig
  5598                                  okdrive:				
  5599 00001D51 268B4704                		mov	ax, [es:bx+4]
  5600 00001D55 894517                  		mov	[di+17h], ax	; [di+BDS.hiddensecs]
  5601                                  					; BPB_HIDDENSECTORS = p->partitionbegin
  5602 00001D58 268B4706                		mov	ax, [es:bx+6]
  5603 00001D5C 894519                  		mov	[di+19h], ax	; [di+BDS.hiddensecs+2]
  5604 00001D5F 268B570A                		mov	dx, [es:bx+10]	; # of sectors (high)
  5605 00001D63 268B4708                		mov	ax, [es:bx+8]	; # of sectors (low)
  5606 00001D67 89551D                  		mov	[di+1Dh], dx	; [di+BDS.totalsecs32+2]
  5607 00001D6A 89451B                  		mov	[di+1Bh], ax	; [di+BDS.totalsecs32]
  5608                                  					; bpb->maxsec =	p->partitionlength
  5609 00001D6D 83FA00                  		cmp	dx, 0
  5610 00001D70 7705                    		ja	short okdrive_1
  5611 00001D72 83F840                  		cmp	ax, 64		; if (p->partitionlength < 64)
  5612 00001D75 72B4                    		jb	short setret	; return -1;
  5613                                  okdrive_1:				
  5614 00001D77 8B5519                  		mov	dx, [di+19h]	; [di+BDS.hiddensecs+2]
  5615 00001D7A 8B4517                  		mov	ax, [di+17h]	; [di+BDS.hiddensecs]
  5616 00001D7D 31DB                    		xor	bx, bx		; boot sector number - for mini	disk
  5617                                  					; usually equal	to the # of sec/trk.
  5618 00001D7F 8A5D13                  		mov	bl, [di+13h]	; [di+BDS.secpertrack]
  5619 00001D82 50                      		push	ax
  5620 00001D83 89D0                    		mov	ax, dx
  5621 00001D85 31D2                    		xor	dx, dx
  5622 00001D87 F7F3                    		div	bx		; (sectors)dx:ax / (BDS.secpertrack)bx =
  5623                                  					; (track)temp_h:ax + (sector)dx
  5624                                  		; 17/10/2022
  5625 00001D89 2EA3[2905]              		mov	[cs:temp_h], ax
  5626 00001D8D 58                      		pop	ax
  5627 00001D8E F7F3                    		div	bx
  5628 00001D90 88D1                    		mov	cl, dl
  5629 00001D92 FEC1                    		inc	cl
  5630 00001D94 31DB                    		xor	bx, bx
  5631 00001D96 8A5D15                  		mov	bl, [di+15h]	; [di+BDS.heads]
  5632 00001D99 50                      		push	ax
  5633 00001D9A 31D2                    		xor	dx, dx
  5634 00001D9C 2EA1[2905]              		mov	ax, [cs:temp_h]
  5635 00001DA0 F7F3                    		div	bx
  5636 00001DA2 2EA3[2905]              		mov	[cs:temp_h], ax
  5637 00001DA6 58                      		pop	ax
  5638 00001DA7 F7F3                    		div	bx		;  dl is head, ax is cylinder
  5639 00001DA9 2E833E[2905]00          		cmp	word [cs:temp_h], 0
  5640 00001DAF 777C                    		ja	short setret_brdg ; exceeds the	limit of int 13h
  5641 00001DB1 3D0004                  		cmp	ax, 1024
  5642 00001DB4 7777                    		ja	short setret_brdg ; exceeds the	limit of int 13h
  5643                                  			; Retro DOS v3.2 note by Erdogan Tan - 28/07/2019
  5644                                  			; **MSDOS code accepts if ax = 1024 but it is nonsense here
  5645                                  			; ('ja' must be 'jnb')
  5646                                  okdrive_2:
  5647                                   		; 28/07/2019
  5648                                  ; dl is head.
  5649                                  ; ax is cylinder
  5650                                  ; cl is sector number (assume less than 2**6 = 64 for int 13h)
  5651                                  
  5652                                  ;*** for mini disks ***
  5653                                  
  5654 00001DB6 837D4701                		cmp	word [di+47h], 1 ; [di+BDS.bdsm_ismini]
  5655                                  					; check	for mini disk
  5656 00001DBA 7503                    		jnz	short oknotmini	; not mini disk.
  5657 00001DBC 034549                  		add	ax, [di+49h]	; [di+BDS.bdsm_hidden_trks]
  5658                                  					; set the physical track number
  5659                                  oknotmini:
  5660                                  ;*** end of added logic for mini disk
  5661                                  				
  5662 00001DBF D0CC                    		ror	ah, 1		; move high two	bits of	cyl to high
  5663 00001DC1 D0CC                    		ror	ah, 1		; two bits of upper byte
  5664 00001DC3 80E4C0                  		and	ah, 0C0h	; turn off remainder of	bits
  5665 00001DC6 08E1                    		or	cl, ah		; move two bits	to correct spot
  5666 00001DC8 88C5                    		mov	ch, al		; ch is	cylinder (low 8	bits)
  5667                                  					; cl is	sector + 2 high	bits of	cylinder
  5668 00001DCA 88D6                    		mov	dh, dl		; dh is	head
  5669 00001DCC 2E8A16[CF16]            		mov	dl, [cs:rom_drv_num] ; dl is drive number
  5670                                  
  5671                                  ; cl is sector + 2 high bits of cylinder
  5672                                  ; ch is low 8 bits of cylinder
  5673                                  ; dh is head
  5674                                  ; dl is drive
  5675                                  
  5676                                  ; for convenience, we are going to read the logical boot sector
  5677                                  ; into cs:disksector area.
  5678                                  
  5679                                  ; read in boot sector using bios disk interrupt. the buffer where it
  5680                                  ; is to be read in is cs:disksector.
  5681                                  
  5682 00001DD1 0E                      		push	cs
  5683 00001DD2 07                      		pop	es
  5684 00001DD3 BB[4E01]                		mov	bx, disksector	; for convenience,
  5685                                  					; we are going to read the logical boot	sector
  5686                                  					; into cs:disksector area.
  5687 00001DD6 B80102                  		mov	ax, 201h
  5688 00001DD9 CD13                    		int	13h		; DISK - READ SECTORS INTO MEMORY
  5689                                  					; AL = number of sectors to read, CH = track, CL = sector
  5690                                  					; DH = head, DL	= drive, ES:BX -> buffer to fill
  5691                                  					; Return: CF set on error, AH =	status,	AL = number of sectors read
  5692                                  
  5693                                  ; cs:disksec contains the boot sector. in theory, (ha ha) the bpb in this thing
  5694                                  ; is correct. we can, therefore, suck out all the relevant statistics on the
  5695                                  ; media if we recognize the version number.
  5696                                  
  5697 00001DDB BB[4E01]                		mov	bx, disksector
  5698 00001DDE 53                      		push	bx
  5699 00001DDF 50                      		push	ax
  5700 00001DE0 2E803FE9                		cmp	byte [cs:bx], 0E9h ; is it a near jump?
  5701 00001DE4 740D                    		jz	short check_1_ok ; yes
  5702 00001DE6 2E803FEB                		cmp	byte [cs:bx], 0EBh ; is it a short jump?
  5703 00001DEA 7529                    		jnz	short invalid_boot_record ; no
  5704 00001DEC 2E807F0290              		cmp	byte [cs:bx+2], 90h ; yes, is the next one a nop?
  5705 00001DF1 7522                    		jnz	short invalid_boot_record
  5706                                  check_1_ok:				
  5707                                  		; 14/08/2023
  5708 00001DF3 BB[5901]                		mov	bx, disksector+EXT_BOOT.BPB ; disksector+11
  5709                                  		;mov	bx, 159h	; disksector+EXT_BOOT.BPB
  5710                                  					; point	to the bpb in the boot record
  5711 00001DF6 2E8A470A                		mov	al, [cs:bx+10]	; [bx+EBPB.MEDIADESCRIPTOR]
  5712                                  					; get the mediadescriptor byte
  5713 00001DFA 24F0                    		and	al, 0F0h	; mask off low nibble
  5714 00001DFC 3CF0                    		cmp	al, 0F0h	; is high nibble = 0Fh?
  5715 00001DFE 7515                    		jnz	short invalid_boot_record ; no,	invalid	boot record
  5716 00001E00 2E813F0002              		cmp	word [cs:bx], 512 ; [bx+EBPB.BYTESPERSECTOR]
  5717 00001E05 750E                    		jnz	short invalid_boot_record ; invalidate non 512 byte sectors
  5718                                  
  5719                                  check2_ok:				; yes, mediadescriptor ok.
  5720 00001E07 2E8A4702                		mov	al, [cs:bx+2]	; now make sure	that
  5721                                  					; the sectorspercluster	is
  5722                                  					; a power of 2
  5723                                  					;
  5724                                  					; [bx+EBPB.SECTORSPERCLUSTER]
  5725                                  					; get the sectorspercluster
  5726 00001E0B 08C0                    		or	al, al		; is it	zero?
  5727 00001E0D 7406                    		jz	short invalid_boot_record ; yes, invalid boot record
  5728                                  
  5729                                  ck_power_of_two:			
  5730 00001E0F D0E8                    		shr	al, 1		; shift	until first bit	emerges
  5731 00001E11 73FC                    		jnb	short ck_power_of_two
  5732 00001E13 7405                    		jz	short valid_boot_record
  5733                                  
  5734                                  invalid_boot_record:			
  5735 00001E15 58                      		pop	ax
  5736 00001E16 5B                      		pop	bx
  5737 00001E17 E93301                  		jmp	unknown		; jump to invalid boot record
  5738                                  					; unformatted or illegal media.
  5739                                  ; ---------------------------------------------------------------------------
  5740                                  
  5741                                  valid_boot_record:			
  5742 00001E1A 58                      		pop	ax
  5743 00001E1B 5B                      		pop	bx
  5744                                  
  5745                                  ; Signature found. Now check version.
  5746                                  
  5747 00001E1C 2E817F08322E            		cmp	word [cs:bx+8], '2.' ; 03/10/2022 (NASM syntax)
  5748                                  		;cmp	word ptr cs:[bx+8], 2E32h ; '2.'
  5749 00001E22 750F                    		jnz	short try5
  5750 00001E24 2E807F0A30              		cmp	byte [cs:bx+0Ah], '0' ; 03/10/2022 (NASM syntax)
  5751                                  		;cmp	byte ptr cs:[bx+0Ah], 30h ; '0'
  5752 00001E29 7508                    		jnz	short try5
  5753 00001E2B EB2F                    		jmp	short copybpb
  5754                                  ; ---------------------------------------------------------------------------
  5755                                  
  5756                                  setret_brdg:				
  5757 00001E2D E9FBFE                  		jmp	setret
  5758                                  ; ---------------------------------------------------------------------------
  5759                                  
  5760                                  unknown3_0_j:				
  5761 00001E30 E91E01                  		jmp	unknown3_0	; legally formatted media,
  5762                                  					; although, content might be bad.
  5763                                  ; ---------------------------------------------------------------------------
  5764                                  
  5765                                  try5:					
  5766 00001E33 E8DA01                  		call	cover_fdisk_bug
  5767                                  
  5768                                  ; see if it is an os2 signature
  5769                                  
  5770 00001E36 2E817F08302E            		cmp	word [cs:bx+8], '0.' ; 03/10/2022 (NASM syntax)
  5771                                  		;cmp	word ptr cs:[bx+8], 2E30h ; '0.'
  5772 00001E3C 750D                    		jnz	short no_os2
  5773 00001E3E 2E8A4707                		mov	al, [cs:bx+7]	; 17/10/2022 (NASM syntax)
  5774 00001E42 2C31                    		sub	al, '1'
  5775                                  		;sub	al, 31h		; '1'
  5776 00001E44 24FE                    		and	al, 0FEh
  5777 00001E46 7414                    		jz	short copybpb	; accept either	'1' or '2'
  5778 00001E48 E90201                  		jmp	unknown
  5779                                  ; ---------------------------------------------------------------------------
  5780                                  
  5781                                  ; no os2 signature, this is to check for real dos versions
  5782                                  
  5783                                  no_os2:					
  5784 00001E4B 2E817F08332E            		cmp	word [cs:bx+8], '3.' ; 03/10/2022 (NASM syntax)
  5785                                  		;cmp	word ptr cs:[bx+8], 2E33h ; '3.'
  5786 00001E51 72DD                    		jb	short unknown3_0_j ; must be 2.1 boot record.
  5787                                  					; do not trust it, but still legal.
  5788 00001E53 7507                    		jnz	short copybpb	; honor	os2 boot record
  5789                                  					; or dos 4.0 version
  5790 00001E55 2E807F0A31              		cmp	byte [cs:bx+10], '1'
  5791                                  		;cmp	byte ptr cs:[bx+0Ah], 31h ; '1'
  5792 00001E5A 72D4                    		jb	short unknown3_0_j ; if version >=	3.1, then o.k.
  5793                                  copybpb:
  5794                                  
  5795                                  ; 03/10/2022
  5796                                  
  5797                                  ; we have a valid boot sector. use the bpb in it to build the
  5798                                  ; bpb in bios. it is assumed that only
  5799                                  ;	BDS_BPB.BPB_SECTORSPERCLUSTER
  5800                                  ;	BDS_BPB.BPB_ROOTENTRIES, and
  5801                                  ;	BDS_BPB.BPB_SECTORSPERFAT
  5802                                  ; need to be set (all other values in already). fbigfat is also set.
  5803                                  
  5804                                  ; if it is non fat based system, then just copy the bpb from the boot sector
  5805                                  ; into the bpb in bds table, and also set the boot serial number, volume id,
  5806                                  ; and system id according to the boot record.
  5807                                  ; for the non_fat system, don't need to set the other value. so just do goodret.
  5808                                  
  5809                                  		; 10/12/2022
  5810                                  		; (number of FATs optimization)
  5811 00001E5C BE[5901]                		mov	si, disksector+11 ; disksector+0Bh
  5812                                  		;mov	cl, [cs:disksector+10h] ; Number of FATs (may be 2 or 1)
  5813 00001E5F 2E8A4C05                		mov	cl, [cs:si+05h]
  5814                                  		
  5815 00001E63 2E807C1B29              		cmp	byte [cs:si+1Bh], 29h ; 10/12/2022	
  5816                                  		;cmp	byte [cs:disksector+26h], 29h ; 17/10/2022
  5817                                  					; [disksector+EXT_BOOT.SIG]
  5818                                  					; EXT_BOOT_SIGNATURE
  5819 00001E68 754E                    		jnz	short copybpb_fat ; conventional fat system
  5820                                  
  5821                                  		; 03/10/2022
  5822                                  		; 29/12/2018 - Retro DOS v4.0 modification note:
  5823                                  		; Regarding 'fat_big_small' part of this (MSDOS 6.0) code
  5824                                  		;	     number of FATs must be 2 ; =*?=
  5825                                  		; (Otherwise, '# of data sectors' would be calculated as wrong!!!)
  5826                                  		;
  5827                                  		;cmp	byte [disksector+EXT_BOOT.BPB+EBPB.NUMBEROFFATS], 2 ; =*?=
  5828                                  
  5829                                  		; 10/12/2022
  5830                                  		;cmp	byte [cs:disksector+10h], 0
  5831                                  					; [disksector+EXT_BOOT.BPB+EBPB.NUMBEROFFATS]
  5832                                  		;jnz	short copybpb_fat ; a fat system.
  5833 00001E6A 08C9                    		or	cl, cl	 ; [cs:disksector+10h]
  5834 00001E6C 754A                    		jnz	short copybpb_fat ; a fat system.
  5835                                  
  5836                                  ; non fat based	media.
  5837                                  
  5838 00001E6E 57                      		push	di
  5839 00001E6F 1E                      		push	ds
  5840 00001E70 1E                      		push	ds
  5841 00001E71 07                      		pop	es
  5842 00001E72 0E                      		push	cs
  5843 00001E73 1F                      		pop	ds
  5844                                  
  5845                                  		; 10/12/2022
  5846                                  		; (number of FATs optimization)
  5847                                  		; SI = disksector+11
  5848                                  		; 17/10/2022
  5849                                  		;;mov	si, 159h	; disksector+EXT_BOOT.BPB
  5850                                  		;mov	si, disksector+11
  5851 00001E74 83C706                  		add	di, 6		; add di,BDS.BPB
  5852                                  
  5853                                  ; just for completeness, we'll make sure that total_sectors and
  5854                                  ; big_total_sectors aren't both zero. I've seen examples of
  5855                                  ; this on DOS 3.30 boot records. I don't know exactly how it
  5856                                  ; got that way. If it occurs, then use the values from the
  5857                                  ; partition table.
  5858                                  
  5859                                  		; 18/12/2022
  5860 00001E77 29C9                    		sub	cx, cx 
  5861                                  
  5862                                  		;cmp	word [cs:si+8], 0 	; [cs:si+EBPB.TOTALSECTORS]
  5863                                  		;jnz	short already_nonz 
  5864                                  		;			; how about big_total?
  5865                                  		;cmp	word [cs:si+15h], 0	; [cs:si+EBPB.BIGTOTALSECTORS]
  5866                                  		;jnz	short already_nonz ; we're okay if any are != 0
  5867                                  		;cmp	word [cs:si+17h], 0	; [cs:si+EBPB.BIGTOTALSECTORS+2]
  5868                                  		;jnz	short already_nonz
  5869                                  
  5870                                  		; 18/12/2022
  5871 00001E79 2E394C08                		cmp	[cs:si+8], cx ; 0	; [cs:si+EBPB.TOTALSECTORS]
  5872 00001E7D 7521                    		jnz	short already_nonz
  5873                                  					     ; how about big_total?
  5874 00001E7F 2E394C15                		cmp	word [cs:si+15h], cx ; 0 ; [cs:si+EBPB.BIGTOTALSECTORS]
  5875 00001E83 751B                    		jnz	short already_nonz   ; we're okay if any are != 0
  5876 00001E85 2E394C17                		cmp	word [cs:si+17h], cx ; 0 ; [cs:si+EBPB.BIGTOTALSECTORS+2]
  5877 00001E89 7515                    		jnz	short already_nonz
  5878                                  
  5879                                  ; now let's copy the values from the partition table (now in the BDS)
  5880                                  ; into the BPB in the boot sector buffer, before they get copied back.
  5881                                  
  5882 00001E8B 8B4508                  		mov	ax, [di+8]	; [di+BDS.totalsecs16]
  5883 00001E8E 2E894408                		mov	[cs:si+8], ax	; [cs:si+EBPB.TOTALSECTORS]
  5884 00001E92 8B4515                  		mov	ax, [di+15h]	; [di+BDS.totalsecs32]
  5885 00001E95 2E894415                		mov	[cs:si+15h], ax	; [cs:si+EBPB.BIGTOTALSECTORS]
  5886 00001E99 8B4517                  		mov	ax, [di+17h]	; [di+BDS.totalsecs32+2]
  5887 00001E9C 2E894417                		mov	[cs:si+17h], ax	; [cs:si+EBPB.BIGTOTALSECTORS+2]
  5888                                  
  5889                                  already_nonz:	
  5890                                  		; 18/12/2022
  5891                                  		; cx = 0
  5892 00001EA0 B119                    		mov	cl, 25		
  5893                                  		;mov	cx, 25		; A_BPB.size - 6 ; Use SMALL version!
  5894 00001EA2 F3A4                    		rep movsb
  5895 00001EA4 1F                      		pop	ds
  5896 00001EA5 5F                      		pop	di
  5897 00001EA6 06                      		push	es
  5898 00001EA7 1E                      		push	ds
  5899 00001EA8 07                      		pop	es
  5900 00001EA9 0E                      		push	cs
  5901 00001EAA 1F                      		pop	ds
  5902                                  		; 13/08/2023
  5903 00001EAB BD[3807]                		mov	bp, MOVMEDIAIDS ; mov_media_ids
  5904                                  		; 18/12/2022
  5905                                  		;mov	bp, mov_media_ids
  5906                                  		;;mov	bp, 751h	; mov_media_ids
  5907                                  					; at 2C7h:751h = 70h:2CC1h
  5908                                  					; set volume id, systemid, serial.
  5909 00001EAE 0E                      		push	cs		; simulate far call
  5910 00001EAF E8A5F8                  		call	call_bios_code
  5911 00001EB2 06                      		push	es
  5912 00001EB3 1F                      		pop	ds
  5913 00001EB4 07                      		pop	es
  5914 00001EB5 E94B01                  		jmp	goodret
  5915                                  ; ---------------------------------------------------------------------------
  5916                                  
  5917                                  ; ****** cas ---
  5918                                  ; IBM DOS 3.30 doesn't seem to mind that the TOTAL_SECTORS and
  5919                                  ; BIG_TOTAL_SECTORS field in the boot sector are 0000. This
  5920                                  ; happens with some frequency -- perhaps through some OS/2 setup
  5921                                  ; program. We haven't actually been COPYING the TOTAL_SECTORS
  5922                                  ; from the boot sector into the DPB anyway, we've just been using
  5923                                  ; it for calculating the fat size. Pretty scary, huh? For now,
  5924                                  ; we'll go ahead and copy it into the DPB, except in the case
  5925                                  ; that it equals zero, in which case we just use the values in
  5926                                  ; the DPB from the partition table.
  5927                                  
  5928                                  ; 17/10/2022
  5929                                  ;MOVMEDIAIDS equ mov_media_ids - DOSBIOSEG_2C7h ; (751h for MSDOS 5.0 IO.SYS)
  5930                                  ;CLEARIDS equ clear_ids - DOSBIOSEG_2C7h ; (5D9h for MSDOS 5.0 IO.SYS)		    		
  5931                                  ; 09/12/2022
  5932                                  MOVMEDIAIDS equ mov_media_ids
  5933                                  CLEARIDS equ clear_ids
  5934                                  ; 11/09/2023
  5935                                  CLEARIDS_X equ clear_ids_x
  5936                                  
  5937                                  copybpb_fat:
  5938                                  		; 10/12/2022
  5939                                  		; (number of FATs optimization)
  5940                                  		; SI = disksector+11				
  5941                                  		; 17/10/2022
  5942                                  		;mov	si, disksector+11
  5943                                  		;;mov	si, 159h	; disksector+EXT_BOOT.BPB
  5944                                  					; cs:si	-> bpb in boot
  5945 00001EB8 31D2                    		xor	dx, dx
  5946 00001EBA 2E8B4408                		mov	ax, [cs:si+8]	; [cs:si+EBPB.TOTALSECTORS]
  5947                                  					; get totsec from boot sec
  5948 00001EBE 09C0                    		or	ax, ax
  5949 00001EC0 7516                    		jnz	short copy_totsec ; if non zero, use that
  5950 00001EC2 2E8B4415                		mov	ax, [cs:si+15h]	; [cs:si+EBPB.BIGTOTALSECTORS]
  5951                                  					; get the big version
  5952                                  					; (32 bit total	sectors)
  5953 00001EC6 2E8B5417                		mov	dx, [cs:si+17h]	; [cs:si+EBPB.BIGTOTALSECTORS+2]
  5954                                  		; 10/12/2022
  5955                                  		; (number of FATs optimization)
  5956                                  		; CL = number of FATs (2 or 1) 
  5957 00001ECA 89D3                    		mov	bx, dx		; see if it is a big zero
  5958 00001ECC 09C3                    		or	bx, ax
  5959 00001ECE 7508                    		jnz	short copy_totsec
  5960                                  			; screw it. it	was bogus.
  5961 00001ED0 8B451B                  		mov	ax, [di+1Bh]	; [di+BDS.totalsecs32]
  5962 00001ED3 8B551D                  		mov	dx, [di+1Dh]	; [di+BDS.totalsecs32+2]
  5963 00001ED6 EB06                    		jmp	short fat_big_small
  5964                                  
  5965                                  		;mov	cx, dx
  5966                                  		;or	cx, ax		; see if it is a big zero
  5967                                  		;jz	short totsec_already_set ; screw it. it	was bogus.
  5968                                  copy_totsec:				
  5969 00001ED8 89451B                  		mov	[di+1Bh], ax	; [di+BDS.totalsecs32]
  5970                                  					; make DPB match boot sec
  5971 00001EDB 89551D                  		mov	[di+1Dh], dx	; [di+BDS.totalsecs32+2]
  5972                                  
  5973                                  		; 10/12/2022
  5974                                  ;totsec_already_set:			
  5975                                  		;mov	ax, [di+1Bh]	; [di+BDS.totalsecs32]
  5976                                  		;mov	dx, [di+1Dh]	; [di+BDS.totalsecs32+2]
  5977                                  
  5978                                  ; determine fat entry size.
  5979                                  
  5980                                  fat_big_small:
  5981                                  
  5982                                  ;at this moment dx;ax = total sector number
  5983                                  
  5984                                  ;Do not assume 1 reserved sector. Update the reserved sector field in BDS 
  5985                                  ;from the BPB on the disk
  5986                                  				
  5987 00001EDE 2E8B5C03                		mov	bx, [cs:si+3]	; [cs:si+EBPB.RESERVEDSECTORS]
  5988                                  					; get #reserved_sectors	from BPB
  5989 00001EE2 895D09                  		mov	[di+9],	bx	; [di+BDS.resectors]
  5990                                  					; update BDS field
  5991 00001EE5 29D8                    		sub	ax, bx
  5992 00001EE7 83DA00                  		sbb	dx, 0		; update the count
  5993 00001EEA 2E8B5C0B                		mov	bx, [cs:si+0Bh]	; [cs:si+EBPB.SECTORSPERFAT]
  5994                                  					; bx = sectors/fat
  5995 00001EEE 895D11                  		mov	[di+11h], bx	; [di+BDS.fatsecs]
  5996                                  					; set in bds bpb
  5997                                  		; 10/12/2022
  5998                                  		; (number of FATs optimization)
  5999                                  		; CL = number of FATs (2 or 1) 
  6000                                  		;dec	cl ; *
  6001                                  		; 18/12/2022
  6002 00001EF1 49                      		dec	cx ; *
  6003 00001EF2 D3E3                    		shl	bx, cl			
  6004                                  		;shl	bx, 1	; =*?=	; always 2 fats
  6005                                  		
  6006 00001EF4 29D8                    		sub	ax, bx		; sub #	fat sectors
  6007 00001EF6 83DA00                  		sbb	dx, 0
  6008 00001EF9 2E8B5C06                		mov	bx, [cs:si+6]	; [cs:si+EBPB.ROOTENTRIES]
  6009                                  					; # root entries
  6010 00001EFD 895D0C                  		mov	[di+0Ch], bx	; [di+BDS.direntries]
  6011                                  					; set in bds bpb
  6012 00001F00 B104                    		mov	cl, 4
  6013 00001F02 D3EB                    		shr	bx, cl		; div by 16 ents/sector
  6014 00001F04 29D8                    		sub	ax, bx		; sub #	dir sectors
  6015 00001F06 83DA00                  		sbb	dx, 0		;
  6016                                  					; dx:ax	now contains the
  6017                                  					; # of data sectors
  6018 00001F09 31C9                    		xor	cx, cx ; *
  6019 00001F0B 2E8A4C02                		mov	cl, [cs:si+2]	; [cs:si+EBPB.SECTORSPERCLUSTER]
  6020                                  					; sectors per cluster
  6021 00001F0F 884D08                  		mov	[di+8],	cl	; [di+BDS.secperclus]
  6022                                  					; set in bios bpb
  6023 00001F12 50                      		push	ax
  6024 00001F13 89D0                    		mov	ax, dx
  6025 00001F15 31D2                    		xor	dx, dx
  6026 00001F17 F7F1                    		div	cx		; cx = sectors per cluster
  6027 00001F19 2EA3[2905]              		mov	[cs:temp_h], ax	; [temp_h]:ax now contains the
  6028                                  					; # clusters.
  6029 00001F1D 58                      		pop	ax
  6030 00001F1E F7F1                    		div	cx
  6031 00001F20 2E833E[2905]00          		cmp	word [cs:temp_h], 0
  6032 00001F26 771C                    		ja	short toobig_ret ; too big cluster number
  6033 00001F28 3DF60F                  		cmp	ax, 0FF6h	; 4096-10
  6034                                  					; is this 16-bit fat?
  6035 00001F2B 7205                    		jb	short copymediaid ; no,	small fat
  6036                                  		; 17/10/2022
  6037 00001F2D 800E[CC16]40            		or	byte [fbigfat], 40h
  6038                                  		;or	ds:fbigfat, 40h	; fbig
  6039                                  					; 16 bit fat
  6040                                  copymediaid:				
  6041 00001F32 06                      		push	es
  6042 00001F33 1E                      		push	ds
  6043 00001F34 07                      		pop	es
  6044 00001F35 0E                      		push	cs
  6045 00001F36 1F                      		pop	ds
  6046                                  		; 17/10/2022
  6047 00001F37 BD[3807]                		mov	bp, MOVMEDIAIDS
  6048                                  		;mov	bp, 751h	; mov_media_ids
  6049                                  					; at 2C7h:751h = 70h:2CC1h
  6050                                  					; copy filesys_id, volume label
  6051 00001F3A 0E                      		push	cs		; simulate far call
  6052 00001F3B E819F8                  		call	call_bios_code
  6053 00001F3E 06                      		push	es
  6054 00001F3F 1F                      		pop	ds
  6055 00001F40 07                      		pop	es
  6056 00001F41 E9A100                  		jmp	massage_bpb	; now final check for bpb info
  6057                                  					; and return.
  6058                                  ; ---------------------------------------------------------------------------
  6059                                  
  6060                                  toobig_ret:				
  6061 00001F44 2E800E[CC16]80          		or	byte [cs:fbigfat], 80h
  6062 00001F4A E9B600                  		jmp	goodret		; still	drive letter is	assigned
  6063                                  					; but useless. to big for
  6064                                  					; current pc dos fat file system
  6065                                  ; ---------------------------------------------------------------------------
  6066                                  
  6067                                  unknown:	
  6068                                  		; 12/12/2022
  6069 00001F4D 804D2402                		or	byte [di+24h], 02h			
  6070                                  		;or	word [di+23h], 200h ; [di+BDS.flags]
  6071                                  					; unformatted_media
  6072                                  					; Set unformatted media	flag.
  6073                                  
  6074                                  ; the boot signature may not be	recognizable,
  6075                                  ; but we should	try and	read it	anyway.
  6076                                  
  6077                                  unknown3_0:				
  6078 00001F51 8B551D                  		mov	dx, [di+1Dh]	; skip setting unformatted_media bit
  6079                                  					; [di+BDS.totalsecs32+2]
  6080 00001F54 8B451B                  		mov	ax, [di+1Bh]	; [di+BDS.totalsecs32]
  6081 00001F57 BE[FC16]                		mov	si, disktable2
  6082                                  
  6083                                  scan:					
  6084 00001F5A 2E3B14                  		cmp	dx, [cs:si]
  6085 00001F5D 720D                    		jb	short gotparm
  6086 00001F5F 7706                    		ja	short scan_next
  6087 00001F61 2E3B4402                		cmp	ax, [cs:si+2]
  6088 00001F65 7605                    		jbe	short gotparm
  6089                                  
  6090                                  scan_next:				
  6091 00001F67 83C60A                  		add	si, 10		; 5*2
  6092 00001F6A EBEE                    		jmp	short scan	; covers upto 512 mb media
  6093                                  ; ---------------------------------------------------------------------------
  6094                                  
  6095                                  gotparm:				
  6096 00001F6C 8A4C08                  		mov	cl, [si+8]	; fat size for fbigfat flag
  6097                                  		;or	ds:fbigfat, cl
  6098                                  		; 17/10/2022
  6099 00001F6F 080E[CC16]              		or	[fbigfat], cl
  6100 00001F73 2E8B4C04                		mov	cx, [cs:si+4]	; ch = number of sectors per cluster
  6101                                  					; cl = log base	2 of ch
  6102 00001F77 2E8B5406                		mov	dx, [cs:si+6]	; dx = number of root dir entries
  6103                                  
  6104                                  ; now calculate size of fat table
  6105                                  
  6106 00001F7B 89550C                  		mov	[di+0Ch], dx	; [di+BDS.direntries]
  6107                                  					; save number of (root)	dir entries
  6108 00001F7E 8B551D                  		mov	dx, [di+1Dh]	; [di+BDS.totalsecs32+2]
  6109 00001F81 8B451B                  		mov	ax, [di+1Bh]	; [di+BDS.totalsecs32]
  6110 00001F84 886D08                  		mov	[di+8],	ch	; [di+BDS.secperclus]
  6111                                  					; save sectors per cluster
  6112                                  		; 17/10/2022
  6113 00001F87 F606[CC16]40            		test	byte [fbigfat], 40h
  6114                                  		;test	ds:fbigfat, 40h	; fbig
  6115                                  					; if (fbigfat)
  6116 00001F8C 751E                    		jnz	short dobig	; goto dobig; (16 bit fat)
  6117                                  
  6118                                  ; we don't need to change "small fat" logic since it is gauranteed
  6119                                  ; that double word total sector will not use 12 bit fat (unless
  6120                                  ; it's sectors/cluster >= 16 which will never be in this case.)
  6121                                  ; so in this case we assume dx = 0 !!
  6122                                  
  6123 00001F8E 31DB                    		xor	bx, bx		; (12 bit fat)
  6124 00001F90 88EB                    		mov	bl, ch
  6125 00001F92 4B                      		dec	bx
  6126 00001F93 01C3                    		add	bx, ax		; dx=0
  6127 00001F95 D3EB                    		shr	bx, cl		; bx = 1+(bpb->maxsec+BDS.secperclus-1)/
  6128 00001F97 43                      		inc	bx		; BDS.secperclus
  6129 00001F98 80E3FE                  		and	bl, 0FEh	; bx &= ~1; (=number of clusters)
  6130 00001F9B 89DE                    		mov	si, bx
  6131 00001F9D D1EB                    		shr	bx, 1
  6132 00001F9F 01F3                    		add	bx, si
  6133 00001FA1 81C3FF01                		add	bx, 511		; bx +=	511 + bx/2
  6134 00001FA5 D0EF                    		shr	bh, 1		; bh >>= 1; (=bx/512)
  6135 00001FA7 887D11                  		mov	[di+11h], bh	; [di+BDS.fatsecs]
  6136                                  					; save number of fat sectors
  6137 00001FAA EB39                    		jmp	short massage_bpb
  6138                                  ; ---------------------------------------------------------------------------
  6139                                  
  6140                                  ; for bigfat we do need to extend this logic to 32 bit sector calculation.
  6141                                  
  6142                                  dobig:					
  6143 00001FAC B104                    		mov	cl, 4		; 16 (2^4) directory entries per sector
  6144 00001FAE 52                      		push	dx		; save total sectors (high)
  6145 00001FAF 8B550C                  		mov	dx, [di+0Ch]	; [di+BDS.direntries]
  6146 00001FB2 D3EA                    		shr	dx, cl		; root dir sectors = BDS.direntries / 16;
  6147 00001FB4 29D0                    		sub	ax, dx
  6148 00001FB6 5A                      		pop	dx
  6149 00001FB7 83DA00                  		sbb	dx, 0		; dx:ax	= total	sectors	- root dir sectors
  6150 00001FBA 83E801                  		sub	ax, 1
  6151 00001FBD 83DA00                  		sbb	dx, 0		; dx:ax	= t - r	- d
  6152                                  					; total	secs - reserved	secs - root dir	secs
  6153 00001FC0 B302                    		mov	bl, 2
  6154 00001FC2 8A7D08                  		mov	bh, [di+8]	; [di+BDS.secperclus]
  6155                                  					; bx = 256 * BDS.secperclus + 2
  6156                                  
  6157                                  ; I don't understand why to add bx here!!!
  6158                                  
  6159                                  		; 29/12/2018 - Erdogan Tan (Retro DOS v4.0)
  6160                                  		; 27/09/2022
  6161                                  		; (Microsoft FAT32 File	System Specification,
  6162                                  		; December 2000, Page 21)
  6163                                  		; TmpVal1 = DskSize - (BPB_ResvdSecCnt+RootrDirSectors)
  6164                                  		; TmpVal2 = (256*BPB_SecPerClus)+BPB_NumFATs
  6165                                  		; FATsz	= (TmpVal1+(TmpVal2-1))/TmpVal2
  6166                                  		; (If FATType == FAT16,	BPB_FATSz16 = LOWORD(FATSz))
  6167                                  		
  6168 00001FC5 01D8                    		add	ax, bx		; ax = t-r-d+256*spc+2
  6169 00001FC7 83D200                  		adc	dx, 0
  6170 00001FCA 83E801                  		sub	ax, 1		; ax = t-r-d+256*spc+1
  6171 00001FCD 83DA00                  		sbb	dx, 0
  6172                                  
  6173                                  ; assuming dx in the table will never be bigger than bx.
  6174                                  
  6175 00001FD0 F7F3                    		div	bx		; BDS.fatsecs =
  6176                                  					; ceil((total-dir-res)/(256*BDS.secperclus+2))
  6177 00001FD2 894511                  		mov	[di+11h], ax	; [di+BDS.fatsecs]
  6178                                  					; number of fat	sectors
  6179                                  
  6180                                  ; now, set the default filesys_id, volume label, serial number
  6181                                  
  6182                                  		;;mov	bl, ds:fbigfat
  6183                                  		; 11/09/2023
  6184                                  		; 17/10/2022
  6185                                  		;mov	bl, [fbigfat]
  6186                                  		;mov	[di+1Fh], bl	; [di+BDS.fatsiz] ; fat	size flag
  6187                                  
  6188 00001FD5 1E                      		push	ds
  6189 00001FD6 1E                      		push	ds
  6190 00001FD7 07                      		pop	es
  6191 00001FD8 0E                      		push	cs
  6192 00001FD9 1F                      		pop	ds
  6193                                  		; 11/09/2023
  6194 00001FDA A0[CC16]                		mov	al, [fbigfat]
  6195 00001FDD BD[D005]                		mov	bp, CLEARIDS_X	; clear_ids_x (uses AL value here)
  6196                                  		; 17/10/2022
  6197                                  		;mov	bp, CLEARIDS
  6198                                  		;;mov	bp, 5D9h	; clear_ids
  6199                                  					; at 2C7h:5D9h = 70h:2B49h
  6200 00001FE0 0E                      		push	cs
  6201 00001FE1 E873F7                  		call	call_bios_code
  6202 00001FE4 1F                      		pop	ds
  6203                                  
  6204                                  ; at this point, in bpb of bds table, BDS_BPB.BPB_BIGTOTALSECTORS which is
  6205                                  ; set according to the partition information. we are going to
  6206                                  ; see if (hidden sectors + total sectors) > a word. if it is true,
  6207                                  ; then no change. otherwise, BDS_BPB.BPB_BIGTOTALSECTORS will be moved
  6208                                  ; to BDS_BPB.BPB_TOTALSECTORS and BDS_BPB.BPB_BIGTOTALSECTORS will be set to 0.
  6209                                  ; we don't do this for the bpb information from the boot record. we
  6210                                  ; are not going to change the bpb information from the boot record.
  6211                                  
  6212                                  massage_bpb:
  6213                                  		; 11/09/2023
  6214                                  		;; 12/12/2022
  6215                                  		;mov	bl, [fbigfat]
  6216                                  		;mov	[di+1Fh], bl	; [di+BDS.fatsiz]
  6217                                  		;			; set size of fat on media
  6218                                  		
  6219 00001FE5 8B551D                  		mov	dx, [di+1Dh]	; [di+BDS.totalsecs32+2]
  6220 00001FE8 8B451B                  		mov	ax, [di+1Bh]	; [di+BDS.totalsecs32]
  6221 00001FEB 83FA00                  		cmp	dx, 0		; double word total sectors?
  6222                                  		;ja	short goodret	; don't have to change it.
  6223                                  		; 12/12/2022
  6224 00001FEE 771B                    		ja	short short goodret2
  6225                                  		;cmp	word [di+19h], 0 ; [di+BDS.hiddensecs+2]
  6226                                  		;ja	short goodret	; don't have to change it.
  6227                                  		; 12/12/2022
  6228 00001FF0 395519                  		cmp	[di+19h], dx ; 0
  6229 00001FF3 7716                    		ja	short goodret2
  6230 00001FF5 034517                  		add	ax, [di+17h]	; [di+BDS.hiddensecs]
  6231                                  		;jb	short goodret
  6232                                  		; 12/12/2022
  6233 00001FF8 7209                    		jc	short goodret
  6234 00001FFA 8B451B                  		mov	ax, [di+1Bh]	; [di+BDS.totalsecs32]
  6235 00001FFD 89450E                  		mov	[di+0Eh], ax	; [di+BDS.totalsecs16]
  6236                                  		;mov	word [di+1Bh], 0 ; [di+BDS.totalsecs32]
  6237                                  		; 12/12/2022
  6238 00002000 89551B                  		mov	[di+1Bh], dx ; 0 
  6239                                  goodret:				
  6240                                  		;mov	bl, ds:fbigfat
  6241                                  		; 11/09/2023
  6242                                  		; 12/12/2022
  6243                                  		; 17/10/2022
  6244 00002003 8A1E[CC16]              		mov	bl, [fbigfat]
  6245 00002007 885D1F                  		mov	[di+1Fh], bl	; [di+BDS.fatsiz]
  6246                                  		;			; set size of fat on media
  6247 0000200A F8                      		clc
  6248                                  ret_hard_err:
  6249                                  		; 12/12/2022
  6250                                  goodret2:					
  6251 0000200B 07                      		pop	es
  6252 0000200C 1F                      		pop	ds
  6253 0000200D 5B                      		pop	bx
  6254 0000200E 5F                      		pop	di
  6255 0000200F C3                      		retn
  6256                                  
  6257                                  ; =============== S U B	R O U T	I N E =======================================
  6258                                  
  6259                                  ; 15/10/2022
  6260                                  
  6261                                  ;fdisk of pc dos 3.3 and below, os2 1.0 has a bug. the maximum number of
  6262                                  ;sector that can be handled by pc dos 3.3 ibmbio should be 0ffffh.
  6263                                  ;instead, sometimes fdisk use 10000h to calculate the maximum number.
  6264                                  ;so, we are going to check that if BPB_TOTALSECTORS + hidden sector = 10000h
  6265                                  ;then subtract 1 from BPB_TOTALSECTORS.
  6266                                  
  6267                                  		; 17/10/2022
  6268                                  cover_fdisk_bug:	
  6269 00002010 50                      		push	ax
  6270 00002011 52                      		push	dx
  6271 00002012 56                      		push	si
  6272 00002013 2E803E[7401]29          		cmp	byte [cs:disksector+26h], 29h
  6273                                  					; [disksector+EXT_BOOT.SIG],
  6274                                  					; EXT_BOOT_SIGNATURE
  6275 00002019 7431                    		jz	short cfb_retit	; if extended bpb, then	>= pc dos 4.00
  6276 0000201B 2E817F073130            		cmp	word [cs:bx+7], 3031h ; '10' ; os2 1.0 = ibm 10.0
  6277 00002021 7507                    		jnz	short cfb_chk_BPB_TOTALSECTORS
  6278 00002023 2E807F0A30              		cmp	byte [cs:bx+10], '0'
  6279 00002028 7522                    		jnz	short cfb_retit
  6280                                  cfb_chk_BPB_TOTALSECTORS:
  6281                                  		; 17/10/2022		
  6282 0000202A BE[5901]                		mov	si, disksector+11 ; 14Eh+0Bh
  6283                                  		;mov	si, 159h	; disksector+EXT_BOOT.BPB
  6284 0000202D 2E837C0800              		cmp	word [cs:si+8], 0 ; [cs:si+EBPB.TOTALSECTORS]
  6285                                  					; just to make sure.
  6286 00002032 7418                    		jz	short cfb_retit
  6287 00002034 2E8B4408                		mov	ax, [cs:si+8]	; [cs:si+EBPB.TOTALSECTORS]
  6288 00002038 2E034411                		add	ax, [cs:si+11h]	; [cs:si+EBPB.HIDDENSECTORS]
  6289 0000203C 730E                    		jnb	short cfb_retit
  6290 0000203E 750C                    		jnz	short cfb_retit	; if carry set and ax=0
  6291 00002040 2EFF4C08                		dec	word [cs:si+8]	; 0 -> 0FFFFh
  6292                                  					; then decrease	BPB_TOTALSECTORS by 1
  6293 00002044 836D1B01                		sub	word [di+1Bh], 1 ; [di+BDS.totalsecs32]
  6294 00002048 835D1D00                		sbb	word [di+1Dh], 0 ; [di+BDS.totalsecs32+2]
  6295                                  cfb_retit:				
  6296 0000204C 5E                      		pop	si
  6297 0000204D 5A                      		pop	dx
  6298 0000204E 58                      		pop	ax
  6299 0000204F C3                      		retn
  6300                                  
  6301                                  ; ---------------------------------------------------------------------------
  6302                                  
  6303 00002050 0200                    word2		dw 2			
  6304 00002052 0300                    word3		dw 3			
  6305 00002054 0002                    word512		dw 512			
  6306                                  
  6307                                  ; =============== S U B	R O U T	I N E =======================================
  6308                                  
  6309                                  ; 15/10/2022
  6310                                  
  6311                                  ; setdrvparms sets up the recommended bpb in each bds in the system based on
  6312                                  ; the form factor. it is assumed that the bpbs for the various form factors
  6313                                  ; are present in the bpbtable. for hard files, the recommended bpb is the same
  6314                                  ; as the bpb on the drive.
  6315                                  ;
  6316                                  ; no attempt is made to preserve registers since we are going to jump to
  6317                                  ; sysinit straight after this routine.
  6318                                  
  6319                                  setdrvparms:
  6320 00002056 31DB                    		xor	bx, bx
  6321                                  		; 18/10/2022
  6322 00002058 C43E[1901]              		les	di, [start_bds] ; get first bds in list
  6323                                  _next_bds:				
  6324 0000205C 06                      		push	es
  6325 0000205D 57                      		push	di
  6326 0000205E 268A5D22                		mov	bl, [es:di+22h]	; [es:di+BDS.formfactor]
  6327 00002062 80FB05                  		cmp	bl, 5		; ffHardFile
  6328 00002065 753E                    		jnz	short nothardff
  6329 00002067 31D2                    		xor	dx, dx
  6330 00002069 268B450E                		mov	ax, [es:di+0Eh]	; [es:di+BDS.totalsecs16]
  6331 0000206D 09C0                    		or	ax, ax
  6332 0000206F 7508                    		jnz	short get_ccyl
  6333 00002071 268B551D                		mov	dx, [es:di+1Dh]	; [es:di+BDS.totalsecs32+2]
  6334 00002075 268B451B                		mov	ax, [es:di+1Bh]	; [es:di+BDS.totalsecs32]
  6335                                  
  6336                                  get_ccyl:				
  6337 00002079 52                      		push	dx
  6338 0000207A 50                      		push	ax
  6339 0000207B 268B4515                		mov	ax, [es:di+15h]	; [es:di+BDS.heads]
  6340 0000207F 26F76513                		mul	word [es:di+13h] ; [es:di+BDS.secpertrack]
  6341                                  					; assume sectors per cyl. < 64k.
  6342 00002083 89C1                    		mov	cx, ax		; cx has # sectors per cylinder
  6343 00002085 58                      		pop	ax
  6344 00002086 5A                      		pop	dx		; dx:ax	= total	sectors
  6345 00002087 50                      		push	ax
  6346 00002088 89D0                    		mov	ax, dx
  6347 0000208A 31D2                    		xor	dx, dx
  6348 0000208C F7F1                    		div	cx
  6349 0000208E 2EA3[2905]              		mov	[cs:temp_h], ax	; ax be	0 here.
  6350 00002092 58                      		pop	ax
  6351 00002093 F7F1                    		div	cx		; div #sec by sec/cyl to get # cyl.
  6352 00002095 09D2                    		or	dx, dx
  6353 00002097 7401                    		jz	short no_cyl_rnd ; came out even
  6354 00002099 40                      		inc	ax		; round	up
  6355                                  
  6356                                  no_cyl_rnd:				
  6357 0000209A 26894525                		mov	[es:di+25h], ax	; [es:di+BDS.cylinders]
  6358 0000209E 06                      		push	es
  6359 0000209F 1F                      		pop	ds
  6360 000020A0 8D7506                  		lea	si, [di+6]	; [di+BDS.bytespersec]
  6361                                  					; ds:si	-> bpb for hard	file
  6362 000020A3 EB55                    		jmp	short set_recbpb
  6363                                  ; ---------------------------------------------------------------------------
  6364                                  
  6365                                  nothardff:				
  6366 000020A5 0E                      		push	cs
  6367 000020A6 1F                      		pop	ds
  6368                                  
  6369                                  ; if fake floppy drive variable is set then we don't have to handle this bds.
  6370                                  ; we can just go and deal with the next bds at label go_to_next_bds.
  6371                                  
  6372                                  		; 10/12/2022
  6373                                  		; ds = cs
  6374                                  		; 17/10/2022 (ds=cs)
  6375 000020A7 803E[D316]01            		cmp	byte [fakefloppydrv], 1
  6376                                  		;cmp	byte [cs:fakefloppydrv], 1
  6377 000020AC 7454                    		jz	short go_to_next_bds
  6378 000020AE 80FB07                  		cmp	bl, 7		; ffother
  6379                                  					; special case "other" type of medium
  6380 000020B1 753D                    		jnz	short not_process_other
  6381                                  process_other:
  6382 000020B3 31D2                    		xor	dx, dx
  6383 000020B5 8B4525                  		mov	ax, [di+25h]	; [di+BDS.cylinders]
  6384 000020B8 F76536                  		mul	word [di+36h]	; [di+BDS.rheads]
  6385 000020BB F76534                  		mul	word [di+34h]	; [di+BDS.rsecpertrack]
  6386 000020BE 89452F                  		mov	[di+2Fh], ax	; [di+BDS.rtotalsecs16]
  6387                                  					; have the total number of sectors
  6388 000020C1 48                      		dec	ax
  6389 000020C2 B201                    		mov	dl, 1
  6390                                  _again:					
  6391 000020C4 3DF60F                  		cmp	ax, 0FF6h	; 4096-10
  6392 000020C7 7206                    		jb	short _@@
  6393 000020C9 D1E8                    		shr	ax, 1
  6394 000020CB D0E2                    		shl	dl, 1
  6395 000020CD EBF5                    		jmp	short _again
  6396                                  ; ---------------------------------------------------------------------------
  6397                                  
  6398                                  _@@:					
  6399 000020CF 80FA01                  		cmp	dl, 1		; is it	a small	disk ?
  6400 000020D2 7405                    		jz	short __@@	; yes, 224 root	entries	is enuf
  6401 000020D4 C7452DF000              		mov	word [di+2Dh], 240 ; [di+BDS.rdirentries]
  6402                                  __@@:					
  6403 000020D9 885529                  		mov	[di+29h], dl	; [di+BDS.rsecperclus]
  6404                                  
  6405                                  ; logic to get the sectors/fat area.
  6406                                  ; fat entry is assumed to be 1.5 bytes!!!
  6407                                  
  6408                                  		; 10/12/2022
  6409                                  		; ds = cs
  6410                                  		; 17/10/2022 (ds=cs)
  6411 000020DC F726[5220]              		mul	word [word3]
  6412 000020E0 F736[5020]              		div	word [word2]
  6413 000020E4 31D2                    		xor	dx, dx
  6414 000020E6 F736[5420]              		div	word [word512]
  6415                                  		;
  6416                                  		; 10/12/2022
  6417                                  		;mul	word [cs:word3]	; * 3 ; mul word [cs:word3]
  6418                                  		;div	word [cs:word2]	; / 2 ; div word [cs:word2]
  6419                                  		;xor	dx, dx
  6420                                  		;div	word [cs:word512] ; / 512 ; div word [cs:word512]
  6421                                  		;
  6422 000020EA 40                      		inc	ax		; + 1
  6423                                  no_round_up:
  6424 000020EB 894532                  		mov	[di+32h], ax	; [di+BDS.rfatsecs]
  6425 000020EE EB12                    		jmp	short go_to_next_bds
  6426                                  ; ---------------------------------------------------------------------------
  6427                                  
  6428                                  not_process_other:			
  6429 000020F0 D1E3                    		shl	bx, 1		; bx is	word index into	table of bpbs
  6430                                  		;mov	si, bpbtable
  6431                                  		;mov	si, [bpbtable+bx] ; 15/10/2022
  6432                                  		; 09/12/2022
  6433                                  		;mov	si, BPBTABLE
  6434                                  		;mov	si, [bx+si]	; get address of bpb
  6435                                  		; 10/12/2022
  6436                                  		;mov	si, [BPBTABLE+bx]
  6437                                  		; 13/12/2022
  6438                                  		;mov	si, [SYSINITOFFSET+bpbtable+bx] ; wrong ! 14/08/2023
  6439                                  		; 14/08/2023
  6440                                  		SYSINIT_OFFSET equ (SYSINITSEG-DOSBIODATASEG<<4)
  6441                                  							; correct offset
  6442 000020F2 8BB7[2674]              		mov	si, [bx+SYSINIT_OFFSET+bpbtable]
  6443                                  
  6444                                  		; 28/08/2023
  6445 000020F6 81C6103D                		add	si, SYSINIT_OFFSET
  6446                                  set_recbpb:				
  6447 000020FA 8D7D27                  		lea	di, [di+27h]	; [di+BDS.R_BPB]
  6448                                  					; es:di	-> recbpb
  6449 000020FD B91900                  		mov	cx, 25		; bpbx.size
  6450 00002100 F3A4                    		rep movsb		; move (size bpbx) bytes	
  6451                                  go_to_next_bds:				
  6452 00002102 5F                      		pop	di
  6453 00002103 07                      		pop	es		; restore pointer to bds
  6454 00002104 26C43D                  		les	di, [es:di]	; [es:di+BDS.link]
  6455 00002107 83FFFF                  		cmp	di, 0FFFFh	; -1
  6456 0000210A 740A                    		jz	short got_end_of_bds_chain
  6457 0000210C E94DFF                  		jmp	_next_bds
  6458                                  ; ---------------------------------------------------------------------------
  6459                                  
  6460                                  		; 18/12/2022
  6461                                  ;got_end_of_bds_chain:			
  6462                                  		;retn
  6463                                  
  6464                                  ; =============== S U B	R O U T	I N E =======================================
  6465                                  
  6466                                  ; 15/10/2022
  6467                                  ; 30/12/2018 - Retro DOS v4.0
  6468                                  
  6469                                  ; al = device number
  6470                                  
  6471                                  print_init:	
  6472 0000210F 98                      		cbw
  6473 00002110 89C2                    		mov	dx, ax
  6474 00002112 B401                    		mov	ah, 1
  6475 00002114 CD17                    		int	17h		; PRINTER - INITIALIZE
  6476                                  					; DX = printer port (0-3)
  6477                                  					; Return: AH = status
  6478                                  got_end_of_bds_chain:	; 18/12/2022
  6479 00002116 C3                      		retn
  6480                                  
  6481                                  ; =============== S U B	R O U T	I N E =======================================
  6482                                  
  6483                                  ; al = device number
  6484                                  
  6485                                  aux_init:
  6486 00002117 98                      		cbw
  6487 00002118 89C2                    		mov	dx, ax
  6488                                  		;mov	al, 0A3h	; RSINIT ; 0A3h
  6489                                  					; 2400,n,1,8 (msequ.inc)
  6490                                  		;mov	ah, 0
  6491                                  		; 10/12/2022
  6492 0000211A B8A300                  		mov	ax, 00A3h
  6493 0000211D CD14                    		int	14h		; SERIAL I/O - INITIALIZE USART
  6494                                  					; 	AL = initializing parameters,
  6495                                  					;	DX = port number (0-3)
  6496                                  					; Return: AH = RS-232 status code bits,
  6497                                  					;	  AL = modem status bits
  6498 0000211F C3                      		retn
  6499                                  
  6500                                  ; =============== S U B	R O U T	I N E =======================================
  6501                                  
  6502                                  ; 15/10/2022 (Modified MSDOS 5.0 IO.SYS)
  6503                                  ; 30/12/2018 - Retro DOS v4.0
  6504                                  ; 03/06/2018 - Retro DOS v3.0
  6505                                  ; (19/03/2018 - Retro DOS v2.0)
  6506                                  
  6507                                  ; domini **********************************************************************
  6508                                  ;
  6509                                  ;mini disk initialization routine. called right after dohard
  6510                                  ;modified for >2 hardfile support
  6511                                  ;
  6512                                  ; **cs=ds=es=datagrp
  6513                                  ;
  6514                                  ; **domini will search for every extended partition in the system, and
  6515                                  ;   initialize it.
  6516                                  ;
  6517                                  ; **bdsm stands for bds table for mini disk and located right after the label
  6518                                  ;   end96tpi. end_of_bdsm will have the offset value of the ending
  6519                                  ;   address of bdsm table.
  6520                                  ;
  6521                                  ; **bdsm is the same as usual bds structure except that tim_lo, tim_hi entries
  6522                                  ;   are overlapped and used to identify mini disk and the number of hidden_trks.
  6523                                  ;   right now, they are called as ismini, hidden_trks respectively.
  6524                                  ;
  6525                                  ; **domini will use the same routine in sethard routine after label set2 to
  6526                                  ;   save coding.
  6527                                  ;
  6528                                  ; **drvmax determined in dohard routine will be used for the next
  6529                                  ;   available logical mini disk drive number.
  6530                                  ;
  6531                                  ; input: drvmax, dskdrvs
  6532                                  ;
  6533                                  ; output: minidisk installed. bdsm table established and installed to bds.
  6534                                  ;	  end_of_bdsm - ending offset address of bdsm.
  6535                                  ;
  6536                                  ; called modules:
  6537                                  ;		  getboot
  6538                                  ;		  find_mini_partition (new), xinstall_bds (new), M038
  6539                                  ;
  6540                                  ;		  setmini (new, it will use set2 routine)
  6541                                  ;
  6542                                  ; variables used: end_of_bdsm
  6543                                  ;		  rom_minidisk_num
  6544                                  ;		  mini_hdlim, mini_seclim
  6545                                  ;		  BDS_STRUC, start_bds
  6546                                  ;
  6547                                  ;******************************************************************************
  6548                                  
  6549                                  		; 19/10/2022
  6550                                  domini:	
  6551 00002120 8A36[4317]              		mov	dh, [hnum]	; get number of hardfiles
  6552                                  		; 10/12/2022
  6553 00002124 20F6                    		and	dh, dh
  6554                                  		;cmp	dh, 0
  6555 00002126 7431                    		jz	short dominiret	; no hard file?	then exit.
  6556 00002128 B280                    		mov	dl, 80h		; start	with hardfile 80h
  6557                                  domini_loop:				
  6558 0000212A 52                      		push	dx
  6559 0000212B 8816[4217]              		mov	[rom_minidisk_num], dl
  6560 0000212F B408                    		mov	ah, 8
  6561 00002131 CD13                    		int	13h		; DISK - DISK -	GET CURRENT DRIVE PARAMETERS (XT,AT,XT286,CONV,PS)
  6562                                  					; DL = drive number
  6563                                  					; Return: CF set on error, AH =	status code, BL	= drive	type
  6564                                  					; DL = number of consecutive drives
  6565                                  					; DH = maximum value for head number, ES:DI -> drive parameter
  6566 00002133 FEC6                    		inc	dh
  6567 00002135 31C0                    		xor	ax, ax
  6568 00002137 88F0                    		mov	al, dh
  6569 00002139 A3[4817]                		mov	[mini_hdlim], ax ; # of heads
  6570 0000213C 80E13F                  		and	cl, 3Fh
  6571 0000213F 88C8                    		mov	al, cl
  6572 00002141 A3[4A17]                		mov	[mini_seclim], ax ; # of sectors/track
  6573 00002144 06                      		push	es
  6574 00002145 8A16[4217]              		mov	dl, [rom_minidisk_num]
  6575 00002149 E836FB                  		call	getboot		; read master boot record into
  6576                                  					; initbootsegment:bootbias
  6577 0000214C 7203                    		jb	short domininext
  6578 0000214E E80900                  		call	find_mini_partition
  6579                                  domininext:				
  6580 00002151 07                      		pop	es
  6581 00002152 5A                      		pop	dx
  6582 00002153 FEC2                    		inc	dl		; next hard file
  6583 00002155 FECE                    		dec	dh
  6584 00002157 75D1                    		jnz	short domini_loop
  6585                                  dominiret:				
  6586 00002159 C3                      		retn
  6587                                  
  6588                                  ; =============== S U B	R O U T	I N E =======================================
  6589                                  
  6590                                  ; 15/10/2022 (Modified MSDOS 5.0 IO.SYS)
  6591                                  ; 30/12/2018 - Retro DOS v4.0
  6592                                  
  6593                                  ;find_mini_partition tries to find every extended partition on a disk.
  6594                                  ;at entry:	di -> bdsm entry
  6595                                  ;		es:bx -> 07c0:bootbias - master boot record
  6596                                  ;		rom_minidisk_num - rom drive number
  6597                                  ;		drvmax - logical drive number
  6598                                  ;		mini_hdlim, mini_seclim
  6599                                  ;
  6600                                  ;called routine: setmini which uses set2 (in sethard routine)
  6601                                  ;variables & equates used from original bios - flags, fnon_removable, fbigfat
  6602                                  
  6603                                  
  6604                                  find_mini_partition:	
  6605 0000215A 81C3C201                		add	bx, 1C2h	; bx ->	file system id
  6606                                  fmpnext:				
  6607 0000215E 26803F05                		cmp	byte [es:bx], 5 ; 5 = extended partition id.
  6608 00002162 740A                    		jz	short fmpgot
  6609 00002164 83C310                  		add	bx, 16
  6610 00002167 81FB0204                		cmp	bx, 402h	; 202h+bootbias
  6611 0000216B 75F1                    		jnz	short fmpnext
  6612                                  		;jmp	short fmpnextfound ; extended partition	not found
  6613                                  		; 18/12/2022
  6614                                  fmpnextfound:
  6615 0000216D C3                      		retn
  6616                                  
  6617                                  ;		; 30/07/2019 - Retro DOS v3.2
  6618                                  ;		jb	short fmpnext
  6619                                  ;fmpret:
  6620                                  ;		retn	; 29/05/2019
  6621                                  
  6622                                  ; ---------------------------------------------------------------------------
  6623                                  
  6624                                  		; 19/10/2022
  6625                                  fmpgot:					; found my partition.				
  6626 0000216E E8A100                  		call	dmax_check	; check	for drvmax already 26
  6627 00002171 73FA                    		jnb	short fmpnextfound ; done if too many
  6628 00002173 8B3E[4617]              		mov	di, [end_of_bdss] ; get next free	bds
  6629 00002177 C745470100              		mov	word [di+47h], 1 ; [di+BDS.bdsm_ismini]
  6630                                  		; 10/12/2022
  6631 0000217C 804D2301                		or	byte [di+23h], 1
  6632                                  		;or	word [di+23h], 1 ; [di+BDS.flags]
  6633                                  					; fNon_Removable
  6634 00002180 C6452205                		mov	byte [di+22h], 5 ; [di+BDS.formfactor]
  6635                                  					; ffHardFile
  6636 00002184 C606[CC16]00            		mov	byte [fbigfat], 0 ; assume 12 bit fat.
  6637 00002189 A1[4817]                		mov	ax, [mini_hdlim]
  6638 0000218C 894515                  		mov	[di+15h], ax	; [di+BDS.heads]
  6639 0000218F A1[4A17]                		mov	ax, [mini_seclim]
  6640 00002192 894513                  		mov	[di+13h], ax	; [di+BDS.secpertrack]
  6641 00002195 A0[4217]                		mov	al, [rom_minidisk_num]
  6642 00002198 884504                  		mov	[di+4],	al	; [di+BDS.drivenum]
  6643                                  					; set physical number
  6644 0000219B A0[7500]                		mov	al, [drvmax]
  6645 0000219E 884505                  		mov	[di+5],	al	; [di+BDS.drivelet]
  6646                                  					; set logical number
  6647 000021A1 26837F0A00              		cmp	word [es:bx+10], 0
  6648 000021A6 7707                    		ja	short fmpgot_cont
  6649 000021A8 26837F0840              		cmp	word [es:bx+8], 64 ; with current bpb,
  6650                                  					; only lower word is meaningful.
  6651 000021AD 72BE                    		jb	short fmpnextfound
  6652                                  					; should be bigger than 64 sectors at least
  6653                                  fmpgot_cont:				
  6654 000021AF 83EB04                  		sub	bx, 4		; let bx point to the start of the entry
  6655 000021B2 268A7702                		mov	dh, [es:bx+2]	; cylinder
  6656 000021B6 80E6C0                  		and	dh, 0C0h	; get higher bits of cyl
  6657 000021B9 D0C6                    		rol	dh, 1
  6658 000021BB D0C6                    		rol	dh, 1
  6659 000021BD 268A5703                		mov	dl, [es:bx+3]	; cyl byte
  6660 000021C1 895549                  		mov	[di+49h], dx	; [di+BDS.bdsm_hidden_trks]
  6661                                  					; set hidden trks
  6662 000021C4 268B4F02                		mov	cx, [es:bx+2]	; cylinder,cylinder/sector
  6663 000021C8 268A7701                		mov	dh, [es:bx+1]	; head
  6664 000021CC 8A16[4217]              		mov	dl, [rom_minidisk_num]
  6665 000021D0 BB0002                  		mov	bx, 200h	; bootbias
  6666 000021D3 B80102                  		mov	ax, 201h
  6667 000021D6 CD13                    		int	13h		; DISK - READ SECTORS INTO MEMORY
  6668                                  					; AL = number of sectors to read, CH = track, CL = sector
  6669                                  					; DH = head, DL	= drive, ES:BX -> buffer to fill
  6670                                  					; Return: CF set on error, AH =	status,	AL = number of sectors read
  6671 000021D8 7293                    		jb	short fmpnextfound
  6672 000021DA BBC203                  		mov	bx, 3C2h	; 1C2h+bootbias
  6673 000021DD 06                      		push	es
  6674 000021DE E80900                  		call	setmini		; install a mini disk.
  6675                                  					; bx value saved.
  6676 000021E1 07                      		pop	es
  6677 000021E2 7203                    		jb	short fmpnextchain
  6678 000021E4 E84000                  		call	xinstall_bds	; -- install the bdsm into table
  6679                                  fmpnextchain:				
  6680 000021E7 E974FF                  		jmp	fmpnext		; let's find out
  6681                                  					; if we	have any chained partition
  6682                                  ; ---------------------------------------------------------------------------
  6683                                  
  6684                                  		; 18/12/2022
  6685                                  ;fmpnextfound:				
  6686                                  		;retn
  6687                                  
  6688                                  ; =============== S U B	R O U T	I N E =======================================
  6689                                  
  6690                                  ; 15/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
  6691                                  ; 28/12/2018 - Retro DOS v4.0 (MSDOS 6.21)
  6692                                  
  6693                                  setmini:	; 'setmini' is called from 'find_mini_partition' procedure
  6694                                  	
  6695 000021EA 57                      		push	di
  6696 000021EB 53                      		push	bx
  6697 000021EC 1E                      		push	ds
  6698 000021ED 06                      		push	es
  6699                                  setmini_1:				
  6700 000021EE 26803F01                		cmp	byte [es:bx], 1 ; FAT12 partition
  6701 000021F2 741B                    		jz	short setmini_2
  6702 000021F4 26803F04                		cmp	byte [es:bx], 4 ; FAT16 partition
  6703 000021F8 7415                    		jz	short setmini_2
  6704 000021FA 26803F06                		cmp	byte [es:bx], 6 ; FAT16 BIG	partition
  6705 000021FE 740F                    		jz	short setmini_2
  6706 00002200 83C310                  		add	bx, 16
  6707 00002203 81FB0204                		cmp	bx, 402h	; 202h+bootbias
  6708 00002207 75E5                    		jnz	short setmini_1
  6709 00002209 F9                      		stc
  6710 0000220A 07                      		pop	es
  6711 0000220B 1F                      		pop	ds
  6712 0000220C 5B                      		pop	bx
  6713 0000220D 5F                      		pop	di
  6714 0000220E C3                      		retn
  6715                                  
  6716                                  ; ---------------------------------------------------------------------------
  6717                                  setmini_2:				
  6718 0000220F E91DFB                  		jmp	set2		; branch into middle of sethard
  6719                                  
  6720                                  ; =============== S U B	R O U T	I N E =======================================
  6721                                  
  6722                                  ; 15/10/2022
  6723                                  ; 28/12/2018 - Retro DOS v4.0
  6724                                  ;
  6725                                  ; dmax_check --- call this when we want to install a new drive.
  6726                                  ;		it checks for drvmax < 26 to see if there is
  6727                                  ;		a drive letter left.
  6728                                  ;
  6729                                  ;	drvmax < 26 : carry SET!
  6730                                  ;	drvmax >=26 : carry RESET!, error flag set for message later
  6731                                  ;			trash ax
  6732                                  
  6733                                  dmax_check:	
  6734 00002212 803E[7500]1A            		cmp	byte [drvmax], 26 ; checks for drvmax < 26
  6735 00002217 720D                    		jb	short dmax_ok	; return with carry if okay
  6736 00002219 06                      		push	es
  6737                                  		;mov	ax, 46Dh	; SYSINIT_SEG (SYSINIT segment)
  6738 0000221A B84104                  		mov	ax, SYSINITSEG	; 17/10/2022	
  6739 0000221D 8EC0                    		mov	es, ax
  6740                                  		; 18/10/2022
  6741 0000221F 26C606[FF03]01          		mov	byte [es:TOOMANYDRIVESFLAG], 1 ; 09/12/2022 
  6742                                  		;mov	byte ptr es:3FFh, 1 ; [es:toomanydrivesflag]
  6743                                  					; set message flag
  6744                                  					; [SYSINIT+toomanydrivesflag]
  6745 00002225 07                      		pop	es
  6746                                  
  6747                                  		;;push	es
  6748                                  		;;mov	ax,SYSINIT_SEG
  6749                                  		;;mov	es,ax
  6750                                  		;;mov	byte [es:toomanydrivesflag],1
  6751                                  					; set message flag
  6752                                  		;;pop	es
  6753                                  		;
  6754                                  		;mov	byte [SYSINIT+toomanydrivesflag],1
  6755                                  dmax_ok:				
  6756 00002226 C3                      		retn
  6757                                  
  6758                                  ; =============== S U B	R O U T	I N E =======================================
  6759                                  
  6760                                  ; 18/10/2022
  6761                                  ; 15/10/2022
  6762                                  ; 28/12/2018 - Retro DOS v4.0						
  6763                                  ;								 
  6764                                  ;	link next bds (at ds:di) into the chain. assume that the
  6765                                  ;	  chain is entirely within ds == datagrp. also update drvmax,
  6766                                  ;	  dskdrv_table, and end_of_bdss.	
  6767                                  
  6768                                  xinstall_bds:		
  6769 00002227 56                      		push	si
  6770 00002228 53                      		push	bx
  6771 00002229 8B36[1901]              		mov	si, [start_bds]	; get first bds
  6772                                  xinstall_bds_1:				
  6773 0000222D 833CFF                  		cmp	word [si], 0FFFFh ; is this the last one?
  6774 00002230 7404                    		jz	short xinstall_bds_2 ;	skip ahead if so
  6775                                  		;mov	si, [si+BDS.link]
  6776 00002232 8B34                    		mov	si, [si]	; chain	through	list
  6777 00002234 EBF7                    		jmp	short xinstall_bds_1
  6778                                  ; ---------------------------------------------------------------------------
  6779                                  
  6780                                  xinstall_bds_2:				
  6781                                  		;mov	[si+BDS.link], di
  6782 00002236 893C                    		mov	[si], di
  6783                                  		;mov	[si+BDS.link+2], ds
  6784 00002238 8C5C02                  		mov	[si+2], ds
  6785                                  		;mov	word [di+BDS.link], -1
  6786 0000223B C705FFFF                		mov	word [di], 0FFFFh ; make sure it is a null ptr.
  6787                                  		;mov	[di+BDS.link+2], ds
  6788 0000223F 8C5D02                  		mov	[di+2], ds ; might as well plug segment
  6789                                  		; 20/03/2019 - Retro DOS v4.0
  6790                                  		;lea	bx, [di+BDS.BPB]
  6791 00002242 8D5D06                  		lea	bx, [di+6]
  6792 00002245 8B36[4417]              		mov	si, [last_dskdrv_table]
  6793 00002249 891C                    		mov	[si], bx
  6794 0000224B 8306[4417]02            		add	word [last_dskdrv_table], 2
  6795 00002250 FE06[7500]              		inc	byte [drvmax]
  6796 00002254 8306[4617]64            		add	word [end_of_bdss], 100 ; BDS.size = 100
  6797 00002259 5B                      		pop	bx
  6798 0000225A 5E                      		pop	si
  6799 0000225B C3                      		retn
  6800                                  
  6801                                  ; =============== S U B	R O U T	I N E =======================================
  6802                                  
  6803                                  ; 17/10/2022
  6804                                  ; 15/10/2022
  6805                                  ; 28/12/2018 - Retro DOS v4.0
  6806                                  ; 03/06/2018 - Retro DOS v3.0
  6807                                  
  6808                                  cmos_clock_read:	
  6809 0000225C 50                      		push	ax
  6810 0000225D 51                      		push	cx
  6811 0000225E 52                      		push	dx
  6812 0000225F 55                      		push	bp
  6813 00002260 31ED                    		xor	bp, bp
  6814                                  loop_clock:				
  6815 00002262 31C9                    		xor	cx, cx
  6816 00002264 31D2                    		xor	dx, dx
  6817 00002266 B402                    		mov	ah, 2
  6818 00002268 CD1A                    		int	1Ah		; CLOCK	- READ REAL TIME CLOCK (AT,XT286,CONV,PS)
  6819                                  					; Return: CH = hours in	BCD
  6820                                  					; CL = minutes in BCD
  6821                                  					; DH = seconds in BCD
  6822 0000226A 83F900                  		cmp	cx, 0
  6823 0000226D 7512                    		jnz	short clock_present
  6824 0000226F 83FA00                  		cmp	dx, 0
  6825 00002272 750D                    		jnz	short clock_present
  6826 00002274 83FD01                  		cmp	bp, 1		; read again after a slight delay, in case clock
  6827 00002277 741C                    		jz	short no_readdate ; was	at zero	setting.
  6828 00002279 45                      		inc	bp		; only perform delay once.
  6829 0000227A B90040                  		mov	cx, 4000h	; 16384
  6830                                  delay:					
  6831 0000227D E2FE                    		loop	delay
  6832 0000227F EBE1                    		jmp	short loop_clock
  6833                                  ; ---------------------------------------------------------------------------
  6834                                  
  6835                                  clock_present:				
  6836 00002281 2EC606[F304]01          		mov	byte [cs:havecmosclock], 1 ; set the flag for cmos clock
  6837 00002287 E81000                  		call	cmosck		; reset	cmos clock rate	that may be
  6838                                  					; possibly destroyed by	cp dos and
  6839                                  					; post routine did not restore that.
  6840 0000228A 56                      		push	si
  6841 0000228B E89BF2                  		call	read_real_date	; read real-time clock for date
  6842 0000228E FA                      		cli
  6843                                  		;mov	ds:daycnt, si	; set system date
  6844 0000228F 8936[F004]              		mov	[daycnt], si
  6845 00002293 FB                      		sti
  6846 00002294 5E                      		pop	si
  6847                                  
  6848                                  no_readdate:				
  6849 00002295 5D                      		pop	bp
  6850 00002296 5A                      		pop	dx
  6851 00002297 59                      		pop	cx
  6852 00002298 58                      		pop	ax
  6853 00002299 C3                      		retn
  6854                                  
  6855                                  ; ---------------------------------------------------------------------------
  6856                                  
  6857                                  ; the following code is written by jack gulley in engineering group.
  6858                                  ; cp dos (CP/DOS, OS/2) is changing cmos clock rate for its own purposes
  6859                                  ; and if the use cold boot the system to use pc dos while running cp dos,
  6860                                  ; the cmos clock rate are still slow which slow down disk operations
  6861                                  ; of pc dos which uses cmos clock. pc dos is put this code in msinit
  6862                                  ; to fix this problem at the request of cp dos.
  6863                                  ;
  6864                                  ; the program is modified to be run on msinit. equates are defined
  6865                                  ; in cmosequ.inc. this program will be called by cmos_clock_read procedure.
  6866                                  ;
  6867                                  ;  the following code cmosck is used to insure that the cmos has not
  6868                                  ;	had its rate controls left in an invalid state on older at's.
  6869                                  ;
  6870                                  ;	it checks for an at model byte "fc" with a submodel type of
  6871                                  ;	00, 01, 02, 03 or 06 and resets the periodic interrupt rate
  6872                                  ;	bits in case post has not done it. this initilization routine
  6873                                  ;	is only needed once when dos loads. it should be run as soon
  6874                                  ;	as possible to prevent slow diskette access.
  6875                                  ;
  6876                                  ;	this code exposes one to dos clearing cmos setup done by a
  6877                                  ;	resident program that hides and re-boots the system.
  6878                                  
  6879                                  cmosck:					; check and reset rtc rate bits	
  6880                                  
  6881                                  ;model byte and submodel byte were already determined in msinit.
  6882                                  
  6883                                  	; 16/06/2018 - Retro DOS v3.0
  6884                                  	; 19/03/2018 (Model: 0FCh, Sub Model: 01h, REF: AMIBIOS Prog. Guide)
  6885                                  			
  6886 0000229A 50                      		push	ax
  6887 0000229B 2E803E[3E06]FC          		cmp	byte [cs:model_byte], 0FCh
  6888 000022A1 7525                    		jnz	short cmosck9	; Exit if not an AT model
  6889 000022A3 2E803E[3F06]06          		cmp	byte [cs:secondary_model_byte], 6
  6890                                  					; Is it 06 for the industral AT ?
  6891 000022A9 7408                    		jz	short cmosck4	; Go reset CMOS	periodic rate if 06
  6892 000022AB 2E803E[3F06]04          		cmp	byte [cs:secondary_model_byte], 4
  6893                                  					; Is it 00, 01, 02, or 03 ?
  6894 000022B1 7315                    		jnb	short cmosck9	; EXIT if problem fixed by POST  
  6895                                  					; Also,Secondary_model_byte = 0 
  6896                                  					;   when AH=0C0h, int 15h failed.
  6897                                  					;	RESET THE CMOS PERIODIC RATE 
  6898                                  					;  Model=FC submodel=00,01,02,03 or 06 
  6899                                  cmosck4:				
  6900 000022B3 B08A                    		mov	al, 8Ah		; cmos_reg_a|nmi
  6901                                  					; NMI disabled on return
  6902 000022B5 B426                    		mov	ah, 26h		; 00100110b
  6903                                  					; Set divider &	rate selection
  6904 000022B7 E83000                  		call	cmos_write
  6905 000022BA B08B                    		mov	al, 8Bh		; cmos_reg_b|nmi
  6906                                  					; NMI disabled on return
  6907 000022BC E80B00                  		call	cmos_read
  6908 000022BF 2407                    		and	al, 7		; 00000111b
  6909                                  					; clear	SET,PIE,AIE,UIE,SQWE
  6910 000022C1 88C4                    		mov	ah, al
  6911 000022C3 B00B                    		mov	al, 0Bh		; cmos_reg_b
  6912                                  					; NMI enabled on return
  6913 000022C5 E82200                  		call	cmos_write
  6914                                  cmosck9:				
  6915 000022C8 58                      		pop	ax
  6916 000022C9 C3                      		retn
  6917                                  
  6918                                  ; =============== S U B	R O U T	I N E =======================================
  6919                                  
  6920                                  ;--- CMOS_READ -----------------------------------------------------------------
  6921                                  ;		read byte from cmos system clock configuration table	       :
  6922                                  ;									       :
  6923                                  ; input: (al)=	cmos table address to be read				       :
  6924                                  ;		bit    7 = 0 for nmi enabled and 1 for nmi disabled on exit    :
  6925                                  ;		bits 6-0 = address of table location to read		       :
  6926                                  ;									       :
  6927                                  ; output: (al)	value at location (al) moved into (al). if bit 7 of (al) was   :
  6928                                  ;		on then nmi left disabled.  during the cmos read both nmi and  :
  6929                                  ;		normal interrupts are disabled to protect cmos data integrity. :
  6930                                  ;		the cmos address register is pointed to a default value and    :
  6931                                  ;		the interrupt flag restored to the entry state on return.      :
  6932                                  ;		only the (al) register and the nmi state is changed.	       :
  6933                                  ;-------------------------------------------------------------------------------
  6934                                  
  6935                                  cmos_read:				; read location (al) into (al)	
  6936 000022CA 9C                      		pushf
  6937 000022CB FA                      		cli
  6938 000022CC 53                      		push	bx
  6939 000022CD 50                      		push	ax		; AL = cmos table address to be	read
  6940 000022CE 0C80                    		or	al, 80h
  6941 000022D0 E670                    		out	70h, al		; CMOS Memory/RTC Index	Register:
  6942                                  					; RTC Seconds
  6943 000022D2 90                      		nop			; (undocumented	delay needed)
  6944 000022D3 E471                    		in	al, 71h		; CMOS Memory/RTC Data Register
  6945 000022D5 89C3                    		mov	bx, ax
  6946 000022D7 58                      		pop	ax
  6947 000022D8 2480                    		and	al, 80h
  6948 000022DA 0C0F                    		or	al, 0Fh
  6949 000022DC E670                    		out	70h, al		; CMOS Memory/RTC Index	Register:
  6950                                  					; RTC Seconds
  6951 000022DE 90                      		nop
  6952 000022DF E471                    		in	al, 71h		; CMOS Memory/RTC Data Register
  6953 000022E1 89D8                    		mov	ax, bx
  6954 000022E3 5B                      		pop	bx
  6955 000022E4 0E                      		push	cs		; *place code segment in stack and
  6956 000022E5 E80100                  		call	cmos_popf	; *handle popf for b- level 80286
  6957 000022E8 C3                      		retn			; return with flags restored
  6958                                  
  6959                                  ; ---------------------------------------------------------------------------
  6960                                  
  6961                                  cmos_popf:				
  6962 000022E9 CF                      		iret			; popf for level b- parts
  6963                                  					; return far and restore flags
  6964                                  
  6965                                  ; =============== S U B	R O U T	I N E =======================================
  6966                                  
  6967                                  ;--- cmos_write ----------------------------------------------------------------
  6968                                  ;		write byte to cmos system clock configuration table	       :
  6969                                  ;									       :
  6970                                  ; input: (al)=	cmos table address to be written to			       :
  6971                                  ;		bit    7 = 0 for nmi enabled and 1 for nmi disabled on exit    :
  6972                                  ;		bits 6-0 = address of table location to write		       :
  6973                                  ;	 (ah)=	new value to be placed in the addressed table location	       :
  6974                                  ;									       :
  6975                                  ; output:	value in (ah) placed in location (al) with nmi left disabled   :
  6976                                  ;		if bit 7 of (al) is on. during the cmos update both nmi and    :
  6977                                  ;		normal interrupts are disabled to protect cmos data integrity. :
  6978                                  ;		the cmos address register is pointed to a default value and    :
  6979                                  ;		the interrupt flag restored to the entry state on return.      :
  6980                                  ;		only the cmos location and the nmi state is changed.	       :
  6981                                  ;-------------------------------------------------------------------------------
  6982                                  
  6983                                  cmos_write:				; write (ah) to location (al)	
  6984 000022EA 9C                      		pushf			; write (ah) to location (al)
  6985 000022EB 50                      		push	ax		; save work register values
  6986 000022EC FA                      		cli
  6987 000022ED 50                      		push	ax		; save user nmi	state
  6988 000022EE 0C80                    		or	al, 80h		; disable nmi for us
  6989 000022F0 E670                    		out	70h, al		; CMOS Memory/RTC Index	Register:
  6990                                  					; RTC Seconds
  6991 000022F2 90                      		nop
  6992 000022F3 88E0                    		mov	al, ah
  6993 000022F5 E671                    		out	71h, al		; CMOS Memory/RTC Data Register
  6994 000022F7 58                      		pop	ax		; get user nmi
  6995 000022F8 2480                    		and	al, 80h
  6996 000022FA 0C0F                    		or	al, 0Fh
  6997 000022FC E670                    		out	70h, al		; CMOS Memory/RTC Index	Register:
  6998                                  					; RTC Seconds
  6999 000022FE 90                      		nop
  7000 000022FF E471                    		in	al, 71h		; CMOS Memory/RTC Data Register
  7001 00002301 58                      		pop	ax		; restore work registers
  7002 00002302 0E                      		push	cs		; *place code segment in stack and
  7003 00002303 E8E3FF                  		call	cmos_popf	; *handle popf for b- level 80286
  7004 00002306 C3                      		retn
  7005                                  
  7006                                  ; 21/12/2022
  7007                                  ; ---------------------------------------------------------------------------
  7008                                  ; ---------------------------------------------------------------------------
  7009                                  %if 0
  7010                                  
  7011                                  ; ---------------------------------------------------------------------------
  7012                                  ; MSINIT.ASM (MSDOS 6.0, 1991)
  7013                                  ; ---------------------------------------------------------------------------
  7014                                  ; The following routines provide support for reading in the file MSDOS.SYS.
  7015                                  ; ---------------------------------------------------------------------------
  7016                                  
  7017                                  ; 15/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
  7018                                  ;
  7019                                  ; (For Retro DOS, 'IO.SYS' and 'MSDOS.SYS' are already loaded together
  7020                                  ;  at once -as single kernel file- by the Retro DOS boot sector code.
  7021                                  ;  So, following disk reads -MSDOS.SYS loading- is not needed!
  7022                                  ;  Only needing is to move MSDOS Kernel to it's final memory location.) 
  7023                                  
  7024                                  ; =============== S U B	R O U T	I N E =======================================
  7025                                  
  7026                                  ; GetClus, read in a cluster at a specified address
  7027                                  ;
  7028                                  ;  bx = cluster to read
  7029                                  ;  cx = sectors per cluster
  7030                                  ;  es:di = load location
  7031                                  
  7032                                  ; 17/10/2022
  7033                                  ;DISKRD equ diskrd - DOSBIOSEG_2C7h	; (8E5h for MSDOS 5.0 IO.SYS)
  7034                                  ; 09/12/2022
  7035                                  DISKRD equ diskrd
  7036                                  
  7037                                  		; 17/10/2022
  7038                                  getclus:				
  7039                                  		push	cx
  7040                                  		push	di
  7041                                  		mov	[cs:doscnt], cx
  7042                                  		mov	ax, bx
  7043                                  		dec	ax
  7044                                  		dec	ax
  7045                                  		mul	cx		; convert to logical sector
  7046                                  					; dx:ax	= matching logical sector number
  7047                                  					;	  starting from the data sector
  7048                                  		add	ax, [cs:bios_l]
  7049                                  		adc	dx, [cs:bios_h]	; dx:ax	= first	logical	sector to read
  7050                                  unpack:					
  7051                                  		push	ds
  7052                                  		push	ax
  7053                                  		push	bx
  7054                                  		mov	si, [cs:fatloc]
  7055                                  		mov	ds, si
  7056                                  		mov	si, bx		; next cluster
  7057                                  		test	byte [cs:fbigfat], 40h	; fbig
  7058                                  					; 16 bit fat?
  7059                                  		jnz	short unpack16	; yes
  7060                                  		shr	si, 1		; 12 bit fat. si=si/2
  7061                                  					; si = clus + clus/2
  7062                                  		add	si, bx		;
  7063                                  					; (si =	byte offset of the cluster in the FAT)
  7064                                  		push	dx
  7065                                  		xor	dx, dx
  7066                                  		call	get_fat_sector
  7067                                  		pop	dx
  7068                                  		mov	ax, [bx]	; save it into ax
  7069                                  		jnz	short even_odd	; if not a splitted fat, check even-odd.
  7070                                  		; 25/06/2023	
  7071                                  		;mov	al, [bx]	; splitted fat
  7072                                  		mov	[cs:temp_cluster], al
  7073                                  		inc	si		; (next	byte)
  7074                                  		push	dx
  7075                                  		xor	dx, dx
  7076                                  		call	get_fat_sector
  7077                                  		pop	dx
  7078                                  		;mov	al, ds:0
  7079                                  		mov	al, [0] ; 19/10/2022
  7080                                  		mov	[cs:temp_cluster+1], al
  7081                                  		mov	ax, [cs:temp_cluster]
  7082                                  even_odd:				
  7083                                  		pop	bx		; restore old fat entry	value
  7084                                  		push	bx		; save it right	away.
  7085                                  		shr	bx, 1		; was it even or odd?
  7086                                  		jnb	short havclus	; it was even.
  7087                                  		shr	ax, 1		; odd. massage fat value and keep
  7088                                  					; the highest 12 bits.
  7089                                  		shr	ax, 1
  7090                                  		shr	ax, 1
  7091                                  		shr	ax, 1
  7092                                  havclus:				
  7093                                  		mov	bx, ax		; now bx = new fat entry.
  7094                                  		and	bx, 0FFFh	; keep low 12 bits.
  7095                                  		jmp	short unpackx
  7096                                  ; ---------------------------------------------------------------------------
  7097                                  
  7098                                  unpack16:				
  7099                                  		push	dx
  7100                                  		xor	dx, dx
  7101                                  		shl	si, 1		; extend to 32 bit offset
  7102                                  		adc	dx, 0
  7103                                  		call	get_fat_sector
  7104                                  		pop	dx
  7105                                  		mov	bx, [bx]	;
  7106                                  					; bx = new fat entry.
  7107                                  unpackx:				
  7108                                  		pop	si		; restore old bx value into si
  7109                                  		pop	ax		; restore logical sector (low)
  7110                                  		pop	ds
  7111                                  		sub	si, bx
  7112                                  		cmp	si, -1		; one apart?
  7113                                  		jnz	short getcl2
  7114                                  		add	[cs:doscnt], cx
  7115                                  		jmp	short unpack
  7116                                  ; ---------------------------------------------------------------------------
  7117                                  
  7118                                  getcl2:					
  7119                                  		push	bx
  7120                                  		push	dx		; sector to read (high)
  7121                                  		push	ax		; sector to read (low)
  7122                                  		mov	ax, [cs:drvfat]	; get drive and	fat spec
  7123                                  		mov	cx, [cs:doscnt]
  7124                                  		pop	dx		; sector to read for diskrd (low)
  7125                                  		pop	word [cs:start_sec_h]
  7126                                  					; sector to read for diskrd (high)
  7127                                  		push	ds
  7128                                  		push	cs
  7129                                  		pop	ds
  7130                                  		push	cs		; simulate far call
  7131                                  		; 17/10/2022
  7132                                  		mov	bp, DISKRD	; 8E5h
  7133                                  		;mov	bp, 8E5h	; offset diskrd
  7134                                  					; 2C7h:8E5h = 70h:2E55h
  7135                                  		call	call_bios_code	; read the clusters
  7136                                  		pop	ds
  7137                                  		pop	bx
  7138                                  		pop	di
  7139                                  		mov	ax, [cs:doscnt]	; get number of	sectors	read
  7140                                  		xchg	ah, al		; multiply by 256
  7141                                  		shl	ax, 1		; times	2 equal	512
  7142                                  		add	di, ax		; update load location
  7143                                  		pop	cx		; restore sectors/cluster
  7144                                  		retn
  7145                                  
  7146                                  ; =============== S U B	R O U T	I N E =======================================
  7147                                  
  7148                                  
  7149                                  ;function: find and read the corresponding fat sector into ds:0
  7150                                  ;
  7151                                  ;in). dx:si - offset value (starting from fat entry 0) of fat entry to find. M054
  7152                                  ;     ds - fatloc segment
  7153                                  ;     cs:drvfat - logical drive number, fat id
  7154                                  ;     cs:md_sectorsize
  7155                                  ;     cs:last_fat_secnum - last fat sector number read in.
  7156                                  ;
  7157                                  ;out). corresponding fat sector read in.
  7158                                  ;      bx = offset value from fatlog segment.
  7159                                  ;      other registera saved.
  7160                                  ;      zero flag set if the fat entry is splitted, i.e., when 12 bit fat entry
  7161                                  ;      starts at the last byte of the fat sector. in this case, the caller
  7162                                  ;      should save this byte, and read the next fat sector to get the rest
  7163                                  ;      of the fat entry value. (this will only happen with the 12 bit fat.)
  7164                                  
  7165                                  		; 17/10/2022
  7166                                  get_fat_sector:	
  7167                                  		push	ax
  7168                                  		push	cx
  7169                                  		push	di
  7170                                  		push	si
  7171                                  		push	es
  7172                                  		push	ds
  7173                                  		mov	ax, si
  7174                                  		mov	cx, [cs:md_sectorsize] ; 512
  7175                                  		div	cx		; ax = sector number, dx = offset
  7176                                  		nop
  7177                                  
  7178                                  		; Get rid of the assumption that
  7179                                  		; there	is only	one reserved sector
  7180                                  
  7181                                  		push	es
  7182                                  		push	ds
  7183                                  		push	di
  7184                                  		push	ax
  7185                                  		push	cs
  7186                                  		pop	ds
  7187                                  
  7188                                  		mov	ax, [cs:drvfat]	; get drive # and FAT id
  7189                                  		mov	bp, SETDRIVE
  7190                                  		;mov	bp, 4D7h	; setdrive
  7191                                  					; at 2C7h:4D7h = 70h:2A47h
  7192                                  		push	cs		; simulate far call
  7193                                  		call	call_bios_code	; get bds for drive
  7194                                  		pop	ax		; (sector number -without reserved and hidden sectors-)
  7195                                  		add	ax, [es:di+9]	; [es:di+BDS.resectors]
  7196                                  					; add #reserved_sectors
  7197                                  		pop	di
  7198                                  		pop	ds
  7199                                  		pop	es
  7200                                  		cmp	ax, [cs:last_fat_sec_num]
  7201                                  		jz	short gfs_split_chk ; don't need to read it again.
  7202                                  		mov	[cs:last_fat_sec_num], ax 
  7203                                  					; sector number
  7204                                  					; (in the partition, without hidden sectors)
  7205                                  		push	dx
  7206                                  		mov	word [cs:start_sec_h], 0 
  7207                                  					; prepare to read the fat sector
  7208                                  					; start_sec_h is always	0 for fat sector.
  7209                                  		mov	dx, ax
  7210                                  		mov	cx, 1		; 1 sector read
  7211                                  		mov	ax, [cs:drvfat]
  7212                                  		push	ds
  7213                                  		pop	es
  7214                                  		xor	di, di		; es:di	-> fatloc segment:0
  7215                                  		push	ds
  7216                                  		push	cs
  7217                                  		pop	ds
  7218                                  		push	cs		; simulate far call
  7219                                  		mov	bp, DISKRD	; 8E5h
  7220                                  		;mov	bp, 8E5h	; offset diskrd
  7221                                  					; 2C7h:8E5h = 70h:2E55h
  7222                                  		call	call_bios_code
  7223                                  		pop	ds
  7224                                  		pop	dx
  7225                                  		mov	cx, [cs:md_sectorsize] ; 512
  7226                                  
  7227                                  gfs_split_chk:				
  7228                                  		dec	cx		; 511
  7229                                  		cmp	dx, cx		; if offset points to the
  7230                                  					; last byte of this sector,
  7231                                  					; then splitted	entry.
  7232                                  		mov	bx, dx		; set bx to dx
  7233                                  		pop	ds
  7234                                  		pop	es
  7235                                  		pop	si
  7236                                  		pop	di
  7237                                  		pop	cx
  7238                                  		pop	ax
  7239                                  		retn
  7240                                  
  7241                                  ; 15/10/2022
  7242                                  ;Bios_Data_Init	ends
  7243                                  
  7244                                  %endif
  7245                                  ; ---------------------------------------------------------------------------
  7246                                  ; ---------------------------------------------------------------------------
  7247                                  
  7248                                  		; 09/12/2022
  7249                                  		;db 0
  7250                                  
  7251                                  numbertodiv	equ ($-BData_start)
  7252                                  numbertomod	equ (numbertodiv % 16)
  7253                                  
  7254                                  %if numbertomod>0 & numbertomod<16
  7255 00002307 00<rep 9h>              		times (16-numbertomod) db 0
  7256                                  %endif
  7257                                  
  7258                                  ;align 16
  7259                                  
  7260                                  ; 09/12/2022
  7261                                  IOSYSCODESEGOFF	equ $ - BData_start
  7262                                  IOSYSCODESEG	equ (IOSYSCODESEGOFF>>4)+(700h>>4)
  7263                                  
  7264                                  ;--- End of DOSBIOS data segment --------------------------------------------
  7265                                  ; ---------------------------------------------------------------------------
  7266                                  		;db 4 dup(0)
  7267                                  ; 09/12/2022		
  7268                                  ;		times 4 db 0	; 19/10/2022
  7269                                  ; ---------------------------------------------------------------------------
  7270                                  
  7271                                  ;============================================================================
  7272                                  ; DOS BIOS (IO.SYS) CODE SEGMENT 
  7273                                  ;============================================================================
  7274                                  ; 09/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
  7275                                  
  7276                                  section .BIOSCODE vstart=0  
  7277                                  
  7278                                  BCode_start:	 ; 09/12/2022
  7279                                   
  7280                                  ; 02/10/2022
  7281                                  
  7282                                  ;--- DOSBIOS code segment ---------------------------------------------------
  7283                                  ;----------------------------------------------------------------------------
  7284                                  ; MSBIO1.ASM (MSDOS 6.0, 1991)
  7285                                  ;----------------------------------------------------------------------------
  7286                                  
  7287                                  DOSBIOSEG_2C7h:	;db 30h dup(0)		; SEGMENT 2C7h (2C70h-700h=2570h)
  7288 00000000 00<rep 30h>             		times 48 db 0		; 19/10/2022	
  7289 00000030 7000                    BiosDataWord:	dw 70h
  7290                                  
  7291                                  ; 15/10/2022
  7292                                  ;BIOSDATAWORD	equ BiosDataWord - DOSBIOSEG_2C7h
  7293                                  ; 09/12/2022
  7294                                  BIOSDATAWORD	equ BiosDataWord
  7295                                  
  7296                                  ; ---------------------------------------------------------------------------
  7297                                  
  7298                                  ; 15/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS) 
  7299                                  
  7300                                  ;************************************************************************
  7301                                  ;*									*
  7302                                  ;*	seg_reinit is called with ax = our new code segment value,	*
  7303                                  ;*	  trashes di, cx, es						*
  7304                                  ;*									*
  7305                                  ;*	cas -- should be made disposable!				*
  7306                                  ;*									*
  7307                                  ;************************************************************************
  7308                                  
  7309                                  _seg_reinit:
  7310 00000032 2E8E06[3000]            		mov	es, [cs:BIOSDATAWORD]
  7311                                  					; at 2C7h:30h or 70h:25A0h
  7312                                  		;mov	di, (offset cdev+2)
  7313 00000037 BF[E006]                		mov	di, cdev+2	; 19/10/2022
  7314 0000003A B90400                  		mov	cx, 4		; (end_BC_entries - cdev)/4
  7315                                  
  7316                                  _seg_reinit_1:				
  7317 0000003D AB                      		stosw			; modify Bios_Code entry points
  7318 0000003E 47                      		inc	di
  7319 0000003F 47                      		inc	di
  7320 00000040 E2FB                    		loop	_seg_reinit_1
  7321 00000042 CB                      		retf
  7322                                  
  7323                                  ; ---------------------------------------------------------------------------
  7324                                  
  7325                                  ; 15/10/2022
  7326                                  
  7327                                  ;************************************************************************
  7328                                  ;*									*
  7329                                  ;*	chardev_entry - main device driver dispatch routine		*
  7330                                  ;*	   called with a dummy parameter block on the stack		*
  7331                                  ;*	   dw dispatch_table, dw prn/aux numbers (optional)		*
  7332                                  ;*									*
  7333                                  ;*	will eventually take care of doing the transitions in		*
  7334                                  ;*	   out of Bios_Code						*
  7335                                  ;*									*
  7336                                  ;************************************************************************
  7337                                  
  7338                                  chardev_entry:				; 0070h:25B3h =	02C7h:0043h
  7339 00000043 56                      		push	si
  7340 00000044 50                      		push	ax
  7341 00000045 51                      		push	cx
  7342 00000046 52                      		push	dx
  7343 00000047 57                      		push	di
  7344 00000048 55                      		push	bp
  7345 00000049 1E                      		push	ds
  7346 0000004A 06                      		push	es
  7347 0000004B 53                      		push	bx
  7348 0000004C 89E5                    		mov	bp, sp
  7349 0000004E 8B7612                  		mov	si, [bp+18]	; get return address (dispatch table)
  7350                                  		;;mov	ds, word [cs:0030h]
  7351                                  		;mov	ds, word ptr cs:BIOSDATAWORD ; [cs:0030h]
  7352 00000051 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD] ; 17/10/2022
  7353 00000056 8B4402                  		mov	ax, [si+2]	; get the device number	if present
  7354 00000059 A2[2100]                		mov	[auxnum], al
  7355 0000005C 8826[E704]              		mov	[printdev], ah
  7356 00000060 8B34                    		mov	si, [si]	; point	to the device dispatch table
  7357 00000062 C41E[1200]              		les	bx, [ptrsav]	; get pointer to i/o packet
  7358 00000066 268A4701                		mov	al, [es:bx+1]	; [es:bx+unit]	; al = unit code
  7359 0000006A 268A670D                		mov	ah, [es:bx+13]	; [es:bx+media]	; ah = media descrip
  7360 0000006E 268B4F12                		mov	cx, [es:bx+18]	; [es:bx+count]	; cx = count
  7361 00000072 268B5714                		mov	dx, [es:bx+20]	; [es:bx+start]	; dx = start sector
  7362                                  		; 17/10/2022
  7363 00000076 81FE[9604]              		cmp	si, DSKTBL
  7364                                  		;cmp	si, 4A2h	; dsktbl
  7365                                  					; at 2C7h:4A2h = 70h:2A12h
  7366 0000007A 7517                    		jnz	short no_sector32_mapping
  7367                                  
  7368                                  ; Special case for 32-bit start sector number:
  7369                                  ;   if (si==dsktbl) /* if this is a disk device call */
  7370                                  ;      set high 16 bits of secnum to 0
  7371                                  ;      if (secnum == 0xffff) fetch 32 bit sector number
  7372                                  ;
  7373                                  ; pass high word of sector number in start_sec_h, low word in dx
  7374                                  ;
  7375                                  ; note: start_l and start_h are the offsets within the io_request packet
  7376                                  ;	  which contain the low and hi words of the 32 bit start sector if
  7377                                  ;	  it has been used.
  7378                                  ;
  7379                                  ; note: remember not to destroy the registers which have been set up before
  7380                                  
  7381                                  		;mov	ds:start_sec_h,	0 ; initialize to 0
  7382 0000007C C706[2B05]0000          		mov	word [start_sec_h], 0
  7383 00000082 83FAFF                  		cmp	dx, 0FFFFh
  7384 00000085 750C                    		jnz	short no_sector32_mapping
  7385 00000087 268B571C                		mov	dx, [es:bx+28]	; [es:bx+start_h]
  7386                                  					; 32 bits dsk req
  7387                                  		;mov	ds:start_sec_h,	dx ; start_sec_h = packet.start_h
  7388 0000008B 8916[2B05]              		mov	[start_sec_h], dx
  7389 0000008F 268B571A                		mov	dx, [es:bx+26]	; [es:bx+start_l]
  7390                                  					; dx = packet.start_l
  7391                                  no_sector32_mapping:			
  7392 00000093 97                      		xchg	ax, di
  7393 00000094 268A4702                		mov	al, [es:bx+2]	; [es:bx+cmd]
  7394 00000098 2E3A04                  		cmp	al, cs:[si]
  7395 0000009B 732C                    		jnb	short command_error
  7396 0000009D 98                      		cbw			; note that al <= 15 means ok
  7397 0000009E D1E0                    		shl	ax, 1
  7398 000000A0 01C6                    		add	si, ax
  7399 000000A2 97                      		xchg	ax, di
  7400 000000A3 26C47F0E                		les	di, [es:bx+14]	; [es:bx+trans]
  7401 000000A7 FC                      		cld
  7402                                  		; 17/10/2022
  7403 000000A8 2EFF5401                		call	near [cs:si+1]
  7404                                  		;call	word ptr cs:si+1
  7405 000000AC 7202                    		jb	short already_got_ah_status
  7406 000000AE B401                    		mov	ah, 1
  7407                                  already_got_ah_status:
  7408                                  		;;mov	ds, [cs:0030h]	; 15/10/2022			
  7409                                  		;mov	ds, word ptr cs:BIOSDATAWORD ; [cs:0030h]
  7410                                  					; cas note: shouldn't be needed!
  7411 000000B0 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD] ; 17/10/2022
  7412                                  		;lds	bx, ds:ptrsav
  7413 000000B5 C51E[1200]              		lds	bx, [ptrsav]
  7414 000000B9 894703                  		mov	[bx+3],	ax	; [bx+status]
  7415                                  					; mark operation complete
  7416 000000BC 5B                      		pop	bx
  7417 000000BD 07                      		pop	es
  7418 000000BE 1F                      		pop	ds
  7419 000000BF 5D                      		pop	bp
  7420 000000C0 5F                      		pop	di
  7421 000000C1 5A                      		pop	dx
  7422 000000C2 59                      		pop	cx
  7423 000000C3 58                      		pop	ax
  7424 000000C4 5E                      		pop	si
  7425 000000C5 83C402                  		add	sp, 2		; get rid of fake return address
  7426                                  	
  7427                                  		; fall through into bc_retf
  7428                                  ; ---------------------------------------------------------------------------	
  7429                                  bc_retf:
  7430 000000C8 CB                      		retf
  7431                                  ; ---------------------------------------------------------------------------
  7432                                  
  7433                                  command_error:				
  7434 000000C9 E80900                  		call	bc_cmderr
  7435 000000CC EBE2                    		jmp	short already_got_ah_status
  7436                                  ; 15/10/2022
  7437                                  ; 01/05/2019
  7438                                  
  7439                                  ;----------------------------------------------------------------------------
  7440                                  ; The following piece of hack is for supporting CP/M compatibility
  7441                                  ; Basically at offset 5 we have a far call into 0:c0. But this does not call
  7442                                  ; 0:c0 directly instead it call f01d:fef0, because it needs to support 'lhld 6'
  7443                                  ; The following hack has to reside at ffff:d0 (= f01d:fef0) if BIOS is loaded
  7444                                  ; high.
  7445                                  ;----------------------------------------------------------------------------
  7446                                  
  7447                                  		;db 7 dup(0)
  7448                                  
  7449                                  		; 15/10/2022
  7450                                  
  7451 000000CE 0000                    		dw 0		; pad to bring offset to 0D0h
  7452                                  
  7453 000000D0 00<rep 5h>              off_d0: 	times 5 db 0	; 5 bytes from 0:c0 will be copied onto here
  7454                                  				;  which is the CP/M call 5 entry point
  7455                                  		
  7456                                  
  7457                                  ; ---------------------------------------------------------------------------
  7458                                  
  7459                                  ;	exit - all routines return through this path
  7460                                  
  7461                                  bc_cmderr:				
  7462 000000D5 B003                    		mov	al, 3		; 2C7h:D5h = 70h:2645h
  7463                                  					; unknown command error
  7464                                  
  7465                                  ; =============== S U B	R O U T	I N E =======================================
  7466                                  
  7467                                  ;	now zero the count field by subtracting its current value,
  7468                                  ;	  which is still in cx, from itself.
  7469                                  
  7470                                  ;	subtract the number of i/o's NOT YET COMPLETED from total
  7471                                  ;	  in order to return the number actually complete
  7472                                  
  7473                                  bc_err_cnt:	
  7474                                  		;les	bx, ds:ptrsav
  7475                                  		; 19/10/2022
  7476 000000D7 C41E[1200]              		les	bx, [ptrsav]
  7477 000000DB 26294F12                		sub	[es:bx+18], cx	; [es:bx+count]
  7478                                  					; # of successful i/o's
  7479 000000DF B481                    		mov	ah, 81h		; mark error return
  7480 000000E1 F9                      		stc			; indicate abnormal end
  7481 000000E2 C3                      		retn
  7482                                  
  7483                                  ; 15/10/2022
  7484                                  
  7485                                  ;Bios_Code ends
  7486                                  
  7487                                  ;----------------------------------------------------------------------------
  7488                                  ; MSCHAR.ASM - MSDOS 6.0 - 1991
  7489                                  ;----------------------------------------------------------------------------
  7490                                  ; 15/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
  7491                                  ; 10/01/2019 - Retro DOS v4.0
  7492                                  
  7493                                  ; 30/04/2019
  7494                                  
  7495                                  ;title	mschar - character and clock devices
  7496                                  
  7497                                  ;MODE_CTRLBRK	equ	0FFh
  7498                                  
  7499                                  ; BIOSCODE:00E4h (MSDOS 6.21, IO.SYS)
  7500                                  
  7501                                  ;************************************************************************
  7502                                  ;*									*
  7503                                  ;*	device driver dispatch tables					*
  7504                                  ;*									*
  7505                                  ;*	each table starts with a byte which lists the number of		*
  7506                                  ;*	legal functions, followed by that number of words. Each		*
  7507                                  ;*	word represents an offset of a routine in Bios_Code which	*
  7508                                  ;*	handles the function. The functions are terminated with		*
  7509                                  ;*	a near return. If carry is reset, a 'done' code is returned	*
  7510                                  ;*	to the caller. If carry is set, the ah/al registers are		*
  7511                                  ;*	returned as abnormal completion status. Notice that ds		*
  7512                                  ;*	is assumed to point to the Bios_Data segment throughout.	*
  7513                                  ;*									*
  7514                                  ;************************************************************************
  7515                                  
  7516                                  		; 13/12/2022
  7517                                  		;db 0
  7518                                  
  7519                                  		; 13/12/202
  7520 000000E3 0B                      con_table:	db ((con_table_end - con_table)-1)/2 ; 11
  7521                                  					; 2C7h:0E4h = 70h:2654h
  7522 000000E4 [F901]                  		dw bc_exvec  ; 1FBh	; bc_exvec at 2C7h:1FBh	= 70h:276Bh
  7523                                  					; 00 init
  7524 000000E6 [F901]                  		dw bc_exvec  ; 1FBh	; 01
  7525 000000E8 [F901]                  		dw bc_exvec  ; 1FBh	; 02
  7526 000000EA [D500]                  		dw bc_cmderr ; 0D5h	; bc_exvec at 2C7h:D5h = 70h:2645h
  7527                                  					; 03
  7528 000000EC [5B01]                  		dw con_read  ; 15Ch	; con_read at 2C7h:15Ch	= 70h:26CCh
  7529                                  					; 04
  7530 000000EE [9E01]                  		dw con_rdnd  ; 19Fh	; con_rdnd at 2C7h:19Fh	= 70h:270Fh
  7531                                  					; 05
  7532 000000F0 [F901]                  		dw bc_exvec  ; 1FBh	; 06
  7533 000000F2 [0702]                  		dw con_flush ; 209h	; con_flush at 2C7h:209h = 70h:2779h
  7534                                  					; 07
  7535 000000F4 [FB01]                  		dw con_writ  ; 1FDh	; con_writ at 2C7h:1FDh	= 70h:276Dh
  7536                                  					; 08
  7537 000000F6 [FB01]                  		dw con_writ  ; 1FDh	; 09
  7538 000000F8 [F901]                  		dw bc_exvec  ; 1FBh	; 0A
  7539                                  con_table_end:
  7540 000000FA 1A                      prn_table:	db ((prn_table_end - prn_table)-1)/2 ; 26			
  7541                                  					; 2C7h:0FBh = 70h:266Bh
  7542 000000FB [F901]                  		dw bc_exvec   ; 1FBh	; bc_exvec
  7543 000000FD [F901]                  		dw bc_exvec   ; 1FBh	; 01
  7544 000000FF [F901]                  		dw bc_exvec   ; 1FBh	; 02
  7545 00000101 [D500]                  		dw bc_cmderr  ;	0D5h	; bc_cmderr
  7546 00000103 [1802]                  		dw prn_input  ;	21Ah	; prn_input
  7547                                  					; 04 indicate zero chars read
  7548 00000105 [C601]                  		dw z_bus_exit ; 1C8h	; z_bus_exit
  7549                                  					; 05 read non-destructive
  7550 00000107 [F901]                  		dw bc_exvec   ; 1FBh	; 06
  7551 00000109 [F901]                  		dw bc_exvec   ; 1FBh	; 07
  7552 0000010B [1D02]                  		dw prn_writ   ;	21Fh	; prn_writ
  7553 0000010D [1D02]                  		dw prn_writ   ; 21Fh	; 09
  7554 0000010F [4E02]                  		dw prn_stat   ; 251h	; prn_stat
  7555 00000111 [F901]                  		dw bc_exvec   ; 1FBh	; 0B
  7556 00000113 [F901]                  		dw bc_exvec   ; 1FBh	; 0C
  7557 00000115 [F901]                  		dw bc_exvec   ; 1FBh	; 0D
  7558 00000117 [F901]                  		dw bc_exvec   ; 1FBh	; 0E
  7559 00000119 [F901]                  		dw bc_exvec   ; 1FBh	; 0F
  7560 0000011B [8802]                  		dw prn_tilbusy ; 28Bh	; prn_tilbusy
  7561 0000011D [F901]                  		dw bc_exvec   ; 1FBh	; 11
  7562 0000011F [F901]                  		dw bc_exvec   ; 1FBh	; 12
  7563 00000121 [B602]                  		dw prn_genioctl ; 2BAh	; prn_genioctl
  7564 00000123 [F901]                  		dw bc_exvec   ; 1FBh	; 14
  7565 00000125 [F901]                  		dw bc_exvec   ; 1FBh	; 15
  7566 00000127 [F901]                  		dw bc_exvec   ; 1FBh	; 16
  7567 00000129 [F901]                  		dw bc_exvec   ; 1FBh	; 17
  7568 0000012B [F901]                  		dw bc_exvec   ; 1FBh	; 18
  7569 0000012D [EB02]                  		dw prn_ioctl_query ; 2F0h ; prn_ioctl_query
  7570                                  prn_table_end:
  7571 0000012F 0B                      aux_table:	db ((aux_table_end - aux_table)-1)/2 ; 11			
  7572                                  					; 2C7h:130h = 70h:26A0h
  7573 00000130 [F901]                  		dw bc_exvec   ; 1FBh	; 00 - init
  7574 00000132 [F901]                  		dw bc_exvec   ; 1FBh	; 01
  7575 00000134 [F901]                  		dw bc_exvec   ; 1FBh	; 02
  7576 00000136 [D500]                  		dw bc_cmderr  ;	0D5h	; 03
  7577 00000138 [0603]                  		dw aux_read   ; 30Dh	; aux_read ; 04	- read
  7578 0000013A [2D03]                  		dw aux_rdnd   ; 335h	; aux_rdnd - 05	- read non-destructive
  7579 0000013C [F901]                  		dw bc_exvec   ; 1FBh	; 06
  7580 0000013E [6303]                  		dw aux_flsh   ;	36Ch	; aux_flsh
  7581 00000140 [6A03]                  		dw aux_writ   ;	374h	; aux_writ
  7582 00000142 [6A03]                  		dw aux_writ   ;	374h	; 09
  7583 00000144 [4D03]                  		dw aux_wrst   ;	355h	; aux_wrst
  7584                                  aux_table_end:
  7585 00000146 0A                      tim_table	db ((tim_table_end - tim_table)-1)/2 ; 10
  7586                                  					; 2C7h:147h = 70h:26B7h
  7587 00000147 [F901]                  		dw bc_exvec   ; 1FBh	; 00
  7588 00000149 [F901]                  		dw bc_exvec   ; 1FBh	; 01
  7589 0000014B [F901]                  		dw bc_exvec   ; 1FBh	; 02
  7590 0000014D [D500]                  		dw bc_cmderr  ;	0D5h	; 03
  7591 0000014F [2904]                  		dw tim_read   ;	435h	; tim_read
  7592 00000151 [C601]                  		dw z_bus_exit ; 1C8h	; z_bus_exit
  7593 00000153 [F901]                  		dw bc_exvec   ; 1FBh	; 06
  7594 00000155 [F901]                  		dw bc_exvec   ; 1FBh	; 07
  7595 00000157 [D003]                  		dw tim_writ   ; 3DBh	; tim_writ
  7596 00000159 [D003]                  		dw tim_writ   ; 3DBh	; 09
  7597                                  tim_table_end:
  7598                                  
  7599                                  ; ---------------------------------------------------------------------------
  7600                                  
  7601                                  ;************************************************************************
  7602                                  ;*									*
  7603                                  ;*	con_read - read cx bytes from keyboard into buffer at es:di	*
  7604                                  ;*									*
  7605                                  ;************************************************************************
  7606                                  
  7607                                  con_read:				; 2C7h:15Ch = 70h:26CCh
  7608                                  		;jcxz	short con_exit	; read cx bytes	from keyboard into buffer
  7609 0000015B E306                    		jcxz	con_exit	; 19/10/2022
  7610                                  con_loop:				
  7611 0000015D E80500                  		call	chrin		; get char in al
  7612 00000160 AA                      		stosb			; store	char at	es:di
  7613 00000161 E2FA                    		loop	con_loop
  7614                                  con_exit:				
  7615 00000163 F8                      		clc
  7616 00000164 C3                      		retn
  7617                                  
  7618                                  ; =============== S U B	R O U T	I N E =======================================
  7619                                  
  7620                                  ;************************************************************************
  7621                                  ;*									*
  7622                                  ;*	chrin - input single char from keyboard into al			*
  7623                                  ;*									*
  7624                                  ;*	  we are going to issue extended keyboard function, if		*
  7625                                  ;*	  supported. the returning value of the extended keystroke	*
  7626                                  ;*	  of the extended keyboard function uses 0E0h in al		*
  7627                                  ;*	  instead of 00h as in the conventional keyboard function.	*
  7628                                  ;*	  this creates a conflict when the user entered real		*
  7629                                  ;*	  greek alpha charater (= 0E0h) to  distinguish the extended	*
  7630                                  ;*	  keystroke and the greek alpha. this case will be handled	*
  7631                                  ;*	  in the following manner:					*
  7632                                  ;*									*
  7633                                  ;*	      ah = 16h							*
  7634                                  ;*	      int 16h							*
  7635                                  ;*	      if al == 0, then extended code (in ah)			*
  7636                                  ;*	      else if al == 0E0h, then					*
  7637                                  ;*	      if ah <> 0, then extended code (in ah)			*
  7638                                  ;*		else greek_alpha character.				*
  7639                                  ;*									*
  7640                                  ;*	also, for compatibility reason, if an extended code is		*
  7641                                  ;*	  detected, then we are going to change the value in al		*
  7642                                  ;*	  from 0E0h to 00h.						*
  7643                                  ;*									*
  7644                                  ;************************************************************************
  7645                                  
  7646                                  		; 19/10/2022
  7647                                  chrin:		
  7648 00000165 8A26[E504]              		mov	ah, [keyrd_func] ; set by msinit. 0 or 10h
  7649 00000169 30C0                    		xor	al, al
  7650 0000016B 8606[0C00]              		xchg	al, [altah]	; get character	& zero altah
  7651 0000016F 08C0                    		or	al, al
  7652 00000171 752A                    		jnz	short keyret
  7653 00000173 CD16                    		int	16h		; KEYBOARD -
  7654 00000175 09C0                    		or	ax, ax
  7655 00000177 74EC                    		jz	short chrin
  7656 00000179 3D0072                  		cmp	ax, 7200h	; check	for ctrl-prtsc
  7657 0000017C 7504                    		jnz	short alt_ext_chk
  7658 0000017E B010                    		mov	al, 10h
  7659 00000180 EB1B                    		jmp	short keyret
  7660                                  ; ---------------------------------------------------------------------------
  7661                                  
  7662                                  ;  if operation was extended function (i.e. keyrd_func != 0) then
  7663                                  ;    if character read was 0E0h then
  7664                                  ;      if extended byte was zero (i.e. ah == 0) then
  7665                                  ;	 goto keyret
  7666                                  ;      else
  7667                                  ;	 set al to zero
  7668                                  ;	 goto alt_save
  7669                                  ;      endif
  7670                                  ;    endif
  7671                                  ;  endif
  7672                                  
  7673                                  alt_ext_chk:
  7674 00000182 803E[E504]00            		cmp	byte [keyrd_func], 0
  7675 00000187 740C                    		jz	short not_ext
  7676 00000189 3CE0                    		cmp	al, 0E0h
  7677 0000018B 7508                    		jnz	short not_ext
  7678 0000018D 08E4                    		or	ah, ah
  7679 0000018F 740C                    		jz	short keyret
  7680 00000191 30C0                    		xor	al, al
  7681 00000193 EB04                    		jmp	short alt_save
  7682                                  ; ---------------------------------------------------------------------------
  7683                                  
  7684                                  not_ext:				
  7685 00000195 08C0                    		or	al, al		; special case?
  7686 00000197 7504                    		jnz	short keyret
  7687                                  alt_save:				
  7688 00000199 8826[0C00]              		mov	[altah], ah	; store	special	key
  7689                                  keyret:					
  7690 0000019D C3                      		retn
  7691                                  
  7692                                  ; ---------------------------------------------------------------------------
  7693                                  
  7694                                  ;************************************************************************
  7695                                  ;*									*
  7696                                  ;*	con_rdnd - keyboard non destructive read, no wait		*
  7697                                  ;*									*
  7698                                  ;*	pc-convertible-type machine: if bit 10 is set by the dos	*
  7699                                  ;*	in the status word of the request packet, and there is no	*
  7700                                  ;*	character in the input buffer, the driver issues a system	*
  7701                                  ;*	wait request to the rom. on return from the rom, it returns	*
  7702                                  ;*	a 'char-not-found' to the dos.					*
  7703                                  ;*									*
  7704                                  ;************************************************************************
  7705                                  
  7706                                  		; 19/10/2022
  7707                                  con_rdnd:				
  7708 0000019E A0[0C00]                		mov	al, [altah]
  7709 000001A1 08C0                    		or	al, al
  7710 000001A3 754C                    		jnz	short rdexit
  7711 000001A5 8A26[E604]              		mov	ah, [keysts_func]
  7712 000001A9 CD16                    		int	16h		; KEYBOARD -
  7713 000001AB 751D                    		jnz	short gotchr
  7714 000001AD 803E[7900]00            		cmp	byte [fhavek09], 0
  7715 000001B2 7412                    		jz	short z_bus_exit
  7716 000001B4 C41E[1200]              		les	bx, [ptrsav]
  7717                                  		; 12/12/2022
  7718 000001B8 26F6470404              		test	byte [es:bx+4], 04h
  7719                                  		;test	word [es:bx+3], 400h ; [es:bx+status]
  7720 000001BD 7407                    		jz	short z_bus_exit
  7721 000001BF B80041                  		mov	ax, 4100h
  7722 000001C2 30DB                    		xor	bl, bl
  7723 000001C4 CD15                    		int	15h		; SYSTEM - WAIT	ON EXTERNAL EVENT (CONVERTIBLE)
  7724                                  					; AL = condition type, BH = condition compare or mask value
  7725                                  					; BL = timeout value times 55 milliseconds, 00h	means no timeout
  7726                                  					; DX = I/O port	address	if AL bit 4 set
  7727                                  z_bus_exit:				
  7728 000001C6 F9                      		stc			; 2C7h:1C8h = 70h:2738h
  7729 000001C7 B403                    		mov	ah, 3		; indicate busy	status
  7730 000001C9 C3                      		retn
  7731                                  ; ---------------------------------------------------------------------------
  7732                                  
  7733                                  gotchr:					
  7734 000001CA 09C0                    		or	ax, ax
  7735 000001CC 7508                    		jnz	short notbrk	; check	for null after break
  7736 000001CE 8A26[E504]              		mov	ah, [keyrd_func] ; issue keyboard read function
  7737 000001D2 CD16                    		int	16h		; KEYBOARD -
  7738 000001D4 EBC8                    		jmp	short con_rdnd	; get a	real status
  7739                                  ; ---------------------------------------------------------------------------
  7740                                  
  7741                                  notbrk:					
  7742 000001D6 3D0072                  		cmp	ax, 7200h	; check	for ctrl-prtsc
  7743 000001D9 7504                    		jnz	short rd_ext_chk
  7744 000001DB B010                    		mov	al, 10h		; ('P' & 1Fh) ; return control p
  7745 000001DD EB12                    		jmp	short rdexit
  7746                                  ; ---------------------------------------------------------------------------
  7747                                  
  7748                                  rd_ext_chk:				
  7749 000001DF 803E[E504]00            		cmp	byte [keyrd_func], 0 ; extended keyboard function?
  7750 000001E4 740B                    		jz	short rdexit
  7751 000001E6 3CE0                    		cmp	al, 0E0h	; extended key value or	greek alpha?
  7752 000001E8 7507                    		jnz	short rdexit
  7753 000001EA 80FC00                  		cmp	ah, 0		; scan code exist?
  7754 000001ED 7402                    		jz	short rdexit	; yes. greek alpha char.
  7755 000001EF B000                    		mov	al, 0		; no. extended key stroke.
  7756                                  					; change it for	compatibility
  7757                                  rdexit:					
  7758 000001F1 C41E[1200]              		les	bx, [ptrsav]
  7759 000001F5 2688470D                		mov	[es:bx+13], al	; [es:bx+media]
  7760                                  					; return keyboard character here
  7761                                  bc_exvec:				
  7762 000001F9 F8                      		clc			; bc_exvec at 2C7h:1FBh	= 70h:276Bh
  7763                                  					; indicate normal termination
  7764 000001FA C3                      		retn
  7765                                  ; ---------------------------------------------------------------------------
  7766                                  
  7767                                  ;************************************************************************
  7768                                  ;*									*
  7769                                  ;*	con_write - console write routine				*
  7770                                  ;*									*
  7771                                  ;*	entry:	es:di -> buffer						*
  7772                                  ;*		cx    =  count						*
  7773                                  ;*									*
  7774                                  ;************************************************************************
  7775                                  
  7776                                  con_writ:
  7777                                  		;jcxz	short bc_exvec
  7778 000001FB E3FC                    		jcxz	bc_exvec	; 19/10/2022
  7779                                  		; 12/12/2022
  7780                                  		;jcxz	cc_ret
  7781                                  con_lp:					
  7782 000001FD 268A05                  		mov	al, [es:di]
  7783 00000200 47                      		inc	di
  7784 00000201 CD29                    		int	29h		; DOS 2+ internal - FAST PUTCHAR
  7785                                  					; AL = character to display
  7786 00000203 E2F8                    		loop	con_lp
  7787                                  cc_ret:					
  7788 00000205 F8                      		clc
  7789 00000206 C3                      		retn
  7790                                  
  7791                                  ; =============== S U B	R O U T	I N E =======================================
  7792                                  
  7793                                  ;************************************************************************
  7794                                  ;*									*
  7795                                  ;*	con_flush - flush out keyboard queue				*
  7796                                  ;*									*
  7797                                  ;************************************************************************
  7798                                  
  7799                                  con_flush:
  7800 00000207 C606[0C00]00            		mov	byte [altah], 0	; clear	out holding buffer
  7801                                  flloop:					; while	(charavail()) charread();	
  7802 0000020C B401                    		mov	ah, 1
  7803 0000020E CD16                    		int	16h		; KEYBOARD - CHECK BUFFER, DO NOT CLEAR
  7804                                  					; Return: ZF clear if character	in buffer
  7805                                  					; AH = scan code, AL = character
  7806                                  					; ZF set if no character in buffer
  7807 00000210 74F3                    		jz	short cc_ret
  7808 00000212 30E4                    		xor	ah, ah
  7809 00000214 CD16                    		int	16h		; KEYBOARD - READ CHAR FROM BUFFER, WAIT IF EMPTY
  7810                                  					; Return: AH = scan code, AL = character
  7811 00000216 EBF4                    		jmp	short flloop
  7812                                  
  7813                                  ; ---------------------------------------------------------------------------
  7814                                  
  7815                                  ; 15/10/2022
  7816                                  
  7817                                  ;************************************************************************
  7818                                  ;*									*
  7819                                  ;*	some equates for rom bios printer i/o				*
  7820                                  ;*									*
  7821                                  ;************************************************************************
  7822                                  
  7823                                  ; ibm rom status bits (i don't trust them, neither should you)
  7824                                  ; warning!!! the ibm rom does not return just one bit. it returns a
  7825                                  ; whole slew of bits, only one of which is correct.
  7826                                  
  7827                                  ;notbusystatus	equ 10000000b		; not busy
  7828                                  ;nopaperstatus	equ 00100000b		; no more paper
  7829                                  ;prnselected	equ 00010000b		; printer selected
  7830                                  ;ioerrstatus	equ 00001000b		; some kinda error
  7831                                  ;timeoutstatus	equ 00000001b		; time out.
  7832                                  ;
  7833                                  ;noprinter	equ 00110000b		; no printer attached
  7834                                  
  7835                                  ; 18/03/2019 - Retro DOS v4.0
  7836                                  ;error_I24_out_of_paper	equ 9 ; MSDOS 6.0, ERR.INC, 1991
  7837                                  
  7838                                  ; ---------------------------------------------------------------------------
  7839                                  
  7840                                  ;************************************************************************
  7841                                  ;*									*
  7842                                  ;*	prn_input - return with no error but zero chars read		*
  7843                                  ;*									*
  7844                                  ;*	enter with cx = number of characters requested			*
  7845                                  ;*									*
  7846                                  ;************************************************************************
  7847                                  
  7848                                  prn_input:				; 2C7h:21Ah = 70h:278Ah
  7849 00000218 E8BCFE                  		call	bc_err_cnt	; reset	count to zero
  7850                                  					; (sub reqpkt.count,cx)
  7851                                  		; 12/12/2022
  7852                                  prn_done:
  7853 0000021B F8                      		clc			; but return with carry	reset for no error
  7854 0000021C C3                      		retn
  7855                                  ; ---------------------------------------------------------------------------
  7856                                  
  7857                                  ;************************************************************************
  7858                                  ;*									*
  7859                                  ;*	prn_writ - write cx bytes from es:di to printer device		*
  7860                                  ;*									*
  7861                                  ;*	auxnum has printer number					*
  7862                                  ;*									*
  7863                                  ;************************************************************************
  7864                                  
  7865                                  prn_writ:				; 2C7h:21Fh = 70h:278Fh
  7866                                  		;jcxz	short prn_done	; no chars to output
  7867 0000021D E3FC                    		jcxz	prn_done	; 19/10/2022
  7868                                  prn_loop:				
  7869 0000021F BB0200                  		mov	bx, 2		; retry	count
  7870                                  prn_out:				
  7871 00000222 E83600                  		call	prnstat		; get status
  7872 00000225 751D                    		jnz	short TestPrnError
  7873 00000227 268A05                  		mov	al, [es:di]	; get character	to print
  7874 0000022A 30E4                    		xor	ah, ah
  7875 0000022C E82E00                  		call	prnop		; print	to printer
  7876 0000022F 7419                    		jz	short prn_con	; no error - continue
  7877 00000231 80FCFF                  		cmp	ah, 0FFh	; MODE_CTRLBRK
  7878 00000234 7509                    		jnz	short _prnwf
  7879 00000236 B00C                    		mov	al, 0Ch		; error_I24_gen_failure
  7880 00000238 C606[0C00]00            		mov	byte [altah], 0
  7881 0000023D EB08                    		jmp	short pmessg
  7882                                  ; ---------------------------------------------------------------------------
  7883                                  
  7884                                  _prnwf:					
  7885 0000023F F6C401                  		test	ah, 1		; timeoutstatus
  7886 00000242 7406                    		jz	short prn_con
  7887                                  TestPrnError:				
  7888 00000244 4B                      		dec	bx		; retry	until count is exhausted.
  7889 00000245 75DB                    		jnz	short prn_out
  7890                                  pmessg:					
  7891 00000247 E98DFE                  		jmp	bc_err_cnt
  7892                                  ; ---------------------------------------------------------------------------
  7893                                  
  7894                                  prn_con:				
  7895 0000024A 47                      		inc	di		; point	to next	char and continue
  7896 0000024B E2D2                    		loop	prn_loop
  7897                                  ;prn_done:				
  7898                                  		; 12/12/2022
  7899                                  prn_done2:
  7900                                  		;clc
  7901                                  		; cf=0
  7902 0000024D C3                      		retn
  7903                                  ; ---------------------------------------------------------------------------
  7904                                  
  7905                                  ;************************************************************************
  7906                                  ;*									*
  7907                                  ;*	prn_stat - device driver entry to return printer status		*
  7908                                  ;*									*
  7909                                  ;************************************************************************
  7910                                  
  7911                                  prn_stat:				; 2C7h:251h = 70h:27C1h
  7912 0000024E E80A00                  		call	prnstat		; device in dx
  7913 00000251 75F4                    		jnz	short pmessg
  7914 00000253 F6C480                  		test	ah, 80h		; notbusystatus
  7915                                  		;jnz	short prn_done
  7916                                  		; 12/12/2022
  7917 00000256 75F5                    		jnz	short prn_done2 ; cf=0
  7918 00000258 E96BFF                  		jmp	z_bus_exit
  7919                                  ; ---------------------------------------------------------------------------
  7920                                  
  7921                                  ;************************************************************************
  7922                                  ;*									*
  7923                                  ;*	prnstat - utility function to call ROM BIOS to check		*
  7924                                  ;*		 printer status. Return meaningful error code		*
  7925                                  ;*									*
  7926                                  ;************************************************************************
  7927                                  
  7928                                  prnstat:				
  7929 0000025B B402                    		mov	ah, 2		; set command for get status
  7930                                  					; PRINTER - GET	STATUS
  7931                                  					; DX = printer port (0-3)
  7932                                  					; Return: AH = status
  7933                                  
  7934                                  ; =============== S U B	R O U T	I N E =======================================
  7935                                  
  7936                                  ;************************************************************************
  7937                                  ;*									*
  7938                                  ;*	prnop - call ROM BIOS printer function in ah			*
  7939                                  ;*		return zero true if no error				*
  7940                                  ;*		return zero false if error, al = error code		*
  7941                                  ;*									*
  7942                                  ;************************************************************************
  7943                                  
  7944                                  prnop:	
  7945 0000025D 8B16[2100]              		mov	dx, [auxnum]	; get printer number
  7946 00000261 CD17                    		int	17h
  7947                                  
  7948                                  	; This check was added to see if this is a case of no
  7949                                  	; printer being installed. This tests checks to be sure
  7950                                  	; the error is noprinter (30h)
  7951                                  
  7952 00000263 50                      		push	ax
  7953 00000264 80E430                  		and	ah, 30h
  7954 00000267 80FC30                  		cmp	ah, 30h		; noprinter
  7955 0000026A 58                      		pop	ax
  7956 0000026B 7506                    		jnz	short NextTest
  7957 0000026D 80E4DF                  		and	ah, 0DFh	; ~nopaperstatus
  7958 00000270 80CC08                  		or	ah, 8		; ioerrstatus
  7959                                  
  7960                                  ; examine the status bits to see if an error occurred. unfortunately, several
  7961                                  ; of the bits are set so we have to pick and choose. we must be extremely
  7962                                  ; careful about breaking basic.
  7963                                  
  7964                                  NextTest:				
  7965 00000273 F6C428                  		test	ah, 28h		; (ioerrstatus+nopaperstatus)
  7966                                  					; i/o error?
  7967 00000276 740A                    		jz	short checknotready ; no, try not ready
  7968                                  
  7969                                  ; at this point, we know we have an error. the converse is not true
  7970                                  
  7971 00000278 B009                    		mov	al, 9		; error_I24_out_of_paper
  7972                                  					; first, assume	out of paper
  7973 0000027A F6C420                  		test	ah, 20h		; out of paper set?
  7974 0000027D 7502                    		jnz	short ret1	; yes, error is	set
  7975 0000027F FEC0                    		inc	al		; return al=10 (i/o error)
  7976                                  ret1:					
  7977 00000281 C3                      		retn
  7978                                  ; ---------------------------------------------------------------------------
  7979                                  
  7980                                  checknotready:				
  7981 00000282 B002                    		mov	al, 2		; assume not-ready
  7982 00000284 F6C401                  		test	ah, 1
  7983 00000287 C3                      		retn
  7984                                  
  7985                                  ; ---------------------------------------------------------------------------
  7986                                  
  7987                                  ;************************************************************************
  7988                                  ;*									*
  7989                                  ;*	prn_tilbusy - output until busy. Used by print spooler.		*
  7990                                  ;*		     this entry point should never block waiting for	*
  7991                                  ;*		     device to come ready.				*
  7992                                  ;*									*
  7993                                  ;*	inputs:	cx = count, es:di -> buffer				*
  7994                                  ;*	outputs: set the number of bytes transferred in the		*
  7995                                  ;*		 device driver request packet				*
  7996                                  ;*									*
  7997                                  ;************************************************************************
  7998                                  
  7999                                  		; 19/10/2022
  8000                                  prn_tilbusy:				; 2C7h:28Bh = 70h:27FBh
  8001 00000288 89FE                    		mov	si, di		; everything is	set for	lodsb
  8002                                  prn_tilbloop:				
  8003 0000028A 51                      		push	cx
  8004 0000028B 53                      		push	bx
  8005 0000028C 30FF                    		xor	bh, bh
  8006 0000028E 8A1E[E704]              		mov	bl, [printdev]
  8007 00000292 D1E3                    		shl	bx, 1
  8008                                  		;mov	cx, ds:wait_count[bx] ;	wait count times to come ready
  8009 00000294 8B8F[E804]              		mov	cx, [wait_count+bx]
  8010 00000298 5B                      		pop	bx
  8011                                  prn_getstat:				
  8012 00000299 E8BFFF                  		call	prnstat		; get status
  8013 0000029C 7514                    		jnz	short prn_bperr	; error
  8014 0000029E F6C480                  		test	ah, 80h		; ready	yet?
  8015 000002A1 E1F6                    		loope	prn_getstat	; no, go for more
  8016 000002A3 59                      		pop	cx		; get original count
  8017 000002A4 740D                    		jz	short prn_berr	; still	not ready => done
  8018 000002A6 26                      		es
  8019 000002A7 AC                      		lodsb
  8020                                  		;lods	byte ptr es:[si] ; es
  8021                                  					; lodsb
  8022 000002A8 30E4                    		xor	ah, ah
  8023 000002AA E8B0FF                  		call	prnop
  8024 000002AD 7504                    		jnz	short prn_berr	; error
  8025 000002AF E2D9                    		loop	prn_tilbloop
  8026                                  		; 12/12/2022
  8027                                  		; cf=0 (prnop)
  8028                                  		;clc			; normal no-error return
  8029 000002B1 C3                      		retn			;   from device driver
  8030                                  
  8031                                  ; ---------------------------------------------------------------------------
  8032                                  
  8033                                  prn_bperr:				
  8034 000002B2 59                      		pop	cx		; restore transfer count from stack
  8035                                  prn_berr:				
  8036 000002B3 E921FE                  		jmp	bc_err_cnt
  8037                                  ; ---------------------------------------------------------------------------
  8038                                  
  8039                                  ; 15/10/2022
  8040                                  
  8041                                  ;************************************************************************
  8042                                  ;*									*
  8043                                  ;*	prn_genioctl - get/set printer retry count			*
  8044                                  ;*									*
  8045                                  ;************************************************************************
  8046                                  
  8047                                  ; IOCTL.INC (MSDOS 6.0, 1991)
  8048                                  ; 11/01/2019
  8049                                  
  8050                                  ;********************************;*
  8051                                  ; CHARACTER DEVICES (PRINTERS)	 ;*
  8052                                  ;********************************;*
  8053                                  
  8054                                  ;;RAWIO SUB-FUNCTIONS
  8055                                  ;;get_retry_count equ 65h
  8056                                  ;;set_retry_count equ 45h
  8057                                  
  8058                                  ;;struc A_RETRYCOUNT
  8059                                  ;;.rc_count: resw 1
  8060                                  ;;endstruc
  8061                                  
  8062                                  ;ioc_pc equ 5
  8063                                  
  8064                                  ; ---------------------------------------------------------------------------
  8065                                  
  8066                                  		; 19/10/2022
  8067                                  prn_genioctl:				; 2C7h:2BAh = 70h:282Ah
  8068 000002B6 C43E[1200]              		les	di, [ptrsav]
  8069 000002BA 26807D0D05              		cmp	byte [es:di+13], 5 ; [es:di+IOCTL_REQ.MAJORFUNCTION]
  8070                                  					; ioc_pc
  8071 000002BF 7403                    		jz	short prnfunc_ok
  8072                                  
  8073                                  prnfuncerr:				
  8074 000002C1 E911FE                  		jmp	bc_cmderr
  8075                                  ; ---------------------------------------------------------------------------
  8076                                  
  8077                                  prnfunc_ok:				
  8078 000002C4 268A450E                		mov	al, [es:di+14]	; [es:di+IOCTL_REQ.MINORFUNCTION]
  8079 000002C8 26C47D13                		les	di, [es:di+19]	; [es:di+IOCTL_REQ.GENERICIOCTL_PACKET]
  8080 000002CC 30FF                    		xor	bh, bh
  8081                                  		;mov	bl, ds:printdev	; get index into retry counts
  8082 000002CE 8A1E[E704]              		mov	bl, [printdev]
  8083 000002D2 D1E3                    		shl	bx, 1
  8084                                  		;mov	cx, ds:wait_count[bx] ;	pull out retry count for device
  8085 000002D4 8B8F[E804]              		mov	cx, [wait_count+bx]
  8086 000002D8 3C65                    		cmp	al, 65h		; get_retry_count
  8087 000002DA 7407                    		jz	short prngetcount
  8088 000002DC 3C45                    		cmp	al, 45h		; set_retry_count
  8089 000002DE 75E1                    		jnz	short prnfuncerr
  8090 000002E0 268B0D                  		mov	cx, [es:di]
  8091                                  prngetcount:				
  8092                                  		;mov	ds:wait_count[bx], cx
  8093 000002E3 898F[E804]              		mov	[wait_count+bx], cx
  8094 000002E7 26890D                  		mov	[es:di], cx	; [es:di+A_RETRYCOUNT.RC_COUNT]
  8095                                  					; return current retry count
  8096                                  		; 12/12/2022
  8097                                  		; cf=0
  8098                                  		;clc
  8099 000002EA C3                      		retn
  8100                                  ; ---------------------------------------------------------------------------
  8101                                  
  8102                                  ;************************************************************************
  8103                                  ;*									*
  8104                                  ;*  prn_ioctl_query							*
  8105                                  ;*									*
  8106                                  ;*  Added for 5.00							*
  8107                                  ;************************************************************************
  8108                                  
  8109                                  prn_ioctl_query:			; 2C7h:2F0h = 70h:2860h
  8110 000002EB C43E[1200]              		les	di, [ptrsav]
  8111 000002EF 26807D0D05              		cmp	byte [es:di+13], 5 ; [es:di+IOCTL_REQ.MAJORFUNCTION]
  8112                                  					; ioc_pc
  8113 000002F4 750D                    		jnz	short prn_query_err
  8114 000002F6 268A450E                		mov	al, [es:di+14]	; [es:di+IOCTL_REQ.MINORFUNCTION]
  8115 000002FA 3C65                    		cmp	al, 65h		; GET_RETRY_COUNT
  8116 000002FC 7404                    		jz	short IOCtlSupported
  8117 000002FE 3C45                    		cmp	al, 45h		; SET_RETRY_COUNT
  8118 00000300 7501                    		jnz	short prn_query_err
  8119                                  IOCtlSupported:	
  8120                                  		; 12/12/2022
  8121                                  		; cf=0		
  8122                                  		;clc
  8123 00000302 C3                      		retn
  8124                                  ; ---------------------------------------------------------------------------
  8125                                  
  8126                                  prn_query_err:
  8127                                  		; 12/12/2022				
  8128                                  		;stc
  8129 00000303 E9CFFD                  		jmp	bc_cmderr ; (bc_cmderr sets cf to 1)
  8130                                  ; ---------------------------------------------------------------------------
  8131                                  
  8132                                  ;************************************************************************
  8133                                  ;*									*
  8134                                  ;*	aux port driver code -- "aux" == "com1"				*
  8135                                  ;*									*
  8136                                  ;*	the device driver entry/dispatch code sets up auxnum to		*
  8137                                  ;*	give the com port number to use (0=com1, 1=com2, 2=com3...)	*
  8138                                  ;*									*
  8139                                  ;************************************************************************
  8140                                  
  8141                                  ;	values in ah, requesting function of int 14h in rom bios
  8142                                  
  8143                                  ;auxfunc_send	 equ	1	;transmit
  8144                                  ;auxfunc_receive equ	2	;read
  8145                                  ;auxfunc_status	 equ	3	;request status
  8146                                  
  8147                                  ;	error flags, reported by int 14h, reported in ah:
  8148                                  
  8149                                  ;flag_data_ready equ	01h	;data ready
  8150                                  ;flag_overrun	 equ	02h	;overrun error
  8151                                  ;flag_parity	 equ	04h	;parity error
  8152                                  ;flag_frame	 equ	08h	;framing error
  8153                                  ;flag_break	 equ	10h	;break detect
  8154                                  ;flag_tranhol_emp equ	20h	;transmit holding register empty
  8155                                  ;flag_timeout	 equ	80h	;timeout
  8156                                  
  8157                                  ;	these flags reported in al:
  8158                                  
  8159                                  ;flag_cts	 equ	10h	;clear to send
  8160                                  ;flag_dsr	 equ	20h	;data set ready
  8161                                  ;flag_rec_sig	 equ	80h	;receive line signal detect
  8162                                  
  8163                                  ; ---------------------------------------------------------------------------
  8164                                  
  8165                                  ;************************************************************************
  8166                                  ;*									*
  8167                                  ;*	aux_read - read cx bytes from [auxnum] aux port to buffer	*
  8168                                  ;*		   at es:di						*
  8169                                  ;*									*
  8170                                  ;************************************************************************
  8171                                  
  8172                                  aux_read:				; 2C7h:30Dh = 70h:287Dh
  8173                                  		;jcxz	short exvec2
  8174 00000306 E311                    		jcxz	exvec2		; 19/10/2022
  8175 00000308 E87700                  		call	getbx		; put address of auxbuf	in bx
  8176 0000030B 30C0                    		xor	al, al
  8177 0000030D 8607                    		xchg	al, [bx]
  8178 0000030F 08C0                    		or	al, al
  8179 00000311 7503                    		jnz	short aux2
  8180                                  aux1:					
  8181 00000313 E80500                  		call	auxin		; get character	from port
  8182                                  					; won't return if error
  8183                                  aux2:					
  8184 00000316 AA                      		stosb
  8185 00000317 E2FA                    		loop	aux1		; if more characters, go around	again
  8186                                  exvec2:					
  8187 00000319 F8                      		clc			; all done, successful exit
  8188                                  auxin_retn:	; 18/12/2022
  8189 0000031A C3                      		retn
  8190                                  ; ---------------------------------------------------------------------------
  8191                                  
  8192                                  ;************************************************************************
  8193                                  ;*									*
  8194                                  ;*	auxin - call rom bios to read character from aux port		*
  8195                                  ;*		if error occurs, map the error and return one		*
  8196                                  ;*		level up to device driver exit code, setting		*
  8197                                  ;*		the number of bytes transferred appropriately		*
  8198                                  ;*									*
  8199                                  ;************************************************************************
  8200                                  
  8201                                  auxin:					
  8202 0000031B B402                    		mov	ah, 2		; auxfunc_receive
  8203 0000031D E83C00                  		call	auxop
  8204 00000320 F6C40E                  		test	ah, 0Eh		; flag_frame|flag_parity|flag_overrun
  8205                                  		;jnz	short arbad	; skip if any error bits set
  8206                                  		;retn
  8207                                  		; 25/06/2023 (BugFix)
  8208 00000323 74F5                    		jz	short auxin_retn
  8209                                  ; ---------------------------------------------------------------------------
  8210                                  
  8211                                  arbad:					
  8212 00000325 58                      		pop	ax		; remove return	address	(near call)
  8213 00000326 30C0                    		xor	al, al
  8214 00000328 0CB0                    		or	al, 0B0h	; flag_rec_sig|	flag_dsr|flag_cts
  8215 0000032A E9AAFD                  		jmp	bc_err_cnt
  8216                                  
  8217                                  ; ---------------------------------------------------------------------------
  8218                                  
  8219                                  ;************************************************************************
  8220                                  ;*									*
  8221                                  ;*	aux_rdnd - non-destructive aux port read			*
  8222                                  ;*									*
  8223                                  ;************************************************************************
  8224                                  
  8225                                  aux_rdnd:				; 2C7h:335h = 70h:28A5h
  8226 0000032D E85200                  		call	getbx
  8227 00000330 8A07                    		mov	al, [bx]	; have bx point	to auxbuf
  8228 00000332 08C0                    		or	al, al		; if al	is non-zero (char in buffer)
  8229 00000334 7511                    		jnz	short auxdrx	; then return character
  8230 00000336 E82100                  		call	auxstat		; if not, get status of	aux device
  8231 00000339 F6C401                  		test	ah, 1		; flag_data_ready - test data ready
  8232 0000033C 740C                    		jz	short auxbus	; then device is busy (not ready)
  8233 0000033E A820                    		test	al, 20h		; flag_dsr - test data set ready
  8234 00000340 7408                    		jz	short auxbus	; then device is busy (not ready)
  8235 00000342 E8D6FF                  		call	auxin		; else aux is ready, get character
  8236 00000345 8807                    		mov	[bx], al
  8237                                  auxdrx:					
  8238 00000347 E9A7FE                  		jmp	rdexit		; return busy status
  8239                                  ; ---------------------------------------------------------------------------
  8240                                  
  8241                                  auxbus:					
  8242 0000034A E979FE                  		jmp	z_bus_exit
  8243                                  ; ---------------------------------------------------------------------------
  8244                                  
  8245                                  ;************************************************************************
  8246                                  ;*									*
  8247                                  ;*	aux_wrst - return aux port write status				*
  8248                                  ;*									*
  8249                                  ;************************************************************************
  8250                                  
  8251                                  aux_wrst:				; 2C7h:355h = 70h:28C5h
  8252 0000034D E80A00                  		call	auxstat		; get status of	aux in ax
  8253 00000350 A820                    		test	al, 20h		; test data set	ready
  8254 00000352 74F6                    		jz	short auxbus	; then device is busy (not ready)
  8255 00000354 F6C420                  		test	ah, 20h		; flag_tranhol_emp - test transmit hold	reg empty
  8256 00000357 74F1                    		jz	short auxbus	; then device is busy (not ready)
  8257                                  		; 12/12/2022
  8258                                  		; cf=0	; (test instruction resets cf)
  8259                                  		;clc
  8260 00000359 C3                      		retn
  8261                                  ; ---------------------------------------------------------------------------
  8262                                  
  8263                                  ;************************************************************************
  8264                                  ;*									*
  8265                                  ;*	auxstat - call rom bios to determine aux port status		*
  8266                                  ;*									*
  8267                                  ;*	exit:	ax = status						*
  8268                                  ;*		dx = [auxnum]						*
  8269                                  ;*									*
  8270                                  ;************************************************************************
  8271                                  
  8272                                  auxstat:				
  8273 0000035A B403                    		mov	ah, 3		; auxfunc_status
  8274                                  
  8275                                  		; fall into auxop
  8276                                  
  8277                                  ; =============== S U B	R O U T	I N E =======================================
  8278                                  
  8279                                  ;************************************************************************
  8280                                  ;*									*
  8281                                  ;*	auxop - perform rom-biox aux port interrupt			*
  8282                                  ;*									*
  8283                                  ;*	entry:	ah = int 14h function number				*
  8284                                  ;*	exit:	ax = results						*
  8285                                  ;*		dx = [auxnum]						*
  8286                                  ;*									*
  8287                                  ;************************************************************************
  8288                                  
  8289                                  auxop:		; proc near		
  8290 0000035C 8B16[2100]              		mov	dx, [auxnum]	; ah=function code
  8291                                  					; 0=init, 1=send, 2=receive, 3=status
  8292                                  					; get port number
  8293 00000360 CD14                    		int	14h		; SERIAL I/O - GET USART STATUS
  8294                                  					; DX = port number (0-3)
  8295                                  					; Return: AX = port status code
  8296 00000362 C3                      		retn
  8297                                  
  8298                                  ; ---------------------------------------------------------------------------
  8299                                  
  8300                                  ;************************************************************************
  8301                                  ;*									*
  8302                                  ;*	aux_flsh - flush aux input buffer - set contents of		*
  8303                                  ;*		   auxbuf [auxnum] to zero				*
  8304                                  ;*									*
  8305                                  ;*	cas - shouldn't this code call the rom bios input function	*
  8306                                  ;*	      repeatedly until it isn't ready?  to flush out any	*
  8307                                  ;*	      pending serial input queue if there's a tsr like MODE	*
  8308                                  ;*	      which is providing interrupt-buffering of aux port?	*
  8309                                  ;*									*
  8310                                  ;************************************************************************
  8311                                  
  8312                                  aux_flsh:				; 2C7h:36Ch = 70h:28DCh
  8313 00000363 E81C00                  		call	getbx		; flush	aux input buffer
  8314 00000366 C60700                  		mov	byte [bx], 0	; get bx to point to auxbuf
  8315                                  					; zero out buffer
  8316                                  		;clc			; all done, successful return
  8317                                  		; 12/12/2022
  8318                                  		; cf=0 ('add' instruction in 'getbx')
  8319 00000369 C3                      		retn
  8320                                  ; ---------------------------------------------------------------------------
  8321                                  
  8322                                  ;************************************************************************
  8323                                  ;*									*
  8324                                  ;*	aux_writ - write to aux device					*
  8325                                  ;*									*
  8326                                  ;************************************************************************
  8327                                  
  8328                                  aux_writ:				; 2C7h:374h = 70h:28E4h
  8329                                  		;jcxz	short exvec2	; write	to aux device (if cx > 0)
  8330 0000036A E3AD                    		jcxz	exvec2		; 19/10/2022
  8331                                  aux_loop:				
  8332 0000036C 268A05                  		mov	al, [es:di]	; get character	to be written
  8333                                  					; move di pointer to next character
  8334 0000036F 47                      		inc	di
  8335 00000370 B401                    		mov	ah, 1		; auxfunc_send - indicates a write
  8336 00000372 E8E7FF                  		call	auxop		; send character over aux port
  8337 00000375 F6C480                  		test	ah, 80h		; check	for error
  8338 00000378 7405                    		jz	short awok	; then no error
  8339 0000037A B00A                    		mov	al, 10		; else indicate	write fault
  8340 0000037C E958FD                  		jmp	bc_err_cnt	; call error routines
  8341                                  ; ---------------------------------------------------------------------------
  8342                                  
  8343                                  awok:					
  8344 0000037F E2EB                    		loop	aux_loop	; if cx	is non-zero,
  8345                                  					; still	more character to print
  8346                                  		;clc			; all done, successful return
  8347                                  		; 12/12/2022
  8348                                  		; cf=0 (test instruction above)	
  8349 00000381 C3                      		retn
  8350                                  
  8351                                  ; =============== S U B	R O U T	I N E =======================================
  8352                                  
  8353                                  ;************************************************************************
  8354                                  ;*									*
  8355                                  ;*	getbx - return bx -> single byte input buffer for		*
  8356                                  ;*		selected aux port ([auxnum])				*
  8357                                  ;*									*
  8358                                  ;************************************************************************
  8359                                  
  8360                                  getbx:	
  8361 00000382 8B1E[2100]              		mov	bx, [auxnum]	; return bx -> single byte input buffer
  8362                                  					; for selected aux port	([auxnum])
  8363                                  		;add	bx, offset auxbuf
  8364 00000386 81C3[1600]              		add	bx, auxbuf	; 19/10/2022
  8365                                  		; 12/12/2022
  8366                                  		; cf=0 (if [uaxnum] is valid number) 
  8367 0000038A C3                      		retn
  8368                                  
  8369                                  ; ---------------------------------------------------------------------------
  8370                                  
  8371                                  ; 15/10/2022
  8372                                  
  8373                                  ;----------------------------------------------------------------
  8374                                  ;								:
  8375                                  ;		    clock device driver 			:
  8376                                  ;								:
  8377                                  ;								:
  8378                                  ;   this file contains the clock device driver. 		:
  8379                                  ;								:
  8380                                  ;   the routines in this files are:				:
  8381                                  ;								:
  8382                                  ;	routine 		function			:
  8383                                  ;	------- 		--------			:
  8384                                  ;	tim_writ		set the current time		:
  8385                                  ;	tim_read		read the current time		:
  8386                                  ;	time_to_ticks		convert time to corresponding	:
  8387                                  ;				  number of clock ticks 	:
  8388                                  ;								:
  8389                                  ; the clock ticks at the rate of:				:
  8390                                  ;								:
  8391                                  ;	1193180/65536 ticks/second (about 18.2 ticks per second):
  8392                                  ; see each routine for information on the use.			:
  8393                                  ;								:
  8394                                  ;----------------------------------------------------------------
  8395                                  
  8396                                  ; convert time to ticks
  8397                                  ; input : time in cx and dx
  8398                                  ; ticks returned in cx:dx
  8399                                  
  8400                                  ;19/07/2019
  8401                                  ;09/03/2019
  8402                                  
  8403                                  time_to_ticks:				; 0070h:2906h =	02C7h:0396h
  8404                                  
  8405                                  ; first convert from hour,min,sec,hund. to
  8406                                  ; total number of 100th of seconds
  8407                                  
  8408 0000038B B03C                    		mov	al, 60
  8409 0000038D F6E5                    		mul	ch		; hours	to minutes
  8410 0000038F B500                    		mov	ch, 0
  8411 00000391 01C8                    		add	ax, cx		; total	minutes
  8412 00000393 B97017                  		mov	cx, 6000	; 60*100
  8413 00000396 89D3                    		mov	bx, dx		; get out of the way of	the multiply
  8414 00000398 F7E1                    		mul	cx		; convert to 1/100 sec
  8415 0000039A 89C1                    		mov	cx, ax
  8416 0000039C B064                    		mov	al, 100
  8417 0000039E F6E7                    		mul	bh		; convert seconds to 1/100 sec
  8418 000003A0 01C1                    		add	cx, ax		; combine seconds with hours and min
  8419 000003A2 83D200                  		adc	dx, 0		; ripple carry
  8420 000003A5 B700                    		mov	bh, 0
  8421 000003A7 01D9                    		add	cx, bx		; combine 1/100	sec
  8422 000003A9 83D200                  		adc	dx, 0
  8423                                  
  8424                                  	; dx:cx is time in 1/100 sec
  8425                                  
  8426 000003AC 92                      		xchg	ax, dx
  8427 000003AD 91                      		xchg	ax, cx		; now time is in cx:ax
  8428 000003AE BB0BE9                  		mov	bx, 59659
  8429 000003B1 F7E3                    		mul	bx		; multiply low half
  8430 000003B3 87D1                    		xchg	dx, cx
  8431 000003B5 92                      		xchg	ax, dx		; cx->ax, ax->dx, dx->cx
  8432 000003B6 F7E3                    		mul	bx		; multiply high	half
  8433 000003B8 01C8                    		add	ax, cx		; combine overlapping products
  8434 000003BA 83D200                  		adc	dx, 0
  8435 000003BD 92                      		xchg	ax, dx		; ax:dx=time*59659
  8436 000003BE BB0500                  		mov	bx, 5
  8437 000003C1 F6F3                    		div	bl		; divide high half by 5
  8438 000003C3 88C1                    		mov	cl, al
  8439 000003C5 B500                    		mov	ch, 0
  8440 000003C7 88E0                    		mov	al, ah		; remainder of divide-by-5
  8441 000003C9 98                      		cbw
  8442 000003CA 92                      		xchg	ax, dx		; use it to extend low half
  8443 000003CB F7F3                    		div	bx		; divide low half by 5
  8444 000003CD 89C2                    		mov	dx, ax		; cx:dx	is now number of ticks in time
  8445 000003CF CB                      		retf			; far return
  8446                                  
  8447                                  ; ---------------------------------------------------------------------------
  8448                                  
  8449                                  ; 17/10/2022
  8450                                  ; 15/10/2022
  8451                                  
  8452                                  ;--------------------------------------------------------------------
  8453                                  ;
  8454                                  ; tim_writ sets the current time
  8455                                  ;
  8456                                  ; on entry es:[di] has the current time:
  8457                                  ;
  8458                                  ;	number of days since 1-1-80	(word)
  8459                                  ;	minutes (0-59)			(byte)
  8460                                  ;	hours (0-23)			(byte)
  8461                                  ;	hundredths of seconds (0-99)	(byte)
  8462                                  ;	seconds (0-59)			(byte)
  8463                                  ;
  8464                                  ; each number has been checked for the correct range.
  8465                                  ;
  8466                                  ;	NOTE: Any changes in this routine probably require corresponding
  8467                                  ;	changes in the version that is built with the power manager driver.
  8468                                  ;	See ptime.asm.
  8469                                  ;
  8470                                  ;--------------------------------------------------------------------
  8471                                  
  8472                                  tim_writ:				; 2C7h:3DBh = 70h:294Bh
  8473 000003D0 268B05                  		mov	ax, [es:di]
  8474 000003D3 50                      		push	ax		; daycnt. we need to set this at the very
  8475                                  					; end to avoid tick windows.
  8476 000003D4 803E[F304]00            		cmp	byte [havecmosclock], 0
  8477                                  		;cmp	ds:havecmosclock, 0
  8478 000003D9 7426                    		jz	short no_cmos_1
  8479 000003DB 268A4503                		mov	al, [es:di+3]	; near indirect	calls
  8480                                  					; get binary hours
  8481                                  					; convert to bcd
  8482 000003DF FF1E[0205]              		call	far [bintobcd]
  8483                                  		;call	ds:bintobcd	; call far [bintobcd]
  8484 000003E3 88C5                    		mov	ch, al		; ch = bcd hours
  8485 000003E5 268A4502                		mov	al, [es:di+2]	; get binary minutes
  8486 000003E9 FF1E[0205]              		call	far [bintobcd]
  8487                                  		;call	ds:bintobcd	; convert to bcd
  8488 000003ED 88C1                    		mov	cl, al		; cl = bcd minutes
  8489 000003EF 268A4505                		mov	al, [es:di+5]	; get binary seconds
  8490 000003F3 FF1E[0205]              		call	far [bintobcd]
  8491                                  		;call	ds:bintobcd
  8492 000003F7 88C6                    		mov	dh, al		; dh = bcd seconds
  8493 000003F9 B200                    		mov	dl, 0		; dl = 0 (st) or 1 (dst)
  8494 000003FB FA                      		cli
  8495 000003FC B403                    		mov	ah, 3
  8496 000003FE CD1A                    		int	1Ah		; CLOCK	- SET REAL TIME	CLOCK (AT,XT286,CONV,PS)
  8497                                  					; CH = hours in	BCD, CL	= minutes in BCD
  8498                                  					;  DH =	seconds	in BCD,DL = 01h	if daylight savings, 00h if standard time
  8499                                  					; Return: CMOS clock set
  8500 00000400 FB                      		sti
  8501                                  no_cmos_1:				
  8502 00000401 268B4D02                		mov	cx, [es:di+2]
  8503 00000405 268B5504                		mov	dx, [es:di+4]
  8504                                  		; 17/10/2022
  8505 00000409 FF1E[E206]              		call	far [ttticks]
  8506                                  		;call	dword ptr ds:ttticks ; call far	[ttticks]
  8507                                  					; convert time to ticks
  8508                                  					; cx:dx	now has	time in	ticks
  8509 0000040D FA                      		cli			; turn off timer
  8510 0000040E B401                    		mov	ah, 1
  8511 00000410 CD1A                    		int	1Ah		; CLOCK	- SET TIME OF DAY
  8512                                  					; CX:DX	= clock	count
  8513                                  					; Return: time of day set
  8514                                  		;pop	ds:daycnt
  8515 00000412 8F06[F004]              		pop	word [daycnt]
  8516 00000416 FB                      		sti
  8517                                  		;cmp	ds:havecmosclock, 0
  8518 00000417 803E[F304]00            		cmp	byte [havecmosclock], 0
  8519 0000041C 740A                    		jz	short no_cmos_2
  8520 0000041E FF1E[0605]              		call	far [daycnttoday]
  8521                                  		;call	ds:daycnttoday	; call far [daycnttoday]
  8522                                  					; convert to bcd format
  8523 00000422 FA                      		cli
  8524 00000423 B405                    		mov	ah, 5
  8525 00000425 CD1A                    		int	1Ah		; CLOCK	- SET DATE IN REAL TIME	CLOCK (AT,XT286,CONV,PS)
  8526                                  					; DL = day in BCD, DH =	month in BCD, CL = year	in BCD
  8527                                  					; CH = century (19h or 20h)
  8528                                  					; Return: CMOS clock set
  8529 00000427 FB                      		sti
  8530                                  no_cmos_2:
  8531                                  		; 12/12/2022
  8532                                  		; cf=0				
  8533                                  		;clc
  8534 00000428 C3                      		retn
  8535                                  
  8536                                  ; ---------------------------------------------------------------------------
  8537                                  
  8538                                  ; 15/10/2022
  8539                                  
  8540                                  ;----------------------------------------------------------------------------
  8541                                  ; gettime reads date and time
  8542                                  ; and returns the following information:
  8543                                  ;
  8544                                  ;	es:[di]  =count of days since 1-1-80
  8545                                  ;	es:[di+2]=hours
  8546                                  ;	es:[di+3]=minutes
  8547                                  ;	es:[di+4]=seconds
  8548                                  ;	es:[di+5]=hundredths of seconds
  8549                                  ;
  8550                                  ;	NOTE:  Any changes in this routine probably require corresponding
  8551                                  ;	changes in the version that is built with the power manager driver.
  8552                                  ;	See ptime.asm.
  8553                                  ;----------------------------------------------------------------------------
  8554                                  
  8555                                  tim_read:				; 2C7h:435h = 70h:29A5h
  8556 00000429 E84E00                  		call	GetTickCnt
  8557 0000042C 8B36[F004]              		mov	si, [daycnt]
  8558                                  
  8559                                  ; we now need to convert the time in tick to the time in 100th of
  8560                                  ; seconds. the relation between tick and seconds is:
  8561                                  ;
  8562                                  ;		 65,536 seconds
  8563                                  ;	       ----------------
  8564                                  ;		1,193,180 tick
  8565                                  ;
  8566                                  ; to get to 100th of second we need to multiply by 100. the equation is:
  8567                                  ;
  8568                                  ;	ticks from clock  * 65,536 * 100
  8569                                  ;      --------------------------------- = time in 100th of seconds
  8570                                  ;		1,193,180
  8571                                  ;
  8572                                  ; fortunately this formula simplifies to:
  8573                                  ;
  8574                                  ;	ticks from clock * 5 * 65,536
  8575                                  ;      --------------------------------- = time in 100th of seconds
  8576                                  ;		59,659
  8577                                  ;
  8578                                  ; the calculation is done by first multipling tick by 5. next we divide by
  8579                                  ; 59,659. in this division we multiply by 65,536 by shifting the dividend
  8580                                  ; my 16 bits to the left.
  8581                                  ;
  8582                                  ; start with ticks in cx:dx
  8583                                  ; multiply by 5
  8584                                  
  8585 00000430 89C8                    		mov	ax, cx
  8586 00000432 89D3                    		mov	bx, dx		; start	with ticks in cx:dx
  8587                                  					; multiply by 5
  8588 00000434 D1E2                    		shl	dx, 1
  8589 00000436 D1D1                    		rcl	cx, 1		; times	2
  8590 00000438 D1E2                    		shl	dx, 1
  8591 0000043A D1D1                    		rcl	cx, 1		; times	4
  8592 0000043C 01DA                    		add	dx, bx
  8593 0000043E 11C8                    		adc	ax, cx		; times	5
  8594 00000440 92                      		xchg	ax, dx
  8595                                  
  8596                                  ; now have ticks * 5 in	dx:ax
  8597                                  ; we now need to multiply by 65536 and divide by 59659 d.
  8598                                  
  8599 00000441 B90BE9                  		mov	cx, 59659	; get divisor
  8600 00000444 F7F1                    		div	cx		; dx now has remainder
  8601                                  					; ax has high word of final quotient
  8602 00000446 89C3                    		mov	bx, ax		; put high word	in safe	place
  8603 00000448 31C0                    		xor	ax, ax		; this is the multiply by 65536
  8604 0000044A F7F1                    		div	cx		; bx:ax	now has	time in	100th of seconds
  8605                                  
  8606                                  ; rounding based on the	remainder may be added here
  8607                                  ; the result in	bx:ax is time in 1/100 second.
  8608                                  
  8609 0000044C 89DA                    		mov	dx, bx		
  8610 0000044E B9C800                  		mov	cx, 200		;extract 1/100's
  8611                                  
  8612                                  ; division by 200 is necessary to ensure no overflow--max result
  8613                                  ; is number of seconds in a day/2 = 43200.
  8614                                  
  8615 00000451 F7F1                    		div	cx
  8616 00000453 80FA64                  		cmp	dl, 100		; remainder over 100?
  8617 00000456 7203                    		jb	short noadj
  8618 00000458 80EA64                  		sub	dl, 100		; keep 1/100's less than 100
  8619                                  noadj:					
  8620 0000045B F5                      		cmc			; if we	subtracted 100,	carry is now set
  8621 0000045C 88D3                    		mov	bl, dl		; save 1/100's
  8622                                  
  8623                                  ; to compensate	for dividing by	200 instead of 100, we now multiply
  8624                                  ; by two, shifting a one in if the remainder had exceeded 100.
  8625                                  
  8626 0000045E D1D0                    		rcl	ax, 1		
  8627 00000460 B200                    		mov	dl, 0
  8628 00000462 D1D2                    		rcl	dx, 1
  8629 00000464 B93C00                  		mov	cx, 60		; divide out seconds
  8630 00000467 F7F1                    		div	cx
  8631 00000469 88D7                    		mov	bh, dl		; save the seconds
  8632 0000046B F6F1                    		div	cl		; break	into hours and minutes
  8633 0000046D 86C4                    		xchg	al, ah
  8634                                  
  8635                                  ; time is now in ax:bx (hours, minutes, seconds, 1/100 sec)
  8636                                  
  8637 0000046F 50                      		push	ax
  8638 00000470 89F0                    		mov	ax, si		; daycnt
  8639 00000472 AB                      		stosw
  8640 00000473 58                      		pop	ax
  8641 00000474 AB                      		stosw
  8642 00000475 89D8                    		mov	ax, bx
  8643 00000477 AB                      		stosw
  8644 00000478 F8                      		clc
  8645 00000479 C3                      		retn
  8646                                  
  8647                                  ; =============== S U B	R O U T	I N E =======================================
  8648                                  
  8649                                  ; 15/10/2022
  8650                                  
  8651                                  ;----------------------------------------------------------------------------
  8652                                  ;
  8653                                  ; procedure : GetTickCnt
  8654                                  ;
  8655                                  ;		Returns the tick count in CX:DX. Takes care of DayCnt in case
  8656                                  ;		of rollover [except when power management driver is in use]. 
  8657                                  ;		Uses the following logic for updating Daycnt
  8658                                  ;
  8659                                  ;		if ( rollover ) {
  8660                                  ;			if ( t_switch )
  8661                                  ;				daycnt++ ;
  8662                                  ;			else
  8663                                  ;				daycnt += rollover ;
  8664                                  ;		}
  8665                                  ;
  8666                                  ; USES : AX
  8667                                  ;
  8668                                  ; RETURNS : CX:DX - tick count
  8669                                  ; MODIFIES : daycnt
  8670                                  ;
  8671                                  ;----------------------------------------------------------------------------
  8672                                  
  8673                                  		; 17/10/2022
  8674                                  GetTickCnt:	
  8675 0000047A 30E4                    		xor	ah, ah
  8676 0000047C CD1A                    		int	1Ah		; CLOCK	- GET TIME OF DAY
  8677                                  					; Return: CX:DX	= clock	count
  8678                                  					; AL = 00h if clock was	read or	written	(via AH=0,1) since the previous
  8679                                  					; midnight
  8680                                  					; Otherwise, AL	> 0
  8681 0000047E 803E[F204]00            		cmp	byte [t_switch], 0 ; use old method ? (>0 is yes)
  8682 00000483 7507                    		jnz	short inc_case	; old method assumes  that Int 1Ah returns rollover flag
  8683 00000485 30E4                    		xor	ah, ah		; new method assumes that Int 1Ah returns roll over count
  8684                                  					; and not flag
  8685 00000487 0106[F004]              		add	[daycnt], ax
  8686 0000048B C3                      		retn
  8687                                  ; ---------------------------------------------------------------------------
  8688                                  
  8689                                  inc_case:				
  8690 0000048C 08C0                    		or	al, al
  8691 0000048E 7404                    		jz	short no_rollover
  8692 00000490 FF06[F004]              		inc	word [daycnt]
  8693                                  no_rollover:				
  8694 00000494 C3                      		retn
  8695                                  
  8696                                  ;----------------------------------------------------------------------------
  8697                                  ; MSDISK.ASM - MSDOS 6.0 - 1991
  8698                                  ;----------------------------------------------------------------------------
  8699                                  ; 15/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
  8700                                  ; 09/03/2019 - Retro DOS v4.0
  8701                                  
  8702                                  ; MSDISK.ASM - MSDOS 3.3 - 02/02/1988
  8703                                  ; 26/05/2018 - Retro DOS v3.0
  8704                                  ; 23/03/2018 - Retro DOS v2.0
  8705                                  
  8706                                  ;error_unknown_media equ	7	; for use in BUILD BPB call
  8707                                  
  8708                                  ;struc BPB_TYPE
  8709                                  ;.SECSIZE:	resw 1
  8710                                  ;.SECALL:	resb 1
  8711                                  ;.RESNUM:	resw 1
  8712                                  ;.FATNUM:	resb 1
  8713                                  ;.DIRNUM:	resw 1
  8714                                  ;.SECNUM:	resw 1
  8715                                  ;.FATID:	resb 1
  8716                                  ;.FATSIZE:	resw 1
  8717                                  ;.SLIM:		resw 1
  8718                                  ;.HLIM:		resw 1
  8719                                  ;.HIDDEN:	resw 1
  8720                                  ;.size:
  8721                                  ;endstruc
  8722                                  
  8723                                  ;-----------------------------------------------------------------
  8724                                  ;	disk interface routines
  8725                                  ;-----------------------------------------------------------------
  8726                                  
  8727                                  ; device attribute bits:
  8728                                  ;	bit 6 - get/set map for logical drives and generic ioctl.
  8729                                  
  8730                                  ;MAXERR		equ	5
  8731                                  ;MAX_HD_FMT_ERR	equ	2
  8732                                  
  8733                                  ;LSTDRV	equ 504h
  8734                                  
  8735                                  ; some floppies do not have changeline. as a result, media-check would
  8736                                  ; normally return i-don't-know, the dos would continually reread the fat and
  8737                                  ; discard cached data. we optimize this by implementing a logical door-latch:
  8738                                  ; it is physically impossible to change a disk in under 2 seconds. we retain
  8739                                  ; the time of the last successful disk operation and compare it with the current
  8740                                  ; time during media-check. if < 2 seconds and at least 1 timer tick has passed,
  8741                                  ; the we say no change. if > 2 seconds then we say i-don't-know. finally, 
  8742                                  ; since we cannot trust the timer to be always available, we record the number 
  8743                                  ; of media checks that have occurred when no apparent time has elapsed. while
  8744                                  ; this number is < a given threshold, we say no change. when it exceeds that
  8745                                  ; threshold, we say i-don't-know and reset the counter to 0. when we store 
  8746                                  ; the time of last successful access, if we see that time has passed too,
  8747                                  ; we reset the counter.
  8748                                  
  8749                                  accessmax	equ	5
  8750                                  
  8751                                  ; due to various bogosities, we need to continually adjust what the head
  8752                                  ; settle time is.  the following algorithm is used:
  8753                                  ;
  8754                                  ;   get the current head settle value.
  8755                                  ;   if it is 0, then
  8756                                  ;	set slow = 15
  8757                                  ;   else
  8758                                  ;	set slow = value
  8759                                  ;   ...
  8760                                  ;*********************************************
  8761                                  ;************ old algorithm ******************
  8762                                  ;*   if we are seeking and writing then
  8763                                  ;*	 use slow
  8764                                  ;*   else
  8765                                  ;*	 use fast
  8766                                  ;*********************************************
  8767                                  ;*********** ibm's requested logic ***********
  8768                                  ;   if we are seeking and writing and not on an at then
  8769                                  ;	use slow
  8770                                  ;   else
  8771                                  ;	use fast
  8772                                  ;   ...
  8773                                  ;   restore current head settle value
  8774                                  ;
  8775                                  ;
  8776                                  ;---------------------------------------
  8777                                  multrk_on	equ	10000000b	;user spcified mutitrack=on, or system turns
  8778                                  					; it on after handling config.sys file as a
  8779                                  					; default value, if multrk_flag = multrk_off1.
  8780                                  multrk_off1	equ	00000000b	;initial value. no "multitrack=" command entered.
  8781                                  multrk_off2	equ	00000001b	;user specified multitrack=off.
  8782                                  
  8783                                  ; close data segment, open Bios_Code segment
  8784                                  
  8785                                  ; 15/10/2022
  8786                                  
  8787                                  ; BIOSCODE:04A2h (MSDOS 6.21, IO.SYS)
  8788                                  
  8789                                  ;-----------------------------------------------------------------
  8790                                  ;	command jump table
  8791                                  ;-----------------------------------------------------------------
  8792                                  
  8793 00000495 00                      		db 0
  8794                                  
  8795                                  ; 11/12/2022
  8796                                  %if 0
  8797                                  
  8798                                  dsktbl:		db 26			; 2C7h:4A2h = 70h:2A12h
  8799                                  					; ((dtbl_siz-1)/2) ; this is the size of the table ; 26
  8800                                  		dw 1742h		; dsk_init
  8801                                  		dw 4EBh			; media_chk
  8802                                  		dw 592h			; get_bpb
  8803                                  		dw 0D5h			; bc_cmderr
  8804                                  		dw 857h			; dsk_read
  8805                                  		dw 83Dh			; x_bus_exit
  8806                                  		dw 558h			; ret_carry_clear
  8807                                  		dw 558h			; ret_carry_clear
  8808                                  		dw 849h			; dsk_writ
  8809                                  		dw 841h			; dsk_writv
  8810                                  		dw 558h			; ret_carry_clear
  8811                                  		dw 558h			; ret_carry_clear
  8812                                  		dw 0D5h			; bc_cmderr
  8813                                  		dw 80Ah			; dsk_open
  8814                                  		dw 81Ah			; dsk_close
  8815                                  		dw 831h			; dsk_rem
  8816                                  		dw 558h			; ret_carry_clear
  8817                                  		dw 558h			; ret_carry_clear
  8818                                  		dw 558h			; ret_carry_clear
  8819                                  		dw 0C6Bh		; do_generic_ioctl
  8820                                  		dw 558h			; ret_carry_clear
  8821                                  		dw 558h			; ret_carry_clear
  8822                                  		dw 558h			; ret_carry_clear
  8823                                  		dw 1124h		; ioctl_getown
  8824                                  		dw 1142h		; ioctl_setown
  8825                                  		dw 129Ah		; ioctl_support_query
  8826                                  
  8827                                  ;dtbl_siz equ $-dsktbl
  8828                                  
  8829                                  %endif
  8830                                  		; 11/12/2022
  8831 00000496 1A                      dsktbl:		db (dtbl_siz-1)/2	; 26 ; this is the size of the table
  8832 00000497 [E916]                  		dw dsk_init
  8833 00000499 [DF04]                  		dw media_chk
  8834 0000049B [8505]                  		dw get_bpb
  8835 0000049D [D500]                  		dw bc_cmderr
  8836 0000049F [3708]                  		dw dsk_read
  8837 000004A1 [1D08]                  		dw x_bus_exit
  8838 000004A3 [4B05]                  		dw ret_carry_clear
  8839 000004A5 [4B05]                  		dw ret_carry_clear
  8840 000004A7 [2908]                  		dw dsk_writ
  8841 000004A9 [2108]                  		dw dsk_writv
  8842 000004AB [4B05]                  		dw ret_carry_clear
  8843 000004AD [4B05]                  		dw ret_carry_clear
  8844 000004AF [D500]                  		dw bc_cmderr
  8845 000004B1 [ED07]                  		dw dsk_open
  8846 000004B3 [FC07]                  		dw dsk_close
  8847 000004B5 [1208]                  		dw dsk_rem
  8848 000004B7 [4B05]                  		dw ret_carry_clear
  8849 000004B9 [4B05]                  		dw ret_carry_clear
  8850 000004BB [4B05]                  		dw ret_carry_clear
  8851 000004BD [460C]                  		dw do_generic_ioctl
  8852 000004BF [4B05]                  		dw ret_carry_clear
  8853 000004C1 [4B05]                  		dw ret_carry_clear
  8854 000004C3 [4B05]                  		dw ret_carry_clear
  8855 000004C5 [EC10]                  		dw ioctl_getown
  8856 000004C7 [0911]                  		dw ioctl_setown
  8857 000004C9 [5812]                  		dw ioctl_support_query
  8858                                  
  8859                                  dtbl_siz equ $-dsktbl
  8860                                  
  8861                                  ; =============== S U B	R O U T	I N E =======================================
  8862                                  
  8863                                  ; ---------------------------------------------------------------------------
  8864                                  ; setdrive scans through the data structure of bdss, and returns a pointer to
  8865                                  ; the one that belongs to the drive specified. carry is set if none exists
  8866                                  ; for the drive. Pointer is returned in es:[di]
  8867                                  ;
  8868                                  ;  AL contains the logical drive number.
  8869                                  ; ---------------------------------------------------------------------------
  8870                                  
  8871                                  SetDrive:	
  8872                                  		;les	di, ds:start_bds ; Point es:di to first bds	
  8873 000004CB C43E[1901]              		les	di, [start_bds] ; 19/10/2022
  8874                                  X_Scan_Loop:				
  8875 000004CF 26384505                		cmp	[es:di+5], al	
  8876 000004D3 7409                    		jz	short X_SetDrv
  8877 000004D5 26C43D                  		les	di, [es:di]	; [es:di+BDS.link] ; Go	to next	bds
  8878 000004D8 83FFFF                  		cmp	di, 0FFFFh
  8879 000004DB 75F2                    		jnz	short X_Scan_Loop
  8880 000004DD F9                      		stc
  8881                                  X_SetDrv:				
  8882 000004DE C3                      		retn
  8883                                  
  8884                                  ; ---------------------------------------------------------------------------
  8885                                  
  8886                                  ; 15/10/2022
  8887                                  
  8888                                  ; ---------------------------------------------------------------------
  8889                                  ; if id is f9, have a 96tpi disk else
  8890                                  ; if bit 2 is 0 then media is not removable and could not have changed
  8891                                  ;  otherwise if within 2 secs of last disk operation media could not
  8892                                  ;    have changed, otherwise dont know if media has changed
  8893                                  ; ---------------------------------------------------------------------
  8894                                  
  8895                                  media_chk:				; 2C7h:4EBh = 70h:2A5Bh
  8896 000004DF E8E9FF                  		call	SetDrive
  8897 000004E2 BE0100                  		mov	si, 1
  8898 000004E5 26F6452401              		test	byte [es:di+24h], 1 ; [es:di+BDS.flags+1]
  8899                                  					; fchanged_by_format
  8900 000004EA 7416                    		jz	short WeAreNotFakingIt
  8901                                  		; 12/12/2022
  8902 000004EC 26806524FE              		and	byte [es:di+24h], 0FEh ; ~fchanged_by_format
  8903                                  		;and	word [es:di+23h], 0FEFFh ; [es:di+BDS.flags]
  8904                                  					; ~fchanged_by_format ;	reset flag
  8905 000004F1 C606[1E01]FF            		mov	byte [tim_drv], 0FFh ; -1
  8906                                  					; Ensure that we ask the rom if media has changed
  8907 000004F6 26F6452301              		test	byte [es:di+23h], 1 ; [es:di+BDS.flags]
  8908                                  					; fnon_removable
  8909 000004FB 740C                    		jz	short wehaveafloppy
  8910 000004FD BEFFFF                  		mov	si, 0FFFFh	; Indicate media changed
  8911 00000500 EB2C                    		jmp	short Media_Done ; Media_Done
  8912                                  ; ---------------------------------------------------------------------------
  8913                                  
  8914                                  WeAreNotFakingIt:
  8915                                  		;test	byte [es:di+BDS.flags], fnon_removable			
  8916 00000502 26F6452301              		test	byte [es:di+23h], 1
  8917 00000507 7525                    		jnz	short Media_Done
  8918                                  wehaveafloppy:				
  8919 00000509 31F6                    		xor	si, si		; Presume "I don't know"
  8920                                  
  8921                                  		; If we have a floppy with changeline support, we ask the ROM
  8922                                  		; to determine if media has changed. We do not perform the
  8923                                  		; 2 second check for these drives.
  8924                                  
  8925 0000050B 803E[7700]00            		cmp	byte [fhave96], 0	; Do we	have changeline	support?
  8926 00000510 740A                    		jz	short mChk_NoChangeLine	; Brif not
  8927 00000512 E89F12                  		call	mediacheck	;  Call	into removable routine
  8928 00000515 7236                    		jb	short err_exitj
  8929 00000517 E8F713                  		call	haschange
  8930 0000051A 7512                    		jnz	short Media_Done
  8931                                  mChk_NoChangeLine:
  8932                                  		; If we come here, we have a floppy with no changeline support
  8933                                  			
  8934 0000051C BE0100                  		mov	si, 1		; Presume no change
  8935 0000051F A0[1E01]                		mov	al, [tim_drv]	; Last drive accessed
  8936 00000522 263A4504                		cmp	al, [es:di+4]	; [es:di+BDS.drivenum]
  8937                                  					; Is drive of last access the same?
  8938 00000526 7505                    		jnz	short Media_Unk	; No, then "i don't know"
  8939 00000528 E82800                  		call	Check_Time_Of_Access
  8940 0000052B EB01                    		jmp	short Media_Done
  8941                                  ; ---------------------------------------------------------------------------
  8942                                  
  8943                                  Media_Unk:				
  8944 0000052D 4E                      		dec	si		; ; Return "I don't know"
  8945                                  
  8946                                  		; SI now contains the correct value for media change.
  8947                                  		; Clean up the left overs
  8948                                  Media_Done:	
  8949                                  		; 19/10/2022			
  8950 0000052E 06                      		push	es
  8951 0000052F C41E[1200]              		les	bx, [ptrsav]
  8952 00000533 2689770E                		mov	[es:bx+0Eh], si	; [es:bx+trans]
  8953 00000537 07                      		pop	es
  8954 00000538 09F6                    		or	si, si
  8955 0000053A 790F                    		jns	short ret_carry_clear ;	volidok
  8956 0000053C 803E[7700]00            		cmp	byte [fhave96], 0
  8957 00000541 7403                    		jz	short mChk1_NoChangeLine ; Brif	no changeline support
  8958 00000543 E85713                  		call	media_set_vid
  8959                                  mChk1_NoChangeLine:			
  8960 00000546 C606[1E01]FF            		mov	byte [tim_drv], 0FFh ; -1
  8961                                  					; Make sure we ask rom for media check
  8962                                  ret_carry_clear:			
  8963 0000054B F8                      		clc			; volidok
  8964 0000054C C3                      		retn
  8965                                  ; ---------------------------------------------------------------------------
  8966                                  
  8967                                  err_exitj:				
  8968 0000054D E88106                  		call	maperror	; guaranteed to	set carry
  8969                                  ret81:					
  8970 00000550 B481                    		mov	ah, 81h		; return error status
  8971 00000552 C3                      		retn			; return with carry set
  8972                                  
  8973                                  ; =============== S U B	R O U T	I N E =======================================
  8974                                  
  8975                                  ; ---------------------------------------------------------------------------
  8976                                  ; perform a check on the time passed since the last access for this physical
  8977                                  ; drive.
  8978                                  ; we are accessing the same drive. if the time of last successful access was
  8979                                  ; less than 2 seconds ago, then we may presume that the disk was not changed.
  8980                                  ; returns in si:
  8981                                  ;	0 - if time of last access was >= 2 seconds
  8982                                  ;	1 - if time was < 2 seconds (i.e no media change assumed)
  8983                                  ; registers affected ax,cx,dx, flags.
  8984                                  ;
  8985                                  ;	assume es:di -> bds, ds->Bios_Data
  8986                                  ; ---------------------------------------------------------------------------
  8987                                  
  8988                                  		; 19/10/2022
  8989                                  Check_Time_Of_Access:
  8990 00000553 BE0100                  		mov	si, 1		; presume no change.
  8991 00000556 E821FF                  		call	GetTickCnt	; cx:dx	is the elapsed time
  8992 00000559 268B4547                		mov	ax, [es:di+47h]	; [es:di+BDS.tim_lo]
  8993                                  					; get stored time
  8994 0000055D 29C2                    		sub	dx, ax
  8995 0000055F 268B4549                		mov	ax, [es:di+49h]	; [es:di+BDS.tim_hi]
  8996 00000563 19C1                    		sbb	cx, ax
  8997 00000565 751A                    		jnz	short timecheck_unk ; cx<>0 => >1 hour
  8998 00000567 09D2                    		or	dx, dx		; time must pass
  8999 00000569 7511                    		jnz	short timepassed ; yes, examine max value
  9000 0000056B FE06[1D01]              		inc	byte [accesscount]
  9001 0000056F 803E[1D01]05            		cmp	byte [accesscount], 5 
  9002                                  					; if count is less than threshold, ok
  9003 00000574 720C                    		jb	short timecheck_ret
  9004 00000576 FE0E[1D01]              		dec	byte [accesscount] ; don't let the count wrap
  9005 0000057A EB05                    		jmp	short timecheck_unk ; "i don't know" if media changed
  9006                                  ; ---------------------------------------------------------------------------
  9007                                  
  9008                                  timepassed:				
  9009 0000057C 83FA24                  		cmp	dx, 36		; 18*2 ; 18.2 tics per second.
  9010                                  					; min elapsed time? (2 seconds)
  9011 0000057F 7601                    		jbe	short timecheck_ret ; yes, presume no change
  9012                                  
  9013                                  		; everything indicates that we do not know what has happened.
  9014                                  timecheck_unk:				
  9015 00000581 4E                      		dec	si		; presume i don't know
  9016                                  timecheck_ret:				
  9017 00000582 C3                      		retn
  9018                                  
  9019                                  ; ---------------------------------------------------------------------------
  9020                                  ; 15/10/2022
  9021                                  Err_Exitj2:
  9022 00000583 EBC8                    		jmp	short err_exitj
  9023                                  
  9024                                  ; ---------------------------------------------------------------------------
  9025                                  
  9026                                  ; 15/10/2022
  9027                                  
  9028                                  ; ==========================================================================
  9029                                  ; Build a valid bpb for the disk in the drive.
  9030                                  ; ==========================================================================
  9031                                  
  9032                                  		; 19/10/2022
  9033                                  get_bpb:				; 2C7h:592h = 70h:2B02h
  9034 00000585 268A25                  		mov	ah, [es:di]	; get fat id byte read by dos
  9035 00000588 E840FF                  		call	SetDrive	; get the correct bds for the drive
  9036 0000058B 26F6452301              		test	byte [es:di+23h], 1 ; [es:di+BDS.flags]
  9037                                  					; fnon_removable
  9038 00000590 7523                    		jnz	short already_gotbpb ; no need to build	for fixed disks
  9039                                  
  9040                                  		; let's set the default value for volid,vol_serial,
  9041                                  		; filesys_id in bds table
  9042                                  
  9043 00000592 E83700                  		call	clear_ids
  9044                                  		;mov	ds:set_id_flag,	1 ; indicate to	set system id in bds
  9045 00000595 C606[0A05]01            		mov	byte [set_id_flag], 1
  9046 0000059A E85B00                  		call	GetBp		; build	a bpb if necessary
  9047 0000059D 72B1                    		jb	short ret81
  9048                                  		;cmp	ds:set_id_flag,	2 ; already, volume_label set from boot
  9049 0000059F 803E[0A05]02            		cmp	byte [set_id_flag], 2
  9050                                  		;mov	ds:set_id_flag,	0 ; record to bds table?
  9051 000005A4 C606[0A05]00            		mov	byte [set_id_flag], 0
  9052 000005A9 740A                    		jz	short already_gotbpb ; do not set it again from	root dir
  9053                                  					; otherwise, conventional boot record
  9054                                  		;cmp	ds:fhave96, 0	; do we	have changeline	support?
  9055 000005AB 803E[7700]00            		cmp	byte [fhave96], 0
  9056 000005B0 7403                    		jz	short already_gotbpb ; brif not
  9057 000005B2 E86213                  		call	set_volume_id
  9058                                  already_gotbpb:				
  9059 000005B5 83C706                  		add	di, 6		; BDS.BPB
  9060                                  					; return the bpb from the current bds
  9061                                  
  9062                                  ;		 fall into setptrsav, es:di -> result
  9063                                  
  9064                                  ; ---------------------------------------------------------------------------
  9065                                  
  9066                                  ; 15/10/2022
  9067                                  
  9068                                  ; ==========================================================================
  9069                                  ;Setptrsav is also jumped to from dsk_init (msbio2.asm). In both cases, the
  9070                                  ;pointer to be returned is in es:di. We were incorrectly returning ds:di.
  9071                                  ;Note that this works in most cases because most pointers are in Bios_Data.
  9072                                  ;It fails, for instance, when we install an external drive using driver.sys
  9073                                  ;because then the BDS segment is no longer Bios_Data. 
  9074                                  ;NB: It is fine to corrupt cx because this is not a return value and anyway
  9075                                  ;this returns to Chardev_entry (msbio1.asm) where all registers are 
  9076                                  ;restored before returning to the caller.
  9077                                  ; ==========================================================================
  9078                                  
  9079                                  		; 19/10/2022
  9080                                  SetPtrSav:	; return point for dsk_init				
  9081 000005B8 8CC1                    		mov	cx, es		; save es
  9082                                  		;les	bx, ds:ptrsav
  9083 000005BA C41E[1200]              		les	bx, [ptrsav]
  9084 000005BE 2688670D                		mov	[es:bx+0Dh], ah	; [es:bx+media]
  9085 000005C2 26897F12                		mov	[es:bx+12h], di	; [es:bx+count]
  9086 000005C6 26894F14                		mov	[es:bx+14h], cx	; [es:bx+count+2]
  9087 000005CA F8                      		clc
  9088 000005CB C3                      		retn
  9089                                  
  9090                                  ; =============== S U B	R O U T	I N E =======================================
  9091                                  
  9092                                  ; 15/10/2022
  9093                                  
  9094                                  ; -----------------------------------------------------
  9095                                  ; clear ids in bds table. only applied for floppies.
  9096                                  ;input:  es:di -> bds table
  9097                                  ;	assumes ds: -> Bios_Data
  9098                                  ;output: volid set to "NO NAME    "
  9099                                  ;	 vol_serial set to 0.
  9100                                  ;	 filesys_id set to "FAT12   " or "FAT16   "
  9101                                  ;	   depending on the flag fatsize in bds.
  9102                                  ;
  9103                                  ;	trashes si, cx
  9104                                  ; -----------------------------------------------------
  9105                                  
  9106                                  ;size_of_EXT_BOOT_VOL_LABEL equ 11
  9107                                  ;size_of_EXT_SYSTEM_ID equ 8
  9108                                  
  9109                                  clear_ids:
  9110                                  		; 11/09/2023 - Retro DOS v4.1 IO.SYS (Optimization & BugFix)
  9111 000005CC 268A451F                		mov	al, [es:di+1Fh] ; mov al,[es:di+BDS.fatsiz]
  9112                                  clear_ids_x:	; 11/09/2023		
  9113                                   		; (MSDOS 5.0 IO.SYS - BIOSCODE:05D9h)
  9114 000005D0 57                      		push	di
  9115 000005D1 31C9                    		xor	cx, cx		; no serial number
  9116 000005D3 26894D57                		mov	[es:di+57h], cx	; [es:di+BDS.vol_serial]
  9117 000005D7 26894D59                		mov	[es:di+59h], cx	; [es:di+BDS.vol_serial+2]
  9118                                  
  9119                                  		; BUGBUG - there's a lot in common here and with
  9120                                  		; mov_media_ids.. see if we can save some space by
  9121                                  		; merging them... jgl
  9122                                  
  9123                                  		;mov	cx, 11		; size_of_EXT_BOOT_VOL_LABEL
  9124                                  		; 10/12/2022
  9125 000005DB B10B                    		mov	cl, 11 ; cx = 11		
  9126                                  
  9127                                  		;mov	si, offset vol_no_name ; "NO NAME    "
  9128 000005DD BE[1D05]                		mov	si, vol_no_name	; 19/10/2022
  9129 000005E0 83C74B                  		add	di, 75		; BDS.volid
  9130 000005E3 F3A4                    		rep movsb
  9131                                  		
  9132                                  		; 11/09/2023 (BugFix, DI is not start addr of BDS structure here)
  9133                                  		;;test	byte [es:di+BDS.fatsiz], fbig
  9134                                  		; (MSDOS 5.0 IO.SYS - BIOSCODE:05EFh)
  9135                                  		;test	byte [es:di+1Fh], 40h
  9136                                  
  9137                                  			; ! NOTE - 11/08/2023 - Erdogan Tan (Retro DOS v4.2 IO.SYS bugfix)
  9138                                  			; Microsoft/IBM code has a bug here because the BDS's
  9139                                  			; .volid and .filesys_id fields will be reset
  9140                                  			; (to their default text) according to 'BDS.fatsiz' flags
  9141                                  			; at the BDS offset 31 but current (this) code checks flags
  9142                                  			; at ES:DI+31 while DI points the BDS offset 86!?
  9143                                  			;
  9144                                  			; Correct Code:
  9145                                  			; ;test byte [ES:31],40h or [ES:BDS.fatsiz],fbig
  9146                                  			; 11/09/2023
  9147                                  			; (before 'rep movsb') 'mov al,[es:di+BDS.Fatsiz]' and then
  9148                                  			; (after 'rep movsb') 'test al,fbig' (AL is free/proper to use here)	
  9149                                  			;
  9150                                  			; Same BUG is existing in PCDOS 7.1 IBMBIO.COM - BIOSCODE:06C3h
  9151                                  			; and in Windows ME IO.SYS - BIOSCODE:0E1Ah as 'test byte [es:di+59],20h'
  9152                                  			; (PCDOS 7.1 BUG note: 26/06/2023)
  9153                                  			;
  9154                                  			; (Why this bug did not affect MSDOS and PCDOS 7.x applications:
  9155                                  			; 'clear_ids' is used for floppy disks only and the default
  9156                                  			; option of 'clear_ids' is FAT12 volid and filesys_id text
  9157                                  			; when the flag bit has wrong value for FAT16/40h or FAT32/20h.)
  9158                                  
  9159 000005E5 A840                    		test	al, 40h ; * 
  9160                                  		
  9161                                  		;mov	si, offset fat_16_id ; "FAT16	"
  9162 000005E7 BE[1405]                		mov	si, fat_16_id	; 19/10/2022
  9163 000005EA 7503                    		jnz	short ci_bigfat
  9164                                  		;mov	si, offset fat_12_id ; "FAT12	"
  9165 000005EC BE[0B05]                		mov	si, fat_12_id	 ; 19/10/2022
  9166                                  ci_bigfat:				
  9167                                  		;mov	cx, 8		; size_of_EXT_SYSTEM_ID
  9168                                  		; 10/12/2022
  9169 000005EF B108                    		mov	cl, 8 ; cx = 8 
  9170 000005F1 83C705                  		add	di, 5		; (BDS.filesys_id-BDS.volid)-size_of_EXT_BOOT_VOL_LABEL
  9171                                  					; filesys_id field
  9172 000005F4 F3A4                    		rep movsb
  9173 000005F6 5F                      		pop	di		; restore bds pointer
  9174 000005F7 C3                      		retn
  9175                                  
  9176                                  ; =============== S U B	R O U T	I N E =======================================
  9177                                  
  9178                                  ; 15/10/2022
  9179                                  
  9180                                  ; ---------------------------------------------------------------------------
  9181                                  ;	getbp - return bpb from the drive specified by the bds.
  9182                                  ;	    if the return_fake_bpb flag is set, then it does nothing.
  9183                                  ;	    note that we never come here for fixed disks.
  9184                                  ;	    for all other cases,
  9185                                  ;	      - it reads boot sector to pull out the bpb
  9186                                  ;	      - if no valid bpb is found, it then reads the fat sector,
  9187                                  ;		to get the fat id byte to build the bpb from there.
  9188                                  ;
  9189                                  ;   inputs:	es:di point to correct bds.
  9190                                  ;
  9191                                  ;   outputs:	fills in bpb in current bds if valid bpb or fat id on disk.
  9192                                  ;		carry set, and al=7 if invalid disk.
  9193                                  ;		carry set and error code in al if other error.
  9194                                  ;		if failed to recognize the boot record, then will set the
  9195                                  ;		set_id_flag to 0.
  9196                                  ;		this routine will only work for a floppy diskette.
  9197                                  ;		     for a fixed disk, it will just return.
  9198                                  ;
  9199                                  ;	****** Note: getbp is a clone of getbp which uses the newer
  9200                                  ;	  segment definitions. It should be migrated towards.
  9201                                  ;	   now es:di has the bds, ds: has Bios_Data
  9202                                  ; ---------------------------------------------------------------------------
  9203                                  
  9204                                  GetBp:		; if returning fake bpb then return bpb as is.
  9205                                  		;test	byte [es:di+BDS.flags], return_fake_bpb|fnon_removable		
  9206 000005F8 26F6452305              		test	byte [es:di+23h], 5
  9207 000005FD 7403                    		jz	short getbp1	; getbp1
  9208 000005FF E99500                  		jmp	getret_exit
  9209                                  ; ---------------------------------------------------------------------------
  9210                                  
  9211                                  getbp1:					
  9212 00000602 51                      		push	cx
  9213 00000603 52                      		push	dx
  9214 00000604 53                      		push	bx
  9215                                  
  9216                                  		; attempt to read in boot sector and determine bpb.
  9217                                  		; we assume that the 2.x and greater dos disks all
  9218                                  		; have a valid boot sector.
  9219                                  
  9220 00000605 E8A400                  		call	readbootsec
  9221 00000608 7209                    		jb	short getbp_err_ret_brdg ; carry set if there was error.
  9222 0000060A 09DB                    		or	bx, bx		; bx is	0 if boot sector is valid.
  9223 0000060C 7508                    		jnz	short dofatbpb
  9224 0000060E E8F000                  		call	movbpb		; move bpb into	registers
  9225 00000611 EB57                    		jmp	short Has1
  9226                                  ; ---------------------------------------------------------------------------
  9227                                  
  9228                                  getbp_err_ret_brdg:			
  9229 00000613 E98200                  		jmp	getbp_err_ret
  9230                                  ; ---------------------------------------------------------------------------
  9231                                  
  9232                                  		; we have a 1.x diskette. In this case read in the fat ID byte
  9233                                  		; and fill in bpb from there.
  9234                                  dofatbpb:				
  9235 00000616 E85401                  		call	readfat		; puts media descriptor	byte in	ah
  9236 00000619 72F8                    		jb	short getbp_err_ret_brdg
  9237                                  		;cmp	ds:fhave96, 0	;  changeline support available?
  9238 0000061B 803E[7700]00            		cmp	byte [fhave96], 0 ; 19/10/2022
  9239 00000620 7403                    		jz	short bpb_nochangeline ; brif not
  9240 00000622 E88D12                  		call	hidensity	; may not return! May add sp, 2	and
  9241                                  					; jump to has1!!!!!! or	has720K
  9242                                  bpb_nochangeline:		; test for a valid 3.5" medium			
  9243 00000625 26807D2202              		cmp	byte [es:di+22h], 2	; [es:di+BDS.formfactor]
  9244                                  					; ffSmall
  9245 0000062A 7515                    		jnz	short is_floppy
  9246 0000062C 80FCF9                  		cmp	ah, 0F9h	; is it	a valid	fat id byte for	3.5" ?
  9247 0000062F 7571                    		jnz	short got_unknown_medium
  9248                                  Has720K:				
  9249                                  		;mov	bx, offset sm92 ; pointer to correct bpb
  9250 00000631 BB[DE04]                		mov	bx, sm92	; 19/10/2022
  9251                                  
  9252                                  		; es points to segment of bds. the following should be modified
  9253                                  		; to get spf,csec,spau,spt correctly. it had been wrong if
  9254                                  		; driver.sys is loaded since the bds is inside the driver.sys.
  9255                                  
  9256                                  		; 10/12/2022
  9257                                  		;mov	al, [bx+0]	; [bx+bpbtype.spf]
  9258                                  		; 21/12/2022
  9259 00000634 8A07                    		mov	al, [bx]
  9260 00000636 8B4F03                  		mov	cx, [bx+3]	; [bx+bpbtype.csec]
  9261 00000639 8B5705                  		mov	dx, [bx+5]	; [bx+bpbtype.spau]
  9262 0000063C 8B5F01                  		mov	bx, [bx+1]	; [bx+bpbtype.spt]
  9263                                  		; 19/10/2022 - Temporary !
  9264                                  		;db	8Ah, 87h, 0, 0	; mov al, [bx+0]
  9265                                  		;db	8Bh, 8Fh, 3, 0	; mov cx, [bx+3]
  9266                                  		;db	8Bh, 97h, 5, 0	; mov dx, [bx+5]
  9267                                  		;db	8Bh, 9Fh, 1, 0	; mov bx, [bx+1]	
  9268                                  
  9269 0000063F EB29                    		jmp	short Has1
  9270                                  ; ---------------------------------------------------------------------------
  9271                                  
  9272                                  is_floppy:			; must be a 5.25" floppy if we come here
  9273 00000641 80FCF8                  		cmp	ah, 0F8h	; valid	media??	(0F8h-0FFh)
  9274 00000644 725C                    		jb	short got_unknown_medium
  9275 00000646 B001                    		mov	al, 1		; set number of	fat sectors
  9276 00000648 BB0840                  		mov	bx, 16392	; 64*256+8
  9277                                  					; set dir entries and sector max
  9278 0000064B B94001                  		mov	cx, 320		; 40*8
  9279                                  					; set size of drive
  9280 0000064E BA0101                  		mov	dx, 257		; 01*256+1
  9281                                  					; set head limit and sec/all unit
  9282 00000651 F6C402                  		test	ah, 2		; test for 8 or	9 sector
  9283 00000654 7507                    		jnz	short has8	; nz = has 8 sectors
  9284 00000656 FEC0                    		inc	al		; inc number of	fat sectors
  9285 00000658 FEC3                    		inc	bl		; inc sector max
  9286                                  		;add	cx, 40		; increase size	(to 360)
  9287                                  		; 18/12/2022
  9288 0000065A 80C128                  		add	cl, 40
  9289                                  has8:					
  9290 0000065D F6C401                  		test	ah, 1		; test for 1 or	2 heads
  9291 00000660 7408                    		jz	short Has1	; jz = 1 head
  9292 00000662 01C9                    		add	cx, cx		; double size of disk
  9293 00000664 B770                    		mov	bh, 112		; increase number of directory entries
  9294 00000666 FEC6                    		inc	dh		; inc sec/all unit
  9295 00000668 FEC2                    		inc	dl		; inc head limit
  9296                                  Has1:					
  9297 0000066A 26887508                		mov	[es:di+8], dh	; [es:di+BDS.secperclus]
  9298 0000066E 26887D0C                		mov	[es:di+0Ch], bh	; [es:di+BDS.direntries]
  9299 00000672 26894D0E                		mov	[es:di+0Eh], cx	; [es:di+BDS.totalsecs16]
  9300 00000676 26886510                		mov	[es:di+10h], ah	; [es:di+BDS.media]
  9301 0000067A 26884511                		mov	[es:di+11h], al	; [es:di+BDS.fatsecs]
  9302 0000067E 26885D13                		mov	[es:di+13h], bl	; [es:di+BDS.secpertrack]
  9303 00000682 26885515                		mov	[es:di+15h], dl	; [es:di+BDS.heads]
  9304                                  
  9305                                  		; the BDS_BPB.BPB_HIDDENSECTORS+2 field and the
  9306                                  		; BDS_BPB.BPB_BIGTOTALSECTORS field need to be set
  9307                                  		; to 0 since this code is for floppies
  9308                                  
  9309                                  		; 18/12/2022
  9310                                  		;mov	word [es:di+19h], 0 ; [es:di+BDS.hiddensecs+2]
  9311                                  		;mov	word [es:di+17h], 0 ; [es:di+BDS.hiddensecs]
  9312                                  		;mov	word [es:di+1Dh], 0 ; [es:di+BDS.totalsecs32+2]
  9313                                  		; 18/12/2022
  9314 00000686 29C9                    		sub	cx, cx
  9315 00000688 26894D19                		mov	[es:di+19h], cx ; 0 ; [es:di+BDS.hiddensecs+2]
  9316 0000068C 26894D17                		mov	[es:di+17h], cx ; 0 ; [es:di+BDS.hiddensecs]
  9317 00000690 26894D1D                		mov	[es:di+1Dh], cx ; 0 ; [es:di+BDS.totalsecs32+2]
  9318                                  getret:					
  9319 00000694 5B                      		pop	bx
  9320 00000695 5A                      		pop	dx
  9321 00000696 59                      		pop	cx
  9322                                  getret_exit:				
  9323 00000697 C3                      		retn
  9324                                  ; ---------------------------------------------------------------------------
  9325                                  
  9326                                  getbp_err_ret:	; before doing anything else, set set_id_flag	to 0.			
  9327                                  		;mov	ds:set_id_flag,	0
  9328                                  		; 19/10/2022
  9329 00000698 C606[0A05]00            		mov	byte [set_id_flag], 0
  9330 0000069D E83105                  		call	maperror
  9331 000006A0 EBF2                    		jmp	short getret
  9332                                  ; ---------------------------------------------------------------------------
  9333                                  
  9334                                  		; we have a 3.5" diskette for	which we cannot	build a	bpb.
  9335                                  		; we do	not assume any type of bpb for this medium.
  9336                                  
  9337                                  got_unknown_medium:			
  9338                                  		;mov	ds:set_id_flag,	0 
  9339 000006A2 C606[0A05]00            		mov	byte [set_id_flag], 0
  9340 000006A7 B007                    		mov	al, 7
  9341 000006A9 F9                      		stc
  9342 000006AA EBE8                    		jmp	short getret
  9343                                  
  9344                                  ; =============== S U B	R O U T	I N E =======================================
  9345                                  
  9346                                  ; 15/10/2022 - Retro DOS 4.0 (Modified MSDOS 5.0 IO.SYS)
  9347                                  
  9348                                  ; ----------------------------------------------------------------
  9349                                  ; read in the boot sector. set carry if error in reading sector.
  9350                                  ; bx is set to 1 if the boot sector is invalid, otherwise it is 0.
  9351                                  ;
  9352                                  ;	assumes es:di -> bds, ds-> Bios_Data
  9353                                  ; ----------------------------------------------------------------
  9354                                  
  9355                                  ; 10/03/2019 - Retro DOS v4.0
  9356                                  
  9357                                  readbootsec:	
  9358 000006AC B600                    		mov	dh, 0		; head 0
  9359 000006AE B90100                  		mov	cx, 1		; cylinder 0, sector 1
  9360 000006B1 E8C600                  		call	read_sector
  9361 000006B4 724A                    		jb	short err_ret
  9362 000006B6 31DB                    		xor	bx, bx		; assume valid boot sector
  9363                                  
  9364                                  		; put a sanity check for the boot sector in here to detect
  9365                                  		; boot sectors that do not have valid bpbs. we examine the
  9366                                  		; first two bytes - they must contain a long jump (69h) or a
  9367                                  		; short jump (EBh) followed by a nop (90h), or a short jump
  9368                                  		; (E9h). if this test is passed, we further check by examining
  9369                                  		; the signature at the end of the boot sector for the word
  9370                                  		; AA55h. if the signature is not present, we examine the media
  9371                                  		; descriptor byte to see if it is valid. for dos 3.3, this
  9372                                  		; logic is modified a little bit. we are not going to check
  9373                                  		; signature. instead we are going to sanity check the media
  9374                                  		; byte in bpb regardless of the validity of signature. this is
  9375                                  		; to save the already developed commercial products that have
  9376                                  		; good jump instruction and signature but with the false bpb
  9377                                  		; informations
  9378                                  
  9379                                  ; that will crash the diskette drive operation. (for example, symphony diskette).
  9380                                  
  9381                                  		; 19/10/2022
  9382 000006B8 803E[4E01]69            		cmp	byte [disksector], 69h ; is it a direct jump?
  9383 000006BD 7415                    		jz	short check_bpb_mediabyte ; don't need to find a nop
  9384 000006BF 803E[4E01]E9            		cmp	byte [disksector], 0E9h ; dos 2.0 jump?
  9385 000006C4 740E                    		jz	short check_bpb_mediabyte ; no need for	nop
  9386 000006C6 803E[4E01]EB            		cmp	byte [disksector], 0EBh ; how about a short jump?
  9387 000006CB 7531                    		jnz	short invalidbootsec
  9388 000006CD 803E[5001]90            		cmp	byte [disksector+2], 90h ; is next one a nop?
  9389 000006D2 752A                    		jnz	short invalidbootsec
  9390                                  
  9391                                  ; 15/10/5022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
  9392                                  ;
  9393                                  ;; 10/03/2019
  9394                                  ;; (MSDOS 3.3, MSDISK.ASM, 1988)
  9395                                  ;;
  9396                                  ;; Don't have to perform the following signature check since
  9397                                  ;; we need to check the media byte even with the good signatured diskette.
  9398                                  ;;
  9399                                  ;;check_signature:
  9400                                  ;;		cmp	word [cs:disksector+1FEh],0AA55h ; see if non-ibm
  9401                                  ;;							 ; disk or 1.x media.
  9402                                  ;;		jz	short checksinglesided ; go see if singled sided medium.
  9403                                  ;;					       ; may need some special handling
  9404                                  
  9405                                  ; check for non-ibm disks which do not have the signature AA55h at the
  9406                                  ; end of the boot sector, but still have a valid boot sector. this is done
  9407                                  ; by examining the media descriptor in the boot sector.
  9408                                  
  9409                                  		; 19/10/2022
  9410                                  check_bpb_mediabyte:			
  9411 000006D4 A0[6301]                		mov	al, [disksector+15h]
  9412                                  					; [disksector+EXT_BOOT.BPB+EBPB.MEDIADESCRIPTOR]
  9413 000006D7 24F0                    		and	al, 0F0h
  9414 000006D9 3CF0                    		cmp	al, 0F0h	; allow	for strange media
  9415 000006DB 7521                    		jnz	short invalidbootsec
  9416                                  
  9417                                  ; there were some (apparently a lot of them) diskettes that had been formatted
  9418                                  ; under dos 3.1 and earlier versions which have invalid bpbs in their boot
  9419                                  ; sectors. these are specifically diskettes that were formatted in drives
  9420                                  ; with one head, or whose side 0 was bad. these contain bpbs in the boot
  9421                                  ; sector that have the sec/clus field set to 2 instead of 1, as is standard
  9422                                  ; in dos. in order to support them, we have to introduce a "hack" that will
  9423                                  ; help our build bpb routine to recognise these specific cases, and to
  9424                                  ; set up out copy of the bpb accordingly.
  9425                                  ; we do this by checking to see if the boot sector is off a diskette that
  9426                                  ; is single-sided and is a pre-dos 3.20 diskette. if it is, we set the
  9427                                  ; sec/clus field to 1. if not, we carry on as normal.
  9428                                  
  9429                                  checksinglesided:
  9430 000006DD A0[6301]                		mov	al, [disksector+15h]
  9431 000006E0 3CF0                    		cmp	al, 0F0h
  9432 000006E2 741B                    		jz	short gooddsk
  9433 000006E4 A801                    		test	al, 1
  9434 000006E6 7517                    		jnz	short gooddsk
  9435 000006E8 813E[5601]332E          		cmp	word [disksector+8], 2E33h ; "3."
  9436 000006EE 7507                    		jnz	short mustbeearlier
  9437 000006F0 803E[5801]32            		cmp	byte [disksector+0Ah], 32h ; "2"
  9438 000006F5 7308                    		jnb	short gooddsk
  9439                                  
  9440                                  ; we must have a pre-3.20 diskette. set the sec/clus field to 1
  9441                                  
  9442                                  mustbeearlier:				
  9443 000006F7 C606[5B01]01            		mov	byte [disksector+0Dh], 1
  9444                                  					; [disksector+EXT_BOOT.BPB+EBPB.SECTORSPERCLUSTER]
  9445 000006FC EB01                    		jmp	short gooddsk
  9446                                  ; ---------------------------------------------------------------------------
  9447                                  
  9448                                  invalidbootsec:				
  9449 000006FE 43                      		inc	bx		; indicate that boot sector invalid
  9450                                  		; 10/12/2022
  9451                                  movbpb_ret:
  9452                                  gooddsk:				
  9453 000006FF F8                      		clc
  9454                                  err_ret:
  9455 00000700 C3                      		retn
  9456                                  ; ---------------------------------------------------------------------------
  9457                                  
  9458                                  		; 10/12/2022
  9459                                  ;err_ret:				
  9460                                  		;retn
  9461                                  
  9462                                  ; =============== S U B	R O U T	I N E =======================================
  9463                                  
  9464                                  ; 15/10/2022
  9465                                  ; ---------------------------------------------------------------------------
  9466                                  ; 'movbpb' moves the bpb read from the boot sector into registers for use by
  9467                                  ; getbp routine at has1
  9468                                  ;
  9469                                  ; if the set_id_flag is 1, and if an extended boot record, then set volume
  9470                                  ; serial number, volume label, file system id in bds according to
  9471                                  ; the boot record.  after that, this routine will set the set_id_flag to 2
  9472                                  ; to signal that volume label is set already from the extended boot record
  9473                                  ; (so, don't set it again by calling "set_volume_id" routine which uses
  9474                                  ; the volume label in the root directory.)
  9475                                  ; ---------------------------------------------------------------------------
  9476                                  
  9477                                  ; 10/03/2019 - Retro DOS v4.0
  9478                                  
  9479                                  		; 19/10/2022
  9480                                  movbpb:	
  9481 00000701 8A36[5B01]              		mov	dh, [disksector+0Dh]
  9482                                  					; disksector+EXT_BOOT.BPB+EBPB.SECTORSPERCLUSTER]
  9483                                  					; sectors per unit
  9484 00000705 8A3E[5F01]              		mov	bh, [disksector+11h]
  9485                                  					; [disksector+EXT_BOOT.BPB+EBPB.ROOTENTRIES]
  9486                                  					; number of directory entries
  9487 00000709 8B0E[6101]              		mov	cx, [disksector+13h]
  9488                                  					; [disksector+EXT_BOOT.BPB+EBPB.TOTALSECTORS]
  9489                                  					; size of drive
  9490 0000070D 8A26[6301]              		mov	ah, [disksector+15h]
  9491                                  					; [disksector+EXT_BOOT.BPB+EBPB.MEDIADESCRIPTOR]
  9492                                  					; media	descriptor
  9493 00000711 A0[6401]                		mov	al, [disksector+16h];
  9494                                  					; [disksector+EXT_BOOT.BPB+EBPB.SECTORSPERFAT]
  9495                                  					; number of fat	sectors
  9496 00000714 8A1E[6601]              		mov	bl, [disksector+18h]
  9497                                  					; [disksector+EXT_BOOT.BPB+EBPB.SECTORSPERTRACK]
  9498                                  					; sectors per track
  9499 00000718 8A16[6801]              		mov	dl, [disksector+1Ah]
  9500                                  					; [disksector+EXT_BOOT.BPB+EBPB.HEADS]
  9501                                  					; number of heads
  9502 0000071C 803E[0A05]01            		cmp	byte [set_id_flag], 1 ; called by get_bpb?
  9503 00000721 75DC                    		jnz	short movbpb_ret
  9504 00000723 E81200                  		call	mov_media_ids
  9505 00000726 7205                    		jb	short movbpb_conv ; conventional boot record?
  9506 00000728 C606[0A05]02            		mov	byte [set_id_flag], 2 ; signals that volume id is set
  9507                                  movbpb_conv:				
  9508 0000072D 803E[7700]01            		cmp	byte [fhave96], 1
  9509 00000732 75CB                    		jnz	short movbpb_ret
  9510 00000734 E8D411                  		call	resetchanged	; reset	flags in bds to	not fchanged.
  9511                                  		; 10/12/2022
  9512                                  		; cf = 0
  9513                                  ;movbpb_ret:				
  9514                                  		;clc
  9515 00000737 C3                      		retn
  9516                                  
  9517                                  ; =============== S U B	R O U T	I N E =======================================
  9518                                  
  9519                                  ;copy the boot_serial number, volume id, and filesystem id from the
  9520                                  ;***extended boot record*** in ds:disksector to the bds table pointed
  9521                                  ;by es:di.
  9522                                  
  9523                                  ;in.) es:di -> bds
  9524                                  ;     ds:disksector = valid extended boot record.
  9525                                  ;out.) vol_serial, bds_volid and bds_system_id in bds are set according to
  9526                                  ;      the boot record information.
  9527                                  ;     carry flag set if not an extended bpb.
  9528                                  ;     all registers saved except the flag.
  9529                                  
  9530                                  		; 19/10/2022
  9531                                  mov_media_ids:		
  9532 00000738 803E[7401]29            		cmp	byte [disksector+26h], 29h
  9533                                  					; [disksector+EXT_BOOT.SIG],
  9534                                  					; EXT_BOOT_SIGNATURE
  9535 0000073D 752C                    		jnz	short mmi_not_ext
  9536 0000073F 51                      		push	cx
  9537 00000740 8B0E[7501]              		mov	cx, [disksector+27h]
  9538                                  					; [disksector+EXT_BOOT.SERIAL]
  9539 00000744 26894D57                		mov	[es:di+57h], cx	; [es:di+BDS.vol_serial]
  9540 00000748 8B0E[7701]              		mov	cx, [disksector+29h]
  9541                                  					; [disksector+EXT_BOOT.SERIAL+2]
  9542 0000074C 26894D59                		mov	[es:di+59h], cx	; [es:di+BDS.vol_serial+2]
  9543 00000750 57                      		push	di
  9544 00000751 56                      		push	si
  9545 00000752 B90B00                  		mov	cx, 11		; size_of_EXT_BOOT_VOL_LABEL
  9546 00000755 BE[7901]                		mov	si, disksector+2Bh
  9547                                  		;mov	si, (offset disksector+2Bh) ;
  9548                                  					; disksector+EXT_BOOT.VOL_LABEL
  9549 00000758 83C74B                  		add	di, 75		; BDS.volid
  9550 0000075B F3A4                    		rep movsb
  9551                                  		;mov	cx, 8		; size_of_EXT_SYSTEM_ID
  9552                                  		; 10/12/2022
  9553 0000075D B108                    		mov	cl, 8 ; cx = 8
  9554 0000075F BE[8401]                		mov	si, disksector+36h
  9555                                  		;mov	si, (offset disksector+36h) ; disksector+EXT_BOOT.SYSTEM_ID
  9556 00000762 83C705                  		add	di, 5		; (BDS.filesys_id-BDS.volid)-size_of_EXT_BOOT_VOL_LABEL
  9557 00000765 F3A4                    		rep movsb
  9558 00000767 5E                      		pop	si
  9559 00000768 5F                      		pop	di
  9560 00000769 59                      		pop	cx
  9561                                  		; 10/12/2022
  9562                                  		; cf = 0
  9563                                  		;clc		; this clc is not required (16/06/2019 - Erdogan Tan)
  9564                                  				; (20/09/2022)
  9565 0000076A C3                      		retn
  9566                                  ; ---------------------------------------------------------------------------
  9567                                  
  9568                                  mmi_not_ext:				
  9569 0000076B F9                      		stc
  9570 0000076C C3                      		retn
  9571                                  
  9572                                  ; =============== S U B	R O U T	I N E =======================================
  9573                                  
  9574                                  ; 15/10/2022
  9575                                  ; --------------------------------------------------------------
  9576                                  ; read in the fat sector and get the media byte from it.
  9577                                  ; input : es:di -> bds
  9578                                  ; output:
  9579                                  ;	  carry set if an error occurs, ax contains error code.
  9580                                  ;	  otherwise, ah contains media byte on exit
  9581                                  ; --------------------------------------------------------------
  9582                                  
  9583                                  readfat:	
  9584                                  		;mov	dh, 0
  9585                                  		; 10/12/2022
  9586 0000076D 30F6                    		xor	dh, dh
  9587 0000076F B90200                  		mov	cx, 2		; head 0
  9588                                  					; cylinder 0, sector 2
  9589 00000772 E80500                  		call	read_sector
  9590 00000775 7202                    		jb	short bad_fat_ret
  9591 00000777 8A27                    		mov	ah, [bx]	; media	byte
  9592                                  bad_fat_ret:				
  9593 00000779 C3                      		retn
  9594                                  
  9595                                  ; =============== S U B	R O U T	I N E =======================================
  9596                                  
  9597                                  ; 15/10/2022
  9598                                  
  9599                                  ; ---------------------------------------------------------------------------
  9600                                  ; read a single sector into the temp buffer.
  9601                                  ; perform three retries in case of error.
  9602                                  ;   inputs:	es:[di].bds_drivenum has physical drive to use
  9603                                  ;		cx has sector and cylinder
  9604                                  ;		dh has head
  9605                                  ;		es:di has bds
  9606                                  ;		ds has Bios_Data
  9607                                  ;
  9608                                  ;   outputs:	carry clear
  9609                                  ;		    Bios_Data:bx point to sector
  9610                                  ;		       (note: some callers assume location of buffer)
  9611                                  ;
  9612                                  ;		carry set
  9613                                  ;		    ax has rom error code
  9614                                  ;
  9615                                  ; register bp is preserved.
  9616                                  ; ---------------------------------------------------------------------------
  9617                                  
  9618                                  ; 10/03/2019 - Retro DOS v4.0
  9619                                  
  9620                                  		; 19/10/2022
  9621                                  read_sector:	
  9622 0000077A 55                      		push	bp
  9623 0000077B BD0300                  		mov	bp, 3		; make 3 attempts
  9624 0000077E 268A5504                		mov	dl, [es:di+4]	; [es:di+BDS.drivenum]
  9625 00000782 BB[4E01]                		mov	bx, disksector	; get es:bx to point to	buffer
  9626                                  rd_ret:					
  9627 00000785 06                      		push	es
  9628 00000786 1E                      		push	ds
  9629 00000787 07                      		pop	es
  9630 00000788 B80102                  		mov	ax, 201h
  9631 0000078B CD13                    		int	13h		; DISK - READ SECTORS INTO MEMORY
  9632                                  					; AL = number of sectors to read, CH = track, CL = sector
  9633                                  					; DH = head, DL	= drive, ES:BX -> buffer to fill
  9634                                  					; Return: CF set on error, AH =	status,	AL = number of sectors read
  9635 0000078D 07                      		pop	es
  9636 0000078E 734A                    		jnb	short okret2
  9637                                  rd_rty:					
  9638 00000790 E87604                  		call	again		; reset	disk, decrement	bp, preserve ax
  9639 00000793 7442                    		jz	short err_rd_ret
  9640 00000795 26F6452301              		test	byte [es:di+23h], 1
  9641                                  		;test	byte ptr [es:di+23h], 1	; [es:di+BDS.flags]
  9642                                  					; fnon_removable
  9643 0000079A 75E9                    		jnz	short rd_ret
  9644 0000079C 803E[3806]00            		cmp	byte [media_set_for_format], 0
  9645 000007A1 7510                    		jnz	short rd_skip1_dpt
  9646 000007A3 50                      		push	ax
  9647 000007A4 1E                      		push	ds		; for retry, set the head settle time to 0Fh
  9648 000007A5 C536[2D01]              		lds	si, [dpt]
  9649                                  		;mov	al, [si+9]	; [si+DISK_PARMS.DISK_HEAD_STTL]
  9650                                  		;mov	byte [si+9], 15 ; [si+DISK_PARMS.DISK_HEAD_STTL]
  9651                                  		;			; NORMSETTLE
  9652                                  		; 12/12/2022
  9653 000007A9 B00F                    		mov	al, 15
  9654 000007AB 864409                  		xchg	al, [si+9]
  9655                                  		; 
  9656 000007AE 1F                      		pop	ds
  9657 000007AF A2[2A01]                		mov	[save_head_sttl], al
  9658 000007B2 58                      		pop	ax
  9659                                  rd_skip1_dpt:				
  9660 000007B3 06                      		push	es
  9661 000007B4 1E                      		push	ds
  9662 000007B5 07                      		pop	es
  9663 000007B6 B80102                  		mov	ax, 201h
  9664 000007B9 CD13                    		int	13h		; DISK - READ SECTORS INTO MEMORY
  9665                                  					; AL = number of sectors to read, CH = track, CL = sector
  9666                                  					; DH = head, DL	= drive, ES:BX -> buffer to fill
  9667                                  					; Return: CF set on error, AH =	status,	AL = number of sectors read
  9668 000007BB 07                      		pop	es
  9669 000007BC 9C                      		pushf
  9670 000007BD 803E[3806]00            		cmp	byte [media_set_for_format], 0
  9671 000007C2 750E                    		jnz	short rd_skip2_dpt
  9672 000007C4 50                      		push	ax
  9673 000007C5 A0[2A01]                		mov	al, [save_head_sttl]
  9674 000007C8 1E                      		push	ds
  9675 000007C9 C536[2D01]              		lds	si, [dpt]
  9676 000007CD 884409                  		mov	[si+9],	al	; [si+DISK_PARMS.DISK_HEAD_STTL]
  9677 000007D0 1F                      		pop	ds
  9678 000007D1 58                      		pop	ax
  9679                                  rd_skip2_dpt:				
  9680 000007D2 9D                      		popf
  9681 000007D3 7305                    		jnb	short okret2
  9682 000007D5 EBB9                    		jmp	short rd_rty
  9683                                  ; ---------------------------------------------------------------------------
  9684                                  
  9685                                  err_rd_ret:				
  9686 000007D7 B2FF                    		mov	dl, 0FFh	; make sure we ask rom if media	has changed
  9687                                  					; return error
  9688 000007D9 F9                      		stc
  9689                                  
  9690                                  ; update information pertaining to last drive accessed, time of access, last
  9691                                  ; track accessed in that drive.
  9692                                  
  9693                                  okret2:					
  9694 000007DA 8816[7600]              		mov	[step_drv], dl	; set up for head settle logic in disk
  9695 000007DE 8816[1E01]              		mov	[tim_drv], dl	; save drive last accessed
  9696 000007E2 26886D46                		mov	[es:di+46h], ch	; [es:di+BDS.track]
  9697                                  					; save last track accessed on this drive
  9698                                  					; preserve flags in case error occurred
  9699 000007E6 9C                      		pushf
  9700 000007E7 E8FF03                  		call	set_tim
  9701 000007EA 9D                      		popf			; restore flags
  9702 000007EB 5D                      		pop	bp
  9703 000007EC C3                      		retn
  9704                                  
  9705                                  ;----------------------------------------------------------------------------
  9706                                  ;	disk open/close routines
  9707                                  ;----------------------------------------------------------------------------
  9708                                  
  9709                                  dsk_open:				; 2C7h:80Ah = 70h:2D7Ah
  9710 000007ED 803E[7700]00            		cmp	byte [fhave96], 0
  9711 000007F2 7407                    		jz	short dsk_open_exit ; done if no changeline support
  9712 000007F4 E8D4FC                  		call	SetDrive	; get bds for drive
  9713 000007F7 26FF4520                		inc	word [es:di+20h] ; [es:di+BDS.opcnt]
  9714                                  dsk_open_exit:	
  9715                                  		; 10/12/2022
  9716                                  		; cf = 0			
  9717                                  		;clc		; CF is	already	ZERO here (18/09/2022, MSDOS 5.0 IO.SYS)
  9718                                  				; (19/07/2019 -	Erdogan	Tan - MSDOS 6.0	IO.SYS - retrodos4.s)
  9719 000007FB C3                      		retn
  9720                                  ; ---------------------------------------------------------------------------
  9721                                  
  9722                                  dsk_close:				; 2C7h:81Ah = 70h:2D8Ah
  9723 000007FC 803E[7700]00            		cmp	byte [fhave96], 0
  9724 00000801 740E                    		jz	short exitjx	; done if no changeline	support
  9725 00000803 E8C5FC                  		call	SetDrive	; get bds for drive
  9726 00000806 26837D2000              		cmp	word [es:di+20h], 0 ; [es:di+BDS.opcnt]
  9727 0000080B 7404                    		jz	short exitjx	; watch	out for	wrap
  9728 0000080D 26FF4D20                		dec	word [es:di+20h]
  9729                                  exitjx:					
  9730                                  		; 10/12/2022
  9731                                  		; cf = 0
  9732                                  		;clc		; CF is	already	ZERO here (18/09/2022, MSDOS 5.0 IO.SYS)
  9733                                  				; (19/07/2019 -	Erdogan	Tan - MSDOS 6.0	IO.SYS - retrodos4.s)
  9734 00000811 C3                      		retn
  9735                                  
  9736                                  ;----------------------------------------------------------------------------
  9737                                  ;		disk removable routine
  9738                                  ;----------------------------------------------------------------------------
  9739                                  
  9740                                  		; al is	unit #
  9741                                  dsk_rem:				; 2C7h:831h = 70h:2DA1h
  9742 00000812 E8B6FC                  		call	SetDrive	; get bds for this drive
  9743                                  		;test	byte [es:di+BDS.flags], fnon_removable
  9744 00000815 26F6452301              		test	byte [es:di+23h], 1
  9745                                  		;jnz	short x_bus_exit ; non_rem
  9746 0000081A 7501                    		jnz	short non_rem	; 15/10/2022
  9747                                  		; 10/12/2022
  9748                                  		; cf = 0
  9749                                  		;clc			; CF is already ZERO here
  9750                                  					; 15/10/2022
  9751 0000081C C3                      		retn
  9752                                  ; ---------------------------------------------------------------------------
  9753                                  
  9754                                  non_rem:
  9755                                  x_bus_exit:				
  9756 0000081D B403                    		mov	ah, 3		; 2C7h:83Dh = 0070h:2DADh
  9757                                  					; return busy status
  9758 0000081F F9                      		stc
  9759                                  dsk_ret:				
  9760 00000820 C3                      		retn
  9761                                  
  9762                                  ;----------------------------------------------------------------------------
  9763                                  ;		disk i/o routines
  9764                                  ;----------------------------------------------------------------------------
  9765                                  
  9766                                  dsk_writv:				; 2C7h:841h = 70h:2DB1h
  9767                                  		;mov	word [wrtverify], 103h
  9768                                  		; 19/10/2022
  9769 00000821 C706[2001]0301          		mov	word [rflag], 103h
  9770                                  		;mov	word ptr ds:rflag, 103h	; write	and verify
  9771 00000827 EB06                    		jmp	short dsk_cl
  9772                                  ; ---------------------------------------------------------------------------
  9773                                  
  9774                                  dsk_writ:				; 2C7h:849h = 70h:2DB9h
  9775                                  		;mov	word [wrtverify], 3
  9776                                  		; 19/10/2022
  9777 00000829 C706[2001]0300          		mov	word [rflag], 3
  9778                                  		;mov	word ptr ds:rflag, 3 ; romwrite
  9779                                  
  9780                                  dsk_cl:					
  9781 0000082F E89800                  		call	diskio		; romwrite
  9782                                  ; ---------------------------------------------------------------------------
  9783                                  
  9784                                  dsk_io:					
  9785 00000832 73EC                    		jnb	short dsk_ret
  9786 00000834 E9A0F8                  		jmp	bc_err_cnt
  9787                                  ; ---------------------------------------------------------------------------
  9788                                  
  9789                                  dsk_read:				; ; 2C7h:857h =	70h:2DC7h
  9790 00000837 E88B00                  		call	diskrd
  9791 0000083A EBF6                    		jmp	short dsk_io
  9792                                  
  9793                                  ; =============== S U B	R O U T	I N E =======================================
  9794                                  
  9795                                  ; 15/10/2022
  9796                                  ; 10/03/2019 - Retro DOS v4.0
  9797                                  
  9798                                  ;-----------------------------------------------------------
  9799                                  ; miscellaneous odd jump routines. 
  9800                                  ; moved out of mainline for speed.
  9801                                  
  9802                                  ; if we have a system where we have virtual drives, we need 
  9803                                  ; to prompt the user to place the correct disk in the drive.
  9804                                  ;
  9805                                  ;	assume es:di -> bds, ds:->Bios_Data
  9806                                  ;-----------------------------------------------------------
  9807                                  
  9808                                  		; 19/10/2022
  9809                                  checksingle:		
  9810 0000083C 50                      		push	ax
  9811 0000083D 53                      		push	bx
  9812 0000083E 268B5D23                		mov	bx, [es:di+23h]	; [es:di+BDS.flags]
  9813                                  
  9814                                  ; if hard drive, cannot change disk.
  9815                                  ; if current owner of physical drive, no need to change diskette.
  9816                                  
  9817 00000842 F6C321                  		test	bl, 21h		; fnon_removable|fi_own_physical
  9818 00000845 7573                    		jnz	short singleret
  9819 00000847 F6C310                  		test	bl, 10h		; fi_am_mult
  9820                                  					; is there a drive sharing this	physical drive?
  9821 0000084A 746E                    		jz	short singleret
  9822                                  
  9823                                  
  9824                                  ; look for the previous owner of this physical drive
  9825                                  ; and reset its ownership flag.
  9826                                  
  9827 0000084C 268A4504                		mov	al, [es:di+4]	; [es:di+BDS.drivenum]
  9828                                  					; get physical drive number
  9829 00000850 06                      		push	es		; preserve pointer to current bds
  9830 00000851 57                      		push	di
  9831 00000852 C43E[1901]              		les	di, [start_bds] ; get first bds
  9832                                  scan_list:				
  9833 00000856 26384504                		cmp	[es:di+4], al
  9834 0000085A 7553                    		jnz	short scan_skip	; Not our drive. Try next bds.
  9835 0000085C B320                    		mov	bl, 20h	; ' '   ; fi_own_physical ; test ownership flag
  9836 0000085E 26845D23                		test	[es:di+23h], bl
  9837 00000862 744B                    		jz	short scan_skip	; he doesn't own it either. continue
  9838 00000864 26305D23                		xor	[es:di+23h], bl	; reset	ownership flag
  9839 00000868 5F                      		pop	di		; restore pointer to current bds
  9840 00000869 07                      		pop	es
  9841 0000086A 26085D23                		or	[es:di+23h], bl	; ; set	ownership flag
  9842                                  
  9843                                  ; we examine the fsetowner flag. if it is set, then we are using the code in
  9844                                  ; checksingle to just set the owner of a drive. we must not issue the prompt
  9845                                  ; in this case.
  9846 0000086E 803E[7A00]01            		cmp	byte [fsetowner], 1
  9847 00000873 7517                    		jnz	short not_fsetowner
  9848                                  		;cmp	byte ptr es:[di+4], 0 ;	are we handling	drive number 0 ?
  9849 00000875 26807D0400              		cmp	byte [es:di+4], 0
  9850 0000087A 753E                    		jnz	short singleret
  9851 0000087C 268A4505                		mov	al, [es:di+5]
  9852                                  		;mov	al, es:[di+5]	; [es:di+BDS.drivelet]
  9853                                  					; get the DOS drive letter
  9854 00000880 06                      		push	es
  9855 00000881 8E06[1A00]              		mov	es, [zeroseg]
  9856 00000885 26A20405                		mov	[es:LSTDRV], al
  9857                                  		;mov	es:504h, al	; [es:LSTDRV]
  9858                                  					; set up sdsb
  9859 00000889 07                      		pop	es		; restore bds pointer
  9860 0000088A EB2E                    		jmp	short singleret
  9861                                  ; ---------------------------------------------------------------------------
  9862                                  
  9863                                  ; to support "backward" compatibility with ibm's "single drive status byte"
  9864                                  ; we now check to see if we are in a single drive system and the application
  9865                                  ; has "cleverly" diddled the sdsb
  9866                                  
  9867                                  not_fsetowner:				
  9868 0000088C 803E[7800]02            		cmp	byte [single], 2 ; if (single_drive_system)
  9869 00000891 7517                    		jnz	short ignore_sdsb
  9870 00000893 50                      		push	ax
  9871 00000894 268A4505                		mov	al, [es:di+5]	; if (curr_drv == req_drv)
  9872 00000898 88C4                    		mov	ah, al
  9873 0000089A 06                      		push	es
  9874 0000089B 8E06[1A00]              		mov	es, [zeroseg]
  9875 0000089F 2686060405              		xchg	al, [es:LSTDRV]
  9876                                  		;xchg	al, es:504h	; [es:LSTDRV]
  9877                                  					; then swap(curr_drv,req_drv)
  9878 000008A4 07                      		pop	es
  9879 000008A5 38C4                    		cmp	ah, al		; else
  9880 000008A7 58                      		pop	ax		; swap(curr_drv,req_drv)
  9881 000008A8 7410                    		jz	short singleret	; issue	swap_dsk_msg
  9882                                  ignore_sdsb:				
  9883 000008AA E8800E                  		call	swpdsk
  9884 000008AD EB0B                    		jmp	short singleret
  9885                                  ; ---------------------------------------------------------------------------
  9886                                  
  9887                                  scan_skip:	
  9888 000008AF 26C43D                  		les	di, [es:di]			
  9889                                  		;les	di, es:[di]	; [es:di+BDS.link]
  9890                                  					; go to	next bds
  9891 000008B2 83FFFF                  		cmp	di, 0FFFFh	; end of list?
  9892 000008B5 759F                    		jnz	short scan_list	; ontinue until	hit end	of list
  9893 000008B7 F9                      		stc
  9894 000008B8 5F                      		pop	di		; restore current bds
  9895 000008B9 07                      		pop	es
  9896                                  
  9897                                  singleret:				
  9898 000008BA 5B                      		pop	bx
  9899 000008BB 58                      		pop	ax
  9900 000008BC C3                      		retn
  9901                                  
  9902                                  ; ---------------------------------------------------------------------------
  9903                                  
  9904                                  baddrive:				
  9905 000008BD B008                    		mov	al, 8		; sector not found
  9906 000008BF EB02                    		jmp	short baddrive_ret
  9907                                  ; ---------------------------------------------------------------------------
  9908                                  
  9909                                  unformatteddrive:				
  9910 000008C1 B007                    		mov	al, 7		; unknown media
  9911                                  baddrive_ret:				
  9912 000008C3 F9                      		stc
  9913                                  ; ---------------------------------------------------------------------------
  9914                                  
  9915                                  ioret:		
  9916 000008C4 C3                      		retn
  9917                                  
  9918                                  ; ---------------------------------------------------------------------------
  9919                                  
  9920                                  ; 15/10/52022
  9921                                  
  9922                                  ; ---------------------------------------------------------------------------
  9923                                  ;	disk i/o handler
  9924                                  ;
  9925                                  ;	al = drive number (0-6)
  9926                                  ;	ah = media descriptor
  9927                                  ;	cx = sector count
  9928                                  ;	dx = first sector (low)
  9929                                  ;	[start_sec_h] = first sector (high)  32 bit calculation.
  9930                                  ;	ds = cs
  9931                                  ;	es:di = transfer address
  9932                                  ;	[rflag]=operation (2=read, 3=write)
  9933                                  ;	[verify]=1 for verify after write
  9934                                  ;
  9935                                  ;	if successful carry flag = 0
  9936                                  ;	  else cf=1 and al contains error code
  9937                                  ; ---------------------------------------------------------------------------
  9938                                  
  9939                                  diskrd:	
  9940                                  		;mov	ds:rflag, 2	; romread
  9941                                  		; 19/10/2022
  9942 000008C5 C606[2001]02            		mov	byte [rflag], 2 ; romread
  9943                                  
  9944                                  ; =============== S U B	R O U T	I N E =======================================
  9945                                  
  9946                                  		; 19/10/2022
  9947                                  diskio:
  9948 000008CA 89FB                    		mov	bx, di		; es:bx	= transfer address
  9949 000008CC 8C06[3705]              		mov	[xfer_seg], es	; save transfer	segment
  9950 000008D0 E8F8FB                  		call	SetDrive
  9951 000008D3 268A4510                		mov	al, [es:di+10h]	; [es:di+BDS.media]
  9952 000008D7 A2[1F01]                		mov	[medbyt], al
  9953                                  		;jcxz	short ioret
  9954 000008DA E3E8                    		jcxz	ioret
  9955                                  
  9956                                  ; see if the media is formatted or not by checking the flags field in
  9957                                  ; in the bds. if it is unformatted we cannot allow i/o, so we should
  9958                                  ; go to the error exit at label unformatteddrive.
  9959                                  
  9960 000008DC 26F6452402              		test	byte [es:di+24h], 2
  9961                                  		;test	byte ptr es:[di+24h], 2	; [es:di+BDS.flags+1]
  9962                                  					; unformatted_media
  9963 000008E1 75DE                    		jnz	short unformatteddrive
  9964 000008E3 890E[2201]              		mov	[seccnt], cx	; save sector count
  9965 000008E7 8926[3501]              		mov	[spsav], sp	; save sp
  9966                                  
  9967                                  ; ensure that we are trying to access valid sectors on the drive
  9968                                  
  9969 000008EB 89D0                    		mov	ax, dx
  9970 000008ED 31F6                    		xor	si, si
  9971 000008EF 01CA                    		add	dx, cx
  9972 000008F1 83D600                  		adc	si, 0
  9973 000008F4 26837D0E00              		cmp	word [es:di+0Eh], 0 ; [es:di+BDS.totalsecs16]
  9974                                  					; > 32 bit sector ?
  9975 000008F9 740D                    		jz	short sanity32
  9976 000008FB 83FE00                  		cmp	si, 0
  9977 000008FE 75BD                    		jnz	short baddrive
  9978 00000900 263B550E                		cmp	dx, [es:di+0Eh]	; [es:di+BDS.totalsecs16]
  9979 00000904 77B7                    		ja	short baddrive
  9980 00000906 EB12                    		jmp	short sanityok
  9981                                  ; ---------------------------------------------------------------------------
  9982                                  
  9983                                  sanity32:				
  9984 00000908 0336[2B05]              		add	si, [start_sec_h]
  9985 0000090C 263B751D                		cmp	si, [es:di+1Dh]	; [es:di+BDS.totalsecs32+2]
  9986 00000910 7208                    		jb	short sanityok
  9987 00000912 77A9                    		ja	short baddrive
  9988 00000914 263B551B                		cmp	dx, [es:di+1Bh]	; [es:di+BDS.totalsecs32]
  9989 00000918 77A3                    		ja	short baddrive
  9990                                  
  9991                                  sanityok:				
  9992 0000091A 8B16[2B05]              		mov	dx, [start_sec_h]
  9993 0000091E 26034517                		add	ax, [es:di+17h]	; [es:di+BDS.hiddensecs]
  9994 00000922 26135519                		adc	dx, [es:di+19h]	; [es:di+BDS.hiddensecs+2]
  9995                                  
  9996                                  ; now dx;ax have the physical first sector.
  9997                                  ; since the following procedures is going to destroy ax, let's
  9998                                  ; save it temporarily to saved_word.
  9999                                  
 10000 00000926 A3[2D05]                		mov	[saved_word], ax ; save the sector number (low)
 10001                                  
 10002                                  ; set up pointer to disk base table in [dpt]. we cannot assume that iosetup
 10003                                  ; will do it because we will skip the set up stuff with hard disks.
 10004                                  
 10005 00000929 06                      		push	es
 10006 0000092A 8E06[1A00]              		mov	es, [zeroseg]
 10007 0000092E 26C4367800              		les	si, [es:DSKADR]
 10008                                  		;les	si, es:78h	; [es:DSKADR]
 10009                                  					; current disk parm table
 10010 00000933 8936[2D01]              		mov	[dpt], si
 10011 00000937 8C06[2F01]              		mov	[dpt+2], es
 10012 0000093B 07                      		pop	es
 10013 0000093C 26F6452301              		test	byte [es:di+23h], 1 ; [es:di+BDS.flags]
 10014                                  					; fnon_removable
 10015 00000941 7510                    		jnz	short skip_setup
 10016 00000943 E8F6FE                  		call	checksingle
 10017                                  
 10018                                  ; check to see if we have previously noted a change line. the routine
 10019                                  ; returns if everything is ok. otherwise, it pops off the stack and returns
 10020                                  ; the proper error code.
 10021                                  
 10022 00000946 803E[7700]00            		cmp	byte [fhave96], 0 ; do we have changeline support?
 10023 0000094B 7403                    		jz	short diskio_nochangeline ; brif not
 10024 0000094D E8AB0E                  		call	checklatchio	; will do a sneaky pop stack return
 10025                                  					; if a disk error occurs
 10026                                  diskio_nochangeline:			
 10027 00000950 E84700                  		call	iosetup		; set up tables	and variables for i/o
 10028                                  
 10029                                  ; now the settle values are correct for the following code
 10030                                  
 10031                                  skip_setup:
 10032                                  
 10033                                  ; 32 bit sector calculation.
 10034                                  ; dx:[saved_word] = starting sector number.
 10035                                  				
 10036 00000953 89D0                    		mov	ax, dx
 10037 00000955 31D2                    		xor	dx, dx
 10038 00000957 26F77513                		div	word [es:di+13h] ; [es:di+BDS.secpertrack]
 10039                                  					 ; divide by sec per track
 10040 0000095B A3[2905]                		mov	[temp_h], ax
 10041 0000095E A1[2D05]                		mov	ax, [saved_word]
 10042 00000961 26F77513                		div	word [es:di+13h] ; [es:di+BDS.secpertrack]
 10043                                  					; now, [temp_h]:ax = track #, dx = sector
 10044                                  		;inc	dl		; sector number	is 1 based.
 10045                                  		; 18/12/2022
 10046 00000965 42                      		inc	dx
 10047 00000966 8816[3101]              		mov	[cursec], dl	; save current sector
 10048 0000096A 268B4D15                		mov	cx, [es:di+15h]	; es:di+BDS.heads]
 10049                                  					; get number of	heads
 10050 0000096E 50                      		push	ax
 10051 0000096F 31D2                    		xor	dx, dx
 10052 00000971 A1[2905]                		mov	ax, [temp_h]	; divide tracks	by heads per cylinder
 10053 00000974 F7F1                    		div	cx
 10054 00000976 A3[2905]                		mov	[temp_h], ax
 10055 00000979 58                      		pop	ax
 10056 0000097A F7F1                    		div	cx		; now, [temp_h]:ax = cylinder #, dx = head
 10057 0000097C 833E[2905]00            		cmp	word [temp_h], 0
 10058 00000981 7714                    		ja	short baddrive_brdg
 10059 00000983 3D0004                  		cmp	ax, 1024	; 2^10 currently maxium	for track #.
 10060 00000986 770F                    		ja	short baddrive_brdg
 10061 00000988 8816[3201]              		mov	[curhd], dl	; save current head
 10062 0000098C A3[3301]                		mov	[curtrk], ax	; save current track
 10063                                  
 10064                                  ; we are now set up for the i/o. normally, we consider the dma boundary
 10065                                  ; violations here. not true. we perform the operation as if everything is
 10066                                  ; symmetric; let the int 13 handler worry about the dma violations.
 10067                                  
 10068 0000098F A1[2201]                		mov	ax, [seccnt]
 10069 00000992 E88400                  		call	block		; (cas - call/ret)
 10070                                  		;call	done
 10071                                  		;retn
 10072                                  		; 18/12/2022
 10073 00000995 EB4B                    		jmp	done
 10074                                  
 10075                                  ; ---------------------------------------------------------------------------
 10076                                  
 10077                                  baddrive_brdg:				
 10078 00000997 E923FF                  		jmp	baddrive
 10079                                  
 10080                                  ; =============== S U B	R O U T	I N E =======================================
 10081                                  
 10082                                  ;--------------------------------------------------------------
 10083                                  ; set the drive-last-accessed flag for diskette only. 
 10084                                  ; we know that the hard disk will not be removed.
 10085                                  ; es:di -> current bds.
 10086                                  ; ds -> Bios_Data
 10087                                  ; ax,cx,si are destroyed.
 10088                                  ;--------------------------------------------------------------
 10089                                  
 10090                                  		; 19/10/2022
 10091                                  iosetup:	
 10092 0000099A 268A4504                		mov	al, [es:di+4]	; [es:di+BDS.drivenum]
 10093 0000099E A2[1E01]                		mov	[tim_drv], al	; save drive letter
 10094                                  
 10095                                  ; determine proper head settle values
 10096                                  
 10097 000009A1 803E[3806]00            		cmp	byte [media_set_for_format], 0
 10098 000009A6 7539                    		jnz	short skip_dpt_setting
 10099 000009A8 A0[2C01]                		mov	al, [eot]	; fetch	up eot before changing ds
 10100 000009AB 1E                      		push	ds
 10101 000009AC C536[2D01]              		lds	si, [dpt]	; get pointer to disk base table
 10102 000009B0 884404                  		mov	[si+4],	al
 10103 000009B3 8A440A                  		mov	al, [si+10]	; [si+DISK_PARMS.DISK_MOTOR_STRT]
 10104 000009B6 8A6404                  		mov	ah, [si+4]	; [si+DISK_PARMS.DISK_EOT]
 10105 000009B9 1F                      		pop	ds
 10106 000009BA A2[2601]                		mov	[motorstartup], al
 10107 000009BD 8826[2B01]              		mov	[save_eot], ah
 10108                                  
 10109                                  ; for 3.5" drives, both external as well as on the k09, we need to set the
 10110                                  ; motor start time to 4. this checking for every i/o is going to affect
 10111                                  ; performance across the board, but is necessary!!
 10112                                  
 10113 000009C1 1E                      		push	ds
 10114 000009C2 C536[2D01]              		lds	si, [dpt]	; get pointer to disk base table
 10115 000009C6 26807D2202              		cmp	byte [es:di+22h], 2 ; [es:di+BDS.formfactor]
 10116                                  					; ffSmall
 10117 000009CB 7505                    		jnz	short motor_start_ok
 10118 000009CD B004                    		mov	al, 4
 10119 000009CF 86440A                  		xchg	al, [si+10]	; [si+DISK_PARMS.DISK_MOTOR_STRT]
 10120                                  motor_start_ok:
 10121                                  
 10122                                  ; ds:si now points to disk parameter table.
 10123                                  ; get current settle and set fast settle
 10124                                  				
 10125                                  		;xor	al, al
 10126                                  		;inc	al		; ibm wants fast settle	to be 1
 10127                                  		; 18/12/2022
 10128 000009D2 31C0                    		xor	ax, ax
 10129 000009D4 40                      		inc	ax
 10130 000009D5 864409                  		xchg	al, [si+9]	; [si+DISK_PARMS.DISK_HEAD_STTL]
 10131                                  					; get settle and set up	for fast
 10132 000009D8 1F                      		pop	ds
 10133 000009D9 A2[2701]                		mov	[settlecurrent], al
 10134 000009DC B00F                    		mov	al, 15		; NORMSETTLE
 10135                                  					; someone has diddled the settle
 10136 000009DE A2[2801]                		mov	[settleslow], al
 10137                                  skip_dpt_setting:			
 10138 000009E1 C3                      		retn
 10139                                  
 10140                                  ; =============== S U B	R O U T	I N E =======================================
 10141                                  
 10142                                  ;--------------------------------------------------------------
 10143                                  ; set time of last access, and reset default values in the dpt.
 10144                                  ;
 10145                                  ;	  note: trashes (at least) si
 10146                                  ;--------------------------------------------------------------
 10147                                  
 10148                                  		; 19/10/2022
 10149                                  done:
 10150 000009E2 26F6452301              		test	byte [es:di+23h], 1 ; [es:di+BDS.flags]
 10151                                  					; fnon_removable
 10152 000009E7 752F                    		jnz	short ddbx	; do not set for non-removable media
 10153 000009E9 E8FD01                  		call	set_tim
 10154                                  ;diddleback:
 10155                                  ; 09/12/2022
 10156                                  diddle_back:				
 10157 000009EC 9C                      		pushf
 10158 000009ED 803E[3806]00            		cmp	byte [media_set_for_format], 0
 10159 000009F2 7523                    		jnz	short nodiddleback
 10160 000009F4 50                      		push	ax
 10161 000009F5 06                      		push	es
 10162 000009F6 C436[2D01]              		les	si, [dpt]
 10163 000009FA A0[2B01]                		mov	al, [save_eot]
 10164 000009FD 26884404                		mov	[es:si+4], al	; [es:si+DISK_PARMS.DISK_EOT]
 10165 00000A01 A0[2701]                		mov	al, [settlecurrent]
 10166 00000A04 8A26[2601]              		mov	ah, [motorstartup]
 10167 00000A08 26884409                		mov	[es:si+9], al	; [es:si+DISK_PARMS.DISK_HEAD_STTL]
 10168 00000A0C 26C6440302              		mov	byte [es:si+3], 2 ; [es:si+DISK_PARMS.DISK_SECTOR_SIZ]
 10169 00000A11 2688640A                		mov	[es:si+0Ah], ah	; [es:si+DISK_PARMS.DISK_MOTOR_STRT]
 10170 00000A15 07                      		pop	es
 10171 00000A16 58                      		pop	ax
 10172                                  nodiddleback:				
 10173 00000A17 9D                      		popf
 10174                                  ddbx:					
 10175 00000A18 C3                      		retn
 10176                                  
 10177                                  ; =============== S U B	R O U T	I N E =======================================
 10178                                  
 10179                                  ;--------------------------------------------------------------
 10180                                  ;read the number of sectors specified in ax, 
 10181                                  ;handling track boundaries
 10182                                  ;es:di -> bds for this drive
 10183                                  ;--------------------------------------------------------------
 10184                                  
 10185                                  		 ; 19/10/2022
 10186                                  block:	
 10187 00000A19 09C0                    		or	ax, ax
 10188 00000A1B 74FB                    		jz	short ddbx
 10189 00000A1D 26F6452301              		test	byte [es:di+23h], 1 ; [es:di+BDS.flags]
 10190                                  					; fnon_removable
 10191 00000A22 740D                    		jz	short block_floppy ;
 10192                                  
 10193                                  ; check	to see if multi	track operation	is allowed. if not
 10194                                  ; we have to go	to the block_floppy below to break up the operation.
 10195                                  
 10196 00000A24 F606[2F05]80            		test	byte [multrk_flag], 80h
 10197                                  		;test	byte ptr ds:multrk_flag, 80h ; multrk_on
 10198 00000A29 7406                    		jz	short block_floppy
 10199 00000A2B E82900                  		call	Disk
 10200 00000A2E 31C0                    		xor	ax, ax
 10201 00000A30 C3                      		retn
 10202                                  ; ---------------------------------------------------------------------------
 10203                                  
 10204                                  block_floppy:
 10205                                  
 10206                                  ; read at most 1 track worth. perform minimization at sector / track
 10207                                  				
 10208 00000A31 268A4D13                		mov	cl, [es:di+19]	; [es:di+BDS.secpertrack]
 10209 00000A35 FEC1                    		inc	cl
 10210 00000A37 2A0E[3101]              		sub	cl, [cursec]
 10211 00000A3B 30ED                    		xor	ch, ch
 10212 00000A3D 39C8                    		cmp	ax, cx
 10213 00000A3F 7302                    		jnb	short gotmin
 10214 00000A41 89C1                    		mov	cx, ax
 10215                                  
 10216                                  gotmin:
 10217                                  
 10218                                  ; ax is the requested number of sectors to read
 10219                                  ; cx is the number that we can do on this track
 10220                                  					
 10221 00000A43 50                      		push	ax
 10222 00000A44 51                      		push	cx
 10223 00000A45 89C8                    		mov	ax, cx
 10224 00000A47 E80D00                  		call	Disk
 10225 00000A4A 59                      		pop	cx
 10226 00000A4B 58                      		pop	ax
 10227                                  
 10228                                  ; cx is the number of sectors just transferred
 10229                                  
 10230 00000A4C 29C8                    		sub	ax, cx		; reduce sectors-remaining by last i/o
 10231 00000A4E D0E1                    		shl	cl, 1
 10232 00000A50 00CF                    		add	bh, cl		; adjust transfer address
 10233 00000A52 EBC5                    		jmp	short block
 10234                                  dskerr_brdg:				
 10235 00000A54 E9EC00                  		jmp	dskerr
 10236                                  
 10237                                  ; =============== S U B	R O U T	I N E =======================================
 10238                                  
 10239                                  ; 15/10/2022
 10240                                  
 10241                                  ;--------------------------------------------------------------
 10242                                  ;perform disk i/o with retries
 10243                                  ; al = number of sectors (1-8, all on one track)
 10244                                  ; es:di point to drive parameters
 10245                                  ; xfer_seg:bx = transfer address 
 10246                                  ;		(must not cross a 64k physical boundary)
 10247                                  ; [rflag] = 2 if read, 3 if write
 10248                                  ; [verify] = 0 for normal, 1 for verify after write
 10249                                  ;--------------------------------------------------------------
 10250                                  
 10251                                  		 ; 19/10/2022
 10252                                  Disk:
 10253                                  
 10254                                  ; Check for hard disk format and
 10255                                  ; if TRUE then set max error count to 2
 10256                                  
 10257 00000A57 BD0500                  		mov	bp, 5		; MAXERR
 10258                                  					; set up retry count
 10259 00000A5A 26F6452301              		test	byte [es:di+23h], 1	;
 10260                                  					; [es:di+BDS.flags], fnon_removable
 10261 00000A5F 7408                    		jz	short GetRdWrInd
 10262 00000A61 80FC04                  		cmp	ah, 4		; romverify ; Is this a	track verify?
 10263 00000A64 7403                    		jz	short GetRdWrInd
 10264 00000A66 BD0200                  		mov	bp, 2		; This is not verify so only 1 retry
 10265                                  GetRdWrInd:				
 10266 00000A69 892E[3205]              		mov	[vretry_cnt], bp ; verify op. retry cnt for write-verify
 10267 00000A6D 892E[3405]              		mov	[soft_ecc_cnt], bp ; soft ecc error retry count.
 10268 00000A71 8A26[2001]              		mov	ah, [rflag]	; get read/write indicator
 10269                                  ;retry:
 10270                                  ; 09/12/2022
 10271                                  _retry:					
 10272 00000A75 50                      		push	ax
 10273 00000A76 8B16[3301]              		mov	dx, [curtrk]
 10274 00000A7A 26F6452301              		test	byte [es:di+23h], 1
 10275 00000A7F 740B                    		jz	short disk_not_mini
 10276 00000A81 26837D4701              		cmp	word [es:di+47h], 1 ; [es:di+BDS.bdsm_ismini]
 10277                                  					; is this a mini disk? ((logical dos partition))
 10278 00000A86 7504                    		jnz	short disk_not_mini ; no. continue to next.
 10279 00000A88 26035549                		add	dx, [es:di+49h]	; [es:di+BDS.bdsm_hidden_trks]
 10280                                  					; add hidden trks.
 10281                                  disk_not_mini:				
 10282 00000A8C D0CE                    		ror	dh, 1
 10283 00000A8E D0CE                    		ror	dh, 1
 10284 00000A90 0A36[3101]              		or	dh, [cursec]
 10285 00000A94 89D1                    		mov	cx, dx
 10286 00000A96 86E9                    		xchg	ch, cl		;  cl =	sector,	ch = cylinder
 10287 00000A98 8A36[3201]              		mov	dh, [curhd]	; load current head number and
 10288 00000A9C 268A5504                		mov	dl, [es:di+4]	; physical drive number
 10289                                  					; [es:di+BDS.drivenum]
 10290 00000AA0 26807D2205              		cmp	byte [es:di+22h], 5 ; [es:di+BDS.formfactor], ffHardFile
 10291 00000AA5 7413                    		jz	short do_fast	; hard files use fast speed
 10292                                  
 10293                                  ; if we have [step_drv] set to -1, we use the slow settle time.
 10294                                  ; this helps when we have just done a reset disk operation and the head has
 10295                                  ; been moved to another cylinder - the problem crops up with 3.5" drives.
 10296                                  
 10297 00000AA7 803E[7600]FF            		cmp	byte [step_drv], 0FFh ; -1
 10298 00000AAC 740A                    		jz	short do_writej
 10299 00000AAE 80FC02                  		cmp	ah, 2		; romread
 10300 00000AB1 7407                    		jz	short do_fast
 10301 00000AB3 80FC04                  		cmp	ah, 4		; romverify
 10302 00000AB6 7402                    		jz	short do_fast
 10303                                  do_writej:	
 10304                                  
 10305                                  ; reads always fast, unless we have just done a disk reset operation
 10306                                  			
 10307 00000AB8 EB56                    		jmp	short do_write	; reads	always fast
 10308                                  ; ---------------------------------------------------------------------------
 10309                                  
 10310                                  do_fast:				
 10311 00000ABA E8FC00                  		call	fastspeed	; change settle	mode
 10312                                  
 10313                                  testerr:				
 10314 00000ABD 7295                    		jb	short dskerr_brdg
 10315                                  
 10316                                  ; set drive and track of last access
 10317                                  
 10318 00000ABF 8816[7600]              		mov	[step_drv], dl
 10319 00000AC3 26886D46                		mov	[es:di+46h], ch	; [es:di+BDS.track]
 10320                                  no_set:
 10321                                  		;cmp	word [wrtverify], 103h
 10322 00000AC7 813E[2001]0301          		cmp	word [rflag], 103h ; check for write and verify
 10323 00000ACD 7452                    		jz	short doverify
 10324                                  noverify:				
 10325 00000ACF 58                      		pop	ax
 10326                                  
 10327                                  ; check the flags word in the bds to see if the drive is non removable
 10328                                  ; if not we needn't do anything special
 10329                                  ; if it is a hard disk then check to see if multi-track operation
 10330                                  ; is specified. if specified we don't have to calculate for the next
 10331                                  ; track since we are already done. so we can go to the exit of this routine.
 10332                                  
 10333 00000AD0 26F6452301              		test	byte [es:di+23h], 1 ; [es:di+BDS.flags]
 10334                                  					; fnon_removable
 10335 00000AD5 7407                    		jz	short its_removable
 10336 00000AD7 F606[2F05]80            		test	byte [multrk_flag], 80h ; multrk_on
 10337 00000ADC 7530                    		jnz	short disk_ret
 10338                                  its_removable:				
 10339 00000ADE 80E13F                  		and	cl, 3Fh		; eliminate cylinder bits from sector
 10340 00000AE1 30E4                    		xor	ah, ah
 10341 00000AE3 2906[2201]              		sub	[seccnt], ax	; reduce count of sectors to go	next sector
 10342 00000AE7 00C1                    		add	cl, al
 10343 00000AE9 880E[3101]              		mov	[cursec], cl
 10344 00000AED 263A4D13                		cmp	cl, [es:di+13h]	; [es:di+BDS.secpertrack]
 10345                                  					; see if sector/track limit reached
 10346 00000AF1 761B                    		jbe	short disk_ret
 10347 00000AF3 C606[3101]01            		mov	byte [cursec], 1 ; start with first sector of next track
 10348 00000AF8 8A36[3201]              		mov	dh, [curhd]
 10349 00000AFC FEC6                    		inc	dh
 10350 00000AFE 263A7515                		cmp	dh, [es:di+15h]	; [es:di+BDS.heads]
 10351 00000B02 7206                    		jb	short noxor
 10352 00000B04 30F6                    		xor	dh, dh
 10353 00000B06 FF06[3301]              		inc	word [curtrk]
 10354                                  noxor:					
 10355 00000B0A 8836[3201]              		mov	[curhd], dh
 10356                                  disk_ret:				
 10357 00000B0E F8                      		clc
 10358 00000B0F C3                      		retn
 10359                                  ; ---------------------------------------------------------------------------
 10360                                  
 10361                                  ; 15/10/2022
 10362                                  
 10363                                  ;--------------------------------------------------------------
 10364                                  ; the request is for write. determine if we are talking about
 10365                                  ; the same track and drive. if so, use the fast speed.
 10366                                  ;--------------------------------------------------------------
 10367                                  
 10368                                  do_write:				
 10369 00000B10 3A16[7600]              		cmp	dl, [step_drv]
 10370 00000B14 7506                    		jnz	short do_norm	; we have changed drives
 10371 00000B16 263A6D46                		cmp	ch, [es:di+46h]	; [es:di+BDS.track]
 10372 00000B1A 749E                    		jz	short do_fast	; we are still on the same track
 10373                                  
 10374                                  do_norm:				
 10375 00000B1C E87500                  		call	normspeed
 10376 00000B1F EB9C                    		jmp	short testerr
 10377                                  ; ---------------------------------------------------------------------------
 10378                                  
 10379                                  ;--------------------------------------------------------------
 10380                                  ; we have a verify request also. get state info and go verify
 10381                                  ;--------------------------------------------------------------
 10382                                  
 10383                                  doverify:				
 10384 00000B21 58                      		pop	ax
 10385 00000B22 50                      		push	ax
 10386 00000B23 B404                    		mov	ah, 4
 10387 00000B25 E89100                  		call	fastspeed
 10388 00000B28 73A5                    		jnb	short noverify
 10389                                  
 10390                                  ; check the error returned in ah to see if it is a soft ecc error.
 10391                                  ; if it is not we needn't do anything special. if it is a soft
 10392                                  ; ecc error then decrement the soft_ecc_cnt error retry count. if
 10393                                  ; this retry count becomes 0 then we just ignore the error and go to
 10394                                  ; no_verify but if we can still try then we call the routine to reset
 10395                                  ; the disk and go to dskerr1 to retry the operation.
 10396                                  
 10397 00000B2A 80FC11                  		cmp	ah, 11h		; soft ecc error ?
 10398 00000B2D 750B                    		jnz	short not_softecc_err
 10399 00000B2F FF0E[3405]              		dec	word [soft_ecc_cnt]
 10400 00000B33 749A                    		jz	short noverify	; no more retry
 10401 00000B35 E84405                  		call	ResetDisk	; reset	disk
 10402 00000B38 EB3E                    		jmp	short dskerr1	; retry
 10403                                  ; ---------------------------------------------------------------------------
 10404                                  
 10405                                  not_softecc_err:			; other error.			
 10406 00000B3A E83F05                  		call	ResetDisk
 10407 00000B3D FF0E[3205]              		dec	word [vretry_cnt]
 10408 00000B41 EB1C                    		jmp	short dskerr0
 10409                                  ; ---------------------------------------------------------------------------
 10410                                  
 10411                                  ;--------------------------------------------------------------
 10412                                  ; need to special case the change-line error ah=06h.
 10413                                  ; if we get this, we need to return it.
 10414                                  ;--------------------------------------------------------------
 10415                                  
 10416                                  dskerr:					
 10417 00000B43 803E[7700]00            		cmp	byte [fhave96], 0	; do we	have changeline	support?
 10418 00000B48 7403                    		jz	short dskerr_nochangeline ; brif not
 10419 00000B4A E8220D                  		call	checkio
 10420                                  dskerr_nochangeline:			
 10421 00000B4D 803E[3605]01            		cmp	byte [multitrk_format_flag], 1 ; multi trk format request?
 10422 00000B52 7508                    		jnz	short dochkagain ; no more retry.
 10423 00000B54 BD0100                  		mov	bp, 1
 10424 00000B57 C606[3605]00            		mov	byte [multitrk_format_flag], 0 ; clear the flag.
 10425                                  dochkagain:				
 10426 00000B5C E8AA00                  		call	again
 10427                                  dskerr0:				
 10428 00000B5F 7420                    		jz	short harderr
 10429 00000B61 26F6452301              		test	byte [es:di+23h], 1 ; [es:di+BDS.flags]
 10430                                  					; fnon_removable
 10431 00000B66 7505                    		jnz	short skip_timeout_chk
 10432 00000B68 80FC80                  		cmp	ah, 80h		; timeout?
 10433 00000B6B 7414                    		jz	short harderr
 10434                                  skip_timeout_chk:			
 10435 00000B6D 80FCCC                  		cmp	ah, 0CCh	; write	fault error?
 10436 00000B70 740A                    		jz	short write_fault_err ;	then, don't retry.
 10437 00000B72 C706[3405]0500          		mov	word [soft_ecc_cnt], 5 ; MAXERR
 10438                                  					; set soft_ecc_cnt back	to maxerr
 10439                                  dskerr1:				
 10440 00000B78 58                      		pop	ax		; restore sector count
 10441                                  		;jmp	retry
 10442                                  		; 09/12/2022
 10443 00000B79 E9F9FE                  		jmp	_retry
 10444                                  ; ---------------------------------------------------------------------------
 10445                                  
 10446                                  write_fault_err:			
 10447 00000B7C BD0100                  		mov	bp, 1		; just retry only once
 10448                                  					; for write fault error.
 10449 00000B7F EBF7                    		jmp	short dskerr1
 10450                                  
 10451                                  		; fall into harderr
 10452                                  ; ---------------------------------------------------------------------------
 10453                                  
 10454                                  ; entry point for routines that call maperror themselves
 10455                                  
 10456                                  harderr:				
 10457 00000B81 E84D00                  		call	maperror
 10458                                  harderr2:				
 10459 00000B84 C606[1E01]FF            		mov	byte [tim_drv], 0FFh
 10460                                  					; force a media check through rom
 10461 00000B89 8B0E[2201]              		mov	cx, [seccnt]	; get count of sectors to go
 10462 00000B8D 8B26[3501]              		mov	sp, [spsav]	; recover entry	stack pointer
 10463                                  
 10464                                  ; since we are performing a non-local goto, restore the disk parameters
 10465                                  
 10466                                  		;jmp	diddleback
 10467                                  		; 09/12/2022
 10468 00000B91 E958FE                  		jmp	diddle_back
 10469                                  
 10470                                  ; =============== S U B	R O U T	I N E =======================================
 10471                                  
 10472                                  ; change settle value from settlecurrent to whatever is appropriate
 10473                                  ; note that this routine is never called for a fixed disk.
 10474                                  
 10475                                  		; 19/10/2022
 10476                                  normspeed:
 10477 00000B94 803E[3806]00            		cmp	byte [media_set_for_format], 0
 10478 00000B99 751E                    		jnz	short fastspeed
 10479 00000B9B 06                      		push	es
 10480 00000B9C 50                      		push	ax
 10481 00000B9D A0[2801]                		mov	al, [settleslow]
 10482 00000BA0 C436[2D01]              		les	si, [dpt]	; current disk parm table
 10483 00000BA4 26884409                		mov	[es:si+9], al	; [es:si+DISK_PARMS.DISK_HEAD_STTL]
 10484 00000BA8 58                      		pop	ax
 10485 00000BA9 07                      		pop	es
 10486 00000BAA E80C00                  		call	fastspeed
 10487 00000BAD 06                      		push	es
 10488 00000BAE C436[2D01]              		les	si, [dpt]
 10489 00000BB2 26C6440901              		mov	byte [es:si+9], 1 ; [es:si+DISK_PARMS.DISK_HEAD_STTL]
 10490                                  					; 1 is fast settle value
 10491 00000BB7 07                      		pop	es
 10492 00000BB8 C3                      		retn
 10493                                  
 10494                                  ; =============== S U B	R O U T	I N E =======================================
 10495                                  
 10496                                  ; if the drive has been marked as too big (i.e. starting sector of the
 10497                                  ; partition is > 16 bits, then always return drive not ready.
 10498                                  
 10499                                  fastspeed:		
 10500 00000BB9 26F6451F80              		test	byte [es:di+1Fh], 80h ; [es:di+BDS.fatsiz]
 10501                                  					; ftoobig
 10502 00000BBE 750D                    		jnz	short notready
 10503 00000BC0 06                      		push	es
 10504 00000BC1 8E06[3705]              		mov	es, [xfer_seg]
 10505 00000BC5 CD13                    		int	13h		; DISK -
 10506 00000BC7 8C06[3705]              		mov	[xfer_seg], es
 10507 00000BCB 07                      		pop	es
 10508 00000BCC C3                      		retn
 10509                                  ; ---------------------------------------------------------------------------
 10510                                  
 10511                                  notready:				
 10512 00000BCD F9                      		stc
 10513 00000BCE B480                    		mov	ah, 80h
 10514 00000BD0 C3                      		retn
 10515                                  
 10516                                  ; =============== S U B	R O U T	I N E =======================================
 10517                                  
 10518                                  ; map error returned by rom in ah into corresponding code to be returned to
 10519                                  ; dos in al. trashes di. guaranteed to set carry.
 10520                                  
 10521                                  maperror:	
 10522 00000BD1 51                      		push	cx
 10523 00000BD2 06                      		push	es
 10524 00000BD3 1E                      		push	ds		; set es=Bios_Data
 10525 00000BD4 07                      		pop	es
 10526 00000BD5 88E0                    		mov	al, ah		; put error code in al
 10527 00000BD7 A2[4401]                		mov	[lsterr], al	; terminate list with error code
 10528 00000BDA B90900                  		mov	cx, 9		; numerr (= errout-errin)
 10529                                  					; number of possible error conditions
 10530 00000BDD BF[3C01]                		mov	di, errin	; point to error conditions
 10531 00000BE0 F2AE                    		repne scasb
 10532                                  		; 10/12/2022
 10533 00000BE2 8A4508                  		mov	al, [di+8]	; [di+numerr-1]
 10534                                  					; get translation
 10535                                  		; 19/10/2022 - Temporary ! 
 10536                                  		;db	8Ah, 85h, 8, 0	; mov al, [di+8]
 10537 00000BE5 07                      		pop	es
 10538 00000BE6 59                      		pop	cx
 10539 00000BE7 F9                      		stc			; flag error condition
 10540 00000BE8 C3                      		retn
 10541                                  
 10542                                  ; =============== S U B	R O U T	I N E =======================================
 10543                                  
 10544                                  ; set the time of last access for this drive.
 10545                                  ; this is done only for removable media. es:di -> bds
 10546                                  
 10547                                  set_tim:		
 10548 00000BE9 50                      		push	ax
 10549 00000BEA E88DF8                  		call	GetTickCnt	; Does INT 1A ah=0 & updates daycnt
 10550                                  
 10551                                  ; we have the new time. if we see that the time has passed,
 10552                                  ; then we reset the threshold counter...
 10553                                  
 10554 00000BED 263B5547                		cmp	dx, [es:di+47h]	; [es:di+BDS.tim_lo]
 10555 00000BF1 7506                    		jnz	short setaccess
 10556 00000BF3 263B4D49                		cmp	cx, [es:di+49h]	; [es:di+BDS.tim_hi]
 10557                                  		;jz	short done_set
 10558                                  		; 12/12/2022
 10559 00000BF7 740E                    		je	short done_set2
 10560                                  setaccess:				
 10561 00000BF9 C606[1D01]00            		mov	byte [accesscount], 0
 10562 00000BFE 26895547                		mov	[es:di+47h], dx	; [es:di+BDS.tim_lo]
 10563 00000C02 26894D49                		mov	[es:di+49h], cx	; [es:di+BDS.tim_hi]
 10564                                  done_set:				
 10565 00000C06 F8                      		clc
 10566                                  done_set2:		; 12/12/2022
 10567 00000C07 58                      		pop	ax
 10568 00000C08 C3                      		retn
 10569                                  
 10570                                  ; =============== S U B	R O U T	I N E =======================================
 10571                                  
 10572                                  ; this routine is called if an error occurs while formatting or verifying.
 10573                                  ; it resets the drive,and decrements the retry count.
 10574                                  ; on entry - ds:di - points to bds for the drive
 10575                                  ;	     bp    - contains retry count
 10576                                  ; on exit    flags indicate result of decrementing retry count
 10577                                  
 10578                                  again:	
 10579 00000C09 E87004                  		call	ResetDisk
 10580 00000C0C 80FC06                  		cmp	ah, 6
 10581 00000C0F 7402                    		jz	short dont_dec_retry_count ; If	it is a	media change error
 10582                                  					; do not decrement retry count.
 10583 00000C11 4D                      		dec	bp		; decrement retry count
 10584 00000C12 C3                      		retn
 10585                                  ; ---------------------------------------------------------------------------
 10586                                  
 10587                                  dont_dec_retry_count:			
 10588 00000C13 08E4                    		or	ah, ah
 10589 00000C15 C3                      		retn
 10590                                  
 10591                                  ; 16/10/2022 - Retro DOS 4.0 (Modified MSDOS 5.0 IO.SYS)
 10592                                  
 10593                                  ;----------------------------------------------------------------------------
 10594                                  ; MSDIOCTL.ASM - MSDOS 6.0 - 1991
 10595                                  ;----------------------------------------------------------------------------
 10596                                  ; 11/03/2019 - Retro DOS v4.0
 10597                                  
 10598                                  ; 18/03/2019
 10599                                  
 10600                                  ; ==========================================================================
 10601                                  ;
 10602                                  ; NOTE: GetAccessFlag/SetAccessFlag is unpublished function.
 10603                                  ;
 10604                                  ;      This function is intended to give the user to control the
 10605                                  ;      bds table flags of unformatted_media bit.
 10606                                  ;      GetAccessFlag will show the status -
 10607                                  ;	 a_DiskAccess_Control.dac_access_flag = 0 disk i/o not allowed
 10608                                  ;						1 disk i/o allowed
 10609                                  ;      SetAccessFlag will set/reset the unformatted_media bit in flags -
 10610                                  ;	 a_DiskAccess_Control.dac_access_flag = 0 allow disk i/o
 10611                                  ;						1 disallow disk i/o
 10612                                  ; ==========================================================================
 10613                                  
 10614                                  		; generic ioctl dispatch tables
 10615                                  
 10616                                  ; BIOSCODE:0C3Ch (MSDOS 6.21, IO.SYS)
 10617                                  
 10618                                  ; ---------------------------------------------------------------------------
 10619 00000C16 00                      		db 0
 10620                                  
 10621                                  ; 09/12/2022 
 10622                                  %if 0
 10623                                  
 10624                                  IoReadJumpTable: db 8	; ((IoWriteJumpTable-IoReadJumpTable)-1)/2
 10625                                  		dw 0CA7h	; 60h	; GetDeviceParameters
 10626                                  		dw 0EE8h	; 61h	; ReadTrack
 10627                                  		dw 0E86h	; 62h	; VerifyTrack
 10628                                  		dw 0CA3h	 	; Cmd_Error_Proc
 10629                                  		dw 0CA3h		; Cmd_Error_Proc
 10630                                  		dw 0CA3h		; Cmd_Error_Proc
 10631                                  		dw 119Ah	; 66h	; GetMediaId
 10632                                  		dw 1269h	; 67h	; GetAccessFlag ; unpublished function
 10633                                  		dw 12C1h	; 68h	; SenseMediaType
 10634                                  
 10635                                  IoWriteJumpTable: db 7	; ((IOC_DC_Table-IoWriteJumpTable)-1)/2
 10636                                  		dw 0CF3h	; 40h	; SetDeviceParameters
 10637                                  		dw 0EEFh	; 41h	; WriteTrack
 10638                                  		dw 0DC1h	; 42h	; FormatTrack
 10639                                  		dw 0CA3h		; Cmd_Error_Proc
 10640                                  		dw 0CA3h		; Cmd_Error_Proc
 10641                                  		dw 0CA3h		; Cmd_Error_Proc
 10642                                  		dw 11D2h	; 46h	; SetMediaId
 10643                                  		dw 1280h	; 47h	; SetAccessFlag ; unpublished function
 10644                                  
 10645                                  %endif
 10646                                  
 10647                                  		; 09/12/2022
 10648 00000C17 09                      IoReadJumpTable: db ((IoWriteJumpTable-IoReadJumpTable)-1)/2 ; 8
 10649 00000C18 [820C]                  		dw GetDeviceParameters	; 60h
 10650 00000C1A [BD0E]                  		dw ReadTrack		; 61h
 10651 00000C1C [5D0E]                  		dw VerifyTrack		; 62h
 10652 00000C1E [7E0C]                  		dw Cmd_Error_Proc
 10653 00000C20 [7E0C]                  		dw Cmd_Error_Proc
 10654 00000C22 [7E0C]                  		dw Cmd_Error_Proc
 10655 00000C24 [5E11]                  		dw GetMediaId		; 66h
 10656 00000C26 [2A12]                  		dw GetAccessFlag	; 67h ; unpublished function
 10657 00000C28 [7C12]                  		dw SenseMediaType	; 68h
 10658                                  
 10659 00000C2A 08                      IoWriteJumpTable: db ((IOC_DC_Table-IoWriteJumpTable)-1)/2 ; 7
 10660 00000C2B [CD0C]                  		dw SetDeviceParameters	; 40h
 10661 00000C2D [C40E]                  		dw WriteTrack		; 41h
 10662 00000C2F [980D]                  		dw FormatTrack		; 42h
 10663 00000C31 [7E0C]                  		dw Cmd_Error_Proc
 10664 00000C33 [7E0C]                  		dw Cmd_Error_Proc
 10665 00000C35 [7E0C]                  		dw Cmd_Error_Proc
 10666 00000C37 [9411]                  		dw SetMediaId		; 46h
 10667 00000C39 [4012]                  		dw SetAccessFlag	; 47h ; unpublished function
 10668                                  
 10669                                  ; ==========================================================================
 10670                                  ; IOC_DC_Table
 10671                                  ;
 10672                                  ; This table contains all of the valid generic IOCtl Minor codes for
 10673                                  ; major function 08 to be used by the Ioctl_Support_Query function.
 10674                                  ; Added for 5.00
 10675                                  ; ==========================================================================
 10676                                  
 10677 00000C3B 60                      IOC_DC_Table:	db 60h			; GET_DEVICE_PARAMETERS
 10678 00000C3C 40                      		db 40h			; SET_DEVICE_PARAMETERS
 10679 00000C3D 61                      		db 61h			; READ_TRACK
 10680 00000C3E 41                      		db 41h			; WRITE_TRACK
 10681 00000C3F 62                      		db 62h			; VERIFY_TRACK
 10682 00000C40 42                      		db 42h			; FORMAT_TRACK
 10683 00000C41 66                      		db 66h			; GET_MEDIA_ID
 10684 00000C42 46                      		db 46h			; SET_MEDIA_ID
 10685 00000C43 67                      		db 67h			; GET_ACCESS_FLAG
 10686 00000C44 47                      		db 47h			; SET_ACCESS_FLAG
 10687 00000C45 68                      		db 68h			; SENSE_MEDIA_TYPE
 10688                                  
 10689                                  ;IOC_DC_TABLE_LEN EQU $ - IOC_DC_Table
 10690                                  
 10691                                  ; ---------------------------------------------------------------------------
 10692                                  
 10693                                  ; 16/10/2022
 10694                                  
 10695                                  ; ==========================================================================
 10696                                  ; Do_Generic_IOCtl: perform generic ioctl request
 10697                                  ;
 10698                                  ;    input: AL contains logical drive
 10699                                  ;
 10700                                  ;	functions are dispatched through a call. On return, carry indicates
 10701                                  ;	error code in al. Note::bES:b& ds undefined on return from
 10702                                  ;	subfunctions.
 10703                                  ;
 10704                                  ; ==========================================================================
 10705                                  
 10706                                  ; 11/03/2019
 10707                                  		; 19/10/2022
 10708                                  do_generic_ioctl:			; 2C7h:0C6Bh = 70h:31DBh
 10709 00000C46 E882F8                  		call	SetDrive	; ES:DI	Points to bds for drive
 10710 00000C49 06                      		push	es
 10711 00000C4A C41E[1200]              		les	bx, [ptrsav]	; ES:BX	Points to request header
 10712 00000C4E 26807F0D08              		cmp	byte [es:bx+0Dh], 8 ; [es:bx+IOCTL_REQ.MAJORFUNCTION]
 10713                                  					; RAWIO
 10714 00000C53 268A470E                		mov	al, [es:bx+0Eh]	; [es:bx+IOCTL_REQ.MINORFUNCTION]
 10715 00000C57 07                      		pop	es
 10716 00000C58 7525                    		jnz	short IoctlFuncErr
 10717                                  
 10718                                  		; cas note: Could do the above two blocks in reverse order.
 10719                                  		; Would have to preserve al for SetDrive
 10720                                  
 10721                                  		; 10/12/2022
 10722 00000C5A BE[170C]                		mov	si, IoReadJumpTable
 10723                                  		;mov	si, 0C3Ch	; IoReadJumpTable
 10724                                  					; at 2C7h:0C3Ch	= 70h:31ACh
 10725 00000C5D A820                    		test	al, 20h		; GEN_IOCTL_FN_TST ; test of req. function
 10726 00000C5F 7503                    		jnz	short NotGenericWrite ; function is a read.
 10727                                  		; 10/12/2022
 10728 00000C61 BE[2A0C]                		mov	si, IoWriteJumpTable
 10729                                  		;mov	si, 0C4Fh	; IoWriteJumpTable
 10730                                  					; at 2C7h:0C4Fh	= 70h:31BFh
 10731                                  NotGenericWrite:			
 10732 00000C64 24DF                    		and	al, 0DFh	; ~GEN_IOCTL_FN_TST ; get rid of read/write bit
 10733 00000C66 2C40                    		sub	al, 40h		; offset for base function
 10734 00000C68 2E3A04                  		cmp	al, [cs:si]
 10735 00000C6B 7712                    		ja	short IoctlFuncErr
 10736 00000C6D 98                      		cbw
 10737 00000C6E D1E0                    		shl	ax, 1
 10738 00000C70 46                      		inc	si
 10739 00000C71 01C6                    		add	si, ax
 10740 00000C73 2EFF14                  		call	near [cs:si]
 10741                                  		;call	word ptr cs:[si]
 10742 00000C76 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD]
 10743                                  		;mov	ds, word ptr cs:BIOSDATAWORD ; [cs:Bios_Data_Word]
 10744                                  					; 2C7h:30h = 70h:25A0h
 10745 00000C7B B481                    		mov	ah, 81h		; Return this status in	case of	carry
 10746 00000C7D C3                      		retn			; Pass carry flag through to exit code
 10747                                  ; ---------------------------------------------------------------------------
 10748                                  
 10749                                  		; Cmd_Error_Proc is called as a procedure and also use
 10750                                  		; as a fall through from above
 10751                                  Cmd_Error_Proc:				; 2C7h:0CA3h = 70h:3213h
 10752 00000C7E 5A                      		pop	dx
 10753                                  
 10754                                  IoctlFuncErr:				
 10755 00000C7F E953F4                  		jmp	bc_cmderr
 10756                                  ; ---------------------------------------------------------------------------
 10757                                  
 10758                                  ; 16/10/2022
 10759                                  
 10760                                  ; ==========================================================================
 10761                                  ;**	GetDeviceParameters:
 10762                                  ;
 10763                                  ;	GetDeviceParameters implements the generic ioctl function:
 10764                                  ;	majorcode=RAWIO, minorcode=GetDeviceParameters (60h)
 10765                                  ;
 10766                                  ;	ENTRY	(ES:di) = BDS for drive
 10767                                  ;		PtrSav = long pointer to request header
 10768                                  ;	EXIT	??? BUGBUG
 10769                                  ;	USES	??? BUGBUG
 10770                                  ; ==========================================================================
 10771                                  
 10772                                  		; 19/10/2022
 10773                                  GetDeviceParameters:
 10774                                  		; Copy info from bds to the device parameters packet
 10775                                  
 10776 00000C82 C51E[1200]              		lds	bx, [ptrsav]	; DS:BX	points to request header
 10777 00000C86 C55F13                  		lds	bx, [bx+19]	; [bx+IOCTL_REQ.GENERICIOCTL_PACKET]
 10778                                  					; (DS:BX) = return buffer
 10779 00000C89 268A4522                		mov	al, [es:di+34]	; [es:di+BDS.formfactor]
 10780 00000C8D 884701                  		mov	[bx+1],	al	; [bx+A_DEVICEPARAMETERS.DP_DEVICETYPE]
 10781 00000C90 268B4523                		mov	ax, [es:di+35]	; [es:di+BDS.flags]
 10782 00000C94 83E003                  		and	ax, 3		; fnon_removable+fchangeline
 10783                                  					; Mask off other bits
 10784 00000C97 894702                  		mov	[bx+2],	ax	; [bx+A_DEVICEPARAMETERS.DP_DEVICEATTRIBUTES]
 10785 00000C9A 268B4525                		mov	ax, [es:di+37]	; [es:di+BDS.cylinders]
 10786 00000C9E 894704                  		mov	[bx+4],	ax	; [bx+A_DEVICEPARAMETERS.DP_CYLINDERS]
 10787 00000CA1 30C0                    		xor	al, al		; Set media type to default
 10788 00000CA3 884706                  		mov	[bx+6],	al	; [bx+A_DEVICEPARAMETERS.DP_MEDIATYPE]
 10789                                  					
 10790                                  		; copy recommended bpb
 10791 00000CA6 8D7527                  		lea	si, [di+39]	; [di+BDS.rbytespersec]	= [di+BDS.R_BPB]
 10792 00000CA9 F60701                  		test	byte [bx], 1	; [bx+A_DEVICEPARAMETERS.DP_SPECIALFUNCTIONS]
 10793                                  					; BUILD_DEVICE_BPB
 10794 00000CAC 7412                    		jz	short UseBpbPresent
 10795 00000CAE 1E                      		push	ds		; Save request packet segment
 10796 00000CAF 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD]
 10797                                  		;mov	ds, word ptr cs:BIOSDATAWORD ; [cs:Bios_Data_Word]
 10798                                  					; 2C7h:30h = 70h:25A0h
 10799                                  					; Point back to Bios_Data
 10800 00000CB4 E885FB                  		call	checksingle
 10801 00000CB7 E83EF9                  		call	GetBp		; Build	the bpb	from scratch
 10802 00000CBA 1F                      		pop	ds		; Restore request packet segment
 10803 00000CBB 720F                    		jb	short GetParmRet
 10804 00000CBD 8D7506                  		lea	si, [di+6]	; [di+BDS.bytespersec] = [di+BSD.DP_BPB]
 10805                                  					; Use this subfield of bds instead
 10806                                  UseBpbPresent:				
 10807 00000CC0 8D7F07                  		lea	di, [bx+7]	; [bx+A_DEVICEPARAMETERS.DP_BPB]
 10808                                  					; This is where	the result goes
 10809 00000CC3 B91900                  		mov	cx, 25		; A_BPB.size - 6
 10810                                  					; For now use 'small' bpb
 10811 00000CC6 1E                      		push	ds		; reverse segments for copy
 10812 00000CC7 06                      		push	es
 10813 00000CC8 1F                      		pop	ds
 10814 00000CC9 07                      		pop	es
 10815 00000CCA F3A4                    		rep movsb
 10816                                  		
 10817                                  		; 12/12/2022
 10818                                  		; cf=0 (test instruction -above- resets cf) 	
 10819                                  		;clc
 10820                                  GetParmRet:				
 10821 00000CCC C3                      		retn
 10822                                  ; ---------------------------------------------------------------------------
 10823                                  
 10824                                  ; 17/10/2022
 10825                                  ; 16/10/2022
 10826                                  
 10827                                  ; ==========================================================================
 10828                                  ; SetDeviceParameters:
 10829                                  ;
 10830                                  ; input: ES:di points to bds for drive
 10831                                  ; ==========================================================================
 10832                                  
 10833                                  		; 19/10/2022
 10834                                  SetDeviceParameters:			; 2C7h:0CF3h = 70h:3263h
 10835 00000CCD C51E[1200]              		lds	bx, [ptrsav]	; DS:BX	points to request header
 10836 00000CD1 C55F13                  		lds	bx, [bx+19]	; [bx+IOCTL_REQ.GENERICIOCTL_PACKET]
 10837 00000CD4 26814D234001            		or	word [es:di+23h], 140h ; [es:di+BDS.flags]
 10838                                  					; fchanged_by_format|fchanged
 10839 00000CDA F60702                  		test	byte [bx], 2	; [bx+A_DEVICEPARAMETERS.DP_SPECIALFUNCTIONS]
 10840                                  					; ONLY_SET_TRACKLAYOUT
 10841 00000CDD 7579                    		jnz	short setTrackTable
 10842 00000CDF 8A4701                  		mov	al, [bx+1]	; [bx+A_DEVICEPARAMETERS.DP_DEVICETYPE]
 10843 00000CE2 26884522                		mov	[es:di+34], al	; [es:di+BDS.formfactor]
 10844 00000CE6 8B4704                  		mov	ax, [bx+4]	; [bx+A_DEVICEPARAMETERS.DP_CYLINDERS]
 10845 00000CE9 26894525                		mov	[es:di+37], ax	; [es:di+BDS.cylinders]
 10846 00000CED 8B4702                  		mov	ax, [bx+2]	; [bx+A_DEVICEPARAMETERS.DP_DEVICEATTRIBUTES]
 10847 00000CF0 1E                      		push	ds
 10848                                  		; 17/10/2022
 10849 00000CF1 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD]
 10850                                  		;mov	ds, word ptr cs:BIOSDATAWORD ; [cs:Bios_Data_Word]
 10851                                  					; 2C7h:30h = 70h:25A0h
 10852                                  		;cmp	byte [fhave96], 0
 10853 00000CF6 803E[7700]00            		cmp	byte [fhave96], 0
 10854 00000CFB 1F                      		pop	ds
 10855 00000CFC 7502                    		jnz	short HaveChange ; we have changeline support
 10856                                  		; 10/12/2022
 10857 00000CFE 24FD                    		and	al, 0FDh
 10858                                  		;and	ax, 0FFFDh	; ~fchangeline
 10859                                  
 10860                                  		; Ignore all bits except non_removable and changeline
 10861                                  HaveChange:				
 10862 00000D00 83E003                  		and	ax, 3		; fnon_removable|fchangeline
 10863 00000D03 268B4D23                		mov	cx, [es:di+35]	; [es:di+BDS.flags]
 10864 00000D07 81E1F4FD                		and	cx, 0FDF4h	; ~(fnon_removable|fchangeline|good_tracklayout|unformatted_media)
 10865 00000D0B 09C8                    		or	ax, cx
 10866 00000D0D 26894523                		mov	[es:di+35], ax	; [es:di+BDS.flags]
 10867 00000D11 8A4706                  		mov	al, [bx+6]	; [bx+A_DEVICEPARAMETERS.DP_MEDIATYPE]
 10868                                  					; Set media type
 10869 00000D14 1E                      		push	ds
 10870 00000D15 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD]
 10871                                  		;mov	ds, word ptr cs:BIOSDATAWORD ; [cs:Bios_Data_Word]
 10872 00000D1A A2[3706]                		mov	[mediatype], al
 10873                                  		;mov	ds:mediatype, al
 10874 00000D1D 1F                      		pop	ds
 10875                                  
 10876                                  		; The media changed (maybe) so we will have to do a set dasd
 10877                                  		; the next time we format a track
 10878                                  
 10879                                  		; 10/12/2022
 10880 00000D1E 26804D2380              		or	byte [es:di+35], 80h
 10881                                  		;or	word [es:di+35], 80h ; [es:di+BDS.flags]
 10882                                  					; set_dasd_true
 10883 00000D23 57                      		push	di		; Save bds pointer
 10884                                  
 10885                                  		; Figure out what we are supposed to do with the bpb
 10886                                  		; were we asked to install a fake bpb?
 10887                                  
 10888 00000D24 F60701                  		test	byte [bx], 1	; [bx+A_DEVICEPARAMETERS.DP_SPECIALFUNCTIONS]
 10889                                  					; INSTALL_FAKE_BPB
 10890 00000D27 7514                    		jnz	short InstallFakeBpb
 10891                                  
 10892                                  		; were we returning a fake bpb when asked to build a bpb?
 10893                                  
 10894                                  		; 10/12/2022
 10895 00000D29 26F6452304              		test	byte [es:di+35], 4
 10896                                  		;test	word [es:di+35], 4 ; [es:di+BDS.flags]
 10897                                  					; return_fake_bpb
 10898 00000D2E 7405                    		jz	short InstallRecommendedBpb
 10899                                  
 10900                                  		; we were returning a fake bpb but we can stop now
 10901                                  
 10902                                  		; 10/12/2022
 10903 00000D30 26806523FB              		and	byte [es:di+35], 0FBh
 10904                                  		;and	word [es:di+35], 0FFFBh ; [es:di+BDS.flags]
 10905                                  					; ~return_fake_bpb
 10906                                  InstallRecommendedBpb:			
 10907 00000D35 B91F00                  		mov	cx, 31		; A_BPB.size
 10908 00000D38 8D7D27                  		lea	di, [di+27h]	; [di+BDS.R_BPB] = [di+BDS.rbytespersec]
 10909 00000D3B EB0B                    		jmp	short CopyTheBpb
 10910                                  ; ---------------------------------------------------------------------------
 10911                                  
 10912                                  InstallFakeBpb:
 10913                                  		; 10/12/2022
 10914 00000D3D 26804D2304              		or	byte [es:di+35], 4				
 10915                                  		;or	word [es:di+35], 4 ; byte [es:di+BDS.flags]
 10916                                  					; return_fake_bpb
 10917 00000D42 B91900                  		mov	cx, 25		; A_BPB.size - 6
 10918                                  					; move 'smaller' bpb
 10919 00000D45 8D7D06                  		lea	di, [di+6]	; [es:di+BDS.BPB] = [es:di+BDS.bytespersec]
 10920                                  
 10921                                  CopyTheBpb:				
 10922 00000D48 8D7707                  		lea	si, [bx+7]	; [bx+A_DEVICEPARAMETERS.DP_BPB]
 10923 00000D4B F3A4                    		rep movsb
 10924 00000D4D 1E                      		push	ds		; Save packet segment
 10925                                  		; 17/10/2022
 10926 00000D4E 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD]
 10927                                  		;mov	ds, word ptr cs:BIOSDATAWORD ; [cs:Bios_Data_Word]
 10928                                  					; Setup	for ds -> Bios_Data
 10929 00000D53 E8DA03                  		call	RestoreOldDpt	; Restore the old Dpt from TempDpt
 10930 00000D56 1F                      		pop	ds		; Restore packet segment
 10931 00000D57 5F                      		pop	di		; Restore bds pointer
 10932                                  setTrackTable:				
 10933 00000D58 8B4F26                  		mov	cx, [bx+38]
 10934 00000D5B 1E                      		push	ds
 10935 00000D5C 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD]
 10936 00000D61 890E[3905]              		mov	[sectorspertrack], cx
 10937 00000D65 1F                      		pop	ds
 10938                                  		; 10/12/2022
 10939 00000D66 26806523F7              		and	byte [es:di+35], 0F7h
 10940                                  		;and	word [es:di+35], 0FFF7h ; [es:di+BDS.flags]
 10941                                  					; ~good_tracklayout
 10942 00000D6B F60704                  		test	byte [bx], 4	; [bx+A_DEVICEPARAMETERS.DP_SPECIALFUNCTIONS]
 10943                                  					; TRACKLAYOUT_IS_GOOD
 10944 00000D6E 7405                    		jz	short UglyTrackLayOut
 10945                                  		; 10/12/2022
 10946 00000D70 26804D2308              		or	byte [es:di+35], 8
 10947                                  		;or	word [es:di+35], 8 ; [es:di+BDS.flags]
 10948                                  					; good_tracklayout
 10949                                  UglyTrackLayOut:			
 10950 00000D75 83F93F                  		cmp	cx, 63		; MAX_SECTORS_IN_TRACK
 10951 00000D78 771A                    		ja	short TooManyPerTrack
 10952                                  		;jcxz	short SectorInfoSaved
 10953 00000D7A E316                    		jcxz	SectorInfoSaved	; 19/10/2022
 10954 00000D7C BF[3B05]                		mov	di, tracktable
 10955 00000D7F 8D7728                  		lea	si, [bx+40]	; [bx+A_DEVICEPARAMETERS.DP_SECTORTABLE]
 10956                                  		; 17/10/2022
 10957 00000D82 2E8E06[3000]            		mov	es, [cs:BIOSDATAWORD]
 10958                                  		;mov	es, word ptr cs:BIOSDATAWORD ; [cs:Bios_Data_Word]
 10959                                  					; Trash	our bds	pointer
 10960                                  StoreSectorInfo:			
 10961 00000D87 47                      		inc	di
 10962 00000D88 47                      		inc	di		; Skip over cylinder and head
 10963 00000D89 AD                      		lodsw			; Get sector id
 10964 00000D8A AA                      		stosb			; Copy it
 10965 00000D8B AD                      		lodsw			; Get sector size
 10966 00000D8C E8E301                  		call	SectSizeToSectIndex
 10967 00000D8F AA                      		stosb			; Store	sector SIZE index
 10968 00000D90 E2F5                    		loop	StoreSectorInfo
 10969                                  SectorInfoSaved:			
 10970 00000D92 F8                      		clc
 10971 00000D93 C3                      		retn
 10972                                  ; ---------------------------------------------------------------------------
 10973                                  
 10974                                  TooManyPerTrack:			
 10975 00000D94 B00C                    		mov	al, 0Ch
 10976 00000D96 F9                      		stc
 10977 00000D97 C3                      		retn
 10978                                  ; ---------------------------------------------------------------------------
 10979                                  
 10980                                  ; 16/10/2022
 10981                                  
 10982                                  ; ==========================================================================
 10983                                  ; FormatTrack:
 10984                                  ; if specialfunction byte is 1,then this is a status call to see if there is
 10985                                  ; rom support for the combination of sec/trk and # of cyln,and if the
 10986                                  ; combination is legal. if specialfunction byte is 0,then format the track.
 10987                                  ;
 10988                                  ; input: ES:di points to bds for drive
 10989                                  ;
 10990                                  ; output:
 10991                                  ;	for status call:
 10992                                  ;	specialfunction byte set to:
 10993                                  ;		0 - rom support + legal combination
 10994                                  ;		1 - no rom support
 10995                                  ;		2 - illegal combination
 10996                                  ;		3 - no media present
 10997                                  ;	carry cleared.
 10998                                  ;
 10999                                  ;	for format track:
 11000                                  ;		carry set if error
 11001                                  ;
 11002                                  ; ==========================================================================
 11003                                  
 11004                                  ; 16/03/2019
 11005                                  
 11006                                  		; 19/10/2022
 11007                                  FormatTrack:
 11008 00000D98 C51E[1200]              		lds	bx, [ptrsav]
 11009 00000D9C C55F13                  		lds	bx, [bx+19]	; [bx+IOCTL_REQ.GENERICIOCTL_PACKET
 11010 00000D9F F60701                  		test	byte [bx], 1	; [bx+A_DEVICEPARAMETERS.DP_SPECIALFUNCTIONS]
 11011                                  					; STATUS_FOR_FORMAT
 11012 00000DA2 740E                    		jz	short DoFormatTrack
 11013 00000DA4 1E                      		push	ds
 11014                                  		; 17/10/2022
 11015 00000DA5 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD]
 11016                                  		;mov	ds, word ptr cs:BIOSDATAWORD ; [cs:Bios_Data_Word]
 11017 00000DAA E83902                  		call	SetMediaForFormat ; Also moves current Dpt to TempDpt
 11018 00000DAD 1F                      		pop	ds
 11019 00000DAE 8807                    		mov	[bx], al	; [bx+A_DEVICEPARAMETERS.DP_SPECIALFUNCTIONS]
 11020 00000DB0 F8                      		clc
 11021 00000DB1 C3                      		retn
 11022                                  ; ---------------------------------------------------------------------------
 11023                                  
 11024                                  DoFormatTrack:				
 11025 00000DB2 26807D2205              		cmp	byte [es:di+34], 5 ; [es:di+BDS.formfactor]
 11026                                  					; DEV_HARDDISK
 11027 00000DB7 7508                    		jnz	short DoFormatDiskette
 11028                                  		; 17/10/2022
 11029 00000DB9 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD]
 11030                                  		;mov	ds, word ptr cs:BIOSDATAWORD ; [cs:Bios_Data_Word]
 11031                                  					; Point	to Bios_Data (at 2C7h:30h or 70h:25A0h)
 11032 00000DBE E99C00                  		jmp	VerifyTrack
 11033                                  ; ---------------------------------------------------------------------------
 11034                                  
 11035                                  DoFormatDiskette:			
 11036 00000DC1 8B4F01                  		mov	cx, [bx+1]
 11037 00000DC4 8B5703                  		mov	dx, [bx+3]
 11038 00000DC7 F60702                  		test	byte [bx], 2
 11039                                  		; 17/10/2022
 11040 00000DCA 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD]
 11041                                  		;mov	ds, word ptr cs:BIOSDATAWORD ; [cs:Bios_Data_Word]
 11042                                  					; Setup	ds-> Bios_Data for verify
 11043 00000DCF 7403                    		jz	short DoFormatDiskette_1
 11044 00000DD1 E9E400                  		jmp	VerifyTrack_Err
 11045                                  ; ---------------------------------------------------------------------------
 11046                                  
 11047                                  DoFormatDiskette_1:			
 11048 00000DD4 E80F02                  		call	SetMediaForFormat ; Also moves current Dpt to TempDpt
 11049 00000DD7 3C01                    		cmp	al, 1		;  ROM support for sec/trk,# trks comb?
 11050 00000DD9 7406                    		jz	short NeedToSetDasd ; Old rom
 11051 00000DDB 3C03                    		cmp	al, 3		; Time out error?
 11052 00000DDD 7507                    		jnz	short NoSetDasd	; No,fine. (at this point, don't care
 11053                                  					; about	the illegal combination)
 11054 00000DDF EB67                    		jmp	short FormatFailed
 11055                                  ; ---------------------------------------------------------------------------
 11056                                  
 11057                                  NeedToSetDasd:				
 11058 00000DE1 52                      		push	dx
 11059 00000DE2 E8A001                  		call	SetDasd		; INT 13h, AH=17h
 11060 00000DE5 5A                      		pop	dx
 11061                                  NoSetDasd:				
 11062 00000DE6 E853FA                  		call	checksingle	; Do any needed	diskette swapping
 11063 00000DE9 89D0                    		mov	ax, dx		; Get track from packet
 11064 00000DEB A3[3901]                		mov	[trknum], ax
 11065 00000DEE 880E[3801]              		mov	[hdnum], cl	; Store	head from packet
 11066 00000DF2 88CC                    		mov	ah, cl
 11067 00000DF4 BB[3B05]                		mov	bx, tracktable
 11068 00000DF7 8B0E[3905]              		mov	cx, [sectorspertrack]
 11069                                  
 11070                                  StoreCylinderHead:			
 11071 00000DFB 8907                    		mov	[bx], ax	; Store	into TrackTable
 11072 00000DFD 83C304                  		add	bx, 4		; Skip to next sector field
 11073 00000E00 E2F9                    		loop	StoreCylinderHead
 11074 00000E02 B90500                  		mov	cx, 5		; MAXERR - Set up retry	count
 11075                                  FormatRetry:				
 11076 00000E05 51                      		push	cx
 11077 00000E06 BB[3B05]                		mov	bx, tracktable
 11078 00000E09 A0[3905]                		mov	al, [sectorspertrack]
 11079 00000E0C B405                    		mov	ah, 5		; romformat
 11080 00000E0E 8C1E[3705]              		mov	[xfer_seg], ds
 11081 00000E12 E87F02                  		call	ToRom
 11082 00000E15 59                      		pop	cx
 11083 00000E16 7216                    		jb	short FormatError
 11084 00000E18 51                      		push	cx		; Now verify the sectors just formatted.
 11085                                  					; NOTE:	because	of bug in some BIOSes we have to
 11086                                  					;	set ES:BX to 00:00
 11087 00000E19 53                      		push	bx
 11088 00000E1A 31DB                    		xor	bx, bx
 11089 00000E1C 891E[3705]              		mov	[xfer_seg], bx
 11090 00000E20 A0[3905]                		mov	al, [sectorspertrack]
 11091 00000E23 B404                    		mov	ah, 4		; romverify
 11092 00000E25 B101                    		mov	cl, 1
 11093 00000E27 E86A02                  		call	ToRom
 11094 00000E2A 5B                      		pop	bx
 11095 00000E2B 59                      		pop	cx
 11096 00000E2C 7329                    		jnb	short FormatOk
 11097                                  FormatError:				
 11098 00000E2E E84B02                  		call	ResetDisk
 11099 00000E31 C606[3906]01            		mov	byte [had_format_error], 1
 11100 00000E36 50                      		push	ax
 11101 00000E37 51                      		push	cx
 11102 00000E38 52                      		push	dx
 11103 00000E39 E8AA01                  		call	SetMediaForFormat
 11104 00000E3C 3C01                    		cmp	al, 1
 11105 00000E3E 7503                    		jnz	short WhileErr
 11106 00000E40 E84201                  		call	SetDasd
 11107                                  WhileErr:				
 11108 00000E43 5A                      		pop	dx
 11109 00000E44 59                      		pop	cx
 11110 00000E45 58                      		pop	ax
 11111 00000E46 E2BD                    		loop	FormatRetry
 11112                                  FormatFailed:				
 11113 00000E48 C606[3906]01            		mov	byte [had_format_error], 1
 11114                                  					; Set the format error flag
 11115 00000E4D 80FC06                  		cmp	ah, 6		; DSK_CHANGELINE_ERR - convert change line
 11116 00000E50 7502                    		jnz	short DoMapIt	; Error	to time	out error
 11117 00000E52 B480                    		mov	ah, 80h		; DSK_TIMEOUT_ERR
 11118                                  DoMapIt:				
 11119 00000E54 E97AFD                  		jmp	maperror
 11120                                  ; ---------------------------------------------------------------------------
 11121                                  
 11122                                  FormatOk:				
 11123 00000E57 C606[3906]00            		mov	byte [had_format_error], 0 ; reset the format error flag
 11124 00000E5C C3                      		retn
 11125                                  ; ---------------------------------------------------------------------------
 11126                                  
 11127                                  ; 16/10/2022
 11128                                  
 11129                                  ; ==========================================================================
 11130                                  ;
 11131                                  ; VerifyTrack:
 11132                                  ;
 11133                                  ; input: ES:di points to bds for drive
 11134                                  ; ==========================================================================
 11135                                  
 11136                                  VerifyTrack:				
 11137 00000E5D 1E                      		push	ds
 11138 00000E5E C51E[1200]              		lds	bx, [ptrsav]	; DS:BX points to request header.
 11139 00000E62 C55F13                  		lds	bx, [bx+19]	; [bx+IOCTL_REQ.GENERICIOCTL_PACKET]
 11140                                  
 11141                                  		; Come here with DS:[BX] -> packet, ES:[DI] -> bds
 11142                                  
 11143 00000E65 8B4F03                  		mov	cx, [bx+3]	; [bx+A_VERIFYPACKET.VP_CYLINDER]
 11144 00000E68 8B4701                  		mov	ax, [bx+1]	; [bx+A_VERIFYPACKET.VP_HEAD]
 11145 00000E6B 8B5705                  		mov	dx, [bx+5]	; [bx+A_FORMATPACKET.FP_TRACKCOUNT]
 11146 00000E6E 8A1F                    		mov	bl, [bx]	; [bx+A_FORMATPACKET.FP_SPECIALFUNCTIONS]
 11147                                  					; Get option flag word
 11148 00000E70 1F                      		pop	ds
 11149 00000E71 C606[2001]04            		mov	byte [rflag], 4	; romverify
 11150 00000E76 890E[3301]              		mov	[curtrk], cx
 11151 00000E7A A2[3201]                		mov	[curhd], al	; ASSUME heads < 256
 11152 00000E7D 8B0E[3905]              		mov	cx, [sectorspertrack]
 11153                                  
 11154                                  		; Check specialfunctions to see if DO_FAST_FORMAT has been
 11155                                  		; specified if not we should go to the normal track verification
 11156                                  		; routine. If fast format has been specified we should get the
 11157                                  		; number of tracks to be verified and check it to see if it is
 11158                                  		; > 255. If it is then it is an error and we should go to
 11159                                  		; VerifyTrack_Err. If not multiply the number of tracks by the
 11160                                  		; sectors per track to get the total number of sectors to be
 11161                                  		; verified. This should also be less than equal to 255
 11162                                  		; otherwise we go to same error exit. If everything is okay
 11163                                  		; we initalise cx to the total sectors. use ax as a temporary
 11164                                  		; register.
 11165                                  
 11166                                  					; Special function requested?	
 11167 00000E81 F6C302                  		test	bl, 2		; DO_FAST_FORMAT
 11168 00000E84 7421                    		jz	short NormVerifyTrack
 11169 00000E86 89D0                    		mov	ax, dx		; Get ax = number of trks to verify
 11170 00000E88 08E4                    		or	ah, ah
 11171 00000E8A 752C                    		jnz	short VerifyTrack_Err ; #tracks > 255
 11172 00000E8C F6E1                    		mul	cl
 11173 00000E8E 08E4                    		or	ah, ah
 11174 00000E90 7526                    		jnz	short VerifyTrack_Err ; #sectors > 255	
 11175 00000E92 89C1                    		mov	cx, ax
 11176                                  		; 10/12/2022
 11177 00000E94 26F6452301              		test	byte [es:di+35], 1
 11178                                  		;test	word [es:di+35], 1 ; [es:di+BDS.flags]
 11179                                  					; fnon_removable
 11180 00000E99 740C                    		jz	short NormVerifyTrack
 11181                                  					; Multitrack operation = on?
 11182                                  		; 10/12/2022
 11183                                  		; 19/10/2022
 11184 00000E9B F606[2F05]80            		test	byte [multrk_flag], 80h
 11185                                  		;test	word [multrk_flag], 80h ; MULTI_TRK_ON
 11186                                  		;;test	ds:multrk_flag,	80h ; MULTI_TRK_ON
 11187 00000EA0 7405                    		jz	short NormVerifyTrack
 11188 00000EA2 C606[3605]01            		mov	byte [multitrk_format_flag], 1
 11189                                  NormVerifyTrack:			
 11190 00000EA7 31C0                    		xor	ax, ax		; 1st sector
 11191 00000EA9 31DB                    		xor	bx, bx
 11192 00000EAB 891E[3705]              		mov	[xfer_seg], bx	; Use 0:0 as the transfer address for verify
 11193 00000EAF E83F00                  		call	TrackIo
 11194 00000EB2 C606[3605]00            		mov	byte [multitrk_format_flag], 0
 11195 00000EB7 C3                      		retn
 11196                                  ; ---------------------------------------------------------------------------
 11197                                  
 11198                                  VerifyTrack_Err:			
 11199 00000EB8 B401                    		mov	ah, 1
 11200 00000EBA E914FD                  		jmp	maperror
 11201                                  ; ---------------------------------------------------------------------------
 11202                                  
 11203                                  ; 16/10/2022
 11204                                  
 11205                                  ; ==========================================================================
 11206                                  ;
 11207                                  ; ReadTrack:
 11208                                  ;
 11209                                  ; input: ES:di points to bds for drive
 11210                                  ;
 11211                                  ; ==========================================================================
 11212                                  
 11213                                  ReadTrack:				
 11214 00000EBD C606[2001]02            		mov	byte [rflag], 2	; romread
 11215 00000EC2 EB05                    		jmp	short ReadWriteTrack
 11216                                  ; ---------------------------------------------------------------------------
 11217                                  
 11218                                  WriteTrack:
 11219                                  
 11220                                  ; ==========================================================================
 11221                                  ;
 11222                                  ; WriteTrack:
 11223                                  ;
 11224                                  ; input: ES:di points to bds for drive
 11225                                  ;
 11226                                  ; ==========================================================================
 11227                                  				
 11228 00000EC4 C606[2001]03            		mov	byte [rflag], 3	; romwrite
 11229                                  
 11230                                  		; Fall into ReadWriteTrack
 11231                                  
 11232                                  ; ==========================================================================
 11233                                  ;
 11234                                  ; readWriteTrack:
 11235                                  ;
 11236                                  ; input:
 11237                                  ;    ES:di points to bds for drive
 11238                                  ;    rFlag - 2 for read,3 for write
 11239                                  ;
 11240                                  ; ==========================================================================
 11241                                  
 11242                                  ReadWriteTrack:	
 11243                                  		; save bds pointer segment so we can use it to access
 11244                                  		; our packet. Notice that this is not the standard register
 11245                                  		; assignment for accessing packets
 11246                                  		
 11247                                  		; 19/10/2022	
 11248 00000EC9 06                      		push	es
 11249 00000ECA C41E[1200]              		les	bx, [ptrsav]	; ES:BX	-> to request header
 11250 00000ECE 26C45F13                		les	bx, [es:bx+19]	; [es:bx+IOCTL_REQ.GENERICIOCTL_PACKET]
 11251 00000ED2 268B4703                		mov	ax, [es:bx+3]	; [es:bx+A_TRACKREADWRITEPACKET.TRWP_CYLINDER]
 11252 00000ED6 A3[3301]                		mov	[curtrk], ax
 11253 00000ED9 268B4701                		mov	ax, [es:bx+1]	; [es:bx+A_TRACKREADWRITEPACKET.TRWP_HEAD]
 11254 00000EDD A2[3201]                		mov	[curhd], al	; Assume heads < 256!!!
 11255 00000EE0 268B4705                		mov	ax, [es:bx+5]	; [es:bx+A_TRACKREADWRITEPACKET.TRWP_FIRSTSECTOR]
 11256 00000EE4 268B4F07                		mov	cx, [es:bx+7]	; [es:bx+A_TRACKREADWRITEPACKET.TRWP_SECTORSTOREADWRITE]
 11257 00000EE8 26C45F09                		les	bx, [es:bx+9]	; [es:bx+A_TRACKREADWRITEPACKET.TRWP_TRANSFERADDRESS]
 11258                                  					; Get transfer address
 11259                                  
 11260                                  		; we just trashed our packet address, but we no longer care
 11261                                  
 11262 00000EEC 8C06[3705]              		mov	[xfer_seg], es	; Pass transfer	segment
 11263 00000EF0 07                      		pop	es
 11264                                  
 11265                                  		; Fall into TrackIo
 11266                                  
 11267                                  ; =============== S U B	R O U T	I N E =======================================
 11268                                  
 11269                                  ; 16/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 11270                                  
 11271                                  ; ==========================================================================
 11272                                  ;
 11273                                  ; TrackIo:
 11274                                  ;    performs track read/write/verify
 11275                                  ;
 11276                                  ;   input:
 11277                                  ;      rFlag	- 2 = read
 11278                                  ;		  3 = write
 11279                                  ;		  4 = verify
 11280                                  ;      AX	- Index into track table of first sector to io
 11281                                  ;      CX	- Number of sectors to io
 11282                                  ;      Xfer_Seg:BX - Transfer address
 11283                                  ;      ES:DI	- Pointer to bds
 11284                                  ;      CurTrk	- Current cylinder
 11285                                  ;      CurHd	- Current head
 11286                                  ;
 11287                                  ; ==========================================================================
 11288                                  
 11289                                  ; 16/03/2019 - Retro DOS v4.0
 11290                                  		
 11291                                  		; 19/10/2022
 11292                                  TrackIo:	
 11293                                  					; Procedure `disk' will pop stack to
 11294 00000EF1 8926[3501]              		mov	[spsav], sp	; SpSav	and return if error
 11295 00000EF5 E844F9                  		call	checksingle	; Ensure correct disk is in drv
 11296 00000EF8 803E[3806]01            		cmp	byte [media_set_for_format], 1
 11297                                  					; See if we have already set	disk
 11298 00000EFD 7407                    		jz	short Dptalreadyset ; base table
 11299 00000EFF 50                      		push	ax		; set up tables	and variables for i/o
 11300 00000F00 51                      		push	cx
 11301 00000F01 E896FA                  		call	iosetup
 11302 00000F04 59                      		pop	cx
 11303 00000F05 58                      		pop	ax
 11304                                  Dptalreadyset:				; Point si at the table entry of the			
 11305 00000F06 BE[3B05]                		mov	si, tracktable	; first sector to be io'd
 11306 00000F09 D1E0                    		shl	ax, 1
 11307 00000F0B D1E0                    		shl	ax, 1
 11308 00000F0D 01C6                    		add	si, ax
 11309                                  
 11310                                  		; WE WANT:
 11311                                  		; CX to	be the number of times we have to loop
 11312                                  		; DX to	be the number of sectors we read on each iteration
 11313                                  		
 11314 00000F0F BA0100                  		mov	dx, 1
 11315                                  		; 12/12/2022
 11316 00000F12 26F6452308              		test	byte [es:di+23h], 8
 11317                                  		;test	word [es:di+35], 8 ; [es:di+BDS.flags]
 11318                                  					; good_tracklayout
 11319 00000F17 7402                    		jz	short ionextsector
 11320                                  		
 11321 00000F19 87D1                    		xchg	dx, cx		; HEY! We can read all secs in one blow
 11322                                  ionextsector:				
 11323 00000F1B 51                      		push	cx
 11324 00000F1C 52                      		push	dx
 11325 00000F1D 46                      		inc	si
 11326 00000F1E 46                      		inc	si		; Skip over the	cylinder and head in
 11327                                  					; the track table
 11328 00000F1F AC                      		lodsb			; Get sector ID	from track table
 11329 00000F20 A2[3101]                		mov	[cursec], al
 11330                                  
 11331                                  		; assumptions for a fixed disk multi-track disk	i/o
 11332                                  		; 1). In the input CX (# of sectors to go) to TrackIo,
 11333                                  		;     only CL is valid.
 11334                                  		; 2). Sector size should be set	to 512 bytes.
 11335                                  		; 3). Good track layout
 11336                                  		
 11337                                  		; 12/12/2022
 11338 00000F23 26F6452301              		test	byte [es:di+23h], 1
 11339                                  		;test	word [es:di+35], 1 ; [es:di+BDS.flags]
 11340                                  					; fnon_removable ; Fixed disk?
 11341 00000F28 7414                    		jz	short IoRemovable ; No
 11342                                  		; 12/12/2022
 11343 00000F2A F606[2F05]80            		test	byte [multrk_flag], 80h
 11344                                  		;test	word [multrk_flag], 80h ; MULTI_TRK_ON
 11345                                  						; Allow multi-track operation?
 11346 00000F2F 740D                    		jz	short IoRemovable ; No,don't do that.
 11347 00000F31 8916[2201]              		mov	[seccnt], dx
 11348 00000F35 89D0                    		mov	ax, dx
 11349 00000F37 E81DFB                  		call	Disk
 11350 00000F3A 5A                      		pop	dx
 11351 00000F3B 59                      		pop	cx
 11352 00000F3C F8                      		clc
 11353 00000F3D C3                      		retn
 11354                                  ; ---------------------------------------------------------------------------
 11355                                  
 11356                                  IoRemovable:				
 11357 00000F3E AC                      		lodsb			; Get sector size index	from track
 11358                                  					; table	and save it
 11359 00000F3F 50                      		push	ax
 11360 00000F40 56                      		push	si
 11361 00000F41 1E                      		push	ds		; Save Bios_Data
 11362 00000F42 50                      		push	ax
 11363 00000F43 8A26[2C01]              		mov	ah, [eot]	; Preserve whatever might be in	ah
 11364                                  					; Fetch	EOT while ds-> Bios_Data
 11365 00000F47 C536[2D01]              		lds	si, [dpt]
 11366 00000F4B 884403                  		mov	[si+3],	al	; [si+DISK_PARMS.DISK_SECTOR_SIZ]
 11367 00000F4E 886404                  		mov	[si+4],	ah	; [si+DISK_PARMS.DISK_EOT]
 11368 00000F51 58                      		pop	ax
 11369 00000F52 1F                      		pop	ds
 11370 00000F53 88D0                    		mov	al, dl
 11371 00000F55 A3[2201]                		mov	[seccnt], ax
 11372 00000F58 E8FCFA                  		call	Disk
 11373 00000F5B 5E                      		pop	si		; Advance buffer pointer by adding
 11374                                  					; sector size
 11375 00000F5C 58                      		pop	ax
 11376 00000F5D E81D00                  		call	SectorSizeIndexToSectorSize
 11377 00000F60 01C3                    		add	bx, ax
 11378 00000F62 5A                      		pop	dx
 11379 00000F63 59                      		pop	cx
 11380 00000F64 E2B5                    		loop	ionextsector
 11381 00000F66 803E[3806]01            		cmp	byte [media_set_for_format], 1
 11382                                  		;jz	short NoNeedDone
 11383                                  		; 12/12/2022
 11384 00000F6B 7404                    		je	short NoNeedDone2
 11385 00000F6D E872FA                  		call	done		; set time of last access, and reset
 11386                                  					; entries in Dpt.
 11387                                  NoNeedDone:				
 11388 00000F70 F8                      		clc
 11389                                  NoNeedDone2:
 11390 00000F71 C3                      		retn
 11391                                  
 11392                                  ; =============== S U B	R O U T	I N E =======================================
 11393                                  
 11394                                  ; ---------------------------------------------------------------------------
 11395                                  ;
 11396                                  ; The sector size in bytes needs to be converted to an index value for the ibm
 11397                                  ; rom. (0=>128,1=>256,2=>512,3=>1024). It is assumed that only these values
 11398                                  ; are permissible.
 11399                                  ;
 11400                                  ; On Input   AX contains sector size in bytes
 11401                                  ; On Output  AL Contains index
 11402                                  ; All other registers preserved
 11403                                  ;
 11404                                  ; ---------------------------------------------------------------------------
 11405                                  
 11406                                  SectSizeToSectIndex:	
 11407 00000F72 80FC02                  		cmp	ah, 2		; (0=>128,1=>256,2=>512,3=>1024)
 11408                                  					; examine upper	byte only
 11409 00000F75 7703                    		ja	short OneK
 11410 00000F77 88E0                    		mov	al, ah		; value	in AH is the index!
 11411 00000F79 C3                      		retn
 11412                                  ; ---------------------------------------------------------------------------
 11413                                  
 11414                                  OneK:					
 11415 00000F7A B003                    		mov	al, 3
 11416 00000F7C C3                      		retn
 11417                                  
 11418                                  ; =============== S U B	R O U T	I N E =======================================
 11419                                  
 11420                                  
 11421                                  SectorSizeIndexToSectorSize:
 11422 00000F7D 88C1                    		mov	cl, al
 11423 00000F7F B88000                  		mov	ax, 128
 11424 00000F82 D3E0                    		shl	ax, cl
 11425 00000F84 C3                      		retn
 11426                                  
 11427                                  ; =============== S U B	R O U T	I N E =======================================
 11428                                  
 11429                                  ; 16/10/2022
 11430                                  
 11431                                  ; ---------------------------------------------------------------------------
 11432                                  ;
 11433                                  ; SetDASD
 11434                                  ;
 11435                                  ; Set up the rom for formatting.
 11436                                  ; we have to tell the rom bios what type of disk is in the drive.
 11437                                  ;
 11438                                  ; On Input   - ES:di - Points to bds
 11439                                  ;
 11440                                  ; ---------------------------------------------------------------------------
 11441                                  
 11442                                  		; 19/10/2022
 11443                                  SetDasd:	
 11444 00000F85 803E[3906]01            		cmp	byte [had_format_error], 1 ;
 11445                                  					; See if we've previously set dasd type
 11446 00000F8A 740C                    		jz	short DoSetDasd
 11447                                  		; 10/12/2022
 11448 00000F8C 26F6452380              		test	byte [es:di+23h], 80h
 11449                                  		;test	word [es:di+23h], 80h ; [es:di+BDS.flags]
 11450                                  					; set_dasd_true
 11451 00000F91 744A                    		jz	short DasdHasBeenSet
 11452                                  		; 10/12/2022
 11453 00000F93 268065237F              		and	byte [es:di+23h], 7Fh
 11454                                  		;and	word [es:di+23h], 0FF7Fh ; [es:di+BDS.flags]
 11455                                  					; ~set_dasd_true
 11456                                  DoSetDasd:				
 11457 00000F98 C606[3906]00            		mov	byte [had_format_error], 0 ; Reset it
 11458 00000F9D C606[3B01]50            		mov	byte [gap_patch], 50h ; Format gap for 48tpi disks
 11459 00000FA2 B004                    		mov	al, 4
 11460 00000FA4 26807D2202              		cmp	byte [es:di+22h], 2 ; [es:di+BDS.formfactor]
 11461                                  					; DEV_3INCH720KB
 11462 00000FA9 741A                    		jz	short DoSet
 11463 00000FAB 26807D2201              		cmp	byte [es:di+22h], 1 ; [es:di+BDS.formfactor]
 11464                                  					; DEV_5INCH96TPI
 11465 00000FB0 7404                    		jz	short GotBig
 11466 00000FB2 B001                    		mov	al, 1
 11467 00000FB4 EB0F                    		jmp	short DoSet
 11468                                  ; ---------------------------------------------------------------------------
 11469                                  
 11470                                  GotBig:					
 11471 00000FB6 B002                    		mov	al, 2		; 160/320k in a	1.2 meg	drive
 11472 00000FB8 803E[3706]00            		cmp	byte [mediatype], 0
 11473 00000FBD 7506                    		jnz	short DoSet
 11474                                  		;mov	al, 3		; 1.2meg in a 1.2meg drive
 11475                                  		; 10/12/2022
 11476                                  		;inc	al  ; al = 3
 11477                                  		; 18/12/2022
 11478 00000FBF 40                      		inc	ax  ; al = 3
 11479 00000FC0 C606[3B01]54            		mov	byte [gap_patch], 54h
 11480                                  DoSet:					
 11481 00000FC5 1E                      		push	ds
 11482 00000FC6 56                      		push	si
 11483 00000FC7 8E1E[1A00]              		mov	ds, [zeroseg]	; Point	to interrupt vectors
 11484                                  
 11485 00000FCB C5367800                		lds	si, [DSKADR]
 11486                                  		;lds	si, [78h]	; [DSKADR]  (Int 1Eh)
 11487                                  		;;lds	si, ds:78h		
 11488                                  
 11489 00000FCF C644090F                		mov	byte [si+9], 0Fh ;
 11490                                  					; [si+DISK_PARMS.DISK_HEAD_STTL]
 11491 00000FD3 5E                      		pop	si
 11492 00000FD4 1F                      		pop	ds
 11493 00000FD5 B417                    		mov	ah, 17h
 11494 00000FD7 268A5504                		mov	dl, [es:di+4]
 11495 00000FDB CD13                    		int	13h		; DISK - DISK -	SET TYPE (AT,XT2,XT286,CONV,PS
 11496                                  					; AL = disk type AL = 03h - high-capacity disk in high-capacity	drive
 11497                                  DasdHasBeenSet:				
 11498 00000FDD 268A6513                		mov	ah, [es:di+13h]	; [es:di+BDS.secpertrack]
 11499 00000FE1 8826[3701]              		mov	[formt_eot], ah
 11500 00000FE5 C3                      		retn
 11501                                  
 11502                                  ; =============== S U B	R O U T	I N E =======================================
 11503                                  
 11504                                  ; 16/10/2022
 11505                                  
 11506                                  ; ---------------------------------------------------------------------------
 11507                                  ;
 11508                                  ; Set Media Type for Format
 11509                                  ; Performs the int 13 with ah = 18h to see if the medium described in the
 11510                                  ; BPB area in the BDS can be handled by the rom.
 11511                                  ; On Input, ES:DI -> current BDS.
 11512                                  ; The status of the operation is returned in AL
 11513                                  ;
 11514                                  ;	- 0 - if the support is available,and the combination is valid.
 11515                                  ;	- 1 - no rom support
 11516                                  ;	- 2 - illegal combination
 11517                                  ;	- 3 - no media present (rom support exists but cannot determine now)
 11518                                  ;
 11519                                  ; Flags also may be altered. All other registers preserved.
 11520                                  ; If the call to rom returns no error,then the current Dpt is "replaced" by
 11521                                  ; the one returned by the rom. This is Done by changing the pointer in [Dpt]
 11522                                  ; to the one returned. the original pointer to the disk base table is stored
 11523                                  ; in TempDpt, until it is restored.
 11524                                  ;
 11525                                  ; ---------------------------------------------------------------------------
 11526                                  
 11527                                  		; 19/10/2022
 11528                                  SetMediaForFormat:	
 11529 00000FE6 51                      		push	cx
 11530 00000FE7 52                      		push	dx
 11531                                  
 11532                                  		; If we have a format error, then do not change Dpt, TempDpt.
 11533                                  		; but we need to call int 13h, ah=18h again.
 11534                                  
 11535 00000FE8 803E[3906]01            		cmp	byte [had_format_error], 1
 11536 00000FED 7425                    		jz	short SkipSaveDskAdr
 11537 00000FEF 30C0                    		xor	al, al		; If already done return 0
 11538 00000FF1 803E[3806]01            		cmp	byte [media_set_for_format], 1
 11539 00000FF6 7502                    		jnz	short DoSetMediaForFormat
 11540 00000FF8 EB7F                    		jmp	SetMediaRet	; Media	already	set
 11541                                  ; ---------------------------------------------------------------------------
 11542                                  
 11543                                  DoSetMediaForFormat:			
 11544 00000FFA 06                      		push	es
 11545 00000FFB 56                      		push	si
 11546 00000FFC 8E06[1A00]              		mov	es, [zeroseg]	; Point to interrupt vectors
 11547 00001000 26C4367800              		les	si, [es:DSKADR]
 11548                                  		;les	si, es:78h	; [es:DSKADR]
 11549                                  					; Get pointer to disk base table
 11550 00001005 8936[2D01]              		mov	[dpt], si
 11551 00001009 8C06[2F01]              		mov	[dpt+2], es	; Save pointer to table
 11552                                  
 11553                                  		; Initialize the head settle time to 0Fh. See the offsets
 11554                                  		; given in dskprm.inc.
 11555                                  
 11556 0000100D 26C644090F              		mov	byte [es:si+9], 0Fh ; [es:si+DISK_PARMS.DISK_HEAD_STTL]
 11557 00001012 5E                      		pop	si
 11558 00001013 07                      		pop	es
 11559                                  
 11560                                  SkipSaveDskAdr:				
 11561 00001014 268B4D25                		mov	cx, [es:di+25h]	; [es:di+BDS.cylinders]
 11562 00001018 49                      		dec	cx
 11563 00001019 80E503                  		and	ch, 3
 11564 0000101C D0CD                    		ror	ch, 1
 11565 0000101E D0CD                    		ror	ch, 1
 11566 00001020 86E9                    		xchg	ch, cl
 11567 00001022 260A4D13                		or	cl, [es:di+13h]	; [es:di+BDS.secpertrack]
 11568 00001026 268A5504                		mov	dl, [es:di+4]	; [es:di+BDS.drivenum]
 11569 0000102A 06                      		push	es
 11570 0000102B 1E                      		push	ds
 11571 0000102C 56                      		push	si
 11572 0000102D 57                      		push	di
 11573 0000102E B418                    		mov	ah, 18h
 11574 00001030 CD13                    		int	13h		; DISK - SET MEDIA TYPE	FOR FORMAT (AT model 3x9,XT2,XT286,PS)
 11575                                  					; DL = drive number, CH	= lower	8 bits of number of tracks, CL = sectors per track
 11576 00001032 7233                    		jb	short FormaStatErr
 11577 00001034 803E[3906]01            		cmp	byte [had_format_error], 1
 11578 00001039 7425                    		jz	short skip_disk_base_setting
 11579 0000103B 06                      		push	es		; Save segment returned	by the rom
 11580 0000103C 8E06[1A00]              		mov	es, [zeroseg]	; Point	to interrupt vector segment
 11581 00001040 26C4367800              		les	si, [es:DSKADR]
 11582                                  		;les	si, es:78h	; [es:DSKADR] (Int 1Eh)
 11583                                  					; Get current disk base	table
 11584 00001045 8936[3A06]              		mov	[tempdpt], si
 11585 00001049 8C06[3C06]              		mov	[tempdpt+2], es ; Save it
 11586 0000104D 8E06[1A00]              		mov	es, [zeroseg]
 11587                                  		;mov	es:78h,	di
 11588 00001051 26893E7800              		mov	[es:DSKADR], di
 11589                                  		;pop	word ptr es:7Ah	; replace with one returned by rom
 11590 00001056 268F067A00              		pop	word [es:DSKADR+2]
 11591 0000105B C606[3806]01            		mov	byte [media_set_for_format], 1
 11592                                  skip_disk_base_setting:			
 11593 00001060 30C0                    		xor	al, al		; Legal	combination + rom support code
 11594                                  		;mov	ds:had_format_error, al	; Reset	the flag
 11595 00001062 A2[3906]                		mov	[had_format_error], al
 11596 00001065 EB0E                    		jmp	short PopStatRet
 11597                                  ; ---------------------------------------------------------------------------
 11598                                  
 11599                                  FormaStatErr:
 11600                                  		; 10/12/2022
 11601 00001067 B003                    		mov	al, 3
 11602                                  				
 11603 00001069 80FC0C                  		cmp	ah, 0Ch		; DSK_ILLEGAL_COMBINATION
 11604                                  					; Illegal combination =	0Ch
 11605 0000106C 7406                    		jz	short FormatStatIllegalComb
 11606 0000106E 80FC80                  		cmp	ah, 80h		; DSK_TIMEOUT_ERR
 11607 00001071 7402                    		jz	short FormatStatTimeOut
 11608                                  		; 10/12/2022
 11609                                  		;dec	al
 11610                                  		; 18/12/2022
 11611 00001073 48                      		dec	ax
 11612                                  		; al = 2
 11613                                  		;mov	al, 1		; Function not supported.
 11614                                  		;jmp	short PopStatRet
 11615                                  ; ---------------------------------------------------------------------------
 11616                                  
 11617                                  FormatStatIllegalComb:
 11618                                  		; 10/12/2022
 11619                                  		;dec	al	; 3 -> 2 or 2 -> 1
 11620                                  		; 18/12/2022
 11621 00001074 48                      		dec	ax
 11622                                  		; al = 2				
 11623                                  		;mov	al, 2		; Function supported, but
 11624                                  					; Illegal sect/trk,trk combination.
 11625                                  		; 10/12/2022
 11626                                  		;jmp	short PopStatRet
 11627                                  ; ---------------------------------------------------------------------------
 11628                                  
 11629                                  FormatStatTimeOut:			
 11630                                  		; 10/12/2022
 11631                                  		; al = 3
 11632                                  		;mov	al, 3		; Function supported, but
 11633                                  					; Media	not present.
 11634                                  PopStatRet:				
 11635 00001075 5F                      		pop	di
 11636 00001076 5E                      		pop	si
 11637 00001077 1F                      		pop	ds
 11638 00001078 07                      		pop	es
 11639                                  SetMediaRet:				
 11640 00001079 5A                      		pop	dx
 11641 0000107A 59                      		pop	cx
 11642 0000107B C3                      		retn
 11643                                  
 11644                                  ; =============== S U B	R O U T	I N E =======================================
 11645                                  
 11646                                  ; 16/10/2022
 11647                                  
 11648                                  ; ---------------------------------------------------------------------------
 11649                                  ;
 11650                                  ; RESET THE DRIVE
 11651                                  ;
 11652                                  ; we also set [Step_Drv] to -1 to force the main disk routine to use the
 11653                                  ; slow head settle time for the next operation. this is because the reset
 11654                                  ; operation moves the head to cylinder 0,so we need to do a seek the next
 11655                                  ; time around - there is a problem with 3.5" drives in that the head does
 11656                                  ; not settle down in time,even for read operations!!
 11657                                  ;
 11658                                  ; ---------------------------------------------------------------------------
 11659                                  
 11660                                  ResetDisk:	
 11661 0000107C 50                      		push	ax
 11662 0000107D 803E[3806]01            		cmp	byte [media_set_for_format], 1
 11663                                  					; Reset while formatting?
 11664 00001082 7505                    		jnz	short ResetDisk_cont
 11665                                  					; Then verify operation in "fmt & vrfy"
 11666 00001084 C606[3906]01            		mov	byte [had_format_error], 1 ; Might have failed.
 11667                                  ResetDisk_cont:				
 11668 00001089 30E4                    		xor	ah, ah		; So signals that we had a format error
 11669 0000108B CD13                    		int	13h		; DISK - RESET DISK SYSTEM
 11670                                  					; DL = drive (if bit 7 is set both hard	disks and floppy disks reset)
 11671 0000108D C606[7600]FF            		mov	byte [step_drv], 0FFh ; -1
 11672                                  					; Zap up the speed
 11673 00001092 58                      		pop	ax
 11674 00001093 C3                      		retn
 11675                                  
 11676                                  ; =============== S U B	R O U T	I N E =======================================
 11677                                  
 11678                                  ; 16/10/2022
 11679                                  
 11680                                  ; ---------------------------------------------------------------------------
 11681                                  ;
 11682                                  ; This routine sets up the drive parameter table with the values needed for
 11683                                  ; format,does an int 13. values in Dpt are restored after a verify is done.
 11684                                  ;
 11685                                  ; on entry  -	ES:DI - points to bds for the drive
 11686                                  ;		Xfer_Seg:BX - points to trkbuf
 11687                                  ;		AL    - number of sectors
 11688                                  ;		AH    - int 13 function code
 11689                                  ;		CL    - sector number for verify
 11690                                  ;		DS    - Bios_Data
 11691                                  ;
 11692                                  ; ON EXIT   -	DS,DI,ES,BX remain unchanged.
 11693                                  ;		AX and flags are the results of the int 13
 11694                                  ;
 11695                                  ; ---------------------------------------------------------------------------
 11696                                  
 11697                                  		; 19/10/2022
 11698                                  ToRom:	
 11699 00001094 53                      		push	bx
 11700 00001095 56                      		push	si
 11701                                  
 11702                                  		; Compaq bug fix - check whether we are using new ROM
 11703                                  		; functionality to set up format, not merely if it exists.
 11704                                  		; This was formerly a check against [new_rom]
 11705                                  
 11706 00001096 F606[3806]01            		test	byte [media_set_for_format], 1
 11707 0000109B 7536                    		jnz	short GotValidDpt
 11708 0000109D 50                      		push	ax
 11709 0000109E 06                      		push	es		; Save bds segment
 11710 0000109F 26807D2202              		cmp	byte [es:di+22h], 2 ; [es:di+BDS.formfactor]
 11711                                  					; ffSmall ; is it a 3.5" drive?
 11712 000010A4 9C                      		pushf			; (Save	the cmp	result)
 11713 000010A5 8E06[1A00]              		mov	es, [zeroseg]
 11714                                  		;les	si, es:78h	; Get pointer to disk base table
 11715 000010A9 26C4367800              		les	si, [es:DSKADR]
 11716                                  		;mov	word ptr ds:dpt, si
 11717                                  		;mov	word ptr ds:dpt+2, es ;	 Save pointer to table
 11718 000010AE 8936[2D01]              		mov	[dpt], si
 11719 000010B2 8C06[2F01]              		mov	[dpt+2], es	; Save pointer to table
 11720                                  		
 11721 000010B6 A0[3701]                		mov	al, [formt_eot]
 11722 000010B9 26884404                		mov	[es:si+4], al	; [es:si+DISK_PARMS.DISK_EOT]
 11723 000010BD A0[3B01]                		mov	al, [gap_patch]
 11724 000010C0 26884407                		mov	[es:si+7], al	; [es:si+DISK_PARMS.DISK_FORMT_GAP]
 11725                                  					; Important for	format
 11726 000010C4 26C644090F              		mov	byte [es:si+9], 0Fh ; [es:si+DISK_PARMS.DISK_HEAD_STTL]
 11727                                  					; Assume we are	doing a	seek operation
 11728                                  					; Setup	motor start correctly for 3.5" drives
 11729 000010C9 9D                      		popf			; Get result of	earlier	cmp
 11730 000010CA 7505                    		jnz	short MotorStrtOK
 11731 000010CC 26C6440A04              		mov	byte [es:si+0Ah], 4 ; [es:si+DISK_PARMS.DISK_MOTOR_STRT]
 11732                                  MotorStrtOK:				
 11733 000010D1 07                      		pop	es		; Restore bds segment
 11734 000010D2 58                      		pop	ax
 11735                                  GotValidDpt:				
 11736 000010D3 8B16[3901]              		mov	dx, [trknum]	; Set track number
 11737 000010D7 88D5                    		mov	ch, dl		; Set low 8 bits in ch
 11738 000010D9 268A5504                		mov	dl, [es:di+4]	; Set drive number
 11739 000010DD 8A36[3801]              		mov	dh, [hdnum]	; Set head number
 11740 000010E1 06                      		push	es		; Save bds segment
 11741 000010E2 8E06[3705]              		mov	es, [xfer_seg]
 11742 000010E6 CD13                    		int	13h		; DISK -
 11743 000010E8 07                      		pop	es		; Restore bds segment
 11744 000010E9 5E                      		pop	si
 11745 000010EA 5B                      		pop	bx
 11746 000010EB C3                      		retn
 11747                                  
 11748                                  ; ---------------------------------------------------------------------------
 11749                                  
 11750                                  ; 16/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 11751                                  
 11752                                  ; BIOSCODE:1124h (MSDOS 6.21, IO.SYS)
 11753                                  
 11754                                  ; ==========================================================================
 11755                                  ;
 11756                                  ; get the owner of the physical drive represented by the logical drive in al.
 11757                                  ; the assumption is that we **always** keep track of the owner of a drive!!
 11758                                  ; if this is not the case, the system may hang, just following the linked list.
 11759                                  ;
 11760                                  ; ==========================================================================
 11761                                  
 11762                                  		; 19/10/2022
 11763                                  ioctl_getown:
 11764 000010EC E8DCF3                  		call	SetDrive
 11765 000010EF 268A4504                		mov	al, [es:di+4]	; [es:di+BDS.drivenum]
 11766                                  					; Get physical drive number
 11767 000010F3 C43E[1901]              		les	di, [start_bds] ; Get start of bds chain
 11768                                  ownloop:				
 11769 000010F7 26384504                		cmp	[es:di+4], al	; [es:di+BDS.drivenum]
 11770 000010FB 7507                    		jnz	short getnextBDS
 11771                                  		; 10/12/2022
 11772 000010FD 26F6452320              		test	byte [es:di+23h], 20h
 11773                                  		;test	word [es:di+23h], 20h ; [es:di+BDS.flags]
 11774                                  					; fi_own_physical
 11775 00001102 7515                    		jnz	short exitown
 11776                                  getnextBDS:				
 11777 00001104 26C43D                  		les	di, [es:di]	; [es:di+BDS.link]
 11778 00001107 EBEE                    		jmp	short ownloop
 11779                                  ; ---------------------------------------------------------------------------
 11780                                  
 11781                                  ; ==========================================================================
 11782                                  ;
 11783                                  ; set the ownership of the physical drive represented by the logical drive
 11784                                  ; in al to al.
 11785                                  ;
 11786                                  ; ==========================================================================
 11787                                  
 11788                                  		; 19/10/2022
 11789                                  ioctl_setown:
 11790 00001109 E8BFF3                  		call	SetDrive
 11791 0000110C C606[7A00]01            		mov	byte [fsetowner], 1
 11792                                  					; set flag for CheckSingle to look at.
 11793 00001111 E828F7                  		call	checksingle
 11794 00001114 C606[7A00]00            		mov	byte [fsetowner], 0
 11795                                  					; set ownership	of drive reset flag
 11796                                  		; Fall into ExitOwn
 11797                                  
 11798                                  ; ==========================================================================
 11799                                  ;
 11800                                  ; if there is only one logical drive assigned to this physical drive, return
 11801                                  ; 0 to user to indicate this. Enter with ES:di -> the owner's bds.
 11802                                  ;
 11803                                  ; ==========================================================================
 11804                                  
 11805                                  exitown:				
 11806 00001119 30C9                    		xor	cl, cl
 11807                                  		; 12/12/2022
 11808 0000111B 26F6452310              		test	byte [es:di+23h], 10h
 11809                                  		;test	word [es:di+23h], 10h ; [es:di+BDS.flags]
 11810                                  					; fi_am_mult
 11811 00001120 7406                    		jz	short exitnomult
 11812 00001122 268A4D05                		mov	cl, [es:di+5]	; [es:di+BDS.drivelet]
 11813                                  					; Get logical drive number
 11814                                  					; Get it 1-based
 11815 00001126 FEC1                    		inc	cl
 11816                                  exitnomult:				
 11817 00001128 C51E[1200]              		lds	bx, [ptrsav]
 11818 0000112C 884F01                  		mov	[bx+1],	cl	; [bx+unit]
 11819                                  					; Exit normal termination
 11820                                  		; 12/12/2022
 11821                                  		; cf=0
 11822                                  		;clc
 11823 0000112F C3                      		retn
 11824                                  
 11825                                  ; =============== S U B	R O U T	I N E =======================================
 11826                                  
 11827                                  ; 16/10/2022
 11828                                  
 11829                                  ; ---------------------------------------------------------------------------
 11830                                  ;
 11831                                  ; moves the old Dpt that had been saved in TempDpt back to Dpt. this is done
 11832                                  ; only if the first byte of TempDpt is not -1.
 11833                                  ; all registers (including flags) are preserved.
 11834                                  ;
 11835                                  ; ---------------------------------------------------------------------------
 11836                                  
 11837                                  		; 19/10/2022
 11838                                  RestoreOldDpt:
 11839                                  		; if we have already restored the disk base table earlier,
 11840                                  		; do not do it again.
 11841                                  	
 11842 00001130 50                      		push	ax
 11843 00001131 30C0                    		xor	al, al
 11844 00001133 A2[3906]                		mov	[had_format_error], al	; Reset flag and 
 11845 00001136 8606[3806]              		xchg	al, [media_set_for_format] ; get current flag setting
 11846 0000113A 08C0                    		or	al, al
 11847 0000113C 741E                    		jz	short DontRestore
 11848 0000113E 56                      		push	si
 11849 0000113F 1E                      		push	ds
 11850 00001140 06                      		push	es
 11851 00001141 C536[3A06]              		lds	si, [tempdpt]
 11852                                  
 11853                                  		; 17/10/2022
 11854 00001145 2E8E06[3000]            		mov	es, [cs:BIOSDATAWORD]
 11855                                  		;mov	es, word ptr cs:BIOSDATAWORD ; [cs:Bios_Data_Word]
 11856 0000114A 268E06[1A00]            		mov	es, [es:zeroseg]
 11857                                  		;mov	es, es:zeroseg	; CAS -- bleeeech!
 11858                                  
 11859                                  		;mov	es:78h,	si	; [es:DSKADR]
 11860 0000114F 2689367800              		mov	[es:DSKADR], si
 11861                                  		;mov	word ptr es:7Ah, ds ; [es:DSKADR+2]
 11862 00001154 268C1E7A00              		mov	[es:DSKADR+2], ds
 11863 00001159 07                      		pop	es
 11864 0000115A 1F                      		pop	ds
 11865 0000115B 5E                      		pop	si
 11866                                  DontRestore:				
 11867 0000115C 58                      		pop	ax
 11868                                  		; 12/12/2022
 11869                                  		; cf=0
 11870                                  		;clc			;  Clear carry
 11871 0000115D C3                      		retn
 11872                                  
 11873                                  ; ---------------------------------------------------------------------------
 11874                                  
 11875                                  ; 16/10/2022
 11876                                  
 11877                                  ; ==========================================================================
 11878                                  ;	get media id
 11879                                  ; ==========================================================================
 11880                                  ;
 11881                                  ; FUNCTION: get the volume label,the system id and the serial number from
 11882                                  ;	    the media that has the extended boot record.
 11883                                  ;	    for the conventional media,this routine will return "unknown
 11884                                  ;	    media type" error to dos.
 11885                                  ;
 11886                                  ; INPUT :   ES:di -> bds table for this drive.
 11887                                  ;
 11888                                  ; OUTPUT:   the request packet filled with the information,if not carry.
 11889                                  ;	    if carry set,then al contains the device driver error number
 11890                                  ;	    that will be returned to dos.
 11891                                  ;	    register DS,DX,AX,CX,DI,SI destroyed.
 11892                                  ;
 11893                                  ; SUBROUTINES TO BE CALLED:
 11894                                  ;	BootIo:NEAR
 11895                                  ;
 11896                                  ; LOGIC:
 11897                                  ;	to recognize the extended boot record,this logic will actually
 11898                                  ;	access the boot sector even if it is a hard disk.
 11899                                  ;	note:the valid extended bpb is recognized by looking at the mediabyte
 11900                                  ;	field of bpb and the extended boot signature.
 11901                                  ;
 11902                                  ; {
 11903                                  ;	get logical drive number from bds table;
 11904                                  ;	rFlag = read operation;
 11905                                  ;	BootIo;		 /*get the media boot record into the buffer
 11906                                  ;	if (no error) then
 11907                                  ;	     if (extended boot record) then
 11908                                  ;		{ set volume label,volume serial number and system id
 11909                                  ;		  of the request packet to those of the boot record;
 11910                                  ;		};
 11911                                  ;	     else		  /*not an extended bpb */
 11912                                  ;		{ set register al to "unknown media.." error code;
 11913                                  ;		  set carry bit;
 11914                                  ;		};
 11915                                  ;	else
 11916                                  ;	     ret;	/*already error code is set in the register al
 11917                                  ;
 11918                                  ; ==========================================================================
 11919                                  
 11920                                  ;size_of_EXT_BOOT_SERIAL equ 4
 11921                                  ;;size_of_EXT_BOOT_VOL_LABEL equ 11
 11922                                  ;;size_of_EXT_SYSTEM_ID equ 8
 11923                                  
 11924                                  		; 19/10/2022
 11925                                  GetMediaId:
 11926 0000115E E89F00                  		call	ChangeLineChk
 11927 00001161 268A4505                		mov	al, [es:di+5]	; [es:di+BDS.drivelet] ; Logical drive number
 11928 00001165 C606[2001]02            		mov	byte [rflag], 2	; Read operation
 11929 0000116A E87B00                  		call	BootIo		; Read boot sector into	DiskSector
 11930 0000116D 7224                    		jb	short IOCtl_If1
 11931                                  					; Valid? (0F0h-0FFh?)
 11932 0000116F 803E[6301]F0            		cmp	byte [disksector+15h], 0F0h
 11933                                  					; [disksector+EXT_BOOT.BPB+EBPB.MEDIADESCRIPTOR]
 11934 00001174 721A                    		jb	short IOCtl_If2	; brif not valid (0F0h - 0FFh)
 11935                                  		; 10/12/2022
 11936 00001176 BE[7401]                		mov	si, disksector+26h
 11937 00001179 803C29                  		cmp	byte [si], 29h
 11938                                  		;cmp	byte [disksector+26h], 29h ; [disksector+EXT_BOOT.SIG]
 11939                                  					; EXT_BOOT_SIGNATURE
 11940 0000117C 7512                    		jnz	short IOCtl_If2	; not extended boot record
 11941 0000117E C43E[1200]              		les	di, [ptrsav]	; es:di	points to request header
 11942 00001182 26C47F13                		les	di, [es:bx+19]	; [es:bx+IOCTL_REQ.GENERICIOCTL_PACKET]
 11943                                  		; 10/12/2022
 11944 00001186 46                      		inc	si
 11945                                  		; si = disksector+27h 
 11946                                  		;mov	si, disksector+27h ; disksector+EXT_BOOT.SERIAL
 11947 00001187 83C702                  		add	di, 2		; A_MEDIA_ID_INFO.MI_SERIAL
 11948 0000118A B91700                  		mov	cx, 23		; size_of_EXT_BOOT_SERIAL
 11949                                  					; L+size_of_EXT_BOOT_VOL_LABEL
 11950                                  					; +size_of_EXT_SYSTEM_ID
 11951 0000118D F3A4                    		rep movsb		; Move from Bios_Data into request packet
 11952                                  	
 11953                                  		; 10/12/2022
 11954                                  		; cf = 0
 11955                                  		;clc
 11956                                  
 11957 0000118F C3                      		retn
 11958                                  ; ---------------------------------------------------------------------------
 11959                                  
 11960                                  IOCtl_If2:				
 11961 00001190 B007                    		mov	al, 7		; error_unknown_media
 11962 00001192 F9                      		stc
 11963                                  IOCtl_If1:				
 11964 00001193 C3                      		retn
 11965                                  ; ---------------------------------------------------------------------------
 11966                                  
 11967                                  ; 16/10/2022
 11968                                  
 11969                                  ; ==========================================================================
 11970                                  ;  set media id
 11971                                  ; ==========================================================================
 11972                                  
 11973                                  ; function: set the volume label, the system id and the serial number of
 11974                                  ;	    the media that has the extended boot record.
 11975                                  ;	    for the conventional media, this routine will return "unknown
 11976                                  ;	    media.." error to dos.
 11977                                  ;	    this routine will also set the corresponding informations in
 11978                                  ;	    the bds table.
 11979                                  ;
 11980                                  ; input :   ES:di -> bds table for this drive.
 11981                                  ;
 11982                                  ; output:   the extended boot record in the media will be set according to
 11983                                  ;	    the request packet.
 11984                                  ;	    if carry set, then al contains the device driver error number
 11985                                  ;	    that will be returned to dos.
 11986                                  ;
 11987                                  ; subroutines to be called:
 11988                                  ;	BootIo:NEAR
 11989                                  ;
 11990                                  ; logic:
 11991                                  ;
 11992                                  ; {
 11993                                  ;	get drive_number from bds;
 11994                                  ;	rFlag = "read operation";
 11995                                  ;	BootIo;
 11996                                  ;	if (no error) then
 11997                                  ;	     if (extended boot record) then
 11998                                  ;		{ set volume label,volume serial number and system id
 11999                                  ;		  of the boot record to those of the request packet;
 12000                                  ;		  rFlag = "write operation";
 12001                                  ;		  get drive number from bds;
 12002                                  ;		  BootIo;	  /*write it back*/
 12003                                  ;		};
 12004                                  ;	     else		  /*not an extended bpb */
 12005                                  ;		{ set register al to "unknown media.." error code;
 12006                                  ;		  set carry bit;
 12007                                  ;		  ret;	 /*return back to caller */
 12008                                  ;		};
 12009                                  ;	else
 12010                                  ;	     ret;		 /*already error code is set */
 12011                                  ;
 12012                                  ; ==========================================================================
 12013                                  
 12014                                  		; 19/10/2022
 12015                                  SetMediaId:
 12016 00001194 E86900                  		call	ChangeLineChk
 12017 00001197 268A4505                		mov	al, [es:di+5]	; [es:di+BDS.drivelet]
 12018                                  					; Logical drive	number
 12019 0000119B 88C2                    		mov	dl, al
 12020 0000119D C606[2001]02            		mov	byte [rflag], 2	; romread
 12021 000011A2 52                      		push	dx
 12022 000011A3 E84200                  		call	BootIo		; Read boot sec	to Bios_Data:DiskSector
 12023 000011A6 5A                      		pop	dx
 12024 000011A7 723E                    		jb	short IOCtl_If6
 12025                                  					; Valid? (0F0h-0FFh?)
 12026 000011A9 803E[6301]F0            		cmp	byte [disksector+15h], 0F0h
 12027                                  					; [disksector+EXT_BOOT.BPB+EBPB.MEDIADESCRIPTOR]
 12028 000011AE 7234                    		jb	short IOCtl_If7	; Brif not
 12029 000011B0 803E[7401]29            		cmp	byte [disksector+26h], 29h ; [disksector+EXT_BOOT.SIG]
 12030                                  					; EXT_BOOT_SIGNATURE
 12031 000011B5 752D                    		jnz	short IOCtl_If7	; not extended boot record
 12032 000011B7 06                      		push	es		; Save BDS pointer
 12033 000011B8 57                      		push	di
 12034 000011B9 1E                      		push	ds		; Point	ES To boot record
 12035 000011BA 07                      		pop	es
 12036 000011BB BF[7501]                		mov	di, disksector+27h ; disksector+EXT_BOOT.SERIAL
 12037 000011BE C536[1200]              		lds	si, [ptrsav]	; ds:si	points to request header.
 12038 000011C2 C57413                  		lds	si, [si+19]	; [si+IOCTL_REQ.GENERICIOCTL_PACKET]
 12039 000011C5 83C602                  		add	si, 2		; A_MEDIA_ID_INFO.MI_SERIAL
 12040 000011C8 B91700                  		mov	cx, 23		; size_of_EXT_BOOT_SERIAL
 12041                                  					; +size_of_EXT_BOOT_VOL_LABEL
 12042                                  					; +size_of_EXT_SYSTEM_ID
 12043 000011CB F3A4                    		rep movsb
 12044 000011CD 06                      		push	es		; point	ds back	to Bios_Data
 12045 000011CE 1F                      		pop	ds
 12046 000011CF 5F                      		pop	di		; restore bds pointer
 12047 000011D0 07                      		pop	es
 12048 000011D1 E864F5                  		call	mov_media_ids	; update the bds media id info.
 12049 000011D4 88D0                    		mov	al, dl
 12050 000011D6 C606[2001]03            		mov	byte [rflag], 3	; romwrite
 12051 000011DB E80A00                  		call	BootIo		; write	it back.
 12052 000011DE C606[1E01]FF            		mov	byte [tim_drv], 0FFh
 12053                                  					; make sure chk_media check the driver
 12054                                  					; return with error code from BootIo
 12055 000011E3 C3                      		retn
 12056                                  ; ---------------------------------------------------------------------------
 12057                                  
 12058                                  IOCtl_If7:				
 12059 000011E4 B007                    		mov	al, 7		; error_unknown_media
 12060 000011E6 F9                      		stc
 12061                                  IOCtl_If6:				
 12062 000011E7 C3                      		retn
 12063                                  
 12064                                  ; =============== S U B	R O U T	I N E =======================================
 12065                                  
 12066                                  ; 16/10/2022
 12067                                  
 12068                                  ; ---------------------------------------------------------------------------
 12069                                  ;	BootIo
 12070                                  ; ---------------------------------------------------------------------------
 12071                                  ;
 12072                                  ; function: read/write the boot record into boot sector.
 12073                                  ;
 12074                                  ; input :
 12075                                  ;	    al=logical drive number
 12076                                  ;	    rFlag = operation (read/write)
 12077                                  ;
 12078                                  ; output:   for read operation,the boot record of the drive specified in bds
 12079                                  ;	    be read into the DiskSector buffer.
 12080                                  ;	    for write operation,the DiskSector buffer image will be written
 12081                                  ;	    to the drive specified in bds.
 12082                                  ;	    if carry set,then al contains the device driver error number
 12083                                  ;	    that will be returned to dos.
 12084                                  ;	    AX,CX,DX register destroyed.
 12085                                  ;	    if carry set,then al will contain the error code from DiskIO.
 12086                                  ;
 12087                                  ; subroutines to be called:
 12088                                  ;	DiskIO:NEAR
 12089                                  ;
 12090                                  ; logic:
 12091                                  ;
 12092                                  ; {
 12093                                  ;	first_sector = 0;	 /*logical sector 0 is the boot sector */
 12094                                  ;	sectorcount = 1;	 /*read 1 sector only */
 12095                                  ;	buffer = DiskSector;	 /*read it into the DiskSector buffer */
 12096                                  ;	call DiskIO (rFlag,drive_number,first_sector,sectorcount,buffer);
 12097                                  ; }
 12098                                  ; ==========================================================================
 12099                                  
 12100                                  		; 19/10/2022
 12101                                  BootIo:	
 12102 000011E8 06                      		push	es
 12103 000011E9 57                      		push	di
 12104 000011EA 53                      		push	bx
 12105 000011EB 1E                      		push	ds
 12106 000011EC 07                      		pop	es		; Point ES: to Bios_Data
 12107                                  
 12108                                  		; Call DiskIO to read/write the boot sec. The parameters which
 12109                                  		; need to be initialized for this subroutine out here are
 12110                                  		; - Transfer address to Bios_Data:DiskSector
 12111                                  		; - Low sector needs to be initalized to 0. this is a reg. param
 12112                                  		; - Hi sector in [Start_Sec_H] needs to be initialised to 0.
 12113                                  		; - Number of sectors <-- 1
 12114                                  
 12115 000011ED BF[4E01]                		mov	di, disksector	; es:di -> transfer address
 12116 000011F0 31D2                    		xor	dx, dx		; First	sector (h) -> 0
 12117 000011F2 8916[2B05]              		mov	[start_sec_h], dx ; Start sector (h) -> 0
 12118 000011F6 B90100                  		mov	cx, 1
 12119 000011F9 E8CEF6                  		call	diskio
 12120 000011FC 5B                      		pop	bx
 12121 000011FD 5F                      		pop	di
 12122 000011FE 07                      		pop	es
 12123 000011FF C3                      		retn
 12124                                  
 12125                                  ; =============== S U B	R O U T	I N E =======================================
 12126                                  
 12127                                  ; 16/10/2022
 12128                                  
 12129                                  ; ---------------------------------------------------------------------------
 12130                                  ;	ChangeLineChk
 12131                                  ; ---------------------------------------------------------------------------
 12132                                  ;
 12133                                  ; when the user calls get/set media id call before dos establishes the media
 12134                                  ; by calling "media_chk",the change line activity of the drive is going to be
 12135                                  ; lost.	this routine will check the change line activity and will save the
 12136                                  ; history in the flags.
 12137                                  ;
 12138                                  ; FUNCTION: check the change line error activity
 12139                                  ;
 12140                                  ; INPUT :  ES:di -> bds table.
 12141                                  ;
 12142                                  ; OUTPUT:   flag in bds table will be updated if change line occurs.
 12143                                  ;
 12144                                  ; SUBROUTINES TO BE CALLED:
 12145                                  ;	Set_Changed_DL
 12146                                  ;
 12147                                  ; ---------------------------------------------------------------------------
 12148                                  
 12149                                  ChangeLineChk:	
 12150 00001200 268A5504                		mov	dl, [es:di+4]	; [es:di+BDS.drivenum]
 12151 00001204 08D2                    		or	dl, dl		; Fixed	disk?
 12152 00001206 7821                    		js	short ChangeLnChkRet ; Yes, skip it.
 12153                                  		; 12/12/2022
 12154 00001208 26F6452304              		test	byte [es:di+23h], 4
 12155                                  		;test	word [es:di+23h], 4 ; [es:di+BDS.flags]
 12156                                  					; return_fake_bpb
 12157 0000120D 751A                    		jnz	short ChangeLnChkRet
 12158 0000120F 803E[7700]01            		cmp	byte [fhave96], 1	; This rom support change line?
 12159 00001214 7513                    		jnz	short ChangeLnChkRet
 12160 00001216 E8F806                  		call	haschange	; This drive support change line?
 12161 00001219 740E                    		jz	short ChangeLnChkRet ; Do nothing
 12162                                  
 12163                                  		; Execute the rom disk interrupt to check changeline activity.
 12164                                  
 12165 0000121B B416                    		mov	ah, 16h
 12166 0000121D CD13                    		int	13h		; DISK - FLOPPY	DISK - CHANGE OF DISK STATUS (AT,XT2,XT286,CONV,PS)
 12167                                  					; DL = drive to	check
 12168                                  					; Return: AH = disk change status
 12169 0000121F 7308                    		jnb	short ChangeLnChkRet
 12170 00001221 53                      		push	bx
 12171 00001222 BB4000                  		mov	bx, 40h		; fchanged
 12172                                  					; Update flag in BDS for this
 12173                                  					; physical drive
 12174 00001225 E8C206                  		call	set_changed_dl
 12175 00001228 5B                      		pop	bx
 12176                                  ChangeLnChkRet:				
 12177 00001229 C3                      		retn
 12178                                  
 12179                                  ; ---------------------------------------------------------------------------
 12180                                  
 12181                                  ; 16/10/2022
 12182                                  
 12183                                  ; ==========================================================================
 12184                                  ;	GetAccessFlag
 12185                                  ; ==========================================================================
 12186                                  ;
 12187                                  ; FUNCTION: get the status of UNFORMATTED_MEDIA bit of flags in bds table
 12188                                  ;
 12189                                  ; INPUT :
 12190                                  ;	    ES:di -> bds table
 12191                                  ;
 12192                                  ; OUTPUT:   a_DiskAccess_Control.dac_access_flag = 0 if disk i/o not allowed.
 12193                                  ;						 = 1 if disk i/o allowed.
 12194                                  ; ==========================================================================
 12195                                  
 12196                                  		; 19/10/2022
 12197                                  GetAccessFlag:				
 12198 0000122A C51E[1200]              		lds	bx, [ptrsav]	; DS:BX	points to request header
 12199 0000122E C55F13                  		lds	bx, [bx+19]	; [bx+IOCTL_REQ.GENERICIOCTL_PACKET]
 12200                                  		;mov	al, 0		; Assume result	is unformatted
 12201                                  		; 10/12/2022
 12202 00001231 28C0                    		sub	al, al
 12203                                  		; 10/12/2022
 12204 00001233 26F6452402              		test	byte [es:di+36], 02h
 12205                                  		;test	word [es:di+35], 200h ; [es:di+BDS.flags]
 12206                                  					; unformatted_media
 12207 00001238 7502                    		jnz	short GafDone	; Done if unformatted
 12208 0000123A FEC0                    		inc	al		; Return true for formatted
 12209                                  
 12210                                  GafDone:				
 12211 0000123C 884701                  		mov	[bx+1],	al	; [bx+A_DISKACCESS_CONTROL.DAC_ACCESS_FLAG]
 12212 0000123F C3                      		retn
 12213                                  ; ---------------------------------------------------------------------------
 12214                                  
 12215                                  ; 16/10/2022
 12216                                  
 12217                                  ; ==========================================================================
 12218                                  ;	SetAccessFlag
 12219                                  ; ==========================================================================
 12220                                  ;
 12221                                  ; function: set/reset the UNFORMATTED_MEDIA bit of flags in bds table
 12222                                  ;
 12223                                  ; input :
 12224                                  ;	    ES:di -> bds table
 12225                                  ;
 12226                                  ; output:   unformtted_media bit modified according to the user request
 12227                                  ; ==========================================================================
 12228                                  
 12229                                  		; 19/10/2022
 12230                                  SetAccessFlag:				
 12231 00001240 C51E[1200]              		lds	bx, [ptrsav]	; ES:BX	points to request header
 12232 00001244 C55F13                  		lds	bx, [bx+19]	; [bx+IOCTL_REQ.GENERICIOCTL_PACKET]
 12233                                  		; 10/12/2022
 12234 00001247 26806524FD              		and	byte [es:di+36], 0FDh
 12235                                  		;and	word [es:di+35], 0FDFFh ; [es:di+BDS.flags]
 12236                                  					; ~unformatted_media
 12237 0000124C 807F0100                		cmp	byte [bx+1], 0	; [bx+A_DISKACCESS_CONTROL.DAC_ACCESS_FLAG]
 12238 00001250 7505                    		jnz	short saf_Done
 12239                                  		; 10/12/2022
 12240 00001252 26804D2402              		or	byte [es:di+36], 02h
 12241                                  		;or	word [es:di+35], 200h ; [es:di+BDS.flags]
 12242                                  					; unformatted_media
 12243                                  saf_Done:				
 12244 00001257 C3                      		retn
 12245                                  ; ---------------------------------------------------------------------------
 12246                                  
 12247                                  ; 16/10/2022
 12248                                  
 12249                                  ; ==========================================================================
 12250                                  ; Ioctl_Support_Query
 12251                                  ; ==========================================================================
 12252                                  ;
 12253                                  ; New device command which was added in DOS 5.00 to allow a query of a 
 12254                                  ; specific GENERIC IOCtl to see if it is supported. Bit 7 in the
 12255                                  ; device attributes specifies if this function is supported.
 12256                                  ;
 12257                                  ; ==========================================================================
 12258                                  
 12259                                  		; 19/10/2022
 12260                                  ioctl_support_query:
 12261 00001258 06                      		push	es
 12262 00001259 C41E[1200]              		les	bx, [ptrsav]	; ES:BX Points to request header.
 12263 0000125D 268B470D                		mov	ax, [es:bx+13]	; [es:bx+IOCTL_REQ.MAJORFUNCTION]
 12264                                  					; AL ==	Major, AH == Minor
 12265 00001261 3C08                    		cmp	al, 8		; IOC_DC
 12266                                  					; See if major code is 8
 12267 00001263 7513                    		jnz	short nosupport
 12268 00001265 0E                      		push	cs
 12269 00001266 07                      		pop	es
 12270 00001267 B90B00                  		mov	cx, 11		; IOC_DC_TABLE_LEN
 12271                                  		; 10/12/2022
 12272 0000126A BF[3B0C]                		mov	di, IOC_DC_Table
 12273                                  		;mov	di, 0C60h	; IOC_DC_Table
 12274                                  					; at 2C7h:0C60h	= 70h:31D0h
 12275 0000126D 86C4                    		xchg	al, ah		; Put minor code in AL
 12276 0000126F F2AE                    		repne scasb		; Scan for minor code in AL
 12277 00001271 7505                    		jnz	short nosupport	; it was not found
 12278 00001273 B80001                  		mov	ax, 100h
 12279                                  		; 10/12/2022
 12280                                  		; (jump to ioctlsupexit is not required)
 12281                                  		;jmp	short $+2	; ioctlsupexit
 12282                                  					; Signal ioctl is supported
 12283                                  		;;jmp	short ioctlsupexit
 12284                                  ; ---------------------------------------------------------------------------
 12285                                  ioctlsupexit:				
 12286 00001276 07                      		pop	es
 12287                                  		; 10/12/2022
 12288                                  		; cf = 0
 12289                                  		;clc
 12290 00001277 C3                      		retn
 12291                                  ; ---------------------------------------------------------------------------
 12292                                  nosupport:				
 12293 00001278 07                      		pop	es
 12294 00001279 E959EE                  		jmp	bc_cmderr
 12295                                  ; ---------------------------------------------------------------------------
 12296                                  
 12297                                  ; 16/10/2022
 12298                                  
 12299                                  ; ==========================================================================
 12300                                  ;	GetMediaSenseStatus
 12301                                  ; ==========================================================================
 12302                                  ;
 12303                                  ; FUNCTION: Will return the type of diskette media in the specified DOS
 12304                                  ;	    diskette drive and whether the media is the default type
 12305                                  ;	    for that drive. (default type means the max size for that
 12306                                  ;	    drive)
 12307                                  ;
 12308                                  ; INPUT :   ES:DI -> BDS table
 12309                                  ; OUTPUT:   If carry clear
 12310                                  ;	    DS:BX -> Updated IOCtlPacket
 12311                                  ;
 12312                                  ;			 Special Function at offset 0:
 12313                                  ;				0	- Media detected is not default type
 12314                                  ;				1	- Media detected is default type
 12315                                  ;
 12316                                  ;			 Device Type at offset 1:
 12317                                  ;				2       - 720K 3.5" 80 tracks
 12318                                  ;				7	- 1.44M 3.5" 80 tracks
 12319                                  ;				9	- 2.88M 3.5" 80 tracks
 12320                                  ;
 12321                                  ; Error Codes returned in AX if carry set:
 12322                                  ;
 12323                                  ; 8102 - Drive not ready	- No disk is in the drive.
 12324                                  ; 8107 - Unknown media type	- Drive doesn't support this function or
 12325                                  ;				  the media is really unkown, any error
 12326                                  ;				  other than "media not present"
 12327                                  ; 
 12328                                  ; ==========================================================================
 12329                                  
 12330                                  		; 19/10/2022
 12331                                  SenseMediaType:				
 12332 0000127C C51E[1200]              		lds	bx, [ptrsav]	; DS:BX	points to request header.
 12333 00001280 C55F13                  		lds	bx, [bx+19]	; bx+IOCTL_REQ.GENERICIOCTL_PACKET]
 12334                                  		; 10/10/2022
 12335                                  		;mov	word [bx], 0	; Initialize the 2 packet bytes
 12336 00001283 31D2                    		xor	dx, dx
 12337 00001285 8917                    		mov	[bx], dx ; 0
 12338                                  		;
 12339 00001287 268A5504                		mov	dl, [es:di+4]	; [es:di+BDS.drivenum]
 12340                                  					; Get int 13h drive number from	BDS
 12341                                  		; 10/12/2022
 12342                                  		;xor	dh, dh		; DX = physical	drive number
 12343 0000128B B420                    		mov	ah, 20h		; Get Media Type function
 12344                                  					; If no	carry media type in AL
 12345 0000128D CD13                    		int	13h		; DISK - QCACHE	- DISMOUNT
 12346 0000128F 7216                    		jb	short MediaSenseEr ; error code	in AH
 12347 00001291 FE07                    		inc	byte [bx]	; Signal media type is default (bit 1)
 12348                                  DetermineMediaType:			
 12349 00001293 FEC8                    		dec	al
 12350 00001295 3C02                    		cmp	al, 2		; Chk for 720K ie: (3-1) = 2
 12351 00001297 740A                    		jz	short GotMediaType
 12352 00001299 0404                    		add	al, 4
 12353 0000129B 3C07                    		cmp	al, 7		; Chk for 1.44M ie: (4-1+4) = 7
 12354 0000129D 7404                    		jz	short GotMediaType
 12355 0000129F 3C09                    		cmp	al, 9		; Chk for 2.88M	ie: (6-1+4) = 9
 12356 000012A1 7510                    		jnz	short UnknownMediaType ; Just didn't recognize media type
 12357                                  GotMediaType:				
 12358 000012A3 884701                  		mov	[bx+1],	al	; Save the return value
 12359                                  		; 10/12/2022
 12360                                  		; cf = 0
 12361                                  		;clc			; Signal success
 12362 000012A6 C3                      		retn
 12363                                  ; ---------------------------------------------------------------------------
 12364                                  
 12365                                  MediaSenseEr:				
 12366 000012A7 80FC32                  		cmp	ah, 32h		; See if not default media error
 12367 000012AA 74E7                    		jz	short DetermineMediaType ; Not really an error
 12368 000012AC B002                    		mov	al, 2		; Now assume drive not ready
 12369 000012AE 80FC31                  		cmp	ah, 31h		; See if media was present
 12370 000012B1 7402                    		jz	short SenseErrExit ; Return drive not ready
 12371                                  UnknownMediaType:			
 12372 000012B3 B007                    		mov	al, 7		; Just don't know the media type
 12373                                  SenseErrExit:				
 12374 000012B5 B481                    		mov	ah, 81h		; Signal error return
 12375 000012B7 F9                      		stc
 12376 000012B8 C3                      		retn
 12377                                  
 12378                                  ; ---------------------------------------------------------------------------
 12379                                  		; 10/12/2022
 12380                                  		;db    0
 12381                                  ; ---------------------------------------------------------------------------
 12382                                  
 12383                                  ; 16/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 12384                                  
 12385                                  ;-----------------------------------------------------------------------------
 12386                                  ; MSINT13.ASM - MSDOS 6.0 - 1991
 12387                                  ;-----------------------------------------------------------------------------
 12388                                  ; 16/03/2019 - Retro DOS v4.0
 12389                                  
 12390                                  ;	int 2f function 13h allows the user to change the orig13 int_13 vector
 12391                                  ;	after booting. this allows testing and implementation of custom int_13
 12392                                  ;	handlers, without giving up ms-dos error recovery
 12393                                  ;	entry:	ds:dx	== addr. of new int_13 handler
 12394                                  ;		es:bx	== addr. of new int_13 vector used by warm boot (int19)
 12395                                  ;	exit:	orig13	== address of new int_13 handler
 12396                                  ;		ds:dx	== old orig13 value
 12397                                  ;		es:bx	== old old13  value
 12398                                  ;
 12399                                  ; int 2f handler for external block drivers to communicate with the internal
 12400                                  ; block driver in msdisk. the multiplex number chosen is 8. the handler
 12401                                  ; sets up the pointer to the request packet in [ptrsav] and then jumps to
 12402                                  ; dsk_entry, the entry point for all disk requests.
 12403                                  ;
 12404                                  ; on exit from this driver, we will return to the external driver
 12405                                  ; that issued this int 2f, and can then remove the flags from the stack.
 12406                                  ; this scheme allows us to have a small external device driver, and makes
 12407                                  ; the maintainance of the various drivers (driver and msbio) much easier,
 12408                                  ; since we only need to make changes in one place (most of the time).
 12409                                  ;
 12410                                  ;   ax=800h - check for installed handler - reserved
 12411                                  ;   ax=801h - install the bds into the linked list
 12412                                  ;   ax=802h - dos request
 12413                                  ;   ax=803h - return bds table starting pointer in ds:di
 12414                                  ;	   (ems device driver hooks int 13h to handle 16kb dma overrun
 12415                                  ;	    problem. bds table is going to be used to get head/sector
 12416                                  ;	    informations without calling generic ioctl get device parm call.)
 12417                                  
 12418                                  ;BIOSSEGMENT equ 70h
 12419                                  DOSBIOSSEG equ 0070h ; 17/10/2022	
 12420                                  
 12421                                  ;;BIOSCODE:1302h (MSDOS 6.21, IO.SYS)
 12422                                  
 12423                                  i2f_handler:				; here is 02C7h:1302h =	0070h:3872h
 12424 000012B9 80FC13                  		cmp	ah, 13h
 12425 000012BC 7413                    		jz	short int2f_replace_int13
 12426 000012BE 80FC08                  		cmp	ah, 8
 12427 000012C1 743B                    		jz	short mine
 12428                                  
 12429                                  ; Check for WIN386 startup and return the BIOS instance data
 12430                                  
 12431 000012C3 80FC16                  		cmp	ah, 16h		; MultWin386
 12432 000012C6 7479                    		jz	short win386call
 12433 000012C8 80FC4A                  		cmp	ah, 4Ah		; multMULT
 12434 000012CB 7503                    		jnz	short i2f_handler_iret
 12435 000012CD E9A500                  		jmp	handle_multmult
 12436                                  ; ---------------------------------------------------------------------------
 12437                                  
 12438                                  i2f_handler_iret:			
 12439 000012D0 CF                      		iret
 12440                                  ; ---------------------------------------------------------------------------
 12441                                  
 12442                                  int2f_replace_int13:			
 12443 000012D1 50                      		push	ax	; free up a register for caller's ds
 12444 000012D2 8CD8                    		mov	ax, ds	; then we can use ds: -> Bios_Data
 12445                                  		;;mov	ds, word [cs:0030h] ; 15/10/2022	
 12446                                  		;mov	ds, word ptr cs:BIOSDATAWORD ; [cs:0030h]
 12447                                  					; = [02C7h:0030h] = [0070h:25A0h]
 12448 000012D4 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD] ; 17/10/2022
 12449                                  		; 19/10/2022
 12450                                  		;push	word ptr ds:Orig13	; save old value of old13 and
 12451                                  		;push	word ptr ds:Orig13+2	; orig13 so that we can
 12452                                  		;push	word ptr ds:Old13	; return them to caller
 12453                                  		;push	word ptr ds:Old13+2
 12454 000012D9 FF36[B400]              		push	word [Orig13]
 12455 000012DD FF36[B600]              		push	word [Orig13+2]
 12456 000012E1 FF36[0601]              		push	word [Old13]
 12457 000012E5 FF36[0801]              		push	word [Old13+2]
 12458                                  
 12459                                  		;mov	word ptr ds:Orig13, dx	; orig13 := addr. of new int_13
 12460                                  		;mov	word ptr ds:Orig13+2, ax
 12461                                  		;mov	word ptr ds:Old13, bx	; old13 := addr. of new boot_13
 12462                                  		;mov	word ptr ds:Old13+2, es
 12463 000012E9 8916[B400]              		mov	[Orig13], dx
 12464 000012ED A3[B600]                		mov	[Orig13+2], ax
 12465 000012F0 891E[0601]              		mov	[Old13], bx
 12466 000012F4 8C06[0801]              		mov	[Old13+2], es
 12467                                  
 12468 000012F8 07                      		pop	es			; es:bx := old old13 vector
 12469 000012F9 5B                      		pop	bx
 12470 000012FA 1F                      		pop	ds			; ds:dx := old orig13 vector
 12471 000012FB 5A                      		pop	dx
 12472 000012FC 58                      		pop	ax
 12473                                  i2f_iret:				
 12474 000012FD CF                      		iret
 12475                                  ; ---------------------------------------------------------------------------
 12476                                  
 12477                                  mine:					
 12478 000012FE 3CF8                    		cmp	al, 0F8h 		; iret on reserved functions
 12479 00001300 73FB                    		jnb	short i2f_iret
 12480 00001302 08C0                    		or	al, al			; a get installed state request?
 12481 00001304 7504                    		jnz	short disp_func
 12482 00001306 B0FF                    		mov	al, 0FFh
 12483 00001308 EBF3                    		jmp	short i2f_iret
 12484                                  ; ---------------------------------------------------------------------------
 12485                                  
 12486                                  disp_func:				
 12487 0000130A 3C01                    		cmp	al, 1			; request for installing bds?
 12488 0000130C 7418                    		jz	short do_subfun_01
 12489 0000130E 3C03                    		cmp	al, 3			; get bds vector?
 12490 00001310 7424                    		jz	short do_get_bds_vector
 12491                                  
 12492                                  ; set up pointer to request packet
 12493                                  
 12494 00001312 1E                      		push	ds
 12495 00001313 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD] ; 17/10/2022	
 12496                                  		;mov	ds, word ptr cs:BIOSDATAWORD ; [cs:Bios_Data_Word]
 12497                                  					; = [0070h:25A0h] = [02C7h:0030h]
 12498                                  		; 19/10/2022
 12499                                  		;mov	word ptr ds:ptrsav, bx
 12500                                  		;mov	word ptr ds:ptrsav+2, es
 12501 00001318 891E[1200]              		mov	[ptrsav], bx
 12502 0000131C 8C06[1400]              		mov	[ptrsav+2], es
 12503 00001320 1F                      		pop	ds
 12504                                  		;jmp	far ptr	i2f_dskentry
 12505                                  		; 17/10/2022
 12506                                  		;jmp	far DOSBIOSSEG:dsk_entry		
 12507 00001321 EA[9608]7000            		jmp	DOSBIOSSEG:i2f_dskentry ; 70h:i2f_dskentry
 12508                                  					; NOTE: jump to a FAR function, not an
 12509                                  					;  IRET type function. Callers of
 12510                                  					;  this int2f subfunction will have
 12511                                  					;  to be careful to do a popf
 12512                                  
 12513                                  ; ---------------------------------------------------------------------------
 12514                                  
 12515                                  do_subfun_01:				
 12516 00001326 06                      		push	es
 12517 00001327 1E                      		push	ds
 12518 00001328 1E                      		push	ds
 12519 00001329 07                      		pop	es
 12520                                  		; 17/10/2022
 12521 0000132A 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD]	
 12522                                  		;mov	ds, word ptr cs:BIOSDATAWORD ; [cs:Bios_Data_Word]
 12523                                  					; point	ds: -> Bios_Data
 12524 0000132F E8C303                  		call	install_bds
 12525 00001332 1F                      		pop	ds
 12526 00001333 07                      		pop	es
 12527 00001334 EBC7                    		jmp	short i2f_iret
 12528                                  ; ---------------------------------------------------------------------------
 12529                                  
 12530                                  do_get_bds_vector:
 12531                                  		; 17/10/2022
 12532 00001336 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD]			
 12533                                  		;mov	ds, word ptr cs:BIOSDATAWORD ; [cs:Bios_Data_Word]
 12534 0000133B C53E[1901]              		lds	di, [start_bds]
 12535                                  		;lds	di, ds:start_bds
 12536                                  ;ii2f_iret:	; 10/12/2022				
 12537 0000133F EBBC                    		jmp	short i2f_iret
 12538                                  ; ---------------------------------------------------------------------------
 12539                                  
 12540                                  ; 17/10/2022
 12541                                  ; 16/10/2022
 12542                                  
 12543                                  ; WIN386 startup stuff is done here. If starting up we set our WIN386 present
 12544                                  ; flag and return instance data. If exiting, we reset the WIN386 present flag
 12545                                  ; NOTE: We assume that the BIOS int 2fh is at the bottom of the chain.
 12546                                  
 12547                                  win386call:				
 12548 00001341 1E                      		push	ds
 12549 00001342 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD]
 12550                                  		;mov	ds, word ptr cs:BIOSDATAWORD ; [cs:Bios_Data_Word]
 12551                                  					; at 2C7h:30h =	70h:25A0h
 12552 00001347 3C05                    		cmp	al, 5		; Win386_Init
 12553                                  					; is it	win386 initializing?
 12554 00001349 7410                    		jz	short Win386Init
 12555 0000134B 3C06                    		cmp	al, 6		; Win386_Exit
 12556                                  					; is it	win386 exiting?
 12557 0000134D 7523                    		jnz	short win_iret	; if not, continue int2f chain
 12558                                  		; 12/12/2022
 12559 0000134F F6C201                  		test	dl, 1
 12560                                  		;test	dx, 1		; is it	win386 or win286 dos extender?
 12561 00001352 751E                    		jnz	short win_iret	; if not win386, then continue
 12562                                  		;and	ds:IsWin386, 0	; indicate that	win386 is not present  
 12563 00001354 8026[CE08]00            		and	byte [IsWin386], 0 
 12564 00001359 EB17                    		jmp	short win_iret
 12565                                  ; ---------------------------------------------------------------------------
 12566                                  
 12567                                  Win386Init:	
 12568                                  		; 12/12/2022
 12569 0000135B F6C201                  		test	dl, 1			
 12570                                  		;test	dx, 1		; is it win386 or win286 dos extender?
 12571 0000135E 7512                    		jnz	short win_iret	; if not win386, then continue
 12572                                  		;or	ds:IsWin386, 1	; Indicate WIN386 present
 12573 00001360 800E[CE08]01            		or	byte [IsWin386], 1
 12574                                  		;mov	word ptr ds:SI_Next, bx	; Hook our structure into chain
 12575                                  		;mov	word ptr ds:SI_Next+2, es
 12576 00001365 891E[9C08]              		mov	[SI_Next], bx
 12577 00001369 8C06[9E08]              		mov	[SI_Next+2], es
 12578                                  		;mov	bx, offset Win386_SI ; point ES:BX to Win386_SI
 12579 0000136D BB[9A08]                		mov	bx, Win386_SI	; 19/10/2022
 12580 00001370 1E                      		push	ds
 12581 00001371 07                      		pop	es
 12582                                  win_iret:				
 12583 00001372 1F                      		pop	ds
 12584                                  ii2f_iret:	; 10/12/2022	
 12585 00001373 EB88                    		jmp	short i2f_iret	; return back up the chain
 12586                                  ; ---------------------------------------------------------------------------
 12587                                  
 12588                                  handle_multmult:			
 12589 00001375 3C01                    		cmp	al, 1
 12590 00001377 7515                    		jnz	short try_2
 12591 00001379 1E                      		push	ds
 12592 0000137A E84700                  		call	HMAPtr		; get offset of free HMA
 12593                                  		; 10/12/2022
 12594                                  		;xor	bx, bx
 12595                                  		;dec	bx
 12596 0000137D BBFFFF                  		mov	bx, 0FFFFh
 12597 00001380 8EC3                    		mov	es, bx		; seg of HMA
 12598 00001382 89FB                    		mov	bx, di
 12599 00001384 F7D3                    		not	bx
 12600 00001386 09DB                    		or	bx, bx
 12601 00001388 7401                    		jz	short try_1
 12602 0000138A 43                      		inc	bx
 12603                                  try_1:					
 12604 0000138B 1F                      		pop	ds
 12605 0000138C EBE5                    		jmp	short ii2f_iret
 12606                                  ; ---------------------------------------------------------------------------
 12607                                  
 12608                                  try_2:					
 12609 0000138E 3C02                    		cmp	al, 2		; multMULTALLOCHMA
 12610 00001390 7530                    		jnz	short try_3
 12611 00001392 1E                      		push	ds
 12612                                  		; 10/12/2022
 12613                                  		;xor	di, di
 12614                                  		;dec	di
 12615 00001393 BFFFFF                  		mov	di, 0FFFFh	; assume not enough space
 12616 00001396 8EC7                    		mov	es, di
 12617 00001398 E82900                  		call	HMAPtr		; get offset of free HMA
 12618 0000139B 83FFFF                  		cmp	di, 0FFFFh
 12619 0000139E 7421                    		jz	short InsuffHMA
 12620 000013A0 F7DF                    		neg	di		; free space in HMA
 12621 000013A2 39FB                    		cmp	bx, di
 12622 000013A4 7605                    		jbe	short try_4
 12623                                  		; 10/12/2022
 12624                                  		;sub	di, di
 12625                                  		;dec	di
 12626 000013A6 BFFFFF                  		mov	di, 0FFFFh
 12627 000013A9 EB16                    		jmp	short InsuffHMA
 12628                                  ; ---------------------------------------------------------------------------
 12629                                  
 12630                                  try_4:					
 12631                                  		;mov	di, ds:FreeHMAPtr
 12632 000013AB 8B3E[F508]              		mov	di, [FreeHMAPtr]
 12633 000013AF 83C30F                  		add	bx, 15
 12634                                  		;and	bx, 0FFF0h
 12635                                  		; 10/12/2022
 12636 000013B2 80E3F0                  		and	bl, 0F0h
 12637                                  		;add	ds:FreeHMAPtr, bx ; update the free pointer	
 12638 000013B5 011E[F508]              		add	[FreeHMAPtr], bx
 12639 000013B9 7506                    		jnz	short InsuffHMA
 12640 000013BB C706[F508]FFFF          		mov	word [FreeHMAPtr], 0FFFFh ; -1
 12641                                  		;mov	ds:FreeHMAPtr, 0FFFFh
 12642                                  					; no more HMA if we have wrapped
 12643                                  InsuffHMA:				
 12644 000013C1 1F                      		pop	ds
 12645                                  		; 10/12/2022
 12646                                  try_3:		
 12647 000013C2 EBAF                    		jmp	short ii2f_iret
 12648                                  ; ---------------------------------------------------------------------------
 12649                                  
 12650                                  		; 10/12/2022
 12651                                  ;try_3:					
 12652                                  		;jmp	ii2f_iret
 12653                                  
 12654                                  ; =============== S U B	R O U T	I N E =======================================
 12655                                  
 12656                                  ; 16/10/2022
 12657                                  
 12658                                  ;--------------------------------------------------------------------------
 12659                                  ;
 12660                                  ; procedure : HMAPtr
 12661                                  ;
 12662                                  ;		Gets the offset of the free HMA area ( with respect to
 12663                                  ;							seg ffff )
 12664                                  ;		If DOS has not moved high, tries to move DOS high.
 12665                                  ;		In the course of doing this, it will allocate all the HMA
 12666                                  ;		and set the FreeHMAPtr to past the end of the BIOS and 
 12667                                  ;		DOS code. The call to MoveDOSIntoHMA (which is a pointer)
 12668                                  ;		enters the routine in sysinit1 called FTryToMovDOSHi.
 12669                                  ;
 12670                                  ;	RETURNS : offset of free HMA in DI
 12671                                  ;		  BIOS_DATA, seg in DS
 12672                                  ;
 12673                                  ;--------------------------------------------------------------------------
 12674                                  
 12675                                  		; 17/10/2022
 12676                                  HMAPtr:
 12677 000013C4 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD]
 12678                                  		;mov	ds, word ptr cs:BIOSDATAWORD ; [cs:Bios_Data_Word]
 12679 000013C9 8B3E[F508]              		mov	di, [FreeHMAPtr]
 12680                                  		;mov	di, ds:FreeHMAPtr
 12681 000013CD 83FFFF                  		cmp	di, 0FFFFh
 12682 000013D0 750F                    		jnz	short HMAPtr_retn
 12683 000013D2 803E[FB08]00            		cmp	byte [SysinitPresent], 0
 12684                                  		;cmp	ds:SysinitPresent, 0
 12685 000013D7 7408                    		jz	short HMAPtr_retn
 12686 000013D9 FF1E[F708]              		call	far [MoveDOSIntoHMA]
 12687                                  		;call	ds:MoveDOSIntoHMA ; call far [MoveDOSIntoHMA]
 12688 000013DD 8B3E[F508]              		mov	di, [FreeHMAPtr]
 12689                                  		;mov	di, ds:FreeHMAPtr
 12690                                  HMAPtr_retn:				
 12691 000013E1 C3                      		retn
 12692                                  
 12693                                  ; =============== S U B	R O U T	I N E =======================================
 12694                                  
 12695                                  ; 16/10/2022
 12696                                  
 12697                                  ; move a 512 byte sector from ds:si to es:di, do not trash cx
 12698                                  ; but go ahead and update direction flag, si, & di
 12699                                  
 12700                                  move_sector:
 12701                                  
 12702                                  ; The 80386 microprocessor considers an access to WORD 0FFFFh in
 12703                                  ; any segment to be a fault. Theoretically, this could be handled
 12704                                  ; by the fault handler and the behavior of an 8086 could be emulated
 12705                                  ; by wrapping the high byte to offset 0000h. This would be a lot
 12706                                  ; of work and was, indeed, blown off by the Win386 guys. COMPAQ
 12707                                  ; also handles the fault incorrectly in their ROM BIOS for real
 12708                                  ; mode. Their fault handler was only designed to deal with one
 12709                                  ; special case which occurred in a magazine benchmark, but didn't
 12710                                  ; handle the general case worth beans.
 12711                                  ;
 12712                                  ; Simply changing this code to do a byte loop would work okay but
 12713                                  ; would involve a general case performance hit. Therefore, we'll
 12714                                  ; check for either source or destination offsets being within one
 12715                                  ; sector of the end of their segments and only in that case fall
 12716                                  ; back to a byte move.
 12717                                  
 12718 000013E2 FC                      		cld
 12719 000013E3 51                      		push	cx
 12720 000013E4 B90001                  		mov	cx, 256
 12721 000013E7 81FE00FE                		cmp	si, 0FE00h
 12722 000013EB 770A                    		ja	short movsec_bytes
 12723 000013ED 81FF00FE                		cmp	di, 0FE00h
 12724 000013F1 7704                    		ja	short movsec_bytes
 12725 000013F3 F3A5                    		rep movsw
 12726 000013F5 59                      		pop	cx
 12727 000013F6 C3                      		retn
 12728                                  ; ---------------------------------------------------------------------------
 12729                                  
 12730                                  movsec_bytes:				
 12731 000013F7 D1E1                    		shl	cx, 1
 12732 000013F9 F3A4                    		rep movsb
 12733 000013FB 59                      		pop	cx
 12734 000013FC C3                      		retn
 12735                                  
 12736                                  ; =============== S U B	R O U T	I N E =======================================
 12737                                  
 12738                                  ; 16/10/2022
 12739                                  
 12740                                  ; check_wrap is a routine that adjusts the starting sector, starting head
 12741                                  ; and starting cylinder for an int 13 request that requests i/o of a lot
 12742                                  ; of sectors. it only does this for fixed disks. it is used in the sections
 12743                                  ; of code that handle ecc errors and dma errors. it is necessary, because
 12744                                  ; ordinarily the rom would take care of wraps around heads and cylinders,
 12745                                  ; but we break down a request when we get an ecc or dma error into several
 12746                                  ; i/o of one or more sectors. in this case, we may already be beyond the
 12747                                  ; number of sectors on a track on the medium, and the request would fail.
 12748                                  ;
 12749                                  ; input conditions:
 12750                                  ;	all registers set up for an int 13 request.
 12751                                  ;
 12752                                  ; output:
 12753                                  ;	dh - contains starting head number for request
 12754                                  ;	cx - contains starting sector and cylinder numbers
 12755                                  ;	(the above may or may not have been changed, and are 0-based)
 12756                                  ;	all other registers preserved.
 12757                                  
 12758                                  check_wrap:	
 12759 000013FD 50                      		push	ax
 12760 000013FE 53                      		push	bx
 12761 000013FF 06                      		push	es
 12762 00001400 57                      		push	di
 12763 00001401 E86E00                  		call	find_bds	; get pointer to bds for drive in dl
 12764 00001404 7260                    		jb	short no_wrap	; finished if DOS doesn't use it
 12765                                  		; 12/12/2022
 12766 00001406 26F6452301              		test	byte [es:di+23h], 1
 12767                                  		;test	word [es:di+23h], 1 ; [es:di+BDS.flags],fnon_removable
 12768 0000140B 7459                    		jz	short no_wrap	; no wrapping for removable media
 12769 0000140D 268B5D13                		mov	bx, [es:di+13h]	; [es:di+BDS.secpertrack]
 12770 00001411 89C8                    		mov	ax, cx
 12771 00001413 83E03F                  		and	ax, 3Fh		; extract sector number
 12772 00001416 39D8                    		cmp	ax, bx		; are we going to wrap?
 12773 00001418 764C                    		jbe	short no_wrap
 12774 0000141A F6F3                    		div	bl		; ah=new sector	#, al=#	of head	wraps
 12775                                  
 12776                                  ; we need to be careful here. if the new sector # is 0, then we are on the
 12777                                  ; last sector on that track.
 12778                                  
 12779 0000141C 08E4                    		or	ah, ah
 12780 0000141E 7503                    		jnz	short not_on_bound
 12781                                  		; 18/12/2022
 12782 00001420 48                      		dec	ax ; *
 12783 00001421 88DC                    		mov	ah, bl		; set sector=BDS_BPB.BPB_SECTORSPERTRACK
 12784                                  					; if on	boundary
 12785                                  		;dec	al ; *		; also decrement # of head wraps
 12786                                  not_on_bound:				
 12787 00001423 80E1C0                  		and	cl, 0C0h	; zero out sector #
 12788 00001426 08E1                    		or	cl, ah		; or in	new sector #
 12789 00001428 30E4                    		xor	ah, ah		; ax = # of head wraps
 12790 0000142A 40                      		inc	ax
 12791 0000142B 00F0                    		add	al, dh		; add in starting head #
 12792 0000142D 80D400                  		adc	ah, 0		; catch	any carry
 12793 00001430 263B4515                		cmp	ax, [es:di+15h]	; [es:di+BDS.heads]
 12794                                  					; are we going to wrap around a	head?
 12795 00001434 7636                    		jbe	short no_wrap_head ; do	not lose new head number!!
 12796 00001436 52                      		push	dx		; preserve drive number and head number
 12797 00001437 31D2                    		xor	dx, dx
 12798 00001439 268B5D15                		mov	bx, [es:di+15h]	; [es:di+BDS.heads]
 12799 0000143D F7F3                    		div	bx		; dx=new head #, ax=# of cylinder wraps
 12800                                  
 12801                                  ; careful here! if new head # is 0, then we are on the last head.
 12802                                  
 12803 0000143F 09D2                    		or	dx, dx
 12804 00001441 7507                    		jnz	short no_head_bound
 12805 00001443 89DA                    		mov	dx, bx		; on boundary. set to BDS_BPB.BPB_HEADS
 12806                                  
 12807                                  ; if we had some cylinder wraps, we need to reduce them by one!!
 12808                                  
 12809 00001445 09C0                    		or	ax, ax
 12810 00001447 7401                    		jz	short no_head_bound
 12811 00001449 48                      		dec	ax		; reduce number	of cylinder wraps
 12812                                  no_head_bound:				
 12813 0000144A 88D7                    		mov	bh, dl		; bh has new head number
 12814 0000144C 5A                      		pop	dx		; restore drive number and head number
 12815 0000144D FECF                    		dec	bh		; get it 0-based
 12816 0000144F 88FE                    		mov	dh, bh		; set up new head number in dh
 12817 00001451 88CF                    		mov	bh, cl
 12818 00001453 80E73F                  		and	bh, 3Fh		; preserve sector number
 12819 00001456 B306                    		mov	bl, 6
 12820 00001458 86CB                    		xchg	cl, bl
 12821 0000145A D2EB                    		shr	bl, cl		; get ms cylinder bits to ls end
 12822 0000145C 00C5                    		add	ch, al		; add in cylinder wrap
 12823 0000145E 10E3                    		adc	bl, ah		; add in high byte
 12824 00001460 D2E3                    		shl	bl, cl		; move up to ms	end
 12825 00001462 86D9                    		xchg	bl, cl		; restore cylinder bits	into cl
 12826 00001464 08F9                    		or	cl, bh		; or in	sector number
 12827                                  no_wrap:				
 12828 00001466 F8                      		clc
 12829 00001467 5F                      		pop	di
 12830 00001468 07                      		pop	es
 12831 00001469 5B                      		pop	bx
 12832 0000146A 58                      		pop	ax
 12833 0000146B C3                      		retn
 12834                                  ; ---------------------------------------------------------------------------
 12835                                  
 12836                                  no_wrap_head:				
 12837 0000146C 88C6                    		mov	dh, al		; do not lose new head number
 12838 0000146E FECE                    		dec	dh		; get it 0-based
 12839 00001470 EBF4                    		jmp	short no_wrap
 12840                                  
 12841                                  ; =============== S U B	R O U T	I N E =======================================
 12842                                  
 12843                                  ; 16/10/2022
 12844                                  
 12845                                  ; this is a special version of the bds lookup code which is
 12846                                  ; based on physical drives rather than the usual logical drives
 12847                                  ; carry is set if the physical drive in dl is found, es:di -> its bds
 12848                                  ; otherwise carry is clear
 12849                                  ;
 12850                                  ; guaranteed to trash no registers except es:di
 12851                                  
 12852                                  		; 19/10/2022
 12853                                  find_bds:	
 12854 00001472 C43E[1901]              		les	di, [start_bds]	; point es:di to first bds
 12855                                  fbds_1:					
 12856 00001476 26385504                		cmp	[es:di+4], dl	; [es:di+BDS.drivenum]
 12857 0000147A 7409                    		jz	short fdbs_2
 12858 0000147C 26C43D                  		les	di, [es:di]	; [es:di+BDS.link]
 12859                                  					; go to next bds
 12860 0000147F 83FFFF                  		cmp	di, 0FFFFh
 12861 00001482 75F2                    		jnz	short fbds_1
 12862 00001484 F9                      		stc
 12863                                  fdbs_2:					
 12864 00001485 C3                      		retn
 12865                                  
 12866                                  ; =============== S U B	R O U T	I N E =======================================
 12867                                  
 12868                                  ; 16/10/2022
 12869                                  		; 17/10/2022
 12870                                  doint:
 12871                                  		; 10/12/2022
 12872 00001486 8A5608                  		mov	dl, [bp+8]	; [bp+INT13FRAME.olddx]
 12873                                  					; get physical drive number
 12874                                  		; 19/10/2022 - Temporary !
 12875                                  		;db	8Ah, 96h, 8, 0	; mov dl, [bp+8]	
 12876                                  		
 12877 00001489 30E4                    		xor	ah, ah
 12878 0000148B 08C0                    		or	al, al
 12879 0000148D 7410                    		jz	short dointdone	; if zero sectors, return ax=0
 12880                                  		; 10/12/2022
 12881 0000148F 8A6603                  		mov	ah, [bp+3]	; [bp+INT13FRAME.oldax+1]
 12882                                  					; get request code
 12883                                  		;db	8Ah, 0A6h, 3, 0	; mov ah, [bp+3]
 12884 00001492 FF7610                  		push	word [bp+10h]	; [bp+INT13FRAME.oldf]
 12885                                  		;db	0FFh, 0B6h, 10h, 0 ; push word [bp+10h]
 12886 00001495 9D                      		popf
 12887                                  		;call	far 70h:797h ; MSDOS 6.21 IO.SYS BIOSCODE:14EAh
 12888                                  		; 17/10/2022
 12889 00001496 9A[9707]7000            		call	DOSBIOSSEG:call_orig13
 12890                                  		;;call	call_orig13	; call far 70h:797h
 12891                                  					; call far KERNEL_SEGMENT:call_orig13
 12892 0000149B 9C                      		pushf
 12893                                  		; 10/12/2022
 12894 0000149C 8F4610                  		pop	word [bp+10h]	; [bp+INT13FRAME.oldf]
 12895                                  		;db	8Fh, 86h, 10h, 0 ; pop word [bp+10h]
 12896                                  dointdone:				
 12897 0000149F C3                      		retn
 12898                                  
 12899                                  ;----------------------------------------------------------------------------
 12900                                  
 12901                                  ; 16/10/2022
 12902                                  
 12903                                  ; this is the true int 13 handler. we parse the request to see if there is
 12904                                  ; a dma violation. if so, depending on the function, we:
 12905                                  ;   read/write break the request into three pieces and move the middle one
 12906                                  ;	       into our internal buffer.
 12907                                  ;
 12908                                  ;   format     copy the format table into the buffer
 12909                                  ;   verify     point the transfer address into the buffer
 12910                                  ;
 12911                                  ; this is the biggest bogosity of all. the ibm controller does not handle
 12912                                  ; operations that cross physical 64k boundaries. in these cases, we copy
 12913                                  ; the offending sector into the buffer below and do the i/o from there.
 12914                                  
 12915                                  ;struc INT13FRAME
 12916                                  ;.oldbp: resw
 12917                                  ;.oldax: resw 
 12918                                  ;.oldbx: resw
 12919                                  ;.oldcx: resw
 12920                                  ;.olddx: resw
 12921                                  ;.oldds: resw	; now we save caller's ds, too
 12922                                  ;.olddd: resd
 12923                                  ;.oldf:	resw
 12924                                  ;end struc
 12925                                  
 12926                                  ;----------------------------------------------------------------------------
 12927                                  
 12928                                  ;   entry conditions:
 12929                                  ;	ah = function
 12930                                  ;	al = number of sectors
 12931                                  ;	es:bx = dma address
 12932                                  ;	cx = packed track and sector
 12933                                  ;	dx = head and drive
 12934                                  ;   output conditions:
 12935                                  ;	no dma violation.
 12936                                  
 12937                                  ;	use extreme caution when working with this code. In general,
 12938                                  ;	  all registers are hot at all times.
 12939                                  ;
 12940                                  ;	question:  does this code handle cases where dma errors
 12941                                  ;	  occur during ecc retries, and where ecc errors occur during
 12942                                  ;	  dma breakdowns???? Hmmmmm.
 12943                                  
 12944                                  ;----------------------------------------------------------------------------
 12945                                  
 12946                                  ; ---------------------------------------------------------------------------
 12947                                  
 12948 000014A0 90004000                dtype_array:	dd 400090h		; 40:90	is drive type array
 12949                                  
 12950                                  ; 17/10/2022
 12951                                  ;DTYPEARRAY equ dtype_array - DOSBIOSEG_2C7h ; (14F5h for MSDOS 5.0 IO.SYS)
 12952                                  ; 09/12/2022
 12953                                  DTYPEARRAY equ dtype_array
 12954                                  
 12955                                  ; ---------------------------------------------------------------------------
 12956                                  
 12957                                  ; stick some special stuff out of mainline
 12958                                  
 12959                                  ; we know we're doing a format command. if we have changeline
 12960                                  ; support, then flag some special changed stuff and set changed
 12961                                  ; by format bit for all logical drives using this physical drive
 12962                                  
 12963                                  format_special_stuff:			
 12964 000014A4 803E[7700]00            		cmp	byte [fhave96], 0	; do we have changeline support?
 12965 000014A9 7459                    		jz	short format_special_stuff_done ; brif not
 12966 000014AB 53                      		push	bx
 12967 000014AC BB4001                  		mov	bx, 140h	; fchanged_by_format+fchanged
 12968 000014AF E83804                  		call	set_changed_dl	; indicate that media changed by format
 12969 000014B2 5B                      		pop	bx
 12970 000014B3 EB4F                    		jmp	short format_special_stuff_done
 12971                                  ; ---------------------------------------------------------------------------
 12972                                  
 12973                                  ; 16/10/2022
 12974                                  
 12975                                  ; we know we've got ec35's on the system. Now see if we're doing
 12976                                  ; a floppy. If so, create a mask and see if this particular
 12977                                  ; drive is an ec35. If so, set dtype_array[drive]=93h
 12978                                  
 12979                                  		; 19/10/2022
 12980                                  ec35_special_stuff:			
 12981 000014B5 84D2                    		test	dl, dl		; floppy or hard disk?
 12982 000014B7 7852                    		js	short ec35_special_stuff_done ;	if hard	drive, we're done
 12983 000014B9 50                      		push	ax		; see if this PARTICULAR drive is ec35
 12984 000014BA 51                      		push	cx
 12985 000014BB 88D1                    		mov	cl, dl		; turn drive number into bit map
 12986 000014BD B001                    		mov	al, 1		; assume drive 0
 12987 000014BF D2E0                    		shl	al, cl		; shift	over correct number of times
 12988 000014C1 8406[3105]              		test	[ec35flag], al	; electrically compatible 3.5 incher?
 12989 000014C5 59                      		pop	cx
 12990 000014C6 58                      		pop	ax
 12991 000014C7 7442                    		jz	short ec35_special_stuff_done
 12992                                  					; done if this floppy is not an	ec35
 12993 000014C9 53                      		push	bx		; free up a far	pointer	(es:bx)
 12994 000014CA 06                      		push	es
 12995                                  		; 17/10/2022
 12996 000014CB 2EC41E[A014]            		les	bx, [cs:DTYPEARRAY]
 12997                                  		;les	bx, dword ptr cs:DTYPEARRAY ; [cs:dtype_array]
 12998                                  					; 0070h:3A65h =	2C7h:14F5h
 12999 000014D0 00D3                    		add	bl, dl
 13000 000014D2 80D700                  		adc	bh, 0		; find entry for this drive
 13001 000014D5 26C60793                		mov	byte [es:bx], 93h ; establish drive type as:
 13002                                  					; (360k	disk in	360k drive,
 13003                                  					; no double-stepping, 250 kbs transfer rate)
 13004 000014D9 07                      		pop	es
 13005 000014DA 5B                      		pop	bx
 13006 000014DB EB2E                    		jmp	short ec35_special_stuff_done
 13007                                  ; ---------------------------------------------------------------------------
 13008                                  
 13009                                  ; 16/10/2022
 13010                                  
 13011                                  ; ps2_30 machine has some problem with ah=8h (read drive parm), int 13h.
 13012                                  ; this function does not reset the common buses after the execution.
 13013                                  ; to solve this problem, when we detect ah=8h, then we will save the result and
 13014                                  ; will issue ah=1 (read status) call to reset the buses.
 13015                                  
 13016                                  ps2_special_stuff:			
 13017 000014DD 803E[1E00]08            		cmp	byte [prevoper], 8 ; (ps2_30)
 13018                                  					; read driver parm ?
 13019 000014E2 7407                    		jz	short ps2_30_problem
 13020 000014E4 803E[1E00]15            		cmp	byte [prevoper], 15h
 13021                                  					; apparently function 15h fails, too
 13022 000014E9 752D                    		jnz	short ps2_special_stuff_done
 13023                                  ps2_30_problem:				
 13024 000014EB 50                      		push	ax
 13025 000014EC B401                    		mov	ah, 1
 13026                                  		;;call	far 70:797h ; MSDOS 6.21 IO.SYS BIOSCODE:1543h
 13027                                  		; 17/10/2022
 13028 000014EE 9A[9707]7000            		call	DOSBIOSSEG:call_orig13
 13029                                  		;call	call_orig13	; call far 70:797h
 13030                                  					; call far KERNEL_SEGMENT:call_orig13
 13031 000014F3 58                      		pop	ax
 13032 000014F4 EB22                    		jmp	short ps2_special_stuff_done
 13033                                  ; ---------------------------------------------------------------------------
 13034                                  
 13035                                  ; 17/10/2022
 13036                                  ; 16/10/2022
 13037                                  
 13038                                  ; here is the actual int13 handler
 13039                                  
 13040                                  i13z:					; 0070h:3ABBh =	02C7h:154Bh
 13041                                  
 13042                                  ; cas -- inefficient! could push ds and load ds-> Bios_Data before
 13043                                  ; vectoring up here from Bios_Data
 13044                                  
 13045                                  		; 19/10/2022
 13046 000014F6 1E                      		push	ds		; save caller's ds register first thing
 13047                                  		;;mov	ds, word [cs:0030h]
 13048                                  					; and set up our own ds -> Bios_Data
 13049 000014F7 2E8E1E[3000]            		mov	ds, [cs:BIOSDATAWORD]
 13050                                  		;mov	ds, word ptr cs:BIOSDATAWORD ; [cs:0030h]
 13051                                  					; = [02C7h:0030h] = [0070h:25A0h]
 13052                                  
 13053                                  ; let the operation proceed. if there is a dma violation, then we do things
 13054                                  
 13055 000014FC A3[1E00]                		mov	[prevoper], ax	; save request
 13056 000014FF 80FC05                  		cmp	ah, 5		; romformat
 13057 00001502 74A0                    		jz	short format_special_stuff
 13058                                  					; go do special stuff for format
 13059                                   format_special_stuff_done:		
 13060 00001504 803E[3105]00            		cmp	byte [ec35flag], 0 ; any electrically compat 3.5 inchers?
 13061 00001509 75AA                    		jnz	short ec35_special_stuff
 13062                                  					; go handle it out of line if so
 13063                                  ec35_special_stuff_done:
 13064                                  		;;call	far 70:797h ; MSDOS 6.21 IO.SYS BIOSCODE:1560h		
 13065 0000150B 9A[9707]7000            		call	DOSBIOSSEG:call_orig13
 13066                                  		;call	call_orig13	; call far KERNEL_SEGMENT:call_orig13
 13067                                  		
 13068 00001510 9C                      		pushf			; save result flags
 13069                                  		
 13070 00001511 803E[3E06]FA            		cmp	byte [model_byte], 0FAh ; is this a ps2/30?
 13071                                  					; mdl_ps2_30
 13072 00001516 74C5                    		jz	short ps2_special_stuff
 13073                                  					; exit mainline to address special
 13074                                  ps2_special_stuff_done:			; ps2/30 problem if so		
 13075 00001518 9D                      		popf
 13076 00001519 7221                    		jb	short goterr13	; error	on original orig13 call-thru?
 13077                                  ret_from_i13:				
 13078 0000151B 1F                      		pop	ds
 13079 0000151C CA0200                  		retf	2		; restore ds &	iret w/flags
 13080                                  ; ---------------------------------------------------------------------------
 13081                                  
 13082                                  ; most of our code exits through here. If carry isn't set, then
 13083                                  ; just do a simple exit. Else doublecheck that we aren't getting
 13084                                  ; a changeline error.
 13085                                  
 13086                                  i13ret_ck_chglinerr:			
 13087 0000151F 73FA                    		jnb	short ret_from_i13 ; done if not an error termination
 13088                                  i13_ret_error:				
 13089 00001521 80FC06                  		cmp	ah, 6		; did i	see a change event?
 13090 00001524 7513                    		jnz	short int13b	; skip if wrong	error
 13091 00001526 08D2                    		or	dl, dl		; is this for the hard disk?
 13092 00001528 780F                    		js	short int13b	; yes, ignore
 13093 0000152A 803E[7700]00            		cmp	byte [fhave96], 0
 13094 0000152F 7408                    		jz	short int13b	; just in case ROM returned this
 13095                                  					; error	even though it told us it
 13096                                  					; never	would
 13097 00001531 53                      		push	bx
 13098 00001532 BB4000                  		mov	bx, 40h		; fchanged
 13099 00001535 E8B203                  		call	set_changed_dl
 13100 00001538 5B                      		pop	bx
 13101                                  int13b:					
 13102 00001539 F9                      		stc			; now return the error
 13103 0000153A EBDF                    		jmp	short ret_from_i13
 13104                                  ; ---------------------------------------------------------------------------
 13105                                  
 13106                                  ; some kind of error occurred. see if it is dma violation
 13107                                  
 13108                                  goterr13:				
 13109 0000153C 80FC09                  		cmp	ah, 9		; dma error?
 13110 0000153F 747C                    		jz	short gotdmaerr
 13111                                  goterr13_xxxx:				
 13112 00001541 80FC11                  		cmp	ah, 11h		; ecc error?
 13113 00001544 75DB                    		jnz	short i13_ret_error ; other error. just	return back.
 13114 00001546 803E[3806]01            		cmp	byte [media_set_for_format], 1 ; formatting?
 13115 0000154B 74D4                    		jz	short i13_ret_error
 13116                                  
 13117 0000154D 803E[1F00]02            		cmp	byte [prevoper+1], 2
 13118                                  		;cmp	byte ptr ds:prevoper+1,	2 ; ecc-corrected error
 13119                                  					; (2 = romread)
 13120                                  					; ECC correction only applies to reads
 13121 00001552 75CD                    		jnz	short i13_ret_error
 13122                                  
 13123 00001554 30E4                    		xor	ah, ah
 13124                                  		;;call	far 70:797h ; MSDOS 6.21 IO.SYS BIOSCODE:15ABh
 13125                                  		; 17/10/2022
 13126 00001556 9A[9707]7000            		call	DOSBIOSSEG:call_orig13
 13127                                  		;call	call_orig13	; call far KERNEL_SEGMENT:call_orig13
 13128                                  					; call far 70:797h
 13129 0000155B A1[1E00]                		mov	ax, [prevoper]
 13130 0000155E 30E4                    		xor	ah, ah		; return code =	no error
 13131 00001560 3C01                    		cmp	al, 1		; if request for one sector, assume ok
 13132 00001562 74B7                    		jz	short ret_from_i13 ; return with carry clear
 13133 00001564 53                      		push	bx
 13134 00001565 51                      		push	cx
 13135 00001566 52                      		push	dx
 13136 00001567 A2[2000]                		mov	[number_of_sec], al
 13137                                  loop_ecc:				
 13138 0000156A B80102                  		mov	ax, 201h	; read one sector
 13139                                  
 13140                                  ; we do reads one sector at a time. this ensures that we will eventually
 13141                                  ; finish the request since ecc errors on one sector do read in that sector.
 13142                                  ;
 13143                                  ; we need to put in some "intelligence" into the ecc handler to handle reads
 13144                                  ; that attempt to read more sectors than are available on a particular
 13145                                  ; track.
 13146                                  ;
 13147                                  ; we call check_wrap to set up the sector #, head # and cylinder # for
 13148                                  ; this request.
 13149                                  ;
 13150                                  ; at this point, all registers are set up for the call to orig13, except
 13151                                  ; that there may be a starting sector number that is bigger than the number
 13152                                  ; of sectors on a track.
 13153                                  ;
 13154 0000156D E88DFE                  		call	check_wrap	; get correct parameters for int 13
 13155                                  		;;call	far 70:797h ; MSDOS 6.21 IO.SYS BIOSCODE:15C5h
 13156                                  		; 17/10/2022
 13157 00001570 9A[9707]7000            		call	DOSBIOSSEG:call_orig13
 13158                                  		;call	call_orig13	; call far KERNEL_SEGMENT:call_orig13
 13159 00001575 730C                    		jnb	short ok11_op
 13160 00001577 80FC09                  		cmp	ah, 9		; DMA error during ECC read?
 13161 0000157A 741B                    		jz	short handle_dma_during_ecc
 13162 0000157C 80FC11                  		cmp	ah, 11h		; only allow ecc errors
 13163 0000157F 7510                    		jnz	short ok11_exit_err
 13164                                  		; 10/12/2022
 13165                                  		; xor ax ax -> ah = 0
 13166                                  		;mov	ah, 0		; ecc error. reset the system again.
 13167 00001581 31C0                    		xor	ax, ax		; clear	the error code so that if this
 13168                                  					; was the last sector, no error	code
 13169                                  					; will be returned for the corrected
 13170                                  					; read.	(clear carry too.)
 13171                                  ok11_op:				
 13172 00001583 FE0E[2000]              		dec	byte [number_of_sec]
 13173 00001587 7409                    		jz	short ok11_exit	; all done?
 13174 00001589 FEC1                    		inc	cl		; advance sector number
 13175                                  					; add 200h to address
 13176 0000158B FEC7                    		inc	bh
 13177 0000158D FEC7                    		inc	bh
 13178 0000158F EBD9                    		jmp	short loop_ecc
 13179                                  ; ---------------------------------------------------------------------------
 13180                                  
 13181                                  ; locate error returns centrally
 13182                                  
 13183                                  ok11_exit_err:				
 13184 00001591 F9                      		stc			; set carry bit again.
 13185                                  ok11_exit:				
 13186 00001592 5A                      		pop	dx
 13187 00001593 59                      		pop	cx
 13188 00001594 5B                      		pop	bx
 13189 00001595 EB88                    		jmp	short i13ret_ck_chglinerr
 13190                                  ; ---------------------------------------------------------------------------
 13191                                  
 13192                                  ; do the single sector read again, this time into our temporary
 13193                                  ; buffer, which is guaranteed not to have a DMA error, then
 13194                                  ; move the data to its proper location and proceed
 13195                                  
 13196                                  handle_dma_during_ecc:			
 13197 00001597 06                      		push	es
 13198 00001598 53                      		push	bx
 13199 00001599 BB[4E01]                		mov	bx, disksector
 13200 0000159C 1E                      		push	ds
 13201 0000159D 07                      		pop	es		; point es:bx to buffer
 13202 0000159E B80102                  		mov	ax, 201h	; read one sector
 13203                                  		;;call	far 70:797h ; MSDOS 6.21 IO.SYS BIOSCODE:15F8h
 13204                                  		; 17/10/2022
 13205 000015A1 9A[9707]7000            		call	DOSBIOSSEG:call_orig13
 13206                                  		;call	call_orig13	; call far KERNEL_SEGMENT:call_orig13
 13207 000015A6 5B                      		pop	bx
 13208 000015A7 07                      		pop	es
 13209 000015A8 7305                    		jnb	short handle_dma_during_ecc_noerr
 13210 000015AA 80FC11                  		cmp	ah, 11h
 13211 000015AD 75E2                    		jnz	short ok11_exit_err ; if anything but ecc error, bomb out
 13212                                  
 13213                                  ; now we're kosher. Copy the data to where it belongs and resume
 13214                                  ; the ECC looping code.
 13215                                  
 13216                                  handle_dma_during_ecc_noerr:		
 13217 000015AF 56                      		push	si
 13218 000015B0 57                      		push	di
 13219 000015B1 89DF                    		mov	di, bx
 13220 000015B3 BE[4E01]                		mov	si, disksector
 13221 000015B6 E829FE                  		call	move_sector
 13222 000015B9 5F                      		pop	di
 13223 000015BA 5E                      		pop	si
 13224 000015BB EBC6                    		jmp	short ok11_op
 13225                                  ; ---------------------------------------------------------------------------
 13226                                  
 13227                                  ; we truly have a dma violation. restore register ax and retry the
 13228                                  ; operation as best we can.
 13229                                  
 13230                                  gotdmaerr:				
 13231 000015BD A1[1E00]                		mov	ax, [prevoper]	; 19/10/2022
 13232 000015C0 FB                      		sti
 13233 000015C1 80FC02                  		cmp	ah, 2		; romread
 13234 000015C4 723B                    		jb	short i13_done_dmaerr
 13235                                  					; just pass dma error thru for
 13236                                  					; functions we don't handle
 13237 000015C6 80FC04                  		cmp	ah, 4		; romverify
 13238 000015C9 743C                    		jz	short intverify
 13239 000015CB 80FC05                  		cmp	ah, 5		; romformat
 13240 000015CE 7448                    		jz	short intformat
 13241 000015D0 772F                    		ja	short i13_done_dmaerr
 13242                                  
 13243                                  ; we are doing a read/write call. check for dma problems
 13244                                  
 13245                                  ;	******** set up stack frame here!!! ********
 13246                                  
 13247 000015D2 52                      		push	dx
 13248 000015D3 51                      		push	cx
 13249 000015D4 53                      		push	bx
 13250 000015D5 50                      		push	ax
 13251 000015D6 55                      		push	bp
 13252 000015D7 89E5                    		mov	bp, sp
 13253 000015D9 8CC2                    		mov	dx, es		; check	for 64k	boundary error
 13254 000015DB D1E2                    		shl	dx, 1
 13255 000015DD D1E2                    		shl	dx, 1
 13256 000015DF D1E2                    		shl	dx, 1
 13257 000015E1 D1E2                    		shl	dx, 1		; segment converted to absolute	address
 13258 000015E3 01DA                    		add	dx, bx		; combine with offset
 13259 000015E5 81C2FF01                		add	dx, 511		; simulate a transfer
 13260                                  
 13261                                  ; if carry is set, then we are within 512 bytes of the end of the segment.
 13262                                  ; we skip the first transfer and perform the remaining buffering and transfer
 13263                                  
 13264 000015E9 7303                    		jnb	short no_skip_first
 13265 000015EB E98300                  		jmp	bufferx		; restore dh=head & do buffer
 13266                                  ; ---------------------------------------------------------------------------
 13267                                  
 13268                                  no_skip_first:				
 13269 000015EE D0EE                    		shr	dh, 1		; dh = number of sectors before	address
 13270 000015F0 B480                    		mov	ah, 128		; ah = max number of sectors in	segment
 13271 000015F2 28F4                    		sub	ah, dh
 13272                                  
 13273                                  ; ah is now the number of sectors that we can successfully write in this
 13274                                  ; segment. if this number is above or equal to the requested number, then we
 13275                                  ; continue the operation as normal. otherwise, we break it into pieces.
 13276                                  ;
 13277                                  ; wait a sec. this is goofy. the whole reason we got here in the
 13278                                  ; first place is because we got a dma error. so it's impossible
 13279                                  ; for the whole block to fit, unless the dma error was returned
 13280                                  ; in error.
 13281                                  
 13282 000015F4 38C4                    		cmp	ah, al		; can we fit it	in?
 13283 000015F6 7236                    		jb	short doblock	; no, perform blocking.
 13284                                  
 13285                                  ; yes, the request fits. let it happen.
 13286                                  
 13287 000015F8 8A7609                  		mov	dh, [bp+9]	; [bp+INT13FRAME.olddx+1]
 13288                                  					; set up head number
 13289 000015FB E888FE                  		call	doint
 13290 000015FE E9D900                  		jmp	bad13		; and return from this place
 13291                                  ; ---------------------------------------------------------------------------
 13292                                  
 13293                                  i13_done_dmaerr:			
 13294 00001601 B409                    		mov	ah, 9		; pass dma error thru to caller
 13295 00001603 F9                      		stc
 13296 00001604 E914FF                  		jmp	ret_from_i13	; return with error,
 13297                                  					; we know it's not a changeline error
 13298                                  ; ---------------------------------------------------------------------------
 13299                                  
 13300                                  ; verify the given sectors. place the buffer pointer into our space.
 13301                                  
 13302                                  intverify:				
 13303 00001607 06                      		push	es		; save caller's dma address
 13304 00001608 53                      		push	bx
 13305 00001609 1E                      		push	ds		; es:bx	-> Bios_Data:disksector
 13306 0000160A 07                      		pop	es
 13307                                  dosimple:				
 13308 0000160B BB[4E01]                		mov	bx, disksector
 13309                                  					; do the i/o from Bios_Data:disksector
 13310                                  		;;call	far 70:797h ; MSDOS 6.21 IO.SYS BIOSCODE:1665h
 13311                                  		; 17/10/2022
 13312 0000160E 9A[9707]7000            		call	DOSBIOSSEG:call_orig13
 13313                                  		;call	call_orig13	; call far KERNEL_SEGMENT:call_orig13
 13314 00001613 5B                      		pop	bx
 13315 00001614 07                      		pop	es
 13316 00001615 E907FF                  		jmp	i13ret_ck_chglinerr
 13317                                  ; ---------------------------------------------------------------------------
 13318                                  
 13319                                  ; format operation. copy the parameter table into Bios_Data:disksector
 13320                                  
 13321                                  intformat:				
 13322 00001618 06                      		push	es
 13323 00001619 53                      		push	bx
 13324 0000161A 56                      		push	si
 13325 0000161B 57                      		push	di
 13326 0000161C 1E                      		push	ds
 13327                                  
 13328                                  ; point ds to the caller's dma buffer, es to Bios_Data
 13329                                  ; in other words, swap (ds, es)
 13330                                  
 13331 0000161D 06                      		push	es
 13332 0000161E 1E                      		push	ds
 13333 0000161F 07                      		pop	es
 13334 00001620 1F                      		pop	ds
 13335 00001621 89DE                    		mov	si, bx
 13336 00001623 BF[4E01]                		mov	di, disksector
 13337 00001626 E8B9FD                  		call	move_sector	; user's data into Bios_Data:disksector
 13338 00001629 1F                      		pop	ds
 13339 0000162A 5F                      		pop	di
 13340 0000162B 5E                      		pop	si		; do the i/o from
 13341 0000162C EBDD                    		jmp	short dosimple	; Bios_Data:disksector
 13342                                  ; ---------------------------------------------------------------------------
 13343                                  
 13344                                  ; we can't fit the request into the entire block. perform the operation on
 13345                                  ; the first block.
 13346                                  ;
 13347                                  ; doblock is modified to correctly handle multi-sector disk i/o.
 13348                                  ; old doblock had added the number of sectors i/oed (ah in old doblock) after
 13349                                  ; the doint call to cl. observing only the lower 6 bits of cl(=max. 64) can
 13350                                  ; represent a starting sector, if ah was big, then cl would be clobbered.
 13351                                  ; by the way, we still are going to use cl for this purpose since checkwrap
 13352                                  ; routine will use it as an input. to prevent cl from being clobbered, a
 13353                                  ; safe number of sectors should be calculated like "63 - # of sectors/track".
 13354                                  ; doblock will handle the first block of requested sectors within the
 13355                                  ; boundary of this safe value.
 13356                                  
 13357                                  doblock:
 13358                                  
 13359                                  ; try to get the # of sectors/track from bds via rom drive number.
 13360                                  ; for any mini disks installed, here we have to pray that they have the
 13361                                  ; same # of sector/track as the main dos partition disk drive.
 13362                                  				
 13363 0000162E 8B5608                  		mov	dx, [bp+8]	; [bp+INT13FRAME.olddx]
 13364                                  					; get head #, drive #
 13365 00001631 51                      		push	cx
 13366 00001632 06                      		push	es
 13367 00001633 57                      		push	di		; ah - # of sectors before dma boundary
 13368                                  					; al - requested # of sectors for i/o.
 13369 00001634 E83BFE                  		call	find_bds
 13370 00001637 268B4D13                		mov	cx, [es:di+13h]	; [es:di+BDS.secpertrack]
 13371                                  		; 12/12/2022
 13372 0000163B 26F6452301              		test	byte [es:di+23h], 1
 13373                                  		;test	word [es:di+23h], 1 ; [es:di+BDS.flags],fnon_removable
 13374 00001640 5F                      		pop	di
 13375 00001641 07                      		pop	es
 13376 00001642 88E0                    		mov	al, ah		; set al=ah for	floppies
 13377 00001644 7404                    		jz	short doblockflop ; they are track by track operation
 13378 00001646 B43F                    		mov	ah, 63		; ah = 63-secpt	(# safe	sectors??)
 13379 00001648 28CC                    		sub	ah, cl		; al - # of sectors before dma boundary
 13380                                  doblockflop:				
 13381 0000164A 59                      		pop	cx
 13382                                  doblockcontinue:			
 13383 0000164B 38C4                    		cmp	ah, al		; if safe_# >= #_of_sectors_to_go_before dma,
 13384 0000164D 7305                    		jnb	short doblocklast ; then #_of_sectors_to_go as it is for doint.
 13385 0000164F 50                      		push	ax
 13386 00001650 88E0                    		mov	al, ah		; otherwise, set al to ah to operate.
 13387 00001652 EB03                    		jmp	short doblockdoint
 13388                                  ; ---------------------------------------------------------------------------
 13389                                  
 13390                                  doblocklast:				
 13391 00001654 88C4                    		mov	ah, al
 13392 00001656 50                      		push	ax
 13393                                  doblockdoint:				; let ah = al =	# of sectors for this shot	
 13394 00001657 E82CFE                  		call	doint
 13395 0000165A 727E                    		jb	short bad13	; something happened, bye!
 13396 0000165C 58                      		pop	ax
 13397 0000165D 286602                  		sub	[bp+2],	ah	; sub [bp+INT13FRAME.oldax], ah
 13398                                  					; decrement by the successful operation
 13399 00001660 00E1                    		add	cl, ah		; advance sector #. safety gauranteed.
 13400 00001662 00E7                    		add	bh, ah		; advance dma addres
 13401 00001664 00E7                    		add	bh, ah		; twice	for 512	byte sectors
 13402 00001666 38C4                    		cmp	ah, al		; check	the previous value
 13403 00001668 740A                    		jz	short buffer	; if #_of_sectors_to_go	< safe_#,
 13404                                  					; then we are done already.
 13405 0000166A 28E0                    		sub	al, ah		; otherwise,
 13406                                  					; #_sector_to_go = #_of_sector_to_go - safe_#
 13407 0000166C E88EFD                  		call	check_wrap	; get new cx, dh for the next operation.
 13408 0000166F EBDA                    		jmp	short doblockcontinue ;	handles	next sectors left.
 13409                                  ; ---------------------------------------------------------------------------
 13410                                  
 13411                                  bufferx:				
 13412 00001671 8A7609                  		mov	dh, [bp+9]	; [bp+INT13FRAME.olddx+1]
 13413                                  					; set up head number
 13414                                  buffer:					
 13415 00001674 53                      		push	bx
 13416 00001675 8A6603                  		mov	ah, [bp+3]	; [bp+INT13FRAME.oldax+1]
 13417 00001678 80FC03                  		cmp	ah, 3		; romwrite
 13418 0000167B 7525                    		jnz	short doread	;
 13419                                  					
 13420                                  ; copy the offending sector into local buffer
 13421                                  
 13422 0000167D 06                      		push	es
 13423 0000167E 1E                      		push	ds
 13424 0000167F 56                      		push	si
 13425 00001680 57                      		push	di
 13426 00001681 1E                      		push	ds		; exchange segment registers
 13427 00001682 06                      		push	es
 13428 00001683 1F                      		pop	ds
 13429 00001684 07                      		pop	es
 13430 00001685 BF[4E01]                		mov	di, disksector	; where to move
 13431 00001688 57                      		push	di		; save it
 13432 00001689 89DE                    		mov	si, bx		; source
 13433 0000168B E854FD                  		call	move_sector	; move sector into local buffer
 13434 0000168E 5B                      		pop	bx		; new transfer address
 13435                                  					; (es:bx = Bios_Data:diskbuffer)
 13436 0000168F 5F                      		pop	di		; restore caller's di & si
 13437 00001690 5E                      		pop	si
 13438 00001691 1F                      		pop	ds		; restore Bios_Data
 13439                                  
 13440                                  ; see if we are wrapping around a track or head
 13441                                  
 13442 00001692 B001                    		mov	al, 1		; [bp+INT13FRAME.olddx]
 13443                                  					; get drive number
 13444 00001694 8A5608                  		mov	dl, [bp+8]
 13445 00001697 E863FD                  		call	check_wrap	; sets up registers if wrap-around
 13446                                  					;
 13447                                  					; ah is	function
 13448                                  					; al is	1 for single sector transfer
 13449                                  					; es:bx	is local transfer addres
 13450                                  					; cx is	track/sector number
 13451                                  					; dx is	head/drive number
 13452                                  					; si,di	unchanged
 13453 0000169A E8E9FD                  		call	doint
 13454 0000169D 07                      		pop	es		; restore caller's dma segment
 13455 0000169E 723A                    		jb	short bad13	; go clean up
 13456 000016A0 EB22                    		jmp	short dotail
 13457                                  ; ---------------------------------------------------------------------------
 13458                                  
 13459                                  ; reading a sector. do int first, then move things around
 13460                                  
 13461                                  doread:					
 13462 000016A2 06                      		push	es
 13463 000016A3 53                      		push	bx
 13464 000016A4 1E                      		push	ds		; es = Bios_Code
 13465 000016A5 07                      		pop	es
 13466 000016A6 BB[4E01]                		mov	bx, disksector
 13467 000016A9 B001                    		mov	al, 1
 13468 000016AB 8A5608                  		mov	dl, [bp+8]	; [bp+INT13FRAME.olddx]
 13469                                  					; get drive number
 13470 000016AE E84CFD                  		call	check_wrap	;
 13471                                  					; ah = function
 13472                                  					; al = 1 for single sector
 13473                                  					; es:bx	points to local	buffer
 13474                                  					; cx, dx are track/sector, head/drive
 13475 000016B1 E8D2FD                  		call	doint
 13476 000016B4 5B                      		pop	bx
 13477 000016B5 07                      		pop	es
 13478 000016B6 7222                    		jb	short bad13
 13479 000016B8 56                      		push	si
 13480 000016B9 57                      		push	di
 13481 000016BA 89DF                    		mov	di, bx
 13482 000016BC BE[4E01]                		mov	si, disksector
 13483 000016BF E820FD                  		call	move_sector
 13484 000016C2 5F                      		pop	di
 13485 000016C3 5E                      		pop	si
 13486                                  
 13487                                  ; note the fact that we've done 1 more sector
 13488                                  
 13489                                  dotail:					
 13490 000016C4 5B                      		pop	bx		; retrieve new dma area
 13491 000016C5 80C702                  		add	bh, 2		; advance over sector
 13492 000016C8 41                      		inc	cx
 13493 000016C9 8A4602                  		mov	al, [bp+2]	; [bp+INT13FRAME.oldax]
 13494 000016CC F8                      		clc
 13495 000016CD FEC8                    		dec	al
 13496 000016CF 7409                    		jz	short bad13	; no more i/o
 13497                                  
 13498                                  ; see if we wrap around a track or head boundary with starting sector
 13499                                  ; we already have the correct head number to pass to check_wrap
 13500                                  
 13501 000016D1 8A5608                  		mov	dl, [bp+8]	; [bp+INT13FRAME.olddx]
 13502 000016D4 E826FD                  		call	check_wrap
 13503 000016D7 E8ACFD                  		call	doint
 13504                                  
 13505                                  ; we are done. ax has the final code; we throw away what we got before
 13506                                  
 13507                                  ; M046  -- okay gang. Now we've either terminated our DMA loop,
 13508                                  ;	   or we've finished. If carry is set now, our only
 13509                                  ;	   hope for salvation is that it was a read operation
 13510                                  ;	   and the error code is ECC error. In that case, we'll
 13511                                  ;	   just pop the registers and go do the old ECC thing.
 13512                                  ;	   When the DMA error that got us here in the first
 13513                                  ;	   place occurs, it'll handle it.
 13514                                  
 13515                                  bad13:					
 13516 000016DA 89EC                    		mov	sp, bp
 13517 000016DC 5D                      		pop	bp
 13518 000016DD 5B                      		pop	bx
 13519 000016DE 5B                      		pop	bx
 13520 000016DF 59                      		pop	cx
 13521 000016E0 5A                      		pop	dx
 13522 000016E1 7203                    		jb	short xgoterr13_xxxx ; go handle ECC errors
 13523 000016E3 E935FE                  		jmp	ret_from_i13	; non-error exit
 13524                                  ; ---------------------------------------------------------------------------
 13525                                  
 13526                                  xgoterr13_xxxx:				
 13527 000016E6 E958FE                  		jmp	goterr13_xxxx
 13528                                  
 13529                                  ; ---------------------------------------------------------------------------
 13530                                  		; 10/12/2022
 13531                                  		;db 	0
 13532                                  ; ---------------------------------------------------------------------------
 13533                                  
 13534                                  ;Bios_Code ends
 13535                                  
 13536                                  ; 16/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 13537                                  
 13538                                  ;-----------------------------------------------------------------------------
 13539                                  ; MSBIO2.ASM - MSDOS 6.0 - 1991
 13540                                  ;-----------------------------------------------------------------------------
 13541                                  ; 17/03/2019 - Retro DOS v4.0
 13542                                  
 13543                                  		; 19/10/2022
 13544                                  dsk_init:				; 2C7h:1742h = 70h:3CB2h
 13545 000016E9 8A26[7500]              		mov	ah, [drvmax]
 13546 000016ED BF[8706]                		mov	di, dskdrvs
 13547 000016F0 1E                      		push	ds		; pass result in es:di
 13548 000016F1 07                      		pop	es
 13549 000016F2 E9C3EE                  		jmp	SetPtrSav
 13550                                  
 13551                                  ; =============== S U B	R O U T	I N E =======================================
 13552                                  
 13553                                  ;---------------------------------------------------------------------------
 13554                                  ; install_bds installs a bds at location es:di into the current linked list of
 13555                                  ; bds maintained by this device driver. it places the bds at the end of the
 13556                                  ; list. Trashes (at least) ax, bx, di, si
 13557                                  ;---------------------------------------------------------------------------
 13558                                  
 13559                                  install_bds:		
 13560 000016F5 1E                      		push	ds		; save Bios_Data segment
 13561 000016F6 BE[1901]                		mov	si, start_bds	; beginning of chain
 13562                                  
 13563                                  		; ds:si now points to link to first bds
 13564                                  		; assume bds list is non-empty
 13565                                  loop_next_bds:				
 13566 000016F9 C534                    		lds	si, [si]	; [si+BDS.link]
 13567                                  					; fetch	next bds
 13568 000016FB 268A4504                		mov	al, [es:di+4]	; [es:di+BDS.drivenum]
 13569 000016FF 384404                  		cmp	[si+4],	al	; does this one	share a	physical
 13570                                  					; drive	with new one?
 13571 00001702 7518                    		jnz	short next_bds
 13572 00001704 B310                    		mov	bl, 10h		; fi_am_mult
 13573 00001706 26085D23                		or	[es:di+23h], bl	; [es:di+BDS.flags]
 13574                                  					; set both of them to i_am_mult	if so
 13575 0000170A 085C23                  		or	[si+23h], bl	; [si+BDS.flags]
 13576 0000170D 26806523DF              		and	byte [es:di+23h], 0DFh ; [es:di+BDS.flags],~fi_own_physical
 13577                                  					; we don't own it
 13578 00001712 8A5C23                  		mov	bl, [si+23h]	; [si+BDS.flags]
 13579                                  					; determine if changeline available
 13580 00001715 80E302                  		and	bl, 2		; fchangeline
 13581 00001718 26085D23                		or	[es:di+23h], bl	; [es:di+BDS.flags]
 13582                                  next_bds:				
 13583 0000171C 833CFF                  		cmp	word [si], 0FFFFh ; [si+BDS.link],-1
 13584                                  					; are we at end	of list?
 13585 0000171F 75D8                    		jnz	short loop_next_bds
 13586 00001721 8C4402                  		mov	word [si+2], es ; [si+BDS.link+2],es
 13587                                  					; install bds
 13588 00001724 893C                    		mov	[si], di
 13589 00001726 26C705FFFF              		mov	word [es:di], 0FFFFh ; [es:di+BDS.link],-1
 13590                                  					; set next pointer to null
 13591 0000172B 1F                      		pop	ds
 13592                                  
 13593                                  ; 16/10/2022 (MSDOS 6.0 Code)
 13594                                  ;
 13595                                  ; **** If the new drive has a higher EOT value, we must alter the
 13596                                  ;      'eot' variable appropriately.
 13597                                  ;
 13598                                  ;		; 01/06/2019
 13599                                  ;		;mov	al,[es:di+52]
 13600                                  ;		mov	al,[es:di+BDS.rsecpertrack]
 13601                                  ;
 13602                                  ;		cmp	al,[eot]
 13603                                  ;		jbe	short _eot_ok
 13604                                  ;		mov	[eot],al
 13605                                  
 13606 0000172C C3                      		retn
 13607                                  
 13608                                  ; ---------------------------------------------------------------------------
 13609                                  
 13610                                  ; 17/10/2022
 13611                                  ;DRVLET	equ drvlet - DOSBIOSEG_2C7h
 13612                                  ;SNGMSG	equ sngmsg - DOSBIOSEG_2C7h	
 13613                                  ; 09/12/2022
 13614                                  DRVLET equ drvlet
 13615                                  SNGMSG equ sngmsg
 13616                                  
 13617                                  ; 16/10/2022
 13618                                  
 13619                                  ;---------------------------------------------------------------------------
 13620                                  ;  ask to swap the disk in drive a:
 13621                                  ;	es:di -> bds
 13622                                  ;	ds -> Bios_Data
 13623                                  ;---------------------------------------------------------------------------
 13624                                  
 13625                                  		; 19/10/2022
 13626 0000172D F606[CE08]01            swpdsk:		test	byte [IsWin386], 1			
 13627                                  		;test	ds:IsWin386, 1	; Is win386 present?
 13628 00001732 7405                    		jz	short no_win386	; no, skip SetFocus
 13629                                  		
 13630                                  		; set focus to the correct VM
 13631                                  		;;call	far 70h:8D1h	; MSDOS 6.21 IO.SYS BIOSCODE:179Ah
 13632                                  		; 17/10/2022
 13633 00001734 9A[CF08]7000            		call	DOSBIOSSEG:V86_Crit_SetFocus
 13634                                  		;call	far ptr	V86_Crit_SetFocus ; call far 70h:8D1h
 13635                                  					; call far KERNEL_SEGMENT:V86_Crit_SetFocus
 13636                                  no_win386:				
 13637 00001739 51                      		push	cx
 13638 0000173A 52                      		push	dx
 13639 0000173B 268A5505                		mov	dl, [es:di+5]	; [es:di+BDS.drivelet]
 13640                                  					; get the drive	letter
 13641                                  
 13642                                  ; WARNING : next two instructions assume that if the new disk is for drive B
 13643                                  ;           then existing dsk is drive A & vice versa
 13644                                  
 13645 0000173F 88D6                    		mov	dh, dl
 13646 00001741 80F601                  		xor	dh, 1
 13647 00001744 29C9                    		sub	cx, cx		; nobody has handled swap disk
 13648 00001746 B8004A                  		mov	ax, 4A00h	; multMULT<<8)|multMULTSWPDSK
 13649                                  					; broad	cast code for swap disk
 13650                                  					; Broadcast it
 13651 00001749 CD2F                    		int	2Fh	
 13652 0000174B 41                      		inc	cx		; cx == -1 ?
 13653 0000174C 741E                    		jz	short swpdsk9	; somebody has handled it
 13654                                  
 13655                                  ; using a different drive in a one drive system so request the user change disks
 13656                                  
 13657 0000174E 80C241                  		add	dl, 'A'
 13658                                  		; 17/10/2022
 13659 00001751 2E8816[8B17]            		mov	[cs:DRVLET], dl
 13660                                  		; 16/10/2022
 13661                                  		;;mov	byte [cs:drvlet], dl
 13662                                  		;mov	byte ptr cs:17E4h, dl ; [cs:drvlet]
 13663                                  					; 0070h:3D54h =	2C7h:17E4h
 13664 00001756 BE[6F17]                		mov	si, SNGMSG
 13665                                  		;mov	si, 17C8h	; sngmsg
 13666                                  					; 0070h:3D38h =	2C7h:17C8h
 13667 00001759 53                      		push	bx
 13668 0000175A 2E                      		cs
 13669 0000175B AC                      		lodsb			; get the next character of the message
 13670                                  		;lods	byte ptr cs:[si]
 13671                                  wrmsg_loop:				
 13672 0000175C CD29                    		int	29h		; DOS 2+ internal - FAST PUTCHAR
 13673                                  					; AL = character to display
 13674 0000175E 2E                      		cs
 13675 0000175F AC                      		lodsb
 13676                                  		;lods	byte ptr cs:[si] ; cs lodsb
 13677                                  					; get the next character of the	message
 13678 00001760 08C0                    		or	al, al
 13679 00001762 75F8                    		jnz	short wrmsg_loop
 13680 00001764 E8A0EA                  		call	con_flush	; flush out keyboard queue
 13681                                  					; call rom-bios
 13682 00001767 30E4                    		xor	ah, ah
 13683 00001769 CD16                    		int	16h		; KEYBOARD - READ CHAR FROM BUFFER, WAIT IF EMPTY
 13684                                  					; Return: AH = scan code, AL = character
 13685 0000176B 5B                      		pop	bx
 13686                                  swpdsk9:				
 13687 0000176C 5A                      		pop	dx
 13688 0000176D 59                      		pop	cx
 13689 0000176E C3                      		retn
 13690                                  
 13691                                  ; ---------------------------------------------------------------------------
 13692                                  
 13693                                  ; 16/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 13694                                  
 13695                                  ;--------------------------------------------------------
 13696                                  ; include msbio.cl2 (MSDOS 6.0, 1991)
 13697                                  ;--------------------------------------------------------
 13698                                  ; (MSDOS 6.21 IO.SYS BIOSCODE:17D5h)
 13699                                  ;--------------------------------------------------------
 13700                                  ; 17/03/2019 - Retro DOS v4.0
 13701                                  
 13702                                  		; MSDOS 5.0 IO.SYS offset 0070h:3D38h or 02C7h:17C8h
 13703 0000176F 0D0A                    sngmsg:		db 0Dh,0Ah
 13704 00001771 496E73657274206469-     		db 'Insert diskette for drive '
 13704 0000177A 736B6574746520666F-
 13704 00001783 7220647269766520   
 13705                                  
 13706                                  		; MSDOS 5.0 IO.SYS offset 0070h:3D54h or 02C7h:17E4h
 13707 0000178B 413A20616E64207072-     drvlet:		db 'A: and press any key when ready',0Dh,0Ah
 13707 00001794 65737320616E79206B-
 13707 0000179D 6579207768656E2072-
 13707 000017A6 656164790D0A       
 13708 000017AC 0A00                    		db 0Ah,0
 13709                                  
 13710                                  ; =============== S U B	R O U T	I N E =======================================
 13711                                  
 13712                                  ;---------------------------------------------------------------------------
 13713                                  ; input : es:di points to current bds for drive.
 13714                                  ; return : zero set if no open files
 13715                                  ;	   zero reset if open files
 13716                                  ;---------------------------------------------------------------------------
 13717                                  
 13718                                  chkopcnt:		
 13719 000017AE 26837D2000              		cmp	word [es:di+20h], 0 ; [es:di+BDS.opcnt]
 13720 000017B3 C3                      		retn
 13721                                  
 13722                                  ; =============== S U B	R O U T	I N E =======================================
 13723                                  
 13724                                  ;---------------------------------------------------------------------------
 13725                                  ; at media check time, we need to really get down and check what the change is.
 13726                                  ; this is guaranteed to be expensive.
 13727                                  ;
 13728                                  ;	es:di -> bds, ds -> Bios_Data
 13729                                  ;---------------------------------------------------------------------------
 13730                                  
 13731                                  mediacheck:	
 13732 000017B4 E885F0                  		call	checksingle	; make sure correct disk is in place
 13733 000017B7 31F6                    		xor	si, si
 13734 000017B9 E85501                  		call	haschange
 13735 000017BC 742F                    		jz	short mediaret
 13736 000017BE E84401                  		call	checkromchange
 13737 000017C1 752B                    		jnz	short mediadovolid
 13738 000017C3 50                      		push	ax
 13739 000017C4 52                      		push	dx
 13740 000017C5 268A5504                		mov	dl, [es:di+4]	; [es:di+BDS.drivenum]
 13741                                  					; set logical drive number
 13742 000017C9 B416                    		mov	ah, 16h
 13743 000017CB CD13                    		int	13h		; DISK - FLOPPY	DISK - CHANGE OF DISK STATUS (AT,XT2,XT286,CONV,PS)
 13744                                  					; DL = drive to	check
 13745                                  					; Return: AH = disk change status
 13746 000017CD 5A                      		pop	dx
 13747 000017CE 58                      		pop	ax
 13748 000017CF 721D                    		jb	short mediadovolid
 13749 000017D1 BE0100                  		mov	si, 1		; signal no change
 13750                                  
 13751                                  ; there are some drives with changeline that "lose" the changeline indication
 13752                                  ; if a different drive is accessed after the current one. in order to avoid
 13753                                  ; missing a media change, we return an "i don't know" to dos if the changeline
 13754                                  ; is not active and we are accessing a different drive from the last one.
 13755                                  ; if we are accessing the same drive, then we can safely rely on the changeline
 13756                                  ; status.
 13757                                  		; 19/10/2022
 13758 000017D4 8A1E[1E01]              		mov	bl, [tim_drv]	; get last drive accessed
 13759 000017D8 26385D04                		cmp	[es:di+4], bl	; [es:di+BDS.drivenum]
 13760                                  					; (If the last drive accessed is not current drive
 13761                                  					; media	change status may be incorrect.	So,
 13762                                  					; "I don't now" will be returned even if it is indicated
 13763                                  					; as media is not changed.)
 13764 000017DC 740F                    		jz	short mediaret	; (same	drive,
 13765                                  					; media	changeline indication is reliable)
 13766                                  
 13767                                  ; do the 2 second twiddle. if time >= 2 seconds, do a volid check.
 13768                                  ; otherwise return "i don't know" (strictly speaking, we should return a
 13769                                  ; "not changed" here since the 2 second test said no change.)
 13770                                  
 13771 000017DE 50                      		push	ax
 13772 000017DF 51                      		push	cx
 13773 000017E0 52                      		push	dx
 13774 000017E1 E86FED                  		call	Check_Time_Of_Access
 13775 000017E4 5A                      		pop	dx
 13776 000017E5 59                      		pop	cx
 13777 000017E6 58                      		pop	ax
 13778 000017E7 09F6                    		or	si, si
 13779 000017E9 7403                    		jz	short mediadovolid ; check_time	says ">= 2 secs	passed"
 13780                                  					; (volume id will be checked)
 13781 000017EB 31F6                    		xor	si, si		; return "i don't know"
 13782                                  mediaret:				
 13783 000017ED C3                      		retn
 13784                                  ; ---------------------------------------------------------------------------
 13785                                  
 13786                                  ; somehow the media was changed. look at vid to see. we do not look at fat
 13787                                  ; because this may be different since we only set medbyt when doing a read
 13788                                  ; or write.
 13789                                  
 13790                                  mediadovolid:				
 13791 000017EE E807EE                  		call	GetBp		; build	a new bpb in current bds
 13792 000017F1 72FA                    		jb	short mediaret
 13793 000017F3 E82D00                  		call	check_vid
 13794 000017F6 73F5                    		jnb	short mediaret
 13795 000017F8 E9D6F3                  		jmp	maperror	; fix up al for	return to dos
 13796                                  ; ---------------------------------------------------------------------------
 13797                                  
 13798                                  ; simple, quick check of latched change. if no indication, then return
 13799                                  ; otherwise do expensive check. if the expensive test fails, pop off the
 13800                                  ; return and set al = 15 (for invalid media change) which will be returned to
 13801                                  ; dos.
 13802                                  ;
 13803                                  ; for dos 3.3, this will work only for the drive that has changeline.
 13804                                  
 13805                                  ;	call with es:di -> bds, ds -> Bios_Data
 13806                                  ;	***** warning:  this routine will return one level up on the stack
 13807                                  ;			if an error occurs!
 13808                                  
 13809                                  checklatchio:	
 13810                                  
 13811                                  ; if returning fake bpb then assume the disk has not changed
 13812                                  			
 13813 000017FB E8B0FF                  		call	chkopcnt
 13814 000017FE 741B                    		jz	short checkret	; done if zero
 13815                                  
 13816                                  ; check for past rom indications. if no rom change indicated, then return ok.
 13817                                  
 13818 00001800 E80201                  		call	checkromchange
 13819 00001803 7416                    		jz	short checkret
 13820                                  
 13821                                  ; we now see that a change line has been seen in the past. let's do the
 13822                                  ; expensive verification.
 13823                                  
 13824 00001805 E8F0ED                  		call	GetBp		; build	bpb in current bds
 13825 00001808 720F                    		jb	short ret_no_error_map ; getbp has already called maperror
 13826 0000180A E81600                  		call	check_vid
 13827 0000180D 7207                    		jb	short checklatchret ; disk error trying	to read	in.
 13828 0000180F 09F6                    		or	si, si		; is changed for sure?
 13829 00001811 7908                    		jns	short checkret
 13830 00001813 E87D00                  		call	returnvid
 13831                                  checklatchret:				
 13832 00001816 E8B8F3                  		call	maperror	; fix up al for	return to dos
 13833                                  ret_no_error_map:			
 13834 00001819 F9                      		stc
 13835 0000181A 5E                      		pop	si		; pop off return address
 13836                                  checkret:				
 13837 0000181B C3                      		retn
 13838                                  ; ---------------------------------------------------------------------------
 13839                                  
 13840                                  ; check the fat and the vid. return in di -1 or 0. return with carry set
 13841                                  ; only if there was a disk error. return that error code in ax.
 13842                                  ;
 13843                                  ;	called with es:di -> bds, ds -> Bios_Data
 13844                                  
 13845                                  checkfatvid:				
 13846 0000181C E8CD01                  		call	fat_check	; check	the fat	and the	vid
 13847 0000181F 09F6                    		or	si, si
 13848 00001821 7827                    		js	short changed_drv ;
 13849                                  
 13850                                  ; the fat was the same. fall into check_vid and check volume id.
 13851                                  
 13852                                  		; fall into check_vid
 13853                                  
 13854                                  ; =============== S U B	R O U T	I N E =======================================
 13855                                  
 13856                                  ; now with the extended boot record, the logic should be enhanced.
 13857                                  ;
 13858                                  ; if it is the extended boot record, then we check the volume serial
 13859                                  ; number instead of volume id. if it is different, then set si to -1.
 13860                                  ;
 13861                                  ; if it is same, then si= 1 (no change).
 13862                                  ;
 13863                                  ; if it is not the extended boot record, then just follows the old
 13864                                  ; logic. dos 4.00 will check if the # of fat in the boot record bpb
 13865                                  ; is not 0.  if it is 0 then it must be non_fat based system and
 13866                                  ; should have already covered by extended boot structure checking.
 13867                                  ; so, we will return "i don't know" by setting si to 0.
 13868                                  ;
 13869                                  ; this routine assume the newest valid boot record is in cs:[disksector].
 13870                                  ; (this will be gauranteed by a successful getbp call right before this
 13871                                  ; routine.)
 13872                                  ;
 13873                                  ;	called with es:di -> bds, ds -> bds
 13874                                  
 13875                                  		; 19/10/2022
 13876                                  check_vid:
 13877                                  
 13878                                  ; check the disksector.EXT_BOOT_SIG variable for the extended
 13879                                  ; boot signature. if it is set then go to do the extended
 13880                                  ; id check otherwise continue with code below
 13881                                  
 13882 00001823 803E[7401]29            		cmp	byte [disksector+26h], 29h
 13883                                  					; [disksector+EXT_BOOT.SIG],
 13884                                  					; EXT_BOOT_SIGNATURE
 13885 00001828 7427                    		jz	short do_ext_check_id
 13886 0000182A E8E400                  		call	haschange
 13887 0000182D 74EC                    		jz	short checkret
 13888 0000182F 31F6                    		xor	si, si
 13889 00001831 803E[5E01]00            		cmp	byte [disksector+10h], 0 
 13890                                  					; [disksector+EXT_BOOT.BPB+EBPB.NUMBEROFFATS]
 13891 00001836 7411                    		jz	short checkfatret ; don't read vol id
 13892                                  					; if not fat system
 13893 00001838 E8F600                  		call	read_volume_id
 13894 0000183B 720C                    		jb	short checkfatret
 13895 0000183D E89B01                  		call	check_volume_id
 13896 00001840 BEFFFF                  		mov	si, 0FFFFh	; -1
 13897                                  					; definitely changed
 13898 00001843 7505                    		jnz	short changed_drv
 13899                                  
 13900 00001845 46                      		inc	si		; not changed
 13901                                  vid_no_changed:				
 13902 00001846 E8C200                  		call	resetchanged
 13903                                  		; 12/12/2022
 13904                                  		; cf=0 ('and' instruction in 'resetchanged' clears cf) 
 13905                                  		;clc
 13906                                  checkfatret:				
 13907 00001849 C3                      		retn
 13908                                  ; ---------------------------------------------------------------------------
 13909                                  
 13910                                  		; 12/12/2022
 13911                                  changed_drv:
 13912 0000184A F8                      		clc			; cas -- return	no error
 13913 0000184B C606[1E01]FF            		mov	byte  [tim_drv], 0FFh 
 13914                                  					; ensure that we ask rom for media
 13915 00001850 C3                      		retn			; check	next time round
 13916                                  ; ---------------------------------------------------------------------------
 13917                                  
 13918                                  ; extended id check
 13919                                  
 13920                                  ; 16/10/2022
 13921                                  
 13922                                  ; the code to check extended id is basically a check to see if the
 13923                                  ; volume serial number is still the same. the volume serial number
 13924                                  ; previously read is in cs:disksector.EXT_BOOT_SERIAL
 13925                                  ; ds:di points to the bds of the drive under consideration.
 13926                                  ; the bds has fields containing the high and low words 
 13927                                  ; of the volume serial number of the media in the drive.
 13928                                  ; compare these fields to the fields mentioned above. if these fields
 13929                                  ; do not match the media has changed and so we should jump to the code
 13930                                  ; starting at ext_changed else return "i don't know" status
 13931                                  ; in the register used for the changeline status and continue executing
 13932                                  ; the code given below. for temporary storage use the register which
 13933                                  ; has been saved and restored around this block.
 13934                                  ;
 13935                                  ; bds fields in inc\msbds.inc
 13936                                  
 13937                                  		; 19/10/2022
 13938                                  do_ext_check_id:			
 13939 00001851 50                      		push	ax
 13940                                  		;mov	ax, word ptr ds:disksector+27h
 13941                                  					; [DiskSector+EXT_BOOT.SERIAL]
 13942 00001852 A1[7501]                		mov	ax, [disksector+27h]
 13943 00001855 263B4557                		cmp	ax, [es:di+57h]	; [di+BDS.vol_serial]
 13944 00001859 750E                    		jnz	short ext_changed
 13945 0000185B A1[7701]                		mov	ax, [disksector+29h] ; [DiskSector+EXT_BOOT.SERIAL+2]
 13946 0000185E 263B4559                		cmp	ax, [es:di+59h]	; [di+BDS.vol_serial+2]
 13947 00001862 7505                    		jnz	short ext_changed
 13948 00001864 31F6                    		xor	si, si		; 0
 13949                                  					; don't know
 13950 00001866 58                      		pop	ax
 13951 00001867 EBDD                    		jmp	short vid_no_changed
 13952                                  					; reset the flag
 13953                                  ; ---------------------------------------------------------------------------
 13954                                  
 13955                                  ext_changed:				
 13956 00001869 58                      		pop	ax
 13957 0000186A BEFFFF                  		mov	si, 0FFFFh	; -1
 13958                                  					; disk changed!
 13959                                  		; 12/12/2022
 13960                                  		; ('changed_drv' clears cf)
 13961                                  		;clc
 13962 0000186D EBDB                    		jmp	short changed_drv
 13963                                  
 13964                                  ; ---------------------------------------------------------------------------
 13965                                  
 13966                                  ; at i/o time, we detected the error. now we need to determine whether the
 13967                                  ; media was truly changed or not. we return normally if media change unknown.
 13968                                  ; and we pop off the call and jmp to harderr if we see an error.
 13969                                  ;
 13970                                  ; es:di -> bds
 13971                                  
 13972                                  checkio:				
 13973 0000186F 80FC06                  		cmp	ah, 6
 13974 00001872 75D5                    		jnz	short checkfatret
 13975 00001874 E837FF                  		call	chkopcnt
 13976 00001877 74D0                    		jz	short checkfatret
 13977 00001879 E87CED                  		call	GetBp
 13978 0000187C 7212                    		jb	short no_error_map
 13979 0000187E E89BFF                  		call	checkfatvid
 13980 00001881 7209                    		jb	short checkioret ; disk	error trying to	read in.
 13981 00001883 09F6                    		or	si, si		; is changed for sure?
 13982 00001885 7802                    		js	short checkioerr ; yes changed
 13983 00001887 45                      		inc	bp		; allow	a retry
 13984 00001888 C3                      		retn
 13985                                  ; ---------------------------------------------------------------------------
 13986                                  
 13987                                  checkioerr:				
 13988 00001889 E80700                  		call	returnvid
 13989                                  
 13990                                  checkioret:				
 13991 0000188C F9                      		stc			; make sure carry gets passed through
 13992 0000188D E9F1F2                  		jmp	harderr
 13993                                  ; ---------------------------------------------------------------------------
 13994                                  
 13995                                  no_error_map:				
 13996 00001890 E9F1F2                  		jmp	harderr2
 13997                                  
 13998                                  ; =============== S U B	R O U T	I N E =======================================
 13999                                  
 14000                                  ; return vid sets up the vid for a return to dos.
 14001                                  ;  es:di -> bds, returns pointer in packet to bds_volid
 14002                                  ;  **** trashes si! ****
 14003                                  
 14004                                  returnvid:		
 14005 00001893 BE1600                  		mov	si, 22		; extra
 14006                                  					; offset into pointer to return	value
 14007 00001896 E80700                  		call	vid_into_packet
 14008 00001899 B406                    		mov	ah, 6
 14009 0000189B F9                      		stc
 14010 0000189C C3                      		retn
 14011                                  
 14012                                  ; ---------------------------------------------------------------------------
 14013                                  
 14014                                  ; moves the pointer to the volid for the drive into the original request packet
 14015                                  ; no attempt is made to preserve registers.
 14016                                  ;
 14017                                  ; assumes es:di -> bds
 14018                                  ; **trashes si**
 14019                                  
 14020                                  media_set_vid:				
 14021 0000189D BE0F00                  		mov	si, 15		; trans+1
 14022                                  					; return the value here	in packet
 14023                                  
 14024                                  		; fall into vid_into_packet
 14025                                  
 14026                                  ; =============== S U B	R O U T	I N E =======================================
 14027                                  
 14028                                  ; return pointer to vid in bds at es:di in packet[si]
 14029                                  
 14030                                  		; 19/10/2022
 14031                                  vid_into_packet:
 14032 000018A0 1E                      		push	ds		; return pointer to vid	in bds at es:di	in packet[si]
 14033 000018A1 C51E[1200]              		lds	bx, [ptrsav]
 14034 000018A5 83C74B                  		add	di, 75		; BDS.volid
 14035 000018A8 8938                    		mov	[bx+si], di
 14036 000018AA 83EF4B                  		sub	di, 75		; BDS.volid
 14037 000018AD 8C4002                  		mov	[bx+si+2], es
 14038 000018B0 1F                      		pop	ds
 14039                                  dofloppy:	; 18/12/2022
 14040 000018B1 C3                      		retn
 14041                                  
 14042                                  ; ---------------------------------------------------------------------------
 14043                                  
 14044                                  ;----------------------------------------------------------------------------
 14045                                  ;   hidensity - examine a drive/media descriptor to set the media type. if
 14046                                  ;   the media descriptor is not f9 (not 96tpi or 3 1/2), we return and let the
 14047                                  ;   caller do the rest. otherwise, we pop off the return and jump to the tail
 14048                                  ;   of getbp. for 3.5" media, we just return.
 14049                                  ;
 14050                                  ;   inputs:	es:di point to correct bds for this drive
 14051                                  ;		ah has media byte
 14052                                  ;
 14053                                  ;   outputs:	carry clear
 14054                                  ;		    no registers modified
 14055                                  ;		carry set
 14056                                  ;		    al = sectors/fat
 14057                                  ;		    bh = number of root directory entries
 14058                                  ;		    bl = sectors per track
 14059                                  ;		    cx = number of sectors
 14060                                  ;		    dh = sectors per allocation unit
 14061                                  ;		    dl = number of heads
 14062                                  ;
 14063                                  ;----------------------------------------------------------------------------
 14064                                  
 14065                                  hidensity:
 14066                                  
 14067                                  ; check for correct drive
 14068                                  		
 14069                                  		; 12/12/2022
 14070 000018B2 26F6452302              		test	byte [es:di+23h], 2		
 14071                                  		;test	word [es:di+23h], 2 ; is it special?	
 14072                                  					; [es:di+BDS.flags], fchangeline
 14073 000018B7 74F8                    		jz	short dofloppy	; no, do normal floppy test
 14074                                  
 14075                                  ; we have a media byte that is pretty complex. examine drive information
 14076                                  ; table to see what kind it is.
 14077                                  
 14078 000018B9 26807D2202              		cmp	byte [es:di+22h], 2 ; is it single-media?
 14079 000018BE 74F1                    		jz	short dofloppy	; [es:di+BDS.formfactor], ffSmall
 14080                                  					; yes, use fatid...
 14081                                  ; 96 tpi drive?
 14082 000018C0 80FCF9                  		cmp	ah, 0F9h
 14083 000018C3 75EC                    		jnz	short dofloppy
 14084                                  
 14085                                  ;------ If formfactor of drive = ffother or ff288 it has to be
 14086                                  ;------ a 720K diskette
 14087                                  
 14088 000018C5 26807D2207              		cmp	byte [es:di+22h], 7 ; [es:di+BDS.formfactor]
 14089                                  					; ffOther
 14090 000018CA 7418                    		jz	short Is720K
 14091 000018CC 26807D2209              		cmp	byte [es:di+22h], 9 ; [es:di+BDS.formfactor]
 14092                                  					; ff288
 14093 000018D1 7411                    		jz	short Is720K
 14094 000018D3 B007                    		mov	al, 7		; seven	sectors	/ fat
 14095 000018D5 BB0FE0                  		mov	bx, 57359	; 224*256+0Fh
 14096                                  					; 224 root dir entries
 14097                                  					; & 0Fh sector max
 14098 000018D8 B96009                  		mov	cx, 2400	; 80*15*2
 14099                                  					; 80 tracks, 15 sectors/track,
 14100                                  					; 2 sides
 14101 000018DB BA0201                  		mov	dx, 258		; 1*256+2
 14102                                  					; sectors/allocation unit
 14103                                  					; & head max
 14104 000018DE 83C402                  		add	sp, 2		; pop off return address
 14105 000018E1 E986ED                  		jmp	Has1		; return to tail of getbp
 14106                                  ; ---------------------------------------------------------------------------
 14107                                  
 14108                                  Is720K:					
 14109 000018E4 83C402                  		add	sp, 2		; pop off return address
 14110 000018E7 E947ED                  		jmp	Has720K		; return to 720K code
 14111                                  ; ---------------------------------------------------------------------------
 14112                                  
 14113                                  		; 18/12/2022
 14114                                  ;dofloppy:				
 14115                                  		;retn
 14116                                  
 14117                                  ; =============== S U B	R O U T	I N E =======================================
 14118                                  
 14119                                  ; 16/10/2022
 14120                                  
 14121                                  ;---------------------------------------------------------------------------
 14122                                  ; set_changed_dl - sets flag bits according to bits set in bx.
 14123                                  ;		   essentially used to indicate changeline, or format.
 14124                                  ;
 14125                                  ;   inputs:	dl contains physical drive number
 14126                                  ;		bx contains bits to set in the flag field in the bdss
 14127                                  ;   outputs:	none
 14128                                  ;   registers modified: flags
 14129                                  ;
 14130                                  ;	called from int13 hooker.  Must preserve ALL registers!!!
 14131                                  ;
 14132                                  ; in the virtual drive system we *must* flag the other drives as being changed
 14133                                  ;---------------------------------------------------------------------------
 14134                                  
 14135                                  set_changed_dl:	
 14136 000018EA 06                      		push	es
 14137 000018EB 57                      		push	di
 14138                                  		;les	di, ds:start_bds
 14139                                  		; 19/10/2022
 14140 000018EC C43E[1901]              		les	di, [start_bds]
 14141                                  
 14142                                  ; note: we assume that the list is non-empty
 14143                                  
 14144                                  scan_bds:				
 14145 000018F0 26385504                		cmp	[es:di+4], dl	; [es:di+BDS.drivenum]
 14146 000018F4 7504                    		jnz	short get_next_bds
 14147                                  
 14148                                  ; someone may complain, but this *always* must be done when a disk change is
 14149                                  ; noted. there are *no* other compromising circumstances.
 14150                                  
 14151 000018F6 26095D23                		or	[es:di+23h], bx	; [es:di+BDS.flags]
 14152                                  					; signal change	on other drive
 14153                                  get_next_bds:				
 14154 000018FA 26C43D                  		les	di, [es:di]	; [es:di+BDS.link]
 14155                                  					; go to	next bds
 14156 000018FD 83FFFF                  		cmp	di, 0FFFFh
 14157 00001900 75EE                    		jnz	short scan_bds	; loop unless we hit end of chain
 14158 00001902 5F                      		pop	di
 14159 00001903 07                      		pop	es
 14160 00001904 C3                      		retn
 14161                                  
 14162                                  ; =============== S U B	R O U T	I N E =======================================
 14163                                  
 14164                                  ;---------------------------------------------------------------------------
 14165                                  ; checkromchange - see if external program has diddled rom change line.
 14166                                  ;
 14167                                  ;   inputs:	es:di points to current bds.
 14168                                  ;   outputs:	zero set - no change
 14169                                  ;		zero reset - change
 14170                                  ;   registers modified: none
 14171                                  ;---------------------------------------------------------------------------
 14172                                  
 14173                                  checkromchange:	
 14174                                  		;test	word [es:di+BDS.flags], fchanged ; 40h
 14175                                  		; 10/12/2022
 14176 00001905 26F6452340              		test	byte [es:di+23h], 40h
 14177                                  		;test	word [es:di+23h], 40h ; [es:di+BDS.flags]
 14178                                  					; fchanged
 14179 0000190A C3                      		retn
 14180                                  
 14181                                  ; =============== S U B	R O U T	I N E =======================================
 14182                                  
 14183                                  ;---------------------------------------------------------------------------
 14184                                  ; resetchanged - restore value of change line
 14185                                  ;
 14186                                  ;   inputs:	es:di points to current bds
 14187                                  ;   outputs:	none
 14188                                  ;   registers modified: none
 14189                                  ;---------------------------------------------------------------------------
 14190                                  
 14191                                  resetchanged:	
 14192                                  		;and	word [es:di+BDS.flags], ~fchanged ; 0FFBFh	
 14193                                  		; 10/12/2022
 14194 0000190B 26806523BF              		and	byte [es:di+23h], 0BFh
 14195                                  		;and	word [es:di+23h], 0FFBFh ; [es:di+BDS.flags]
 14196                                  					; ~fchanged
 14197 00001910 C3                      		retn
 14198                                  
 14199                                  ; =============== S U B	R O U T	I N E =======================================
 14200                                  
 14201                                  ;---------------------------------------------------------------------------
 14202                                  ; haschange - see if drive can supply change line
 14203                                  ;
 14204                                  ;   inputs:	es:di points to current bds
 14205                                  ;   outputs:	zero set - no change line available
 14206                                  ;		zero reset - change line available
 14207                                  ;   registers modified: none
 14208                                  ;---------------------------------------------------------------------------
 14209                                  
 14210                                  haschange:
 14211                                  		;test	word [es:di+BDS.flags], fchangeline ; 2
 14212                                  		; 10/12/2022
 14213 00001911 26F6452302              		test	byte [es:di+23h], 2		
 14214                                  		;test	word [es:di+23h], 2 ; [es:di+BDS.flags]
 14215                                  					; fchangeline
 14216 00001916 C3                      		retn
 14217                                  
 14218                                  ; ---------------------------------------------------------------------------
 14219                                  
 14220                                  ; 16/10/2022
 14221                                  
 14222                                  ;-------------------------------------------------------------------------
 14223                                  ; set_volume_id      -	main routine, calls other routines.
 14224                                  ; read_volume_id     -	read the volume id and tells if it has been changed.
 14225                                  ; transfer_volume_id -	copy the volume id from tmp to special drive.
 14226                                  ; check_volume_id    -	compare volume id in tmp area with one expected for drive.
 14227                                  ; fat_check          -	see of the fatid has changed in the specified drive.
 14228                                  ;-------------------------------------------------------------------------
 14229                                  
 14230                                  ; set_volume_id
 14231                                  ;   if drive has changeline support, read in and set the volume_id
 14232                                  ; and the last fat_id byte. if no change line support then do nothing.
 14233                                  ;
 14234                                  ;   on entry:
 14235                                  ;	es:di points to the bds for this disk.
 14236                                  ;	ah contains media byte
 14237                                  ;
 14238                                  ;   on exit:
 14239                                  ;	carry clear:
 14240                                  ;	   successful call
 14241                                  ;	carry set
 14242                                  ;	   error and ax has error code
 14243                                  
 14244                                  set_volume_id:				
 14245 00001917 52                      		push	dx		; save registers
 14246 00001918 50                      		push	ax
 14247 00001919 E8F5FF                  		call	haschange	; does drive have changeline support?
 14248 0000191C 740B                    		jz	short setvret	; no, get out
 14249 0000191E E81000                  		call	read_volume_id
 14250 00001921 7209                    		jb	short seterr
 14251 00001923 E8A200                  		call	transfer_volume_id ; copy the volume id	to special drive
 14252 00001926 E8E2FF                  		call	resetchanged	; restore value	of change line
 14253                                  setvret:				
 14254                                  		; 10/12/2022
 14255                                  		; cf = 0
 14256                                  		;clc			; no error, clear carry flag
 14257 00001929 58                      		pop	ax		; restore registers
 14258 0000192A 5A                      		pop	dx
 14259 0000192B C3                      		retn
 14260                                  ; ---------------------------------------------------------------------------
 14261                                  
 14262                                  seterr:					
 14263 0000192C 5A                      		pop	dx		; pop stack but don't overwrite ax
 14264 0000192D 5A                      		pop	dx		; restore dx
 14265 0000192E C3                      		retn
 14266                                  ; ---------------------------------------------------------------------------
 14267 0000192F 0000                    root_sec:	dw 0			; root sector #
 14268                                  
 14269                                  ; 16/10/2022
 14270                                  ;ROOTSEC equ root_sec - DOSBIOSEG_2C7h		
 14271                                  ; 09/12/2022
 14272                                  ROOTSEC equ root_sec
 14273                                  
 14274                                  ; =============== S U B	R O U T	I N E =======================================
 14275                                  
 14276                                  ; 16/10/2022
 14277                                  
 14278                                  ; read_volume_id read the volume id and tells if it has been changed.
 14279                                  ;
 14280                                  ;   on entry:
 14281                                  ;	es:di points to current bds for drive.
 14282                                  ;
 14283                                  ;   on exit:
 14284                                  ;	carry clear
 14285                                  ;	    si = 1  no change
 14286                                  ;	    si = 0  ?
 14287                                  ;	    si = -1 change
 14288                                  ;
 14289                                  ;	carry set:
 14290                                  ;	    error and ax has error code.
 14291                                  
 14292                                  read_volume_id:
 14293 00001931 52                      		push	dx		; preserve registers
 14294 00001932 51                      		push	cx
 14295 00001933 53                      		push	bx
 14296 00001934 50                      		push	ax
 14297 00001935 06                      		push	es		; stack the bds last
 14298 00001936 57                      		push	di
 14299 00001937 1E                      		push	ds		; point es to Bios_Data
 14300 00001938 07                      		pop	es
 14301 00001939 BF[0A09]                		mov	di, tmp_vid	; "NO NAME	 "
 14302 0000193C BE[FE08]                		mov	si, nul_vid	; "NO NAME	 "
 14303 0000193F B90C00                  		mov	cx, 12		; initialize tmp_vid to	null vi_id
 14304 00001942 F3A4                    		rep movsb
 14305 00001944 5F                      		pop	di
 14306 00001945 07                      		pop	es
 14307 00001946 268A450B                		mov	al, [es:di+11]	; [es:di+BDS.fats]
 14308                                  					; # of fats
 14309 0000194A 268B4D11                		mov	cx, [es:di+17]	; [es:di+BDS.fatsecs]
 14310                                  					; sectors / fat
 14311 0000194E F6E1                    		mul	cl		; size taken by	fats
 14312 00001950 26034509                		add	ax, [es:di+9]	; [es:di+BDS.resectors]
 14313                                  					; add on reserved sectors
 14314                                  					;
 14315                                  					; ax is	now sector # (0	based)
 14316                                  		; 17/10/2022
 14317 00001954 2EA3[2F19]              		mov	[cs:ROOTSEC], ax
 14318                                  		;mov	word ptr cs:198Fh, ax ; [cs:root_sec]
 14319                                  					; 0070h:3EFFh =	2C7h:198Fh
 14320 00001958 268B450C                		mov	ax, [es:di+12]	; [es:di+BDS.direntries]
 14321                                  					; # root dir entries
 14322 0000195C B104                    		mov	cl, 4		; 16 entries/sector
 14323 0000195E D3E8                    		shr	ax, cl		; divide by 16
 14324 00001960 89C1                    		mov	cx, ax		; cx is	# of sectors to	scan
 14325                                  next_sec:				
 14326 00001962 51                      		push	cx		; save outer loop counter
 14327 00001963 2EA1[2F19]              		mov	ax, [cs:ROOTSEC]
 14328                                  		;mov	ax, word ptr cs:198Fh ; [cs:root_sec]
 14329                                  					; get sector #
 14330 00001967 268B4D13                		mov	cx, [es:di+19]	; [es:di+BDS.secpertrack]
 14331                                  					; sectors / track
 14332 0000196B 31D2                    		xor	dx, dx
 14333 0000196D F7F1                    		div	cx
 14334                                  
 14335                                  ; set up registers for call to read_sector
 14336                                  
 14337 0000196F 42                      		inc	dx		; dx= sectors into track
 14338                                  					; ax= track count from 0
 14339 00001970 88D1                    		mov	cl, dl		; sector to read
 14340 00001972 31D2                    		xor	dx, dx
 14341 00001974 26F77515                		div	word [es:di+21] ; [es:di+BDS.heads]
 14342                                  					; # heads on this disc
 14343 00001978 88D6                    		mov	dh, dl		; head number
 14344 0000197A 88C5                    		mov	ch, al		; track	#
 14345 0000197C E8FBED                  		call	read_sector	; get first sector of the root directory,
 14346                                  					; ds:bx	-> directory sector
 14347 0000197F 7243                    		jb	short readviderr
 14348 00001981 B91000                  		mov	cx, 16		; # of dir entries in a	block of root
 14349 00001984 B008                    		mov	al, 8		; volume label bit
 14350                                  fvid_loop:				
 14351 00001986 803F00                  		cmp	byte [bx], 0 ; end of dir?
 14352 00001989 7436                    		jz	short no_vid	; yes, no vol id
 14353 0000198B 803FE5                  		cmp	byte [bx], 0E5h ; empty entry?
 14354 0000198E 7405                    		jz	short ent_loop	; yes, skip
 14355 00001990 84470B                  		test	[bx+11], al	; is volume label bit set in fcb?
 14356 00001993 7511                    		jnz	short found_vid	; jmp yes
 14357                                  ent_loop:				
 14358 00001995 83C320                  		add	bx, 32		; add length of	directory entry
 14359 00001998 E2EC                    		loop	fvid_loop
 14360 0000199A 59                      		pop	cx		; outer loop
 14361 0000199B 2EFF06[2F19]            		inc	word [cs:ROOTSEC]
 14362                                  		;inc	word ptr cs:198Fh ; inc word [root_sec]
 14363                                  					; next sector
 14364 000019A0 E2C0                    		loop	next_sec	; continue
 14365                                  notfound:				
 14366 000019A2 31F6                    		xor	si, si
 14367 000019A4 EB16                    		jmp	short fvid_ret
 14368                                  ; ---------------------------------------------------------------------------
 14369                                  
 14370                                  found_vid:				
 14371 000019A6 59                      		pop	cx		; clean stack of outer loop counter
 14372 000019A7 89DE                    		mov	si, bx		; point	to volume_id
 14373 000019A9 06                      		push	es		; preserve current bds
 14374 000019AA 57                      		push	di
 14375 000019AB 1E                      		push	ds
 14376 000019AC 07                      		pop	es		; point es to Bios_Data
 14377 000019AD BF[0A09]                		mov	di, tmp_vid	; "NO NAME	 "
 14378 000019B0 B90B00                  		mov	cx, 11		; VOLID_SIZ-1
 14379                                  					; length of string minus nul
 14380 000019B3 F3A4                    		rep movsb		; mov volume label to tmp_vid
 14381 000019B5 30C0                    		xor	al, al
 14382 000019B7 AA                      		stosb			; null terminate
 14383 000019B8 31F6                    		xor	si, si
 14384 000019BA 5F                      		pop	di		; restore current bds
 14385 000019BB 07                      		pop	es
 14386                                  fvid_ret:				
 14387 000019BC 58                      		pop	ax
 14388                                  		; 10/12/2022
 14389                                  		; cf = 0
 14390                                  		;clc
 14391                                  rvidret:				
 14392 000019BD 5B                      		pop	bx		; restore registers
 14393 000019BE 59                      		pop	cx
 14394 000019BF 5A                      		pop	dx
 14395 000019C0 C3                      		retn
 14396                                  ; ---------------------------------------------------------------------------
 14397                                  
 14398                                  no_vid:					
 14399 000019C1 59                      		pop	cx		; clean stack of outer loop counter
 14400 000019C2 EBDE                    		jmp	short notfound	; not found
 14401                                  ; ---------------------------------------------------------------------------
 14402                                  
 14403                                  readviderr:				
 14404 000019C4 5E                      		pop	si		; trash the outer loop counter
 14405 000019C5 5E                      		pop	si		; caller's ax, return error code instead 
 14406 000019C6 EBF5                    		jmp	short rvidret
 14407                                  
 14408                                  ; =============== S U B	R O U T	I N E =======================================
 14409                                  
 14410                                  ; transfer_volume_id - copy the volume id from tmp to special drive
 14411                                  ;
 14412                                  ; inputs:	es:di has current bds
 14413                                  ; outputs:	bds for drive has volume id from tmp
 14414                                  
 14415                                  transfer_volume_id:	
 14416 000019C8 57                      		push	di		; copy the volume id from tmp to special drive
 14417 000019C9 56                      		push	si
 14418 000019CA 51                      		push	cx
 14419 000019CB BE[0A09]                		mov	si, tmp_vid	; "NO NAME	 "
 14420                                  		;add	di, BDS.volid
 14421 000019CE 83C74B                  		add	di, 75		; BDS.volid
 14422                                  		;mov	cx, VOLID_SIZ
 14423 000019D1 B90C00                  		mov	cx, 12		; VOLID_SIZ
 14424 000019D4 FC                      		cld
 14425 000019D5 F3A4                    		rep movsb
 14426 000019D7 59                      		pop	cx
 14427 000019D8 5E                      		pop	si
 14428 000019D9 5F                      		pop	di
 14429 000019DA C3                      		retn
 14430                                  
 14431                                  ; =============== S U B	R O U T	I N E =======================================
 14432                                  
 14433                                  ;  check_volume_id - compare volume id in tmp area with
 14434                                  ;		     one expected for drive
 14435                                  ;
 14436                                  ;   inputs:	es:di has current bds for drive
 14437                                  ;   outputs:	zero true means it matched
 14438                                  
 14439                                  check_volume_id:	
 14440 000019DB 57                      		push	di
 14441 000019DC 51                      		push	cx
 14442 000019DD BE[0A09]                		mov	si, tmp_vid	; "NO NAME	 "
 14443                                  		;add	di, BDS.volid
 14444 000019E0 83C74B                  		add	di, 75		; BDS.volid
 14445                                  		;mov	cx, VOLID_SIZ
 14446 000019E3 B90C00                  		mov	cx, 12		; VOLID_SIZ
 14447 000019E6 FC                      		cld
 14448 000019E7 F3A6                    		repe cmpsb		; are the 2 volume_ids the same?
 14449 000019E9 59                      		pop	cx
 14450 000019EA 5F                      		pop	di
 14451 000019EB C3                      		retn
 14452                                  
 14453                                  ; =============== S U B	R O U T	I N E =======================================
 14454                                  
 14455                                  ;   fat_check - see of the fatid has changed in the specified drive.
 14456                                  ;	      - uses the fat id obtained from the boot sector.
 14457                                  ;
 14458                                  ;   inputs:	medbyt is expected fat id
 14459                                  ;		es:di points to current bds
 14460                                  ;
 14461                                  ;   output:	si = -1 if fat id different,
 14462                                  ;		si = 0 otherwise
 14463                                  ;
 14464                                  ;   no other registers changed.
 14465                                  
 14466                                  fat_check:		
 14467 000019EC 50                      		push	ax
 14468 000019ED 31F6                    		xor	si, si		; say fat id's are same.
 14469 000019EF A0[1F01]                		mov	al, [medbyt]	; 19/10/2022
 14470 000019F2 263A4510                		cmp	al, [es:di+10h]	; [es:di+BDS.media]
 14471                                  					; compare it with the bds medbyte
 14472 000019F6 7401                    		jz	short okret1	; carry	clear
 14473 000019F8 4E                      		dec	si
 14474                                  okret1:					
 14475 000019F9 58                      		pop	ax
 14476 000019FA C3                      		retn
 14477                                  
 14478                                  ; ---------------------------------------------------------------------------
 14479                                  
 14480                                  ; BIOSCODE:1A69h (MSDOS 6.21, IO.SYS)
 14481                                  		;times 7 db 0
 14482                                  
 14483                                  ; BIOSCODE:180Bh (MSDOS 5.0 IO.SYS)	
 14484                                  
 14485                                  		; 09/12/2022
 14486                                  		;times 4 db 0	; 17/10/2022
 14487                                  		;db 4 dup(0)	; times 4 db 0
 14488                                  
 14489                                  ; ---------------------------------------------------------------------------
 14490                                  
 14491                                  		; 09/12/2022
 14492                                  		;db 0
 14493                                  
 14494                                  number2div	equ ($-BCode_start)
 14495                                  number2mod	equ (number2div % 16)
 14496                                  
 14497                                  %if number2mod>0 & number2mod<16
 14498 000019FB 00<rep 5h>              		times (16-number2mod) db 0
 14499                                  %endif
 14500                                  
 14501                                  ;align 16
 14502                                  
 14503                                  ; 09/12/2022
 14504                                  BCODE_END	equ $ - BCode_start
 14505                                  ;SYSINITSEG	equ IOSYSCODESEG+(BCODE_END>>4)
 14506                                  ; 13/12/2022
 14507                                  SYSINITOFFSET	equ BCODE_END
 14508                                  SYSINITSEG	equ IOSYSCODESEG+(SYSINITOFFSET>>4)
 14509                                  
 14510                                  ;--- End of DOSBIOS code segment ---------------------------------------------
 14511                                  
 14512                                  ; 16/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 14513                                  ; 01/05/2019 - Retro DOS v4.0 
 14514                                  ; ============================================================================
 14515                                  ; end of BIOSCODE
 14516                                  
 14517                                  ; ----------------------------------------------------------------------------
 14518                                  ; %include sysinit5.s	; 09/12/2022
 14519                                  ; ----------------------------------------------------------------------------
 14520                                  
 14521                                  ;=============================================================================
 14522                                  ; (IO.SYS) SYSINIT SEGMENT 
 14523                                  ;=============================================================================
 14524                                  ; 09/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 14525                                  
 14526                                  section .SYSINIT vstart=0
 14527                                  
 14528                                  ; ****************************************************************************
 14529                                  ; SYSINIT.BIN (MSDOS 5.0 IO.SYS) - RETRO DOS v4.0 by ERDOGAN TAN - 21/10/2022
 14530                                  ; ----------------------------------------------------------------------------
 14531                                  ; Last Update: 04/01/2023 (Modified IO.SYS)  ((Previous: 31/12/2022))
 14532                                  ; ----------------------------------------------------------------------------
 14533                                  ; Beginning: 03/06/2018 (Retro DOS 3.0), 21/03/2019 (Retro DOS 4.0)
 14534                                  ; ----------------------------------------------------------------------------
 14535                                  ; Assembler: NASM version 2.15
 14536                                  ; ----------------------------------------------------------------------------
 14537                                  ;	   ((nasm sysinit5.s -l sysinit5.lst -o SYSINIT5.BIN -Z error.txt)) 	
 14538                                  ; ----------------------------------------------------------------------------
 14539                                  ; Modified from 'sysinit2.s' (SYSINIT2.BIN) file of Retro DOS v3.0 (6/7/2018)
 14540                                  ; ----------------------------------------------------------------------------
 14541                                  ; Derived from 'SYSINIT1.ASM' and 'SYSINIT2.ASM' files of MSDOS 6.0
 14542                                  ; source code by Microsoft, 1991 
 14543                                  ; ----------------------------------------------------------------------------
 14544                                  ; Derived from 'SYSINIT.ASM' file of MSDOS 2.0 (IBM PCDOS v2.0) source code
 14545                                  ; by Microsoft, 12/10/1983
 14546                                  ; ****************************************************************************
 14547                                  ; main file: 'retrodos4.s'
 14548                                  ; incbin 'SYSINIT3.BIN' ; (SYINITSEG)
 14549                                  
 14550                                  ; 21/10/2022
 14551                                  ; ----------------------------------------------------------------------------
 14552                                  ; This source code (version) is based on SYSINIT source code of disassembled
 14553                                  ; MSDOS 5.0 IO.SYS file (SYSINIT.BIN) 
 14554                                  ; Dissassembler: Hex-Rays Interactive Disassembler (IDA)
 14555                                  ; ----------------------------------------------------------------------------
 14556                                  ; Binary file splitter & joiner: FFSJ v3.3
 14557                                  
 14558                                  ;--------------------------------------------------------------
 14559                                  ; SYSINIT.TXT (27/01/1983)
 14560                                  ;--------------------------------------------------------------
 14561                                  ;    SYSINIT is  a module linked behind the OEM bios.  It takes
 14562                                  ;over  the  system  initialization  after  the  OEM  bios   has
 14563                                  ;performed any  initialization  it  needs  to  do.   Control is
 14564                                  ;transfered with a long jump to the external  variable  SYSINIT
 14565                                  ;
 14566                                  ;
 14567                                  ;   The OEM  has  the  following  variables declared external:
 14568                                  ;
 14569                                  ;   CURRENT_DOS_LOCATION    WORD
 14570                                  ;
 14571                                  ;This word  contains  the  segment  number of the DOS before it
 14572                                  ;is relocated.  The OEM bios must set this value.
 14573                                  ;
 14574                                  ;   FINAL_DOS_LOCATION      WORD
 14575                                  ;
 14576                                  ;This word contains the segment number of the DOS after SYSINIT
 14577                                  ;moves it.  The OEM bios must set this value.
 14578                                  ;
 14579                                  ;   DEVICE_LIST             DWORD
 14580                                  ;
 14581                                  ;This  double  word  pointer  points  to  the  linked  list  of
 14582                                  ;character and block device drivers.  The  OEM  must  set  this
 14583                                  ;value.
 14584                                  ;
 14585                                  ;   MEMORY_SIZE             WORD
 14586                                  ;
 14587                                  ;This word  contains  the  number  of  RAM  paragraphs.  If the
 14588                                  ;bios doesn't set  this  variable  SYSINIT  will  automatically
 14589                                  ;calculate it.   NOTE:  systems with PARITY checked memory must
 14590                                  ;size memory in the BIOS.  SYSINITs method is to  write  memory
 14591                                  ;and read it back until it gets a mismatch.
 14592                                  ;
 14593                                  ;   DEFAULT_DRIVE           BYTE
 14594                                  ;
 14595                                  ;This is  the initial default drive when the system first comes
 14596                                  ;up.  drive a=0, drive b=1,  etc.   If  the  bios  doesn't  set
 14597                                  ;it then drive a is assumed.
 14598                                  ;
 14599                                  ;   BUFFERS                 BYTE
 14600                                  ;
 14601                                  ;This is  the  default  number of buffers for the system.  This
 14602                                  ;value may be overridden by the user in  the  CONFIG.SYS  file.
 14603                                  ;It is DBed to 2 in SYSINIT it should be greater than 1.
 14604                                  ;
 14605                                  ;   FILES                   BYTE
 14606                                  ;
 14607                                  ;This is  the  default  number  of  files for the system.  This
 14608                                  ;value may be overridden by the user in  the  CONFIG.SYS  file.
 14609                                  ;It is  DBed  to  8 in SYSINIT, values less than 5 are ignored.
 14610                                  ;
 14611                                  ;   SYSINIT                 FAR
 14612                                  ;
 14613                                  ;The entry  point  of  the  SYSINIT  module.  OEM BIOS jumps to
 14614                                  ;this label at the end of its INIT code.
 14615                                  ;
 14616                                  ;   The OEM  has  the  following  variables declared public:
 14617                                  ;
 14618                                  ;   RE_INIT                 FAR
 14619                                  ;
 14620                                  ;This is an entry point which allows the BIOS to do some INIT
 14621                                  ;work  after  the  DOS is initialized.  ALL REGISTERS MUST BE
 14622                                  ;PRESERVED.  On entry DS points to the first available memory
 14623                                  ;(after  the DOS).  DS:0 points to a 100H byte program header
 14624                                  ;prefix which represents  the  "program"  currently  running.
 14625                                  ;This  program  should  be  thought  of  as  the OEM BIOS and
 14626                                  ;SYSINIT taken together.  This is not  a  normal  program  in
 14627                                  ;that  no  memory  is  allocated to it, it is running in free
 14628                                  ;memory.
 14629                                  ;NOTES:
 14630                                  ;     At the time this routine is called SYSINIT occupies the
 14631                                  ;highest 10K of memory ("highest" is determined by the  value
 14632                                  ;of the MEMORY_SIZE variable), DO NOT DO WRITES THERE.
 14633                                  ;     Since this is called AFTER DOS is initialized, you can
 14634                                  ;make system calls.  This also implies that the code for this
 14635                                  ;routine    CANNOT   be   thrown   away   by   use   of   the
 14636                                  ;FINAL_DOS_LOCATION since the DOS has already been moved.
 14637                                  ;     If you don't want  anything done just set this to point
 14638                                  ;at a FAR RET instruction.
 14639                                  
 14640                                  ; ----------------------------------------------------------------------
 14641                                  ; TITLE   BIOS SYSTEM INITIALIZATION
 14642                                  ; ----------------------------------------------------------------------
 14643                                  
 14644                                  ;include version.inc
 14645                                  ; ----------------------------------------------------------------------
 14646                                  
 14647                                  ;FALSE   EQU     0
 14648                                  ;TRUE    EQU     0FFFFh
 14649                                  
 14650                                  ;IBMVER	    EQU     TRUE
 14651                                  ;IBMCOPYRIGHT EQU   FALSE
 14652                                  ;STACKSW    EQU	    TRUE		;Include Switchable Hardware Stacks
 14653                                  ;IBMJAPVER  EQU     FALSE		; If TRUE set KANJI true also
 14654                                  ;MSVER      EQU     FALSE
 14655                                  ;ALTVECT    EQU     FALSE		; Switch to build ALTVECT version
 14656                                  ;KANJI      EQU     FALSE
 14657                                  
 14658                                  ;(MSDOS 6.0, versiona.inc, 1991)
 14659                                  ; ----------------------------------------------------------------------
 14660                                  ;MAJOR_VERSION  EQU	6
 14661                                  ;;MINOR_VERSION	EQU	0	;6.00
 14662                                  ;MINOR_VERSION  EQU	21	;6.21  ; 21/03/2019 - Retro DOS v4.0
 14663                                  
 14664                                  ; 22/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0)
 14665                                  ; ----------------------------------------------------------------------
 14666                                  MAJOR_VERSION   EQU	5
 14667                                  MINOR_VERSION   EQU	0
 14668                                  
 14669                                  expected_version equ	(MINOR_VERSION<<8)+MAJOR_VERSION
 14670                                  
 14671                                  ;DOSREVNM equ	00000000b       ; m037 - bits 0-2 = revision number of DOS
 14672                                  				; currently 0.
 14673                                  DOSREVNM equ	00000111b	; [[[ 7 for Retro DOS v4.0 ]]] (21/03/2019)	
 14674                                  DOSINROM equ	00001000B       ; bit 3 of ver flags returned in BH
 14675                                  DOSINHMA equ	00010000B       ; bit 4 of ver flags 
 14676                                  
 14677                                  ;      if1
 14678                                  ;      %OUT  ... for DOS Version 5.00 ...
 14679                                  ;      endif
 14680                                  
 14681                                         ;******************************
 14682                                         ;Each assembler program should:
 14683                                         ;  mov ah,030h                   ;DOS Get Version function
 14684                                         ;  int 021h                      ;Version ret. in AX,minor version first
 14685                                         ;  cmp ax,expected_version       ;ALL utilities should check for an
 14686                                         ;  jne error_handler             ; EXACT version match.
 14687                                         ;******************************
 14688                                  
 14689                                  ; ----------------------------------------------------------------------
 14690                                  ; device definitions
 14691                                  
 14692                                  ;Attribute bit masks
 14693                                  DEVTYP  EQU     8000h           ;Bit 15 - 1  if Char, 0 if block
 14694                                  DEVIOCTL EQU    4000h           ;Bit 14 - CONTROL mode bit
 14695                                  ISFATBYDEV EQU  2000h           ;Bit 13 - Device uses FAT ID bytes, comp media.
 14696                                  ISCIN   EQU     0001h           ;Bit 0 - This device is the console input.
 14697                                  ISCOUT  EQU     0002h           ;Bit 1 - This device is the console output.
 14698                                  ISNULL  EQU     0004h           ;Bit 2 - This device is the null device.
 14699                                  ISCLOCK EQU     0008h           ;Bit 3 - This device is the clock device.
 14700                                  ISIBM   EQU     0010h           ;Bit 4 - This device is special
 14701                                  
 14702                                  ; The device table list has the form:
 14703                                  struc	SYSDEV
 14704 00000000 ????????                .NEXT:		resd 1		;Pointer to next device header
 14705 00000004 ????                    .ATT:		resw 1		;Attributes of the device
 14706 00000006 ????                    .STRAT:		resw 1		;Strategy entry point
 14707 00000008 ????                    .INT:		resw 1		;Interrupt entry point
 14708 0000000A ????????????????        .NAME:		resb 8		;Name of device (only first byte used for block)
 14709                                  .size:
 14710                                  endstruc
 14711                                  
 14712                                  ;Static Reguest Header
 14713                                  struc	SRHEAD
 14714 00000000 ??                      .REQLEN:	resb 1		;Length in bytes of request block
 14715 00000001 ??                      .REQUNIT:	resb 1		;Device unit number
 14716 00000002 ??                      .REQFUNC:	resb 1		;Type of request
 14717 00000003 ????                    .REQSTAT:	resw 1		;Status Word
 14718 00000005 ????????????????                	resb 8		;Reserved for queue links
 14719                                  .size:
 14720                                  endstruc
 14721                                  
 14722                                  ;Status word masks
 14723                                  STERR   EQU     8000H           ;Bit 15 - Error
 14724                                  STBUI   EQU     0200H           ;Bit 9 - Buisy
 14725                                  STDON   EQU     0100H           ;Bit 8 - Done
 14726                                  STECODE EQU     00FFH           ;Error code
 14727                                  WRECODE EQU     0
 14728                                  
 14729                                  ;Function codes
 14730                                  DEVINIT EQU     0               ;Initialization
 14731                                  DINITHL EQU     26              ;Size of init header
 14732                                  DEVMDCH EQU     1               ;Media check
 14733                                  DMEDHL  EQU     15              ;Size of media check header
 14734                                  DEVBPB  EQU     2               ;Get BPB
 14735                                  DEVRDIOCTL EQU  3               ;IOCTL read
 14736                                  DBPBHL  EQU     22              ;Size of Get BPB header
 14737                                  DEVRD   EQU     4               ;Read
 14738                                  DRDWRHL EQU     22              ;Size of RD/WR header
 14739                                  DEVRDND EQU     5               ;Non destructive read no wait (character devs)
 14740                                  DRDNDHL EQU     14              ;Size of non destructive read header
 14741                                  DEVIST  EQU     6               ;Input status
 14742                                  DSTATHL EQU     13              ;Size of status header
 14743                                  DEVIFL  EQU     7               ;Input flush
 14744                                  DFLSHL  EQU     15              ;Size of flush header
 14745                                  DEVWRT  EQU     8               ;Write
 14746                                  DEVWRTV EQU     9               ;Write with verify
 14747                                  DEVOST  EQU     10              ;Output status
 14748                                  DEVOFL  EQU     11              ;Output flush
 14749                                  DEVWRIOCTL EQU  12              ;IOCTL write
 14750                                  
 14751                                  ; ----------------------------------------------------------------------
 14752                                  struc	SYS_FCB
 14753 00000000 ??                      .fcb_drive:	resb 1
 14754 00000001 ????????????????        .fcb_name:	resb 8
 14755 00000009 ??????                  .fcb_ext:	resb 3
 14756 0000000C ????                    .fcb_EXTENT:	resw 1
 14757 0000000E ????                    .fcb_RECSIZ:	resw 1	; Size of record (user settable)
 14758 00000010 ????                    .fcb_FILSIZ:	resw 1	; Size of file in bytes; used with the following
 14759                                                          ; word
 14760 00000012 ????                    .fcb_DRVBP:	resw 1	; BP for SEARCH FIRST and SEARCH NEXT
 14761 00000014 ????                    .fcb_FDATE:	resw 1	; Date of last writing
 14762 00000016 ????                    .fcb_FTIME:	resw 1	; Time of last writing
 14763 00000018 ??                      .fcb_DEVID:	resb 1	; Device ID number, bits 0-5 if file.
 14764                                                          ; bit 7=0 for file, bit 7=1 for I/O device
 14765                                                          ; If file, bit 6=0 if dirty
 14766                                                          ; If I/O device, bit 6=0 if EOF (input)
 14767                                                          ;               Bit 5=1 if Raw mode
 14768                                                          ;               Bit 0=1 if console input device
 14769                                                          ;               Bit 1=1 if console output device
 14770                                                          ;               Bit 2=1 if null device
 14771                                                          ;               Bit 3=1 if clock device
 14772 00000019 ????                    .fcb_FIRCLUS:	resw 1	; First cluster of file
 14773 0000001B ????                    .fcb_CLUSPOS:	resw 1	; Position of last cluster accessed
 14774 0000001D ????                    .fcb_LSTCLUS:	resw 1	; Last cluster accessed and directory
 14775 0000001F ??                                   	resb 1	; pack 2 12 bit numbers into 24 bits...
 14776 00000020 ??                      .fcb_NR:	resb 1	; Next record
 14777 00000021 ????????                .fcb_RR:	resb 4	; Random record
 14778                                  .size:
 14779                                  endstruc
 14780                                  
 14781                                  ; ----------------------------------------------------------------------
 14782                                  ; Field definition for I/O buffer information
 14783                                  
 14784                                  ; 22/03/2019 - Retro DOS v4.0 (MSDOS 6.0, BUFFER.INC, 1991)
 14785                                  
 14786                                  struc buffinfo
 14787 00000000 ????                    .buf_next:	resw 1	; Pointer to next buffer in list
 14788 00000002 ????                    .buf_prev:	resw 1	; Pointer to previous buffer in list
 14789 00000004 ??                      .buf_ID:	resb 1	; Drive of buffer (bit 7 = 0)
 14790                                  			; SFT table index (bit 7 = 1)
 14791                                  			; = FFh if buffer free
 14792 00000005 ??                      .buf_flags:	resb 1	; Bit 7 = 1 if Remote file buffer
 14793                                  			;	= 0 if Local device buffer
 14794                                  			; Bit 6 = 1 if buffer dirty
 14795                                  			; Bit 5 = Reserved
 14796                                  			; Bit 4 = Search bit (bit 7 = 1)
 14797                                  			; Bit 3 = 1 if buffer is DATA
 14798                                  			; Bit 2 = 1 if buffer is DIR
 14799                                  			; Bit 1 = 1 if buffer is FAT
 14800                                  			; Bit 0 = Reserved
 14801 00000006 ????????                .buf_sector:	resd 1	; Sector number of buffer (bit 7 = 0)
 14802                                  ; The next two items are often refed as a word (bit 7 = 0)
 14803 0000000A ??                      .buf_wrtcnt:	resb 1	; For FAT sectors, # times sector written out
 14804 0000000B ????                    .buf_wrtcntinc:	resw 1	; "   "     "   , # sectors between each write
 14805 0000000D ????????                .buf_DPB :	resd 1	; Pointer to drive parameters
 14806 00000011 ????                    .buf_fill:	resw 1	; How full buffer is (bit 7 = 1)
 14807 00000013 ??                      .buf_reserved:	resb 1	; make DWORD boundary for 386
 14808                                  .size:
 14809                                  endstruc
 14810                                  
 14811                                  %define buf_offset	dword [buf_sector]
 14812                                  			;For bit 7 = 1, this is the byte
 14813                                  			;offset of the start of the buffer in
 14814                                  			;the file pointed to by buf_ID.  Thus
 14815                                  			;the buffer starts at location
 14816                                  			;buf_offset in the file and contains
 14817                                  			;buf_fill bytes.
 14818                                  
 14819                                  bufinsiz	equ	buffinfo.size ; ; Size of structure in bytes
 14820                                  
 14821                                  
 14822                                  buf_Free	equ	0FFh		; buf_id of free buffer
 14823                                  
 14824                                  ;Flag byte masks
 14825                                  buf_isnet	EQU	10000000B
 14826                                  buf_dirty	EQU	01000000B
 14827                                  ;***
 14828                                  buf_visit	EQU	00100000B
 14829                                  ;***
 14830                                  buf_snbuf	EQU	00010000B
 14831                                  
 14832                                  buf_isDATA	EQU	00001000B
 14833                                  buf_isDIR	EQU	00000100B
 14834                                  buf_isFAT	EQU	00000010B
 14835                                  buf_type_0	EQU	11110001B	; AND sets type to "none"
 14836                                  
 14837                                  buf_NetID	EQU	bufinsiz
 14838                                  
 14839                                  ; ----------------------------------------------------------------------
 14840                                  
 14841                                  ; ----------------------------------------------------------------------
 14842                                  ;**	DPB - Drive Parameter Block
 14843                                  
 14844                                  ; 25/03/2019 - Retro DOS v4.0 (MSDOS 6.0, DPB.INC, 1991)
 14845                                  
 14846                                  ;	BUGBUG - this isn't authorative - it's my probably incomplete and
 14847                                  ;	possibly inaccurate deductions from code study... - jgl
 14848                                  ;
 14849                                  ;	The DPB is DOS's main structure for describing block devices.
 14850                                  ;	It contains info about the "Drive" intermingled with info about
 14851                                  ;	the FAT file system which is presumably on the drive.  I don't know
 14852                                  ;	how those fields are used if it's not the FAT file system - BUGBUG
 14853                                  ;
 14854                                  ;	The DPBs are statically allocated and chained off of DPBHead.
 14855                                  ;	Users scan this chain looking for a match on DPB_DRIVE.
 14856                                  ;	The DPBs are built at init time from info in the SYSDEV structure.
 14857                                  
 14858                                  ; 08/06/2018 - Retro DOS v3.0 (MSDOS 3.3, DPB.INC, 24/07/1987)
 14859                                  
 14860                                  ; 12/05/2019 - Retro DOS v4.0
 14861                                  
 14862                                  struc	DPB
 14863 00000000 ??                      .DRIVE:		resb 1		; Logical drive # assoc with DPB (A=0,B=1,...)
 14864 00000001 ??                      .UNIT:		resb 1		; Driver unit number of DPB
 14865 00000002 ????                    .SECTOR_SIZE:	resw 1		; Size of physical sector in bytes
 14866 00000004 ??                      .CLUSTER_MASK:	resb 1		; Sectors/cluster - 1
 14867 00000005 ??                      .CLUSTER_SHIFT:	resb 1		; Log2 of sectors/cluster
 14868 00000006 ????                    .FIRST_FAT:	resw 1		; Starting record of FATs
 14869 00000008 ??                      .FAT_COUNT:	resb 1		; Number of FATs for this drive
 14870 00000009 ????                    .ROOT_ENTRIES:	resw 1		; Number of directory entries
 14871 0000000B ????                    .FIRST_SECTOR:	resw 1		; First sector of first cluster
 14872 0000000D ????                    .MAX_CLUSTER:	resw 1		; Number of clusters on drive + 1
 14873                                  ;.FAT_SIZE:	resb 1  ; MSDOS 3.3
 14874 0000000F ????                    .FAT_SIZE:	resw 1		; Number of records occupied by FAT
 14875 00000011 ????                    .DIR_SECTOR:	resw 1		; Starting record of directory
 14876 00000013 ????????                .DRIVER_ADDR:	resd 1		; Pointer to driver
 14877 00000017 ??                      .MEDIA:		resb 1		; Media byte
 14878 00000018 ??                      .FIRST_ACCESS:	resb 1		; This is initialized to -1 to force a media
 14879                                  				; check the first time this DPB is used
 14880 00000019 ????????                .NEXT_DPB:	resd 1		; Pointer to next Drive parameter block
 14881 0000001D ????                    .NEXT_FREE:	resw 1		; Cluster # of last allocated cluster
 14882 0000001F ????                    .FREE_CNT:	resw 1		; Count of free clusters, -1 if unknown
 14883                                  .size:
 14884                                  endstruc
 14885                                  
 14886                                  DPBSIZ  EQU     DPB.size	; Size of the structure in bytes
 14887                                  
 14888                                  DSKSIZ  EQU	DPB.MAX_CLUSTER	; Size of disk (temp used during init only)
 14889                                  
 14890                                  ; ----------------------------------------------------------------------
 14891                                  ; 26/03/2018
 14892                                  
 14893                                  ; IOCTL SUB-FUNCTIONS
 14894                                  IOCTL_GET_DEVICE_INFO	EQU	0
 14895                                  IOCTL_SET_DEVICE_INFO	EQU	1
 14896                                  IOCTL_READ_HANDLE	EQU	2
 14897                                  IOCTL_WRITE_HANDLE	EQU	3
 14898                                  IOCTL_READ_DRIVE	EQU	4
 14899                                  IOCTL_WRITE_DRIVE	EQU	5
 14900                                  IOCTL_GET_INPUT_STATUS	EQU	6
 14901                                  IOCTL_GET_OUTPUT_STATUS EQU	7
 14902                                  IOCTL_CHANGEABLE?	EQU	8
 14903                                  IOCTL_SHARING_RETRY	EQU	11
 14904                                  GENERIC_IOCTL_HANDLE	EQU	12
 14905                                  GENERIC_IOCTL		EQU	13
 14906                                  
 14907                                  ; GENERIC IOCTL SUB-FUNCTIONS
 14908                                  RAWIO			EQU	8
 14909                                  
 14910                                  ; RAWIO SUB-FUNCTIONS
 14911                                  GET_DEVICE_PARAMETERS	EQU	60H
 14912                                  SET_DEVICE_PARAMETERS	EQU	40H
 14913                                  READ_TRACK		EQU	61H
 14914                                  WRITE_TRACK		EQU	41H
 14915                                  VERIFY_TRACK		EQU	62H
 14916                                  FORMAT_TRACK		EQU	42H
 14917                                  
 14918                                  ; DEVICETYPE VALUES
 14919                                  MAX_SECTORS_IN_TRACK	EQU	63
 14920                                  DEV_5INCH		EQU	0
 14921                                  DEV_5INCH96TPI		EQU	1
 14922                                  DEV_3INCH720KB		EQU	2
 14923                                  DEV_8INCHSS		EQU	3
 14924                                  DEV_8INCHDS		EQU	4
 14925                                  DEV_HARDDISK		EQU	5
 14926                                  DEV_OTHER		EQU	7
 14927                                  ;DEV_3INCH1440KB	EQU	7
 14928                                  DEV_3INCH2880KB		EQU	9
 14929                                  ; Retro DOS v2.0 - 26/03/2018
 14930                                  ;;DEV_TAPE		EQU	6
 14931                                  ;;DEV_ERIMO		EQU	8
 14932                                  ;DEV_3INCH2880KB	EQU	9
 14933                                  DEV_3INCH1440KB		EQU	10
 14934                                  
 14935                                  ;MAX_DEV_TYPE		EQU	9	; MAXIMUM DEVICE TYPE THAT WE
 14936                                  					; CURRENTLY SUPPORT.
 14937                                  MAX_DEV_TYPE		EQU	10
 14938                                  
 14939                                  struc A_SECTORTABLE
 14940 00000000 ????                    .ST_SECTORNUMBER:	resw	1
 14941 00000002 ????                    .ST_SECTORSIZE:		resw	1
 14942                                  .size:
 14943                                  endstruc
 14944                                  
 14945                                  ; 25/03/2019 - Retro DOS v4.0  (MSDOS 6.0, BPB.INC, IOCTL.INC)
 14946                                  
 14947                                  ;**	BIOS PARAMETER BLOCK DEFINITION
 14948                                  ;
 14949                                  ;	The BPB contains information about the disk structure.  It dates
 14950                                  ;	back to the earliest FAT systems and so FAT information is
 14951                                  ;	intermingled with physical driver information.
 14952                                  ;
 14953                                  ;	A boot sector contains a BPB for its device; for other disks
 14954                                  ;	the driver creates a BPB.  DOS keeps copies of some of this
 14955                                  ;	information in the DPB.
 14956                                  ;
 14957                                  ;	The BDS structure contains a BPB within it.
 14958                                  
 14959                                  struc A_BPB
 14960 00000000 ????                    .BPB_BYTESPERSECTOR:	resw	1
 14961 00000002 ??                      .BPB_SECTORSPERCLUSTER:	resb	1
 14962 00000003 ????                    .BPB_RESERVEDSECTORS:	resw	1
 14963 00000005 ??                      .BPB_NUMBEROFFATS:	resb	1
 14964 00000006 ????                    .BPB_ROOTENTRIES: 	resw	1
 14965 00000008 ????                    .BPB_TOTALSECTORS:	resw	1
 14966 0000000A ??                      .BPB_MEDIADESCRIPTOR:	resb	1
 14967 0000000B ????                    .BPB_SECTORSPERFAT:	resw	1
 14968 0000000D ????                    .BPB_SECTORSPERTRACK:	resw	1
 14969 0000000F ????                    .BPB_HEADS:		resw	1
 14970 00000011 ????                    .BPB_HIDDENSECTORS:	resw	1
 14971 00000013 ????                    			resw	1
 14972 00000015 ????                    .BPB_BIGTOTALSECTORS:	resw	1
 14973 00000017 ????                    			resw	1
 14974 00000019 ????????????            			resb	6	; NOTE:  many times these
 14975                                  ;					; 	 6 bytes are omitted
 14976                                  ;					;	 when BPB manipulations
 14977                                  ;					;	 are performed!
 14978                                  .size:
 14979                                  endstruc
 14980                                  
 14981                                  struc A_DEVICEPARAMETERS
 14982 00000000 ??                      .DP_SPECIALFUNCTIONS:	resb	1
 14983 00000001 ??                      .DP_DEVICETYPE:		resb	1
 14984 00000002 ????                    .DP_DEVICEATTRIBUTES:	resw	1
 14985 00000004 ????                    .DP_CYLINDERS:		resw	1
 14986 00000006 ??                      .DP_MEDIATYPE:		resb	1
 14987 00000007 <res 1Fh>               .DP_BPB:		resb	A_BPB.size
 14988 00000026 ????                    .DP_TRACKTABLEENTRIES:	resw	1
 14989 00000028 <res FCh>               .DP_SECTORTABLE:	resb	MAX_SECTORS_IN_TRACK * A_SECTORTABLE.size
 14990                                  endstruc
 14991                                  
 14992                                  ; ----------------------------------------------------------------------
 14993                                  ; structure, equates for devmark for mem command.
 14994                                  
 14995                                  ; 25/03/2019 - Retro DOS v4.0 (MSDOS 6.0, DEVMARK.INC, 1991)
 14996                                  
 14997                                  struc devmark
 14998 00000000 ??                       .id:	    resb 1
 14999 00000001 ????                     .seg:	    resw 1
 15000 00000003 ????                     .size:	    resw 1
 15001 00000005 ??????                   .dum:	    resb 3
 15002 00000008 ????????????????         .filename: resb 8
 15003                                  endstruc
 15004                                  
 15005                                  devmark_stk	equ	'S'
 15006                                  devmark_device	equ	'D'
 15007                                  devmark_ifs	equ	'I'
 15008                                  devmark_buf	equ	'B'
 15009                                  devmark_cds	equ	'L' ; lastdrive
 15010                                  devmark_files	equ	'F'
 15011                                  devmark_fcbs	equ	'X'
 15012                                  devmark_inst	equ	'T' ; used for sysinit base for install= command.
 15013                                  devmark_ems_stub equ	'E'
 15014                                  
 15015                                  setbrkdone	equ	00000001b
 15016                                  for_devmark	equ	00000010b
 15017                                  not_for_devmark equ	11111101b
 15018                                  
 15019                                  ; ----------------------------------------------------------------------
 15020                                  ; Memory arena structure
 15021                                  
 15022                                  ; 24/03/2019 - Retro DOS v4.0 
 15023                                  ; (MSDOS 6.0, ARENA.INC)
 15024                                  
 15025                                  ;** Arena Header
 15026                                  
 15027                                  struc ARENA
 15028 00000000 ??                      .SIGNATURE:	resb 1		; 4D for valid item, 5A for last item
 15029 00000001 ????                    .OWNER:		resw 1		; owner of arena item
 15030 00000003 ????                    .SIZE:		resw 1		; size in paragraphs of item
 15031 00000005 ??????                  .RESERVED	resb 3		; reserved
 15032 00000008 ????????????????        .NAME:		resb 8		; owner file name
 15033                                  endstruc
 15034                                  
 15035                                  ; 12/04/2019
 15036                                  
 15037                                  arena_owner_system	EQU 0	; free block indication
 15038                                  
 15039                                  arena_signature_normal	EQU 4Dh ; valid signature, not end of arena
 15040                                  arena_signature_end	EQU 5Ah ; valid signature, last block in arena
 15041                                  
 15042                                  ; ----------------------------------------------------------------------
 15043                                  ; Process data block (otherwise known as program header)
 15044                                  
 15045                                  ; 23/03/2019 - Retro DOS v4.0
 15046                                  
 15047                                  ; (MSDOS 6.0 - PDB.INC, 1991)
 15048                                  
 15049                                  FILPERPROC	EQU     20
 15050                                  
 15051                                  struc PDB	; Process_data_block
 15052 00000000 ????                    .EXIT_CALL:	resw 1   	; INT int_abort system terminate
 15053 00000002 ????                    .BLOCK_LEN:	resw 1		; size of execution block
 15054 00000004 ??                                      resb 1
 15055 00000005 ??????????              .CPM_CALL:	resb 5		; ancient call to system
 15056 0000000A ????????                .EXIT:		resd 1		; pointer to exit routine
 15057 0000000E ????????                .CTRL_C:	resd 1		; pointer to ^C routine
 15058 00000012 ????????                .FATAL_ABORT:	resd 1		; pointer to fatal error
 15059 00000016 ????                    .PARENT_PID:	resw 1		; PID of parent (terminate PID)
 15060 00000018 <res 14h>               .JFN_TABLE:     resb FILPERPROC ; indices into system table
 15061 0000002C ????                    .ENVIRON:	resw 1		; seg addr of environment
 15062 0000002E ????????                .USER_STACK:	resd 1		; stack of self during system calls
 15063 00000032 ????                    .JFN_LENGTH:	resw 1 		; number of handles allowed
 15064 00000034 ????????                .JFN_POINTER:	resd 1 		; pointer to JFN table
 15065 00000038 ????????                .NEXT_PDB:	resd 1		; pointer to nested PDB's
 15066 0000003C ??                      .INTERCON:	resb 1 		; *** jh-3/28/90 ***
 15067 0000003D ??                      .APPEND:	resb 1		; *** Not sure if still used ***
 15068 0000003E ????                    .NOVELL_USED:	resb 2		; Novell shell (redir) uses these
 15069 00000040 ????                    .VERSION:	resw 1		; DOS version reported to this app
 15070 00000042 <res Eh>                .PAD1:		resb 14		; 	
 15071 00000050 ??????????              .CALL_SYSTEM:	resb 5		; portable method of system call
 15072 00000055 ??????????????          .PAD2:		resb 7 		; reserved so FCB 1 can be used as an extended FCB
 15073 0000005C <res 10h>               .FCB1:		resb 16		; default FCB 1
 15074 0000006C <res 10h>               .FCB2:		resb 16		; default FCB 2
 15075 0000007C ????????                .PAD3:		resb 4		; not sure if this is used by PDB_FCB2
 15076 00000080 <res 80h>               .TAIL:		resb 128	; command tail and default DTA
 15077                                  ;.size:
 15078                                  endstruc
 15079                                  
 15080                                  ; ----------------------------------------------------------------------
 15081                                  ; <system call definitions>
 15082                                  
 15083                                  ; 23/03/2019 - Retro DOS v4.0
 15084                                  
 15085                                  ; (MSDOS 6.0 - SYSCALL.INC, 1991)
 15086                                  
 15087                                  ABORT                           EQU 0   ;  0      0
 15088                                  STD_CON_INPUT                   EQU 1   ;  1      1
 15089                                  STD_CON_OUTPUT                  EQU 2   ;  2      2
 15090                                  STD_AUX_INPUT                   EQU 3   ;  3      3
 15091                                  STD_AUX_OUTPUT                  EQU 4   ;  4      4
 15092                                  STD_PRINTER_OUTPUT              EQU 5   ;  5      5
 15093                                  RAW_CON_IO                      EQU 6   ;  6      6
 15094                                  RAW_CON_INPUT                   EQU 7   ;  7      7
 15095                                  STD_CON_INPUT_NO_ECHO           EQU 8   ;  8      8
 15096                                  STD_CON_STRING_OUTPUT           EQU 9   ;  9      9
 15097                                  STD_CON_STRING_INPUT            EQU 10  ; 10      A
 15098                                  STD_CON_INPUT_STATUS            EQU 11  ; 11      B
 15099                                  STD_CON_INPUT_FLUSH             EQU 12  ; 12      C
 15100                                  DISK_RESET                      EQU 13  ; 13      D
 15101                                  SET_DEFAULT_DRIVE               EQU 14  ; 14      E
 15102                                  FCB_OPEN                        EQU 15  ; 15      F
 15103                                  FCB_CLOSE                       EQU 16  ; 16     10
 15104                                  DIR_SEARCH_FIRST                EQU 17  ; 17     11
 15105                                  DIR_SEARCH_NEXT                 EQU 18  ; 18     12
 15106                                  FCB_DELETE                      EQU 19  ; 19     13
 15107                                  FCB_SEQ_READ                    EQU 20  ; 20     14
 15108                                  FCB_SEQ_WRITE                   EQU 21  ; 21     15
 15109                                  FCB_CREATE                      EQU 22  ; 22     16
 15110                                  FCB_RENAME                      EQU 23  ; 23     17
 15111                                  GET_DEFAULT_DRIVE               EQU 25  ; 25     19
 15112                                  SET_DMA                         EQU 26  ; 26     1A
 15113                                  GET_DEFAULT_DPB                 EQU 31  ; 31     1F
 15114                                  FCB_RANDOM_READ                 EQU 33  ; 33     21
 15115                                  FCB_RANDOM_WRITE                EQU 34  ; 34     22
 15116                                  GET_FCB_FILE_LENGTH             EQU 35  ; 35     23
 15117                                  GET_FCB_POSITION                EQU 36  ; 36     24
 15118                                  SET_INTERRUPT_VECTOR            EQU 37  ; 37     25
 15119                                  CREATE_PROCESS_DATA_BLOCK       EQU 38  ; 38     26
 15120                                  FCB_RANDOM_READ_BLOCK           EQU 39  ; 39     27
 15121                                  FCB_RANDOM_WRITE_BLOCK          EQU 40  ; 40     28
 15122                                  PARSE_FILE_DESCRIPTOR           EQU 41  ; 41     29
 15123                                  GET_DATE                        EQU 42  ; 42     2A
 15124                                  SET_DATE                        EQU 43  ; 43     2B
 15125                                  GET_TIME                        EQU 44  ; 44     2C
 15126                                  SET_TIME                        EQU 45  ; 45     2D
 15127                                  SET_VERIFY_ON_WRITE             EQU 46  ; 46     2E
 15128                                  ; Extended functionality group
 15129                                  GET_DMA                         EQU 47  ; 47     2F
 15130                                  GET_VERSION                     EQU 48  ; 48     30
 15131                                  KEEP_PROCESS                    EQU 49  ; 49     31
 15132                                  GET_DPB                         EQU 50  ; 50     32
 15133                                  SET_CTRL_C_TRAPPING             EQU 51  ; 51     33
 15134                                  GET_INDOS_FLAG                  EQU 52  ; 52     34
 15135                                  GET_INTERRUPT_VECTOR            EQU 53  ; 53     35
 15136                                  GET_DRIVE_FREESPACE             EQU 54  ; 54     36
 15137                                  CHAR_OPER                       EQU 55  ; 55     37
 15138                                  INTERNATIONAL                   EQU 56  ; 56     38
 15139                                  ;   Directory Group
 15140                                  MKDIR                           EQU 57  ; 57     39
 15141                                  RMDIR                           EQU 58  ; 58     3A
 15142                                  CHDIR                           EQU 59  ; 59     3B
 15143                                  ;   File Group
 15144                                  CREAT                           EQU 60  ; 60     3C
 15145                                  OPEN                            EQU 61  ; 61     3D
 15146                                  CLOSE                           EQU 62  ; 62     3E
 15147                                  READ                            EQU 63  ; 63     3F
 15148                                  WRITE                           EQU 64  ; 64     40
 15149                                  UNLINK                          EQU 65  ; 65     41
 15150                                  LSEEK                           EQU 66  ; 66     42
 15151                                  CHMOD                           EQU 67  ; 67     43
 15152                                  IOCTL                           EQU 68  ; 68     44
 15153                                  XDUP                            EQU 69  ; 69     45
 15154                                  XDUP2                           EQU 70  ; 70     46
 15155                                  CURRENT_DIR                     EQU 71  ; 71     47
 15156                                  ;    Memory Group
 15157                                  ALLOC                           EQU 72  ; 72     48
 15158                                  DEALLOC                         EQU 73  ; 73     49
 15159                                  SETBLOCK                        EQU 74  ; 74     4A
 15160                                  ;    Process Group
 15161                                  EXEC                            EQU 75  ; 75     4B
 15162                                  EXIT                            EQU 76  ; 76     4C
 15163                                  WAITPROCESS			EQU 77  ; 77     4D
 15164                                  FIND_FIRST                      EQU 78  ; 78     4E
 15165                                  ;   Special Group
 15166                                  FIND_NEXT                       EQU 79  ; 79     4F
 15167                                  ; SPECIAL SYSTEM GROUP
 15168                                  SET_CURRENT_PDB                 EQU 80  ; 80     50
 15169                                  GET_CURRENT_PDB                 EQU 81  ; 81     51
 15170                                  GET_IN_VARS                     EQU 82  ; 82     52
 15171                                  SETDPB                          EQU 83  ; 83     53
 15172                                  GET_VERIFY_ON_WRITE             EQU 84  ; 84     54
 15173                                  DUP_PDB                         EQU 85  ; 85     55
 15174                                  RENAME                          EQU 86  ; 86     56
 15175                                  FILE_TIMES                      EQU 87  ; 87     57
 15176                                  ;
 15177                                  ALLOCOPER			EQU 88	; 88     58	
 15178                                  ; Network extention system calls
 15179                                  GetExtendedError		EQU 89	; 89	 59
 15180                                  CreateTempFile			EQU 90	; 90	 5A
 15181                                  CreateNewFile			EQU 91	; 91	 5B
 15182                                  LockOper			EQU 92	; 92	 5C Lock and Unlock
 15183                                  ServerCall			EQU 93	; 93	 5D CommitAll, ServerDOSCall,
 15184                                  					;	    CloseByName, CloseUser,
 15185                                  					;	    CloseUserProcess,
 15186                                  					;	    GetOpenFileList
 15187                                  UserOper			EQU 94	; 94	 5E Get and Set
 15188                                  AssignOper			EQU 95	; 95	 5F On, Off, Get, Set, Cancel
 15189                                  xNameTrans			EQU 96	; 96	 60
 15190                                  PathParse			EQU 97	; 97	 61
 15191                                  GetCurrentPSP			EQU 98	; 98	 62
 15192                                  Hongeul 			EQU 99	; 99	 63
 15193                                  ECS_CALL			EQU 99	; 99	 63  ;; DBCS support
 15194                                  Set_Printer_Flag		EQU 100 ; 100	 64
 15195                                  GetExtCntry			EQU 101 ; 101	 65
 15196                                  GetSetCdPg			EQU 102 ; 102	 66
 15197                                  ExtHandle			EQU 103 ; 103	 67
 15198                                  Commit				EQU 104 ; 104	 68
 15199                                  GetSetMediaID			EQU 105 ; 105	 69
 15200                                  IFS_IOCTL			EQU 107 ; 107	 6B
 15201                                  ExtOpen 			EQU 108 ; 108	 6C
 15202                                  ;
 15203                                  ;ifdef ROMEXEC
 15204                                  ;ROM_FIND_FIRST			EQU 109 ; 109    6D
 15205                                  ;ROM_FIND_NEXT			EQU 110 ; 110    6E
 15206                                  ;ROM_EXCLUDE			EQU 111 ; 111	 6F
 15207                                  ;endif
 15208                                  ;
 15209                                  Set_Oem_Handler 		EQU 248 ; 248	 F8
 15210                                  OEM_C1				EQU 249 ; 249	 F9
 15211                                  OEM_C2				EQU 250 ; 250	 FA
 15212                                  OEM_C3				EQU 251 ; 251	 FB
 15213                                  OEM_C4				EQU 252 ; 252	 FC
 15214                                  OEM_C5				EQU 253 ; 253	 FD
 15215                                  OEM_C6				EQU 254 ; 254	 FE
 15216                                  OEM_C7				EQU 255 ; 255	 FF
 15217                                  
 15218                                  ; ----------------------------------------------------------------------
 15219                                  ; SYSCONF.ASM (MSDOS 3.3 - 24/07/1987) 	
 15220                                  ; ----------------------------------------------------------------------
 15221                                  
 15222                                  ;;	IF	STACKSW
 15223                                  
 15224                                  ;;
 15225                                  ;; Internal Stack Parameters
 15226                                  ;EntrySize		equ	8
 15227                                  ;
 15228                                  ;MinCount		equ	8
 15229                                  ;DefaultCount		equ	9
 15230                                  ;MaxCount		equ	64
 15231                                  ;
 15232                                  ;MinSize 		equ	32
 15233                                  ;DefaultSize		equ	128
 15234                                  ;MaxSize 		equ	512
 15235                                  
 15236                                  ;;	ENDIF
 15237                                  
 15238                                  ; ----------------------------------------------------------------------
 15239                                  ; BIOSTRUC.INC (MSDOS 3.3 - 24/07/1987) 	
 15240                                  ; ----------------------------------------------------------------------
 15241                                  					  ;;Rev 3.30 Modification
 15242                                  ; ROM BIOS CALL PACKET STRUCTURES					  
 15243                                  									  
 15244                                  ;*******************************					  
 15245                                  ;System Service call ( Int 15h )					  
 15246                                  ;*******************************					  
 15247                                  ;Function AH = 0C0h, Return system configuration			  
 15248                                  ;For PC and PCJR on return:						  
 15249                                  ;	(AH)	= 80h							  
 15250                                  ;	(CY)	= 1							  
 15251                                  ;For PCXT, PC PORTABLE and PCAT on return:				  
 15252                                  ;	(AH)	= 86h							  
 15253                                  ;	(CY)	= 1							  
 15254                                  ;For all others:							  
 15255                                  ;	(AH)	= 0							  
 15256                                  ;	(CY)	= 0							  
 15257                                  ;	(ES:BX) = pointer to system descriptor vector in ROS		  
 15258                                  ; System descriptor :							  
 15259                                  ;	DW	xxxx		length of descriptor in bytes,		  
 15260                                  ;				minimum length = 8			  
 15261                                  ;	DB	xx		model byte				  
 15262                                  ;				0FFh	= PC				  
 15263                                  ;				0FEh	= PC/XT, Portable		  
 15264                                  ;				0FDh	= PC/JR 			  
 15265                                  ;				0FCh	= PC/AT				  
 15266                                  ;				0F9h	= Convertable			  
 15267                                  ;				0F8h	= Model 80			  
 15268                                  ;				0E0 thru 0EFh = reserved		  
 15269                                  ;									  
 15270                                  ;	DB	xx		secondary model byte			  
 15271                                  ;				000h	= PC1				  
 15272                                  ;				000h	= PC/XT, Portable		  
 15273                                  ;				000h	= PC/JR 			  
 15274                                  ;				000h	= PC/AT 			  
 15275                                  ;				001h	= PC/AT Model 339		  
 15276                                  ;				003h	= PC/RT				  
 15277                                  ;				000h	= Convertable			  
 15278                                  ;									  
 15279                                  ;	DB	xx		bios revision level			  
 15280                                  ;				00 for first release, subsequent release  
 15281                                  ;				of code with same model byte and	  
 15282                                  ;				secondary model byte require revison level
 15283                                  ;				to increase by one.			  
 15284                                  ;									  
 15285                                  ;	DB	xx		feature information byte 1		  
 15286                                  ;				X0000000 = 1, bios use DMA channel 3	  
 15287                                  ;					 = 0, DMA channel 3 not used	  
 15288                                  ;									  
 15289                                  ;				0X000000 = 1, 2nd Interrupt chip present  
 15290                                  ;					 = 0, 2nd Interrupt chip not present
 15291                                  ;									  
 15292                                  ;				00X00000 = 1, Real Time Clock present	  
 15293                                  ;					 = 0, Real Time Clock not present 
 15294                                  ;									  
 15295                                  ;				000X0000 = 1, Keyboard escape sequence(INT 15h)
 15296                                  ;						called in keyboard interrupt
 15297                                  ;						(Int 09h).		  
 15298                                  ;					 = 0, Keyboard escape sequence not
 15299                                  ;						called. 		  
 15300                                  ;				0000XXXX reserved			  
 15301                                  ;									  
 15302                                  ;	DB	xx		feature information byte 2 - reserved	  
 15303                                  ;									  
 15304                                  ;	DB	xx		feature information byte 2 - reserved	  
 15305                                  ;									  
 15306                                  ;	DB	xx		feature information byte 2 - reserved	  
 15307                                  ;									  
 15308                                  ;	DB	xx		feature information byte 2 - reserved	  
 15309                                  ;									  
 15310                                  
 15311                                  ; 22/03/2019									  
 15312                                  struc ROMBIOS_DESC		; BIOS_SYSTEM_DESCRIPTOR						  
 15313 00000000 ????                    .bios_sd_leng:		resw 1				  
 15314 00000002 ??                      .bios_sd_modelbyte:	resb 1					  
 15315                                  .bios_sd_scnd_modelbyte: 
 15316 00000003 ??                      			resb 1					  
 15317 00000004 ??                      			resb 1					  
 15318 00000005 ??                      .bios_sd_featurebyte1:	resb 1					  
 15319 00000006 ????????                			resb 4					  
 15320                                  endstruc					  
 15321                                  									  
 15322                                  ;FeatureByte1	bit map equates 					  
 15323                                  DMAchannel3		equ 10000000b					  
 15324                                  ScndIntController	equ 01000000b					  
 15325                                  RealTimeClock		equ 00100000b					  
 15326                                  KeyEscapeSeq		equ 00010000b					  
 15327                                  					;;End of Modification
 15328                                  
 15329                                  ; ----------------------------------------------------------------------
 15330                                  ; SYSVAR.INC (MSDOS 6.0 - 1991) 	
 15331                                  ; ----------------------------------------------------------------------
 15332                                  ; 22/03/2019 - Retro DOS v4.0
 15333                                  
 15334                                  ;	SCCSID = @(#)sysvar.asm 1.1 85/04/10
 15335                                  
 15336                                  struc SysInitVars
 15337                                  ; MSDOS 3.3
 15338 00000000 ????????                .SYSI_DPB:    resd 1			; DPB chain
 15339 00000004 ????????                .SYSI_SFT:    resd 1			; SFT chain
 15340 00000008 ????????                .SYSI_CLOCK:  resd 1			; CLOCK device
 15341 0000000C ????????                .SYSI_CON:    resd 1			; CON device
 15342 00000010 ????                    .SYSI_MAXSEC: resw 1			; maximum sector size
 15343 00000012 ????????                .SYSI_BUF:    resd 1			; buffer chain
 15344 00000016 ????????                .SYSI_CDS:    resd 1			; CDS list
 15345 0000001A ????????                .SYSI_FCB:    resd 1			; FCB chain
 15346 0000001E ????                    .SYSI_KEEP:   resw 1			; keep count
 15347 00000020 ??                      .SYSI_NUMIO:  resb 1			; number of block devices
 15348 00000021 ??                      .SYSI_NCDS:   resb 1			; number of CDS's
 15349 00000022 ????????                .SYSI_DEV:    resd 1			; device list
 15350                                  ; MSDOS 6.0
 15351 00000026 ????                    .SYSI_ATTR:	    resw 1		; null device attribute word
 15352 00000028 ????                    .SYSI_STRAT:	    resw 1		; null device strategy entry point
 15353 0000002A ????                    .SYSI_INTER:	    resw 1		; null device interrupt entry point
 15354 0000002C ????????????????        .SYSI_NAME:	    resb 8		; null device name
 15355                                  .SYSI_SPLICE:	    resb 0		; TRUE -> splicees being done
 15356 00000034 ????                    .SYSI_IBMDOS_SIZE:  resw 1		; DOS size in paragraphs
 15357 00000036 ????????                .SYSI_IFS_DOSCALL@: resd 1		; IFS DOS service rountine entry
 15358 0000003A ????????                .SYSI_IFS:	    resd 1	 	; IFS header chain
 15359 0000003E ????????                .SYSI_BUFFERS:	    resw 2		; BUFFERS= values (m,n)
 15360 00000042 ??                      .SYSI_BOOT_DRIVE:   resb 1		; boot drive A=1 B=2,..
 15361 00000043 ??                      .SYSI_DWMOVE:	    resb 1		; 1 if 386 machine
 15362 00000044 ????                    .SYSI_EXT_MEM:	    resw 1		; Extended memory size in KB.
 15363                                  .size:
 15364                                  endstruc
 15365                                  
 15366                                  ;This is added for more information exchage between DOS, BIOS.
 15367                                  ;DOS will give the pointer to SysInitTable in ES:DI. - J.K. 5/29/86
 15368                                  
 15369                                  ; 22/03/2019
 15370                                  struc SysInitVars_Ext
 15371 00000000 ????????                .SYSI_InitVars:	   resd 1	; Points to the above structure.
 15372 00000004 ????????                .SYSI_Country_Tab: resd 1	; DOS_Country_cdpg_info
 15373                                  endstruc
 15374                                  
 15375                                  ; 09/06/2018
 15376                                  ; 08/06/2018 - Retro DOS v3.0 (MSDOS 3.3)
 15377                                  SYSI_DPB    equ	0
 15378                                  SYSI_SFT    equ 4
 15379                                  SYSI_CLOCK  equ 8
 15380                                  SYSI_CON    equ 12
 15381                                  SYSI_MAXSEC equ 16
 15382                                  SYSI_BUF    equ 18 		
 15383                                  SYSI_CDS    equ 22
 15384                                  SYSI_FCB    equ 26
 15385                                  SYSI_KEEP   equ 30
 15386                                  SYSI_NUMIO  equ	32
 15387                                  SYSI_NCDS   equ	33
 15388                                  SYSI_DEV    equ 34
 15389                                  ; 22/03/2019 - Retro DOS v4.0 (MSDOS 6.0)
 15390                                  SYSI_ATTR	  equ 38
 15391                                  SYSI_STRAT	  equ 40
 15392                                  SYSI_INTER	  equ 42
 15393                                  SYSI_NAME	  equ 44
 15394                                  SYSI_SPLICE	  equ 52
 15395                                  SYSI_IBMDOS_SIZE  equ 53
 15396                                  SYSI_IFS_DOSCALL@ equ 55
 15397                                  SYSI_IFS	  equ 59
 15398                                  SYSI_BUFFERS	  equ 63
 15399                                  SYSI_BOOT_DRIVE   equ 67
 15400                                  SYSI_DWMOVE	  equ 68
 15401                                  SYSI_EXT_MEM	  equ 69
 15402                                  
 15403                                  ;The SYSI_BUF of SysInitVars points to the following structure
 15404                                  
 15405                                  EMS_MAP_BUFF_SIZE EQU 12	; EMS map buffer size
 15406                                  
 15407                                  struc BUFFINF 	; BUFFINFO
 15408 00000000 ????????                .Buff_Queue:	   resd	1	; Head of list of buffers
 15409 00000004 ????                    .Dirty_Buff_Count: resw 1	; number of dirty buffers in list
 15410 00000006 ????????                .Cache_ptr:	   resd 1	; pointer to secondary cache
 15411 0000000A ????                    .Cache_count:      resw 1	; number of secondary cache entries
 15412                                  
 15413 0000000C ??                      .Buff_In_HMA:	   resb 1	; flag to indicate that buffers
 15414                                  				; are in HMA
 15415 0000000D ????????                .Lo_Mem_Buff:	   resd 1	; Ptr to scratch buff in Low Mem
 15416                                  				;  used to read/write on disks
 15417 00000011 ????????                .UU_EMS_FIRST_PAGE:	resw 2
 15418 00000015 ????                    .UU_EMS_NPA640:		resw 1
 15419 00000017 ??                      .UU_EMS_mode:		resb 1	 ; no EMS = -1
 15420 00000018 ????                    .UU_EMS_handle:		resw 1	 ; EMS handle for buffers
 15421 0000001A ????                    .UU_EMS_PageFrame_Number: resw 1 ; EMS page frame number
 15422 0000001C ????                    .UU_EMS_Seg_Cnt:	resw 1	 ; EMS segment count
 15423 0000001E ????                    .UU_EMS_Page_Frame:	resw 1	 ; EMS page frame segment address
 15424 00000020 ????                    .UU_EMS_reserved:	resw 1	 ; EMS segment count
 15425 00000022 ??                      .UU_EMS_Map_Buff:	resb 1	 ; map buffer
 15426                                  .size:
 15427                                  endstruc
 15428                                  
 15429                                  ; ----------------------------------------------------------------------
 15430                                  ; CURDIR.INC (MSDOS 6.0 - 1991) 	
 15431                                  ; ----------------------------------------------------------------------
 15432                                  ; 22/03/2019 - Retro DOS v4.0
 15433                                  
 15434                                  ;**	CDS - Current Directory Structure
 15435                                  ;
 15436                                  ; CDS items are used bu the internal routines to store cluster numbers and
 15437                                  ; network identifiers for each logical name.  The ID field is used dually,
 15438                                  ; both as net ID and for a cluster number for local devices. In the case
 15439                                  ; of local devices, the cluster number will be -1 if there is a potential
 15440                                  ; of the disk being changed or if the path must be recracked.
 15441                                  ;
 15442                                  ;	Some pathnames have special preambles, such as
 15443                                  ;
 15444                                  ;		\\machine\sharename\...
 15445                                  ;	For these pathnames we can't allow ".." processing to back us
 15446                                  ;	up into the special front part of the name.  The CURDIR_END field
 15447                                  ;	holds the address of the seperator character which marks
 15448                                  ;	the split between the special preamble and the regular
 15449                                  ;	path list; ".." processing isn't allowed to back us up past
 15450                                  ;	(i.e., before) CURDIR_END
 15451                                  ;	For the root, it points at the leading /. For net
 15452                                  ;	assignments it points at the end (nul) of the initial assignment:
 15453                                  ;	A:/	\\foo\bar	    \\foo\bar\blech\bozo
 15454                                  ;	  ^		 ^		     ^
 15455                                  
 15456                                  DIRSTRLEN	EQU	64+3		; Max length in bytes of directory strings
 15457                                  TEMPLEN 	EQU	DIRSTRLEN*2
 15458                                  
 15459                                  struc 		curdir_list
 15460                                  ; MSDOS 3.3
 15461 00000000 <res 43h>               .cdir_text	resb	DIRSTRLEN	; text of assignment and curdir
 15462 00000043 ????                    .cdir_flags	resw	1		; various flags
 15463 00000045 ????????                .cdir_devptr	resd	1		; local pointer to DPB or net device
 15464 00000049 ????????                .cdir_ID	resw	2		; cluster of current dir (net ID)
 15465 0000004D ????                    .cdir_usr_word	resw	1
 15466 0000004F ????                    .cdir_end	resw	1		; end of assignment
 15467                                  ; MSDOS 6.0
 15468 00000051 ??                      .cdir_type:	resb	1		; IFS drive (2=ifs, 4=netuse)
 15469 00000052 ????????                .cdir_ifd_hdr:	resd	1		; Ptr to File System Header
 15470 00000056 ????                    .cdir_fsda:	resb	2		; File System Dependent Data Area
 15471                                  .size:
 15472                                  endstruc
 15473                                  
 15474                                  curdirlen	EQU	curdir_list.size	; Needed for screwed up
 15475                                  						; ASM87 which doesn't allow
 15476                                  						; Size directive as a macro
 15477                                  						; argument
 15478                                  %define curdir_netID	dword [curdir_list.cdir_ID]
 15479                                  
 15480                                  ;**	Flag values for CURDIR_FLAGS
 15481                                  
 15482                                  ;Flag word masks
 15483                                  curdir_isnet	EQU	1000000000000000B
 15484                                  curdir_isifs	EQU	1000000000000000B
 15485                                  curdir_inuse	EQU	0100000000000000B
 15486                                  curdir_splice	EQU	0010000000000000B
 15487                                  curdir_local	EQU	0001000000000000B
 15488                                  
 15489                                  ; ----------------------------------------------------------------------
 15490                                  ; SF.INC (MSDOS 6.0 - 1991) 	
 15491                                  ; ----------------------------------------------------------------------
 15492                                  ; 25/03/2019 - Retro DOS v4.0
 15493                                  
 15494                                  ; system file table
 15495                                  
 15496                                  ;**	System File Table SuperStructure
 15497                                  ;
 15498                                  ;	The system file table entries are allocated in contiguous groups.
 15499                                  ;	There may be more than one such groups; the SF "superstructure"
 15500                                  ;	tracks the groups.
 15501                                  
 15502                                  struc	SF
 15503 00000000 ????????                .SFLink:	resd	1
 15504 00000004 ????                    .SFCount:	resw	1		; number of entries
 15505 00000006 ????                    .SFTable:	resw	1		; beginning of array of the following
 15506                                  .size:
 15507                                  endstruc
 15508                                  
 15509                                  ;**	System file table entry
 15510                                  ;
 15511                                  ;	These are the structures which are at SFTABLE in the SF structure.
 15512                                  
 15513                                  struc	SF_ENTRY
 15514 00000000 ????                    .sf_ref_count:	resw	1		; number of processes sharing entry
 15515                                  					;   if FCB then ref count
 15516 00000002 ????                    .sf_mode: 	resw	1		; mode of access or high bit on if FCB
 15517 00000004 ??                      .sf_attr: 	resb	1		; attribute of file
 15518 00000005 ????                    .sf_flags:	resw	1		;Bits 8-15
 15519                                  					; Bit 15 = 1 if remote file
 15520                                  					;	 = 0 if local file or device
 15521                                  					; Bit 14 = 1 if date/time is not to be
 15522                                  					;   set from clock at CLOSE.  Set by
 15523                                  					;   FILETIMES and FCB_CLOSE.  Reset by
 15524                                  					;   other reseters of the dirty bit
 15525                                  					;   (WRITE)
 15526                                  					; Bit 13 = Pipe bit (reserved)
 15527                                  					;
 15528                                  					; Bits 0-7 (old FCB_devid bits)
 15529                                  					; If remote file or local file, bit
 15530                                  					; 6=0 if dirty Device ID number, bits
 15531                                  					; 0-5 if local file.
 15532                                  					; bit 7=0 for local file, bit 7
 15533                                  					;      =1 for local I/O device
 15534                                  					; If local I/O device, bit 6=0 if EOF (input)
 15535                                  					;		Bit 5=1 if Raw mode
 15536                                  					;		Bit 0=1 if console input device
 15537                                  					;		Bit 1=1 if console output device
 15538                                  					;		Bit 2=1 if null device
 15539                                  					;		Bit 3=1 if clock device
 15540 00000007 ????????                .sf_devptr:	resd	1		; Points to DPB if local file, points
 15541                                  					; to device header if local device,
 15542                                  					; points to net device header if
 15543                                  					; remote
 15544 0000000B ????                    .sf_firclus:	resw	1		; First cluster of file (bit 15 = 0)
 15545                                  ;.sf_lstclus:	resw	1 ; *	
 15546 0000000D ????                    .sf_time: 	resw	1		; Time associated with file
 15547 0000000F ????                    .sf_date: 	resw	1		; Date associated with file
 15548 00000011 ????????                .sf_size: 	resd	1		; Size associated with file
 15549 00000015 ????????                .sf_position:	resd	1		; Read/Write pointer or LRU count for FCBs
 15550                                  ;
 15551                                  ; Starting here, the next 7 bytes may be used by the file system to store an
 15552                                  ; ID
 15553                                  ;
 15554 00000019 ????                    .sf_cluspos:	resw	1		; Position of last cluster accessed
 15555 0000001B ????                    .sf_dirsec:	resw	1		; Sector number of directory sector for this file
 15556 0000001D ??                      .sf_dirpos:	resb	1		; Offset of this entry in the above
 15557                                  ;
 15558                                  ; End of 7 bytes of file-system specific info.
 15559                                  ;
 15560 0000001E <res Bh>                .sf_name:	resb	11		; 11 character name that is in the
 15561                                  					; directory entry.  This is used by
 15562                                  					; close to detect file deleted and
 15563                                  					; disk changed errors.
 15564                                  ; SHARING INFO
 15565 00000029 ????????                .sf_chain:	resd	1		; link to next SF
 15566 0000002D ????                    .sf_UID:	resw	1
 15567 0000002F ????                    .sf_PID:	resw	1
 15568 00000031 ????                    .sf_MFT:	resw	1
 15569 00000033 ????                    .sf_lstclus:	resw	1 ; *		; Last cluster accessed
 15570 00000035 ????????                .sf_IFS_HDR:	resd 	1 ; **
 15571                                  .size:
 15572                                  endstruc
 15573                                  
 15574                                  ; ----------------------------------------------------------------------
 15575                                  ; DOSCNTRY.INC (MSDOS 3.3 - 24/07/1987) 	
 15576                                  ; ----------------------------------------------------------------------
 15577                                  ; 11/06/2018 - Retro DOS v3.0
 15578                                  
 15579                                  ;Equates for COUNTRY INFORMATION.
 15580                                  SetCountryInfo		EQU	1	;country info
 15581                                  SetUcase		EQU	2	;uppercase table
 15582                                  SetLcase		EQU	3	;lowercase table (Reserved)
 15583                                  SetUcaseFile		EQU	4	;uppercase file spec table
 15584                                  SetFileList		EQU	5	;valid file character list
 15585                                  SetCollate		EQU	6	;collating sequence
 15586                                  SetDBCS 		EQU	7	;double byte character set
 15587                                  SetALL			EQU	-1	;all the entries
 15588                                  
 15589                                  ;DOS country and code page information table structure.
 15590                                  ;Internally, IBMDOS gives a pointer to this table.
 15591                                  ;IBMBIO, MODE and NLSFUNC modules communicate with IBMDOS through
 15592                                  ;this structure.
 15593                                  
 15594                                  struc country_cdpg_info ; DOS_country_cdpg_info
 15595 00000000 ????????????????        .ccInfo_reserved :	resb	8	;reserved for internal use
 15596 00000008 <res 40h>               .ccPath_CountrySys:	resb	64	;path and filename for country info
 15597 00000048 ????                    .ccSysCodePage:		resw	1	;system code page id
 15598 0000004A ????                    .ccNumber_of_entries:	resw	1 ; dw 5
 15599 0000004C ??                      .ccSetUcase:		resb	1 ; db SetUcase ; = 2
 15600 0000004D ????????                .ccUcase_ptr:		resd	1	;pointer to Ucase table
 15601                                  
 15602 00000051 ??                      .ccSetUcaseFile:	resb	1 ; db SetUcaseFile ; = 4
 15603 00000052 ????????                .ccFileUcase_ptr: 	resd	1	;pointer to File Ucase table
 15604                                  
 15605 00000056 ??                      .ccSetFileList:		resb	1 ; db SetFileList ; = 5
 15606 00000057 ????????                .ccFileChar_ptr:	resd	1	;pointer to File char list table
 15607                                  
 15608 0000005B ??                      .ccSetCollate:		resb	1 ; db SetCollate ; = 6
 15609 0000005C ????????                .ccCollate_ptr:		resd	1	;pointer to collate table
 15610                                  
 15611 00000060 ??                      .ccSetCountryInfo:	resb	1 ; db SetCountryInfo ; = 1
 15612 00000061 ????                    .ccCountryInfoLen:	resw	1	;length of country info
 15613 00000063 ????                    .ccDosCountry:		resw	1	;system country code id
 15614 00000065 ????                    .ccDosCodePage:		resw	1	;system code page id
 15615 00000067 ????                    .ccDFormat:		resw	1	;date format
 15616 00000069 ??????????              .ccCurSymbol:		resb	5 ; db "    ",0
 15617                                  					;5 byte of (currency symbol+0)
 15618 0000006E ????                    .cc1000Sep:		resb	2 ; db " ",0 ;2 byte of (1000 sep. + 0)
 15619 00000070 ????                    .ccDecSep:		resb	2 ; db " ",0 ;2 byte of (Decimal sep. + 0)
 15620 00000072 ????                    .ccDateSep:		resb	2 ; db " ",0 ;2 byte of (date sep. + 0)
 15621 00000074 ????                    .ccTimeSep:		resb 	2 ; db " ",0 ;2 byte of (time sep. + 0)
 15622 00000076 ??                      .ccCFormat:		resb	1 	;currency format flags
 15623 00000077 ??                      .ccCSigDigits:		resb	1	;# of digits in currency
 15624 00000078 ??                      .ccTFormat:		resb	1	;time format
 15625 00000079 ????????                .ccMono_Ptr:		resd	1	;monocase routine entry point
 15626 0000007D ????                    .ccListSep:		resb	2 ; db " ",0 ;data list separator
 15627 0000007F <res Ah>                .ccReserved_area: 	resw	5 ; dw 5 dup(?) ;reserved
 15628                                  .size:
 15629                                  endstruc
 15630                                  
 15631                                  NEW_COUNTRY_SIZE    equ  country_cdpg_info.size - country_cdpg_info.ccDosCountry
 15632                                  
 15633                                  ; ======================================================================
 15634                                  ; retrodos4.s (offset addresses in MSDOS.SYS or RETRODOS.SYS)
 15635                                  ; ======================================================================
 15636                                  ; 21/03/2019 - Retro DOS v4.0
 15637                                  ; 21/10/2022 - Retro DOS v4.0 (MOdified MSDOS 5.0 IO.SYS)
 15638                                  
 15639                                  ;KERNEL_SEGMENT	equ 0070h  ; (IO.SYS loading segment, BIOS_DATA segment)
 15640                                  ; 21/10/2022
 15641                                  DOSBIODATASEG equ 0070h	; (IO.SYS loading segment, BIOS_DATA segment)
 15642                                  ; 22/10/2022
 15643                                  ;DOSBIOCODESEG equ 02C7h ; (MSDOS 5.0 IO.SYS, BIOS_CODE segment)
 15644                                  ; 09/12/2022
 15645                                  DOSBIOCODESEG equ IOSYSCODESEG
 15646                                  
 15647                                  ; Note: These offset addresses must be chanqed when the code 
 15648                                  ; 	in retrodos4.s (MSDOS.SYS) file will be changed.
 15649                                  
 15650                                  ; (following addresses can be verified by searching them in retrodos4.lst) 
 15651                                  
 15652                                  ; 09/12/2022
 15653                                  %if 0
 15654                                  
 15655                                  ; 13/05/2019
 15656                                  
 15657                                  ;IsWin386         equ 08CFh
 15658                                  ;V86_Crit_SetFocus equ 08D0h
 15659                                  ; 21/10/2022
 15660                                  IsWin386          equ 08D0h
 15661                                  V86_Crit_SetFocus equ 08D1h 
 15662                                  
 15663                                  ;seg_reinit	  equ 0772h ; not used in Retro DOS v4.0
 15664                                  ; 21/10/2022 - Retro DOS v4.0 (MOdified MSDOS 5.0 IO.SYS)
 15665                                  seg_reinit	  equ 0032h ; DOSBIOCODESEG:0032h
 15666                                  
 15667                                  ;SysinitPresent	  equ 08FCh
 15668                                  ; 21/10/2022
 15669                                  SysinitPresent	  equ 08FDh
 15670                                  
 15671                                  inHMA		  equ 000Dh
 15672                                  xms		  equ 000Eh
 15673                                  ;FreeHMAPtr	  equ 08F6h
 15674                                  ;multrk_flag	  equ 0533h
 15675                                  ;ec35_flag	  equ 0535h
 15676                                  ;EOT		  equ 012Eh
 15677                                  ; 21/10/2022
 15678                                  FreeHMAPtr	  equ 08F7h
 15679                                  multrk_flag	  equ 052Fh
 15680                                  ec35_flag	  equ 0531h
 15681                                  EOT		  equ 012Ch
 15682                                  
 15683                                  ;NextStack	  equ 08BFh
 15684                                  ;IT_StackLoc	  equ 08C5h
 15685                                  ;IT_StackSize	  equ 08C9h
 15686                                  ; 21/10/2022
 15687                                  NextStack	  equ 08C0h
 15688                                  IT_StackLoc	  equ 08C6h
 15689                                  IT_StackSize	  equ 08CAh
 15690                                  
 15691                                  ;MoveDOSIntoHMA	  equ 08F8h
 15692                                  ; 21/10/2022
 15693                                  MoveDOSIntoHMA	  equ 08F9h
 15694                                  
 15695                                  ;INT19SEM equ 0644h ; 01/05/2019 - retrodos4.lst
 15696                                  ;I19_LST  equ 0645h ; 27/03/2019 - retrodos4.lst
 15697                                  ; 21/10/2022
 15698                                  INT19SEM equ 0640h ; (iosys5.txt)
 15699                                  I19_LST  equ 0641h ; (iosys5.txt)
 15700                                  
 15701                                  %endif
 15702                                  
 15703                                  ; 09/12/2022
 15704                                  seg_reinit equ _seg_reinit
 15705                                  ec35_flag  equ ec35flag		
 15706                                  INT19SEM   equ int19sem
 15707                                  I19_LST    equ i19_lst
 15708                                  
 15709                                  INT19OLD02 equ I19_LST+1 ; 0642h ; 21/10/2022
 15710                                  INT19OLD08 equ I19_LST+6
 15711                                  INT19OLD09 equ I19_LST+11
 15712                                  INT19OLD0A equ I19_LST+16
 15713                                  INT19OLD0B equ I19_LST+21
 15714                                  INT19OLD0C equ I19_LST+26
 15715                                  INT19OLD0D equ I19_LST+31
 15716                                  INT19OLD0E equ I19_LST+36
 15717                                  INT19OLD70 equ I19_LST+41
 15718                                  INT19OLD72 equ I19_LST+46
 15719                                  INT19OLD73 equ I19_LST+51
 15720                                  INT19OLD74 equ I19_LST+56
 15721                                  INT19OLD76 equ I19_LST+61
 15722                                  INT19OLD77 equ I19_LST+66 ; 0683h ; 21/10/2022
 15723                                  
 15724                                  ; 09/12/2022
 15725                                  %if 0
 15726                                  
 15727                                  ;keyrd_func	equ 04E9h
 15728                                  ;keysts_func	equ 04EAh
 15729                                  ;t_switch	equ 04F6h
 15730                                  ; 21/10/2022
 15731                                  keyrd_func	equ 04E5h
 15732                                  keysts_func	equ 04E6h
 15733                                  t_switch	equ 04F2h
 15734                                  
 15735                                  ; 22/10/2022
 15736                                  SYSINITSEG	equ 046Dh  ; SYSINIT segment
 15737                                  BCODE_END	equ (SYSINITSEG-DOSBIOCODESEG)*16 ; = 1A60h
 15738                                  BCODE_START	equ 30h  ; (offset BiosDataWord in DOSBIOCODESEG) 
 15739                                  RE_INIT		equ 089Bh ; (re_init offset in DOSBIODATASEG)
 15740                                  
 15741                                  %endif
 15742                                  
 15743                                  ; 09/12/2022
 15744                                  BCODESTART	equ BIOSDATAWORD
 15745                                  RE_INIT		equ re_init
 15746                                  
 15747                                  ; ----------------------------------------------------------------------
 15748                                  ; CONFIG.INC (MSDOS 6.0 - 1991) 	
 15749                                  ; ----------------------------------------------------------------------
 15750                                  ; 15/04/2019 - Retro DOS v4.0
 15751                                  
 15752                                  CONFIG_BEGIN        equ  '['
 15753                                  CONFIG_BREAK        equ  'C'
 15754                                  CONFIG_BUFFERS      equ  'B'
 15755                                  CONFIG_COMMENT      equ  'Y'
 15756                                  CONFIG_COUNTRY      equ  'Q'
 15757                                  CONFIG_DEVICE       equ  'D'
 15758                                  CONFIG_DEVICEHIGH   equ  'U'
 15759                                  CONFIG_DOS          equ  'H'
 15760                                  CONFIG_DRIVPARM     equ  'P'
 15761                                  CONFIG_FCBS         equ  'X'
 15762                                  CONFIG_FILES        equ  'F'
 15763                                  CONFIG_INCLUDE      equ  'J'
 15764                                  CONFIG_INSTALL      equ  'I'
 15765                                  CONFIG_INSTALLHIGH  equ  'W'
 15766                                  CONFIG_LASTDRIVE    equ  'L'
 15767                                  CONFIG_MENUCOLOR    equ  'R'
 15768                                  CONFIG_MENUDEFAULT  equ  'A'
 15769                                  CONFIG_MENUITEM     equ  'E'
 15770                                  CONFIG_MULTITRACK   equ  'M'
 15771                                  CONFIG_NUMLOCK      equ  'N'
 15772                                  CONFIG_REM          equ  '0'
 15773                                  CONFIG_SEMICOLON    equ  ';'
 15774                                  CONFIG_SET          equ  'V'
 15775                                  CONFIG_SHELL        equ  'S'
 15776                                  CONFIG_STACKS       equ  'K'
 15777                                  CONFIG_SUBMENU      equ  'O'
 15778                                  CONFIG_SWITCHES     equ  '1'
 15779                                  
 15780                                  CONFIG_UNKNOWN      equ  'Z'
 15781                                  
 15782                                  CONFIG_OPTION_QUERY equ 80h
 15783                                  
 15784                                  ; ----------------------------------------------------------------------
 15785                                  ; SYSINIT1.ASM (MSDOS 6.0 - 1991) 	
 15786                                  ; ----------------------------------------------------------------------
 15787                                  ; 21/03/2019 - Retro DOS v4.0
 15788                                  
 15789                                  true	equ	0FFFFh
 15790                                  false	equ	0
 15791                                  cr	equ	13
 15792                                  lf	equ	10
 15793                                  tab	equ	9
 15794                                  
 15795                                  multMULT	   equ	4Ah
 15796                                  multMULTGETHMAPTR  equ	1
 15797                                  multMULTALLOCHMA   equ	2
 15798                                  
 15799                                  ;NOEXEC    equ	FALSE
 15800                                  
 15801                                  stacksw    equ	true	;include switchable hardware stacks
 15802                                  mycds_size equ	88	;size of curdir_list. if it is not
 15803                                  			;the same, then will generate compile error.
 15804                                  
 15805                                  entrysize   equ     8
 15806                                  
 15807                                  mincount    equ     8
 15808                                  defaultcount equ    9
 15809                                  maxcount    equ     64
 15810                                  
 15811                                  minsize     equ     32
 15812                                  defaultsize equ     128
 15813                                  maxsize     equ     512
 15814                                  
 15815                                  ;%define allocbyte  byte [es:bp+0]
 15816                                  ;%define intlevel   byte [es:bp+1]
 15817                                  ;%define savedsp    word [es:bp+2]
 15818                                  ;%define savedss    word [es:bp+4]
 15819                                  ;%define newsp	    word [es:bp+6]
 15820                                  
 15821                                  allocbyte   equ     0
 15822                                  intlevel    equ     1
 15823                                  savedsp     equ     2
 15824                                  savedss     equ     4
 15825                                  newsp       equ     6
 15826                                  
 15827                                  free	    equ     0
 15828                                  allocated   equ     1
 15829                                  overflowed  equ     2
 15830                                  clobbered   equ     3
 15831                                  
 15832                                  ;---------------------------------------
 15833                                  ; external variable defined in ibmbio module for multi-track
 15834                                  
 15835                                  multrk_on equ	10000000b ;user specified mutitrack=on,or system turns
 15836                                  			  ; it on after handling config.sys file as a
 15837                                  			  ; default value,if multrk_flag = multrk_off1.
 15838                                  multrk_off1 equ 00000000b ;initial value. no "multitrack=" command entered.
 15839                                  multrk_off2 equ 00000001b ;user specified multitrack=off.
 15840                                  
 15841                                  ; SYSINITSEG	SEGMENT PUBLIC 'SYSTEM_INIT'
 15842                                  
 15843                                  SYSINIT$:
 15844                                  	;IF	STACKSW 
 15845                                  	; include MSSTACK.INC	;Main stack program and data definitions
 15846                                  	; include STKMES.INC	;Fatal stack error message
 15847                                  	;   public Endstackcode
 15848                                  ;Endstackcode	label byte
 15849                                  	;ENDIF
 15850                                  
 15851                                  ; 05/07/2018
 15852                                  ; ----------------------------------------------------------------------
 15853                                  ; 04/06/2018 - Retro DOS v3.0
 15854                                  
 15855                                  ; ----------------------------------------------------------------------
 15856                                  ; 21/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS - SYSINIT)
 15857                                  ; ----------------------------------------------------------------------
 15858                                  
 15859                                  ;	MSStack.inc
 15860                                  ;
 15861                                  ;	Interrupt level 2, 3, 4, 5, 6, 7,(10, 11, 12, 14, 15 - AT level)
 15862                                  ;	should follow the standard Interrupt Sharing Scheme which has
 15863                                  ;	a standard header structure.
 15864                                  ;	Fyi, the following shows the relations between
 15865                                  ;	the interrupt vector and interrupt level.
 15866                                  ; VEC(Hex)    2  8  9  A  B  C	D  E  70  72  73  74  76  77
 15867                                  ; LVL(Deci)   9  0  1  2  3  4	5  6   8  10  11  12  14  15
 15868                                  ;	MSSTACK module modifies the following interrupt vectors
 15869                                  ;	to meet the standard Interrupt Sharing standard;
 15870                                  ;	  A, B, C, D, E, 72, 73, 74, 76, 77.
 15871                                  ;	Also, for interrupt level 7 and 15, the FirstFlag in a standard header
 15872                                  ;	should be initialized to indicat whether this interrupt handler is
 15873                                  ;	the first (= 80h) or not.  The FirstFlag entry of INT77h's
 15874                                  ;	program header is initialized in STKINIT.INC module.
 15875                                  ;	FirstFlag is only meaningful for interrupt level 7 and 15.
 15876                                  ;
 15877                                  
 15878                                  ;  User specifies the number of stack elements - default = 9
 15879                                  ;						 minimum = 8
 15880                                  ;						 maximum = 64
 15881                                  ;
 15882                                  ;  Intercepts Asynchronous Hardware Interrupts only
 15883                                  ;
 15884                                  ;  Picks a stack from pool of stacks and switches to it
 15885                                  ;
 15886                                  ;  Calls the previously saved interrupt vector after pushing flags
 15887                                  ;
 15888                                  ;  On return, returns the stack to the stack pool
 15889                                  ;
 15890                                  
 15891                                  ; This is a modification of STACKS:
 15892                                  ; 1. To fix a bug which was causing the program to take up too much space.
 15893                                  ; 2. To dispense stack space from hi-mem first rather than low-mem first.
 15894                                  ;    . Clobbers the stack that got too big instead of innocent stack
 15895                                  ;    . Allows system to work if the only stack that got too big was the most
 15896                                  ;      deeply nested one
 15897                                  ; 3. Disables NMI interrupts while setting the NMI vector.
 15898                                  ; 4. Does not intercept any interupts on a PCjr.
 15899                                  ; 5. Double checks that a nested interrupt didn't get the same stack.
 15900                                  ; 6. Intercepts Ints 70, 72-77 for PC-ATs and other future products
 15901                                  
 15902                                  		;EVEN
 15903                                  ;align 2
 15904                                  		; 21/10/2022
 15905                                  
 15906 00000000 0000                    		dw	0	; spare field but leave these in order
 15907 00000002 0000                    stackcount:	dw	0
 15908 00000004 0000                    stackat: 	dw	0
 15909 00000006 0000                    stacksize:	dw	0
 15910 00000008 0000                    stacks:		dw	0
 15911 0000000A 0000                    		dw	0
 15912                                  
 15913 0000000C [0800]                  firstentry:	dw	stacks
 15914 0000000E [4800]                  lastentry:	dw	stacks+(defaultcount*entrysize)-entrysize
 15915 00000010 [4800]                  nextentry:	dw	stacks+(defaultcount*entrysize)-entrysize
 15916                                  
 15917                                  ;***********************************************************************
 15918                                  ; THESE ARE THE INDIVIDUAL INTERRUPT HANDLERS
 15919                                  
 15920                                  ; ----------------------------------------------------------------------
 15921                                  
 15922 00000012 00000000                old02:	dd	0
 15923                                  
 15924                                  int02:
 15925                                  
 15926                                  ; *********************************************************************
 15927                                  ;
 15928                                  ; this is special support for the pc convertible / nmi handler
 15929                                  ;
 15930                                  ;	on the pc convertible, there is a situation where an nmi can be 
 15931                                  ;	caused by using the "out" instructions to certain ports. when this
 15932                                  ;	occurs, the pc convertible hardware *guarantees* that **nothing** 
 15933                                  ;	can stop the nmi or interfere with getting to the nmi handler. this
 15934                                  ;	includes other type of interrupts (hardware and software), and
 15935                                  ;	also includes other type of nmi's. when any nmi has occured,
 15936                                  ;	no other interrtupt (hardware, software or nmi) can occur until
 15937                                  ;	the software takes specific steps to allow further interrupting.
 15938                                  ;
 15939                                  ;	for pc convertible, the situation where the nmi is generated by the
 15940                                  ;	"out" to a control port requires "fixing-up" and re-attempting. in
 15941                                  ;	otherwords, it is actually a "restartable exception". in this
 15942                                  ;	case, the software handler must be able to get to the stack in
 15943                                  ;	order to figure out what instruction caused the problem, where
 15944                                  ;	it was "out"ing to and what value it was "out"ing.  therefore,
 15945                                  ;	we will not switch stacks in this situation. this situation is
 15946                                  ;	detected by interrogating port 62h, and checking for a bit value
 15947                                  ;	of 80h. if set, *****do not switch stacks*****.
 15948                                  ;
 15949                                  ; *********************************************************************
 15950                                  
 15951 00000016 50                      	push	ax
 15952 00000017 06                      	push	es
 15953 00000018 B800F0                  	mov	ax,0F000h
 15954 0000001B 8EC0                    	mov	es,ax
 15955                                  	; 02/11/2022
 15956 0000001D 26803EFEFFF9            	cmp	byte [es:0FFFEh],0F9h ; mdl_convert ; check if convertible
 15957 00000023 07                      	pop	es
 15958 00000024 750C                    	jne	short normal02
 15959                                  
 15960 00000026 E462                    	in	al,62h		; PC/XT PPI port C. Bits:
 15961                                  				; 0-3: values of DIP switches
 15962                                  				; 5: 1=Timer 2 channel out
 15963                                  				; 6: 1=I/O channel check
 15964                                  				; 7: 1=RAM parity check error occurred.
 15965 00000028 A880                    	test	al,80h
 15966 0000002A 7406                    	jz	short normal02
 15967                                  special02:
 15968 0000002C 58                      	pop	ax
 15969 0000002D 2EFF2E[1200]            	jmp	far [cs:old02]
 15970                                  normal02:
 15971 00000032 58                      	pop	ax
 15972 00000033 E81101                  	call	do_int_stacks
 15973 00000036 [1200]                  	dw	old02
 15974                                  
 15975                                  ; ----------------------------------------------------------------------
 15976                                  
 15977 00000038 00000000                old08:	dd	0
 15978                                  
 15979                                  int08:
 15980 0000003C E80801                  	call	do_int_stacks
 15981 0000003F [3800]                  	dw	old08
 15982                                  
 15983                                  ; ----------------------------------------------------------------------
 15984                                  
 15985 00000041 00000000                old09:	dd	0
 15986                                  
 15987                                  int09:
 15988                                  
 15989                                  ; keyboard interrupt must have a three byte jump, a nop and a zero byte
 15990                                  ; as its first instruction for compatibility reasons
 15991                                  
 15992 00000045 EB02                    	jmp	short keyboard_lbl
 15993 00000047 90                      	nop
 15994 00000048 00                      	db	0
 15995                                  
 15996                                  keyboard_lbl:
 15997 00000049 E8FB00                  	call	do_int_stacks
 15998 0000004C [4100]                  	dw	old09
 15999                                  
 16000                                  ; ----------------------------------------------------------------------
 16001                                  
 16002 0000004E 00000000                old70:	dd	0
 16003                                  
 16004                                  int70:
 16005 00000052 E8F200                  	call	do_int_stacks
 16006 00000055 [4E00]                  	dw	old70
 16007                                  
 16008                                  ; ----------------------------------------------------------------------
 16009                                  
 16010                                  ;	irp	a,<0a,0b,0c,0d,0e,72,73,74,76,77>
 16011                                  ;public	int&a
 16012                                  ;public	old&a
 16013                                  ;public	firstflag&a
 16014                                  ;int&a	proc	far
 16015                                  ;	jmp	short entry_int&a&_stk
 16016                                  ;old&a	dd	  0		;forward pointer
 16017                                  ;	dw	  424bh 	;compatible signature for int. sharing
 16018                                  ;firstflag&a db   0		;the firstly hooked.
 16019                                  ;	jmp	short intret_&a	;reset routine. we don't care this.
 16020                                  ;	db	7 dup (0)	;reserved for future.
 16021                                  ;entry_int&a&_stk:
 16022                                  ;	call	do_int_stacks
 16023                                  ;	dw	old&a
 16024                                  ;intret_&a:
 16025                                  ;	iret
 16026                                  ;int&a	endp
 16027                                  ;	endm
 16028                                  
 16029                                  ; ----------------------------------------------------------------------
 16030                                  
 16031                                  int0A:
 16032 00000057 EB10                    	jmp	short entry_int0A_stk
 16033 00000059 00000000                old0A:	dd	0	
 16034 0000005D 4B42                    	dw	424Bh
 16035                                  firstflag0A:
 16036 0000005F 00                      	db	0
 16037 00000060 EB0C                    	jmp	short intret_0A
 16038 00000062 00<rep 7h>              	times	7 db 0
 16039                                  
 16040                                  entry_int0A_stk:
 16041 00000069 E8DB00                  	call	do_int_stacks
 16042 0000006C [5900]                  	dw	old0A
 16043                                  intret_0A:
 16044 0000006E CF                      	iret
 16045                                  
 16046                                  ; ----------------------------------------------------------------------
 16047                                  
 16048                                  int0B:
 16049 0000006F EB10                    	jmp	short entry_int0B_stk
 16050 00000071 00000000                old0B:	dd	0	
 16051 00000075 4B42                    	dw	424Bh
 16052                                  firstflag0B:
 16053 00000077 00                      	db	0
 16054 00000078 EB0C                    	jmp	short intret_0B
 16055 0000007A 00<rep 7h>              	times	7 db 0
 16056                                  
 16057                                  entry_int0B_stk:
 16058 00000081 E8C300                  	call	do_int_stacks
 16059 00000084 [7100]                  	dw	old0B
 16060                                  intret_0B:
 16061 00000086 CF                      	iret
 16062                                  
 16063                                  ; ----------------------------------------------------------------------
 16064                                  
 16065                                  int0C:
 16066 00000087 EB10                    	jmp	short entry_int0C_stk
 16067 00000089 00000000                old0C:	dd	0	
 16068 0000008D 4B42                    	dw	424Bh
 16069                                  firstflag0C:
 16070 0000008F 00                      	db	0
 16071 00000090 EB0C                    	jmp	short intret_0C
 16072 00000092 00<rep 7h>              	times	7 db 0
 16073                                  
 16074                                  entry_int0C_stk:
 16075 00000099 E8AB00                  	call	do_int_stacks
 16076 0000009C [8900]                  	dw	old0C
 16077                                  intret_0C:
 16078 0000009E CF                      	iret
 16079                                  
 16080                                  ; ----------------------------------------------------------------------
 16081                                  
 16082                                  int0D:
 16083 0000009F EB10                    	jmp	short entry_int0D_stk
 16084 000000A1 00000000                old0D:	dd	0	
 16085 000000A5 4B42                    	dw	424Bh
 16086                                  firstflag0D:
 16087 000000A7 00                      	db	0
 16088 000000A8 EB0C                    	jmp	short intret_0D
 16089 000000AA 00<rep 7h>              	times	7 db 0
 16090                                  
 16091                                  entry_int0D_stk:
 16092 000000B1 E89300                  	call	do_int_stacks
 16093 000000B4 [A100]                  	dw	old0D
 16094                                  intret_0D:
 16095 000000B6 CF                      	iret
 16096                                  
 16097                                  ; ----------------------------------------------------------------------
 16098                                  
 16099                                  int0E:
 16100 000000B7 EB10                    	jmp	short entry_int0E_stk
 16101 000000B9 00000000                old0E:	dd	0	
 16102 000000BD 4B42                    	dw	424Bh
 16103                                  firstflag0E:
 16104 000000BF 00                      	db	0
 16105 000000C0 EB0C                    	jmp	short intret_0E
 16106 000000C2 00<rep 7h>              	times	7 db 0
 16107                                  
 16108                                  entry_int0E_stk:
 16109 000000C9 E87B00                  	call	do_int_stacks
 16110 000000CC [B900]                  	dw	old0E
 16111                                  intret_0E:
 16112 000000CE CF                      	iret
 16113                                  
 16114                                  ; ----------------------------------------------------------------------
 16115                                  
 16116                                  int72:
 16117 000000CF EB10                    	jmp	short entry_int72_stk
 16118 000000D1 00000000                old72:	dd	0	
 16119 000000D5 4B42                    	dw	424Bh
 16120                                  firstflag72:
 16121 000000D7 00                      	db	0
 16122 000000D8 EB0C                    	jmp	short intret_72
 16123 000000DA 00<rep 7h>              	times	7 db 0
 16124                                  
 16125                                  entry_int72_stk:
 16126 000000E1 E86300                  	call	do_int_stacks
 16127 000000E4 [D100]                  	dw	old72
 16128                                  intret_72:
 16129 000000E6 CF                      	iret
 16130                                  
 16131                                  ; ----------------------------------------------------------------------
 16132                                  
 16133                                  int73:
 16134 000000E7 EB10                    	jmp	short entry_int73_stk
 16135 000000E9 00000000                old73:	dd	0	
 16136 000000ED 4B42                    	dw	424Bh
 16137                                  firstflag73:
 16138 000000EF 00                      	db	0
 16139 000000F0 EB0C                    	jmp	short intret_73
 16140 000000F2 00<rep 7h>              	times	7 db 0
 16141                                  
 16142                                  entry_int73_stk:
 16143 000000F9 E84B00                  	call	do_int_stacks
 16144 000000FC [E900]                  	dw	old73
 16145                                  intret_73:
 16146 000000FE CF                      	iret
 16147                                  
 16148                                  ; ----------------------------------------------------------------------
 16149                                  
 16150                                  int74:
 16151 000000FF EB10                    	jmp	short entry_int74_stk
 16152 00000101 00000000                old74:	dd	0	
 16153 00000105 4B42                    	dw	424Bh
 16154                                  firstflag74:
 16155 00000107 00                      	db	0
 16156 00000108 EB0C                    	jmp	short intret_74
 16157 0000010A 00<rep 7h>              	times	7 db 0
 16158                                  
 16159                                  entry_int74_stk:
 16160 00000111 E83300                  	call	do_int_stacks
 16161 00000114 [0101]                  	dw	old74
 16162                                  intret_74:
 16163 00000116 CF                      	iret
 16164                                  
 16165                                  ; ----------------------------------------------------------------------
 16166                                  
 16167                                  int76:
 16168 00000117 EB10                    	jmp	short entry_int76_stk
 16169 00000119 00000000                old76:	dd	0	
 16170 0000011D 4B42                    	dw	424Bh
 16171                                  firstflag76:
 16172 0000011F 00                      	db	0
 16173 00000120 EB0C                    	jmp	short intret_76
 16174 00000122 00<rep 7h>              	times	7 db 0
 16175                                  
 16176                                  entry_int76_stk:
 16177 00000129 E81B00                  	call	do_int_stacks
 16178 0000012C [1901]                  	dw	old76
 16179                                  intret_76:
 16180 0000012E CF                      	iret
 16181                                  
 16182                                  ; ----------------------------------------------------------------------
 16183                                  
 16184                                  int77:
 16185 0000012F EB10                    	jmp	short entry_int77_stk
 16186 00000131 00000000                old77:	dd	0	
 16187 00000135 4B42                    	dw	424Bh
 16188                                  firstflag77:
 16189 00000137 00                      	db	0
 16190 00000138 EB0C                    	jmp	short intret_77
 16191 0000013A 00<rep 7h>              	times	7 db 0
 16192                                  
 16193                                  entry_int77_stk:
 16194 00000141 E80300                  	call	do_int_stacks
 16195 00000144 [3101]                  	dw	old77
 16196                                  intret_77:
 16197 00000146 CF                      	iret
 16198                                  
 16199                                  ; ----------------------------------------------------------------------
 16200                                  
 16201                                  ;********************************************************************
 16202                                  ;common routines
 16203                                  ;********************************************************************
 16204                                  
 16205                                  ; do interrupt stack switching. the fake return address holds
 16206                                  ; a pointer to the far-pointer of the actual interrupt
 16207                                  ; service routine
 16208                                  
 16209                                  ; 21/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 SYSINIT)
 16210                                  ; 21/03/2019 - Retro DOS v4.0
 16211                                  
 16212                                  ;allocbyte   equ 0
 16213                                  ;intlevel    equ 1
 16214                                  ;savedsp     equ 2
 16215                                  ;savedss     equ 4
 16216                                  ;newsp       equ 6
 16217                                  
 16218                                  do_int_stacks:
 16219 00000147 50                      	push	ax
 16220 00000148 55                      	push	bp
 16221 00000149 06                      	push	es
 16222 0000014A 2E8E06[0A00]            	mov	es,[cs:stacks+2]	; Get segment of stacks
 16223 0000014F 2E8B2E[1000]            	mov	bp,[cs:nextentry]	; get most likely candidate
 16224 00000154 B001                    	mov	al,allocated ; 1
 16225                                  	; 21/10/2022
 16226                                  	;xchg	[es:bp+allocbyte],al 
 16227                                  	; 11/12/2022
 16228 00000156 26864600                	xchg	[es:bp],al		; grab the entry
 16229 0000015A 3C00                    	cmp	al,free ; 0		; still avail?
 16230 0000015C 754F                    	jne	short notfree02
 16231                                  
 16232 0000015E 2E832E[1000]08          	sub	word [cs:nextentry],entrysize ; set for next interrupt
 16233                                  
 16234                                  found02:
 16235 00000164 26896602                	mov	[es:bp+savedsp],sp	; save sp value
 16236 00000168 268C5604                	mov	[es:bp+savedss],ss	; save ss also
 16237                                  
 16238 0000016C 89E8                    	mov	ax,bp			; temp save of table offset
 16239                                  
 16240 0000016E 268B6E06                	mov	bp,[es:bp+newsp]	; get new SP value
 16241                                  	; 21/10/2022
 16242                                  	;mov	bp,[es:bp+6]
 16243                                  	; 11/12/2022
 16244                                  	;cmp	[es:bp+0],ax	
 16245 00000172 26394600                	cmp	[es:bp],ax		; check for offset into table
 16246 00000176 7542                    	jne	short foundbad02
 16247                                  
 16248                                  	;mov	ax,es			; point ss,sp to the new stack
 16249                                  	;mov	es,bp
 16250                                  	;mov	bp,sp
 16251                                  	;mov	bp,[bp+6]
 16252                                  	;mov	ss,ax
 16253                                  	;mov	sp,es
 16254                                  	;mov	es,ax
 16255                                  	;mov	bp,[cs:bp]
 16256                                  
 16257                                  	; 21/10/2022 (MSDOS 5.0 code SYSINIT code)
 16258 00000178 55                      	push    bp
 16259 00000179 89E5                    	mov     bp,sp
 16260 0000017B 8B4608                  	mov     ax,[bp+8]
 16261 0000017E 5D                      	pop     bp
 16262 0000017F 06                      	push    es
 16263 00000180 17                      	pop     ss
 16264 00000181 89EC                    	mov     sp,bp
 16265 00000183 89C5                    	mov     bp,ax
 16266                                  	; 11/12/2022
 16267                                  	;mov	bp,[cs:bp+0]	
 16268 00000185 2E8B6E00                	mov	bp,[cs:bp]	
 16269                                  
 16270 00000189 9C                      	pushf				; go execute the real interrupt handler
 16271                                  	; 11/12/2022
 16272 0000018A 2EFF5E00                	call	far [cs:bp]		;  which will iret back to here
 16273                                  	; 21/10/2022
 16274                                  	;call	far [cs:bp+0]
 16275                                  
 16276 0000018E 89E5                    	mov	bp,sp			; retrieve the table offset for us
 16277                                  	; 11/12/2022
 16278 00000190 268B6E00                	mov	bp,[es:bp]		;  but leave it on the stack
 16279                                  	; 21/10/2022
 16280                                  	;mov	bp,[es:bp+0]
 16281 00000194 268E5604                	mov	ss,[es:bp+savedss]	; get old stack back
 16282 00000198 268B6602                	mov	sp,[es:bp+savedsp]
 16283                                  
 16284                                  	; 11/12/2022
 16285                                  	;mov	byte [es:bp+allocbyte],free ; free the entry
 16286                                  	; 21/10/2022
 16287 0000019C 26C6460000              	mov	byte [es:bp],free ; 0
 16288 000001A1 2E892E[1000]            	mov	[cs:nextentry],bp	; setup to use next time
 16289                                  
 16290 000001A6 07                      	pop	es
 16291 000001A7 5D                      	pop	bp			; saved on entry
 16292 000001A8 58                      	pop	ax			; saved on entry
 16293 000001A9 83C402                  	add	sp,2
 16294 000001AC CF                      	iret				; done with this interrupt
 16295                                  
 16296                                  notfree02:
 16297 000001AD 3C01                    	cmp	al,allocated		; error flag
 16298 000001AF 7404                    	je	short findnext02	;  no, continue
 16299                                  	; 11/12/2022
 16300                                  	;xchg	[es:bp+allocbyte],al	;  yes, restore error value
 16301                                  	; 21/10/2022
 16302 000001B1 26864600                	xchg	[es:bp],al
 16303                                  
 16304                                  findnext02:
 16305 000001B5 E81200                  	call	longpath
 16306 000001B8 EBAA                    	jmp	short found02
 16307                                  
 16308                                  foundbad02:
 16309 000001BA 2E3B2E[0C00]            	cmp	bp,[cs:firstentry]
 16310 000001BF 72F4                    	jc	short findnext02
 16311 000001C1 89C5                    	mov	bp,ax			; flag this entry
 16312                                  	; 11/12/2022
 16313                                  	;mov	byte [es:bp+allocbyte],clobbered
 16314                                  	; 21/10/2022
 16315 000001C3 26C6460003              	mov	byte [es:bp],clobbered ; 3
 16316 000001C8 EBEB                    	jmp	short findnext02	; keep looking
 16317                                  
 16318                                  ; ----------------------------------------------------------------------
 16319                                  
 16320                                  ; Common routines
 16321                                  
 16322                                  longpath:
 16323                                  	; 21/03/2019
 16324 000001CA 2E8B2E[0E00]            	mov	bp,[cs:lastentry]	; start with last entry in table
 16325                                  lploopp:
 16326                                  	; 11/12/2022
 16327                                  	;cmp	byte [es:bp+allocbyte],free ; is entry free?
 16328                                  	; 21/10/2022
 16329 000001CF 26807E0000              	cmp	byte [es:bp],free
 16330 000001D4 7512                    	jne	short inuse		;  no, try next one
 16331                                  
 16332 000001D6 B001                    	mov	al,allocated
 16333                                  	; 11/12/2022
 16334                                  	;xchg	[es:bp+allocbyte],al	; allocate entry
 16335                                  	; 21/10/2022
 16336 000001D8 26864600                	xchg	[es:bp],al
 16337 000001DC 3C00                    	cmp	al,free 		; is it still free?
 16338 000001DE 7414                    	je	short found		;  yes, go use it
 16339                                  
 16340 000001E0 3C01                    	cmp	al,allocated		; is it other than Allocated or Free?
 16341 000001E2 7404                    	je	short inuse		;  no, check the next one
 16342                                  
 16343                                  	; 11/12/2022
 16344                                  	;mov	[es:bp+allocbyte],al	;  yes, put back the error state
 16345                                  	; 21/10/2022
 16346 000001E4 26884600                	mov	[es:bp],al
 16347                                  inuse:
 16348 000001E8 2E3B2E[0C00]            	cmp	bp,[cs:firstentry]
 16349 000001ED 7406                    	je	short fatal
 16350 000001EF 83ED08                  	sub	bp,entrysize
 16351 000001F2 EBDB                    	jmp	short lploopp
 16352                                  found:
 16353 000001F4 C3                      	retn
 16354                                  fatal:
 16355 000001F5 1E                      	push	ds
 16356 000001F6 B800F0                  	mov	ax,0F000h		;look at the model byte
 16357 000001F9 8ED8                    	mov	ds,ax
 16358 000001FB 803EFEFFF9              	cmp	byte [0FFFEh],0F9h ; mdl_convert ; convertible?
 16359 00000200 1F                      	pop	ds
 16360 00000201 7504                    	jne	short skip_nmis
 16361                                  
 16362 00000203 B007                    	mov	al,07h			; disable pc convertible nmis
 16363 00000205 E672                    	out	72h,al
 16364                                  
 16365                                  skip_nmis:
 16366 00000207 FA                      	cli				; disable and mask
 16367 00000208 B0FF                    	mov	al,0FFh			;   all other ints
 16368 0000020A E621                    	out	021h,al
 16369 0000020C E6A1                    	out	0A1h,al
 16370                                  
 16371 0000020E 8CCE                    	mov	si,cs
 16372 00000210 8EDE                    	mov	ds,si
 16373 00000212 BE[3902]                	mov	si,fatal_msg
 16374                                  ;SR;
 16375                                  ;   We set all foci to this VM to issue the stack failure message
 16376                                  ;
 16377 00000215 50                      	push	ax
 16378 00000216 1E                      	push	ds
 16379                                  	;;mov	ax,Bios_Data ; 0070h
 16380                                  	;mov	ax,KERNEL_SEGMENT ; 0070h
 16381                                  	; 21/10/2022
 16382 00000217 B87000                  	mov	ax,DOSBIODATASEG
 16383 0000021A 8ED8                    	mov	ds,ax
 16384                                  
 16385                                  	;test	byte [08D0h],1 	; (MSDOS 6.21, IO.SYS - SYSINIT:021Eh)
 16386 0000021C F606[CE08]01            	test	byte [IsWin386],1 ; (retrodos4.sys, offset: ****h)
 16387 00000221 1F                      	pop	ds
 16388 00000222 58                      	pop	ax
 16389 00000223 7405                    	jz	short fatal_loop	; win386 not present, continue
 16390                                  
 16391                                  	;;call	far ptr 0070h:08D1h ; (MSDOS 621, IO.SYS - SYSINIT:0227h)
 16392                                  	;call	KERNEL_SEGMENT:V86_Crit_SetFocus ; set focus to this VM
 16393                                  	; 21/10/2022
 16394 00000225 9A[CF08]7000            	call	DOSBIODATASEG:V86_Crit_SetFocus ; 0070h:08D1h
 16395                                  ;
 16396                                  ;SR; We do not bother about the returned status of this call. 
 16397                                  ;
 16398                                  fatal_loop:
 16399 0000022A AC                      	lodsb
 16400 0000022B 3C24                    	cmp	al,'$'
 16401 0000022D 7408                    	je	short fatal_done
 16402                                  
 16403 0000022F B307                    	mov	bl,7
 16404 00000231 B40E                    	mov	ah,14
 16405 00000233 CD10                    	int	10h			; whoops, this enables ints
 16406 00000235 EBF3                    	jmp	short fatal_loop
 16407                                  
 16408                                  fatal_done:
 16409 00000237 EBFE                    	jmp	short fatal_done
 16410                                  
 16411                                  
 16412                                  ; 21/03/2019 - Retro DOS v4.0 (MSDOS 6.0, SYSINIT1.ASM, 1991)
 16413                                  ; ----------------------------------------------------------------------
 16414                                  ;	include msbio.cl5		; fatal stack error message
 16415                                  
 16416                                  ; MSDOS 6.21, IO.SYS, SYSINIT:023Bh
 16417                                  
 16418                                  ; STKMES.INC - MSDOS 3.3 (24/07/1987)
 16419                                  ; ----------------------------------------------------------------------
 16420                                  ; 04/06/2018 - Retro DOS v3.0
 16421                                  
 16422                                  fatal_msg:
 16423 00000239 0D0A                    	db	0Dh,0Ah
 16424 0000023B 070D0A                  	db	7,0Dh,0Ah
 16425 0000023E 496E7465726E616C20-     	db	"Internal stack overflow",0Dh,0Ah
 16425 00000247 737461636B206F7665-
 16425 00000250 72666C6F770D0A     
 16426 00000257 53797374656D206861-     	db	"System halted",0Dh,0Ah,"$" 
 16426 00000260 6C7465640D0A24     
 16427                                  
 16428                                  endstackcode:
 16429                                  
 16430                                  ; ----------------------------------------------------------------------
 16431                                  ; SYINIT1.ASM (MSDOS 6.0, 1991) 'SYSINIT' jump addr from 'MSINIT.ASM'
 16432                                  ; ----------------------------------------------------------------------
 16433                                  ; 04/06/2018 - Retro DOS v3.0 (MSDOS 3.3, SYSINIT1.ASM, 24/07/1987)
 16434                                  
 16435                                  ; 22/03/2019 - Retro DOS v4.0
 16436                                  
 16437                                  ; SYSINIT:0269h (MSDOS 6.21 IO.SYS, SYSINIT segment, offset: 0269h)
 16438                                  
 16439                                  ; ('SYSINIT:' location/address is used in 'retrodos4.s'. If following
 16440                                  ; address will be changed, it must also be changed in 'retrodos4.s'.)
 16441                                  
 16442                                  ; 21/10/2022- Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 16443                                  ; ----------------------------------------------------------------------
 16444                                  ; SYSINITSEG:0267h (MSDOS 5.0 IO.SYS, SYSINIT segment, offset: 0267h)
 16445                                  
 16446                                  SYSINIT:	
 16447 00000267 E91C02                          JMP	GOINIT
 16448                                  	;JMP	SYSIN ; 25/02/2018 - Retro DOS 2.0 modification
 16449                                  
 16450                                  ; ----------------------------------------------------------------------
 16451                                  
 16452                                  struc DDHighInfo
 16453 00000000 ????????                 .ddhigh_CSegPtr resd 1	; pointer to code segment to be relocated
 16454 00000004 ????                     .ddhigh_CSegLen resw 1	; length of code segment to be relocated
 16455 00000006 ????????                 .ddhigh_CallBak resd 1	; pointer to the call back routine
 16456                                  endstruc
 16457                                  
 16458                                  ; 22/03/2019 - Retro DOS v4.0
 16459                                  
 16460 0000026A 00                      runhigh: db	0
 16461                                  
 16462                                  ; 02/11/2022
 16463                                  ;align 4
 16464                                  
 16465                                  DOSINFO: 
 16466 0000026B 00000000                	dd	0	; address of the DOS Sysini Variables
 16467                                  ;MSDOS:
 16468                                  dos_temp_location: ; dword ; MSDOS 6.0
 16469                                  dosinit:		; MSDOS 6.0
 16470 0000026F 0000                    	dw	0
 16471                                  
 16472                                  ; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 16473                                  ;FINAL_DOS_LOCATION: ; 20/04/2019 - Retro DOS v4.0
 16474                                  ;	dw	0
 16475                                  ;MSDOS 5.0 IO.SYS - SYSINIT:0271h
 16476                                  
 16477                                  CURRENT_DOS_LOCATION:
 16478 00000271 0000                    	dw	0
 16479                                  
 16480                                  ;DOSSIZE: ; Retro DOS 2.0 feature - 25/02/2018
 16481                                  ;	dw	0   ; 'MSDOS.BIN' kernel size in words
 16482                                  
 16483                                  ; 22/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 16484                                  ; (MSDOS 5.0 MSDOS.SYS size is 37394 bytes)
 16485                                  DOSSIZE	equ	0A000h	; (MSDOS 6.0 - SYSINIT1.ASM - 1991)
 16486                                  
 16487                                  DEVICE_LIST:
 16488 00000273 00000000                	dd	0
 16489                                  
 16490                                  ; 04/06/2018 - Retro DOS v3.0
 16491                                  ; 28/03/2018
 16492                                  ;; MSDOS 3.3 - SYSINIT1.ASM - 24/07/1987
 16493                                  ;
 16494                                  sysi_country:	
 16495 00000277 00000000                	dd	0 ; 5/29/86 Pointer to country table in DOS
 16496                                  
 16497                                  ; MSDOS 6.0
 16498 0000027B 00000000                dos_segreinit:	dw	0,0	; room for dword
 16499                                  
 16500 0000027F 0000                    lo_doscod_size:	dw	0	; dos code size when in low mem
 16501 00000281 0000                    hi_doscod_size:	dw	0	; dos code size when in HMA
 16502                                  
 16503 00000283 0000                    def_php:	dw	0
 16504                                  
 16505                                  ; M022--
 16506                                  ; pointer for calling into Bios_Code for re-initializing segment values.
 16507                                  ;  call with ax = new segment for Bios_Code. Notice that we'll
 16508                                  ;  call it in its temporary home, cuz seg_reinit won't get moved to
 16509                                  ;  the new home.
 16510                                  
 16511                                  ;Bios_Code	equ	KERNEL_SEGMENT  ; 0070h
 16512                                  ; 21/10/2022
 16513                                  ;DOSBIOCODESEG	equ	02C7h ; (MSDOS 5.0 IO.SYS)
 16514                                  
 16515                                  ; 22/10/2022
 16516                                  seg_reinit_ptr:	; label dword
 16517 00000285 [3200]                  		dw	seg_reinit ; Bios_Code:0032h for MSDOS 6.21 IO.SYS
 16518                                  temp_bcode_seg:
 16519                                  		;dw	Bios_Code  ; 02CCh for MSDOS 6.21 IO.SYS
 16520                                  		; 22/10/2022
 16521 00000287 A102                    		dw	DOSBIOCODESEG ; 02C7h for MSDOS 5.0 IO.SYS 		
 16522                                  
 16523                                  fake_floppy_drv:
 16524 00000289 00                      		db	0	; set to 1 if this machine
 16525                                  				; does not have any floppies!!!
 16526                                  
 16527                                  ; Internal Stack Parameters
 16528                                  
 16529 0000028A 0900                    stack_count:	dW	defaultcount ; 9
 16530 0000028C 8000                    stack_size:	dw	defaultsize  ; 128
 16531 0000028E 00000000                stack_addr:	dd	0	
 16532                                  
 16533                                  ; 05/06/2018 - Retro DOS v3.0
 16534                                  
 16535                                  ; various default values
 16536                                  
 16537 00000292 0100                    MEMORY_SIZE:	dw	1
 16538                                  
 16539                                  ; 22/03/2019 - Retro DOS v4.0 (MSDOS 6.0 source, MSDOS 6.21 disassembled src.)
 16540                                  
 16541 00000294 0000                    RPLMemTop:	dw	0  ; 22/10/2022 (MSDOS 5.0 IO.SYS SYSINIT:0294h)	
 16542 00000296 00                      DEFAULT_DRIVE:	db	0	;initialized by ibminit.
 16543 00000297 FFFF                    buffers:	dw	0FFFFh	; initialized during buffer allocation
 16544 00000299 0000                    h_buffers:	dw	0	; # of the heuristic buffers. initially 0.
 16545 0000029B 0000                    singlebuffersize: dw	0	; maximum sector size + buffer head
 16546                                  
 16547 0000029D 08                      FILES:	db	8	; enough files for pipe
 16548 0000029E 04                      FCBS:	db	4	; performance for recycling
 16549 0000029F 00                      KEEP:	db	0	; keep original set
 16550 000002A0 05                      NUM_CDS: db	5	; 5 net drives
 16551                                  ; 22/10/2022 (MSDOS 5.0 SYSINIT)
 16552                                  ;CONFBOT: dw	0
 16553                                  ;ALLOCLIM: dw	0
 16554                                  CONFBOT: ; 02/11/2022
 16555 000002A1 0000                    top_of_cdss: dw 0
 16556                                  ; 02/11/2022 (MSDOS 5.0 SYSINIT)
 16557 000002A3 0000                    ALLOCLIM: dw	0	; (SYSINIT:02A3h)	
 16558                                  
 16559 000002A5 413A5C00                DirStrng: db	"A:\",0	; string for the root directory of a drive
 16560                                  ; 30/10/2022 (MSDOS 5.0 IO.SYS SAYSINIT compatibility)
 16561                                  ; (SYSINIT:02A9h)
 16562                                  command_line:
 16563 000002A9 0200                    	db	2,0
 16564 000002AB 50                      	db	'P'
 16565 000002AC 00                      	db	0
 16566 000002AD 00<rep 7Ch>             	times	124 db 0 ; db 124 dup(0)	
 16567                                  ; (SYSINIT:0329h)
 16568 00000329 00                      ZERO:	db	0
 16569 0000032A 00                      sepchr:	db	0
 16570 0000032B 0000                    linecount: dw	0			; line count in config.sys
 16571 0000032D 20202020200D0A24        showcount: db	'     ',cr,lf,'$'	; used to convert linecount to ascii.
 16572 00000335 0000                    buffer_linenum: dw	0		; line count for "buffers=" command if entered.
 16573                                  
 16574 00000337 FF                      sys_model_byte:	db	0FFh		; model byte used in sysinit
 16575 00000338 00                      sys_scnd_model_byte: db 0		; secondary model byte used in sysinit
 16576                                  
 16577 00000339 0000                    buf_prev_off:	dw	0
 16578                                  
 16579                                          ;IF      NOT NOEXEC
 16580                                  ;COMEXE EXEC0 <0,COMMAND_LINE,DEFAULT_DRIVE,ZERO>
 16581                                          ;ENDIF
 16582                                  
 16583                                  ; 01/05/2018
 16584                                  COMEXE:
 16585 0000033B 0000                    EXEC0.ENVIRON:	dw	0	; seg addr of environment
 16586 0000033D [A902]                  EXEC0.COM_LINE:	dw	command_line ; pointer to asciz command line
 16587 0000033F 0000                    		dw	0 	; SYSINIT segment (0473h for MSDOS 6.21 IO.SYS)
 16588 00000341 [9602]                  EXEC0.5C_FCB:	dw	DEFAULT_DRIVE ; default fcb at 5C
 16589 00000343 0000                    		dw	0	; SYSINIT segment (0473h for MSDOS 6.21 IO.SYS)
 16590 00000345 [2903]                  EXEC0.6C_FCB:	dw	ZERO	; default fcb at 6C
 16591 00000347 0000                    		dw	0
 16592                                  
 16593                                  ; variables for install= command.
 16594                                  
 16595 00000349 00                      multi_pass_id:	db	0		; parameter passed to multi_pass
 16596                                  					;  indicating the pass number
 16597                                  					; 0 - do scan for DOS=HIGH/LOW
 16598                                  					; 1 - load device drivers
 16599                                  					; 2 - was to load IFS
 16600                                  					;      now it is unused
 16601                                  					; 3 - do install=
 16602                                  					; >3 - nop
 16603 0000034A 0000                    install_flag:	dw	0
 16604                                  
 16605                                  have_install_cmd equ	00000001b	; config.sys has install= commands
 16606                                  has_installed	equ	00000010b	; sysinit_base installed.
 16607                                  
 16608 0000034C 0000                    config_size:	dw	0		; size of config.sys file. set by sysconf.asm
 16609 0000034E 00000000                sysinit_base_ptr: dd	0		; pointer to sysinit_base
 16610 00000352 00000000                sysinit_ptr:	dd	0		; returning addr. from sysinit_base
 16611 00000356 0000                    checksum:	dw	0		; used by sum_up
 16612                                  
 16613 00000358 20<rep 14h>             ldexec_fcb:	times 20 db 20h ; db 20 dup (' ') ;big enough
 16614 0000036C 00                      ldexec_line:	db	0		;# of parm characters
 16615 0000036D 20                      ldexec_start:	db	' '
 16616 0000036E 00<rep 50h>             ldexec_parm:	times 80 db 0	; db 80 dup (0)
 16617                                  
 16618                                  ;instexe exec0	<0,ldexec_line,ldexec_fcb,ldexec_fcb>
 16619                                  
 16620                                  instexe:
 16621 000003BE 0000                    iexec.environ:	dw	0		; seg addr of environment
 16622 000003C0 [6C03]                  iexec.ldexec_line: dw	ldexec_line ; pointer to asciz command line
 16623 000003C2 0000                    		dw	0 	; SYSINIT segment (0473h for MSDOS 6.21 IO.SYS)
 16624 000003C4 [5803]                  iexec.ldexec_5c_fcb: dw	ldexec_fcb	; default fcb at 5C
 16625 000003C6 0000                    		dw	0	; SYSINIT segment (0473h for MSDOS 6.21 IO.SYS)
 16626 000003C8 [5803]                  iexec.ldexec_6c_fcb: dw	ldexec_fcb	; default fcb at 6C
 16627 000003CA 0000                    		dw	0
 16628                                  
 16629                                  ; variables for comment=
 16630                                  
 16631 000003CC 00                      com_level:	db	0		; level of " " in command line
 16632 000003CD 00                      cmmt:		db	0		; length of comment string token
 16633 000003CE 00                      cmmt1:		db	0		; token
 16634 000003CF 00                      cmmt2:		db	0		; token
 16635 000003D0 00                      cmd_indicator:	db	0
 16636 000003D1 00                      donotshownum:	db	0
 16637                                  
 16638 000003D2 0000                    count:		dw	0
 16639 000003D4 0000                    org_count:	dw	0
 16640 000003D6 0000                    chrptr:		dw	0
 16641 000003D8 0000                    cntryfilehandle: dw	0
 16642 000003DA 0000                    old_area:	dw	0
 16643 000003DC 0000                    impossible_owner_size: dw 0		; paragraph
 16644                                  
 16645                                  bucketptr: ; label dword
 16646                                  bufptr:	   ; label dword		; leave this stuff in order!
 16647 000003DE 0000                    memlo:	dw	0
 16648                                  prmblk:	   ; label word
 16649 000003E0 0000                    memhi:	dw	0
 16650 000003E2 0000                    ldoff:	dw	0
 16651 000003E4 0000                    area:	dw	0
 16652                                  
 16653                                  ; Following is the request packet used to call INIT routines for 
 16654                                  ; all device drivers. Some fields may be accessed individually in
 16655                                  ; the code, and hence have individual labels, but they should not
 16656                                  ; be separated.
 16657                                  
 16658 000003E6 18                      packet:	db	24			; was 22
 16659 000003E7 00                      	db	0
 16660 000003E8 00                      	db	0			; initialize code
 16661 000003E9 0000                    	dw	0
 16662 000003EB 00<rep 8h>              	times	8 db 0	; db 8 dup (?)
 16663                                  
 16664 000003F3 00                      unitcount:	db	0
 16665 000003F4 00000000                break_addr:	dd	0
 16666 000003F8 00000000                bpb_addr:	dd	0
 16667                                  drivenumber:	; 22/10/2022
 16668 000003FC 00                      devdrivenum:	db	0 
 16669 000003FD 0000                    configmsgflag:	dw	0  ; used to control "error in config.sys line #" message
 16670                                  
 16671                                  ; end of request packet
 16672                                  
 16673                                  ;drivenumber:	db	0  ; 22/03/2019
 16674                                  
 16675                                  toomanydrivesflag:
 16676 000003FF 00                      		db	0  ; >24 fixed disk partitions flag ; M029 
 16677                                  align 2
 16678                                  
 16679                                  BCodeSeg:	; 21/10/2022
 16680 00000400 A102                    	dw	DOSBIOCODESEG ; (02C7h for MSDOS 5.0 IO.SYS)
 16681                                  	;dw	Bios_Code ; = KERNEL_SEGMENT = 0070h (for Retro DOS v4.0)
 16682                                  			   ; BCodeSeg = 2CCh (for MSDOS 6.21 IO.SYS)
 16683                                  
 16684                                  ; 02/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 16685                                  ;; 19/04/2019
 16686                                  ;_timer_lw_:
 16687                                  ;	dw	0  ; MSDOS 6.21 IO.SYS - SYSINIT:038Ch
 16688                                  	
 16689                                  ;SR;
 16690                                  ; This is the communication block between the DOS and the BIOS. It starts at
 16691                                  ;the SysinitPresent flag. Any other data that needs to be communicated 
 16692                                  ;to the DOS should be added after SysinitPresent. The pointer to this block
 16693                                  ;is passed to DOS as part of the DOSINIT call.
 16694                                  ;
 16695                                  
 16696                                  BiosComBlock:
 16697                                  	;dd	Bios_Data:SysinitPresent 
 16698                                  		; 0070h:08FDh for MSDOS 6.21 IO.SYS
 16699 00000402 [FB08]                  	dw	SysinitPresent  ; (retrodos4.sys, offset: ****h)
 16700                                  	;dw	KERNEL_SEGMENT ; 0070h
 16701                                  	; 21/10/2022
 16702 00000404 7000                    	dw	DOSBIODATASEG ; 0070h
 16703                                  
 16704                                  ;align 2
 16705                                  
 16706                                  	; 22/10/2022 - (MSDOS 5.0 IO.SYS, SYSINIT:0406h)
 16707                                  tempstack:	
 16708 00000406 00<rep 80h>             	times	128 db 0  ; db	80h dup (?)
 16709                                  
 16710                                  ; ----------------------------------------------------------------------------
 16711                                  
 16712                                  	; 22/10/2022 - Retro DOS v4.0
 16713                                  	;	; (MSDOS 5.0 IO.SYS, SYSINIT:0486h)
 16714                                  GOINIT:		; (MSDOS 6.21 IO.SYS, SYSINIT:0412h)
 16715                                  	; 12/12/2022
 16716                                  	; 22/03/2019 - Retro DOS v4.0
 16717                                  	; 06/07/2018
 16718                                  	; 04/06/2018 - Retro DOS v3.0
 16719                                  ; before doing anything else, let's set the model byte
 16720 00000486 B4C0                    	mov	ah,0C0h 		; get system configuration
 16721 00000488 CD15                    	int	15h			; *
 16722 0000048A 7217                    	jc	short no_rom_config
 16723                                  
 16724 0000048C 80FC00                  	cmp	ah,0			; double check
 16725 0000048F 7512                    	jne	short no_rom_config
 16726 00000491 268A4702                	mov	al,[es:bx+ROMBIOS_DESC.bios_sd_modelbyte]
 16727 00000495 2EA2[3703]              	mov	[cs:sys_model_byte],al 
 16728 00000499 268A4703                	mov	al,[es:bx+ROMBIOS_DESC.bios_sd_scnd_modelbyte]
 16729 0000049D 2EA2[3803]              	mov	[cs:sys_scnd_model_byte],al
 16730                                  	;jmp	short SYSIN
 16731                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 16732 000004A1 EB2D                    	jmp	short move_myself
 16733                                  
 16734                                  no_rom_config:				; Old ROM
 16735 000004A3 B800F0                  	mov	ax,0F000h
 16736 000004A6 8ED8                    	mov	ds,ax
 16737 000004A8 A0FEFF                  	mov	al,[0FFFEh]
 16738 000004AB 2EA2[3703]              	mov	[cs:sys_model_byte],al	; set the model byte.
 16739                                  
 16740                                  ; set fake_floppy_drv if there is no diskette drives in this machine.
 16741                                  ; execute the equipment determination interrupt and then
 16742                                  ; check the returned value to see if we have any floppy drives
 16743                                  ; if we have no floppy drive we set cs:fake_floppy_drv to 1
 16744                                  ; see the at tech ref bios listings for help on the equipment
 16745                                  ; flag interrupt (11h)	
 16746                                  
 16747                                  	; 22/10/2022
 16748                                  check_for_fake_floppy:			; entry point for rom_config above
 16749 000004AF CD11                    	int	11h			; check equipment flag
 16750                                  
 16751                                  	; 12/12/2022
 16752 000004B1 A801                    	test	al,1		
 16753                                  	;test	ax,1			; have any floppies?
 16754 000004B3 751B                    	jnz	short move_myself	; yes,normal system
 16755                                  
 16756                                  ; Some ROM BIOSs lie that there are no floppy drives. Lets find out
 16757                                  ; whether it is an old ROM BIOS or a new one
 16758                                  ;
 16759                                  ; WARNING !!!
 16760                                  ;
 16761                                  ; This sequence of code is present in MSINIT.ASM also. Any modification
 16762                                  ; here will require an equivalent modification in MSINIT.ASM also
 16763                                  
 16764 000004B5 06                      	push	es
 16765                                  
 16766 000004B6 30C9                    	xor	cl,cl	
 16767 000004B8 B408                    	mov	ah,8			; get disk parameters
 16768 000004BA B200                    	mov	dl,0			; of drive 0
 16769 000004BC CD13                    	int	13h
 16770                                  
 16771 000004BE 07                      	pop	es
 16772                                  
 16773 000004BF 720F                    	jc	short move_myself	; if error lets assume that the
 16774                                  					;  ROM BIOS lied
 16775 000004C1 80F900                  	cmp	cl,0			; double check (max sec no cannot be 0)
 16776 000004C4 740A                    	je	short move_myself
 16777                                  
 16778 000004C6 08D2                    	or	dl,dl			; number of flp drvs == 0?
 16779 000004C8 7506                    	jnz	short move_myself
 16780                                  
 16781 000004CA 2EC606[8902]01          	mov	byte [cs:fake_floppy_drv],1 ; set fake flag.
 16782                                  
 16783                                  move_myself:
 16784 000004D0 FC                      	cld				; set up move
 16785 000004D1 31F6                    	xor	si,si
 16786 000004D3 89F7                    	mov	di,si
 16787                                  
 16788                                  	; 12/12/2022
 16789 000004D5 0E                      	push	cs
 16790 000004D6 1F                      	pop	ds
 16791                                  
 16792                                  	;mov	cx,[cs:MEMORY_SIZE]
 16793 000004D7 8B0E[9202]              	mov	cx,[MEMORY_SIZE] ; 12/12/2022
 16794                                  
 16795                                  	; (MSDOS 6.0 - SYSINIT1.ASM - 1991)
 16796                                  ;;;	if	msver
 16797                                  ;	cmp	cx,1		; 1 means do scan
 16798                                  ;	jnz	short noscan
 16799                                  ;	mov	cx,2048		; start scanning at 32k boundary
 16800                                  ;	xor	bx,bx
 16801                                  ;
 16802                                  ;memscan:inc	cx
 16803                                  ;	jz	setend
 16804                                  ;	mov	ds,cx
 16805                                  ;	mov	al,[bx]
 16806                                  ;	not	al
 16807                                  ;	mov	[bx],al
 16808                                  ;	cmp	al,[bx]
 16809                                  ;	not	al
 16810                                  ;	mov	[bx],al
 16811                                  ;	jz	short memscan
 16812                                  ;setend:
 16813                                  ;	mov	cs:[memory_size],cx
 16814                                  ;;;	endif
 16815                                  
 16816                                  ;noscan: 				; cx is mem size in para
 16817                                  ;;
 16818                                  ;;	cas -- a) if we got our memory size from the ROM, we should test it
 16819                                  ;;		  before we try to run.
 16820                                  ;;	       b) in any case, we should check for sufficient memory and give
 16821                                  ;;		  an appropriate error diagnostic if there isn't enough
 16822                                  ;
 16823                                  ;	push	cs
 16824                                  ;	pop	ds
 16825                                  ;
 16826                                  ;;	cas note:  It would be better to put dos + bios_code BELOW sysinit
 16827                                  ;;	  that way it would be easier to slide them down home in a minimal
 16828                                  ;;	  memory system after sysinit.  As it is, you need room to keep
 16829                                  ;;	  two full non-overlapping copies, since sysinit sits between the
 16830                                  ;;	  temporary home and the final one.  the problem with doing that
 16831                                  ;;	  is that sys*.asm are filled with "mov ax,cs, sub ax,11h" type stuff.
 16832                                  ;
 16833                                  ;	dec	cx			; one para for an arena at end of mem
 16834                                  ;					; in case of UMBs
 16835                                  
 16836                                  	; 22/10/2022
 16837                                  	; (MSDOS 5.0 IO.SYS SYSINIT:04DBh)
 16838                                  
 16839                                  	; 12/12/2022
 16840                                  	;push	cs
 16841                                  	;pop	ds
 16842                                  
 16843 000004DB 49                      	dec	cx
 16844                                  
 16845                                  ;------ Check if an RPL program is present at TOM and do not tromp over it
 16846                                  
 16847 000004DC 31DB                    	xor	bx,bx
 16848 000004DE 8EC3                    	mov	es,bx
 16849 000004E0 268B1EBC00              	mov	bx,[es:(2Fh*4)] ; INT 2Fh address (0:0BCh)
 16850 000004E5 268E06BE00              	mov	es,[es:((2Fh*4)+2)] ; INT 2Fh segment (0:0BEh)
 16851 000004EA 26817F035250            	cmp	word [es:bx+3],'RP'
 16852 000004F0 751B                    	jne	short NoRPL
 16853 000004F2 26807F054C              	cmp	byte [es:bx+5],'L'
 16854 000004F7 7514                    	jne	short NoRPL
 16855                                  
 16856 000004F9 89CA                    	mov	dx,cx			; get TOM into DX
 16857 000004FB 52                      	push	dx
 16858 000004FC B8064A                  	mov	ax,4A06h
 16859                                  	;mov	ax,(multMULT<<8)+multMULTRPLTOM
 16860 000004FF CD2F                    	int	2Fh			; Get new TOM from any RPL
 16861 00000501 58                      	pop	ax
 16862 00000502 89D1                    	mov	cx,dx
 16863 00000504 39C2                    	cmp	dx,ax
 16864 00000506 7405                    	je	short NoRPL
 16865                                  	
 16866                                  	; 11/12/2022
 16867                                  	; ds = cs
 16868 00000508 8916[9402]              	mov	[RPLMemTop],dx
 16869                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 16870                                  	;mov	[cs:RPLMemTop],dx
 16871                                  	
 16872 0000050C 49                      	dec	cx
 16873                                  NoRPL:
 16874 0000050D B8[F038]                	mov	ax,SI_end		; need this much room for sysinit
 16875                                  					; (SI_end == sysinit code size)
 16876 00000510 E8BB06                  	call	off_to_para
 16877 00000513 29C1                    	sub	cx,ax
 16878                                  
 16879                                  ; we need to leave room for the DOS and (if not ROMDOS) for the BIOS
 16880                                  ; code above sysinit in memory
 16881                                  ;
 16882 00000515 81E9000A                	sub	cx,DOSSIZE/16		; leave this much room for DOS
 16883                                  
 16884 00000519 B8001A                  	mov	ax,BCODE_END 		; (1A60h for MSDOS 5.0 IO.SYS)
 16885 0000051C E8AF06                  	call	off_to_para		; leave this much room for BIOS code
 16886 0000051F 29C1                    	sub	cx,ax
 16887 00000521 8EC1                    	mov	es,cx			; offset where sysinit will be located
 16888                                  
 16889 00000523 B9[F038]                	mov	cx,SI_end		; (sysinit code size)
 16890 00000526 D1E9                    	shr	cx,1			; divide by 2 to get words
 16891 00000528 F3A5                    	rep	movsw			; relocate sysinit
 16892                                  
 16893 0000052A 06                      	push	es			; push relocated segment
 16894 0000052B B8[3005]                	mov	ax,SYSIN
 16895 0000052E 50                      	push	ax			; push relocated entry point
 16896                                  
 16897 0000052F CB                      	retf				; far jump to relocated sysinit
 16898                                  
 16899                                  ; ----------------------------------------------------------------------------
 16900                                  
 16901                                  ;	MOVE THE DOS TO ITS PROPER LOCATION
 16902                                  
 16903                                  	; 22/10/2022 - Retro DOS 4.0 (Modified MSDOS 5.0 IO.SYS)
 16904                                  	; (SYSINIT:0533h)
 16905                                  SYSIN:
 16906                                  	; Retro DOS 4.0 - 22/03/2019
 16907                                  	; Retro DOS 2.0 - 25/02/2018
 16908                                  
 16909                                  	; 23/04/2019
 16910                                  	;;mov	ax,Bios_Data
 16911                                  	;mov	ax,KERNEL_SEGMENT ; 0070h
 16912                                  	; 21/10/2022
 16913 00000530 B87000                  	mov	ax,DOSBIODATASEG ; 0070h
 16914 00000533 8ED8                    	mov	ds,ax
 16915 00000535 8C0E[F908]              	mov	[MoveDOSIntoHMA+2],cs	; set seg of routine to move DOS
 16916 00000539 C606[FB08]01            	mov	byte [SysinitPresent],1	; flag that MoveDOSIntoHMA can be called
 16917                                  
 16918                                  ; first move the MSDOS.SYS image up to a harmless place 
 16919                                  ; on top of our new sysinitseg
 16920                                  
 16921                                  	; 22/10/2022
 16922 0000053E B8[F038]                	mov	ax,SI_end		; how big is sysinitseg?
 16923 00000541 E88A06                  	call	off_to_para
 16924 00000544 8CC9                    	mov	cx,cs			; pick a buffer for msdos above us
 16925 00000546 01C8                    	add	ax,cx
 16926 00000548 8EC0                    	mov	es,ax
 16927                                  	
 16928 0000054A 31F6                    	xor	si,si
 16929 0000054C 89F7                    	mov	di,si
 16930                                  
 16931 0000054E 2E8E1E[7102]            	mov	ds,[cs:CURRENT_DOS_LOCATION] ; where it is (set by msinit)
 16932                                  
 16933                                  	;mov	ax,cs	
 16934                                  	;mov	ds,ax
 16935                                  
 16936                                  	;;;mov	cx,20480  ; MSDOS 6.21 IO.SYS - SYSINIT:04E2h
 16937                                  	;;mov	cx,dossize/2 ; MSDOS 6.0
 16938                                  	;mov	cx,[DOSSIZE] ; words (not bytes!)  ; Retro DOS v4.0 (3.0, 2.0)
 16939                                  	;mov	es,[FINAL_DOS_LOCATION] ; on top of SYSINIT code
 16940                                  	;mov	ds,[CURRENT_DOS_LOCATION]
 16941                                  
 16942                                  	; 22/10/2022
 16943 00000553 B90050                  	mov	cx,DOSSIZE/2 ; 5000h
 16944 00000556 F3A5                    	rep     movsw
 16945 00000558 2E8C06[7102]            	mov	[cs:CURRENT_DOS_LOCATION],es
 16946                                  
 16947                                  ; The DOS code is ORGed at a non-zero value to allow it to be located in
 16948                                  ; HIMEM. Thus, the DOS segment location must be adjusted accordingly.
 16949                                  ; If this is ROMDOS, however, only the init code is loaded into RAM, so
 16950                                  ; this ORG is not done. The entry point is at offset zero in the segment.
 16951                                  
 16952                                  	; 22/04/2019 (MSDOS 6.0 & MSDOS 6.21 kernel address modification)
 16953                                  	;mov	ax,cs
 16954                                  	; 02/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS, SYSINIT)
 16955                                  	;mov	ds,ax
 16956                                  
 16957                                  ; 29/04/2019 - Retro DOS v4.0 ! important MODIFICATION !
 16958                                  
 16959                                  ;	; 24/04/2019 
 16960                                  ;;ifndef ROMDOS
 16961                                  ;	mov	ax,[es:3] 		; get offset of dos
 16962                                  ;		; ax = 3DE0h for MSDOS 6.21 kernel (MSDOS.SYS, offset 3) 
 16963                                  ;	mov	[dosinit],ax		; that's the entry point offset
 16964                                  ;	call	off_to_para		; subtract this much from segment
 16965                                  ;	; 23/04/2019
 16966                                  ;	;sub	[CURRENT_DOS_LOCATION],ax
 16967                                  ;	sub	[FINAL_DOS_LOCATION],ax
 16968                                  ;;else
 16969                                  ;;	mov	word [dosinit],0	; entry to init is at zero
 16970                                  ;;
 16971                                  ;;endif ; ROMDOS
 16972                                  
 16973                                  	; 29/04/2019 - Retro DOS v4.0 ! important MODIFICATION !
 16974                                  	; (! MSDOS6.BIN starts with DOSDATA ! - Retro DOS v4.0 modification) 
 16975                                  
 16976                                  	;mov	ax,[es:0] ; DOSCODE start address = DOSDATA size (= 136Ah)
 16977                                  	;		  ; (Valid for Retro DOS v4.0 only!)
 16978                                  
 16979                                  	; 22/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS, SYSINIT)
 16980                                  	; (SYSINIT:0563h for MSDOS 5.0 IO.SYS SYSINIT)
 16981 0000055D A10300                  	mov	ax, [3]		; mov ax, word ptr ds:3
 16982                                  
 16983 00000560 2EA3[6F02]              	mov	[cs:dosinit],ax ; (SYSINIT:0563h for MSDOS 5.0 IO.SYS SYSINIT)
 16984                                  	; 02/11/2022
 16985 00000564 E86706                  	call	off_to_para		; subtract this much from segment
 16986 00000567 2E2906[7102]            	sub	[cs:CURRENT_DOS_LOCATION],ax
 16987                                  
 16988                                  	; Current DOSCODE start address = dword [dosinit]
 16989                                  
 16990                                  ;; If this is not ROMDOS, then the BIOS code is moved to the top of memory
 16991                                  ;; until it is determined whether it will be running in HIMEM or not.
 16992                                  
 16993                                  ;ifndef ROMDOS
 16994                                  
 16995                                  ; now put Bios_Code up on top of that. Assume Bios_Code + dossize < 64k
 16996                                  
 16997                                  	; 22/10/2022
 16998 0000056C 8CC0                    	mov	ax,es
 16999 0000056E 05000A                  	add	ax,DOSSIZE/16		; get paragraph of end of dos
 17000 00000571 8EC0                    	mov	es,ax
 17001 00000573 2E8706[8702]            	xchg	ax,[cs:temp_bcode_seg]	; swap with original home of Bios_Code
 17002 00000578 8ED8                    	mov	ds,ax			; point to loaded image of Bios_Code
 17003                                  
 17004                                  	;mov	si,BCODE_START ; mov si,30h
 17005                                  	; 09/12/2022
 17006 0000057A BE[3000]                	mov	si,BCODESTART
 17007                                  	; 02/11/2022
 17008 0000057D 89F7                    	mov	di,si
 17009 0000057F B9001A                  	mov	cx,BCODE_END   ; mov cx,1A60h
 17010 00000582 29F1                    	sub	cx,si
 17011 00000584 D1E9                    	shr	cx,1
 17012 00000586 F3A5                    	rep	movsw			; move Bios_Code into place
 17013                                  
 17014 00000588 8CC0                    	mov	ax,es			; tell it what segment it's in
 17015 0000058A 2EFF1E[8502]            	call	far [cs:seg_reinit_ptr]	; far call to seg_reinit in Bios_Code (M022)
 17016                                  
 17017                                  ;endif	; not ROMDOS
 17018                                  
 17019                                  ; now call dosinit while it's in its temporary home
 17020                                  
 17021                                  	;mov	ax,cs
 17022                                  	;mov	ds,ax	 
 17023                                  
 17024                                  	;mov	dx,[MEMORY_SIZE]	; set for call to dosinit
 17025                                  
 17026                                  	; 22/10/2022
 17027                                  
 17028 0000058F 2EC43E[0204]            	les	di,[cs:BiosComBlock]	; ptr to BIOS communication block
 17029                                  		; es = KERNEL_SEGMENT (70h), di = 'SysInitPresent' address
 17030 00000594 2EC536[7302]            	lds	si,[cs:DEVICE_LIST]	; set for call to dosinit
 17031                                  		; ds = KERNEL_SEGMENT (70h), si = 'res_dev_list' address
 17032                                  
 17033 00000599 2E8B16[9202]            	mov	dx,[cs:MEMORY_SIZE]	; set for call to dosinit
 17034                                  
 17035 0000059E FA                      	cli
 17036 0000059F 8CC8                    	mov	ax,cs
 17037 000005A1 8ED0                    	mov	ss,ax
 17038                                  
 17039                                  ; 22/03/2019 - Retro DOS v4.0 (MSDOS 6.0, SYSINIT1.ASM)
 17040                                  %define locstack ($ - SYSINIT$) & 0FFFEh  ; 532h in MSDOS 6.21 IO.SYS
 17041                                  					  ; 5A6h in MSDOS 5.0 IO.SYS SYSINIT
 17042                                  ;SYSINIT:0532h:
 17043                                  
 17044                                  ; 22/10/2022
 17045                                  ; ----------------------------------------------------------------------------
 17046                                  ;SYSINIT:05A6h:
 17047                                  ;locstack:	; (at SYSINIT:05A6h for MSDOS 5.0 IO.SYS)
 17048                                  
 17049                                  	;mov	sp, 05A6h
 17050 000005A3 BCA205                  	mov     sp,locstack		; set stack
 17051                                  
 17052 000005A6 FB                      	sti
 17053                                  
 17054                                  ;align 2
 17055                                  	; 30/03/2018
 17056                                  ;LOCSTACK:
 17057                                          ;CALL	FAR [CS:MSDOS]	; FINAL_DOS_LOCATION:0 
 17058                                  		       		;('jmp DOSINIT' in 'MSHEAD.ASM')
 17059                                  		       		;('DOSINIT:' is in 'MSINIT.ASM')
 17060                                  
 17061                                  	; 22/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 17062                                  	; 22/03/2019 - Retro DOS v4.0 (MSDOS 6.0, 6.21)
 17063                                  
 17064                                  ; This call to DOSINIT will relocate the DOS data from its present location
 17065                                  ; at the top of memory, to its final location in low memory just above the
 17066                                  ; BIOS data. It will then build important DOS data structures in low 
 17067                                  ; memory following the DOS data. It returns (among many other things) the
 17068                                  ; new starting address of free memory.
 17069                                  
 17070 000005A7 2EFF1E[6F02]            	call	far [cs:dosinit]	; call dosinit	
 17071                                  			 ; es:di -> sysinitvars_ext
 17072                                  
 17073 000005AC 2E8C1E[8302]            	mov	[cs:def_php],ds		; save pointer to PSP
 17074                                  	
 17075                                  	; 11/12/2022
 17076                                  	; 22/03/2019
 17077 000005B1 0E                      	push	cs
 17078 000005B2 1F                      	pop	ds
 17079                                  	; 22/10/2022
 17080 000005B3 A3[8102]                	mov	[hi_doscod_size],ax
 17081 000005B6 890E[7F02]              	mov	[lo_doscod_size],cx
 17082 000005BA 8916[7B02]              	mov	[dos_segreinit],dx
 17083                                  	
 17084                                  	; 11/12/2022
 17085                                  	; ds = cs
 17086                                  	;mov	[cs:hi_doscod_size],ax	; size of doscode (including exepatch)
 17087                                  	;mov	[cs:lo_doscod_size],cx	; (not including exepatch)
 17088                                  	;mov	[cs:dos_segreinit],dx	; save offset of segreinit
 17089                                  
 17090                                  	; 05/06/2018 - Retro DOS v3.0
 17091                                  	; ES:DI = Address of pointer to SYSINITVARS structure (MSDOS 3.3)
 17092                                  
 17093                                  	; 11/12/2022
 17094                                  	; ds = cs
 17095                                  	; 22/10/2022
 17096                                  	;mov	ax,[es:di+SysInitVars_Ext.SYSI_InitVars] ; 5/29/86
 17097 000005BE 268B05                  	mov	ax,[es:di] ; 22/03/2019
 17098                                  	;mov	[cs:DOSINFO],ax
 17099 000005C1 A3[6B02]                	mov	[DOSINFO],ax
 17100                                  	;mov	ax,[es:di+SysInitVars_Ext.SYSI_InitVars+2]
 17101 000005C4 268B4502                	mov	ax,[es:di+2]
 17102                                  	;mov	[cs:DOSINFO+2],ax
 17103 000005C8 A3[6D02]                	mov	[DOSINFO+2],ax	; set the sysvar pointer
 17104                                  
 17105                                  	;mov	ax,[es:di+SysInitVars_Ext.SYSI_Country_Tab]
 17106 000005CB 268B4504                	mov	ax,[es:di+4]
 17107                                  	;mov	[cs:sysi_country],ax
 17108 000005CF A3[7702]                	mov	[sysi_country],ax
 17109                                  	;mov	ax,[es:di+SysInitVars_Ext.SYSI_Country_Tab+2]
 17110 000005D2 268B4506                	mov	ax,[es:di+6]
 17111                                  	;mov	[cs:sysi_country+2],ax
 17112 000005D6 A3[7902]                	mov	[sysi_country+2],ax	; set the SYSI_Country pointer
 17113                                  
 17114                                  	; 20/04/2019
 17115                                  	;mov	ax,[CURRENT_DOS_LOCATION]
 17116                                  	;;mov	es,[CURRENT_DOS_LOCATION]
 17117                                  	;mov	ax,[FINAL_DOS_LOCATION] ; give dos its temporary location
 17118                                  	; 22/10/2022
 17119                                  	;mov	ax,[cs:CURRENT_DOS_LOCATION]
 17120                                  	;;;mov	[dos_segreinit+2],es
 17121                                  	;;mov	[dos_segreinit+2],ax
 17122                                  	;mov	[cs:dos_segreinit+2],ax
 17123                                  	; 11/12/2022
 17124                                  	; ds = cs
 17125 000005D9 8E06[7102]              	mov	es,[CURRENT_DOS_LOCATION]
 17126 000005DD 8C06[7D02]              	mov	[dos_segreinit+2],es
 17127                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 17128                                  	;mov	es,[cs:CURRENT_DOS_LOCATION]
 17129                                  	;mov	[cs:dos_segreinit+2],es
 17130                                  
 17131                                  ; ----------------------------------------------------------------------------
 17132                                  
 17133                                  ;SYSINIT:0577h:
 17134                                  	; ... RPLArena ... MSDOS 6.21 IO.SYS (SYSINIT:0577h to SYSINIT:05D1h)
 17135                                  ;SYSINIT:05D1h:	; NoRPLArena 
 17136                                  
 17137                                  	; 22/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS SYSINIT)
 17138                                  ;------ Cover up RPL code with an arena
 17139                                  ;SYSINIT:05EBh:
 17140                                  	; 11/12/2022
 17141                                  	; ds = cs
 17142 000005E1 31DB                    	xor	bx,bx
 17143 000005E3 391E[9402]              	cmp	[RPLMemTop],bx ; 0
 17144                                  	;cmp	word [RPLMemTop],0
 17145                                  	;;cmp	word [cs:RPLMemTop],0
 17146 000005E7 7450                    	je	short NoRPLArena
 17147                                  
 17148                                  ;------ alloc all memory
 17149                                  
 17150                                  	; 11/12/2022
 17151                                  	;mov	bx,0FFFFh
 17152 000005E9 4B                      	dec	bx
 17153                                  	; bx = 0FFFFh
 17154 000005EA B448                    	mov	ah,48h
 17155 000005EC CD21                    	int	21h
 17156                                  			; DOS - 2+ - ALLOCATE MEMORY
 17157                                  			; BX = number of 16-byte paragraphs desired
 17158 000005EE B448                    	mov	ah,48h
 17159 000005F0 CD21                    	int	21h
 17160                                  
 17161 000005F2 8EC0                    	mov	es,ax			; get it into ES and save it
 17162 000005F4 06                      	push	es
 17163                                  
 17164                                  ;------ resize upto RPL mem
 17165                                  
 17166                                  	; 11/12/2022
 17167                                  	; ds = cs
 17168                                  	;sub	ax,[cs:RPLMemTop]
 17169 000005F5 2B06[9402]              	sub	ax,[RPLMemTop]
 17170 000005F9 F7D8                    	neg	ax
 17171 000005FB 48                      	dec	ax
 17172 000005FC 89C3                    	mov	bx,ax
 17173 000005FE B44A                    	mov	ah,4Ah
 17174 00000600 CD21                    	int	21h
 17175                                    			; DOS - 2+ - ADJUST MEMORY BLOCK SIZE (SETBLOCK)
 17176                                  			; ES = segment address of block to change
 17177                                  			; BX = new size in paragraphs
 17178                                  
 17179                                  ;------ allocate the free (RPL MEM)
 17180                                  
 17181 00000602 BBFFFF                  	mov	bx,0FFFFh
 17182 00000605 B448                    	mov	ah,48h
 17183 00000607 CD21                    	int	21h
 17184 00000609 B448                    	mov	ah,48h
 17185 0000060B CD21                    	int	21h
 17186                                  
 17187                                  ;----- mark that it belongs to RPL
 17188                                  
 17189 0000060D 48                      	dec	ax
 17190 0000060E 8EC0                    	mov	es,ax
 17191                                  	;mov	word [es:arena_owner],8
 17192 00000610 26C70601000800          	mov	word [es:1],8
 17193                                  	;mov	word [es:arena_name],'RP'
 17194 00000617 26C70608005250          	mov	word [es:8],'RP'
 17195                                  	;mov	word [es:arena_name+2],'L'
 17196 0000061E 26C7060A004C00          	mov	word [es:10],'L'
 17197                                  	;mov	word [es:arena_name+4],0
 17198 00000625 26C7060C000000          	mov	word [es:12],0
 17199                                  	;mov	word [es:arena_name+6],0
 17200 0000062C 26C7060E000000          	mov	word [es:14],0	
 17201                                  
 17202 00000633 07                              pop     es                      ; get back ptr to first block
 17203 00000634 B449                            mov     ah,49h	; Dealloc	; and free it
 17204 00000636 CD21                    	int	21h		
 17205                                  					; DOS - 2+ - FREE MEMORY
 17206                                  					; ES = segment address of area to be freed
 17207                                  	; 11/12/2022
 17208 00000638 F8                      	clc
 17209                                  
 17210                                  ; ----------------------------------------------------------------------------
 17211                                  
 17212                                  NoRPLArena:
 17213                                  	; 11/12/2022
 17214                                  	; ds = cs
 17215                                  	; 22/03/2019 - Retro DOS v4.0 (MSDOS 6.0, 6.21, IO.SYS)
 17216 00000639 C43E[6B02]              	les	di,[DOSINFO]	; es:di -> dosinfo
 17217                                  	; 22/10/2022 - Retro DOS v4.0 (MSDOS 5.0 IO.SYS SYSINIT)
 17218                                  	;les	di,[cs:DOSINFO]	; es:di -> dosinfo
 17219                                  
 17220                                  	; 11/12/2022
 17221                                  	;clc				; get the extended memory size
 17222                                  
 17223                                  ;	execute the get extended memory size subfunction in the bios int 15h
 17224                                  ;	if the function reports an error do nothing else store the extended
 17225                                  ;	memory size reported at the appropriate location in the dosinfo buffer
 17226                                  ;	currently pointed to by es:di. use the offsets specified in the
 17227                                  ;	definition of the sysinitvars struct in inc\sysvar.inc
 17228                                  
 17229 0000063D B488                    	mov	ah,88h
 17230 0000063F CD15                    	int	15h			; check extended memory size
 17231 00000641 720B                    	jc	short no_ext_memory
 17232                                  			; Get Extended Memory Size
 17233                                  			; Return: CF clear on success
 17234                                  			; AX = size of memory above 1M in K	
 17235                                  	;mov	[es:di+SYSI_EXT_MEM],ax ; save extended memory size
 17236                                  	; 22/10/2022
 17237 00000643 26894545                	mov	[es:di+45h],ax ; save extended memory size
 17238 00000647 09C0                    	or	ax,ax
 17239 00000649 7403                    	jz	short no_ext_memory
 17240 0000064B E8F604                  	call	ClrVDISKHeader
 17241                                  no_ext_memory:
 17242                                  	;mov	ax,[es:di+SYSI_MAXSEC]	; get the sector size
 17243 0000064E 268B4510                	mov	ax,[es:di+10h]
 17244                                  	;add	ax,bufinsiz
 17245 00000652 83C014                  	add	ax,20			; size of buffer header
 17246                                  	; 11/12/2022
 17247                                  	; ds = cs
 17248 00000655 A3[9B02]                	mov	[singlebuffersize],ax	; total size for a buffer
 17249                                  	;mov	[cs:singlebuffersize],ax	
 17250                                  	; 11/12/2022
 17251 00000658 A0[9602]                	mov	al,[DEFAULT_DRIVE]	; get the 1 based boot drive number set by msinit
 17252                                  	;mov	al,[cs:DEFAULT_DRIVE]
 17253                                  	;mov	[es:di+SYSI_BOOT_DRIVE],al ; set sysi_boot_drive
 17254 0000065B 26884543                	mov	[es:di+43h],al
 17255                                  
 17256                                  ; determine if 386 system...
 17257                                  
 17258                                  	;get_cpu_type			; macro to determine cpu type
 17259                                  
 17260                                  get_cpu_type:
 17261                                  	; 11/12/2022
 17262 0000065F 9C                      	pushf
 17263                                  	;push	bx
 17264                                  	;xor	bx,bx
 17265                                  	; 11/12/2022
 17266                                  	;xor	cx,cx
 17267                                  	;
 17268 00000660 31C0                    	xor	ax,ax
 17269                                  	; ax = 0
 17270 00000662 50                      	push    ax
 17271 00000663 9D                      	popf
 17272 00000664 9C                      	pushf
 17273 00000665 58                      	pop	ax
 17274 00000666 2500F0                  	and	ax,0F000h
 17275                                  	;cmp	ax,0F000h
 17276 00000669 80FCF0                  	cmp	ah,0F0h 
 17277 0000066C 7410                    	je	short cpu_8086
 17278                                  	;mov	ax,0F000h
 17279 0000066E B4F0                    	mov	ah,0F0h
 17280                                  	; ax = 0F000h
 17281 00000670 50                      	push	ax
 17282 00000671 9D                      	popf
 17283 00000672 9C                      	pushf
 17284 00000673 58                      	pop	ax
 17285                                  	;and	ax,0F000h
 17286 00000674 80E4F0                  	and	ah,0F0h
 17287 00000677 7405                    	jz	short cpu_286
 17288                                  cpu_386:
 17289                                  	; 11/12/2022
 17290                                  	;;inc	bx
 17291                                  	;inc	cx
 17292                                  	; 11/12/2022
 17293                                  	;mov	byte [es:di+SYSI_DWMOVE],1
 17294 00000679 26C6454401              	mov	byte [es:di+44h],1
 17295                                  cpu_286:
 17296                                  	;;;inc	bx
 17297                                  	;;inc	cx
 17298                                  cpu_8086:
 17299                                  	; 11/12/2022
 17300                                  	;;mov	ax,bx	
 17301                                  	;pop	bx
 17302 0000067E 9D                      	popf
 17303                                  
 17304                                  	;...
 17305                                  
 17306                                  	; 11/12/2022
 17307                                  	;or	cl,cl
 17308                                  	;jz	short not_386_system
 17309                                  	; 11/12/202
 17310                                  	;cmp	cl,2
 17311                                  	;;cmp	ax,2			; is it a 386?
 17312                                  	;jne	short not_386_system	; no: don't mess with flag
 17313                                  	;;mov	byte [es:di+SYSI_DWMOVE],1
 17314                                  	; 11/12/2022
 17315                                  	; 22/10/2022
 17316                                  	;mov	byte [es:di+44h],1
 17317                                  not_386_system:
 17318                                  	;mov	al,[es:di+SYSI_NUMIO]
 17319 0000067F 268A4520                	mov	al,[es:di+20h]
 17320                                  	; 11/12/2022
 17321                                  	; ds = cs
 17322 00000683 A2[FC03]                	mov	[drivenumber],al	; save start of installable block drvs
 17323                                  	;mov	[cs:drivenumber],al
 17324                                  
 17325 00000686 8CC8                    	mov	ax,cs
 17326 00000688 83E811                  	sub	ax,11h			; room for PSP we will copy shortly
 17327                                  	; 11/12/2022
 17328                                  	;mov	cx,[singlebuffersize]	; temporary single buffer area
 17329                                  	;;mov	cx,[cs:singlebuffersize]
 17330                                  	;shr	cx,1			
 17331                                  	;shr	cx,1			; divide size by 16...
 17332                                  	;shr	cx,1
 17333                                  	;shr	cx,1			; ...to get paragraphs...
 17334                                  	;inc	cx			; ... and round up
 17335                                  	; 11/12/2022
 17336 0000068B 8B1E[9B02]              	mov	bx,[singlebuffersize]
 17337 0000068F B104                    	mov	cl,4
 17338 00000691 D3EB                    	shr	bx,cl
 17339 00000693 43                      	inc	bx
 17340                                  
 17341                                  ;	cas note: this unorthodox paragraph rounding scheme wastes a byte
 17342                                  ;	  if [singlebuffersize] ever happens to be zero mod 16. Could this
 17343                                  ;	  ever happen? Only if the buffer overhead was zero mod 16, since
 17344                                  ;	  it is probably safe to assume that the sector size always will be.
 17345                                  ;
 17346                                  ;	 mohans also found a bug in CONFIG.SYS processing where it replaces
 17347                                  ;	  EOF's with cr,lf's, without checking for collision with [confbot].
 17348                                  ;	  perhaps the extra byte this code guarantees is what has kept that
 17349                                  ;	  other code from ever causing a problem???
 17350                                  
 17351                                  	; 11/12/2022
 17352 00000694 29D8                    	sub	ax,bx
 17353                                  	;sub	ax,cx
 17354 00000696 A3[A102]                	mov	[top_of_cdss],ax	; temp "unsafe" location
 17355                                  	; 22/10/2022
 17356                                  	;mov	[cs:top_of_cdss],ax
 17357                                  
 17358                                  ;	chuckst -- 25 Jul 92 -- added code here to pre-allocate space
 17359                                  ;	for 26 temporary CDSs, which makes it easier to use alloclim
 17360                                  ;	for allocating memory for MagicDrv.
 17361                                  
 17362 00000699 06                      	push	es			; preserve pointer to dosinfo
 17363 0000069A 57                      	push	di
 17364                                  
 17365                                  	; 22/10/2022
 17366                                  ;	mov	cx,ax			; save pointer for buffer
 17367                                  ;
 17368                                  ;;	now allocate space for 26 CDSs
 17369                                  ;
 17370                                  ;	sub	ax,((26 *(curdirlen))+15)/16
 17371                                  ;	mov	[ALLOCLIM],ax		; init top of free memory pointer
 17372                                  ;	mov	[CONFBOT],ax		; init this in case no CONFIG.SYS
 17373                                  
 17374                                  ; setup and initialize the temporary buffer at cx
 17375                                  
 17376                                  	;les	di,[es:di+SYSI_BUF]	; get the buffer chain entry pointer
 17377 0000069B 26C47D12                	les	di,[es:di+12h]
 17378                                  	; 11/12/2022
 17379 0000069F 31DB                    	xor	bx,bx
 17380                                  	;xor	ax,ax
 17381                                  	;mov	[es:di+BUFFINF.Dirty_Buff_Count],ax ; 0
 17382                                  	;mov	word [es:di+4],0
 17383 000006A1 26895D04                	mov	[es:di+4],bx ; 0
 17384                                  	;mov	[es:di+BUFFINF.Buff_Queue],ax ; 0
 17385                                  	;mov	word [es:di],0
 17386 000006A5 26891D                  	mov	[es:di],bx ; 0
 17387                                  	;;mov	[es:di+BUFFINF.Buff_Queue+2],cx ; cx = [top_of_cdss]
 17388                                  	;mov	[es:di+BUFFINF.Buff_Queue+2],ax ; ax = [top_of_cdss]
 17389 000006A8 26894502                	mov	[es:di+2],ax
 17390                                  
 17391                                  	;mov	es,cx
 17392 000006AC 8EC0                    	mov	es,ax	; [top_of_cdss] = [CONFBOT]
 17393                                  
 17394                                  	; 11/12/2022
 17395                                  	;xor	ax,ax
 17396                                  	;mov	di,ax			; es:di -> single buffer
 17397 000006AE 89DF                    	mov	di,bx
 17398                                  	; di = 0
 17399                                  
 17400                                  	;mov	[es:di+buffinfo.buf_next],ax ; points to itself
 17401                                  	; 11/12/2022
 17402                                  	;mov	[es:di],ax ; 0
 17403 000006B0 26891D                  	mov	[es:di],bx ; 0
 17404                                  	;mov	[es:di+buffinfo.buf_prev],ax ; points to itself
 17405                                  	; 11/12/2022
 17406                                  	;mov	[es:di+2],ax ; 0
 17407 000006B3 26895D02                	mov	[es:di+2],bx ; 0 
 17408                                  
 17409                                  	; 22/10/2022 - Retro DOS 4.0 (Modified MSDOS 5.0 IO.SYS SYINIT)
 17410                                  	; MSDOS 5.0 IO.SYS - SYSINIT:06E0h
 17411                                  
 17412                                  	;mov	word [es:di+buffinfo.buf_ID],00FFh ; free buffer,clear flag
 17413 000006B7 26C74504FF00            	mov	word [es:di+4],00FFh
 17414                                  ;SYSINIT:06E6h
 17415                                  	;;mov	[es:di+buffinfo.buf_sector],ax ; 0
 17416                                  	;mov	word [es:di+6],0
 17417                                  	; 11/12/2022
 17418                                  	;mov	[es:di+buffinfo.buf_sector],bx ; 0
 17419 000006BD 26895D06                	mov	[es:di+6],bx ; 0
 17420                                  	;;mov	[es:di+buffinfo.buf_sector+2],ax ; 0
 17421                                  	;mov	word [es:di+8],0
 17422                                  	; 11/12/2022
 17423                                  	;mov	[es:di+buffinfo.buf_sector+2],bx ; 0
 17424 000006C1 26895D08                	mov	[es:di+8],bx ; 0
 17425                                  
 17426 000006C5 5F                      	pop	di			; restore pointer to DOSINFO data
 17427 000006C6 07                      	pop	es
 17428                                  
 17429                                  	; 11/12/2022
 17430                                  	; ds = cs
 17431                                  	; 22/10/2022
 17432                                  	;push	cs
 17433                                  	;pop	ds
 17434                                  
 17435 000006C7 E80D05                  	call	TempCDS 		; set up cdss so re_init and sysinit
 17436                                  					;  can make disk system calls
 17437                                  					; tempcds trashes ds
 17438                                  	; 10/05/2019
 17439 000006CA 2E8E1E[8302]            	mov	ds,[cs:def_php]		; retrieve pointer to PSP returned by DOSINIT
 17440                                  
 17441                                  	;if not ibmjapver
 17442                                  	;call	far KERNEL_SEGMENT:re_init ; re-call the bios
 17443                                  	;endif
 17444                                  
 17445                                  	; 22/10/2022
 17446                                  ;SYSINIT:06FEh:	; (MSDOS 5.0 IO.SYS, SYSINIT)
 17447                                  	;call	far ptr 70h:89Bh
 17448 000006CF 9A[9908]7000            	call	DOSBIODATASEG:RE_INIT
 17449                                  
 17450 000006D4 FB                      	sti				; ints ok
 17451 000006D5 FC                      	cld				; make sure
 17452                                  
 17453                                  ; 23/03/2019
 17454                                  
 17455                                  ;SYSINIT:069Ch
 17456                                  
 17457                                  ; dosinit has set up a default "process" (php) at ds:0. we will move it out
 17458                                  ; of the way by putting it just below sysinit at end of memory.
 17459                                  
 17460 000006D6 8CCB                    	mov	bx,cs
 17461 000006D8 83EB10                  	sub	bx,10h
 17462 000006DB 8EC3                    	mov	es,bx
 17463 000006DD 31F6                    	xor	si,si
 17464 000006DF 89F7                    	mov	di,si
 17465 000006E1 B98000                  	mov	cx,128
 17466 000006E4 F3A5                    	rep	movsw
 17467                                  
 17468                                  	;mov	[es:PDB.JFN_POINTER+2],es ; Relocate
 17469                                  	; 22/10/2022
 17470 000006E6 268C063600              	mov	[es:36h],es
 17471                                  
 17472                                   	; Set Process Data Block - Program Segment Prefix address
 17473                                  	; BX = PDB/PSP segment
 17474 000006EB B450                            mov	ah,50h ; SET_CURRENT_PDB
 17475 000006ED CD21                    	int	21h			; tell DOS we moved it
 17476                                  			; DOS - 2+ internal - SET PSP SEGMENT
 17477                                  			; BX = segment address of new PSP
 17478                                  	; 22/10/2022
 17479                                  	; 27/03/2019
 17480 000006EF 1E                      	push	ds ; */			; preserve DS returned by DOSINIT
 17481                                  
 17482 000006F0 0E                      	push	cs	
 17483 000006F1 1F                      	pop	ds
 17484                                  
 17485                                  	; set up temp. critical error handler
 17486 000006F2 BA[AC33]                	mov	dx,int24		; set up int 24 handler
 17487                                  	;;mov	ax,(SET_INTERRUPT_VECTOR*256)+24h
 17488                                  	;mov	ax,(SET_INTERRUPT_VECTOR<<8)|24h
 17489 000006F5 B82425                  	mov	ax,2524h
 17490 000006F8 CD21                    	int	21h
 17491                                  
 17492 000006FA 803E[FF03]00                    cmp     byte [toomanydrivesflag],0 ; Q: >24 partitions?      M029
 17493 000006FF 7405                            je      short no_err		   ;  N: continue            M029
 17494 00000701 BA[AA38]                        mov     dx,TooManyDrivesMsg	   ;  Y: print error message M029
 17495                                          ; 22/10/2022
 17496                                  	;call	print 			   ;		             M029
 17497                                  	; 12/12/2022
 17498 00000704 EB03                    	jmp	short p_dosinit_msg ; 23/03/2019 - Retro DOS v4.0                    
 17499                                  no_err:
 17500                                  	; 12/05/2019
 17501                                  	;----------------------------------------------
 17502                                  	; 27/06/2018 - Retro DOS v3.0	; 23/03/2019 - Retro DOS v4.0
 17503                                  	; 22/10/2022 - Retro DOS v4.0
 17504                                  	; 12/12/2022
 17505 00000706 BA[B033]                	mov	dx,BOOTMES		; Display (fake) MSDOS version message
 17506                                  p_dosinit_msg:
 17507 00000709 E87B2C                  	call	print			; Print message
 17508                                  	;----------------------------------------------
 17509                                  	
 17510                                  	; 11/12/2022
 17511                                  	; 22/10/2022
 17512                                  	; 23/03/2019 - Retro DOS v4.0
 17513                                  	;pop	ds			; start of free memory
 17514                                  	;mov	dl,[cs:DEFAULT_DRIVE]
 17515                                  	
 17516                                  	; 11/12/2022
 17517                                  	; 27/03/2019
 17518 0000070C 8A16[9602]              	mov	dl,[DEFAULT_DRIVE]	
 17519 00000710 1F                      	pop	ds ; */
 17520                                  
 17521 00000711 08D2                    	or	dl,dl
 17522                                  	;jz	short nodrvset		; bios didn't say
 17523 00000713 7405                    	jz	short ProcessConfig  ; (Retro DOS v4.0 does not contain DBLSPACE code)
 17524                                  	;dec	dl			; A = 0
 17525                                  	; 18/12/2022
 17526 00000715 4A                      	dec	dx
 17527 00000716 B40E                    	mov	ah,0Eh	; SET_DEFAULT_DRIVE
 17528 00000718 CD21                    	int	21h			; select the disk
 17529                                  			; DOS - SELECT DISK
 17530                                  			; DL = new default drive number (0 = A, 1 = B, etc.)
 17531                                  			; Return: AL = number of logical drives
 17532                                  nodrvset:
 17533                                  	;ifdef	dblspace_hooks
 17534                                  	;	....
 17535                                  	;	....
 17536                                  	;endif	
 17537                                  
 17538                                  ; MSDOS 6.21 IO.SYS, SYSINIT:0744h
 17539                                  
 17540                                  ; 23/03/2019 - Retro DOS v4.0 (MSDOS 6.0, SYSINIT1.ASM, 1991)
 17541                                  ; ----------------------------------------------------------------------------
 17542                                  ; 22/10/2022 - Retro DOS v4.0 (MSDOS 5.0 IO.SYS SYSINIT)
 17543                                  
 17544                                  ProcessConfig:
 17545                                  	;; ds = cs ; 27/03/2019
 17546                                  	; 11/12/2022
 17547                                  	; ds <> cs	
 17548                                  
 17549                                  ; (MSDOS 5.0 IO.SYS - SYSINIT:0746h)
 17550                                  
 17551 0000071A E80018                  	call	doconf			; do pre-scan for dos=high/low
 17552                                  
 17553                                  	; 11/12/2022
 17554                                  	; 27/03/2019
 17555                                  	; ds = cs (at return from doconf)
 17556                                  
 17557                                  ; Now, if this is not romdos, we decide what to do with the DOS code.
 17558                                  ; It will either be relocated to low memory, above the DOS data structures,
 17559                                  ; or else it will be located in HiMem, in which case a stub with the DOS
 17560                                  ; code entry points will be located in low memory. Dos_segreinit is used
 17561                                  ; to tell the DOS data where the code has been placed, and to install the
 17562                                  ; low memory stub if necessary. If the DOS is going to go into HiMem, we
 17563                                  ; must first initialize it in its present location and load the installable
 17564                                  ; device drivers. Then, if a HiMem driver has been located, we can actually
 17565                                  ; relocate the DOS code into HiMem.
 17566                                  ;
 17567                                  ; For ROMDOS, if DOS=HIGH is indicated, then we need to call dos_segreinit
 17568                                  ; to install the low memory stub (this must be done before allowing any
 17569                                  ; device drivers to hook interrupt vectors). Otherwise, we don't need to 
 17570                                  ; call dos_segreinit at all, since the interrupt vector table has already 
 17571                                  ; been patched.
 17572                                  
 17573                                  	; 22/10/2022 - Retro DOS v4.0
 17574                                  	; (MSDOS 5.0 IO.SYS - SYSINIT:0749h)
 17575                                  	;cmp	byte [cs:runhigh],0	; Did user choose to run low ?
 17576                                  	; 11/12/2022
 17577 0000071D 803E[6A02]00            	cmp	byte [runhigh],0
 17578 00000722 740C                    	je	short dont_install_stub	; yes, don't install dos low mem stub
 17579                                  
 17580                                  ;------ user chose to load high
 17581                                  
 17582                                  	; 22/10/2022
 17583                                  	;mov	es,[cs:CURRENT_DOS_LOCATION] ; MSDOS 6.21 (& MSDOS 6.0)
 17584                                  	; 11/12/2022
 17585                                  	; ds = cs
 17586 00000724 8E06[7102]              	mov	es,[CURRENT_DOS_LOCATION]
 17587                                  
 17588                                  	;mov	es,[cs:FINAL_DOS_LOCATION]   ; Retro DOS v4.0
 17589                                  	; 27/03/2019
 17590                                  	;;mov	es,[FINAL_DOS_LOCATION]
 17591                                  
 17592 00000728 31C0                    	xor	ax,ax			; ax = 0 ---> install stub
 17593                                  	; 11/12/2022
 17594                                  	; ds = cs
 17595                                  	;call	far [cs:dos_segreinit]	; call dos segreinit
 17596 0000072A FF1E[7B02]              	call	far [dos_segreinit]
 17597                                  
 17598 0000072E EB10                    	jmp	short do_multi_pass
 17599                                  
 17600                                  ;------ User chose to load dos low
 17601                                  
 17602                                  dont_install_stub:
 17603                                  	; 22/10/2022
 17604 00000730 31DB                    	xor	bx,bx			; M012
 17605                                  					; don't use int 21 call to alloc mem
 17606 00000732 E8D701                  	call	MovDOSLo		; move it !
 17607                                  
 17608 00000735 B80100                  	mov	ax,1			; dont install stub
 17609                                  	; 11/12/2022
 17610                                  	; ds = cs
 17611 00000738 8E06[7102]              	mov	es,[CURRENT_DOS_LOCATION]
 17612                                  	;mov	es,[cs:CURRENT_DOS_LOCATION] ; set_dos_final_position set it up
 17613                                  	;;mov	es,[cs:FINAL_DOS_LOCATION]   ; Retro DOS v4.0
 17614                                  	; 27/03/2019
 17615                                  ;do_multi_pass:
 17616                                  	;;mov	es,[FINAL_DOS_LOCATION] 
 17617                                  
 17618                                  	; 11/12/2022
 17619                                  	; ds =cs
 17620                                  	;call	far [cs:dos_segreinit]	; inform dos about new seg
 17621 0000073C FF1E[7B02]              	call	far [dos_segreinit]
 17622                                  do_multi_pass:
 17623 00000740 E81301                  	call	AllocFreeMem		; allocate all the free mem
 17624                                  					; & update [memhi] & [area]
 17625                                  					; start of free memory.
 17626                                  	;ifdef	dblspace_hooks
 17627                                  	;mov	bx,0			; magic backdoor to place int hooks
 17628                                  	;call	cs:MagicBackdoor
 17629                                  	;endif
 17630                                  
 17631                                  ; Now, process config.sys some more.  
 17632                                  ; Load the device drivers and install programs
 17633                                  
 17634                                  	; 22/10/2022
 17635                                  	;inc	byte [cs:multi_pass_id]	; multi_pass_id = 1
 17636                                  	; 11/12/2022
 17637                                  	; ds = cs
 17638 00000743 FE06[4903]              	inc	byte [multi_pass_id]
 17639 00000747 E86618                  	call	multi_pass		; load device drivers
 17640 0000074A E82925                  	call	ShrinkUMB
 17641 0000074D E84F25                  	call	UnlinkUMB		; unlink all UMBs	;M002
 17642                                  	; 02/11/2022
 17643                                  	;inc	byte [cs:multi_pass_id]	; multi_pass_id = 2
 17644                                  	; 11/12/2022
 17645                                  	; ds = cs
 17646 00000750 FE06[4903]              	inc	byte [multi_pass_id]
 17647 00000754 E85918                  	call	multi_pass		; was load ifs (now does nothing)
 17648                                  
 17649                                  	;ifdef	dblspace_hooks
 17650                                  	;call	MagicPostload		; make sure Magicdrv is final placed
 17651                                  	;endif
 17652                                  
 17653                                  	; ds = cs
 17654                                  	
 17655 00000757 E81505                  	call	endfile			; setup fcbs, files, buffers etc
 17656                                  
 17657                                  	;ifdef	dblspace_hooks
 17658                                  	;call	MagicSetCdss		; disable CDSs of reserved drives
 17659                                  	;endif
 17660                                  
 17661                                  ;Reset SysinitPresent flag here. This is needed for the special fix for lying
 17662                                  ;to device drivers. This has been moved up to this point to avoid problems 
 17663                                  ;with overlays called from installed programs
 17664                                  
 17665                                  	; 11/12/2022
 17666                                  	; ds = cs
 17667                                  
 17668                                  	;;mov	ax,Bios_Data ; 0070h
 17669                                  	;mov	ax,KERNEL_SEGMENT
 17670                                  	; 21/10/2022
 17671 0000075A B87000                  	mov	ax,DOSBIODATASEG ; 0070h
 17672 0000075D 8EC0                    	mov	es,ax			; point ES to bios data
 17673                                  
 17674 0000075F 26C606[FB08]00          	mov	byte [es:SysinitPresent],0 ; clear SysinitPresent flag
 17675                                  
 17676                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 17677                                  	;test	word [cs:install_flag],have_install_cmd ; 1
 17678                                  	;test	byte [cs:install_flag],1
 17679                                  	; 11/12/2022
 17680                                  	; ds = cs
 17681 00000765 F606[4A03]01            	test	byte [install_flag],1
 17682                                  	;test	byte [cs:install_flag],have_install_cmd
 17683                                  					; are there install commands?
 17684 0000076A 7407                    	jz	short dolast		; no, no need for further processing
 17685                                  	;inc	byte [cs:multi_pass_id]	; mult_pass_id = 3
 17686                                  	; 11/12/2022
 17687                                  	; ds =cs
 17688 0000076C FE06[4903]              	inc	byte [multi_pass_id]
 17689 00000770 E83D18                  	call	multi_pass		; execute install= commands
 17690                                  
 17691                                  dolast:
 17692                                  	
 17693                                  ; [area] has the segment address for the allocated memory of sysinit, confbot.
 17694                                  ;  free the confbot area used for config.sys and sysinit itself.
 17695                                  
 17696                                  ; Now if DOS is supposed to run high, we actually move it into high memory 
 17697                                  ; (if HiMem manager is available). For ROMDOS, we don't actually move
 17698                                  ; anything, but just set up the ROM area for suballocation (or print
 17699                                  ; a message if HiMem is not available).
 17700                                  ;
 17701                                  ; There is also this little hack for CPM style DOS calls that needs to
 17702                                  ; be done when A20 is set...
 17703                                  
 17704                                  	; 11/12/2022
 17705                                  	; ds = cs
 17706                                  
 17707                                  	; 22/10/2022
 17708                                  	;cmp	byte [cs:runhigh],0FFh	; are we still waiting to be moved?
 17709                                  	; 11/12/2022
 17710 00000773 803E[6A02]FF            	cmp	byte [runhigh],0FFh
 17711 00000778 7503                    	jne	short _@@_ ; 09/12/2022 ; no, our job is over
 17712 0000077A E83E01                  	call	LoadDOSHiOrLo
 17713                                  _@@_:
 17714                                  	;cmp	byte [cs:runhigh],0	; are we running low
 17715                                  	; 11/12/2022
 17716                                  	; ds = cs
 17717 0000077D 803E[6A02]00            	cmp	byte [runhigh],0
 17718                                  	;je	short _@@@
 17719 00000782 7403                    	je	short ConfigDone	; yes, no CPM hack needed
 17720 00000784 E83104                  	call	CPMHack			; make ffff:d0 same as 0:c0
 17721                                  _@@@:
 17722                                  
 17723                                  ; We are now done with CONFIG.SYS processing
 17724                                  
 17725                                  ConfigDone:
 17726                                  	; 12/12/2022
 17727                                  	; 22/10/2022
 17728                                  	;mov	byte [cs:donotshownum],1 
 17729                                  					; done with config.sys.
 17730                                  					; do not show line number message.
 17731                                  	;mov	es,[cs:area]
 17732                                  	; 12/12/2022
 17733                                  	; ds = cs
 17734                                  	; 27/03/2019
 17735 00000787 C606[D103]01            	mov	byte [donotshownum],1
 17736 0000078C 8E06[E403]              	mov	es,[area]
 17737                                  
 17738 00000790 B449                            mov     ah,49h ; DEALLOC	; free allocated memory for command.com
 17739 00000792 CD21                    	int	21h
 17740                                  			; DOS - 2+ - FREE MEMORY
 17741                                  			; ES = segment address of area to be freed
 17742                                  
 17743                                  	; 22/10/2022
 17744                                  	;test	word [cs:install_flag],2
 17745                                  	;test	word [cs:install_flag],has_installed ; sysinit_base installed?
 17746                                  	;test	byte [cs:install_flag],has_installed
 17747                                  	; 11/12/2022
 17748                                  	; ds = cs
 17749 00000794 F606[4A03]02            	test	byte [install_flag],2 ; has_installed
 17750                                  	;test	byte [install_flag],has_installed
 17751 00000799 741F                    	jz	short skip_free_sysinitbase ; no.
 17752                                  
 17753                                  ; set block from the old_area with impossible_owner_size.
 17754                                  ; this will free the unnecessary sysinit_base that had been put in memory to
 17755                                  ; handle install= command.
 17756                                  
 17757                                  	; 12/12/2022
 17758                                          ;push	es		; BUGBUG 3-30-92 JeffPar: no reason to save ES
 17759                                  	;push	bx
 17760                                  	
 17761                                  	; 22/10/2022
 17762                                  	;mov	es,[cs:old_area]
 17763                                  	;mov	bx,[cs:impossible_owner_size]
 17764                                  	; 12/12/2022
 17765                                  	; ds = cs
 17766 0000079B 8E06[DA03]              	mov	es,[old_area]
 17767 0000079F 8B1E[DC03]              	mov	bx,[impossible_owner_size]
 17768                                  	
 17769 000007A3 B44A                    	mov	ah,4Ah ; SETBLOCK
 17770 000007A5 CD21                    	int	21h
 17771                                  			; DOS - 2+ - ADJUST MEMORY BLOCK SIZE (SETBLOCK)
 17772                                  			; ES = segment address of block to change
 17773                                  			; BX = new size in paragraphs
 17774 000007A7 8CC0                    	mov	ax,es
 17775 000007A9 48                      	dec	ax
 17776 000007AA 8EC0                    	mov	es,ax			; point to arena
 17777                                  	;mov	word [es:ARENA.OWNER],8	; set impossible owner
 17778 000007AC 26C70601000800          	mov	word [es:1],8
 17779                                  	;mov	word [es:ARENA.NAME],'SD' ; 4453h ; System Data
 17780 000007B3 26C70608005344          	mov	word [es:8],'SD'
 17781                                  	
 17782                                  	; 12/12/2022
 17783                                  	;pop	bx
 17784                                          ;pop     es		; BUGBUG 3-30-92 JeffPar: no reason to save ES
 17785                                  
 17786                                  skip_free_sysinitbase:
 17787                                  	; 22/10/2022
 17788                                  	;cmp	byte [cs:runhigh],0
 17789                                  	; 12/12/2022
 17790                                  	; ds = cs
 17791 000007BA 803E[6A02]00            	cmp	byte [runhigh],0	
 17792 000007BF 7403                    	je	short _@@@@
 17793                                  
 17794 000007C1 E8D602                  	call	InstVDiskHeader	; Install VDISK header (allocates some mem from DOS)
 17795                                  
 17796                                  ; ----------------------------------------------------------------------------
 17797                                  
 17798                                  _@@@@:
 17799                                  	; 12/12/2022
 17800                                  	; ds = cs
 17801                                  	; 22/10/2022
 17802                                  	; 27/03/2019
 17803                                  	;push	cs
 17804                                  	;pop	ds			; point DS to sysinitseg
 17805                                  
 17806                                  ; set up the parameters for command
 17807                                  
 17808                                  	; 22/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS SYSINIT)
 17809                                  ;;ifdef  MULTI_CONFIG
 17810                                  ;	mov	byte [config_cmd],0	; set special code for query_user
 17811                                  ;       call    query_user		; to issue the AUTOEXEC prompt
 17812                                  ;	jnc	short process_autoexec	; we should process autoexec normally
 17813                                  ;	; !!!
 17814                                  ;	or	byte [bQueryOpt],4 ; MSDOS 6.21 IO.SYS - SYSINIT:081Fh
 17815                                  ;       ; !!!
 17816                                  ;	call    disable_autoexec        ; no, we should disable it
 17817                                  ;process_autoexec:
 17818                                  ;;endif	; !!!
 17819                                  ;	call	CheckQueryOpt	; MSDOS 6.21 IO.SYS - SYSINIT:0827h	
 17820                                  ;	; !!!
 17821                                  
 17822                                  	; 22/10/2022 
 17823                                  	;mov     cl,[command_line]
 17824                                          ;mov     ch,0
 17825                                          ;inc     cx
 17826                                          ;mov     si,command_line	
 17827                                  	;add     si,cx
 17828                                          ;mov     byte [si],cr	; cr-terminate command line
 17829                                  
 17830                                  	; 22/10/2022 - Retro DOS 4.0 (Modified MSDOS 5.0 IO.SYS)
 17831                                  	; (SYSINIT:0809h)
 17832                                  	
 17833                                  	;mov	si,(offset command_line+1)
 17834 000007C4 BE[AA02]                	mov	si,command_line+1
 17835 000007C7 1E                      	push    ds
 17836 000007C8 07                      	pop     es
 17837 000007C9 89F7                    	mov     di,si
 17838 000007CB B1FF                    	mov     cl,0FFh ; -1
 17839                                  _@_loop:
 17840 000007CD FEC1                    	inc     cl ; +1
 17841 000007CF AC                      	lodsb
 17842 000007D0 AA                      	stosb
 17843 000007D1 08C0                    	or      al,al
 17844 000007D3 75F8                    	jnz     short _@_loop
 17845 000007D5 4F                      	dec     di
 17846 000007D6 B00D                    	mov     al,0Dh
 17847 000007D8 AA                      	stosb			; cr-terminate command line
 17848 000007D9 880E[A902]              	mov     [command_line],cl ; command line length (except CR)
 17849                                  
 17850                                  ; ----------------------------------------------------------------------------
 17851                                  
 17852                                  ;   Once we get to this point, the above code, which is below "retry"
 17853                                  ;   in memory, can be trashed (and in fact is -- see references to retry
 17854                                  ;   which follow....)
 17855                                  
 17856                                  retry:
 17857 000007DD BA[5D34]                	mov	dx,commnd	; now pointing to file description
 17858                                  
 17859                                  ; we are going to open the command interpreter and size it as is done in
 17860                                  ; ldfil. the reason we must do this is that sysinit is in free memory. if
 17861                                  ; there is not enough room for the command interpreter,exec will probably
 17862                                  ; overlay our stack and code so when it returns with an error sysinit won't be
 17863                                  ; here to catch it. this code is not perfect (for instance .exe command
 17864                                  ; interpreters are possible) because it does its sizing based on the
 17865                                  ; assumption that the file being loaded is a .com file. it is close enough to
 17866                                  ; correctness to be usable.
 17867                                  
 17868                                  ; first, find out where the command interpreter is going to go.
 17869                                  
 17870 000007E0 52                      	push	dx		; save pointer to name
 17871 000007E1 BBFFFF                  	mov	bx,0FFFFh
 17872 000007E4 B448                    	mov	ah,48h	; ALLOC
 17873 000007E6 CD21                            int     21h             ; get biggest piece
 17874 000007E8 B448                    	mov	ah,48h	; ALLOC
 17875 000007EA CD21                    	int	21h		; second time gets it
 17876 000007EC 7243                    	jc	short memerrjx	; oooops
 17877                                  
 17878 000007EE 8EC0                    	mov	es,ax
 17879 000007F0 B449                    	mov	ah,49h	; DEALLOC
 17880 000007F2 CD21                    	int	21h		; give it right back
 17881 000007F4 89DD                    	mov	bp,bx
 17882                                  
 17883                                  ; es:0 points to block,and bp is the size of the block in para.
 17884                                  
 17885                                  ; we will now adjust the size in bp down by the size of sysinit.
 17886                                  ; we need to do this because exec might get upset if some of the exec
 17887                                  ; data in sysinit is overlayed during the exec.
 17888                                  
 17889                                  	; 22/10/2022
 17890                                  	; (MSDOS 5.0 IO.SYS SYSINIT:083Bh)
 17891 000007F6 8B1E[9202]                      mov     bx,[MEMORY_SIZE] ; get location of end of memory
 17892 000007FA 8CC8                    	mov	ax,cs		 ; get location of beginning of sysinit
 17893                                  
 17894                                  ; Note that the "config_wrkseg" environment data is a segment in
 17895                                  ; unallocated memory (as of the Dealloc of [area], above). This is ideal
 17896                                  ; in one sense, because Exec is going to make a copy of it for COMMAND.COM
 17897                                  ; anyway, and no one has responsibility for freeing "config_wrkseg". But
 17898                                  ; we need to make sure that there's no way Exec will stomp on that data
 17899                                  ; before it can copy it, and one way to do that is to make the available
 17900                                  ; memory calculation even more "paranoid", by subtracting "config_wrkseg"
 17901                                  ; from the "memory_size" segment value (which is typically A000h) instead
 17902                                  ; of the current sysinit CS....
 17903                                  ;
 17904                                  ; The reason I use the term "paranoid" is because this code should have
 17905                                  ; slid the data required by Exec up to the very top of memory, because as
 17906                                  ; it stands, you have to have sizeof(COMMAND.COM) PLUS 64K to load just
 17907                                  ; COMMAND.COM (64k is about what sysinit, and all the goop above sysinit,
 17908                                  ; consumes). Now it's just a little worse (65K or more, depending on
 17909                                  ; the size of your CONFIG.SYS, since the size of the environment workspace
 17910                                  ; is determined by the size of CONFIG.SYS.... -JTP
 17911                                  
 17912                                  	; 22/10/2022
 17913                                  	;mov	cx,[config_envlen]
 17914                                          ;jcxz	no_env		; use config_wrkseg only if there's env data
 17915                                          ;mov	ax,[config_wrkseg]
 17916                                  ;no_env:
 17917                                  	; 22/10/2022
 17918                                  	; (MSDOS 5.0 IO.SYS SYSINIT:0841h)
 17919 000007FC 29C3                      	sub     bx,ax           ; bx is size of sysinit in para
 17920 000007FE 83C311                  	add	bx,11h		; add the sysinit php
 17921 00000801 29DD                    	sub	bp,bx		; sub sysinit size from amount of free memory
 17922 00000803 722C                    	jc	short memerrjx	; if there isn't even this much memory, give up
 17923                                  
 17924                                          ;mov	ax,(OPEN<<8)	; open the file being execed
 17925 00000805 B8003D                          mov	ax,3D00h
 17926 00000808 F9                      	stc                     ; in case of int 24
 17927 00000809 CD21                    	int	21h
 17928 0000080B 7241                    	jc	short comerr	; ooops
 17929                                  			; DOS - 2+ - OPEN DISK FILE WITH HANDLE
 17930                                  			; DS:DX -> ASCIZ filename
 17931                                  			; AL = access mode
 17932                                  			; 0 - read
 17933                                  	; 22/10/2022
 17934                                  	; (MSDOS 5.0 IO.SYS SYSINIT:0852h)
 17935 0000080D 89C3                            mov     bx,ax           ; handle in bx
 17936                                  
 17937                                  ;   If the standard command interpreter is being used, verify it is correct
 17938                                  
 17939                                  	; 22/10/2022
 17940                                  	;cmp	byte [newcmd],0	; was a new shell selected?
 17941                                  	;jne	short skip_validation ; yes
 17942                                  	;mov	dx,retry-4
 17943                                  	;mov	cx,4		;
 17944                                  	;mov	ah,READ		;
 17945                                  	;int	21h		;
 17946                                  	;cmp	byte [retry-4],0E9h
 17947                                  	;jne	short comerr
 17948                                  	;; 20/04/2019 - Retro DOS v4.0
 17949                                  	;cmp	byte [retry-1],64h ; MSDOS 6.21 IO.SYS - SYSINIT:088Ch
 17950                                  	;;cmp	byte [retry-1],((MAJOR_VERSION&0Fh)<<4)|(MINOR_VERSION&0Fh)
 17951                                  	;jne	short comerr	;
 17952                                  
 17953                                  ;skip_validation:
 17954                                  	; 22/10/2022
 17955                                  	; (MSDOS 5.0 IO.SYS SYSINIT:0854h)
 17956 0000080F 31C9                    	xor	cx,cx
 17957 00000811 31D2                    	xor	dx,dx
 17958                                  	;mov	ax,(LSEEK<<8)|2
 17959 00000813 B80242                  	mov	ax,4202h
 17960 00000816 F9                      	stc			;in case of int 24
 17961 00000817 CD21                    	int	21h		; get file size in dx:ax
 17962 00000819 7233                    	jc	short comerr
 17963                                  				; convert size in dx:ax to para in ax
 17964 0000081B 83C00F                  	add	ax,15		; round up size for conversion to para
 17965 0000081E 83D200                  	adc	dx,0
 17966 00000821 E8AA03                  	call	off_to_para
 17967 00000824 B10C                    	mov	cl,12
 17968 00000826 D3E2                    	shl	dx,cl		; low nibble of dx to high nibble
 17969 00000828 09D0                    	or	ax,dx		; ax is now # of para for file
 17970 0000082A 83C010                  	add	ax,10h		; 100h byte php
 17971 0000082D 39E8                    	cmp	ax,bp		; will command fit in available mem?
 17972 0000082F 7203                    	jb	short okld	; jump if yes.
 17973                                  
 17974                                  	; 22/10/2022
 17975                                  memerrjx:	; (MSDOS 5.0 IO.SYS SYSINIT:0876h)
 17976                                  	;jmp	memerr	; (MSDOS 5.0 IO.SYS SYSINIT:34D5h)
 17977                                  	; 02/11/2022
 17978                                  	;jmp	mem_err
 17979                                  	; 11/12/2022
 17980                                  	; ds = cs
 17981 00000831 E9D728                  	jmp	mem_err2
 17982                                  
 17983                                  ;memerrjx:
 17984                                  ;	mov	dx,badmem
 17985                                  ;	call	print
 17986                                  ;       jmp     short continue
 17987                                  
 17988                                  okld:
 17989 00000834 B43E                    	mov	ah,3Eh ; CLOSE
 17990 00000836 CD21                    	int	21h		; close file
 17991                                  
 17992                                  	; 22/10/2022
 17993 00000838 5A                      	pop	dx	; (MSDOS 5.0 IO.SYS SYSINIT:087Dh)
 17994                                  
 17995                                  	; 24/03/2019
 17996                                  
 17997 00000839 0E                      	push	cs		; point es to sysinitseg
 17998 0000083A 07                      	pop	es
 17999 0000083B BB[3B03]                        mov     bx,COMEXE	; point to exec block
 18000                                  	; 22/10/2022
 18001                                  	;pop	dx              ; recover pointer to name
 18002                                  
 18003                                  ;;ifdef	MULTI_CONFIG
 18004                                  
 18005                                  ;   If there's any environment data in "config_wrkseg", pass it to shell;
 18006                                  ;   there will be data if there were any valid SET commands and/or if a menu
 18007                                  ;   selection was made (in which case the CONFIG environment variable will be
 18008                                  ;   set to that selection).
 18009                                  
 18010                                  	; 23/10/2022
 18011                                  	;mov	cx,[config_envlen]
 18012                                  	;jcxz	no_envdata
 18013                                          ;mov	cx,[config_wrkseg]
 18014                                  ;no_envdata:
 18015                                  	;;mov	[bx+EXEC0.ENVIRON],cx
 18016                                  	;mov	[bx],cx
 18017                                  
 18018                                  ;;endif	;MULTI_CONFIG
 18019                                  
 18020                                  	; 23/10/2022
 18021                                  	; (MSDOS 5.0 IO.SYS SYSINIT:0883h)
 18022                                  
 18023                                  	;mov	[bx+EXEC0.COM_LINE+2],cs ; set segments
 18024 0000083E 8C4F04                  	mov	[bx+4],cs
 18025                                  	;mov	[bx+EXEC0.5C_FCB+2],cs
 18026 00000841 8C4F08                  	mov	[bx+8],cs
 18027                                  	;mov	[bx+EXEC0.6C_FCB+2],cs
 18028 00000844 8C4F0C                  	mov	[bx+12],cs
 18029                                  
 18030                                  	;mov	ax,(EXEC<<8) + 0
 18031                                  	; 23/10/2022
 18032 00000847 31C0                    	xor	ax,ax
 18033 00000849 B44B                    	mov	ah,4Bh        
 18034                                  
 18035 0000084B F9                      	stc                     ; in case of int 24
 18036 0000084C CD21                            int     21h             ; go start up command
 18037                                  			; DOS - 2+ - LOAD OR EXECUTE (EXEC)
 18038                                  			; DS:DX -> ASCIZ filename
 18039                                  			; ES:BX -> parameter block
 18040                                  			; AL = subfunc: load & execute program
 18041                                  	;push	cs
 18042                                  	;pop	ds
 18043                                  
 18044                                  	; 23/10/2022
 18045                                  	;push	dx		; push to balance fall-through pop
 18046                                  
 18047                                  ; note fall through if exec returns (an error)
 18048                                  comerr:
 18049                                  	; 23/10/2022
 18050                                  ;;ifdef	MULTI_CONFIG
 18051                                  	;cmp	byte [commnd4],0
 18052                                  	;je	short comerr2	; all defaults exhausted, print err msg
 18053                                  	;cmp	byte [newcmd],0
 18054                                  	;je	short continue	; don't print err msg for defaults just yet
 18055                                  ;comerr2:
 18056                                  ;;endif
 18057 0000084E BA[AD37]                        mov     dx,badcom	; want to print command error
 18058 00000851 E8072B                  	call	badfil
 18059                                  continue:
 18060                                  	; 23/10/2022
 18061                                  	;pop	dx
 18062                                  
 18063                                  ;;ifndef MULTI_CONFIG
 18064                                  	;jmp	stall
 18065                                  	; 24/10/2022
 18066                                  stall:		; (MSDOS 5.0 IO.SYS, SYSINIT:0899h)
 18067 00000854 EBFE                    	jmp	short stall
 18068                                  ;;else
 18069                                  	; 23/10/2022
 18070                                  	;mov	ah,GET_DEFAULT_DRIVE ; 19h
 18071                                  	;int	21h             ;
 18072                                  	;add	al,'A'          ;
 18073                                  	;mov	dl,al           ; DL == default drive letter
 18074                                  	;mov	si,commnd2
 18075                                  	;cmp	byte [newcmd],0 ; if a SHELL= was given
 18076                                  	;jne	short do_def2	; then try the 2nd alternate;
 18077                                  	;mov	byte [si],0	; otherwise, the default SHELL= was tried,
 18078                                  	;jmp	short do_def3   ; which is the same as our 2nd alt, so skip it
 18079                                  ;do_def2:			
 18080                                  	;cmp	byte [si],0	; has 2nd alternate been tried?
 18081                                          ;jne	short do_alt    ; no
 18082                                  ;do_def3:
 18083                                  	;mov	si,commnd3
 18084                                  	;cmp	byte [si],0	; has 3rd alternate been tried?
 18085                                  	;jne	short do_alt	; no
 18086                                  	;mov	si,commnd4
 18087                                  	;cmp	byte [si],0	; has 4th alternate been tried?
 18088                                  	;jne	short do_alt	; no
 18089                                  	;push	dx              ;
 18090                                  	;mov	dx,badcomprmpt
 18091                                  	;call	print		;
 18092                                  	;pop	dx              ; recover default drive letter in DL
 18093                                  ;request_input:			;
 18094                                  	;mov	ah,STD_CON_OUTPUT
 18095                                  	;int	21h             ;
 18096                                  	;push	dx              ;
 18097                                  	;mov	dl,'>'          ;
 18098                                  	;int	21h             ;
 18099                                  	;mov	bl,[tmplate+1]	;
 18100                                  	;mov	bh,0            ;
 18101                                  	;mov	byte [commnd+bx],0Dh
 18102                                  	;mov	dx,tmplate
 18103                                  	;mov	ah,STD_CON_STRING_INPUT
 18104                                  	;int	21h             ; read a line of input
 18105                                  	;mov	dx,crlfm	;
 18106                                  	;call	print           ;
 18107                                  	;pop	dx              ;
 18108                                  	;mov	bl,[tmplate+1]	;
 18109                                  	;or	bl,bl           ; was anything typed?
 18110                                  	;jz	short request_input ;
 18111                                  	;mov	byte [newcmd],1 ; disable validation for user-specified binaries
 18112                                  	;mov	byte [commnd+bx],0 ; NULL-terminate it before execing it
 18113                                  	;mov	word [command_line],0D00h
 18114                                  	;jmp	short do_exec   ;
 18115                                  ;do_alt:
 18116                                  	;push	ds
 18117                                  	;pop	es
 18118                                  	;mov	byte [newcmd],0 ; force validation for alternate binaries
 18119                                  	;mov	di,commnd	;
 18120                                  ;do_alt1:
 18121                                  	;lodsb			; copy the alternate, zapping it as we go,
 18122                                  	;mov	byte [si-1],0	; so that we know it's been tried
 18123                                  	;stosb 			;
 18124                                  	;or	al,al		;
 18125                                  	;jnz	short do_alt1	;
 18126                                  	;mov	di,command_line
 18127                                  	;cmp	byte [si+2],':'
 18128                                  	;jne	short do_alt2	;
 18129                                  	;mov	[si+1],dl	; stuff default drive into alt. command line
 18130                                  ;do_alt2:			;
 18131                                  	;lodsb			;
 18132                                  	;stosb			;
 18133                                  	;or	al,al           ;
 18134                                  	;jnz	short do_alt2   ;
 18135                                  	;mov	byte [di-1],cr
 18136                                  
 18137                                  ;;   Last but not least, see if we need to call disable_autoexec
 18138                                  
 18139                                  	; MSDOS 6.0 (SYSINIT1.ASM)
 18140                                  	;;cmp	[command_line-1],0
 18141                                          ;;jne	short do_exec   ;
 18142                                          ;;mov	[command_line-1],'/'
 18143                                  	;;call	disable_autoexec ;
 18144                                  
 18145                                  	; MSDOS 6.21 IO.SYS (SYSINIT:0994h)
 18146                                  	;mov	byte [dae_flag],0 ; 24/03/2019 - Retro DOS v4.0 	
 18147                                  	;call	disable_autoexec
 18148                                  	;call	CheckQueryOpt	; 24/03/2019 - Retro DOS v4.0
 18149                                  ;do_exec:
 18150                                  	;jmp     retry		;
 18151                                  
 18152                                  ;;endif	;MULTI_CONFIG
 18153                                  
 18154                                  ; 24/03/2019 - Retro DOS v4.0
 18155                                  
 18156                                  ; ----------------------------------------------------------------------
 18157                                  ; procedure : AllocFreeMem
 18158                                  ;
 18159                                  ; Allocate Max memory from DOS to find out where to load DOS.
 18160                                  ; DOS is at temporary location when this call is being made
 18161                                  ;
 18162                                  ; Inputs : None
 18163                                  ; Outputs: The biggest chunk of memory is allocated (all mem at init time)
 18164                                  ;	   [area] & [memhi] set to the para value of the start of the
 18165                                  ;	   free memory.
 18166                                  ;
 18167                                  ; Uses   : AX, BX
 18168                                  ;
 18169                                  ; ----------------------------------------------------------------------
 18170                                  
 18171                                  	; 23/10/2022
 18172                                  AllocFreeMem:
 18173 00000856 BBFFFF                  	mov	bx,0FFFFh
 18174 00000859 B448                    	mov	ah,48h ; ALLOC
 18175 0000085B CD21                    	int	21h			; first time fails
 18176 0000085D B448                    	mov	ah,48h ; ALLOC
 18177 0000085F CD21                    	int	21h			; second time gets it
 18178                                  	; 11/12/2022
 18179                                  	; ds = cs
 18180                                  	;mov	[cs:area],ax
 18181                                  	;mov	[cs:memhi],ax		; memhi:memlo now points to
 18182 00000861 A3[E403]                	mov	[area],ax
 18183 00000864 A3[E003]                	mov	[memhi],ax		; memhi:memlo now points to			
 18184 00000867 C3                      	retn				; start of free memory
 18185                                  				
 18186                                  	; include msbio.cl6
 18187                                  ; ----------------------------------------------------------------------
 18188                                  DOSLOMSG:
 18189 00000868 484D41206E6F742061-     	db	'HMA not available: Loading DOS low',0Dh,0Ah,'$'
 18189 00000871 7661696C61626C653A-
 18189 0000087A 204C6F6164696E6720-
 18189 00000883 444F53206C6F770D0A-
 18189 0000088C 24                 
 18190                                  FEmsg:
 18191 0000088D 466174616C20457272-     	db	'Fatal Error: Cannot allocate Memory for DOS',0Dh,0Ah,'$'
 18191 00000896 6F723A2043616E6E6F-
 18191 0000089F 7420616C6C6F636174-
 18191 000008A8 65204D656D6F727920-
 18191 000008B1 666F7220444F530D0A-
 18191 000008BA 24                 
 18192                                  
 18193                                  ; ----------------------------------------------------------------------
 18194                                  ;
 18195                                  ; procedure : LoadDOSHiOrLo
 18196                                  ;
 18197                                  ;		Tries to move DOS into HMA. If it fails then loads
 18198                                  ;		DOS into Low memory. For ROMDOS, nothing is actually
 18199                                  ;		moved; this just tries to allocate the HMA, and prints
 18200                                  ;		a message if this is not possible.
 18201                                  ;
 18202                                  ; ----------------------------------------------------------------------
 18203                                  
 18204                                  	; 23/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 18205                                  LoadDOSHiOrLo:
 18206                                  	; 27/03/2019 - Retro DOS v4.0
 18207                                  	; ds = cs
 18208 000008BB E81F00                  	call	TryToMovDOSHi		; Try moving it into HMA (M024)
 18209                                  	;jc	short LdngLo		; If that don't work...
 18210                                  	;retn
 18211                                  	; 18/12/2022
 18212 000008BE 731C                    	jnc	short LoadDosHi_ok
 18213                                  LdngLo:
 18214                                  	; 23/10/2022
 18215                                  	;push	cs
 18216                                  	;pop	ds
 18217                                  	; 11/12/2022
 18218                                  	; ds = cs
 18219 000008C0 B409                    	mov	ah,9
 18220 000008C2 BA[6808]                	mov	dx,DOSLOMSG		; inform user that we are
 18221 000008C5 CD21                    	int	21h			; loading low
 18222                                  
 18223                                  ;ifndef ROMDOS
 18224                                  	; actually move the dos, and reinitialize it.
 18225                                  
 18226 000008C7 BB0100                  	mov	bx,1				; M012
 18227                                  						;  use int 21 alloc for mem
 18228 000008CA E83F00                  	call	MovDOSLo
 18229                                  	; 11/12/2022
 18230                                  	; ds = cs
 18231                                  	;mov	es,[cs:CURRENT_DOS_LOCATION]	; give dos its temporary loc.
 18232                                  	; 23/10/2022
 18233 000008CD 8E06[7102]              	mov	es,[CURRENT_DOS_LOCATION]
 18234                                  	;;mov	es,[cs:FINAL_DOS_LOCATION]  ; 24/03/2019 - Retro DOS v4.0
 18235                                  	;mov	es,[FINAL_DOS_LOCATION] ; 27/03/2019
 18236 000008D1 31C0                    	xor	ax,ax				; ax = 00 ---> install stub
 18237                                  	; 11/12/2022
 18238                                  	; ds = cs
 18239                                  	;call	far [cs:dos_segreinit]		; call dos segreinit
 18240 000008D3 FF1E[7B02]              	call	far [dos_segreinit] ; 27/03/2019
 18241                                  	
 18242                                  ;endif ; ROMDOS
 18243                                  	; 23/10/2022
 18244                                  	;mov	byte [cs:runhigh],0		; mark that we are running lo
 18245                                  	; 11/12/2022
 18246                                  	; ds = cs
 18247 000008D7 C606[6A02]00            	mov	byte [runhigh],0 ; 27/03/2019
 18248                                  LoadDosHi_ok:	; 18/12/2022
 18249 000008DC C3                      	retn
 18250                                  
 18251                                  ; ----------------------------------------------------------------------
 18252                                  ;
 18253                                  ; procedure : TryToMovDOSHi
 18254                                  ;
 18255                                  ;		This tries to move DOS into HMA.
 18256                                  ;		Returns CY if it failed.
 18257                                  ;		If it succeeds returns with carry cleared.
 18258                                  ;
 18259                                  ;		For ROMDOS, dos_segreinit must be called again to allow
 18260                                  ;		the A20 switching code in the low mem stub to be installed.
 18261                                  ; 
 18262                                  ; ----------------------------------------------------------------------
 18263                                  
 18264                                  	; 23/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 18265                                  	; (MSDOS 5.0 IO.SYS - SYSINIT:092Ah)
 18266                                  TryToMovDOSHi:
 18267                                  	; 11/12/2022
 18268                                  	; 27/03/2019 - Retro DOS v4.0
 18269                                  	; ds = cs
 18270 000008DD E81300                  	call	MovDOSHi
 18271 000008E0 7210                    	jc	short ttldhx
 18272                                  
 18273                                  ;ifndef ROMDOS
 18274                                  	; 23/10/2022
 18275                                  	;mov	es,[cs:CURRENT_DOS_LOCATION] ; give dos its temporary loc.
 18276                                  	;;mov	es,[cs:FINAL_DOS_LOCATION] ; 24/03/2019 - Retro DOS v4.0
 18277                                  	; 11/12/2022
 18278                                  	; ds = cs
 18279 000008E2 8E06[7102]              	mov	es,[CURRENT_DOS_LOCATION]
 18280                                  ;else
 18281                                  ;	..
 18282                                  ;endif ; ROMDOS
 18283                                  
 18284                                  	; 11/12/2022
 18285                                  	; ds = cs
 18286 000008E6 31C0                    	xor	ax,ax			; ax = 00 ---> install stub
 18287                                  	;call	far [cs:dos_segreinit]	; call dos segreinit
 18288 000008E8 FF1E[7B02]              	call	far [dos_segreinit]
 18289                                  	;mov	byte [cs:runhigh],1
 18290 000008EC C606[6A02]01            	mov	byte [runhigh],1
 18291 000008F1 F8                      	clc
 18292                                  ttldhx:
 18293 000008F2 C3                      	retn
 18294                                  
 18295                                  ; ----------------------------------------------------------------------
 18296                                  ;
 18297                                  ; procedure : MovDOSHi
 18298                                  ;
 18299                                  ;		Tries to allocate HMA and Move DOS/BIOS code into HMA
 18300                                  ;		For ROMDOS, the code is not actually moved, but the
 18301                                  ;		HMA is allocated and prepared for sub-allocation.
 18302                                  ;
 18303                                  ;		Returns : CY if it failed
 18304                                  ;
 18305                                  ; ----------------------------------------------------------------------
 18306                                  
 18307                                  	; 23/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 18308                                  MovDOSHi:
 18309                                  	; 14/05/2019
 18310                                  	; 27/03/2019 - Retro DOS v4.0
 18311                                  	; ds = cs
 18312 000008F3 E8D800                  	call	AllocHMA
 18313 000008F6 7213                    	jc	short mdhx			; did we get HMA?
 18314 000008F8 B8FFFF                  	mov	ax,0FFFFh			; yes, HMA seg = 0ffffh
 18315 000008FB 8EC0                    	mov	es,ax
 18316                                  
 18317                                  ;ifndef ROMDOS
 18318                                  	; actually move the BIOS and DOS
 18319                                  
 18320                                  	; NOTE: Retro DOS v4.0 does not move BIOS (IO.SYS) to HMA
 18321                                  	; 24/03/2019
 18322                                  	
 18323                                  	; 23/10/2022
 18324 000008FD E83400                  	call	MovBIOS				; First move BIOS into HMA
 18325                                  
 18326                                  	; ES:DI points to free HMA after BIOS
 18327                                  	
 18328                                  	; 14/05/2019
 18329                                  	; 24/03/2019 - Retro DOS v4.0
 18330                                  	;xor	di,di
 18331                                  	
 18332                                  	; 23/10/2022
 18333                                  	;mov	cx,[cs:hi_doscod_size]		; pass the code size of DOS
 18334                                  	; 11/12/2022
 18335                                  	; ds = cs
 18336 00000900 8B0E[8102]              	mov	cx,[hi_doscod_size]		; when it is in HMA
 18337 00000904 E81100                  	call	MovDOS				; and move it
 18338                                  
 18339                                  	; ES:DI points to free HMA after DOS
 18340                                  ;else
 18341                                  ;	; allocate space at beginning of HMA to allow for CPMHack
 18342                                  ;
 18343                                  ;	mov	di,0E0h				; room for 5 bytes at ffff:d0
 18344                                  ;
 18345                                  ;endif ; ROMDOS
 18346                                  
 18347 00000907 E86202                  	call	SaveFreeHMAPtr			; Save the Free HMA ptr
 18348 0000090A F8                      	clc
 18349                                  mdhx:
 18350 0000090B C3                      	retn
 18351                                  
 18352                                  ; ----------------------------------------------------------------------
 18353                                  ;
 18354                                  ; procedure : MovDOSLo
 18355                                  ;
 18356                                  ;		Allocates memory from DOS and moves BIOS/DOS code into it
 18357                                  ;
 18358                                  ; ----------------------------------------------------------------------
 18359                                  
 18360                                  	; 23/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 18361                                  
 18362                                  ;ifndef ROMDOS
 18363                                  
 18364                                  MovDOSLo:
 18365                                  	; 14/05/2019
 18366                                  	; 27/03/2019 - Retro DOS v4.0
 18367                                  	; ds = cs
 18368 0000090C E84800                  	call	AllocMemForDOS			; incestuosly!!!
 18369                                  	
 18370                                  	; 23/10/2022
 18371                                  	; 14/05/2019
 18372                                  	;inc	ax  ; skip MCB
 18373                                  	
 18374 0000090F 8EC0                    	mov	es,ax				; pass the segment to MovBIOS
 18375                                  	; NOTE: Retro DOS v4.0 does not move BIOS (IO.SYS) to HMA
 18376                                  	; 24/03/2019
 18377                                  	
 18378                                  	; 23/10/2022
 18379 00000911 E82000                  	call	MovBIOS
 18380                                  
 18381                                  ;------ ES:DI points memory immediately after BIOS
 18382                                  
 18383                                  	; 14/05/2019
 18384                                  	; NOTE: 
 18385                                  	;     Order of (RETRO) DOS kernel sections at memory:
 18386                                  	;	BIOSDATA+BIOSCODE+BIOSDATAINIT+DOSDATA+DOSCODE(LOW)
 18387                                  
 18388                                  	; 24/03/2019 - Retro DOS v4.0
 18389                                  	;xor	di,di	
 18390                                  
 18391                                  	; 23/10/2022
 18392                                  	;mov	cx,[cs:lo_doscod_size]		; DOS code size when loaded
 18393                                  	; 11/12/2022
 18394                                  	; ds = cs
 18395 00000914 8B0E[7F02]              	mov	cx,[lo_doscod_size]		; low
 18396                                  	;call	MovDOS
 18397                                  	;retn
 18398                                  	; 11/12/2022
 18399                                  	;jmp	short MovDOS
 18400                                  
 18401                                  ;endif ; ROMDOS
 18402                                  
 18403                                  ; 11/12/2022
 18404                                  
 18405                                  ; ----------------------------------------------------------------------
 18406                                  ;
 18407                                  ; procedure : MovDOS
 18408                                  ;
 18409                                  ;		Moves DOS code into requested area
 18410                                  ;
 18411                                  ;	In : ES:DI - pointer to memory where DOS is to be moved
 18412                                  ;	     CX    - size of DOS code to be moved
 18413                                  ;
 18414                                  ;	Out : ES:DI - pointer to memory immediately after DOS
 18415                                  ;
 18416                                  ; ----------------------------------------------------------------------
 18417                                  
 18418                                  	; 11/12/2022
 18419                                  	; 23/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 18420                                  
 18421                                  ;ifndef ROMDOS
 18422                                  
 18423                                  MovDOS:
 18424                                  	; 14/05/2019
 18425                                  	; 27/03/2019 - Retro DOS v4.0
 18426                                  
 18427                                  	; 11/12/2022
 18428                                  	; ds = cs
 18429                                  
 18430                                  	; 23/10/2022
 18431                                  	;push	ds ; *//
 18432                                  	
 18433 00000918 06                      	push	es
 18434 00000919 57                      	push	di
 18435                                  
 18436                                  	; 11/12/2022
 18437 0000091A 1E                      	push	ds ; *// ; 11/12/202
 18438                                  
 18439                                  	; 29/04/2019
 18440 0000091B C536[6F02]              	lds	si,[dosinit] ; 11/12/2022
 18441                                  	; 23/10/2022
 18442                                  	;lds	si,[cs:dosinit]
 18443                                  	;;mov	ax,si
 18444                                  
 18445 0000091F F3A4                    	rep	movsb
 18446                                  
 18447 00000921 1F                      	pop	ds ; *// ; 11/12/2022
 18448                                  
 18449 00000922 5B                      	pop	bx				; get back offset into which
 18450                                  						;  DOS was moved
 18451                                  
 18452 00000923 2EA1[6F02]              	mov	ax,[cs:dosinit]			; get the offset at which DOS
 18453                                  						;  wants to run
 18454 00000927 29D8                    	sub	ax,bx
 18455 00000929 E8A202                  	call	off_to_para
 18456 0000092C 5B                      	pop	bx				; get the segment at which
 18457                                  						;  we moved DOS into
 18458 0000092D 29C3                    	sub	bx,ax				; Adjust segment
 18459                                  	
 18460                                  	; 11/12/2022
 18461                                  	; 23/10/2022
 18462                                  	;mov	[cs:CURRENT_DOS_LOCATION],bx	; and save it
 18463                                  	;;mov	[cs:FINAL_DOS_LOCATION],bx
 18464                                  	; 11/12/2022
 18465 0000092F 891E[7102]              	mov	[CURRENT_DOS_LOCATION],bx
 18466                                  		
 18467                                  	; 27/03/2019
 18468                                  	;pop	ds ; *//
 18469                                  	; ds = cs
 18470                                  	;mov	[FINAL_DOS_LOCATION],bx
 18471                                  
 18472 00000933 C3                      	retn
 18473                                  
 18474                                  ;endif ;ROMDOS
 18475                                  
 18476                                  ; NOTE: Retro DOS v4.0 does not move BIOS (IO.SYS) to HMA
 18477                                  ; 24/03/2019
 18478                                  ; ----------------------------------------------------------------------
 18479                                  ;
 18480                                  ; procedure : MovBIOS
 18481                                  ;
 18482                                  ;		Moves BIOS code into requested segment
 18483                                  ;
 18484                                  ;	In : ES - segment to which BIOS is to be moved
 18485                                  ;		  ( it moves always into offset BCode_Start)
 18486                                  ;
 18487                                  ;	Out : ES:DI - pointer to memory immediately after BIOS
 18488                                  ;
 18489                                  ; ----------------------------------------------------------------------
 18490                                  
 18491                                  	; 23/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 18492                                  
 18493                                  ;ifndef ROMDOS
 18494                                  
 18495                                  MovBIOS: ; proc	near
 18496                                  	; 11/12/2022
 18497 00000934 1E                      	push	ds ; ds = cs	
 18498                                  	;
 18499                                  	; 23/10/2022
 18500 00000935 2E8E1E[8702]            	mov	ds,[cs:temp_bcode_seg]		; current BIOS code seg
 18501                                  	;mov	si,BCODE_START ; mov si,30h
 18502                                  	; 09/12/2022
 18503 0000093A BE[3000]                	mov	si,BCODESTART
 18504 0000093D 89F7                    	mov	di,si
 18505 0000093F B9001A                  	mov	cx,BCODE_END ; mov cx,1A60h
 18506 00000942 29F1                    	sub	cx,si				; size of BIOS
 18507 00000944 D1E9                    	shr	cx,1				; Both the labels are para
 18508                                  						;  aligned
 18509 00000946 F3A5                    	rep	movsw
 18510                                  	
 18511                                  	; 11/12/2022
 18512 00000948 1F                      	pop	ds ; ds = cs
 18513                                  	;
 18514 00000949 06                      	push	es
 18515 0000094A 57                      	push	di				; save end of BIOS
 18516 0000094B 8CC0                    	mov	ax,es
 18517                                  	;
 18518                                  	; 11/12/2022
 18519                                  	;mov	[cs:BCodeSeg],ax		; save it for later use
 18520                                  	;;call	dword ptr cs:_seg_reinit_ptr
 18521                                  	;call	far [cs:seg_reinit_ptr]		; far call to seg_reinit (M022)
 18522                                  	; ds = cs
 18523 0000094D A3[0004]                	mov	[BCodeSeg],ax
 18524 00000950 FF1E[8502]              	call	far [seg_reinit_ptr]
 18525                                  	;
 18526 00000954 5F                      	pop	di
 18527 00000955 07                      	pop	es				; get back end of BIOS
 18528 00000956 C3                      	retn
 18529                                  
 18530                                  ;MovBIOS endp
 18531                                  
 18532                                  ;endif ; ROMDOS
 18533                                  
 18534                                  ; 11/12/2022
 18535                                  %if 0
 18536                                  
 18537                                  ; 24/03/2019
 18538                                  
 18539                                  ; ----------------------------------------------------------------------
 18540                                  ;
 18541                                  ; procedure : MovDOS
 18542                                  ;
 18543                                  ;		Moves DOS code into requested area
 18544                                  ;
 18545                                  ;	In : ES:DI - pointer to memory where DOS is to be moved
 18546                                  ;	     CX    - size of DOS code to be moved
 18547                                  ;
 18548                                  ;	Out : ES:DI - pointer to memory immediately after DOS
 18549                                  ;
 18550                                  ; ----------------------------------------------------------------------
 18551                                  
 18552                                  	; 23/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 18553                                  
 18554                                  ;ifndef ROMDOS
 18555                                  
 18556                                  MovDOS:
 18557                                  	; 14/05/2019
 18558                                  	; 27/03/2019 - Retro DOS v4.0
 18559                                  
 18560                                  	; 11/12/2022
 18561                                  	; ds = cs
 18562                                  
 18563                                  	; 23/10/2022
 18564                                  	;push	ds ; *//
 18565                                  	
 18566                                  	push	es
 18567                                  	push	di
 18568                                  
 18569                                  	; 11/12/2022
 18570                                  	push	ds ; *// ; 11/12/202
 18571                                  
 18572                                  	; 29/04/2019
 18573                                  	lds	si,[dosinit] ; 11/12/2022
 18574                                  	; 23/10/2022
 18575                                  	;lds	si,[cs:dosinit]
 18576                                  	;;mov	ax,si
 18577                                  
 18578                                  	rep	movsb
 18579                                  
 18580                                  	pop	ds ; *// ; 11/12/2022
 18581                                  
 18582                                  	pop	bx				; get back offset into which
 18583                                  						;  DOS was moved
 18584                                  
 18585                                  	mov	ax,[cs:dosinit]			; get the offset at which DOS
 18586                                  						;  wants to run
 18587                                  	sub	ax,bx
 18588                                  	call	off_to_para
 18589                                  	pop	bx				; get the segment at which
 18590                                  						;  we moved DOS into
 18591                                  	sub	bx,ax				; Adjust segment
 18592                                  	
 18593                                  	; 11/12/2022
 18594                                  	; 23/10/2022
 18595                                  	;mov	[cs:CURRENT_DOS_LOCATION],bx	; and save it
 18596                                  	;;mov	[cs:FINAL_DOS_LOCATION],bx
 18597                                  	; 11/12/2022
 18598                                  	mov	[CURRENT_DOS_LOCATION],bx
 18599                                  		
 18600                                  	; 27/03/2019
 18601                                  	;pop	ds ; *//
 18602                                  	; ds = cs
 18603                                  	;mov	[FINAL_DOS_LOCATION],bx
 18604                                  
 18605                                  	retn
 18606                                  
 18607                                  ;endif ;ROMDOS
 18608                                  
 18609                                  %endif
 18610                                  
 18611                                  ; ----------------------------------------------------------------------
 18612                                  ;
 18613                                  ; procedure : AllocMemForDOS
 18614                                  ;
 18615                                  ;		Allocate memory for DOS/BIOS code from DOS !!!
 18616                                  ;
 18617                                  ;	Out : AX - seg of allocated memoryblock
 18618                                  ;
 18619                                  ; ----------------------------------------------------------------------
 18620                                  
 18621                                  	; 23/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 18622                                  
 18623                                  ;ifndef ROMDOS
 18624                                  
 18625                                  AllocMemForDOS:
 18626                                  	; 11/12/2022
 18627                                  	; 14/05/2019
 18628                                  	; 27/03/2019 - Retro DOS v4.0
 18629                                  	; ds = cs
 18630                                  	;mov	ax,BCode_end
 18631                                  	;sub	ax,BCode_start		; BIOS code size
 18632                                  	; 23/10/2022
 18633 00000957 B8001A                  	mov	ax,BCODE_END ; 1A60h
 18634                                  	;sub	ax,BCODE_START ; 30h
 18635                                  	; 09/12/2022
 18636 0000095A 2D[3000]                	sub	ax,BCODESTART 
 18637                                  	; 24/03/2019 - Retro DOS v4.0 
 18638                                  	; 02/11/2022
 18639                                  	;add	ax,[cs:lo_doscod_size]	; DOS code size
 18640                                  	; 11/12/2022
 18641                                  	; ds = cs
 18642 0000095D 0306[7F02]              	add	ax,[lo_doscod_size]
 18643 00000961 83C00F                  	add	ax,15
 18644 00000964 E86702                  	call	off_to_para			; convert to para
 18645                                  	; 23/10/2022
 18646                                  	; 14/05/2019
 18647                                  	;inc	ax ; + 1 paragraph for MCB
 18648 00000967 09DB                    	or	bx,bx				; M012
 18649 00000969 89C3                    	mov	bx,ax				;  can we use int 21 for alloc
 18650 0000096B 741A                    	jz	short update_arena		; M012
 18651 0000096D B448                    	mov	ah,48h				; request DOS
 18652 0000096F CD21                    	int	21h
 18653 00000971 7250                    	jc	short FatalErr			; IF ERR WE ARE HOSED
 18654                                   	; 23/10/2022
 18655                                  	; 24/03/2019 - Retro DOS v4.0 (ORG 0)
 18656 00000973 83E803                  	sub	ax,3				; Take care ORG 30h of
 18657                                  						;  BIOS code
 18658 00000976 8EC0                    	mov	es,ax
 18659                                  	;mov	word [es:20h+ARENA.OWNER],08h	; mark it as system
 18660                                  	;mov	word [es:20h+ARENA.NAME],'SC'	;  code area
 18661                                  	; 14/05/2019
 18662                                  	;mov	word [es:ARENA.OWNER],08h	; mark it as system
 18663                                  	;mov	word [es:ARENA.NAME],'SC'	;  code area
 18664                                  	; 23/10/2022
 18665 00000978 26C70621000800          	mov	word [es:20h+1],08h		; mark it as system
 18666 0000097F 26C70628005343          	mov	word [es:20h+8],'SC'		;  code area
 18667                                  
 18668 00000986 C3                      	retn
 18669                                  
 18670                                  ; BUGBUG -- 5 Aug 92 -- chuckst -- Allocating space for DOS
 18671                                  ;	  using DOS itself causes an arena to be generated.
 18672                                  ;	  Unfortunately, certain programs (like PROTMAN$)
 18673                                  ;	  assume that the device drivers are loaded into
 18674                                  ;	  the first arena. For this reason, MagicDrv's
 18675                                  ;	  main device driver header arena is manually
 18676                                  ;	  truncated from the arena chain, and the space
 18677                                  ;	  for DOS is allocated using the following
 18678                                  ;	  simple code, which also assumes that the
 18679                                  ;	  first arena is the free one where DOS's low
 18680                                  ;	  stub will go.
 18681                                  ;
 18682                                  ; M012 : BEGIN
 18683                                  
 18684                                  	; 23/10/2022
 18685                                  update_arena:
 18686 00000987 1E                      	push	ds ; ds = cs
 18687 00000988 57                      	push	di
 18688 00000989 51                      	push	cx
 18689 0000098A 52                      	push	dx
 18690                                  	; 23/10/2022
 18691                                  	;lds	di,[cs:DOSINFO]			; get ptr to DOS var
 18692                                  	; 11/12/2022
 18693                                  	; ds = cs 
 18694 0000098B C53E[6B02]              	lds	di,[DOSINFO] ; 27/03/2019	
 18695 0000098F 4F                      	dec	di
 18696 00000990 4F                      	dec	di				; Arena head is immediately
 18697                                  						;  before sysvar
 18698 00000991 8E05                    	mov	es,[di]				; es = arena head
 18699                                  	;mov	cx,[es:ARENA.SIZE]		; cx = total low mem size
 18700 00000993 268B0E0300              	mov	cx,[es:3]
 18701 00000998 39D9                    	cmp	cx,bx				; is it sufficient ?
 18702 0000099A 7227                    	jb	short FatalErr			; no, fatal error
 18703                                  
 18704                                  	;mov	dl,[es:ARENA.SIGNATURE]
 18705 0000099C 268A160000              	mov	dl,[es:0]
 18706 000009A1 8CC0                    	mov	ax,es
 18707 000009A3 01D8                    	add	ax,bx				; ax = new arena head
 18708 000009A5 8905                    	mov	[di],ax				; store it in DOS data area
 18709 000009A7 8ED8                    	mov	ds,ax
 18710                                  	;mov	[ARENA.SIGNATURE],dl		; type of arena
 18711 000009A9 88160000                	mov	[0],dl
 18712                                  	;mov	word [ARENA.OWNER],0		; free
 18713 000009AD C70601000000            	mov	word [1],0
 18714 000009B3 29D9                    	sub	cx,bx				; size of the new block
 18715                                  	;mov	[ARENA.SIZE],cx			; store it in the arena
 18716 000009B5 890E0300                	mov	[3],cx
 18717 000009B9 8CC0                    	mov	ax,es				; return seg to the caller
 18718                                  	; 23/10/2022
 18719                                  	;; 24/03/2019 - Retro DOS v4.0 (ORG 0)	; Take care ORG 30h of
 18720 000009BB 83E803                  	sub	ax,3				;  BIOS code
 18721 000009BE 5A                      	pop	dx
 18722 000009BF 59                      	pop	cx
 18723 000009C0 5F                      	pop	di
 18724 000009C1 1F                      	pop	ds ; ds = cs
 18725 000009C2 C3                      	retn
 18726                                  ;
 18727                                  ; M012 : END
 18728                                  ;
 18729                                  FatalErr:
 18730 000009C3 0E                      	push	cs
 18731 000009C4 1F                      	pop	ds
 18732 000009C5 BA[8D08]                	mov	dx,FEmsg
 18733 000009C8 B409                    	mov	ah,9
 18734 000009CA CD21                    	int	21h 		; DOS - PRINT STRING
 18735                                  				; DS:DX -> string terminated by "$"
 18736                                          ;jmp	stall
 18737                                  	; 23/10/2022
 18738 000009CC FA                      	cli
 18739 000009CD F4                      	hlt
 18740                                  
 18741                                  ;endif ;ROMDOS
 18742                                  
 18743                                  ; 25/03/2019 - Retro DOS v4.0
 18744                                  
 18745                                  ; ----------------------------------------------------------------------
 18746                                  ;
 18747                                  ; procedure : AllocHMA
 18748                                  ;
 18749                                  ;	grab_the_hma tries to enable a20 and make sure there is memory
 18750                                  ;	  up there. If it gets any sort of error, it will return with
 18751                                  ;	  carry set so that we can resort to running low.
 18752                                  ;
 18753                                  ;	It also returns ES: -> 0ffffh if it returns success
 18754                                  ;
 18755                                  ; ----------------------------------------------------------------------
 18756                                  
 18757                                  AllocHMA:
 18758                                  ;	cas note:  The pre-286 check is no longer needed here since the
 18759                                  ;		   presence of XMS is sufficient. However, this code hasn't
 18760                                  ;		   been deleted because it can be recycled for skipping the
 18761                                  ;		   extra pass of CONFIG.SYS and assuming we're running low
 18762                                  ;		   in the case of a pre-286.
 18763                                  
 18764                                  ;;	see if we're running on a pre-286. If not, force low.
 18765                                  ;
 18766                                  ;	xor	ax,ax
 18767                                  ;	pushf			; save flags (like int)
 18768                                  ;	push	ax
 18769                                  ;	popf
 18770                                  ;	pushf
 18771                                  ;	pop	ax
 18772                                  ;	popf			; restore original flags (like int)
 18773                                  ;	and	ax,0F000h
 18774                                  ;	cmp	ax,0F000h	; 8088/8086?
 18775                                  ;	jz	short grab_hma_error
 18776                                  
 18777                                  	; 23/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 18778                                  	; (SYSINIT:0A26h)
 18779                                  
 18780 000009CE 1E                      	push	ds
 18781                                  	;;mov	ax,Bios_Data
 18782                                  	;mov	ax,KERNEL_SEGMENT
 18783                                  	; 21/10/2022
 18784 000009CF B87000                  	mov	ax,DOSBIODATASEG
 18785 000009D2 8ED8                    	mov	ds,ax
 18786                                  
 18787 000009D4 E84A00                  	call	IsXMSLoaded
 18788 000009D7 7545                    	jnz	short grabhma_error
 18789                                  
 18790 000009D9 B81043                  	mov	ax,4310h
 18791 000009DC CD2F                    	int	2Fh		; get the vector into es:bx
 18792                                  		; - Multiplex - XMS - GET DRIVER ADDRESS
 18793                                  		; Return: ES:BX -> driver entry point
 18794                                  
 18795 000009DE 891E[0E00]              	mov	[xms],bx
 18796                                  	;mov	[0Eh], bx
 18797 000009E2 8C06[1000]              	mov	[xms+2],es
 18798                                  	;mov	[10h],es
 18799                                  
 18800 000009E6 B401                    	mov	ah,1		; request HMA
 18801 000009E8 BAFFFF                  	mov	dx,0FFFFh
 18802                                  	;call	dword ptr ds:0Eh
 18803 000009EB FF1E[0E00]              	call	far [xms]
 18804 000009EF 48                      	dec	ax
 18805 000009F0 7409                    	jz	short allocHMA_1 ; error if not able to allocate HMA
 18806                                  
 18807                                  ;------ Himem may be lying because it has allocated mem for int 15
 18808                                  
 18809 000009F2 B488                    	mov	ah,88h
 18810 000009F4 CD15                    	int	15h
 18811                                  		; Get Extended Memory Size
 18812                                  		; Return: CF clear on success
 18813                                  		; AX = size of memory above 1M in K
 18814 000009F6 83F840                  	cmp	ax,64		; less than 64 K of hma ?
 18815                                  	;jb	short grabhma_error
 18816                                  	; 11/12/2022
 18817 000009F9 7224                    	jb	short grabhma_err ; cf=1
 18818                                  allocHMA_1:
 18819 000009FB B405                    	mov	ah,5		; localenableA20
 18820                                  	;call	dword ptr ds:0Eh
 18821 000009FD FF1E[0E00]              	call	far [xms]
 18822 00000A01 48                      	dec	ax
 18823 00000A02 751A                    	jnz	short grabhma_error ; error if couldn't enable A20
 18824                                  
 18825 00000A04 E88901                  	call	IsVDiskInstalled
 18826 00000A07 7415                    	jz	short grabhma_error ; yes, we cant use HMA
 18827                                  
 18828 00000A09 B8FFFF                  	mov	ax,0FFFFh
 18829 00000A0C 8EC0                    	mov	es,ax
 18830 00000A0E 26C70610003412          	mov	word [es:10h],1234h ; see if we can really read/write there
 18831 00000A15 26813E10003412          	cmp	word [es:10h],1234h
 18832                                  	;jne	short grabhma_error ; don't try to load there if XMS lied
 18833                                  	; 11/12/2022
 18834 00000A1C 7401                    	je	short allocHMA_ok	
 18835                                  
 18836                                  ; 11/12/2022
 18837                                  ;	; 11/12/2022
 18838                                  ;	; cf=0
 18839                                  ;	;clc
 18840                                  ;	pop	ds
 18841                                  ;	retn
 18842                                  
 18843                                  grabhma_error:
 18844 00000A1E F9                      	stc
 18845                                  	; 11/12/022
 18846                                  grabhma_err:	; cf=1
 18847                                  allocHMA_ok:	; cf=0
 18848 00000A1F 1F                      	pop	ds
 18849 00000A20 C3                      	retn
 18850                                  
 18851                                  ; ----------------------------------------------------------------------
 18852                                  ;
 18853                                  ; procedure : IsXMSLoaded
 18854                                  ;
 18855                                  ;             Checks whether a XMS driver is loaded
 18856                                  ;
 18857                                  ; Returns : Z flag set if XMS driver loaded
 18858                                  ;           Z flag reset if no XMS drivers are present
 18859                                  ;
 18860                                  ; ----------------------------------------------------------------------
 18861                                  
 18862                                  IsXMSLoaded:
 18863 00000A21 B80043                  	mov	ax,4300h
 18864 00000A24 CD2F                    	int	2Fh		; - Multiplex - XMS - INSTALLATION CHECK
 18865                                  				; Return: AL = 80h XMS driver installed
 18866                                  				; AL <> 80h no driver
 18867 00000A26 3C80                    	cmp	al,80h		; XMS installed?
 18868 00000A28 C3                      	retn
 18869                                  
 18870                                  ; ----------------------------------------------------------------------
 18871                                  ; procedure : FTryToMovDOSHi
 18872                                  ;
 18873                                  ;		Called from HMA suballoc calls
 18874                                  ;	
 18875                                  ; ----------------------------------------------------------------------
 18876                                  
 18877                                  	; 23/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 18878                                  	; (SYSINIT:0A84h)
 18879                                  
 18880                                  FTryToMovDOSHi:	; proc	far
 18881                                  
 18882 00000A29 50                      	push	ax
 18883 00000A2A 53                      	push	bx
 18884 00000A2B 51                      	push	cx
 18885 00000A2C 52                      	push	dx
 18886 00000A2D 56                      	push	si
 18887 00000A2E 57                      	push	di
 18888 00000A2F 1E                      	push	ds
 18889 00000A30 06                      	push	es
 18890                                  
 18891                                  	; 23/10/2022
 18892                                  	; 27/03/2019 - Retro DOS v4.0
 18893                                  	; 11/12/2022
 18894 00000A31 0E                      	push	cs
 18895 00000A32 1F                      	pop	ds
 18896                                  
 18897                                  	;cmp	byte [cs:runhigh],0FFh
 18898                                  	; 11/12/2022
 18899 00000A33 803E[6A02]FF            	cmp	byte [runhigh],0FFh
 18900 00000A38 7503                    	jne	short _ftymdh_1
 18901                                  
 18902                                  	; ds = cs
 18903 00000A3A E8A0FE                  	call	TryToMovDOSHi
 18904                                  _ftymdh_1:
 18905 00000A3D 07                      	pop	es
 18906 00000A3E 1F                      	pop	ds
 18907 00000A3F 5F                      	pop	di
 18908 00000A40 5E                      	pop	si
 18909 00000A41 5A                      	pop	dx
 18910 00000A42 59                      	pop	cx
 18911 00000A43 5B                      	pop	bx
 18912 00000A44 58                      	pop	ax
 18913                                  
 18914 00000A45 CB                      	retf
 18915                                  
 18916                                  ; ----------------------------------------------------------------------
 18917                                  ;
 18918                                  ; following piece of code will be moved into a para boundary. And the para
 18919                                  ; address posted in seg of int 19h vector. Offset of int 19h will point to
 18920                                  ; VDint19. This is to protect HMA from apps which use VDISK header method
 18921                                  ; to determine free extended memory.
 18922                                  ;
 18923                                  ; For more details read "power programming" column by Ray Duncan in the
 18924                                  ; May 30 1989 issue of PC Magazine (pp 377-388) [USING EXTENDED MEMORY,PART 1]
 18925                                  ;
 18926                                  ; ----------------------------------------------------------------------
 18927                                  
 18928                                  StartVDHead:
 18929                                  ;-------------- what follows is a dummy device driver header (not used by DOS)
 18930                                  
 18931 00000A46 00000000                	dd	0		; link to next device driver
 18932 00000A4A 0080                    	dw	8000h		; device attribute
 18933 00000A4C 0000                    	dw	0		; strategy routine offset
 18934 00000A4E 0000                    	dw	0		; interrupt routine offset
 18935 00000A50 01                      	db	1		; number of units
 18936                                  	;db	7 dup(0) 
 18937 00000A51 00<rep 7h>              	times	7 db 0 		; reserved area
 18938                                  VDiskSig1:
 18939 00000A58 564449534B              	db	'VDISK'
 18940                                  
 18941                                  VLEN1	equ	($-VDiskSig1)
 18942                                  
 18943 00000A5D 202056332E33            	db	'  V3.3'	; vdisk label
 18944                                  	;db	15 dup (0)	; pad
 18945 00000A63 00<rep Fh>              	times	15 db 0
 18946 00000A72 0000                    	dw	0		; bits 0-15 of free HMA
 18947 00000A74 11                      	db	11h		; bits 16-23 of free HMA (1M + 64K)
 18948                                  VDInt19:
 18949 00000A75 EA                      	db	0EAh		; jmp to old vector
 18950                                  OldVDInt19:
 18951 00000A76 00000000                	dd	0		; Saved int 19 vector
 18952                                  
 18953                                  EndVDHead: ; label byte
 18954                                  
 18955                                  VDiskHMAHead:	
 18956 00000A7A 000000                  	db	0,0,0		; non-bootable disk
 18957                                  VDiskSig2:
 18958 00000A7D 564449534B              	db	'VDISK'
 18959                                  
 18960                                  VLEN2	equ	($-VDiskSig2)
 18961                                  
 18962 00000A82 332E33                  	db	'3.3'		; OEM - signature
 18963 00000A85 8000                    	dw	128		; number of bytes/sector
 18964 00000A87 01                      	db	1		; sectors/cluster
 18965 00000A88 0100                    	dw	1		; reserved sectors
 18966 00000A8A 01                      	db	1		; number of FAT copies
 18967 00000A8B 4000                    	dw	64		; number of root dir entries
 18968 00000A8D 0002                    	dw	512		; number of sectors
 18969 00000A8F FE                      	db	0FEh		; media descriptor
 18970 00000A90 0600                    	dw	6		; number of sectors/FAT
 18971 00000A92 0800                    	dw	8		; sectors per track
 18972 00000A94 0100                    	dw	1		; number of heads
 18973 00000A96 0000                    	dw	0		; number of hidden sectors
 18974 00000A98 4004                    	dw	440h		; Start of free HMA in K (1M+64K)
 18975                                  
 18976                                  EndVDiskHMAHead: ; label byte
 18977                                  
 18978                                  ; ----------------------------------------------------------------------
 18979                                  ;
 18980                                  ; procedure : InstVDiskHeader
 18981                                  ;
 18982                                  ;             Installs the VDISK header to reserve the 64k of HMA
 18983                                  ;	      It puts a 32 byte header at 10000:0 and
 18984                                  ;	      another header at (seg of int19):0
 18985                                  ;
 18986                                  ; Inputs : None
 18987                                  ;
 18988                                  ; Outputs : None
 18989                                  ;
 18990                                  ; USES : DS,SI,AX,CX,DX
 18991                                  ;
 18992                                  ; ----------------------------------------------------------------------
 18993                                  
 18994                                  	; 23/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 18995                                  
 18996                                  InstVDiskHeader:
 18997 00000A9A 31C0                    	xor	ax,ax
 18998 00000A9C 8ED8                    	mov	ds,ax			; seg of int vect table
 18999                                  
 19000                                  ;-------------- save old int 19 vector
 19001                                  
 19002                                  	; 23/10/2022
 19003 00000A9E A16400                  	mov	ax,[19h*4]
 19004                                  	;mov	[OldVDInt19],ax
 19005 00000AA1 2EA3[760A]              	mov	[cs:OldVDInt19],ax
 19006 00000AA5 A16600                  	mov	ax,[19h*4+2]
 19007                                  	;mov	[OldVDInt19+2],ax
 19008 00000AA8 2EA3[780A]              	mov	[cs:OldVDInt19+2],ax
 19009                                  
 19010                                  ;-------------- calculate seg of new int 19 handler
 19011                                  
 19012 00000AAC B448                    	mov	ah,48h			; allocate memory
 19013                                  	;mov	bx,(EndVDHead-StartVDHead+15)>>4
 19014                                  	; 23/10/2022
 19015 00000AAE BB0400                  	mov	bx,4
 19016 00000AB1 CD21                    	int	21h
 19017                                  
 19018                                  ;	if carry, fatal hanging error!!!!!
 19019                                  
 19020 00000AB3 48                      	dec	ax			; point to arena
 19021 00000AB4 8EC0                    	mov	es,ax
 19022                                  	;mov	word [es:ARENA.OWNER],8	; owner = System
 19023 00000AB6 26C70601000800          	mov	word [es:1],8
 19024                                  	;mov	word [es:ARENA.NAME],'SC' ; System Code
 19025 00000ABD 26C70608005343          	mov	word [es:8],'SC'
 19026 00000AC4 40                      	inc	ax
 19027 00000AC5 8EC0                    	mov	es,ax			; get back to allocated memory
 19028                                  
 19029                                  ;-------------- install new int 19 vector
 19030                                  
 19031 00000AC7 FA                      	cli				; no reboots at this time
 19032                                  	;mov	word [19h*4],(VDInt19-StartVDHead)
 19033 00000AC8 C70664002F00            	mov	word [19h*4],47
 19034 00000ACE A36600                  	mov	[19h*4+2],ax
 19035                                  
 19036                                  ;-------------- move the code into proper place
 19037                                  
 19038                                  	;mov	cx,(EndVDHead-StartVDHead)
 19039 00000AD1 B93400                  	mov	cx,52
 19040 00000AD4 BE[460A]                	mov	si,StartVDHead
 19041 00000AD7 31FF                    	xor	di,di
 19042 00000AD9 0E                      	push	cs
 19043 00000ADA 1F                      	pop	ds
 19044 00000ADB FC                      	cld
 19045 00000ADC F3A4                    	rep	movsb
 19046 00000ADE FB                      	sti				; BUGBUG is sti OK now?
 19047                                  
 19048                                  ;-------------- mov the HMA VDisk head into HMA
 19049                                  
 19050                                  	; 23/10/2022
 19051 00000ADF 57                      	push	di
 19052 00000AE0 06                      	push	es
 19053                                  
 19054 00000AE1 B8FFFF                  	mov	ax,0FFFFh
 19055 00000AE4 8EC0                    	mov	es,ax
 19056 00000AE6 BF1000                  	mov	di,10h
 19057                                  	;mov	cx,(EndVDiskHMAHead-VDiskHMAHead)
 19058 00000AE9 B92000                  	mov	cx,32
 19059 00000AEC BE[7A0A]                	mov	si,VDiskHMAHead
 19060 00000AEF F3A4                    	rep	movsb			; ds already set to cs
 19061                                  
 19062 00000AF1 5F                      	pop	di
 19063 00000AF2 07                      	pop	es
 19064                                  
 19065 00000AF3 C3                      	retn
 19066                                  
 19067                                  ; ----------------------------------------------------------------------
 19068                                  ; procedure : ClrVDISKHeader
 19069                                  ;
 19070                                  ;		Clears the first 32 bytes at 1MB boundary
 19071                                  ;		So that DOS/HIMEM is not confused about the VDISK header
 19072                                  ;		left by previous DOS=HIGH session
 19073                                  ;
 19074                                  ; ----------------------------------------------------------------------
 19075                                  
 19076                                  struc desc
 19077 00000000 ????                     .seg_lim:	resw	1		; seg limit 64K 
 19078 00000002 ????                     .lo_word:	resw	1		; 24 bit seg physical 
 19079 00000004 ??                       .hi_byte:	resb 	1		; address
 19080 00000005 ??                       .acc_rights:	resb	1		; access rights ( CPL0 - R/W )
 19081 00000006 ????                     .reserved:	resw	1		;
 19082                                   .size:
 19083                                  endstruc
 19084                                  
 19085                                  		; 23/10/2022
 19086                                  bmove:		;label byte
 19087                                  
 19088                                  dummy:		;times desc.size db 0	; desc	<>
 19089 00000AF4 00<rep 8h>              		times 8 db 0		 
 19090                                  gdt:		;times desc.size db 0	; desc	<>
 19091 00000AFC 00<rep 8h>              		times 8 db 0
 19092 00000B04 FFFF                    src_desc:	dw	0FFFFh		; desc	<0ffffh,0,0,93h,0>
 19093 00000B06 0000                    		dw	0
 19094 00000B08 00                      		db	0
 19095 00000B09 93                      		db	93h
 19096 00000B0A 0000                    		dw	0
 19097 00000B0C FFFF                    tgt_desc:	dw	0FFFFh		; desc	<0ffffh,0,10h,93h,0>  ; 1MB
 19098 00000B0E 0000                    		dw	0
 19099 00000B10 10                      		db	10h
 19100 00000B11 93                      		db	93h
 19101 00000B12 0000                    		dw	0
 19102                                  
 19103                                  rombios_code:	;times desc.size db 0	; desc	<>
 19104 00000B14 00<rep 8h>              		times 8 db 0
 19105                                  temp_stack:	;times desc.size db 0	; desc	<>
 19106 00000B1C 00<rep 8h>              		times 8 db 0
 19107                                  
 19108 00000B24 00<rep 20h>             ClrdVDISKHead:	times 32 db 0		; db 32 dup (0)
 19109                                  
 19110                                  
 19111                                  ; 25/03/2019 - Retro DOS v4.0 (MSDOS 6.21 IO.SYS, MSDOS 6.0 SYSINIt1.ASM)
 19112                                  
 19113                                  ClrVDISKHeader:	; proc	near
 19114                                  
 19115                                  ;;-----------------------------------------------------------	      ;I070
 19116                                  ;; The following workaround get around a problem with the	      ;I070
 19117                                  ;; Tortugas and PS/2 30-286 BIOS when password server mode	      ;I070
 19118                                  ;; is set. On those machines the INT 15h block move code	      ;I070
 19119                                  ;; goes through the 8042 to twiddle A20 instead of port 92h.	      ;I070
 19120                                  ;; In password server mode the 8042 is disabled so the block	      ;I070
 19121                                  ;; move crashes the system. We can do this because these	      ;I070
 19122                                  ;; systems clear all of memory on a cold boot.			      ;I070
 19123                                  ;								      ;I070
 19124                                  ;               in      al,64h         ; Test for password servr mode ;I070
 19125                                  ;               test    al,10h         ; Is keyboard inhibited?	      ;I070
 19126                                  ;               jnz     short ClrVDISKok ; No, go do block move.      ;I070
 19127                                  ;                                      ; Check for Tortugas...	      ;I070
 19128                                  ;               cmp     word [cs:sys_model_byte],19F8h                ;I070
 19129                                  ;               je      short ClrVDISKno                              ;I070
 19130                                  ;                                      ; Check for mod 30-286	      ;I070
 19131                                  ;               cmp     word [cs:sys_model_byte],09FCh                ;I070
 19132                                  ;               jne     short ClrVDISKok			      ;I070
 19133                                  ;ClrVDISKno: 	retn	               ; Return w/o block move.	      ;I070
 19134                                  ;								      ;I070
 19135                                  ;ClrVDISKok:							      ;I070
 19136                                  ;-----------------------------------------------------------	      ;I070
 19137                                  
 19138                                  	; 12/12/2022
 19139                                  	; ds = cs
 19140                                  
 19141 00000B44 06                      	push	es
 19142 00000B45 8CC8                    	mov	ax,cs
 19143 00000B47 89C2                    	mov	dx,ax
 19144 00000B49 B10C                    	mov	cl,12
 19145 00000B4B D3EA                    	shr	dx,cl
 19146 00000B4D B104                    	mov	cl,4
 19147 00000B4F D3E0                    	shl	ax,cl
 19148 00000B51 05[240B]                	add	ax,ClrdVDISKHead
 19149 00000B54 80D200                  	adc	dl,0
 19150                                  
 19151                                  	;; 23/10/2022
 19152                                  	;;mov	[cs:src_desc+desc.lo_word],ax
 19153                                  	;mov	[cs:src_desc+2],ax
 19154                                  	;;mov	[cs:src_desc+desc.hi_byte],dl
 19155                                  	;mov	[cs:src_desc+4],dl
 19156                                  	; 12/12/2022
 19157                                  	;mov	[src_desc+desc.lo_word],ax
 19158 00000B57 A3[060B]                	mov	[src_desc+2],ax
 19159                                  	;mov	[src_desc+desc.hi_byte],dl
 19160 00000B5A 8816[080B]              	mov	[src_desc+4],dl
 19161                                  
 19162 00000B5E B91000                  	mov	cx,16	; 16 words
 19163 00000B61 0E                      	push	cs
 19164 00000B62 07                      	pop	es
 19165 00000B63 BE[F40A]                	mov	si,bmove
 19166 00000B66 B487                    	mov	ah,87h
 19167 00000B68 CD15                    	int	15h	; EXTENDED MEMORY - BLOCK MOVE (AT,XT286,PS)
 19168                                  			; CX = number of words to move 
 19169                                  			; ES:SI -> global descriptor table
 19170                                  			; Return: CF set on error, AH = status
 19171 00000B6A 07                      	pop	es
 19172 00000B6B C3                      	retn
 19173                                  
 19174                                  ; ----------------------------------------------------------------------
 19175                                  ;
 19176                                  ; procedure : SaveFreeHMAPtr
 19177                                  ;
 19178                                  ;		Save the Free HMA pointer in BIOS variable for later use.
 19179                                  ;		(INT 2f ax==4a01 call returns pointer to free HMA)
 19180                                  ;		Normalizes the pointer to ffff:xxxx format and stores only
 19181                                  ;		the offset.
 19182                                  ;
 19183                                  ; Inputs : ES:DI - pointer to free HMA
 19184                                  ; Output : FreeHMAPtr in BIOS data segment updated
 19185                                  ;
 19186                                  ; ----------------------------------------------------------------------
 19187                                  
 19188                                  SaveFreeHMAPtr:
 19189 00000B6C 8CC3                    	mov	bx,es
 19190 00000B6E B8FFFF                  	mov	ax,0FFFFh		; HMA segment
 19191 00000B71 29D8                    	sub	ax,bx
 19192 00000B73 83C70F                  	add	di,15			; para round
 19193 00000B76 83E7F0                  	and	di,0FFF0h
 19194 00000B79 B104                    	mov	cl,4
 19195 00000B7B D3E0                    	shl	ax,cl
 19196 00000B7D 29C7                    	sub	di,ax
 19197 00000B7F 1E                      	push	ds
 19198                                  	;;mov	ax,Bios_Data ; 0070h
 19199                                  	;mov	ax,KERNEL_SEGMENT ; 0070h
 19200                                  	; 21/10/2022
 19201 00000B80 B87000                  	mov	ax,DOSBIODATASEG ; 0070h
 19202 00000B83 8ED8                    	mov	ds,ax
 19203 00000B85 893E[F508]              	mov	[FreeHMAPtr],di	   ; (ds:8F7h for MSDOS 6.21 IO.SYS)
 19204 00000B89 C606[0D00]FF            	mov	byte [inHMA],0FFh  ; (ds:0Dh)
 19205 00000B8E 1F                      	pop	ds
 19206 00000B8F C3                      	retn
 19207                                  
 19208                                  ; ----------------------------------------------------------------------
 19209                                  ;
 19210                                  ; procedure : IsVDiskInstalled
 19211                                  ;
 19212                                  ;		Checks for the presence of VDISK header at 1MB boundary
 19213                                  ;		& INT 19 vector
 19214                                  ;
 19215                                  ; Inputs  : A20 flag should be ON
 19216                                  ; Outputs : Zero set if VDISK header found else Zero cleared
 19217                                  ;
 19218                                  ; ----------------------------------------------------------------------
 19219                                  
 19220                                  IsVDiskInstalled:
 19221 00000B90 31C0                    	xor	ax,ax
 19222 00000B92 8ED8                    	mov	ds,ax
 19223 00000B94 8E1E4E00                	mov	ds,[19*4+2]
 19224                                  	;mov	si,VDiskSig1-StartVDHead ; 12h
 19225                                  	; 23/10/2022
 19226 00000B98 BE1200                  	mov	si,18
 19227                                  	;mov	cx,VLEN1 ; 5
 19228 00000B9B B90500                  	mov	cx,5
 19229 00000B9E 0E                      	push	cs
 19230 00000B9F 07                      	pop	es
 19231 00000BA0 BF[580A]                	mov	di,VDiskSig1
 19232 00000BA3 F3A6                    	rep	cmpsb
 19233 00000BA5 7410                    	je	short ivdins_retn
 19234 00000BA7 B8FFFF                  	mov	ax,0FFFFh
 19235 00000BAA 8ED8                    	mov	ds,ax
 19236                                  	;mov	si,10h+(VDiskSig2-VDiskHMAHead) ; 13h
 19237 00000BAC BE1300                  	mov	si,13h
 19238 00000BAF BF[7D0A]                	mov	di,VDiskSig2
 19239                                  	;mov	cx,VLEN2  ; 5
 19240 00000BB2 B90500                  	mov	cx,5
 19241 00000BB5 F3A6                    	rep	cmpsb
 19242                                  ivdins_retn: 
 19243 00000BB7 C3                      	retn			; returns the Zero flag
 19244                                  
 19245                                  ; ----------------------------------------------------------------------
 19246                                  ;
 19247                                  ; procedure : CPMHack
 19248                                  ;
 19249                                  ;		Copies the code from 0:c0 into ffff:0d0h
 19250                                  ;		for CPM compatibility
 19251                                  ;
 19252                                  ; ----------------------------------------------------------------------
 19253                                  
 19254                                  	; 11/12/2022
 19255                                  CPMHack:
 19256 00000BB8 1E                      	push	ds
 19257 00000BB9 B9FFFF                  	mov	cx,0FFFFh
 19258 00000BBC 8EC1                    	mov	es,cx		; ES = FFFF
 19259                                  	;xor	cx,cx
 19260                                  	; 11/12/2022
 19261 00000BBE 41                      	inc	cx  ; cx = 0
 19262 00000BBF 8ED9                    	mov	ds,cx		; DS = 0
 19263 00000BC1 BEC000                  	mov	si,0C0h
 19264 00000BC4 BFD000                  	mov	di,0D0h
 19265                                  	;mov	cx,5
 19266 00000BC7 B105                    	mov	cl,5
 19267 00000BC9 FC                      	cld
 19268 00000BCA F3A4                    	rep	movsb		; move 5 bytes from 0:C0 to FFFF:D0
 19269 00000BCC 1F                      	pop	ds
 19270 00000BCD C3                      	retn
 19271                                  
 19272                                  ; ----------------------------------------------------------------------
 19273                                  ;
 19274                                  ; procedure : off_to_para
 19275                                  ;
 19276                                  ; ----------------------------------------------------------------------
 19277                                  off_to_para:
 19278 00000BCE D1E8                    	shr	ax,1
 19279 00000BD0 D1E8                    	shr	ax,1
 19280 00000BD2 D1E8                    	shr	ax,1
 19281 00000BD4 D1E8                    	shr	ax,1
 19282 00000BD6 C3                      	retn
 19283                                  
 19284                                  ; ----------------------------------------------------------------------
 19285                                  ;**	TempCDS - Create (Temporary?) CDS
 19286                                  ;
 19287                                  ;	ENTRY	?? BUGBUG
 19288                                  ;		(DS) = SysInitSeg
 19289                                  ;	EXIT	?? BUGBUG
 19290                                  ;	USES	?? BUGBUG
 19291                                  ; ----------------------------------------------------------------------
 19292                                  
 19293                                  	; 23/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 19294                                  TempCDS:
 19295 00000BD7 C43E[6B02]              	les	di,[DOSINFO]
 19296 00000BDB 268A4D20                	mov	cl,[es:di+SYSI_NUMIO]
 19297                                  	;mov	cl,[es:di+20h]
 19298 00000BDF 30ED                    	xor	ch,ch			; (cx) = # of block devices
 19299                                  
 19300 00000BE1 26884D21                	mov	[es:di+SYSI_NCDS],cl	; one CDS per device
 19301                                  	;mov	[es:di+21h],cl	
 19302                                  
 19303 00000BE5 88C8                    	mov	al,cl
 19304 00000BE7 B458                    	mov	ah,curdirlen ; curdir_list.size ; 88
 19305                                  	;mov	ah,88
 19306 00000BE9 F6E4                    	mul	ah			; (ax) = byte size for those CDSs
 19307 00000BEB E8D304                  	call	ParaRound		; (ax) = paragraph size for CDSs
 19308 00000BEE 8B36[A102]              	mov	si,[top_of_cdss] ; mov si,[CONFBOT]
 19309                                  
 19310                                  ;	BUGBUG - we don't update confbot - won't someone else use it?
 19311                                  ;	chuckst -- answer: no. Confbot is used to access the CDSs,
 19312                                  ;	25 jul 92  which are stored BELOW it. Alloclim is the
 19313                                  ;		   variable which has the top of free memory for
 19314                                  ;		   device driver loads, etc.
 19315                                  
 19316 00000BF2 29C6                    	sub	si,ax
 19317                                  
 19318                                  ;	chuckst, 25 Jul 92 -- note: I'm removing the code here
 19319                                  ;		that automatically updates alloclim every time we
 19320                                  ;		set up some new CDSs. Instead, I've added code
 19321                                  ;		which pre-allocates space for 26 CDSs. This
 19322                                  ;	        way we've got room for worst case CDSs before
 19323                                  ;		we place MagicDrv.sys
 19324                                  ;
 19325                                  ;	mov	[ALLOCLIM],si		; can't alloc past here!
 19326                                  
 19327                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 19328                                  	; (SYSINIT:0C52h)
 19329 00000BF4 8936[A302]              	mov	[ALLOCLIM],si
 19330                                  
 19331 00000BF8 26897518                	mov	[es:di+SYSI_CDS+2],si
 19332                                  	;mov	[es:di+18h],si
 19333 00000BFC 89F0                    	mov	ax,si
 19334 00000BFE 26C745160000            	mov	word [es:di+SYSI_CDS],0	; set address of CDS list
 19335                                  	;mov	[word es:di+16h],0
 19336                                  	;lds	si,[es:di+SYSI_DPB]	; (ds:si) = address of first DPB
 19337 00000C04 26C535                  	lds	si,[es:di]
 19338 00000C07 8EC0                    	mov	es,ax
 19339 00000C09 31FF                    	xor	di,di			; (es:di) = address of 1st CDS
 19340                                  
 19341                                  ;*	Initialize our temporary CDSs. We'll init each CDS with the
 19342                                  ;	info from the corresponding DPB.
 19343                                  ;
 19344                                  ;	(cx) = count of CDSs left to process
 19345                                  ;	(es:di) = address of next CDS
 19346                                  
 19347                                  fooset:
 19348                                  	; 23/10/2022
 19349 00000C0B 2EA1[A502]              	mov	ax,[cs:DirStrng] ; "A:"
 19350 00000C0F AB                      	stosw				; setup the root as the curdir
 19351                                  
 19352                                  	;call	get_dpb_for_drive_al	; get dpb for drive in dpb
 19353                                  
 19354                                  ;	(ds:si) = address of DPB
 19355                                  ;		 (si) = -1 if no drive
 19356                                  
 19357 00000C10 2EA1[A702]              	mov	ax,[cs:DirStrng+2] ; "\",0
 19358 00000C14 AB                      	stosw
 19359 00000C15 2EFE06[A502]            	inc	byte [cs:DirStrng]
 19360 00000C1A 31C0                    	xor	ax,ax
 19361 00000C1C 51                      	push	cx
 19362                                  	;mov	cx,curdir_list.cdir_flags - 4 ; 63
 19363 00000C1D B93F00                  	mov	cx,63	; 23/10/2022
 19364 00000C20 F3AA                    	rep	stosb			; zero out rest of CURDIR_TEXTs
 19365                                  
 19366                                  ;	should handle the system that does not have any floppies.
 19367                                  ;	in this case,we are going to pretended there are two dummy floppies
 19368                                  ;	in the system. still they have dpb and cds,but we are going to
 19369                                  ;	0 out curdir_flags,curdir_devptr of cds so ibmdos can issue
 19370                                  ;	"invalid drive specification" message when the user try to
 19371                                  ;	access them.
 19372                                  ;
 19373                                  ;	(ax) = 0
 19374                                  ;	(es:di) = CURDIR_FLAGS in the CDS records
 19375                                  ;	(ds:si) = Next DPB (-1 if none)
 19376                                  
 19377 00000C22 83FEFF                  	cmp	si,-1	; cmp si,0FFFFh
 19378 00000C25 7414                    	je	short fooset_zero	; don't have any physical drive.
 19379                                  
 19380                                  ;	check to see if we are faking floppy drives. if not go to normcds.
 19381                                  ;	if we are faking floppy drives then see if this cds being initialised
 19382                                  ;	is for drive a: or b: by checking the appropriate field in the dpb
 19383                                  ;	pointed to by ds:si. if not for a: or b: then go to normcds. if
 19384                                  ;	for a: or b: then execute the code given below starting at fooset_zero.
 19385                                  ;	for dpb offsets look at inc\dpb.inc.
 19386                                  
 19387 00000C27 2E803E[8902]01          	cmp	byte [cs:fake_floppy_drv],1
 19388 00000C2D 7513                    	jne	short normcds 		; machine has floppy drives
 19389                                  	;cmp	byte [si+DPB.drive],1	; if dpb_drive = 0 (a) or 1 (b).
 19390 00000C2F 803C01                  	cmp	byte [si],1
 19391 00000C32 770E                    	ja	short normcds
 19392 00000C34 B103                    	mov	cl,3			; the next dbp pointer
 19393                                  					; AX should be zero here
 19394 00000C36 F3AB                    	rep	stosw
 19395 00000C38 59                      	pop	cx
 19396 00000C39 EB18                    	jmp	short get_next_dpb
 19397                                  
 19398                                  ;	(ax) = 0
 19399                                  
 19400                                  fooset_zero:
 19401 00000C3B B103                    	mov	cl,3
 19402 00000C3D F3AB                    	rep	stosw
 19403 00000C3F 59                      	pop	cx
 19404 00000C40 EB14                    	jmp	short fincds
 19405                                  
 19406                                  ;*	We have a "normal" DPB and thus a normal CDS.
 19407                                  ;
 19408                                  ;	(ax) = 0
 19409                                  ;	(es:di) = CURDIR_FLAGS in the CDS records
 19410                                  ;	(ds:si) = Next DPB (-1 if none)
 19411                                  
 19412                                  normcds:
 19413 00000C42 59                      	pop	cx
 19414                                  
 19415                                  ;	if a non-fat based media is detected (by dpb.numberoffat == 0), then
 19416                                  ;	set curdir_flags to 0. this is for signaling ibmdos and ifsfunc that
 19417                                  ;	this media is a non-fat based one.
 19418                                  
 19419                                  	;cmp	byte [si+DPB.FAT_COUNT],0 ; non fat system?
 19420                                  	; 23/10/2022
 19421 00000C43 807C0800                	cmp	byte [si+8],0
 19422 00000C47 7403                    	je	short setnormcds	; yes. set curdir_flags to 0. ax = 0 now.
 19423 00000C49 B80040                  	mov	ax,curdir_inuse ; 4000h	; else,fat system. set the flag to curdir_inuse.
 19424                                  	;mov	ax,4000h
 19425                                  setnormcds:
 19426 00000C4C AB                      	stosw				; curdir_flags
 19427 00000C4D 89F0                    	mov	ax,si
 19428 00000C4F AB                      	stosw				; curdir_devptr
 19429 00000C50 8CD8                    	mov	ax,ds
 19430 00000C52 AB                      	stosw
 19431                                  
 19432                                  get_next_dpb:				; entry point for fake_fooset_zero
 19433                                  	; 23/10/2022
 19434 00000C53 C57419                  	lds	si,[si+19h]
 19435                                  	;lds	si,[si+DPB.NEXT_DPB] ; [si+19h]
 19436                                  fincds:
 19437 00000C56 B8FFFF                  	mov	ax,-1	; mov ax,0FFFFh
 19438 00000C59 AB                      	stosw				; curdir_id
 19439 00000C5A AB                      	stosw				; curdir_id
 19440 00000C5B AB                      	stosw				; curdir_user_word
 19441 00000C5C B80200                  	mov	ax,2
 19442 00000C5F AB                      	stosw				; curdir_end
 19443 00000C60 B000                    	mov	al,0			; clear out 7 bytes (curdir_type,
 19444 00000C62 AA                      	stosb
 19445 00000C63 AB                      	stosw				;  curdir_ifs_hdr,curdir_fsda)
 19446 00000C64 AB                      	stosw
 19447 00000C65 AB                      	stosw
 19448                                  
 19449 00000C66 E2A3                    	loop	fooset
 19450                                  	
 19451 00000C68 2EC606[A502]41          	mov	byte [cs:DirStrng],"A"	; "A:\"
 19452                                  	
 19453 00000C6E C3                      	retn
 19454                                  
 19455                                  ; ----------------------------------------------------------------------
 19456                                  ;***	get_dpb_for_drive_al -- lookup the DPB for drive in al
 19457                                  ;
 19458                                  ;	entry:
 19459                                  ;	   al == ASCII CAPS drive letter
 19460                                  ;
 19461                                  ;	exit:
 19462                                  ;	   ds:si -> DPB, or si = -1 if not found
 19463                                  ; ----------------------------------------------------------------------
 19464                                  
 19465                                  ;	; 23/10/2022 (get_dpb_for_drive_al
 19466                                  ;
 19467                                  ;get_dpb_for_drive_al:
 19468                                  ;	lds	si,[cs:DOSINFO]		; point to first DPB
 19469                                  ;	;lds	si,[si+SYSI_DPB]	; (ds:si) = address of first DPB
 19470                                  ;	lds	si,[si]
 19471                                  ;	sub	al,'A'
 19472                                  ;
 19473                                  ;get_dpb_for_drive_1:
 19474                                  ;	;cmp	al,[si+DPB.DRIVE]	; match?
 19475                                  ;	cmp	al,[si]
 19476                                  ;	je	short got_dpb_for_drive	;  done if so
 19477                                  ;
 19478                                  ;	lds	si,[si+DPB.NEXT_DPB] ; [si+19h]
 19479                                  ;	cmp	si,-1
 19480                                  ;	jne	short get_dpb_for_drive_1 ; loop until hit end of DPBs
 19481                                  ;
 19482                                  ;got_dpb_for_drive:
 19483                                  ;	retn
 19484                                  
 19485                                  ;=======================================================================
 19486                                  
 19487                                  ;**	EndFile - Build DOS structures
 19488                                  ;
 19489                                  ; This procedure is called after the config.sys has been processed and
 19490                                  ; installable device drivers have been loaded (but before "install="
 19491                                  ; programs are loaded) to create the dos structures such as SFTs, buffers,
 19492                                  ; FCBs, CDSs, etc. It also loads the sysinit_base module in low memory
 19493                                  ; to allow for the safe EXECing of "install=" programs. All memory
 19494                                  ; above these structures is deallocated back to DOS.
 19495                                  ;
 19496                                  ;	ENTRY	?? BUGBUG
 19497                                  ;	EXIT	?? BUGBUG
 19498                                  ;	USES	?? BUGBUG
 19499                                  
 19500                                  ;=======================================================================
 19501                                  ; allocate files
 19502                                  ; ----------------------------------------------------------------------
 19503                                  
 19504                                  	; 23/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 19505                                  	; (SYSINIT:0CCDh)
 19506                                  
 19507                                  endfile:
 19508                                  ; we are now setting up final cdss,buffers,files,fcss strings etc. we no
 19509                                  ; longer need the space taken by the temp stuff below confbot,so set alloclim
 19510                                  ; to confbot.
 19511                                  
 19512                                  ;	if this procedure has been called to take care of install= command,
 19513                                  ;	   then we have to save es,si registers.
 19514                                  
 19515                                  	; 11/12/2022
 19516                                  	; ds = cs
 19517                                  
 19518                                  	; 23/10/2022
 19519                                  	; 31/03/2019
 19520 00000C6F 1E                      	push	ds
 19521                                  
 19522                                  	;;mov	ax,Bios_Data ; 0070h
 19523                                  	;mov	ax,KERNEL_SEGMENT ; 0070h
 19524                                  	; 21/10/2022
 19525 00000C70 B87000                  	mov	ax,DOSBIODATASEG ; 0070h
 19526 00000C73 8ED8                    	mov	ds,ax
 19527                                  
 19528                                  	;cmp	word [052Fh],0
 19529 00000C75 833E[2F05]00            	cmp	word [multrk_flag],multrk_off1 ;=0,multrack= command entered?
 19530 00000C7A 7505                    	jne	short multrk_flag_done
 19531                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 19532                                  	;or	word [multrk_flag],multrk_on ; 80h  ; default will be on.
 19533                                  	; 12/12/2022
 19534 00000C7C 800E[2F05]80            	or	byte [multrk_flag],multrk_on ; 80h
 19535                                  multrk_flag_done:
 19536                                  	; 23/10/2022
 19537                                  	; 31/03/2019
 19538 00000C81 1F                      	pop	ds
 19539                                  
 19540                                  	; 11/12/2022
 19541                                  	; ds = cs
 19542 00000C82 A1[A102]                	mov	ax,[top_of_cdss] ; mov ax,[CONFBOT]
 19543 00000C85 A3[A302]                	mov	[ALLOCLIM],ax
 19544                                  	; 23/10/2022
 19545                                  	;mov	ax, [cs:top_of_cdss]
 19546                                  	;mov	[cs:ALLOCLIM], ax 
 19547                                  
 19548                                  	; 11/12/2022
 19549                                  	; ds = cs
 19550                                  	;push	cs
 19551                                  	;pop	ds
 19552                                  	
 19553                                  	;mov	ax,[CONFBOT]
 19554                                  	;mov	[ALLOCLIM],ax
 19555                                  
 19556 00000C88 E83D24                  	call	round
 19557                                  	; 11/12/2022
 19558                                  	; ds = cs
 19559 00000C8B A0[9D02]                	mov	al,[FILES]
 19560                                  	; 23/10/2022
 19561                                  	;mov	al,[cs:FILES]
 19562 00000C8E 2C05                    	sub	al,5
 19563 00000C90 764B                    	jbe	short dofcbs
 19564                                  
 19565 00000C92 50                      	push	ax
 19566                                  	;mov	al,devmark_files ; 'F'
 19567 00000C93 B046                    	mov	al,'F'
 19568 00000C95 E87B07                  	call	setdevmark		; set devmark for sfts (files)
 19569 00000C98 58                      	pop	ax
 19570 00000C99 30E4                    	xor	ah,ah			; do not use cbw instruction!!!!!
 19571                                  					;  it does sign extend.
 19572                                  	; 11/12/2022
 19573                                  	; ds = cs
 19574 00000C9B 8B1E[DE03]              	mov	bx,[memlo]
 19575 00000C9F 8B16[E003]              	mov	dx,[memhi]
 19576 00000CA3 C53E[6B02]              	lds	di,[DOSINFO]		;get pointer to dos data
 19577                                  	; 23/10/2022
 19578                                  	;mov	bx,[cs:memlo]
 19579                                  	;mov	dx,[cs:memhi]
 19580                                  	;lds	di,[cs:DOSINFO]		
 19581                                  
 19582                                  	;lds	di,[di+SYSI_SFT]	;ds:bp points to sft
 19583 00000CA7 C57D04                  	lds	di,[di+4]
 19584                                  
 19585                                  	;mov	[di+SF.SFLink],bx
 19586 00000CAA 891D                    	mov	[di],bx
 19587 00000CAC 895502                  	mov	[di+SF.SFLink+2],dx	;set pointer to new sft
 19588                                  
 19589 00000CAF 0E                      	push	cs
 19590 00000CB0 1F                      	pop	ds
 19591                                  
 19592                                  	; 11/12/2022
 19593                                  	; ds = cs
 19594 00000CB1 C43E[DE03]              	les	di,[memlo]		;point to new sft
 19595                                  	; 23/10/2022
 19596                                  	;les	di,[cs:memlo]
 19597                                  
 19598                                  	;mov	word [es:di+SF.SFLink],-1
 19599 00000CB5 26C705FFFF              	mov	word [es:di],-1		; 0FFFFh
 19600                                  	;mov	[es:di+SF.SFCount],ax
 19601 00000CBA 26894504                	mov	[es:di+4],ax
 19602                                  	;mov	bl,SF_ENTRY.size ; 59
 19603 00000CBE B33B                    	mov	bl,59
 19604 00000CC0 F6E3                    	mul	bl			;ax = number of bytes to clear
 19605 00000CC2 89C1                    	mov	cx,ax
 19606                                  	; 11/12/2022
 19607                                  	; ds = cs
 19608 00000CC4 0106[DE03]              	add	[memlo],ax		;allocate memory
 19609                                  	; 23/10/2022
 19610                                  	;add	[cs:memlo],ax
 19611 00000CC8 B80600                  	mov	ax,6
 19612                                  	; 11/12/2022
 19613 00000CCB 0106[DE03]              	add	[memlo],ax		;remember the header too
 19614                                  	;add	[cs:memlo],ax
 19615                                  	; 11/12/2022
 19616 00000CCF 800E[3614]02            	or	byte [setdevmarkflag],for_devmark ; 2
 19617                                  	; 23/10/2022
 19618                                  	;or	byte [cs:setdevmarkflag],2
 19619 00000CD4 E8F123                  	call	round			; check for mem error before the stosb
 19620 00000CD7 01C7                    	add	di,ax
 19621 00000CD9 31C0                    	xor	ax,ax
 19622 00000CDB F3AA                    	rep	stosb			;clean out the stuff
 19623                                  
 19624                                  ; allocate fcbs
 19625                                  ; ----------------------------------------------------------------------
 19626                                  
 19627                                  	; 23/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 19628                                  	; (SYSINIT:0D48h)
 19629                                  dofcbs:
 19630                                  	; 11/12/2022
 19631                                  	; ds = cs
 19632                                  	;push	cs
 19633                                  	;pop	ds
 19634 00000CDD E8E823                  	call	round
 19635                                  	;mov	al,devmark_fcbs	; 'X'	;='x'
 19636 00000CE0 B058                    	mov	al,'X'
 19637 00000CE2 E82E07                  	call	setdevmark
 19638                                  	; 11/12/2022
 19639                                  	; ds = cs
 19640 00000CE5 A0[9E02]                	mov	al,[FCBS]
 19641                                  	;mov	al,[cs:FCBS]
 19642 00000CE8 30E4                    	xor	ah,ah			; do not use cbw instruction!!!!!
 19643                                  					;  it does sign extend.
 19644                                  	; 11/12/2022
 19645 00000CEA 8B1E[DE03]              	mov	bx,[memlo]
 19646 00000CEE 8B16[E003]              	mov	dx,[memhi]
 19647 00000CF2 C53E[6B02]              	lds	di,[DOSINFO]		;get pointer to dos data
 19648                                  	; 23/10/2022
 19649                                  	;mov	bx,[cs:memlo]
 19650                                  	;mov	dx,[cs:memhi]
 19651                                  	;lds	di,[cs:DOSINFO]
 19652                                  
 19653                                  	;mov	[di+SYSI_FCB],bx
 19654                                  	;mov	[di+SYSI_FCB+2],dx ;set pointer to new table
 19655                                  	; 23/10/2022
 19656 00000CF6 895D1A                  	mov	[di+1Ah],bx		; [di+SYSI_FCB]
 19657 00000CF9 89551C                  	mov	[di+1Ch],dx		; [di+SYSI_FCB+2]
 19658                                  
 19659 00000CFC 2E8A1E[9F02]            	mov	bl,[cs:KEEP]
 19660 00000D01 30FF                    	xor	bh,bh
 19661                                  	;mov	[di+SYSI_KEEP],bx
 19662 00000D03 895D1E                  	mov	[di+1Eh],bx		; [di+SYSI_KEEP]	
 19663                                  
 19664 00000D06 0E                      	push	cs
 19665 00000D07 1F                      	pop	ds
 19666                                  	
 19667 00000D08 C43E[DE03]              	les	di,[memlo]		;point to new table
 19668                                  	;mov	word [es:di+SF.SFLink],-1
 19669 00000D0C 26C705FFFF              	mov	word [es:di],-1
 19670                                  	;mov	[es:di+SF.SFCount],ax
 19671                                  	; 02/11/2022
 19672 00000D11 26894504                	mov	[es:di+4],ax
 19673 00000D15 B339                    	mov	bl,SF_ENTRY.size ; 59
 19674 00000D17 89C1                    	mov	cx,ax
 19675 00000D19 F6E3                    	mul	bl			;ax = number of bytes to clear
 19676 00000D1B 0106[DE03]              	add	[memlo],ax		;allocate memory
 19677                                  	;mov	ax,6
 19678 00000D1F B80600                  	mov	ax,SF.size-2 ; 6
 19679 00000D22 0106[DE03]              	add	[memlo],ax		;remember the header too
 19680                                  	;or	byte [setdevmarkflag],for_devmark ; 2
 19681 00000D26 800E[3614]02            	or	byte [setdevmarkflag],2
 19682 00000D2B E89A23                  	call	round			; check for mem error before the stosb
 19683 00000D2E 01C7                    	add	di,ax			;skip over header
 19684 00000D30 B041                    	mov	al,'A'
 19685                                  fillloop:
 19686 00000D32 51                      	push	cx			; save count
 19687 00000D33 B93900                  	mov	cx,SF_ENTRY.size ; 59	; number of bytes to fill
 19688 00000D36 FC                      	cld
 19689 00000D37 F3AA                    	rep	stosb			; filled
 19690                                  
 19691                                  	;mov	word [es:di-(SF_ENTRY.size)+SF_ENTRY.sf_ref_count],0  ; [es:di-59]
 19692                                  	;mov	word [es:di-(SF_ENTRY.size)+SF_ENTRY.sf_position],0   ; [es:di-38]	
 19693                                  	;mov	word [es:di-(SF_ENTRY.size)+SF_ENTRY.sf_position+2],0 ; [es:di-36]
 19694                                  
 19695                                  	; 18/12/2022
 19696                                  	;cx = 0
 19697 00000D39 26894DC7                	mov	[es:di-(SF_ENTRY.size)+SF_ENTRY.sf_ref_count],cx ;0  ; [es:di-59]
 19698 00000D3D 26894DDC                	mov	[es:di-(SF_ENTRY.size)+SF_ENTRY.sf_position],cx ;0   ; [es:di-38]	
 19699 00000D41 26894DDE                	mov	[es:di-(SF_ENTRY.size)+SF_ENTRY.sf_position+2],cx ;0 ; [es:di-36]
 19700                                  	
 19701                                  	; 23/10/2022	
 19702                                  	;mov     word [es:di-3Bh],0
 19703                                  	;mov     word [es:di-26h],0
 19704                                  	;mov     word [es:di-24h],0
 19705                                  
 19706 00000D45 59                      	pop	cx
 19707 00000D46 E2EA                    	loop	fillloop
 19708                                  
 19709                                  ; allocate buffers
 19710                                  ; ----------------------------------------------------------------------
 19711                                  
 19712                                  ; search through the list of media supported and allocate 3 buffers if the
 19713                                  ; capacity of the drive is > 360kb
 19714                                  
 19715                                  	; 18/12/2022
 19716                                  	; cx = 0
 19717 00000D48 833E[9702]FF            	cmp	word [buffers],-1	; has buffers been already set?
 19718 00000D4D 7403                    	je	short dodefaultbuff
 19719 00000D4F E98700                  	jmp	dobuff			; the user entered the buffers=.
 19720                                  
 19721                                  dodefaultbuff:
 19722                                  	; 18/12/2022
 19723 00000D52 890E[9902]              	mov	[h_buffers],cx ; 0
 19724 00000D56 41                      	inc	cx
 19725 00000D57 41                      	inc	cx
 19726 00000D58 890E[9702]              	mov	[buffers],cx ; 2	
 19727                                  	
 19728                                  	;mov	word [h_buffers],0	; default is no heuristic buffers.
 19729                                  	;mov	word [buffers],2	; default to 2 buffers
 19730                                  
 19731                                  	; 23/10/2022	
 19732 00000D5C 50                      	push	ax
 19733 00000D5D 1E                      	push	ds ; 26/03/2019
 19734                                  	;les	bp,[DOSINFO]		; search through the dpb's
 19735 00000D5E 2EC42E[6B02]            	les	bp,[cs:DOSINFO]
 19736                                  	;les	bp,[es:bp+SYSI_DPB]	; get first dpb
 19737                                  	; 11/12/2022
 19738 00000D63 26C46E00                	les	bp,[es:bp]
 19739                                  	; 23/10/2022
 19740                                  	;les	bp,[es:bp+0]	; ! (MSDOS 5.0 IO.SYS address compability) !	
 19741                                  
 19742 00000D67 0E                      	push	cs
 19743 00000D68 1F                      	pop	ds
 19744                                  ;SYSINIT:0DE2h:
 19745                                  nextdpb:				; test if the drive supports removeable media
 19746                                  	;mov	bl,[es:bp+DPB.drive]
 19747                                  	; 11/12/2022
 19748 00000D69 268A5E00                	mov	bl,[es:bp]
 19749                                  	; 23/10/2022
 19750                                  	;mov	bl,[es:bp+0]	; ! (MSDOS 5.0 IO.SYS address compability) !
 19751                                  
 19752                                  	;inc	bl
 19753                                  	; 18/12/2022
 19754 00000D6D 43                      	inc	bx
 19755                                  
 19756                                  	;mov	ax,(IOCTL<<8)|8
 19757 00000D6E B80844                  	mov	ax,4408h
 19758 00000D71 CD21                    	int	21h		; DOS - 2+ - IOCTL -
 19759                                  
 19760                                  ; ignore fixed disks
 19761                                  
 19762 00000D73 09C0                    	or	ax,ax			; ax is nonzero if disk is nonremoveable
 19763 00000D75 7534                    	jnz	short nosetbuf
 19764                                  
 19765                                  ; get parameters of drive
 19766                                  
 19767 00000D77 31DB                    	xor	bx,bx
 19768                                  	;;mov	bl,[es:bp+DPB.drive]
 19769                                  	; 11/12/2022
 19770 00000D79 268A5E00                	mov	bl,[es:bp]
 19771                                  	; 23/10/2022
 19772                                  	;mov	bl,[es:bp+0]	; ! (MSDOS 5.0 IO.SYS address compability) !
 19773                                  	
 19774                                  	;inc	bl
 19775                                  	; 18/12/2022
 19776 00000D7D 43                      	inc	bx
 19777                                  
 19778 00000D7E BA[6E35]                	mov	dx,deviceparameters
 19779                                  	;mov	ax,(IOCTL<<8)|GENERIC_IOCTL
 19780 00000D81 B80D44                  	mov	ax,440Dh
 19781                                  	;mov	cx,(RAWIO<<8)|GET_DEVICE_PARAMETERS
 19782 00000D84 B96008                  	mov	cx,860h
 19783 00000D87 CD21                    	int	21h		; DOS - 2+ - IOCTL -
 19784 00000D89 7220                    	jc	short nosetbuf		; get next dpb if driver doesn't support
 19785                                  					; generic ioctl
 19786                                  ; determine capacity of drive
 19787                                  ; media capacity = #sectors * bytes/sector
 19788                                  
 19789                                  	;mov	bx,[deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.BPB_TOTALSECTORS]
 19790                                  	; 23/10/2022
 19791 00000D8B 8B1E[7D35]              	mov	bx,[deviceparameters+15] ; total sectors (16 bit)
 19792                                  	
 19793                                  ; to keep the magnitude of the media capacity within a word,
 19794                                  ; scale the sector size
 19795                                  ; (ie. 1 -> 512 bytes,2 -> 1024 bytes,...)
 19796                                  
 19797                                  	;mov	ax,[deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.BPB_BYTESPERSECTOR]
 19798                                  	; 23/10/2022
 19799 00000D8F A1[7535]                	mov	ax, [deviceparameters+7] ; bytes per sector
 19800 00000D92 31D2                    	xor	dx,dx
 19801 00000D94 B90002                  	mov	cx,512
 19802 00000D97 F7F1                    	div	cx			; scale sector size in factor of
 19803                                  					; 512 bytes
 19804 00000D99 F7E3                    	mul	bx			; ax = #sectors * size factor
 19805 00000D9B 09D2                    	or	dx,dx			; just in case of large floppies
 19806 00000D9D 7505                    	jnz	short setbuf
 19807 00000D9F 3DD002                  	cmp	ax,720			; 720 sectors * size factor of 1
 19808 00000DA2 7607                    	jbe	short nosetbuf
 19809                                  setbuf:
 19810                                  	; 18/12/2022
 19811                                  	; word [buffers] = 2
 19812 00000DA4 C606[9702]03            	mov	byte [buffers],3
 19813                                  	;mov	word [buffers],3
 19814 00000DA9 EB0D                    	jmp	short chk_memsize_for_buffers ; now check the memory size
 19815                                  					; for default buffer count
 19816                                  nosetbuf:
 19817                                  	; 23/10/2022
 19818                                  	;cmp	word [es:bp+DPB.NEXT_DPB],-1
 19819 00000DAB 26837E19FF              	cmp	word [es:bp+19h], -1 ; 0FFFFh
 19820 00000DB0 7406                    	je	short chk_memsize_for_buffers
 19821                                  	;les	bp,[es:bp+DPB.NEXT_DPB] ; [es:bp+19h]
 19822 00000DB2 26C46E19                	les	bp,[es:bp+19h]
 19823 00000DB6 EBB1                    	jmp	short nextdpb
 19824                                  
 19825                                  ;from dos 3.3,the default number of buffers will be changed according to the
 19826                                  ;memory size too.
 19827                                  ; default buffers = 2
 19828                                  ; if diskette media > 360 kb,then default buffers = 3
 19829                                  ; if memory size > 128 kb (2000h para),then default buffers = 5
 19830                                  ; if memory size > 256 kb (4000h para),then default buffers = 10
 19831                                  ; if memory size > 512 kb (8000h para),then default buffers = 15.
 19832                                  
 19833                                  chk_memsize_for_buffers:
 19834                                  	; 18/12/2022
 19835                                  	;cmp	word [MEMORY_SIZE],2000h
 19836                                  	;jbe	short bufset
 19837                                  	;mov	word [buffers],5
 19838                                  	;cmp	word [MEMORY_SIZE],4000h
 19839                                  	;jbe	short bufset
 19840                                  	;mov	word [buffers],10
 19841                                  	;cmp	word [MEMORY_SIZE],8000h
 19842                                  	;jbe	short bufset
 19843                                  	;mov	word [buffers],15
 19844                                  
 19845                                  	; 18/12/2022
 19846                                  	; word [buffers] = 3 or 2
 19847 00000DB8 BB[9702]                	mov	bx,buffers
 19848 00000DBB A1[9202]                	mov	ax,[MEMORY_SIZE]
 19849 00000DBE 48                      	dec	ax	; [MEMORY_SIZE] - 1
 19850                                  
 19851 00000DBF 80FC20                  	cmp	ah,20h	; ax >= 2000h ([MEMORY_SIZE] > 2000h) ; *
 19852 00000DC2 7213                    	jb	short bufset
 19853 00000DC4 C6070F                  	mov	byte [bx],15 ; [buffers] = 15 ; ***
 19854 00000DC7 80FC80                  	cmp	ah,80h	; ax >= 8000h ([MEMORY_SIZE] > 8000h) ; ***
 19855 00000DCA 730B                    	jnb	short bufset
 19856 00000DCC C6070A                  	mov	byte [bx],10 ; [buffers] = 10 ; **
 19857 00000DCF 80FC40                  	cmp	ah,40h	; ax >= 4000h ([MEMORY_SIZE] > 4000h) ; **
 19858 00000DD2 7303                    	jnb	short bufset
 19859 00000DD4 C60705                  	mov	byte [bx],5  ; [buffers] = 5 ; *
 19860                                  bufset:
 19861                                  	; 23/10/2022
 19862                                  	; 26/03/2019
 19863 00000DD7 1F                      	pop	ds
 19864 00000DD8 58                      	pop	ax
 19865                                  
 19866                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 19867                                  ;j.k. here we should put extended stuff and new allocation scheme!!!
 19868                                  ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 19869                                  
 19870                                  ; 26/03/2019
 19871                                  
 19872                                  ;*******************************************************************************
 19873                                  ;									       *
 19874                                  ; function: actually allocate buffers in the memory and initialize it. 	       *
 19875                                  ; input :								       *
 19876                                  ;    memhi:memlo - start of the next available memory			       *
 19877                                  ;    buffers = number of buffers					       *
 19878                                  ;    h_buffers = number of secondary buffers				       *
 19879                                  ;									       *
 19880                                  ; output:								       *
 19881                                  ;	buffinfo.cache_count - # of caches to be installed.		       *
 19882                                  ;	buffinfo set.							       *
 19883                                  ;	bufferqueue set.						       *
 19884                                  ;									       *
 19885                                  ; subroutines to be called:						       *
 19886                                  ;									       *
 19887                                  ;*******************************************************************************
 19888                                  
 19889                                  	; 23/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 19890                                  	; (SYSINIT:0E60h)
 19891                                  dobuff:
 19892                                  	; ds = cs ; 31/03/2019
 19893                                  	; 23/10/2022
 19894 00000DD9 2EC51E[6B02]            	lds	bx,[cs:DOSINFO]	; ds:bx -> sysinitvar
 19895                                  	;mov	ax,[buffers] ; 31/03/2019
 19896                                  	;lds	bx,[DOSINFO]
 19897 00000DDE 2EA1[9702]              	mov	ax,[cs:buffers]	; set sysi_buffers
 19898                                  	;mov	[bx+SYSI_BUFFERS],ax ; [bx+3Fh]
 19899 00000DE2 89473F                  	mov	[bx+3Fh],ax
 19900 00000DE5 2EA1[9902]              	mov	ax,[cs:h_buffers]
 19901                                  	;mov	[bx+SYSI_BUFFERS+2],ax ; [bx+41h]
 19902 00000DE9 894741                  	mov	[bx+41h],ax
 19903 00000DEC C55F12                  	lds	bx,[bx+12h]
 19904                                  	;lds	bx,[bx+SYSI_BUF] ; now,ds:bx -> buffinfo
 19905 00000DEF E8D622                  	call	round		; get [memhi]:[memlo]
 19906                                  	;mov	al,devmark_buf	; ='B'
 19907 00000DF2 B042                    	mov	al,'B'	
 19908 00000DF4 E81C06                  	call	setdevmark
 19909                                  
 19910                                  ;allocate buffers
 19911                                  
 19912 00000DF7 1E                      	push	ds			; save buffer info. ptr.
 19913 00000DF8 53                      	push	bx
 19914                                  
 19915 00000DF9 E85203                  	call	set_buffer
 19916                                  
 19917 00000DFC 5B                      	pop	bx
 19918 00000DFD 1F                      	pop	ds
 19919                                  
 19920                                  ;now set the secondary buffer if specified.
 19921                                  
 19922 00000DFE 2E833E[9902]00          	cmp	word [cs:h_buffers],0
 19923 00000E04 742D                    	je	short xif16
 19924 00000E06 E8BF22                  	call	round
 19925                                  	; 23/10/2022
 19926 00000E09 2E8B0E[DE03]            	mov	cx,[cs:memlo]
 19927                                  	;mov	[bx+BUFFINF.Cache_ptr],cx  ; [bx+6]
 19928 00000E0E 894F06                  	mov	[bx+6],cx
 19929 00000E11 2E8B0E[E003]            	mov	cx,[cs:memhi]
 19930                                  	;mov	[bx+BUFFINF.Cache_ptr+2],cx ; [bx+8]
 19931 00000E16 894F08                  	mov	[bx+8],cx
 19932 00000E19 2E8B0E[9902]            	mov	cx,[cs:h_buffers]
 19933                                  	;mov	[bx+BUFFINF.Cache_count],cx ; [bx+10]
 19934 00000E1E 894F0A                  	mov	[bx+10],cx
 19935 00000E21 B80002                  	mov	ax,512			; 512 byte
 19936 00000E24 F7E1                    	mul	cx
 19937 00000E26 2EA3[DE03]              	mov	[cs:memlo],ax
 19938                                  	;or	byte [cs:setdevmarkflag],for_devmark ; 2
 19939 00000E2A 2E800E[3614]02          	or	byte [cs:setdevmarkflag],2
 19940 00000E30 E89522                  	call	round
 19941                                  xif16:
 19942                                  
 19943                                  ; ----------------------------------------------------------------------
 19944                                  ; allocate cdss
 19945                                  ; ----------------------------------------------------------------------
 19946                                  
 19947                                  buf1:
 19948 00000E33 E89222                  	call	round
 19949                                  
 19950 00000E36 50                      	push	ax
 19951                                  	; 23/10/2022
 19952                                  	;mov	ax,devmark_cds		;='L'
 19953 00000E37 B84C00                  	mov	ax, 'L'
 19954 00000E3A E8D605                  	call	setdevmark
 19955 00000E3D 58                      	pop	ax
 19956                                  
 19957 00000E3E 2EC43E[6B02]            	les	di,[cs:DOSINFO]
 19958                                  	;mov	cl,[es:di+SYSI_NUMIO]
 19959 00000E43 268A4D20                	mov	cl,[es:di+20h]
 19960 00000E47 2E3A0E[A002]            	cmp	cl,[cs:NUM_CDS]
 19961 00000E4C 7305                    	jae	short gotncds 		; user setting must be at least numio
 19962 00000E4E 2E8A0E[A002]            	mov	cl,[cs:NUM_CDS]
 19963                                  gotncds:
 19964 00000E53 30ED                    	xor	ch,ch
 19965                                  	;mov	[es:di+SYSI_NCDS],cl	; [es:di+33]
 19966 00000E55 26884D21                	mov	[es:di+21h],cl
 19967 00000E59 2EA1[E003]              	mov	ax,[cs:memhi]
 19968                                  	;mov	[es:di+SYSI_CDS+2],ax
 19969 00000E5D 26894518                	mov	[es:di+18h],ax
 19970 00000E61 2EA1[DE03]              	mov	ax,[cs:memlo]
 19971                                  	;mov	[es:di+SYSI_CDS],ax
 19972 00000E65 26894516                	mov	[es:di+16h],ax
 19973 00000E69 88C8                    	mov	al,cl
 19974                                  	;mov	ah,curdirlen ; curdir_list.size
 19975 00000E6B B458                    	mov	ah,88
 19976 00000E6D F6E4                    	mul	ah
 19977 00000E6F E84F02                  	call	ParaRound
 19978 00000E72 2E0106[E003]            	add	[cs:memhi],ax
 19979                                  
 19980                                  	;or	byte [cs:setdevmarkflag],for_devmark ; 2
 19981 00000E77 2E800E[3614]02          	or	byte [cs:setdevmarkflag],2
 19982 00000E7D E84822                  	call	round			; check for mem error before initializing
 19983                                  	;lds	si,[es:di+SYSI_DPB] ; [es:di+0]
 19984 00000E80 26C535                  	lds	si,[es:di]
 19985                                  	;les	di,[es:di+SYSI_CDS] ; [es:di+22]
 19986 00000E83 26C47D16                	les	di,[es:di+16h]
 19987 00000E87 E881FD                  	call	fooset
 19988                                  
 19989                                  ; ----------------------------------------------------------------------
 19990                                  ; allocate space for internal stack
 19991                                  ; ----------------------------------------------------------------------
 19992                                  
 19993 00000E8A 0E                      	push	cs
 19994 00000E8B 1F                      	pop	ds
 19995                                  
 19996                                  ;	if the user did not entered stacks= command, as a default, do not install
 19997                                  ;	sytem stacks for pc1,pc xt,pc portable cases.
 19998                                  ;	otherwise,install it to the user specified value or to the default
 19999                                  ;	value of 9,128 for other systems.
 20000                                  
 20001 00000E8C 833E[8E02]FF            	cmp	word [stack_addr],-1 ; has the user entered "stacks=" command?
 20002 00000E91 740E                    	je	short doinstallstack	; then install as specified by the user
 20003 00000E93 803E[3803]00            	cmp	byte [sys_scnd_model_byte],0 ; pc1,xt has the secondary model byte = 0
 20004 00000E98 7507                    	jne	short doinstallstack	; other model should have default stack of 9,128
 20005 00000E9A 803E[3703]FE            	cmp	byte [sys_model_byte],0FEh ; pc1, pc/xt or pc portable ?
 20006 00000E9F 736D                    	jae	short skipstack
 20007                                  doinstallstack:
 20008 00000EA1 A1[8A02]                	mov	ax,[stack_count]	; stack_count = 0?
 20009 00000EA4 09C0                    	or	ax,ax			; then, stack size must be 0 too.
 20010 00000EA6 7466                    	jz	short skipstack		; don't install stack.
 20011                                  
 20012                                  ;	dynamic relocation of stack code.
 20013                                  
 20014 00000EA8 E81D22                  	call	round			;[memhi] = seg. for stack code
 20015                                  					;[memlo] = 0
 20016                                  
 20017                                  ; set devmark block into memory for mem command
 20018                                  ; devmark_id = 's' for stack
 20019                                  
 20020                                  	;mov	al,devmark_stk	;='S'
 20021                                  	; 23/10/2022
 20022 00000EAB B053                    	mov	al,'S'
 20023 00000EAD E86305                  	call	setdevmark
 20024                                  
 20025 00000EB0 A1[E003]                	mov	ax,[memhi]
 20026 00000EB3 8EC0                    	mov	es,ax		;es -> seg. the stack code is going to move.
 20027                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 20028                                  	; 11/12/2022
 20029                                  	; ds = cs
 20030                                  	;push	cs
 20031                                  	;pop	ds
 20032 00000EB5 31F6                    	xor	si,si		;!!we know that stack code is at the beginning of sysinit.
 20033 00000EB7 31FF                    	xor	di,di
 20034 00000EB9 B9[6702]                	mov	cx,endstackcode
 20035 00000EBC 890E[DE03]              	mov	[memlo],cx
 20036 00000EC0 E80522                  	call	round		;have enough space for relocation?
 20037 00000EC3 F3A4                    	rep	movsb
 20038                                  
 20039 00000EC5 1E                      	push	ds		; stick the location of the NextStack entry
 20040                                  	;;mov	ax,Bios_Data	; into the Win386 Instance Data tables
 20041                                  	;mov	ax,KERNEL_SEGMENT ; 70h
 20042                                  	; 21/10/2022
 20043 00000EC6 B87000                  	mov	ax,DOSBIODATASEG ; 0070h
 20044 00000EC9 8ED8                    	mov	ds,ax
 20045 00000ECB C706[BE08][1000]        	mov	word [NextStack],nextentry ; (8C0h for MSDOS 6.21 IO.SYS)
 20046 00000ED1 8C06[C008]              	mov	[NextStack+2],es	   ; (8C2h for MSDOS 6.21 IO.SYS)
 20047                                  
 20048 00000ED5 2EA1[DE03]              	mov	ax,[cs:memlo]
 20049 00000ED9 2EA3[8E02]              	mov	[cs:stack_addr],ax ;set for stack area initialization
 20050 00000EDD A3[C408]                	mov	[IT_StackLoc],ax ; pass it as Instance Data, too
 20051 00000EE0 2EA1[E003]              	mov	ax,[cs:memhi]	;this will be used by stack_init routine.
 20052 00000EE4 2EA3[9002]              	mov	[cs:stack_addr+2],ax
 20053 00000EE8 A3[C608]                	mov	[IT_StackLoc+2],ax
 20054                                  
 20055                                  ;	space for internal stack area = stack_count(entrysize + stack_size)
 20056                                  
 20057                                  	;mov	ax,entrysize ; mov ax,8
 20058                                  	; 23/10/2022
 20059 00000EEB B80800                  	mov	ax,8
 20060 00000EEE 2E0306[8C02]            	add	ax,[cs:stack_size]
 20061 00000EF3 2EF726[8A02]            	mul	word [cs:stack_count]
 20062                                  
 20063 00000EF8 A3[C808]                	mov	[IT_StackSize],ax ; pass through to Instance Tables
 20064                                  
 20065 00000EFB 1F                      	pop	ds		; no more need to access Instance Table
 20066                                  
 20067 00000EFC E8C201                  	call	ParaRound	; convert size to paragraphs
 20068                                  	
 20069                                  	; 11/12/2022
 20070                                  	; ds = cs
 20071                                  	;add	[cs:memhi],ax
 20072 00000EFF 0106[E003]              	add	[memhi],ax
 20073                                  	;or	byte [cs:setdevmarkflag],for_devmark ; 2
 20074                                  	;or	byte [cs:setdevmarkflag],2
 20075 00000F03 800E[3614]02            	or	byte [setdevmarkflag],2
 20076                                  	;or	byte [setdevmarkflag],for_devmark ; 2
 20077                                  				;to set the devmark_size for stack by round routine.
 20078 00000F08 E8BD21                  	call	round		; check for memory error before
 20079                                  				; continuing
 20080 00000F0B E8E902                  	call	stackinit	; initialize hardware stack. 
 20081                                  				; cs=ds=sysinitseg,es=relocated stack code & data
 20082                                  skipstack:
 20083                                  	; 24/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 20084                                  	; (SYSINIT:0F99h)
 20085                                  
 20086                                  	; 11/12/2022
 20087                                  	; ds = cs
 20088                                  	;push	cs
 20089                                  	;pop	ds
 20090                                  
 20091 00000F0E A0[9D02]                	mov	al,[FILES]
 20092 00000F11 30E4                    	xor	ah,ah		; do not use cbw instruction!!!!!
 20093                                  				;  it does sign extend.
 20094 00000F13 89C1                    	mov	cx,ax
 20095 00000F15 31DB                    	xor	bx,bx		;close standard input
 20096 00000F17 B43E                    	mov	ah,3Eh ; CLOSE
 20097 00000F19 CD21                    	int	21h
 20098 00000F1B BB0200                  	mov	bx,2
 20099                                  rcclloop:			;close everybody but standard output
 20100 00000F1E B43E                    	mov	ah,3Eh ; CLOSE	; need output so we can print message
 20101 00000F20 CD21                    	int	21h		; in case we can't get new one open.
 20102 00000F22 43                      	inc	bx
 20103 00000F23 E2F9                    	loop	rcclloop
 20104                                  
 20105 00000F25 BA[F833]                	mov	dx,condev
 20106 00000F28 B002                    	mov	al,2
 20107 00000F2A B43D                    	mov	ah,3Dh ; OPEN 	;open con for read/write
 20108 00000F2C F9                      	stc			; set for possible int 24
 20109 00000F2D CD21                    	int	21h
 20110 00000F2F 7305                    	jnc	short goaux
 20111 00000F31 E82724                  	call	badfil
 20112 00000F34 EB13                    	jmp	short goaux2
 20113                                  goaux:	
 20114 00000F36 50                      	push	ax
 20115 00000F37 BB0100                  	mov	bx,1		;close standard output
 20116 00000F3A B43E                    	mov	ah,3Eh ; CLOSE
 20117 00000F3C CD21                    	int	21h
 20118 00000F3E 58                      	pop	ax
 20119                                  
 20120 00000F3F 89C3                    	mov	bx,ax		;new device handle
 20121 00000F41 B445                    	mov	ah,45h ; XDUP
 20122 00000F43 CD21                    	int	21h		;dup to 1,stdout
 20123 00000F45 B445                    	mov	ah,45h ; XDUP
 20124 00000F47 CD21                    	int	21h		;dup to 2,stderr
 20125                                  goaux2: 
 20126 00000F49 BA[FC33]                	mov	dx,auxdev
 20127 00000F4C B002                    	mov	al,2		;read/write access
 20128 00000F4E E83B24                  	call	open_dev
 20129                                  
 20130 00000F51 BA[0034]                	mov	dx,prndev
 20131 00000F54 B001                    	mov	al,1		;write only
 20132 00000F56 E83324                  	call	open_dev
 20133                                  
 20134                                  ;global rearm command for shared interrupt devices attached in the system;
 20135                                  ;shared interrupt attachment has some problem when it issues interrupt
 20136                                  ;during a warm reboot. once the interrupt is presented by the attachment,
 20137                                  ;no further interrupts on that level will be presented until a global rearm
 20138                                  ;is issued. by the request of the system architecture group, msbio will
 20139                                  ;issue a global rearm after every device driver is loaded.
 20140                                  ;to issue a global rearm:	;for pc1,xt,palace
 20141                                  ;
 20142                                  ;			  out 02f2h,xx  ; interrupt level 2
 20143                                  ;			  out 02f3h,xx  ; interrupt level 3
 20144                                  ;			  out 02f4h,xx  ; interrupt level 4
 20145                                  ;			  out 02f5h,xx  ; interrupt level 5
 20146                                  ;			  out 02f6h,xx  ; interrupt level 6
 20147                                  ;			  out 02f7h,xx  ; interrupt level 7
 20148                                  ;
 20149                                  ;	for pc at,in addition to the above commands,
 20150                                  ;	need to handle the secondary interrupt handler
 20151                                  ;
 20152                                  ;			  out 06f2h,xx  ; interrupt level 10
 20153                                  ;			  out 06f3h,xx  ; interrupt level 11
 20154                                  ;			  out 06f4h,xx  ; interrupt level 12
 20155                                  ;			  out 06f6h,xx  ; interrupt level 14
 20156                                  ;			  out 06f7h,xx  ; interrupt level 15
 20157                                  ;
 20158                                  ;	for round-up machine
 20159                                  ;
 20160                                  ;			  none.
 20161                                  
 20162                                  ; where xx stands for any value.
 20163                                  ;
 20164                                  ; for your information,after naples level machine,the system service bios
 20165                                  ; call (int 15h),function ah=0c0h returns the system configuration parameters
 20166                                  
 20167                                  	; 24/10/2022
 20168                                  
 20169 00000F59 50                      	push	ax
 20170 00000F5A 53                      	push	bx
 20171 00000F5B 52                      	push	dx
 20172 00000F5C 06                      	push	es
 20173                                  
 20174 00000F5D B0FF                    	mov	al,0FFh 		;reset h/w by writing to port
 20175 00000F5F BAF202                  	mov	dx,2F2h 		;get starting address
 20176 00000F62 EE                      	out	dx,al			; out 02f2h,0ffh
 20177 00000F63 42                      	inc	dx
 20178 00000F64 EE                      	out	dx,al			; out 02f3h,0ffh
 20179 00000F65 42                      	inc	dx
 20180 00000F66 EE                      	out	dx,al			; out 02f4h,0ffh
 20181 00000F67 42                      	inc	dx
 20182 00000F68 EE                      	out	dx,al			; out 02f5h,0ffh
 20183 00000F69 42                      	inc	dx
 20184 00000F6A EE                      	out	dx,al			; out 02f6h,0ffh
 20185 00000F6B 42                      	inc	dx
 20186 00000F6C EE                      	out	dx,al			; out 02f7h,0ffh
 20187                                  
 20188                                  ;sb secondary global rearm
 20189                                  
 20190 00000F6D B800F0                  	mov	ax,0F000h		;get machine type
 20191 00000F70 8EC0                    	mov	es,ax
 20192 00000F72 26803EFEFFFC            	cmp	byte [es:0FFFEh],0FCh ;q:is it a at type machine
 20193 00000F78 740D                    	je	short startrearm	; *if at no need to check
 20194                                  
 20195 00000F7A B4C0                    	mov	ah,0C0h 		;get system configuration
 20196 00000F7C CD15                    	int	15h			; *
 20197 00000F7E 7216                    	jc	short finishrearm	; *jmp if old rom
 20198                                  
 20199                                  ; test feature byte for secondary interrupt controller
 20200                                  
 20201 00000F80 26F6470540              	test	byte [es:bx+5],40h
 20202                                  	; 24/10/2022
 20203                                  	;test	byte [es:bx+ROMBIOS_DESC.bios_sd_featurebyte1],ScndIntController
 20204 00000F85 740F                    	je	short finishrearm	;jmp if it is there
 20205                                  
 20206                                  startrearm:
 20207 00000F87 B0FF                    	mov	al,0FFh 		;write any pattern to port
 20208 00000F89 BAF206                  	mov	dx,6F2h 		;get starting address
 20209 00000F8C EE                      	out	dx,al			;out 06f2h,0ffh
 20210 00000F8D 42                      	inc	dx			;bump address
 20211 00000F8E EE                      	out	dx,al			;out 06f3h,0ffh
 20212 00000F8F 42                      	inc	dx			;bump address
 20213 00000F90 EE                      	out	dx,al			;out 06f4h,0ffh
 20214 00000F91 42                      	inc	dx			;bump address
 20215 00000F92 42                      	inc	dx			;bump address
 20216 00000F93 EE                      	out	dx,al			;out 06f6h,0ffh
 20217 00000F94 42                      	inc	dx			;bump address
 20218 00000F95 EE                      	out	dx,al			;out 06f7h,0ffh
 20219                                  
 20220                                  finishrearm:
 20221 00000F96 07                      	pop	es
 20222 00000F97 5A                      	pop	dx
 20223 00000F98 5B                      	pop	bx
 20224 00000F99 58                      	pop	ax
 20225                                  
 20226                                  ;    global rearm end *******************
 20227                                  
 20228                                  ; ----------------------------------------------------------------------
 20229                                  ; allocate sysinit_base for install= command
 20230                                  ; ----------------------------------------------------------------------
 20231                                  ; sysinit_base allocation.
 20232                                  ;   check if endfile has been called to handle install= command.
 20233                                  
 20234                                  set_sysinit_base:
 20235                                  
 20236                                  ; ----------------------------------------------------------------------
 20237                                  ;sysinit_base will be established in the secure area of
 20238                                  ;lower memory when it handles the first install= command.
 20239                                  ;sysinit_base is the place where the actual exec function will be called and
 20240                                  ;will check sysinit module in high memory if it is damaged by the application
 20241                                  ;program.  if sysinit module has been broken,then "memory error..." message
 20242                                  ;is displayed by sysinit_base.
 20243                                  ; ----------------------------------------------------------------------
 20244                                  
 20245                                  	; 24/10/2022 - Retro DOS v4.0 (MSDOS 5.0 IO.SYS, SYSINIT)
 20246                                  	; (SYSINIT:1028h)
 20247                                  
 20248                                  	; 11/12/2022
 20249                                  	; ds = cs
 20250 00000F9A 50                      	push	ax			; set devmark for mem command
 20251 00000F9B A1[E003]                	mov	ax,[memhi]
 20252 00000F9E 2B06[E403]              	sub	ax,[area]
 20253 00000FA2 A3[DC03]                	mov	[impossible_owner_size],ax ;remember the size in case.
 20254                                  	;mov	al,devmark_inst ; 'T'
 20255 00000FA5 B054                    	mov	al,'T'
 20256 00000FA7 E86904                  	call	setdevmark
 20257 00000FAA 58                      	pop	ax
 20258                                  
 20259 00000FAB 8B3E[E003]              	mov	di,[memhi]
 20260 00000FAF 8EC7                    	mov	es,di
 20261 00000FB1 893E[5003]              	mov	[sysinit_base_ptr+2],di ; save this entry for the next use.
 20262 00000FB5 31FF                    	xor	di,di
 20263 00000FB7 893E[4E03]              	mov	[sysinit_base_ptr],di	; es:di -> destination.
 20264 00000FBB BE[CD10]                	mov	si,sysinit_base		;ds:si -> source code to be relocated.
 20265 00000FBE B98100                  	mov	cx,end_sysinit_base-sysinit_base ; 129
 20266                                  	; 24/10/2022 
 20267                                  	;mov	cx,128	; 11DCh-115Ch 	; (MSDOS 5.0 IO.SYS, SYSINIT)
 20268 00000FC1 010E[DE03]              	add	[memlo],cx
 20269                                  	;or	byte cs:[setdevmarkflag],for_devmark ; 2
 20270                                  	; 11/12/2022
 20271                                  	; ds = cs
 20272                                  	;or	byte [cs:setdevmarkflag],2
 20273 00000FC5 800E[3614]02            	or	byte [setdevmarkflag],2
 20274                                  	;or	byte [setdevmarkflag],for_devmark
 20275 00000FCA E8FB20                  	call	round			; check mem error. also,readjust memhi for the next use.
 20276 00000FCD F3A4                    	rep	movsb			; reallocate it.
 20277                                  
 20278 00000FCF C706[5203][A610]        	mov	word [sysinit_ptr],sysinitptr ; returning address from
 20279 00000FD5 8C0E[5403]              	mov	[sysinit_ptr+2],cs	 ; sysinit_base back to sysinit.
 20280                                  	;or	word [install_flag],has_installed ; set the flag.
 20281                                  	;or	byte [install_flag],has_installed ; 2
 20282                                  	; 11/12/2022
 20283 00000FD9 800E[4A03]02            	or	byte [install_flag],2
 20284                                  	; 24/10/2022
 20285                                  	;or	word [install_flag],2	
 20286                                  
 20287                                  ; ----------------------------------------------------------------------
 20288                                  ; free the rest of the memory from memhi to confbot. still from confbot to
 20289                                  ; the top of the memory will be allocated for sysinit and config.sys if
 20290                                  ; have_install_cmd.
 20291                                  ; ----------------------------------------------------------------------
 20292                                  
 20293 00000FDE E8E720                  	call	round
 20294 00000FE1 8B1E[E003]              	mov	bx,[memhi]
 20295 00000FE5 A1[E403]                	mov	ax,[area]
 20296 00000FE8 A3[DA03]                	mov	[old_area],ax		; save [area]
 20297 00000FEB 8EC0                    	mov	es,ax			;calc what we needed
 20298 00000FED 29C3                    	sub	bx,ax
 20299                                  	; 24/10/2022
 20300 00000FEF B44A                    	mov	ah,4Ah ; SETBLOCK
 20301 00000FF1 CD21                    	int	21h			;give the rest back
 20302                                  		; DOS - 2+ - ADJUST MEMORY BLOCK SIZE (SETBLOCK)
 20303                                  		; ES = segment address of block to change
 20304                                  		; BX = new size in paragraphs
 20305 00000FF3 06                      	push	es
 20306 00000FF4 8CC0                    	mov	ax,es
 20307 00000FF6 48                      	dec	ax
 20308 00000FF7 8EC0                    	mov	es,ax			;point to arena
 20309                                  	;mov	word [es:ARENA.OWNER],8	;set impossible owner
 20310                                  	;;mov	word [es:ARENA.NAME],4453h	; System Data
 20311                                  	;mov	word [es:ARENA.NAME],'SD'	; System Data
 20312                                  	; 24/10/2022
 20313 00000FF9 26C70601000800          	mov	word [es:1],8		;set impossible owner
 20314 00001000 26C70608005344          	mov	word [es:8],'SD'	; System Data
 20315 00001007 07                      	pop	es
 20316                                  
 20317 00001008 BBFFFF                  	mov	bx,0FFFFh
 20318 0000100B B448                    	mov	ah,48h ; ALLOC
 20319 0000100D CD21                    	int	21h
 20320 0000100F B448                    	mov	ah,48h ; ALLOC
 20321 00001011 CD21                    	int	21h			; allocate the rest of the memory
 20322                                  		; DOS - 2+ - ALLOCATE MEMORY
 20323                                  		; BX = number of 16-byte paragraphs desired
 20324 00001013 A3[E003]                	mov	[memhi],ax		; start of the allocated memory
 20325 00001016 C706[DE03]0000          	mov	word [memlo],0		;  to be used next.
 20326                                  
 20327                                  ;;;; at this moment,memory from [memhi]:0 to top-of-the memory is
 20328                                  ;;;; allocated.
 20329                                  ;;;; to protect sysinit,confbot module (from confbot (or =alloclim at
 20330                                  ;;;; this time) to the top-of-the memory),here we are going to
 20331                                  ;;;; 1). "setblock" from memhi to confbot.
 20332                                  ;;;; 2). "alloc" from confbot to the top of the memory.
 20333                                  ;;;; 3). "free alloc memory" from memhi to confbot.
 20334                                  
 20335                                  ;memory allocation for sysinit,confbot module.
 20336                                  
 20337 0000101C 8EC0                    	mov	es,ax
 20338                                  	;mov	bx,[CONFBOT]
 20339                                  	; 24/10/2022
 20340 0000101E 8B1E[A102]              	mov	bx,[top_of_cdss]
 20341 00001022 29C3                    	sub	bx,ax			; confbot - memhi
 20342 00001024 4B                      	dec	bx			; make a room for the memory block id.
 20343 00001025 4B                      	dec	bx			; make sure!!!.
 20344 00001026 B44A                    	mov	ah,4Ah ; SETBLOCK
 20345 00001028 CD21                    	int	21h			; this will free (confbot to top of memory)
 20346                                  		; DOS - 2+ - ADJUST MEMORY BLOCK SIZE (SETBLOCK)
 20347                                  		; ES = segment address of block to change
 20348                                  		; BX = new size in paragraphs
 20349 0000102A BBFFFF                  	mov	bx,0FFFFh
 20350 0000102D B448                    	mov	ah,48h ; ALLOC
 20351 0000102F CD21                    	int	21h
 20352 00001031 B448                    	mov	ah,48h ; ALLOC
 20353 00001033 CD21                    	int	21h			; allocate (confbot to top of memory)
 20354                                  		; DOS - 2+ - ALLOCATE MEMORY
 20355                                  		; BX = number of 16-byte paragraphs desired
 20356 00001035 A3[E403]                	mov	[area],ax		; save allocated memory segment.
 20357                                  					; need this to free this area for command.com.
 20358 00001038 8E06[E003]              	mov	es,[memhi]
 20359 0000103C B449                    	mov	ah,49h			; free allocated memory.
 20360 0000103E CD21                    	int	21h			; free (memhi to confbot(=area))
 20361                                  		; DOS - 2+ - FREE MEMORY
 20362                                  		; ES = segment address of area to be freed
 20363                                  endfile_ret:
 20364 00001040 C3                      	retn
 20365                                  
 20366                                  ; End of "EndFile" DOS structure configuration.
 20367                                  
 20368                                  ; ----------------------------------------------------------------------
 20369                                  ; 26/03/2019 - Retro DOS v4.0
 20370                                  ; 24/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS, SYSINIT)	
 20371                                  ; ----------------------------------------------------------------------
 20372                                  ; Do_Install_Exec
 20373                                  ;
 20374                                  ; This procedure is used to EXEC a program being loaded via the 
 20375                                  ; "install=" mechanism in config.sys. It does this by setting up
 20376                                  ; the parameters, and then jumping to sysinit_base, which has been
 20377                                  ; setup in low memory. When complete, sysinit_base will jump back
 20378                                  ; up to this procedure (if sysinit remains uncorrupted by the installed
 20379                                  ; program).
 20380                                  
 20381                                  ;SYSINIT:10CFh:
 20382                                  
 20383                                  do_install_exec:			; now,handles install= command.
 20384                                  
 20385 00001041 56                      	push	si			; save si for config.sys again.
 20386                                  
 20387                                  ; we are going to call load/exec function.
 20388                                  ; set es:bx to the parameter block here;;;;;;;
 20389                                  ; set ds:dx to the asciiz string. remember that we already has 0
 20390                                  ; after the filename. so parameter starts after that. if next
 20391                                  ; character is a line feed (i.e. 10),then assume that the 0
 20392                                  ; we already encountered used to be a carrage return. in this
 20393                                  ; case,let's set the length to 0 which will be followed by
 20394                                  ; carridge return.
 20395                                  
 20396                                  ; es:si -> command line in config.sys. points to the first non blank
 20397                                  ;character after =.
 20398                                  
 20399 00001042 06                      	push	es
 20400 00001043 1E                      	push	ds
 20401 00001044 07                      	pop	es
 20402 00001045 1F                      	pop	ds			; es->sysinitseg,ds->confbot seg
 20403 00001046 89F2                    	mov	dx,si			; ds:dx->file name,0 in config.sys image.
 20404                                  
 20405 00001048 31C9                    	xor	cx,cx
 20406 0000104A FC                      	cld
 20407 0000104B 2EC606[6D03]20          	mov	byte [cs:ldexec_start],' ' ; clear out the parm area
 20408 00001051 BF[6E03]                	mov	di,ldexec_parm
 20409                                  installfilename:			; skip the file name
 20410 00001054 AC                      	lodsb				; al = ds:si; si++
 20411 00001055 3C00                    	cmp	al,0
 20412 00001057 7402                    	je	short got_installparm
 20413 00001059 EBF9                    	jmp	short installfilename
 20414                                  got_installparm:			; copy the parameters to ldexec_parm
 20415 0000105B AC                      	lodsb
 20416 0000105C 268805                  	mov	[es:di],al
 20417 0000105F 3C0A                    	cmp	al,lf	; cmp al,0Ah	; line feed?
 20418 00001061 7405                    	je	short done_installparm
 20419 00001063 FEC1                    	inc	cl			; # of char. in the parm.
 20420 00001065 47                      	inc	di
 20421 00001066 EBF3                    	jmp	short got_installparm
 20422                                  done_installparm:
 20423 00001068 2E880E[6C03]            	mov	byte [cs:ldexec_line],cl ; length of the parm.
 20424 0000106D 80F900                  	cmp	cl,0			; if no parm,then
 20425 00001070 7506                    	jne	short install_seg_set 	; let the parm area
 20426 00001072 2EC606[6D03]0D          	mov	byte [cs:ldexec_start],cr ; 0Dh 
 20427                                  					; starts with cr.
 20428                                  install_seg_set:
 20429 00001078 2EC70600000000          	mov	word [cs:0],0		; make a null environment segment
 20430 0000107F 8CC8                    	mov	ax,cs			; by overlap jmp instruction of sysinitseg.
 20431                                  
 20432                                  ;---------------------------------------------------M067----------------
 20433                                  ;
 20434                                  ; 	the environment pointer is made 0. so the current environment ptr.
 20435                                  ; 	will be the same as pdb_environ which after dosinit is 0.
 20436                                  ;
 20437                                  ; 	mov	cs:[instexe.exec0_environ],0 ; set the environment seg.
 20438                                  ;
 20439                                  ; 	instexe.exec0_environ need not be initialized to 0 above. It was
 20440                                  ; 	done as a fix for bug #529. The actual bug was in NLSFUNC and
 20441                                  ; 	was fixed. 
 20442                                  ;
 20443                                  ; ----------------------------------------------------------------------
 20444                                  
 20445                                  ;;ifdef   MULTI_CONFIG
 20446                                  
 20447                                  ; If there's any environment data in "config_wrkseg", pass to app
 20448                                  
 20449                                  	; 24/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS SYSINIT)
 20450                                          ;mov     cx,ax
 20451                                          ;cmp     word [cs:config_envlen],0
 20452                                          ;je      short no_envdata2
 20453                                          ;mov     cx,[cs:config_wrkseg]
 20454                                  ;no_envdata2:
 20455                                  ;;endif  ;MULTI_CONFIG
 20456                                  
 20457                                  	;mov	[cs:instexe.exec0_environ],cx ; set the environment seg.
 20458                                  	; 24/10/2022
 20459                                  	;mov	[cs:iexec.environ],cx
 20460                                  	; 02/11/2022
 20461 00001081 2EA3[BE03]              	mov	[cs:iexec.environ],ax	
 20462                                  
 20463                                  	;mov	[cs:instexe.exec0_com_line+2],ax ; set the seg.
 20464 00001085 2EA3[C203]              	mov	[cs:iexec.ldexec_line+2],ax
 20465                                  	;mov	[cs:instexe.exec0_5c_fcb+2],ax
 20466 00001089 2EA3[C603]              	mov	[cs:iexec.ldexec_5c_fcb+2],ax
 20467                                  	;mov	[cs:instexe.exec0_6c_fcb+2],ax
 20468 0000108D 2EA3[CA03]              	mov	[cs:iexec.ldexec_6c_fcb+2],ax
 20469 00001091 E86E00                  	call	sum_up
 20470 00001094 26A3[5603]              	mov	[es:checksum],ax	; save the value of the sum
 20471 00001098 31C0                    	xor	ax,ax
 20472 0000109A B44B                    	mov	ah,4Bh ; EXEC		; load/exec
 20473 0000109C BB[BE03]                	mov	bx,instexe		; es:bx -> parm block.
 20474 0000109F 06                      	push	es			; save es,ds for load/exec
 20475 000010A0 1E                      	push	ds			; these registers will be restored in sysinit_base.
 20476 000010A1 2EFF2E[4E03]            	jmp	far [cs:sysinit_base_ptr] ; jmp to sysinit_base to execute
 20477                                  					; load/exec function and check sum.
 20478                                  
 20479                                  ;----------------------------------------
 20480                                  
 20481                                  ;j.k. this is the returning address from sysinit_base.
 20482                                  
 20483                                  	; 24/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS SYSINIT)
 20484                                  
 20485                                  sysinitptr:				; returning far address from sysinit_base
 20486 000010A6 5E                      	pop	si			; restore si for config.sys file.
 20487 000010A7 06                      	push	es
 20488 000010A8 1E                      	push	ds
 20489 000010A9 07                      	pop	es
 20490 000010AA 1F                      	pop	ds			; now ds - sysinitseg, es - confbot
 20491 000010AB 7306                            jnc     short install_exit_ret
 20492                                  
 20493 000010AD 56                      	push	si			; error in loading the file for install=.
 20494 000010AE E8AE22                  	call	badload 		; es:si-> path,filename,0.
 20495 000010B1 5E                      	pop	si
 20496                                  
 20497                                  	; 24/10/2022
 20498                                  	;jmp	short sysinitptr_retn ; (MSDOS 5.0 IO.SYS, SYSINIT:1140h)
 20499                                  	; 11/12/2022
 20500                                  	; ds = cs
 20501 000010B2 C3                      	retn
 20502                                  
 20503                                  install_exit_ret:
 20504                                  	;retn		; retn (MSDOS 6.21 IO.SYS, SYSINIT:1283h) ; 18/12/2022
 20505                                  
 20506                                  	; 24/10/2022 (MSDOS 5.0 IO.SYS SYSINIT)
 20507                                  ;SYSINIT:1142h:
 20508 000010B3 B44D                    	mov     ah,4Dh
 20509 000010B5 CD21                    	int     21h             ; DOS - 2+ - GET EXIT CODE OF SUBPROGRAM (WAIT)
 20510 000010B7 80FC03                  	cmp     ah,3
 20511 000010BA 7404                    	jz      short sysinitptr_retn
 20512 000010BC E89316                  	call    error_line
 20513 000010BF F9                      	stc
 20514                                  sysinitptr_retn:	; (SYSINIT:114Fh)
 20515 000010C0 C3                      	retn		
 20516                                  
 20517                                  ; ----------------------------------------------------------------------
 20518                                  
 20519                                  ;**	ParaRound - Round Up length to paragraph multiple
 20520                                  ;
 20521                                  ;	ParaRound rounds a byte count up to a multiple of 16, then divides
 20522                                  ;	by 16 yielding a "length in paragraphs" value.
 20523                                  ;
 20524                                  ;	ENTRY	(ax) = byte length
 20525                                  ;	EXIT	(ax) = rounded up length in paragraphs
 20526                                  ;	USES	ax, flags
 20527                                  
 20528                                  ParaRound:
 20529 000010C1 83C00F                  	add	ax,15
 20530 000010C4 D1D8                    	rcr	ax,1
 20531 000010C6 D1E8                    	shr	ax,1
 20532 000010C8 D1E8                    	shr	ax,1
 20533 000010CA D1E8                    	shr	ax,1
 20534 000010CC C3                      	retn
 20535                                  
 20536                                  ; ----------------------------------------------------------------------
 20537                                  ; sysinit_base module.
 20538                                  ;
 20539                                  ; This module is relocated by the routine EndFile to a location in low
 20540                                  ; memory. It is then called by SYSINIT to perform the EXEC of programs
 20541                                  ; that are being loaded by the "install=" command. After the EXEC call
 20542                                  ; completes, this module performs a checksum on the SYSINIT code (at the
 20543                                  ; top of memory) to be sure that the EXECed program did not damage it.
 20544                                  ; If it did, then this module will print an error message and stop the
 20545                                  ; system. Otherwise, it returns control to SYSINIT.
 20546                                  ;
 20547                                  ;in: after relocation,
 20548                                  ;    ax = 4b00h - load and execute the program dos function.
 20549                                  ;    ds = confbot. segment of config.sys file image
 20550                                  ;    es = sysinitseg. segment of sysinit module itself.
 20551                                  ;    ds:dx = pointer to asciiz string of the path,filename to be executed.
 20552                                  ;    es:bx = pointer to a parameter block for load.
 20553                                  ;    SI_end (byte) - offset vaule of end of sysinit module label
 20554                                  ;    bigsize (word) - # of word from confbot to SI_end.
 20555                                  ;    chksum (word) - sum of every byte from confbot to SI_end in a
 20556                                  ;			word boundary moduler form.
 20557                                  ;    sysinit_ptr (dword ptr) - return address to sysinit module.
 20558                                  ;
 20559                                  ;note: sysinit should save necessary registers and when the control is back
 20560                                  
 20561                                  	; 24/10/2022
 20562                                  	; (SYSINIT:115Ch for MSDOS 5.0 SYSINIT)
 20563                                  sysinit_base:				
 20564 000010CD 2E8C166200              	mov	[cs:sysinit_base_ss],ss	; save stack
 20565 000010D2 2E89266400              	mov	[cs:sysinit_base_sp],sp	
 20566 000010D7 CD21                    	int	21h			; load/exec dos call.
 20567 000010D9 2E8E166200              	mov	ss,[cs:sysinit_base_ss]	; restore stack
 20568 000010DE 2E8B266400              	mov	sp,[cs:sysinit_base_sp]
 20569 000010E3 1F                      	pop	ds			; restore confbot seg
 20570 000010E4 07                      	pop	es			; restore sysinitseg
 20571 000010E5 7216                    	jc	short sysinit_base_end	; load/exec function failed.
 20572                                  					; at this time,i don't have to worry about
 20573                                  					; that sysinit module has been broken or not.
 20574 000010E7 E81800                  	call	sum_up			; otherwise,check if it is good.
 20575 000010EA 263906[5603]            	cmp	[es:checksum],ax
 20576 000010EF 740C                    	je	short sysinit_base_end
 20577                                  
 20578                                  ;	memory broken. show "memory allocation error" message and stall.
 20579                                  
 20580 000010F1 B409                    	mov	ah,9
 20581 000010F3 0E                      	push	cs
 20582 000010F4 1F                      	pop	ds
 20583 000010F5 BA6600                  	mov	dx,mem_alloc_err_msgx-sysinit_base ; 65h (for MSDOS 5.0 SYSINIT)
 20584 000010F8 CD21                    	int	21h
 20585                                  		; DOS - PRINT STRING
 20586                                  		; DS:DX -> string terminated by "$"
 20587                                  	; 24/10/2022
 20588                                  _stall: 
 20589                                  	; 11/12/2022
 20590 000010FA F4                      	hlt 
 20591                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 20592                                  	;hlt				;use HLT to minimize energy consumption
 20593 000010FB EBFD                            jmp	short _stall
 20594                                  
 20595                                  sysinit_base_end: 
 20596 000010FD 26FF2E[5203]            	jmp	far [es:sysinit_ptr]	;return back to sysinit module
 20597                                  
 20598                                  ;-------------------------------------
 20599                                  
 20600                                  sum_up:
 20601                                  
 20602                                  ;in:   es - sysinitseg.
 20603                                  ;out:  ax - result
 20604                                  ;
 20605                                  ;remark: since this routine will only check starting from "locstack" to the end of
 20606                                  ;	 sysinit segment,the data area, and the current stack area are not
 20607                                  ;	 coverd. in this sense,this check sum routine only gives a minimal
 20608                                  ;	 gaurantee to be safe.
 20609                                  ;
 20610                                  ;first sum up confbot seg.
 20611                                  
 20612 00001102 1E                      	push	ds
 20613                                  	;mov	ax,[es:CONFBOT]
 20614                                  	; 24/10/2022
 20615 00001103 26A1[A102]              	mov	ax,[es:top_of_cdss]
 20616 00001107 8ED8                    	mov	ds,ax
 20617 00001109 31F6                    	xor	si,si
 20618 0000110B 31C0                    	xor	ax,ax
 20619 0000110D 268B0E[4C03]            	mov	cx,[es:config_size]	; if config_size has been broken,then this
 20620                                  					;whole test better fail.
 20621 00001112 D1E9                    	shr	cx,1			; make it a word count
 20622 00001114 7406                    	jz	short sum_sys_code	; when config.sys file not exist.
 20623                                  sum1:
 20624 00001116 0304                    	add	ax,[si]
 20625 00001118 46                      	inc	si
 20626 00001119 46                      	inc	si
 20627 0000111A E2FA                    	loop	sum1
 20628                                  ;now,sum up sysinit module.
 20629                                  sum_sys_code:
 20630                                  	; 24/10/2022
 20631 0000111C BE1C11                  	mov	si,locstack ; 5A6h (MSDOS 5.0 IO.SYS, SYSINIT)
 20632                                  				        ; starting after the stack.  M069
 20633                                  					;  this does not cover the possible stack code!!!
 20634                                  	;;mov	cx,22688  ; for MSDOS 6.21 IO.SYS
 20635                                  	; 02/11/2022
 20636                                  	;mov	cx,3D20h  ; (15648) for MSDOS 5.0 IO.SYS (SYSINIT)	
 20637                                  	; 30/12/2022 (BugFix)
 20638                                  	; (SI_End is 39D0h for this -Retro DOS v4.0- IO.SYS)
 20639 0000111F B9[F038]                	mov	cx,SI_end ; (22688) 	; SI_end is the label at the end of sysinit
 20640 00001122 29F1                    	sub	cx,si			;  from after_checksum to SI_end
 20641 00001124 D1E9                    	shr	cx,1
 20642                                  sum2:
 20643 00001126 260304                  	add	ax,[es:si]
 20644 00001129 46                      	inc	si
 20645 0000112A 46                      	inc	si
 20646 0000112B E2F9                    	loop	sum2
 20647 0000112D 1F                      	pop	ds
 20648 0000112E C3                      	retn
 20649                                  
 20650                                  ; 24/10/2022 - Retro DOS 4.0 (Modified MSDOS 5.0 IO.SYS, SYSINIT)
 20651                                  
 20652                                  sysinit_base_ss equ $-sysinit_base  ; = 61 (MSDOS 5.0 IO.SYS, SYSINIT:115Ch)
 20653                                  ;SYSINIT:11BDh:
 20654 0000112F 0000                    	dw	0
 20655                                  sysinit_base_sp equ $-sysinit_base  ; = 63 (MSDOS 5.0 IO.SYS, SYSINIT:1161h)
 20656                                  ;SYSINIT:11BFh:
 20657 00001131 0000                    	dw	0
 20658                                  
 20659                                  mem_alloc_err_msgx:
 20660                                  
 20661                                         ;include msbio.cl4		; memory allocation error message
 20662                                  
 20663                                  ;SYSINIT:12F6:  ; MSDOS 6.21 IO.SYS SYSINIT:12F6h
 20664 00001133 0D0A                    	db	0Dh,0Ah
 20665 00001135 4D656D6F727920616C-     	db 	'Memory allocation error $'
 20665 0000113E 6C6F636174696F6E20-
 20665 00001147 6572726F722024     
 20666                                  
 20667                                  end_sysinit_base: ; label byte
 20668                                  	; 24/10/2022
 20669                                  	; (SYSINIT:11DCh for MSDOS 5.0 SYSINIT)
 20670                                  
 20671                                  ; ----------------------------------------------------------------------
 20672                                  ; Set_Buffer
 20673                                  ;
 20674                                  ;function: set buffers in the real memory.				  
 20675                                  ;	   lastly set the memhi,memlo for the next available free address.
 20676                                  ;
 20677                                  ;input:    ds:bx -> buffinfo.
 20678                                  ;	   [memhi]:[memlo = 0] = available space for the hash bucket.	  
 20679                                  ;	   singlebuffersize = buffer header size + sector size		  
 20680                                  ;
 20681                                  ;output:   buffers Queue established.	       				   
 20682                                  ;	   [memhi]:[memlo] = address of the next available free space.	   
 20683                                  ; ----------------------------------------------------------------------
 20684                                  
 20685                                  	; 25/10/2022 - Retro DOS 4.0 (Modified MSDOS 5.0 IO.SYS, SYSINIT)
 20686                                  	; (SYSINIT:11DCh)
 20687                                  
 20688                                  set_buffer:
 20689 0000114E 30D2                    	xor	dl,dl				; assume buffers not in HMA
 20690 00001150 E85500                  	call	GetBufferAddr
 20691 00001153 7402                    	jz	short set_buff_1
 20692 00001155 B201                    	mov	dl,1				; buffers in HMA
 20693                                  set_buff_1:
 20694                                  	; 25/10/2022
 20695                                  	;mov	[bx+BUFFINF.Buff_Queue],di	; head of Buff Q
 20696 00001157 893F                    	mov	[bx],di
 20697                                  	;mov	[bx+BUFFINF.Buff_Queue+2],es
 20698 00001159 8C4702                  	mov	[bx+2],es
 20699                                  	;mov	word [bx+BUFFINF.Dirty_Buff_Count],0 ;set dirty_count to 0.
 20700 0000115C C747040000              	mov	word [bx+4],0
 20701                                  
 20702 00001161 89F8                    	mov	ax,di
 20703 00001163 2E8B0E[9702]            	mov	cx,[cs:buffers]
 20704 00001168 57                      	push	di				; remember first buffer
 20705                                  
 20706                                  ;	for each buffer
 20707                                  
 20708                                  nxt_buff:
 20709 00001169 E86300                  	call	set_buffer_info 		; set buf_link,buf_id...
 20710 0000116C 89C7                    	mov	di,ax
 20711 0000116E E2F9                    	loop	nxt_buff
 20712                                  
 20713 00001170 2E2B3E[9B02]            	sub	di,[cs:singlebuffersize]	; point to last buffer
 20714                                  
 20715 00001175 59                      	pop	cx				; get first buffer
 20716                                  	;mov	[es:di+buffinfo.buf_next],cx	; last->next = first
 20717 00001176 26890D                  	mov	[es:di],cx
 20718 00001179 87CF                    	xchg	cx,di
 20719                                  	;mov	[es:di+buffinfo.buf_prev],cx	; first->prev = last
 20720                                  	; 25/10/2022
 20721 0000117B 26894D02                	mov	[es:di+2],cx
 20722                                  
 20723 0000117F 08D2                    	or	dl,dl				; In HMa ?
 20724 00001181 7417                    	jz	short set_buff_2		; no
 20725                                  	;mov	byte [bx+BUFFINF.Buff_In_HMA],1
 20726 00001183 C6470C01                	mov	byte [bx+12],1
 20727 00001187 2EA1[E003]              	mov	ax,[cs:memhi]			; seg of scratch buff
 20728                                  	;mov	word [bx+BUFFINF.Lo_Mem_Buff],0	; offset of sctarch buff is 0
 20729 0000118B C7470D0000              	mov	word [bx+13],0
 20730                                  	;mov	[bx+BUFFINF.Lo_Mem_Buff+2],ax
 20731 00001190 89470F                  	mov	word [bx+15],ax
 20732 00001193 2EA1[9B02]              	mov	ax,[cs:singlebuffersize]	; size of scratch buff
 20733                                  	;sub	ax,bufinsiz ; 20		; buffer head not required
 20734 00001197 83E814                  	sub	ax,20
 20735                                  set_buff_2:
 20736 0000119A 2E0106[DE03]            	add	[cs:memlo],ax
 20737                                  	;or	byte [cs:setdevmarkflag],for_devmark ; 2
 20738 0000119F 2E800E[3614]02          	or	byte [cs:setdevmarkflag],2
 20739                                  	;call	round
 20740                                  	;retn
 20741                                  	; 12/12/2022
 20742 000011A5 E9201F                  	jmp	round
 20743                                  
 20744                                  ; ----------------------------------------------------------------------
 20745                                  ; procedure : GetBufferAddr
 20746                                  ;
 20747                                  ;	      Gets the buffer address either in HMA or in Lo Mem
 20748                                  ;
 20749                                  ; returns in es:di the buffer adress
 20750                                  ; returns NZ if allocated in HMA
 20751                                  ; ----------------------------------------------------------------------
 20752                                  
 20753                                  	; 25/10/2022 
 20754                                  GetBufferAddr:
 20755 000011A8 53                      	push	bx
 20756 000011A9 52                      	push	dx
 20757 000011AA 2EA1[9B02]              	mov	ax, [cs:singlebuffersize]
 20758 000011AE 2EF726[9702]            	mul	word [cs:buffers]
 20759                                  	;add	ax,0Fh
 20760 000011B3 83C00F                  	add	ax,15 
 20761                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 20762                                  	;and	ax,~15	; 0FFF0h	; para round
 20763                                  	; 12/12/2022
 20764 000011B6 24F0                    	and	al,~15	; 0F0h
 20765 000011B8 89C3                    	mov	bx,ax
 20766 000011BA B8024A                  	mov	ax,4A02h
 20767                                  	;mov	ax,((multMULT<<8)+multMULTALLOCHMA)
 20768 000011BD CD2F                    	int	2Fh
 20769 000011BF 83FFFF                  	cmp	di,0FFFFh
 20770 000011C2 7508                    	jne	short got_hma
 20771 000011C4 BF0000                  	mov	di,0			; dont xor di,di Z flag needed
 20772                                  	;zf=1
 20773                                  	;xor	di,di	; 25/10/2022
 20774                                  	;zf=1
 20775 000011C7 2E8E06[E003]            	mov	es,[cs:memhi]
 20776                                  got_hma:
 20777 000011CC 5A                      	pop	dx
 20778 000011CD 5B                      	pop	bx
 20779 000011CE C3                      	retn
 20780                                  
 20781                                  ; ----------------------------------------------------------------------
 20782                                  
 20783                                  set_buffer_info:
 20784                                  
 20785                                  ;function: set buf_link,buf_id,buf_sector
 20786                                  ;
 20787                                  ;in: es:di -> buffer header to be set.
 20788                                  ;    ax = di
 20789                                  ;
 20790                                  ;out:
 20791                                  ;    above entries set.
 20792                                  
 20793                                  	; 25/10/2022 
 20794 000011CF 2EFF36[3903]            	push	word [cs:buf_prev_off]
 20795                                  	;pop	word [es:di+buffinfo.buf_prev]
 20796 000011D4 268F4502                	pop	word [es:di+2]
 20797 000011D8 2EA3[3903]              	mov	[cs:buf_prev_off],ax
 20798 000011DC 2E0306[9B02]            	add	ax,[cs:singlebuffersize]	;adjust ax
 20799                                  	;mov	[es:di+buffinfo.buf_next],ax
 20800 000011E1 268905                  	mov	[es:di],ax
 20801                                  	;mov	word [es:di+buffinfo.buf_ID],00FFh  ; new buffer free
 20802 000011E4 26C74504FF00            	mov	word [es:di+4],00FFh
 20803                                  	;mov	word [es:di+buffinfo.buf_sector],0   ; to compensate the masm 3 bug
 20804 000011EA 26C745060000            	mov	word [es:di+6],0
 20805                                  	;mov	word [es:di+buffinfo.buf_sector+2],0 ; to compensate the masm 3 bug
 20806 000011F0 26C745080000            	mov	word [es:di+8],0
 20807 000011F6 C3                      	retn
 20808                                  
 20809                                  ; ======================================================================
 20810                                  ; MSSTACK initialization routine - MSDOS 6.0 - SYSDINIT1.ASM - 1991
 20811                                  ; ----------------------------------------------------------------------
 20812                                  ; 27/03/2019 - Retro DOS v4.0
 20813                                  
 20814                                  ; ----------------------------------------------------------------------
 20815                                  ; ibmstack initialization routine.
 20816                                  ;
 20817                                  ;	to follow the standard interrupt sharing scheme, msstack.asm
 20818                                  ;	has been modified. this initialization routine also has to
 20819                                  ;	be modified because for the interrupt level 7 and 15, firstflag
 20820                                  ;	should be set to signal that this interrupt handler is the
 20821                                  ;	first handler hooked to this interrupt vector.
 20822                                  ;	we determine this by looking at the instruction pointed by
 20823                                  ;	this vector. if it is iret, then this handler should be the
 20824                                  ;	first one. in our case, only the interrupt vector 77h is the
 20825                                  ;	interrupt level 15. (we don't hook interrupt level 7.)
 20826                                  ;
 20827                                  ;	the followings are mainly due to m.r.t; ptm fix of p886 12/3/86
 20828                                  ;	some design changes are needed to the above interrupt sharing
 20829                                  ;	method. the above sharing scheme assumes that 1). interrupt
 20830                                  ;	sharing is never done on levels that have bios support. 2). "phantom"
 20831                                  ;	interrupts would only be generated on levels 7 and 15.
 20832                                  ;	these assumptions are not true any more. we have to use the firstflag
 20833                                  ;	for every level of interrupt. we will set the firstflag on the following
 20834                                  ;	conditions:
 20835                                  ;
 20836                                  ;	 a.	 if the cs portion of the vector is 0000, then "first"
 20837                                  ;	 b. else if cs:ip points to valid shared header, then not "first"
 20838                                  ;	 c. else if cs:ip points to an iret, then "first"
 20839                                  ;	 d. else if cs:ip points to dummy, then "first"
 20840                                  ;
 20841                                  ;	where dummy is - the cs portion must be f000, and the ip portion must
 20842                                  ;	be equal to the value at f000:ff01. this location is the initial value
 20843                                  ;	from vector_table for interrupt 7, one of the preserved addresses in all
 20844                                  ;	the bioses for all of the machines.
 20845                                  ;
 20846                                  ;	system design group requests bios to handle the phantom interrupts.
 20847                                  ;
 20848                                  ;	the "phantom" interrupt is an illegal interrupt such as an interrupt
 20849                                  ;	produced by the bogus adapter card even without interrupt request is
 20850                                  ;	set.  more specifically, 1). the 8259 has a feature when running in
 20851                                  ;	edge triggered mode to latch a pulse and present the interrupt when
 20852                                  ;	the processor indicates interrupt acknowledge (inta). the interrupt
 20853                                  ;	pulse was exist at the time of inta to get a "phantom" interrupt.
 20854                                  ;	2). or, this is caused by adapter cards placing a glitch on the
 20855                                  ;	interrupt line.
 20856                                  ;
 20857                                  ;	to handle those "phantom" interrupts, the main stack code will check
 20858                                  ;	the own firstflag, and if it is not "first" (which means the forward
 20859                                  ;	pointer points to the legal shared interrupt handler), then pass the
 20860                                  ;	control. if it is the first, then the following action should be
 20861                                  ;	taken. we don't have to implement skack logic in this case.
 20862                                  ;
 20863                                  ;	to implement this logic, we rather choose a simple method.
 20864                                  ;	if ont of the above "firstflag" conditions is met, we are not
 20865                                  ;	going to hook this interrupt vector. the reason is if the original
 20866                                  ;	vector points to "iret" and do nothing, we don't need
 20867                                  ;	to implement the stack logic for it. this will simplify implementation
 20868                                  ;	while maintaining compatibility with the old version of dos.
 20869                                  ;	this implies that in the main stack code, there might be a stack code
 20870                                  ;	that will never be used, a dead code.
 20871                                  ;
 20872                                  ;in - cs, ds -> sysinitseg, es -> relocated stack code & data.
 20873                                  
 20874                                  	; 25/10/2022 - Retro DOS 4.0 (Modified MSDOS 5.0 IO.SYS, SYSINIT)
 20875                                  	; (SYSINIT:1287h)
 20876                                  
 20877                                  	; 14/12/2022
 20878                                  stackinit:
 20879 000011F7 50                      	push	ax
 20880 000011F8 1E                      	push	ds
 20881 000011F9 06                      	push	es
 20882 000011FA 53                      	push	bx
 20883 000011FB 51                      	push	cx
 20884 000011FC 52                      	push	dx
 20885 000011FD 57                      	push	di
 20886 000011FE 56                      	push	si
 20887 000011FF 55                      	push	bp
 20888                                  
 20889                                  ;currently es -> stack code area
 20890                                  
 20891                                  	; 12/12/2022
 20892                                  	; ds = cs
 20893 00001200 A1[8A02]                	mov	ax,[stack_count]
 20894 00001203 89C1                    	mov	cx,ax  ; *!*!*  
 20895                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 20896                                  	; (MSDOS 5.0 IO.SYS - SYSINIT:1290h)
 20897                                  	;mov	ax,[cs:stack_count] ; !!	;defined in cs
 20898 00001205 26A3[0200]              	mov	[es:stackcount],ax		;defined in stack code area
 20899                                  	; (MSDOS 5.0 IO.SYS - SYSINIT:1298h)
 20900 00001209 A1[8C02]                	mov	ax,[stack_size]	 ; !!		;in cs
 20901 0000120C 26A3[0600]              	mov	[es:stacksize],ax
 20902                                  	; 12/12/2022
 20903 00001210 A1[8E02]                	mov	ax,[stack_addr]			; offset
 20904                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 20905                                  	; (MSDOS 5.0 IO.SYS - SYSINIT:129Fh)
 20906                                  	;mov	ax,[cs:stack_addr]  ; !!
 20907 00001213 26A3[0800]              	mov	[es:stacks],ax
 20908                                  	; 12/12/2022
 20909 00001217 89C5                    	mov	bp,ax ; *!*
 20910 00001219 A1[9002]                	mov	ax,[stack_addr+2]
 20911                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 20912                                  	; (MSDOS 5.0 IO.SYS - SYSINIT:129Fh)
 20913                                  	;mov	ax,[cs:stack_addr+2] ; !!	; segment
 20914 0000121C 26A3[0A00]              	mov	[es:stacks+2],ax
 20915                                  
 20916                                  ; initialize the data fields with the parameters
 20917                                  
 20918                                  ; "firstentry" will always be at stacks
 20919                                  
 20920                                  	;mov	bp,[es:stacks]			; get offset of stack
 20921                                  	; 12/12/2022
 20922                                  	; bp = [es:stacks] ; *!*
 20923 00001220 26892E[0C00]            	mov	[es:firstentry],bp
 20924                                  
 20925                                  ; the stacks will always immediately follow the table entries
 20926                                  
 20927 00001225 B80800                  	mov	ax,entrysize ; 8
 20928                                  	;mov	cx,[es:stackcount]
 20929                                  	; 12/12/2022
 20930                                  	; cx = [es:stackcount] ; *!*!*
 20931 00001228 F7E1                    	mul	cx
 20932 0000122A 01E8                    	add	ax,bp
 20933 0000122C 26A3[0400]              	mov	[es:stackat],ax
 20934 00001230 89C3                    	mov	bx,ax
 20935 00001232 83EB02                  	sub	bx,2
 20936                                  
 20937                                  ; zero the entire stack area to start with
 20938                                  
 20939 00001235 268B3E[0400]            	mov	di,[es:stackat]
 20940 0000123A 26A1[0600]              	mov	ax,[es:stacksize]
 20941 0000123E F7E1                    	mul	cx
 20942 00001240 89C1                    	mov	cx,ax
 20943 00001242 31C0                    	xor	ax,ax
 20944 00001244 06                      	push	es
 20945 00001245 1F                      	pop	ds				;ds = relocated stack code seg.
 20946                                  
 20947                                  ;now, ds -> stack code area
 20948                                  
 20949 00001246 8E06[0A00]              	mov	es,[stacks+2]			; get segment of stack area.
 20950 0000124A FC                      	cld
 20951 0000124B F3AA                    	rep	stosb
 20952                                  
 20953 0000124D 8B0E[0200]              	mov	cx,[stackcount]
 20954                                  
 20955                                  ; loop for "count" times, building a table entry
 20956                                  ;  cs = sysinitseg, ds = relocated stack code seg, es = segment of stack space
 20957                                  ;  cx = number of entries
 20958                                  ;  es:bp => base of stacks - 2
 20959                                  ;  es:bx => first table entry
 20960                                  
 20961                                  buildloop:
 20962                                  	; 11/12/2022
 20963                                  	;mov	byte [es:bp+allocbyte],free	; mov [es:bp+0],0
 20964                                  	; 25/10/2022
 20965 00001251 26C6460000              	mov	byte [es:bp],free
 20966 00001256 26884601                	mov	[es:bp+intlevel],al	; ax = 0
 20967                                  	;mov	[es:bp+1],al
 20968 0000125A 26894602                	mov	[es:bp+savedsp],ax
 20969                                  	;mov	[es:bp2],ax
 20970 0000125E 26894604                	mov	[es:bp+savedss],ax
 20971                                  	;mov	[es:bp+4],ax
 20972 00001262 031E[0600]              	add	bx,[stacksize]
 20973 00001266 26895E06                	mov	[es:bp+newsp],bx		; mov [es:bp+6],bx
 20974                                  	;mov	[es:bp+6],bx
 20975 0000126A 26892F                  	mov	[es:bx],bp
 20976 0000126D 83C508                  	add	bp,entrysize ; 8
 20977                                  
 20978 00001270 E2DF                    	loop	buildloop
 20979                                  
 20980 00001272 83ED08                  	sub	bp,entrysize ; 8
 20981 00001275 892E[0E00]              	mov	[lastentry],bp
 20982 00001279 892E[1000]              	mov	[nextentry],bp
 20983                                  
 20984 0000127D 1E                      	push	ds
 20985 0000127E B800F0                  	mov	ax,0F000h		;look at the model byte
 20986 00001281 8ED8                    	mov	ds,ax
 20987 00001283 803EFEFFF9              	cmp	byte [0FFFEh],0F9h ; mdl_convert ;convertible?
 20988 00001288 1F                      	pop	ds
 20989 00001289 7504                    	jne	short skip_disablenmis
 20990                                  
 20991 0000128B B007                    	mov	al,07h			; disable convertible nmis
 20992 0000128D E672                    	out	72h,al
 20993                                  
 20994                                  skip_disablenmis:
 20995 0000128F 31C0                    	xor	ax,ax
 20996 00001291 8EC0                    	mov	es,ax			;es - segid of vector table at 0
 20997                                  					;ds - relocated stack code segment
 20998 00001293 FA                      	cli
 20999                                  
 21000                                  	;irp	aa,<02,08,09,70>
 21001                                  	;
 21002                                  	;mov	si,aa&h*4		;pass where vector is to be adjusted
 21003                                  	;mov	di,offset int19old&aa	;we have to set old&aa for int19 handler too.
 21004                                  	;mov	bx,offset old&aa	;pass where to save original owner pointer
 21005                                  	;mov	dx,offset int&aa	;pass where new handler is
 21006                                  	;call	new_init_loop		;adjust the vector to new handler,
 21007                                  	;				;saving pointer to original owner
 21008                                  	;endm
 21009                                  
 21010                                  stkinit_02:
 21011 00001294 BE0800                  	mov	si,02h*4 ; 8
 21012 00001297 BF[4206]                	mov	di,INT19OLD02
 21013 0000129A BB[1200]                	mov	bx,old02
 21014 0000129D BA[1600]                	mov	dx,int02
 21015 000012A0 E84901                  	call	new_init_loop
 21016                                  stkinit_08:
 21017 000012A3 BE2000                  	mov	si,08h*4 ; 32
 21018 000012A6 BF[4706]                	mov	di,INT19OLD08
 21019 000012A9 BB[3800]                	mov	bx,old08
 21020 000012AC BA[3C00]                	mov	dx,int08
 21021 000012AF E83A01                  	call	new_init_loop
 21022                                  stkinit_09:
 21023 000012B2 BE2400                  	mov	si,09h*4 ; 36
 21024 000012B5 BF[4C06]                	mov	di,INT19OLD09
 21025 000012B8 BB[4100]                	mov	bx,old09
 21026 000012BB BA[4500]                	mov	dx,int09
 21027 000012BE E82B01                  	call	new_init_loop
 21028                                  stkinit_70:
 21029 000012C1 BEC001                  	mov	si,70h*4 ; 448
 21030 000012C4 BF[6A06]                	mov	di,INT19OLD70
 21031 000012C7 BB[4E00]                	mov	bx,old70
 21032 000012CA BA[5200]                	mov	dx,int70
 21033 000012CD E81C01                  	call	new_init_loop
 21034                                  
 21035                                  	;irp	aa,<0a,0b,0c,0d,0e,72,73,74,76,77> ;shared interrupts
 21036                                  	;
 21037                                  	;mov	si,aa&h*4		;pass where vector is to be adjusted
 21038                                  	;push	ds			;save relocated stack code segment
 21039                                  	;lds	bx, es:[si]		;ds:bx -> original interrupt handler
 21040                                  	;push	ds
 21041                                  	;pop	dx			;dx = segment value
 21042                                  	;	
 21043                                  	;cmp	dx,0
 21044                                  	;jz	int&aa&_first
 21045                                  	;
 21046                                  	;cmp	byte ptr ds:[bx],0cfh	;does vector point to an iret?
 21047                                  	;jz	int&aa&_first
 21048                                  	;
 21049                                  	;cmp	word ptr ds:[bx.6],424bh ;magic offset (see int&aa, msstack.inc)
 21050                                  	;jz	int&aa&_not_first
 21051                                  	;
 21052                                  	;cmp	dx,0f000h		;rom bios segment
 21053                                  	;jnz	int&aa&_not_first
 21054                                  	;
 21055                                  	;push	es
 21056                                  	;push	dx
 21057                                  	;mov	dx,0f000h
 21058                                  	;mov	es,dx
 21059                                  	;cmp	bx,word ptr es:0ff01h
 21060                                         	;pop	dx
 21061                                  	;pop	es
 21062                                  	;jz	int&aa&_first
 21063                                  	;
 21064                                  ;int&aa&_not_first:			;not the first. we are going to hook vector.
 21065                                  	;pop	ds
 21066                                  	;mov	di, offset int19old&aa	;we have to set old&aa for int19 handler too.
 21067                                  	;mov	bx, offset old&aa	;pass where to save original owner pointer
 21068                                  	;mov	dx, offset int&aa	;pass where new handler is
 21069                                  	;call	new_init_loop		;adjust the vector to new handler, saving
 21070                                  	;				;pointer to original owner.
 21071                                  	;jmp	short int&aa&_end
 21072                                  ;int&aa&_first:				;the first. don't have to hook stack code.
 21073                                  	;pop	ds
 21074                                  ;int&aa&_end:
 21075                                  	;
 21076                                  	;endm
 21077                                  
 21078                                  stkinit_0A:
 21079 000012D0 BE2800                  	mov	si,0Ah*4 ; 40
 21080                                  	
 21081                                  ; 14/12/2022
 21082                                  %if 0	
 21083                                  	; 25/10/2022 (MSDOS 5.0 IO.SYS compatibility)
 21084                                  	push	ds
 21085                                  	
 21086                                  	lds	bx,[es:si]
 21087                                  	push	ds
 21088                                  	pop	dx
 21089                                  		
 21090                                  	cmp	dx,0
 21091                                  	je	short int_0A_first
 21092                                  	
 21093                                  	cmp	byte [bx],0CFh
 21094                                  	je	short int_0A_first
 21095                                  	
 21096                                  	cmp	word [bx+6],424Bh
 21097                                  	je	short int_0A_not_first
 21098                                  	
 21099                                  	cmp	dx,0F000h
 21100                                  	jne	short int_0A_not_first
 21101                                  	
 21102                                  	push	es
 21103                                  	push	dx
 21104                                  	mov	dx,0F000h
 21105                                  	mov	es,dx
 21106                                  	cmp	bx,[es:0FF01h]
 21107                                         	pop	dx
 21108                                  	pop	es
 21109                                  	je	short int_0A_first
 21110                                  %Endif
 21111                                  
 21112                                  	; 14/12/2022
 21113                                  	; 25/10/2022
 21114 000012D3 E8EB00                  	call	int_xx_first_check ; 27/03/2019 - Retro DOS v4.0
 21115 000012D6 730C                    	jnc	short int_0A_first
 21116                                  	
 21117                                  int_0A_not_first:
 21118                                  	; 14/12/2022
 21119                                  	; 25/10/2022
 21120                                  	;pop	ds
 21121 000012D8 BF[5106]                	mov	di,INT19OLD0A
 21122 000012DB BB[5900]                	mov	bx,old0A
 21123 000012DE BA[5700]                	mov	dx,int0A
 21124 000012E1 E80801                  	call	new_init_loop
 21125                                  	
 21126                                  	; 14/12/2022	
 21127                                  	;jmp	short int_0A_end
 21128                                  ;int_0A_first:
 21129                                  	; 25/10/2022
 21130                                  	;pop	ds
 21131                                  
 21132                                  	; 14/12/2022
 21133                                  int_0A_first:
 21134                                  int_0A_end:
 21135                                  
 21136                                  stkinit_0B:
 21137 000012E4 BE2C00                  	mov	si,0Bh*4 ; 44
 21138                                  	
 21139                                  	; 14/12/2022
 21140                                  	; 25/10/2022
 21141 000012E7 E8D700                  	call	int_xx_first_check ; 27/03/2019 - Retro DOS v4.0
 21142 000012EA 730C                    	jnc	short int_0B_end ; int_0B_first
 21143                                  
 21144                                  ; 14/12/2022
 21145                                  %if 0	
 21146                                  	; 25/10/2022 (MSDOS 5.0 IO.SYS compatibility)
 21147                                  	push	ds
 21148                                  	lds	bx,[es:si]
 21149                                  	push	ds
 21150                                  	pop	dx
 21151                                  		
 21152                                  	cmp	dx,0
 21153                                  	je	short int_0B_first
 21154                                  
 21155                                  	cmp	byte [bx],0CFh
 21156                                  	je	short int_0B_first
 21157                                  	
 21158                                  	cmp	word [bx+6],424Bh
 21159                                  	je	short int_0B_not_first
 21160                                  	
 21161                                  	cmp	dx,0F000h
 21162                                  	jne	short int_0B_not_first
 21163                                  
 21164                                  	push	es
 21165                                  	push	dx
 21166                                  	mov	dx,0F000h
 21167                                  	mov	es,dx
 21168                                  	cmp	bx,[es:0FF01h]
 21169                                  	pop	dx
 21170                                  	pop	es
 21171                                  	je	short int_0B_first
 21172                                  %endif
 21173                                  
 21174                                  int_0B_not_first:
 21175                                  	; 14/12/2022
 21176                                  	; 25/10/2022
 21177                                  	;pop	ds
 21178 000012EC BF[5606]                	mov	di,INT19OLD0B
 21179 000012EF BB[7100]                	mov	bx,old0B
 21180 000012F2 BA[6F00]                	mov	dx,int0B
 21181 000012F5 E8F400                  	call	new_init_loop
 21182                                  
 21183                                  	; 14/12/2022
 21184                                  	;jmp	short int_0B_end
 21185                                  ;int_0B_first:
 21186                                  	; 25/10/2022
 21187                                  	;pop	ds
 21188                                  
 21189                                  int_0B_end:
 21190                                  	
 21191                                  stkinit_0C:
 21192 000012F8 BE3000                  	mov	si,0Ch*4 ; 48
 21193                                  	
 21194                                  	; 14/12/2022
 21195                                  	; 25/10/2022
 21196 000012FB E8C300                  	call	int_xx_first_check
 21197 000012FE 730C                    	jnc	short int_0C_end ; int_0C_first
 21198                                  
 21199                                  ; 14/12/2022
 21200                                  %if 0	
 21201                                  	; 25/10/2022 (MSDOS 5.0 IO.SYS compatibility)
 21202                                  	push	ds
 21203                                  	lds	bx,[es:si]
 21204                                  	push	ds
 21205                                  	pop	dx
 21206                                  		
 21207                                  	cmp	dx,0
 21208                                  	je	short int_0C_first
 21209                                  
 21210                                  	cmp	byte [bx],0CFh
 21211                                  	je	short int_0C_first
 21212                                  	
 21213                                  	cmp	word [bx+6],424Bh
 21214                                  	je	short int_0C_not_first
 21215                                  	
 21216                                  	cmp	dx,0F000h
 21217                                  	jne	short int_0C_not_first
 21218                                  
 21219                                  	push	es
 21220                                  	push	dx
 21221                                  	mov	dx,0F000h
 21222                                  	mov	es,dx
 21223                                  	cmp	bx,[es:0FF01h]
 21224                                  	pop	dx
 21225                                  	pop	es
 21226                                  	je	short int_0C_first
 21227                                  %endif
 21228                                  	
 21229                                  int_0C_not_first:
 21230                                  	; 14/12/2022
 21231                                  	; 25/10/2022
 21232                                  	;pop	ds
 21233 00001300 BF[5B06]                	mov	di,INT19OLD0C
 21234 00001303 BB[8900]                	mov	bx,old0C
 21235 00001306 BA[8700]                	mov	dx,int0C
 21236 00001309 E8E000                  	call	new_init_loop
 21237                                  
 21238                                  	; 14/12/2022
 21239                                  	;jmp	short int_0C_end
 21240                                  ;int_0C_first:
 21241                                  	; 25/10/2022
 21242                                  	;pop	ds
 21243                                  
 21244                                  int_0C_end:
 21245                                  
 21246                                  stkinit_0D:
 21247 0000130C BE3400                  	mov	si,0Dh*4 ; 52
 21248                                  
 21249                                  	; 14/12/2022	
 21250                                  	; 25/10/2022
 21251 0000130F E8AF00                  	call	int_xx_first_check
 21252 00001312 730C                    	jnc	short int_0D_end ; int_0D_first
 21253                                  
 21254                                  ; 14/12/2022
 21255                                  %if 0	
 21256                                  	; 25/10/2022 (MSDOS 5.0 IO.SYS compatibility)
 21257                                  	push	ds
 21258                                  	lds	bx,[es:si]
 21259                                  	push	ds
 21260                                  	pop	dx
 21261                                  		
 21262                                  	cmp	dx,0
 21263                                  	je	short int_0D_first
 21264                                  
 21265                                  	cmp	byte [bx],0CFh
 21266                                  	je	short int_0D_first
 21267                                  	
 21268                                  	cmp	word [bx+6],424Bh
 21269                                  	je	short int_0D_not_first
 21270                                  	
 21271                                  	cmp	dx,0F000h
 21272                                  	jne	short int_0D_not_first
 21273                                  
 21274                                  	push	es
 21275                                  	push	dx
 21276                                  	mov	dx,0F000h
 21277                                  	mov	es,dx
 21278                                  	cmp	bx,[es:0FF01h]
 21279                                  	pop	dx
 21280                                  	pop	es
 21281                                  	je	short int_0D_first
 21282                                  %endif
 21283                                  	
 21284                                  int_0D_not_first:
 21285                                  	; 14/12/2022
 21286                                  	; 25/10/2022
 21287                                  	;pop	ds
 21288 00001314 BF[6006]                	mov	di,INT19OLD0D
 21289 00001317 BB[A100]                	mov	bx,old0D
 21290 0000131A BA[9F00]                	mov	dx,int0D
 21291 0000131D E8CC00                  	call	new_init_loop
 21292                                  
 21293                                  	; 14/12/2022
 21294                                  	;jmp	short int_0D_end
 21295                                  	; 02/11/2022
 21296                                  ;int_0D_first:
 21297                                  	;pop	ds
 21298                                  
 21299                                  int_0D_end:
 21300                                  
 21301                                  stkinit_0E:
 21302 00001320 BE3800                  	mov	si,0Eh*4 ; 56
 21303                                  
 21304                                  	; 14/12/2022	
 21305                                  	; 25/10/2022
 21306 00001323 E89B00                  	call	int_xx_first_check
 21307 00001326 730C                    	jnc	short int_0E_end ; int_0E_first
 21308                                  
 21309                                  ; 14/12/2022
 21310                                  %if 0	
 21311                                  	; 25/10/2022 (MSDOS 5.0 IO.SYS compatibility)
 21312                                  	push	ds
 21313                                  	lds	bx,[es:si]
 21314                                  	push	ds
 21315                                  	pop	dx
 21316                                  		
 21317                                  	cmp	dx,0
 21318                                  	je	short int_0E_first
 21319                                  
 21320                                  	cmp	byte [bx],0CFh
 21321                                  	je	short int_0E_first
 21322                                  	
 21323                                  	cmp	word [bx+6],424Bh
 21324                                  	je	short int_0E_not_first
 21325                                  	
 21326                                  	cmp	dx,0F000h
 21327                                  	jne	short int_0E_not_first
 21328                                  
 21329                                  	push	es
 21330                                  	push	dx
 21331                                  	mov	dx,0F000h
 21332                                  	mov	es,dx
 21333                                  	cmp	bx,[es:0FF01h]
 21334                                  	pop	dx
 21335                                  	pop	es
 21336                                  	je	short int_0E_first
 21337                                  %endif
 21338                                  	
 21339                                  int_0E_not_first:
 21340                                  	; 14/12/2022
 21341                                  	; 25/10/2022
 21342                                  	;pop	ds
 21343 00001328 BF[6506]                	mov	di,INT19OLD0E
 21344 0000132B BB[B900]                	mov	bx,old0E
 21345 0000132E BA[B700]                	mov	dx,int0E
 21346 00001331 E8B800                  	call	new_init_loop
 21347                                  
 21348                                  	; 14/12/2022
 21349                                  	;jmp	short int_0E_end
 21350                                  ;int_0E_first:
 21351                                  	; 25/10/2022
 21352                                  	;pop	ds	
 21353                                  
 21354                                  int_0E_end:
 21355                                  
 21356                                  stkinit_72:
 21357 00001334 BEC801                  	mov	si,72h*4 ; 456
 21358                                  	
 21359                                  	; 14/12/2022
 21360                                  	; 25/10/2022
 21361 00001337 E88700                  	call	int_xx_first_check
 21362 0000133A 730C                    	jnc	short int_72_end ; int_72_first
 21363                                  
 21364                                  ; 14/12/2022
 21365                                  %if 0	
 21366                                  	; 25/10/2022 (MSDOS 5.0 IO.SYS compatibility)
 21367                                  	push	ds
 21368                                  	lds	bx,[es:si]
 21369                                  	push	ds
 21370                                  	pop	dx
 21371                                  		
 21372                                  	cmp	dx,0
 21373                                  	je	short int_72_first
 21374                                  
 21375                                  	cmp	byte [bx],0CFh
 21376                                  	je	short int_72_first
 21377                                  	
 21378                                  	cmp	word [bx+6],424Bh
 21379                                  	je	short int_72_not_first
 21380                                  	
 21381                                  	cmp	dx,0F000h
 21382                                  	jne	short int_72_not_first
 21383                                  
 21384                                  	push	es
 21385                                  	push	dx
 21386                                  	mov	dx,0F000h
 21387                                  	mov	es,dx
 21388                                  	cmp	bx,[es:0FF01h]
 21389                                  	pop	dx
 21390                                  	pop	es
 21391                                  	je	short int_72_first
 21392                                  %endif
 21393                                  	
 21394                                  int_72_not_first:
 21395                                  	; 14/12/2022
 21396                                  	; 25/10/2022
 21397                                  	;pop	ds
 21398 0000133C BF[6F06]                	mov	di,INT19OLD72
 21399 0000133F BB[D100]                	mov	bx,old72
 21400 00001342 BA[CF00]                	mov	dx,int72
 21401 00001345 E8A400                  	call	new_init_loop
 21402                                  
 21403                                  	; 14/12/2022
 21404                                  	;jmp	short int_72_end
 21405                                  ;int_72_first:
 21406                                  	; 25/10/2022
 21407                                  	;pop	ds
 21408                                  
 21409                                  int_72_end:
 21410                                  
 21411                                  stkinit_73:
 21412 00001348 BECC01                  	mov	si,73h*4 ; 460
 21413                                  	
 21414                                  	; 14/12/2022
 21415                                  	; 25/10/2022
 21416 0000134B E87300                  	call	int_xx_first_check
 21417 0000134E 730C                    	jnc	short int_73_end ; int_73_first
 21418                                  
 21419                                  ; 14/12/2022
 21420                                  %if 0	
 21421                                  	; 25/10/2022 (MSDOS 5.0 IO.SYS compatibility)
 21422                                  	push	ds
 21423                                  	lds	bx,[es:si]
 21424                                  	push	ds
 21425                                  	pop	dx
 21426                                  		
 21427                                  	cmp	dx,0
 21428                                  	je	short int_73_first
 21429                                  
 21430                                  	cmp	byte [bx],0CFh
 21431                                  	je	short int_73_first
 21432                                  	
 21433                                  	cmp	word [bx+6],424Bh
 21434                                  	je	short int_73_not_first
 21435                                  	
 21436                                  	cmp	dx,0F000h
 21437                                  	jne	short int_73_not_first
 21438                                  
 21439                                  	push	es
 21440                                  	push	dx
 21441                                  	mov	dx,0F000h
 21442                                  	mov	es,dx
 21443                                  	cmp	bx,[es:0FF01h]
 21444                                  	pop	dx
 21445                                  	pop	es
 21446                                  	je	short int_73_first
 21447                                  %endif	
 21448                                  	
 21449                                  int_73_not_first:
 21450                                  	; 14/12/2022
 21451                                  	; 25/10/2022
 21452                                  	;pop	ds
 21453 00001350 BF[7406]                	mov	di,INT19OLD73
 21454 00001353 BB[E900]                	mov	bx,old73
 21455 00001356 BA[E700]                	mov	dx,int73
 21456 00001359 E89000                  	call	new_init_loop
 21457                                  
 21458                                  	; 14/12/2022
 21459                                  	;jmp	short int_73_end
 21460                                  ;int_73_first:
 21461                                  	; 25/10/2022
 21462                                  	;pop	ds
 21463                                  
 21464                                  int_73_end:
 21465                                  
 21466                                  stkinit_74:
 21467 0000135C BED001                  	mov	si,74h*4 ; 464
 21468                                  	
 21469                                  	; 14/12/2022
 21470                                  	; 25/10/2022
 21471 0000135F E85F00                  	call	int_xx_first_check
 21472 00001362 730C                    	jnc	short int_74_end ; int_74_first
 21473                                  
 21474                                  ; 14/12/2022
 21475                                  %if 0		
 21476                                  	; 25/10/2022 (MSDOS 5.0 IO.SYS compatibility)
 21477                                  	push	ds
 21478                                  	lds	bx,[es:si]
 21479                                  	push	ds
 21480                                  	pop	dx
 21481                                  		
 21482                                  	cmp	dx,0
 21483                                  	je	short int_74_first
 21484                                  
 21485                                  	cmp	byte [bx],0CFh
 21486                                  	je	short int_74_first
 21487                                  	
 21488                                  	cmp	word [bx+6],424Bh
 21489                                  	je	short int_74_not_first
 21490                                  	
 21491                                  	cmp	dx,0F000h
 21492                                  	jne	short int_74_not_first
 21493                                  
 21494                                  	push	es
 21495                                  	push	dx
 21496                                  	mov	dx,0F000h
 21497                                  	mov	es,dx
 21498                                  	cmp	bx,[es:0FF01h]
 21499                                  	pop	dx
 21500                                  	pop	es
 21501                                  	je	short int_74_first
 21502                                  %endif
 21503                                  
 21504                                  int_74_not_first:
 21505                                  	; 14/12/2022
 21506                                  	; 25/10/2022
 21507                                  	;pop	ds
 21508 00001364 BF[7906]                	mov	di,INT19OLD74
 21509 00001367 BB[0101]                	mov	bx,old74
 21510 0000136A BA[FF00]                	mov	dx,int74
 21511 0000136D E87C00                  	call	new_init_loop
 21512                                  	
 21513                                  	; 14/12/2022
 21514                                  	;jmp	short int_74_end
 21515                                  ;int_74_first:
 21516                                  	; 25/10/2022
 21517                                  	;pop	ds
 21518                                  
 21519                                  int_74_end:
 21520                                  
 21521                                  stkinit_76:
 21522 00001370 BED801                  	mov	si,76h*4 ; 472
 21523                                  	
 21524                                  	; 14/12/2022
 21525                                  	; 25/10/2022
 21526 00001373 E84B00                  	call	int_xx_first_check
 21527 00001376 730E                    	jnc	short int_76_end ; int_76_first
 21528                                  
 21529                                  ; 14/12/2022
 21530                                  %if 0	
 21531                                  	; 25/10/2022 (MSDOS 5.0 IO.SYS compatibility)
 21532                                  	push	ds
 21533                                  	lds	bx,[es:si]
 21534                                  	push	ds
 21535                                  	pop	dx
 21536                                  		
 21537                                  	cmp	dx,0
 21538                                  	je	short int_76_first
 21539                                  
 21540                                  	cmp	byte [bx],0CFh
 21541                                  	je	short int_76_first
 21542                                  	
 21543                                  	cmp	word [bx+6],424Bh
 21544                                  	je	short int_76_not_first
 21545                                  	
 21546                                  	cmp	dx,0F000h
 21547                                  	jne	short int_76_not_first
 21548                                  
 21549                                  	push	es
 21550                                  	push	dx
 21551                                  	mov	dx,0F000h
 21552                                  	mov	es,dx
 21553                                  	cmp	bx,[es:0FF01h]
 21554                                  	pop	dx
 21555                                  	pop	es
 21556                                  	je	short int_76_first
 21557                                  %endif
 21558                                  	
 21559                                  int_76_not_first:
 21560                                  	; 14/12/2022
 21561                                  	; 25/10/2022
 21562                                  	;pop	ds
 21563 00001378 BF[7E06]                	mov	di,INT19OLD76
 21564 0000137B BB[1901]                	mov	bx,old76
 21565 0000137E BA[1701]                	mov	dx,int76
 21566 00001381 E86800                  	call	new_init_loop
 21567                                  
 21568                                  	; 14/12/2022
 21569 00001384 EB00                    	jmp	short int_76_end
 21570                                  ;int_76_first:
 21571                                  	; 25/10/2022
 21572                                  	;pop	ds
 21573                                  
 21574                                  int_76_end:
 21575                                  
 21576                                  stkinit_77:
 21577 00001386 BEDC01                  	mov	si,77h*4 ; 476
 21578                                  	
 21579                                  	; 14/12/2022
 21580                                  	; 25/10/2022
 21581 00001389 E83500                  	call	int_xx_first_check
 21582 0000138C 730C                    	jnc	short int_77_end ; int_77_first
 21583                                  
 21584                                  ; 14/12/2022
 21585                                  %if 0	
 21586                                  	; 25/10/2022 (MSDOS 5.0 IO.SYS compatibility)
 21587                                  	push	ds
 21588                                  	lds	bx,[es:si]
 21589                                  	push	ds
 21590                                  	pop	dx
 21591                                  		
 21592                                  	cmp	dx,0
 21593                                  	je	short int_77_first
 21594                                  
 21595                                  	cmp	byte [bx],0CFh
 21596                                  	je	short int_77_first
 21597                                  	
 21598                                  	cmp	word [bx+6],424Bh
 21599                                  	je	short int_77_not_first
 21600                                  	
 21601                                  	cmp	dx,0F000h
 21602                                  	jne	short int_77_not_first
 21603                                  
 21604                                  	push	es
 21605                                  	push	dx
 21606                                  	mov	dx,0F000h
 21607                                  	mov	es,dx
 21608                                  	cmp	bx,[es:0FF01h]
 21609                                  	pop	dx
 21610                                  	pop	es
 21611                                  	je	short int_77_first
 21612                                  %endif
 21613                                  	
 21614                                  int_77_not_first:
 21615                                  	; 14/12/2022
 21616                                  	; 25/10/2022
 21617                                  	;pop	ds
 21618 0000138E BF[8306]                	mov	di,INT19OLD77
 21619 00001391 BB[3101]                	mov	bx,old77
 21620 00001394 BA[2F01]                	mov	dx,int77
 21621 00001397 E85200                  	call	new_init_loop
 21622                                  
 21623                                  	; 14/12/2022
 21624                                  	;jmp	short int_77_end
 21625                                  ;int_77_first:
 21626                                  	; 25/10/2022
 21627                                  	;pop	ds
 21628                                  
 21629                                  int_77_end:
 21630 0000139A 1E                      	push	ds
 21631 0000139B B800F0                  	mov	ax,0F000h		; look at the model byte
 21632 0000139E 8ED8                    	mov	ds,ax
 21633 000013A0 803EFEFFF9              	cmp	byte [0FFFEh],0F9h ; mdl_convert ; pc convertible?
 21634 000013A5 1F                      	pop	ds
 21635 000013A6 7504                    	jne	short skip_enablenmis
 21636                                  
 21637 000013A8 B027                    	mov	al,27h			; enable convertible nmis
 21638 000013AA E672                    	out	72h,al
 21639                                  
 21640                                  ; 25/10/2022
 21641                                  ; (MSDOS 5.0 SYSINIT:15FBh)
 21642                                  
 21643                                  skip_enablenmis:
 21644 000013AC FB                      	sti
 21645                                  	;;mov	ax,Bios_Data ; 70h
 21646                                  	;mov	ax,KERNEL_SEGMENT ; 70h
 21647                                  	; 21/10/2022
 21648 000013AD B87000                  	mov	ax,DOSBIODATASEG ; 0070h
 21649 000013B0 8ED8                    	mov	ds,ax
 21650                                  
 21651                                  	;mov	[640h],1 ; SYSINIT:1736h for MSDOS 6.21 IO.SYS
 21652                                  
 21653 000013B2 C606[4006]01            	mov	byte [INT19SEM],1	; indicate that int 19
 21654                                  					; initialization is complete
 21655                                  
 21656 000013B7 5D                      	pop	bp			; restore all
 21657 000013B8 5E                      	pop	si
 21658 000013B9 5F                      	pop	di
 21659 000013BA 5A                      	pop	dx
 21660 000013BB 59                      	pop	cx
 21661 000013BC 5B                      	pop	bx
 21662 000013BD 07                      	pop	es
 21663 000013BE 1F                      	pop	ds
 21664 000013BF 58                      	pop	ax
 21665 000013C0 C3                      	retn
 21666                                  
 21667                                  ; 14/12/2022
 21668                                  ; ----------------------------------------------------------------------
 21669                                  
 21670                                  	; 14/12/2022
 21671                                  	; 25/10/2022
 21672                                  ;%if 0
 21673                                  	; 27/03/2019 - Retro DOS v4.0
 21674                                  int_xx_first_check:
 21675 000013C1 1E                      	push	ds
 21676 000013C2 26C51C                  	lds	bx,[es:si]
 21677 000013C5 1E                      	push	ds
 21678 000013C6 5A                      	pop	dx
 21679                                  		
 21680 000013C7 83FA00                  	cmp	dx,0
 21681 000013CA 741E                    	je	short int_xx_first
 21682                                  	
 21683 000013CC 803FCF                  	cmp	byte [bx],0CFh
 21684 000013CF 7419                    	je	short int_xx_first
 21685                                  	
 21686 000013D1 817F064B42              	cmp	word [bx+6],424Bh
 21687 000013D6 7411                    	je	short int_xx_not_first
 21688                                  	
 21689 000013D8 81FA00F0                	cmp	dx,0F000h
 21690 000013DC 750B                    	jne	short int_xx_not_first
 21691                                  
 21692 000013DE 06                      	push	es
 21693                                  	;push	dx
 21694                                  	;mov	dx,0F000h
 21695 000013DF 8EC2                    	mov	es,dx
 21696 000013E1 263B1E01FF              	cmp	bx,[es:0FF01h]
 21697                                        	;pop	dx
 21698 000013E6 07                      	pop	es
 21699 000013E7 7401                    	je	short int_xx_first
 21700                                  
 21701                                  int_xx_not_first:
 21702 000013E9 F9                      	stc
 21703                                  int_xx_first:
 21704 000013EA 1F                      	pop	ds
 21705 000013EB C3                      	retn
 21706                                  
 21707                                  ;%endif
 21708                                  
 21709                                  ; ----------------------------------------------------------------------
 21710                                  ; 27/03/2019 - Retro DOS v4.0
 21711                                  
 21712                                  ; 25/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS, SYSINIT)
 21713                                  ; (SYSINIT:1610h)
 21714                                  
 21715                                  new_init_loop:
 21716                                  
 21717                                  ;input: si=ofset into vector table of the particular int vector being adjusted
 21718                                  ;	bx=ds:offset of oldxx, where will be saved the pointer to original owner
 21719                                  ;	dx=ds:offset of intxx, the new interrupt handler
 21720                                  ;	di=offset value of int19old&aa variable in bios.
 21721                                  ;	es=zero, segid of vector table
 21722                                  ;	ds=relocated stack code segment
 21723                                  
 21724 000013EC 268B04                  	mov	ax,[es:si]		;remember offset in vector
 21725 000013EF 8907                    	mov	[bx],ax			; to original owner in ds
 21726 000013F1 268B4402                	mov	ax,[es:si+2]		;remember segid in vector
 21727 000013F5 894702                  	mov	[bx+2],ax		; to original owner in ds
 21728                                  
 21729 000013F8 1E                      	push	ds
 21730                                  	;;mov	ax,Bios_Data ; 70h
 21731                                  	;mov	ax,KERNEL_SEGMENT ; 70h
 21732                                  	; 21/10/2022
 21733 000013F9 B87000                  	mov	ax,DOSBIODATASEG ; 0070h
 21734 000013FC 8ED8                    	mov	ds,ax			;set int19oldxx value in bios for
 21735 000013FE 268B04                  	mov	ax,[es:si]		;int 19 handler
 21736 00001401 8905                    	mov	[di],ax
 21737 00001403 268B4402                	mov	ax,[es:si+2]
 21738 00001407 894502                  	mov	word [di+2],ax
 21739 0000140A 1F                      	pop	ds
 21740                                  
 21741 0000140B 268914                  	mov	[es:si],dx  	;set vector to point to new int handler
 21742 0000140E 268C5C02                	mov	[es:si+2],ds
 21743 00001412 C3                      	retn
 21744                                  
 21745                                  ; End of STACK initialization routine
 21746                                  ; ----------------------------------------------------------------------
 21747                                  
 21748                                  ; ----------------------------------------------------------------------
 21749                                  ;set the devmark for mem command.
 21750                                  ;in: [memhi] - the address to place devmark
 21751                                  ;    [memlo] = 0
 21752                                  ;    al = id for devmark_id
 21753                                  ;out: devmark established.
 21754                                  ;     the address saved in cs:[devmark_addr]
 21755                                  ;     [memhi] increase by 1.
 21756                                  ; ----------------------------------------------------------------------
 21757                                  
 21758                                  ; 25/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS, SYSINIT)
 21759                                  ; (SYSINIT:1637h)
 21760                                  
 21761                                  setdevmark:
 21762                                  
 21763 00001413 06                      	push	es
 21764 00001414 51                      	push	cx
 21765                                  
 21766 00001415 2E8B0E[E003]            	mov	cx,[cs:memhi]
 21767 0000141A 2E890E[3414]            	mov	[cs:devmark_addr],cx
 21768 0000141F 8EC1                    	mov	es,cx
 21769                                  	; 25/10/2022
 21770                                  	;mov	[es:devmark.id],al
 21771 00001421 26A20000                	mov	[es:0],al
 21772 00001425 41                      	inc	cx
 21773                                  	;mov	[es:devmark.seg],cx
 21774 00001426 26890E0100              	mov	[es:1],cx
 21775                                  
 21776 0000142B 59                      	pop	cx
 21777 0000142C 07                      	pop	es
 21778 0000142D 2EFF06[E003]            	inc	word [cs:memhi]
 21779 00001432 C3                      	retn
 21780                                  
 21781                                  ; ----------------------------------------------------------------------
 21782                                  ; SYSCONF.ASM - MSDOS 6.0 - 1991
 21783                                  ; ----------------------------------------------------------------------
 21784                                  ; 27/03/2019 - Retro DOS v4.0
 21785                                  
 21786                                  ;MULTI_CONFIG	equ 1
 21787                                  
 21788                                  HIGH_FIRST 	equ 080h		; from ARENA.INC - modifier for
 21789                                                                          ; allocation strategy call
 21790                                  
 21791                                  ;have_install_cmd equ 00000001b 	; config.sys has install= commands
 21792                                  ;has_installed	  equ 00000010b 	; sysinit_base installed.
 21793                                  
 21794                                  default_filenum equ 8
 21795                                  
 21796                                  ;stacksw	equ true		; include switchable hardware stacks
 21797                                  
 21798                                  ; external variable defined in ibmbio module for multi-track
 21799                                  
 21800                                  ;multrk_on	equ 10000000b		;user spcified mutitrack=on,or system turns
 21801                                  					; it on after handling config.sys file as a
 21802                                  					; default value,if multrk_flag = multrk_off1.
 21803                                  ;multrk_off1	equ 00000000b		;initial value. no "multitrack=" command entered.
 21804                                  ;multrk_off2	equ 00000001b		;user specified multitrack=off.
 21805                                  
 21806                                  ; if stacksw
 21807                                  
 21808                                  ; internal stack parameters
 21809                                  
 21810                                  ;entrysize	equ 8
 21811                                  
 21812                                  ;mincount	equ 8
 21813                                  ;defaultcount	equ 9
 21814                                  ;maxcount	equ 64
 21815                                  
 21816                                  ;minsize 	equ 32
 21817                                  ;defaultsize	equ 128
 21818                                  ;maxsize 	equ 512
 21819                                  
 21820                                  DOS_FLAG_OFFSET	equ 86h
 21821                                  
 21822                                  ;ifdef MULTI_CONFIG
 21823                                  ;
 21824                                  ;   config_envlen must immediately precede config_wrkseg, because they
 21825                                  ;   may be loaded as a dword ptr
 21826                                  
 21827                                  ; 25/10/2022
 21828                                  ;config_envlen:	dw  0  			; when config_wrkseg is being used as
 21829                                  ;               			;  a scratch env, this is its length
 21830                                  ;config_wrkseg:	dw  0			; config work area (above confbot)
 21831                                  ;                   			;  segment of work area
 21832                                  ;
 21833                                  ;config_cmd:	db  0  			; current config cmd
 21834                                  ;                 			;  (with CONFIG_OPTION_QUERY bit intact)
 21835                                  ;config_multi:	db  0                   ; non-zero if multi-config config.sys
 21836                                  
 21837                                  ;endif ; MULTI_CONFIG
 21838                                  
 21839 00001433 00                      multdeviceflag:	db  0
 21840                                  
 21841 00001434 0000                    devmark_addr:	dw  0			;segment address for devmark.
 21842                                  
 21843 00001436 00                      setdevmarkflag: db  0			;flag used for devmark
 21844                                  
 21845                                  ; 12/12/2022
 21846                                  ;driver_units:	db  0			;total unitcount for driver
 21847                                  
 21848                                  ; 12/12/2022
 21849                                  ;ems_stub_installed:
 21850                                  ;		db  0
 21851                                  
 21852                                  ; 12/12/2022	
 21853                                  ;align 2
 21854                                  
 21855                                  badparm_ptr:	; label	dword
 21856 00001437 0000                    badparm_off:	dw  0
 21857 00001439 0000                    badparm_seg:	dw  0
 21858                                  
 21859                                  ;******************************************************************************
 21860                                  ;take care of config.sys file.
 21861                                  ;system parser data and code.
 21862                                  ;******************************************************************************
 21863                                  
 21864                                  ;*******************************************************************
 21865                                  ; parser options set for msbio sysconf module
 21866                                  ;*******************************************************************
 21867                                  ;
 21868                                  ;**** default assemble swiches definition **************************
 21869                                  
 21870                                  ;farsw	equ 0		; near call expected
 21871                                  ;datesw	equ 0		; check date format
 21872                                  ;timesw	equ 0		; check time format
 21873                                  ;filesw	equ 1		; check file specification
 21874                                  ;capsw	equ 0		; perform caps if specified
 21875                                  ;cmpxsw	equ 0		; check complex list
 21876                                  ;numsw	equ 1		; check numeric value
 21877                                  ;keysw	equ 0		; support keywords
 21878                                  ;swsw	equ 1		; support switches
 21879                                  ;val1sw	equ 1		; support value definition 1
 21880                                  ;val2sw	equ 0		; support value definition 2
 21881                                  ;val3sw	equ 1		; support value definition 3
 21882                                  ;drvsw	equ 1		; support drive only format
 21883                                  ;qussw	equ 0		; support quoted string format
 21884                                  
 21885                                  ; psdata_seg equ cs
 21886                                  
 21887                                  	;.xlist
 21888                                  	;include parse.asm		;together with psdata.inc
 21889                                  	;.list
 21890                                  
 21891                                  ; PSDATA.INC - MSDOS 6.0 - 1991
 21892                                  ; ======================================================================
 21893                                  ; 27/03/2019 - Retro DOS v4.0
 21894                                  
 21895                                  ; 30/03/2019
 21896                                  ; VERSION.INC (MSDOS 6.0) 
 21897                                  ; Set DBCS Blank constant
 21898                                  
 21899                                  ; ifndef DBCS
 21900                                  DB_SPACE EQU 2020h
 21901                                  DB_SP_HI EQU 20h
 21902                                  DB_SP_LO EQU 20h
 21903                                  ; else
 21904                                  
 21905                                  ;*******************************************************************
 21906                                  ; Parser include file
 21907                                  ;*******************************************************************
 21908                                  
 21909                                  ;**** Equation field
 21910                                  ;-------- Character code definition
 21911                                  
 21912                                  _$P_DBSP1	   equ	DB_SP_HI	;AN000; 1st byte of DBCS blank
 21913                                  _$P_DBSP2	   equ	DB_SP_LO	;AN000; 2nd byte of DBCS blank
 21914                                  _$P_Period	   equ	"."             ;AN020;
 21915                                  _$P_Slash	   equ	"/"             ;AN020;
 21916                                  _$P_Space	   equ	" "             ;AN000; SBCS blank
 21917                                  _$P_Comma	   equ	","             ;AN000;
 21918                                  _$P_Switch	   equ	"/"             ;AN000;
 21919                                  _$P_Keyword	   equ	"="             ;AN000;
 21920                                  _$P_Colon	   equ	":"             ;AN000;
 21921                                  _$P_Plus 	   equ	"+"             ;AN000;
 21922                                  _$P_Minus	   equ	"-"             ;AN000;
 21923                                  _$P_Rparen	   equ	")"             ;AN000;
 21924                                  _$P_Lparen	   equ	"("             ;AN000;
 21925                                  ;_$P_SQuote        equ  "'"			;AN025; deleted
 21926                                  _$P_DQuote	   equ	'"'             ;AN000;
 21927                                  _$P_NULL 	   equ	0		;AN000;
 21928                                  _$P_TAB		   equ	9		;AN000;
 21929                                  _$P_CR		   equ	0Dh		;AN000;
 21930                                  _$P_LF		   equ	0Ah		;AN000;
 21931                                  _$P_ASCII80	   equ	80h		;AN000; ASCII 80h character code
 21932                                  
 21933                                  ;-------- Masks
 21934                                  _$P_Make_Lower	   equ	20h		;AN000; make lower case character
 21935                                  _$P_Make_Upper	   equ	0FFh-_$P_Make_Lower ;AN000; make upper case character
 21936                                  
 21937                                  ;-------- DOS function call related equs
 21938                                  
 21939                                  _$P_DOS_Get_CDI	   equ	3800h		;AN000; get country dependent information
 21940                                  					; by this call, following information
 21941                                  struc _$P_CDI	
 21942 00000000 ????                     .DateF: resw 1
 21943 00000002 ??????????               .Money: resb 5
 21944 00000007 ????                     .1000:	 resb 2
 21945 00000009 ????                     .Dec:	 resb 2
 21946 0000000B ????                     .DateS: resb 2
 21947 0000000D ????                     .TimeS: resb 2
 21948 0000000F ??                          	 resb 1
 21949 00000010 ??                      	 resb 1
 21950 00000011 ??                       .TimeF: resb 1	 
 21951 00000012 ????????                	 resw 2
 21952 00000016 ????                    	 resb 2
 21953 00000018 <res Ah>                	 resw 5
 21954                                   .size:
 21955                                  endstruc
 21956                                  
 21957                                  _$P_Date_MDY	   equ	0		;AN000;
 21958                                  _$P_Date_DMY	   equ	1		;AN000;
 21959                                  _$P_Date_YMD	   equ	2		;AN000;
 21960                                  ;-------------
 21961                                  _$P_DOS_GetEV	   equ	6300h		;AN000; get DBCS EV call
 21962                                  					;AN000; DS:SI will points to DBCS EV
 21963                                  ;-------------
 21964                                  _$P_DOS_Get_TBL	   equ	65h		;AN000; get uppercase table call
 21965                                  					;AN000; following parameters are set
 21966                                  					;AN000; to get casemap table.
 21967                                  _$P_DOSTBL_Def	   equ	-1		;AN000; get default
 21968                                  _$P_DOSTBL_BL	   equ	5		;AN000; buffer length for Tbl pointer
 21969                                  _$P_DOSTBL_File	   equ	4		;AN000; get file uppercase table
 21970                                  _$P_DOSTBL_Char	   equ	2		;AN000; get character uppercase table
 21971                                  					; By this call following information
 21972                                  					; is returned.
 21973                                  struc _$P_DOS_TBL
 21974 00000000 ??                       .InfoID: resb 1			;AN000; information id for the table
 21975 00000001 ????                     .Off:	 resw 1				;AN000; offset address of the table
 21976 00000003 ????                     .Seg:	 resw 1				;AN000; segment address of the table
 21977                                  endstruc
 21978                                  
 21979                                  ; ----------------------------------------------------------------------------
 21980                                  ; PARMS 	LABEL	BYTE
 21981                                  ;		DW	PARMSX
 21982                                  ;		DB	2		; NUMBER OF STRINGS (0, 1, 2)
 21983                                  ;		DB	length		; LENGTH OF THE NEXT LIST, 0 IF NONE
 21984                                  ;		DB	" .. "          ; EXTRA DELIMITER LIST,
 21985                                  ;					; TYPICAL ARE ";", "="
 21986                                  ;					; "," & WHITESPACE ALWAYS
 21987                                  ;		DB	length		; LENGTH OF THE NEXT LIST, 0 IF NONE
 21988                                  ;		DB	" .. "          ; EXTRA END OF LINE LIST, CR, LF OR 0 ALWAYS
 21989                                  ; ----------------------------------------------------------------------------
 21990                                  
 21991                                  ;-------------------------------- PARMS block structure
 21992                                  struc _$P_PARMS_Blk
 21993 00000000 ????                     .PARMSX_Address:  resw 1		;AN000; Address of PARMSX
 21994 00000002 ??                       .Num_Extra:	   resb 1		;AN000; Number of extra stuff
 21995 00000003 ??                       .Len_Extra_Delim: resb 1		;AN000; Length of extra delimiter
 21996                                  endstruc
 21997                                  
 21998                                  _$P_Len_PARMS	   equ	4		;AN000;
 21999                                  _$P_I_Use_Default  equ	0		;AN000; no extra stuff specified
 22000                                  _$P_I_Have_Delim   equ	1		;AN000; extra delimiter specified
 22001                                  _$P_I_Have_EOL	   equ	2		;AN000; extra EOL specified
 22002                                  
 22003                                  ; ----------------------------------------------------------------------------
 22004                                  ; PARMSX	LABEL	BYTE
 22005                                  ;		DB	minp,maxp	; MIN, MAX POSITIONAL OPERANDS ALLOWED
 22006                                  ;		DW	CONTROL 	; DESCRIPTION OF POSITIONAL 1
 22007                                  ;		:			; REPEATS maxp-1 TIMES
 22008                                  ;		DB	maxs		; # OF SWITCHES
 22009                                  ;		DW	CONTROL 	; DESCRIPTION OF SWITCH 1
 22010                                  ;		:			; REPEATS maxs-1 TIMES
 22011                                  ;		DB	maxk		; # OF KEYWORD
 22012                                  ;		DW	CONTROL 	; DESCRIPTION OF KEYWORD 1
 22013                                  ;		:			; REPEATS maxk-1 TIMES
 22014                                  ; ----------------------------------------------------------------------------
 22015                                  
 22016                                  ;-------------------------------- PARMSX block structure
 22017                                  struc _$P_PARMSX_Blk		;AN000;
 22018 00000000 ??                       .MinP: resb 1			;AN000; Minimum positional number
 22019 00000001 ??                       .MaxP:	resb 1			;AN000; Maximum positional number
 22020 00000002 ????                     .1st_Control: resw 1		;AN000; Address of the 1st CONTROL block
 22021                                  endstruc
 22022                                  
 22023                                  ; ----------------------------------------------------------------------------
 22024                                  ; << Control field definition  >>
 22025                                  ;
 22026                                  ;
 22027                                  ;CONTROL   LABEL   BYTE
 22028                                  ;	   DW	   MATCH_FLAGS	   ; CONTROLS TYPE MATCHED
 22029                                  ;				   ; 8000H=NUMERIC VALUE, (VALUE LIST WILL BE CHECKED)
 22030                                  ;				   ; 4000H=SIGNED NUMERIC VALUE (VALUE LIST WILL BE CHECKED)
 22031                                  ;				   ; 2000H=SIMPLE STRING(VALUE LIST WILL BE CHECKED)
 22032                                  ;				   ; 1000H=DATE STRING (VALUE LIST WON'T BE CHECKED)
 22033                                  ;				   ; 0800H=TIME STRING (VALUE LIST WON'T BE CHECKED)
 22034                                  ;				   ; 0400H=COMPLEX LIST (VALUE LIST WON'T BE CHECKED)
 22035                                  ;				   ; 0200H=FILE SPEC (VALUE LIST WON'T BE CHECKED)
 22036                                  ;				   ; 0100H=DRIVE ONLY (VALUE LIST WON'T BE CHECKED)
 22037                                  ;				   ; 0080H=QUOTED STRING (VALUE LIST WON'T BE CHECKED)
 22038                                  ;				   ; 0010H=IGNORE ":" AT END IN MATCH
 22039                                  ;				   ; 0002H=REPEATS ALLOWED
 22040                                  ;				   ; 0001H=OPTIONAL
 22041                                  ;	   DW	   FUNCTION_FLAGS
 22042                                  ;				   ; 0001H=CAP RESULT BY FILE TABLE
 22043                                  ;				   ; 0002H=CAP RESULT BY CHAR TABLE
 22044                                  ;				   ; 0010H=REMOVE ":" AT END
 22045                                  ; (tm10)			   ; 0020H=colon is not necessary for switch
 22046                                  ;	   DW	   RESULT	   ; RESULT BUFFER
 22047                                  ;	   DW	   VALUES	   ; VALUE LISTS
 22048                                  ;	   DB	   nid		   ; NUMBER OF KEYWORD/SWITCH SYNONYMS IN FOLLOWING LIST
 22049                                  ;	   DB	   "...",0         ; IF n >0, KEYWORD 1
 22050                                  ;	   :
 22051                                  ;
 22052                                  ;Note:
 22053                                  ;    - The MATCH_FLAG is bit significant. You can set, for example, TIME bit and
 22054                                  ;      DATE bit simalteniously.
 22055                                  ;
 22056                                  ;      The parser examins each bit along with the following priority.
 22057                                  ;
 22058                                  ;      COMPLEX -> DATE -> TIME -> NUMERIC VAL -> SIGNED NUMERIC VAL -> DRIVE ->
 22059                                  ;      FILE SPEC -> SIMPLE STRING.
 22060                                  ;
 22061                                  ;    - When the FUNCTION_FLAG is 0001 or 0002, the STRING pointed to by a pointer
 22062                                  ;      in the result buffer is capitalized.
 22063                                  ;
 22064                                  ;    - Match_Flags 0001H and 0002H have meaning only for the positional.
 22065                                  ;
 22066                                  ;    - The "...",0 (bottom most line) does require '=' or '/'. When you need a
 22067                                  ;      switch, for example, '/A', then STRING points to;
 22068                                  ;
 22069                                  ;			DB    1 	; number of following synonyms
 22070                                  ;			DB   '/A',0
 22071                                  ;
 22072                                  ;      When you need a keyword, for example, 'CODEPAGE=', then "...",0 will be;
 22073                                  ;
 22074                                  ;			DB    1 	; number of following synonyms
 22075                                  ;			DB   'CODEPAGE=',0
 22076                                  ;
 22077                                  ;    - "..." must consist of upper case characters only because the parser
 22078                                  ;      performs pattern matching after converting input to upper case (by
 22079                                  ;      using the current country upper case table)
 22080                                  ;
 22081                                  ;    - One "..." can contain only one switch or keyword. If you need, for
 22082                                  ;      example /A and /B, the format will be;
 22083                                  ;
 22084                                  ;			DB    2 	; number of following synonyms
 22085                                  ;			DB    '/A',0
 22086                                  ;			DB    '/B',0
 22087                                  ; ----------------------------------------------------------------------------
 22088                                  
 22089                                  ;**** Match_Flags
 22090                                  
 22091                                  _$P_Num_Val	   equ	8000h		;AN000; Numeric Value
 22092                                  _$P_SNum_Val	   equ	4000h		;AN000; Signed numeric value
 22093                                  _$P_Simple_S	   equ	2000h		;AN000; Simple string
 22094                                  _$P_Date_S	   equ	1000h		;AN000; Date string
 22095                                  _$P_Time_S	   equ	0800h		;AN000; Time string
 22096                                  _$P_Cmpx_S	   equ	0400h		;AN000; Complex string
 22097                                  _$P_File_Spc	   equ	0200h		;AN000; File Spec
 22098                                  _$P_Drv_Only	   equ	0100h		;AN000; Drive Only
 22099                                  _$P_Qu_String	   equ	0080h		;AN000; Quoted string
 22100                                  _$P_Ig_Colon	   equ	0010h		;AN000; Ignore colon at end in match
 22101                                  _$P_Repeat	   equ	0002h		;AN000; Repeat allowed
 22102                                  _$P_Optional	   equ	0001h		;AN000; Optional
 22103                                  
 22104                                  ;**** Function flags
 22105                                  
 22106                                  _$P_CAP_File	   equ	0001h		;AN000; CAP result by file table
 22107                                  _$P_CAP_Char	   equ	0002h		;AN000; CAP result by character table
 22108                                  _$P_Rm_Colon	   equ	0010h		;AN000; Remove ":" at the end
 22109                                  _$P_colon_is_not_necessary equ 0020h	;AN000;(tm10) /+10 and /+:10
 22110                                  
 22111                                  ;-------------------------------- Control block structure
 22112                                  struc _$P_Control_Blk
 22113 00000000 ????                     .Match_Flag:	 resw 1		;AN000; Controls type matched
 22114 00000002 ????                     .Function_Flag: resw 1		;AN000; Function should be taken
 22115 00000004 ????                     .Result_Buf:	 resw 1		; Result buffer address
 22116 00000006 ????                     .Value_List:	 resw 1		;AN000; Value list address
 22117 00000008 ??                       .nid:		 resb 1		;AN000; # of keyword/SW synonyms
 22118 00000009 ??                       .KEYorSW:	 resb 1		;AN000; keyword or sw
 22119                                  endstruc
 22120                                  
 22121                                  ; ----------------------------------------------------------------------------
 22122                                  ; << Value List Definition >>
 22123                                  ;
 22124                                  ;VALUES 	LABEL	BYTE
 22125                                  ;		DB	nval			; NUMBER OF VALUE DEFINITIONS (0 - 3)
 22126                                  ;	     +-
 22127                                  ;	     |	DB	nrng			; NUMBER OF RANGES
 22128                                  ;	     | +DB	ITEM_TAG		; RETURN VALUE IF RANGE MATCHED
 22129                                  ;	     | +DD	X,Y			; RANGE OF VALUES
 22130                                  ;	     |	:
 22131                                  ;	     |	DB	nnval			; NUMBER OF CHOICES
 22132                                  ;	     | +DB	ITEM_TAG		; RETURN VALUE IF NUMBER CHOICE MATCHED
 22133                                  ;	     | +DD	VALUE			; SPECIFIC CHOICE IF NUMBER
 22134                                  ;	     |	:
 22135                                  ;	     |	DB	nstrval 		; NUMBER OF CHOICES
 22136                                  ;	     | +DB	ITEM_TAG		; RETURN VALUE IF STRING CHOICE MATCHED
 22137                                  ;	     | +DW	STRING			; SPECIFIC CHOICE IF STING
 22138                                  ;	     +-	:
 22139                                  ;
 22140                                  ;STRING 	DB	"...",0                 ; ASCIIZ STRING IMAGE
 22141                                  ;
 22142                                  ;Note:
 22143                                  ;    - ITEM_TAG must not be 0FFH, which will be used in the result buffer
 22144                                  ;      when no choice lists are provided.
 22145                                  ;
 22146                                  ;    - STRING must consist of upper case characters only because the parser
 22147                                  ;      performs pattern matching after converting input to upper case (by
 22148                                  ;      using the current country upper case table)
 22149                                  ; ----------------------------------------------------------------------------
 22150                                  
 22151                                  _$P_nval_None	   equ	0		;AN000; no value list ID
 22152                                  _$P_nval_Range	   equ	1		;AN000; range list ID
 22153                                  _$P_nval_Value	   equ	2		;AN000; value list ID
 22154                                  _$P_nval_String	   equ	3		;AN000; string list ID
 22155                                  _$P_Len_Range	   equ	9		;AN000; Length of a range choice(two DD plus one DB)
 22156                                  _$P_Len_Value	   equ	5		;AN000; Length of a value choice(one DD plus one DB)
 22157                                  _$P_Len_String	   equ	3		;AN000; Length of a string choice(one DW plus one DB)
 22158                                  _$P_No_nrng	   equ	0		;AN000; (tm07) no nrng. nnval must not be 0.
 22159                                  
 22160                                  struc _$P_Val_List
 22161 00000000 ??                       .NumofList: resb 1			;AN000; number of following choice
 22162 00000001 ????                     .Val_XL:    resw 1			;AN000; lower word of value
 22163 00000003 ????                     .Val_XH:    resw 1			;AN000; higher word of value
 22164 00000005 ????                     .Val_YL:    resw 1			;AN000; lower word of another value
 22165 00000007 ????                     .Val_YH:    resw 1			;AN000; higher word of another value
 22166                                  endstruc
 22167                                  
 22168                                  ; ----------------------------------------------------------------------------
 22169                                  ; << Result Buffer Definition  >>
 22170                                  ;
 22171                                  ;RESULT 	LABEL	BYTE			; BELOW FILLED IN FOR DEFAULTS
 22172                                  ;		DB	type			; TYPE RETURNED: 0=RESERVED,
 22173                                  ;						;	1=NUMBER, 2=LIST INDEX,
 22174                                  ;						;	3=STRING, 4=COMPLEX,
 22175                                  ;						;	5=FILESPEC, 6=DRIVE
 22176                                  ;						;	7=DATE, 8=TIME
 22177                                  ;						;	9=QUOTED STRING
 22178                                  ;		DB	ITEM_TAG		; MATCHED ITEM TAG
 22179                                  ;
 22180                                  ;		dw	synonym@		; es:@ points to found SYNONYM if provided.
 22181                                  ;
 22182                                  ;            +-
 22183                                  ;	    | DD	n			; VALUE IF NUMBER
 22184                                  ;	    | or
 22185                                  ;	    |	DW	i			; INDEX (OFFSET) INTO VALUE LIST
 22186                                  ;	    |					; (ES presents Segment address)
 22187                                  ;	    | or
 22188                                  ;	    |	DD	STRING			; OFFSET OF STRING VALUE
 22189                                  ;	    | or
 22190                                  ;	    |	DB	drv			; DRIVE NUMBER (1-A, 2-B,..., 26-Z)
 22191                                  ;	    | or
 22192                                  ;	    |	DW	YEAR	   ;(1980-2099)  IN CASE OF DATE
 22193                                  ;	    |	DB	MONTH	   ;(1-12)	 Note: Range check is not performed.
 22194                                  ;	    |	DB	DATE	   ;(1-31)	       0 is filled when the corresponding field was not specified.
 22195                                  ;	    | or
 22196                                  ;	    |	DB	HOUR	   ;(0-23)	  IN CASE OF TIME
 22197                                  ;	    |	DB	MINUTES    ;(0-59)	  Note: Range check is not performed .
 22198                                  ;	    |	DB	SECONDS    ;(0-59)		0 is filled when the corresponding field was not specified .
 22199                                  ;	    |	DB	HUNDREDTHS ;(0-99)
 22200                                  ;	    +-
 22201                                  ;
 22202                                  ;
 22203                                  ;Note: ITEM_TAG is 0FFH when the caller does not specify the choice
 22204                                  ;      list.
 22205                                  ;
 22206                                  ;      YEAR: If the input value for the year is less than 100, parser
 22207                                  ;	     adds 1900 to it.  For example, when 87 is input to parser for
 22208                                  ;	     the year value, he returns 1987.
 22209                                  ; ----------------------------------------------------------------------------
 22210                                  
 22211                                  ;-------------------------------- Result block structure
 22212                                  struc _$P_Result_Blk
 22213 00000000 ??                       .Type:        resb 1		;AN000; Type returned
 22214 00000001 ??                       .Item_Tag:    resb 1		;AN000; Matched item tag
 22215 00000002 ????                     .SYNONYM_Ptr: resw 1		;AN000; pointer to Synonym list returned
 22216 00000004 ????????                 .Picked_Val:  resb 4		;AN000; value
 22217                                  endstruc
 22218                                  
 22219                                  ;--------------------------------
 22220                                  ;**** values for the type field in the result block
 22221                                  
 22222                                  _$P_EOL		   equ	0		;AN000; End of line
 22223                                  _$P_Number	   equ	1		;AN000; Number
 22224                                  _$P_List_Idx	   equ	2		;AN000; List Index
 22225                                  _$P_String	   equ	3		;AN000; String
 22226                                  _$P_Complex	   equ	4		;AN000; Complex
 22227                                  _$P_File_Spec	   equ	5		;AN000; File Spec
 22228                                  _$P_Drive	   equ	6		;AN000; Drive
 22229                                  _$P_Date_F	   equ	7		;AN000; Date
 22230                                  _$P_Time_F	   equ	8		;AN000; Time
 22231                                  _$P_Quoted_String  equ	9		;AN000; Quoted String
 22232                                  
 22233                                  _$P_No_Tag	   equ	0FFh		;AN000; No ITEM_TAG found
 22234                                  
 22235                                  ;**** Return code
 22236                                  ;
 22237                                  ; following return code will be returned in the AX register.
 22238                                  
 22239                                  _$P_No_Error	   equ	0		;AN000; No error
 22240                                  _$P_Too_Many	   equ	1		;AN000; Too many operands
 22241                                  _$P_Op_Missing	   equ	2		;AN000; Required operand missing
 22242                                  _$P_Not_In_SW	   equ	3		;AN000; Not in switch list provided
 22243                                  _$P_Not_In_Key	   equ	4		;AN000; Not in keyword list provided
 22244                                  _$P_Out_Of_Range   equ	6		;AN000; Out of range specified
 22245                                  _$P_Not_In_Val	   equ	7		;AN000; Not in value list provided
 22246                                  _$P_Not_In_Str	   equ	8		;AN000; Not in string list provided
 22247                                  _$P_Syntax	   equ	9		;AN000; Syntax error
 22248                                  _$P_RC_EOL	   equ	-1		;AN000; End of command line
 22249                                  
 22250                                  ; DATA - Retro DOS v4.0 - 27/03/2019
 22251                                  
 22252                                  ; MSDOS 6.2 IO.SYS SYSINIT:179Ch
 22253                                  
 22254                                  ;********************** Local Data *************************************
 22255 0000143B 0000                    _$P_ORDINAL:	   dw	0		;AN000; Operand ordinal save area
 22256 0000143D 0000                    _$P_RC:		   dw	0		;AN000; Return code from parser
 22257 0000143F 0000                    _$P_SI_Save:	   dw	0		;AN000; Pointer of command buffer
 22258 00001441 0000                    _$P_DX:		   dw	0		;AN000; Return result buffer address
 22259 00001443 00                      _$P_Terminator:	   db	0		;AN000; Terminator code (ASCII)
 22260 00001444 0000                    _$P_DBCSEV_OFF:	   dw	0		;AN000; Offset of DBCS EV
 22261 00001446 0000                    _$P_DBCSEV_SEG:	   dw	0		;AN000; Segment of DBCS EV
 22262 00001448 0000                    _$P_Flags:	   dw	0		;AN000; Parser internal flags
 22263                                  %define _$P_Flags1 _$P_Flags		;AN038; to reference first byte flags
 22264                                  %define _$P_Flags2 _$P_Flags+1		;AN038; to reference second byte flags only
 22265                                  
 22266                                  ;in second byte of _$P_Flags, referenced as _$P_Flags2:
 22267                                  _$P_equ		   equ	01h	      ;AN000; "=" packed in string buffet
 22268                                  _$P_Neg		   equ	02h	      ;AN000; Negative value
 22269                                  _$P_Time12	   equ	04h	      ;AN000; set when PM is specified
 22270                                  _$P_Key_Cmp	   equ	08h	      ;AN000; set when keyword compare
 22271                                  _$P_SW_Cmp	   equ	10h	      ;AN000; set when switch compare
 22272                                  _$P_Extra	   equ	20h	      ;AN000; set when extra delimiter found
 22273                                  _$P_SW		   equ	40h	      ;AN000; set when switch found (tm08)
 22274                                  _$P_Signed	   equ	80h	      ;AN000; signed numeric specified
 22275                                  
 22276                                  ;in first byte of _$P_Flags, referenced as _$P_Flags1:
 22277                                  _$P_time12am	   equ	01h	      ;AN038; set when AM is specified on time
 22278                                  _$P_TIME_AGAIN	   equ	02h	      ;AN039; SET WHEN READY TO RE-PARSE TIME
 22279                                  
 22280 0000144A 0000                    _$P_SaveSI_Cmpx:   dw	0		;AN000; save si for later use by complex
 22281 0000144C 0000                    _$P_KEYorSW_Ptr:   dw	0		;AN000; points next to "=" or ":" code
 22282 0000144E 0000                    _$P_Save_EOB:	   dw	0		;AN000; save pointer to EOB
 22283 00001450 0000                    _$P_Found_SYNONYM: dw	0		;AN000; es:@ points to found synonym
 22284                                  
 22285 00001452 00<rep 80h>             _$P_STRING_BUF:	   times 128 db 0	;AN000; Pick a operand from command line
 22286                                  _$P_STRING_BUF_END equ	$		;AN000;
 22287                                  
 22288                                  ; 25/10/2022
 22289                                  ; (MSDOS 5.0 IO.SYS, SYSINIT:16F8h)
 22290                                  
 22291 000014D2 FF                      _$P_Char_CAP_Ptr:  db	0FFh		;AN000; info id
 22292 000014D3 0000                    		   dw	0		;AN000; offset	of char case map table
 22293 000014D5 0000                    		   dw	0		;AN000; segment of char case map table
 22294                                  ; 25/10/2022
 22295                                  ;_$P_File_CAP_Ptr: db	0FFh		;AN000; info id
 22296                                  ;		   dw	0		;AN000; offset	of file case map table
 22297                                  ;		   dw	0		;AN000; segment of file case map table
 22298                                  
 22299                                  ; (tm06) IF FileSW			;AN000;(Check if file spec is supported)
 22300                                  ;
 22301                                  
 22302                                  ;M029
 22303                                  ;!!!WARNING!!!
 22304                                  ; In routine SYSPARSE (parse.asm), _$P_FileSp_Char is reinitialized using 
 22305                                  ;hardcoded strings. If the chars in the string are changed here, corresponding
 22306                                  ;changes need to be made in SYSPARSE
 22307                                  
 22308                                  ;IF FileSW+DrvSW 			;AN000;(Check if file spec is supported)
 22309                                  
 22310                                  ; 25/10/2022
 22311                                  ; (MSDOS 5.0 IO.SYS, SYSINIT:16FDh)
 22312                                  
 22313 000014D7 5B5D7C3C3E2B3D3B22      _$P_FileSp_Char	   db	'[]|<>+=;"'     ;AN000; delimitter of file spec
 22314                                  _$P_FileSp_Len	   equ	$-_$P_FileSp_Char ;AN000;
 22315                                  
 22316                                  ;ENDIF					;AN000;(of FileSW)
 22317                                  
 22318                                  ; delimiter parsing
 22319                                  _$P_colon_period   equ	01h		;AN032; check for colon & period
 22320                                  _$P_period_only	   equ	02h		;AN032; check only for period
 22321                                  
 22322                                  ;filespec error flag
 22323 000014E0 00                      _$P_err_flag:	   db	0		;AN033; flag set if filespec parsing error
 22324                                  					;AN033;  was detected.
 22325                                  _$P_error_filespec equ	01h		;AN033; mask to set flag
 22326                                  
 22327                                  
 22328                                  ; PARSE.ASM - MSDOS 6.0 - 1991
 22329                                  ; ======================================================================
 22330                                  ; 27/03/2019 - Retro DOS v4.0
 22331                                  
 22332                                  ;***********************************************************************
 22333                                  ; SysParse;
 22334                                  ;
 22335                                  ;  Function : Parser Entry
 22336                                  ;
 22337                                  ;  Input: DS:SI -> command line
 22338                                  ;	  ES:DI -> parameter block
 22339                                  ;	  cs -> psdata.inc
 22340                                  ;	  CX = operand ordinal
 22341                                  ;
 22342                                  ;	  Note:  ES is the segment containing all the control blocks defined
 22343                                  ;		 by the caller, except for the DOS COMMAND line parms, which
 22344                                  ;		 is in DS.
 22345                                  ;
 22346                                  ;  Output: CY = 1   error of caller, means invalid parameter block or
 22347                                  ;		    invalid value list. But this parser does NOT implement
 22348                                  ;		    this feature. Therefore CY always zero.
 22349                                  ;
 22350                                  ;	   CY = 0   AX = return code
 22351                                  ;		    BL = terminated delimiter code
 22352                                  ;		    CX = new operand ordinal
 22353                                  ;		    SI = set past scaned operand
 22354                                  ;		    DX = selected result buffer
 22355                                  ;
 22356                                  ; Use:	_$P_Skip_Delim, _$P_Chk_EOL, _$P_Chk_Delim, _$P_Chk_DBCS
 22357                                  ;	_$P_Chk_Swtch, _$P_Chk_Pos_Control, _$P_Chk_Key_Control
 22358                                  ;	_$P_Chk_Sw_Control, _$P_Fill_Result
 22359                                  ;
 22360                                  ; Vars: _$P_Ordinal(RW), _$P_RC(RW), _$P_SI_Save(RW), _$P_DX(R), _$P_Terminator(R)
 22361                                  ;	_$P_SaveSI_Cmpx(W), _$P_Flags(RW), _$P_Found_SYNONYM(R), _$P_Save_EOB(W)
 22362                                  ;
 22363                                  ;-------- Modification History -----------------------------------------
 22364                                  ;
 22365                                  ;  4/04/87 : Created by K. K,
 22366                                  ;  4/28/87 : _$P_Val_YH assemble error (tm01)
 22367                                  ;	   : JMP SHORT assemble error (tm02)
 22368                                  ;  5/14/87 : Someone doesn't want to include psdata (tm03)
 22369                                  ;  6/12/87 : _$P_Bridge is missing when TimeSw equ 0 and (CmpxSw equ 1 or
 22370                                  ;	     DateSW equ 1)	      (tm04)
 22371                                  ;  6/12/87 : _$P_SorD_Quote is missing when QusSw equ 0 and CmpxSW equ 1
 22372                                  ;				      (tm05) in PSDATA.INC
 22373                                  ;  6/12/87 : _$P_FileSp_Char and _$P_FileSP_Len are missing
 22374                                  ;	     when FileSW equ 0 and DrvSW equ 1 (tm06) in PSDATA.INC
 22375                                  ;  6/18/87 : $VAL1 and $VAL3, $VAL2 and $VAL3 can be used in the same
 22376                                  ;	     value-list block	      (tm07)
 22377                                  ;  6/20/87 : Add _$P_SW to check if there's an omiting parameter after
 22378                                  ;	     switch (keyword) or not. If there is, backup si for next call
 22379                                  ;	     (tm08)
 22380                                  ;  6/24/87 : Complex Item checking does not work correctly when CmpSW equ 1
 22381                                  ;	     and DateSW equ 0 and TimeSW equ 0 (tm09)
 22382                                  ;  6/24/87 : New function flag _$P_colon_is_not_necessary for switch
 22383                                  ;	     /+15 and /+:15 are allowed for user (tm10)
 22384                                  ;  6/29/87 : ECS call changes DS register but it causes the address problem
 22385                                  ;	     in user's routines. _$P_Chk_DBCS (tm11)
 22386                                  ;  7/10/87 : Switch with no_match flag (0x0000H) does not work correctly
 22387                                  ;					  (tm12)
 22388                                  ;  7/10/87 : Invalid switch/keyword does not work correctly
 22389                                  ;					  (tm13)
 22390                                  ;  7/10/87 : Drive_only breaks 3 bytes after the result buffer
 22391                                  ;					  (tm14)
 22392                                  ;  7/12/87 : Too_Many_Operands sets DX=0 as the PARSE result
 22393                                  ;					  (tm15)
 22394                                  ;  7/24/87 : Negative lower bound on numeric ranges cause trouble
 22395                                  
 22396                                  ;  7/24/87 : Quoted strings being returned with quotes.
 22397                                  
 22398                                  ;  7/28/87 : Kerry S (;AN018;)
 22399                                  ;	     Non optional value on switch (match flags<>0 and <>1) not flagged
 22400                                  ;	     as an error when missing.	Solution: return error 2.  Modules
 22401                                  ;	     affected: _$P_Chk_SW_Control.
 22402                                  
 22403                                  ;  7/29/87 : Kerry S (;AN019;)
 22404                                  ;	     Now allow the optional bit in match flags for switches.  This
 22405                                  ;	     allows the switch to be encountered with a value or without a
 22406                                  ;	     value and no error is returned.
 22407                                  ;
 22408                                  
 22409                                  ;  8/28/87 : Ed K, Kerry S (;AN020;)
 22410                                  ;  9/14/87   In PROC _$P_Get_DecNum, when checking for field separators
 22411                                  ;	     within a date response, instead of checking just for the one
 22412                                  ;	     character defined by the COUNTRY DEPENDENT INFO, check for
 22413                                  ;	     all three chars, "-", "/", and ".". Change _$P_Chk_Switch to allow
 22414                                  ;	     slashes in date strings when DateSw (assembler switch) is set.
 22415                                  
 22416                                  ;  9/1/87  : Kerry S (;AN021)
 22417                                  ;	     In PROC _$P_String_Comp, when comparing the switch or keyword on
 22418                                  ;	     the command line with the string in the control block the
 22419                                  ;	     comparing was stopping at a colon (switch) or equal (keyword)
 22420                                  ;	     on the command line and assuming a match.	This allowed a shorter
 22421                                  ;	     string on the command line than in the synonym list in the control
 22422                                  ;	     block.  I put in a test for a null in the control block so the
 22423                                  ;	     string in the control block must be the same length as the string
 22424                                  ;	     preceeding the colon or equal on the command line.
 22425                                  
 22426                                  ;  8/28/87 : Kerry S (;AN022;)
 22427                                  ;	     All references to data in PSDATA.INC had CS overrides.  This caused
 22428                                  ;	     problems for people who included it themselves in a segment other
 22429                                  ;	     than CS.  Added switch to allow including PSDATA.INC in any
 22430                                  ;	     segment.
 22431                                  
 22432                                  ;  9/16/87 : Ed K (;AN023;) PTM1040
 22433                                  ;	     in _$P_set_cdi PROC, it assumes CS points to psdata. Change Push CS
 22434                                  ;	     into PUSH cs.  In _$P_Get_DecNum PROC, fix AN020
 22435                                  ;	     forced both TIME and DATE to use the delims, "-","/",".".
 22436                                  ;	     Created FLag, in _$P_time_Format PROC, to request the delim in
 22437                                  ;	     BL be used if TIME is being parsed.
 22438                                  
 22439                                  ;  9/24/87 : Ed K
 22440                                  ;	     Removed the include to STRUC.INC.	Replaced the STRUC macro
 22441                                  ;	     invocations with their normally expanded code; made comments
 22442                                  ;	     out of the STRUC macro invocation statements to maintain readability.
 22443                                  
 22444                                  ;  9/24/87 : Ed K (;AN024;) PTM1222
 22445                                  ;	     When no CONTROL for a keyword found, tried to fill in RESULT
 22446                                  ;	     pointed to by non-existant CONTROL.
 22447                                  
 22448                                  ; 10/15/87 : Ed K (;AN025;) PTM1672
 22449                                  ;	     A quoted text string can be framed only by double quote.  Remove
 22450                                  ;	     support to frame quoted text string with single quote.
 22451                                  ;	     (apostrophe) _$P_SorD_Quote is removed from PSDATA.INC.
 22452                                  ;	     _$P_SQuote EQU also removed from PSDATA.INC.  Any references to
 22453                                  ;	     single quote in PROC prologues are left as is for history reasons.
 22454                                  
 22455                                  ;	     This fixes another bug, not mentioned in p1672, in that two
 22456                                  ;	     quote chars within a quoted string is supposed to be reported as
 22457                                  ;	     one quote character, but is reported as two quotes.  This changed
 22458                                  ;	     two instructions in PROC _$P_Quoted_Str.
 22459                                  
 22460                                  ;	     Also fixed are several JMP that caused a NOP, these changed to
 22461                                  ;	     have the SHORT operator to avoid the unneeded NOP.
 22462                                  
 22463                                  ;	     The code and PSDATA.INC have been aligned for ease of reading.
 22464                                  
 22465                                  ; 10/26/87 : Ed K (;AN026;) PTM2041, DATE within SWITCH, BX reference to
 22466                                  ;	     psdata buffer should have cs.
 22467                                  
 22468                                  ; 10/27/87 : Ed K (;AN027;) PTM2042 comma between keywords implies
 22469                                  ;	     positional missing.
 22470                                  
 22471                                  ; 11/06/87 : Ed K (;AN028;) PTM 2315 Parser should not use line feed
 22472                                  ;	     as a line delimiter, should use carriage return.
 22473                                  ;	     Define switch: LFEOLSW, if on, accept LF as end of line char.
 22474                                  
 22475                                  ; 11/11/87 : Ed K (;AN029;) PTM 1651 GET RID OF WHITESPACE AROUND "=".
 22476                                  
 22477                                  ; 11/18/87 : Ed K (;AN030;) PTM 2551 If filename is just "", then
 22478                                  ;	     endless loop since SI is returned still pointing to start
 22479                                  ;	     of that parm.
 22480                                  
 22481                                  ; 11/19/87 : Ed K (;AN031;) PTM 2585 date & time getting bad values.
 22482                                  ;	     Vector to returned string has CS instead of cs, but
 22483                                  ;	     when tried to fix it on previous version, changed similar
 22484                                  ;	     but wrong place.
 22485                                  
 22486                                  ; 12/09/87 : Bill L (;AN032;) PTM 2772 colon and period are now valid
 22487                                  ;	     delimiters between hours, minutes, seconds for time. And period
 22488                                  ;	     and comma are valid delimiters between seconds and 100th second.
 22489                                  
 22490                                  ; 12/14/87 : Bill L (;AN033;) PTM 2722 if illegal delimiter characters
 22491                                  ;	     in a filespec, then flag an error.
 22492                                  
 22493                                  ; 12/22/87 : Bill L (;AN034;)	    All local data to parser is now
 22494                                  ;	     indexed off of the cs equate instead of the DS register.
 22495                                  ;	     Using this method, DS can point to the segment of PSP or to psdata
 22496                                  ;  -->	     local parser data. Why were some references to local data changed
 22497                                  ;	     to do this before, but not all ?????
 22498                                  
 22499                                  ; 02/02/88 : Ed K (;AC035;) INSPECT utility, suggests optimizations.
 22500                                  
 22501                                  ; 02/05/88 : Ed K (;AN036;) P3372-UPPERCASE TRANSLATION, cs HOSED.
 22502                                  ;
 22503                                  ; 02/08/88 : Ed K (;AN037;) P3410-AVOID POP OF CS, CHECK BASESW FIRST.
 22504                                  
 22505                                  ; 02/19/88 : Ed K (;AN038;) p3524 above noon and "am" should be error
 22506                                  
 22507                                  ; 02/23/88 : Ed K (;AN039;) p3518 accept "comma" and "period" as decimal
 22508                                  ;	     separator in TIME before hundredths field.
 22509                                  ;
 22510                                  ; 08/09/90 : SA	M005	Prevented parser from recognizing '=' signs within
 22511                                  ;			strings as keywords.
 22512                                  ;
 22513                                  ;***********************************************************************
 22514                                  
 22515                                  ;IF FarSW				;AN000;(Check if need far return)
 22516                                  ;SysParse proc far			;AN000;
 22517                                  ;ELSE					;AN000;
 22518                                  ;SysParse proc near			;AN000;
 22519                                  ;ENDIF					;AN000;(of FarSW)
 22520                                  
 22521                                  ; 27/03/2019 - Retro DOS v4.0
 22522                                  ; (MSDOS 6.21 IO.SYS - SYSINIT:1842h)
 22523                                  
 22524                                  ; 25/10/2022 - Retro DOS v4.0
 22525                                  ; (MSDOS 5.0 IO.SYS - SYSINIT:1707h)
 22526                                  
 22527                                  SysParse:
 22528 000014E1 2EC706[4814]0000        	mov	word [cs:_$P_Flags],0	;AC034; Clear all internal flags
 22529 000014E8 FC                      	cld				;AN000; confirm forward direction
 22530 000014E9 2E890E[3B14]            	mov	word [cs:_$P_ORDINAL],cx ;AC034; save operand ordinal
 22531 000014EE 2EC706[3D14]0000        	mov	word [cs:_$P_RC],_$P_No_Error ;AC034; Assume no error
 22532 000014F5 2EC706[5014]0000        	mov	word [cs:_$P_Found_SYNONYM],0 ;AC034; initalize synonym pointer
 22533                                  
 22534 000014FC 2EC706[4114]0000        	mov	word [cs:_$P_DX],0	;AC034; (tm15)
 22535                                  
 22536                                  ;M029 -- Begin changes
 22537                                  ; The table of special chars _$P_FileSp_Char should be initialized on every
 22538                                  ;entry to SysParse. This is in the non-checksum region and any program that
 22539                                  ;corrupts this table but does not corrupt the checksum region will leave
 22540                                  ;command.com parsing in an inconsistent state.
 22541                                  ; NB: The special characters string has been hardcoded here. If any change
 22542                                  ;is made to it in psdata.inc, a corresponding change needs to be made here.
 22543                                  
 22544                                  ;IF FileSW + DrvSW
 22545 00001503 2EC706[D714]5D5B        	mov	word [cs:_$P_FileSp_Char], ']['
 22546 0000150A 2EC706[D914]3C7C        	mov	word [cs:_$P_FileSp_Char+2], '<|'
 22547 00001511 2EC706[DB14]2B3E        	mov	word [cs:_$P_FileSp_Char+4], '+>'
 22548 00001518 2EC706[DD14]3B3D        	mov 	word [cs:_$P_FileSp_Char+6], ';='
 22549                                  ;ENDIFtHHH
 22550                                  
 22551                                  ;M029 -- End of changes
 22552                                  
 22553 0000151F E8BC06                  	call	_$P_Skip_Delim		;AN000; Move si to 1st non white space
 22554 00001522 7313                    	jnc	short _$P_Start		;AN000; If EOL is not encountered, do parse
 22555                                  ;--------------------------- End of Line
 22556 00001524 B8FFFF                  	mov	ax,_$P_RC_EOL		;AN000; set exit code to -1
 22557 00001527 53                      	push	bx			;AN000;
 22558                                  	;mov	bx,[es:di+_$P_PARMS_Blk.PARMSX_Address]
 22559                                  					;AN000; Get the PARMSX address to
 22560 00001528 268B1D                  	mov	bx,[es:di]
 22561                                  	;cmp	cl,[es:bx+_$P_PARMSX_Blk.MinP]
 22562                                  					;AN000; check ORDINAL to see if the minimum
 22563 0000152B 263A0F                  	cmp	cl,[es:bx]	
 22564 0000152E 7303                    	jae	short _$P_Fin		;AN000; positional found.
 22565                                  
 22566 00001530 B80200                  	mov	ax,_$P_Op_Missing	;AN000; If no, set exit code to missing operand
 22567                                  _$P_Fin: 				;AN000;
 22568 00001533 5B                      	pop	bx			;AN000;
 22569 00001534 E92301                  	jmp	_$P_Single_Exit		;AN000; return to the caller
 22570                                  ;---------------------------
 22571                                  _$P_Start:				;AN000;
 22572 00001537 2E8936[4A14]            	mov	[cs:_$P_SaveSI_Cmpx],si ;AN000;AC034; save ptr to command line for later use by complex,
 22573 0000153C 53                      	push	bx			;AN000; quoted string or file spec.
 22574 0000153D 57                      	push	di			;AN000;
 22575 0000153E 55                      	push	bp			;AN000;
 22576                                  	;lea	bx,[cs:_$P_STRING_BUF] ;AC034; set buffer to copy from command string
 22577                                  	; 02/11/2022
 22578 0000153F 8D1E[5214]              	lea	bx,[_$P_STRING_BUF]
 22579 00001543 2EF606[4914]20          	test	byte [cs:_$P_Flags2],_$P_Extra ;AC034; 3/9 extra delimiter encountered ?
 22580 00001549 7543                    	jnz	short _$P_Pack_End	;AN000; 3/9 if yes, no need to copy
 22581                                  
 22582                                  _$P_Pack_Loop:				;AN000;
 22583 0000154B AC                      	lodsb				;AN000; Pick a operand from buffer
 22584 0000154C E84907                  	call	_$P_Chk_Switch		;AN000; Check switch character
 22585 0000154F 723C                    	jc	short _$P_Pack_End_BY_EOL ;AN020; if carry set found delimiter type slash, need backup si, else continue
 22586                                  
 22587 00001551 E8AD06                  	call	_$P_Chk_EOL		;AN000; Check EOL character
 22588 00001554 7437                    	je	short _$P_Pack_End_BY_EOL ;AN000; need backup si
 22589                                  
 22590 00001556 E8DE06                  	call	_$P_Chk_Delim		;AN000; Check delimiter
 22591 00001559 7518                    	jne	short _$P_PL01 		;AN000; If no, process next byte
 22592                                  
 22593 0000155B 2EF606[4914]20          	test	byte [cs:_$P_Flags2],_$P_Extra ;AC034; 3/9 If yes and white spec,
 22594                                  ; (tm08)jne	short _$P_Pack_End	;AN000; 3/9 then
 22595 00001561 7505                    	jnz	short _$P_Pack_End_backup_si ;AN000; (tm08)
 22596                                  
 22597 00001563 E87806                  	call	_$P_Skip_Delim		;AN000; skip subsequent white space,too
 22598 00001566 EB26                    	jmp	short _$P_Pack_End	;AN000; finish copy by placing NUL at end
 22599                                  
 22600                                  _$P_Pack_End_backup_si:			;AN000; (tm08)
 22601 00001568 2EF606[4914]41          	test	byte [cs:_$P_Flags2],_$P_SW+_$P_equ ;AN000;AC034;  (tm08)
 22602 0000156E 741E                    	jz	short _$P_Pack_End	;AN000; (tm08)
 22603                                  
 22604 00001570 4E                      	dec	si			;AN000; (tm08)
 22605 00001571 EB1B                    	jmp	short _$P_Pack_End	;AN025; (tm08)
 22606                                  
 22607                                  _$P_PL01:				;AN000;
 22608 00001573 2E8807                  	mov	[cs:bx],al		;AN000; move byte to STRING_BUF
 22609 00001576 3C3D                    	cmp	al,_$P_Keyword  ;'='	;AN000; if it is equal character,
 22610 00001578 7506                    	jne	short _$P_PL00 		;AN000; then
 22611                                  
 22612 0000157A 2E800E[4914]01          	or	byte [cs:_$P_Flags2],_$P_equ ;AC034; remember it in flag
 22613                                  _$P_PL00:				;AN000;
 22614 00001580 43                      	inc	bx			;AN000; ready to see next byte
 22615 00001581 E82E07                  	call	_$P_Chk_DBCS		;AN000; was it 1st byte of DBCS ?
 22616 00001584 73C5                    	jnc	_$P_Pack_Loop		;AN000; if no, process to next byte
 22617                                  
 22618 00001586 AC                      	lodsb				;AN000; if yes, store
 22619 00001587 2E8807                  	mov	[cs:bx],al		;AN000;    2nd byte of DBCS
 22620 0000158A 43                      	inc	bx			;AN000; update pointer
 22621 0000158B EBBE                    	jmp	short _$P_Pack_Loop	;AN000; process to next byte
 22622                                  
 22623                                  _$P_Pack_End_BY_EOL:			;AN000;
 22624 0000158D 4E                      	dec	si			;AN000; backup si pointer
 22625                                  _$P_Pack_End:				;AN000;
 22626 0000158E 2E8936[3F14]            	mov	[cs:_$P_SI_Save],si     ;AC034; save next pointer, SI
 22627 00001593 2EC60700                	mov	byte [cs:bx],_$P_NULL	;AN000; put NULL at the end
 22628 00001597 2E891E[4E14]            	mov	[cs:_$P_Save_EOB],bx    ;AC034; 3/17/87 keep the address for later use of complex
 22629                                  	;mov	bx,[es:di+_$P_PARMS_Blk.PARMSX_Address] ;AN000; get PARMSX address
 22630 0000159C 268B1D                  	mov	bx,[es:di]
 22631                                  	;lea	si,[cs:_$P_STRING_BUF]	;AC034;
 22632                                  	; 02/11/2022
 22633 0000159F 8D36[5214]              	lea	si,[_$P_STRING_BUF]
 22634 000015A3 2E803C2F                	cmp	byte [cs:si],_$P_Switch ;AN000; the operand begins w/ switch char ?
 22635 000015A7 7436                    	je	short _$P_SW_Manager	;AN000; if yes, process as switch
 22636                                  
 22637 000015A9 2E803C22                	cmp	byte [cs:si],_$P_DQuote	;M005;is it a string?
 22638 000015AD 7408                    	je	short _$P_Positional_Manager ;M005;if so, process as one!
 22639                                  
 22640 000015AF 2EF606[4914]01          	test	byte [cs:_$P_Flags2],_$P_equ ;AC034; the operand includes equal char ?
 22641 000015B5 7554                    	jnz	short _$P_Key_Manager	;AN000; if yes, process as keyword
 22642                                  
 22643                                  _$P_Positional_Manager:			;AN000; else process as positional
 22644 000015B7 268A4701                	mov	al,[es:bx+_$P_PARMSX_Blk.MaxP] ;AN000; get maxp
 22645 000015BB 30E4                    	xor	ah,ah			;AN000; ax = maxp
 22646 000015BD 2E3906[3B14]            	cmp	[cs:_$P_ORDINAL],ax	;AC034; too many positional ?
 22647 000015C2 7312                    	jae	short _$P_Too_Many_Error ;AN000; if yes, set exit code to too many
 22648                                  
 22649 000015C4 2EA1[3B14]              	mov	ax,[cs:_$P_ORDINAL]	;AC034; see what the current ordinal
 22650 000015C8 D1E0                    	shl	ax,1			;AN000; ax = ax*2
 22651 000015CA 43                      	inc	bx			;AC035; add '2' to
 22652 000015CB 43                      	inc	bx			;AC035;  BX reg
 22653                                  					;AN000; now bx points to 1st CONTROL
 22654 000015CC 01C3                    	add	bx,ax			;AN000; now bx points to specified CONTROL address
 22655 000015CE 268B1F                  	mov	bx,[es:bx]		;AN000; now bx points to specified CONTROL itself
 22656 000015D1 E88800                  	call	_$P_Chk_Pos_Control	;AN000; Do process for positional
 22657 000015D4 EB69                    	jmp	short _$P_Return_to_Caller ;AN000; and return to the caller
 22658                                  
 22659                                  _$P_Too_Many_Error:			;AN000;
 22660 000015D6 2EC706[3D14]0100        	mov	word [cs:_$P_RC],_$P_Too_Many ;AC034; set exit code
 22661 000015DD EB60                    	jmp	short _$P_Return_to_Caller ;AN000; and return to the caller
 22662                                  
 22663                                  _$P_SW_Manager:				;AN000;
 22664 000015DF 268A4701                	mov	al,[es:bx+_$P_PARMSX_Blk.MaxP] ;AN000; get maxp
 22665 000015E3 30E4                    	xor	ah,ah			;AN000; ax = maxp
 22666 000015E5 40                      	inc	ax			;AN000;
 22667 000015E6 D1E0                    	shl	ax,1			;AN000; ax = (ax+1)*2
 22668 000015E8 01C3                    	add	bx,ax			;AN000; now bx points to maxs
 22669 000015EA 268A0F                  	mov	cl,[es:bx]		;AN000;
 22670 000015ED 30ED                    	xor	ch,ch			;AN000; cx = maxs
 22671 000015EF 09C9                    	or	cx,cx			;AN000; at least one switch ?
 22672 000015F1 740F                    	jz	short _$P_SW_Not_Found 	;AN000;
 22673                                  
 22674 000015F3 43                      	inc	bx			;AN000; now bx points to 1st CONTROL address
 22675                                  
 22676                                  _$P_SW_Mgr_Loop: 			;AN000;
 22677 000015F4 53                      	push	bx			;AN000;
 22678 000015F5 268B1F                  	mov	bx,[es:bx]		;AN000; bx points to Switch CONTROL itself
 22679 000015F8 E8C400                  	call	_$P_Chk_SW_Control	;AN000; do process for switch
 22680 000015FB 5B                      	pop	bx			;AN000;
 22681 000015FC 7341                    	jnc	short _$P_Return_to_Caller ;AN000; if the CONTROL is for the switch, exit
 22682                                  
 22683 000015FE 43                      	inc	bx			;AC035; add '2' to
 22684 000015FF 43                      	inc	bx			;AC035;  BX reg
 22685                                  					;AN000; else bx points to the next CONTROL
 22686 00001600 E2F2                    	loop	_$P_SW_Mgr_Loop		;AN000; and loop
 22687                                  
 22688                                  _$P_SW_Not_Found:			;AN000;
 22689 00001602 2EC706[3D14]0300        	mov	word [cs:_$P_RC],_$P_Not_In_SW ;AC034; here no CONTROL for the switch has
 22690 00001609 EB34                    	jmp	short _$P_Return_to_Caller ;AN000; not been found, means error.
 22691                                  
 22692                                  _$P_Key_Manager: 			;AN000;
 22693 0000160B 268A4701                	mov	al,[es:bx+_$P_PARMSX_Blk.MaxP] ;AN000; get maxp
 22694 0000160F 30E4                    	xor	ah,ah			;AN000; ax = maxp
 22695 00001611 40                      	inc	ax			;AN000;
 22696 00001612 D1E0                    	shl	ax,1			;AN000; ax = (ax+1)*2
 22697 00001614 01C3                    	add	bx,ax			;AN000; now bx points to maxs
 22698 00001616 268A07                  	mov	al,[es:bx]		;AN000;
 22699 00001619 30E4                    	xor	ah,ah			;AN000; ax = maxs
 22700 0000161B D1E0                    	shl	ax,1			;AN000;
 22701 0000161D 40                      	inc	ax			;AN000; ax = ax*2+1
 22702 0000161E 01C3                    	add	bx,ax			;AN000; now bx points to maxk
 22703 00001620 268A0F                  	mov	cl,[es:bx]		;AN000;
 22704 00001623 30ED                    	xor	ch,ch			;AN000; cx = maxk
 22705 00001625 09C9                    	or	cx,cx			;AN000; at least one keyword ?
 22706 00001627 740F                    	je	short _$P_Key_Not_Found	;AN000;
 22707                                  
 22708 00001629 43                      	inc	bx			;AN000; now bx points to 1st CONTROL
 22709                                  
 22710                                  _$P_Key_Mgr_Loop:			;AN000;
 22711 0000162A 53                      	push	bx			;AN000;
 22712 0000162B 268B1F                  	mov	bx,[es:bx]		;AN000; bx points to keyword CONTROL itself
 22713 0000162E E85B00                  	call	_$P_Chk_Key_Control	;AN000; do process for keyword
 22714 00001631 5B                      	pop	bx			;AN000;
 22715 00001632 730B                    	jnc	short _$P_Return_to_Caller ;AN000; if the CONTROL is for the keyword, exit
 22716                                  
 22717 00001634 43                      	inc	bx			;AC035; add '2' to
 22718 00001635 43                      	inc	bx			;AC035;  BX reg
 22719                                  					;AN000; else bx points to the next CONTROL
 22720 00001636 E2F2                    	loop	_$P_Key_Mgr_Loop 	;AN000; and loop
 22721                                  
 22722                                  _$P_Key_Not_Found:			;AN000;
 22723 00001638 2EC706[3D14]0400        	mov	word [cs:_$P_RC],_$P_Not_In_Key ;AC034; here no CONTROL for the keyword has
 22724                                  _$P_Return_to_Caller:			;AN000;
 22725 0000163F 5D                      	pop	bp			;AN000;
 22726 00001640 5F                      	pop	di			;AN000;
 22727 00001641 5B                      	pop	bx			;AN000;
 22728 00001642 2E8B0E[3B14]            	mov	cx,[cs:_$P_ORDINAL]	;AC034; return next ordinal
 22729 00001647 2EA1[3D14]              	mov	ax,[cs:_$P_RC]		;AC034; return exit code
 22730 0000164B 2E8B36[3F14]            	mov	si,[cs:_$P_SI_Save]	;AC034; return next operand pointer
 22731 00001650 2E8B16[4114]            	mov	dx,[cs:_$P_DX]		;AC034; return result buffer address
 22732 00001655 2E8A1E[4314]            	mov	bl,[cs:_$P_Terminator]	;AC034; return delimiter code found
 22733                                  _$P_Single_Exit: 			;AN000;
 22734 0000165A F8                      	clc				;AN000;
 22735 0000165B C3                      	retn				;AN000;
 22736                                  
 22737                                  ;***********************************************************************
 22738                                  ; _$P_Chk_Pos_Control
 22739                                  ;
 22740                                  ; Function: Parse CONTROL block for a positional
 22741                                  ;
 22742                                  ; Input:     ES:BX -> CONTROL block
 22743                                  ;	     cs:SI -> _$P_STRING_BUF
 22744                                  ;
 22745                                  ; Output:    None
 22746                                  ;
 22747                                  ; Use:	 _$P_Fill_Result, _$P_Check_Match_Flags
 22748                                  ;
 22749                                  ; Vars: _$P_Ordinal(W), _$P_RC(W)
 22750                                  ;***********************************************************************
 22751                                  
 22752                                  _$P_Chk_Pos_Control:
 22753 0000165C 50                      	push	ax			;AN000;
 22754                                  	;mov	ax,[es:bx+_$P_Control_Blk.Match_Flag] ;AN000;
 22755 0000165D 268B07                  	mov	ax,[es:bx]
 22756                                  	; 12/12/2022
 22757 00001660 A802                    	test	al,_$P_Repeat
 22758                                  	;test	ax,_$P_Repeat		;AN000; repeat allowed ?
 22759 00001662 7505                    	jnz	short _$P_CPC00		;AN000; then do not increment ORDINAL
 22760                                  
 22761 00001664 2EFF06[3B14]            	inc	word [cs:_$P_ORDINAL]	;AC034; update the ordinal
 22762                                  _$P_CPC00:				;AN000;
 22763 00001669 2E803C00                	cmp	byte [cs:si],_$P_NULL	;AN000; no data ?
 22764 0000166D 7518                    	jne	short _$P_CPC01		;AN000;
 22765                                  
 22766                                  	; 12/12/2022
 22767 0000166F A801                    	test	al,_$P_Optional
 22768                                  	;test	ax,_$P_Optional		;AN000; yes, then is it optional ?
 22769 00001671 7509                    	jnz	short _$P_CPC02		;AN000;
 22770                                  
 22771 00001673 2EC706[3D14]0200        	mov	word [cs:_$P_RC],_$P_Op_Missing ;AC034; no, then error 3/17/87
 22772 0000167A EB0E                    	jmp	short _$P_CPC_Exit	;AN000;
 22773                                  
 22774                                  _$P_CPC02:				;AN000;
 22775 0000167C 50                      	push	ax			;AN000;
 22776 0000167D B003                    	mov	al,_$P_String		;AN000; if it is optional return NULL
 22777 0000167F B4FF                    	mov	ah,_$P_No_Tag		;AN000; no item tag indication
 22778 00001681 E89B00                  	call	_$P_Fill_Result		;AN000;
 22779 00001684 58                      	pop	ax			;AN000;
 22780 00001685 EB03                    	jmp	short _$P_CPC_Exit	;AN000;
 22781                                  
 22782                                  _$P_CPC01:				;AN000;
 22783 00001687 E81A01                  	call	_$P_Check_Match_Flags	;AN000;
 22784                                  _$P_CPC_Exit:				;AN000;
 22785 0000168A 58                      	pop	ax			;AN000;
 22786 0000168B C3                      	retn				;AN000;
 22787                                  
 22788                                  ;***********************************************************************
 22789                                  ; _$P_Chk_Key_Control
 22790                                  ;
 22791                                  ; Function: Parse CONTROL block for a keyword
 22792                                  ;
 22793                                  ; Input:     ES:BX -> CONTROL block
 22794                                  ;	     cs:SI -> _$P_STRING_BUF
 22795                                  ;
 22796                                  ; Output:    CY = 1 : not match
 22797                                  ;
 22798                                  ; Use:	 _$P_Fill_Result, _$P_Search_KEYorSW, _$P_Check_Match_Flags
 22799                                  ;
 22800                                  ; Vars: _$P_RC(W), _$P_SaveSI_Cmpx(W), _$P_KEYorSW_Ptr(R), _$P_Flags(W)
 22801                                  ;***********************************************************************
 22802                                  
 22803                                  _$P_Chk_Key_Control:
 22804 0000168C F9                      	stc				;AN000; this logic works when the KeySW
 22805 0000168D C3                      	retn				;AN000; is reset.
 22806                                  
 22807                                  ;***********************************************************************
 22808                                  ; _$P_Search_KEYorSW:
 22809                                  ;
 22810                                  ; Function: Seach specified keyword or switch from CONTROL
 22811                                  ;
 22812                                  ; Input:     ES:BX -> CONTROL block
 22813                                  ;	     cs:SI -> _$P_STRING_BUF
 22814                                  ;
 22815                                  ; Output:    CY = 1 : not match
 22816                                  ;
 22817                                  ; Use:	 _$P_String_Comp, _$P_MoveBP_NUL, _$P_Found_SYNONYM
 22818                                  ;***********************************************************************
 22819                                  
 22820                                  	; 25/10/2022 - Retro DOS v4.0
 22821                                  	; (MSDOS 5.0 IO.SYS - SYSINIT:18B6h)
 22822                                  
 22823                                  _$P_Search_KEYorSW:			;AN000;
 22824 0000168E 55                      	push	bp			;AN000;
 22825 0000168F 51                      	push	cx			;AN000;
 22826 00001690 268A4F08                	mov	cl,[es:bx+_$P_Control_Blk.nid] ;AN000; Get synonym count
 22827 00001694 30ED                    	xor	ch,ch			;AN000; and set it to cx
 22828 00001696 09C9                    	or	cx,cx			;AN000; No synonyms specified ?
 22829 00001698 740D                    	jz	short _$P_KEYorSW_Not_Found ;AN000; then indicate not found by CY
 22830                                  
 22831                                  	;lea	bp,[es:bx+_$P_Control_Blk.KEYorSW] ;AN000; BP points to the 1st synonym
 22832                                  	; 25/10/2022
 22833 0000169A 8D6F09                  	lea	bp,[bx+_$P_Control_Blk.KEYorSW]
 22834                                  	;lea	bp,[bx+9]
 22835                                  _$P_KEYorSW_Loop:			;AN000;
 22836 0000169D E8D803                  	call	_$P_String_Comp		;AN000; compare string in buffer w/ the synonym
 22837 000016A0 7308                    	jnc	short _$P_KEYorSW_Found	;AN000; If match, set it to synonym pointer
 22838                                  
 22839 000016A2 E80E00                  	call	_$P_MoveBP_NUL		;AN000; else, bp points to the next string
 22840 000016A5 E2F6                    	loop	_$P_KEYorSW_Loop 	;AN000; loop nid times
 22841                                  _$P_KEYorSW_Not_Found:			;AN000;
 22842 000016A7 F9                      	stc				;AN000; indicate not found in synonym list
 22843 000016A8 EB06                    	jmp	short _$P_KEYorSW_Exit	;AN000; and exit
 22844                                  
 22845                                  _$P_KEYorSW_Found:			;AN000;
 22846 000016AA 2E892E[5014]            	mov	[cs:_$P_Found_SYNONYM],bp ;AC034; set synonym pointer
 22847 000016AF F8                      	clc				;AN000; indicate found
 22848                                  _$P_KEYorSW_Exit:			;AN000;
 22849 000016B0 59                      	pop	cx			;AN000;
 22850 000016B1 5D                      	pop	bp			;AN000;
 22851 000016B2 C3                      	retn				;AN000;
 22852                                   
 22853                                  ;***********************************************************************
 22854                                  ; _$P_MoveBP_NUL
 22855                                  ;***********************************************************************
 22856                                  
 22857                                  _$P_MoveBP_NUL:
 22858                                  _$P_MBP_Loop:				;AN000;
 22859                                  	; 11/12/2022
 22860 000016B3 26807E0000              	cmp	byte [es:bp],_$P_NULL	;AN000; Increment BP that points
 22861                                  	; 25/10/2022 (MSDOS 5.0 IO.SYS compatibility)
 22862                                  	; (SYSINIT:18DBh)
 22863                                   	;cmp     byte [es:bp+0],0
 22864 000016B8 7403                    	je	short _$P_MBP_Exit	;AN000; to the synomym list
 22865                                  
 22866 000016BA 45                      	inc	bp			;AN000; until
 22867 000016BB EBF6                    	jmp	short _$P_MBP_Loop	;AN000; NULL encountered.
 22868                                  
 22869                                  _$P_MBP_Exit:				;AN000;
 22870 000016BD 45                      	inc	bp			;AN000; bp points to next to NULL
 22871 000016BE C3                      	retn				;AN000;
 22872                                  
 22873                                  ;***********************************************************************
 22874                                  ; _$P_Chk_SW_Control
 22875                                  ;
 22876                                  ; Function: Parse CONTROL block for a switch
 22877                                  ;
 22878                                  ; Input:     ES:BX -> CONTROL block
 22879                                  ;	     cs:SI -> _$P_STRING_BUF
 22880                                  ;
 22881                                  ; Output:    CY = 1 : not match
 22882                                  ;
 22883                                  ; Use:	 _$P_Fill_Result, _$P_Search_KEYorSW, _$P_Check_Match_Flags
 22884                                  ;
 22885                                  ; Vars:  _$P_SaveSI_Cmpx(W), _$P_KEYorSW_Ptr(R), _$P_Flags(W)
 22886                                  ;***********************************************************************
 22887                                  
 22888                                  _$P_Chk_SW_Control:
 22889                                  
 22890                                  ;IF SwSW				;AN000;(Check if switch is supported)
 22891                                  	;or	byte [cs:_$P_Flags+1],10h
 22892 000016BF 2E800E[4914]10          	or	byte [cs:_$P_Flags2],_$P_SW_Cmp ;AC034; Indicate switch for later string comparison
 22893 000016C5 E8C6FF                  	call	_$P_Search_KEYorSW	;AN000; Search the switch in the CONTROL block
 22894 000016C8 7248                    	jc	short _$P_Chk_SW_Err0	;AN000; not found, then try next CONTROL
 22895                                  
 22896                                  	;and	[cs:_$P_Flags+],0EFh
 22897 000016CA 2E8026[4914]EF          	and	byte [cs:_$P_Flags2],0FFh-_$P_SW_Cmp 
 22898                                  					;AC034; reset the indicator previously set
 22899 000016D0 50                      	push	ax			;AN000; 	      /switch:
 22900 000016D1 2EA1[4C14]              	mov	ax,[cs:_$P_KEYorSW_Ptr] ;AC034;	      ^       ^
 22901 000016D5 29F0                    	sub	ax,si			;AN000;  SI	KEYorSW
 22902 000016D7 2E0106[4A14]            	add	[cs:_$P_SaveSI_Cmpx],ax	;AC034; update for complex list
 22903 000016DC 58                      	pop	ax			;AN000;
 22904                                  
 22905 000016DD 2E8B36[4C14]            	mov	si,[cs:_$P_KEYorSW_Ptr] ;AC034; set si at the end or colon
 22906 000016E2 2E803C00                	cmp	byte [cs:si],_$P_NULL	;AN000; any data after colon
 22907 000016E6 7525                    	jne	short _$P_CSW00		;AN000; if yes, process match flags
 22908                                  
 22909 000016E8 2E807CFF3A              	cmp	byte [cs:si-1],_$P_Colon ;AN000; if no, the switch terminated by colon ?
 22910 000016ED 7509                    	jne	short _$P_Chk_if_data_required ;AN000; if yes,
 22911                                  
 22912 000016EF 2EC706[3D14]0900        	mov	word [cs:_$P_RC],_$P_Syntax ;AC034; return syntax error
 22913 000016F6 EB1C                    	jmp	short _$P_Chk_SW_Exit	;AN000;
 22914                                  
 22915                                  _$P_Chk_if_data_required:		;AN018; no data, no colon
 22916                                  	;cmp	word [es:bx+_$P_Control_Blk.Match_Flag],0 
 22917 000016F8 26833F00                	cmp	word [es:bx],0		;AN018; should have data? zero match flag means switch followed by nothing is OK
 22918 000016FC 7416                    	je	short _$P_Chk_SW_Exit	;AN018; match flags not zero so should have something if optional bit is not on
 22919                                  
 22920                                  	;test	word [es:bx+_$P_Control_Blk.Match_Flag],_$P_Optional 
 22921                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYINIT compatibility)
 22922                                  	;test	word [es:bx],1
 22923                                  	; 12/12/2022
 22924                                  	;test	word [es:bx],_$P_Optional ;AN019; see if no value is valid
 22925 000016FE 26F60701                	test	byte [es:bx],_$P_Optional
 22926 00001702 7510                    	jnz	short _$P_Chk_SW_Exit	;AN019; if so, then leave, else yell
 22927                                  
 22928 00001704 2EC706[3D14]0200        	mov	word [cs:_$P_RC],_$P_Op_Missing ;AC034; return required operand missing
 22929 0000170B EB07                    	jmp	short _$P_Chk_SW_Exit	;AN018;
 22930                                  
 22931                                  _$P_CSW00:				;AN000;
 22932 0000170D E89400                  	call	_$P_Check_Match_Flags	;AN000; process match flag
 22933 00001710 F8                      	clc				;AN000; indicate match
 22934                                  	;jmp	short _$P_Chk_SW_Single_Exit ;AN000;
 22935                                  	; 12/12/2022
 22936 00001711 C3                      	retn
 22937                                  
 22938                                  _$P_Chk_SW_Err0: 			;AN000;
 22939 00001712 F9                      	stc				;AN000; not found in switch synonym list
 22940                                  	;jmp	short _$P_Chk_SW_Single_Exit ;AN000;
 22941                                  	; 12/12/2022
 22942 00001713 C3                      	retn	
 22943                                  
 22944                                  _$P_Chk_SW_Exit: 			;AN000;
 22945 00001714 50                      	push	ax			;AN000;
 22946 00001715 B003                    	mov	al,_$P_String		;AN000; set
 22947 00001717 B4FF                    	mov	ah,_$P_No_Tag		;AN000;    result
 22948 00001719 E80300                  	call	_$P_Fill_Result		;AN000; 	 buffer
 22949 0000171C 58                      	pop	ax			;AN000;
 22950 0000171D F8                      	clc				;AN000;
 22951                                  _$P_Chk_SW_Single_Exit:			;AN000;
 22952 0000171E C3                      	retn				;AN000;
 22953                                  ;ELSE					;AN000;(of IF SwSW)
 22954                                  ;	stc				;AN000; this logic works when the SwSW
 22955                                  ;	retn				;AN000; is reset.
 22956                                  
 22957                                  ;***********************************************************************
 22958                                  ; _$P_Fill_Result
 22959                                  ;
 22960                                  ; Function: Fill the result buffer
 22961                                  ;
 22962                                  ; Input:    AH = Item tag
 22963                                  ;	    AL = type
 22964                                  ;		  AL = 1: CX,DX has 32bit number (CX = high)
 22965                                  ;		  AL = 2: DX has index(offset) into value list
 22966                                  ;		  AL = 6: DL has driver # (1-A, 2-B, ... , 26 - Z)
 22967                                  ;		  AL = 7: DX has year, CL has month and CH has date
 22968                                  ;		  AL = 8: DL has hours, DH has minutes, CL has seconds,
 22969                                  ;			  amd CH has hundredths
 22970                                  ;		  AL = else: cs:SI points to returned string buffer
 22971                                  ;	    ES:BX -> CONTROL block
 22972                                  ;
 22973                                  ; Output:   None
 22974                                  ;
 22975                                  ; Use:	_$P_Do_CAPS_String, _$P_Remove_Colon, _$P_Found_SYNONYM
 22976                                  ;
 22977                                  ; Vars: _$P_DX(W)
 22978                                  ;***********************************************************************
 22979                                  
 22980                                  _$P_Fill_Result:
 22981 0000171F 57                      	push	di			;AN000;
 22982 00001720 268B7F04                	mov	di,[es:bx+_$P_Control_Blk.Result_Buf]
 22983                                  					;AN000; di points to result buffer
 22984 00001724 2E893E[4114]            	mov	[cs:_$P_DX],di		;AC034; set returned result address
 22985 00001729 268805                  	mov	[es:di+_$P_Result_Blk.Type],al ;AN000; store type
 22986 0000172C 26886501                	mov	[es:di+_$P_Result_Blk.Item_Tag],ah ;AN000; store item tag
 22987 00001730 50                      	push	ax			;AN000;
 22988 00001731 2EA1[5014]              	mov	ax,[cs:_$P_Found_SYNONYM] ;AC034; if yes,
 22989 00001735 26894502                	mov	[es:di+_$P_Result_Blk.SYNONYM_Ptr],ax 
 22990                                  					;AN000;   then set it to the result
 22991 00001739 58                      	pop	ax			;AN000;
 22992                                  _$P_RLT04:				;AN000;
 22993 0000173A 3C01                    	cmp	al,_$P_Number		;AN000; if number
 22994 0000173C 750A                    	jne	short _$P_RLT00		;AN000;
 22995                                  
 22996                                  _$P_RLT02:				;AN000;
 22997 0000173E 26895504                	mov	[es:di+_$P_Result_Blk.Picked_Val],dx ;AN000; then store 32bit
 22998 00001742 26894D06                	mov	[es:di+_$P_Result_Blk.Picked_Val+2],cx ;AN000; number
 22999 00001746 EB5A                    	jmp	short _$P_RLT_Exit	;AN000;
 23000                                  
 23001                                  _$P_RLT00:				;AN000;
 23002 00001748 3C02                    	cmp	al,_$P_List_Idx		;AN000; if list index
 23003 0000174A 7506                    	jne	short _$P_RLT01		;AN000;
 23004                                  
 23005 0000174C 26895504                	mov	word [es:di+_$P_Result_Blk.Picked_Val],dx 
 23006                                  					;AN000; then store list index
 23007 00001750 EB50                    	jmp	short _$P_RLT_Exit	;AN000;
 23008                                  
 23009                                  _$P_RLT01:				;AN000;
 23010 00001752 3C07                    	cmp	al,_$P_Date_F		;AN000; Date format ?
 23011 00001754 74E8                    	je	short _$P_RLT02		;AN000;
 23012                                  
 23013 00001756 3C08                    	cmp	al,_$P_Time_F		;AN000; Time format ?
 23014 00001758 74E4                    	je	short _$P_RLT02		;AN000;
 23015                                  
 23016 0000175A 3C06                    	cmp	al,_$P_Drive		;AN000; drive format ?
 23017 0000175C 7506                    	jne	short _$P_RLT03		;AN000;
 23018                                  
 23019 0000175E 26885504                	mov	[es:di+_$P_Result_Blk.Picked_Val],dl ;AN000; store drive number
 23020 00001762 EB3E                    	jmp	short _$P_RLT_Exit	;AN000;
 23021                                  
 23022                                  _$P_RLT03:				;AN000;
 23023 00001764 3C04                    	cmp	al,_$P_Complex		;AN000; complex format ?
 23024 00001766 750F                    	jne	short _$P_RLT05		;AN000;
 23025                                  
 23026 00001768 2EA1[4A14]              	mov	ax,[cs:_$P_SaveSI_Cmpx] ;AC034; then get pointer in command buffer
 23027 0000176C 40                      	inc	ax			;AN000; skip left Parentheses
 23028 0000176D 26894504                	mov	[es:di+_$P_Result_Blk.Picked_Val],ax ;AN000; store offset
 23029 00001771 268C5D06                	mov	[es:di+_$P_Result_Blk.Picked_Val+2],ds ;AN000; store segment
 23030 00001775 EB2B                    	jmp	short _$P_RLT_Exit	;AN000;
 23031                                  
 23032                                  _$P_RLT05:				;AN000;
 23033                                  ;------------------------  AL = 3, 5, or 9
 23034 00001777 26897504                	mov	[es:di+_$P_Result_Blk.Picked_Val],si 
 23035                                  					;AN000; store offset of STRING_BUF
 23036 0000177B 268C4D06                	mov	[es:di+_$P_Result_Blk.Picked_Val+2],cs 
 23037                                  					;AN031; store segment of STRING_BUF
 23038 0000177F 50                      	push	ax			;AN000;
 23039 00001780 26F6470201              	test	byte [es:bx+_$P_Control_Blk.Function_Flag],_$P_CAP_File 
 23040                                  					;AN000; need CAPS by file table?
 23041 00001785 7404                    	jz	short _$P_RLT_CAP00	;AN000;
 23042                                  
 23043 00001787 B004                    	mov	al,_$P_DOSTBL_File	;AN000; use file upper case table
 23044 00001789 EB09                    	jmp	short _$P_RLT_CAP02	;AN000;
 23045                                  
 23046                                  _$P_RLT_CAP00:				;AN000;
 23047 0000178B 26F6470202              	test	byte [es:bx+_$P_Control_Blk.Function_Flag],_$P_CAP_Char 
 23048                                  					;AN000; need CAPS by char table ?
 23049 00001790 7405                    	jz	short _$P_RLT_CAP01	;AN000;
 23050                                  
 23051 00001792 B002                    	mov	al,_$P_DOSTBL_Char	;AN000; use character upper case table
 23052                                  _$P_RLT_CAP02:				;AN000;
 23053 00001794 E8E000                  	call	_$P_Do_CAPS_String	;AN000;  process CAPS along the table
 23054                                  _$P_RLT_CAP01:				;AN000;
 23055 00001797 58                      	pop	ax			;AN000;
 23056 00001798 26F6470210              	test	byte [es:bx+_$P_Control_Blk.Function_Flag],_$P_Rm_Colon 
 23057                                  					;AN000; removing colon at end ?
 23058 0000179D 7403                    	jz	short _$P_RLT_Exit	;AN000;
 23059                                  
 23060 0000179F E8AF00                  	call	_$P_Remove_Colon 	;AN000; then process it.
 23061                                  _$P_RLT_Exit:				;AN000;
 23062 000017A2 5F                      	pop	di			;AN000;
 23063 000017A3 C3                      	retn				;AN000;
 23064                                  
 23065                                  ;***********************************************************************
 23066                                  ; _$P_Check_Match_Flags
 23067                                  ;
 23068                                  ; Function:  Check the mutch_flags and make the exit code and set the
 23069                                  ;	     result buffer
 23070                                  ;
 23071                                  ;	    Check for types in this order:
 23072                                  ;		Complex
 23073                                  ;		Date
 23074                                  ;		Time
 23075                                  ;		Drive
 23076                                  ;		Filespec
 23077                                  ;		Quoted String
 23078                                  ;		Simple String
 23079                                  ;
 23080                                  ; Input:     cs:SI -> _$P_STRING_BUF
 23081                                  ;	     ES:BX -> CONTROL block
 23082                                  ;
 23083                                  ; Output:    None
 23084                                  ;
 23085                                  ; Use:	     _$P_Value, P$_SValue, _$P_Simple_String, _$P_Date_Format
 23086                                  ;	     _$P_Time_Format, _$P_Complex_Format, _$P_File_Foemat
 23087                                  ;	     _$P_Drive_Format
 23088                                  ;***********************************************************************
 23089                                  
 23090                                  	; 25/10/2022 - Retro DOS v4.0
 23091                                  	; (MSDOS 5.0 IO.SYS - SYSINIT:19CFh)
 23092                                  
 23093                                  	; 12/12/2022
 23094                                  _$P_Check_Match_Flags:
 23095 000017A4 2EC606[E014]00          	mov	byte [cs:_$P_err_flag],_$P_NULL 
 23096                                  					;AN033;AC034;; clear filespec error flag.
 23097 000017AA 50                      	push	ax			;AN000;
 23098                                  	;mov	ax,[es:bx+_$P_Control_Blk.Match_Flag]
 23099 000017AB 268B07                  	mov	ax,[es:bx]		;AN000; load match flag(16bit) to ax
 23100 000017AE 09C0                    	or	ax,ax			;AC035; test ax for zero
 23101 000017B0 7518                    	jnz	short _$P_Mat		;AN000; (tm12)
 23102 000017B2 50                      	push	ax			;AN000; (tm12)
 23103 000017B3 53                      	push	bx			;AN000; (tm12)
 23104 000017B4 52                      	push	dx			;AN000; (tm12)
 23105 000017B5 57                      	push	di			;AN000; (tm12)
 23106 000017B6 2EC706[3D14]0900        	mov	word [cs:_$P_RC],_$P_Syntax ;AC034; (tm12)
 23107 000017BD B4FF                    	mov	ah,_$P_No_Tag		;AN000; (tm12)
 23108 000017BF B003                    	mov	al,_$P_String		;AN000; (tm12)
 23109 000017C1 E85BFF                  	call	_$P_Fill_Result		;AN000; (tm12)
 23110 000017C4 5F                      	pop	di			;AN000; (tm12)
 23111 000017C5 5A                      	pop	dx			;AN000; (tm12)
 23112 000017C6 5B                      	pop	bx			;AN000; (tm12)
 23113 000017C7 58                      	pop	ax			;AN000; (tm12)
 23114                                  	; 12/12/2022
 23115                                  	;jmp	short _$P_Bridge 	;AC035; (tm12)
 23116                                  	; 12/12/2022
 23117                                  ;_$P_Mat: 				;AN000; (tm12)
 23118                                  	;jmp	short _$P_Match03	;AN025; (tm09)
 23119                                  _$P_Bridge:
 23120 000017C8 EB6E                    	jmp	short _$P_Match_Exit	;AN000; (tm02)
 23121                                  	
 23122                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 23123                                  	; (SYSINIT:19F9h)
 23124                                  	; 12/12/2022
 23125                                  	;nop	; db 90h
 23126                                  
 23127                                  ; 12/12/2022
 23128                                  _$P_Mat:
 23129                                  _$P_Match03:				;AN000;
 23130 000017CA A90080                  	test	ax,_$P_Num_Val		;AN000; Numeric value
 23131 000017CD 7412                    	jz	short _$P_Match04	;AN000;
 23132                                  
 23133 000017CF 2EC706[3D14]0000        	mov	word [cs:_$P_RC],_$P_No_Error ;AC034; assume no error
 23134 000017D6 E82601                  	call	_$P_Value		;AN000; do process
 23135 000017D9 2E833E[3D14]09          	cmp	word [cs:_$P_RC],_$P_Syntax ;AC034; if error, examine the next type
 23136 000017DF 7557                    	jne	short _$P_Match_Exit	;AN000;
 23137                                  _$P_Match04:				;AN000;
 23138 000017E1 A90040                  	test	ax,_$P_SNum_Val		;AN000; Signed numeric value
 23139 000017E4 7412                    	jz	short _$P_Match05	;AN000;
 23140                                  
 23141 000017E6 2EC706[3D14]0000        	mov	word [cs:_$P_RC],_$P_No_Error ;AC034; assume no error
 23142 000017ED E8EB00                  	call	_$P_SValue		;AN000; do process
 23143 000017F0 2E833E[3D14]09          	cmp	word [cs:_$P_RC],_$P_Syntax ;AC034; if error, examine the next type
 23144 000017F6 7540                    	jne	short _$P_Match_Exit	;AN000;
 23145                                  _$P_Match05:				;AN000;
 23146 000017F8 A90001                  	test	ax,_$P_Drv_Only		;AN000; Drive only
 23147 000017FB 7415                    	jz	short _$P_Match06	;AN000;
 23148                                  
 23149 000017FD 2EC706[3D14]0000        	mov	word [cs:_$P_RC],_$P_No_Error ;AC034; assume no error
 23150 00001804 E80F03                  	call	_$P_File_Format		;AN000; 1st, call file format
 23151 00001807 E89103                  	call	_$P_Drive_Format	;AN000; check drive format, next
 23152 0000180A 2E833E[3D14]09          	cmp	word [cs:_$P_RC],_$P_Syntax ;AC034; if error, examine the next type
 23153 00001810 7526                    	jne	short _$P_Match_Exit	;AN000;
 23154                                  _$P_Match06:				;AN000;
 23155 00001812 A90002                  	test	ax,_$P_File_Spc		;AN000; File spec
 23156 00001815 7412                    	jz	short _$P_Match07	;AN000;
 23157                                  
 23158 00001817 2EC706[3D14]0000        	mov	word [cs:_$P_RC],_$P_No_Error ;AC034; assume no error
 23159 0000181E E8F502                  	call	_$P_File_Format		;AN000; do process
 23160 00001821 2E833E[3D14]09          	cmp	word [cs:_$P_RC],_$P_Syntax ;AC034; if error, examine the next type
 23161 00001827 750F                    	jne	short _$P_Match_Exit	;AN000;
 23162                                  _$P_Match07:				;AN000;
 23163 00001829 A90020                  	test	ax,_$P_Simple_S		;AN000; Simple string
 23164 0000182C 740A                    	jz	short _$P_Match09	;AN000;
 23165                                  
 23166 0000182E 2EC706[3D14]0000        	mov	word [cs:_$P_RC],_$P_No_Error ;AC034; assume no error
 23167 00001835 E8D701                  	call	_$P_Simple_String	;AN000; do process
 23168                                  _$P_Match09:				;AN000;
 23169                                  _$P_Match_Exit:				;AN000;
 23170 00001838 2E833E[E014]01          	cmp	word [cs:_$P_err_flag],_$P_error_filespec ;AC034; bad filespec ?
 23171 0000183E 750F                    	jne	short _$P_Match2_Exit	;AN033; no, continue
 23172 00001840 2E833E[3D14]00          	cmp	word [cs:_$P_RC],_$P_No_Error ;AN033;AC034;; check for other errors ?
 23173 00001846 7507                    	jne	short _$P_Match2_Exit	;AN033; no, continue
 23174 00001848 2EC706[3D14]0900        	mov	word [cs:_$P_RC],_$P_Syntax ;AN033;AC034;; set error flag
 23175                                  _$P_Match2_Exit: 			;AN033;
 23176 0000184F 58                      	pop	ax			;AN000;
 23177 00001850 C3                      	retn				;AN000;
 23178                                  
 23179                                  ;***********************************************************************
 23180                                  ; _$P_Remove_Colon;
 23181                                  ;
 23182                                  ; Function: Remove colon at end
 23183                                  ;
 23184                                  ; Input:    cs:SI points to string buffer to be examineed
 23185                                  ;
 23186                                  ; Output:   None
 23187                                  ;
 23188                                  ; Use:	_$P_Chk_DBCS
 23189                                  ;***********************************************************************
 23190                                  
 23191                                  _$P_Remove_Colon:
 23192 00001851 50                      	push	ax			;AN000;
 23193 00001852 56                      	push	si			;AN000;
 23194                                  _$P_RCOL_Loop:				;AN000;
 23195 00001853 2E8A04                  	mov	al,[cs:si]		;AN000; get character
 23196 00001856 08C0                    	or	al,al			;AN000; end of string ?
 23197 00001858 741A                    	jz	short _$P_RCOL_Exit	;AN000; if yes, just exit
 23198                                  
 23199 0000185A 3C3A                    	cmp	al,_$P_Colon		;AN000; is it colon ?
 23200 0000185C 750D                    	jne	short _$P_RCOL00	;AN000;
 23201                                  
 23202 0000185E 2E807C0100              	cmp	byte [cs:si+1],_$P_NULL ;AN000; if so, next is NULL ?
 23203 00001863 7506                    	jne	short _$P_RCOL00	;AN000; no, then next char
 23204                                  
 23205 00001865 2EC60400                	mov	byte [cs:si],_$P_NULL	;AN000; yes, remove colon
 23206 00001869 EB09                    	jmp	short _$P_RCOL_Exit	;AN000; and exit.
 23207                                  
 23208                                  _$P_RCOL00:				;AN000;
 23209 0000186B E84404                  	call	_$P_Chk_DBCS		;AN000; if not colon, then check if
 23210 0000186E 7301                    	jnc	short _$P_RCOL01	;AN000; DBCS leading byte.
 23211                                  
 23212 00001870 46                      	inc	si			;AN000; if yes, skip trailing byte
 23213                                  _$P_RCOL01:				;AN000;
 23214 00001871 46                      	inc	si			;AN000; si points to next byte
 23215 00001872 EBDF                    	jmp	short _$P_RCOL_Loop	;AN000; loop until NULL encountered
 23216                                  
 23217                                  _$P_RCOL_Exit:				;AN000;
 23218 00001874 5E                      	pop	si			;AN000;
 23219 00001875 58                      	pop	ax			;AN000;
 23220 00001876 C3                      	retn				;AN000;
 23221                                  
 23222                                  ;***********************************************************************
 23223                                  ; _$P_Do_CAPS_String;
 23224                                  ;
 23225                                  ; Function: Perform capitalization along with the file case map table
 23226                                  ;	    or character case map table.
 23227                                  ;
 23228                                  ; Input:    AL = 2 : Use character table
 23229                                  ;	    AL = 4 : Use file table
 23230                                  ;	    cs:SI points to string buffer to be capitalized
 23231                                  ;
 23232                                  ; Output:   None
 23233                                  ;
 23234                                  ; Use:	_$P_Do_CAPS_Char, _$P_Chk_DBCS
 23235                                  ;***********************************************************************
 23236                                  
 23237                                  _$P_Do_CAPS_String:
 23238 00001877 56                      	push	si			;AN000;
 23239 00001878 52                      	push	dx			;AN000;
 23240 00001879 88C2                    	mov	dl,al			;AN000; save info id
 23241                                  
 23242                                  _$P_DCS_Loop:				;AN000;
 23243 0000187B 2E8A04                  	mov	al,[cs:si]		;AN000; load charater and
 23244 0000187E E83104                  	call	_$P_Chk_DBCS		;AN000; check if DBCS leading byte
 23245 00001881 720C                    	jc	short _$P_DCS00		;AN000; if yes, do not need CAPS
 23246                                  
 23247 00001883 08C0                    	or	al,al			;AN000; end of string ?
 23248 00001885 740C                    	jz	short _$P_DCS_Exit	;AN000; then exit.
 23249                                  
 23250 00001887 E80C00                  	call	_$P_Do_CAPS_Char 	;AN000; Here a SBCS char need to be CAPS
 23251 0000188A 2E8804                  	mov	[cs:si],al		;AN000; stored upper case char to buffer
 23252 0000188D EB01                    	jmp	short _$P_DCS01		;AN000; process next
 23253                                  _$P_DCS00:				;AN000;
 23254 0000188F 46                      	inc	si			;AN000; skip DBCS leading and trailing byte
 23255                                  _$P_DCS01:				;AN000;
 23256 00001890 46                      	inc	si			;AN000; si point to next byte
 23257 00001891 EBE8                    	jmp	short _$P_DCS_Loop	;AN000; loop until NULL encountered
 23258                                  _$P_DCS_Exit:				;AN000;
 23259 00001893 5A                      	pop	dx			;AN000;
 23260 00001894 5E                      	pop	si			;AN000;
 23261 00001895 C3                      	retn
 23262                                  
 23263                                  ;***********************************************************************
 23264                                  ; _$P_Do_CAPS_Char;
 23265                                  ;
 23266                                  ; Function: Perform capitalization along with the file case map table
 23267                                  ;	    or character case map table.
 23268                                  ;
 23269                                  ; Input:    DL = 2 : Use character table
 23270                                  ;	    DL = 4 : Use file table
 23271                                  ;	    AL = character to be capitalized
 23272                                  ;
 23273                                  ; Output:   None
 23274                                  ;
 23275                                  ; Use:	INT 21h /w AH=65h
 23276                                  ;***********************************************************************
 23277                                  
 23278                                  _$P_Do_CAPS_Char:
 23279 00001896 3C80                    	cmp	al,_$P_ASCII80	;80h	;AN000; need upper case table ?
 23280 00001898 730C                    	jae	short _$P_DCC_Go	;AN000;
 23281                                  
 23282 0000189A 3C61                    	cmp	al,"a"                  ;AN000; if no,
 23283 0000189C 723C                    	jb	short _$P_CAPS_Ret	;AN000;   check if  "a" <= AL <= "z"
 23284                                  
 23285 0000189E 3C7A                    	cmp	al,"z"                  ;AN000;
 23286 000018A0 7738                    	ja	short _$P_CAPS_Ret	;AN000;   if yes, make CAPS
 23287                                  
 23288 000018A2 24DF                    	and	al,_$P_Make_Upper ;0DFh ;AN000;   else do nothing.
 23289 000018A4 EB34                    	jmp	short _$P_CAPS_Ret	;AN000;
 23290                                  
 23291                                  _$P_DCC_Go:				;AN000;
 23292 000018A6 53                      	push	bx			;AN000;
 23293 000018A7 06                      	push	es			;AN000;
 23294 000018A8 57                      	push	di			;AN000;
 23295                                  
 23296                                  	;lea	di,[cs:_$P_Char_CAP_Ptr] ;AC034; or use char CAPS table ?
 23297 000018A9 8D3E[D214]              	lea	di,[_$P_Char_CAP_Ptr]
 23298                                  _$P_DCC00:				;AN000;
 23299 000018AD 2E3815                  	cmp	[cs:di],dl		;AN000; already got table address ?
 23300 000018B0 7417                    	je	short _$P_DCC01		;AN000; if no,
 23301                                  
 23302                                  ;In this next section, ES will be used to pass a 5 byte workarea to INT 21h,
 23303                                  ; the GET COUNTYRY INFO call. This usage of ES is required by the function
 23304                                  ; call, regardless of what base register is currently be defined as cs.
 23305                                  
 23306 000018B2 50                      	push	ax			;AN000; get CAPS table thru DOS call
 23307 000018B3 51                      	push	cx			;AN000;
 23308 000018B4 52                      	push	dx			;AN000;
 23309                                  
 23310 000018B5 0E                      	push	cs			;AC036; pass current base seg into
 23311                                  					;(Note: this used to push CS.  BUG...
 23312 000018B6 07                      	pop	es			;AN000;   ES reg, required for
 23313                                  					;get extended country information
 23314 000018B7 B465                    	mov	ah,_$P_DOS_Get_TBL	;AN000; get extended CDI
 23315 000018B9 88D0                    	mov	al,dl			;AN000; upper case table
 23316 000018BB BBFFFF                  	mov	bx,_$P_DOSTBL_Def	;AN000; get active CON
 23317 000018BE B90500                  	mov	cx,_$P_DOSTBL_BL 	;AN000; buffer length
 23318 000018C1 BAFFFF                  	mov	dx,_$P_DOSTBL_Def	;AN000; get for default code page
 23319                                  					;DI already set to point to buffer
 23320 000018C4 CD21                    	int	21h			;AN000; es:di point to buffer that
 23321                                  					;now has been filled in with info
 23322 000018C6 5A                      	pop	dx			;AN000;
 23323 000018C7 59                      	pop	cx			;AN000;
 23324 000018C8 58                      	pop	ax			;AN000;
 23325                                  
 23326                                  _$P_DCC01:				;AN000;
 23327                                  
 23328                                  ;In this next section, ES will be used as the base of the XLAT table, provided
 23329                                  ; by the previous GET COUNTRY INFO DOS call.  This usage of ES is made
 23330                                  ; regardless of which base reg is currently the cs reg.
 23331                                  
 23332 000018C9 2E8B5D01                	mov	bx,[cs:di+_$P_DOS_TBL.Off] ;AN000; get offset of table
 23333 000018CD 2E8E4503                	mov	es,[cs:di+_$P_DOS_TBL.Seg] ;AN000; get segment of table
 23334 000018D1 43                      	inc	bx			;AC035; add '2' to
 23335 000018D2 43                      	inc	bx			;AC035;  BX reg
 23336                                  					;AN000; skip length field
 23337 000018D3 2C80                    	sub	al,_$P_ASCII80 ; 80h	;AN000; make char to index
 23338                                  	;xlat	es:[bx] 		;AN000; perform case map
 23339 000018D5 26                      	es
 23340 000018D6 D7                      	xlat
 23341 000018D7 5F                      	pop	di			;AN000;
 23342 000018D8 07                      	pop	es			;AN000;
 23343 000018D9 5B                      	pop	bx			;AN000;
 23344                                  _$P_CAPS_Ret:				;AN000;
 23345 000018DA C3                      	retn				;AN000;
 23346                                  
 23347                                  ;***********************************************************************
 23348                                  ; _$P_Value / _$P_SValue
 23349                                  ;
 23350                                  ; Function:  Make 32bit value from cs:SI and see value list
 23351                                  ;	     and make result buffer.
 23352                                  ;	     _$P_SValue is an entry point for the signed value
 23353                                  ;	     and this will simply call _$P_Value after the handling
 23354                                  ;	     of the sign character, "+" or "-"
 23355                                  ;
 23356                                  ; Input:     cs:SI -> _$P_STRING_BUF
 23357                                  ;	     ES:BX -> CONTROL block
 23358                                  ;
 23359                                  ; Output:    None
 23360                                  ;
 23361                                  ; Use:	_$P_Fill_Result, _$P_Check_OVF
 23362                                  ;
 23363                                  ; Vars: _$P_RC(W), _$P_Flags(RW)
 23364                                  ;***********************************************************************
 23365                                  
 23366                                  	; 26/10/2022 - Retro DOS v4.0
 23367                                  	; (MSDOS 5.0 IO.SYS - SYSINIT:1B0Bh)
 23368                                  
 23369                                  _$P_SValue:				;AN000; when signed value here
 23370 000018DB 50                      	push	ax			;AN000;
 23371 000018DC 2E800E[4914]80          	or	byte [cs:_$P_Flags2],_$P_Signed ;AC034; indicate a signed numeric
 23372 000018E2 2E8026[4914]FD          	and	byte [cs:_$P_Flags2],0FFh-_$P_Neg ;AC034; assume positive value
 23373 000018E8 2E8A04                  	mov	al,[cs:si]		;AN000; get sign
 23374 000018EB 3C2B                    	cmp	al,_$P_Plus		;AN000; "+" ?
 23375 000018ED 740A                    	je	short _$P_SVal00	;AN000;
 23376                                  
 23377 000018EF 3C2D                    	cmp	al,_$P_Minus		;AN000; "-" ?
 23378 000018F1 7507                    	jne	short _$P_Sval01	;AN000; else
 23379                                  
 23380 000018F3 2E800E[4914]02          	or	byte [cs:_$P_Flags2],_$P_Neg ;AC034; set this is negative value
 23381                                  _$P_SVal00:				;AN000;
 23382 000018F9 46                      	inc	si			;AN000; skip sign char
 23383                                  _$P_Sval01:				;AN000;
 23384 000018FA E80200                  	call	_$P_Value		;AN000; and process value
 23385 000018FD 58                      	pop	ax			;AN000;
 23386 000018FE C3                      	retn
 23387                                  
 23388                                  ;***********************************************************************
 23389                                  
 23390                                  	; 26/10/2022
 23391                                  _$P_Value:				;AN000;
 23392 000018FF 50                      	push	ax			;AN000;
 23393 00001900 51                      	push	cx			;AN000;
 23394 00001901 52                      	push	dx			;AN000;
 23395 00001902 56                      	push	si			;AN000;
 23396 00001903 31C9                    	xor	cx,cx			;AN000; cx = higher 16 bits
 23397 00001905 31D2                    	xor	dx,dx			;AN000; dx = lower 16 bits
 23398 00001907 53                      	push	bx			;AN000; save control pointer
 23399                                  _$P_Value_Loop:				;AN000;
 23400 00001908 2E8A04                  	mov	al,[cs:si]		;AN000; get character
 23401 0000190B 08C0                    	or	al,al			;AN000; end of line ?
 23402 0000190D 7442                    	jz	short _$P_Value00	;AN000;
 23403                                  
 23404 0000190F E8F000                  	call	_$P_0099 		;AN000; make asc(0..9) to bin(0..9)
 23405 00001912 7239                    	jc	short _$P_Value_Err0	;AN000;
 23406                                  
 23407 00001914 30E4                    	xor	ah,ah			;AN000;
 23408 00001916 89C5                    	mov	bp,ax			;AN000; save binary number
 23409 00001918 D1E2                    	shl	dx,1			;AN000; to have 2*x
 23410 0000191A D1D1                    	rcl	cx,1			;AN000; shift left w/ carry
 23411 0000191C E8D100                  	call	_$P_Check_OVF		;AN000; Overflow occurred ?
 23412 0000191F 722C                    	jc	short _$P_Value_Err0	;AN000; then error, exit
 23413                                  
 23414 00001921 89D3                    	mov	bx,dx			;AN000; save low(2*x)
 23415 00001923 89C8                    	mov	ax,cx			;AN000; save high(2*x)
 23416 00001925 D1E2                    	shl	dx,1			;AN000; to have 4*x
 23417 00001927 D1D1                    	rcl	cx,1			;AN000; shift left w/ carry
 23418 00001929 E8C400                  	call	_$P_Check_OVF		;AN000; Overflow occurred ?
 23419 0000192C 721F                    	jc	short _$P_Value_Err0	;AN000; then error, exit
 23420                                  
 23421 0000192E D1E2                    	shl	dx,1			;AN000; to have 8*x
 23422 00001930 D1D1                    	rcl	cx,1			;AN000; shift left w/ carry
 23423 00001932 E8BB00                  	call	_$P_Check_OVF		;AN000; Overflow occurred ?
 23424 00001935 7216                    	jc	short _$P_Value_Err0	;AN000; then error, exit
 23425                                  
 23426 00001937 01DA                    	add	dx,bx			;AN000; now have 10*x
 23427 00001939 11C1                    	adc	cx,ax			;AN000; 32bit ADD
 23428 0000193B E8B200                  	call	_$P_Check_OVF		;AN000; Overflow occurred ?
 23429 0000193E 720D                    	jc	short _$P_Value_Err0	;AN000; then error, exit
 23430                                  
 23431 00001940 01EA                    	add	dx,bp			;AN000; Add the current one degree decimal
 23432 00001942 83D100                  	adc	cx,0			;AN000; if carry, add 1 to high 16bit
 23433 00001945 E8A800                  	call	_$P_Check_OVF		;AN000; Overflow occurred ?
 23434 00001948 7203                    	jc	short _$P_Value_Err0	;AN000; then error, exit
 23435                                  
 23436 0000194A 46                      	inc	si			;AN000; update pointer
 23437 0000194B EBBB                    	jmp	short _$P_Value_Loop	;AN000; loop until NULL encountered
 23438                                  ;
 23439                                  _$P_Value_Err0:				;AN000;
 23440 0000194D 5B                      	pop	bx			;AN000;
 23441 0000194E E98C00                  	jmp	_$P_Value_Err		;AN000; Bridge
 23442                                  ;
 23443                                  _$P_Value00:				;AN000;
 23444 00001951 5B                      	pop	bx			;AN000; restore control pointer
 23445 00001952 2EF606[4914]02          	test	byte [cs:_$P_Flags2],_$P_Neg ;AC034; here cx,dx = 32bit value
 23446 00001958 740A                    	jz	short _$P_Value01	;AN000; was it negative ?
 23447                                  
 23448 0000195A F7D1                    	not	cx			;AN000; +
 23449 0000195C F7D2                    	not	dx			;AN000; |- Make 2's complement
 23450 0000195E 83C201                  	add	dx,1			;AN000; |
 23451 00001961 83D100                  	adc	cx,0			;AN000; +
 23452                                  
 23453                                  _$P_Value01:				;AN000; / nval =0
 23454 00001964 268B7706                	mov	si,[es:bx+_$P_Control_Blk.Value_List] ;AN000; si points to value list
 23455 00001968 268A04                  	mov	al,[es:si]		;AN000; get nval
 23456 0000196B 3C00                    	cmp	al,_$P_nval_None 	;AN000; no value list ?
 23457 0000196D 7506                    	jne	short _$P_Value02	;AN000;
 23458                                  
 23459 0000196F B001                    	mov	al,_$P_Number		;AN000; Set type
 23460 00001971 B4FF                    	mov	ah,_$P_No_Tag		;AN000; No ITEM_TAG set
 23461 00001973 EB73                    	jmp	short _$P_Value_Exit	;AN000;
 23462                                  
 23463                                  	; 26/10/2022 (MSDOS 5.0 IO.SYS, SYSINIT compatibility)
 23464                                  	; (SYSINIT:1BA5h)
 23465                                  	; 12/12/2022
 23466                                  	;nop	; db  90h
 23467                                  
 23468                                  _$P_Value02:				;AN000; / nval = 1
 23469                                  ;IF	Val1SW				;AN000;(Check if value list id #1 is supported)
 23470                                  ;(tm07) cmp	al,_$P_nval_Range	;AN000; have range list ?
 23471                                  ;(tm07) jne	short _$P_Value03	;AN000;
 23472                                  
 23473 00001975 46                      	inc	si			;AN000;
 23474 00001976 268A04                  	mov	al,[es:si]		;AN000; al = number of range
 23475 00001979 3C00                    	cmp	al,_$P_No_nrng		;AN000; (tm07)
 23476 0000197B 7460                    	je	short _$P_Value03	;AN000; (tm07)
 23477                                  
 23478 0000197D 46                      	inc	si			;AN000; si points to 1st item_tag
 23479                                  _$P_Val02_Loop:				;AN000;
 23480 0000197E 2EF606[4914]80          	test	byte [cs:_$P_Flags2],_$P_Signed ;AC034;
 23481 00001984 751E                    	jnz	short _$P_Val02_Sign	;AN000;
 23482                                  
 23483 00001986 263B4C03                	cmp	cx,[es:si+_$P_Val_List.Val_XH] ;AN000; comp cx with XH
 23484 0000198A 7236                    	jb	short _$P_Val02_Next	;AN000;
 23485 0000198C 7706                    	ja	short _$P_Val_In	;AN000;
 23486                                  
 23487 0000198E 263B5401                	cmp	dx,[es:si+_$P_Val_List.Val_XL] ;AN000; comp dx with XL
 23488 00001992 722E                    	jb	short _$P_Val02_Next	;AN000;
 23489                                  
 23490                                  _$P_Val_In:				;AN000;
 23491 00001994 263B4C07                	cmp	cx,[es:si+_$P_Val_List.Val_YH] ;AN000; comp cx with YH (tm01)
 23492 00001998 7728                    	ja	short _$P_Val02_Next	;AN000;
 23493 0000199A 723A                    	jb	short _$P_Val_Found	;AN000;
 23494                                  
 23495 0000199C 263B5405                	cmp	dx,[es:si+_$P_Val_List.Val_YL] ;AN000; comp dx with YL
 23496 000019A0 7720                    	ja	short _$P_Val02_Next	;AN000;
 23497                                  
 23498 000019A2 EB32                    	jmp	short _$P_Val_Found	;AN000;
 23499                                  
 23500                                  _$P_Val02_Sign:				;AN000;
 23501 000019A4 263B4C03                	cmp	cx,[es:si+_$P_Val_List.Val_XH]	;AN000; comp cx with XH
 23502 000019A8 7C18                    	jl	short _$P_Val02_Next	;AN000;
 23503 000019AA 7F06                    	jg	short _$P_SVal_In	;AN000;
 23504                                  
 23505 000019AC 263B5401                	cmp	dx,[es:si+_$P_Val_List.Val_XL]	;AN000; comp dx with XL
 23506 000019B0 7C10                    	jl	short _$P_Val02_Next	;AN000;
 23507                                  
 23508                                  _$P_SVal_In:				;AN000;
 23509 000019B2 263B4C07                	cmp	cx,[es:si+_$P_Val_List.Val_YH]	;AN000; comp cx with YH
 23510 000019B6 7F0A                    	jg	short _$P_Val02_Next	;AN000;
 23511                                  
 23512 000019B8 7C1C                    	jl	short _$P_Val_Found	;AN000;
 23513                                  
 23514 000019BA 263B5405                	cmp	dx,[es:si+_$P_Val_List.Val_YL]	;AN000; comp dx with YL
 23515 000019BE 7F02                    	jg	short _$P_Val02_Next	;AN000;
 23516                                  
 23517 000019C0 EB14                    	jmp	short _$P_Val_Found	;AN000;
 23518                                  
 23519                                  _$P_Val02_Next:				;AN000;
 23520 000019C2 83C609                  	add	si,_$P_Len_Range 	;AN000;
 23521 000019C5 FEC8                    	dec	al			;AN000; loop nrng times in AL
 23522 000019C7 75B5                    	jne	short _$P_Val02_Loop	;AN000;
 23523                                  					; / Not found
 23524 000019C9 2EC706[3D14]0600        	mov	word [cs:_$P_RC],_$P_Out_Of_Range ;AC034;
 23525 000019D0 B001                    	mov	al,_$P_Number		;AN000;
 23526 000019D2 B4FF                    	mov	ah,_$P_No_Tag		;AN000; No ITEM_TAG set
 23527 000019D4 EB12                    	jmp	short _$P_Value_Exit	;AN000;
 23528                                  
 23529                                  _$P_Val_Found:				;AN000;
 23530 000019D6 B001                    	mov	al,_$P_Number		;AN000;
 23531 000019D8 268A24                  	mov	ah,[es:si]		;AN000; found ITEM_TAG set
 23532 000019DB EB0B                    	jmp	short _$P_Value_Exit	;AN000;
 23533                                  
 23534                                  _$P_Value03:				;AN000; / nval = 2
 23535                                  
 23536                                  ;IF	Val2SW				;AN000;(Check if value list id #2 is supported)
 23537                                  ;;;;	cmp	al,$P_nval_Value	; have match list ? ASSUME nval=2,
 23538                                  ;;;;	jne	$P_Value04		; even if it is 3 or more.
 23539                                  ;(tm07) inc	si			;AN000;
 23540                                  ;(tm07) mov	al,es:[si]		;AN000; al = nrng
 23541                                  ;	mov	ah,$P_Len_Range 	;AN000;
 23542                                  ;	mul	ah			;AN000;  Skip nrng field
 23543                                  ;	inc	ax			;AN000;
 23544                                  ;	add	si,ax			;AN000; si points to nnval
 23545                                  ;	mov	al,es:[si]		;AN000; get nnval
 23546                                  ;	inc	si			;AN000; si points to 1st item_tag
 23547                                  ;$P_Val03_Loop:				;AN000;
 23548                                  ;	cmp	cx,es:[si+$P_Val_XH]	;AN000; comp cx with XH
 23549                                  ;	jne	$P_Val03_Next		;AN000;
 23550                                  ;
 23551                                  ;	cmp	dx,es:[si+$P_Val_XL]	;AN000; comp dx with XL
 23552                                  ;	je	$P_Val_Found		;AN000;
 23553                                  ;
 23554                                  ;$P_Val03_Next:				;AN000;
 23555                                  ;	add	si,$P_Len_Value 	;AN000; points to next value choice
 23556                                  ;	dec	al			;AN000; loop nval times in AL
 23557                                  ;	jne	$P_Val03_Loop		;AN000;
 23558                                  ;					;AN000; / Not found
 23559                                  ;	mov	psdata_seg:$P_RC,$P_Not_in_Val ;AC034;
 23560                                  ;	mov	al,$P_Number		;AN000;
 23561                                  ;	mov	ah,$P_No_Tag		;AN000; No ITEM_TAG set
 23562                                  ;	jmp	short $P_Value_Exit	;AN000;
 23563                                  ;
 23564                                  ;ENDIF					;AN000;(of Val2SW)
 23565                                  ;$P_Value04:
 23566                                  
 23567                                  _$P_Value_Err:				;AN000;
 23568 000019DD 2EC706[3D14]0900        	mov	word [cs:_$P_RC],_$P_Syntax ;AC034;
 23569 000019E4 B003                    	mov	al,_$P_String		;AN000; Set type
 23570 000019E6 B4FF                    	mov	ah,_$P_No_Tag		;AN000; No ITEM_TAG set
 23571                                  _$P_Value_Exit:				;AN000;
 23572 000019E8 E834FD                  	call	_$P_Fill_Result		;AN000;
 23573 000019EB 5E                      	pop	si			;AN000;
 23574 000019EC 5A                      	pop	dx			;AN000;
 23575 000019ED 59                      	pop	cx			;AN000;
 23576 000019EE 58                      	pop	ax			;AN000;
 23577 000019EF C3                      	retn				;AN000;
 23578                                  
 23579                                  ; 28/03/2019 - Retro DOS v4.0
 23580                                  
 23581                                  ;***********************************************************************
 23582                                  ; _$P_Check_OVF
 23583                                  ;
 23584                                  ; Function:  Check if overflow is occurred with consideration of
 23585                                  ;	     signed or un-signed numeric value
 23586                                  ;
 23587                                  ; Input:     Flag register
 23588                                  ;
 23589                                  ; Output:    CY = 1  :	Overflow
 23590                                  ;
 23591                                  ; Vars:     _$P_Flags(R)
 23592                                  ;***********************************************************************
 23593                                  
 23594                                  	; 26/10/2022
 23595                                  _$P_Check_OVF:
 23596 000019F0 9C                      	pushf				;AN000;
 23597 000019F1 2EF606[4914]02          	test	byte [cs:_$P_Flags2],_$P_Neg ;AC034; is it negative value ?
 23598 000019F7 7502                    	jnz	short _$P_COVF 		;AN000; if no, check overflow
 23599                                  
 23600 000019F9 9D                      	popf				;AN000; by the CY bit
 23601 000019FA C3                      	retn				;AN000;
 23602                                  
 23603                                  _$P_COVF:				;AN000;
 23604 000019FB 9D                      	popf				;AN000; else,
 23605 000019FC 7002                    	jo	short _$P_COVF00	;AN000; check overflow by the OF
 23606                                  
 23607 000019FE F8                      	clc				;AN000; indicate it with CY bit
 23608 000019FF C3                      	retn				;AN000; CY=0 means no overflow
 23609                                  
 23610                                  _$P_COVF00:				;AN000;
 23611 00001A00 F9                      	stc				;AN000; and CY=1 means overflow
 23612 00001A01 C3                      	retn				;AN000;
 23613                                  
 23614                                  ;***********************************************************************
 23615                                  ; _$P_0099;
 23616                                  ;
 23617                                  ; Function:  Make ASCII 0-9 to Binary 0-9
 23618                                  ;
 23619                                  ; Input:     AL = character code
 23620                                  ;
 23621                                  ; Output:    CY = 1 : AL is not number
 23622                                  ;	     CY = 0 : AL contains binary value
 23623                                  ;***********************************************************************
 23624                                  
 23625                                  _$P_0099:
 23626 00001A02 3C30                    	cmp	al,"0"                  ;AN000;
 23627                                  	;jb	short _$P_0099Err	;AN000; must be 0 =< al =< 9
 23628                                  	; 12/12/2022
 23629 00001A04 7208                    	jb	short _$P_0099Err2  ; cf=1
 23630                                  
 23631 00001A06 3C39                    	cmp	al,"9"                  ;AN000;
 23632 00001A08 7703                    	ja	short _$P_0099Err	;AN000; must be 0 =< al =< 9
 23633                                  
 23634 00001A0A 2C30                    	sub	al,"0"                  ;AN000; make char -> bin
 23635                                  	; 12/12/2022
 23636                                  	; cf=0	
 23637                                  	;clc				;AN000; indicate no error
 23638 00001A0C C3                      	retn				;AN000;
 23639                                  
 23640                                  _$P_0099Err:				;AN000;
 23641 00001A0D F9                      	stc				;AN000; indicate error
 23642                                  _$P_0099Err2: ; 12/12/2022	
 23643 00001A0E C3                      	retn				;AN000;
 23644                                  
 23645                                  ;***********************************************************************
 23646                                  ; _$P_Simple_String
 23647                                  ;
 23648                                  ; Function:  See value list for the simple string
 23649                                  ;	     and make result buffer.
 23650                                  ;
 23651                                  ; Input:     cs:SI -> _$P_STRING_BUF
 23652                                  ;	     ES:BX -> CONTROL block
 23653                                  ;
 23654                                  ; Output:    None
 23655                                  ;
 23656                                  ; Use:	_$P_Fill_Result, _$P_String_Comp
 23657                                  ;
 23658                                  ; Vars: _$P_RC(W)
 23659                                  ;***********************************************************************
 23660                                  
 23661                                  _$P_Simple_String:
 23662 00001A0F 50                      	push	ax			;AN000;
 23663 00001A10 53                      	push	bx			;AN000;
 23664 00001A11 52                      	push	dx			;AN000;
 23665 00001A12 57                      	push	di			;AN000;
 23666 00001A13 268B7F06                	mov	di,[es:bx+_$P_Control_Blk.Value_List] ;AN000; di points to value list
 23667 00001A17 268A05                  	mov	al,[es:di]		;AN000; get nval
 23668 00001A1A 08C0                    	or	al,al			;AN000; no value list ?
 23669 00001A1C 7504                    	jnz	short _$P_Sim00		;AN000; then
 23670                                  
 23671 00001A1E B4FF                    	mov	ah,_$P_No_Tag		;AN000; No ITEM_TAG set
 23672 00001A20 EB4C                    	jmp	short _$P_Sim_Exit	;AN000; and set result buffer
 23673                                  
 23674                                  _$P_Sim00:				;AN000;
 23675                                  ;IF	Val3SW+KeySW			;AN000;(Check if keyword or value list id #3 is supported)
 23676 00001A22 3C03                    	cmp	al,_$P_nval_String	;AN000; String choice list provided ?
 23677 00001A24 753F                    	jne	short _$P_Sim01		;AN000; if no, syntax error
 23678                                  
 23679 00001A26 47                      	inc	di			;AN000;
 23680 00001A27 268A05                  	mov	al,[es:di]		;AN000; al = nrng
 23681 00001A2A B409                    	mov	ah,_$P_Len_Range 	;AN000;
 23682 00001A2C F6E4                    	mul	ah			;AN000; Skip nrng field
 23683 00001A2E 40                      	inc	ax			;AN000; ax = (nrng*9)+1
 23684 00001A2F 01C7                    	add	di,ax			;AN000; di points to nnval
 23685 00001A31 268A05                  	mov	al,[es:di]		;AN000; get nnval
 23686 00001A34 B405                    	mov	ah,_$P_Len_Value 	;AN000;
 23687 00001A36 F6E4                    	mul	ah			;AN000; Skip nnval field
 23688 00001A38 40                      	inc	ax			;AN000; ax = (nnval*5)+1
 23689 00001A39 01C7                    	add	di,ax			;AN000; di points to nstrval
 23690 00001A3B 268A05                  	mov	al,[es:di]		;AN000; get nstrval c
 23691 00001A3E 47                      	inc	di			;AC035; add '2' to
 23692 00001A3F 47                      	inc	di			;AC035;  DI reg
 23693                                  					;AN000; di points to 1st string in list
 23694                                  _$P_Sim_Loop:				;AN000;
 23695 00001A40 268B2D                  	mov	bp,[es:di]		;AN000; get string pointer
 23696 00001A43 E83200                  	call	_$P_String_Comp		;AN000; compare it with operand
 23697 00001A46 7312                    	jnc	short _$P_Sim_Found	;AN000; found on list ?
 23698                                  
 23699 00001A48 83C703                  	add	di,_$P_Len_String ; 3	;AN000; if no, point to next choice
 23700 00001A4B FEC8                    	dec	al			;AN000; loop nstval times in AL
 23701 00001A4D 75F1                    	jne	short _$P_Sim_Loop	;AN000;
 23702                                  					;AN000; / Not found
 23703 00001A4F 2EC706[3D14]0800        	mov	word [cs:_$P_RC],_$P_Not_In_Str ;AC034;
 23704 00001A56 B4FF                    	mov	ah,_$P_No_Tag		;AN000; No ITEM_TAG set
 23705 00001A58 EB14                    	jmp	short _$P_Sim_Exit	;AN000;
 23706                                  
 23707                                  _$P_Sim_Found:				;AN000;
 23708 00001A5A 268A65FF                	mov	ah,[es:di-1]		;AN000; set item_tag
 23709 00001A5E B002                    	mov	al,_$P_List_Idx		;AN000;
 23710 00001A60 268B15                  	mov	dx,[es:di]		;AN000; get address of STRING
 23711 00001A63 EB0B                    	jmp	short _$P_Sim_Exit0	;AN000;
 23712                                  ;ENDIF					;AN000;(of Val3SW+KeySW)
 23713                                  _$P_Sim01:				;AN000;
 23714 00001A65 2EC706[3D14]0900        	mov	word [cs:_$P_RC],_$P_Syntax ;AC034;
 23715 00001A6C B4FF                    	mov	ah,_$P_No_Tag		;AN000; No ITEM_TAG set
 23716                                  _$P_Sim_Exit:				;AN000;
 23717 00001A6E B003                    	mov	al,_$P_String		;AN000; Set type
 23718                                  _$P_Sim_Exit0:				;AN000;
 23719 00001A70 E8ACFC                  	call	_$P_Fill_Result		;AN000;
 23720 00001A73 5F                      	pop	di			;AN000;
 23721 00001A74 5A                      	pop	dx			;AN000;
 23722 00001A75 5B                      	pop	bx			;AN000;
 23723 00001A76 58                      	pop	ax			;AN000;
 23724 00001A77 C3                      	retn				;AN000;
 23725                                  
 23726                                  ;***********************************************************************
 23727                                  ; _$P_String_Comp:
 23728                                  ;
 23729                                  ; Function:  Compare two string
 23730                                  ;
 23731                                  ; Input:     cs:SI -> 1st string
 23732                                  ;	     ES:BP -> 2nd string  (Must be upper case)
 23733                                  ;	     ES:BX -> CONTROL block
 23734                                  ;
 23735                                  ; Output:    CY = 1 if not match
 23736                                  ;
 23737                                  ; Use:	_$P_Chk_DBCS, _$P_Do_CAPS_Char
 23738                                  ;
 23739                                  ; Vars: _$P_KEYor_SW_Ptr(W), _$P_Flags(R). _$P_KEYorSW_Ptr
 23740                                  ;***********************************************************************
 23741                                  
 23742                                  _$P_String_Comp:
 23743 00001A78 50                      	push	ax			;AN000;
 23744 00001A79 55                      	push	bp			;AN000;
 23745 00001A7A 52                      	push	dx			;AN000;
 23746 00001A7B 56                      	push	si			;AN000;
 23747 00001A7C B202                    	mov	dl,_$P_DOSTBL_Char	;AN000; use character case map table
 23748                                  _$P_SCOM_Loop:				;AN000;
 23749 00001A7E 2E8A04                  	mov	al,[cs:si]		;AN000; get command character
 23750 00001A81 E82E02                  	call	_$P_Chk_DBCS		;AN000; DBCS ?
 23751 00001A84 723A                    	jc	short _$P_SCOM00	;AN000; yes,DBCS
 23752                                  
 23753 00001A86 E80DFE                  	call	_$P_Do_CAPS_Char 	;AN000; else, upper case map before comparison
 23754                                  ;IF KeySW+SwSW				;AN000;(Check if keyword or switch is supported)
 23755 00001A89 2EF606[4914]08          	test	byte [cs:_$P_Flags2],_$P_Key_Cmp ;AC034; keyword search ?
 23756 00001A8F 740D                    	jz	short _$P_SCOM04	;AN000;
 23757                                  
 23758 00001A91 3C3D                    	cmp	al,_$P_Keyword		;AN000; "=" is delimiter
 23759 00001A93 751F                    	jne	short _$P_SCOM03	;AN000; IF "=" on command line AND  (bp+1=> char after the "=" in synonym list)
 23760                                  
 23761 00001A95 26807E0100              	cmp	byte [es:bp+1],_$P_NULL ;AN021;  at end of keyword string in the control block THEN
 23762 00001A9A 756D                    	jne	short _$P_SCOM_Differ	;AN021;
 23763                                  
 23764 00001A9C EB13                    	jmp	short _$P_SCOM05 	;AN000; keyword found in synonym list
 23765                                  
 23766                                  _$P_SCOM04:				;AN000;
 23767 00001A9E 2EF606[4914]10          	test	byte [cs:_$P_Flags2],_$P_SW_Cmp ;AC034; switch search ?
 23768 00001AA4 740E                    	jz	short _$P_SCOM03	;AN000;
 23769                                  
 23770 00001AA6 3C3A                    	cmp	al,_$P_Colon		;AN000; ":" is delimiter, at end of switch on command line
 23771 00001AA8 750A                    	jne	short _$P_SCOM03	;AN000; continue compares
 23772                                  
 23773                                  	; 26/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 23774                                  	;cmp	byte [es:bp+0],_$P_NULL
 23775                                  	; 11/12/2022
 23776 00001AAA 26807E0000              	cmp	byte [es:bp],_$P_NULL	;AN021; IF at end of switch on command AND
 23777 00001AAF 7558                    	jne	short _$P_SCOM_Differ	;AN021;   at end of switch string in the control block THEN
 23778                                  
 23779                                  _$P_SCOM05:				;AN000;   found a match
 23780 00001AB1 46                      	inc	si			;AN000; si points to just after "=" or ":"
 23781 00001AB2 EB58                    	jmp	short _$P_SCOM_Same	;AN000; exit
 23782                                  
 23783                                  _$P_SCOM03:				;AN000;
 23784                                  ;ENDIF					;AN000;(of KeySW+SwSW)
 23785                                  	; 26/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 23786                                  	;cmp	al,[es:bp+0]
 23787                                  	; 11/12/2022
 23788 00001AB4 263A4600                	cmp	al,[es:bp]		;AN000; compare operand w/ a synonym
 23789 00001AB8 751B                    	jne	short _$P_SCOM_Differ0 	;AN000; if different, check ignore colon option
 23790                                  
 23791 00001ABA 08C0                    	or	al,al			;AN000; end of line
 23792 00001ABC 744E                    	jz	short _$P_SCOM_Same	;AN000; if so, exit
 23793                                  
 23794                                  	; 12/12/2022
 23795                                  	;inc	si			;AN000; update operand pointer
 23796                                  	;inc	bp			;AN000;    and synonym pointer
 23797                                  	; 26/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 23798 00001ABE EB11                    	jmp	short _$P_SCOM01 	;AN000; loop until NULL or "=" or ":" found in case
 23799                                  
 23800                                  _$P_SCOM00:				;AN000; Here al is DBCS leading byte
 23801                                  	; 26/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 23802                                  	;cmp	al,[es:bp+0]
 23803                                  	; 11/12/2022
 23804 00001AC0 263A4600                	cmp	al,[es:bp]		;AN000; compare leading byte
 23805 00001AC4 7543                    	jne	short _$P_SCOM_Differ	;AN000; if not match, say different
 23806                                  
 23807 00001AC6 46                      	inc	si			;AN000; else, load next byte
 23808 00001AC7 2E8A04                  	mov	al,[cs:si]		;AN000; and
 23809 00001ACA 45                      	inc	bp			;AN000;
 23810                                  	; 26/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 23811                                  	;cmp	al,[es:bp+0]
 23812                                  	; 11/12/2022
 23813 00001ACB 263A4600                	cmp	al,[es:bp]		;AN000; compare 2nd byte
 23814 00001ACF 7538                    	jne	short _$P_SCOM_Differ	;AN000; if not match, say different, too
 23815                                  
 23816                                  	; 26/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 23817                                  	; 12/12/2022
 23818                                  _$P_SCOM01:
 23819 00001AD1 46                      	inc	si			;AN000; else update operand pointer
 23820 00001AD2 45                      	inc	bp			;AN000; 		and synonym pointer
 23821                                  ;_$P_SCOM01:				;AN000;
 23822 00001AD3 EBA9                    	jmp	short _$P_SCOM_Loop	;AN000; loop until NULL or "=" or "/" found in case
 23823                                  
 23824                                  _$P_SCOM_Differ0:			;AN000;
 23825                                  ;IF SwSW				;AN000;(tm10)
 23826 00001AD5 2EF606[4914]40          	test	byte [cs:_$P_Flags2],_$P_SW ;AC034;(tm10)
 23827 00001ADB 740E                    	jz	short _$P_not_applicable ;AN000;(tm10)
 23828                                  
 23829                                  	; 26/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 23830                                  	;test	word [es:bx+_$P_Control_Blk.Function_Flag],_$P_colon_is_not_necessary ;AN000;(tm10)
 23831                                  	; 12/12/2022
 23832 00001ADD 26F6470220              	test	byte [es:bx+_$P_Control_Blk.Function_Flag],_$P_colon_is_not_necessary
 23833 00001AE2 7407                    	je	short _$P_not_applicable ;AN000;(tm10)
 23834                                  
 23835                                  	; 26/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)	
 23836                                  	;cmp	byte [es:bp+0],_$P_NULL
 23837                                  	; 11/12/2022
 23838 00001AE4 26807E0000              	cmp	byte [es:bp],_$P_NULL	;AN000;(tm10)
 23839                                  ;(deleted ;AN025;) jne short _$P_not_applicable ;AN000;(tm10)
 23840 00001AE9 7421                    	je	short _$P_SCOM_Same	;AN025;(tm10)
 23841                                  
 23842                                  _$P_not_applicable:			;AN000;(tm10)
 23843                                  ;ENDIF					;AN000;(tm10)
 23844                                  
 23845                                  	;test	word [es:bx+_$P_Control_Blk.Match_Flag],_$P_Ig_Colon 
 23846                                  					;AN000; ignore colon option specified ?
 23847                                  	;test	byte [es:bx+_$P_Control_Blk.Match_Flag],_$P_Ig_Colon
 23848                                  	; 12/12/2022
 23849 00001AEB 26F60710                	test	byte [es:bx],_$P_Ig_Colon
 23850                                  	; 26/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)	
 23851                                  	;test	word [es:bx],_$P_Ig_Colon ; 10h
 23852 00001AEF 7418                    	jz	short _$P_SCOM_Differ	;AN000; if no, say different.
 23853                                  
 23854 00001AF1 3C3A                    	cmp	al,_$P_Colon		;AN000; End up with ":" and
 23855 00001AF3 7509                    	jne	short _$P_SCOM02	;AN000;    subseqently
 23856                                  
 23857                                  	; 26/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)	
 23858                                  	;cmp	byte [es:bp+0],_$P_NULL
 23859                                  	; 11/12/2022
 23860 00001AF5 26807E0000              	cmp	byte [es:bp],_$P_NULL	;AN000; NULL ?
 23861 00001AFA 750D                    	jne	short _$P_SCOM_Differ	;AN000; if no, say different
 23862                                  
 23863 00001AFC EB0E                    	jmp	short _$P_SCOM_Same	;AN000; else, say same
 23864                                  
 23865                                  _$P_SCOM02:				;AN000;
 23866 00001AFE 3C00                    	cmp	al,_$P_NULL		;AN000; end up NULL and :
 23867 00001B00 7507                    	jne	short _$P_SCOM_Differ	;AN000;
 23868                                  
 23869                                  	; 26/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)	
 23870                                  	;cmp	byte [es:bp+0],_$P_Colon
 23871                                  	; 11/12/2022
 23872 00001B02 26807E003A              	cmp	byte [es:bp],_$P_Colon	;AN000; if no, say different
 23873 00001B07 7403                    	je	short _$P_SCOM_Same	;AN000; else, say same
 23874                                  
 23875                                  _$P_SCOM_Differ: 			;AN000;
 23876 00001B09 F9                      	stc				;AN000; indicate not found
 23877 00001B0A EB05                    	jmp	short _$P_SCOM_Exit	;AN000;
 23878                                  
 23879                                  _$P_SCOM_Same:				;AN000;
 23880                                  	; 12/12/2022
 23881                                  	; cf=0
 23882 00001B0C 2E8936[4C14]            	mov	[cs:_$P_KEYorSW_Ptr],si ;AC034; for later use by keyword or switch
 23883                                  	; 12/12/2022
 23884                                  	;clc				;AN000; indicate found
 23885                                  _$P_SCOM_Exit:				;AN000;
 23886 00001B11 5E                      	pop	si			;AN000;
 23887 00001B12 5A                      	pop	dx			;AN000;
 23888 00001B13 5D                      	pop	bp			;AN000;
 23889 00001B14 58                      	pop	ax			;AN000;
 23890 00001B15 C3                      	retn
 23891                                  
 23892                                  ; 30/03/2019
 23893                                  
 23894                                  ;IF FileSW+DrvSW			;AN000;(Check if file spec or drive only is supported)
 23895                                  
 23896                                  ;***********************************************************************
 23897                                  ; _$P_File_Format;
 23898                                  ;
 23899                                  ; Function:  Check if the input string is valid file spec format.
 23900                                  ;	     And set the result buffer.
 23901                                  ;
 23902                                  ; Input:     cs:SI -> _$P_STRING_BUF
 23903                                  ;	     ES:BX -> CONTROL block
 23904                                  ;
 23905                                  ; Output:    None
 23906                                  ;
 23907                                  ; Use:	_$P_Fill_Result, _$P_Chk_DBCS, _$P_FileSp_Chk
 23908                                  ;
 23909                                  ; Vars: _$P_RC(W), _$P_SI_Save(W), _$P_Terminator(W), _$P_SaveSI_Cmpx(R)
 23910                                  ;	_$P_SaveSI_Cmpx(R)
 23911                                  ;***********************************************************************
 23912                                  
 23913                                  _$P_File_Format:
 23914 00001B16 50                      	push	ax			;AN000;
 23915 00001B17 57                      	push	di			;AN000;
 23916 00001B18 56                      	push	si			;AN000;
 23917 00001B19 2E8B3E[4A14]            	mov	di,[cs:_$P_SaveSI_Cmpx]	;AC034; get user buffer address
 23918                                  _$P_FileF_Loop0: 			;AN000; / skip special characters
 23919 00001B1E 2E8A04                  	mov	al,[cs:si]		;AN000; load character
 23920 00001B21 08C0                    	or	al,al			;AN000; end of line ?
 23921 00001B23 7413                    	jz	short _$P_FileF_Err	;AN000; if yes, error exit
 23922                                  
 23923 00001B25 E85E00                  	call	_$P_FileSp_Chk		;AN000; else, check if file special character
 23924 00001B28 7523                    	jne	short _$P_FileF03	;AN000; if yes,
 23925                                  
 23926 00001B2A 2EC606[E014]01          	mov	byte [cs:_$P_err_flag],_$P_error_filespec 
 23927                                  					;AN033;AC034;; set error flag- bad char.
 23928 00001B30 5E                      	pop	si			;AN033;
 23929 00001B31 2EC60400                	mov	byte [cs:si],_$P_NULL	;AN033;
 23930 00001B35 5F                      	pop	di			;AN033;
 23931 00001B36 EB3E                    	jmp	short _$P_FileF02	;AN033;
 23932                                  
 23933                                  _$P_FileF_Err:				;AN000;
 23934 00001B38 5E                      	pop	si			;AN000;
 23935 00001B39 2EC60400                	mov	byte [cs:si],_$P_NULL	;AN000;
 23936 00001B3D 5F                      	pop	di			;AN000;
 23937                                  
 23938                                  	;test	word [es:bx+_$P_Control_Blk.Match_Flag],_$P_Optional ;AN000; is it optional ?
 23939                                  	;test	byte [es:bx+_$P_Control_Blk.Match_Flag],_$P_Optional
 23940                                  	; 12/12/2022
 23941 00001B3E 26F60701                	test	byte [es:bx],_$P_Optional
 23942                                  	; 26/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)	
 23943                                  	;test	word [es:bx],_$P_Optional
 23944 00001B42 7532                    	jnz	short _$P_FileF02	;AN000;
 23945                                  
 23946 00001B44 2EC706[3D14]0200        	mov	word [cs:_$P_RC],_$P_Op_Missing ;AC034; 3/17/87
 23947 00001B4B EB29                    	jmp	short _$P_FileF02	;AN000;
 23948                                  
 23949                                  _$P_FileF03:				;AN000;
 23950 00001B4D 58                      	pop	ax			;AN000; discard save si
 23951 00001B4E 56                      	push	si			;AN000; save new si
 23952                                  _$P_FileF_Loop1: 			;AN000;
 23953 00001B4F 2E8A04                  	mov	al,[cs:si]		;AN000; load character (not special char)
 23954 00001B52 08C0                    	or	al,al			;AN000; end of line ?
 23955 00001B54 741E                    	jz	short _$P_FileF_RLT	;AN000;
 23956                                  
 23957 00001B56 E82D00                  	call	_$P_FileSp_Chk		;AN000; File special character ?
 23958 00001B59 740B                    	je	short _$P_FileF00	;AN000;
 23959                                  
 23960 00001B5B E85401                  	call	_$P_Chk_DBCS		;AN000; no, then DBCS ?
 23961 00001B5E 7302                    	jnc	short _$P_FileF01	;AN000;
 23962 00001B60 47                      	inc	di			;AN000; if yes, skip next byte
 23963 00001B61 46                      	inc	si			;AN000;
 23964                                  _$P_FileF01:				;AN000;
 23965 00001B62 47                      	inc	di			;AN000;
 23966 00001B63 46                      	inc	si			;AN000;
 23967 00001B64 EBE9                    	jmp	short _$P_FileF_Loop1	;AN000;
 23968                                  ;
 23969                                  _$P_FileF00:				;AN000;
 23970 00001B66 2EA2[4314]              	mov	[cs:_$P_Terminator],al	;AC034;
 23971 00001B6A 2EC60400                	mov	byte [cs:si],_$P_NULL	;AN000; update end of string
 23972 00001B6E 47                      	inc	di			;AN000;
 23973 00001B6F 2E893E[3F14]            	mov	[cs:_$P_SI_Save],di	;AC034; update next pointer in command line
 23974                                  _$P_FileF_RLT:				;AN000;
 23975 00001B74 5E                      	pop	si			;AN000;
 23976 00001B75 5F                      	pop	di			;AN000;
 23977                                  _$P_FileF02:				;AN000;
 23978 00001B76 58                      	pop	ax			;AN000; (tm14)
 23979 00001B77 A90002                  	test	ax,_$P_File_Spc		;AN000; (tm14)
 23980 00001B7A 7409                    	jz	short _$P_Drv_Only_Exit	;AN000; (tm14)
 23981                                  
 23982 00001B7C 50                      	push	ax			;AN000;  (tm14)
 23983                                  
 23984 00001B7D B4FF                    	mov	ah,_$P_No_Tag		;AN000; set
 23985 00001B7F B005                    	mov	al,_$P_File_Spec 	;AN000;    result
 23986 00001B81 E89BFB                  	call	_$P_Fill_Result		;AN000; 	 buffer to file spec
 23987 00001B84 58                      	pop	ax			;AN000;
 23988                                  
 23989                                  _$P_Drv_Only_Exit:			;AN000; (tm14)
 23990 00001B85 C3                      	retn				;AN000;
 23991                                  
 23992                                  ;***********************************************************************
 23993                                  ; _$P_FileSp_Chk
 23994                                  ;
 23995                                  ; Function:  Check if the input byte is one of file special characters
 23996                                  ;
 23997                                  ; Input:     cs:SI -> _$P_STRING_BUF
 23998                                  ;	     AL = character code to be examineed
 23999                                  ;
 24000                                  ; Output:    ZF = 1 , AL is one of special characters
 24001                                  ;***********************************************************************
 24002                                  
 24003                                  _$P_FileSp_Chk:
 24004 00001B86 53                      	push	bx			;AN000;
 24005 00001B87 51                      	push	cx			;AN000;
 24006                                  	;lea	bx,[cs:_$P_FileSp_Char] ;AC034; special character table
 24007 00001B88 8D1E[D714]              	lea	bx,[_$P_FileSp_Char]
 24008 00001B8C B90900                  	mov	cx,_$P_FileSp_Len	;AN000; load length of it
 24009                                  _$P_FileSp_Loop: 			;AN000;
 24010 00001B8F 2E3A07                  	cmp	al,[cs:bx]		;AN000; is it one of special character ?
 24011 00001B92 7404                    	je	short _$P_FileSp_Exit	;AN000;
 24012                                  
 24013 00001B94 43                      	inc	bx			;AN000;
 24014 00001B95 E2F8                    	loop	_$P_FileSp_Loop		;AN000;
 24015                                  
 24016 00001B97 41                      	inc	cx			;AN000; reset ZF
 24017                                  _$P_FileSp_Exit: 			;AN000;
 24018 00001B98 59                      	pop	cx			;AN000;
 24019 00001B99 5B                      	pop	bx			;AN000;
 24020 00001B9A C3                      	retn
 24021                                  
 24022                                  ;ENDIF					;AN000;(of FileSW+DrvSW)
 24023                                  
 24024                                  ;IF	DrvSW				;AN000;(Check if drive only is supported)
 24025                                  
 24026                                  ;***********************************************************************
 24027                                  ; _$P_Drive_Format;
 24028                                  ;
 24029                                  ; Function:  Check if the input string is valid drive only format.
 24030                                  ;	     And set the result buffer.
 24031                                  ;
 24032                                  ; Input:     cs:SI -> _$P_STRING_BUF
 24033                                  ;	     ES:BX -> CONTROL block
 24034                                  ;
 24035                                  ; Output:    None
 24036                                  ;
 24037                                  ; Use:	_$P_Fill_Result, _$P_Chk_DBCS
 24038                                  ;
 24039                                  ; Vars: _$P_RC(W)
 24040                                  ;***********************************************************************
 24041                                  
 24042                                  _$P_Drive_Format:
 24043 00001B9B 50                      	push	ax			;AN000;
 24044 00001B9C 52                      	push	dx			;AN000;
 24045 00001B9D 2E8A04                  	mov	al,[cs:si]		;AN000;
 24046 00001BA0 08C0                    	or	al,al			;AN000; if null string
 24047 00001BA2 7437                    	je	short _$P_Drv_Exit	;AN000; do nothing
 24048                                  
 24049 00001BA4 E80B01                  	call	_$P_Chk_DBCS		;AN000; is it leading byte ?
 24050 00001BA7 722B                    	jc	short _$P_Drv_Err	;AN000;
 24051                                  
 24052 00001BA9 2E837C013A              	cmp	word [cs:si+1],_$P_Colon ;AN000; "d", ":", 0  ?
 24053 00001BAE 740D                    	je	short _$P_DrvF00	;AN000;
 24054                                  
 24055                                  	;test	word [es:bx+_$P_Control_Blk.Match_Flag],_$P_Ig_Colon 
 24056                                  	;test	byte [es:bx+_$P_Control_Blk.Match_Flag],_$P_Ig_Colon ;AN000; colon can be ignored?
 24057                                  	; 12/12/2022
 24058 00001BB0 26F60710                	test	byte [es:bx],_$P_Ig_Colon
 24059                                  	; 26/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)	
 24060                                  	;test	word [es:bx],_$P_Ig_Colon
 24061 00001BB4 741E                    	jz	short _$P_Drv_Err	;AN000;
 24062                                  
 24063 00001BB6 2E807C0100              	cmp	byte [cs:si+1],_$P_NULL ;AN000; "d", 0  ?
 24064 00001BBB 7517                    	jne	short _$P_Drv_Err	;AN000;
 24065                                  
 24066                                  _$P_DrvF00:				;AN000;
 24067 00001BBD 0C20                    	or	al,_$P_Make_Lower	;AN000; lower case
 24068 00001BBF 3C61                    	cmp	al,"a"                  ;AN000; drive letter must
 24069 00001BC1 7211                    	jb	short _$P_Drv_Err	;AN000; in range of
 24070                                  
 24071 00001BC3 3C7A                    	cmp	al,"z"                  ;AN000; "a" - "z"
 24072 00001BC5 770D                    	ja	short _$P_Drv_Err	;AN000; if no, error
 24073                                  
 24074 00001BC7 2C60                    	sub	al,"a"-1                ;AN000; make text drive to binary drive
 24075 00001BC9 88C2                    	mov	dl,al			;AN000; set
 24076 00001BCB B4FF                    	mov	ah,_$P_No_Tag		;AN000;    result
 24077 00001BCD B006                    	mov	al,_$P_Drive		;AN000; 	 buffer
 24078 00001BCF E84DFB                  	call	_$P_Fill_Result		;AN000; 	       to drive
 24079 00001BD2 EB07                    	jmp	short _$P_Drv_Exit	;AN000;
 24080                                  
 24081                                  _$P_Drv_Err:				;AN000;
 24082 00001BD4 2EC706[3D14]0900        	mov	word [cs:_$P_RC],_$P_Syntax ;AC034;
 24083                                  _$P_Drv_Exit:				;AN000;
 24084 00001BDB 5A                      	pop	dx			;AN000;
 24085 00001BDC 58                      	pop	ax			;AN000;
 24086 00001BDD C3                      	retn				;AN000;
 24087                                  
 24088                                  ;ENDIF					;AN000;(of DrvSW)
 24089                                  
 24090                                  ;***********************************************************************
 24091                                  ; _$P_Skip_Delim;
 24092                                  ;
 24093                                  ; Function: Skip delimiters specified in the PARMS list, white space
 24094                                  ;	    and comma.
 24095                                  ;
 24096                                  ; Input:    DS:SI -> Command String
 24097                                  ;	    ES:DI -> Parameter List
 24098                                  ;
 24099                                  ; Output:   CY = 1 if the end of line encounterd
 24100                                  ;	    CY = 0 then SI move to 1st non-delimiter character
 24101                                  ;	    AL = Last examineed character
 24102                                  ;
 24103                                  ; Use:	    _$P_Chk_EOL, _$P_Chk_Delim,
 24104                                  ;
 24105                                  ; Vars:     _$P_Flags(R)
 24106                                  ;***********************************************************************
 24107                                  
 24108                                  _$P_Skip_Delim:
 24109                                  _$P_Skip_Delim_Loop:			;AN000;
 24110 00001BDE AC                      	lodsb				;AN000;
 24111 00001BDF E81F00                  	call	_$P_Chk_EOL		;AN000; is it EOL character ?
 24112 00001BE2 7417                    	jz	short _$P_Skip_Delim_CY	;AN000; if yes, exit w/ CY on
 24113                                  
 24114 00001BE4 E85000                  	call	_$P_Chk_Delim		;AN000; is it one of delimiters ?
 24115 00001BE7 7515                    	jnz	short _$P_Skip_Delim_NCY ;AN000; if no, exit w/ CY off
 24116                                  
 24117 00001BE9 2EF606[4914]20          	test	byte [cs:_$P_Flags2],_$P_Extra ;AC034; extra delim or comma found ?
 24118 00001BEF 74ED                    	jz	short _$P_Skip_Delim_Loop ;AN000; if no, loop
 24119                                  
 24120 00001BF1 2EF606[4914]41          	test	byte [cs:_$P_Flags2],_$P_SW+_$P_equ ;AC034; /x , or xxx=zzz , (tm08)
 24121 00001BF7 7407                    	jz	short _$P_Exit_At_Extra	;AN000; no switch, no keyword (tm08)
 24122                                  
 24123                                  	;dec	si			;AN000; backup si for next call (tm08)
 24124                                  	;jmp	short _$P_Exit_At_Extra	;AN000; else exit w/ CY off
 24125                                  	; 12/12/2022
 24126                                  	; cf=0
 24127 00001BF9 EB04                    	jmp	short _$P_Skip_Delim_Exit
 24128                                  
 24129                                  _$P_Skip_Delim_CY:			;AN000;
 24130 00001BFB F9                      	stc				;AN000; indicate EOL
 24131 00001BFC EB01                    	jmp	short _$P_Skip_Delim_Exit ;AN000;
 24132                                  
 24133                                  _$P_Skip_Delim_NCY:			;AN000;
 24134 00001BFE F8                      	clc				;AN000; indicate non delim
 24135                                  _$P_Skip_Delim_Exit:			;AN000; in this case, need
 24136 00001BFF 4E                      	dec	si			;AN000;  backup index pointer
 24137                                  	; 12/12/2022
 24138                                  _$P_Exit_At_Extra:	 ; cf=0
 24139 00001C00 C3                      	retn				;AN000;
 24140                                  
 24141                                  	; 12/12/2022
 24142                                  ;_$P_Exit_At_Extra:			;AN000;
 24143                                  	;clc				;AN000; indicate extra delim
 24144                                  	;retn				;AN000;
 24145                                  
 24146                                  ;***********************************************************************
 24147                                  ; _$P_Chk_EOL;
 24148                                  ;
 24149                                  ; Function: Check if AL is one of End of Line characters.
 24150                                  ;
 24151                                  ; Input:    AL = character code
 24152                                  ;	    ES:DI -> Parameter List
 24153                                  ;
 24154                                  ; Output:   ZF = 1 if one of End of Line characters
 24155                                  ;**********************************************************************
 24156                                  
 24157                                  _$P_Chk_EOL:
 24158 00001C01 53                      	push	bx			;AN000;
 24159 00001C02 51                      	push	cx			;AN000;
 24160 00001C03 3C0D                    	cmp	al,_$P_CR		;AN000; Carriage return ?
 24161 00001C05 742D                    	je	short _$P_Chk_EOL_Exit 	;AN000;
 24162                                  
 24163 00001C07 3C00                    	cmp	al,_$P_NULL		;AN000; zero ?
 24164 00001C09 7429                    	je	short _$P_Chk_EOL_Exit 	;AN000;
 24165                                  
 24166                                  ;IF LFEOLSW				;AN028; IF LF TO BE ACCEPTED AS EOL
 24167 00001C0B 3C0A                    	cmp	al,_$P_LF		;AN000; Line feed ?
 24168 00001C0D 7425                    	je	short _$P_Chk_EOL_Exit 	;AN000;
 24169                                  ;ENDIF					;AN028;
 24170                                  
 24171 00001C0F 26807D0202              	cmp	byte [es:di+_$P_PARMS_Blk.Num_Extra],_$P_I_Have_EOL 
 24172                                  					;AN000; EOL character specified ?
 24173 00001C14 721E                    	jb	short _$P_Chk_EOL_Exit 	;AN000;
 24174                                  
 24175 00001C16 31DB                    	xor	bx,bx			;AN000;
 24176 00001C18 268A5D03                	mov	bl,[es:di+_$P_PARMS_Blk.Len_Extra_Delim]
 24177                                  					;AN000; get length of delimiter list
 24178 00001C1C 83C304                  	add	bx,_$P_Len_PARMS 	;AN000; skip it
 24179 00001C1F 26803900                	cmp	byte [es:bx+di],_$P_I_Use_Default ;AN000; No extra EOL character ?
 24180 00001C23 740D                    	je	short _$P_Chk_EOL_NZ	;AN000;
 24181                                  
 24182                                  	;xor	cx,cx			;AN000; Get number of extra character
 24183 00001C25 30ED                    	xor	ch,ch
 24184 00001C27 268A09                  	mov	cl,[es:bx+di]		;AN000;
 24185                                  _$P_Chk_EOL_Loop:			;AN000;
 24186 00001C2A 43                      	inc	bx			;AN000;
 24187 00001C2B 263A01                  	cmp	al,[es:bx+di]		;AN000; Check extra EOL character
 24188 00001C2E 7404                    	je	short _$P_Chk_EOL_Exit 	;AN000;
 24189                                  
 24190 00001C30 E2F8                    	loop	_$P_Chk_EOL_Loop 	;AN000;
 24191                                  
 24192                                  _$P_Chk_EOL_NZ:				;AN000;
 24193 00001C32 3C0D                    	cmp	al,_$P_CR		;AN000; reset ZF
 24194                                  _$P_Chk_EOL_Exit:			;AN000;
 24195 00001C34 59                      	pop	cx			;AN000;
 24196 00001C35 5B                      	pop	bx			;AN000;
 24197 00001C36 C3                      	retn
 24198                                  
 24199                                  ;***********************************************************************
 24200                                  ; _$P_Chk_Delim;
 24201                                  ;
 24202                                  ; Function: Check if AL is one of delimiter characters.
 24203                                  ;	    if AL+[si] is DBCS blank, it is replaced with two SBCS
 24204                                  ;	    blanks.
 24205                                  ;
 24206                                  ; Input:    AL = character code
 24207                                  ;	    DS:SI -> Next Character
 24208                                  ;	    ES:DI -> Parameter List
 24209                                  ;
 24210                                  ; Output:   ZF = 1 if one of delimiter characters
 24211                                  ;	    SI points to the next character
 24212                                  ; Vars:  _$P_Terminator(W), _$P_Flags(W)
 24213                                  ;***********************************************************************
 24214                                  
 24215                                  _$P_Chk_Delim:
 24216 00001C37 53                      	push	bx			;AN000;
 24217 00001C38 51                      	push	cx			;AN000;
 24218 00001C39 2EC606[4314]20          	mov	byte [cs:_$P_Terminator],_$P_Space 
 24219                                  					;AC034; Assume terminated by space
 24220                                  	;and	byte [cs:_$P_Flags20,0DFh
 24221 00001C3F 2E8026[4914]DF          	and	byte [cs:_$P_Flags2],0FFh-_$P_Extra ;AC034;
 24222 00001C45 3C20                    	cmp	al,_$P_Space ; 20h	;AN000; Space ?
 24223 00001C47 7436                    	je	short _$P_Chk_Delim_Exit ;AN000;
 24224                                  
 24225 00001C49 3C09                    	cmp	al,_$P_TAB		;AN000; TAB ?
 24226 00001C4B 7432                    	je	short _$P_Chk_Delim_Exit ;AN000;
 24227                                  
 24228 00001C4D 3C2C                    	cmp	al,_$P_Comma		;AN000; Comma ?
 24229 00001C4F 7431                    	je	short _$P_Chk_Delim_Exit0 ;AN000;
 24230                                  
 24231                                  	; 26/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 24232                                  _$P_Chk_Delim00: 			;AN000;
 24233 00001C51 3C20                    	cmp	al,_$P_DBSP1	; 20h	;AN000; 1st byte of DBCS Space ?
 24234 00001C53 750C                    	jne	short _$P_Chk_Delim01	;AN000;
 24235                                  
 24236 00001C55 803C20                  	cmp	byte [si],_$P_DBSP2 ; 20h ;AN000; 2nd byte of DBCS Space ?
 24237 00001C58 7507                    	jne	short _$P_Chk_Delim01	;AN000;
 24238                                  
 24239 00001C5A B020                    	mov	al,_$P_Space		;AN000;
 24240 00001C5C 46                      	inc	si			;AN000; make si point to next character
 24241 00001C5D 38C0                    	cmp	al,al			;AN000; Set ZF
 24242 00001C5F EB1E                    	jmp	short _$P_Chk_Delim_Exit ;AN000;
 24243                                  
 24244                                  _$P_Chk_Delim01: 			;AN000;
 24245 00001C61 26807DFE01              	cmp	byte [es:di-_$P_PARMS_Blk.Num_Extra],_$P_I_Have_Delim 
 24246                                  					;AN000; delimiter character specified ?
 24247 00001C66 7217                    	jb	short _$P_Chk_Delim_Exit ;AN000;
 24248                                  
 24249                                  	;xor	cx,cx			;AN000;
 24250 00001C68 30ED                    	xor	ch,ch
 24251                                  	;mov	cl,[es:di+3]
 24252 00001C6A 268A4D03                	mov	cl,[es:di+_$P_PARMS_Blk.Len_Extra_Delim] 
 24253                                  					;AN000; get length of delimiter list
 24254 00001C6E 09C9                    	or	cx,cx			;AN000; No extra Delim character ?
 24255 00001C70 740B                    	jz	short _$P_Chk_Delim_NZ 	;AN000;
 24256                                  
 24257 00001C72 BB0300                  	mov	bx,_$P_Len_PARMS-1 ; 3	;AN000; set bx to 1st extra delimiter
 24258                                  _$P_Chk_Delim_Loop:			;AN000;
 24259 00001C75 43                      	inc	bx			;AN000;
 24260 00001C76 263A01                  	cmp	al,[es:bx+di]		;AN000; Check extra Delim character
 24261 00001C79 7407                    	je	short _$P_Chk_Delim_Exit0 ;AN000;
 24262                                  
 24263 00001C7B E2F8                    	loop	_$P_Chk_Delim_Loop	;AN000; examine all extra delimiter
 24264                                  
 24265                                  _$P_Chk_Delim_NZ:			;AN000;
 24266 00001C7D 3C20                    	cmp	al,_$P_Space		;AN000; reset ZF
 24267                                  _$P_Chk_Delim_Exit:			;AN000;
 24268                                  _$P_ChkDfin:				;AN000;
 24269 00001C7F 59                      	pop	cx			;AN000;
 24270 00001C80 5B                      	pop	bx			;AN000;
 24271 00001C81 C3                      	retn				;AN000;
 24272                                  
 24273                                  _$P_Chk_Delim_Exit0:			;AN000;
 24274 00001C82 2EA2[4314]              	mov	[cs:_$P_Terminator],al ;AC034; keep terminated delimiter
 24275 00001C86 2EF606[4914]01          	test	byte [cs:_$P_Flags2],_$P_equ ;AN027;AC034;; if terminating a key=
 24276 00001C8C 7506                    	jnz	short _$P_No_Set_Extra 	;AN027; then do not set the EXTRA bit
 24277                                  
 24278 00001C8E 2E800E[4914]20          	or	byte [cs:_$P_Flags2],_$P_Extra 
 24279                                  					;AC034; flag terminated extra delimiter or comma
 24280                                  _$P_No_Set_Extra:			;AN027;
 24281 00001C94 38C0                    	cmp	al,al			;AN000; set ZF
 24282 00001C96 EBE7                    	jmp	short _$P_Chk_Delim_Exit ;AN000;
 24283                                  
 24284                                  
 24285                                  ;***********************************************************************
 24286                                  ; _$P_Chk_Switch;
 24287                                  ;
 24288                                  ; Function: Check if AL is the switch character not in first position of
 24289                                  ;	    _$P_STRING_BUF
 24290                                  ;
 24291                                  ; Input:    AL = character code
 24292                                  ;	    BX = current pointer within _$P_String_Buf
 24293                                  ;	    SI =>next char on command line (following the one in AL)
 24294                                  ;
 24295                                  ; Output:   CF = 1 (set)if AL is switch character, and not in first
 24296                                  ;		 position, and has no chance of being part of a date string,
 24297                                  ;		 i.e. should be treated as a delimiter.
 24298                                  
 24299                                  ;	    CF = 0 (reset, cleared) if AL is not a switch char, is in the first
 24300                                  ;		 position, or is a slash but may be part of a date string, i.e.
 24301                                  ;		 should not be treated as a delimiter.
 24302                                  ;
 24303                                  ; Vars:  _$P_Terminator(W)
 24304                                  
 24305                                  ; Use:	 _$P_0099
 24306                                  ;***********************************************************************
 24307                                  
 24308                                  _$P_Chk_Switch:
 24309                                  	;lea	bp,[cs:_$P_STRING_BUF]	;AN020;AC034
 24310 00001C98 8D2E[5214]              	lea	bp,[_$P_STRING_BUF]	; BP=OFFSET of _$P_String_Buf even in group addressing
 24311                                  ;	.IF <BX NE BP> THEN		;AN020;IF not first char THEN
 24312 00001C9C 39EB                    	cmp	bx,bp			;AN000;
 24313 00001C9E 7406                    	je	short _$P_STRUC_L2	;AN000;
 24314                                  
 24315                                  ;	    .IF <AL EQ _$P_Switch> THEN	;AN020;otherwise see if a slash
 24316 00001CA0 3C2F                    	cmp	al,_$P_Switch		;AN000;
 24317 00001CA2 750C                    	jne	short _$P_STRUC_L5 	;AN000;
 24318                                  
 24319 00001CA4 F9                      	stc				;AN020;not in first position and is slash
 24320                                  	;jmp     short _$P_STRUC_L1	;AN000;
 24321                                  	; 12/12/2022
 24322 00001CA5 C3                      	retn
 24323                                  
 24324                                  ; 12/12/2022
 24325                                  ;_$P_STRUC_L5:				;AN000;
 24326                                  ;	CLC				;AN020;not a slash
 24327                                  ;;	    .ENDIF			;AN020;
 24328                                  ;;	.ELSE				;AN020;is first char in the buffer, ZF=0
 24329                                  ;	jmp	short _$P_STRUC_L1	;AN000;
 24330                                  
 24331                                  _$P_STRUC_L2:				;AN000;
 24332                                  ;	    .IF <AL EQ _$P_Switch> THEN	;AN020;
 24333 00001CA6 3C2F                    	cmp     al,_$P_Switch		;AN000;
 24334 00001CA8 7506                    	jne	short _$P_STRUC_L12	;AN000;
 24335                                  
 24336 00001CAA 2E800E[4914]40          	or	byte [cs:_$P_Flags2],_$P_SW ;AN020;AC034;;could be valid switch, first char and is slash
 24337                                  ;	    .ENDIF			;AN020;
 24338                                  
 24339                                  	; 12/12/2022
 24340                                  	; cf=0
 24341                                  	;retn
 24342                                  
 24343                                  _$P_STRUC_L5:
 24344                                  	; 12/12/2022
 24345                                  _$P_STRUC_L12:				;AN000;
 24346 00001CB0 F8                      	clc				;AN020;CF=0 indicating first char
 24347                                  ;	.ENDIF				;AN020;
 24348                                  _$P_STRUC_L1:				;AN000;
 24349 00001CB1 C3                      	retn				;AN000;
 24350                                  
 24351                                  ;**************************************************************************
 24352                                  ; _$P_Chk_DBCS:
 24353                                  ;
 24354                                  ;  Function: Check if a specified byte is in ranges of the DBCS lead bytes
 24355                                  ;
 24356                                  ;  Input:
 24357                                  ;	  AL	= Code to be examineed
 24358                                  ;
 24359                                  ;  Output:
 24360                                  ;	  If CF is on then a lead byte of DBCS
 24361                                  ;
 24362                                  ; Use: INT 21h w/AH=63
 24363                                  ;
 24364                                  ; Vars:  _$P_DBCSEV_Seg(RW), _$P_DBCSEV_Off(RW)
 24365                                  ;***************************************************************************
 24366                                  
 24367                                  _$P_Chk_DBCS:
 24368 00001CB2 1E                      	push	ds			;AN000;
 24369 00001CB3 56                      	push	si			;AN000;
 24370 00001CB4 53                      	push	bx			;AN000; (tm11)
 24371                                  	
 24372 00001CB5 2E833E[4614]00          	cmp	word [cs:_$P_DBCSEV_SEG],0 ;AC034; ALREADY SET ?
 24373 00001CBB 7527                    	jne	short _$P_DBCS00	;AN000;
 24374                                  
 24375 00001CBD 50                      	push	ax			;AN000;
 24376 00001CBE 1E                      	push	ds			;AN000; (tm11)
 24377 00001CBF 51                      	push	cx			;AN000;
 24378 00001CC0 52                      	push	dx			;AN000;
 24379 00001CC1 57                      	push	di			;AN000;
 24380 00001CC2 55                      	push	bp			;AN000;
 24381 00001CC3 06                      	push	es			;AN000;
 24382 00001CC4 31F6                    	xor	si,si			;AN000;
 24383 00001CC6 8EDE                    	mov	ds,si			;AN000;
 24384 00001CC8 B80063                  	MOV	ax,_$P_DOS_GetEV ; 6300h ;AN000; GET DBCS EV CALL
 24385 00001CCB CD21                    	int	21h			;AN000;
 24386                                  		; DOS - 3.2+ only - GET DOUBLE BYTE CHARACTER SET LEAD TABLE
 24387 00001CCD 8CDB                    	mov	bx,ds			;AN000; (tm11)
 24388 00001CCF 09DB                    	or	bx,bx			;AN000; (tm11)
 24389 00001CD1 07                      	pop	es			;AN000;
 24390 00001CD2 5D                      	pop	bp			;AN000;
 24391 00001CD3 5F                      	pop	di			;AN000;
 24392 00001CD4 5A                      	pop	dx			;AN000;
 24393 00001CD5 59                      	pop	cx			;AN000;
 24394 00001CD6 1F                      	pop	ds			;AN000; (tm11)
 24395 00001CD7 58                      	pop	ax			;AN000;
 24396 00001CD8 7429                    	jz	short _$P_NON_DBCS	;AN000;
 24397                                  
 24398                                  _$P_DBCS02:				;AN000;
 24399 00001CDA 2E8936[4414]            	mov	[cs:_$P_DBCSEV_OFF],si	;AC034; save EV offset
 24400 00001CDF 2E891E[4614]            	mov	[cs:_$P_DBCSEV_SEG],bx	;AC034; save EV segment (tm11)
 24401                                  _$P_DBCS00:				;AN000;
 24402 00001CE4 2E8B36[4414]            	mov	si,[cs:_$P_DBCSEV_OFF]	;AC034; load EV offset
 24403 00001CE9 2E8E1E[4614]            	mov	ds,[cs:_$P_DBCSEV_SEG]	;AC034; and segment
 24404                                  
 24405                                  _$P_DBCS_LOOP:				;AN000;
 24406 00001CEE 833C00                  	cmp	word [si],0		;AN000; zero vector ?
 24407 00001CF1 7410                    	je	short _$P_NON_DBCS	;AN000; then exit
 24408                                  
 24409 00001CF3 3A04                    	cmp	al,[si] 		;AN000;
 24410 00001CF5 7208                    	jb	short _$P_DBCS01	;AN000; Check if AL is in
 24411                                  
 24412 00001CF7 3A4401                  	cmp	al,[si+1]		;AN000;   range of
 24413 00001CFA 7703                    	ja	short _$P_DBCS01	;AN000;      the vector
 24414                                  
 24415 00001CFC F9                      	stc				;AN000; if yes, indicate DBCS and exit
 24416 00001CFD EB04                    	jmp	short _$P_DBCS_EXIT	;AN000;
 24417                                  
 24418                                  _$P_DBCS01:				;AN000;
 24419 00001CFF 46                      	inc	si			;AC035; add '2' to
 24420 00001D00 46                      	inc	si			;AC035;  SI reg
 24421                                  					;AN000; get next vector
 24422 00001D01 EBEB                    	jmp	short _$P_DBCS_LOOP	;AN000; loop until zero vector found
 24423                                  
 24424                                  _$P_NON_DBCS:				;AN000;
 24425                                  	; 12/12/2022
 24426                                  	; cf=0
 24427                                  	;clc				;AN000; indicate SBCS
 24428                                  _$P_DBCS_EXIT:				;AN000;
 24429 00001D03 5B                      	pop	bx			;AN000; (tm11)
 24430 00001D04 5E                      	pop	si			;AN000;
 24431 00001D05 1F                      	pop	ds			;AN000;
 24432 00001D06 C3                      	retn				;AN000;
 24433                                  
 24434                                  ; SYSCONF.ASM - MSDOS 6.0 - 1991
 24435                                  ; ======================================================================
 24436                                  ; 27/03/2019 - Retro DOS v4.0
 24437                                  
 24438                                  ;control block definitions for parser.
 24439                                  ;-----------------------------------------------------------------------
 24440                                  ; buffer = [n | n,m] {/e}
 24441                                  
 24442                                  ; 30/03/2019
 24443                                  
 24444                                  struc p_parms
 24445 00000000 ????                    	resw	1	; dw ?
 24446 00000002 ??                      	resb	1	; db 1	; an extra delimiter list
 24447 00000003 ??                      	resb	1	; db 1	; length is 1
 24448 00000004 ??                      	resb 	1	; db ';' ; delimiter
 24449                                  .size:
 24450                                  endstruc
 24451                                  
 24452                                  struc p_pos
 24453 00000000 ????                    	resw	1	; dw ?	; numeric value??
 24454 00000002 ????                    	resw	1	; dw ?	; function
 24455 00000004 ????                    	resw	1	; dw ?	; result value buffer
 24456                                  
 24457                                  ; note: by defining result_val before this structure, we could remove
 24458                                  ;  the "result_val" from every structure invocation
 24459                                  
 24460 00000006 ????                    	resw	1	; dw ?	; value list
 24461 00000008 ??                      	resb	1	; db 0	; no switches/keywords
 24462                                  .size:
 24463                                  endstruc
 24464                                  
 24465                                  struc	p_range
 24466 00000000 ??                      	resb	1	; db 1	; range definition
 24467 00000001 ??                      	resb 	1	; db 1	; 1 definition of range
 24468 00000002 ??                      	resb 	1	; db 1	; item tag for this range
 24469 00000003 ????????                	resd	1	; dd ?	; numeric min
 24470 00000007 ????????                	resd	1	; dd ?	; numeric max
 24471                                  .size:
 24472                                  endstruc
 24473                                  
 24474                                  ;-----------------------------------------------------------------------
 24475                                  
 24476                                  	; 26/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 24477                                  	; (SYSINIT:1F48h)
 24478                                  
 24479                                  ; buffer = [n | n,m] {/e}
 24480                                  
 24481                                  ;buf_parms p_parms <buf_parmsx>
 24482                                  buf_parms: 
 24483 00001D07 [0C1D]                  	dw	buf_parmsx
 24484 00001D09 01                      	db	1	; an extra delimiter list
 24485 00001D0A 01                      	db	1	; length is 1
 24486 00001D0B 3B                      	db	';'	; delimiter
 24487                                  
 24488                                  buf_parmsx:
 24489 00001D0C 0102[161D][2A1D]        	dw	201h,buf_pos1,buf_pos2	; min 1, max 2 positionals
 24490 00001D12 01                      	db	1			; one switch
 24491 00001D13 [3E1D]                  	dw	sw_x_ctrl
 24492 00001D15 00                      	db	0			; no keywords
 24493                                  
 24494                                  ;buf_pos1 p_pos <8000h,0,result_val,buf_range_1>  ; numeric
 24495                                  buf_pos1:
 24496 00001D16 0080                    	dw	8000h	; numeric value??
 24497 00001D18 0000                    	dw	0	; function
 24498 00001D1A [501D]                  	dw	result_val ; result value buffer	
 24499 00001D1C [1F1D]                  	dw	buf_range_1 ; value list
 24500 00001D1E 00                      	db	0  	; no switches/keywords
 24501                                  
 24502                                  ;buf_range_1 p_range <,,,1,99>		; M050
 24503                                  buf_range_1:
 24504 00001D1F 01                      	db	1	; range definition
 24505 00001D20 01                      	db	1	; 1 definition of range
 24506 00001D21 01                      	db	1	; item tag for this range
 24507 00001D22 01000000                	dd	1	; numeric min
 24508 00001D26 63000000                	dd	99	; numeric max
 24509                                  
 24510                                  ;buf_pos2 p_pos <8001h,0,result_val,buf_range_2> ; optional num.
 24511                                  buf_pos2:
 24512 00001D2A 0180                    	dw	8001h
 24513 00001D2C 0000                    	dw	0
 24514 00001D2E [501D]                  	dw	result_val	
 24515 00001D30 [331D]                  	dw	buf_range_2
 24516 00001D32 00                      	db	0
 24517                                  
 24518                                  ;buf_range_2 p_range <,,,0,8>
 24519                                  buf_range_2:
 24520 00001D33 01                      	db	1
 24521 00001D34 01                      	db	1
 24522 00001D35 01                      	db	1
 24523 00001D36 00000000                	dd	0
 24524 00001D3A 08000000                	dd	8
 24525                                  
 24526                                  ;sw_x_ctrl p_pos <0,0,result_val,noval,1> ; followed by one switch
 24527                                  sw_x_ctrl:
 24528 00001D3E 0000                    	dw	0
 24529 00001D40 0000                    	dw	0
 24530 00001D42 [501D]                  	dw	result_val	
 24531 00001D44 [4F1D]                  	dw	noval
 24532 00001D46 01                      	db	1	; 1 switch
 24533                                  	
 24534                                  switch_x:
 24535 00001D47 2F5800                  	db	'/X',0		; M016
 24536                                  
 24537                                  p_buffers:
 24538 00001D4A 0000                    	dw	0	; local variables
 24539                                  p_h_buffers:
 24540 00001D4C 0000                    	dw	0
 24541                                  	; 26/10/2022  (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 24542                                  p_buffer_slash_x:
 24543 00001D4E 00                      	db	0 ; 31/03/2019
 24544                                  
 24545                                  ;-- common definitions -------------------------------------------------
 24546                                  
 24547 00001D4F 00                      noval:	db	0
 24548                                  
 24549                                  result_val: 	;label	byte
 24550 00001D50 00                      	db	0		; type returned
 24551                                  result_val_itag:
 24552 00001D51 00                      	db	0		; item tag returned
 24553                                  result_val_swoff:
 24554 00001D52 0000                    	dw	0		; es:offset of the switch defined
 24555                                  rv_byte:	;label	byte
 24556 00001D54 00000000                rv_dword: dd	0		; value if number,or seg:offset to string.
 24557                                  
 24558                                  ;-----------------------------------------------------------------------
 24559                                  
 24560                                  	; 27/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 24561                                  	; (SYSINIT:1F99h)
 24562                                  
 24563                                  ; break = [ on | off ]
 24564                                  
 24565                                  ;brk_parms p_parms  <brk_parmsx>
 24566                                  brk_parms:
 24567 00001D58 [5D1D]                  	dw	brk_parmsx
 24568 00001D5A 01                      	db	1	; an extra delimiter list
 24569 00001D5B 01                      	db	1	; length is 1
 24570 00001D5C 3B                      	db	';'	; delimiter
 24571                                  
 24572                                  brk_parmsx:
 24573 00001D5D 0101[631D]              	dw	101h,brk_pos	; min,max = 1 positional
 24574 00001D61 00                      	db	0		; no switches
 24575 00001D62 00                      	db	0		; no keywords
 24576                                  
 24577                                  ;brk_pos p_pos <2000h,0,result_val,on_off_string> ; simple string
 24578                                  brk_pos:
 24579 00001D63 0020                    	dw	2000h
 24580 00001D65 0000                    	dw	0
 24581 00001D67 [501D]                  	dw	result_val	
 24582 00001D69 [6C1D]                  	dw	on_off_string
 24583 00001D6B 00                      	db	0
 24584                                  
 24585                                  on_off_string:	;label	byte
 24586 00001D6C 03                      	db	3		; signals that there is a string choice
 24587 00001D6D 00                      	db	0		; no range definition
 24588 00001D6E 00                      	db	0		; no numeric values choice
 24589 00001D6F 02                      	db	2		; 2 strings for choice
 24590 00001D70 01                      	db	1		; the 1st string tag
 24591 00001D71 [761D]                  	dw	on_string
 24592 00001D73 02                      	db	2		; the 2nd string tag
 24593 00001D74 [791D]                  	dw	off_string
 24594                                  
 24595                                  on_string:
 24596 00001D76 4F4E00                  	db	"ON",0
 24597                                  off_string:
 24598 00001D79 4F464600                	db	"OFF",0
 24599                                  
 24600                                  p_ctrl_break:
 24601 00001D7D 00                      	db	0	; local variable
 24602                                  
 24603                                  ;-----------------------------------------------------------------------
 24604                                  
 24605                                  	; 27/10/2022
 24606                                  
 24607                                  ; country = n {m {path}}
 24608                                  ; or
 24609                                  ; country = n,,path
 24610                                  
 24611                                  ;cntry_parms p_parms <cntry_parmsx>
 24612                                  cntry_parms:
 24613 00001D7E [831D]                  	dw	cntry_parmsx
 24614 00001D80 01                      	db	1
 24615 00001D81 01                      	db	1
 24616 00001D82 3B                      	db	';'
 24617                                  	
 24618                                  cntry_parmsx:
 24619 00001D83 0103[8D1D][A11D]-       	dw	301h,cntry_pos1,cntry_pos2,cntry_pos3 ; min 1, max 3 pos.
 24619 00001D89 [AA1D]             
 24620 00001D8B 00                      	db	0		; no switches
 24621 00001D8C 00                      	db	0		; no keywords
 24622                                  
 24623                                  ;cntry_pos1 p_pos <8000h,0,result_val,cc_range> ; numeric value
 24624                                  cntry_pos1:
 24625 00001D8D 0080                    	dw	8000h
 24626 00001D8F 0000                    	dw	0
 24627 00001D91 [501D]                  	dw	result_val	
 24628 00001D93 [961D]                  	dw	cc_range
 24629 00001D95 00                      	db	0
 24630                                  
 24631                                  ;cc_range p_range <,,,1,999>
 24632                                  cc_range:
 24633 00001D96 01                      	db	1
 24634 00001D97 01                      	db	1
 24635 00001D98 01                      	db	1
 24636 00001D99 01000000                	dd	1
 24637 00001D9D E7030000                	dd	999
 24638                                  
 24639                                  ;cntry_pos2 p_pos <8001h,0,result_val,cc_range> ; optional num.
 24640                                  cntry_pos2:
 24641 00001DA1 0180                    	dw	8001h
 24642 00001DA3 0000                    	dw	0
 24643 00001DA5 [501D]                  	dw	result_val	
 24644 00001DA7 [961D]                  	dw	cc_range
 24645 00001DA9 00                      	db	0
 24646                                  
 24647                                  ;cntry_pos3 p_pos <201h,0,result_val,noval>     ; optional filespec
 24648                                  cntry_pos3:
 24649 00001DAA 0102                    	dw	201h
 24650 00001DAC 0000                    	dw	0
 24651 00001DAE [501D]                  	dw	result_val	
 24652 00001DB0 [4F1D]                  	dw	noval
 24653 00001DB2 00                      	db	0	
 24654                                  
 24655                                  p_cntry_code:
 24656 00001DB3 0000                    	dw	0	; local variable
 24657                                  p_code_page:
 24658 00001DB5 0000                    	dw	0	; local variable
 24659                                  
 24660                                  ;-----------------------------------------------------------------------
 24661                                  
 24662                                  	; 27/10/2022
 24663                                  
 24664                                  ; files = n
 24665                                  
 24666                                  ;files_parms p_parms <files_parmsx>
 24667                                  files_parms:
 24668 00001DB7 [BC1D]                  	dw	files_parmsx
 24669 00001DB9 01                      	db	1
 24670 00001DBA 01                      	db	1
 24671 00001DBB 3B                      	db	';'
 24672                                  
 24673                                  files_parmsx:
 24674 00001DBC 0101[C21D]              	dw	101h,files_pos	; min,max 1 positional
 24675 00001DC0 00                      	db	0		; no switches
 24676 00001DC1 00                      	db	0		; no keywords
 24677                                  
 24678                                  ;files_pos p_pos <8000h,0,result_val,files_range,0> ; numeric value
 24679                                  files_pos:
 24680 00001DC2 0080                    	dw	8000h
 24681 00001DC4 0000                    	dw	0
 24682 00001DC6 [501D]                  	dw	result_val	
 24683 00001DC8 [CB1D]                  	dw	files_range
 24684 00001DCA 00                      	db	0
 24685                                  
 24686                                  ;files_range p_range <,,,8,255>
 24687                                  files_range:
 24688 00001DCB 01                      	db	1
 24689 00001DCC 01                      	db	1
 24690 00001DCD 01                      	db	1
 24691 00001DCE 08000000                	dd	8
 24692 00001DD2 FF000000                	dd	255
 24693                                  
 24694                                  p_files:
 24695 00001DD6 00                      	db	0		; local variable
 24696                                  
 24697                                  ;-----------------------------------------------------------------------
 24698                                  
 24699                                  	; 27/10/2022
 24700                                  
 24701                                  ; fcbs = n,m
 24702                                  
 24703                                  ;fcbs_parms p_parms <fcbs_parmsx>
 24704                                  fcbs_parms:
 24705 00001DD7 [DC1D]                  	dw	fcbs_parmsx
 24706 00001DD9 01                      	db	1
 24707 00001DDA 01                      	db	1
 24708 00001DDB 3B                      	db	';'
 24709                                  
 24710                                  fcbs_parmsx:
 24711 00001DDC 0102[E41D][F81D]        	dw	201h,fcbs_pos_1,fcbs_pos_2 ; min,max = 2 positional
 24712 00001DE2 00                      	db	0		; no switches
 24713 00001DE3 00                      	db	0		; no keywords
 24714                                  
 24715                                  ;fcbs_pos_1 p_pos <8000h,0,result_val,fcbs_range> ; numeric value
 24716                                  fcbs_pos_1:
 24717 00001DE4 0080                    	dw	8000h
 24718 00001DE6 0000                    	dw	0
 24719 00001DE8 [501D]                  	dw	result_val	
 24720 00001DEA [ED1D]                  	dw	fcbs_range
 24721 00001DEC 00                      	db	0
 24722                                  
 24723                                  ;fcbs_range p_range <,,,1,255>
 24724                                  fcbs_range:
 24725 00001DED 01                      	db	1
 24726 00001DEE 01                      	db	1
 24727 00001DEF 01                      	db	1
 24728 00001DF0 01000000                	dd	1
 24729 00001DF4 FF000000                	dd	255
 24730                                  
 24731                                  ;fcbs_pos_2 p_pos <8000h,0,result_val,fcbs_keep_range> ; numeric value
 24732                                  fcbs_pos_2:
 24733 00001DF8 0080                    	dw	8000h
 24734 00001DFA 0000                    	dw	0
 24735 00001DFC [501D]                  	dw	result_val	
 24736 00001DFE [011E]                  	dw	fcbs_keep_range
 24737 00001E00 00                      	db	0
 24738                                  
 24739                                  ;fcbs_keep_range p_range <,,,0,255>
 24740                                  fcbs_keep_range:
 24741 00001E01 01                      	db	1
 24742 00001E02 01                      	db	1
 24743 00001E03 01                      	db	1
 24744 00001E04 00000000                	dd	0
 24745 00001E08 FF000000                	dd	255
 24746                                  
 24747 00001E0C 00                      p_fcbs:	db	0		; local variable
 24748 00001E0D 00                      p_keep:	db	0		; local variable
 24749                                  
 24750                                  ;-----------------------------------------------------------------------
 24751                                  
 24752                                  	; 27/10/2022
 24753                                  
 24754                                  ; lastdrive = x
 24755                                  
 24756                                  ;ldrv_parms p_parms <ldrv_parmsx>
 24757                                  ldrv_parms:
 24758 00001E0E [131E]                  	dw	ldrv_parmsx
 24759 00001E10 01                      	db	1
 24760 00001E11 01                      	db	1
 24761 00001E12 3B                      	db	';'
 24762                                  
 24763                                  ldrv_parmsx:
 24764 00001E13 0101[191E]              	dw	101h,ldrv_pos	; min,max = 1 positional
 24765 00001E17 00                      	db	0		; no switches
 24766 00001E18 00                      	db	0		; no keywords
 24767                                  
 24768                                  ;ldrv_pos p_pos	<110h,10h,result_val,noval> ; drive only, ignore colon
 24769                                  ldrv_pos:				    ; remove colon at end
 24770 00001E19 1001                    	dw	110h
 24771 00001E1B 1000                    	dw	10h
 24772 00001E1D [501D]                  	dw	result_val	
 24773 00001E1F [4F1D]                  	dw	noval
 24774 00001E21 00                      	db	0
 24775                                  	
 24776 00001E22 00                      p_ldrv:	db	0		; local variable
 24777                                  
 24778                                  ;-----------------------------------------------------------------------
 24779                                  
 24780                                  	; 27/10/2022
 24781                                  
 24782                                  ; stacks = n,m
 24783                                  
 24784                                  ;stks_parms p_parms <stks_parmsx>
 24785                                  stks_parms:
 24786 00001E23 [281E]                  	dw	stks_parmsx
 24787 00001E25 01                      	db	1
 24788 00001E26 01                      	db	1
 24789 00001E27 3B                      	db	';'
 24790                                  
 24791                                  stks_parmsx:
 24792 00001E28 0202[301E][441E]        	dw	202h,stks_pos_1,stks_pos_2 ; min,max = 2 positionals
 24793 00001E2E 00                      	db	0		; no switches
 24794 00001E2F 00                      	db	0		; no keywords
 24795                                  
 24796                                  ;stks_pos_1 p_pos <8000h,0,result_val,stks_range> ; numeric value
 24797                                  stks_pos_1:
 24798 00001E30 0080                    	dw	8000h
 24799 00001E32 0000                    	dw	0
 24800 00001E34 [501D]                  	dw	result_val	
 24801 00001E36 [391E]                  	dw	stks_range
 24802 00001E38 00                      	db	0
 24803                                  
 24804                                  ;stks_range p_range <,,,0,64>
 24805                                  stks_range:
 24806 00001E39 01                      	db	1
 24807 00001E3A 01                      	db	1
 24808 00001E3B 01                      	db	1
 24809 00001E3C 00000000                	dd	0
 24810 00001E40 40000000                	dd	64
 24811                                  
 24812                                  ;stks_pos_2 p_pos <8000h,0,result_val,stk_size_range> ; numeric value
 24813                                  stks_pos_2:
 24814 00001E44 0080                    	dw	8000h
 24815 00001E46 0000                    	dw	0
 24816 00001E48 [501D]                  	dw	result_val	
 24817 00001E4A [4D1E]                  	dw	stk_size_range
 24818 00001E4C 00                      	db	0
 24819                                  
 24820                                  ;stk_size_range p_range <,,,0,512>
 24821                                  stk_size_range:
 24822 00001E4D 01                      	db	1
 24823 00001E4E 01                      	db	1
 24824 00001E4F 01                      	db	1
 24825 00001E50 00000000                	dd	0
 24826 00001E54 00020000                	dd	512	
 24827                                  
 24828                                  p_stack_count:
 24829 00001E58 0000                    	dw	0	; local variable
 24830                                  p_stack_size:
 24831 00001E5A 0000                    	dw	0	; local variable
 24832                                  
 24833                                  ;-----------------------------------------------------------------------
 24834                                  
 24835                                  	; 27/10/2022
 24836                                  
 24837                                  ; multitrack = [ on | off ]
 24838                                  
 24839                                  ;mtrk_parms p_parms <mtrk_parmsx>
 24840                                  mtrk_parms:
 24841 00001E5C [611E]                  	dw	mtrk_parmsx
 24842 00001E5E 01                      	db	1
 24843 00001E5F 01                      	db	1
 24844 00001E60 3B                      	db	';'
 24845                                  
 24846                                  mtrk_parmsx:
 24847 00001E61 0101[671E]              	dw	101h,mtrk_pos	; min,max = 1 positional
 24848 00001E65 00                      	db	0		; no switches
 24849 00001E66 00                      	db	0		; no keywords
 24850                                  
 24851                                  ;mtrk_pos p_pos <2000h,0,result_val,on_off_string> ; simple string
 24852                                  mtrk_pos:
 24853 00001E67 0020                    	dw	2000h
 24854 00001E69 0000                    	dw	0
 24855 00001E6B [501D]                  	dw	result_val	
 24856 00001E6D [6C1D]                  	dw	on_off_string
 24857 00001E6F 00                      	db	0
 24858                                  
 24859 00001E70 00                      p_mtrk:	db	0		; local variable
 24860                                  
 24861                                  ;-----------------------------------------------------------------------
 24862                                  
 24863                                  	; 27/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 24864                                  	; (SYSINIT:20B2h)
 24865                                  
 24866                                  ; switches=/k
 24867                                  
 24868                                  ;swit_parms p_parms <swit_parmsx>
 24869                                  swit_parms:
 24870 00001E71 [761E]                  	dw	swit_parmsx
 24871 00001E73 01                      	db	1
 24872 00001E74 01                      	db	1
 24873 00001E75 3B                      	db	';'
 24874                                  
 24875                                  swit_parmsx:
 24876 00001E76 0000                    	dw	0		; no positionals
 24877                                  	;db	5               ; # of switches
 24878                                  	; 27/10/2022 - Retro DOS v4.0 (MSDOS 5.0 IO.SYS, SYSINIT)
 24879 00001E78 03                      	db	3
 24880 00001E79 [801E]                  	dw	swit_k_ctrl	; /k control
 24881                                  	;dw	swit_n_ctrl     ; /n control (for MULTI_CONFIG only)
 24882                                  	;dw	swit_f_ctrl     ; /f control (for MULTI_CONFIG only)
 24883 00001E7B [8C1E]                  	dw	swit_t_ctrl     ; /t control
 24884 00001E7D [981E]                  	dw	swit_w_ctrl     ; /w control
 24885 00001E7F 00                      	db	0		; no keywords
 24886                                  
 24887                                  ;swit_k_ctrl p_pos <0,0,result_val,noval,1> ; switch string follows
 24888                                  swit_k_ctrl:
 24889 00001E80 00000000[501D]-         	dw	0,0,result_val,noval
 24889 00001E86 [4F1D]             
 24890 00001E88 01                      	db	1
 24891 00001E89 2F4B00                  swit_k:	db	'/K',0
 24892                                  
 24893                                  ; 27/10/2022 - Retro DOS v4.0 (MSDOS 5.0 IO.SYS, SYSINIT)
 24894                                  ;
 24895                                  ;;swit_n_ctrl p_pos <0,0,result_val,noval,1> ; switch string follows
 24896                                  ;swit_n_ctrl:
 24897                                  ;	dw	0,0,result_val,noval
 24898                                  ;	db	1
 24899                                  ;swit_n: db	'/N',0
 24900                                  ;
 24901                                  ;;swit_f_ctrl p_pos <0,0,result_val,noval,1> ; switch string follows
 24902                                  ;swit_f_ctrl:
 24903                                  ;	dw	0,0,result_val,noval
 24904                                  ;	db	1
 24905                                  ;swit_f: db 	'/F',0
 24906                                  
 24907                                  	; 27/10/2022
 24908                                  
 24909                                  ;swit_t_ctrl p_pos <0,0,result_val,noval,1> ; switch string follows	M059
 24910                                  swit_t_ctrl:
 24911 00001E8C 00000000[501D]-         	dw	0,0,result_val,noval
 24911 00001E92 [4F1D]             
 24912 00001E94 01                      	db	1
 24913 00001E95 2F5400                  swit_t:	db	'/T',0			   ;				M059
 24914                                  ;swit_w_ctrl p_pos <0,0,result_val,noval,1> ; switch string follows	M063
 24915                                  swit_w_ctrl:
 24916 00001E98 00000000[501D]-         	dw	0,0,result_val,noval
 24916 00001E9E [4F1D]             
 24917 00001EA0 01                      	db	1
 24918 00001EA1 2F5700                  swit_w:	db	'/W',0			   ;				M063
 24919                                  
 24920                                  ;   There doesn't need to be p_swit_n or p_swit_f because /N and /F are
 24921                                  ;   acted upon during MULTI_CONFIG processing; we only needed entries
 24922                                  ;   in the above table to prevent the parsing code from complaining about them
 24923                                  
 24924 00001EA4 00                      p_swit_k:	db     0	; local variable
 24925 00001EA5 00                      p_swit_t:	db     0	; local variable			M059
 24926 00001EA6 00                      p_swit_w:	db     0	; local variable			M063
 24927                                  
 24928                                  ;-----------------------------------------------------------------------
 24929                                  
 24930                                  	; 27/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 24931                                  	; (SYSINIT:20E8h)
 24932                                  
 24933                                  ; DOS = [ high | low ]
 24934                                  
 24935                                  ;dos_parms p_parms  <dos_parmsx>
 24936                                  dos_parms:
 24937 00001EA7 [AC1E]                  	dw	dos_parmsx
 24938 00001EA9 01                      	db	1
 24939 00001EAA 01                      	db	1
 24940 00001EAB 3B                      	db	';'
 24941                                  dos_parmsx:
 24942 00001EAC 01                      	db	1		; min parameters
 24943 00001EAD 02                      	db	2		; max parameters
 24944 00001EAE [B41E]                  	dw	dos_pos		; 
 24945 00001EB0 [B41E]                  	dw	dos_pos		; 
 24946 00001EB2 00                      	db	0		; no switches
 24947 00001EB3 00                      	db	0		; no keywords
 24948                                  
 24949                                  ;dos_pos p_pos	<2000h,0,result_val,dos_strings> ; simple string
 24950                                  ;        p_pos	<2000h,0,result_val,dos_strings> ; simple string
 24951                                  dos_pos:
 24952 00001EB4 00200000[501D]-         	dw	2000h,0,result_val,dos_strings
 24952 00001EBA [C61E]             
 24953 00001EBC 00                      	db	0
 24954 00001EBD 00200000[501D]-         	dw	2000h,0,result_val,dos_strings
 24954 00001EC3 [C61E]             
 24955 00001EC5 00                      	db	0	
 24956                                  
 24957                                  dos_strings:	;label	byte
 24958 00001EC6 03                      	db	3		; signals that there is a string choice
 24959 00001EC7 00                      	db	0		; no range definition
 24960 00001EC8 00                      	db	0		; no numeric values choice
 24961 00001EC9 04                      	db	4		; 4 strings for choice
 24962 00001ECA 01                      	db	1		; the 1st string tag
 24963 00001ECB [D61E]                  	dw	hi_string
 24964 00001ECD 02                      	db	2		; the 2nd string tag
 24965 00001ECE [DB1E]                  	dw	lo_string
 24966 00001ED0 03                      	db	3
 24967 00001ED1 [DF1E]                  	dw	umb_string
 24968 00001ED3 04                      	db	4
 24969 00001ED4 [E31E]                  	dw	noumb_string
 24970                                  
 24971 00001ED6 4849474800              hi_string:	db	"HIGH",0
 24972 00001EDB 4C4F5700                lo_string:	db	"LOW",0
 24973 00001EDF 554D4200                umb_string:	db	"UMB",0
 24974 00001EE3 4E4F554D4200            noumb_string:	db	"NOUMB",0
 24975                                  
 24976 00001EE9 00                      p_dos_hi:	db	0	; local variable
 24977                                  				; BUGBUG : I dont know whether PARSER uses
 24978                                  				;          this variable or not
 24979                                  
 24980                                  ; 27/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 24981                                  
 24982                                  %if 0
 24983                                  
 24984                                  ;****************************************************************** RICHID ****
 24985                                  
 24986                                  ;include	highvar.inc	; devicehigh variables (used by loadhigh also)
 24987                                  
 24988                                  ; 30/03/2019 - Retro DOS v4.0
 24989                                  ;------------------------------------------------------------------------------
 24990                                  
 24991                                  ;   Module:   HIGHVAR.INC - Data common to LOADHIGH and DEVICEHIGH, res seg
 24992                                  ;
 24993                                  ;   Date:     May 14, 1992
 24994                                  ;
 24995                                  ;******************************************************************************
 24996                                  ;
 24997                                  ;   Modification log:
 24998                                  ;
 24999                                  ;     DATE    WHO      DESCRIPTION
 25000                                  ;   --------  -------  --------------------------------------------------------
 25001                                  ;   05/14/92  t-richj  Original
 25002                                  ;   06/21/92  t-richj  Final revisions before check-in
 25003                                  ;
 25004                                  ;******************************************************************************
 25005                                  ;
 25006                                  ; There are two primary definitions which need to be made, selectively, before
 25007                                  ; this include file should be used.  These are:
 25008                                  ;    HV_Extern - If this has been defined, variables for this module will be
 25009                                  ;                declared as external.  Otherwise, variables will be declared
 25010                                  ;                public, as well as defined, here.  LoadHigh declares HV_Extern
 25011                                  ;                in stub.asm and loadhi.asm, and does not declare it in
 25012                                  ;                rdata.asm... DeviceHigh does not declare HV_Extern anywhere
 25013                                  ;                (as only one module, sysconf.asm, includes this file).
 25014                                  ;    HV_LoadHigh - This should be defined when this module is going into
 25015                                  ;                  command.com, for LoadHigh.  All of loadhi.asm, stub.asm and
 25016                                  ;                  rdata.asm define this, while io.sys' sysconf.asm does not.
 25017                                  ;
 25018                                  ;******************************************************************************
 25019                                  
 25020                                  ; To keep track of which UMBs were specified on the DH/LH command lines, and
 25021                                  ; to keep track of the minimum sizes given for each, there're two arrays kept
 25022                                  ; in { IO.SYS: sysinitseg / COMMAND.COM: DATARES }... each is MAXUMB elements
 25023                                  ; big.  16 should be around 14 too many for most users, so there's no expected
 25024                                  ; space problem (it's just such a nice round number, eh?).
 25025                                  
 25026                                  MAXUMB	equ	16
 25027                                  
 25028                                  ; Memory elements owned by the system are marked as PSP address 8 in both the
 25029                                  ; USA and Japan; Japanese systems also use 9 under more bizzarre conditions.
 25030                                  
 25031                                  FreePSPOwner	equ	0	; Free MCBs all have an owner PSP address of 0
 25032                                  SystemPSPOwner	equ	8
 25033                                  ;JapanPSPOwner	equ	9
 25034                                  
 25035                                  ; for LoadHigh and DeviceHigh:
 25036                                  ;
 25037                                  ;	fInHigh - Is set to 1 during HideUMBs(), and back to zero in
 25038                                  ;	          UnHideUMBs().
 25039                                  ;	fUmbTiny - Is set to 1 iff the user has specified /S on the command-
 25040                                  ;	           line.
 25041                                  ;	SegLoad - Segment address for first UMB specified; set automatically.
 25042                                  ;	UmbLoad - The load UMB number; for example, this is 3 if the user has
 25043                                  ;	          given a command-line like "/L:3,500;4"
 25044                                  ;	UmbUsed - An array of characters, each of which is 1 iff the UMB
 25045                                  ;	          matching its index number was specified on the command-line;
 25046                                  ;	          for example, after "/L:3,500;4;7", UmbUsed[3], [4] and [7]
 25047                                  ;	          will be set to 1.  All others will be set to 0.
 25048                                  ;	UmbSize - An array of words, each of which is interpereted as a size
 25049                                  ;	          specified by the user for a UMB (in the above example, all
 25050                                  ;	          elements would be zero save UmbSize[3], which would be 500.
 25051                                  ;	fm_umb - Set to the old UMB link-state (0x80 or 0x00)
 25052                                  ;	fm_strat - Set to the old memory-allocation strategy (0$00000???)
 25053                                  ;	fm_argc  - Number of arguments received by ParseVar() (see ParseVar()
 25054                                  ;	           for details).
 25055                                  
 25056                                  fInHigh:  db	0
 25057                                  fUmbTiny: db	0
 25058                                  SegLoad:  dw	0
 25059                                  UmbLoad:  db	0
 25060                                  UmbUsed:  times MAXUMB db 0 ; times 16 db 0  ; db 16 dup(?)
 25061                                  UmbSize:  times MAXUMB dw 0 ; times 16 dw 0  ; dw 16 dup(?)
 25062                                  fm_umb:   db	0
 25063                                  fm_strat: db	0
 25064                                  fm_argc:  db	0	
 25065                                  
 25066                                  ; UmbLoad is set to UNSPECIFED, below, until /L:umb is read; at which point
 25067                                  ; UmbLoad is set to the UMB number given.
 25068                                  
 25069                                  UNSPECIFIED	equ	-1
 25070                                  
 25071                                  %endif
 25072                                  
 25073                                  ;****************************************************************** RICHID ****
 25074                                  
 25075                                  ; 30/03/2019 - Retro DOS v4.0 (MSDOS 6.0, SYSCONF.ASM)
 25076                                  ; ((MSDOS 6.21 IO.SYS -> SYNINIT:22BAh))
 25077                                  
 25078                                  ; 27/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 25079                                  ; (SYSINIT:212Bh)	
 25080                                  
 25081                                  		;public	DevEntry
 25082                                  
 25083 00001EEA 0000                    DevSize:	dw	0	; size of the device driver being loaded(paras)
 25084 00001EEC 0000                    DevLoadAddr:	dw	0	; Mem addr where the device driver is 2 b loaded
 25085 00001EEE 0000                    DevLoadEnd:	dw	0	; MaxAddr to which device can be loaded
 25086 00001EF0 00000000                DevEntry:	dd	0	; Entry point to the device driver
 25087 00001EF4 00000000                DevBrkAddr:	dd	0	; Break address of the device driver
 25088                                  ; 27/10/2022 
 25089                                  ;ConvLoad:	db	0	; Use conventional (dos 5 -style) InitDevLoad?
 25090                                  ;
 25091 00001EF8 00                      DevUMB:		db	0	; byte indicating whether to load DDs in UMBs
 25092 00001EF9 0000                    DevUMBAddr:	dw	0	; cuurent UMB used fro loading devices (paras)
 25093 00001EFB 0000                    DevUMBSize:	dw	0	; Size of the current UMB being used   (paras)
 25094 00001EFD 0000                    DevUMBFree:	dw	0	; Start of free are in the current UMB (paras)
 25095                                  ;
 25096 00001EFF 00000000                DevXMSAddr:	dd	0
 25097                                  ;
 25098 00001F03 0000                    DevExecAddr:	dw	0	; Device load address parameter to Exec call
 25099 00001F05 0000                    DevExecReloc:	dw	0	; Device load relocation factor
 25100                                  ;
 25101 00001F07 00                      DeviceHi:	db	0	; Flag indicating whther the current device
 25102                                  				;  is being loaded into UMB
 25103 00001F08 0000                    DevSizeOption:	dw	0	; SIZE= option
 25104                                  ;
 25105 00001F0A 00                      Int12Lied:	db	0	; did we trap int 12 ?
 25106 00001F0B 0000                    OldInt12Mem:	dw	0	; value in 40:13h (int 12 ram)
 25107 00001F0D 50524F544D414E24        ThreeComName:	db	'PROTMAN$'	; 3Com Device name
 25108                                  ;
 25109 00001F15 00                      FirstUMBLinked:	db	0
 25110 00001F16 0000                    DevDOSData:	dw	0	; segment of DOS Data
 25111 00001F18 00000000                DevCmdLine:	dd	0	; Current Command line
 25112 00001F1C 00                      DevSavedDelim:	db	0	; The delimiter which was replaced with null
 25113                                  				; to use the file name in the command line
 25114                                  ;
 25115                                  ;	ifdef	dblspace_hooks
 25116                                  ;MagicHomeFlag:	db	0	; set non-zero when MagicDrv is final placed
 25117                                  ;	endif
 25118                                  
 25119                                  ; ===========================================================================
 25120                                  
 25121                                  ; 31/03/2019 - Retro DOS v4.0
 25122                                  
 25123                                  ; 27/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 25124                                  ; (SYSINIT:215Eh)
 25125                                  
 25126                                  ;----------------------------------------------------------------------------
 25127                                  ;
 25128                                  ; procedure : doconf
 25129                                  ;
 25130                                  ;             Config file is parsed initially with this routine. For the
 25131                                  ;             Subsequent passes 'multi_pass' entry is used .
 25132                                  ;
 25133                                  ;----------------------------------------------------------------------------
 25134                                  
 25135                                  	; 27/10/2022
 25136                                  doconf:
 25137 00001F1D 0E                      	push	cs
 25138 00001F1E 1F                      	pop	ds
 25139                                  
 25140 00001F1F B80037                  	mov	ax,3700h
 25141                                          ;mov	ax,(CHAR_OPER<<8)	; get switch character
 25142 00001F22 CD21                    	int	21h
 25143 00001F24 8816[AA02]              	mov	[command_line+1],dl	; set in default command line
 25144                                  
 25145                                  ; 27/10/2022
 25146                                  ;;ifdef	MULTI_CONFIG
 25147                                  ;	;mov	[command_line-1],dl     ; save default switchchar
 25148                                  ;	mov	[def_swchr],dl ; 31/03/2019 
 25149                                  ;;endif	;MULTI_CONFIG
 25150                                  
 25151 00001F28 BA[0434]                	mov	dx,config ;'\CONFIG.SYS' ;now pointing to file description
 25152 00001F2B B8003D                  	mov	ax,3D00h
 25153                                  	;mov	ax,OPEN<<8		;open file "config.sys"
 25154 00001F2E F9                      	stc				;in case of int 24
 25155 00001F2F CD21                    	int	21h			;function request
 25156 00001F31 7306                    	jnc	short noprob		; brif opened okay
 25157                                  
 25158                                  ; 27/10/2022
 25159                                  ;;ifdef	MULTI_CONFIG
 25160                                  ;      	call	kbd_read		; we still want to give the guy
 25161                                  ;					; a chance to select clean boot!
 25162                                  ;;endif					; (ie, no autoexec.bat processing)
 25163 00001F33 C606[4903]0B            	mov	byte [multi_pass_id],11	; set it to unreasonable number
 25164 00001F38 C3                      	retn
 25165                                  noprob: 				;get file size (note < 64k!!)
 25166 00001F39 89C3                    	mov	bx,ax  ; File handle
 25167 00001F3B 31C9                    	xor	cx,cx
 25168 00001F3D 31D2                    	xor	dx,dx
 25169                                  	;mov	ax,4202h
 25170 00001F3F B80242                  	mov	ax,(LSEEK<<8)|2
 25171 00001F42 CD21                    	int	21h
 25172 00001F44 A3[D203]                	mov	[count],ax
 25173                                  
 25174 00001F47 31D2                    	xor	dx,dx
 25175                                  	;mov	ax,4200h
 25176 00001F49 B80042                  	mov	ax,LSEEK<<8		;reset pointer to beginning of file
 25177 00001F4C CD21                    	int	21h
 25178                                  
 25179                                  	;mov	dx,[ALLOCLIM]		;use current alloclim value
 25180                                  	; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 25181 00001F4E 8B16[A102]              	mov	dx,[top_of_cdss] 
 25182                                  
 25183 00001F52 A1[D203]                	mov	ax,[count]
 25184 00001F55 A3[4C03]                	mov	[config_size],ax	;save the size of config.sys file.
 25185 00001F58 E866F1                  	call	ParaRound
 25186 00001F5B 29C2                    	sub	dx,ax
 25187                                  
 25188                                  ; 27/10/2022
 25189                                  ;;ifdef	MULTI_CONFIG
 25190                                  ;;
 25191                                  ;;  The size of the CONFIG.SYS workspace (for recreating the in-memory
 25192                                  ;;  CONFIG.SYS image, and later for building the initial environment) need
 25193                                  ;;  not be any larger than CONFIG.SYS itself, EXCEPT for the fact that
 25194                                  ;;  we (may) add a variable to the environment that does not explicity appear
 25195                                  ;;  in CONFIG.SYS, and that variable is CONFIG (as in CONFIG=COMMON).
 25196                                  ;;  The default setting for CONFIG cannot result in more than 1 paragraph
 25197                                  ;;  of extra space, so here we account for it (the worst case of course is
 25198                                  ;;  when CONFIG.SYS is some very small size, like 0 -JTP)
 25199                                  ;;
 25200                                  ;       dec     dx                      ;reserve 1 additional paragraph
 25201                                  ;       mov     [config_wrkseg],dx      ;this is the segment to be used for
 25202                                  ;       sub     dx,ax                   ;rebuilding the config.sys memory image
 25203                                  ;;endif	;MULTI_CONFIG
 25204                                  
 25205 00001F5D 83EA11                  	sub	dx,11h			;room for header
 25206                                  	
 25207                                  	;mov	[ALLOCLIM],dx		;config starts here. new alloclim value.
 25208                                  	;mov	[CONFBOT],dx
 25209                                  	; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 25210 00001F60 8916[A102]              	mov	[top_of_cdss],dx
 25211 00001F64 E870EC                  	call    TempCDS 
 25212                                  	; 11/12/2022
 25213                                  	; ds <> cs 
 25214 00001F67 2E8B16[A102]            	mov	dx,[cs:top_of_cdss]
 25215                                   
 25216 00001F6C 8EDA                    	mov	ds,dx
 25217 00001F6E 8EC2                    	mov	es,dx
 25218                                  
 25219 00001F70 31D2                    	xor	dx,dx
 25220 00001F72 2E8B0E[D203]            	mov	cx,[cs:count]
 25221 00001F77 B43F                    	mov	ah,3Fh
 25222                                  	;mov	ah,READ  ; 3Fh
 25223 00001F79 F9                      	stc				;in case of int 24
 25224 00001F7A CD21                    	int	21h			;function request
 25225 00001F7C 9C                      	pushf
 25226                                  
 25227                                  ; find the eof mark in the file. if present,then trim length.
 25228                                  
 25229 00001F7D 50                      	push	ax
 25230 00001F7E 57                      	push	di
 25231 00001F7F 51                      	push	cx
 25232 00001F80 B01A                    	mov	al,1Ah			; eof mark
 25233 00001F82 89D7                    	mov	di,dx			; point to buffer
 25234 00001F84 E305                    	jcxz	puteol			; no chars
 25235 00001F86 F2AE                    	repnz	scasb			; find end
 25236 00001F88 7501                    	jnz	short puteol		; none found and count exhausted
 25237                                  
 25238                                  ; we found a 1a. back up
 25239                                  
 25240 00001F8A 4F                      	dec	di			; backup past 1Ah
 25241                                  
 25242                                  ;  just for the halibut, stick in an extra eol
 25243                                  
 25244                                  puteol:
 25245 00001F8B B00D                    	mov	al,cr ; 0Dh
 25246 00001F8D AA                      	stosb
 25247 00001F8E B00A                    	mov	al,lf  ;0Ah
 25248 00001F90 AA                      	stosb
 25249 00001F91 29D7                    	sub	di,dx			; difference moved
 25250                                  	; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 25251                                  	;mov	[cs:count],di		; new count
 25252                                  
 25253                                  	; 11/12/2022	
 25254                                  	; 31/03/2019 - Retro DOS v4.0
 25255 00001F93 0E                      	push	cs
 25256 00001F94 1F                      	pop	ds
 25257                                  
 25258 00001F95 893E[D203]              	mov	[count],di		; new count
 25259                                  
 25260 00001F99 59                      	pop	cx
 25261 00001F9A 5F                      	pop	di
 25262 00001F9B 58                      	pop	ax
 25263                                  
 25264                                  	; 11/12/2022
 25265                                  	; 27/10/2022
 25266                                  	;push	cs
 25267                                  	;pop	ds
 25268                                  
 25269 00001F9C 50                      	push	ax
 25270                                  	;mov	ah,CLOSE
 25271 00001F9D B43E                    	mov	ah,3Eh
 25272 00001F9F CD21                    	int	21h
 25273 00001FA1 58                      	pop	ax
 25274 00001FA2 9D                      	popf
 25275 00001FA3 7204                    	jc	short conferr 		;if not we've got a problem
 25276 00001FA5 39C1                    	cmp	cx,ax
 25277 00001FA7 742C                    	jz	short getcom		;couldn't read the file
 25278                                  conferr:
 25279 00001FA9 BA[0434]                	mov	dx,config		;want to print config error
 25280 00001FAC E8AC13                  	call	badfil
 25281                                  endconv:
 25282 00001FAF C3                      	retn
 25283                                  
 25284                                  ;----------------------------------------------------------------------------
 25285                                  ;
 25286                                  ; entry : multi_pass
 25287                                  ;
 25288                                  ;             called to execute device=,install= commands
 25289                                  ;
 25290                                  ;----------------------------------------------------------------------------
 25291                                  
 25292                                  	; 27/10/2022
 25293                                  multi_pass:
 25294 00001FB0 0E                      	push	cs
 25295 00001FB1 1F                      	pop	ds
 25296                                  
 25297 00001FB2 803E[4903]0A            	cmp	byte [multi_pass_id],10
 25298                                  ;jae_endconv:
 25299 00001FB7 73F6                    	jae	short endconv 		; do nothing. just return.
 25300                                  
 25301                                  	;push	word [CONFBOT]
 25302                                  	; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 25303 00001FB9 FF36[A102]              	push	word [top_of_cdss]
 25304 00001FBD 07                      	pop	es			; es -> confbot
 25305                                  
 25306 00001FBE 8B36[D403]              	mov	si,[org_count]
 25307 00001FC2 8936[D203]              	mov	[count],si		; set count
 25308 00001FC6 31F6                    	xor	si,si ; 0
 25309 00001FC8 8936[D603]                      mov     [chrptr],si		; reset chrptr
 25310 00001FCC 8936[2B03]                      mov     [linecount],si		; reset linecount
 25311                                  
 25312 00001FD0 E86807                  	call	getchr
 25313 00001FD3 EB06                    	jmp	short conflp
 25314                                  
 25315                                  getcom:
 25316 00001FD5 E8B10E                          call    organize                ; organize the file
 25317 00001FD8 E86007                  	call	getchr
 25318                                  conflp: 
 25319 00001FDB 72D2                    	jc	short endconv
 25320                                  
 25321 00001FDD FF06[2B03]                      inc     word [linecount]	; increase linecount
 25322                                  
 25323 00001FE1 C606[3314]00            	mov	byte [multdeviceflag],0	; reset multdeviceflag.
 25324 00001FE6 C606[3614]00            	mov	byte [setdevmarkflag],0	; reset setdevmarkflag.
 25325 00001FEB 3C0A                    	cmp	al,lf			; linefeed?
 25326 00001FED 7416                    	je	short blank_line	;  then ignore this line.
 25327                                  
 25328                                  ; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 25329                                  %if 0
 25330                                  
 25331                                  ;ifdef	MULTI_CONFIG
 25332                                  
 25333                                  ;   If this is a genuine CONFIG.SYS command, then there should be a line
 25334                                  ;   number immediately following it....
 25335                                  
 25336                                          mov     [config_cmd],al         ; save original command code
 25337                                  	;and	al,NOT CONFIG_OPTION_QUERY
 25338                                  	and	al,~CONFIG_OPTION_QUERY ; and al,7Fh
 25339                                          cmp     byte [config_multi],0	; is this a multi-config config.sys?
 25340                                          je      short not_final		; no, line number is not embedded
 25341                                  
 25342                                          push    ax                      ;
 25343                                          call    getchr                  ; ignore end-of-image errors,
 25344                                          mov     ah,al                   ; because if there's an error
 25345                                          call    getchr                  ; fetching the line number that's
 25346                                          xchg    al,ah                   ; supposed to be there, the next
 25347                                          mov     [linecount],ax          ; getchr call will get the same error
 25348                                          pop     ax
 25349                                  ;
 25350                                  ;   HACK: when 4DOS.COM is the shell and it doesn't have an environment from
 25351                                  ;   which to obtain its original program name, it grovels through all of
 25352                                  ;   memory to find the filename that was used to exec it; it wants to find
 25353                                  ;   the SHELL= line in the in-memory copy of CONFIG.SYS, and it knows that
 25354                                  ;   sysinit converts the SHELL= keyword to an 'S', so it expects to find an 'S'
 25355                                  ;   immediately before the filename, but since we are now storing line # info
 25356                                  ;   in the config.sys memory image, 4DOS fails to find the 'S' in the right
 25357                                  ;   spot.
 25358                                  ;
 25359                                  ;   So, on the final pass of CONFIG.SYS, copy the command code (eg, 'S')
 25360                                  ;   over the line number info, since we no longer need that info anyway. This
 25361                                  ;   relies on the fact that getchr leaves ES:SI pointing to the last byte
 25362                                  ;   retrieved.
 25363                                  ;
 25364                                          cmp	byte [multi_pass_id],2	; final pass?
 25365                                          jb	short not_final		; no
 25366                                          ;test	word [install_flag],have_install_cmd
 25367                                  	test	byte [install_flag],have_install_cmd ; 1
 25368                                          jz	short final		; no install cmds, so yes it is
 25369                                          cmp	byte [multi_pass_id],3	; final pass?
 25370                                          jb	short not_final		; no
 25371                                  final:                                  ;
 25372                                  	mov	[es:si],al		; save backward-compatible command code
 25373                                  not_final:                              ;
 25374                                  ;endif
 25375                                  
 25376                                  %endif
 25377 00001FEF 88C4                    	mov	ah,al
 25378 00001FF1 E84707                  	call	getchr
 25379 00001FF4 7314                    	jnc	short tryi
 25380                                  
 25381 00001FF6 803E[4903]02            	cmp	byte [multi_pass_id],2
 25382                                  	;jae	short jae_endconv	; do not show badop again for multi_pass.
 25383                                  	; 27/10/2022
 25384 00001FFB 73B2                    	jnb	short endconv	
 25385 00001FFD E90707                  	jmp	badop
 25386                                  	
 25387                                  coff:	
 25388                                  	; 11/12/2022
 25389                                  	; ds = cs
 25390                                  	;push	cs
 25391                                  	;pop	ds
 25392 00002000 E89D10                  	call	newline
 25393 00002003 EBD6                    	jmp	short conflp	; 13/05/2019
 25394                                  
 25395                                  blank_line:
 25396 00002005 E83307                  	call	getchr
 25397 00002008 EBD1                    	jmp	short conflp
 25398                                  
 25399                                  	; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 25400                                  ; 11/12/2022
 25401                                  ; (there is not a jump or call to here from anywhere!)
 25402                                  ;coff_p:
 25403                                  	;push	cs
 25404                                  	;pop	ds
 25405                                  
 25406                                  ;to handle install= commands,we are going to use multi-pass.
 25407                                  ;the first pass handles the other commands and only set install_flag when
 25408                                  ;it finds any install command. the second pass will only handle the
 25409                                  ;install= command.
 25410                                  
 25411                                  ;------------------------------------------------------------------------------
 25412                                  ;install command
 25413                                  ;------------------------------------------------------------------------------
 25414                                  
 25415                                  	; 27/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 25416                                  	; (SYSINIT:2250h)
 25417                                  tryi:
 25418 0000200A 803E[4903]00            	cmp	byte [multi_pass_id],0	; the initial pass for DOS=HI
 25419 0000200F 7503                    	jne	short not_init_pass
 25420 00002011 E92301                  	jmp	multi_try_doshi
 25421                                  not_init_pass:
 25422 00002014 803E[4903]02            	cmp	byte [multi_pass_id],2	; the second pass was for ifs=
 25423                                          ; 11/12/2022
 25424                                  	;je	short multi_pass_coff2	; now it is NOPs
 25425 00002019 74E5                    	je	short coff
 25426                                  	; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 25427                                  	;je	short multi_pass_coff	
 25428                                  					; This pass can be made use of if
 25429                                  					; we want do some config.sys process
 25430                                  					; after device drivers are loaded
 25431                                  					; and before install= commands
 25432                                  					; are processed
 25433                                  
 25434 0000201B 803E[4903]03            	cmp	byte [multi_pass_id],3	; the third pass for install= ?
 25435 00002020 7411                    	je	short multi_try_i
 25436 00002022 80FC48                          cmp     ah, CONFIG_DOS  ; 'H'
 25437                                  	; 11/12/2022
 25438                                  	;je	short multi_pass_coff2
 25439 00002025 74D9                    	je	short coff
 25440                                  	; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 25441                                  	;je	short multi_pass_coff	
 25442                                  
 25443                                  ;       make note of any INSTALL= or INSTALLHIGH= commands we find,
 25444                                  ;       but don't process them now.        
 25445                                          
 25446 00002027 80FC49                          cmp     ah,CONFIG_INSTALL ; 'I'	; install= command?
 25447                                  	;jne	short precheck_installhigh ; the first pass is for normal operation.
 25448                                  	; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 25449 0000202A 752A                    	jne	short tryb	
 25450                                  	
 25451                                  	;or	word [install_flag],have_install_cmd ; set the flag
 25452 0000202C 800E[4A03]01            	or	byte [install_flag],have_install_cmd ; 1
 25453                                  multi_pass_coff2:
 25454 00002031 EBCD                    	jmp	short coff ; 13/05/2019	; and handles the next command
 25455                                  
 25456                                  	; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 25457                                  ;precheck_installhigh:
 25458                                  ;       cmp     ah,CONFIG_INSTALLHIGH ; 'W' ; signifier for INSTALLHIGH
 25459                                  ;       jne     short tryb		; carry on with normal processing
 25460                                  ;	;or	word [install_flag],have_install_cmd
 25461                                  ;	or	byte [install_flag],have_install_cmd ; 1
 25462                                  ;       jmp	short coff
 25463                                  
 25464                                  multi_try_i:
 25465 00002033 80FC49                          cmp     ah, CONFIG_INSTALL ; 'I' ; install= command?
 25466                                  	;jne	short multi_try_n	; no, check for installhigh
 25467                                  	; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 25468 00002036 7505                    	jne	short multi_pass_filter
 25469                                  
 25470                                  ; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 25471                                  ;;ifdef	MULTI_CONFIG
 25472                                  ;       call    query_user              ; query the user if config_cmd
 25473                                  ;       jc	short multi_pass_filter	; has the CONFIG_OPTION_QUERY bit set
 25474                                  ;;endif
 25475                                  
 25476 00002038 E806F0                  	call	do_install_exec 	;install it.
 25477 0000203B EBC3                    	jmp	short coff		;to handle next install= command.
 25478                                  
 25479                                  ; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 25480                                  %if 0
 25481                                  
 25482                                  multi_try_n:
 25483                                          cmp     ah,CONFIG_INSTALLHIGH   ; installhigh= command?
 25484                                          jne	short multi_pass_filter	; no. ignore this.
 25485                                  ;ifdef	MULTI_CONFIG
 25486                                          call    query_user              ; query the user if config_cmd
 25487                                          jc      short multi_pass_filter	; has the CONFIG_OPTION_QUERY bit set
 25488                                  ;endif
 25489                                  
 25490                                  ;       The memory environment is in its normal DOS state, so do
 25491                                  ;       the standard calls to set the alloc strategy for loading high
 25492                                  
 25493                                  	mov	ax,(ALLOCOPER<<8)|0 ; 5800h
 25494                                  	int	21h			;get alloc strategy
 25495                                  	mov	bx,ax
 25496                                          push    bx                      ; save for the return
 25497                                  
 25498                                          or	bx,HIGH_FIRST  ; 80h	;set alloc to HighFirst
 25499                                  	mov	ax,(ALLOCOPER<<8)|1 ; 5801h
 25500                                  	int	21h			;set alloc strategy
 25501                                  
 25502                                  	mov     ax,(ALLOCOPER<<8)|2 ; 5802h
 25503                                          int     21h                     ; get link state
 25504                                          xor     ah,ah                   ; clear top byte
 25505                                          push    ax                      ; save for return
 25506                                  
 25507                                          mov	ax,(ALLOCOPER<<8)|3 ; 5803h
 25508                                  	mov	bx,1
 25509                                  	int	21h			;link in UMBs
 25510                                  
 25511                                  	call	do_install_exec 	;install it.
 25512                                  
 25513                                          mov     ax,(ALLOCOPER<<8)|3
 25514                                          pop     bx                      ; recover original link state
 25515                                          int     21h
 25516                                          pop     bx                      ; recover original alloc strategy
 25517                                          mov     ax,(ALLOCOPER<<8)|1
 25518                                          int     21h
 25519                                  
 25520                                  	jmp	coff			;to handle next install= command.
 25521                                  
 25522                                  %endif
 25523                                  
 25524                                  multi_pass_filter:
 25525 0000203D 80FC59                          cmp     ah,CONFIG_COMMENT ; 'Y' ; comment?
 25526 00002040 740A                    	je	short multi_pass_adjust
 25527 00002042 80FC5A                          cmp     ah,CONFIG_UNKNOWN ; 'Z' ; bad command?
 25528 00002045 7405                    	je	short multi_pass_adjust
 25529 00002047 80FC30                          cmp     ah,CONFIG_REM  ; '0' 	; rem?
 25530 0000204A 7508                    	jne	short multi_pass_coff 	; ignore the rest of the commands.
 25531                                  
 25532                                  multi_pass_adjust:			; these commands need to
 25533 0000204C FF0E[D603]              	dec	word [chrptr]		;  adjust chrptr,count
 25534 00002050 FF06[D203]              	inc	word [count]		;  for newline proc.
 25535                                  
 25536                                  multi_pass_coff:
 25537                                  	; 11/12/2022
 25538 00002054 EBAA                    	jmp	short coff		; to handle next install= commands.
 25539                                  
 25540                                  ;------------------------------------------------------------------------------
 25541                                  ; buffer command
 25542                                  ;------------------------------------------------------------------------------
 25543                                  
 25544                                  ;******************************************************************************
 25545                                  ;									      *
 25546                                  ; function: parse the parameters of buffers= command.			      *
 25547                                  ;									      *
 25548                                  ; input :								      *
 25549                                  ;	es:si -> parameters in command line.				      *
 25550                                  ; output:								      *
 25551                                  ;	buffers set							      *
 25552                                  ;	buffer_slash_x	flag set if /x option chosen.			      *
 25553                                  ;	h_buffers set if secondary buffer cache specified.		      *
 25554                                  ;									      *
 25555                                  ; subroutines to be called:						      *
 25556                                  ;	sysinit_parse							      *
 25557                                  ; logic:								      *
 25558                                  ; {									      *
 25559                                  ;	set di points to buf_parms;  /*parse control definition*/	      *
 25560                                  ;	set dx,cx to 0; 						      *
 25561                                  ;	reset buffer_slash_x;						      *
 25562                                  ;	while (end of command line)					      *
 25563                                  ;	{ sysinit_parse;						      *
 25564                                  ;	  if (no error) then						      *
 25565                                  ;	       if (result_val._$P_synonym_ptr == slash_e) then /*not a switch *
 25566                                  ;		    buffer_slash_x = 1					      *
 25567                                  ;	       else if	 (cx == 1) then 	    /* first positional */    *
 25568                                  ;			  buffers = result_val._$P_picked_val;		      *
 25569                                  ;		    else  h_buffers = result_val._$P_picked_val; 	      *
 25570                                  ;	  else	{show error message;error exit} 			      *
 25571                                  ;	};								      *
 25572                                  ;	if (buffer_slash_x is off & buffers > 99) then show_error;	      *
 25573                                  ; };									      *
 25574                                  ;									      *
 25575                                  ;******************************************************************************
 25576                                  
 25577                                  	; 27/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 25578                                  	; (SYSINIT:229Ch)
 25579                                  tryb:
 25580 00002056 80FC42                          cmp     ah,CONFIG_BUFFERS ; 'B'
 25581 00002059 7557                    	jne	short tryc
 25582                                  
 25583                                  ; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 25584                                  ;;ifdef	MULTI_CONFIG
 25585                                  ;       call    query_user              ; query the user if config_cmd
 25586                                  ;       jc      short tryc		; has the CONFIG_OPTION_QUERY bit set
 25587                                  ;;endif
 25588                                  
 25589                                  	; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 25590                                  	; 18/12/2022
 25591 0000205B 31C9                    	xor	cx,cx
 25592                                  	;mov	byte [p_buffer_slash_x],0 ; 31/03/2019
 25593 0000205D 880E[4E1D]              	mov	[p_buffer_slash_x],cl ; 0
 25594                                  
 25595 00002061 BF[071D]                	mov	di,buf_parms
 25596                                  	;xor	cx,cx	; 18/12/2022
 25597                                  	; 04/01/2023
 25598                                  	;mov	dx,cx
 25599                                  do7:
 25600 00002064 E87D06                  	call	sysinit_parse
 25601 00002067 7303                    	jnc	short if7		; parse error,
 25602                                  	; 04/01/2023
 25603                                  	;call	badparm_p		;  and show messages and end the search loop.
 25604                                  	;;jmp	short sr7
 25605                                  	; 31/12/2022
 25606                                  ;sr7:
 25607                                  	;jmp	coff
 25608                                  	; 04/01/2023
 25609 00002069 E9F605                  	jmp	badparm_p_coff
 25610                                  if7:
 25611 0000206C 83F8FF                  	cmp	ax,_$P_RC_EOL ; 0FFFFh	; end of line?
 25612 0000206F 741A                    	je	short en7		;  then jmp to $endloop for semantic check
 25613                                  	;cmp	word [result_val_swoff],switch_x
 25614 00002071 813E[521D][471D]        	cmp	word [result_val+_$P_Result_Blk.SYNONYM_Ptr],switch_x
 25615                                  	;jne	short if11
 25616                                  	; 31/12/2022
 25617 00002077 74EB                    	je	short do7 ;je short en11
 25618                                  
 25619                                  ;	mov	byte [p_buffer_slash_x],1 ; set the flag M016
 25620                                  	;jmp	short en11 ; 31/12/2022
 25621                                  if11:
 25622                                  	;mov	ax,[rv_dword]
 25623 00002079 A1[541D]                	mov	ax,[result_val+_$P_Result_Blk.Picked_Val]
 25624 0000207C 83F901                  	cmp	cx,1
 25625 0000207F 7505                    	jne	short if13
 25626                                  
 25627 00002081 A3[4A1D]                	mov	[p_buffers],ax
 25628                                  	;jmp	short en11
 25629                                  	; 31/12/2022
 25630 00002084 EBDE                    	jmp	short do7
 25631                                  if13:
 25632 00002086 A3[4C1D]                	mov	[p_h_buffers],ax
 25633                                  en11:
 25634 00002089 EBD9                    	jmp	short do7
 25635                                  en7:
 25636 0000208B 833E[4A1D]63            	cmp	word [p_buffers],99
 25637 00002090 760B                    	jbe	short if18
 25638                                  
 25639                                  ;	cmp	byte [p_buffer_slash_x],0 ; M016
 25640                                  ;	jne	short if18
 25641                                  
 25642 00002092 E87E06                  	call	badparm_p
 25643 00002095 C706[4C1D]0000          	mov	word [p_h_buffers],0
 25644 0000209B EB12                    	jmp	short sr7
 25645                                  if18:
 25646 0000209D A1[4A1D]                	mov	ax,[p_buffers]	; we don't have any problem.
 25647 000020A0 A3[9702]                	mov	[buffers],ax	; now,let's set it really.
 25648                                  
 25649 000020A3 A1[4C1D]                	mov	ax,[p_h_buffers]
 25650 000020A6 A3[9902]                	mov	[h_buffers],ax
 25651                                  
 25652                                  ;	mov	al,[p_buffer_slash_x]	; M016
 25653                                  ;	mov	[buffer_slash_x],al
 25654                                  
 25655 000020A9 A1[2B03]                	mov	ax,[linecount]
 25656 000020AC A3[3503]                	mov	[buffer_linenum],ax ; save the line number for the future use.
 25657                                  	; 31/12/2022
 25658                                  	;jmp	short sr7
 25659                                  	; 04/01/2023
 25660                                  sr7:
 25661 000020AF E94EFF                  	jmp	coff
 25662                                  
 25663                                  ;------------------------------------------------------------------------------
 25664                                  ; break command
 25665                                  ;------------------------------------------------------------------------------
 25666                                  
 25667                                  ;****************************************************************************
 25668                                  ;									    *
 25669                                  ; function: parse the parameters of break = command.			    *
 25670                                  ;									    *
 25671                                  ; input :								    *
 25672                                  ;	es:si -> parameters in command line.				    *
 25673                                  ; output:								    *
 25674                                  ;	turn the control-c check on or off.				    *
 25675                                  ;									    *
 25676                                  ; subroutines to be called:						    *
 25677                                  ;	sysinit_parse							    *
 25678                                  ; logic:								    *
 25679                                  ; {									    *
 25680                                  ;	set di to brk_parms;						    *
 25681                                  ;	set dx,cx to 0; 						    *
 25682                                  ;	while (end of command line)					    *
 25683                                  ;	{ sysinit_parse;						    *
 25684                                  ;	  if (no error) then						    *
 25685                                  ;	       if (result_val._$P_item_tag == 1) then	  /*on		 */ *
 25686                                  ;		   set p_ctrl_break,on;					    *
 25687                                  ;	       else					  /*off 	 */ *
 25688                                  ;		   set p_ctrl_break,off;				    *
 25689                                  ;	  else {show message;error_exit};				    *
 25690                                  ;	};								    *
 25691                                  ;	if (no error) then						    *
 25692                                  ;	   dos function call to set ctrl_break check according to	    *
 25693                                  ; };									    *
 25694                                  ;									    *
 25695                                  ;****************************************************************************
 25696                                  
 25697                                  	; 27/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 25698                                  	; (SYSINIT:22FFh)
 25699                                  tryc:
 25700 000020B2 80FC43                          cmp     ah,CONFIG_BREAK ; 'C'
 25701 000020B5 7534                    	jne	short trym
 25702                                  
 25703                                  ; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 25704                                  ;;ifdef MULTI_CONFIG
 25705                                  ;       call    query_user              ; query the user if config_cmd
 25706                                  ;       jc	short trym		; has the CONFIG_OPTION_QUERY bit set
 25707                                  ;;endif
 25708 000020B7 BF[581D]                	mov	di,brk_parms
 25709 000020BA 31C9                    	xor	cx,cx
 25710                                  	; 04/01/2023
 25711                                  	;mov	dx,cx
 25712                                  do22:
 25713 000020BC E82506                  	call	sysinit_parse
 25714 000020BF 7303                    	jnc	short if22		; parse error
 25715                                  	;call	badparm_p		;  show message and end the search loop.
 25716                                  	;;jmp	short sr22
 25717                                  	; 31/12/2022
 25718                                  ;sr22:
 25719                                  	;jmp	coff
 25720                                  	; 04/01/2023
 25721 000020C1 E99E05                  	jmp	badparm_p_coff
 25722                                  if22:
 25723 000020C4 83F8FF                  	cmp	ax,_$P_RC_EOL		; end of line?
 25724 000020C7 7415                    	je	short en22		; then end the $endloop
 25725                                  
 25726                                  	;cmp	byte [result_val_itag],1
 25727 000020C9 803E[511D]01            	cmp	byte [result_val+_$P_Result_Blk.Item_Tag],1
 25728 000020CE 7507                    	jne	short if26
 25729                                  
 25730 000020D0 C606[7D1D]01            	mov	byte [p_ctrl_break],1	; turn it on
 25731                                  	;jmp	short en26
 25732                                  	; 31/12/2022
 25733 000020D5 EBE5                    	jmp	short do22
 25734                                  if26:
 25735 000020D7 C606[7D1D]00            	mov	byte [p_ctrl_break],0	; turn it off
 25736                                  en26:
 25737 000020DC EBDE                    	jmp	short do22		; we actually set the ctrl break
 25738                                  en22:
 25739 000020DE B433                    	mov	ah,SET_CTRL_C_TRAPPING ; if we don't have any parse error.
 25740 000020E0 B001                    	mov	al,1
 25741 000020E2 8A16[7D1D]              	mov	dl,[p_ctrl_break]
 25742 000020E6 CD21                    	int	21h
 25743                                  	; 31/12/2022
 25744                                  	;jmp	short sr22
 25745                                  	; 04/01/2023
 25746                                  sr22:
 25747 000020E8 E915FF                  	jmp	coff
 25748                                  
 25749                                  ;------------------------------------------------------------------------------
 25750                                  ; multitrack command
 25751                                  ;------------------------------------------------------------------------------
 25752                                  
 25753                                  ;******************************************************************************
 25754                                  ;									      *
 25755                                  ; function: parse the parameters of multitrack= command.		      *
 25756                                  ;									      *
 25757                                  ; input :								      *
 25758                                  ;	es:si -> parameters in command line.				      *
 25759                                  ; output:								      *
 25760                                  ;	turn multrk_flag on or off.					      *
 25761                                  ;									      *
 25762                                  ; subroutines to be called:						      *
 25763                                  ;	sysinit_parse							      *
 25764                                  ; logic:								      *
 25765                                  ; {									      *
 25766                                  ;	set di to brk_parms;						      *
 25767                                  ;	set dx,cx to 0; 						      *
 25768                                  ;	while (end of command line)					      *
 25769                                  ;	{ sysinit_parse;						      *
 25770                                  ;	  if (no error) then						      *
 25771                                  ;	       if (result_val._$P_item_tag == 1) then	  /*on		 */   *
 25772                                  ;		   set p_mtrk,on;					      *
 25773                                  ;	       else					  /*off 	 */   *
 25774                                  ;		   set p_mtrk,off;					      *
 25775                                  ;	  else {show message;error_exit};				      *
 25776                                  ;	};								      *
 25777                                  ;	if (no error) then						      *
 25778                                  ;	   dos function call to set multrk_flag according to p_mtrk.	      *
 25779                                  ;									      *
 25780                                  ; };									      *
 25781                                  ;									      *
 25782                                  ;******************************************************************************
 25783                                  
 25784                                  	; 27/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 25785                                  trym:
 25786 000020EB 80FC4D                          cmp     ah,CONFIG_MULTITRACK  ; 'M'
 25787 000020EE 7569                    	jne	short tryu
 25788                                  
 25789                                  ; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 25790                                  ;;ifdef	MULTI_CONFIG
 25791                                  ;       call    query_user      ; query the user if config_cmd
 25792                                  ;       jc      short tryu	; has the CONFIG_OPTION_QUERY bit set
 25793                                  ;;endif
 25794 000020F0 BF[5C1E]                	mov	di,mtrk_parms
 25795 000020F3 31C9                    	xor	cx,cx
 25796                                  	; 04/01/2023
 25797                                  	;mov	dx,cx
 25798                                  do31:
 25799 000020F5 E8EC05                  	call	sysinit_parse
 25800 000020F8 7303                    	jnc	short if31	; parse error
 25801                                  	;call	badparm_p	;  show message and end the search loop.
 25802                                  	;;jmp	short sr31
 25803                                  	; 31/12/2022
 25804                                  ;sr31:
 25805                                  	;jmp	coff
 25806                                  	; 04/01/2023
 25807 000020FA E96505                  	jmp	badparm_p_coff
 25808                                  if31:
 25809 000020FD 83F8FF                  	cmp	ax,_$P_RC_EOL	; end of line?
 25810 00002100 7415                    	je	short en31	; then end the $endloop
 25811                                  
 25812                                  	;cmp	byte [result_val_itag],1
 25813 00002102 803E[511D]01            	cmp	byte [result_val+_$P_Result_Blk.Item_Tag],1
 25814 00002107 7507                    	jne	short if35
 25815                                  
 25816 00002109 C606[701E]01            	mov	byte [p_mtrk],1	; turn it on temporarily.
 25817                                  	;jmp	short en35
 25818                                  	; 31/12/2022
 25819 0000210E EBE5                    	jmp	short do31
 25820                                  if35:
 25821 00002110 C606[701E]00            	mov	byte [p_mtrk],0	; turn it off temporarily.
 25822                                  en35:
 25823 00002115 EBDE                    	jmp	short do31	; we actually set the multrk_flag here
 25824                                  en31:
 25825 00002117 1E                      	push	ds
 25826                                  	;;mov	ax,Bios_Data ; 70h
 25827                                  	;mov	ax,KERNEL_SEGMENT ; 70h
 25828                                  	; 21/10/2022
 25829 00002118 B87000                  	mov	ax,DOSBIODATASEG ; 0070h
 25830 0000211B 8ED8                    	mov	ds,ax
 25831                                  
 25832 0000211D 2E803E[701E]00          	cmp	byte [cs:p_mtrk],0
 25833 00002123 7508                    	jne	short if39
 25834                                  
 25835 00002125 C706[2F05]0100          	mov	word [multrk_flag],multrk_off2	; 0001h
 25836 0000212B EB06                    	jmp	short en39
 25837                                  if39:
 25838 0000212D C706[2F05]8000          	mov	word [multrk_flag],multrk_on	; 0080h
 25839                                  en39:
 25840 00002133 1F                      	pop	ds
 25841                                  	; 31/12/2022
 25842                                  	;jmp	short sr31
 25843                                  	; 04/01/2023
 25844                                  sr31:
 25845 00002134 E9C9FE                  	jmp	coff
 25846                                  
 25847                                  ;----------------------------------------------------------------------------
 25848                                  ; DOS=HIGH/LOW command
 25849                                  ;----------------------------------------------------------------------------
 25850                                  
 25851                                  	; 27/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 25852                                  multi_try_doshi:
 25853 00002137 80FC48                          cmp     ah,CONFIG_DOS ; 'H'
 25854 0000213A 7403                    	je	short it_is_h
 25855                                  skip_it:
 25856 0000213C E9FEFE                  	jmp	multi_pass_filter
 25857                                  it_is_h:				; M003 - removed initing DevUMB
 25858                                  					;	 & runhigh
 25859                                  ; 27/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 25860                                  ;;ifdef	MULTI_CONFIG
 25861                                  ;       call    query_user              ; query the user if config_cmd
 25862                                  ;       jc      short skip_it		; has the CONFIG_OPTION_QUERY bit set
 25863                                  ;;endif
 25864 0000213F BF[A71E]                	mov	di,dos_parms
 25865 00002142 31C9                    	xor	cx,cx
 25866                                  	; 04/01/2023
 25867                                  	;mov	dx,cx
 25868                                  h_do_parse:
 25869 00002144 E89D05                  	call	sysinit_parse
 25870 00002147 7303                    	jnc	short h_parse_ok	; parse error
 25871                                  h_badparm:
 25872                                  	; 04/01/2023
 25873                                  	;call	badparm_p		; show message and end the search loop.
 25874                                  	;;jmp	short h_end
 25875                                  	; 11/12/2022
 25876                                  ;h_end:
 25877                                  	;jmp	coff
 25878                                  	; 04/01/2023
 25879 00002149 E91605                  	jmp	badparm_p_coff	
 25880                                  h_parse_ok:
 25881 0000214C 83F8FF                  	cmp	ax,_$P_RC_EOL		; end of line?
 25882 0000214F 7405                    	je	short h_end		; then end the $endloop
 25883 00002151 E82D06                  	call	ProcDOS
 25884 00002154 EBEE                    	jmp	short h_do_parse
 25885                                  	; 11/12/2022
 25886                                  	; 04/01/2023
 25887                                  h_end:
 25888 00002156 E9A7FE                  	jmp	coff
 25889                                  
 25890                                  ;-----------------------------------------------------------------------------
 25891                                  ; devicehigh command
 25892                                  ;-----------------------------------------------------------------------------
 25893                                  
 25894                                  	; 28/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 25895                                  tryu:
 25896 00002159 80FC55                          cmp     ah,CONFIG_DEVICEHIGH ; 'U'
 25897 0000215C 7539                    	jne	short tryd
 25898                                  
 25899                                  ; 28/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 25900                                  ;;ifdef	MULTI_CONFIG
 25901                                  ;       call    query_user              ; query the user if config_cmd
 25902                                  ;       jc	short tryd		; has the CONFIG_OPTION_QUERY bit set
 25903                                  ;;endif
 25904                                  
 25905                                  ; 28/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 25906                                  ;	call	InitVar
 25907                                  ;	call	ParseSize		; process the size= option
 25908                                  ;	;jnc	short tryu_0
 25909                                  	
 25910                                  	;jc	short tryu_1 ; 31/03/2019 - Retro DOS v4.0
 25911                                  
 25912                                  	; 28/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 25913                                  	;mov	[cs:badparm_off], si	; stash it there in case of an error
 25914                                  	;mov	[cs:badparm_seg], es
 25915                                  	; 11/12/2022
 25916                                  	; ds = cs
 25917 0000215E 8936[3714]              	mov	[badparm_off], si
 25918 00002162 8C06[3914]              	mov	[badparm_seg], es
 25919                                  	;
 25920 00002166 E88A08                  	call	ParseSize
 25921 00002169 7303                    	jnc	short tryu_2	; 28/10/2022
 25922                                  
 25923                                  	;call	badparm_p
 25924                                  	;jmp	coff
 25925                                  	; 04/01/2023
 25926 0000216B E9F404                  	jmp	badparm_p_coff
 25927                                  
 25928                                  ; 28/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 25929                                  ;tryu_0:
 25930                                  ;	mov	ax,[cs:DevSizeOption]
 25931                                  ;	or	ax,ax
 25932                                  ;	jnz	short tryu_2
 25933                                  ;
 25934                                  ;	call	ParseVar
 25935                                  ;	jnc	short tryu_2
 25936                                  ;tryu_1:
 25937                                  ;	mov	[cs:badparm_off], si	; If ParseVar up there failed, then
 25938                                  ;	mov	[cs:badparm_seg], es	; ES:SI points to its problem area...
 25939                                  ;	call	badparm_p		; so all we have to do is choke and
 25940                                  ;	jmp	coff			; die, rather verbosely.
 25941                                  
 25942                                  tryu_2:	
 25943 0000216E 56                      	push	si
 25944 0000216F 06                      	push	es
 25945                                  tryu_3:
 25946 00002170 268A04                  	mov	al,[es:si]
 25947 00002173 3C0D                    	cmp	al,cr
 25948 00002175 740C                    	je	short tryu_4
 25949 00002177 3C0A                    	cmp	al,lf
 25950 00002179 7408                    	je	short tryu_4
 25951 0000217B E8070F                  	call	delim
 25952 0000217E 7403                    	jz	short tryu_4
 25953 00002180 46                      	inc	si
 25954 00002181 EBED                    	jmp	short tryu_3
 25955                                  tryu_4:	
 25956                                  	; 11/12/2022
 25957                                  	; ds = cs
 25958 00002183 A2[1C1F]                	mov	[DevSavedDelim],al
 25959                                  	;mov	[cs:DevSavedDelim],al	; Save the delimiter before replacing
 25960                                  					;  it with null
 25961                                  	; 18/12/2022
 25962 00002186 29DB                    	sub	bx,bx
 25963 00002188 26881C                  	mov	[es:si],bl ; 0
 25964                                   	;mov	byte [es:si],0
 25965                                  
 25966 0000218B 07                      	pop	es
 25967 0000218C 5E                      	pop	si
 25968                                  
 25969                                  ;------------------------------------------------------------------------------
 25970                                  ; BEGIN PATCH TO CHECK FOR NON-EXISTANT UMBs   -- t-richj 7-21-92
 25971                                  ;------------------------------------------------------------------------------
 25972                                  
 25973                                  ; 28/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 25974                                  ;
 25975                                  ;	call	UmbTest			; See if UMBs are around...
 25976                                  ;	jnc	short NrmTst		; ...yep. So do that normal thang.
 25977                                  ;
 25978                                  ;	mov	byte [cs:DeviceHi],0	; ...nope... so load low.
 25979                                  ;	jmp	short LoadDevice
 25980                                  
 25981                                  ;------------------------------------------------------------------------------
 25982                                  ; END PATCH TO CHECK FOR NON-EXISTANT UMBs   -- t-richj 7-21-92
 25983                                  ;------------------------------------------------------------------------------
 25984                                  
 25985                                  NrmTst:
 25986                                  	; 11/12/2022
 25987                                  	; ds = cs
 25988                                  	;;mov	byte [cs:DeviceHi],0
 25989                                  	;mov	byte [DeviceHi],0
 25990                                  	; 18/12/2022
 25991                                  	; bx = 0
 25992 0000218D 381E[F81E]              	cmp	[DevUMB],bl ; 0
 25993                                  	;cmp	byte [DevUMB],0
 25994                                  	;;cmp	byte [cs:DevUMB],0	; do we support UMBs
 25995 00002191 7417                    	je	short LoadDevice	; no, we don't
 25996                                  	;mov	byte [cs:DeviceHi],1
 25997                                  	; 11/12/2022
 25998                                  	;mov	byte [DeviceHi],1
 25999                                  	; 18/12/2022
 26000 00002193 FEC3                    	inc	bl ; mov bl,1 ; (*)
 26001                                  	; 11/12/2022
 26002                                  	;jmp	short LoadDevice2	; 11/12/2022
 26003 00002195 EB13                    	jmp	short LoadDevice
 26004                                  
 26005                                  ;------------------------------------------------------------------------------
 26006                                  ; device command
 26007                                  ;------------------------------------------------------------------------------
 26008                                  
 26009                                  	; 28/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 26010                                  	; (SYSINIT:2401h)
 26011                                  tryd:
 26012                                  	; 11/12/2022
 26013 00002197 31DB                    	xor 	bx, bx
 26014                                  	;
 26015 00002199 80FC44                          cmp     ah,CONFIG_DEVICE ;  'D'
 26016 0000219C 7403                    	je	short gotd
 26017                                  skip_it2:
 26018 0000219E E93502                  	jmp	tryq
 26019                                  gotd:
 26020                                  
 26021                                  ; 28/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 26022                                  ;;ifdef	MULTI_CONFIG
 26023                                  ;       call    query_user              ; query the user if config_cmd
 26024                                  ;       jc	short skip_it2		; has the CONFIG_OPTION_QUERY bit set
 26025                                  ;;endif
 26026                                  	; 11/12/2022
 26027                                  	; ds = cs
 26028                                  	;mov	byte [DeviceHi],0
 26029                                  	;mov	word [DevSizeOption],0
 26030 000021A1 891E[081F]              	mov	[DevSizeOption],bx ; 0
 26031 000021A5 C606[1C1F]20            	mov	byte [DevSavedDelim],' '
 26032                                  	;mov	byte [cs:DeviceHi],0	; not to be loaded in UMB ;M007
 26033                                  	;mov	word [cs:DevSizeOption],0
 26034                                  	;mov	byte [cs:DevSavedDelim],' ' ; In case of DEVICE= the null has to
 26035                                  					;  be replaced with a ' '
 26036                                  LoadDevice:                             ; device= or devicehigh= command.
 26037                                  	; 11/12/2022
 26038                                  	;mov	byte [DeviceHi],0
 26039 000021AA 881E[071F]              	mov	byte [DeviceHi],bl	; 0 or 1 (*)
 26040                                  LoadDevice2:
 26041                                  	; 28/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)        
 26042                                  	;
 26043                                  	;push    cs
 26044                                          ;pop     ds
 26045                                  	;
 26046                                  	;mov	[bpb_addr],si		; pass the command line to the dvice
 26047                                  	;mov	[bpb_addr+2],es
 26048                                  	;
 26049                                  	;mov	[DevCmdLine],si		; save it for ourself
 26050                                  	;mov	[DevCmdLine+2],es
 26051                                  	;
 26052                                  	;mov	byte [driver_units],0	; clear total block units for driver	
 26053                                  
 26054                                  	; 11/12/2022
 26055                                  	; ds = cs
 26056                                  	;mov	bx,cs
 26057                                  	;mov	ds,bx
 26058                                  
 26059                                  	;mov	[cs:bpb_addr],si	; pass the command line to the dvice
 26060 000021AE 8936[F803]              	mov	[bpb_addr],si
 26061                                  	;mov	[cs:bpb_addr+2],es
 26062 000021B2 8C06[FA03]              	mov	[bpb_addr+2],es
 26063                                  
 26064                                  	;mov	[cs:DevCmdLine],si	; save it for ourself
 26065 000021B6 8936[181F]              	mov	[DevCmdLine],si
 26066                                  	;mov	[cs:DevCmdLine+2],es	
 26067 000021BA 8C06[1A1F]              	mov	[DevCmdLine+2],es	
 26068                                  
 26069 000021BE E8070F                  	call	round
 26070                                  	
 26071 000021C1 E83F07                  	call	SizeDevice
 26072 000021C4 7215                    	jc	short BadFile
 26073                                  
 26074                                  	; 11/12/2022
 26075                                  	; ds = cs
 26076                                  
 26077                                  ; - Begin DeviceHigh primary logic changes ------------------------------------
 26078                                  
 26079                                  ; 28/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 26080                                  ;
 26081                                  ;	mov	byte [ConvLoad],1	; Doesn't matter if DeviceHi==0
 26082                                  ;
 26083                                  ;	mov	al,[DeviceHi]		; If not using upper memory,
 26084                                  ;	or	byte [DeviceHi],0	; Skip all this and go on to
 26085                                  ;	jz	short DevConvLoad	; the actual load.
 26086                                  ;
 26087                                  ;	;call	GetLoadUMB		; Returns first UMB spec'ed in AX
 26088                                  ;	mov	al,[UmbLoad]	; 19/04/2019 - Retro DOS v4.0
 26089                                  ;
 26090                                  ;	cmp	al,-1			; If umb0 not specified, it's old style
 26091                                  ;	jz	short DevConvLoad	; so load high even if SIZE= is smaller
 26092                                  ;
 26093                                  ;	dec	byte [ConvLoad] ; 0 	; They specified /L, so use new loader
 26094                                  ;
 26095                                  ;	call	GetLoadSize		; Returns size of first UMB specified
 26096                                  ;	or	ax,ax
 26097                                  ;	jz	short tryd_1		; If size1 not specified, nada to do:
 26098                                  ;
 26099                                  ;	cmp	ax,[DevSize]		; /L:...,Size < DevSize?
 26100                                  ;	jge	short DevConvLoad
 26101                                  ;
 26102                                  ;tryd_1: mov	ax,[DevSize]		; Size < DevSize, so write DevSize as
 26103                                  ;	call	StoLoadSize		; minsize for load UMB.
 26104                                  
 26105                                  ; - End DeviceHigh primary logic changes --------------------------------------
 26106                                  
 26107                                  DevConvLoad:
 26108                                  	; 28/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 26109 000021C6 E84F06                  	call	InitDevLoad
 26110                                  
 26111                                  	; 11/12/2022
 26112                                  	; ds = cs
 26113 000021C9 A1[EC1E]                	mov	ax,[DevLoadAddr]
 26114 000021CC 0306[EA1E]              	add	ax,[DevSize]
 26115 000021D0 7206                    	jc	short NoMem
 26116 000021D2 3906[EE1E]              	cmp	[DevLoadEnd],ax
 26117 000021D6 7312                    	jae	short LoadDev
 26118                                  	
 26119                                  	; 11/12/2022
 26120                                  	;mov	ax,[cs:DevLoadAddr]
 26121                                  	;add	ax,[cs:DevSize]
 26122                                  	;jc	short NoMem
 26123                                  	;cmp	[cs:DevLoadEnd],ax
 26124                                  	;jae	short LoadDev
 26125                                  NoMem:
 26126                                  	; 11/12/2022
 26127                                  	; ds = cs
 26128                                  	;jmp	mem_err
 26129 000021D8 E9300F                  	jmp	mem_err2
 26130                                  
 26131                                  BadFile:
 26132                                  	;28/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 26133                                  	;call	RetFromUM		; Does nothing if didn't call HideUMBs
 26134                                  	;cmp    byte [es:si],' '
 26135                                          ;jae	short tryd_2
 26136 000021DB 26803C0D                	cmp	byte [es:si],0Dh	; cr
 26137 000021DF 7503                            jne	short tryd_2
 26138 000021E1 E92305                  	jmp	badop
 26139                                  tryd_2:
 26140 000021E4 E87811                  	call	badload
 26141 000021E7 E916FE                  	jmp	coff
 26142                                  
 26143                                  LoadDev:
 26144 000021EA 06                      	push	es
 26145 000021EB 1F                      	pop	ds
 26146                                  
 26147 000021EC 89F2                    	mov	dx,si			;ds:dx points to file name
 26148 000021EE E86307                  	call	ExecDev			; load device driver using exec call
 26149                                  badldreset:
 26150 000021F1 1E                      	push	ds
 26151 000021F2 07                      	pop	es			;es:si back to config.sys
 26152 000021F3 0E                      	push	cs
 26153 000021F4 1F                      	pop	ds			;ds back to sysinit
 26154 000021F5 72E4                    	jc	short BadFile
 26155                                  goodld:
 26156                                  	; 11/12/2022
 26157                                  	; ds = cs
 26158                                  
 26159 000021F7 06                      	push	es
 26160 000021F8 56                      	push	si
 26161 000021F9 E87507                  	call	RemoveNull
 26162 000021FC 06                      	push	es
 26163 000021FD 56                      	push	si
 26164                                  
 26165 000021FE 0E                      	push	cs
 26166 000021FF 07                      	pop	es
 26167                                  
 26168 00002200 1E                      	push	ds
 26169 00002201 56                      	push	si
 26170                                  
 26171                                  	;lds	si,[cs:DevEntry]	; peeks the header attribute
 26172                                  	; 31/12/2022
 26173                                  	; ds = cs
 26174 00002202 C536[F01E]              	lds	si,[DevEntry]
 26175                                  	
 26176                                  	;test	word [si+4],8000h
 26177                                  	; 11/12/2022
 26178 00002206 F6440580                	test	byte [si+SYSDEV.ATT+1],DEVTYP>>8
 26179                                  	;test	word [si+SYSDEV.ATT],DEVTYP ; block device driver?
 26180 0000220A 7511                    	jnz	short got_device_com_cont   ; no.
 26181                                  
 26182 0000220C 2EC536[6B02]            	lds	si,[cs:DOSINFO]		; ds:si -> sys_var
 26183                                  	;cmp	byte [si+32],26
 26184 00002211 807C201A                	cmp	byte [si+SYSI_NUMIO],26	; no more than 26 drive number
 26185 00002215 7206                    	jb	short got_device_com_cont
 26186                                  
 26187 00002217 5E                      	pop	si
 26188 00002218 1F                      	pop	ds
 26189                                  
 26190 00002219 5E                      	pop	si			; clear the stack
 26191 0000221A 07                      	pop	es
 26192                                  
 26193                                  	; 28/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 26194                                  	;call	RetFromUM		; Do this before we leave
 26195                                  
 26196 0000221B EB57                    	jmp	short badnumblock
 26197                                  
 26198                                  got_device_com_cont:
 26199 0000221D 5E                      	pop	si
 26200 0000221E 1F                      	pop	ds
 26201                                  
 26202                                  	; 11/12/2022
 26203                                  	; ds = cs
 26204                                  
 26205 0000221F E88205                  	call	LieInt12Mem
 26206 00002222 E8E105                  	call	UpdatePDB		; update the PSP:2 value M020
 26207                                  
 26208                                  	; 11/12/2022
 26209                                  	; ds = cs
 26210 00002225 803E[3314]00            	cmp	byte [multdeviceflag],0
 26211                                  	;cmp	byte [cs:multdeviceflag],0 ; Pass limit only for the 1st device
 26212                                  					;  driver in the file ; M027
 26213 0000222A 750E                    	jne	short skip_pass_limit	;		      ; M027
 26214                                  
 26215                                  	; 11/12/2022
 26216                                  	; ds = cs
 26217                                  	;mov	word [cs:break_addr],0	; pass the limit to the DD
 26218                                  	;mov	bx,[cs:DevLoadEnd]
 26219                                  	;mov	[cs:break_addr+2],bx
 26220                                  
 26221 0000222C C706[F403]0000          	mov	word [break_addr],0
 26222 00002232 8B1E[EE1E]              	mov	bx,[DevLoadEnd]
 26223 00002236 891E[F603]              	mov	[break_addr+2],bx
 26224                                  
 26225                                  skip_pass_limit:
 26226                                  ;	Note: sysi_numio (in DOS DATA) currently reflects the REAL
 26227                                  ;	number of installed devices (including DblSpace drives) where
 26228                                  ;	"drivenumber" is the number that the next block device will
 26229                                  ;	be assigned to. Because some naughty device drivers (like
 26230                                  ;	interlnk) look at the internal DOS variable instead of the
 26231                                  ;	value we pass it, we'll temporarily stick our value into
 26232                                  ;	DOS DATA while we're initializing the device drivers.
 26233                                  ;
 26234                                  ;	Note that this will make it impossible for this device
 26235                                  ;	driver to access the DblSpace drive letters, whether
 26236                                  ;	they are swapped-hosts or unswapped compressed drives,
 26237                                  ;	during its initialization phase.
 26238                                  
 26239                                  	; 29/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 26240                                  	;push	ds
 26241                                  	;lds	bx,[cs:DOSINFO]		; ds:bx -> sys_var
 26242                                  	;
 26243                                  	;mov	al,[cs:drivenumber]	; temporarily use this next drv value
 26244                                  	;mov	[cs:devdrivenum],al	; pass drive number in packet to driver
 26245                                  	;mov	ah,al
 26246                                  	;
 26247                                  	;xchg	ax,[bx+SYSI_NUMIO]	; swap with existing values
 26248                                  	;pop	ds
 26249                                  	;
 26250                                  	;push	ax			; save real sysi_numio/ncds in ax
 26251                                  
 26252                                  	; 29/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 26253                                  	; (SYSINIT:24B9h)
 26254                                  
 26255 0000223A BB0600                  	mov	bx,SYSDEV.STRAT ; 6
 26256 0000223D E8D40E                  	call	calldev 		; calldev (sdevstrat);
 26257 00002240 BB0800                  	mov	bx,SYSDEV.INT ; 8
 26258 00002243 E8CE0E                  	call	calldev 		; calldev (sdevint);
 26259                                  
 26260                                  	; 11/12/2022
 26261                                  	; ds <> cs
 26262                                  
 26263                                  	; 29/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 26264                                  	;pop	ax			; get real sysi_numio value
 26265                                  	;push	ds
 26266                                  	;lds	bx,[cs:DOSINFO]		; ds:bx -> sys_var
 26267                                  	;mov	[bx+SYSI_NUMIO],ax	; swap with existing values
 26268                                  	;pop	ds
 26269                                  
 26270                                  	; 11/12/2022
 26271 00002246 0E                      	push	cs
 26272 00002247 1F                      	pop	ds
 26273                                  
 26274 00002248 E88905                  	call	TrueInt12Mem
 26275                                  
 26276                                  	; 11/12/2022
 26277                                  	; ds = cs
 26278                                  	;mov	ax,[cs:break_addr]	; move break addr from the req packet
 26279                                  	;mov	[cs:DevBrkAddr],ax
 26280                                  	;mov	ax,[cs:break_addr+2]
 26281                                  	;mov	[cs:DevBrkAddr+2],ax
 26282 0000224B A1[F403]                	mov	ax,[break_addr]	
 26283 0000224E A3[F41E]                	mov	[DevBrkAddr],ax
 26284 00002251 A1[F603]                	mov	ax,[break_addr+2]
 26285 00002254 A3[F61E]                	mov	[DevBrkAddr+2],ax
 26286                                  
 26287                                  	; 29/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 26288                                  	;call	RetFromUM		; There we go... all done.
 26289                                  
 26290                                  	; 11/12/2022
 26291 00002257 803E[F81E]00            	cmp	byte [DevUMB],0	
 26292                                  	;cmp	byte [cs:DevUMB],0
 26293 0000225C 7403                    	je	short tryd_3
 26294 0000225E E83608                  	call	AllocUMB
 26295                                  	; 31/12/2022
 26296                                  	; ds= cs
 26297                                  tryd_3:
 26298                                  
 26299                                  ;ifndef ROMDOS
 26300                                  ;------ If we are waiting to be moved into hma lets try it now !!!
 26301                                  
 26302                                  	; 11/12/2022
 26303                                  	; ds = cs
 26304                                  	
 26305                                  	;cmp	byte [cs:runhigh],0FFh
 26306 00002261 803E[6A02]FF            	cmp	byte [runhigh],0FFh ; 11/12/2022
 26307 00002266 7503                    	jne	short tryd_4
 26308                                  	
 26309                                  	; 11/12/2022
 26310                                  	; ds = cs
 26311 00002268 E872E6                  	call	TryToMovDOSHi		; move DOS into HMA if reqd
 26312                                  tryd_4:
 26313                                  ;endif ; ROMDOS
 26314                                  
 26315 0000226B 5E                      	pop	si
 26316 0000226C 1F                      	pop	ds
 26317 0000226D C60400                  	mov	byte [si],0		; *p = 0;
 26318                                  
 26319 00002270 0E                      	push	cs
 26320 00002271 1F                      	pop	ds
 26321                                  
 26322 00002272 EB1F                    	jmp	short was_device_com
 26323                                  
 26324                                  ;----------------------------------------------------------------------------
 26325                                  
 26326                                  ;02/04/2019 - Retro DOS v4.0
 26327                                  
 26328                                  badnumblock:
 26329 00002274 0E                      	push	cs
 26330 00002275 1F                      	pop	ds
 26331 00002276 BA[5838]                	mov	dx,badblock
 26332 00002279 E80B11                  	call	print
 26333                                  
 26334                                  ;------ fall thru -----------------------------------------------------------
 26335                                  
 26336                                  erase_dev_do:				; modified to show message "error in config.sys..."
 26337                                  	
 26338                                  	;call	CheckDoubleSpace ; MSDOS 6.21 IO.SYS SYSINIT:27BBh
 26339                                  	
 26340 0000227C 5E                      	pop	si
 26341 0000227D 07                      	pop	es
 26342                                  
 26343 0000227E 0E                      	push	cs
 26344 0000227F 1F                      	pop	ds
 26345                                  
 26346                                  skip1_resetmemhi:
 26347                                  	; 11/12/2022
 26348                                  	; ds = cs
 26349 00002280 833E[FD03]00            	cmp	word [configmsgflag],0
 26350                                  	;cmp	word [cs:configmsgflag],0
 26351 00002285 7409                    	je	short no_error_line_msg
 26352                                  
 26353 00002287 E8C804                  	call	error_line		; no "error in config.sys" msg for device driver. dcr d493
 26354                                  	; 11/12/2022
 26355                                  	; ds = cs
 26356                                  	;mov	word [cs:configmsgflag],0
 26357 0000228A C706[FD03]0000          	mov	word [configmsgflag],0	; set the default value again.
 26358                                  
 26359                                  no_error_line_msg:
 26360 00002290 E96DFD                  	jmp	coff
 26361                                  
 26362                                  ;----------------------------------------------------------------------------
 26363                                  
 26364                                  was_device_com:
 26365                                  	; 14/12/2022
 26366                                  	; ds = cs
 26367 00002293 A1[F61E]                	mov	ax,[DevBrkAddr+2]
 26368                                  	;mov	ax,[cs:DevBrkAddr+2] ; 13/05/2019
 26369 00002296 3B06[EE1E]              	cmp	ax,[DevLoadEnd]
 26370                                  	;cmp	ax,[cs:DevLoadEnd]
 26371 0000229A 7605                    	jbe	short breakok
 26372                                  
 26373 0000229C 5E                      	pop	si
 26374 0000229D 07                      	pop	es
 26375 0000229E E93AFF                  	jmp	BadFile
 26376                                  
 26377                                  breakok:
 26378                                  	; 14/12/2022
 26379                                  	; ds = cs
 26380 000022A1 C43E[6B02]              	les	di,[DOSINFO] 
 26381 000022A5 C516[F01E]              	lds	dx,[DevEntry]
 26382                                  	;lds	dx,[cs:DevEntry]	;set ds:dx to header
 26383 000022A9 89D6                    	mov	si,dx
 26384                                  
 26385                                  	; 14/11/2022
 26386                                  	;les	di,[cs:DOSINFO] 	;es:di point to dos info
 26387                                  
 26388                                  	; 14/12/2022
 26389                                  	; ds <> cs
 26390                                  	
 26391                                  	;mov	ax,[si+4]
 26392 000022AB 8B4404                  	mov	ax,[si+SYSDEV.ATT]	;get attributes
 26393                                  	; 12/12/2022
 26394 000022AE F6C480                  	test	ah,DEVTYP>>8 ; 80h 
 26395                                  	;test	ax,DEVTYP ; 8000h	;test if block dev
 26396 000022B1 7426                    	jz	short isblock
 26397                                  
 26398                                  ;------ lets deal with character devices
 26399                                  
 26400 000022B3 2E800E[3614]02          	or	byte [cs:setdevmarkflag],for_devmark ; 2
 26401 000022B9 E8E806                  	call	DevSetBreak		;go ahead and alloc mem for device
 26402                                  jc_edd:
 26403 000022BC 72BE                    	jc	short erase_dev_do	;device driver's init routine failed.
 26404                                  
 26405                                  	; 12/12/2022
 26406 000022BE A801                    	test	al,ISCIN
 26407                                  	;test	ax,ISCIN ; 1		;is it a console in?
 26408 000022C0 7408                    	jz	short tryclk
 26409                                  
 26410 000022C2 2689550C                	mov	[es:di+SYSI_CON],dx   ; es:di+12
 26411 000022C6 268C5D0E                	mov	[es:di+SYSI_CON+2],ds ; es:di+14
 26412                                  tryclk: 
 26413                                  	; 12/12/2022
 26414 000022CA A808                    	test	al,ISCLOCK
 26415                                  	;test	ax,ISCLOCK ; 8		;is it a clock device?
 26416 000022CC 7408                    	jz	short golink
 26417                                  
 26418 000022CE 26895508                	mov	[es:di+SYSI_CLOCK],dx	; es:di+8
 26419 000022D2 268C5D0A                	mov	[es:di+SYSI_CLOCK+2],ds ; es:di+10
 26420                                  golink: 
 26421 000022D6 E9B000                  	jmp	linkit
 26422                                  
 26423                                  ;------ deal with block device drivers
 26424                                  
 26425                                  isblock:
 26426 000022D9 2EA0[F303]              	mov	al,[cs:unitcount]	;if no units found,erase the device
 26427 000022DD 08C0                    	or	al,al
 26428 000022DF 749B                    	jz	short erase_dev_do
 26429                                  	;mov	[si+10],al
 26430 000022E1 88440A                  	mov	[si+SYSDEV.NAME],al	; number of units in name field
 26431                                  	; 29/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 26432                                  	;add	[cs:driver_units],al	; keep total for all drivers in file
 26433                                  perdrv:
 26434 000022E4 98                      	cbw				; warning no device > 127 units
 26435 000022E5 89C1                    	mov	cx,ax
 26436 000022E7 88E6                    	mov	dh,ah
 26437                                  	;mov	dl,[es:di+32]
 26438 000022E9 268A5520                	mov	dl,[es:di+SYSI_NUMIO]	;get number of devices
 26439 000022ED 88D4                    	mov	ah,dl
 26440 000022EF 00C4                    	add	ah,al			; check for too many devices
 26441 000022F1 80FC1A                  	cmp	ah,26			; 'A' - 'Z' is 26 devices
 26442 000022F4 7603                    	jbe	short ok_block
 26443 000022F6 E97BFF                  	jmp	badnumblock
 26444                                  
 26445                                  ok_block:
 26446 000022F9 2E800E[3614]02          	or	byte [cs:setdevmarkflag],for_devmark ; 2
 26447 000022FF E8A206                  	call	DevSetBreak		; alloc the device
 26448 00002302 72B8                    	jc	short jc_edd
 26449 00002304 26004520                	add	[es:di+SYSI_NUMIO],al	; update the amount
 26450                                  
 26451 00002308 2E0006[FC03]            	add	[cs:drivenumber],al	; remember amount for next device
 26452 0000230D 2EC51E[F803]            	lds	bx,[cs:bpb_addr]	; point to bpb array
 26453                                  perunit:
 26454 00002312 2EC42E[6B02]            	les	bp,[cs:DOSINFO]
 26455                                  	;les	bp,[es:bp+SYSI_DPB]	; get first dpb
 26456                                  	; 11/12/2022
 26457 00002317 26C46E00                	les	bp,[es:bp]
 26458                                  	; 29/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 26459                                  	;les	bp,[es:bp+0]		; [es:bp+SYSI_DPB]
 26460                                  scandpb:
 26461                                  	;cmp	word [es:bp+25],-1
 26462 0000231B 26837E19FF              	cmp	word [es:bp+DPB.NEXT_DPB],-1
 26463 00002320 7406                    	je	short foundpb
 26464                                  	;les	bp,[es:bp+25]
 26465 00002322 26C46E19                	les	bp,[es:bp+DPB.NEXT_DPB]
 26466 00002326 EBF3                    	jmp	short scandpb
 26467                                  foundpb:
 26468 00002328 2EA1[F41E]              	mov	ax,[cs:DevBrkAddr]
 26469 0000232C 26894619                	mov	[es:bp+DPB.NEXT_DPB],ax
 26470 00002330 2EA1[F61E]              	mov	ax,[cs:DevBrkAddr+2]
 26471 00002334 2689461B                	mov	[es:bp+DPB.NEXT_DPB+2],ax
 26472                                  
 26473 00002338 2EC42E[F41E]            	les	bp,[cs:DevBrkAddr]
 26474 0000233D 2E8306[F41E]21          	add	word [cs:DevBrkAddr],DPBSIZ ; 33
 26475                                  
 26476 00002343 E83D06                  	call	RoundBreakAddr
 26477                                  
 26478 00002346 26C74619FFFF            	mov	word [es:bp+DPB.NEXT_DPB],-1
 26479 0000234C 26C64618FF              	mov	byte [es:bp+DPB.FIRST_ACCESS],-1
 26480                                  
 26481 00002351 8B37                    	mov	si,[bx] 		;ds:si points to bpb
 26482 00002353 43                      	inc	bx
 26483 00002354 43                      	inc	bx			;point to next guy
 26484                                  	;mov	[es:bp+DPB.DRIVE],dx
 26485                                  	; 11/12/2022
 26486 00002355 26895600                	mov	[es:bp],dx ; 13/05/2019
 26487                                  	; 29/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 26488                                  	;mov	[es:bp+0],dx		; [es:bp+DPB.DRIVE]
 26489                                  	
 26490 00002359 B453                    	mov	ah,SETDPB ; 53h		;hidden system call
 26491 0000235B CD21                    	int	21h
 26492                                  			; DOS - 2+ internal - TRANSLATE BIOS PARAMETER BLOCK
 26493                                  			; DS:SI -> BPB (BIOS Parameter Block)
 26494                                  			; ES:BP -> buffer for DOS Drive Parameter Block
 26495                                  
 26496                                  	;mov	ax,[es:bp+2]
 26497 0000235D 268B4602                	mov	ax,[es:bp+DPB.SECTOR_SIZE]
 26498 00002361 06                      	push	es
 26499 00002362 2EC43E[6B02]            	les	di,[cs:DOSINFO] 	;es:di point to dos info
 26500                                  	;cmp	ax,[es:di+10h]
 26501 00002367 263B4510                	cmp	ax,[es:di+SYSI_MAXSEC]
 26502 0000236B 07                      	pop	es
 26503                                  	;jna	short iblk_1
 26504                                  	;jmp	short bad_bpb_size_sector
 26505                                  	; 29/10/2022
 26506 0000236C 775A                    	ja	short bad_bpb_size_sector
 26507                                  iblk_1:
 26508 0000236E 1E                      	push	ds
 26509 0000236F 52                      	push	dx
 26510                                  
 26511 00002370 2EC516[F01E]            	lds	dx,[cs:DevEntry]
 26512                                  	;mov	[es:bp+13h],dx
 26513 00002375 26895613                	mov	[es:bp+DPB.DRIVER_ADDR],dx
 26514                                  	;mov	[es:bp+15h],ds
 26515 00002379 268C5E15                	mov	[es:bp+DPB.DRIVER_ADDR+2],ds
 26516                                  
 26517 0000237D 5A                      	pop	dx
 26518 0000237E 1F                      	pop	ds
 26519                                  
 26520 0000237F 42                      	inc	dx
 26521 00002380 FEC6                    	inc	dh
 26522 00002382 E28E                    	loop	perunit
 26523                                  
 26524 00002384 0E                      	push	cs
 26525 00002385 1F                      	pop	ds
 26526                                  
 26527 00002386 E84EE8                  	call	TempCDS 		; set cds for new drives
 26528                                  linkit:
 26529 00002389 2EC43E[6B02]            	les	di,[cs:DOSINFO] 	;es:di = dos table
 26530 0000238E 268B4D22                	mov	cx,[es:di+SYSI_DEV]	;dx:cx = head of list
 26531 00002392 268B5524                	mov	dx,[es:di+SYSI_DEV+2]
 26532                                  
 26533 00002396 2EC536[F01E]            	lds	si,[cs:DevEntry]	;ds:si = device location
 26534 0000239B 26897522                	mov	[es:di+SYSI_DEV],si	;set head of list in dos
 26535 0000239F 268C5D24                	mov	[es:di+SYSI_DEV+2],ds
 26536 000023A3 8B04                    	mov	ax,[si]			;get pointer to next device
 26537 000023A5 2EA3[F01E]              	mov	[cs:DevEntry],ax	;and save it
 26538                                  
 26539 000023A9 890C                    	mov	[si],cx			;link in the driver
 26540 000023AB 895402                  	mov	[si+2],dx
 26541                                  enddev:
 26542 000023AE 5E                      	pop	si
 26543 000023AF 07                      	pop	es
 26544 000023B0 40                      	inc	ax			;ax = ffff (no more devs if yes)?
 26545 000023B1 740B                    	jz	short coffj3
 26546                                  
 26547 000023B3 2EFE06[3314]            	inc	byte [cs:multdeviceflag] ; possibly multiple device driver.
 26548 000023B8 E80B06                  	call	DevBreak		; M009
 26549                                  	; 11/12/2022
 26550                                  	; ds = cs (DevBreak)
 26551                                  
 26552                                  	; 03/04/2019 - Retro DOS v4.0
 26553                                  	; MSDOS 6.21 IO.SYS - SYSINIT:290Dh
 26554 000023BB E939FE                  	jmp	goodld			; otherwise pretend we loaded it in
 26555                                  coffj3: 
 26556                                  	; 18/12/2022
 26557                                  	; ax = 0
 26558 000023BE 2EA2[3314]              	mov	[cs:multdeviceflag],al ; 0
 26559                                  	;mov	byte [cs:multdeviceflag],0 ; reset the flag
 26560 000023C2 E80106                  	call	DevBreak
 26561                                  	; 11/12/2022
 26562                                  	; ds = cs (DevBreak)
 26563                                  	
 26564                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS compatibility)
 26565                                  	;call	CheckProtmanArena	; adjust alloclim if Protman$ just
 26566                                  ;					;  created a bogus arena to try
 26567                                  ;					;  to protect some of its resident-
 26568                                  ;					;  init code.
 26569                                  	;call	CheckDoubleSpace
 26570 000023C5 E938FC                  	jmp	coff
 26571                                  
 26572                                  ;----------------------------------------------------------------------------
 26573                                  
 26574                                  ;CheckDoubleSpace:
 26575                                  ;;;;	ifdef	dblspace_hooks
 26576                                  ;
 26577                                  ;;	Now check for two special MagicDrv cases:
 26578                                  ;;
 26579                                  ;;       a) the last driver load was MagicDrv final placement:
 26580                                  ;;	   -> add number of MagicDrv reserved drives to drivenumber
 26581                                  ;;
 26582                                  ;;       b) MagicDrv is currently in temporary home:
 26583                                  ;;          -> call it to give it a chance to mount and shuffle drives
 26584                                  ;
 26585                                  ;	cmp	byte [cs:MagicHomeFlag],0 ; already home?
 26586                                  ;	jnz	short no_more_magic_calls ;  nothing more to do if so
 26587                                  ;
 26588                                  ;;	Now inquire of driver whether it is present, and final located
 26589                                  ;
 26590                                  ;	mov	ax,multMagicdrv ; 4A11h
 26591                                  ;	mov	bx,MD_VERSION ; 0
 26592                                  ;	int	2fh			; ch = number of MagicDrv drive letters
 26593                                  ;	or	ax,ax			; is it there?
 26594                                  ;	jnz	short no_more_magic_calls ; done if not
 26595                                  ;
 26596                                  ;	test	dx,8000h		; is it final placed?
 26597                                  ;	jnz	short magic_not_yet_home ;  skip if not
 26598                                  ;
 26599                                  ;;	Okay, now the driver is final placed!  Set the flag so we
 26600                                  ;;	don't keep checking it, and add its number of drive letters
 26601                                  ;;	to drivenumber.
 26602                                  ;
 26603                                  ;	mov	byte [cs:MagicHomeFlag],0ffh ; set the flag!
 26604                                  ;	add	[cs:drivenumber],ch	; add number of MagicDrv volumes to
 26605                                  ;;					;  the drive number we'll pass to the
 26606                                  ;;					;  next loadable block device.
 26607                                  ;
 26608                                  ;	jmp	short no_more_magic_calls ; and finished.
 26609                                  ;
 26610                                  ;magic_not_yet_home:
 26611                                  ;	push	es
 26612                                  ;	push	si
 26613                                  ;
 26614                                  ;	mov	cx,[cs:memhi]		; pass it a work buffer
 26615                                  ;	mov	dx,[cs:ALLOCLIM]	;   address in cx (segment)
 26616                                  ;	sub	dx,cx			;   for len dx (paragraphs)
 26617                                  ;
 26618                                  ;	mov	bx,2
 26619                                  ;	mov	al,[cs:driver_units]	; shuffle magicdrives and new drives
 26620                                  ;;					;   by this many units
 26621                                  ;
 26622                                  ;;BUGBUG 29-Oct-1992 bens Take this 55h out after Beta 4
 26623                                  ;	mov	ah,55h			; backdoor won't shuffle unless it
 26624                                  ;;					;  sees this, to prevent bad things
 26625                                  ;;					;  from happening if people run the
 26626                                  ;;					;  new driver with an old BIOS
 26627                                  ;	call	far [cs:MagicBackdoor]
 26628                                  ;
 26629                                  ;	pop	si
 26630                                  ;	pop	es
 26631                                  ;
 26632                                  ;no_more_magic_calls:
 26633                                  ;
 26634                                  ;;;;	endif
 26635                                  ;	retn
 26636                                  
 26637                                  ; 03/04/2019 - Retro DOS v4.0
 26638                                  
 26639                                  bad_bpb_size_sector:
 26640 000023C8 5E                      	pop	si
 26641 000023C9 07                      	pop	es
 26642 000023CA BA[7A37]                	mov	dx,badsiz_pre
 26643 000023CD BB[5837]                	mov	bx,crlfm
 26644 000023D0 E8920F                  	call	prnerr
 26645                                  
 26646 000023D3 E92AFC                  	jmp	coff
 26647                                  
 26648                                  ;------------------------------------------------------------------------------
 26649                                  ; country command
 26650                                  ;      the syntax is:
 26651                                  ;	country=country id {,codepage {,path}}
 26652                                  ;	country=country id {,,path}	:default codepage id in dos
 26653                                  ;------------------------------------------------------------------------------
 26654                                  
 26655                                  	; 30/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 26656                                  	; (SYSINIT:2663h)
 26657                                  tryq:
 26658 000023D6 80FC51                          cmp     ah,CONFIG_COUNTRY ; 'Q'
 26659 000023D9 7403                    	je	short tryq_cont
 26660                                  skip_it3:
 26661 000023DB E90801                  	jmp	tryf
 26662                                  tryq_cont:
 26663                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 26664                                  ;;ifdef	MULTI_CONFIG
 26665                                  ;       call    query_user		; query the user if config_cmd
 26666                                  ;       jc      short skip_it3		; has the CONFIG_OPTION_QUERY bit set
 26667                                  ;;endif
 26668                                  	; 14/12/2022
 26669                                  	; ds = cs
 26670                                  	; bx = 0
 26671                                  	;mov	byte [cs:cntry_drv],0	; reset the drive,path to default value.
 26672                                  	;mov	word [cs:p_code_page],0
 26673 000023DE 881E[1034]              	mov	[cntry_drv],bl ; 0
 26674 000023E2 891E[B51D]              	mov	[p_code_page],bx ; 0
 26675                                  	
 26676 000023E6 BF[7E1D]                	mov	di,cntry_parms
 26677 000023E9 31C9                    	xor	cx,cx
 26678                                  	; 04/01/2023
 26679                                  	;mov	dx,cx
 26680                                  do52:
 26681 000023EB E8F602                  	call	sysinit_parse
 26682 000023EE 730B                    	jnc	short if52		; parse error,check error code and
 26683                                  
 26684 000023F0 E8E000                  	call	cntry_error		; show message and end the search loop.
 26685                                  	; 14/12/2022
 26686                                  	; ds = cs
 26687 000023F3 C706[B31D]FFFF          	mov	word [p_cntry_code],-1
 26688                                  	;mov	word [cs:p_cntry_code],-1 ; signals that parse error.
 26689 000023F9 EB34                    	jmp	short sr52
 26690                                  if52:
 26691 000023FB 83F8FF                  	cmp	ax,_$P_RC_EOL ; 0FFFFh	; end of line?
 26692 000023FE 742F                    	jz	short sr52		; then end the search loop
 26693                                  
 26694                                  	;cmp	byte [cs:result_val+_$P_Result_Blk.Type],_$P_number ; numeric?
 26695                                  	; 14/12/2022
 26696                                  	; ds = cs
 26697 00002400 803E[501D]01            	cmp	byte [result_val],_$P_Number	
 26698                                  	;cmp	byte [cs:result_val],_$P_Number
 26699 00002405 7512                    	jnz	short if56
 26700                                  
 26701                                  	;;mov	ax,[cs:rw_dword]
 26702                                  	;mov	ax,[cs:result_val+_$P_Result_Blk.Picked_Val]
 26703                                  	; 14/12/2022
 26704 00002407 A1[541D]                	mov	ax,[result_val+_$P_Result_Blk.Picked_Val]
 26705 0000240A 83F901                  	cmp	cx,1
 26706 0000240D 7505                    	jne	short if57
 26707                                  
 26708                                  	;mov	[cs:p_cntry_code],ax
 26709                                  	; 14/12/2022
 26710 0000240F A3[B31D]                	mov	[p_cntry_code],ax
 26711                                  
 26712                                  	; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 26713                                  	;jmp	short en57
 26714                                  	; 12/12/2022
 26715                                  	;jmp	short en56
 26716 00002412 EBD7                    	jmp	short do52
 26717                                  
 26718                                  if57:
 26719                                  	;mov	[cs:p_code_page],ax
 26720                                  	; 14/12/2022
 26721                                  	; ds = cs
 26722 00002414 A3[B51D]                	mov	[p_code_page],ax
 26723                                  en57:
 26724                                  	;jmp	short en56		; path entered
 26725                                  	; 12/12/2022
 26726 00002417 EBD2                    	jmp	short do52
 26727                                  
 26728                                  if56:
 26729 00002419 1E                      	push	ds
 26730 0000241A 06                      	push	es
 26731 0000241B 56                      	push	si
 26732 0000241C 57                      	push	di
 26733                                  
 26734 0000241D 0E                      	push	cs
 26735 0000241E 07                      	pop	es
 26736                                  
 26737                                  	;lds	si,[cs:rv_dword]	; move the path to known place.
 26738                                  	; 14/12/2022
 26739 0000241F C536[541D]              	lds	si,[rv_dword]
 26740 00002423 BF[1034]                	mov	di,cntry_drv
 26741 00002426 E82A0F                  	call	move_asciiz
 26742                                  
 26743 00002429 5F                      	pop	di
 26744 0000242A 5E                      	pop	si
 26745 0000242B 07                      	pop	es
 26746 0000242C 1F                      	pop	ds
 26747                                  
 26748                                  en56:
 26749 0000242D EBBC                    	jmp	short do52
 26750                                  
 26751                                  sr52:
 26752                                  	; 14/12/2022
 26753                                  	; ds = cs
 26754 0000242F 833E[B31D]FF            	cmp	word [p_cntry_code],-1
 26755                                  	;cmp	word [cs:p_cntry_code],-1	; had a parse error?
 26756 00002434 7509                    	jne	short tryq_open
 26757 00002436 E9C7FB                  	jmp	coff
 26758                                  
 26759                                  tryqbad:				;"invalid country code or code page"
 26760 00002439 F9                      	stc
 26761 0000243A BA[C137]                	mov     dx,badcountry
 26762 0000243D EB79                    	jmp     tryqchkerr
 26763                                  
 26764                                  tryq_open:
 26765                                  	; 14/12/2022
 26766                                  	; ds = cs
 26767 0000243F 803E[1034]00            	cmp	byte [cntry_drv],0
 26768                                  	;cmp	byte [cs:cntry_drv],0
 26769 00002444 7405                    	je	short tryq_def
 26770 00002446 BA[1034]                	mov	dx,cntry_drv
 26771 00002449 EB03                    	jmp	short tryq_openit
 26772                                  
 26773                                  tryq_def:
 26774 0000244B BA[1234]                	mov	dx,cntry_root
 26775                                  tryq_openit:
 26776 0000244E B8003D                  	mov	ax,3D00h		;open a file
 26777 00002451 F9                      	stc
 26778 00002452 CD21                    	int	21h
 26779 00002454 7242                    	jc	short tryqfilebad	;open failure
 26780                                  
 26781                                  	; 14/12/2022
 26782                                  	; ds = cs
 26783 00002456 A3[D803]                	mov	[cntryfilehandle],ax
 26784                                  	;mov	[cs:cntryfilehandle],ax	;save file handle
 26785 00002459 89C3                    	mov	bx,ax
 26786 0000245B A1[B31D]                	mov	ax,[p_cntry_code]
 26787 0000245E 8B16[B51D]              	mov	dx,[p_code_page]
 26788                                  	;mov	ax,[cs:p_cntry_code]
 26789                                  	;mov	dx,[cs:p_code_page]	; now,ax=country id,bx=filehandle
 26790                                  	;mov	cx,[cs:memhi]
 26791 00002462 8B0E[E003]              	mov	cx,[memhi]
 26792 00002466 81C18001                	add	cx,384			; need 6k buffer to handle country.sys
 26793                                  					; M023
 26794                                  	; 14/12/2022
 26795                                  	; ds = cs
 26796 0000246A 3B0E[A302]              	cmp	cx,[ALLOCLIM]
 26797                                  	;cmp	cx,[cs:ALLOCLIM]
 26798 0000246E 7745                    	ja	short tryqmemory	;cannot allocate the buffer for country.sys
 26799                                  
 26800 00002470 BE[1034]                	mov	si,cntry_drv		;ds:si -> cntry_drv
 26801 00002473 803C00                  	cmp	byte [si],0 		;default path?
 26802 00002476 7502                    	jne	short tryq_set_for_dos
 26803                                  
 26804 00002478 46                      	inc	si
 26805 00002479 46                      	inc	si			;ds:si -> cntry_root
 26806                                  
 26807                                  tryq_set_for_dos:
 26808                                  	; 14/12/2022
 26809                                  	; ds = cs
 26810 0000247A C43E[7702]              	les	di,[sysi_country]
 26811                                  	;les	di,[cs:sysi_country]	;es:di -> country info tab in dos
 26812 0000247E 57                      	push	di			;save di
 26813                                  	;add	di,8
 26814 0000247F 83C708                  	add	di,country_cdpg_info.ccPath_CountrySys ; 8
 26815 00002482 E8CE0E                  	call	move_asciiz		;set the path to country.sys in dos.
 26816 00002485 5F                      	pop	di			;es:di -> country info tab again.
 26817                                  
 26818                                  	; 14/12/2022	
 26819 00002486 8B0E[E003]              	mov	cx,[memhi]
 26820                                  	;mov	cx,[cs:memhi]
 26821 0000248A 8ED9                    	mov	ds,cx
 26822 0000248C 31F6                    	xor	si,si			;ds:si -> 2k buffer to be used.
 26823 0000248E E8060D                  	call	setdoscountryinfo	;now do the job!!!
 26824                                  	; ds <> cs ; 14/12/2022
 26825 00002491 7325                    	jnc	short tryqchkerr	;read error or could not find country,code page combination
 26826                                  
 26827 00002493 83F9FF                  	cmp	cx,-1			;could not find matching country_id,code page?
 26828 00002496 74A1                    	je	short tryqbad 		;then "invalid country code or code page"
 26829                                  
 26830                                  tryqfilebad:
 26831 00002498 0E                      	push	cs
 26832 00002499 07                      	pop	es
 26833 0000249A 2E803E[1034]00          	cmp	byte [cs:cntry_drv],0	;is the default file used?
 26834 000024A0 7405                    	je	short tryqdefbad
 26835                                  
 26836 000024A2 BE[1034]                	mov	si,cntry_drv
 26837 000024A5 EB03                    	jmp	short tryqbadload
 26838                                  
 26839                                  tryqdefbad:				;default file has been used.
 26840 000024A7 BE[1234]                	mov	si,cntry_root		;es:si -> \country.sys in sysinit_seg
 26841                                  tryqbadload:
 26842 000024AA E8B20E                  	call	badload 		;ds will be restored to sysinit_seg
 26843                                  	;mov	cx,[cs:CONFBOT]
 26844                                  	; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 26845                                  	;mov	cx,[cs:top_of_cdss]
 26846                                  	; 11/12/2022
 26847                                  	; ds = cs
 26848 000024AD 8B0E[A102]              	mov	cx,[top_of_cdss]  ; mov cx,[CONFBOT]	
 26849 000024B1 8EC1                    	mov	es,cx			;restore es -> confbot.
 26850 000024B3 EB13                    	jmp	short coffj4
 26851                                  
 26852                                  tryqmemory:
 26853 000024B5 BA[0438]                	mov	dx,insufmemory
 26854                                  tryqchkerr:
 26855                                  	;mov	cx,[cs:CONFBOT]
 26856                                  	; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 26857                                  	;mov	cx,[cs:top_of_cdss]
 26858                                  	; 12/12/2022
 26859 000024B8 0E                      	push	cs
 26860 000024B9 1F                      	pop	ds
 26861 000024BA 8B0E[A102]              	mov	cx,[top_of_cdss]  ; mov cx,[CONFBOT]
 26862 000024BE 8EC1                    	mov	es,cx			;restore es -> confbot seg
 26863                                  	;push	cs
 26864                                  	;pop	ds			;restore ds to sysinit_seg
 26865 000024C0 7306                    	jnc	short coffj4		;if no error,then exit
 26866                                  
 26867 000024C2 E8C20E                  	call	print			;else show error message
 26868 000024C5 E88A02                  	call	error_line
 26869                                  coffj4:
 26870                                  	;mov	bx,[cs:cntryfilehandle]
 26871                                  	; 11/12/2022
 26872                                  	; ds = cs
 26873 000024C8 8B1E[D803]              	mov	bx,[cntryfilehandle]
 26874 000024CC B43E                    	mov	ah,3Eh
 26875 000024CE CD21                    	int	21h			;close a file. don't care even if it fails.
 26876 000024D0 E92DFB                  	jmp	coff
 26877                                  
 26878                                  ;--------------------------------------------
 26879                                  
 26880                                  cntry_error:
 26881                                  
 26882                                  ;function: show "invalid country code or code page" messages,or
 26883                                  ;		"error in country command" depending on the error code
 26884                                  ;		in ax returned by sysparse;
 26885                                  ;in:	ax - error code
 26886                                  ;	ds - sysinitseg
 26887                                  ;	es - confbot
 26888                                  ;out:	show message.  dx destroyed.
 26889                                  
 26890 000024D3 83F806                  	cmp	ax,_$P_Out_Of_Range ; 6
 26891 000024D6 7505                    	jne	short if64
 26892 000024D8 BA[C137]                	mov	dx,badcountry		;"invalid country code or code page"
 26893 000024DB EB03                    	jmp	short en64
 26894                                  if64:
 26895 000024DD BA[E737]                	mov	dx,badcountrycom	;"error in contry command"
 26896                                  en64:
 26897 000024E0 E8A40E                  	call	print
 26898                                  	;call	error_line
 26899                                  	;retn
 26900                                  	; 11/12/2022
 26901 000024E3 E96C02                  	jmp	error_line
 26902                                  
 26903                                  ;------------------------------------------------------------------------------
 26904                                  ; files command
 26905                                  ;------------------------------------------------------------------------------
 26906                                  
 26907                                  ;******************************************************************************
 26908                                  ; function: parse the parameters of files= command.			      *
 26909                                  ;									      *
 26910                                  ; input :								      *
 26911                                  ;	es:si -> parameters in command line.				      *
 26912                                  ; output:								      *
 26913                                  ;	variable files set.						      *
 26914                                  ;									      *
 26915                                  ; subroutines to be called:						      *
 26916                                  ;	sysinit_parse							      *
 26917                                  ; logic:								      *
 26918                                  ; {									      *
 26919                                  ;	set di points to files_parms;					      *
 26920                                  ;	set dx,cx to 0; 						      *
 26921                                  ;	while (end of command line)					      *
 26922                                  ;	{ sysinit_parse;						      *
 26923                                  ;	  if (no error) then						      *
 26924                                  ;	     files = result_val._$P_picked_val				      *
 26925                                  ;	  else								      *
 26926                                  ;	     error exit;						      *
 26927                                  ;	};								      *
 26928                                  ; };									      *
 26929                                  ;									      *
 26930                                  ;******************************************************************************
 26931                                  
 26932                                  tryf:
 26933 000024E6 80FC46                          cmp     ah,CONFIG_FILES ;  'F'
 26934 000024E9 7523                    	jne	short tryl
 26935                                  
 26936                                  	; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 26937                                  ;;ifdef	MULTI_CONFIG
 26938                                  ;       call    query_user              ; query the user if config_cmd
 26939                                  ;       jc      short tryl		; has the CONFIG_OPTION_QUERY bit set
 26940                                  ;;endif
 26941                                  
 26942                                  	; 14/12/2022
 26943                                  	; ds = cs
 26944                                  
 26945 000024EB BF[B71D]                	mov	di,files_parms
 26946 000024EE 31C9                    	xor	cx,cx
 26947                                  	; 04/01/2023
 26948                                  	;mov	dx,cx
 26949                                  do67:
 26950 000024F0 E8F101                  	call	sysinit_parse
 26951 000024F3 7303                    	jnc	short if67		; parse error
 26952                                  	;call	badparm_p		;  and show messages and end the search loop.
 26953                                  	;jmp	short sr67
 26954                                  	; 04/01/2023
 26955 000024F5 E96A01                  	jmp	badparm_p_coff
 26956                                  if67:
 26957 000024F8 83F8FF                  	cmp	ax,_$P_RC_EOL		; end of line?
 26958 000024FB 7408                    	je	short en67		; then end the $endloop
 26959                                  
 26960                                  	; 14/12/2022
 26961                                  	; ds = cs
 26962                                  	;;mov	al,[cs:rv_dword]
 26963                                  	;mov	al,[cs:result_val+_$P_Result_Blk.Picked_Val]
 26964                                  	;mov	[cs:p_files],al		; save it temporarily
 26965                                  	;mov	al,[rv_dword]
 26966 000024FD A0[541D]                	mov	al,[result_val+_$P_Result_Blk.Picked_Val]
 26967 00002500 A2[D61D]                	mov	[p_files],al
 26968                                  
 26969 00002503 EBEB                    	jmp	short do67
 26970                                  en67:
 26971                                  	; 14/12/2022
 26972                                  	; ds = cs
 26973 00002505 A0[D61D]                	mov	al,[p_files]
 26974 00002508 A2[9D02]                	mov	[FILES],al	
 26975                                  	;mov	al,[cs:p_files]
 26976                                  	;mov	[cs:FILES],al		; no error. really set the value now.
 26977                                  sr67:
 26978 0000250B E9F2FA                  	jmp	coff
 26979                                  
 26980                                  ; 04/04/2019 - Retro DOS v4.0
 26981                                  
 26982                                  ;------------------------------------------------------------------------------
 26983                                  ; lastdrive command
 26984                                  ;------------------------------------------------------------------------------
 26985                                  
 26986                                  ;******************************************************************************
 26987                                  ; function: parse the parameters of lastdrive= command. 		      *
 26988                                  ;									      *
 26989                                  ; input :								      *
 26990                                  ;	es:si -> parameters in command line.				      *
 26991                                  ; output:								      *
 26992                                  ;	set the variable num_cds.					      *
 26993                                  ;									      *
 26994                                  ; subroutines to be called:						      *
 26995                                  ;	sysinit_parse							      *
 26996                                  ; logic:								      *
 26997                                  ; {									      *
 26998                                  ;	set di points to ldrv_parms;					      *
 26999                                  ;	set dx,cx to 0; 						      *
 27000                                  ;	while (end of command line)					      *
 27001                                  ;	{ sysinit_parse;						      *
 27002                                  ;	  if (no error) then						      *
 27003                                  ;	     set num_cds to the returned value; 			      *
 27004                                  ;	  else	/*error exit*/						      *
 27005                                  ;	     error exit;						      *
 27006                                  ;	};								      *
 27007                                  ; };									      *
 27008                                  ;									      *
 27009                                  ;******************************************************************************
 27010                                  
 27011                                  tryl:
 27012 0000250E 80FC4C                          cmp     ah,CONFIG_LASTDRIVE ; 'L'
 27013 00002511 7523                    	jne	short tryp
 27014                                  
 27015                                  	; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 27016                                  ;;ifdef	MULTI_CONFIG
 27017                                  ;       call    query_user      ; query the user if config_cmd
 27018                                  ;       jc	short tryp	; has the CONFIG_OPTION_QUERY bit set
 27019                                  ;;endif
 27020                                  	; 14/12/2022
 27021                                  	; ds = cs
 27022                                  
 27023 00002513 BF[0E1E]                	mov	di,ldrv_parms
 27024 00002516 31C9                    	xor	cx,cx
 27025                                  	; 04/01/2023
 27026                                  	;mov	dx,cx
 27027                                  do73:
 27028 00002518 E8C901                  	call	sysinit_parse
 27029 0000251B 7303                    	jnc	short if73	; parse error
 27030                                  	;call	badparm_p	;  and show messages and end the search loop.
 27031                                  	;jmp	short sr73
 27032                                  	; 04/01/2023
 27033 0000251D E94201                  	jmp	badparm_p_coff
 27034                                  if73:
 27035 00002520 83F8FF                  	cmp	ax,_$P_RC_EOL	; end of line?
 27036 00002523 7408                    	je	short en73	; then end the $endloop
 27037                                  
 27038                                  	; 14/12/2022
 27039                                  	; ds = cs
 27040                                  	;;mov	al,[cs:rv_dword]
 27041                                  	;mov	al,[cs:rv_byte]	; pick up the drive number
 27042                                  	;mov	[cs:p_ldrv],al	; save it temporarily
 27043                                  
 27044                                  	;mov	al,[rv_dword]
 27045 00002525 A0[541D]                	mov	al,[rv_byte]
 27046 00002528 A2[221E]                	mov	[p_ldrv],al
 27047                                  
 27048 0000252B EBEB                    	jmp	short do73
 27049                                  en73:
 27050                                  	; 14/12/2022
 27051                                  	; ds = cs
 27052 0000252D A0[221E]                	mov	al,[p_ldrv]
 27053 00002530 A2[A002]                	mov	[NUM_CDS],al
 27054                                  	;mov	al,[cs:p_ldrv]
 27055                                  	;mov	[cs:NUM_CDS],al	; no error. really set the value now.
 27056                                  sr73:
 27057 00002533 E9CAFA                  	jmp	coff
 27058                                  
 27059                                  ;--------------------------------------------------------------------------
 27060                                  ; setting drive parameters
 27061                                  ;--------------------------------------------------------------------------
 27062                                  
 27063                                  tryp:
 27064 00002536 80FC50                          cmp     ah,CONFIG_DRIVPARM ; 'P'
 27065 00002539 7511                    	jne	short tryk
 27066                                  
 27067                                  	; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 27068                                  ;;ifdef	MULTI_CONFIG
 27069                                  ;       call    query_user      ; query the user if config_cmd
 27070                                  ;       jc      short tryk	; has the CONFIG_OPTION_QUERY bit set
 27071                                  ;;endif
 27072                                  
 27073 0000253B E86908                  	call	parseline
 27074 0000253E 7209                    	jc	short trypbad
 27075 00002540 E88907                  	call	setparms
 27076 00002543 E8BF07                  	call	diddleback
 27077                                  
 27078                                  ; No error check here, because setparms and diddleback have no error 
 27079                                  ; returns, and setparms as coded now can return with carry set. 
 27080                                  ;       jc	short trypbad
 27081                                  
 27082                                  	; 12/12/2022
 27083                                  	; cf = 0
 27084                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 27085                                  	;jc	short trypbad
 27086                                  	
 27087 00002546 E9B7FA                  	jmp	coff
 27088                                  trypbad:
 27089 00002549 E9BB01                  	jmp	badop
 27090                                  
 27091                                  ;--------------------------------------------------------------------------
 27092                                  ; setting internal stack parameters
 27093                                  ; stacks=m,n where
 27094                                  ;	m is the number of stacks (range 8 to 64,default 9)
 27095                                  ;	n is the stack size (range 32 to 512 bytes,default 128)
 27096                                  ; j.k. 5/5/86: stacks=0,0 implies no stack installation.
 27097                                  ;	any combinations that are not within the specified limits will
 27098                                  ;	result in "unrecognized command" error.
 27099                                  ;--------------------------------------------------------------------------
 27100                                  
 27101                                  ;**************************************************************************
 27102                                  ;									  *
 27103                                  ; function: parse the parameters of stacks= command.			  *
 27104                                  ;	    the minimum value for "number of stacks" and "stack size" is  *
 27105                                  ;	    8 and 32 each.  in the definition of sysparse value list,they *
 27106                                  ;	    are set to 0.  this is for accepting the exceptional case of  *
 27107                                  ;	    stacks=0,0 case (,which means do not install the stack.)	  *
 27108                                  ;	    so,after sysparse is done,we have to check if the entered	  *
 27109                                  ;	    values (stack_count,stack_size) are within the actual range,  *
 27110                                  ;	    (or if "0,0" pair has been entered.)			  *
 27111                                  ; input :								  *
 27112                                  ;	es:si -> parameters in command line.				  *
 27113                                  ; output:								  *
 27114                                  ;	set the variables stack_count,stack_size.			  *
 27115                                  ;									  *
 27116                                  ; subroutines to be called:						  *
 27117                                  ;	sysinit_parse							  *
 27118                                  ; logic:								  *
 27119                                  ; {									  *
 27120                                  ;	set di points to stks_parms;					  *
 27121                                  ;	set dx,cx to 0; 						  *
 27122                                  ;	while (end of command line)					  *
 27123                                  ;	{ sysinit_parse;						  *
 27124                                  ;	  if (no error) then						  *
 27125                                  ;	     { if (cx == 1) then /* first positional = stack count */	  *
 27126                                  ;		   p_stack_count = result_val._$P_picked_val;		  *
 27127                                  ;	       if (cx == 2) then /* second positional = stack size */	  *
 27128                                  ;		   p_stack_size = result_val._$P_picked_val;		  *
 27129                                  ;	     }								  *
 27130                                  ;	  else	/*error exit*/						  *
 27131                                  ;	     error exit;						  *
 27132                                  ;	};								  *
 27133                                  ;	here check p_stack_count,p_stack_size if it meets the condition;  *
 27134                                  ;	if o.k.,then set stack_count,stack_size;			  *
 27135                                  ;	 else error_exit;						  *
 27136                                  ; };									  *
 27137                                  ;**************************************************************************
 27138                                  
 27139                                  tryk:
 27140                                          ;if      stacksw
 27141                                  
 27142 0000254C 80FC4B                          cmp     ah,CONFIG_STACKS ; 'K'
 27143 0000254F 7402                    	je	short do_tryk
 27144                                  skip_it4:
 27145 00002551 EB74                    	jmp	short trys	; 15/12/2022
 27146                                  do_tryk:
 27147                                  	; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 27148                                  ;;ifdef	MULTI_CONFIG
 27149                                  ;       call    query_user              ; query the user if config_cmd
 27150                                  ;       jc	short skip_it4		; has the CONFIG_OPTION_QUERY bit set
 27151                                  ;;endif
 27152                                  	; 14/12/2022
 27153                                  	; ds = cs
 27154                                  
 27155 00002553 BF[231E]                	mov	di,stks_parms
 27156 00002556 31C9                    	xor	cx,cx
 27157                                  	; 04/01/2023
 27158                                  	;mov	dx,cx
 27159                                  do79:
 27160 00002558 E88901                  	call	sysinit_parse
 27161 0000255B 730B                    	jnc	short if79		; parse error
 27162                                  
 27163 0000255D BA[7338]                	mov	dx,badstack		; "invalid stack parameter"
 27164 00002560 E8240E                  	call	print			;  and show messages and end the search loop.
 27165 00002563 E8EC01                  	call	error_line
 27166                                  	;jmp	sr79
 27167                                  	; 11/12/2022
 27168 00002566 EB39                    	jmp	short sr79
 27169                                  if79:
 27170 00002568 83F8FF                  	cmp	ax,_$P_RC_EOL		; end of line?
 27171 0000256B 7412                    	je	short en79		; then end the $endloop
 27172                                  
 27173                                  	; 14/12/2022
 27174                                  	; ds = cs
 27175                                  
 27176                                  	;;mov	ax,[cs:rv_dword]
 27177                                  	;mov	ax,[cs:result_val+_$P_Result_Blk.Picked_Val]
 27178                                  	;mov	ax,[rv_dword]
 27179 0000256D A1[541D]                	mov	ax,[result_val+_$P_Result_Blk.Picked_Val]
 27180                                  
 27181 00002570 83F901                  	cmp	cx,1
 27182 00002573 7505                    	jne	short if83
 27183                                  
 27184                                  	; 14/12/2022
 27185                                  	;mov	[cs:p_stack_count],ax
 27186                                  	;jmp	short en83
 27187 00002575 A3[581E]                	mov	[p_stack_count],ax
 27188 00002578 EBDE                    	jmp	short do79
 27189                                  if83:
 27190                                  	; 14/12/2022
 27191                                  	;mov	[cs:p_stack_size],ax
 27192 0000257A A3[5A1E]                	mov	[p_stack_size],ax
 27193                                  en83:
 27194 0000257D EBD9                    	jmp	short do79
 27195                                  en79:
 27196                                  	; 14/12/2022
 27197                                  	; ds = cs
 27198 0000257F A1[581E]                	mov	ax,[p_stack_count]
 27199 00002582 09C0                    	or	ax,ax
 27200 00002584 741E                    	jz	short if87		
 27201                                  
 27202                                  	; 14/12/2022
 27203                                  	;cmp	word [p_stack_count],0
 27204                                  	;;cmp	word [cs:p_stack_count],0
 27205                                  	;je	short if87
 27206                                  
 27207                                  	; 14/12/2022
 27208 00002586 83F808                  	cmp	ax, mincount ; 8
 27209                                  	;cmp	word [cs:p_stack_count],mincount ; 8
 27210                                  	; 15/12/2022
 27211 00002589 721F                    	jb	short en87
 27212 0000258B 833E[5A1E]20            	cmp	word [p_stack_size],minsize ; 32
 27213                                  	;cmp	word [cs:p_stack_size],minsize ; 32
 27214                                  	; 15/12/2022
 27215 00002590 7218                    	jb	short en87
 27216                                  if94:
 27217                                  	; 14/12/2022
 27218                                  	; ds = cs
 27219                                  	; ax = [p_stack_count]
 27220                                  	;mov	ax,[p_stack_count]
 27221                                  	;;mov	ax,[cs:p_stack_count]
 27222 00002592 A3[8A02]                	mov	[stack_count],ax
 27223                                  	;mov	[cs:stack_count],ax
 27224                                  	;mov	ax,[cs:p_stack_size]
 27225 00002595 A1[5A1E]                	mov	ax,[p_stack_size]
 27226                                  	;mov	[cs:stack_size],ax
 27227 00002598 A3[8C02]                	mov	[stack_size],ax
 27228                                  	;mov	word [cs:stack_addr],-1	; stacks= been accepted.
 27229 0000259B C706[8E02]FFFF          	mov	word [stack_addr],-1
 27230                                  sr79:
 27231 000025A1 E95CFA                  	jmp	coff
 27232                                  
 27233                                  if87:
 27234                                  	; 14/12/2022
 27235 000025A4 3906[5A1E]              	cmp	[p_stack_size],ax ; 0
 27236 000025A8 74E8                    	je	short if94 ; ax = [p_stack_count] = 0
 27237                                  	;cmp	word [cs:p_stack_size],0
 27238                                  	;je	short if94
 27239                                  en87:
 27240                                  	; 15/12/2022
 27241                                  	; ([p_stack_count] is invalid, use default values)
 27242                                  	; 14/12/2022
 27243                                  	; ds = cs
 27244 000025AA C706[8A02]0900          	mov	word [stack_count],defaultcount ; 9
 27245 000025B0 C706[8C02]8000          	mov	word [stack_size],defaultsize ; 128
 27246 000025B6 C706[8E02]0000          	mov	word [stack_addr],0
 27247                                  	;mov	word [cs:stack_count],defaultcount ; 9
 27248                                  	;				; reset to default value.
 27249                                  	;mov	word [cs:stack_size],defaultsize ; 128
 27250                                  	;mov	word [cs:stack_addr],0
 27251                                  
 27252 000025BC BA[7338]                	mov	dx,badstack
 27253 000025BF E8C50D                  	call	print
 27254 000025C2 E88D01                  	call	error_line
 27255 000025C5 EBDA                    	jmp	short sr79
 27256                                  
 27257                                  ; 15/12/2022
 27258                                  %if 0
 27259                                  	mov	di,stks_parms
 27260                                  	xor	cx,cx
 27261                                  	; 04/01/2023
 27262                                  	;mov	dx,cx
 27263                                  do79:
 27264                                  	call	sysinit_parse
 27265                                  	jnc	short if79		; parse error
 27266                                  
 27267                                  	mov	dx,badstack		; "invalid stack parameter"
 27268                                  	call	print			;  and show messages and end the search loop.
 27269                                  	call	error_line
 27270                                  	;jmp	sr79
 27271                                  	; 11/12/2022
 27272                                  	jmp	short sr79
 27273                                  if79:
 27274                                  	cmp	ax,_$P_RC_EOL		; end of line?
 27275                                  	je	short en79		; then end the $endloop
 27276                                  
 27277                                  	;mov	ax,[cs:rv_dword]
 27278                                  	mov	ax,[cs:result_val+_$P_Result_Blk.Picked_Val]
 27279                                  	cmp	cx,1
 27280                                  	jne	short if83
 27281                                  
 27282                                  	mov	[cs:p_stack_count],ax
 27283                                  	jmp	short en83
 27284                                  if83:
 27285                                  	mov	[cs:p_stack_size],ax
 27286                                  en83:
 27287                                  	jmp	short do79
 27288                                  en79:
 27289                                  	cmp	word [cs:p_stack_count],0
 27290                                  	je	short if87
 27291                                  
 27292                                  	cmp	word [cs:p_stack_count],mincount ; 8
 27293                                  	jb	short ll88
 27294                                  	cmp	word [cs:p_stack_size],minsize ; 32
 27295                                  	jnb	short if88
 27296                                  ll88:
 27297                                  	mov	word [cs:p_stack_count],-1 ; invalid
 27298                                  if88:
 27299                                  	jmp	short en87
 27300                                  
 27301                                  	; 11/12/2022
 27302                                  if94:
 27303                                  	mov	ax,[cs:p_stack_count]
 27304                                  	mov	[cs:stack_count],ax
 27305                                  	mov	ax,[cs:p_stack_size]
 27306                                  	mov	[cs:stack_size],ax
 27307                                  	mov	word [cs:stack_addr],-1	; stacks= been accepted.
 27308                                  sr79:
 27309                                  	jmp	coff
 27310                                  
 27311                                  if87:
 27312                                  	cmp	word [cs:p_stack_size],0
 27313                                  	je	short en87
 27314                                  	mov	word [cs:p_stack_count],-1 ; invalid
 27315                                  en87:
 27316                                  	cmp	word [cs:p_stack_count],-1 ; invalid?
 27317                                  	jne	short if94
 27318                                  
 27319                                  	mov	word [cs:stack_count],defaultcount ; 9
 27320                                  					; reset to default value.
 27321                                  	mov	word [cs:stack_size],defaultsize ; 128
 27322                                  	mov	word [cs:stack_addr],0
 27323                                  
 27324                                  	mov	dx,badstack
 27325                                  	call	print
 27326                                  	call	error_line
 27327                                  	jmp	short sr79
 27328                                  
 27329                                  %endif
 27330                                  
 27331                                  ; 11/12/2022
 27332                                  %if 0 
 27333                                  
 27334                                  if94:
 27335                                  	mov	ax,[cs:p_stack_count]
 27336                                  	mov	[cs:stack_count],ax
 27337                                  	mov	ax,[cs:p_stack_size]
 27338                                  	mov	[cs:stack_size],ax
 27339                                  	mov	word [cs:stack_addr],-1	; stacks= been accepted.
 27340                                  sr79:
 27341                                  	jmp	coff
 27342                                  
 27343                                  %endif
 27344                                  
 27345                                  	;endif
 27346                                  
 27347                                  ;------------------------------------------------------------------------
 27348                                  ; shell command
 27349                                  ;------------------------------------------------------------------------
 27350                                  
 27351                                  trys:
 27352 000025C7 80FC53                          cmp     ah,CONFIG_SHELL ; 'S'
 27353 000025CA 753C                    	jne	short tryx
 27354                                  
 27355                                  	; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 27356                                  ;;ifdef	MULTI_CONFIG
 27357                                  ;       call    query_user              ; query the user if config_cmd
 27358                                  ;       jc	short tryx		; has the CONFIG_OPTION_QUERY bit set
 27359                                  ;       mov	byte [cs:newcmd],1
 27360                                  ;;endif
 27361                                  
 27362                                  	;;mov	word [cs:command_line],0 ; zap length,first byte of command-line
 27363                                  	; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 27364                                  	;mov	byte [cs:command_line+1],0
 27365                                  	; 15/12/2022
 27366                                  	; ds = cs
 27367 000025CC C606[AA02]00            	mov	byte [command_line+1],0
 27368                                  
 27369 000025D1 BF[5E34]                        mov     di,commnd+1		; we already have the first char
 27370 000025D4 8845FF                          mov     [di-1],al               ; of the new shell in AL, save it now
 27371                                  storeshell:
 27372 000025D7 E86101                  	call	getchr
 27373 000025DA 08C0                            or      al,al                   ; this is the normal case: "organize"
 27374 000025DC 7419                            jz	short getshparms	; put a ZERO right after the filename
 27375                                  
 27376 000025DE 3C20                            cmp     al," "                  ; this may happen if there are no args
 27377 000025E0 7205                            jb	short endofshell	; I suppose...
 27378 000025E2 8805                    	mov	[di],al
 27379 000025E4 47                      	inc	di
 27380                                          ;cmp    di,commnd+63		; this makes sure we don't overflow
 27381                                          ;jb	short storeshell	; commnd (the filename)
 27382                                          ;jmp	short endofshell
 27383                                  	; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 27384 000025E5 EBF0                    	jmp	short storeshell
 27385                                  
 27386                                  ; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 27387                                  ;getshparms:
 27388                                  ;	mov     byte [di],0		; zero-terminate the filename
 27389                                  ;	mov     di,command_line+1	; prepare to process the command-line
 27390                                  ;
 27391                                  ;parmloop:
 27392                                  ;	call	getchr
 27393                                  ;	cmp	al," "
 27394                                  ;	jb	short endofparms
 27395                                  ;	mov	[di],al
 27396                                  ;	inc	di
 27397                                  ;	cmp     di,command_line+126
 27398                                  ;	jb	short parmloop
 27399                                  ;endofparms:
 27400                                  ;	mov     cx,di
 27401                                  ;	sub     cx,command_line+1
 27402                                  ;	mov     [cs:command_line],cl
 27403                                  ;
 27404                                  ;endofshell:
 27405                                  ;	mov     byte [di],0		; zero-terminate the filename (or
 27406                                  ;					; the command-line as the case may be)
 27407                                  ;skipline:
 27408                                  ;       cmp     al,lf	; 0Ah		; the safest way to eat the rest of
 27409                                  ;       je	short endofline		; the line: watch for ever-present LF
 27410                                  ;call	getchr
 27411                                  ;       jnc	short skipline		; keep it up as long as there are chars
 27412                                  ;
 27413                                  ;endofline:
 27414                                  ;       jmp     conflp
 27415                                  
 27416                                  	; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 27417                                  endofshell:
 27418 000025E7 C60500                       	mov     byte [di],0		; zero-terminate the filename (or
 27419                                  					; the command-line as the case may be)
 27420 000025EA E84E01                  	call	getchr
 27421                                  skipline:
 27422 000025ED 3C0A                    	cmp     al,lf	; 0Ah		; the safest way to eat the rest of
 27423 000025EF 7403                    	je	short endofline		; the line: watch for ever-present LF
 27424 000025F1 E84701                  	call	getchr
 27425                                  endofline:
 27426 000025F4 E9E4F9                  	jmp     conflp
 27427                                  
 27428                                  	; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 27429                                  getshparms:
 27430                                  	; 18/12/2022
 27431                                  	; al = 0
 27432 000025F7 8805                    	mov	[di],al ; 0
 27433                                  	;mov	byte [di],0		; zero-terminate the filename
 27434 000025F9 BF[AA02]                	mov     di,command_line+1	; prepare to process the command-line
 27435                                  parmloop:
 27436 000025FC E83C01                  	call	getchr
 27437 000025FF 3C20                    	cmp	al," " ; 20h
 27438 00002601 72E4                    	jb	short endofshell
 27439 00002603 8805                    	mov	[di],al
 27440 00002605 47                      	inc	di
 27441 00002606 EBF4                    	jmp	short parmloop
 27442                                  
 27443                                  ;------------------------------------------------------------------------
 27444                                  ; fcbs command
 27445                                  ;------------------------------------------------------------------------
 27446                                  
 27447                                  ;************************************************************************
 27448                                  ; function: parse the parameters of fcbs= command.			*
 27449                                  ;									*
 27450                                  ; input :								*
 27451                                  ;	es:si -> parameters in command line.				*
 27452                                  ; output:								*
 27453                                  ;	set the variables fcbs,keep.					*
 27454                                  ;									*
 27455                                  ; subroutines to be called:						*
 27456                                  ;	sysinit_parse							*
 27457                                  ; logic:								*
 27458                                  ; {									*
 27459                                  ;	set di points to fcbs_parms;					*
 27460                                  ;	set dx,cx to 0; 						*
 27461                                  ;	while (end of command line)					*
 27462                                  ;	{ sysparse;							*
 27463                                  ;	  if (no error) then						*
 27464                                  ;	     { if (cx == 1) then /* first positional = fcbs */		*
 27465                                  ;		   fcbs = result_val._$P_picked_val;			*
 27466                                  ;	       if (cx == 2) then /* second positional = keep */ 	*
 27467                                  ;		   keep = result_val._$P_picked_val;			*
 27468                                  ;	     }								*
 27469                                  ;	  else	/*error exit*/						*
 27470                                  ;	     error exit;						*
 27471                                  ;	};								*
 27472                                  ; };									*
 27473                                  ;************************************************************************
 27474                                  
 27475                                  tryx:
 27476 00002608 80FC58                          cmp     ah,CONFIG_FCBS  ; 'X'
 27477                                          ;jne	short try1
 27478                                  	; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 27479 0000260B 752F                    	jne	short tryy	; comment command
 27480                                  
 27481                                  	; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 27482                                  ;;ifdef	MULTI_CONFIG
 27483                                  ;       call    query_user      ; query the user if config_cmd
 27484                                  ;       jc	short try1	; has the CONFIG_OPTION_QUERY bit set
 27485                                  ;;endif
 27486                                  
 27487 0000260D BF[D71D]                	mov	di,fcbs_parms
 27488 00002610 31C9                    	xor	cx,cx
 27489                                  	; 04/01/2023
 27490                                  	;mov	dx,cx
 27491                                  do98:
 27492 00002612 E8CF00                  	call	sysinit_parse
 27493                                          ; 04/01/2023
 27494                                  	;jnc	short if98	; parse error
 27495                                          ;call	badparm_p	;  and show messages and end the search loop.
 27496                                  	;jmp	short sr98
 27497                                  	;------------------------
 27498                                  	; 04/01/2023
 27499 00002615 724B                    	jc	short badparm_p_coff
 27500                                  if98:
 27501 00002617 83F8FF                  	cmp	ax,_$P_RC_EOL	; end of line?
 27502 0000261A 7412                    	je	short en98	; then end the $endloop
 27503                                  
 27504                                  	;;mov	al,[cs:rv_dword]
 27505                                  	;mov	al,[cs:result_val+_$P_Result_Blk.Picked_Val]
 27506                                  	; 15/12/2022
 27507                                  	; ds = cs
 27508 0000261C A0[541D]                	mov	al,[result_val+_$P_Result_Blk.Picked_Val]
 27509 0000261F 83F901                  	cmp	cx,1		; the first positional?
 27510 00002622 7505                    	jne	short if102
 27511                                  	;mov	[cs:p_fcbs],al
 27512                                  	; 15/12/2022
 27513 00002624 A2[0C1E]                	mov	[p_fcbs],al
 27514                                  	;jmp	short en102
 27515 00002627 EBE9                    	jmp	short do98
 27516                                  if102:
 27517                                  	;mov	[cs:p_keep],al
 27518                                  	; 15/12/2022
 27519 00002629 A2[0D1E]                	mov	[p_keep],al
 27520                                  en102:
 27521 0000262C EBE4                    	jmp	short do98
 27522                                  en98:
 27523                                  	; 15/12/2022
 27524                                  	; ds = cs
 27525 0000262E A0[0C1E]                	mov	al,[p_fcbs]
 27526 00002631 A2[9E02]                	mov	[FCBS],al
 27527 00002634 C606[9F02]00            	mov	byte [KEEP],0
 27528                                  	;mov	al,[cs:p_fcbs]	 ; M017
 27529                                  	;mov	[cs:FCBS],al	 ; M017
 27530                                  	;mov	byte [cs:KEEP],0 ; M017
 27531                                  sr98:
 27532 00002639 E9C4F9                  	jmp	coff
 27533                                  
 27534                                  ; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 27535                                  ;-------------------------------------------------------------------------
 27536                                  ; comment= do nothing. just decrease chrptr,and increase count for correct
 27537                                  ;		line number
 27538                                  ;-------------------------------------------------------------------------
 27539                                  
 27540                                  tryy:
 27541 0000263C 80FC59                  	cmp     ah,CONFIG_COMMENT ; 'Y'
 27542 0000263F 750B                    	jne	short try0
 27543                                  
 27544                                  donothing:
 27545                                  	; 15/12/2022
 27546                                  	; ds = cs
 27547 00002641 FF0E[D603]              	dec	word [chrptr]
 27548 00002645 FF06[D203]              	inc	word [count]
 27549                                  	; 02/11/2022
 27550                                  	;dec	word [cs:chrptr]
 27551                                  	;inc	word [cs:count]
 27552                                  
 27553 00002649 E9B4F9                  	jmp	coff
 27554                                  
 27555                                  ;------------------------------------------------------------------------
 27556                                  ; rem command
 27557                                  ;------------------------------------------------------------------------
 27558                                  
 27559                                  try0:				; do nothing with this line.
 27560 0000264C 80FC30                  	cmp     ah,CONFIG_REM ; '0'
 27561 0000264F 74F0                    	je	short donothing
 27562                                  
 27563                                  ; 07/04/2019 - Retro DOS v4.0
 27564                                  
 27565                                  ;-----------------------------------------------------------------------
 27566                                  ; switches command
 27567                                  ;-----------------------------------------------------------------------
 27568                                  
 27569                                  ;***********************************************************************
 27570                                  ;								       *
 27571                                  ; function: parse the option switches specified.		       *
 27572                                  ; note - this command is intended for the future use also.	       *
 27573                                  ; when we need to set system data flag,use this command.	       *
 27574                                  ;								       *
 27575                                  ; input :							       *
 27576                                  ;	es:si -> parameters in command line.			       *
 27577                                  ; output:							       *
 27578                                  ;	p_swit_k set if /k option chosen.			       *
 27579                                  ;								       *
 27580                                  ; subroutines to be called:					       *
 27581                                  ;	sysinit_parse						       *
 27582                                  ; logic:							       *
 27583                                  ; {								       *
 27584                                  ;	set di points to swit_parms;  /*parse control definition*/     *
 27585                                  ;	set dx,cx to 0; 					       *
 27586                                  ;	while (end of command line)				       *
 27587                                  ;	{ sysinit_parse;					       *
 27588                                  ;	  if (no error) then					       *
 27589                                  ;	       if (result_val._$P_synonym_ptr == swit_k) then	       *
 27590                                  ;		    p_swit_k = 1				       *
 27591                                  ;	       endif						       *
 27592                                  ;	  else {show error message;error exit}			       *
 27593                                  ;	};							       *
 27594                                  ; };								       *
 27595                                  ;								       *
 27596                                  ;***********************************************************************
 27597                                  
 27598                                  SUPPRESS_WINA20	EQU 00000010b	; M025 ; (DOSSYM.INC, MSDOS 6.0)
 27599                                  
 27600                                  try1:
 27601 00002651 80FC31                          cmp     ah,CONFIG_SWITCHES ; '1'
 27602 00002654 7402                    	je	short do_try1	; switches= command entered?
 27603                                  skip_it5:
 27604                                  	;jmp	tryv
 27605                                  	; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 27606 00002656 EB7A                    	jmp	tryz
 27607                                  
 27608                                  do_try1:
 27609                                  
 27610                                  	; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 27611                                  ;;ifdef	MULTI_CONFIG
 27612                                  ;       call    query_user      ; query the user if config_cmd
 27613                                  ;       jc	short skip_it5	; has the CONFIG_OPTION_QUERY bit set
 27614                                  ;;endif
 27615                                  
 27616 00002658 BF[711E]                	mov	di,swit_parms
 27617 0000265B 31C9                    	xor	cx,cx
 27618                                  	; 04/01/2023
 27619                                  	;mov	dx,cx
 27620                                  do110:
 27621 0000265D E88400                  	call	sysinit_parse
 27622 00002660 7306                    	jnc	short if110	; parse error
 27623                                  	;call	badparm_p	;  and show messages and end the search loop.
 27624                                  	;jmp	short sr110
 27625                                  	; -----------------------
 27626                                  	; 04/01/2023
 27627                                  badparm_p_coff:
 27628 00002662 E8AE00                  	call	badparm_p
 27629 00002665 E998F9                  	jmp	coff
 27630                                  	;------------------------
 27631                                  if110:
 27632 00002668 83F8FF                  	cmp	ax,_$P_RC_EOL	; end of line?
 27633 0000266B 742D                    	je	short en110	; then jmp to $endloop for semantic check
 27634                                  
 27635                                  	; 15/12/2022
 27636                                  	; ds = cs
 27637                                  	;;cmp	word [cs:result_val_swoff],swit_k
 27638                                  	;cmp	word [cs:result_val+_$P_Result_Blk.SYNONYM_Ptr],swit_k 
 27639 0000266D 813E[521D][891E]        	cmp	word [result_val+_$P_Result_Blk.SYNONYM_Ptr],swit_k 
 27640 00002673 7507                    	jne	short if115	;				;M059
 27641                                  	; 15/12/2022
 27642 00002675 C606[A41E]01            	mov	byte [p_swit_k],1
 27643                                  	;mov	byte [cs:p_swit_k],1	; set the flag
 27644 0000267A EBE1                    	jmp	short do110
 27645                                  if115:	
 27646                                  	; 15/12/2022							;M059
 27647                                  	;;cmp	word [cs:result_val_swoff],swit_t
 27648                                  	;cmp	word [cs:result_val+_$P_Result_Blk.SYNONYM_Ptr],swit_t	;M059
 27649 0000267C 813E[521D][951E]        	cmp	word [result_val+_$P_Result_Blk.SYNONYM_Ptr],swit_t
 27650 00002682 7507                    	jne	short if116					;M059 M063
 27651                                  	; 15/12/2022
 27652 00002684 C606[A51E]01            	mov	byte [p_swit_t],1
 27653                                  	;mov	byte [cs:p_swit_t],1				;M059
 27654 00002689 EBD2                    	jmp	short do110					;M059
 27655                                  if116:
 27656                                  	; 15/12/2022
 27657                                  	;;cmp	word [cs:result_val_swoff],swit_w
 27658                                  	;cmp	word [cs:result_val+_$P_Result_Blk.SYNONYM_Ptr],swit_w	;M063
 27659 0000268B 813E[521D][A11E]        	cmp	word [result_val+_$P_Result_Blk.SYNONYM_Ptr],swit_w
 27660 00002691 75CA                    	jne	short do110					;M063
 27661                                  	; 15/12/2022
 27662 00002693 C606[A61E]01            	mov	byte [p_swit_w],1
 27663                                  	;mov	byte [cs:p_swit_w],1				;M063
 27664 00002698 EBC3                    	jmp	short do110					;M063
 27665                                  en110:
 27666                                  	; 15/12/2022
 27667                                  	; ds = cs
 27668 0000269A 803E[A41E]01            	cmp	byte [p_swit_k],1
 27669                                  	;cmp	byte [cs:p_swit_k],1	; if /k entered,
 27670 0000269F 1E                      	push	ds
 27671                                  	;;mov	ax,Bios_Data
 27672                                  	;mov	ax,KERNEL_SEGMENT ; 0070h
 27673                                  	; 21/10/2022
 27674 000026A0 B87000                  	mov	ax,DOSBIODATASEG ; 0070h
 27675 000026A3 8ED8                    	mov	ds,ax
 27676 000026A5 750A                    	jne	short if117
 27677 000026A7 C606[E504]00            	mov	byte [keyrd_func],0 ; 4E5h ; use the conventional keyboard functions
 27678 000026AC C606[E604]01            	mov	byte [keysts_func],1 ; 4E6h (for MSDOS 6.21 IO.SYS)
 27679                                  if117:
 27680                                  	; 15/12/2022
 27681                                  	; ds <> cs
 27682 000026B1 2EA0[A51E]              	mov	al,[cs:p_swit_t]				;M059
 27683 000026B5 A2[F204]                	mov	[t_switch],al	; 4F2h (for MSDOS 6.21 IO.SYS)	;M059
 27684                                  
 27685 000026B8 2E803E[A61E]00          	cmp	byte [cs:p_swit_w],0				;M063
 27686 000026BE 740E                    	je	short skip_dos_flag				;M063
 27687 000026C0 06                      	push	es
 27688 000026C1 53                      	push	bx
 27689 000026C2 B452                    	mov	ah,GET_IN_VARS ; 52h				;M063
 27690 000026C4 CD21                    	int	21h						;M063
 27691                                  			; DOS - 2+ internal - GET LIST OF LISTS
 27692                                  			; Return: ES:BX -> DOS list of lists
 27693                                  	;or	bytes [es:86h],2
 27694 000026C6 26800E860002            	or	byte [es:DOS_FLAG_OFFSET],SUPPRESS_WINA20 ; 2	;M063
 27695 000026CC 5B                      	pop	bx
 27696 000026CD 07                      	pop	es
 27697                                  skip_dos_flag:							;M063
 27698 000026CE 1F                      	pop	ds
 27699                                  sr110:
 27700 000026CF E92EF9                  	jmp	coff
 27701                                  
 27702                                  ; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 27703                                  ;
 27704                                  ;tryv:
 27705                                  ;
 27706                                  ;;ifdef	MULTI_CONFIG
 27707                                  ;;------------------------------------------------------------------------
 27708                                  ;; set command (as in "set var=value<cr/lf>")
 27709                                  ;;------------------------------------------------------------------------
 27710                                  ;
 27711                                  ;       cmp     ah,CONFIG_SET  ; 'V'
 27712                                  ;       jne	short tryn
 27713                                  ;       call    query_user      ; query the user if config_cmd
 27714                                  ;       jc	short tryn 	; has the CONFIG_OPTION_QUERY bit set
 27715                                  ;       call    copy_envvar     ; copy var at ES:SI to "config_wrkseg"
 27716                                  ;       jnc	short sr110	; no error
 27717                                  ;err:    
 27718                                  ;	call    error_line      ; whoops, display error in line XXX
 27719                                  ;       jmp     short sr110     ; jump to coff (to skip to next line)
 27720                                  ;
 27721                                  ;;------------------------------------------------------------------------
 27722                                  ;; numlock command (as in "numlock=on|off")
 27723                                  ;;------------------------------------------------------------------------
 27724                                  ;tryn:
 27725                                  ;       cmp     ah,CONFIG_NUMLOCK  ;'N'
 27726                                  ;       jne	short tryy            ;
 27727                                  ;       call    query_user      ; query thye user if config_cmd
 27728                                  ;       jc	short tryy	; has the CONFIG_OPTION_QUERY bit set
 27729                                  ;       call    set_numlock
 27730                                  ;       jc	short err
 27731                                  ;       jmp	short sr110	; all done
 27732                                  ;
 27733                                  ;;endif	;MULTI_CONFIG
 27734                                  
 27735                                  ; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 27736                                  ;;-------------------------------------------------------------------------
 27737                                  ;; comment= do nothing. just decrese chrptr,and increase count for correct
 27738                                  ;;		line number
 27739                                  ;;-------------------------------------------------------------------------
 27740                                  ;
 27741                                  ;tryy:
 27742                                  ;       cmp     ah,CONFIG_COMMENT ; 'Y'
 27743                                  ;	jne	short try0
 27744                                  ;donothing:
 27745                                  ;	dec	word [chrptr]
 27746                                  ;	inc	word [count]
 27747                                  ;	jmp	coff
 27748                                  ;
 27749                                  ;;------------------------------------------------------------------------
 27750                                  ;; rem command
 27751                                  ;;------------------------------------------------------------------------
 27752                                  ;
 27753                                  ;try0:				;do nothing with this line.
 27754                                  ;	cmp     ah,CONFIG_REM ; '0'
 27755                                  ;	je	short donothing
 27756                                  
 27757                                  ; 30/10/2022
 27758                                  ; (MSSOS 5.0 IO.SYS - SYSINIT:29D7h)
 27759                                  
 27760                                  ;------------------------------------------------------------------------
 27761                                  ; bogus command
 27762                                  ;------------------------------------------------------------------------
 27763                                  
 27764                                  tryz:
 27765 000026D2 80FCFF                          cmp     ah,0FFh		;null command? (BUGBUG - who sets FFh anyway?)
 27766                                  	;je	short donothing
 27767                                  	; 02/11/2022
 27768 000026D5 740A                    	je	short tryz_donothing
 27769                                  
 27770 000026D7 FF0E[D603]              	dec	word [chrptr]
 27771 000026DB FF06[D203]              	inc	word [count]
 27772 000026DF EB26                    	jmp	short badop
 27773                                  
 27774                                  	; 02/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 27775                                  tryz_donothing:
 27776 000026E1 E95DFF                  	jmp	donothing
 27777                                  
 27778                                  ; 07/04/2019 - Retro DOS v4.0
 27779                                  
 27780                                  ;------------------------------------------------------------------------------
 27781                                  
 27782                                  ; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 27783                                  ;
 27784                                  ;
 27785                                  ;;***	CheckProtmanArena -- special hack for adjusting alloclim with Protman$
 27786                                  ;;
 27787                                  ;;	adjusts alloclim if Protman$ reduced our arena through a manual hack.
 27788                                  ;
 27789                                  ;CheckProtmanArena:
 27790                                  ;	push	es
 27791                                  ;	mov	ax,[cs:area]	; get our arena header
 27792                                  ;	dec	ax
 27793                                  ;	mov	es,ax
 27794                                  ;	add	ax,[es:3]	; find end of arena
 27795                                  ;	inc	ax
 27796                                  ;	cmp	ax,[cs:ALLOCLIM] ; is it less than alloclim?
 27797                                  ;	ja	short CheckProtmanDone
 27798                                  ;
 27799                                  ;	mov	[cs:ALLOCLIM],ax ; reduce alloclim then
 27800                                  ;CheckProtmanDone:
 27801                                  ;	pop	es
 27802                                  ;	retn
 27803                                  
 27804                                  ;------------------------------------------------------------------------------
 27805                                  
 27806                                  sysinit_parse:
 27807                                  
 27808                                  ;------------------------------------------------------------------------------
 27809                                  ;set up registers for sysparse
 27810                                  ;in)	es:si -> command line in confbot
 27811                                  ;	di -> offset of the parse control definition.
 27812                                  ;
 27813                                  ;out)	calls sysparse.
 27814                                  ;	carry will set if parse error.
 27815                                  ;	*** the caller should check the eol condition by looking at ax
 27816                                  ;	*** after each call.
 27817                                  ;	*** if no parameters are found,then ax will contain a error code.
 27818                                  ;	*** if the caller needs to look at the synomym@ of the result,
 27819                                  ;	***  the caller should use cs:@ instead of es:@.
 27820                                  ;	cx register should be set to 0 at the first time the caller calls this
 27821                                  ;	 procedure.
 27822                                  ;	ax - exit code
 27823                                  ;	bl - terminated delimeter code
 27824                                  ;	cx - new positional ordinal
 27825                                  ;	si - set to pase scanned operand
 27826                                  ;	dx - selected result buffer
 27827                                  ;------------------------------------------------------------------------------
 27828                                  
 27829                                  	; 24/10/2022
 27830 000026E4 06                      	push	es			;save es,ds
 27831 000026E5 1E                      	push	ds
 27832                                  
 27833 000026E6 06                      	push	es
 27834 000026E7 1F                      	pop	ds			;now ds:si -> command line
 27835                                  
 27836 000026E8 0E                      	push	cs
 27837 000026E9 07                      	pop	es			;now es:di -> control definition
 27838                                  
 27839 000026EA 2E8C1E[3914]            	mov	[cs:badparm_seg],ds	;save the pointer to the parm
 27840 000026EF 2E8936[3714]            	mov	[cs:badparm_off],si	;we are about to parse for badparm msg.
 27841                                  	;mov	dx,0
 27842                                  	; 04/01/2023
 27843 000026F4 29D2                    	sub	dx,dx ; 0
 27844 000026F6 E8E8ED                  	call	SysParse
 27845 000026F9 83F800                  	cmp	ax,_$P_No_Error	; 0	;no error
 27846                                  
 27847                                  ;**cas note:  when zero true after cmp, carry clear
 27848                                  
 27849                                  	;je	short ll4
 27850                                  	; 24/10/2022 (MSDOS 5.0 IO.SYS compatibility, SYSINIT:2A02h)
 27851                                  	; 12/12/2022
 27852 000026FC 7406                    	je	short en4 ; cf=0
 27853 000026FE 83F8FF                  	cmp	ax,_$P_RC_EOL ; 0FFFFh	;or the end of line?
 27854                                  	;jne	short if4
 27855                                  	; 12/12/2022
 27856 00002701 7401                    	je	short en4 ; cf=0
 27857                                  
 27858                                  ; 12/12/2022
 27859                                  ;ll4:
 27860                                  ;	; 12/12/2022
 27861                                  ;	; cf=0
 27862                                  ;	;clc
 27863                                  ;	jmp	short en4
 27864                                  
 27865                                  if4:
 27866                                  	; 24/10/2022
 27867 00002703 F9                      	stc
 27868                                  en4:
 27869 00002704 1F                      	pop	ds
 27870 00002705 07                      	pop	es
 27871 00002706 C3                      	retn
 27872                                  
 27873                                  ; 11/12/2022
 27874                                  %if 0
 27875                                  
 27876                                  ;----------------------------------------------------------------------------
 27877                                  ;
 27878                                  ; procedure : badop_p
 27879                                  ;
 27880                                  ;             same thing as badop,but will make sure to set ds register back
 27881                                  ;             to sysinitseg and return back to the caller.
 27882                                  ;
 27883                                  ;----------------------------------------------------------------------------
 27884                                  
 27885                                  badop_p:
 27886                                  	push	cs
 27887                                  	pop	ds		;set ds to configsys seg.
 27888                                  	mov	dx,badopm
 27889                                  	call	print
 27890                                          ;call	error_line
 27891                                  	;retn
 27892                                  	; 11/12/2022
 27893                                  	jmp	error_line
 27894                                  
 27895                                  %endif
 27896                                  
 27897                                  ;----------------------------------------------------------------------------
 27898                                  ;
 27899                                  ; label : badop
 27900                                  ;
 27901                                  ;----------------------------------------------------------------------------
 27902                                  
 27903                                  badop:	
 27904 00002707 BA[3437]                	mov	dx,badopm	;want to print command error "unrecognized command..."
 27905 0000270A E87A0C                  	call	print
 27906 0000270D E84200                  	call	error_line	;show "error in config.sys ..." .
 27907 00002710 E9EDF8                  	jmp	coff
 27908                                  
 27909                                  ;----------------------------------------------------------------------------
 27910                                  ;
 27911                                  ; procedure : badparm_p
 27912                                  ;
 27913                                  ;             show "bad command or parameters - xxxxxx"
 27914                                  ;             in badparm_seg,badparm_off -> xxxxx
 27915                                  ;
 27916                                  ;----------------------------------------------------------------------------
 27917                                  
 27918                                  	; 24/10/2022
 27919                                  badparm_p:
 27920                                  	; 11/12/2022
 27921                                  	; ds = cs
 27922                                  	; 11/12/2022
 27923                                  	;push	ds ; *
 27924 00002713 52                      	push	dx
 27925 00002714 56                      	push	si
 27926                                  
 27927                                  	; 11/12/2022
 27928                                  	; ds = cs
 27929                                  	;push	cs
 27930                                  	;pop	ds
 27931                                  
 27932 00002715 BA[5B37]                	mov	dx,badparm
 27933 00002718 E86C0C                  	call	print			; "bad command or parameters - "
 27934 0000271B C536[3714]              	lds	si,[badparm_ptr]
 27935                                  
 27936                                  ;	print "xxxx" until cr.
 27937                                  
 27938                                  do1:
 27939 0000271F 8A14                    	mov	dl,[si]			; get next character
 27940 00002721 80FA0D                  	cmp	dl,cr ; 0Dh		; is a carriage return?
 27941 00002724 7407                    	je	short en1		; exit loop if so
 27942                                  
 27943 00002726 B402                    	mov	ah,2 ; STD_CON_OUTPUT	; function 2
 27944 00002728 CD21                    	int	21h			; display character
 27945 0000272A 46                      	inc	si			; next character
 27946 0000272B EBF2                    	jmp	short do1
 27947                                  en1:
 27948 0000272D 0E                      	push	cs
 27949 0000272E 1F                      	pop	ds
 27950                                  
 27951 0000272F BA[5837]                	mov	dx,crlfm
 27952 00002732 E8520C                  	call	print
 27953 00002735 E81A00                  	call	error_line
 27954                                  
 27955 00002738 5E                      	pop	si
 27956 00002739 5A                      	pop	dx
 27957                                  	; 11/12/2022
 27958                                  	;pop	ds ; *
 27959                                  badparmp_ret:
 27960 0000273A C3                      	retn
 27961                                  
 27962                                  ;----------------------------------------------------------------------------
 27963                                  ;
 27964                                  ; procedure : getchr
 27965                                  ;
 27966                                  ;----------------------------------------------------------------------------
 27967                                  
 27968                                  	; 24/10/2022
 27969                                  getchr:
 27970                                  	; 12/12/2022
 27971                                  	;push	cx
 27972                                  	;mov	cx,[count]
 27973                                  	;jcxz	nochar
 27974                                  	; 12/12/2022
 27975 0000273B 833E[D203]01            	cmp	word [count],1 
 27976 00002740 720F                    	jb	short nochar ; cf=1 ([count] = 0)
 27977                                  	
 27978 00002742 8B36[D603]              	mov	si,[chrptr]
 27979 00002746 268A04                  	mov	al,[es:si]
 27980 00002749 FF0E[D203]              	dec	word [count]
 27981 0000274D FF06[D603]              	inc	word [chrptr]
 27982                                  	; 12/12/202
 27983                                  	; cf=0
 27984                                  	;clc
 27985                                  ;get_ret:
 27986                                  	;pop	cx
 27987                                  	;retn
 27988                                  nochar: 
 27989                                  	; 12/12/2022
 27990                                  	; cf=1
 27991                                  	;stc
 27992                                  	;jmp	short get_ret
 27993                                  	
 27994 00002751 C3                      	retn
 27995                                  
 27996                                  ; 11/12/2022
 27997                                  %if 0
 27998                                  
 27999                                  ;----------------------------------------------------------------------------
 28000                                  ;
 28001                                  ; procedure : incorrect_order
 28002                                  ;
 28003                                  ;             show "incorrect order in config.sys ..." message.
 28004                                  ;
 28005                                  ;----------------------------------------------------------------------------
 28006                                  
 28007                                  incorrect_order:
 28008                                  	mov	dx,badorder
 28009                                  	call	print
 28010                                  	call	showlinenum
 28011                                  	retn
 28012                                  
 28013                                  %endif
 28014                                  
 28015                                  ;----------------------------------------------------------------------------
 28016                                  ;
 28017                                  ; procedure : error_line
 28018                                  ;
 28019                                  ;             show "error in config.sys ..." message.
 28020                                  ;
 28021                                  ;----------------------------------------------------------------------------
 28022                                  
 28023                                  	; 11/12/2022
 28024                                  	; 24/10/2022
 28025                                  error_line:
 28026                                  	; 11/12/2022
 28027                                  	; ds = cs
 28028                                  	;push	cs
 28029                                  	;pop	ds
 28030                                  
 28031 00002752 BA[9038]                	mov	dx,errorcmd
 28032 00002755 E82F0C                  	call	print
 28033                                  	;call	showlinenum
 28034                                  	;retn
 28035                                  	; 11/12/2022
 28036                                  	;jmp	short shortlinemum
 28037                                  
 28038                                  ;----------------------------------------------------------------------------
 28039                                  ;
 28040                                  ; procedure : showlinenum
 28041                                  ;
 28042                                  ; convert the binary linecount to decimal ascii string in showcount
 28043                                  ; and display showcount at the current curser position.
 28044                                  ; in.) linecount
 28045                                  ;
 28046                                  ; out) the number is printed.
 28047                                  ;
 28048                                  ;----------------------------------------------------------------------------
 28049                                  
 28050                                  	; 11/12/2022
 28051                                  	; ds = cs
 28052                                  	; 24/10/2022
 28053                                  showlinenum:
 28054 00002758 06                      	push	es
 28055                                  	; 11/12/2022
 28056                                  	;push	ds
 28057 00002759 57                      	push	di
 28058                                  
 28059 0000275A 0E                      	push	cs
 28060 0000275B 07                      	pop	es		; es=cs
 28061                                  
 28062                                  	; 11/12/2022
 28063                                  	;push	cs
 28064                                  	;pop	ds
 28065                                  
 28066 0000275C BF[3103]                	mov	di,showcount+4	; di -> the least significant decimal field.
 28067 0000275F B90A00                  	mov	cx,10		; decimal divide factor
 28068                                  	;mov	ax,[cs:linecount]
 28069                                  	; 11/12/2022
 28070 00002762 A1[2B03]                	mov	ax,[linecount]
 28071                                  sln_loop:
 28072                                  	; 11/12/2022
 28073 00002765 39C8                    	cmp	ax,cx ; < 10 ?
 28074                                  	;cmp	ax,10		; < 10?
 28075 00002767 720C                    	jb	short sln_last
 28076                                  
 28077 00002769 31D2                    	xor	dx,dx
 28078 0000276B F7F1                    	div	cx	; cx = 10
 28079 0000276D 80CA30                  	or	dl,30h		; add "0" (= 30h) to make it an ascii.
 28080 00002770 8815                    	mov	[di],dl
 28081 00002772 4F                      	dec	di
 28082 00002773 EBF0                    	jmp	short sln_loop
 28083                                  
 28084                                  sln_last:
 28085 00002775 0C30                    	or	al,30h	; "0"
 28086 00002777 8805                    	mov	[di],al
 28087 00002779 89FA                    	mov	dx,di
 28088 0000277B E8090C                  	call	print		; show it.
 28089 0000277E 5F                      	pop	di
 28090                                  	; 11/12/2022
 28091                                  	;pop	ds
 28092 0000277F 07                      	pop	es
 28093 00002780 C3                      	retn
 28094                                  
 28095                                  ; 07/04/2019 - Retro DOS v4.0
 28096                                  ; (MSDOS 6.21 IO.SYS, SYSINIT:2E44h)
 28097                                  
 28098                                  ;----------------------------------------------------------------------------
 28099                                  ;
 28100                                  ; procedure : ProcDOS
 28101                                  ;
 28102                                  ;	Process the result of DOS= parsing
 28103                                  ;
 28104                                  ;	result_val._$P_item_tag	= 1 for DOS=HIGH
 28105                                  ;				= 2 for DOS=LOW
 28106                                  ;				= 3 for DOS=UMB
 28107                                  ;				= 4 for DOS=NOUMB
 28108                                  ;----------------------------------------------------------------------------
 28109                                  
 28110                                  	; 01/11/2022 - Retro DOS v4.0 (Modififed MSDOS 5.0 IO.SYS)
 28111                                  	; (SYTSINIT:2AB5h)
 28112                                  ProcDOS:
 28113                                  	; 01/01/2023
 28114                                  	; ds = cs
 28115 00002781 30E4                    	xor	ah,ah
 28116                                  	;;mov	al,[cs:result_val_itag]
 28117                                  	;mov	al,[cs:result_val+_$P_Result_Blk.Item_Tag]
 28118                                  	; 04/01/2023
 28119 00002783 A0[511D]                	mov	al,[result_val+_$P_Result_Blk.Item_Tag]
 28120 00002786 48                      	dec	ax
 28121 00002787 7415                    	jz	short pd_hi
 28122 00002789 48                      	dec	ax
 28123 0000278A 740E                    	jz	short pd_lo
 28124 0000278C 48                      	dec	ax
 28125 0000278D 7405                    	jz	short pd_umb
 28126                                  	;;mov	byte [cs:DevUMB],0
 28127                                  	; 18/12/2022
 28128                                  	;mov	byte [cs:DevUMB],ah ; 0
 28129                                  	; 01/01/2023
 28130 0000278F 8826[F81E]              	mov	byte [DevUMB],ah ; 0
 28131 00002793 C3                      	retn
 28132                                  pd_umb:
 28133                                  	; 04/01/2023
 28134 00002794 C606[F81E]FF            	mov	byte [DevUMB],0FFh
 28135                                  	;mov	byte [cs:DevUMB],0FFh
 28136 00002799 C3                      	retn
 28137                                  pd_lo:
 28138                                  	; 04/01/2023
 28139 0000279A A2[6A02]                	mov	[runhigh],al ; 0
 28140                                  	; 18/12/2022
 28141                                  	;mov	[cs:runhigh],al ; 0
 28142                                  	;;mov	byte [cs:runhigh],0
 28143 0000279D C3                      	retn
 28144                                  pd_hi:
 28145                                  	; 04/01/2023
 28146 0000279E C606[6A02]FF            	mov	byte [runhigh],0FFh
 28147                                  	;mov	byte [cs:runhigh],0FFh
 28148                                  limx:	; 11/12/2022
 28149 000027A3 C3                      	retn
 28150                                  
 28151                                  ;----------------------------------------------------------------------------
 28152                                  ;
 28153                                  ; procedure : LieInt12Mem
 28154                                  ;
 28155                                  ;	Input : DevEntry points to Device Start address (offset == 0)
 28156                                  ;		alloclim set to the limit of low memory.
 28157                                  ;
 28158                                  ;	Output : none
 28159                                  ;
 28160                                  ;	Changes the ROM BIOS variable which stores the total low memory
 28161                                  ;	If a 3com device driver (any character device with name 'PROTMAN$')
 28162                                  ;	is being loaded alloclim is converted into Ks and stored in 40:13h
 28163                                  ;	Else if a device driver being loaded into UMB the DevLoadEnd is
 28164                                  ;	converted into Ks and stored in 40:13h
 28165                                  ;
 28166                                  ;----------------------------------------------------------------------------
 28167                                  
 28168                                  LieInt12Mem:
 28169                                  	; 11/12/2022
 28170                                  	; ds = cs
 28171 000027A4 A1[A302]                	mov	ax,[ALLOCLIM]
 28172                                  	;mov	ax,[cs:ALLOCLIM]	; lie INT 12 as alloclim
 28173                                  					; assuming that it is 3Com
 28174 000027A7 E84400                  	call	IsIt3Com		; Is it 3Com driver?
 28175 000027AA 740A                    	jz	short lim_set		; yes, lie to him differently
 28176                                  	; 13/05/2019
 28177                                  	;cmp	byte [cs:DeviceHi],0	; Is the DD being loaded in UMB
 28178                                  	;je	short limx		; no, don't lie
 28179                                  	;mov	ax,[cs:DevLoadEnd]	; lie INT 12 as end of UMB
 28180                                  	; 11/12/2022
 28181                                  	; ds = cs
 28182 000027AC 803E[071F]00            	cmp	byte [DeviceHi],0
 28183 000027B1 74F0                    	je	short limx
 28184 000027B3 A1[EE1E]                	mov	ax,[DevLoadEnd]
 28185                                  lim_set:
 28186                                  	; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 28187                                  	; 11/12/2022
 28188                                  	;call	SetInt12Mem
 28189                                  ;limx:
 28190                                  	;retn
 28191                                  	
 28192                                  	;jmp	short SetInt12Mem 
 28193                                  
 28194                                  ;----------------------------------------------------------------------------
 28195                                  ;
 28196                                  ; procedure : SetInt12Mem
 28197                                  ;
 28198                                  ;	Input : AX = Memory size to be set (in paras)
 28199                                  ;	Output : none
 28200                                  ;
 28201                                  ;	Sets the variable 40:13 to the memory size passed in AX
 28202                                  ;	It saves the old value in 40:13 in OldInt12Mem,
 28203                                  ;	It also sets a flag Int12Lied to 0ffh, which is checked before
 28204                                  ;	restoring the value of 40:13
 28205                                  ;
 28206                                  ;----------------------------------------------------------------------------
 28207                                  
 28208                                  	; 01/11/2022
 28209                                  SetInt12Mem:
 28210 000027B6 1E                      	push	ds
 28211 000027B7 BB4000                  	mov	bx,40h
 28212 000027BA 8EDB                    	mov	ds,bx			; ROM BIOS Data Segment
 28213 000027BC 8B1E1300                	mov	bx,[13h]		; INT 12 memory variable
 28214 000027C0 2E891E[0B1F]            	mov	[cs:OldInt12Mem],bx	; save it
 28215 000027C5 B106                    	mov	cl,6
 28216 000027C7 D3E8                    	shr	ax,cl			; convert paras into Ks
 28217 000027C9 A31300                  	mov	[13h],ax		; Lie
 28218 000027CC 2EC606[0A1F]FF          	mov	byte [cs:Int12Lied],0FFh ; mark that we are lying
 28219 000027D2 1F                      	pop	ds
 28220                                  ;limx:
 28221 000027D3 C3                      	retn
 28222                                  
 28223                                  ;----------------------------------------------------------------------------
 28224                                  ;
 28225                                  ; procedure : TrueInt12Mem
 28226                                  ;
 28227                                  ;	Input : Int12Lied = 0 if we are not lying currently
 28228                                  ;			  = 0ffh if we are lying
 28229                                  ;		OldInt12Mem = Saved value of 40:13h
 28230                                  ;
 28231                                  ;	Output : none
 28232                                  ;
 28233                                  ;	Resets the INT 12 Memory variable if we were lying about int 12
 28234                                  ;	and resets the flag which indicates that we were lying
 28235                                  ;
 28236                                  ;----------------------------------------------------------------------------
 28237                                  
 28238                                  TrueInt12Mem:
 28239                                  	; 11/12/2022
 28240                                  	; ds = cs
 28241 000027D4 803E[0A1F]00            	cmp	byte [Int12Lied],0
 28242                                  	;cmp	byte [cs:Int12Lied],0	; were we lying so far?
 28243                                  	; 01/11/2022 (MSDOS 5.0 IO.SYS, SYS.INIT:2B1Dh)
 28244                                  	;mov	byte [cs:Int12Lied],0	; reset it anyway
 28245 000027D9 7412                    	je	short timx		; no, we weren't
 28246                                  	; 18/12/2022
 28247 000027DB B84000                  	mov	ax,40h
 28248 000027DE 8826[0A1F]              	mov	[Int12Lied],ah ; 0
 28249                                  	;mov	byte [Int12Lied],0
 28250                                  	;mov	byte [cs:Int12Lied],0
 28251 000027E2 1E                      	push	ds
 28252                                  	;mov	ax,40h
 28253 000027E3 8ED8                    	mov	ds,ax
 28254 000027E5 2EA1[0B1F]              	mov	ax,[cs:OldInt12Mem]
 28255 000027E9 A31300                  	mov	[13h],ax		; restore INT 12 memory
 28256 000027EC 1F                      	pop	ds
 28257                                  timx:
 28258 000027ED C3                      	retn
 28259                                  
 28260                                  ;----------------------------------------------------------------------------
 28261                                  ;
 28262                                  ; procedure : IsIt3Com?
 28263                                  ;
 28264                                  ;	Input : DevEntry = Seg:0 of device driver
 28265                                  ;	Output : Zero flag set if device name is 'PROTMAN$'
 28266                                  ;		 else Zero flag is reset
 28267                                  ;
 28268                                  ;----------------------------------------------------------------------------
 28269                                  
 28270                                  IsIt3Com:
 28271                                  	; 11/12/2022
 28272                                  	; ds = cs
 28273 000027EE 1E                      	push	ds
 28274 000027EF 06                      	push	es
 28275 000027F0 56                      	push	si
 28276                                  	; 11/12/2022
 28277 000027F1 C536[F01E]              	lds	si,[DevEntry]
 28278                                  	;lds	si,[cs:DevEntry]	; ptr to device header
 28279 000027F5 83C60A                  	add	si,SYSDEV.NAME ; 10 	; ptr device name
 28280 000027F8 0E                      	push	cs
 28281 000027F9 07                      	pop	es
 28282 000027FA BF[0D1F]                	mov	di,ThreeComName
 28283 000027FD B90800                  	mov	cx,8			; name length
 28284 00002800 F3A6                    	rep	cmpsb
 28285 00002802 5E                      	pop	si
 28286 00002803 07                      	pop	es
 28287 00002804 1F                      	pop	ds
 28288 00002805 C3                      	retn
 28289                                  
 28290                                  ;M020 : BEGIN
 28291                                  ;----------------------------------------------------------------------------
 28292                                  
 28293                                  UpdatePDB:
 28294 00002806 1E                      	push	ds
 28295 00002807 B462                    	mov	ah,62h
 28296 00002809 CD21                    	int	21h	; DOS - 3+ - GET PSP ADDRESS
 28297 0000280B 8EDB                    	mov	ds,bx
 28298 0000280D 2E8B1E[A302]            	mov	bx,[cs:ALLOCLIM]
 28299                                  	;mov	[2],bx
 28300 00002812 891E0200                	mov	[PDB.BLOCK_LEN],bx
 28301 00002816 1F                      	pop	ds
 28302 00002817 C3                      	retn
 28303                                  
 28304                                  ; M020 : END
 28305                                  
 28306                                  ;----------------------------------------------------------------------------
 28307                                  
 28308                                  ; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 28309                                  
 28310                                  %if 0
 28311                                  
 28312                                  ;include highload.inc	; Routines for devicehigh parsing, control of HIDDEN
 28313                                  ;include highexit.inc	; umb's, etc
 28314                                  
 28315                                  ; ----------------------------------------------------------------------
 28316                                  ; HIGHLOAD.INC (MSDOS 6.0 - 1991) 	
 28317                                  ; ----------------------------------------------------------------------
 28318                                  ; 07/04/2019 - Retro DOS v4.0
 28319                                  
 28320                                  ;******************************************************************************
 28321                                  ;
 28322                                  ; This file contains routines needed to parse and implement user-given
 28323                                  ; command-line options of the form "/S/L:3,0x500;2;7,127;0x0BE4". InitVar()
 28324                                  ; and Parsevar() are used to parse this data and place it in encoded form into
 28325                                  ; the variables in highvar.inc, for use by the rest of the routines.
 28326                                  ;
 28327                                  ; DeviceHigh accepts this command-line (handled in sysconf.asm, not here):
 28328                                  ;    DEVICEHIGH SIZE=hhhhhh module opts
 28329                                  ; Or, DeviceHigh and LoadHigh accept any of the following:
 28330                                  ;    DH/LH module opts
 28331                                  ;    DH/LH [/S][/L:umb[,size][;umb[,size]]*] module opts
 28332                                  ;    DH/LH [/L:umb[,size][;umb[,size]]*][/S] module opts
 28333                                  ; The initial UMB,SIZE pair designates the module's load address; the remainder
 28334                                  ; of the UMB and SIZE pairs are used to indicate specific UMBs to be left
 28335                                  ; available during the load.
 28336                                  ;
 28337                                  ; When an actual load is ready to be performed, a call to HideUMBs() will
 28338                                  ; temporarily allocate (as owner 8+"HIDDEN  ") all free elements in any
 28339                                  ; upper-memory block which was not specified by the user... in addition, if
 28340                                  ; UMBs were marked to shrink (/S option) to a certain size ("umb,size"), any
 28341                                  ; elements in that umb SAVE the lower-half of the newly-shrunken one are also
 28342                                  ; allocated.  After the load, the function UnHideUMBs() (in highexit.inc) will
 28343                                  ; free any UMBs so allocated.
 28344                                  ;
 28345                                  ; When a device driver loads, there is the additional problem of allocating its
 28346                                  ; initial load site; this should be restricted to the first UMB specified on
 28347                                  ; the command-line. The function FreezeUM temporarily allocates all remaining
 28348                                  ; free upper-memory elements (as owner 8+"FROZEN  "), except those in the load
 28349                                  ; UMB. Then the initial allocation may be made, and a call to UnFreeze will
 28350                                  ; return any so-allocated memory elements to FREE, for the true load. Note
 28351                                  ; that UnFreeze leaves HIDDEN elements allocated; it only frees FROZEN ones.
 28352                                  ;
 28353                                  ;******************************************************************************
 28354                                  
 28355                                  SWTCH	equ	'/'		; Switch character
 28356                                  
 28357                                  DOS_CHECK_STRATEGY  equ	5800h	; Int 21h, Func 58h, Svc 0 = check alloc strat
 28358                                  DOS_SET_STRATEGY    equ	5801h	; Int 21h, Func 58h, Svc 1 = set alloc strategy
 28359                                  DOS_CHECK_UMBLINK   equ	5802h	; Int 21h, Func 58h, Svc 2 = check link state
 28360                                  DOS_GET_UMBLINK	    equ 5802h ; 20/04/2019
 28361                                  DOS_SET_UMBLINK     equ	5803h	; Int 21h, Func 58h, Svc 3 = set link state
 28362                                  DOS_GET_DOS_LISTS   equ	  52h	; Int 21h, Func 52h = return list of lists
 28363                                  DOS_UMB_HEAD        equ	  8Ch	; Offset from ES (after func52h) to get UMBHead
 28364                                  
 28365                                  CR	equ	0Dh		; Carriage Return
 28366                                  LF	equ	0Ah		; Line Feed
 28367                                  TAB	equ	09h		; Tab character (^I)
 28368                                  
 28369                                  ; -----------------------------------------------------------------------------
 28370                                  ;*** InitVar - initializes all the variables used in ParseVar and HideUMBs
 28371                                  ; -----------------------------------------------------------------------------
 28372                                  ; ENTRY:       None
 28373                                  ; EXIT:        Variables listed in highvar.inc are initialized
 28374                                  ; ERROR EXIT:  None
 28375                                  ; USES:        Flags, variables in highvar.inc
 28376                                  ; -----------------------------------------------------------------------------
 28377                                  ; Note that element 0 references UMB 0 (conventional), not UMB 1.  Its contents
 28378                                  ; are largely ignored, but it is initialized nonetheless.
 28379                                  ; -----------------------------------------------------------------------------
 28380                                  
 28381                                  InitVar:
 28382                                  	;pushreg <ax, cx, di, es>
 28383                                  	push	ax
 28384                                  	push	cx
 28385                                  	push	di
 28386                                  	push	es
 28387                                  
 28388                                  	;dataseg es			;Point ES into appropriate data segment
 28389                                  	push	cs
 28390                                  	pop	es
 28391                                  
 28392                                  	xor	ax,ax
 28393                                  	mov	[es:fUmbTiny],al	;Shrink UMBs? (made 1 if /S given)
 28394                                  	mov	[es:fInHigh],al		;Set to 1 when DH/LH has been called
 28395                                  	mov	[es:SegLoad],ax		;Load Address (seg), used for DH only
 28396                                  	mov	byte [es:UmbLoad],UNSPECIFIED ; 0FFh
 28397                                  					;Later is the # of the 1st spec'd UMB
 28398                                  	mov	[es:fm_argc], al	;Start with zero args having been read
 28399                                  
 28400                                  	cld
 28401                                  
 28402                                  	mov	cx,MAXUMB ; 16		;For each entry
 28403                                  	mov	di,UmbUsed		;on the UmbUsed array,
 28404                                  	rep	stosb			;	Store 0
 28405                                  
 28406                                  	mov	cx,MAXUMB ; 16		;Okay... for each entry
 28407                                  	mov	di,UmbSize		;on the UmbSize array,
 28408                                  	rep	stosw			;	Store 0
 28409                                  
 28410                                  	;normseg es			; Return ES
 28411                                  
 28412                                  	;popreg	<es, di, cx, ax>
 28413                                  	pop	es
 28414                                  	pop	di
 28415                                  	pop	cx
 28416                                  	pop	ax	 	
 28417                                  
 28418                                  	retn
 28419                                  
 28420                                  ; -----------------------------------------------------------------------------
 28421                                  ;*** FixMem - scans the upper memory chain and concatenates adjacent free MCBs
 28422                                  ; -----------------------------------------------------------------------------
 28423                                  ; ENTRY   : None
 28424                                  ; EXIT    : None
 28425                                  ; ERROR   : None
 28426                                  ; USES    : Flags, fm_umb, fm_strat
 28427                                  ; -----------------------------------------------------------------------------
 28428                                  
 28429                                  FixMem:
 28430                                  	push	ax
 28431                                  	push	bx
 28432                                  	push	cx
 28433                                  	push	dx
 28434                                  	push	es
 28435                                  
 28436                                  	call	fm_link		; Link in UMBs
 28437                                  
 28438                                  	call	UmbHead		; Get first upper-memory MCB address (0x9FFF)
 28439                                  	jc	short fmX	; (if couldn't get it, leave now).
 28440                                  
 28441                                  	mov	es,ax		; It returns in AX, so move it to ES.
 28442                                  
 28443                                  ; - Walk MCB Chain ------------------------------------------------------------
 28444                                  
 28445                                  	xor	dx,dx		; We're keeping the address of the last MCB
 28446                                  	mov 	cx,dx		; in CX... and the last owner
 28447                                  	inc	dx		; in dx as we go through the loop:
 28448                                  
 28449                                  ; ------------------------------------------
 28450                                  ; FM10--DX  = last MCB's owner's PSP address
 28451                                  ;       CX  = last MCB's address (segment)
 28452                                  ; ------------------------------------------
 28453                                  
 28454                                  fm10:	mov	al,[es:ARENA.SIGNATURE] ; if 'Z', don't repeat loop
 28455                                  	mov	bx,[es:ARENA.OWNER]	; if not zero, do nothing
 28456                                  	or	bx,dx			; dx was owner of previous MCB
 28457                                  	jnz	short fm30		; If not both zero, don't cat.
 28458                                  
 28459                                  	; - Coalesce memory blocks at ES:00 and CX:00 -------------------------
 28460                                  
 28461                                  fm20:	mov	bx,[es:ARENA.SIZE]	; Grab this block's Size,
 28462                                  	mov	es,cx			; Go back to prev MCB's address
 28463                                  	mov	[es:ARENA.SIGNATURE],al ; & move the SECOND sig here
 28464                                  
 28465                                  	add	bx,[es:ARENA.SIZE]	; Size += first MCB's size
 28466                                  	add	bx,1			; And add one for the header
 28467                                  	mov	[es:ARENA.SIZE],bx	; Write the size
 28468                                  
 28469                                  	; ---------------------------------------------------------------------
 28470                                  
 28471                                  fm30:	mov	cx,es			; Put this address on the stack
 28472                                  	mov	dx,[es:ARENA.OWNER]	; And remember its owner
 28473                                  
 28474                                  	mov	bx,es			; Move to the next MCB
 28475                                  	add	bx,[es:ARENA.SIZE]
 28476                                  	inc	bx
 28477                                  	mov	es,bx
 28478                                  
 28479                                  	;cmp	al,'Z'
 28480                                  	cmp	al,arena_signature_end
 28481                                  	jne	short fm10		; If signature != 'Z', there are more.
 28482                                  fmX:	
 28483                                  	call	fm_unlink		; Unlink UMBs
 28484                                  
 28485                                  	pop	es
 28486                                  	pop	dx
 28487                                  	pop	cx
 28488                                  	pop	bx
 28489                                  	pop	ax
 28490                                  
 28491                                  	retn
 28492                                  
 28493                                  ; -----------------------------------------------------------------------------
 28494                                  ;*** fm_link - links UMBs not already linked in
 28495                                  ; -----------------------------------------------------------------------------
 28496                                  ; ENTRY:    None
 28497                                  ; EXIT:     fm_umb == 0 if not linked in previously, 1 if already linked in
 28498                                  ; ERROR:    None
 28499                                  ; USES:     AX, BX, fm_umb
 28500                                  ; -----------------------------------------------------------------------------
 28501                                  
 28502                                  fm_link:
 28503                                  	mov	ax,DOS_CHECK_UMBLINK ; 5802h
 28504                                  	int	21h			; Current link-state is now in al
 28505                                  
 28506                                  	;putdata fm_umb,al		; So store it in fm_umb for later
 28507                                  	;
 28508                                  	;push	es
 28509                                  	;push	cs
 28510                                  	;pop	es
 28511                                  	;mov	[es:fm_umb],al
 28512                                  	;pop	es
 28513                                  	
 28514                                  	mov	[cs:fm_umb],al
 28515                                  
 28516                                  	mov	ax,DOS_SET_UMBLINK ; 5803h
 28517                                  	mov	bx,1
 28518                                  	int	21h
 28519                                  	retn
 28520                                  
 28521                                  ; -----------------------------------------------------------------------------
 28522                                  ;*** fm_unlink - unlinks UMBs if fm_umb is set to 0
 28523                                  ; -----------------------------------------------------------------------------
 28524                                  ; ENTRY:    fm_umb == 1 : leave linked, else unlink
 28525                                  ; EXIT:     None
 28526                                  ; ERROR:    None
 28527                                  ; USES:     AX, BX
 28528                                  ; -----------------------------------------------------------------------------
 28529                                  
 28530                                  fm_unlink:
 28531                                  	xor	bx,bx
 28532                                  	
 28533                                  	;getdata bl,fm_umb		; fm_umb already has the old link-state
 28534                                  	;
 28535                                  	;push	ds
 28536                                  	;push	cs
 28537                                  	;pop	ds
 28538                                  	;mov	bl,[fm_umb]	
 28539                                  	;pop	ds
 28540                                  	
 28541                                  	mov	bl,[cs:fm_umb]
 28542                                  
 28543                                  	mov	ax,DOS_SET_UMBLINK ; 5803h
 28544                                  	int	21h			; so just use that, and call int 21h
 28545                                  	retn
 28546                                  
 28547                                  ; 08/04/2019 - Retro DOS v4.0
 28548                                  
 28549                                  ; -----------------------------------------------------------------------------
 28550                                  ;*** ParseVar - parses [/S][/L:umb[,size][;umb[,size]]*] and builds the table
 28551                                  ; laid out in highvar.inc
 28552                                  ; -----------------------------------------------------------------------------
 28553                                  ; ENTRY:    ES:SI points to command tail of LoadHigh/DeviceHigh (whitespace ok)
 28554                                  ; EXIT:     ES:SI points to first character in child program name
 28555                                  ; ERROR:    ES:SI points to character which caused error, carry set, AX == code
 28556                                  ; USES:     ES:SI, AX, flags, variables in highvar.inc
 28557                                  ; -----------------------------------------------------------------------------
 28558                                  ; Error codes (in AX if carry set on return):
 28559                                  ;
 28560                                  PV_InvArg	equ	1	; Invalid argument passed
 28561                                  PV_BadUMB	equ	2	; Bad UMB number passed (duplicate?)
 28562                                  PV_InvSwt	equ	3	; Unrecognized switch passed
 28563                                  ;
 28564                                  ; This routine exects ES:SI to point to a string much like the following:
 28565                                  ;    "/S/L:1,200;2 module options"
 28566                                  ; Optionally, the string can begin with whitespace; neither /S nor /L is
 28567                                  ; required, though that's what this routine is supposed to parse.
 28568                                  ;
 28569                                  optS		equ	'S'	; /S
 28570                                  optL		equ	'L'	; /L:...
 28571                                  ;
 28572                                  ; -----------------------------------------------------------------------------
 28573                                  ; LoadHigh has a list of arguments, returned by cparse, which is used to create
 28574                                  ; a command-line for spawning a child process. For a typical LH command, say,
 28575                                  ;     lh /l:1,1000;2 print/d:lpt2
 28576                                  ; the arguments would look like (one per line):
 28577                                  ;     lh
 28578                                  ;     /l
 28579                                  ;     1
 28580                                  ;     1000
 28581                                  ;     2
 28582                                  ;     print
 28583                                  ;     /d
 28584                                  ;     :lpt2
 28585                                  ; In short, if "print" were, say, "43", there'd be no way to determine which
 28586                                  ; arg was the filename. So, inside this routine, we keep a running counter
 28587                                  ; of the number of arguments LH will need to skip in order to get to the
 28588                                  ; program name. The "lh" is implicit--it'll always have to skip that. So if
 28589                                  ; there's no "/l" or "/s", fm_argc will be 0 ... other than that, 1 is added
 28590                                  ; for:
 28591                                  ;    Each /L
 28592                                  ;    Each /S (there should be only one)
 28593                                  ;    Each UMB number (they follow ":" or ";")
 28594                                  ;    Each UMB size   (they follow ",")
 28595                                  ; So, in the above example, fm_argc would be 4-- and LH would skip right to
 28596                                  ; "print".  Note that InitVar initializes fm_argc to zero.
 28597                                  ; -----------------------------------------------------------------------------
 28598                                  
 28599                                  ParseVar:
 28600                                  	;pushreg <di, ds, es>
 28601                                  	push	di
 28602                                  	push	ds
 28603                                  	push	es
 28604                                  
 28605                                  	push	es		; Make DS:SI point to it, as well as ES:SI
 28606                                  	pop	ds		; (regardless if we're in devhigh or loadhigh)
 28607                                  	cld
 28608                                  
 28609                                  ; ------------------------------------------------
 28610                                  ; PV10--ES:SI = any whitespace on the command-line
 28611                                  ; ------------------------------------------------
 28612                                  
 28613                                  pv10:	lodsb			; here, ES:SI=="  /L..."--must eat whitespace
 28614                                  	call	isWhite
 28615                                  	jz	short pv10	;       ES:SI==" /L..."--keep eating.
 28616                                  	;cmp	al,'/'
 28617                                  	cmp	al,SWTCH
 28618                                  	je	short pv20	;       ES:SI=="/L..."--go process a switch
 28619                                  
 28620                                  	dec	si		; Backup--it's now "odule options", and we need
 28621                                  	clc			; that "m" we just read (or whatever it is).
 28622                                  	jmp	short pvX	; Then return with carry clear == we're done.
 28623                                  
 28624                                  pv20:	lodsb			; Just read 'S' or 'L', hopefully
 28625                                  	;toUpper al		; So we make it upper-case, and...
 28626                                  	and	al,0DFh
 28627                                  	;cmp	al,'S'
 28628                                  	cmp	al,optS		; just read 'S'?
 28629                                  	jne	short pv30
 28630                                  
 28631                                  	;call	incArgc		; If it's /S, it's another arg for LH to skip.
 28632                                  	inc	byte [cs:fm_argc] ; 19/04/2019
 28633                                  
 28634                                  	;putdata fUmbTiny,1	; /S, so ES:SI=="  /L..." or " module opts", or
 28635                                  	;
 28636                                  	;push	es
 28637                                  	;push	cs
 28638                                  	;pop	es
 28639                                  	;mov	[es:fUmbTiny],1	
 28640                                  	;pop	es
 28641                                  
 28642                                  	mov	byte [cs:fUmbTiny],1
 28643                                  
 28644                                  	jmp	short pv10	; possibly even "/L...".
 28645                                  
 28646                                  pv30:	;cmp	al,'L'
 28647                                  	cmp	al,optL		; If it's not 'L' either, then 'tis a bad
 28648                                  	jne	short pvE1		; switch!
 28649                                  
 28650                                  	;call	incArgc		; If it's /L, it's another arg for LH to skip.
 28651                                  	inc	byte [cs:fm_argc] ; 19/04/2019
 28652                                  
 28653                                  	call	parseL
 28654                                  	jnc	short pv10	; If no carry, go back and look for more
 28655                                  
 28656                                  	dec	si		; Else, back up and exit.
 28657                                  	jmp	short pvErr	; AX has already been set by parseL
 28658                                  
 28659                                  pvE1:	;mov	ax,3
 28660                                  	mov	ax,PV_InvSwt	; Unrecognized switch passed
 28661                                  pvErr:	dec	si
 28662                                  	dec	si
 28663                                  	stc
 28664                                  pvX:	;popreg	<es, ds, di>
 28665                                  	pop	es
 28666                                  	pop	ds
 28667                                  	pop	di
 28668                                  	retn
 28669                                  
 28670                                  ; -----------------------------------------------------------------------------
 28671                                  ;*** parseL - parses ":nnnn[,nnnn][;nnnn[,nnnn]]*" for ParseVar
 28672                                  ; -----------------------------------------------------------------------------
 28673                                  ; ENTRY:    ES:SI points to colon
 28674                                  ; EXIT:     ES:SI points to first character not parsed
 28675                                  ; ERROR:    Carry set; rewind three characters and return (see ParseVar)
 28676                                  ; USES:     ES:SI, flags, AX, CX, DX, variables in highvar.inc
 28677                                  ; -----------------------------------------------------------------------------
 28678                                  ; If the string here is terminated with anything other than whitespace or a
 28679                                  ; switchchar (perhaps it's /S or another /L:... ), then we return with carry
 28680                                  ; set, indicating that they've screwed up the syntax.  The 3-character rewind
 28681                                  ; makes sure the app /L: is reported as being the culprit.
 28682                                  ; -----------------------------------------------------------------------------
 28683                                  
 28684                                  parseL:
 28685                                  	lodsb
 28686                                  	cmp	al,':'		; Make sure they did /L:
 28687                                  	jne	short plE1	; If they didn't, return with carry set.
 28688                                  
 28689                                  ; ------------------------------------------
 28690                                  ; PL10--ES:SI = a UMB number, after /L: or ;
 28691                                  ; ------------------------------------------
 28692                                  
 28693                                  pl10:	call	GetXNum		; After this, 'tis ",size" or ";umb" or " mod"
 28694                                  	jc	short plE2	; And error if it's a bad number.
 28695                                  	call	convUMB		; Convert any address to a UMB number
 28696                                  
 28697                                  	mov	cl,al		; Remember the UMB number
 28698                                  	call	stowUMB		; Mark this UMB # as used;
 28699                                  	jc	short plE2	; If it was already marked, it'll error
 28700                                  
 28701                                  	;call	incArgc		; Each UMB number is another arg for LH to skip
 28702                                  	inc	byte [cs:fm_argc] ; 08/04/2019 - Retro DOS v4.0
 28703                                  
 28704                                  	lodsb
 28705                                  	cmp	al,';'		; Did "umb;" ?
 28706                                  	je	short pl10	; Yep: go back and get another UMB.
 28707                                  
 28708                                  	call	isWhite		; Did "umb " ?
 28709                                  	jz	short plX	; Yep: return (it'll go back to whitespace)
 28710                                  
 28711                                  	call	isEOL		; Did "umb" ?
 28712                                  	jz	short plSwX	; If so, backup and exit like everything's ok
 28713                                  
 28714                                  	;cmp	al,'/'
 28715                                  	cmp	al,SWTCH 	; Did "umb/" ? (as in, "/L:1,100;2/S")
 28716                                  	je	short plSwX	; If so, back up ES:SI one character and return
 28717                                  
 28718                                  	cmp	al,','		; Did "umb," ?
 28719                                  	jne	short plE1	; Just what the heck DID they do? Return error.
 28720                                  
 28721                                  ; --- Read a size -------------------------------------------------------------
 28722                                  
 28723                                  	call	GetXNum		; Stop on "size;" or "size " or anything else
 28724                                  	jc	short plE1	; And error if it's a bad size.
 28725                                  
 28726                                  	call	toPara		; Convert from bytes to paragraphs
 28727                                  
 28728                                  	call	stowSiz		; CL still has the UMB number for this routine
 28729                                  
 28730                                  	;call	incArgc		; Each UMB size is another arg for LH to skip
 28731                                  	inc	byte [cs:fm_argc] ; 08/04/2019 - Retro DOS v4.0
 28732                                  
 28733                                  	lodsb
 28734                                  	cmp	al,';'		; They did "umb,size;", so get another UMB.
 28735                                  	je	short pl10	;
 28736                                  
 28737                                  	call	isWhite		; Did it end with whitespace?
 28738                                  	jz	short plX	; If so, we're done here--go back.
 28739                                  
 28740                                  	call	isEOL		; Did they do "umb,size" and end??? (stupid)
 28741                                  	jz	short plSwX	; If so, backup and exit like everything's ok
 28742                                  
 28743                                  	;cmp	al,'/'
 28744                                  	cmp	al,SWTCH	; Did they do "umb,size/" ?
 28745                                  	je	short plSwX	; If so, again, we're done here.
 28746                                  plE1:	
 28747                                  	;mov	ax,1
 28748                                  	mov	ax,PV_InvArg	; If not, we don't know WHAT they did...
 28749                                  	dec	si
 28750                                  	stc
 28751                                  	retn
 28752                                  
 28753                                  plE2:	;mov	ax,2
 28754                                  	mov	ax,PV_BadUMB	; In this case, they've specified a UMB twice
 28755                                  	; 12/12/2022
 28756                                  	; cf=1
 28757                                  	;stc
 28758                                  	retn
 28759                                  plSwX:	
 28760                                  	dec	si		; If we hit a '/' character, back up one char
 28761                                  				; so the whitespace checker will see it too.
 28762                                  plX:	; 12/12/2022
 28763                                  	; cf=0
 28764                                  	;clc			; Then just return with carry clear, so
 28765                                  	retn			; ParseVar will go about its business.
 28766                                  
 28767                                  ; -----------------------------------------------------------------------------
 28768                                  ;*** incArgc - increments fm_argc, for use with LoadHigh command-line parsing
 28769                                  ; -----------------------------------------------------------------------------
 28770                                  ; ENTRY:    None
 28771                                  ; EXIT:     None
 28772                                  ; ERROR:    None
 28773                                  ; USES:     fm_argc, flags
 28774                                  ; -----------------------------------------------------------------------------
 28775                                  
 28776                                  ;incArgc:
 28777                                  	;push	ax
 28778                                  
 28779                                  	;;getdata al, fm_argc	; Obtain previous value of fm_argc,
 28780                                  
 28781                                  	;mov	al,[cs:fm_argc]
 28782                                  
 28783                                  	;inc	al		; Increment it,
 28784                                  
 28785                                  	;;putdata fm_argc, al	; And store it right back.
 28786                                  
 28787                                  	;mov	[cs:fm_argc],al
 28788                                  
 28789                                  	;pop	ax
 28790                                  	;retn
 28791                                  
 28792                                  ; -----------------------------------------------------------------------------
 28793                                  ;*** isEOL - returns with ZF set if AL contains CR or LF, or 0
 28794                                  ; -----------------------------------------------------------------------------
 28795                                  ; ENTRY:    AL contains character to test
 28796                                  ; EXIT:     ZF set iff AL contains CR or LF, or 0
 28797                                  ; ERROR:    None
 28798                                  ; USES:     ZF
 28799                                  ; -----------------------------------------------------------------------------
 28800                                  
 28801                                  isEOL:
 28802                                  	cmp	al,0		; Null-terminator
 28803                                  	je	short ieX
 28804                                  	cmp	al,CR ; 0Dh	; Carriage Return
 28805                                  	je	short ieX
 28806                                  	cmp	al,LF ; 0Ah	; LineFeed
 28807                                  ieX:	
 28808                                  	retn
 28809                                  
 28810                                  ; -----------------------------------------------------------------------------
 28811                                  ;*** isWhite - returns with ZF set if AL contains whitespace (or "=")
 28812                                  ; -----------------------------------------------------------------------------
 28813                                  ; ENTRY:    AL contains character to test
 28814                                  ; EXIT:     ZF set iff AL contains space, tab, or equals
 28815                                  ; ERROR:    None
 28816                                  ; USES:     ZF
 28817                                  ; -----------------------------------------------------------------------------
 28818                                  
 28819                                  isWhite:
 28820                                  	cmp	al,' '		; Space
 28821                                  	je	short iwX
 28822                                  	cmp	al,'='		; Equals (treat as whitespace)
 28823                                  	je	short iwX
 28824                                  	cmp	al,tab ; 9	; Tab
 28825                                  iwX:	
 28826                                  	retn
 28827                                  
 28828                                  ; -----------------------------------------------------------------------------
 28829                                  ;*** unMarkUMB - marks a given UMB as unused, even if previously marked used
 28830                                  ; -----------------------------------------------------------------------------
 28831                                  ; ENTRY:    AL contains UMB number
 28832                                  ; EXIT:     None
 28833                                  ; ERROR:    None
 28834                                  ; USES:     Flags, variables in highvar.inc
 28835                                  ; -----------------------------------------------------------------------------
 28836                                  
 28837                                  unMarkUMB:
 28838                                  	push	ax
 28839                                  	push	bx
 28840                                  	push	di
 28841                                  	push	es
 28842                                  
 28843                                  	push	cs
 28844                                  	pop	es
 28845                                  
 28846                                  	xor	ah,ah
 28847                                  	mov	bx,ax
 28848                                  
 28849                                  	; 19/04/2019
 28850                                  	
 28851                                  	;mov	byte [es:bx+UmbUsed],0
 28852                                  	mov	[es:bx+UmbUsed],ah ; 0
 28853                                  
 28854                                  	cmp	[es:UmbLoad],al
 28855                                  	jne	short umu10
 28856                                  
 28857                                  	;mov	[es:UmbLoad],0	; If unmarked the load UMB, load into convent.
 28858                                  	mov	[es:UmbLoad],ah ; 0
 28859                                  umu10:	
 28860                                  	pop	es
 28861                                  	pop	di
 28862                                  	pop	bx
 28863                                  	pop	ax
 28864                                  	retn
 28865                                  
 28866                                  ; -----------------------------------------------------------------------------
 28867                                  ;*** stowUMB - marks a given UMB as used, if it hasn't been so marked before
 28868                                  ;            -- accepts a UMB # in AL, and makes sure it hasn't yet been
 28869                                  ; listed in the /L:... chain. If it's the first one specified, it sets UmbLoad
 28870                                  ; to that UMB #... and in any case, it marks the UMB as specified.
 28871                                  ; -----------------------------------------------------------------------------
 28872                                  ; ENTRY:    AL contains UMB number, as specified by the user
 28873                                  ; EXIT:     None
 28874                                  ; ERROR:    Carry set if UMB # is less than 0 or >= MAXUMB (see highvar.inc)
 28875                                  ; USES:     AX, Flags, variables in highvar.inc
 28876                                  ; -----------------------------------------------------------------------------
 28877                                  
 28878                                  stowUMB:
 28879                                  	cmp	al,MAXUMB ; 16
 28880                                  	jb	short su10
 28881                                  	stc
 28882                                  	retn			; Ooops-- UMB>=MAXUMB
 28883                                  su10:	
 28884                                  	push	bx
 28885                                  	push	di
 28886                                  	push	si
 28887                                  	push	ds
 28888                                  	push	es
 28889                                  	push	cs
 28890                                  	pop	es
 28891                                  	push	cs
 28892                                  	pop	ds
 28893                                  	
 28894                                  	;cmp	byte [UmbLoad],0FFh
 28895                                  	cmp	byte [UmbLoad],UNSPECIFIED ; If this, we haven't been here before
 28896                                  	jne	short su20
 28897                                  	mov	[UmbLoad],al	; So remember this UMB as the load UMB slot.
 28898                                  su20:	
 28899                                  	or	al,al		; If they gave UMB 0, there's really nothing
 28900                                  	jz	short su30	; that we should do here.
 28901                                  
 28902                                  	mov	bl,al
 28903                                  	xor	bh,bh
 28904                                  	mov	ax,1		; Now, AX = 1, and BX = UMB Number
 28905                                  
 28906                                  	xchg	[es:bx+UmbUsed],al
 28907                                  
 28908                                  	or	al,al		; If it was already 1, then al==1... and that
 28909                                  	jz	short su30	; means an error.
 28910                                  
 28911                                  	stc			; OOOPS!  This one's been used before.  :(
 28912                                  su30:	
 28913                                  	pop	es
 28914                                  	pop	ds
 28915                                  	pop	si
 28916                                  	pop	di
 28917                                  	pop	bx
 28918                                  	retn
 28919                                  
 28920                                  ; -----------------------------------------------------------------------------
 28921                                  ;*** stowSiz - marks a given UMB as having a given minimum size
 28922                                  ; -----------------------------------------------------------------------------
 28923                                  ; ENTRY:    CL contains UMB number, AX contains size
 28924                                  ; EXIT:     None
 28925                                  ; ERROR:    None
 28926                                  ; USES:     AX, DX, Flags, variables in highvar.inc
 28927                                  ; -----------------------------------------------------------------------------
 28928                                  
 28929                                  ; 13/05/2019
 28930                                  
 28931                                  stowSiz:
 28932                                  	push	bx
 28933                                  	;push	di ; ?
 28934                                  	push	es
 28935                                  
 28936                                  	push	cs
 28937                                  	pop	es	
 28938                                  
 28939                                  	mov	bl,cl			; Now bl==UMB number, AX==size
 28940                                  	mov	bh,0			;     bx==UMB number, AX==size
 28941                                  	shl	bl,1			;     bx==offset into array, AX=size
 28942                                  	mov	[es:bx+UmbSize],ax	; Store the size
 28943                                  	
 28944                                  	pop	es
 28945                                  	;pop	di ; ?
 28946                                  	pop	bx
 28947                                  
 28948                                  	retn
 28949                                  
 28950                                  ; -----------------------------------------------------------------------------
 28951                                  ;*** toDigit - converts a character-digit to its binary counterpart
 28952                                  ;            -- verifies that CL contains a valid character-digit; if so, it
 28953                                  ; changes CL to its counterpart binary digit ((CL-'0') or (CL-'A'+10)).
 28954                                  ; A-F are considered valid iff gnradix is 16.
 28955                                  ; -----------------------------------------------------------------------------
 28956                                  ; ENTRY:    CL contains a digit ('0' to '9' or, if gnradix==16, 'A' to 'F')
 28957                                  ; EXIT:     CL contains digit in binary (0 to 9 or, if gnradix==16, 0 to 15)
 28958                                  ; ERROR:    Carry set indicates invalid digit; carry clear indicates good digit
 28959                                  ; USES:     CL, Flags
 28960                                  ; -----------------------------------------------------------------------------
 28961                                  ; If the string is preceeded with "0x", the value is read as hexadecimal; else,
 28962                                  ; as decimal. After a read, you may check the radix by examining gnradix--it
 28963                                  ; will be 10 or 16.
 28964                                  ; -----------------------------------------------------------------------------
 28965                                  
 28966                                  gnradix:
 28967                                  	dw	0		; Must be a word--16x16 multiplication
 28968                                  
 28969                                  toDigit:
 28970                                  	cmp	word [cs:gnradix],16
 28971                                  	jne	short td20	; Don't check hex digits if radix isn't 16
 28972                                  
 28973                                  toDigit_hex:
 28974                                  	cmp	cl,'a'	; 61h
 28975                                  	jb	short td10
 28976                                  	cmp	cl,'f'	; 66h
 28977                                  	ja	short tdE	; Nothing valid above 'z' at all...
 28978                                  	sub	cl,'a'-10 ; 57h	; Make 'a'==10 and return.
 28979                                  	;clc			; <- CLC is implicit from last SUB
 28980                                  	retn
 28981                                  td10:	
 28982                                  	cmp	cl,'A'  ; 41h
 28983                                  	jb	short td20	; Below 'A'?  Not a letter...
 28984                                  	cmp	cl,'F'	; 46h
 28985                                  	ja	short tdE	; Above 'F'?  Not a digit.
 28986                                  	sub	cl,'A'-10 ; 37h	; Make 'A'==10 and return.
 28987                                  	;clc			; <- CLC is implicit from last SUB
 28988                                  	retn
 28989                                  toDigit_dec:
 28990                                  td20:	
 28991                                  	cmp	cl,'0'		; If less than zero,
 28992                                  	;jb	short tdE	; Done.
 28993                                  	jb	short tdEr ; 08/04/2019
 28994                                  	cmp	cl,'9'		; Or, if greater than nine,
 28995                                  	ja	short tdE	; Done.
 28996                                  	sub	cl,'0'	; 30h	; Okay--make '0'==0 and return.
 28997                                  	;clc			; <- CLC is implicit from last SUB
 28998                                  	retn
 28999                                  tdE:	
 29000                                  	stc
 29001                                  tdEr:		; 08/04/2019 - Retro DOS v4.0	
 29002                                  	retn
 29003                                  
 29004                                  ; -----------------------------------------------------------------------------
 29005                                  ;*** GetXNum - reads a 32-bit ASCII number at ES:SI and returns it in DX:AX
 29006                                  ; -----------------------------------------------------------------------------
 29007                                  ; ENTRY:    ES:SI points to an ascii string to scan
 29008                                  ; EXIT:     ES:SI moved to first invalid digit, DX:AX contains value read
 29009                                  ; ERROR:    Carry set if # is too big, or has no digits (EOL possibly)
 29010                                  ; USES:     ES:SI, DX, AX, Flags, gnradix
 29011                                  ; -----------------------------------------------------------------------------
 29012                                  ; If the string is preceeded with "0x", the value is read as hexadecimal; else,
 29013                                  ; as decimal. After a read, you may check the radix by examining gnradix--it
 29014                                  ; will be 10 or 16.
 29015                                  ; -----------------------------------------------------------------------------
 29016                                  
 29017                                  ; 08/04/2019 - Retro DOS v4.0
 29018                                  
 29019                                  GetXNum:
 29020                                  	;pushreg <bx, cx, ds>
 29021                                  	push	bx
 29022                                  	push	cx
 29023                                  	push	ds
 29024                                  
 29025                                  	cld
 29026                                  	xor	ax,ax
 29027                                  	xor	bx,bx
 29028                                  	xor	cx,cx
 29029                                  	xor	dx,dx			; Start with 0 (makes sense)
 29030                                  
 29031                                  	mov	word [cs:gnradix],10	; And default to a radix of 10 (dec)
 29032                                  
 29033                                  	mov	cl,[es:si]		; Now AX=0, BX=0, CH=0/CL=char, DX=0
 29034                                  	;call	toDigit
 29035                                  	call	toDigit_dec
 29036                                  	jc	short gxnE		; If it's not a digit, leave now.
 29037                                  
 29038                                  	or	cl,cl
 29039                                  	jnz	short gxn20		; Doesn't have '0x'
 29040                                  	mov	cl,[es:si+1]
 29041                                  	cmp	cl,'x'			; Either 'x'...
 29042                                  	je	short gxn10
 29043                                  	cmp	cl,'X'			; ...or 'X' means it's hexadecimal
 29044                                  	jne	short gxn20
 29045                                  
 29046                                  gxn10:	
 29047                                  	mov	word [cs:gnradix], 16
 29048                                  	inc	si			; Since we read "0x", march over it.
 29049                                  	inc	si
 29050                                  
 29051                                  ; ------------------------------------------------------
 29052                                  ; GXN20--ES:SI = a digit in a number; if not, we're done
 29053                                  ;        DX:AX = current total
 29054                                  ;        BX    = 0
 29055                                  ;        CH    = 0
 29056                                  ; ------------------------------------------------------
 29057                                  
 29058                                  gxn20:	
 29059                                  	mov	cl,[es:si]	; Now DX:AX=current total, CH=0/CL=char
 29060                                  	inc	si
 29061                                  
 29062                                  	call	toDigit		; Accepts only valid digits, A-F -> 10-16
 29063                                  	jc	short gxnQ	; <- Ah... wasn't a digit. Stop.
 29064                                  
 29065                                  	call	mul32		; Multiply DX:AX by gnradix
 29066                                  	jc	short gxnX	; (if it's too big, error out)
 29067                                  
 29068                                  	add	ax,cx		; Add the digit
 29069                                  	adc	dx,bx		; (BX is 0!)--Adds 1 iff last add wrapped
 29070                                  	;jc	short gxnX	; If _that_ wrapped, it's too big.
 29071                                  	;jmp	short gxn20
 29072                                  	jnc	short gxn20
 29073                                  gxnE:	
 29074                                  	;stc			; In this case, we need to set the carry
 29075                                  	jmp	short gxnX	; and leave--there were no digits given.
 29076                                  gxnQ:	
 29077                                  	dec	si		; Don't read in the offensive character.
 29078                                  	clc			; And clear carry, so they know it's okay.
 29079                                  gxnX:	
 29080                                  	pop	ds
 29081                                  	pop	cx
 29082                                  	pop	bx
 29083                                  	retn
 29084                                  
 29085                                  ; -----------------------------------------------------------------------------
 29086                                  ;*** mul32 - multiplies the number in DX:AX by gnradix
 29087                                  ; -----------------------------------------------------------------------------
 29088                                  ; ENTRY:   DX:AX = the number to be multiplied, BX = 0, gnradix = multiplier
 29089                                  ; EXIT:    DX:AX has been multiplied by gnradix if carry clear; BX still 0
 29090                                  ; ERROR:   Carry set if number was too large
 29091                                  ; USES:    Flags, AX, DX
 29092                                  ; -----------------------------------------------------------------------------
 29093                                  
 29094                                  mul32:
 29095                                  	push	ax		; DX=old:hi, AX=old:lo, TOS=old:lo, BX=0
 29096                                  	mov	ax,dx		; DX=old:hi, AX=old:hi, TOS=old:lo, BX=0
 29097                                  	mul	word [cs:gnradix] ; DX=?, AX=new:hi, TOS=old:lo, BX=0
 29098                                  	jc	short m32E	; Too big?
 29099                                  
 29100                                  	mov	dx,ax		; DX=new:hi, AX=new:hi, TOS=old:lo, BX=0
 29101                                  	pop	ax		; DX=new:hi, AX=old:lo, TOS=orig, BX=0
 29102                                  
 29103                                  	xchg	dx,bx		; DX=0, AX=old:lo, TOS=orig, BX=new:hi
 29104                                  	mul	word [cs:gnradix] ; DX=carry,  AX=new:lo, TOS=orig, BX=new:hi
 29105                                  	xchg	dx,bx		; DX=new:hi, AX=new:lo, TOS=orig, BX=carry
 29106                                  	add	dx,bx		; DX=new:hi, AX=new:lo, TOS=orig, BX=carry
 29107                                  	xor	bx,bx		; DX=new:hi, AX=new:lo, TOS=orig, BX=0
 29108                                  	retn
 29109                                  m32E:	
 29110                                  	pop	ax
 29111                                  	retn
 29112                                  
 29113                                  ; -----------------------------------------------------------------------------
 29114                                  ;*** toPara - divides DX:AX by 16; result in AX only (discards extra DX data)
 29115                                  ; -----------------------------------------------------------------------------
 29116                                  ; ENTRY:   DX:AX = the number to be divided
 29117                                  ; EXIT:    Interpereting DX:AX as bytes, AX=paragraph equivalent, 0xFFFF max
 29118                                  ; ERROR:   None
 29119                                  ; USES:    Flags, AX, DX
 29120                                  ; -----------------------------------------------------------------------------
 29121                                  ; Note: The 386 has a 32-bit SHR, which would work perfectly for this... but we
 29122                                  ;       can't ensure a 386 host machine. Sorry.
 29123                                  ; -----------------------------------------------------------------------------
 29124                                  
 29125                                  toPara:
 29126                                  	push	cx		; DX:AX=HHHH hhhh hhhh hhhh:LLLL llll llll llll
 29127                                  
 29128                                  	mov	cl,4		;
 29129                                  	shr	ax,cl		; DX:AX=HHHH hhhh hhhh hhhh:0000 LLLL llll llll
 29130                                  	xchg	ax,dx		; DX:AX=0000 LLLL llll llll:HHHH hhhh hhhh hhhh
 29131                                  	mov	cl,12
 29132                                  	shl	ax,cl		; DX:AX=0000 LLLL llll llll:hhhh 0000 0000 0000
 29133                                  	or	ax,dx		;    AX=hhhh LLLL llll llll
 29134                                  
 29135                                  	pop	cx
 29136                                  	retn
 29137                                  
 29138                                  ; -----------------------------------------------------------------------------
 29139                                  ;*** UmbHead - returns in AX the address of the first UMB block (0x9FFF)
 29140                                  ; -----------------------------------------------------------------------------
 29141                                  ; ENTRY:  Nothing
 29142                                  ; EXIT:   AX contains 0x9FFF for most systems
 29143                                  ; ERROR:  Carry set if pointer is 0xFFFF (if not set up yet--DH runs into this)
 29144                                  ; USES:   Flags, AX
 29145                                  ; -----------------------------------------------------------------------------
 29146                                  ; Early in the boot-cycle, the pointer used to obtain this value isn't set up;
 29147                                  ; to be precise, before a UMB provider is around. In this event, the pointer
 29148                                  ; is always set to 0xFFFF; it changes once a provider is around. On most
 29149                                  ; machines (all of 'em I've seen), it changes to 0x9FFF at that point.
 29150                                  ; -----------------------------------------------------------------------------
 29151                                  
 29152                                  UmbHead:
 29153                                  	; 13/05/2019 (because of callers, pushs & pops are not needed here)
 29154                                  
 29155                                  	;push	si ; ?
 29156                                  	;push	ds ; ? 
 29157                                  	;push	es
 29158                                  	;push	bx ; *	
 29159                                  
 29160                                  	; 09/04/2019
 29161                                  	; !!! No need to save es,bx,ds,si above !!! (es,bx are changed here)
 29162                                  
 29163                                  	mov	ah,GET_IN_VARS		; Call int 21h, function 52h...
 29164                                  	int	21h
 29165                                  
 29166                                  	mov	ax,[es:DOS_UMB_HEAD]	; And read what's in ES:[008C]
 29167                                  	cmp	ax,0FFFFh
 29168                                  	je	short uhE		; If it's 0xFFFF, it's an error...
 29169                                  
 29170                                  	clc				; Else, it isn't (CLC done by prev cmp)
 29171                                  	;jmp	short uhX
 29172                                  	; 12/12/2022
 29173                                  	retn
 29174                                  uhE:	
 29175                                  	stc
 29176                                  uhX:	
 29177                                  	;pop	bx ; *
 29178                                  	;pop	es
 29179                                  	;pop	ds ; ?
 29180                                  	;pop	si ; ?
 29181                                  	retn
 29182                                  
 29183                                  ; -----------------------------------------------------------------------------
 29184                                  ;*** isSysMCB - sets ZF if ES points to an MCB owned by "SC" + (8 or 9)
 29185                                  ; -----------------------------------------------------------------------------
 29186                                  ; ENTRY:  ES:0 should point to a valid MCB
 29187                                  ; EXIT:   ZF set if owned by SC+8 or SC+9 (for japan)
 29188                                  ; USES:   Flags
 29189                                  ; -----------------------------------------------------------------------------
 29190                                  
 29191                                  isSysMCB:
 29192                                  	;push	ax
 29193                                  
 29194                                  	;mov	ax,[es:ARENA.OWNER]	; Check the owner...
 29195                                  	;cmp	ax,SystemPSPOwner	; 8 (for US OR Japan) is valid
 29196                                  	;je	short ism10
 29197                                  	;cmp	ax,JapanPSPOwner	; 9 (for Japan) is valid
 29198                                  	;;je	short ism10
 29199                                  	;;jmp	short ismX		; Anything else isn't.
 29200                                  	;jne	short ismX
 29201                                  	cmp	word [es:ARENA.OWNER],SystemPSPOwner ; 8  ; 09/04/2019
 29202                                  	jne	short ismX 
 29203                                  ism10:	
 29204                                  	;mov	ax,[es:ARENA.NAME]	; Check the name...
 29205                                  	;cmp	ax,'SC' ; 4353h
 29206                                  	cmp	word [es:ARENA.NAME],'SC'
 29207                                  ismX:	
 29208                                  	;pop	ax
 29209                                  	retn
 29210                                  
 29211                                  ; 09/04/2019 - Retro DOS v4.0
 29212                                  
 29213                                  ; -----------------------------------------------------------------------------
 29214                                  ;*** AddrToUmb - converts a segment address in AX to its appropriate UMB number
 29215                                  ; -----------------------------------------------------------------------------
 29216                                  ; ENTRY:  AX contains a segment address
 29217                                  ; EXIT:   AX will contain the UMB number which contains the address (0==conv)
 29218                                  ; ERROR:  If the address is above UM Range, AX will return as FFFF.
 29219                                  ; USES:   Flags, AX
 29220                                  ; -----------------------------------------------------------------------------
 29221                                  ; An address in the following areas is treated as:
 29222                                  ;    0      <-> umbhead (0x9FFF)          = Conventional memory
 29223                                  ;    0x9FFF <-> addr of first UM sys MCB  = UMB #1
 29224                                  ;      ...
 29225                                  ;    addr of last UM sys MCB <-> TOM      = invalid; returns #0xFFFF
 29226                                  ; -----------------------------------------------------------------------------
 29227                                  
 29228                                  AddrToUmb:
 29229                                  	push	cx
 29230                                  	push	dx
 29231                                  	push	es
 29232                                  
 29233                                  	mov	dx,ax		; DX = address to search for
 29234                                  
 29235                                  	call	UmbHead		; AX = first segment
 29236                                  	jc	short atuE	; If it couldn't get it, error out.
 29237                                  
 29238                                  	mov	es,ax		; ES = first UMB segment
 29239                                  	xor	cx,cx		; Pretend we're on UMB 0 for now... (cx = UMB#)
 29240                                  
 29241                                  ; ----------------------------------------
 29242                                  ; ATU10--ES - Current MCB address
 29243                                  ;        DX - Address given for conversion
 29244                                  ;        CX - Current UMB #
 29245                                  ; ----------------------------------------
 29246                                  
 29247                                  atu10:	mov	ax,es
 29248                                          cmp	ax,dx		; Present segment >= given segment?
 29249                                  	jae	short atuX	; Yep--done.
 29250                                  
 29251                                  	call	isSysMCB	; Returns with ZF set if this is a system MCB
 29252                                  	jnz	short atu20
 29253                                  
 29254                                  	inc	cx		; If it _was_ a system MCB, we're in a new UMB.
 29255                                  atu20:	
 29256                                  	mov	al,[es:ARENA.SIGNATURE]
 29257                                  	cmp	al,arena_signature_end  ; 'Z'
 29258                                  	je	short atu30		; 'Z' means this was the last MCB... that's it.
 29259                                  
 29260                                  	;NextMCB es, ax
 29261                                  
 29262                                  	mov     ax,es
 29263                                  	;add	ax,[es:3]
 29264                                  	add     ax,[es:ARENA.SIZE]
 29265                                  	inc     ax
 29266                                  	mov     es,ax
 29267                                  	
 29268                                  	jmp	short atu10
 29269                                  
 29270                                  ; -----------------------------------------------------------------------------
 29271                                  ; if we get to atu30, they specified a number that was past the last MCB.
 29272                                  ; make sure it's not _inside_ that MCB before we return an error condition.
 29273                                  ; -----------------------------------------------------------------------------
 29274                                  
 29275                                  atu30:	
 29276                                  	mov	ax,es
 29277                                  	add	ax,[es:ARENA.SIZE]
 29278                                  	cmp	ax,dx		; Present >= given?
 29279                                  	jae	short atuX	; Yep! It _was_ inside.
 29280                                  atuE:	
 29281                                  	xor	cx,cx		; Else, fall through with UMB # == -1
 29282                                  	dec	cx		; (that makes it return 0xFFFF and sets CF)
 29283                                  atuX:	
 29284                                  	mov	ax, cx		; Return the UMB number in AX
 29285                                  	
 29286                                  	pop	es	
 29287                                  	pop	dx
 29288                                  	pop	cx
 29289                                  	retn
 29290                                  
 29291                                  ; -----------------------------------------------------------------------------
 29292                                  ;*** convUMB - checks after GetXNum to convert an address to a UMB number
 29293                                  ;            -- if GetXNum read a hex number, we interperete that as a segment
 29294                                  ; address rather than a UMB number... and use that address to look up a UMB.
 29295                                  ; This routine checks for that condition and calls AddrToUmb if necessary.
 29296                                  ; -----------------------------------------------------------------------------
 29297                                  ; ENTRY:  AX contains a UMB number or segment, gnradix has been set by GetXNum
 29298                                  ; EXIT:   AX will contain a UMB number
 29299                                  ; ERROR:  None
 29300                                  ; USES:   Flags, AX
 29301                                  ; -----------------------------------------------------------------------------
 29302                                  
 29303                                  convUMB:
 29304                                  	cmp	word [cs:gnradix],16
 29305                                  	jne	short cu10	; If it didn't read in hex, it's not an address
 29306                                  	call	AddrToUmb	; Else, convert the address to a UMB number
 29307                                  	cmp	ax,0FFFFh
 29308                                  	jne	short cu10
 29309                                  	inc	ax		; If too high, ignore it (make it conventional)
 29310                                  cu10:	
 29311                                  	retn
 29312                                  
 29313                                  ; -----------------------------------------------------------------------------
 29314                                  ;*** setUMBs - links umbs and sets allocation strategy for a load
 29315                                  ;            -- if LoadHigh, the allocation strategy MAY be LOW_FIRST instead
 29316                                  ; of the usual HIGH_FIRST.  See the code.
 29317                                  ; -----------------------------------------------------------------------------
 29318                                  ; ENTRY:  None
 29319                                  ; EXIT:   None
 29320                                  ; ERROR:  None
 29321                                  ; USES:   Flags, fm_umb, fm_strat
 29322                                  ; -----------------------------------------------------------------------------
 29323                                  
 29324                                  setUMBs:
 29325                                  	push	ax
 29326                                  	push	bx
 29327                                  	call	fm_link
 29328                                  	pop	bx
 29329                                  	pop	ax
 29330                                  	retn
 29331                                  
 29332                                  ; -----------------------------------------------------------------------------
 29333                                  ;*** loadLow - returns AL==0 if UMB0 == 0, else AL==1
 29334                                  ; -----------------------------------------------------------------------------
 29335                                  ; ENTRY:  None
 29336                                  ; EXIT:   AL==0 if mem strategy should be set to LOW_FIRST, else AL==1
 29337                                  ;         Carry set if UMB0 not specified (_NOT_ an error)
 29338                                  ; ERROR:  None
 29339                                  ; USES:   Flags, fm_strat, fm_umb
 29340                                  ; -----------------------------------------------------------------------------
 29341                                  ; We want to set the memory strategy to LOW_FIRST if the user specified a
 29342                                  ; load UMB, and it is 0.  That 0 can be either from the user having _specified_
 29343                                  ; zero (/L:0;...), or from having specified a too-big min size (/L:1,99999999)
 29344                                  ; such that the load UMB is too small, and shouldn't be used.
 29345                                  ; -----------------------------------------------------------------------------
 29346                                  
 29347                                  loadLow:
 29348                                  	;push	ds
 29349                                  	;push	cs		; Point DS into appropriate data segment
 29350                                  	;pop	ds	
 29351                                  
 29352                                  	;mov	al,[UmbLoad]
 29353                                  	mov	al,[cs:UmbLoad]
 29354                                  	cmp	al,UNSPECIFIED ; 0FFh, -1
 29355                                  	jne	short ll10
 29356                                  
 29357                                  	stc
 29358                                  ll15:
 29359                                  	mov	al,1		; Return with AL==1 && STC if no UMBs specified
 29360                                  	;stc
 29361                                  	;jmp	short llX
 29362                                  	retn
 29363                                  ll10:	
 29364                                  	or	al,al		; AL=the load UMB: Is it == 0?
 29365                                  	;jz	short llX	; Yep... CF==0 (from OR) && AL=0, so just exit
 29366                                  
 29367                                  	jnz	short ll15	; 09/04/2019 - Retro DOS v4.0
 29368                                  	retn
 29369                                  
 29370                                  	;mov	al,1
 29371                                  	;clc
 29372                                  ;llX:
 29373                                  	;pop	ds		; Return DS to where it was
 29374                                  	;retn
 29375                                  
 29376                                  ; -----------------------------------------------------------------------------
 29377                                  ;*** HideUMBs - links UMBs and hides upper-memory as appropriate
 29378                                  ; -----------------------------------------------------------------------------
 29379                                  ; ENTRY:  None
 29380                                  ; EXIT:   None
 29381                                  ; ERROR:  None
 29382                                  ; USES:   Flags, fm_strat, fm_umb
 29383                                  ; -----------------------------------------------------------------------------
 29384                                  
 29385                                  HideUMBs:
 29386                                  	push	ax
 29387                                  	push	cx
 29388                                  	push	ds
 29389                                  	push	es
 29390                                  
 29391                                  	call	UmbTest		; See if we REALLY linked in anything...
 29392                                  	jc	short husX	; ...if not, there's nothing for us to do.
 29393                                  
 29394                                  	call	FixMem		; Concatenate adjacent free MCBs in upper mem
 29395                                  	call	setUMBs		; Link UMBs and set memory-allocation strategy
 29396                                  
 29397                                  	;putdata fInHigh,1	; Remember that we're now running high
 29398                                  	mov	byte [cs:fInHigh],1
 29399                                  
 29400                                  	;call	GetLoadUMB	; See if they gave us a list to leave free
 29401                                  	mov	al,[cs:UmbLoad] ; 09/04/2019 - Retro DOS v4.0
 29402                                  
 29403                                  	cmp	al,UNSPECIFIED	; If they didn't,
 29404                                  	je	short husX	; then we shouldn't do this loop:
 29405                                  
 29406                                  	xor	cx,cx
 29407                                  
 29408                                  ; -----------------------------------------------
 29409                                  ; HUS10-CX - UMB number (after inc, 1==first UMB)
 29410                                  ; -----------------------------------------------
 29411                                  
 29412                                  hus10:	inc	cx		; For each UMB:
 29413                                  	cmp	cx,MAXUMB ; 16
 29414                                  	jae	short hus20
 29415                                  
 29416                                  	mov	al,cl		; (stopping as soon as we're outside of the
 29417                                  	push	es
 29418                                  	call	findUMB		; valid range of UMBs)
 29419                                  	pop	es		; push/pop: trash what findumb finds.  :-)
 29420                                  	jc	short hus20
 29421                                  
 29422                                  	call	_hideUMB_	; hide what we need to hide.
 29423                                  
 29424                                  	jmp	short hus10
 29425                                  hus20:	
 29426                                  	;call	GetLoadUMB	; Now check if they offered /L:0
 29427                                  	mov	al,[cs:UmbLoad] ; 09/04/2019 - Retro DOS v4.0	
 29428                                  
 29429                                  	or	al,al		; --Is the load UMB 0? (-1==unspecified)
 29430                                  	jnz	short husX	; If not, we're done.
 29431                                  
 29432                                  	call	hl_unlink	; If so, however, fix UMBs and strategy.
 29433                                  husX:	
 29434                                  	pop	es
 29435                                  	pop	ds
 29436                                  	pop	cx
 29437                                  	pop	ax
 29438                                  	retn
 29439                                  
 29440                                  ; -----------------------------------------------------------------------------
 29441                                  ;*** GetLoadUMB - Returns the load UMB number in AL (-1 if not specified)
 29442                                  ; -----------------------------------------------------------------------------
 29443                                  ; ENTRY:  None
 29444                                  ; EXIT:   AL == load UMB
 29445                                  ; ERROR:  None
 29446                                  ; USES:   Flags, AX
 29447                                  ; -----------------------------------------------------------------------------
 29448                                  
 29449                                  ;GetLoadUMB:
 29450                                  ;	;getdata al, UmbLoad
 29451                                  ;	push	ds
 29452                                  ;	push	cs
 29453                                  ;	pop	ds
 29454                                  ;	mov	al,[UmLoad]
 29455                                  ;	pop	ds
 29456                                  ;	retn
 29457                                  
 29458                                  ; -----------------------------------------------------------------------------
 29459                                  ;*** GetLoadSize - Returns the load UMB minimum size (0 if not specified)
 29460                                  ; -----------------------------------------------------------------------------
 29461                                  ; ENTRY:  None
 29462                                  ; EXIT:   AX == load UMB minimum size
 29463                                  ; ERROR:  None
 29464                                  ; USES:   Flags, AX
 29465                                  ; -----------------------------------------------------------------------------
 29466                                  
 29467                                  GetLoadSize:
 29468                                  	; 09/04/2019 - Retro DOS v4.0
 29469                                  	mov	al,[cs:UmbLoad]
 29470                                  	jmp	short GetSize
 29471                                  
 29472                                  	;push	bx
 29473                                  	;;push	si
 29474                                  	;push	ds
 29475                                  	;push	cs
 29476                                  	;pop	ds
 29477                                  
 29478                                  	;mov	al,[UmbLoad]
 29479                                  
 29480                                  	;xor	ah,ah			;    ax==UMB
 29481                                  	;mov	bx,UmbSize		;    bx==array
 29482                                  	;shl	al,1	                ;    ax==offset
 29483                                  	;;add	ax,bx			;    ax==element index
 29484                                  	;;mov	si,ax			; ds:si==element index
 29485                                  
 29486                                  	;;lodsw				;    ax==size
 29487                                  
 29488                                  	;add	bx,ax
 29489                                  	;mov	ax,[bx]
 29490                                  
 29491                                  	;pop	ds
 29492                                  	;;pop	si
 29493                                  	;pop	bx
 29494                                  	;retn
 29495                                  
 29496                                  ; -----------------------------------------------------------------------------
 29497                                  ;*** GetSize - Returns the UMB in AL's minimum size (0 if not specified)
 29498                                  ; -----------------------------------------------------------------------------
 29499                                  ; ENTRY:  AL == a UMB number
 29500                                  ; EXIT:   AX == UMB minimum size, as specified by the user
 29501                                  ; ERROR:  None
 29502                                  ; USES:   Flags, AX
 29503                                  ; -----------------------------------------------------------------------------
 29504                                  
 29505                                  GetSize:
 29506                                  	; 09/04/2019 - Retro DOS v4.0
 29507                                  
 29508                                  	push	bx
 29509                                  	;push	si
 29510                                  	;push	ds
 29511                                  	;push	cs
 29512                                  	;pop	ds
 29513                                  
 29514                                  	xor	ah,ah			;    ax==UMB
 29515                                  	mov	bx,UmbSize		;    bx==array
 29516                                  	shl	al,1	                ;    ax==offset
 29517                                  	;add	ax,bx			;    ax==element index
 29518                                  	;mov	si,ax			; ds:si==element index
 29519                                  
 29520                                  	;lodsw				;    ax==size
 29521                                  
 29522                                  	add	bx,ax
 29523                                  	;mov	ax,[bx]
 29524                                  	mov	ax,[cs:bx]
 29525                                  
 29526                                  	;pop	ds
 29527                                  	;pop	si
 29528                                  	pop	bx
 29529                                  	retn
 29530                                  
 29531                                  ; -----------------------------------------------------------------------------
 29532                                  ;*** StoLoadUMB - Overrides the load UMB number with what's in AL
 29533                                  ; -----------------------------------------------------------------------------
 29534                                  ; ENTRY:   AL == new load UMB
 29535                                  ; EXIT:    None
 29536                                  ; ERROR:   None
 29537                                  ; USES:    Flags, AX
 29538                                  ; -----------------------------------------------------------------------------
 29539                                  ; CAUTION: Should only be used if /L:... was used.  Logically, that is the only
 29540                                  ;          time you would ever need this, so that's okay.
 29541                                  ; -----------------------------------------------------------------------------
 29542                                  
 29543                                  ;StoLoadUMB:
 29544                                  ;	;putdata UmbLoad, al
 29545                                  ;	push	es
 29546                                  ;	push	cs
 29547                                  ;	pop	es
 29548                                  ;	mov	[es:UmbLoad],al
 29549                                  ;	pop	es
 29550                                  ;	retn
 29551                                  
 29552                                  ; -----------------------------------------------------------------------------
 29553                                  ;*** StoLoadSize - Overrides the load UMB minimum size with what's in AX
 29554                                  ; -----------------------------------------------------------------------------
 29555                                  ; ENTRY:  AL == new load size
 29556                                  ; EXIT:   None
 29557                                  ; ERROR:  None
 29558                                  ; USES:   Flags, AX
 29559                                  ; -----------------------------------------------------------------------------
 29560                                  
 29561                                  StoLoadSize:
 29562                                  	push	dx
 29563                                  
 29564                                  	;getdata dl, UmbLoad		; Put UMB# in DL and size in AX
 29565                                  	;
 29566                                  	;push	ds
 29567                                  	;push	cs
 29568                                  	;pop	ds
 29569                                  	;mov	dl,[UmbLoad]
 29570                                  	;pop	ds	
 29571                                  
 29572                                  	mov	dl,[cs:UmbLoad]
 29573                                  
 29574                                  	cmp	dl,UNSPECIFIED ; 0FFh
 29575                                  	je	short sls10
 29576                                  
 29577                                  	call	stowSiz			; We've got a function to do just this
 29578                                  sls10:	
 29579                                  	pop	dx
 29580                                  	retn
 29581                                  
 29582                                  ; -----------------------------------------------------------------------------
 29583                                  ;*** hideUMB - marks as HIDDEN all FREE elements in UMB passed as AL
 29584                                  ; -----------------------------------------------------------------------------
 29585                                  ; ENTRY:    AL must indicate a valid UMB; 0==conv && is invalid.
 29586                                  ; EXIT:     None; free elements in UMB marked as hidden
 29587                                  ; ERROR:    None
 29588                                  ; USES:     Flags
 29589                                  ; -----------------------------------------------------------------------------
 29590                                  
 29591                                  hideUMB:
 29592                                  	push	ax
 29593                                  	push	es
 29594                                  
 29595                                  	call	findUMB		; Returns with carry if err, else ES == MCB
 29596                                  	jc	short huX
 29597                                  
 29598                                  ; ------------------------------------------------
 29599                                  ; HU10--ES - MCB inside UMB; if it's a system MCB,
 29600                                  ;            we're not in the same UMB, so exit.
 29601                                  ; ------------------------------------------------
 29602                                  
 29603                                  hu10:	call	isSysMCB	; Returns with ZF set if owner is SYSTEM
 29604                                  	jz	short huX	; If it is, we've finished the UMB.
 29605                                  	;call	isFreeMCB	; Returns with ZF set if owner is 0
 29606                                  	or	word [es:ARENA.OWNER],0
 29607                                  	jnz	short hu20
 29608                                  
 29609                                  	call	hideMCB
 29610                                  hu20:	
 29611                                  	mov	al,[es:ARENA.SIGNATURE]
 29612                                  	cmp	al,arena_signature_end  ;'Z'
 29613                                  	jz	short huX	; 'Z' means this was the last MCB... that's it.
 29614                                  
 29615                                  	;NextMCB es, ax		; Go on forward.
 29616                                  	mov     ax,es
 29617                                  	;add	ax,[es:3]
 29618                                  	add     ax,[es:ARENA.SIZE]
 29619                                  	inc     ax
 29620                                  	mov     es,ax
 29621                                  
 29622                                  	jmp	short hu10
 29623                                  huX:	
 29624                                  	pop	es
 29625                                  	pop	ax
 29626                                  	retn
 29627                                  
 29628                                  ; -----------------------------------------------------------------------------
 29629                                  ;*** isTiny - returns with ZF set if user didn't specify /S
 29630                                  ; -----------------------------------------------------------------------------
 29631                                  ; ENTRY:    None
 29632                                  ; EXIT:     ZF set if user DIDN'T specify /S
 29633                                  ; ERROR:    None
 29634                                  ; USES:     Flags
 29635                                  ; -----------------------------------------------------------------------------
 29636                                  
 29637                                  isTiny:
 29638                                  	push	ax
 29639                                  
 29640                                  	;getdata al, fUmbTiny
 29641                                  	;
 29642                                  	;push	ds
 29643                                  	;push	cs
 29644                                  	;pop	ds
 29645                                  	;mov	al,[fUmbTiny]
 29646                                  	;pop	ds
 29647                                  
 29648                                  	mov	al,[cs:fUmbTiny]		
 29649                                  
 29650                                  	or	al,al
 29651                                  	pop	ax
 29652                                  	retn
 29653                                  
 29654                                  ; -----------------------------------------------------------------------------
 29655                                  ;*** isFreeMCB - returns with ZF set if current MCB (ES:0) is FREE
 29656                                  ; -----------------------------------------------------------------------------
 29657                                  ; ENTRY:    ES:0 should point to an MCB
 29658                                  ; EXIT:     ZF set if MCB is free, else !ZF
 29659                                  ; ERROR:    None
 29660                                  ; USES:     Flags
 29661                                  ; -----------------------------------------------------------------------------
 29662                                  
 29663                                  ;isFreeMCB:
 29664                                  ;	or	word [es:ARENA.OWNER],0
 29665                                  ;	retn
 29666                                  
 29667                                  ; -----------------------------------------------------------------------------
 29668                                  ;*** hideMCB - marks as HIDDEN the MCB at ES:0
 29669                                  ; -----------------------------------------------------------------------------
 29670                                  ; ENTRY:    ES:0 should point to an MCB
 29671                                  ; EXIT:     None; MCB marked as HIDDEN
 29672                                  ; ERROR:    None
 29673                                  ; USES:     None
 29674                                  ; -----------------------------------------------------------------------------
 29675                                  
 29676                                  hideMCB:
 29677                                  	mov	word [es:ARENA.OWNER],SystemPSPOwner ; 8
 29678                                  	mov	word [es:ARENA.NAME+0], 'HI' ; 4948h
 29679                                  	mov	word [es:ARENA.NAME+2], 'DD' ; 4444h
 29680                                  	mov	word [es:ARENA.NAME+4], 'EN' ; 4E45h
 29681                                  	mov	word [es:ARENA.NAME+6], '  ' ; 2020h	
 29682                                  	retn
 29683                                  
 29684                                  ; -----------------------------------------------------------------------------
 29685                                  ;*** unHideMCB - marks as FREE the MCB at ES:0
 29686                                  ; -----------------------------------------------------------------------------
 29687                                  ; ENTRY:    ES:0 should point to an MCB
 29688                                  ; EXIT:     None; MCB marked as FREE
 29689                                  ; ERROR:    None
 29690                                  ; USES:     None
 29691                                  ; -----------------------------------------------------------------------------
 29692                                  
 29693                                  unHideMCB:
 29694                                  	push	ax
 29695                                  	mov	word [es:ARENA.OWNER],FreePSPOwner ; 0
 29696                                  	mov	ax,'  ' ; 2020h
 29697                                  	mov	[es:ARENA.NAME+0],ax
 29698                                  	mov	[es:ARENA.NAME+2],ax
 29699                                  	mov	[es:ARENA.NAME+4],ax
 29700                                  	mov	[es:ARENA.NAME+6],ax
 29701                                  	pop	ax
 29702                                  	retn
 29703                                  
 29704                                  ; -----------------------------------------------------------------------------
 29705                                  ;*** findUMB - makes ES:0 point to the first MCB in UMB given as AL
 29706                                  ;            -- returns UmbHEAD pointer (0x9FFF) if passed AL==0
 29707                                  ; -----------------------------------------------------------------------------
 29708                                  ; ENTRY:    AL should be to a valid UMB number
 29709                                  ; EXIT:     ES:0 points to first MCB in UMB (_not_ the 8+SC MCB that heads it)
 29710                                  ; ERROR:    Carry set if couldn't reach UMB (too high)
 29711                                  ; USES:     Flags, ES
 29712                                  ; -----------------------------------------------------------------------------
 29713                                  
 29714                                  findUMB:
 29715                                  	push	ax
 29716                                  	push	cx
 29717                                  	push	dx
 29718                                  
 29719                                  	xor	ah,ah		; Zap ah, so al==ax
 29720                                  
 29721                                  	mov	dx,ax		; Store the to-be-found UMB number in DX
 29722                                  
 29723                                  	call	UmbHead		; Returns first UMB segment in AX
 29724                                  	mov	es,ax
 29725                                  	xor	cx,cx		; Pretend we're on UMB 0 for now...
 29726                                  
 29727                                  ; ---------------------------------------------
 29728                                  ; FU10--CX - This UMB number; 0 == conventional
 29729                                  ;       DX - The UMB number they're looking for
 29730                                  ;       ES - The current MCB address
 29731                                  ; ---------------------------------------------
 29732                                  
 29733                                  fu10:	
 29734                                  	cmp	cx,dx		; If CX==DX, we've found the UMB we're
 29735                                  	je	short fuX	; searching for--so exit.
 29736                                  
 29737                                  	call	isSysMCB	; Returns with ZF set if owner is SYSTEM
 29738                                  	jnz	short fu20
 29739                                  
 29740                                  	inc	cx		; If it _was_ SYSTEM, we're in a new UMB.
 29741                                  fu20:	
 29742                                  	mov	al,[es:ARENA.SIGNATURE]
 29743                                  	cmp	al,arena_signature_end ; 'Z'
 29744                                  	je	short fuE	; 'Z' means this was the last MCB... that's it.
 29745                                  
 29746                                  	;NextMCB es, ax		; Go on forward.
 29747                                  	mov     ax,es
 29748                                  	;add	ax,[es:3]
 29749                                  	add     ax,[es:ARENA.SIZE]
 29750                                  	inc     ax
 29751                                  	mov     es,ax
 29752                                  
 29753                                  	jmp	short fu10
 29754                                  fuE:	
 29755                                  	stc
 29756                                  fuX:
 29757                                  	pop	dx
 29758                                  	pop	cx
 29759                                  	pop	ax		; The address is already in ES.
 29760                                  	retn
 29761                                  
 29762                                  ; -----------------------------------------------------------------------------
 29763                                  ;*** BigFree - makes ES:0 point to the largest free MCB in UMB given as AL
 29764                                  ; -----------------------------------------------------------------------------
 29765                                  ; ENTRY:    AL should be to a valid UMB number
 29766                                  ; EXIT:     ES:0 points to largest free MCB in UMB, AX returns its size
 29767                                  ; ERROR:    Carry set if couldn't reach UMB (0 or too high)
 29768                                  ; USES:     Flags, ES
 29769                                  ; -----------------------------------------------------------------------------
 29770                                  
 29771                                  BigFree:
 29772                                  	push	bx
 29773                                  	push	cx
 29774                                  
 29775                                  	call	findUMB			; Returns with CF if err, else ES==MCB
 29776                                  	jc	short bfX		; (would be "jc bfE"; it just does stc)
 29777                                  
 29778                                  	xor	bx,bx			; Segment address of largest free MCB
 29779                                  	xor	cx,cx			; Size of largest free MCB
 29780                                  
 29781                                  ; ---------------------------------------------
 29782                                  ; BF10--ES - Current MCB address
 29783                                  ;       BX - Address of largest free MCB so far
 29784                                  ;       CX - Size of largest free MCB so far
 29785                                  ; ---------------------------------------------
 29786                                  
 29787                                  bf10:	
 29788                                  	call	isSysMCB		; If we've left the MCB, we're done.
 29789                                  	jz	short bf30
 29790                                  
 29791                                  	;call	isFreeMCB		; Returns with ZF set if owner is 0
 29792                                  	or	word [es:ARENA.OWNER],0
 29793                                  	jnz	short bf20
 29794                                  
 29795                                  	mov	ax,[es:ARENA.SIZE]
 29796                                  	;cmp	cx,[es:ARENA.SIZE]	; Compare sizes...
 29797                                  	cmp	cx,ax
 29798                                  	jg	short bf20		; Unless we're bigger,
 29799                                  
 29800                                  	mov	bx,es			; Store this new element's address,
 29801                                  	;mov	cx,[es:ARENA.SIZE]	; and its size.
 29802                                  	mov	cx,ax
 29803                                  
 29804                                  bf20:	mov	al,[es:ARENA.SIGNATURE]
 29805                                  	cmp	al,arena_signature_end	; 'Z'
 29806                                  	jz	short bf30		; 'Z' means this was the last MCB.
 29807                                  
 29808                                  	;NextMCB es,ax		; Go on forward.
 29809                                  	mov     ax,es
 29810                                  	;add	ax,[es:3]
 29811                                  	add     ax,[es:ARENA.SIZE]
 29812                                  	inc     ax
 29813                                  	mov     es,ax
 29814                                  
 29815                                  	jmp	short bf10
 29816                                  
 29817                                  bf30:	mov	es,bx			; Return the address
 29818                                  	mov	ax,cx			; Return the size
 29819                                  	or	bx,bx
 29820                                  	jnz	short bfX		; (if size==0, there's nothing free)
 29821                                  bfE:	
 29822                                  	stc
 29823                                  bfX:
 29824                                  	pop	cx
 29825                                  	pop	bx
 29826                                  	retn
 29827                                  
 29828                                  ; -----------------------------------------------------------------------------
 29829                                  ;*** isSpecified - sets ZF if UMB in AL wasn't specified in DH/LH line.
 29830                                  ; -----------------------------------------------------------------------------
 29831                                  ; ENTRY:    AL should be to a valid UMB number
 29832                                  ; EXIT:     ZF set if UMB wasn't specified, ZF clear if it was
 29833                                  ; ERROR:    None
 29834                                  ; USES:     Flags
 29835                                  ; -----------------------------------------------------------------------------
 29836                                  
 29837                                  isSpecified:
 29838                                  	push	ax
 29839                                  
 29840                                  	xor	bh,bh
 29841                                  	mov	bl,al
 29842                                  
 29843                                  	;getdata al, DS:UmbUsed[bx]
 29844                                  	;
 29845                                  	;push	ds
 29846                                  	;push	cs
 29847                                  	;pop	ds
 29848                                  	;mov	al,[bx+UmbUsed]
 29849                                  	;pop	ds
 29850                                  	
 29851                                  	mov	al,[cs:bx+UmbUsed]
 29852                                  	or	al,al			; Sets ZF if al==0 (ie, if unspecified)
 29853                                  
 29854                                  	pop	ax
 29855                                  	retn
 29856                                  
 29857                                  ; -----------------------------------------------------------------------------
 29858                                  ;*** shrinkMCB - breaks an MCB into two pieces, the lowest one's size==AX
 29859                                  ; -----------------------------------------------------------------------------
 29860                                  ; ENTRY:    AX == new size, ES:0 == current MCB
 29861                                  ; EXIT:     None; MCB broken if carry clear
 29862                                  ; ERROR:    Carry set if MCB isn't as large as AX+0x20 (not a useful split)
 29863                                  ; USES:     Flags
 29864                                  ; -----------------------------------------------------------------------------
 29865                                  ; If the size of the to-be-split MCB isn't at least 0x20 bytes greater than
 29866                                  ; the specified new size, the split is useless; if it's only 0x10 bytes, that
 29867                                  ; 0x10 will be used to make a header that mentions a 0-byte free space, and
 29868                                  ; that just sucks up 0x10 bytes for nothing. So we make 0x20 bytes the
 29869                                  ; minimum for performing a split.
 29870                                  ; -----------------------------------------------------------------------------
 29871                                  
 29872                                  MIN_SPLIT_SIZE	equ	20h
 29873                                  
 29874                                  shrinkMCB:
 29875                                  	;pushreg <bx, cx, es>
 29876                                  	push	bx
 29877                                  	push	cx
 29878                                  	push	es
 29879                                  
 29880                                  	mov	bx,ax			; Move things around... and
 29881                                  	mov	ax,es			; save this one for later.
 29882                                  
 29883                                  	mov	cx,[es:ARENA.SIZE]
 29884                                  	sub	cx,MIN_SPLIT_SIZE ; 32
 29885                                  	;cmp	bx,cx			; {New size} vs {Current Size-20h}
 29886                                  	;ja	short smE		; if wanted_size > cur-20h, abort.
 29887                                  	; 18/12/2022
 29888                                  	cmp	cx,bx
 29889                                  	jb	short smE ; (*)
 29890                                  
 29891                                  	mov	dl,[es:ARENA.SIGNATURE]
 29892                                  	mov	cx,[es:ARENA.SIZE]
 29893                                  
 29894                                  	mov	[es:ARENA.SIZE],bx
 29895                                  	mov	byte [es:ARENA.SIGNATURE],'M'
 29896                                  
 29897                                  	add	ax,bx
 29898                                  	inc	ax
 29899                                  	mov	es,ax			; Move to new arena area
 29900                                  
 29901                                  	mov	ax,cx
 29902                                  	sub	ax,bx
 29903                                  	; 12/12/2022
 29904                                  	; ax > 0
 29905                                  	dec	ax			; And prepare the new size
 29906                                  
 29907                                  	; 18/12/2022
 29908                                  	mov	[es:ARENA.SIGNATURE],dl
 29909                                  	;mov	word [es:ARENA.OWNER],0 ; (**)
 29910                                  	mov	[es:ARENA.SIZE],ax
 29911                                  	;mov	ax,'  ' ; 2020h
 29912                                  	;mov	[es:ARENA.NAME+0],ax ; (**)
 29913                                  	;mov	[es:ARENA.NAME+2],ax ; (**)
 29914                                  	;mov	[es:ARENA.NAME+4],ax ; (**)
 29915                                  	;mov	[es:ARENA.NAME+6],ax ; (**)
 29916                                  
 29917                                  	; 18/12/2022
 29918                                  	call	freeMCB	; (**)
 29919                                  
 29920                                  	; 12/12/2022
 29921                                  	; cf=0
 29922                                  	;clc
 29923                                  	; 18/12/2022
 29924                                  	;jmp	short smX
 29925                                  smE:	
 29926                                  	; 18/12/2022
 29927                                  	; cf=1 (*)
 29928                                  	;stc
 29929                                  smX:	
 29930                                  	;popreg	<es, cx, bx>
 29931                                  	pop	es
 29932                                  	pop	cx
 29933                                  	pop	bx
 29934                                  	retn
 29935                                  
 29936                                  ; -----------------------------------------------------------------------------
 29937                                  ;*** hideUMB? - hides as appropriate the UMB in CL
 29938                                  ; -----------------------------------------------------------------------------
 29939                                  ; ENTRY:    CL should be to a valid UMB number, and AX to its address (findUMB)
 29940                                  ; EXIT:     None; UMB is hidden as necessary
 29941                                  ; ERROR:    None
 29942                                  ; USES:     Flags, AX, CX
 29943                                  ; -----------------------------------------------------------------------------
 29944                                  ; PRIMARY LOGIC:
 29945                                  ;
 29946                                  ; If the UMB is specified in the DH/LH statement, then:
 29947                                  ;    If the largest free segment is too small (check specified size), then:
 29948                                  ;       Pretend it wasn't ever specified, and fall out of this IF.
 29949                                  ;    Else, if largest free segment is LARGER than specified size, then:
 29950                                  ;       If /S was given on the command-line, then:
 29951                                  ;          Break that element into two pieces
 29952                                  ;          Set a flag that we're shrinking
 29953                                  ;       Endif
 29954                                  ;    Endif
 29955                                  ; Endif
 29956                                  ; If the UMB is NOT specified (or was removed by the above):
 29957                                  ;    Hide all free elements in the UMB
 29958                                  ;    If the flag that we're shrinking was set, then:
 29959                                  ;       UN-hide the lower portion of the shrunken UMB
 29960                                  ;    ENDIF
 29961                                  ; ENDIF
 29962                                  ; -----------------------------------------------------------------------------
 29963                                  
 29964                                  _hideUMB_:
 29965                                  	push	bx
 29966                                  	push	dx
 29967                                  	push	es
 29968                                  
 29969                                  	mov	al,cl
 29970                                  	call	isSpecified	; Returns ZF set if al's umb was NOT specified
 29971                                  	jz	short hu_20
 29972                                  
 29973                                  	mov	al,cl		; Retrieve the size of the largest
 29974                                  	call	BigFree		; free element in AX; put its address in ES
 29975                                  	jc	short hu_20	; Oops. Errors mean skip this part.
 29976                                  
 29977                                  	push	ax		; TOS==size of BigFree in UMB (popped as BX)
 29978                                  	mov	al,cl		; Retrieve the user's specified
 29979                                  	call	GetSize		; minimum size for this umb (into AX)
 29980                                  	pop	bx		; Now BX==BigFree, AX==Specified Size
 29981                                  
 29982                                  	or	ax,ax		; If they didn't specify one,
 29983                                  	jz	short hu_20	; Skip over all this.
 29984                                  
 29985                                  	cmp	ax,bx		; Ah... if (specified > max free)
 29986                                  	jbe	short hu_10
 29987                                  
 29988                                  	mov	al,cl		;   Then mark that UMB as unused. Nya nya.
 29989                                  	call	unMarkUMB
 29990                                  	jmp	short hu_20
 29991                                  hu_10:	
 29992                                  	call	isTiny		; Returns ZF clear if user specified /S
 29993                                  	jz	short hu_20
 29994                                  
 29995                                  	call	shrinkMCB	; They specified /S, so shrink the MCB to AX
 29996                                  	jc	short hu_20	; Ah... if didn't shrink after all, skip this:
 29997                                  
 29998                                  	mov	dx,es
 29999                                  	jmp	short hu_30	; Skip the spec check.. we wanna hide this one.
 30000                                  
 30001                                  hu_20:	mov	ax,cx
 30002                                  	call	isSpecified	; If they specified this UMB, we're done...
 30003                                  	jnz	short hu_X	; so leave.
 30004                                  
 30005                                  	xor	dx,dx
 30006                                  hu_30:	
 30007                                  	mov	al,cl
 30008                                  
 30009                                  	call	hideUMB		; Hides everything in UMB #al
 30010                                  
 30011                                  	or	dx,dx		; Did we shrink a UMB? If not, DX==0,
 30012                                  	jz	short hu_X	; So we should leave.
 30013                                  
 30014                                  	mov	es,dx		; Ah, but if it isn't, DX==the MCB's address;
 30015                                  	call	unHideMCB	; Un-hides the lower portion of that MCB.
 30016                                  hu_X:	
 30017                                  	pop	es
 30018                                  	pop	dx
 30019                                  	pop	bx
 30020                                  	retn
 30021                                  
 30022                                  ; -----------------------------------------------------------------------------
 30023                                  ;*** UnFreeze - Marks FROZEN elements as FREE
 30024                                  ; -----------------------------------------------------------------------------
 30025                                  ; Entry:  None
 30026                                  ; Exit:   None; all 8+FROZEN elements are marked as FREE, from any UMB.
 30027                                  ; Error:  None
 30028                                  ; Uses:   Flags
 30029                                  ; -----------------------------------------------------------------------------
 30030                                  
 30031                                  UnFreeze:
 30032                                  	push	ax
 30033                                  	push	es
 30034                                  
 30035                                  	call	UmbHead		; Returns with carry if err, else ES == MCB
 30036                                  	jc	short ufX
 30037                                  
 30038                                  	mov	es,ax
 30039                                  
 30040                                  ; ------------------------------
 30041                                  ; UF10--ES - Current MCB address
 30042                                  ; ------------------------------
 30043                                  
 30044                                  uf10:	call	isFrozMCB	; Returns with ZF set if MCB is FROZEN
 30045                                  	jnz	short uf20
 30046                                  	call	unHideMCB
 30047                                  uf20:	
 30048                                  	mov	al,[es:ARENA.SIGNATURE]
 30049                                  
 30050                                  	cmp	al,arena_signature_end ; 'Z'
 30051                                  	jz	short ufX	; 'Z' means this was the last MCB... that's it.
 30052                                  
 30053                                  	;NextMCB es, ax		; Go on forward.
 30054                                  	mov     ax,es
 30055                                  	;add	ax,[es:3]
 30056                                  	add     ax,[es:ARENA.SIZE]
 30057                                  	inc     ax
 30058                                  	mov     es,ax
 30059                                  
 30060                                  	jmp	short uf10
 30061                                  ufX:	
 30062                                  	pop	es
 30063                                  	pop	ax
 30064                                  	retn
 30065                                  
 30066                                  ; -----------------------------------------------------------------------------
 30067                                  ;*** isFrozMCB - returns with ZF set if current MCB (ES:0) is FROZEN
 30068                                  ; -----------------------------------------------------------------------------
 30069                                  ; ENTRY:    ES:0 should point to an MCB
 30070                                  ; EXIT:     ZF set if MCB is frozen, else !ZF
 30071                                  ; ERROR:    None
 30072                                  ; USES:     Flags
 30073                                  ; -----------------------------------------------------------------------------
 30074                                  
 30075                                  isFrozMCB:
 30076                                  	;push	ax
 30077                                  
 30078                                  	;mov	ax,[es:ARENA.OWNER]	; Check the owner...
 30079                                  	;cmp	ax,SystemPSPOwner	; 8 (for US OR Japan) is valid
 30080                                  	cmp	word [es:ARENA.OWNER],SystemPSPOwner
 30081                                  	jne	short ifmX
 30082                                  
 30083                                  	;mov	ax,[es:ARENA.NAME+0]
 30084                                  	;cmp	ax,'FR' ; 5246h
 30085                                  	cmp	word [es:ARENA.NAME+0],'FR'
 30086                                  	jne	short ifmX
 30087                                  	;mov	ax,[es:ARENA.NAME+2]
 30088                                  	;cmp	ax,'OZ' ; 5A4Fh
 30089                                  	cmp	word [es:ARENA.NAME+2],'OZ'
 30090                                  	jne	short ifmX
 30091                                  	;mov	ax,[es:ARENA.NAME+4]
 30092                                  	;cmp	ax,'EN' ; 4E45h
 30093                                  	cmp	word [es:ARENA.NAME+4],'EN'
 30094                                  	jne	short ifmX
 30095                                  	;mov	ax,[es:ARENA.NAME+6]
 30096                                  	;cmp	ax,'  ' ; 2020h
 30097                                  	cmp	word [es:ARENA.NAME+6],'  '
 30098                                  ifmX:	
 30099                                  	;pop	ax
 30100                                  	retn
 30101                                  
 30102                                  ; -----------------------------------------------------------------------------
 30103                                  ;*** frezMCB - marks as 8+FROZEN the MCB at ES:0
 30104                                  ; -----------------------------------------------------------------------------
 30105                                  ; ENTRY:    ES:0 should point to an MCB
 30106                                  ; EXIT:     None; MCB frozen
 30107                                  ; ERROR:    None
 30108                                  ; USES:     None
 30109                                  ; -----------------------------------------------------------------------------
 30110                                  
 30111                                  frezMCB:
 30112                                  	mov	word [es:ARENA.OWNER],SystemPSPOwner ; 8
 30113                                  	mov	word [es:ARENA.NAME+0],'FR'
 30114                                  	mov	word [es:ARENA.NAME+2],'OZ'
 30115                                  	mov	word [es:ARENA.NAME+4],'EN'
 30116                                  	mov	word [es:ARENA.NAME+6],'  '
 30117                                  	retn
 30118                                  
 30119                                  ; -----------------------------------------------------------------------------
 30120                                  ;*** FreezeUM - Marks FROZEN all UM elements now FREE, save those in load UMB
 30121                                  ; -----------------------------------------------------------------------------
 30122                                  ; Entry:  None
 30123                                  ; Exit:   None; all free elements not in load UMB marked as 8+FROZEN
 30124                                  ; Error:  None
 30125                                  ; Uses:   Flags
 30126                                  ; -----------------------------------------------------------------------------
 30127                                  
 30128                                  FreezeUM:
 30129                                  	push	ax
 30130                                  	push	cx
 30131                                  	push	dx
 30132                                  	push	es
 30133                                  
 30134                                  	;call	GetLoadUMB
 30135                                  	mov	al,[cs:UmbLoad] ; 19/04/2019 - Retro DOS v4.0
 30136                                  
 30137                                  	xor	ah,ah		; Zap ah, so al==ax
 30138                                  	mov	dx,ax		; Store the load UMB in DX, so we can skip it
 30139                                  
 30140                                  	call	UmbHead		; Returns first UMB segment in AX
 30141                                  	mov	es,ax
 30142                                  	xor	cx,cx		; Pretend we're on UMB 0 for now...
 30143                                  
 30144                                  ; -----------------------------------------
 30145                                  ; FUM10--ES - Current MCB address
 30146                                  ;        CX - Current UMB number
 30147                                  ;        DX - UMB number to skip (load UMB)
 30148                                  ; -----------------------------------------
 30149                                  
 30150                                  fum10:	call	isSysMCB	; Returns with ZF set if owner is SYSTEM
 30151                                  	jnz	short fum20
 30152                                  
 30153                                  	inc	cx		; If it _was_ SYSTEM, we're in a new UMB.
 30154                                  fum20:	
 30155                                  	cmp	cx,dx		; If this is the load UMB, we don't want to
 30156                                  	je	short fum30	; freeze anything... so skip that section.
 30157                                  
 30158                                  	;call	isFreeMCB	; Oh. If it's not free, we can't freeze it
 30159                                  	or	word [es:ARENA.OWNER],0
 30160                                  	jnz	short fum30	; either.
 30161                                  
 30162                                  	call	frezMCB
 30163                                  fum30:	
 30164                                  	mov	al,[es:ARENA.SIGNATURE]
 30165                                  	cmp	al,arena_signature_end ; 'Z'
 30166                                  	je	short fumX	; 'Z' means this was the last MCB... that's it.
 30167                                  
 30168                                  	;NextMCB es, ax		; Go on forward.
 30169                                  	mov     ax,es
 30170                                  	;add	ax,[es:3]
 30171                                  	add     ax,[es:ARENA.SIZE]
 30172                                  	inc     ax
 30173                                  	mov     es,ax
 30174                                  	
 30175                                  	jmp	short fum10
 30176                                  
 30177                                  fumX:	pop	es
 30178                                  	pop	dx
 30179                                  	pop	cx
 30180                                  	pop	ax
 30181                                  	retn
 30182                                  
 30183                                  ; -----------------------------------------------------------------------------
 30184                                  ;*** UmbTest - returns with carry set if UMBs are not available, else CF==false
 30185                                  ; -----------------------------------------------------------------------------
 30186                                  ; ENTRY:    None
 30187                                  ; EXIT:     Carry is clear if UMBs are available, or set if they are not
 30188                                  ; ERROR:    None
 30189                                  ; USES:     CF (AX,BX,DS,ES pushed 'cause they're used by others)
 30190                                  ; -----------------------------------------------------------------------------
 30191                                  
 30192                                  UmbTest:
 30193                                  	push	ax
 30194                                  	push	bx
 30195                                  	push	ds
 30196                                  	push	es
 30197                                  
 30198                                  	call	fm_link			; Link in UMBs (if not already linked)
 30199                                  	call	WalkMem			; Check to see if they're really linked
 30200                                  	pushf				; And remember what we found out
 30201                                  	call	fm_unlink		; Unlink UMBs (if WE have linked 'em)
 30202                                  	popf				; And restore what we found out.
 30203                                  
 30204                                  	pop	es
 30205                                  	pop	ds
 30206                                  	pop	bx
 30207                                  	pop	ax
 30208                                  	retn
 30209                                  
 30210                                  ; -----------------------------------------------------------------------------
 30211                                  ;*** WalkMem - travels memory chain and returns carry clear iff UMBs are linked
 30212                                  ; -----------------------------------------------------------------------------
 30213                                  ; ENTRY:    None
 30214                                  ; EXIT:     Carry SET if MCB chain stops before 9FFF, CLEAR if stops >= 9FFF.
 30215                                  ; ERROR:    None
 30216                                  ; USES:     Flags
 30217                                  ; -----------------------------------------------------------------------------
 30218                                  
 30219                                  WalkMem:
 30220                                  	push	ax ; ?
 30221                                  	push	bx ; ?
 30222                                  	push	es ; ? no need to save contents of these registers ?
 30223                                  		   	
 30224                                  	mov	ah,GET_IN_VARS		; Call int 21h, function 52h...
 30225                                  	int	21h
 30226                                  
 30227                                  	mov	ax,[es:bx-2]
 30228                                  	mov	es,ax
 30229                                  
 30230                                  ; ------------------------------
 30231                                  ; UM10: ES = Current MCB pointer
 30232                                  ; ------------------------------
 30233                                  
 30234                                  um10:	mov	al,[es:ARENA.SIGNATURE]
 30235                                  	cmp	al,arena_signature_end ;  'Z'
 30236                                  	je	short um20		; If signature == 'Z', hay no more.
 30237                                  
 30238                                  	;NextMCB es, bx			; Move to the next MCB
 30239                                  
 30240                                  	mov     bx,es
 30241                                  	;add	bx,[es:3]
 30242                                  	add     bx,[es:ARENA.SIZE]
 30243                                  	inc     bx
 30244                                  	mov     es,bx
 30245                                  		
 30246                                  	jmp	short um10		; And restart the loop.
 30247                                  um20:	
 30248                                  	mov	ax,es
 30249                                  
 30250                                  	cmp	ax,9FFFh		; This sets CF iff ax < 9FFF.
 30251                                  
 30252                                  	pop	es ; ?
 30253                                  	pop	bx ; ?
 30254                                  	pop	ax ; ?
 30255                                  	retn
 30256                                  
 30257                                  ; -----------------------------------------------------------------------------
 30258                                  ;*** hl_unlink - unlinks UMBs if fm_umb is set to 0; restores strategy too
 30259                                  ; -----------------------------------------------------------------------------
 30260                                  ; ENTRY:    fm_umb == 1 : leave linked, else unlink
 30261                                  ; EXIT:     None
 30262                                  ; ERROR:    None
 30263                                  ; USES:     AX, BX
 30264                                  ; -----------------------------------------------------------------------------
 30265                                  
 30266                                  hl_unlink:
 30267                                  	xor	bh,bh
 30268                                  
 30269                                  	;getdata bl,fm_umb		; Restore original link-state
 30270                                  	;
 30271                                  	;push	ds
 30272                                  	;push	cs
 30273                                  	;pop	ds
 30274                                  	;mov	bl,[fm_umb]
 30275                                  	;pop	ds
 30276                                  
 30277                                  	mov	bl,[cs:fm_umb]
 30278                                  
 30279                                  	mov	ax,DOS_SET_UMBLINK ; 5803h
 30280                                  	int	21h
 30281                                  	retn
 30282                                  
 30283                                  ; ----------------------------------------------------------------------
 30284                                  ; HIGHEXIT.INC (MSDOS 6.0 - 1991) 	
 30285                                  ; ----------------------------------------------------------------------
 30286                                  ; 09/04/2019 - Retro DOS v4.0
 30287                                  
 30288                                  ;   Module:   HIGHEXIT.INC - Code executed after LoadHigh or DeviceHigh
 30289                                  ;   Date:     May 14, 1992
 30290                                  
 30291                                  ;   Modification log:
 30292                                  ;
 30293                                  ;     DATE    WHO      DESCRIPTION
 30294                                  ;   --------  -------  --------------------------------------------------------
 30295                                  ;   05/14/92  t-richj  Original
 30296                                  ;   06/21/92  t-richj  Final revisions before check-in
 30297                                  
 30298                                  UMB_HeadIdx	equ	8Ch	; Offset from ES (after func52h) to get UMBHead
 30299                                  
 30300                                  ; -----------------------------------------------------------------------------
 30301                                  ;*** UnHideUMBs - Marks HIDDEN elements as FREE
 30302                                  ; -----------------------------------------------------------------------------
 30303                                  ; ENTRY:  None; perhaps, earlier, HideUMBs was called... if not, we have
 30304                                  ;               very little to do, as no elelments will be marked as HIDDEN.
 30305                                  ; EXIT:   Sets InHigh to zero; carry clear if HideUMBs was called earlier.
 30306                                  ; ERROR:  None
 30307                                  ; USES:   fInHigh (from highvar.inc), carry flag
 30308                                  ; -----------------------------------------------------------------------------
 30309                                  
 30310                                  UnHideUMBs:
 30311                                  	push	ax		; Save ax for what we're about to do
 30312                                  
 30313                                  ; -----------------------------------------------------------------------------
 30314                                  ; BUGBUG t-richj 11-8-92: The following six lines were commented out for a good
 30315                                  ;    length of time. Those six constitute a check of whether or not we should
 30316                                  ;    indeed clean up the upper-memory chain; without such a check, COMMAND.COM
 30317                                  ;    will destroy the current link-state and memory-allocation strategy after
 30318                                  ;    every command execution.
 30319                                  ; -----------------------------------------------------------------------------
 30320                                  
 30321                                  	;getdata al,fInHigh	; Get InHigh from data segment
 30322                                  	;
 30323                                  	;push	ds
 30324                                  	;push	cs
 30325                                  	;pop	ds
 30326                                  	;mov	al,[fInHigh]
 30327                                  	;pop	ds	
 30328                                  
 30329                                  	mov	al,[cs:fInHigh]
 30330                                  
 30331                                  	or	al,al
 30332                                  	jnz	short uhu10	; If didn't call loadhigh/devicehigh earlier,
 30333                                  
 30334                                  	pop	ax		; then there's nothing to do here... so
 30335                                  	stc			; restore everything and return. Just like
 30336                                  	retn			; that.
 30337                                  uhu10:	
 30338                                  	call	linkumb		; Make sure UMBs are linked in.
 30339                                  	call	FreeUMBs
 30340                                  
 30341                                  	;putdata fInHigh,0	; We're leaving, so update fInHigh.
 30342                                  	;
 30343                                  	;push	es
 30344                                  	;push	cs
 30345                                  	;pop	es
 30346                                  	;mov	byte [es:fInHigh],0
 30347                                  	;pop	ds	
 30348                                  
 30349                                  	mov	byte [cs:fInHigh],0	
 30350                                  
 30351                                  	call	he_unlink	; Unlink UMBs
 30352                                  
 30353                                  	pop	ax
 30354                                  	; 12/12/2022
 30355                                  	;clc	; 12/12/2022 (this clc may not be necessary!?)
 30356                                  	retn
 30357                                  
 30358                                  ; -----------------------------------------------------------------------------
 30359                                  ;*** he_unlink - unlinks UMBs if fm_umb is set to 0
 30360                                  ; -----------------------------------------------------------------------------
 30361                                  ; ENTRY:    fm_umb == 1 : leave linked, else unlink
 30362                                  ; EXIT:     None
 30363                                  ; ERROR:    None
 30364                                  ; USES:     AX, BX
 30365                                  ; -----------------------------------------------------------------------------
 30366                                  
 30367                                  he_unlink:
 30368                                  	xor	bh, bh
 30369                                  
 30370                                  	;getdata bl, fm_umb	; Restore original link-state
 30371                                  	mov	bl,[cs:fm_umb]	
 30372                                  
 30373                                  	mov	ax,DOS_SET_UMBLINK ; 5803h
 30374                                  	int	21h
 30375                                  	retn
 30376                                  
 30377                                  ; -----------------------------------------------------------------------------
 30378                                  ;*** freeUMBs - frees all HIDDEN memory elements in upper-memory.
 30379                                  ; -----------------------------------------------------------------------------
 30380                                  ; ENTRY:    None
 30381                                  ; EXIT:     None; HIDDEN memory elements returned to FREE
 30382                                  ; ERROR:    None (ignore CF)
 30383                                  ; USES:     Flags
 30384                                  ; -----------------------------------------------------------------------------
 30385                                  
 30386                                  FreeUMBs:
 30387                                  	push	ax
 30388                                  	push	es
 30389                                  
 30390                                  	call	HeadUmb		; Returns with carry if err, else ES == MCB
 30391                                  	jc	short fusX
 30392                                  
 30393                                  	mov	es,ax		; Prepare for the loop; ES = current MCB addr.
 30394                                  fus10:	
 30395                                  	call	isHideMCB	; Returns with ZF set if owner is 0
 30396                                  	jnz	short fus20
 30397                                  	call	freeMCB
 30398                                  fus20:	   
 30399                                  	mov	al,[es:ARENA.SIGNATURE]
 30400                                  	cmp	al,arena_signature_end ; 'Z'
 30401                                  	jz	short fusX	; That means this was the last MCB--that's it.
 30402                                  
 30403                                  	mov	ax,es
 30404                                  	add	ax,[es:ARENA.SIZE]
 30405                                  	inc	ax
 30406                                  	mov	es,ax		; Go on forward.
 30407                                  
 30408                                  	jmp	short fus10
 30409                                  fusX:	
 30410                                  	pop	es
 30411                                  	pop	ax
 30412                                  	retn
 30413                                  
 30414                                  ; -----------------------------------------------------------------------------
 30415                                  ;*** isHideMCB - returns with ZF set if current MCB (ES:0) is HIDDEN
 30416                                  ; -----------------------------------------------------------------------------
 30417                                  ; ENTRY:    ES:0 should point to an MCB
 30418                                  ; EXIT:     ZF set if MCB is hidden, else !ZF
 30419                                  ; ERROR:    None
 30420                                  ; USES:     Flags
 30421                                  ; -----------------------------------------------------------------------------
 30422                                  
 30423                                  isHideMCB:
 30424                                  	;push	ax
 30425                                  
 30426                                  	cmp	word [es:ARENA.OWNER],SystemPSPOwner ; If the owner's SYSTEM
 30427                                  	jne	short ihm_x				; then check for HIDDEN
 30428                                  
 30429                                  	;mov	ax,[es:ARENA.NAME]
 30430                                  	;cmp	ax,'HI' ; 4948h
 30431                                  	cmp	word [es:ARENA.NAME+0],'HI'
 30432                                  	jne	short ihm_x
 30433                                  	;mov	ax,[es:ARENA.NAME+2]
 30434                                  	;cmp	ax,'DD' ; 4444h
 30435                                  	cmp	word [es:ARENA.NAME+2],'DD'
 30436                                  	jne	short ihm_x
 30437                                  	;mov	ax,[es:ARENA.NAME+4]
 30438                                  	;cmp	ax,'EN' ; 4E45h
 30439                                  	cmp	word [es:ARENA.NAME+4],'EN'
 30440                                  	jne	short ihm_x
 30441                                  	;mov	ax,[es:ARENA.NAME+6]
 30442                                  	;cmp	ax,'  ' ; 2020h
 30443                                  	cmp	word [es:ARENA.NAME+6],'  '
 30444                                  ihm_x:	
 30445                                  	;pop	ax
 30446                                  	retn
 30447                                  
 30448                                  ; -----------------------------------------------------------------------------
 30449                                  ;*** freeMCB - marks as free the MCB at ES:0
 30450                                  ; -----------------------------------------------------------------------------
 30451                                  ; ENTRY:    ES:0 should point to an MCB
 30452                                  ; EXIT:     None; MCB free'd
 30453                                  ; ERROR:    None
 30454                                  ; USES:     AX
 30455                                  ; -----------------------------------------------------------------------------
 30456                                  
 30457                                  freeMCB:
 30458                                  	mov	word [es:ARENA.OWNER],0
 30459                                  	mov	ax,'  '
 30460                                  	mov	[es:ARENA.NAME+0],ax
 30461                                  	mov	[es:ARENA.NAME+2],ax
 30462                                  	mov	[es:ARENA.NAME+4],ax
 30463                                  	mov	[es:ARENA.NAME+6],ax
 30464                                  	retn
 30465                                  
 30466                                  ; -----------------------------------------------------------------------------
 30467                                  ;*** HeadUmb - returns in AX the address of the first UMB block (0x9FFF)
 30468                                  ; -----------------------------------------------------------------------------
 30469                                  ; ENTRY:  Nothing
 30470                                  ; EXIT:   AX contains 0x9FFF for most systems
 30471                                  ; ERROR:  Carry set if pointer is 0xFFFF (if not set up yet--DH runs into this)
 30472                                  ; USES:   Flags, AX
 30473                                  ; -----------------------------------------------------------------------------
 30474                                  
 30475                                  HeadUmb:
 30476                                  	; 13/05/2019
 30477                                  
 30478                                  	;push	si ; ?
 30479                                  	;push	ds ; ?
 30480                                  	;push	es
 30481                                  	;push	bx ; *
 30482                                  
 30483                                  	; 09/04/2019
 30484                                  	; !!! No need to save es,bx,ds,si above !!! (es,bx are changed here)
 30485                                  
 30486                                  	mov	ah,GET_IN_VARS		; Call int 21h, function 52h...
 30487                                  	int	21h
 30488                                  			; DOS - 2+ internal - GET LIST OF LISTS
 30489                                  			; Return: ES:BX -> DOS list of lists
 30490                                  	;mov	ax,[es:8Ch]
 30491                                  	mov	ax,[es:UMB_HeadIdx]	; And read what's in ES:008C
 30492                                  	cmp	ax,0FFFFh
 30493                                  	;je	short xhu_e		; If it's 0xFFFF, it's an error...
 30494                                  
 30495                                  	;clc				; Else, it isn't.
 30496                                  	;jmp	short xhu_x
 30497                                  xhu_e:	
 30498                                  	;stc
 30499                                  	cmc	; 09/04/2019 - Retro DOS v4.0 ; *
 30500                                  xhu_x:	
 30501                                  	;pop	bx ; *
 30502                                  	;pop	es	
 30503                                  	;pop	ds ; ?
 30504                                  	;pop	si ; ?
 30505                                  	retn
 30506                                  
 30507                                  ; -----------------------------------------------------------------------------
 30508                                  ;*** linkumb - links UMBs not already linked in; updates fm_umb as needed
 30509                                  ; -----------------------------------------------------------------------------
 30510                                  ; ENTRY:    None
 30511                                  ; EXIT:     fm_umb == 0 if not linked in previously, 1 if already linked in
 30512                                  ; ERROR:    None
 30513                                  ; USES:     AX, BX, fm_umb
 30514                                  ; -----------------------------------------------------------------------------
 30515                                  
 30516                                  linkumb:
 30517                                  	mov	ax,DOS_GET_UMBLINK ; 5802h
 30518                                  	int	21h			; Current link-state is now in al
 30519                                  
 30520                                  	or	al,al			; BUGBUG: proper check?
 30521                                  	jnz	short lumbX		; Jumps if UMBs already linked in
 30522                                  
 30523                                  	mov	ax,DOS_SET_UMBLINK ; 5803h
 30524                                  	mov	bx,1
 30525                                  	int	21h
 30526                                  lumbX:
 30527                                  	retn
 30528                                  
 30529                                  %endif
 30530                                  
 30531                                  ; 01/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 30532                                  ; (SYSINIT:2B5Fh)
 30533                                  
 30534                                  ; ----------------------------------------------------------------------
 30535                                  ; SYSCONF.ASM (MSDOS 6.0 - 1991) 	
 30536                                  ; ----------------------------------------------------------------------
 30537                                  ; 09/04/2019 - Retro DOS v4.0
 30538                                  
 30539                                  ;----------------------------------------------------------------------------
 30540                                  ;
 30541                                  ; procedure : InitDevLoad
 30542                                  ;
 30543                                  ;	Input : DeviceHi = 0 indicates load DD in low memory
 30544                                  ;			 = 1 indicates load in UMB:
 30545                                  ;		           ConvLoad = 0 indicates a new-style load (see below)
 30546                                  ;		                    = 1 indicates a DOS 5-style load
 30547                                  ;		DevSize  = Size of the device driver file in paras
 30548                                  ;
 30549                                  ;	Output : none
 30550                                  ;
 30551                                  ;	Initializes DevLoadAddr, DevLoadEnd & DevEntry.
 30552                                  ;	Also sets up a header for the Device driver entry for mem utility
 30553                                  ;
 30554                                  ;----------------------------------------------------------------------------
 30555                                  ; For a "new-style load", we break off the current DevEntry and link the umbs
 30556                                  ; as we see fit, using HideUMBs (and UnHideUMBs at exit, though _it_ decides
 30557                                  ; whether it's entitled to do anything). HideUMBs uses the chart built by
 30558                                  ; ParseVar to determine which UMBs to leave FREE, and which not.
 30559                                  ;----------------------------------------------------------------------------
 30560                                  
 30561                                  	; 01/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 30562                                  InitDevLoad:
 30563                                  	; 11/12/2022
 30564                                  	; ds = cs
 30565 00002818 803E[071F]00            	cmp	byte [DeviceHi],0
 30566                                  	;cmp	byte [cs:DeviceHi],0	; Are we loading in UMB ?
 30567                                  	;je	short InitForLo		; no, init for lo mem
 30568 0000281D 741F                    	je	short initforlo_x ; 09/04/2019
 30569                                  
 30570                                  ; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 30571                                  ;	cmp	byte [cs:ConvLoad],1	; Are we loading as per DOS 5?
 30572                                  ;	je	short InitForConv
 30573                                  ;
 30574                                  ;; There are two stages to preparing upper-memory; first, we mark as 8+HIDDEN
 30575                                  ;; any areas not specified on the /L:... chain. Second, we mark as 8+FROZEN
 30576                                  ;; any areas left in upper-memory, except for elements in the load UMB...
 30577                                  ;; we then malloc space as per Dos-5 style, and mark as free any spaces which
 30578                                  ;; are 8+FROZEN (but leave 8+HIDDEN still hidden). The load is performed,
 30579                                  ;; and UnHideUMBs later on marks all 8+HIDDEN as free.
 30580                                  ;
 30581                                  ;	call	ShrinkUMB		; Stop using the old device arena
 30582                                  ;
 30583                                  ;	call	HideUMBs		; Mark up the UM area as we see fit
 30584                                  ;	call	FreezeUM		; Hide everything BUT the load area
 30585                                  ;	call	GetUMBForDev		; And grab that load area as needed
 30586                                  ;	pushf
 30587                                  ;	call	UnFreeze		; Then unhide everything frozen
 30588                                  ;	popf
 30589                                  ;
 30590                                  ;	jc	short InitForLo		; (if carry, it's loading low)
 30591                                  ;
 30592                                  ;	jmp	short InitForHi
 30593                                  
 30594                                  	; 01/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 30595                                  	; (SYSINIT:2B67h)
 30596                                  InitForConv:
 30597                                  	; 11/12/2022
 30598                                  	; ds = cs
 30599 0000281F E83700                  	call	SpaceInUMB		; Do we have space left in the
 30600                                  					;  current UMB ?
 30601 00002822 7308                    	jnc	short InitForHi		; yes, we have
 30602 00002824 E84F04                  	call	ShrinkUMB		; shrink the current UMB in use
 30603 00002827 E84500                  	call	GetUMBForDev		; else try to allocate new UMB
 30604 0000282A 720D                    	jc	short InitForLo		; we didn't succeed, so load
 30605                                  					;  in low memory
 30606                                  InitForHi:
 30607                                  	; 11/12/2022
 30608                                  	; ds = cs
 30609                                  	;mov	ax,[cs:DevUMBFree]	; get Para addr of free mem
 30610                                  	;mov	dx,[cs:DevUMBAddr]	; UMB start addr
 30611                                  	;add	dx,[cs:DevUMBSize]	; DX = UMB End addr
 30612 0000282C A1[FD1E]                	mov	ax,[DevUMBFree]
 30613 0000282F 8B16[F91E]              	mov	dx,[DevUMBAddr]
 30614 00002833 0316[FB1E]              	add	dx,[DevUMBSize]
 30615 00002837 EB0C                    	jmp	short idl1
 30616                                  
 30617                                  InitForLo:
 30618                                  	; 11/12/2022
 30619                                  	; ds = cs
 30620                                  	;mov	byte [cs:DeviceHi],0	; in case we failed to load
 30621 00002839 C606[071F]00            	mov	byte [DeviceHi],0
 30622                                  initforlo_x:
 30623                                  	; 11/12/2022
 30624                                  	; ds = cs
 30625                                  					;  into UMB indicate that
 30626                                  					;  we are loading low
 30627                                  	;mov	ax,[cs:memhi]		; AX = start of Low memory
 30628                                  	;mov	dx,[cs:ALLOCLIM]	; DX = End of Low memory
 30629 0000283E A1[E003]                	mov	ax,[memhi]
 30630 00002841 8B16[A302]              	mov	dx,[ALLOCLIM]
 30631                                  idl1:
 30632 00002845 E86C00                  	call	DevSetMark		; setup a sub-arena for DD
 30633                                  	; 11/12/2022
 30634                                  	; ds = cs
 30635                                  	;mov	[cs:DevLoadAddr],ax	; init the Device load address
 30636                                  	;mov	[cs:DevLoadEnd],dx	; init the limit of the block
 30637                                  	;mov	word [cs:DevEntry],0	; init Entry point to DD
 30638                                  	;mov	[cs:DevEntry+2],ax
 30639 00002848 A3[EC1E]                	mov	[DevLoadAddr],ax
 30640 0000284B 8916[EE1E]              	mov	[DevLoadEnd],dx
 30641 0000284F C706[F01E]0000          	mov	word [DevEntry],0
 30642 00002855 A3[F21E]                	mov	[DevEntry+2],ax
 30643 00002858 C3                      	retn
 30644                                  
 30645                                  ;----------------------------------------------------------------------------
 30646                                  ;
 30647                                  ; procedure : SpaceInUMB?
 30648                                  ;
 30649                                  ;	Input : DevUMBAddr, DevUMBSize, DevUMBFree & DevSize
 30650                                  ;	Output : Carry set if no space in UMB
 30651                                  ;		 Carry clear if Space is available for the device in
 30652                                  ;		   current UMB
 30653                                  ;
 30654                                  ;----------------------------------------------------------------------------
 30655                                  
 30656                                  SpaceInUMB:
 30657                                  	; 11/12/2022
 30658                                  	; ds = cs
 30659                                  	;mov	ax,[cs:DevUMBSize]
 30660                                  	;add	ax,[cs:DevUMBAddr]	; End of UMB
 30661                                  	;sub	ax,[cs:DevUMBFree]	; - Free = Remaining space
 30662 00002859 A1[FB1E]                	mov	ax,[DevUMBSize]
 30663 0000285C 0306[F91E]              	add	ax,[DevUMBAddr]		; End of UMB
 30664 00002860 2B06[FD1E]              	sub	ax,[DevUMBFree]		; - Free = Remaining space
 30665                                  	; 11/12/2022
 30666                                  	;or	ax,ax			; Nospace ?
 30667                                  	;jnz	short spcinumb1
 30668                                  	;stc
 30669                                  	;retn
 30670                                  	; 11/12/2022
 30671 00002864 83F801                  	cmp	ax,1
 30672 00002867 7205                    	jb	short spcinumb2	; cf=1
 30673                                  spcinumb1:
 30674 00002869 48                      	dec	ax			; space for sub-arena
 30675                                  	; 11/12/2022
 30676                                  	; ds = cs
 30677 0000286A 3B06[EA1E]              	cmp	ax,[DevSize]
 30678                                  	;cmp	ax,[cs:DevSize]		; do we have space ?
 30679                                  spcinumb2:
 30680 0000286E C3                      	retn
 30681                                  
 30682                                  ;----------------------------------------------------------------------------
 30683                                  ;
 30684                                  ; procedure : PrepareMark
 30685                                  ;
 30686                                  ;	Input : AX==Address of MCB (not addr of free space), BX==Size
 30687                                  ;	Output : None; MCB marked appropriately and DevUMB* set as needed.
 30688                                  ;
 30689                                  ;----------------------------------------------------------------------------
 30690                                  
 30691                                  ;	; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 30692                                  ;
 30693                                  ;PrepareMark:
 30694                                  ;	push	ds
 30695                                  ;	mov	ds,ax
 30696                                  ;	mov	word [ARENA.OWNER],8
 30697                                  ;	mov	word [ARENA.NAME],'SD' ; 4453h
 30698                                  ;	pop	ds
 30699                                  ;
 30700                                  ;	inc	ax
 30701                                  ;	mov	[cs:DevUMBAddr],ax
 30702                                  ;	mov	[cs:DevUMBFree],ax
 30703                                  ;	mov	[cs:DevUMBSize],bx	; update the UMB Variables
 30704                                  ;	retn
 30705                                  
 30706                                  ;----------------------------------------------------------------------------
 30707                                  ;
 30708                                  ; procedure : GetUMBForDev
 30709                                  ;
 30710                                  ;	Input : DevSize
 30711                                  ;	Output : Carry set if couldn't allocate a UMB to fit the
 30712                                  ;		 the device.
 30713                                  ;		 If success carry clear
 30714                                  ;
 30715                                  ;	Allocates the biggest UMB for loading devices and updates
 30716                                  ;	DevUMBSize, DevUMBAddr & DevUMBFree if it succeeded in allocating
 30717                                  ;	UMB.
 30718                                  ;
 30719                                  ;	This routine relies on the fact that all of the low memory
 30720                                  ;	is allocated, and any DOS alloc calls should return memory
 30721                                  ;	from the UMB pool.
 30722                                  ;
 30723                                  ;----------------------------------------------------------------------------
 30724                                  
 30725                                  	; 01/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 30726                                  	; (SYSINIT:2BC6h)
 30727                                  
 30728                                  GetUMBForDev:
 30729                                  	; 11/12/2022
 30730                                  	; ds = cs
 30731 0000286F BBFFFF                  	mov	bx,0FFFFh
 30732 00002872 B80048                  	mov	ax,4800h
 30733 00002875 CD21                    	int	21h
 30734                                  		; DOS - 2+ - ALLOCATE MEMORY
 30735                                  		; BX = number of 16-byte paragraphs desired
 30736                                  
 30737 00002877 09DB                    	or	bx,bx
 30738 00002879 742C                    	jz	short gufd_err
 30739                                  
 30740 0000287B 4B                      	dec	bx
 30741                                  	; 11/12/2022
 30742                                  	; ds = cs
 30743 0000287C 391E[EA1E]              	cmp	[DevSize],bx
 30744                                  	;cmp	[cs:DevSize],bx
 30745 00002880 7725                    	ja	short gufd_err
 30746 00002882 43                      	inc	bx
 30747                                  
 30748 00002883 B80048                  	mov	ax,4800h
 30749 00002886 CD21                    	int	21h
 30750 00002888 721D                    	jc	short gufd_err
 30751                                  
 30752                                  	; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 30753                                  	;dec	ax
 30754                                  	;call	PrepareMark
 30755                                  	;
 30756                                  PrepareMark:
 30757 0000288A 1E                      	push	ds
 30758 0000288B 48                      	dec	ax
 30759 0000288C 8ED8                    	mov	ds,ax
 30760 0000288E C70601000800            	mov	word [ARENA.OWNER],8
 30761 00002894 C70608005344            	mov	word [ARENA.NAME],'SD' ; 4453h
 30762 0000289A 40                      	inc	ax
 30763 0000289B 1F                      	pop	ds
 30764                                  	; 11/12/2022
 30765                                  	; ds = cs
 30766                                  	;mov	[cs:DevUMBSize],bx	; update the UMB Variables
 30767                                  	;mov	[cs:DevUMBAddr],ax
 30768                                  	;mov	[cs:DevUMBFree],ax
 30769 0000289C 891E[FB1E]              	mov	[DevUMBSize],bx		; update the UMB Variables
 30770 000028A0 A3[F91E]                	mov	[DevUMBAddr],ax
 30771 000028A3 A3[FD1E]                	mov	[DevUMBFree],ax
 30772                                  	;
 30773                                  	; 11/12/2022
 30774                                  	; cf=0
 30775                                  	;clc				; mark no error
 30776 000028A6 C3                      	retn
 30777                                  gufd_err:
 30778 000028A7 31C0                    	xor	ax,ax ; 0
 30779                                  	; 11/12/2022
 30780                                  	; ds = cs
 30781                                  	;mov	[cs:DevUMBSize],ax	; erase the previous values
 30782                                  	;mov	[cs:DevUMBAddr],ax
 30783                                  	;mov	[cs:DevUMBFree],ax
 30784 000028A9 A3[FB1E]                	mov	[DevUMBSize],ax		; erase the previous values
 30785 000028AC A3[F91E]                	mov	[DevUMBAddr],ax
 30786 000028AF A3[FD1E]                	mov	[DevUMBFree],ax
 30787 000028B2 F9                      	stc
 30788 000028B3 C3                      	retn
 30789                                  
 30790                                  ;----------------------------------------------------------------------------
 30791                                  ;
 30792                                  ; procedure : DevSetMark
 30793                                  ;
 30794                                  ;	Input : AX - Free segment were device is going to be loaded
 30795                                  ;	Output : AX - Segment at which device can be loaded (AX=AX+1)
 30796                                  ;
 30797                                  ;	Creates a sub-arena for the device driver
 30798                                  ;	puts 'D' marker in the sub-arena
 30799                                  ;	Put the owner of the sub-arena as (AX+1)
 30800                                  ;	Copies the file name into sub-arena name field
 30801                                  ;
 30802                                  ;	Size field of the sub-arena will be set only at succesful
 30803                                  ;	completion of Device load.
 30804                                  ;
 30805                                  ;----------------------------------------------------------------------------
 30806                                  
 30807                                  	; 01/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 30808                                  	; (SYSINIT:2C13h)
 30809                                  
 30810                                  DevSetMark:
 30811 000028B4 06                      	push	es
 30812 000028B5 57                      	push	di
 30813 000028B6 1E                      	push	ds
 30814 000028B7 56                      	push	si
 30815 000028B8 8EC0                    	mov	es,ax
 30816 000028BA 26C606000044            	mov	byte [es:devmark.id],devmark_device ; 'D'
 30817 000028C0 40                      	inc	ax
 30818 000028C1 26A30100                	mov	[es:devmark.seg],ax
 30819                                  
 30820                                  ;-------------- Copy file name
 30821                                  
 30822 000028C5 50                      	push	ax			; save load addr
 30823 000028C6 2EC536[F803]            	lds	si,[cs:bpb_addr]	; command line is still there
 30824                                  
 30825 000028CB 89F7                    	mov	di,si
 30826 000028CD FC                      	cld
 30827                                  dsm_again:
 30828 000028CE AC                      	lodsb
 30829 000028CF 3C3A                    	cmp	al,':'
 30830 000028D1 7504                    	jne	short isit_slash
 30831 000028D3 89F7                    	mov	di,si
 30832 000028D5 EBF7                    	jmp	short dsm_again
 30833                                  isit_slash:
 30834 000028D7 3C5C                    	cmp	al, '\'
 30835 000028D9 7504                    	jne	short isit_null
 30836 000028DB 89F7                    	mov	di,si
 30837 000028DD EBEF                    	jmp	short dsm_again
 30838                                  isit_null:
 30839 000028DF 08C0                    	or	al,al
 30840 000028E1 75EB                    	jnz	short dsm_again
 30841 000028E3 89FE                    	mov	si,di
 30842                                  
 30843 000028E5 BF0800                  	mov	di,devmark.filename ; 8
 30844 000028E8 B90800                  	mov	cx,8			; maximum 8 characters
 30845                                  dsm_next_char:
 30846 000028EB AC                      	lodsb
 30847 000028EC 08C0                    	or	al, al
 30848 000028EE 7407                    	jz	short blankout
 30849 000028F0 3C2E                    	cmp	al, '.'
 30850 000028F2 7403                    	je	short blankout
 30851 000028F4 AA                      	stosb
 30852 000028F5 E2F4                    	loop	dsm_next_char
 30853                                  blankout:
 30854 000028F7 E304                    	jcxz	dsm_exit
 30855 000028F9 B020                    	mov	al, ' '
 30856 000028FB F3AA                    	rep	stosb			; blank out the rest
 30857                                  dsm_exit:
 30858 000028FD 58                      	pop	ax			; restore load addr
 30859 000028FE 5E                      	pop	si
 30860 000028FF 1F                      	pop	ds
 30861 00002900 5F                      	pop	di
 30862 00002901 07                      	pop	es
 30863 00002902 C3                      	retn
 30864                                  
 30865                                  ;----------------------------------------------------------------------------
 30866                                  ;
 30867                                  ; procedure : SizeDevice
 30868                                  ;
 30869                                  ;	Input : ES:SI - points to device file to be sized
 30870                                  ;
 30871                                  ;	Output : Carry set if file cannot be opened or if it is an OS2EXE file
 30872                                  ;
 30873                                  ;	Calculates the size of the device file in paras and stores it
 30874                                  ;	in DevSize
 30875                                  ;
 30876                                  ;----------------------------------------------------------------------------
 30877                                  
 30878                                  	; 01/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 30879                                  SizeDevice:
 30880                                  	; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 30881                                  	; 11/12/2022 ; *
 30882 00002903 1E                      	push	ds ; *
 30883 00002904 06                      	push	es
 30884 00002905 1F                      	pop	ds
 30885 00002906 89F2                    	mov	dx,si			; ds:dx -> file name
 30886 00002908 B8003D                  	mov	ax,3D00h		; open
 30887 0000290B CD21                    	int	21h
 30888 0000290D 7243                    	jc	short sd_err		; open failed
 30889                                  
 30890 0000290F 89C3                    	mov	bx,ax			; BX - file handle
 30891 00002911 B80242                  	mov	ax,4202h		; seek
 30892 00002914 31C9                    	xor	cx,cx
 30893 00002916 89CA                    	mov	dx,cx			; to end of file
 30894 00002918 CD21                    	int	21h
 30895 0000291A 722F                    	jc	short sd_close		; did seek fail (impossible)
 30896 0000291C 83C00F                  	add	ax,15			; para convert
 30897 0000291F 83D200                  	adc	dx,0
 30898 00002922 F7C2F0FF                	test	dx,0FFF0h		; size > 0ffff paras ?
 30899 00002926 7409                    	jz	short szdev1		; no
 30900 00002928 2EC706[EA1E]FFFF        	mov	word [cs:DevSize],0FFFFh ; invalid device size
 30901                                  					; assuming that we fail later
 30902 0000292F EB1A                    	jmp	short sd_close
 30903                                  szdev1:
 30904 00002931 B104                    	mov	cl,4			; convert it to paras
 30905 00002933 D3E8                    	shr	ax,cl
 30906 00002935 B10C                    	mov	cl,12
 30907 00002937 D3E2                    	shl	dx,cl
 30908 00002939 09D0                    	or	ax,dx
 30909                                  	;
 30910                                  	; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 30911 0000293B 2E3B06[081F]            	cmp     ax,[cs:DevSizeOption]
 30912                                  	;ja	short szdev2
 30913                                  	; 14/08/2023
 30914 00002940 7305                    	jnb	short szdev2
 30915 00002942 2EA1[081F]              	mov     ax,[cs:DevSizeOption]
 30916                                  	; 12/12/2022
 30917 00002946 F8                      	clc
 30918                                  szdev2:
 30919 00002947 2EA3[EA1E]              	mov	[cs:DevSize],ax		; save file size
 30920                                  
 30921                                  	; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 30922                                  	; 12/12/2022
 30923                                  	; cf=0
 30924                                  	;clc
 30925                                  sd_close:
 30926 0000294B 9C                      	pushf				; let close not spoil our
 30927                                  					;  carry flag
 30928 0000294C B8003E                  	mov	ax,3E00h		; close
 30929 0000294F CD21                    	int	21h			; we are not checking for err
 30930 00002951 9D                      	popf
 30931                                  sd_err:
 30932                                  	; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 30933                                  	; 11/12/2022 ; *
 30934 00002952 1F                      	pop     ds ; *
 30935 00002953 C3                      	retn
 30936                                  
 30937                                  ;----------------------------------------------------------------------------
 30938                                  ;
 30939                                  ; procedure : ExecDev
 30940                                  ;
 30941                                  ;	Input : ds:dx -> device to be executed
 30942                                  ;		DevLoadAddr - contains where device has to be loaded
 30943                                  ;
 30944                                  ;	Output : Carry if error
 30945                                  ;		 Carry clear if no error
 30946                                  ;
 30947                                  ;	Loads a device driver using the 4b03h function call
 30948                                  ;
 30949                                  ;----------------------------------------------------------------------------
 30950                                  
 30951                                  	; 01/11/2022
 30952                                  ExecDev:
 30953 00002954 2E8B1E[EC1E]            	mov	bx,[cs:DevLoadAddr]
 30954 00002959 2E891E[031F]            	mov	[cs:DevExecAddr],bx	; Load the parameter block
 30955                                  					;  block for exec with
 30956                                  					;  Load address
 30957 0000295E 2E891E[051F]            	mov	[cs:DevExecReloc],bx
 30958 00002963 8CCB                    	mov	bx,cs
 30959 00002965 8EC3                    	mov	es,bx
 30960 00002967 BB[031F]                	mov	bx,DevExecAddr		;es:bx points to parameters
 30961 0000296A B003                    	mov	al,3	; (load program only)
 30962 0000296C B44B                    	mov	ah,EXEC ; 4Bh
 30963 0000296E CD21                    	int	21h			;load in the device driver
 30964                                   		; DOS - 2+ - LOAD OR EXECUTE (EXEC)
 30965                                  		; DS:DX -> ASCIZ filename
 30966                                  		; ES:BX -> parameter block
 30967                                  		; AL = subfunction 
 30968 00002970 C3                      	retn
 30969                                  
 30970                                  ;----------------------------------------------------------------------------
 30971                                  ;
 30972                                  ; procedure : RetFromUM
 30973                                  ;
 30974                                  ;	Input : None
 30975                                  ;	Output : ConvLoad set if didn't previously call HideUMBs
 30976                                  ;		 ConvLoad clear if did.
 30977                                  ;
 30978                                  ;	Prepares memory for more devices after returning from loading one
 30979                                  ;	using the DOS 6 options (/L:... etc).
 30980                                  ;
 30981                                  ;----------------------------------------------------------------------------
 30982                                  
 30983                                  	; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 30984                                  ;RetFromUM:
 30985                                  ;	pushf
 30986                                  ;	mov	byte [cs:ConvLoad],1
 30987                                  ;	call	UnHideUMBs
 30988                                  ;	jc	short rfUM1		; Skip this if didn't HideUMBs
 30989                                  ;	mov	byte [cs:ConvLoad],0
 30990                                  ;rfUM1:	
 30991                                  ;	popf
 30992                                  ;	retn
 30993                                  
 30994                                  ;----------------------------------------------------------------------------
 30995                                  ;
 30996                                  ; procedure : RemoveNull
 30997                                  ;
 30998                                  ;	Input : ES:SI points to a null terminated string
 30999                                  ;
 31000                                  ;	Output : none
 31001                                  ;
 31002                                  ;	Replaces the null at the end of a string with blank
 31003                                  ;
 31004                                  ;----------------------------------------------------------------------------
 31005                                  
 31006                                  	; 01/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 31007                                  	; (SYSINIT:2CCEh)
 31008                                  RemoveNull:
 31009                                  	; 11/12/2022
 31010                                  	; ds = cs
 31011                                  rn_next:
 31012 00002971 268A1C                  	mov	bl,[es:si]
 31013 00002974 08DB                    	or	bl,bl			; null ?
 31014 00002976 7403                    	jz	short rn_gotnull
 31015 00002978 46                      	inc	si			; advance the pointer
 31016 00002979 EBF6                    	jmp	short rn_next
 31017                                  rn_gotnull:
 31018                                  	; 11/12/2022
 31019 0000297B 8A1E[1C1F]              	mov	bl,[DevSavedDelim]
 31020                                  	;mov	bl,[cs:DevSavedDelim]
 31021 0000297F 26881C                  	mov	[es:si],bl		; replace null with blank
 31022                                  	; 02/11/2022
 31023                                  ; 11/12/2022
 31024                                  rba_ok:		; 10/04/2019
 31025 00002982 C3                      	retn
 31026                                  
 31027                                  ;----------------------------------------------------------------------------
 31028                                  ;
 31029                                  ; procedure : RoundBreakAddr
 31030                                  ;
 31031                                  ;	Input : DevBrkAddr
 31032                                  ;	Output : DevBrkAddr
 31033                                  ;
 31034                                  ;	Rounds DevBrkAddr to a para address so that it is of the form xxxx:0
 31035                                  ;
 31036                                  ;----------------------------------------------------------------------------
 31037                                  
 31038                                  RoundBreakAddr:
 31039 00002983 2EA1[F41E]              	mov	ax,[cs:DevBrkAddr]
 31040 00002987 E837E7                  	call	ParaRound
 31041 0000298A 2E0106[F61E]            	add	[cs:DevBrkAddr+2],ax
 31042 0000298F 2EC706[F41E]0000        	mov	word [cs:DevBrkAddr],0
 31043 00002996 2EA1[EE1E]              	mov	ax,[cs:DevLoadEnd]
 31044 0000299A 2E3906[F61E]            	cmp	[cs:DevBrkAddr+2],ax
 31045 0000299F 76E1                    	jbe	short rba_ok
 31046 000029A1 E96507                  	jmp	mem_err
 31047                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 31048                                  	; 11/12/2022
 31049                                  ;rba_ok:
 31050                                  ;	retn
 31051                                  
 31052                                  ;----------------------------------------------------------------------------
 31053                                  ;
 31054                                  ; procedure : DevSetBreak
 31055                                  ;
 31056                                  ;	Input : DevBrkAddr
 31057                                  ;	Output : Carry set if Device returned Init failed
 31058                                  ;		 Else carry clear
 31059                                  ;
 31060                                  ;----------------------------------------------------------------------------
 31061                                  
 31062                                  DevSetBreak:
 31063 000029A4 50                      	push	ax
 31064                                  
 31065 000029A5 2EA1[F61E]              	mov	ax,[cs:DevBrkAddr+2]	 ;remove the init code
 31066 000029A9 2E803E[3314]00          	cmp	byte [cs:multdeviceflag],0
 31067 000029AF 750F                    	jne	short set_break_continue ;do not check it.
 31068 000029B1 2E3B06[EC1E]            	cmp	ax,[cs:DevLoadAddr]
 31069 000029B6 7508                    	jne	short set_break_continue ;if not same, then o.k.
 31070                                  
 31071                                  	;cmp	word [cs:DevBrkAddr],0
 31072                                  	;je	short break_failed	;[DevBrkAddr+2]=[memhi] & [DevBrkAddr]=0
 31073                                  	; 12/12/2022
 31074 000029B8 2E833E[F41E]01          	cmp	word [cs:DevBrkAddr],1
 31075 000029BE 7204                    	jb	short break_failed
 31076                                  
 31077                                  set_break_continue:
 31078 000029C0 E8C0FF                  	call	RoundBreakAddr
 31079                                  	; 12/12/2022
 31080 000029C3 F8                      	clc
 31081                                  break_failed:
 31082 000029C4 58                      	pop	ax
 31083                                  	;clc
 31084 000029C5 C3                      	retn
 31085                                  
 31086                                  	; 12/12/2022
 31087                                  ;break_failed:
 31088                                  	;pop	ax
 31089                                  	;stc
 31090                                  	;retn
 31091                                  
 31092                                  ;----------------------------------------------------------------------------
 31093                                  ;
 31094                                  ; procedure : DevBreak
 31095                                  ;
 31096                                  ;	Input : DevLoadAddr & DevBrkAddr
 31097                                  ;	Output : none
 31098                                  ;
 31099                                  ;	Marks a succesful install of a device driver
 31100                                  ;	Sets device size field in sub-arena &
 31101                                  ;	Updates Free ptr in UMB or adjusts memhi
 31102                                  ;
 31103                                  ;----------------------------------------------------------------------------
 31104                                  
 31105                                  	; 11/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 31106                                  DevBreak:
 31107                                  	;push	ds ; 11/12/2022
 31108                                  
 31109                                  	; 11/12/2022
 31110 000029C6 0E                      	push	cs
 31111 000029C7 1F                      	pop	ds
 31112                                  	;mov	ax,[cs:DevLoadAddr]
 31113                                  	;mov	bx,[cs:DevBrkAddr+2]
 31114 000029C8 A1[EC1E]                	mov	ax,[DevLoadAddr]
 31115 000029CB 8B1E[F61E]              	mov	bx,[DevBrkAddr+2]
 31116                                  	; 11/12/2022
 31117 000029CF 1E                      	push	ds
 31118                                  
 31119 000029D0 48                      	dec	ax			; seg of sub-arena
 31120 000029D1 8ED8                    	mov	ds,ax
 31121 000029D3 40                      	inc	ax			; Back to Device segment
 31122 000029D4 29D8                    	sub	ax,bx
 31123 000029D6 F7D8                    	neg	ax			; size of device in paras
 31124 000029D8 A30300                  	mov	[devmark.size],ax	; store it in sub-arena
 31125                                  	
 31126                                  	; 11/12/2022
 31127 000029DB 1F                      	pop	ds
 31128                                  	; ds = cs
 31129                                   	
 31130 000029DC 803E[071F]00            	cmp	byte [DeviceHi],0
 31131                                  	;cmp	byte [cs:DeviceHi],0
 31132 000029E1 7405                    	je	short db_lo
 31133                                  	;mov	[cs:DevUMBFree],bx	; update Free ptr in UMB
 31134                                  	;jmp	short db_exit
 31135                                  	; 11/12/2022
 31136 000029E3 891E[FD1E]              	mov	[DevUMBFree],bx
 31137 000029E7 C3                      	retn	
 31138                                  db_lo:
 31139                                  	; 11/12/2022
 31140                                  	; ds = cs
 31141                                  	;mov	[cs:memhi],bx
 31142                                  	;mov	word [cs:memlo],0
 31143 000029E8 891E[E003]              	mov	[memhi],bx
 31144 000029EC C706[DE03]0000          	mov	word [memlo],0 ; 18/12/2022
 31145                                  db_exit:
 31146                                  	;pop	ds ; 11/12/2022
 31147 000029F2 C3                      	retn
 31148                                  
 31149                                  ; 10/04/2019 - Retro DOS v4.0
 31150                                  
 31151                                  ;----------------------------------------------------------------------------
 31152                                  ;
 31153                                  ; procedure : ParseSize
 31154                                  ;
 31155                                  ;	Parses the command line for SIZE= command
 31156                                  ;
 31157                                  ;	ES:SI = command line to parsed
 31158                                  ;
 31159                                  ;	returns ptr to command line after SIZE= option in ES:SI
 31160                                  ;	updates the DevSizeOption variable with value supplied
 31161                                  ;	in SIZE=option
 31162                                  ;	Returns carry if the SIZE option was invalid
 31163                                  ;
 31164                                  ;----------------------------------------------------------------------------
 31165                                  
 31166                                  	; 02/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 31167                                  	; (SYSINIT:2D5Ah)
 31168                                  ParseSize:
 31169                                  	;push	bx
 31170                                  	;mov	bx,si
 31171                                  
 31172                                  	; 11/12/2022
 31173                                  	; ds = cs
 31174                                  	;mov	word [cs:DevSizeOption],0 ; init the value
 31175                                  	;mov	[cs:DevCmdLine],si
 31176                                  	;mov	[cs:DevCmdLine+2],es
 31177 000029F3 C706[081F]0000          	mov	word [DevSizeOption],0 ; init the value
 31178 000029F9 8936[181F]              	mov	[DevCmdLine],si
 31179 000029FD 8C06[1A1F]              	mov	[DevCmdLine+2],es	
 31180 00002A01 E82800                  	call	SkipDelim
 31181 00002A04 26813C5349              	cmp	word [es:si],'SI' ; 4953h
 31182 00002A09 751F                    	jne	short ps_no_size
 31183 00002A0B 26817C025A45            	cmp	word [es:si+2],'ZE' ; 455Ah
 31184 00002A11 7517                    	jne	short ps_no_size
 31185 00002A13 268A4404                	mov	al,[es:si+4]
 31186 00002A17 E86B06                  	call	delim
 31187 00002A1A 750E                    	jne	short ps_no_size
 31188 00002A1C 83C605                  	add	si,5
 31189 00002A1F E81500                  	call	GetHexNum
 31190 00002A22 7207                    	jc	short ps_err
 31191                                  	; 11/12/2022
 31192                                  	; ds = cs
 31193                                  	;mov	[cs:DevSizeOption],ax
 31194 00002A24 A3[081F]                	mov	[DevSizeOption],ax
 31195 00002A27 E80200                  	call	SkipDelim
 31196                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 31197                                  	;mov	bx,si
 31198                                  ps_no_size:	
 31199                                  	;mov	si,bx
 31200                                  	;pop	bx
 31201 00002A2A F8                      	clc	; cf=0
 31202                                  	;retn
 31203                                  	; 11/12/2022
 31204                                  ps_err:		; cf=1
 31205                                  sd_ret:		; cf=?
 31206 00002A2B C3                      	retn
 31207                                  ;ps_err:
 31208                                  	; 02/11/2022
 31209                                  	;pop	bx
 31210                                  	;stc
 31211                                  	; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 31212                                  	; 11/12/2022
 31213                                  	; cf=1
 31214                                  	;stc
 31215                                  	; 11/12/2022
 31216                                  ;sd_ret: 
 31217                                  	; 22/07/2023
 31218                                  	; 12/04/2019
 31219                                  	;retn
 31220                                  
 31221                                  ; 12/04/2019 - Retro DOS v4.0
 31222                                  
 31223                                  ;----------------------------------------------------------------------------
 31224                                  ;
 31225                                  ; procedure : SkipDelim
 31226                                  ;
 31227                                  ;	Skips delimiters in the string pointed to by ES:SI
 31228                                  ;	Returns ptr to first non-delimiter character in ES:SI
 31229                                  ;
 31230                                  ;----------------------------------------------------------------------------
 31231                                  	
 31232                                  	; 01/11/2022
 31233                                  SkipDelim:
 31234                                  sd_next_char:
 31235 00002A2C 268A04                  	mov	al,[es:si]
 31236 00002A2F E85306                  	call	delim
 31237 00002A32 75F7                    	jnz	short sd_ret
 31238 00002A34 46                      	inc	si
 31239 00002A35 EBF5                    	jmp	short sd_next_char ; 01/11/2022
 31240                                  	; 11/12/2022
 31241                                  	; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 31242                                  ;sd_ret:
 31243                                  	;retn
 31244                                  
 31245                                  ;----------------------------------------------------------------------------
 31246                                  ;
 31247                                  ; procedure : GetHexNum
 31248                                  ;
 31249                                  ;	Converts an ascii string terminated by a delimiter into binary.
 31250                                  ;	Assumes that the ES:SI points to a Hexadecimal string
 31251                                  ;
 31252                                  ;	Returns in AX the number number of paras equivalent to the
 31253                                  ;	hex number of bytes specified by the hexadecimal string.
 31254                                  ;
 31255                                  ;	Returns carry in case it encountered a non-hex character or
 31256                                  ;	if it encountered crlf
 31257                                  ;
 31258                                  ;----------------------------------------------------------------------------
 31259                                  
 31260                                  ; 13/05/2019
 31261                                  
 31262                                  	; 01/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 31263                                  	; (SYSINIT:2DA5h)
 31264                                  GetHexNum:
 31265 00002A37 31C0                    	xor	ax,ax
 31266 00002A39 31D2                    	xor	dx,dx
 31267                                  ghn_next:
 31268 00002A3B 268A1C                  	mov	bl,[es:si]
 31269 00002A3E 80FB0D                  	cmp	bl,cr  ; 0Dh
 31270 00002A41 7436                    	je	short ghn_err
 31271 00002A43 80FB0A                  	cmp	bl,lf  ; 0Ah
 31272 00002A46 7431                    	je	short ghn_err
 31273 00002A48 50                      	push	ax
 31274 00002A49 88D8                    	mov	al,bl
 31275 00002A4B E83706                  	call	delim
 31276 00002A4E 58                      	pop	ax
 31277                                  	; 04/01/2023
 31278 00002A4F B90400                  	mov	cx, 4
 31279 00002A52 7410                    	jz	short ghn_into_paras
 31280 00002A54 E82400                  	call	GetNibble
 31281                                  	;jc	short ghn_err
 31282                                  	; 11/12/2022
 31283 00002A57 7221                    	jc	short ghn_ret ; cf=1
 31284                                  	; 04/01/2023
 31285                                  	;mov	cx,4
 31286                                  ghn_shift1:
 31287 00002A59 D1E0                    	shl	ax,1
 31288 00002A5B D1D2                    	rcl	dx,1
 31289 00002A5D E2FA                    	loop	ghn_shift1
 31290 00002A5F 08D8                    	or	al,bl
 31291 00002A61 46                      	inc	si
 31292 00002A62 EBD7                    	jmp	short ghn_next
 31293                                  ghn_into_paras:
 31294 00002A64 83C00F                  	add	ax,15
 31295 00002A67 83D200                  	adc	dx,0
 31296 00002A6A F7C2F0FF                	test	dx,0FFF0h
 31297 00002A6E 7509                    	jnz	short ghn_err
 31298                                  	; 04/01/2023
 31299                                  	;mov	cx,4
 31300                                  ghn_shift2:
 31301 00002A70 F8                      	clc
 31302 00002A71 D1DA                    	rcr	dx,1
 31303 00002A73 D1D8                    	rcr	ax,1
 31304 00002A75 E2F9                    	loop	ghn_shift2
 31305 00002A77 F8                      	clc
 31306 00002A78 C3                      	retn
 31307                                  	; 11/12/2022
 31308                                  ghn_err:
 31309                                  gnib_err:
 31310 00002A79 F9                      	stc
 31311                                  ghn_ret:
 31312                                  gnib_ret:
 31313 00002A7A C3                      	retn
 31314                                  
 31315                                  ;----------------------------------------------------------------------------
 31316                                  ;
 31317                                  ; procedure : GetNibble
 31318                                  ;
 31319                                  ;	Convert one nibble (hex digit) in BL into binary
 31320                                  ;
 31321                                  ;	Retruns binary value in BL
 31322                                  ;
 31323                                  ;	Returns carry if BL contains non-hex digit
 31324                                  ;
 31325                                  ;----------------------------------------------------------------------------
 31326                                  
 31327                                  GetNibble:
 31328 00002A7B 80FB30                  	cmp	bl,'0'
 31329                                  	;jb	short gnib_err
 31330                                  	; 11/12/2022
 31331 00002A7E 72FA                    	jb	short gnib_ret ; cf=1
 31332 00002A80 80FB39                  	cmp	bl,'9'
 31333 00002A83 7704                    	ja	short is_it_hex
 31334 00002A85 80EB30                  	sub	bl,'0'		; clc
 31335 00002A88 C3                      	retn
 31336                                  is_it_hex:
 31337 00002A89 80FB41                  	cmp	bl,'A'
 31338                                  	;jb	short gnib_err
 31339                                  	; 11/12/2022
 31340 00002A8C 72EC                    	jb	short gnib_ret ; cf=1
 31341 00002A8E 80FB46                  	cmp	bl,'F'
 31342 00002A91 77E6                    	ja	short gnib_err ; 11/12/2022
 31343 00002A93 80EB37                  	sub	bl,'A'- 10	; clc
 31344 00002A96 C3                      	retn
 31345                                  	; 11/12/2022
 31346                                  ;gnib_err:
 31347                                  ;	stc
 31348                                  ;gnib_ret:
 31349                                  ;	retn
 31350                                  
 31351                                  ;============================================================================
 31352                                  
 31353                                  ; 12/04/2019 - Retro DOS v4.0
 31354                                  
 31355                                  ; umb.inc (MSDOS 6.0, 1991)
 31356                                  DOS_ARENA	equ 24h		; offset of arena_head var in DOS data segm.
 31357                                  UMB_ARENA	equ 8Ch		; offset of umb_head in DOS data
 31358                                  
 31359                                  XMM_REQUEST_UMB	equ 10h
 31360                                  XMM_RELEASE_UMB	equ 11h
 31361                                  
 31362                                  ;----------------------------------------------------------------------------
 31363                                  ;
 31364                                  ; procedure : AllocUMB
 31365                                  ;
 31366                                  ;	Allocate all UMBs and link it to DOS arena chain
 31367                                  ;
 31368                                  ;----------------------------------------------------------------------------
 31369                                  
 31370                                  AllocUMB:
 31371                                  	; 31/12/2022
 31372                                  	; ds = cs
 31373 00002A97 E81000                  	call	InitAllocUMB		; link in the first UMB
 31374 00002A9A 720D                    	jc	short au_exit		; quit on error
 31375                                  au_next:
 31376 00002A9C E83900                  	call	umb_allocate		; allocate
 31377 00002A9F 7205                    	jc	short au_coalesce
 31378 00002AA1 E85200                  	call	umb_insert		; & insert till no UMBs
 31379 00002AA4 EBF6                    	jmp	short au_next
 31380                                  au_coalesce:
 31381 00002AA6 E80B01                  	call	umb_coalesce		; coalesce all UMBs
 31382                                  au_exit:
 31383                                  	; 31/12/2022
 31384                                  	; ds = cs
 31385 00002AA9 C3                      	retn
 31386                                  
 31387                                  ;----------------------------------------------------------------------------
 31388                                  ;
 31389                                  ; procedure : InitAllocUMB
 31390                                  ;
 31391                                  ;----------------------------------------------------------------------------
 31392                                  
 31393                                  InitAllocUMB:
 31394                                  	; 31/12/2022
 31395                                  	; ds = cs
 31396 00002AAA E874DF                  	call	IsXMSLoaded
 31397 00002AAD 7527                    	jnz	short iau_err		; quit on no XMS driver
 31398 00002AAF B452                    	mov	ah,52h
 31399 00002AB1 CD21                    	int	21h			; get DOS DATA seg
 31400                                  	; 31/12/2022
 31401                                  	; ds = cs
 31402                                  	;mov	[cs:DevDOSData],es	; & save it for later
 31403 00002AB3 8C06[161F]              	mov	[DevDOSData],es		; & save it for later
 31404 00002AB7 B81043                  	mov	ax,4310h
 31405 00002ABA CD2F                    	int	2Fh
 31406                                  	;mov	[cs:DevXMSAddr],bx	; get XMS driver address
 31407                                  	;mov	[cs:DevXMSAddr+2],es
 31408 00002ABC 891E[FF1E]              	mov	[DevXMSAddr],bx		; get XMS driver address
 31409 00002AC0 8C06[011F]              	mov	[DevXMSAddr+2],es	
 31410                                  	; 31/12/2022
 31411 00002AC4 803E[151F]00            	cmp	byte [FirstUMBLinked],0 
 31412                                  	;cmp	byte [cs:FirstUMBLinked],0 ; have we already linked a UMB?
 31413                                  	;jne	short ia_1		; quit if we already did it
 31414                                  	; 12/12/2022
 31415 00002AC9 770A                    	ja	short ia_1 ; cf=0
 31416 00002ACB E83401                  	call	LinkFirstUMB		; else link the first UMB
 31417                                  	;jc	short iau_err
 31418                                  	; 12/12/2022
 31419 00002ACE 7207                    	jc	short iau_err2  ; cf=1
 31420                                  	; 31/12/2022
 31421                                  	; ds = cs
 31422 00002AD0 C606[151F]FF            	mov	byte [FirstUMBLinked],0FFh ; mark that 1st UMB linked
 31423                                  	;mov	byte [cs:FirstUMBLinked],0FFh ; mark that 1st UMB linked
 31424                                  ia_1:
 31425                                  	; 12/12/2022
 31426                                  	; cf=0
 31427                                  	;clc
 31428 00002AD5 C3                      	retn
 31429                                  iau_err:
 31430 00002AD6 F9                      	stc
 31431                                  iau_err2:
 31432 00002AD7 C3                      	retn
 31433                                  
 31434                                  ;-------------------------------------------------------------------------
 31435                                  ;
 31436                                  ; Procedure Name	: umb_allocate
 31437                                  ;
 31438                                  ; Inputs		: DS = data
 31439                                  ;
 31440                                  ; Outputs		: if UMB available
 31441                                  ;				Allocates the largest available UMB and 
 31442                                  ;			  	BX = segment of allocated block
 31443                                  ;				DX = size of allocated block
 31444                                  ;				NC
 31445                                  ;			  else 
 31446                                  ;				CY
 31447                                  ;
 31448                                  ; Uses			: BX, DX
 31449                                  ;
 31450                                  ;-------------------------------------------------------------------------
 31451                                  
 31452                                  umb_allocate:
 31453                                  	; 31/12/2022
 31454                                  	; ds = cs
 31455 00002AD8 50                      	push	ax
 31456 00002AD9 B410                    	mov	ah,XMM_REQUEST_UMB ; 16
 31457 00002ADB BAFFFF                  	mov	dx,0FFFFh		; try to allocate largest
 31458                                  					;   possible
 31459                                  	; 31/12/2022
 31460 00002ADE FF1E[FF1E]              	call	far [DevXMSAddr]
 31461                                  	;call	far [cs:DevXMSAddr]
 31462                                  					; dx now contains the size of
 31463                                  					; the largest UMB
 31464 00002AE2 09D2                    	or	dx,dx
 31465 00002AE4 740D                    	jz	short ua_err
 31466                                  	
 31467 00002AE6 B410                    	mov	ah,XMM_REQUEST_UMB ; 16
 31468                                  
 31469                                  	; 31/12/2022
 31470 00002AE8 FF1E[FF1E]              	call	far [DevXMSAddr]
 31471                                  	;call	far [cs:DevXMSAddr]
 31472                                  
 31473 00002AEC 83F801                  	cmp	ax,1			; Q: was the reqst successful
 31474 00002AEF 7502                    	jne	short ua_err		; N: error
 31475                                  	;clc
 31476                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 31477                                  	; 12/12/2022
 31478                                  	; cf=0
 31479                                  	;clc 
 31480                                  ua_done:
 31481 00002AF1 58                      	pop	ax
 31482 00002AF2 C3                      	retn
 31483                                  ua_err:
 31484 00002AF3 F9                      	stc
 31485 00002AF4 EBFB                    	jmp	short ua_done
 31486                                  
 31487                                  ;---------------------------------------------------------------------------
 31488                                  ;
 31489                                  ; Procedure Name	: umb_insert
 31490                                  ;
 31491                                  ; Inputs		: DOSDATA:UMB_HEAD = start of umb chain
 31492                                  ;			: BX = seg address of UMB to be linked in
 31493                                  ;			: DX = size of UMB to be linked in paras
 31494                                  ;			; DS = data
 31495                                  ;
 31496                                  ; Outputs		: links the UMB into the arena chain
 31497                                  ;
 31498                                  ; Uses			: AX, CX, ES, DX, BX
 31499                                  ;
 31500                                  ;---------------------------------------------------------------------------
 31501                                  
 31502                                  umb_insert:
 31503 00002AF6 1E                      	push	ds
 31504                                  
 31505                                  	; 31/12/2022
 31506                                  	; ds = cs
 31507                                  
 31508                                  	;mov	ds,[cs:DevDOSData]
 31509 00002AF7 8E1E[161F]              	mov	ds,[DevDOSData] ; 31/12/2022 
 31510                                  	;mov	ds,[8Ch]
 31511 00002AFB 8E1E8C00                	mov	ds,[UMB_ARENA]		; es = UMB_HEAD
 31512 00002AFF 8CD8                    	mov	ax,ds
 31513 00002B01 8EC0                    	mov	es,ax
 31514                                  ui_next:
 31515 00002B03 39D8                    	cmp	ax,bx			; Q: is current block above
 31516                                  					;    new block
 31517 00002B05 770F                    	ja	short ui_insert		; Y: insert it
 31518                                  					; Q: is current block the
 31519                                  					;    last
 31520 00002B07 26803E00005A            	cmp	byte [es:ARENA.SIGNATURE],arena_signature_end ; 'Z'
 31521 00002B0D 745C                    	je	short ui_append		; Y: append new block to chain
 31522                                  					; N: get next block
 31523 00002B0F 8ED8                    	mov	ds,ax			; M005
 31524                                  	;call	get_next		; ax = es = next block
 31525 00002B11 E8E200                  	call	_get_next_ ; 13/04/2019 - Retro DOS v4.0
 31526 00002B14 EBED                    	jmp	short ui_next
 31527                                  
 31528                                  ui_insert:
 31529 00002B16 8CD9                    	mov	cx,ds			; ds = previous arena
 31530 00002B18 41                      	inc	cx			; top of previous block
 31531                                  
 31532 00002B19 29D9                    	sub	cx,bx
 31533 00002B1B F7D9                    	neg	cx			; cx = size of used block
 31534                                  	;mov	byte [0],'M'
 31535 00002B1D C60600004D              	mov	byte [ARENA.SIGNATURE],arena_signature_normal ; 'M'
 31536                                  	;mov	word [1],8
 31537 00002B22 C70601000800            	mov	word [ARENA.OWNER],8	; mark as system owned
 31538                                  	;mov	[3],cx
 31539 00002B28 890E0300                	mov	[ARENA.SIZE],cx	
 31540                                  	;mov	word [8],4353h ; 'SC'
 31541 00002B2C C70608005343            	mov	word [ARENA.NAME],'SC' ; 4353h
 31542                                  
 31543                                  ; prepare the arena at start of new block
 31544                                  
 31545 00002B32 8EC3                    	mov	es,bx
 31546 00002B34 26C60600004D            	mov	byte [es:ARENA.SIGNATURE],arena_signature_normal ; 'M'
 31547 00002B3A 26C70601000000          	mov	word [es:ARENA.OWNER],arena_owner_system ; 0
 31548                                  					; mark as free
 31549 00002B41 83EA02                  	sub	dx,2			; make room for arena at
 31550                                  					; start & end of new block
 31551 00002B44 2689160300              	mov	[es:ARENA.SIZE],dx
 31552                                  
 31553                                  ; prepare arena at end of new block
 31554                                  	
 31555 00002B49 01D3                    	add	bx,dx
 31556 00002B4B 43                      	inc	bx
 31557 00002B4C 8EC3                    	mov	es,bx			; es=arena at top of new block
 31558 00002B4E 43                      	inc	bx			; bx=top of new block
 31559                                  
 31560                                  					; ax contains arena just above
 31561                                  					; this block
 31562 00002B4F 29D8                    	sub	ax,bx			; ax = size of used block
 31563                                  	
 31564 00002B51 26C60600004D            	mov	byte [es:ARENA.SIGNATURE],arena_signature_normal
 31565 00002B57 26C70601000800          	mov	word [es:ARENA.OWNER],8	; mark as system owned
 31566 00002B5E 26A30300                	mov	[es:ARENA.SIZE],ax	
 31567 00002B62 26C70608005343          	mov	word [es:ARENA.NAME],'SC' ; 4353h
 31568                                  
 31569 00002B69 EB47                    	jmp	short ui_done
 31570                                  
 31571                                  ui_append:
 31572                                  					; es = arena of last block	
 31573 00002B6B 2603060300              	add	ax,[es:ARENA.SIZE]	; ax=top of last block-1 para
 31574 00002B70 26832E030001            	sub	word [es:ARENA.SIZE],1	; reflect the space we are
 31575                                  					; going to rsrv on top of this 
 31576                                  					; block for the next arena.
 31577                                  	; 13/05/2019
 31578 00002B76 26C60600004D            	mov	byte [es:ARENA.SIGNATURE],arena_signature_normal
 31579                                  
 31580 00002B7C 89C1                    	mov	cx,ax			; cx=top of prev block-1
 31581 00002B7E 40                      	inc	ax
 31582 00002B7F 29D8                    	sub	ax,bx			; ax=top of prev block - 
 31583                                  					;    seg. address of new block
 31584 00002B81 F7D8                    	neg	ax
 31585                                  
 31586 00002B83 8EC1                    	mov	es,cx			; ds = arena of unused block
 31587                                  
 31588 00002B85 26C60600004D            	mov	byte [es:ARENA.SIGNATURE],arena_signature_normal
 31589 00002B8B 26C70601000800          	mov	word [es:ARENA.OWNER],8	; mark as system owned
 31590 00002B92 26A30300                	mov	[es:ARENA.SIZE],ax	
 31591 00002B96 26C70608005343          	mov	word [es:ARENA.NAME],'SC'
 31592                                  
 31593                                  ; prepare the arena at start of new block
 31594 00002B9D 8EC3                    	mov	es,bx
 31595 00002B9F 26C60600005A            	mov	byte [es:ARENA.SIGNATURE],arena_signature_end
 31596 00002BA5 26C70601000000          	mov	word [es:ARENA.OWNER],arena_owner_system
 31597                                  					; mark as free
 31598 00002BAC 4A                      	dec	dx			; make room for arena
 31599 00002BAD 2689160300              	mov	[es:ARENA.SIZE],dx	
 31600                                  ui_done:
 31601                                  uc_done: ; 31/12/2022 ; *!
 31602 00002BB2 1F                      	pop	ds
 31603                                  	; ds = cs ; 31/12/2022
 31604                                  ;uc_done:	; 18/12/2022
 31605 00002BB3 C3                      	retn
 31606                                  
 31607                                  ; 13/04/2019 - Retro DOS v4.0
 31608                                  
 31609                                  ;----------------------------------------------------------------------------
 31610                                  ;
 31611                                  ;**	umb_coalesce - Combine free blocks ahead with current block
 31612                                  ;
 31613                                  ;	Coalesce adds the block following the argument to the argument block,
 31614                                  ;	iff it's free.  Coalesce is usually used to join free blocks, but
 31615                                  ;	some callers (such as $setblock) use it to join a free block to it's
 31616                                  ;	preceeding allocated block.
 31617                                  ;
 31618                                  ;	EXIT	'C' clear if OK
 31619                                  ;		  (ds) unchanged, this block updated
 31620                                  ;		  (ax) = address of next block, IFF not at end
 31621                                  ;		'C' set if arena trashed
 31622                                  ;	USES	cx, di, ds, es
 31623                                  ;
 31624                                  ;----------------------------------------------------------------------------
 31625                                  
 31626                                  umb_coalesce:
 31627                                  	; 31/12/2022
 31628                                  	; ds = cs
 31629 00002BB4 1E                      	push	ds ; *!
 31630                                  
 31631 00002BB5 31FF                    	xor	di, di
 31632                                  
 31633                                  	;mov	es,[cs:DevDOSData]
 31634                                  	; 31/12/2022
 31635 00002BB7 8E06[161F]              	mov	es,[DevDOSData]
 31636 00002BBB 268E068C00              	mov	es,[es:UMB_ARENA]	; es = UMB_HEAD
 31637                                  uc_nextfree:
 31638 00002BC0 8CC0                    	mov	ax,es
 31639 00002BC2 8ED8                    	mov	ds,ax
 31640                                  	;cmp	[es:1],di
 31641 00002BC4 26393E0100              	cmp	[es:ARENA.OWNER],di	; Q: is current arena free
 31642 00002BC9 7407                    	je	short uc_again		; Y: try to coalesce with next block
 31643                                  					; N: get next arena
 31644 00002BCB E82100                  	call	get_next		; es, ax = next arena
 31645 00002BCE 72E2                    	jc	short uc_done	; *!
 31646 00002BD0 EBEE                    	jmp	short uc_nextfree
 31647                                  uc_again:
 31648 00002BD2 E81A00                  	call	get_next		; ES, AX <- next block
 31649 00002BD5 72DB                    	jc	short uc_done	; *!
 31650                                  uc_check:
 31651 00002BD7 26393E0100              	cmp     [es:ARENA.OWNER],di	; Q: is arena free
 31652 00002BDC 75E2                    	jne	short uc_nextfree	; N: get next free arena
 31653                                  					; Y: coalesce
 31654 00002BDE 268B0E0300              	mov     cx,[es:ARENA.SIZE]      ; cx <- next block size
 31655 00002BE3 41                      	inc     cx                      ; cx <- cx + 1 (for header size)
 31656                                  	;add	[3],cx
 31657 00002BE4 010E0300                	add     [ARENA.SIZE],cx		; current size <- current size + cx
 31658 00002BE8 268A0D                  	mov     cl,[es:di]              ; move up signature
 31659 00002BEB 880D                    	mov     [di],cl
 31660 00002BED EBE3                    	jmp     short uc_again		; try again
 31661                                  
 31662                                  	; 18/12/2022
 31663                                  ;uc_done:
 31664                                  	;retn
 31665                                  
 31666                                  ;----------------------------------------------------------------------------
 31667                                  ;
 31668                                  ;**	get_next - Find Next item in Arena
 31669                                  ;
 31670                                  ;	ENTRY	dS - pointer to block head
 31671                                  ;	EXIT	AX,ES - pointers to next head
 31672                                  ;		'C' set if arena damaged
 31673                                  ;
 31674                                  ;----------------------------------------------------------------------------
 31675                                  
 31676                                  	; 01/11/2022
 31677                                  get_next:
 31678 00002BEF 803E00005A              	cmp	byte [0],arena_signature_end ; 'Z'
 31679 00002BF4 740A                    	je	short gn_err
 31680                                  _get_next_:
 31681 00002BF6 8CD8                    	mov     ax,ds                   ; ax=current block
 31682 00002BF8 03060300                	add     ax,[ARENA.SIZE]		; ax=ax + current block length
 31683 00002BFC 40                      	inc     ax                      ; remember that header!
 31684 00002BFD 8EC0                    	mov	es,ax
 31685                                  	;clc
 31686                                  	; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 31687                                  	; 11/12/2022
 31688                                  	; cf=0
 31689                                  	;clc
 31690 00002BFF C3                      	retn
 31691                                  gn_err:
 31692 00002C00 F9                      	stc
 31693                                  	; 11/12/2022	
 31694                                  lfu_err:	 ; cf=1
 31695 00002C01 C3                      	retn
 31696                                  
 31697                                  ;----------------------------------------------------------------------------
 31698                                  ;
 31699                                  ; procedure : LinkFirstUMB
 31700                                  ;
 31701                                  ;----------------------------------------------------------------------------
 31702                                  
 31703                                  	; 01/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 31704                                  	; (SYSINIT:2F81h)
 31705                                  LinkFirstUMB:
 31706                                  	; 31/12/2022
 31707                                  	; ds = cs
 31708 00002C02 E8D3FE                  	call	umb_allocate
 31709 00002C05 72FA                    	jc	short lfu_err  ; ds = cs ; 31/12/2022
 31710                                  
 31711                                  ; bx = segment of allocated UMB
 31712                                  ; dx = size of UMB
 31713                                  
 31714                                  	; 31/12/2022
 31715                                  	; ds = cs
 31716                                  
 31717 00002C07 CD12                    	int	12h			; ax = size of memory
 31718 00002C09 B106                    	mov	cl,6
 31719 00002C0B D3E0                    	shl	ax,cl			; ax = size in paragraphs
 31720                                  
 31721 00002C0D 89C1                    	mov	cx,ax			; cx = size in paras
 31722 00002C0F 29D8                    	sub	ax,bx			; ax = - size of unused block
 31723                                  
 31724 00002C11 F7D8                    	neg	ax
 31725                                  
 31726 00002C13 83E901                  	sub	cx,1			; cx = first umb_arena
 31727 00002C16 8EC1                    	mov	es,cx			; es = first umb_arena
 31728                                  	
 31729 00002C18 26C60600004D            	mov	byte [es:ARENA.SIGNATURE],arena_signature_normal ; 'M'
 31730 00002C1E 26C70601000800          	mov	word [es:ARENA.OWNER],8	; mark as system owned
 31731                                  					
 31732 00002C25 26A30300                	mov	[es:ARENA.SIZE],ax	
 31733 00002C29 26C70608005343          	mov	word [es:ARENA.NAME],'SC' ; 4353h
 31734                                  
 31735                                  ; put in the arena for the first UMB
 31736                                  
 31737 00002C30 8EC3                    	mov	es,bx			; es has first free umb seg
 31738 00002C32 26C60600005A            	mov	byte [es:ARENA.SIGNATURE],arena_signature_end ; 'Z'
 31739 00002C38 26C70601000000          	mov	word [es:ARENA.OWNER],arena_owner_system ; 0	
 31740                                  					; mark as free 
 31741 00002C3F 4A                      	dec	dx			; make room for arena
 31742 00002C40 2689160300              	mov	[es:ARENA.SIZE],dx	
 31743                                  
 31744                                  	;mov	es,[cs:DevDOSData]
 31745                                  	; 31/12/2022
 31746 00002C45 8E06[161F]              	mov	es,[DevDOSData] ; ds = cs
 31747 00002C49 BF8C00                  	mov	di,UMB_ARENA ; 8Ch
 31748 00002C4C 26890D                  	mov	[es:di],cx		; initialize umb_head in DOS
 31749                                  					;  data segment with the arena
 31750                                  					;  just below Top of Mem
 31751                                  
 31752                                  ; we must now scan the arena chain and update the size of the last arena
 31753                                  
 31754 00002C4F BF2400                  	mov	di,DOS_ARENA ; 24h
 31755 00002C52 268E05                  	mov	es,[es:di]		; es = start arena
 31756 00002C55 31FF                    	xor	di,di
 31757                                  ;scan_next
 31758                                  ; 09/12/2022
 31759                                  scannext:
 31760 00002C57 26803D5A                	cmp	byte [es:di],arena_signature_end  ; 'Z'
 31761 00002C5B 740C                    	je	short got_last
 31762                                  	
 31763 00002C5D 8CC0                    	mov	ax,es
 31764 00002C5F 2603060300              	add	ax,[es:ARENA.SIZE]
 31765 00002C64 40                      	inc	ax
 31766 00002C65 8EC0                    	mov	es,ax
 31767                                  	;jmp	short scan_next
 31768                                  	; 09/12/2022
 31769 00002C67 EBEE                    	jmp	short scannext
 31770                                  got_last:
 31771 00002C69 26832E030001            	sub	word [es:ARENA.SIZE],1
 31772 00002C6F 26C60600004D            	mov	byte [es:ARENA.SIGNATURE],arena_signature_normal ; 'M'
 31773                                  	;clc
 31774                                  	; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 31775                                  	; 11/12/2022
 31776                                  	; cf=0
 31777                                  	;clc
 31778 00002C75 C3                      	retn
 31779                                  
 31780                                  ; 11/12/2022
 31781                                  ;;lfu_err:
 31782                                  ;	;stc
 31783                                  ;	; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 31784                                  ;	; 11/12/2022
 31785                                  ;	; cf=1
 31786                                  ;	;stc
 31787                                  ;	retn
 31788                                  
 31789                                  ;----------------------------------------------------------------------------
 31790                                  ;
 31791                                  ; procedure : ShrinkUMB
 31792                                  ;
 31793                                  ;	Shrinks the current UMB in use, so that the unused portions
 31794                                  ;	of the UMB is given back to the DOS free mem pool
 31795                                  ;
 31796                                  ;----------------------------------------------------------------------------
 31797                                  
 31798                                  ShrinkUMB:
 31799                                  	; 12/12/2022
 31800                                  	; ds = cs
 31801 00002C76 833E[F91E]00            	cmp	word [DevUMBAddr],0
 31802                                  	;cmp	word [cs:DevUMBAddr],0
 31803 00002C7B 7421                    	je	short su_exit
 31804 00002C7D 06                      	push	es
 31805 00002C7E 53                      	push	bx
 31806                                  	; 12/12/2022
 31807                                  	;mov	bx,[cs:DevUMBFree]
 31808                                  	;sub	bx,[cs:DevUMBAddr]
 31809                                  	;mov	es,[cs:DevUMBAddr]
 31810 00002C7F 8B1E[FD1E]              	mov	bx,[DevUMBFree]
 31811 00002C83 2B1E[F91E]              	sub	bx,[DevUMBAddr]
 31812 00002C87 8E06[F91E]              	mov	es,[DevUMBAddr]
 31813                                  	
 31814 00002C8B B8004A                  	mov	ax,4A00h
 31815 00002C8E CD21                    	int	21h
 31816                                  		; DOS - 2+ - ADJUST MEMORY BLOCK SIZE (SETBLOCK)
 31817                                  		; ES = segment address of block to change
 31818                                  		; BX = new size in paragraphs
 31819 00002C90 8CC0                    	mov	ax,es
 31820 00002C92 48                      	dec	ax
 31821 00002C93 8EC0                    	mov	es,ax
 31822 00002C95 26C70601000800          	mov	word [es:ARENA.OWNER],8
 31823 00002C9C 5B                      	pop	bx
 31824 00002C9D 07                      	pop	es
 31825                                  su_exit:
 31826 00002C9E C3                      	retn
 31827                                  
 31828                                  ;----------------------------------------------------------------------------
 31829                                  ;
 31830                                  ; procedure : UnlinkUMB
 31831                                  ;
 31832                                  ;	Unlinks the UMBs from the DOS arena chain
 31833                                  ;
 31834                                  ;----------------------------------------------------------------------------
 31835                                  
 31836                                  UnlinkUMB:
 31837                                  	; 12/12/2022
 31838                                  	; ds = cs
 31839 00002C9F 1E                      	push	ds
 31840 00002CA0 06                      	push	es
 31841                                  	; 12/12/2022
 31842 00002CA1 803E[151F]00            	cmp	byte [FirstUMBLinked],0
 31843                                  	;cmp	byte [cs:FirstUMBLinked],0
 31844 00002CA6 7420                    	je	short ulu_x		; nothing to unlink
 31845                                  	; 12/12/2022
 31846 00002CA8 8E06[161F]              	mov	es,[DevDOSData]
 31847                                  	;mov	es,[cs:DevDOSData]	; get DOS data seg
 31848 00002CAC 268E1E2400              	mov	ds,[es:DOS_ARENA]
 31849 00002CB1 268B3E8C00              	mov	di,[es:UMB_ARENA]
 31850                                  ulu_next:
 31851 00002CB6 E836FF                  	call	get_next
 31852 00002CB9 720D                    	jc	short ulu_x
 31853 00002CBB 39C7                    	cmp	di,ax			; is the next one UMB ?
 31854 00002CBD 7404                    	je	short ulu_found
 31855 00002CBF 8ED8                    	mov	ds,ax
 31856 00002CC1 EBF3                    	jmp	short ulu_next
 31857                                  ulu_found:
 31858                                  	;mov	byte [0],'Z'
 31859 00002CC3 C60600005A              	mov     byte [ARENA.SIGNATURE],arena_signature_end ; 'Z'
 31860                                  ulu_x:
 31861 00002CC8 07                      	pop	es
 31862 00002CC9 1F                      	pop	ds
 31863 00002CCA C3                      	retn
 31864                                  
 31865                                  ; ----------------------------------------------------------------------
 31866                                  ; SYSINIT2.ASM - MSDOS 6.0 - 1991
 31867                                  ; ----------------------------------------------------------------------
 31868                                  ; 14/04/2019 - Retro DOS v4.0
 31869                                  
 31870                                  ; Multiple configuration block support  Created 16-Mar-1992 by JeffPar
 31871                                  ;
 31872                                  ; Summary:
 31873                                  ;
 31874                                  ;   The procedure "organize" crunches the in-memory copy of config.sys
 31875                                  ;   into lines delimited by CR/LF (sometimes no CR, but *always* an LF)
 31876                                  ;   with the leading "keyword=" replaced by single character codes (eg, B
 31877                                  ;   for BUFFERS, D for DEVICE, Z for any unrecognized keyword); see comtab
 31878                                  ;   and/or config.inc for the full list.
 31879                                  ;
 31880                                  ;   [blockname] and INCLUDE are the major syntactical additions for multi-
 31881                                  ;   configuration support. blockname is either MENU, which contains one
 31882                                  ;   or more MENUITEM lines, an optional MENUDEFAULT (which includes optional
 31883                                  ;   time-out), or any user-defined keyword, such as NETWORK, CD-ROM, etc.
 31884                                  ;   INCLUDE allows the current block to name another block for inclusion
 31885                                  ;   during the processing phase of CONFIG.SYS. An INCLUDE is only honored
 31886                                  ;   once, precluding nasty infinite-loop scenarios. If blocks are present
 31887                                  ;   without a MENU block, then only lines inside COMMON blocks are processed.
 31888                                  ;
 31889                                  ; Example:
 31890                                  ;
 31891                                  ;   [menu]
 31892                                  ;   menuitem=misc,Miscellaneous
 31893                                  ;   menuitem=network,Network Configuration
 31894                                  ;   menudefault=network,15
 31895                                  ;
 31896                                  ;   [network]
 31897                                  ;   include misc
 31898                                  ;   device=foo
 31899                                  ;
 31900                                  ;   [misc]
 31901                                  ;   device=bar
 31902                                  ;   include alternate
 31903                                  ;
 31904                                  ;   [alternate]
 31905                                  ;   device=tar
 31906                                  ;
 31907                                  ;
 31908                                  ;   When the menu is displayed
 31909                                  ;
 31910                                  ;    1. Miscellaneous
 31911                                  ;    2. Network Configuration
 31912                                  ;
 31913                                  ;   #2 is highlighted as the default option, and will be automatically
 31914                                  ;   selected after 15 seconds. It will invoke the following lines in the
 31915                                  ;   following order:
 31916                                  ;
 31917                                  ;       DEVICE=BAR
 31918                                  ;       DEVICE=TAR
 31919                                  ;       DEVICE=FOO
 31920                                  ;
 31921                                  
 31922                                  ;MULTI_CONFIG equ 1
 31923                                  
 31924                                  ; the following depend on the positions of the various letters in switchlist
 31925                                  
 31926                                  switchnum	equ 11111000b ; 0F8h	; which switches require number
 31927                                  
 31928                                  flagec35	equ 00000100b ; 4	; electrically compatible 3.5 inch disk drive
 31929                                  flagdrive	equ 00001000b ; 8 
 31930                                  flagcyln	equ 00010000b ; 16
 31931                                  flagseclim	equ 00100000b ; 32
 31932                                  flagheads	equ 01000000b ; 64
 31933                                  flagff		equ 10000000b ; 128
 31934                                  
 31935                                  ;----------------------------------------------------------------------------
 31936                                  ; 19/04/2019 - Retro DOS v4.0
 31937                                  
 31938                                  ; MSDOS 6.21 IO.SYS - SYSINIT:3E78h
 31939                                  
 31940                                  ; 01/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 31941                                  ; MSDOS 5.0 IO.SYS - SYSINIT:3054h
 31942                                  
 31943 00002CCB 00                      insert_blank:	db 	0
 31944                                  
 31945                                  ;----------------------------------------------------------------------------
 31946                                  ;
 31947                                  ; procedure : setparms
 31948                                  ;
 31949                                  ; the following set of routines is used to parse the drivparm = command in
 31950                                  ; the config.sys file to change the default drive parameters.
 31951                                  ;
 31952                                  ;----------------------------------------------------------------------------
 31953                                  
 31954                                  setparms:
 31955 00002CCC 1E                      	push	ds
 31956 00002CCD 50                      	push	ax
 31957 00002CCE 53                      	push	bx
 31958 00002CCF 51                      	push	cx
 31959 00002CD0 52                      	push	dx
 31960                                  
 31961 00002CD1 0E                      	push	cs
 31962 00002CD2 1F                      	pop	ds
 31963                                  
 31964 00002CD3 31DB                    	xor	bx,bx
 31965 00002CD5 8A1E[9636]              	mov	bl,[drive]
 31966                                  	; 18/12/2022
 31967 00002CD9 43                      	inc	bx
 31968                                  	;inc	bl			; get it correct for ioctl call
 31969                                  					; (1=a,2=b...)
 31970 00002CDA BA[6E35]                	mov	dx,deviceparameters
 31971 00002CDD B444                    	mov	ah,IOCTL ; 44h
 31972 00002CDF B00D                    	mov	al,GENERIC_IOCTL ; 0Dh
 31973 00002CE1 B508                    	mov	ch,RAWIO ; 8
 31974 00002CE3 B140                    	mov	cl,SET_DEVICE_PARAMETERS ; 40h
 31975 00002CE5 CD21                    	int	21h
 31976                                  
 31977                                  ; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 31978                                  ;
 31979                                  ;	;;mov	ax,Bios_Data		; get Bios_Data segment
 31980                                  ;	;mov	ax,KERNEL_SEGMENT ; 70h
 31981                                  ;	; 21/10/2022
 31982                                  ;	mov	ax,DOSBIODATASEG ; 0070h	
 31983                                  ;	mov	ds,ax			; set Bios_Data segment
 31984                                  ;
 31985                                  ;	test	word [cs:switches],flagec35 ; 4
 31986                                  ;	jz	short not_ec35
 31987                                  
 31988                                  	; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 31989                                  	;test	word [switches],flagec35 ; 4
 31990                                  	; 12/12/2022
 31991 00002CE7 F606[9736]04            	test	byte [switches],flagec35 ; 4
 31992 00002CEC 7411                    	jz	short eot_ok
 31993                                  
 31994                                  	;mov	cl,[cs:drive]		; which drive was this for?
 31995                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 31996 00002CEE 8A0E[9636]              	mov	cl,[drive]
 31997 00002CF2 B87000                  	mov	ax,DOSBIODATASEG ; 0070h	
 31998 00002CF5 8ED8                    	mov	ds,ax	
 31999                                  
 32000 00002CF7 B001                    	mov	al,1			; assume drive 0
 32001 00002CF9 D2E0                    	shl	al,cl			; set proper bit depending on drive
 32002                                  	;or	[531h],al ; (MSDOS 6.21 IO.SYS Offset SYINIT:3EACh)
 32003 00002CFB 0806[3105]              	or	[ec35_flag],al		; set the bit in the permanent flags
 32004                                  
 32005                                  ; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 32006                                  ;
 32007                                  ;not_ec35:
 32008                                  ;;	Now adjust the BIOS's EOT variable if our new drive has more
 32009                                  ;;	sectors per track than any old ones.
 32010                                  ;
 32011                                  ;	;mov	al,[cs:deviceparameters+20]
 32012                                  ;	mov	al,[cs:deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.BPB_SECTORSPERTRACK]
 32013                                  ;	;cmp	al,[12Ch] ; (MSDOS 6.21 IO.SYS Offset SYINIT:3EB4h)
 32014                                  ;	cmp	al,[EOT]
 32015                                  ;	jbe	short eot_ok
 32016                                  ;	mov	[EOT],al
 32017                                  
 32018                                  eot_ok:
 32019 00002CFF 5A                      	pop	dx			; fix up all the registers
 32020 00002D00 59                      	pop	cx
 32021 00002D01 5B                      	pop	bx
 32022 00002D02 58                      	pop	ax
 32023 00002D03 1F                      	pop	ds ; 13/05/2019
 32024 00002D04 C3                      	retn
 32025                                  
 32026                                  ;----------------------------------------------------------------------------
 32027                                  ;
 32028                                  ; procedure : diddleback
 32029                                  ;
 32030                                  ; replace default values for further drivparm commands
 32031                                  ;
 32032                                  ;----------------------------------------------------------------------------
 32033                                  
 32034                                  diddleback:
 32035 00002D05 1E                      	push	ds
 32036 00002D06 0E                      	push	cs
 32037 00002D07 1F                      	pop	ds
 32038                                  	;mov	word [deviceparameters+4],80
 32039 00002D08 C706[7235]5000          	mov	word [deviceparameters+A_DEVICEPARAMETERS.DP_CYLINDERS],80
 32040                                  	;mov	byte [deviceparameters+1],2
 32041 00002D0E C606[6F35]02            	mov	byte [deviceparameters+A_DEVICEPARAMETERS.DP_DEVICETYPE],DEV_3INCH720KB ; 2
 32042                                  	;mov	word [deviceparameters+2],0
 32043 00002D13 C706[7035]0000          	mov	word [deviceparameters+A_DEVICEPARAMETERS.DP_DEVICEATTRIBUTES],0
 32044 00002D19 C706[9736]0000          	mov	word [switches],0	    ; zero all switches
 32045 00002D1F 1F                      	pop	ds
 32046 00002D20 C3                      	retn
 32047                                  
 32048                                  ; 04/01/2023
 32049                                  %if 0
 32050                                  
 32051                                  ; 15/04/2019 - Retro DOS v4.0
 32052                                  
 32053                                  ;----------------------------------------------------------------------------
 32054                                  ;
 32055                                  ; procedure : parseline
 32056                                  ;
 32057                                  ; entry point is parseline. al contains the first character in command line.
 32058                                  ;
 32059                                  ;----------------------------------------------------------------------------
 32060                                  
 32061                                  	; 01/11/2022 - Retrodos v4.0 (Modified MSDOS 5.0 IO.SYS)
 32062                                  	; (SYSINIT:30ACh)
 32063                                  
 32064                                  parseline:
 32065                                  	push	ds
 32066                                  
 32067                                  	push	cs
 32068                                  	pop	ds
 32069                                  
 32070                                  nextswtch:
 32071                                  	cmp	al,cr			; carriage return?
 32072                                  	je	short done_line
 32073                                  	cmp	al,lf			; linefeed?
 32074                                  	je	short put_back		; put it back and done
 32075                                  
 32076                                  ; anything less or equal to a space is ignored.
 32077                                  
 32078                                  	cmp	al,' '                  ; space?
 32079                                  	jbe	short getnext		; skip over space
 32080                                  	cmp	al,'/'
 32081                                  	je	short getparm
 32082                                  	stc				; mark error invalid-character-in-input
 32083                                  	jmp	short exitpl
 32084                                  
 32085                                  getparm:
 32086                                  	call	check_switch
 32087                                  	mov	[switches],bx		; save switches read so far
 32088                                  	jc	short swterr
 32089                                  getnext:
 32090                                  	call	getchr
 32091                                  	jc	short done_line
 32092                                  	jmp	short nextswtch
 32093                                  swterr:
 32094                                  	jmp	short exitpl		; exit if error
 32095                                  
 32096                                  done_line:
 32097                                  	; 12/12/2022
 32098                                  	test	byte [switches],flagdrive ; 8
 32099                                  	;test	word [switches],flagdrive ; 8 ; see if drive specified
 32100                                  	jnz	short okay
 32101                                  	stc				; mark error no-drive-specified
 32102                                  	jmp	short exitpl
 32103                                  
 32104                                  okay:
 32105                                  	mov	ax,[switches]
 32106                                  	and	ax,0003h	    ; get flag bits for changeline and non-rem
 32107                                  	mov	[deviceparameters+A_DEVICEPARAMETERS.DP_DEVICEATTRIBUTES],ax
 32108                                  	mov	word [deviceparameters+A_DEVICEPARAMETERS.DP_TRACKTABLEENTRIES],0
 32109                                  	;clc			    ; everything is fine
 32110                                  	; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 32111                                  	; 12/12/2022
 32112                                  	; cf=0
 32113                                  	;clc
 32114                                  	call	setdeviceparameters
 32115                                  exitpl:
 32116                                  	pop	ds
 32117                                  	retn
 32118                                  put_back:
 32119                                  	inc	word [count]		; one more char to scan
 32120                                  	dec	word [chrptr]		; back up over linefeed
 32121                                  	jmp	short done_line
 32122                                  
 32123                                  %endif
 32124                                  
 32125                                  ;----------------------------------------------------------------------------
 32126                                  ;
 32127                                  ; procedure : check_switch
 32128                                  ;
 32129                                  ; processes a switch in the input. it ensures that the switch is valid, and
 32130                                  ; gets the number, if any required, following the switch. the switch and the
 32131                                  ; number *must* be separated by a colon. carry is set if there is any kind of
 32132                                  ; error.
 32133                                  ;
 32134                                  ;----------------------------------------------------------------------------
 32135                                  
 32136                                  check_switch:
 32137 00002D21 E817FA                  	call	getchr
 32138                                  	;jc	short err_check
 32139 00002D24 724E                    	jc	short err_chk
 32140 00002D26 24DF                            and     al,0DFh                 ; convert it to upper case
 32141 00002D28 3C41                    	cmp	al,'A'
 32142                                  	;jb	short err_check
 32143 00002D2A 7248                    	jb	short err_chk ; 15/04/2019 - Retro DOS v4.0
 32144 00002D2C 3C5A                    	cmp	al,'Z'
 32145 00002D2E 7743                    	ja	short err_check
 32146                                  
 32147 00002D30 06                      	push	es
 32148                                  
 32149 00002D31 0E                      	push	cs
 32150 00002D32 07                      	pop	es
 32151                                  
 32152 00002D33 8A0E[2A37]              	mov	cl,[switchlist]		; get number of valid switches
 32153 00002D37 B500                    	mov	ch,0
 32154 00002D39 BF[2B37]                	mov	di,1+switchlist		; point to string of valid switches
 32155 00002D3C F2AE                    	repne	scasb
 32156                                  
 32157 00002D3E 07                      	pop	es
 32158 00002D3F 7532                    	jnz	short err_check
 32159                                  
 32160 00002D41 B80100                  	mov	ax,1
 32161 00002D44 D3E0                    	shl	ax,cl			; set bit to indicate switch
 32162 00002D46 8B1E[9736]              	mov	bx,[switches]		; get switches so far
 32163 00002D4A 09C3                    	or	bx,ax			; save this with other switches
 32164 00002D4C 89C1                    	mov	cx,ax
 32165                                  	; 12/12/2022
 32166 00002D4E A8F8                    	test	al,switchnum ; 0F8h
 32167                                  	;test	ax,switchnum ; 0F8h	; test against switches that require number to follow
 32168 00002D50 741E                    	jz	short done_swtch
 32169                                  
 32170 00002D52 E8E6F9                  	call	getchr
 32171 00002D55 721A                    	jc	short err_swtch
 32172                                  
 32173 00002D57 3C3A                    	cmp	al,':'
 32174 00002D59 7516                    	jne	short err_swtch
 32175                                  
 32176 00002D5B E8DDF9                  	call	getchr
 32177 00002D5E 53                      	push	bx			; preserve switches
 32178                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 32179                                  	;mov	byte [cs:sepchr],' '	; allow space separators
 32180                                  	; 12/12/2022
 32181                                  	; ds = cs
 32182 00002D5F C606[2A03]20            	mov	byte [sepchr],' '
 32183 00002D64 E8D803                  	call	getnum
 32184                                  	;mov	byte [cs:sepchr],0
 32185                                  	; 12/12/2022
 32186 00002D67 C606[2A03]00            	mov	byte [sepchr],0
 32187 00002D6C 5B                      	pop	bx			; restore switches
 32188                                  
 32189                                  ; because getnum does not consider carriage-return or line-feed as ok, we do
 32190                                  ; not check for carry set here. if there is an error, it will be detected
 32191                                  ; further on (hopefully).
 32192                                  
 32193 00002D6D E80500                  	call	process_num
 32194                                  
 32195                                  done_swtch:
 32196                                  	;clc
 32197                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 32198                                  	; 12/12/2022
 32199                                  	; cf=0
 32200                                  	;clc
 32201 00002D70 C3                      	retn
 32202                                  
 32203                                  err_swtch:
 32204 00002D71 31CB                    	xor	bx,cx			; remove this switch from the records
 32205                                  err_check:
 32206 00002D73 F9                      	stc
 32207                                  err_chk:
 32208 00002D74 C3                      	retn
 32209                                  
 32210                                  ;----------------------------------------------------------------------------
 32211                                  ;
 32212                                  ; procedure : process_num
 32213                                  ;
 32214                                  ; this routine takes the switch just input, and the number following (if any),
 32215                                  ; and sets the value in the appropriate variable. if the number input is zero
 32216                                  ; then it does nothing - it assumes the default value that is present in the
 32217                                  ; variable at the beginning. zero is ok for form factor and drive, however.
 32218                                  ;
 32219                                  ;----------------------------------------------------------------------------
 32220                                  
 32221                                  	; 02/11/2022 - Retrodos v4.0 (Modified MSDOS 5.0 IO.SYS)
 32222                                  	; (SYSINIT:3156h)
 32223                                  process_num:
 32224 00002D75 850E[9736]              	test	[switches],cx		; if this switch has been done before,
 32225 00002D79 752B                    	jnz	short done_ret		; ignore this one.
 32226                                  	; 12/12/2022
 32227 00002D7B F6C108                  	test	cl,flagdrive ; 8
 32228                                  	;test	cx,flagdrive ; 8
 32229 00002D7E 7404                    	jz	short try_f
 32230 00002D80 A2[9636]                	mov	byte [drive],al
 32231                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 32232                                  	;jmp	short done_ret
 32233                                  	; 12/12/2022
 32234                                  	; cf=0
 32235 00002D83 C3                      	retn	; 13/05/2019
 32236                                  try_f:
 32237                                  	; 12/12/2022
 32238 00002D84 F6C180                  	test	cl,flagff ; 80h
 32239                                  	;test	cx,flagff ; 80h
 32240 00002D87 7404                    	jz	short try_t
 32241                                  
 32242                                  ; ensure that we do not get bogus form factors that are not supported
 32243                                  
 32244                                  	;mov	[deviceparameters+1],al
 32245 00002D89 A2[6F35]                	mov	[deviceparameters+A_DEVICEPARAMETERS.DP_DEVICETYPE],al
 32246                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 32247                                  	;jmp	short done_ret
 32248                                  	; 12/12/2022
 32249                                  	; cf=0
 32250 00002D8C C3                      	retn	; 13/05/2019
 32251                                  try_t:
 32252 00002D8D 09C0                    	or	ax,ax
 32253 00002D8F 7415                    	jz	short done_ret		; if number entered was 0, assume default value
 32254                                  	; 12/12/2022
 32255 00002D91 F6C110                  	test	cl,flagcyln ; 10h
 32256                                  	;test	cx,flagcyln ; 10h
 32257 00002D94 7404                    	jz	short try_s
 32258                                  
 32259                                  	;mov	[deviceparameters+4],ax
 32260 00002D96 A3[7235]                	mov	[deviceparameters+A_DEVICEPARAMETERS.DP_CYLINDERS],ax
 32261                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 32262                                  	;jmp	short done_ret
 32263                                  	; 12/12/2022
 32264                                  	; cf=0
 32265 00002D99 C3                      	retn	; 13/05/2019
 32266                                  try_s:
 32267                                  	; 12/12/2022
 32268 00002D9A F6C120                  	test	cl,flagseclim ; 20h
 32269                                  	;test	cx,flagseclim ; 20h
 32270 00002D9D 7404                    	jz	short try_h
 32271 00002D9F A3[9436]                	mov	[slim],ax
 32272                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 32273                                  	;jmp	short done_ret
 32274                                  	; 12/12/2022
 32275                                  	; cf=0
 32276 00002DA2 C3                      	retn	; 13/05/2019
 32277                                  
 32278                                  ; must be for number of heads
 32279                                  
 32280                                  try_h:
 32281 00002DA3 A3[9236]                	mov	[hlim],ax
 32282                                  done_ret:
 32283                                  	;clc
 32284                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 32285                                  	; 12/12/2022
 32286                                  	; cf=0 (test instruction resets cf)
 32287                                  	;clc
 32288 00002DA6 C3                      	retn
 32289                                  
 32290                                  ; 04/01/2023 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 32291                                  %if 1
 32292                                  
 32293                                  ; 15/04/2019 - Retro DOS v4.0
 32294                                  
 32295                                  ;----------------------------------------------------------------------------
 32296                                  ;
 32297                                  ; procedure : parseline
 32298                                  ;
 32299                                  ; entry point is parseline. al contains the first character in command line.
 32300                                  ;
 32301                                  ;----------------------------------------------------------------------------
 32302                                  
 32303                                  	; 01/11/2022 - Retrodos v4.0 (Modified MSDOS 5.0 IO.SYS)
 32304                                  	; (SYSINIT:30ACh)
 32305                                  parseline:
 32306                                  	; 04/01/2023
 32307                                  	; ds = cs ; *
 32308                                  
 32309                                  	;push	ds ; *
 32310                                  
 32311                                  	;push	cs ; *
 32312                                  	;pop	ds ; *
 32313                                  
 32314                                  nextswtch:
 32315 00002DA7 3C0D                    	cmp	al,cr			; carriage return?
 32316 00002DA9 741C                    	je	short done_line
 32317 00002DAB 3C0A                    	cmp	al,lf			; linefeed?
 32318 00002DAD 7421                    	je	short put_back		; put it back and done
 32319                                  
 32320                                  ; anything less or equal to a space is ignored.
 32321                                  
 32322 00002DAF 3C20                    	cmp	al,' '                  ; space?
 32323 00002DB1 760F                    	jbe	short getnext		; skip over space
 32324 00002DB3 3C2F                    	cmp	al,'/'
 32325 00002DB5 7402                    	je	short getparm
 32326 00002DB7 F9                      	stc				; mark error invalid-character-in-input
 32327                                  	;jmp	short exitpl
 32328                                  	; 04/01/2023
 32329                                  swterr:
 32330 00002DB8 C3                      	retn
 32331                                  
 32332                                  getparm:
 32333 00002DB9 E865FF                  	call	check_switch
 32334 00002DBC 891E[9736]              	mov	[switches],bx		; save switches read so far
 32335 00002DC0 72F6                    	jc	short swterr
 32336                                  getnext:
 32337 00002DC2 E876F9                  	call	getchr
 32338                                  	;jc	short done_line
 32339                                  	;jmp	short nextswtch
 32340                                  	; 04/01/2023
 32341 00002DC5 73E0                    	jnc	short nextswtch
 32342                                  ;swterr:
 32343                                  	;jmp	short exitpl		; exit if error
 32344                                  
 32345                                  done_line:
 32346                                  	; 12/12/2022
 32347 00002DC7 F606[9736]08            	test	byte [switches],flagdrive ; 8
 32348                                  	;test	word [switches],flagdrive ; 8 ; see if drive specified
 32349 00002DCC 750C                    	jnz	short okay
 32350 00002DCE F9                      	stc				; mark error no-drive-specified
 32351                                  	;jmp	short exitpl
 32352                                  	; 04/01/2023
 32353 00002DCF C3                      	retn
 32354                                  
 32355                                  ;exitpl:
 32356                                  	; 04/01/2023
 32357                                  	; ds = cs
 32358                                  	;;pop	ds ; *
 32359                                  	;retn
 32360                                  
 32361                                  put_back:
 32362 00002DD0 FF06[D203]              	inc	word [count]		; one more char to scan
 32363 00002DD4 FF0E[D603]              	dec	word [chrptr]		; back up over linefeed
 32364 00002DD8 EBED                    	jmp	short done_line
 32365                                  
 32366                                  okay:
 32367 00002DDA A1[9736]                	mov	ax,[switches]
 32368 00002DDD 83E003                  	and	ax,0003h	    ; get flag bits for changeline and non-rem
 32369 00002DE0 A3[7035]                	mov	[deviceparameters+A_DEVICEPARAMETERS.DP_DEVICEATTRIBUTES],ax
 32370 00002DE3 C706[9435]0000          	mov	word [deviceparameters+A_DEVICEPARAMETERS.DP_TRACKTABLEENTRIES],0
 32371                                  	;clc			    ; everything is fine
 32372                                  	; 01/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 32373                                  	; 12/12/2022
 32374                                  	; cf=0
 32375                                  	;clc
 32376                                  	;call	setdeviceparameters
 32377                                  	; 04/01/2023
 32378                                  	;jmp	short setdeviceparameters
 32379                                  
 32380                                  %endif
 32381                                  
 32382                                  ;	M047 -- Begin modifications (too numerous to mark specifically)
 32383                                  
 32384                                  ;----------------------------------------------------------------------------
 32385                                  ;
 32386                                  ; procedure : setdeviceparameters
 32387                                  ;
 32388                                  ; setdeviceparameters sets up the recommended bpb in each bds in the
 32389                                  ; system based on the form factor. it is assumed that the bpbs for the
 32390                                  ; various form factors are present in the bpbtable. for hard files,
 32391                                  ; the recommended bpb is the same as the bpb on the drive.
 32392                                  ; no attempt is made to preserve registers since we are going to jump to
 32393                                  ; sysinit straight after this routine.
 32394                                  ;
 32395                                  ;	if we return carry, the DRIVPARM will be aborted, but presently
 32396                                  ;	  we always return no carry
 32397                                  ;
 32398                                  ;	note:  there is a routine by the same name in msdioctl.asm
 32399                                  ;
 32400                                  ;----------------------------------------------------------------------------
 32401                                  
 32402                                  ; 15/04/2019 - Retro DOS v4.0
 32403                                  
 32404                                  	; 02/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 32405                                  setdeviceparameters:
 32406                                  	; 04/01/2023
 32407                                  	; ds = cs
 32408                                  	
 32409 00002DE9 06                      	push	es
 32410                                  
 32411 00002DEA 0E                      	push	cs
 32412 00002DEB 07                      	pop	es
 32413                                  
 32414 00002DEC 31DB                    	xor	bx,bx
 32415 00002DEE 8A1E[6F35]              	mov	bl,[deviceparameters+A_DEVICEPARAMETERS.DP_DEVICETYPE]
 32416 00002DF2 80FB00                  	cmp	bl,DEV_5INCH ; 0
 32417 00002DF5 7506                    	jne	short got_80
 32418                                  
 32419 00002DF7 C706[7235]2800          	mov	word [deviceparameters+A_DEVICEPARAMETERS.DP_CYLINDERS],40
 32420                                  							; 48 tpi=40 cyl
 32421                                  got_80:
 32422 00002DFD D1E3                    	shl	bx,1			; get index into bpb table
 32423 00002DFF 8BB7[1637]              	mov	si,[bpbtable+bx]	; get address of bpb
 32424                                  
 32425                                  	;mov	di,deviceparameters+7	
 32426                                  	; 02/11/2022
 32427 00002E03 BF[7535]                	mov	di,deviceparameters+A_DEVICEPARAMETERS.DP_BPB ; es:di -> bpb
 32428 00002E06 B91F00                  	mov	cx,A_BPB.size ; 31
 32429 00002E09 FC                      	cld
 32430                                  	;repe	movsb
 32431                                  	; 02/11/2022
 32432 00002E0A F3A4                    	rep	movsb
 32433                                  
 32434 00002E0C 07                      	pop	es
 32435                                  
 32436                                  	; 12/12/2022
 32437 00002E0D F606[9736]20            	test	byte [switches],flagseclim ; 20h
 32438                                  	;test	word [switches],flagseclim ; 20h
 32439 00002E12 7406                    	jz	short see_heads
 32440                                  
 32441 00002E14 A1[9436]                	mov	ax,[slim]
 32442                                  	;mov	[deviceparameters+20],ax
 32443 00002E17 A3[8235]                	mov	[deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.BPB_SECTORSPERTRACK],ax
 32444                                  
 32445                                  see_heads:
 32446                                  	; 12/12/2022
 32447 00002E1A F606[9736]40            	test	byte [switches],flagheads ; 40h
 32448                                  	;test	word [switches],flagheads ; 40h
 32449 00002E1F 7406                    	jz	short heads_not_altered
 32450                                  
 32451 00002E21 A1[9236]                	mov	ax,[hlim]
 32452                                  	;mov	[deviceparameters+22],ax	
 32453 00002E24 A3[8435]                	mov	[deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.BPB_HEADS],ax
 32454                                  
 32455                                  heads_not_altered:
 32456                                  
 32457                                  ; set up correct media descriptor byte and sectors/cluster
 32458                                  ;   sectors/cluster is always 2 except for any one sided disk or 1.44M
 32459                                  
 32460                                  	;mov	byte [deviceparameters+9],2
 32461                                  	; 02/11/2022
 32462                                  	;mov	byte [deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.BPB_SECTORSPERCLUSTER],2
 32463                                  	; 04/01/2023
 32464 00002E27 B80200                  	mov	ax,2	
 32465 00002E2A A2[7735]                	mov	[deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.BPB_SECTORSPERCLUSTER],al ; 2
 32466                                  
 32467 00002E2D B3F0                    	mov	bl,0F0h			; get default mediabyte
 32468                                  
 32469                                  ;	preload the mediadescriptor from the bpb into bh for convenient access
 32470                                  
 32471                                  	;mov	bh,[deviceparameters+17]
 32472                                  	; 02/11/2022
 32473 00002E2F 8A3E[7F35]              	mov	bh,[deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.BPB_MEDIADESCRIPTOR]
 32474                                  
 32475                                  	; 04/01/2023
 32476                                  	; ax = 2
 32477 00002E33 3906[8435]              	cmp	[deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.BPB_HEADS],ax ; >2 heads?
 32478                                  	;cmp	word [deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.BPB_HEADS],2 ; >2 heads?
 32479 00002E37 773C                    	ja	short got_correct_mediad ; just use default if heads>2
 32480                                  
 32481 00002E39 7524                    	jne	short only_one_head	; one head, do one head stuff
 32482                                  
 32483                                  ;	two head drives will use the mediadescriptor from the bpb
 32484                                  
 32485 00002E3B 88FB                    	mov	bl,bh			; get mediadescriptor from bpb
 32486                                  
 32487                                  ;	two sided drives have two special cases to look for. One is
 32488                                  ;	   a 320K diskette (40 tracks, 8 secs per track). It uses
 32489                                  ;	   a mediaid of 0fch. The other is 1.44M, which uses only
 32490                                  ;	   one sector/cluster.
 32491                                  
 32492                                  ;	any drive with 18secs/trk, 2 heads, 80 tracks, will be assumed
 32493                                  ;	   to be a 1.44M and use only 1 sector per cluster. Any other
 32494                                  ;	   type of 2 headed drive is all set.
 32495                                  
 32496 00002E3D 833E[8235]12            	cmp	word [deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.BPB_SECTORSPERTRACK],18
 32497 00002E42 7509                    	jne	short not_144m
 32498 00002E44 833E[7235]50            	cmp	word [deviceparameters+A_DEVICEPARAMETERS.DP_CYLINDERS],80
 32499 00002E49 7502                    	jne	short not_144m
 32500                                  
 32501                                  ;	We've got cyl=80, heads=2, secpertrack=18. Set cluster size to 1.
 32502                                  
 32503 00002E4B EB24                    	jmp	short got_one_secperclus_drive
 32504                                  
 32505                                  ;	check for 320K
 32506                                  
 32507                                  not_144m:
 32508 00002E4D 833E[7235]28            	cmp	word [deviceparameters+A_DEVICEPARAMETERS.DP_CYLINDERS],40
 32509 00002E52 7521                    	jne	short got_correct_mediad
 32510 00002E54 833E[8235]08            	cmp	word [deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.BPB_SECTORSPERTRACK],8
 32511 00002E59 751A                    	jne	short got_correct_mediad
 32512                                  
 32513 00002E5B B3FC                    	mov	bl,0FCh
 32514 00002E5D EB16                    	jmp	short got_correct_mediad
 32515                                  
 32516                                  only_one_head:
 32517                                  
 32518                                  ;	if we don't have a 360K drive, then just go use 0f0h as media descr.
 32519                                  
 32520 00002E5F 803E[6F35]00            	cmp	byte [deviceparameters+A_DEVICEPARAMETERS.DP_DEVICETYPE],DEV_5INCH ; 0
 32521 00002E64 740B                    	je	short got_one_secperclus_drive
 32522                                  
 32523                                  ;	single sided 360K drive uses either 0fch or 0feh, depending on
 32524                                  ;	  whether sectorspertrack is 8 or 9. For our purposes, anything
 32525                                  ;	  besides 8 will be considered 0fch
 32526                                  
 32527 00002E66 B3FC                    	mov	bl,0FCh			; single sided 9 sector media id
 32528 00002E68 833E[8235]08            	cmp	word [deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.BPB_SECTORSPERTRACK],8
 32529                                  	; 12/12/2022
 32530 00002E6D 7502                    	jne	short got_one_secperclus_drive ; okay if anything besides 8
 32531                                  
 32532 00002E6F B3FE                    	mov	bl,0FEh			; 160K mediaid
 32533                                  
 32534                                  ;	we've either got a one sided drive, or a 1.44M drive
 32535                                  ;	  either case we'll use 1 sector per cluster instead of 2
 32536                                  
 32537                                  got_one_secperclus_drive:
 32538                                  	; 04/01/2023
 32539                                  	; ax = 2
 32540 00002E71 48                      	dec	ax  ; ax = 1
 32541 00002E72 A2[7735]                	mov	[deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.BPB_SECTORSPERCLUSTER],al ; 1
 32542                                  	;mov	byte [deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.BPB_SECTORSPERCLUSTER],1
 32543                                  
 32544                                  got_correct_mediad:
 32545 00002E75 881E[7F35]              	mov	[deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.BPB_MEDIADESCRIPTOR],bl
 32546                                  
 32547                                  ;	 Calculate the correct number of Total Sectors on medium
 32548                                  
 32549 00002E79 A1[7235]                	mov	ax,[deviceparameters+A_DEVICEPARAMETERS.DP_CYLINDERS]
 32550 00002E7C F726[8435]              	mul	word [deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.BPB_HEADS]
 32551 00002E80 F726[8235]              	mul	word [deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.BPB_SECTORSPERTRACK]
 32552 00002E84 A3[7D35]                	mov	word [deviceparameters+A_DEVICEPARAMETERS.DP_BPB+A_BPB.BPB_TOTALSECTORS],ax
 32553 00002E87 F8                      	clc				; we currently return no errors
 32554                                  
 32555 00002E88 C3                      	retn
 32556                                  
 32557                                  ;	M047 -- end rewritten routine
 32558                                  
 32559                                  ;----------------------------------------------------------------------------
 32560                                  ;
 32561                                  ; procedure : organize
 32562                                  ;
 32563                                  ;----------------------------------------------------------------------------
 32564                                  
 32565                                  	; 02/11/2022 - Retrodos v4.0 (Modified MSDOS 5.0 IO.SYS)
 32566                                  	; (SYSINIT:3234h)
 32567                                  
 32568                                  organize:
 32569                                  	; 04/01/2023
 32570                                  	; ds = cs
 32571 00002E89 8B0E[D203]              	mov	cx,[count]
 32572                                  	;mov	cx,[cs:count]
 32573 00002E8D E326                    	jcxz	nochar1
 32574                                  
 32575                                  ;ifndef	MULTI_CONFIG
 32576                                  ;
 32577                                  ;;   In MULTI_CONFIG, we map to upper case on a line-by-line basis,
 32578                                  ;;   because we the case of values in SET commands preserved
 32579                                  ;
 32580                                  ;	call	mapcase
 32581                                  ;endif
 32582                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 32583 00002E8F E81B02                  	call	mapcase
 32584                                  
 32585 00002E92 31F6                    	xor	si,si
 32586 00002E94 89F7                    	mov	di,si
 32587 00002E96 31C0                    	xor	ax,ax
 32588                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)	
 32589                                  	;;mov	byte [cs:com_level],0
 32590                                  	; 12/12/2022
 32591                                  	;mov	[cs:com_level],al ; 0
 32592                                  	; 04/01/2023
 32593                                  	; ds = cs
 32594 00002E98 A2[CC03]                	mov	[com_level],al ; 0
 32595                                  org1:
 32596 00002E9B E8B101                  	call	skip_comment
 32597 00002E9E 740D                    	jz	short end_commd_line	; found a comment string and skipped.
 32598 00002EA0 E89601                  	call	get2			; not a comment string. then get a char.
 32599 00002EA3 3C0A                    	cmp	al,lf ; 0Ah
 32600 00002EA5 7406                    	je	short end_commd_line	; starts with a blank line.
 32601 00002EA7 3C20                    	cmp	al,' ' ; 20h
 32602 00002EA9 76F0                    	jbe	short org1		; skip leading control characters
 32603 00002EAB EB0A                    	jmp	short findit
 32604                                  
 32605                                  end_commd_line:
 32606 00002EAD AA                      	stosb				; store line feed char in buffer for the linecount.
 32607                                  	;mov	byte [cs:com_level],0	; reset the command level.
 32608                                  	; 04/01/2023
 32609                                  	; ds = cs
 32610 00002EAE C606[CC03]00            	mov	byte [com_level],0
 32611 00002EB3 EBE6                    	jmp	short org1
 32612                                  
 32613                                  nochar1:
 32614 00002EB5 F9                      	stc
 32615 00002EB6 C3                      	retn
 32616                                  
 32617                                  findit:
 32618 00002EB7 51                      	push	cx
 32619 00002EB8 56                      	push	si
 32620 00002EB9 57                      	push	di
 32621 00002EBA 89F5                    	mov	bp,si
 32622 00002EBC 4D                      	dec	bp
 32623 00002EBD BE[DD34]                        mov     si,comtab		; prepare to search command table
 32624 00002EC0 B500                    	mov	ch,0
 32625                                  findcom:
 32626 00002EC2 89EF                    	mov	di,bp
 32627 00002EC4 8A0C                    	mov	cl,[si]
 32628 00002EC6 46                      	inc	si
 32629 00002EC7 E324                    	jcxz	nocom
 32630                                  
 32631                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 32632                                  
 32633                                  ;ifdef	MULTI_CONFIG
 32634                                  ;
 32635                                  ;;   Simplify future parsing by collapsing ";" onto "REM", and at the same
 32636                                  ;;   time skip the upcoming delimiter test (since ";" need not be followed by
 32637                                  ;;   anything in particular)
 32638                                  ;
 32639                                  ;       cmp     byte [es:di],CONFIG_SEMICOLON  ; ';'
 32640                                  ;       je	short semicolon
 32641                                  ;loopcom:
 32642                                  ;       mov     al,[es:di]
 32643                                  ;       inc     di
 32644                                  ;       and     al,~20h ; 0DFh		; force upper case
 32645                                  ;       inc     si                      ; compare to byte @es:di
 32646                                  ;       cmp     al,[si-1]
 32647                                  ;       loope   loopcom
 32648                                  ;;else
 32649                                  ;;	repe	cmpsb
 32650                                  ;endif
 32651                                  	; 02/11/2022
 32652 00002EC9 F3A6                    	repe	cmpsb
 32653                                  
 32654 00002ECB 9F                      	lahf
 32655 00002ECC 01CE                            add     si,cx                   ; bump to next position without affecting flags
 32656 00002ECE 9E                      	sahf
 32657 00002ECF AC                              lodsb                           ; get indicator letter
 32658 00002ED0 75F0                    	jnz	short findcom
 32659 00002ED2 26803D0D                        cmp     byte [es:di],cr		; the next char might be cr,lf
 32660 00002ED6 7410                    	je	short gotcom0 		; such as in "rem",cr,lf case.
 32661 00002ED8 26803D0A                	cmp	byte [es:di],lf
 32662 00002EDC 740A                    	je	short gotcom0
 32663                                  
 32664                                  ; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 32665                                  ;
 32666                                  ;;ifdef	MULTI_CONFIG
 32667                                  ;
 32668                                  ;;   Skip the delimiter test for the BEGIN identifier (it doesn't have one).
 32669                                  ;
 32670                                  ;       cmp     al,CONFIG_BEGIN  ; '['
 32671                                  ;       je	short gotcom0
 32672                                  ;;endif
 32673                                  ;	push	ax
 32674                                  ;       mov     al,[es:di]		; now the next char. should be a delim.
 32675                                  ;
 32676                                  ;;ifdef	MULTI_CONFIG
 32677                                  ;
 32678                                  ;;   If keyword is *immediately* followed by a question mark (?), then
 32679                                  ;;   set the high bit of the ASCII command code (CONFIG_OPTION_QUERY) that is
 32680                                  ;;   stored in the CONFIG.SYS memory image.
 32681                                  ;
 32682                                  ;       cmp     al,'?'                  ; explicit interactive command?
 32683                                  ;       jne	short no_query		; no
 32684                                  ;       pop     ax                      ; yes, so retrieve the original code
 32685                                  ;       or      al,CONFIG_OPTION_QUERY  ; and set the QUERY bit
 32686                                  ;       jmp     short gotcom0           ;
 32687                                  ;semicolon:
 32688                                  ;       mov     al,CONFIG_REM
 32689                                  ;       jmp     short gotcom0
 32690                                  ;no_query:
 32691                                  ;;endif  ;MULTI_CONFIG
 32692                                  
 32693                                  	; 02/11/2022
 32694 00002EDE 50                      	push	ax
 32695 00002EDF 268A05                  	mov	al,[es:di]		; now the next char. should be a delim.
 32696                                  
 32697 00002EE2 E8A001                  	call	delim
 32698                                  no_delim:
 32699 00002EE5 58                      	pop	ax
 32700 00002EE6 75DA                    	jnz	short findcom
 32701                                  gotcom0:
 32702 00002EE8 5F                      	pop	di
 32703 00002EE9 5E                      	pop	si
 32704 00002EEA 59                      	pop	cx
 32705 00002EEB EB0F                    	jmp	short gotcom
 32706                                  nocom:
 32707 00002EED 5F                      	pop	di
 32708 00002EEE 5E                      	pop	si
 32709 00002EEF 59                      	pop	cx
 32710 00002EF0 B05A                            mov     al,CONFIG_UNKNOWN  ; 'Z'
 32711 00002EF2 AA                      	stosb				; save indicator char.
 32712                                  _skipline:
 32713 00002EF3 E84301                  	call	get2
 32714 00002EF6 3C0A                    	cmp	al,lf ; 0Ah		; skip this bad command line
 32715 00002EF8 75F9                            jne     short _skipline
 32716 00002EFA EBB1                    	jmp	short end_commd_line	; handle next command line
 32717                                  gotcom:
 32718 00002EFC AA                              stosb                           ; save indicator char in buffer
 32719                                  
 32720                                  ; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 32721                                  ;;ifdef	MULTI_CONFIG
 32722                                  ;
 32723                                  ;;   Don't pollute "cmd_indicator" with the CONFIG_OPTION_QUERY bit though;
 32724                                  ;;   it screws up the direct comparisons below.
 32725                                  ;
 32726                                  ;       and     al,~CONFIG_OPTION_QUERY ; 7Fh
 32727                                  ;;endif
 32728                                  ;	mov	[cs:cmd_indicator],al	; save it for the future use.
 32729                                  ;
 32730                                  ;;ifdef	MULTI_CONFIG
 32731                                  ;
 32732                                  ;;   There is no whitespace/delimiter between the "begin block" character
 32733                                  ;;   ([) and the name of block (eg, [menu]), therefore skip this delimiter
 32734                                  ;;   skipping code
 32735                                  ;
 32736                                  ;       cmp     al,CONFIG_BEGIN
 32737                                  ;       je	short org31
 32738                                  ;       cmp     al,CONFIG_SUBMENU ; 'O'
 32739                                  ;       je      short no_mapcase
 32740                                  ;       cmp     al,CONFIG_MENUITEM ; 'E'
 32741                                  ;       je      short no_mapcase
 32742                                  ;       cmp     al,CONFIG_MENUDEFAULT ; 'A'
 32743                                  ;       je      short no_mapcase
 32744                                  ;       cmp     al,CONFIG_INCLUDE ; 'J'
 32745                                  ;       je      short no_mapcase
 32746                                  ;       call    mapcase                 ; map case of rest of line to UPPER
 32747                                  ;no_mapcase:
 32748                                  ;;endif
 32749                                  
 32750                                  	; 02/11/2022
 32751                                  	;mov	[cs:cmd_indicator],al	; save it for the future use.
 32752                                  	; 04/01/2023
 32753                                  	; ds = cs
 32754 00002EFD A2[D003]                	mov	[cmd_indicator],al
 32755                                  org2:	
 32756 00002F00 E83601                  	call    get2                    ; skip the command name until delimiter
 32757 00002F03 3C0A                            cmp     al,lf
 32758 00002F05 740B                    	je	short org21
 32759 00002F07 3C0D                    	cmp	al,cr
 32760 00002F09 7407                    	je	short org21
 32761                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 32762                                  	;cmp	al, '/'			; T-RICHJ: Added to allow DEVHIGH/L:...
 32763                                  	;je	short org21		; T-RICHJ: to be parsed properly.
 32764                                  
 32765 00002F0B E87701                  	call	delim
 32766 00002F0E 75F0                            jnz	short org2
 32767 00002F10 EB02                    	jmp	short org3
 32768                                  org21:					;if cr or lf then
 32769 00002F12 4E                      	dec	si			; undo si, cx register
 32770 00002F13 41                      	inc	cx			;  and continue
 32771                                  org3:	
 32772                                  	;cmp	byte [cs:cmd_indicator],CONFIG_COMMENT ; 'Y'
 32773                                  	;je	short get_cmt_token
 32774                                  	;; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 32775                                          ;;cmp	byte [cs:cmd_indicator],CONFIG_DEVICE ; 'D'
 32776                                  	;;je	short org_file
 32777                                          ;cmp     byte [cs:cmd_indicator],CONFIG_INSTALL ; 'I'
 32778                                  	;je	short org_file
 32779                                          ;;cmp	byte [cs:cmd_indicator],CONFIG_INSTALLHIGH ; 'W'
 32780                                          ;;je	short org_file
 32781                                  	;; 02/11/2022
 32782                                  	;cmp     byte [cs:cmd_indicator],CONFIG_DEVICE ; 'D'
 32783                                  	;je	short org_file
 32784                                          ;cmp     byte [cs:cmd_indicator],CONFIG_SHELL ; 'S'
 32785                                  	;je	short org_file
 32786                                          ;cmp	byte [cs:cmd_indicator],CONFIG_SWITCHES ; '1'
 32787                                  	;je	short org_switch
 32788                                  
 32789                                  	; 04/01/2023
 32790                                  	; ds = cs
 32791                                  
 32792 00002F14 803E[D003]59            	cmp	byte [cmd_indicator],CONFIG_COMMENT ; 'Y'
 32793 00002F19 7456                    	je	short get_cmt_token
 32794                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 32795                                          ;cmp	byte [cmd_indicator],CONFIG_DEVICE ; 'D'
 32796                                  	;je	short org_file
 32797 00002F1B 803E[D003]49                    cmp     byte [cmd_indicator],CONFIG_INSTALL ; 'I'
 32798 00002F20 7429                    	je	short org_file
 32799                                          ;cmp	byte [cmd_indicator],CONFIG_INSTALLHIGH ; 'W'
 32800                                          ;je	short org_file
 32801                                  	; 02/11/2022
 32802 00002F22 803E[D003]44            	cmp     byte [cmd_indicator],CONFIG_DEVICE ; 'D'
 32803 00002F27 7422                    	je	short org_file
 32804 00002F29 803E[D003]53                    cmp     byte [cmd_indicator],CONFIG_SHELL ; 'S'
 32805 00002F2E 741B                    	je	short org_file
 32806 00002F30 803E[D003]31                    cmp	byte [cmd_indicator],CONFIG_SWITCHES ; '1'
 32807 00002F35 7403                    	je	short org_switch
 32808                                  	
 32809                                  org31:
 32810 00002F37 E99500                  	jmp	org4
 32811                                  
 32812                                  org_switch:
 32813 00002F3A E81201                  	call	skip_comment
 32814 00002F3D 7472                    	jz	short end_commd_line_brdg
 32815                                  
 32816 00002F3F E8F700                  	call	get2
 32817 00002F42 E84801                  	call	org_delim
 32818 00002F45 74F3                    	jz	short org_switch
 32819                                  
 32820 00002F47 AA                      	stosb
 32821 00002F48 E99300                  	jmp	org5
 32822                                  
 32823                                  org_file:			; get the filename and put 0 at end
 32824 00002F4B E80101                  	call	skip_comment
 32825 00002F4E 7464                    	jz	short org_put_zero
 32826                                  
 32827 00002F50 E8E600                  	call	get2		; not a comment
 32828 00002F53 E82F01                  	call	delim
 32829 00002F56 74F3                    	jz	short org_file	; skip the possible delimiters
 32830                                  
 32831 00002F58 AA                      	stosb			; copy the first non delim char found in buffer
 32832                                  
 32833                                  org_copy_file:
 32834 00002F59 E8F300                  	call	skip_comment	; comment char in the filename?
 32835 00002F5C 7456                    	jz	short org_put_zero ; then stop copying filename at that point
 32836                                  
 32837 00002F5E E8D800                  	call	get2
 32838 00002F61 3C2F                    	cmp	al,'/'		; a switch char? (device=filename/xxx)
 32839 00002F63 7457                    	je	short end_file_slash ; this will be the special case.
 32840                                  
 32841 00002F65 AA                      	stosb			; save the char. in buffer
 32842 00002F66 E81C01                  	call	delim
 32843 00002F69 7459                    	jz	short end_copy_file
 32844                                  
 32845 00002F6B 3C20                    	cmp	al, ' '
 32846 00002F6D 77EA                    	ja	short org_copy_file ; keep copying
 32847 00002F6F EB53                    	jmp	short end_copy_file ; otherwise, assume end of the filename.
 32848                                  
 32849                                  get_cmt_token:			; get the token. just max. 2 char.
 32850 00002F71 E8C500                  	call	get2
 32851 00002F74 3C20                    	cmp	al,' '		; skip white spaces or "=" char.
 32852 00002F76 74F9                    	je	short get_cmt_token ; (we are allowing the other special
 32853 00002F78 3C09                    	cmp	al,tab ; 9 	;  characters can used for comment id.
 32854 00002F7A 74F5                    	je	short get_cmt_token ;  character.)
 32855 00002F7C 3C3D                    	cmp	al,'='		; = is special in this case.
 32856 00002F7E 74F1                    	je	short get_cmt_token
 32857 00002F80 3C0D                    	cmp	al,cr
 32858 00002F82 7426                    	je	short get_cmt_end ; cannot accept the carriage return
 32859 00002F84 3C0A                    	cmp	al,lf
 32860 00002F86 7422                    	je	short get_cmt_end
 32861                                  
 32862                                  	; 04/01/2023
 32863                                  	; ds = cs
 32864                                  	;mov	[cs:cmmt1],al	; store it
 32865                                  	;mov	byte [cs:cmmt],1 ; 1 char. so far.
 32866 00002F88 A2[CE03]                	mov	[cmmt1],al	; store it
 32867 00002F8B C606[CD03]01            	mov	byte [cmmt],1 ; 1 char. so far.
 32868 00002F90 E8A600                  	call	get2
 32869 00002F93 3C20                    	cmp	al,' ' ; 20h
 32870 00002F95 7413                    	je	short get_cmt_end
 32871 00002F97 3C09                    	cmp	al,tab ; 9
 32872 00002F99 740F                    	je	short get_cmt_end
 32873 00002F9B 3C0D                    	cmp	al,cr  ; 0Dh
 32874 00002F9D 740B                    	je	short get_cmt_end
 32875 00002F9F 3C0A                    	cmp	al,lf  ; 0Ah
 32876 00002FA1 740E                    	je	short end_commd_line_brdg
 32877                                  
 32878                                  	;mov	[cs:cmmt2],al
 32879                                  	;inc	byte [cs:cmmt]
 32880                                  	; 04/01/2023
 32881 00002FA3 A2[CF03]                	mov	[cmmt2],al
 32882 00002FA6 FE06[CD03]              	inc	byte [cmmt]
 32883                                  
 32884                                  get_cmt_end:
 32885 00002FAA E88C00                  	call	get2
 32886 00002FAD 3C0A                    	cmp	al,lf
 32887 00002FAF 75F9                    	jne	short get_cmt_end	; skip it.
 32888                                  end_commd_line_brdg: 
 32889 00002FB1 E9F9FE                  	jmp	end_commd_line		; else jmp to end_commd_line
 32890                                  
 32891                                  org_put_zero:				; make the filename in front of
 32892 00002FB4 26C60500                	mov	byte [es:di],0		;  the comment string to be an asciiz.
 32893 00002FB8 47                      	inc	di
 32894 00002FB9 E9F1FE                  	jmp	end_commd_line		;  (maybe null if device=/*)
 32895                                  
 32896                                  end_file_slash: 			; al = "/" option char.
 32897 00002FBC 26C60500                	mov	byte [es:di],0		; make a filename an asciiz
 32898 00002FC0 47                      	inc	di			; and
 32899 00002FC1 AA                      	stosb				; store "/" after that.
 32900 00002FC2 EB1A                    	jmp	short org5		; continue with the rest of the line
 32901                                  
 32902                                  end_copy_file:
 32903 00002FC4 26C645FF00              	mov	byte [es:di-1],0	; make it an asciiz and handle the next char.
 32904 00002FC9 3C0A                    	cmp	al,lf
 32905 00002FCB 74E4                    	je	short end_commd_line_brdg
 32906 00002FCD EB0F                    	jmp	short org5
 32907                                  
 32908                                  org4:					; org4 skips all delimiters after the command name except for '/'
 32909 00002FCF E87D00                  	call	skip_comment
 32910 00002FD2 74DD                    	jz	short end_commd_line_brdg
 32911                                  
 32912 00002FD4 E86200                  	call	get2
 32913 00002FD7 E8B300                  	call	org_delim		; skip delimiters except '/' (mrw 4/88)
 32914 00002FDA 74F3                    	jz	short org4
 32915 00002FDC EB08                    	jmp	short org51
 32916                                  
 32917                                  org5:					; rest of the line
 32918 00002FDE E86E00                  	call	skip_comment		; comment?
 32919 00002FE1 74CE                    	jz	short end_commd_line_brdg
 32920 00002FE3 E85300                  	call	get2			; not a comment.
 32921                                  
 32922                                  org51:
 32923 00002FE6 AA                      	stosb				; copy the character
 32924 00002FE7 3C22                    	cmp	al,'"' 	; 22h		; a quote ?
 32925 00002FE9 743A                    	je	short at_quote
 32926 00002FEB 3C20                    	cmp	al,' '  ; 20h
 32927 00002FED 77EF                    	ja	short org5
 32928                                  					; M051 - Start
 32929                                  	; 04/01/2023
 32930                                  	; ds = cs
 32931 00002FEF 803E[D003]55                    cmp	byte [cmd_indicator],CONFIG_DEVICEHIGH
 32932                                  	;cmp	byte [cs:cmd_indicator],CONFIG_DEVICEHIGH ; Q: is this devicehigh
 32933 00002FF4 7514                    	jne	short not_dh		; N: 
 32934 00002FF6 3C0A                    	cmp	al,lf			; Q: is this line feed
 32935 00002FF8 7416                    	je	short org_dhlf		; Y: stuff a blank before the lf
 32936 00002FFA 3C0D                    	cmp	al,cr			; Q: is this a cr
 32937 00002FFC 75E0                    	jne	short org5		; N: 
 32938 00002FFE 26C645FF20              	mov	byte [es:di-1],' '	; overwrite cr with blank
 32939 00003003 AA                      	stosb				; put cr after blank
 32940 00003004 FE06[CB2C]              	inc	byte [insert_blank]
 32941                                  	;inc	byte [cs:insert_blank]	; indicate that blank has been 
 32942                                  					; inserted
 32943 00003008 EBD4                    	jmp	short org5
 32944                                  not_dh:					; M051 - End
 32945                                  
 32946 0000300A 3C0A                    	cmp	al,lf			; line feed?
 32947 0000300C 740F                    	je	short org1_brdg		; handles the next command line.
 32948 0000300E EBCE                    	jmp	short org5		; handles next char in this line.
 32949                                  
 32950                                  org_dhlf:				; M051 - Start
 32951                                  	; 04/01/2023
 32952                                  	; ds = cs
 32953 00003010 803E[CB2C]01            	cmp	byte [insert_blank],1
 32954                                  	;cmp	byte [cs:insert_blank],1 ; Q:has a blank already been inserted
 32955 00003015 7406                    	je	short org1_brdg		; Y:
 32956 00003017 26C645FF20              	mov	byte [es:di-1],' '	; overwrite lf with blank
 32957 0000301C AA                      	stosb				; put lf after blank
 32958                                  					; M051 - End
 32959                                  org1_brdg:
 32960 0000301D C606[CB2C]00            	mov	byte [insert_blank],0 
 32961                                  	;mov	byte [cs:insert_blank],0 ; M051: clear blank indicator for 
 32962                                  					; M051: devicehigh
 32963 00003022 E976FE                  	jmp	org1
 32964                                  
 32965                                  at_quote:
 32966 00003025 803E[CC03]00            	cmp	byte [com_level],0
 32967                                  	;cmp	byte [cs:com_level],0
 32968 0000302A 7407                    	je	short up_level
 32969                                  	;mov	byte [cs:com_level],0	; reset it.
 32970 0000302C C606[CC03]00            	mov	byte [com_level],0
 32971 00003031 EBAB                    	jmp	short org5
 32972                                  
 32973                                  up_level:
 32974                                  	;inc	byte [cs:com_level]	; set it.
 32975 00003033 FE06[CC03]              	inc	byte [com_level]
 32976 00003037 EBA5                    	jmp	short org5
 32977                                  
 32978                                  ;----------------------------------------------------------------------------
 32979                                  ;
 32980                                  ; procedure : get2
 32981                                  ;
 32982                                  ;----------------------------------------------------------------------------
 32983                                  
 32984                                  	; 02/11/2022 - Retrodos v4.0 (Modified MSDOS 5.0 IO.SYS)
 32985                                  	; (SYSINIT:33FAh)
 32986                                  	; 04/01/2023
 32987                                  get2:
 32988 00003039 E304                    	jcxz	noget
 32989                                  	;
 32990                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 32991                                  	;;lods	byte ptr es:[si]
 32992                                  	; 12/12/2022
 32993 0000303B 26                      	es	
 32994 0000303C AC                      	lodsb
 32995                                  	;mov	al, [es:si]
 32996                                  	;inc	si
 32997                                  	;
 32998 0000303D 49                      	dec	cx
 32999 0000303E C3                      	retn
 33000                                  noget:
 33001 0000303F 59                      	pop	cx
 33002                                  	; 04/01/2023
 33003                                  	; ds = cs
 33004                                  	;mov	[cs:count],di ; 13/05/2019
 33005                                  	;mov	[cs:org_count],di
 33006 00003040 893E[D203]              	mov	[count],di
 33007 00003044 893E[D403]              	mov	[org_count],di
 33008 00003048 31F6                    	xor	si,si
 33009                                  	;mov	[cs:chrptr],si
 33010 0000304A 8936[D603]              	mov	[chrptr],si
 33011                                  
 33012                                  ; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 33013                                  ;;ifndef MULTI_CONFIG
 33014                                  ;;	retn
 33015                                  ;;else
 33016                                  ;
 33017                                  ;;   This was the rather kludgy way out of procedure "organize", but instead
 33018                                  ;;   of returning to doconf, we now want to check config.sys BEGIN/END blocks
 33019                                  ;;   and the new boot menu stuff...
 33020                                  ;
 33021                                  ;	mov     cx,di
 33022                                  ;	jmp     menu_check
 33023                                  ;;endif
 33024                                  
 33025                                  	; 02/11/2022
 33026 0000304E C3                      	retn
 33027                                  
 33028                                  ;----------------------------------------------------------------------------
 33029                                  ;
 33030                                  ; procedure : skip_comment
 33031                                  ;
 33032                                  ;skip the commented string until lf, if current es:si-> a comment string.
 33033                                  ;in) es:si-> string
 33034                                  ;	 cx -> length.
 33035                                  ;out) zero flag not set if not found a comment string.
 33036                                  ;	  zero flag set if found a comment string and skipped it. al will contain
 33037                                  ;	  the line feed character at this moment when return.
 33038                                  ;	  ax register destroyed.
 33039                                  ;	  if found, si, cx register adjusted accordingly.
 33040                                  ;
 33041                                  ;----------------------------------------------------------------------------
 33042                                  
 33043                                  	; 04/01/2023 - Retro DOS v4.0
 33044                                  
 33045                                  skip_comment:
 33046 0000304F E3EE                    	jcxz	noget		; get out of the organize routine.
 33047                                  
 33048                                  	; 04/01/2023
 33049                                  	; ds = cs	
 33050                                  
 33051 00003051 803E[CC03]00            	cmp	byte [com_level],0
 33052                                  	;cmp	byte [cs:com_level],0 ; only check it if parameter level is 0.
 33053 00003056 752C                    	jne	short no_commt	 ; (not inside quotations)
 33054                                  
 33055 00003058 803E[CD03]01            	cmp	byte [cmmt],1
 33056                                  	;cmp	byte [cs:cmmt],1
 33057 0000305D 7225                    	jb	short no_commt
 33058                                  
 33059 0000305F 268A04                  	mov	al,[es:si]
 33060                                  	
 33061 00003062 3806[CE03]              	cmp	[cmmt1],al
 33062                                  	;cmp	[cs:cmmt1],al
 33063 00003066 751C                    	jne	short no_commt
 33064                                  
 33065 00003068 803E[CD03]02            	cmp	byte [cmmt],2
 33066                                  	;cmp	byte [cs:cmmt],2
 33067 0000306D 750A                    	jne	short skip_cmmt
 33068                                  
 33069 0000306F 268A4401                	mov	al,[es:si+1]
 33070                                  	
 33071 00003073 3806[CF03]              	cmp	[cmmt2],al
 33072                                  	;cmp	[cs:cmmt2],al
 33073 00003077 750B                    	jne	short no_commt
 33074                                  skip_cmmt:
 33075 00003079 E3C4                    	jcxz	noget		; get out of organize routine.
 33076 0000307B 268A04                  	mov	al,[es:si]
 33077 0000307E 46                      	inc	si
 33078 0000307F 49                      	dec	cx
 33079 00003080 3C0A                    	cmp	al,lf		; line feed?
 33080 00003082 75F5                    	jne	short skip_cmmt
 33081                                  no_commt:
 33082 00003084 C3                      	retn
 33083                                  
 33084                                  ; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 33085                                  %if 0
 33086                                  
 33087                                  ;ifdef	MULTI_CONFIG
 33088                                  
 33089                                  ;----------------------------------------------------------------------------
 33090                                  ;
 33091                                  ;   kbd_read: wait for keystroke
 33092                                  ;
 33093                                  ;   INPUT
 33094                                  ;       DS == CS == sysinitseg
 33095                                  ;
 33096                                  ;   OUTPUT
 33097                                  ;       Carry SET to clean boot, CLEAR otherwise
 33098                                  ;
 33099                                  ;   OTHER REGS USED
 33100                                  ;       All
 33101                                  ;
 33102                                  ;   HISTORY
 33103                                  ;       Created 16-Nov-1992 by JeffPar
 33104                                  ;
 33105                                  ;----------------------------------------------------------------------------
 33106                                  
 33107                                  kbd_read:
 33108                                          test    byte [bDisableUI],2
 33109                                          jnz     short kbd_nodelay
 33110                                  
 33111                                          push    ds              ; the bios timer tick count is incremented
 33112                                          sub     ax,ax           ; 18.2 times per second;
 33113                                          mov     ds,ax           ; watch the timer tick count for 37 transitions
 33114                                  	;mov	dx,[046Ch]	; get initial value
 33115                                  kbd_loop:
 33116                                          mov     ah,1            ;
 33117                                          int     16h             ; peek the keyboard
 33118                                          jnz	short kbd_loopdone ; something's there, get out
 33119                                          mov     ah,2            ; peek the shift states
 33120                                          int     16h             ;
 33121                                          test    al,03h          ; either right or left shift key bits set?
 33122                                          jnz	short kbd_loopdone ; yes
 33123                                          mov     ax,[046Ch]	;
 33124                                  	;sub	ax,dx           ; get difference
 33125                                  	; 15/04/2019 - Retro DOS v4.0
 33126                                  	sub	ax,[cs:_timer_lw_] ; MSDOS 6.21 IO.SYS - SYSINIT:42E5h        
 33127                                  
 33128                                  	cmp     al,37           ; reached limit?
 33129                                          jb	short kbd_loop	; not yet
 33130                                  kbd_loopdone:
 33131                                          pop     ds              ; delay complete!
 33132                                  kbd_nodelay:
 33133                                          sub     bx,bx           ; assume clean boot
 33134                                          mov     ah,2            ; peek the shift states
 33135                                          int     16h             ;
 33136                                          test    al,03h          ; either right or left shift key bits set?
 33137                                          jz      short kbd_notshift ; no
 33138                                          inc     bx              ; yes
 33139                                          inc     bx
 33140                                  	; MSDOS 6.21 IO.SYS - SYSINIT:4301h
 33141                                  	or	byte [bQueryOpt],4
 33142                                  kbd_notshift:                   ;
 33143                                          mov     ah,1            ; peek the keyboard
 33144                                          int     16h             ;
 33145                                          jz	short kbd_test	; no key present
 33146                                          or      al,al           ; is it a function key?
 33147                                          jnz	short kbd_test	; no
 33148                                  
 33149                                  	; MSDOS 6.21 IO.SYS - SYSINIT:430Bh
 33150                                          cmp     ah,62h          ; CTRL F5
 33151                                          je	short kbd_cfg_bypass
 33152                                  	
 33153                                          cmp     ah,3Fh          ; F5 function key?
 33154                                          jne	short kbd_notf5	; no
 33155                                  kbd_cfg_bypass:
 33156                                          mov     dx,_$CleanMsg
 33157                                          call    print
 33158                                  	; MSDOS 6.21 IO.SYS - SYSINIT:431Bh
 33159                                  	or	byte [bQueryOpt],4           ;
 33160                                          jmp     short kbd_eat   ; yes, clean boot selected
 33161                                  kbd_notf5:
 33162                                  	; MSDOS 6.21 IO.SYS - SYSINIT:4322h
 33163                                          cmp     ah,65h          ; CTRL F8
 33164                                          je	short kbd_cfg_confirm
 33165                                  
 33166                                          cmp     ah,42h          ; F8 function key?
 33167                                          jne	short kbd_exit	; no
 33168                                  kbd_cfg_confirm:
 33169                                          mov     dx,_$InterMsg
 33170                                          call    print           ;
 33171                                          mov     bl,1            ; yes, interactive-boot option enabled
 33172                                          mov     [bQueryOpt],bl  ; change default setting
 33173                                  kbd_eat:                        ;
 33174                                          mov     ah,0            ;
 33175                                          int     16h             ; eat the key we assumed was a signal
 33176                                          mov	byte [secElapsed],-1
 33177                                          or      bx,bx           ;
 33178                                          jz	short kbd_clean	;
 33179                                  kbd_test:                       ;
 33180                                          cmp     bl,2            ;
 33181                                          jb	short kbd_exit	;
 33182                                  kbd_clean:                      ;
 33183                                          call    disable_autoexec; yes, tell COMMAND to skip autoexec.bat
 33184                                          stc                     ; set carry to indicate abort
 33185                                          retn			;
 33186                                  kbd_exit:                       ;
 33187                                          clc                     ; clear carry to indicate success
 33188                                          retn			;
 33189                                  
 33190                                  ;----------------------------------------------------------------------------
 33191                                  ;
 33192                                  ;   set_numlock: set numlock LED
 33193                                  ;
 33194                                  ;   INPUT
 33195                                  ;       ES:SI -> numlock setting (ie, "ON" or "OFF")
 33196                                  ;
 33197                                  ;   OUTPUT
 33198                                  ;       None
 33199                                  ;
 33200                                  ;   OTHER REGS USED
 33201                                  ;       None
 33202                                  ;
 33203                                  ;   HISTORY
 33204                                  ;       Created 16-Nov-1992 by JeffPar
 33205                                  ;
 33206                                  ;----------------------------------------------------------------------------
 33207                                  
 33208                                  set_numlock:
 33209                                          push    ax
 33210                                          push    ds
 33211                                          sub     ax,ax
 33212                                          mov     ds,ax
 33213                                          mov     ax,[es:si]      ; get 1st 2 bytes of value (ON or OF)
 33214                                          cmp     ax,[cs:OnOff+2]	; should we turn it off?
 33215                                          jne	short not_off	; no
 33216                                          and     byte [0417h],~20h ; 0DFh
 33217                                          jmp     short set_done
 33218                                  not_off:
 33219                                          cmp     ax,[cs:OnOff]	; should we turn it on?
 33220                                          stc
 33221                                          jne	short set_done	; no
 33222                                          or      byte [0417h],20h
 33223                                  set_done:
 33224                                          pop     ds
 33225                                          pop     ax
 33226                                          retn
 33227                                  
 33228                                  ; 16/04/2019 - Retro DOS v4.0
 33229                                  
 33230                                  ;----------------------------------------------------------------------------
 33231                                  ;
 33232                                  ;   menu_check:  check for presence of menu (and other) configuration blocks
 33233                                  ;
 33234                                  ;   INPUT
 33235                                  ;       CX == "organized" config.sys memory image length
 33236                                  ;    ES:SI -> "organized" config.sys memory image
 33237                                  ;       DS == CS == sysinitseg
 33238                                  ;
 33239                                  ;   OUTPUT
 33240                                  ;       Same as above;  the idea is that menu_check simply transforms
 33241                                  ;       a block-structured config.sys image into a conventional image,
 33242                                  ;       based on the user's block selection and any other boot-time options
 33243                                  ;       the user may have employed...
 33244                                  ;
 33245                                  ;   OTHER REGS USED
 33246                                  ;       All
 33247                                  ;
 33248                                  ;   NOTES
 33249                                  ;       [count] and [org_count] are set to the new config.sys image length
 33250                                  ;
 33251                                  ;   HISTORY
 33252                                  ;       Created 16-Mar-1992 by JeffPar
 33253                                  ;
 33254                                  ;----------------------------------------------------------------------------
 33255                                  
 33256                                  menu_check:
 33257                                  
 33258                                  ;   Search for SWITCHES, determine if /N or /F are present;  if so, then
 33259                                  ;   disable clean/interactive boot options
 33260                                  
 33261                                          push    cx              ;
 33262                                          push    si              ;
 33263                                          sub     bx,bx           ; remains ZERO until first block
 33264                                  swchk_loop:                     ;
 33265                                          call    get_char        ; get first char of current line
 33266                                          jc	short swchk_end	; hit eof
 33267                                          cmp     al,CONFIG_BEGIN ;
 33268                                          jne	short swchk_next1 ;
 33269                                          inc     bx              ; remember that we've seen a block
 33270                                          jmp     short swchk_nextline
 33271                                  swchk_next1:                    ;
 33272                                          cmp     al,CONFIG_NUMLOCK
 33273                                          jne	short swchk_next2 ;
 33274                                          or      bx,bx           ; only do NUMLOCK commands that exist
 33275                                          jnz	short swchk_nextline ; before the first block
 33276                                          call    set_numlock     ; REM it out so we don't act on it later, too
 33277                                          mov     byte [es:si-1],CONFIG_REM
 33278                                          jmp     short swchk_nextline
 33279                                  swchk_next2:                    ;
 33280                                          cmp     al,CONFIG_SWITCHES
 33281                                          jne	short swchk_nextline ; this line ain't it
 33282                                  swchk_scan:                     ;
 33283                                          call    get_char        ; look for /N or /F
 33284                                  swchk_scan1:                    ;
 33285                                          cmp     al,LF           ; end of line?
 33286                                          je	short swchk_nextline ; yes
 33287                                          cmp     al,'/'          ; switch-char?
 33288                                          jne	short swchk_scan ; no
 33289                                          call    get_char        ;
 33290                                          and     al,~20h ; 0DFh	; convert to upper case
 33291                                          cmp     al,[swit_n+1]
 33292                                          jne	short swchk_scan2 ; no
 33293                                          or      byte [bDisableUI],1
 33294                                          jmp	short swchk_scan ; continue looking for switches of interest
 33295                                  swchk_scan2:                    ;
 33296                                          cmp     al,[swit_f+1]
 33297                                          jne	short swchk_scan1 ; no
 33298                                          or      byte [bDisableUI],2
 33299                                          jmp     short swchk_scan ; continue looking for switches of interest
 33300                                  swchk_nextline:                 ;
 33301                                          call    skip_opt_line   ;
 33302                                          jmp     short swchk_loop ;
 33303                                  swchk_end:                      ;
 33304                                          pop     si              ;
 33305                                          pop     cx              ;
 33306                                  
 33307                                  ;   Do the keyboard tests for clean/interactive boot now, but only if
 33308                                  ;   the DisableUI flag is still clear
 33309                                  
 33310                                          test    byte [bDisableUI],1
 33311                                          jnz	short menu_search
 33312                                  ;
 33313                                  ;   Wait for 2 seconds first, UNLESS the /F bit was set in bDisableUI, or
 33314                                  ;   there is anything at all in the keyboard buffer
 33315                                  ;
 33316                                          call    kbd_read
 33317                                          jnc	short menu_search
 33318                                          jmp	menu_abort
 33319                                  
 33320                                  ;   Search for MENU block;  it is allowed to be anywhere in config.sys
 33321                                  
 33322                                  menu_search:
 33323                                          sub     bx,bx           ; if no MENU, default to zero for no_selection
 33324                                          mov     di,szMenu	;
 33325                                          call    find_block      ; find the MENU block
 33326                                          jnc	short menu_found ;
 33327                                          mov     byte [szBoot],0
 33328                                          jmp	no_selection ; not found
 33329                                  
 33330                                  ;   Process the requested menu color(s)
 33331                                  
 33332                                  menu_color:
 33333                                          push    cx              ;
 33334                                          push    dx              ;
 33335                                          mov     dx,0007h        ; default color setting
 33336                                          call    get_number	; get first number
 33337                                          and     bl,0Fh		; first # is foreground color (for low nibble)
 33338                                          mov     ch,bl           ; save it in CH
 33339                                          and     dl,0F0h         ;
 33340                                          or      dl,bl           ;
 33341                                          call    delim           ; did we hit a delimiter
 33342                                          jne	short check_color ; no, all done
 33343                                          call    get_number	; get next number
 33344                                          and     bl,0Fh		; second # is background color (for high nibble)
 33345                                          mov     dh,bl           ; save it in DH
 33346                                          and     dl,0Fh		;
 33347                                          mov     cl,4            ;
 33348                                          shl     bl,cl           ;
 33349                                          or      dl,bl           ;
 33350                                  check_color:                    ;
 33351                                          cmp     ch,dh           ; are foreground/background the same?
 33352                                          jne	short set_color	; no
 33353                                          xor     dl,08h          ; yes, so modify the fgnd intensity
 33354                                  set_color:
 33355                                          mov     [bMenuColor],dl ;
 33356                                          pop     dx              ;
 33357                                          pop     cx              ;
 33358                                          jmp	menu_nextitem
 33359                                  
 33360                                  ;   Back to our regularly scheduled program (the COLOR and other goop
 33361                                  ;   above is there simply to alleviate short jump problems)
 33362                                  
 33363                                  menu_found:
 33364                                          mov     byte [bDefBlock],1
 33365                                          mov     word [offDefBlock],0
 33366                                          mov     byte [secTimeOut],-1
 33367                                          and     byte [bQueryOpt],~2 ; 0FDh
 33368                                  
 33369                                          call    skip_opt_line   ; skip to next line
 33370                                          sub     dx,dx           ; initialize total block count (0 => none yet)
 33371                                  
 33372                                  ;   Process the menu block now
 33373                                  
 33374                                  menu_process:
 33375                                          call    get_char        ; get first char of current line
 33376                                          jc	short to_menu_getdefault ; could happen if menu block at end (rare)
 33377                                          and     al,~CONFIG_OPTION_QUERY ; 7Fh
 33378                                          cmp     al,CONFIG_BEGIN ; BEGIN implies END
 33379                                          je	short to_menu_getdefault
 33380                                          cmp     al,CONFIG_SUBMENU
 33381                                          je	short menu_item	; go process sub-menu
 33382                                          cmp     al,CONFIG_MENUITEM
 33383                                          je	short menu_item	; go process menu item
 33384                                          cmp     al,CONFIG_MENUDEFAULT
 33385                                          je	short menu_default ; go process menu default
 33386                                          cmp     al,CONFIG_MENUCOLOR
 33387                                          je	short menu_color ; go process menu color
 33388                                          cmp     al,CONFIG_NUMLOCK
 33389                                          je	short menu_numlock ;
 33390                                          cmp     al,CONFIG_REM   ; allow remarks in menu block
 33391                                          je	short menu_nextitem ;
 33392                                          call    any_delim       ; allow blank lines and such
 33393                                          je	short menu_nextitem ;
 33394                                          stc                     ;
 33395                                          call    print_error     ; non-MENU command!
 33396                                          jmp     short menu_nextitem
 33397                                  menu_numlock:
 33398                                          call    set_numlock
 33399                                          jmp     short menu_nextitem
 33400                                  to_menu_getdefault:
 33401                                          jmp     short menu_getdefault
 33402                                  
 33403                                  ;   Save the offset of the default block name, we'll need it later
 33404                                  
 33405                                  menu_default:
 33406                                          mov     [offDefBlock],si; save address of default block name
 33407                                          cmp     byte [secElapsed],0
 33408                                          jne	short timeout_skip ; secElapsed is only zero for the FIRST menu,
 33409                                          call    skip_token      ; and for subsequent menus IF nothing was typed;
 33410                                          jc	short menu_nextitem ; secElapsed becomes -1 forever as soon as
 33411                                          call    skip_delim      ; something is typed
 33412                                          jc	short menu_nextitem ;
 33413                                          mov     si,bx           ;
 33414                                          call    get_number      ; get number (of seconds for timeout)
 33415                                          cmp     bl,90           ; limit it to a reasonable number
 33416                                          jb	short timeout_ok ; (besides, 99 is the largest # my simple
 33417                                          mov     bl,90           ;  display function can handle)
 33418                                  timeout_ok:                     ;
 33419                                          mov     [secTimeOut],bl ;
 33420                                  timeout_skip:
 33421                                          jmp     short menu_nextitem
 33422                                  
 33423                                  ;   Verify that this is a valid menu item by searching for the named block
 33424                                  
 33425                                  menu_item:
 33426                                          cmp     dl,MAX_MULTI_CONFIG ; have we reached the max # of items yet?
 33427                                          jae	short menu_nextitem ;
 33428                                          mov     di,si           ; DS:DI -> block name to search for
 33429                                          call    srch_block      ;
 33430                                          je	short menu_itemfound ;
 33431                                          stc                     ;
 33432                                          call    print_error     ; print error and pause
 33433                                          jmp     short menu_nextitem ; if not found, ignore this menu item
 33434                                  
 33435                                  ;   srch_block, having succeeded, returns DI -> past the token that it
 33436                                  ;   just matched, which in this case should be a descriptive string; ES:SI
 33437                                  ;   and CX are unmodified
 33438                                  
 33439                                  menu_itemfound:
 33440                                          inc     dx              ; otherwise, increment total block count
 33441                                          mov     bx,dx           ; and use it to index the arrays of offsets
 33442                                          mov	[abBlockType+bx],al
 33443                                          add     bx,bx           ; of recorded block names and descriptions
 33444                                  
 33445                                  ;   There should be a description immediately following the block name on
 33446                                  ;   MENUITEM line; failing that, we'll just use the block name as the
 33447                                  ;   description...
 33448                                  
 33449                                          mov     [aoffBlockName+bx],si
 33450                                          mov     [aoffBlockDesc+bx],si
 33451                                          mov     di,bx           ; skip_delim modifies BX, so stash it in DI
 33452                                          call    skip_token      ;
 33453                                          jc	short menu_nextitem ; hit eol/eof
 33454                                          call    skip_delim      ;
 33455                                          jc	short menu_nextitem ; hit eol/eof
 33456                                          xchg    bx,di           ;
 33457                                          mov     [aoffBlockDesc+bx],di
 33458                                  
 33459                                  menu_nextitem:
 33460                                          call    skip_opt_line   ;
 33461                                          jmp     menu_process    ; go back for more lines
 33462                                  
 33463                                  ;   Display menu items now, after determining which one is default
 33464                                  
 33465                                  menu_getdefault:
 33466                                          or      dl,dl           ; where there any valid blocks at all?
 33467                                          jnz	short menu_valid ; yes
 33468                                          sub     bx,bx           ; no, so force autoselect of 0
 33469                                          jmp     menu_autoselect ; (meaning: process common blocks only)
 33470                                  menu_valid:
 33471                                          sub     bx,bx           ;
 33472                                          mov     [bMaxBlock],dl  ; first, record how many blocks we found
 33473                                          mov     di,[offDefBlock];
 33474                                          or      di,di           ; does a default block exist?
 33475                                          jz	short menu_nodefault ; no
 33476                                          inc     bx              ; yes, walk name table, looking for default
 33477                                  menu_chkdefault:
 33478                                          push    bx              ;
 33479                                          add     bx,bx           ;
 33480                                          mov     si,[aoffBlockName+bx]
 33481                                          mov     cx,128          ; arbitrary maximum length of a name
 33482                                          push    ds              ;
 33483                                          push    es              ;
 33484                                          pop     ds              ;
 33485                                          call    comp_names      ; is this block the same as the default?
 33486                                          pop     ds              ;
 33487                                          pop     bx              ;
 33488                                          je	short menu_setdefault ; yes
 33489                                          inc     bx              ;
 33490                                          cmp     bl,[bMaxBlock]  ; all done searching?
 33491                                          jbe	short menu_chkdefault ; not yet
 33492                                  menu_nodefault:
 33493                                          mov     bl,1            ; if no default, force default to #1
 33494                                  menu_setdefault:
 33495                                          mov     [bDefBlock],bl  ; yes, this will be the initial current block
 33496                                  
 33497                                  ;   If the timeout was explicitly set to 0 (or technically, anything that
 33498                                  ;   failed to resolve to a number, like "NONE" or "EAT POTATOES"), then we're
 33499                                  ;   supposed to skip menu display and run with the specified default block;
 33500                                  ;   however, if the user hit Enter prior to boot, thereby requesting fully
 33501                                  ;   INTERACTIVE boot, then we shall display the menu block anyway (though still
 33502                                  ;   with no timeout)
 33503                                  
 33504                                          cmp     byte [secTimeOut],0 ; is timeout zero? (ie, assume default)
 33505                                          jne	short menu_display ; no
 33506                                          test    byte [bQueryOpt],1 ; yes, but was INTERACTIVE requested?
 33507                                          jnz	short menu_display ; yes, so *don't* assume default after all
 33508                                          jmp     not_topmenu	;
 33509                                  
 33510                                  ;   Reset the mode, so that we know screen is clean and cursor is home
 33511                                  
 33512                                  menu_display:
 33513                                          mov     ah,0Fh          ; get current video mode
 33514                                          int     10h             ;
 33515                                          mov     ah,00h          ; just re-select that mode
 33516                                          int     10h             ;
 33517                                          push    es              ;
 33518                                          mov     ax,40h          ; reach down into the ROM BIOS data area
 33519                                          mov     es,ax           ; and save the current (default) video page
 33520                                          mov     ax,[es:004Eh]   ; start address and page #, in case the
 33521                                          mov     [wCRTStart],ax  ; undocumented QUIET option was enabled
 33522                                          mov     al,[es:0062h]   ;
 33523                                          mov     [bCRTPage],al   ;
 33524                                          mov     ax,[bMenuPage]	; select new page for menu
 33525                                          int     10h             ;
 33526                                          mov     ax,0600h        ; clear entire screen
 33527                                          mov     bh,[bMenuColor] ; using this color
 33528                                          sub     cx,cx           ; upper left row/col
 33529                                          ;mov	dl,[es:CRT_Cols] 
 33530                                          mov	dl,[es:4Ah]
 33531                                  	dec     dl              ;
 33532                                          ;mov	dh,[es:CRT_Rows];
 33533                                          mov	dh,[es:84h]
 33534                                  	or      dh,dh           ; # of rows valid?
 33535                                          jnz	short menu_clear ; hopefully
 33536                                          mov     dh,[bLastRow]   ; no, use a default
 33537                                  menu_clear:
 33538                                          int     10h             ; clear the screen using the req. attribute
 33539                                          pop     es              ;
 33540                                          mov     [bLastRow],dh   ; save DH
 33541                                          mov     dx,_$MenuHeader
 33542                                          call    print           ; cursor now on row 3 (numbered from 0)
 33543                                  
 33544                                          test    byte [bDisableUI],1
 33545                                          jnz     short menu_nostatus
 33546                                          mov     bh,[bMenuPage]  ;
 33547                                          mov     dh,[bLastRow]   ; restore DH
 33548                                          mov     dl,0            ; print the status line on row DH, col 0,
 33549                                          mov     ah,02h          ; now that we can trash the cursor position
 33550                                          int     10h             ;
 33551                                          mov     dx,_$StatusLine
 33552                                          call    print           ;
 33553                                          mov     ah,3            ; get cursor position
 33554                                          int     10h             ;
 33555                                          sub     dl,2            ;
 33556                                          mov     [bLastCol],dl   ; save column where status char will go
 33557                                  
 33558                                  menu_nostatus:
 33559                                          mov     bx,1            ; now prepare to display all the menu items
 33560                                  menu_disploop:
 33561                                          call    print_item	; print item #BL
 33562                                          inc     bx              ; why "inc bx"?  because it's a 1-byte opcode
 33563                                          cmp     bl,[bMaxBlock]  ; all done?
 33564                                          jbe	short menu_disploop ; not yet
 33565                                  
 33566                                  ;   Set cursor position to just below the menu items
 33567                                  
 33568                                          mov     dl,0            ; select column
 33569                                          mov     dh,bl           ;
 33570                                          add     dh,4            ; select row below menu
 33571                                          mov     bh,[bMenuPage]  ;
 33572                                          mov     ah,02h          ; set cursor position beneath the block list
 33573                                          int     10h             ;
 33574                                  
 33575                                          mov     dx,_$MenuPrmpt
 33576                                          call    print           ;
 33577                                          call    select_item     ; make a selection, return # in BX
 33578                                          mov     dx,crlfm	
 33579                                          call    print           ;
 33580                                          push    word [bDisableUI]
 33581                                          or      byte [bDisableUI],1
 33582                                          call    show_status     ; clear the status line now
 33583                                          pop     word [bDisableUI]
 33584                                  
 33585                                  ;   Now begins the "re-organization" process...
 33586                                  
 33587                                  menu_autoselect:
 33588                                          cmp     bx,-1           ; clean boot requested?
 33589                                          jne	short normal_boot ; no
 33590                                          call    disable_autoexec; basically, add a /D to the command.com line
 33591                                  menu_abort:
 33592                                          sub     cx,cx           ; then immediately exit with 0 config.sys image
 33593                                          jmp	menu_exit	;
 33594                                  
 33595                                  normal_boot:
 33596                                          cmp     bx,-2           ; back to top-level menu?
 33597                                          jne	short not_topmenu ; no
 33598                                          mov     cx,[count]      ; yes, start all over
 33599                                          sub     si,si           ;
 33600                                          jmp     menu_search
 33601                                  
 33602                                  not_topmenu:
 33603                                          cmp     byte [abBlockType+bx],CONFIG_SUBMENU
 33604                                          jne	short not_submenu
 33605                                          add     bx,bx           ;
 33606                                          mov     di,[aoffBlockName+bx]
 33607                                          call    srch_block      ; THIS CANNOT FAIL!
 33608                                          mov     si,di           ;
 33609                                          mov     cx,bx           ; ES:SI and CX are ready for another round
 33610                                          jmp     menu_found
 33611                                  
 33612                                  not_submenu:
 33613                                          add     bx,bx           ; get BX -> name of selected block
 33614                                          mov     bx,[aoffBlockName+bx]
 33615                                  
 33616                                  ;   BX should now either be ZERO (meaning no block has been selected) or
 33617                                  ;   the offset relative to ES of the block name to be processed (along with
 33618                                  ;   all the "common" lines of course)
 33619                                  
 33620                                  no_selection:
 33621                                          mov     [offDefBlock],bx; save selection
 33622                                          mov     cx,[count]      ; reset ES:SI and CX for reprocessing
 33623                                          sub     si,si           ;
 33624                                          push    ds              ;
 33625                                          mov     ds,[config_wrkseg]; this is where we'll store new config.sys image
 33626                                          sub     di,di           ;
 33627                                  
 33628                                  ;   ES:SI-> config.sys, DS:DI -> new config.sys workspace
 33629                                  ;
 33630                                  ;   Work our way through the config.sys image again, this time copying
 33631                                  ;   all lines that are (A) "common" lines outside any block or (B) lines
 33632                                  ;   within the requested block.  Lines inside INCLUDEd blocks are transparently
 33633                                  ;   copied by copy_block in a recursive fashion;  the amount of recursion is
 33634                                  ;   limited by the fact INCLUDE statements are REMed by copy_block as they are
 33635                                  ;   processed and by the number of unique INCLUDE stmts in config.sys...
 33636                                  ;
 33637                                  ;   BUGBUG 20-Mar-1992 JeffPar: If we can figure out the lower bound of the
 33638                                  ;   stack we're running on, then we should check it inside copy_block
 33639                                  
 33640                                  copyblock_loop:
 33641                                          push    bx              ; save selected block name
 33642                                          call    copy_block      ; process (named or common) block
 33643                                          pop     bx              ;
 33644                                          jc	short move_config ; hit eof
 33645                                  
 33646                                  ;   copy_block can only return for two reasons:  it hit eof or a new block
 33647                                  
 33648                                  copyblock_begin:
 33649                                          push    ax              ;
 33650                                          push    cx              ;
 33651                                          push    si              ;
 33652                                          push    di              ; always do "common" blocks
 33653                                          mov     di,szCommon
 33654                                          push    ds              ;
 33655                                          push    cs              ;
 33656                                          pop     ds              ;
 33657                                          call    comp_names      ;
 33658                                          pop     ds              ;
 33659                                          pop     di              ;
 33660                                          pop     si              ;
 33661                                          pop     cx              ;
 33662                                          pop     ax              ;
 33663                                          je	short copyblock_check
 33664                                          or      bx,bx           ; is there a block name to check?
 33665                                          jz	short copyblock_skip ; no
 33666                                          push    di              ;
 33667                                          mov     di,bx           ; check block against given block name
 33668                                          push    ds              ;
 33669                                          push    es              ;
 33670                                          pop     ds              ;
 33671                                          call    comp_names      ; is this the block we really want to do?
 33672                                          pop     ds              ;
 33673                                          pop     di              ;
 33674                                  copyblock_check:
 33675                                          jc	short move_config ; hit eof
 33676                                          jne	short copyblock_skip  ;
 33677                                          call    skip_opt_line   ;
 33678                                          jmp	short copyblock_loop 
 33679                                  
 33680                                  copyblock_skip:                 ;
 33681                                          call    skip_opt_line   ; this ain't the block we wanted, so skip it
 33682                                          call    get_char        ;
 33683                                          jc	short move_config ; hit eof
 33684                                          and     al,~CONFIG_OPTION_QUERY ; 7Fh
 33685                                          cmp     al,CONFIG_BEGIN ;
 33686                                          je	short copyblock_begin
 33687                                          jmp     short copyblock_skip ; anything else is just skipped
 33688                                  ;
 33689                                  ;   To create as little risk to the rest of SysInit as little as possible,
 33690                                  ;   and to free the workspace at "config_wrkseg" for creating an environment,
 33691                                  ;   copy the new config.sys image to "confbot"
 33692                                  ;
 33693                                  move_config:
 33694                                          mov     cx,di           ; now copy workspace at DS:DI to "confbot"
 33695                                          push    cx              ;
 33696                                  ;
 33697                                  ;   But first, copy the CONFIG=<configuration><0> string to the workspace,
 33698                                  ;   since the configuration name only currently exists in the "confbot" area
 33699                                  ;
 33700                                   	;mov	cx,7
 33701                                  	mov     cx,szMenu-szBoot-1
 33702                                          mov     si,szBoot	; first copy the CONFIG= part
 33703                                          inc     di              ; skip a byte, in case absolutely nothing
 33704                                                                  ; was copied to the workspace, because we always
 33705                                                                  ; zero the first byte of the workspace (below)
 33706                                  copy_boot: 
 33707                                  	;lods    byte ptr cs:[si];
 33708                                          cs
 33709                                  	lodsb
 33710                                  	mov     [di],al         ;
 33711                                          inc     di              ;
 33712                                          loop    copy_boot       ;
 33713                                  
 33714                                          push    es              ; then copy the configuration name
 33715                                          mov     cx,128-7        ; put an upper limit on the name, to be safe
 33716                                          mov     si,[cs:offDefBlock]; ES:SI -> default block name
 33717                                          or      si,si           ; valid?
 33718                                          jnz	short l1	; yes
 33719                                          push    cs              ;
 33720                                          pop     es              ;
 33721                                          mov     si,szCommon
 33722                                  l1:     mov     al,[es:si]      ;
 33723                                          call    any_delim       ;
 33724                                          je	short l2	;
 33725                                          mov     [di],al         ;
 33726                                          inc     si              ;
 33727                                          inc     di              ;
 33728                                          loop    l1              ;
 33729                                  l2:     mov     byte [di],lf	; terminate the configuration string
 33730                                          pop     es              ;
 33731                                  
 33732                                  ;   Now we can copy "config_wrkseg" (DS) to "confbot" (ES)
 33733                                  
 33734                                          sub     di,di           ;
 33735                                          mov     [cs:config_envlen],di
 33736                                          sub     si,si           ;
 33737                                          pop     cx              ; recover the size of "config_wrkseg"
 33738                                  
 33739                                          push    cx              ;
 33740                                          rep     movsb           ; moved!
 33741                                          pop     cx              ;
 33742                                          mov     ax,ds           ;
 33743                                          pop     ds              ;
 33744                                  
 33745                                  ;   Now that the config_wrkseg is available once again, we shall
 33746                                  ;   use it to create an environment. The first thing to go in will be
 33747                                  ;   the "CONFIG=configuration" thing. It is also important to zero
 33748                                  ;   the first byte of the workspace, so that copy_envvar knows the buffer
 33749                                  ;   is empty.
 33750                                  
 33751                                          push    es              ;
 33752                                          mov     es,ax           ;
 33753                                          inc     si              ; ES:SI -> "CONFIG=configuration"
 33754                                          mov     byte [es:0],0	;empty the environment block
 33755                                          call    copy_envvar     ; copy envvar at ES:SI to "config_wrkseg"
 33756                                          pop     es
 33757                                  
 33758                                  ;   Before returning, restore the default video page setting but do NOT
 33759                                  ;   do it using INT 10h's Set Active Page function, because if the menu was
 33760                                  ;   displayed on a different page, then it's because we don't want to see
 33761                                  ;   all the device driver/TSR goop (which goes to the default page)
 33762                                  
 33763                                  menu_done:
 33764                                          cmp     byte [bMenuPage],0
 33765                                          je	short menu_exit	;
 33766                                          push    es              ;
 33767                                          mov     ax,40h          ;
 33768                                          mov     es,ax           ;
 33769                                          mov     ax,[wCRTStart]  ;
 33770                                          mov     [es:004Eh],ax   ;
 33771                                          mov     al,[bCRTPage]   ;
 33772                                          mov     [es:0062h],al   ;
 33773                                          pop     es              ;
 33774                                  menu_exit:
 33775                                          mov     [count],cx      ; set new counts
 33776                                          mov     [org_count],cx  ;
 33777                                          sub     si,si           ; always return ES:SI pointing to config.sys
 33778                                          retn
 33779                                  
 33780                                  ;----------------------------------------------------------------------------
 33781                                  ;
 33782                                  ;   copy_envvar:  copy the envvar at ES:SI to "config_wrkseg"
 33783                                  ;
 33784                                  ;   INPUT
 33785                                  ;    ES:SI -> environment variable (in the form "var=string<cr/lf>")
 33786                                  ;
 33787                                  ;   OUTPUT
 33788                                  ;       config_envlen (ie, where to put next envvar) updated appropriately
 33789                                  ;       carry set if error (eg, missing =); clear otherwise
 33790                                  ;
 33791                                  ;   OTHER REGS USED
 33792                                  ;       None
 33793                                  ;
 33794                                  ;   NOTES
 33795                                  ;       None
 33796                                  ;
 33797                                  ;   HISTORY
 33798                                  ;       Created 29-Mar-1992 by JeffPar
 33799                                  ;
 33800                                  ;----------------------------------------------------------------------------
 33801                                  
 33802                                  copy_envvar:
 33803                                          push    cx              ;
 33804                                          push    si              ;
 33805                                          push    ds              ;
 33806                                          push    es              ;
 33807                                          push    es              ;
 33808                                          mov     es,[config_wrkseg] ; ES:DI to point to next available byte
 33809                                          pop     ds                 ; DS:SI to point to envvar
 33810                                  
 33811                                  ;   Have to calculate the length of the variable name (and if we hit
 33812                                  ;   the end of the line before we hit '=', then it's curtains for this
 33813                                  ;   config.sys line)
 33814                                  ;
 33815                                  ;   The check for NULL is important because copy_envvar is also used to copy
 33816                                  ;   the initial CONFIG= setting, which will have been zapped by a NULL if no
 33817                                  ;   menu block existed (in order to prevent the creation of an environment)
 33818                                  
 33819                                          sub     cx,cx           ;
 33820                                  copy_varlen:                    ;
 33821                                          lodsb                   ;
 33822                                          or      al,al           ; NULL?
 33823                                          stc                     ;
 33824                                          jz	short copy_envexit ; yes, abort
 33825                                          cmp     al,cr          ;
 33826                                          stc                     ;
 33827                                          je	short copy_envexit
 33828                                          cmp     al,lf          ;
 33829                                          stc                     ;
 33830                                          je	short copy_envexit
 33831                                          inc     cx              ;
 33832                                          cmp     al,'='          ;
 33833                                          jne	short copy_varlen
 33834                                          mov     al,0            ;
 33835                                          mov     ah,[si]         ; save char after '='
 33836                                          sub     si,cx           ; back up to given varname
 33837                                          dec     cx              ; CX == # of bytes in varname
 33838                                          sub     di,di           ; start looking for DS:SI at ES:0
 33839                                  copy_varsrch:
 33840                                          cmp     byte [es:di],al
 33841                                          je	short copy_envprep ; search failed, just copy var
 33842                                          mov     bx,di           ; ES:BX -> start of this varname
 33843                                          push    cx              ;
 33844                                          push    si              ;
 33845                                          repe    cmpsb           ;
 33846                                          pop     si              ;
 33847                                          pop     cx              ;
 33848                                          jne	short copy_varnext ; no match, skip to next varname
 33849                                          cmp     byte [es:di],'='
 33850                                          jne     short copy_varnext ; no match, there's more characters
 33851                                  
 33852                                  ;   Previous occurrence of variable has been found; determine the
 33853                                  ;   entire length and then destroy it
 33854                                  
 33855                                          mov     cx,-1           ;
 33856                                          repne   scasb           ; guaranteed to get null (since we put it there)
 33857                                          push    si              ;
 33858                                          mov     si,di           ;
 33859                                          mov     di,bx           ;
 33860                                          mov     cx,[cs:config_envlen]
 33861                                          sub     cx,si           ; destroy variable now
 33862                                  	;rep movs byte ptr es:[di],byte ptr es:[si]
 33863                                  	;;db 0F3h,26h,0A4h ; MSDOS 6.21 IO:SYS - SYSINIT:4724h
 33864                                  
 33865                                  	rep	; 0F3h
 33866                                  	es	; 26h
 33867                                  	movsb	; 0A4h
 33868                                  
 33869                                  	pop     si
 33870                                  copy_envprep:
 33871                                          cmp     ah,cr          ; if there is nothing after the '='
 33872                                          je	short copy_envdel ; then just exit with variable deleted
 33873                                          cmp     ah,lf           ;
 33874                                          je	short copy_envdel
 33875                                          jmp     short copy_envloop
 33876                                  
 33877                                  copy_varnext:                   ;
 33878                                          push    cx              ;
 33879                                          mov     cx,-1           ;
 33880                                          repne   scasb           ;
 33881                                          pop     cx              ;
 33882                                          jmp	short copy_varsrch
 33883                                  
 33884                                  copy_envloop:                   ;
 33885                                          lodsb                   ;
 33886                                          cmp     al,cr           ;
 33887                                          je	short copy_envdone
 33888                                          cmp     al,lf           ;
 33889                                          je	short copy_envdone
 33890                                          stosb                   ;
 33891                                          jmp     short copy_envloop
 33892                                  
 33893                                  copy_envdone:                   ;
 33894                                          sub     al,al           ; do SUB to clear carry as well
 33895                                          stosb                   ; always null-terminate these puppies
 33896                                  copy_envdel:                    ;
 33897                                          mov     [es:di],al      ; and stick another null to terminate the env.
 33898                                          mov     [cs:config_envlen],di
 33899                                  
 33900                                  copy_envexit:                   ;
 33901                                          pop     es              ;
 33902                                          pop     ds              ;
 33903                                          pop     si              ;
 33904                                          pop     cx              ;
 33905                                  
 33906                                  copy_done:	; 18/12/2022
 33907                                          retn
 33908                                  
 33909                                  ;----------------------------------------------------------------------------
 33910                                  ;
 33911                                  ;   copy_block:  copy the current block to the new config.sys workspace
 33912                                  ;
 33913                                  ;   INPUT
 33914                                  ;       CX == remaining bytes in "organized" config.sys memory image
 33915                                  ;    ES:SI -> remaining bytes in "organized" config.sys memory image
 33916                                  ;    DS:DI -> new config.sys workspace (equal in size to the original
 33917                                  ;             config.sys image) where the current block is to be copied
 33918                                  ;
 33919                                  ;   OUTPUT
 33920                                  ;       Same as above
 33921                                  ;       AL also equals the last character read from the organized image
 33922                                  ;
 33923                                  ;   OTHER REGS USED
 33924                                  ;       All
 33925                                  ;
 33926                                  ;   NOTES
 33927                                  ;       None
 33928                                  ;
 33929                                  ;   HISTORY
 33930                                  ;       Created 16-Mar-1992 by JeffPar
 33931                                  ;
 33932                                  ;----------------------------------------------------------------------------
 33933                                  
 33934                                  copy_block:
 33935                                          call    get_char        ; check for include
 33936                                          jc	short copy_done	;
 33937                                  	and     al,~CONFIG_OPTION_QUERY ; 7Fh
 33938                                  	cmp     al,CONFIG_BEGIN ; another BEGIN implies END as well
 33939                                          je	short copy_done ;
 33940                                  
 33941                                          cmp     al,CONFIG_INCLUDE ; 'J'
 33942                                          mov     al,ah           ; AL == the original line code
 33943                                          jne	short copy_line	; not an "include" line
 33944                                  
 33945                                  ;   We have hit an "INCLUDE" line; first, REM out the line so that we
 33946                                  ;   never try to include the block again (no infinite include loops please),
 33947                                  ;   then search for the named block and call copy_block again.
 33948                                  
 33949                                          mov     byte [es:si-1],CONFIG_REM ; '0'
 33950                                          push    di              ;
 33951                                  
 33952                                          mov     di,szMenu
 33953                                          call    comp_names_safe ; don't allow INCLUDE MENU
 33954                                          je	short copy_skip	;
 33955                                  
 33956                                          mov     di,szCommon
 33957                                          call    comp_names_safe ; don't allow INCLUDE COMMON
 33958                                          je	short copy_skip	;
 33959                                  
 33960                                          mov     di,si           ; try to find the block
 33961                                          call    srch_block      ;
 33962                                          mov     dx,di           ;
 33963                                          pop     di              ;
 33964                                          jne	short copy_error ; no such block
 33965                                          push    cx              ;
 33966                                          mov     cx,bx           ;
 33967                                          push    si              ;
 33968                                          dec     dx              ;
 33969                                          mov     si,dx           ;
 33970                                          call    skip_line       ; skip the rest of the "block name" line
 33971                                          call    copy_block      ; and copy in the rest of that block
 33972                                          pop     si              ;
 33973                                          pop     cx              ;
 33974                                          sub     al,al           ; force skip_opt_line to skip...
 33975                                          jmp     short copy_nextline
 33976                                  
 33977                                  copy_skip:
 33978                                          pop     di
 33979                                  copy_error:
 33980                                          clc                     ;
 33981                                          call    print_error     ; note that carry is clear, no pause
 33982                                          jmp     short copy_nextline
 33983                                  
 33984                                  ;   Copy the line at ES:SI to the current location at DS:DI
 33985                                  
 33986                                  copy_line:
 33987                                          mov     [di],al         ;
 33988                                          inc     di              ;
 33989                                          cmp     al,' '          ; is this is a "real" line with a "real" code?
 33990                                          jb	short copy_nextline ; no
 33991                                          cmp     byte [cs:config_multi],0
 33992                                          je	short copy_loop	; not a multi-config config.sys, don't embed #s
 33993                                          call    get_linenum	; BX == line # of line @ES:SI
 33994                                          mov     [di],bx         ; stash it immediately following the line code
 33995                                          inc     di              ;
 33996                                          inc     di              ;
 33997                                          jmp     short copy_next ;
 33998                                  copy_loop:                      ;
 33999                                          call    get_char        ;
 34000                                          jc	short copy_done ; end of file
 34001                                          mov     [di],al         ;
 34002                                          inc     di              ;
 34003                                  copy_next:
 34004                                          cmp     al,lf ; 0Ah	; done with line?
 34005                                          jne	short copy_loop	; nope
 34006                                  
 34007                                  copy_nextline:
 34008                                          call    skip_opt_line   ;
 34009                                          jmp     short copy_block
 34010                                  
 34011                                  	; 18/12/2022
 34012                                  ;copy_done:
 34013                                          ;retn
 34014                                  
 34015                                  ;----------------------------------------------------------------------------
 34016                                  ;
 34017                                  ;   get_linenum:  return line # (in BX) of current line (@ES:SI)
 34018                                  ;
 34019                                  ;   INPUT
 34020                                  ;    ES:SI -> some line in the config.sys memory image
 34021                                  ;
 34022                                  ;   OUTPUT
 34023                                  ;       BX == line # (relative to 1)
 34024                                  ;
 34025                                  ;   OTHER REGS USED
 34026                                  ;       DX
 34027                                  ;
 34028                                  ;   NOTES
 34029                                  ;       None
 34030                                  ;
 34031                                  ;   HISTORY
 34032                                  ;       Created 16-Mar-1992 by JeffPar
 34033                                  ;
 34034                                  ;----------------------------------------------------------------------------
 34035                                  
 34036                                  get_linenum:
 34037                                          push    ax              ;
 34038                                          sub     bx,bx           ; BX == line # (to be returned)
 34039                                          push    cx              ;
 34040                                          mov     dx,si           ; DX == the offset we're looking for
 34041                                          push    si              ;
 34042                                          mov     cx,[cs:count]   ;
 34043                                          sub     si,si           ; prepare to scan entire file
 34044                                  get_linenum_loop:               ;
 34045                                          call    skip_line       ;
 34046                                          jc	short get_linenum_done
 34047                                          inc     bx              ;
 34048                                          cmp     si,dx           ; have we exceeded the desired offset yet?
 34049                                          jb	short get_linenum_loop ; no
 34050                                  get_linenum_done:               ;
 34051                                          pop     si              ;
 34052                                          pop     cx              ;
 34053                                          pop     ax              ;
 34054                                          retn
 34055                                  
 34056                                  ;----------------------------------------------------------------------------
 34057                                  ;
 34058                                  ;   srch_block:  searches entire config.sys for block name @ES:DI
 34059                                  ;
 34060                                  ;   INPUT
 34061                                  ;       ES -> config.sys image
 34062                                  ;    ES:DI -> block name to find
 34063                                  ;
 34064                                  ;   OUTPUT
 34065                                  ;       ZF flag set, if found
 34066                                  ;    ES:DI -> just past the name in the block heading, if found
 34067                                  ;       BX == # bytes remaining from that point, if found
 34068                                  ;
 34069                                  ;   OTHER REGS USED
 34070                                  ;       None
 34071                                  ;
 34072                                  ;   NOTES
 34073                                  ;       This differs from "find_block" in that it searches the ENTIRE
 34074                                  ;       config.sys image, not merely the remaining portion, and that it
 34075                                  ;       takes a pointer to block name that is *elsewhere* in the image
 34076                                  ;       (ie, ES) as opposed to some string constant in our own segment (DS).
 34077                                  ;
 34078                                  ;   HISTORY
 34079                                  ;       Created 16-Mar-1992 by JeffPar
 34080                                  ;
 34081                                  ;----------------------------------------------------------------------------
 34082                                  
 34083                                  srch_block:	          ; returns BX -> named block in CONFIG.SYS
 34084                                          push    ax              ;
 34085                                          push    cx              ;
 34086                                          mov     cx,[cs:count]   ;
 34087                                          push    si              ;
 34088                                          sub     si,si           ;
 34089                                          push    ds              ;
 34090                                          push    es              ;
 34091                                          pop     ds              ;
 34092                                          call    find_block      ;
 34093                                          mov     di,si           ;
 34094                                          mov     bx,cx           ;
 34095                                          pop     ds              ;
 34096                                          pop     si              ;
 34097                                          pop     cx              ;
 34098                                          pop     ax              ;
 34099                                  find_exit: ; 16/04/2019
 34100                                          retn			;
 34101                                  
 34102                                  ;----------------------------------------------------------------------------
 34103                                  ;
 34104                                  ;   find_block:  searches rest of config.sys for block name @DS:DI
 34105                                  ;
 34106                                  ;   INPUT
 34107                                  ;    DS:DI -> block name to find
 34108                                  ;    ES:SI -> remainder of config.sys image
 34109                                  ;       CX == remaining size of config.sys image
 34110                                  ;
 34111                                  ;   OUTPUT
 34112                                  ;       ZF flag set, if found (also, CF set if EOF)
 34113                                  ;    ES:SI -> where the search stopped (at end of block name or EOF)
 34114                                  ;       CX == # bytes remaining from that point
 34115                                  ;
 34116                                  ;   OTHER REGS USED
 34117                                  ;       AX
 34118                                  ;
 34119                                  ;   NOTES
 34120                                  ;       This differs from "srch_block" in that it searches only the
 34121                                  ;       remaining portion of the config.sys image and leaves SI and CX
 34122                                  ;       pointing to where the search left off, and that it takes a pointer
 34123                                  ;       to search string in our own segment (DS:DI instead of ES:DI).
 34124                                  ;
 34125                                  ;   HISTORY
 34126                                  ;       Created 16-Mar-1992 by JeffPar
 34127                                  ;
 34128                                  ;----------------------------------------------------------------------------
 34129                                  
 34130                                  find_block:
 34131                                          call    get_char        ; get line code
 34132                                          jc	short find_exit	; end of file
 34133                                          and     al,~CONFIG_OPTION_QUERY
 34134                                          cmp     al,CONFIG_BEGIN ; beginning of a block?
 34135                                          je	short check_line ; no
 34136                                          cmp     al,CONFIG_INCLUDE
 34137                                          jne	short next_line	;
 34138                                          or	byte [cs:config_multi],1
 34139                                          jmp     short next_line ;
 34140                                  check_line:
 34141                                          or      byte [cs:config_multi],1
 34142                                          call    comp_names      ; compare block names
 34143                                          jbe	short find_exit	; end of file, or names matched
 34144                                  next_line:
 34145                                          call    skip_opt_line   ; no, so skip to next line
 34146                                          jmp	short find_block  ;
 34147                                  ;find_exit:
 34148                                  ;	retn
 34149                                  
 34150                                  ;----------------------------------------------------------------------------
 34151                                  ;
 34152                                  ;   comp_names:  compares keyword @DS:DI to position in config.sys @ES:SI
 34153                                  ;
 34154                                  ;   INPUT
 34155                                  ;    DS:DI -> keyword to compare
 34156                                  ;    ES:SI -> position in config.sys
 34157                                  ;       CX == remaining bytes in config.sys
 34158                                  ;
 34159                                  ;   OUTPUT
 34160                                  ;       ZF flag set, if match (also, CF set if EOF)
 34161                                  ;    ES:SI -> where the comparison stopped (at end of block name or EOF)
 34162                                  ;       CX == # bytes remaining from that point
 34163                                  ;
 34164                                  ;   OTHER REGS USED
 34165                                  ;       AX
 34166                                  ;
 34167                                  ;   NOTES
 34168                                  ;       None
 34169                                  ;
 34170                                  ;   HISTORY
 34171                                  ;       Created 16-Mar-1992 by JeffPar
 34172                                  ;
 34173                                  ;----------------------------------------------------------------------------
 34174                                  
 34175                                  comp_names:
 34176                                          push    di              ;
 34177                                  comp_loop:                      ;
 34178                                          call    get_char        ;
 34179                                          jc	short comp_exit	;
 34180                                          call    any_delim       ; is next character a delimiter?
 34181                                          mov     ah,[di]         ; (get next character we're supposed to match)
 34182                                          je	short comp_almost ; yes, it *could* be a match
 34183                                          inc     di              ;
 34184                                          and     ax,~2020h ; 0DFDFh 
 34185                                  				; BUGBUG -- assumes both names are alphanumeric -JTP
 34186                                          cmp     al,ah           ; match?
 34187                                          je	short comp_loop ; yes, keep looking at the characters
 34188                                          clc                     ; prevent erroneous eof indication: clear carry
 34189                                  comp_exit:                      ;
 34190                                          pop     di              ;
 34191                                          retn			;
 34192                                  comp_almost:                    ;
 34193                                          xchg    al,ah           ; we don't know for sure if it's a match
 34194                                          call    any_delim       ; until we verify that the second string has
 34195                                          xchg    al,ah           ; been exhausted also...
 34196                                          jmp     comp_exit       ; if we are, this call to any_delim will tell...
 34197                                  
 34198                                  ;----------------------------------------------------------------------------
 34199                                  
 34200                                  comp_names_safe:
 34201                                          push    ax
 34202                                          push    cx
 34203                                          push	si
 34204                                          push    ds
 34205                                          push    cs
 34206                                          pop     ds
 34207                                          call    comp_names
 34208                                          pop     ds
 34209                                  	pop	si
 34210                                          pop     cx
 34211                                          pop     ax
 34212                                          retn
 34213                                  
 34214                                  ;----------------------------------------------------------------------------
 34215                                  ;
 34216                                  ;   print_item:  display menu item #BL
 34217                                  ;
 34218                                  ;   INPUT
 34219                                  ;       BL == menu item # to display
 34220                                  ;
 34221                                  ;   OUTPUT
 34222                                  ;       Menu item displayed, with appropriate highlighting if BL == bDefBlock
 34223                                  ;
 34224                                  ;   OTHER REGS USED
 34225                                  ;       None
 34226                                  ;
 34227                                  ;   NOTES
 34228                                  ;       This function saves/restores the current cursor position, so you
 34229                                  ;       needn't worry about it.
 34230                                  ;
 34231                                  ;   HISTORY
 34232                                  ;       Created 16-Mar-1992 by JeffPar
 34233                                  ;
 34234                                  ;----------------------------------------------------------------------------
 34235                                  
 34236                                  print_item:		; prints menu item #BL (1 to N)
 34237                                          push    ax              ;
 34238                                          push    bx              ;
 34239                                          push    cx              ;
 34240                                          push    dx              ;
 34241                                          push    si              ;
 34242                                          mov     ah,03h          ; get cursor position
 34243                                          mov     bh,[bMenuPage]  ; always page zero
 34244                                          int     10h             ; DH/DL = row/column
 34245                                          push    dx              ; save it
 34246                                          mov     ah,02h          ; set cursor position
 34247                                          mov     dh,bl           ;
 34248                                          add     dh,3            ;
 34249                                          mov     dl,5            ;
 34250                                          int     10h             ; set cursor position for correct row/col
 34251                                          mov     al,bl           ;
 34252                                          add     al,'0'          ; convert menu item # to ASCII digit
 34253                                          mov     ah,[bMenuColor] ; normal attribute
 34254                                          cmp     bl,[bDefBlock]  ; are we printing the current block?
 34255                                          jne	short print_other ; no
 34256                                          or      ah,70h          ; yes, set bgnd color to white
 34257                                          mov     ch,ah           ;
 34258                                          mov     cl,4            ;
 34259                                          rol     ch,cl           ;
 34260                                          cmp     ch,ah           ; are fgnd/bgnd the same?
 34261                                          jne	short print_other ; no
 34262                                          xor     ah,08h          ; yes, so modify the fgnd intensity
 34263                                  print_other:                    ;
 34264                                          mov     bh,0            ;
 34265                                          add     bx,bx           ;
 34266                                          mov     di,[aoffBlockDesc+bx]
 34267                                          mov     bl,ah           ; put the attribute in the correct register now
 34268                                          mov     bh,[bMenuPage]  ; get correct video page #
 34269                                          mov     ah,09h          ; write char/attr
 34270                                          mov     cx,1            ;
 34271                                          int     10h             ;
 34272                                          inc     dl              ; increment column
 34273                                          mov     ah,02h          ;
 34274                                          int     10h             ;
 34275                                          ;mov	ax,0900h+'.'    ;
 34276                                          mov	ax,092Eh
 34277                                  	int     10h             ; display '.'
 34278                                          inc     dl              ; increment column
 34279                                          mov     ah,02h          ;
 34280                                          int     10h             ;
 34281                                          ;mov	ax,0900h+' '    ;
 34282                                          mov	ax,0920h
 34283                                  	int     10h             ; display ' '
 34284                                          inc     dl              ; increment column
 34285                                          mov     ah,02h          ;
 34286                                          int     10h             ;
 34287                                          push    es              ;
 34288                                  print_loop:                     ;
 34289                                          mov     al,[es:di]	; get a character of the description
 34290                                          inc     di              ;
 34291                                          cmp     al,TAB ; 9	; substitute spaces for tabs
 34292                                          jne	short print_nontab ;
 34293                                          mov     al,' '          ;
 34294                                  print_nontab:                   ;
 34295                                          cmp     al,' '          ;
 34296                                          jb	short print_done ; stop at the 1st character < space
 34297                                          cmp     al,'$'          ;
 34298                                          je	short print_done ; also stop on $
 34299                                          mov     ah,09h          ; display function #
 34300                                          int     10h             ;
 34301                                          inc     dl              ; increment column
 34302                                          cmp     dl,78           ; far enough?
 34303                                          jae	short print_done ; yes
 34304                                          mov     ah,02h          ;
 34305                                          int     10h             ;
 34306                                          jmp     print_loop      ;
 34307                                  print_done:                     ;
 34308                                          pop     es              ;
 34309                                          pop     dx              ;
 34310                                          mov     ah,02h          ;
 34311                                          int     10h             ; restore previous row/col
 34312                                          pop     si              ;
 34313                                          pop     dx              ;
 34314                                          pop     cx              ;
 34315                                          pop     bx              ;
 34316                                          pop     ax              ;
 34317                                          retn			;
 34318                                  
 34319                                  ;----------------------------------------------------------------------------
 34320                                  ;
 34321                                  ;   select_item:  wait for user to select menu item, with time-out
 34322                                  ;
 34323                                  ;   INPUT
 34324                                  ;       None
 34325                                  ;
 34326                                  ;   OUTPUT
 34327                                  ;       BX == menu item # (1-N), or -1 for clean boot
 34328                                  ;       Selected menu item highlighted
 34329                                  ;       Cursor positioned beneath menu, ready for tty-style output now
 34330                                  ;
 34331                                  ;   OTHER REGS USED
 34332                                  ;       None
 34333                                  ;
 34334                                  ;   NOTES
 34335                                  ;       None
 34336                                  ;
 34337                                  ;   HISTORY
 34338                                  ;       Created 16-Mar-1992 by JeffPar
 34339                                  ;
 34340                                  ;----------------------------------------------------------------------------
 34341                                  
 34342                                  select_item:		; returns digit value in BX (trashes AX/CX/DX)
 34343                                          mov     bl,[bDefBlock]  ; BL will be the default block #
 34344                                          mov     al,bl           ;
 34345                                          call    disp_num        ;
 34346                                          call    show_status     ; display current interactive status
 34347                                          cmp     byte [secTimeOut],-1
 34348                                          je	short input_key	; no time-out, just go to input
 34349                                          mov     ah,GET_TIME ; 2Ch
 34350                                          int     21h             ;
 34351                                          mov     bh,dh           ; BH = initial # of seconds
 34352                                  check_time:
 34353                                          mov     al,[secTimeOut] ;
 34354                                          sub     al,[secElapsed] ;
 34355                                          jae	short show_time	;
 34356                                          or      byte [bQueryOpt],2  ; disable all further prompting
 34357                                          mov     byte [secElapsed],0
 34358                                          jmp	select_done	; time's up!
 34359                                  show_time:
 34360                                          push    bx              ;
 34361                                          mov     bl,al           ; save # in BL
 34362                                          mov     bh,[bMenuPage]  ;
 34363                                          mov     ah,03h          ; get cursor position
 34364                                          int     10h             ;
 34365                                          push    dx              ;
 34366                                  	add	dl,8		; move cursor to the right
 34367                                          mov     ah,02h          ; set cursor position
 34368                                          int     10h             ;
 34369                                          mov     dx,_$TimeOut
 34370                                          call    print           ; print the "Time remaining: " prompt
 34371                                          mov     al,bl           ; recover # from BL
 34372                                          cbw                     ; this works because AL is always <= 90
 34373                                          mov     cl,10           ;
 34374                                          div     cl              ; AL = tens digit, AH = ones digit
 34375                                          mov     cl,ah           ;
 34376                                          add     al,'0'          ;
 34377                                          mov     ah,0Eh          ;
 34378                                          int     10h             ; write TTY tens digit
 34379                                          mov     al,cl           ;
 34380                                          add     al,'0'          ;
 34381                                          mov     ah,0Eh          ;
 34382                                          int     10h             ; write TTY ones digit
 34383                                          pop     dx
 34384                                          mov     ah,02h          ; set cursor position back to where it was
 34385                                          int     10h             ;
 34386                                          pop     bx              ;
 34387                                  input_key:
 34388                                          mov     ah,RAW_CON_IO ; 6
 34389                                          mov     dl,0FFh         ; input request
 34390                                          int     21h             ;
 34391                                          jnz	short got_key	;
 34392                                          cmp     byte [secTimeOut],-1; is there a time-out?
 34393                                          je	short input_key	; no, just go back to input
 34394                                          mov     ah,GET_TIME     ;
 34395                                          int     21h             ; DH = seconds
 34396                                          mov     ah,dh           ;
 34397                                          sub     dh,bh           ; should generally be zero or one
 34398                                          mov     bh,ah           ;
 34399                                          jnc	short got_time	;
 34400                                          mov     dh,1            ; it wrapped back to zero, so assume one
 34401                                  got_time:
 34402                                          or      dh,dh           ; any change?
 34403                                          jz	short input_key	; no
 34404                                          add     [secElapsed],dh ;
 34405                                          jmp	short check_time ;
 34406                                  got_key:
 34407                                          push    ax              ;
 34408                                          mov     ax,-1           ; zap both secTimeOut and secElapsed
 34409                                          xchg    [secTimeOut],ax
 34410                                          cmp     al,-1           ; was time-out already disabled?
 34411                                          je	short timeout_disabled ; yes
 34412                                          push    bx              ; let's disable # seconds display
 34413                                          mov     ax,0A20h        ; write multiple spaces
 34414                                          mov     bx,[bMenuColor]
 34415                                          mov     cx,80           ; 80 of them, to be safe
 34416                                          int     10h             ; to completely obliterate # seconds display
 34417                                          pop     bx   		;
 34418                                  
 34419                                  timeout_disabled:
 34420                                          pop     ax              ;
 34421                                          or      al,al           ; extended key pressed?
 34422                                          jnz	short normal_key ; no
 34423                                          int     21h             ; get the next part of the key then
 34424                                          jz	short input_key	; hmmm, what happened to the second part?
 34425                                  
 34426                                          cmp     al,48h          ; up arrow?
 34427                                          jne	short not_up	; no
 34428                                          cmp     bl,1            ; are we as up as up can get?
 34429                                          jbe	short input_key	; yes, ignore it
 34430                                          dec     byte [bDefBlock] ;
 34431                                          call    print_item      ; re-print the current item
 34432                                          dec     bl              ; and then print the new current item
 34433                                          jmp     short print1
 34434                                  not_up:
 34435                                          cmp     al,50h          ; down arrow?
 34436                                          jne	short not_down	; no
 34437                                          cmp     bl,[bMaxBlock]  ; are we as down as down can get?
 34438                                          jae	short to_input_key ; yes, ignore it
 34439                                          inc     byte [bDefBlock] ;
 34440                                          call    print_item      ; re-print the current item
 34441                                          inc     bx              ; and then print the new current item
 34442                                  print1: 
 34443                                  	mov     al,bl           ;
 34444                                  print2: 
 34445                                  	call    print_item      ;
 34446                                          call    disp_num        ;
 34447                                  to_input_key:
 34448                                          jmp     input_key       ;
 34449                                  not_down:
 34450                                          test    byte [bDisableUI],1
 34451                                          jnz	short to_input_key ; don't allow F8 or F5
 34452                                          cmp     al,42h          ; F8 function key?
 34453                                          jne	short not_f8	; no
 34454                                          xor     byte [bQueryOpt],1
 34455                                          call    show_status     ;
 34456                                          jmp     input_key	;
 34457                                  not_f8:
 34458                                          cmp     al,3Fh          ; F5 function key?
 34459                                          jne	short to_input_key ; no
 34460                                          mov     bx,-1           ; special return code (-1) indicating clean boot
 34461                                          mov     al,' '          ; don't want to display anything really;
 34462                                          jmp     short disp_input; just want to display the cr/lf sequence...
 34463                                  
 34464                                  normal_key:
 34465                                          cmp     al,0Dh          ; Enter?
 34466                                          je	short select_done ; yes
 34467                                          cmp     al,08h          ; backspace?
 34468                                          jne	short not_backspace ; no
 34469                                          mov     bx,-2 ; 0FFFEh	; yes, special return code
 34470                                          retn			;
 34471                                  not_backspace:
 34472                                          sub     al,'0'          ; is greater than '0'?
 34473                                          jbe	short to_input_key ; no
 34474                                          cmp     al,[bMaxBlock]  ; is less than or equal to the maximum digit?
 34475                                          ja	short to_input_key ; no
 34476                                          mov	[bDefBlock],al  ;
 34477                                          call    print_item      ; redisplay the current selection
 34478                                          mov     bl,al           ; set new selection
 34479                                          jmp	short print2
 34480                                  
 34481                                  select_done:
 34482                                          mov     bh,0            ; return a full 16-bit value (for indexing)
 34483                                          mov     al,bl           ;
 34484                                          add     al,'0'          ; convert it into a digit, then display it
 34485                                  
 34486                                  	; fall into disp_input
 34487                                  
 34488                                  ; 16/04/2019 - Retro DOS v4.0
 34489                                  
 34490                                  ;----------------------------------------------------------------------------
 34491                                  ;
 34492                                  ;   disp_input:  display a single character + cr/lf
 34493                                  ;
 34494                                  ;   INPUT
 34495                                  ;       AL == character to display
 34496                                  ;
 34497                                  ;   OUTPUT
 34498                                  ;       None
 34499                                  ;
 34500                                  ;   OTHER REGS USED
 34501                                  ;       None
 34502                                  ;
 34503                                  ;   NOTES
 34504                                  ;       This function is used not only for the menu input selection but
 34505                                  ;       also for the interactive line prompting (the y/n/a thing).
 34506                                  ;
 34507                                  ;   HISTORY
 34508                                  ;       Created 16-Mar-1992 by JeffPar
 34509                                  ;
 34510                                  ;----------------------------------------------------------------------------
 34511                                  
 34512                                  disp_input:
 34513                                          push    ax
 34514                                          cmp     al,' '
 34515                                          jae	short disp_ok
 34516                                          mov     al,' '
 34517                                  disp_ok:
 34518                                          mov     dl,al
 34519                                          mov     ah,STD_CON_OUTPUT ; 2
 34520                                          int     21h
 34521                                          mov     dx,crlfm
 34522                                          call    print
 34523                                          pop     ax
 34524                                          retn
 34525                                  
 34526                                  ;----------------------------------------------------------------------------
 34527                                  
 34528                                  disp_num:
 34529                                          push    bx
 34530                                          add     al,'0'
 34531                                          mov     ah,0Ah
 34532                                          mov     bx,[bMenuColor]
 34533                                          mov     cx,1
 34534                                          int     10h
 34535                                          pop     bx
 34536                                          retn
 34537                                  
 34538                                  ;----------------------------------------------------------------------------
 34539                                  ;
 34540                                  ;   show_status:  display current interactive mode setting (on/off/none)
 34541                                  ;
 34542                                  ;   INPUT
 34543                                  ;       None
 34544                                  ;
 34545                                  ;   OUTPUT
 34546                                  ;       None
 34547                                  ;
 34548                                  ;   OTHER REGS USED
 34549                                  ;       None
 34550                                  ;
 34551                                  ;   NOTES
 34552                                  ;       None
 34553                                  ;
 34554                                  ;   HISTORY
 34555                                  ;       Created 16-Mar-1992 by JeffPar
 34556                                  ;
 34557                                  ;----------------------------------------------------------------------------
 34558                                  
 34559                                  show_status:
 34560                                          push    bx              ; BL = video page #
 34561                                          mov     bx,[bMenuColor]
 34562                                          mov     ah,03h          ; get cursor position
 34563                                          int     10h             ;
 34564                                          push    dx              ; save it
 34565                                          mov     ah,02h          ; set cursor position
 34566                                          mov     dx,[bLastCol]   ; set correct row/col
 34567                                          test    byte [bDisableUI],1
 34568                                          jz	short show_onoff ; just show on/off
 34569                                          mov     dl,0            ;
 34570                                          int     10h             ;
 34571                                          mov     ax,0A20h        ; write multiple spaces
 34572                                          mov     cx,80           ; 80 of them, to be exact
 34573                                          int     10h             ; to obliterate the status line
 34574                                          jmp     short show_done ;
 34575                                  show_onoff: 
 34576                                          int     10h
 34577                                  		; - VIDEO - WRITE CHARACTERS ONLY AT CURSOR POSITION
 34578                                  		; AL = character, BH = display page - alpha mode
 34579                                  		; BL = color of character (graphics mode, PCjr only)
 34580                                  		; CX = number of times to write character
 34581                                  
 34582                                          mov     al,[_$NO]	; assume OFF
 34583                                          cmp     byte [bQueryOpt],1 ; is interactive mode on?
 34584                                          jne	short show_noton ; no
 34585                                          mov     al,[_$YES]	; yes
 34586                                  show_noton:                     ;
 34587                                          mov     ah,0Eh          ; write TTY
 34588                                          int     10h             ;
 34589                                  show_done:                      ;
 34590                                          pop     dx              ;
 34591                                          mov     ah,02h          ;
 34592                                          int     10h             ; restore original cursor position
 34593                                          pop     bx              ;
 34594                                          retn			;
 34595                                  
 34596                                  ; 16/04/2019 - Retro DOS v4.0
 34597                                  
 34598                                  ;----------------------------------------------------------------------------
 34599                                  ;
 34600                                  ;   skip_token: advances ES:SI/CX past the current token
 34601                                  ;
 34602                                  ;   INPUT
 34603                                  ;    ES:SI -> position in config.sys
 34604                                  ;       CX == remaining bytes in config.sys
 34605                                  ;
 34606                                  ;   OUTPUT
 34607                                  ;       CF set if EOL/EOF hit
 34608                                  ;       AL == 1st char of delimiter
 34609                                  ;    ES:SI -> just past the delimiter
 34610                                  ;       CX == # bytes remaining from that point
 34611                                  ;
 34612                                  ;   OTHER REGS USED
 34613                                  ;       AX
 34614                                  ;
 34615                                  ;   NOTES
 34616                                  ;       None
 34617                                  ;
 34618                                  ;   HISTORY
 34619                                  ;       Created 16-Mar-1992 by JeffPar
 34620                                  ;
 34621                                  ;----------------------------------------------------------------------------
 34622                                  
 34623                                  skip_token:
 34624                                          call    get_char
 34625                                          jc	short skip_token_done
 34626                                          call    any_delim
 34627                                          jne	short skip_token
 34628                                  skip_check_eol:
 34629                                          cmp     al,cr ; 0Dh
 34630                                          je	short skip_token_eol
 34631                                          cmp     al,lf ; 0Ah
 34632                                          je	short skip_token_eol
 34633                                          clc
 34634                                          ;jmp	short skip_token_done
 34635                                  	retn
 34636                                  skip_token_eol:
 34637                                          stc
 34638                                  skip_token_done:
 34639                                          retn
 34640                                  
 34641                                  ;----------------------------------------------------------------------------
 34642                                  ;
 34643                                  ;   skip_delim: advances ES:SI/CX past the current delimiter
 34644                                  ;
 34645                                  ;   INPUT
 34646                                  ;    ES:SI -> position in config.sys
 34647                                  ;       CX == remaining bytes in config.sys
 34648                                  ;
 34649                                  ;   OUTPUT
 34650                                  ;       CF set if EOF hit
 34651                                  ;       AL == 1st char of token
 34652                                  ;    ES:SI -> just past the token
 34653                                  ;       CX == # bytes remaining from that point
 34654                                  ;    ES:BX -> new token (since ES:SI is already pointing 1 byte past token)
 34655                                  ;
 34656                                  ;   OTHER REGS USED
 34657                                  ;       AX
 34658                                  ;
 34659                                  ;   NOTES
 34660                                  ;       None
 34661                                  ;
 34662                                  ;   HISTORY
 34663                                  ;       Created 16-Mar-1992 by JeffPar
 34664                                  ;
 34665                                  ;----------------------------------------------------------------------------
 34666                                  
 34667                                  skip_delim:       ; returns carry set if eol/eof
 34668                                          call    get_char        ;
 34669                                          lea     bx,[si-1]       ; also returns BX -> next token
 34670                                          jc	short skip_token_done ;
 34671                                          call    delim           ;
 34672                                          je	short skip_delim ;
 34673                                          jmp	short skip_check_eol  ; 13/05/2019
 34674                                  
 34675                                  ;----------------------------------------------------------------------------
 34676                                  ;
 34677                                  ;   skip_opt_line: same as skip_line provided AL != LF
 34678                                  ;
 34679                                  ;   INPUT
 34680                                  ;       AL == last character read
 34681                                  ;    ES:SI -> position in config.sys
 34682                                  ;       CX == remaining bytes in config.sys
 34683                                  ;
 34684                                  ;   OUTPUT
 34685                                  ;       CF set if EOF hit
 34686                                  ;       AL == 1st char of new line
 34687                                  ;    ES:SI -> just past 1st char of new line
 34688                                  ;       CX == # bytes remaining from that point
 34689                                  ;
 34690                                  ;   OTHER REGS USED
 34691                                  ;       AX
 34692                                  ;
 34693                                  ;   NOTES
 34694                                  ;       In other words, the purpose here is to skip to the next line,
 34695                                  ;       unless ES:SI is already sitting at the front of the next line (which
 34696                                  ;       it would be if the last character fetched -- AL -- was a linefeed)
 34697                                  ;
 34698                                  ;   HISTORY
 34699                                  ;       Created 16-Mar-1992 by JeffPar
 34700                                  ;
 34701                                  ;----------------------------------------------------------------------------
 34702                                  
 34703                                  skip_opt_line:
 34704                                          cmp     al,lf ; 0Ah
 34705                                          je	short skip_line_done
 34706                                       
 34707                                  	; fall into skip_line
 34708                                  
 34709                                  ;----------------------------------------------------------------------------
 34710                                  ;
 34711                                  ;   skip_line: skip to the next line
 34712                                  ;
 34713                                  ;   INPUT
 34714                                  ;    ES:SI -> position in config.sys
 34715                                  ;       CX == remaining bytes in config.sys
 34716                                  ;
 34717                                  ;   OUTPUT
 34718                                  ;       CF set if EOF hit
 34719                                  ;    ES:SI -> just past 1st char of new line
 34720                                  ;       CX == # bytes remaining from that point
 34721                                  ;
 34722                                  ;   OTHER REGS USED
 34723                                  ;       AX
 34724                                  ;
 34725                                  ;   NOTES
 34726                                  ;       None
 34727                                  ;
 34728                                  ;   HISTORY
 34729                                  ;       Created 16-Mar-1992 by JeffPar
 34730                                  ;
 34731                                  ;----------------------------------------------------------------------------
 34732                                  
 34733                                  skip_line:
 34734                                          call    get_char
 34735                                          jc	short skip_line_done
 34736                                          cmp     al,lf ; 0Ah
 34737                                          jne	short skip_line
 34738                                  skip_line_done:
 34739                                  num_done:	; 18/12/2022
 34740                                          retn
 34741                                  
 34742                                  ;----------------------------------------------------------------------------
 34743                                  ;
 34744                                  ;   get_number: return binary equivalent of numeric string
 34745                                  ;
 34746                                  ;   INPUT
 34747                                  ;    ES:SI -> position in config.sys
 34748                                  ;       CX == remaining bytes in config.sys
 34749                                  ;
 34750                                  ;   OUTPUT
 34751                                  ;       AL == non-digit encountered
 34752                                  ;       BX == binary #
 34753                                  ;    ES:SI -> just past 1st non-digit
 34754                                  ;       CX == # bytes remaining from that point
 34755                                  ;
 34756                                  ;   OTHER REGS USED
 34757                                  ;       AX
 34758                                  ;
 34759                                  ;   NOTES
 34760                                  ;       None
 34761                                  ;
 34762                                  ;   HISTORY
 34763                                  ;       Created 16-Mar-1992 by JeffPar
 34764                                  ;
 34765                                  ;----------------------------------------------------------------------------
 34766                                  
 34767                                  ; 13/05/2019
 34768                                  
 34769                                  get_number:
 34770                                          sub     bx,bx           ; BX = result
 34771                                  num_loop:
 34772                                          call    get_char        ;
 34773                                          jc	short num_done	;
 34774                                          cmp     al,'0'          ; convert to value
 34775                                          jb	short num_done	; no more number
 34776                                          cmp     al,'9'          ;
 34777                                          ja	short num_done	;
 34778                                          push    ax              ;
 34779                                          mov     ax,10           ;
 34780                                          push    dx              ;
 34781                                          mul     bx              ;
 34782                                          pop     dx              ;
 34783                                          mov     bx,ax           ;
 34784                                          pop     ax              ;
 34785                                          sub     al,'0'          ;
 34786                                          cbw                     ;
 34787                                          add     bx,ax           ;
 34788                                          jmp	short num_loop	;
 34789                                  
 34790                                  	; 18/12/2022
 34791                                  ;num_done:
 34792                                          ;retn
 34793                                  
 34794                                  ;----------------------------------------------------------------------------
 34795                                  ;
 34796                                  ;   get_char:  return next character, advance ES:SI, and decrement CX
 34797                                  ;
 34798                                  ;   INPUT
 34799                                  ;    ES:SI -> position in config.sys
 34800                                  ;       CX == remaining bytes in config.sys
 34801                                  ;
 34802                                  ;   OUTPUT
 34803                                  ;       AL == next character
 34804                                  ;    ES:SI -> just past next character
 34805                                  ;       CX == # bytes remaining from that point
 34806                                  ;
 34807                                  ;   OTHER REGS USED
 34808                                  ;       AX
 34809                                  ;
 34810                                  ;   NOTES
 34811                                  ;       None
 34812                                  ;
 34813                                  ;   HISTORY
 34814                                  ;       Created 16-Mar-1992 by JeffPar
 34815                                  ;
 34816                                  ;----------------------------------------------------------------------------
 34817                                  
 34818                                  get_char:
 34819                                          sub     cx,1            ; use SUB to set carry,zero
 34820                                          jb	short get_fail	; out of data
 34821                                          ;lods	byte ptr es:[si] ;
 34822                                  	es	
 34823                                  	lodsb
 34824                                          mov     ah,al           ;
 34825                                          retn			;
 34826                                  get_fail:                       ; restore CX to zero
 34827                                          mov     cx,0            ; leave carry set, zero not set
 34828                                  nearby_ret:
 34829                                          retn
 34830                                  
 34831                                  ;----------------------------------------------------------------------------
 34832                                  ;
 34833                                  ;   query_user: ask user whether to execute current config.sys command
 34834                                  ;
 34835                                  ;   INPUT
 34836                                  ;       AL == current command code
 34837                                  ;    ES:SI -> current command line in config.sys
 34838                                  ;    config_cmd == current command code, but with QUERY bit intact
 34839                                  ;                  (00h used to generate "Process AUTOEXEC.BAT" prompt)
 34840                                  ;
 34841                                  ;   OUTPUT
 34842                                  ;       CF set if command should be ignored (it is also REM'ed out)
 34843                                  ;
 34844                                  ;   OTHER REGS USED
 34845                                  ;       BX, CX, DX, DI
 34846                                  ;
 34847                                  ;   NOTES
 34848                                  ;       None
 34849                                  ;
 34850                                  ;   HISTORY
 34851                                  ;       Created 16-Mar-1992 by JeffPar
 34852                                  ;
 34853                                  ;----------------------------------------------------------------------------
 34854                                  
 34855                                  	; 12/12/2022
 34856                                  query_user:
 34857                                          test    byte [bQueryOpt],4	; answer no to everything?
 34858                                          ;jz	short qu_1		;
 34859                                          ; 12/12/2022
 34860                                  	;jmp	short skip_all		;
 34861                                  	jnz	short skip_all
 34862                                  qu_1:
 34863                                  	test    byte [bQueryOpt],2	; answer yes to everything?
 34864                                          jnz	short nearby_ret	; yes (and return carry clear!)
 34865                                          push    ax                      ;
 34866                                          mov     al,[config_cmd]         ;
 34867                                          test    byte [bQueryOpt],1	; query every command?
 34868                                          jnz	short query_all		; yes
 34869                                          test    al,CONFIG_OPTION_QUERY  ;
 34870                                          ;jnz	short query_all		;
 34871                                          ; 12/12/2022
 34872                                  	;jmp	short do_cmd		;
 34873                                  	jz	short do_cmd ; cf=0
 34874                                  query_all:
 34875                                  
 34876                                  ;   Search for the command code (AL) in "comtab", and then print
 34877                                  ;   out the corresponding keyword, followed by the rest of the actual
 34878                                  ;   line pointed to by ES:SI
 34879                                  
 34880                                          push    si                      ; save pointer to rest of CONFIG.SYS line
 34881                                          mov     dx,_$AutoPrmpt    	;
 34882                                          and     al,~CONFIG_OPTION_QUERY ; 7Fh
 34883                                          jz	short generic_prompt	; config_cmd must have been 0
 34884                                  
 34885                                          mov     dh,al                   ; save config_cmd in DH
 34886                                          sub     bx,bx                   ;
 34887                                          mov     di,comtab		;
 34888                                  find_match:                             ;
 34889                                          mov     bl,[di]                 ; get size of current keyword
 34890                                          or      bl,bl                   ;
 34891                                          jz	short line_print	; end of table
 34892                                          inc     di                      ;
 34893                                          cmp     al,[di+bx]              ; match?
 34894                                          je	short cmd_match		; yes
 34895                                          lea     di,[di+bx+1]            ; otherwise, skip this command code
 34896                                  	; 13/05/2019	
 34897                                          jmp	short find_match	; loop
 34898                                  cmd_match:                              ;
 34899                                          mov     cl,[di-1]               ;
 34900                                          mov     ch,0                    ;
 34901                                          mov     ah,STD_CON_OUTPUT ; 2
 34902                                  cmd_print:                              ;
 34903                                          mov     al,[di]                 ;
 34904                                          inc     di                      ;
 34905                                          mov     dl,al                   ;
 34906                                          int     21h                     ;
 34907                                          loop    cmd_print               ;
 34908                                          mov     dl,'='                  ;
 34909                                          cmp     dh,CONFIG_SET  ; 'V'    ; for SET commands, don't display a '='
 34910                                          jne	short cmd_notset	;
 34911                                          mov     dl,' '                  ;
 34912                                  cmd_notset:
 34913                                          int     21h                     ; '=' looks funny on SET commands
 34914                                  line_print:                             ;
 34915                                  	;lods	byte ptr es:[si]        ;
 34916                                          es
 34917                                  	lodsb
 34918                                  	or      al,al                   ;
 34919                                          jnz	short non_null		;
 34920                                          mov     al,' '                  ;
 34921                                  non_null:                               ;
 34922                                          cmp     al,' '                  ; control code?
 34923                                          jb	short prompt_user	; yes, assume end of line
 34924                                          jne	short non_space		;
 34925                                          cmp     byte [es:si],' '	;
 34926                                          jb	short prompt_user	;
 34927                                  non_space:                              ;
 34928                                          mov     dl,al                   ;
 34929                                          mov     ah,STD_CON_OUTPUT ; 2	;
 34930                                          int     21h                     ;
 34931                                          jmp	short line_print	;
 34932                                  prompt_user:                            ;
 34933                                          mov     dx,_$InterPrmpt		;
 34934                                  
 34935                                  generic_prompt:
 34936                                          call    print                   ;
 34937                                  input_loop:                             ;
 34938                                          mov     ah,0                    ; read a key
 34939                                          int     16h                     ;
 34940                                          or      al,al                   ; is it a function key?
 34941                                          jnz	short not_func		; no
 34942                                          cmp     ah,3Fh                  ; F5 function key?
 34943                                          jne	short input_loop	; no
 34944                                          mov     al,[_$NO]                  ;
 34945                                          or      byte [bQueryOpt],4	; no more queries
 34946                                          jmp     short legal_char        ;
 34947                                  not_func:
 34948                                          and     al,~20h ; 0DFh		; converting to upper case
 34949                                          cmp     al,[_$NO]		; verify character is legal
 34950                                          je	short legal_char	;
 34951                                          cmp     al,[_$YES]		;
 34952                                          je	short legal_char	;
 34953                                          cmp     byte [config_cmd],0	;
 34954                                          je	short input_loop	; don't allow Esc on this query
 34955                                          cmp     al,1Bh                  ; Esc?
 34956                                          jne	short input_loop	;
 34957                                          or      byte [bQueryOpt],2	; no more interactive boot prompts
 34958                                          mov     al,[_$YES]
 34959                                  legal_char:                             ;
 34960                                          call    disp_input              ;
 34961                                          pop     si                      ; restore pointer to rest of CONFIG.SYS line
 34962                                  
 34963                                          cmp     al,[_$NO]		; process line?
 34964                                          je	short skip_cmd		; no
 34965                                  	; 12/12/2022
 34966                                  	clc
 34967                                  do_cmd:
 34968                                  	pop     ax			;
 34969                                  	; 12/12/2022
 34970                                  	; cf=0
 34971                                  	;clc				; just do the command
 34972                                  	retn
 34973                                  
 34974                                  skip_cmd:
 34975                                  	pop     ax			;
 34976                                  skip_all:
 34977                                  	mov     ah,CONFIG_REM ; '0'	; fake out the rest of sysinit's processing
 34978                                  	stc
 34979                                  	retn
 34980                                  
 34981                                  ;----------------------------------------------------------------------------
 34982                                  ;
 34983                                  ;   print_error: displays multi-config error conditions
 34984                                  ;
 34985                                  ;   INPUT
 34986                                  ;    Carry set to pause, clear to not
 34987                                  ;    ES:SI -> current command line in config.sys
 34988                                  ;
 34989                                  ;   OUTPUT
 34990                                  ;       None
 34991                                  ;
 34992                                  ;   OTHER REGS USED
 34993                                  ;       None
 34994                                  ;
 34995                                  ;   NOTES
 34996                                  ;       None
 34997                                  ;
 34998                                  ;   HISTORY
 34999                                  ;       Created 16-Mar-1992 by JeffPar
 35000                                  ;
 35001                                  ;----------------------------------------------------------------------------
 35002                                  
 35003                                  print_error:
 35004                                          push    ax
 35005                                          push    bx
 35006                                          push    cx
 35007                                          push    dx
 35008                                          push    ds
 35009                                          push    cs
 35010                                          pop     ds
 35011                                          pushf
 35012                                          call    get_linenum
 35013                                          mov     [linecount],bx
 35014                                          call    error_line
 35015                                          popf
 35016                                          jnc	short pe_ret
 35017                                          mov     dx,_$PauseMsg
 35018                                          call    print
 35019                                          mov     ax,0C07h		; flush input buffer, then wait for key
 35020                                          int     21h			; wait for a key
 35021                                          or      al,al			; extended key?
 35022                                          jnz	short pe_1		; no
 35023                                          mov     ah,07h			; yes
 35024                                          int     21h			; eat it too
 35025                                  pe_1:     
 35026                                  	mov     dx,crlfm
 35027                                          call    print
 35028                                  pe_ret: 
 35029                                  	pop     ds
 35030                                          pop     dx
 35031                                          pop     cx
 35032                                          pop     bx
 35033                                          pop     ax
 35034                                  	retn
 35035                                  
 35036                                  ;----------------------------------------------------------------------------
 35037                                  
 35038                                  ;   This function is very simple:  it merely prepends a "/D" to the
 35039                                  ;   command-line for the shell;  this (undocumented) switch disables
 35040                                  ;   AUTOEXEC.BAT processing and the date/time prompt that is usually
 35041                                  ;   displayed when there's no AUTOEXEC.BAT.
 35042                                  
 35043                                  disable_autoexec:
 35044                                  	; MSDOS 6.21 IO.SYS -  SYSINIT:4BE2h
 35045                                  	; 17/04/2019 - Retro DOS v4.0
 35046                                  
 35047                                  	test	byte [bQueryOpt],4
 35048                                  	jz	short disable_exit
 35049                                  	test	byte [dae_flag],1
 35050                                  	jnz	short disable_exit
 35051                                  	or	byte [dae_flag],1
 35052                                          ;or	byte [bQueryOpt],2 ; MSDOS 6.0 
 35053                                  	or      word [bQueryOpt],102h	; [bDefBlock] = 1
 35054                                  	mov     dx,'D ' ; 2044h
 35055                                  dae_1:
 35056                                          ;mov	al,[def_swchr]
 35057                                  	mov     al,[command_line-1]     ; get default switchchar
 35058                                          or      al,al                   ; anything there?
 35059                                          jz	short disable_exit	; no, disable_autoexec already called
 35060                                          mov     bl,[command_line]       ;
 35061                                          mov     bh,0                    ; BX == command-line length
 35062                                          mov     cx,bx                   ;
 35063                                          add     bl,3                    ;
 35064                                          cmp     bl,126                  ;
 35065                                          ja	short disable_exit	;
 35066                                          mov     [command_line],bl       ; update length
 35067                                          add     bx,command_line+1	; make sure we move the NULL too
 35068                                          inc     cx                      ; (just for consistency sake)
 35069                                  disable_loop:                           ;
 35070                                          mov     ah,[bx-3]               ;
 35071                                          mov     [bx],ah                 ;
 35072                                          dec     bx                      ;
 35073                                          loop    disable_loop            ;
 35074                                          mov     [bx-2],al               ;
 35075                                  	;mov	word [bx-1],'D ' ; 2044h ; /D is stuffed into place now
 35076                                  	mov	[bx-1],dx  ; MSDOS 6.21 IO.SYS - SYSINIT:4C29h		
 35077                                          ;mov	byte [command_line-1],0 ;
 35078                                  disable_exit:                           ;
 35079                                          retn
 35080                                  
 35081                                  CheckQueryOpt:	; MSDOS 6.21 IO.YSYS - SYSINIT:4C2Dh
 35082                                  	cmp     byte [bQueryOpt],1
 35083                                  	jnz     short disable_exit
 35084                                  	test	byte [dae_flag],2
 35085                                  	jnz     short disable_exit
 35086                                  	or      byte [dae_flag],2
 35087                                  	mov     dx,'Y ' ; 2059h ; 11/09/2023
 35088                                  	jmp     short dae_1
 35089                                  
 35090                                  ;endif  ;MULTI_CONFIG
 35091                                  
 35092                                  %endif	; 02/11/2022
 35093                                  
 35094                                  
 35095                                  ; 19/04/2019 - Retro DOS v4.0
 35096                                  
 35097                                  ;----------------------------------------------------------------------------
 35098                                  ;
 35099                                  ; procedure : delim
 35100                                  ;
 35101                                  ;----------------------------------------------------------------------------
 35102                                  
 35103                                  ;	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 35104                                  ;
 35105                                  ;;ifdef	MULTI_CONFIG
 35106                                  ;
 35107                                  ;any_delim:
 35108                                  ;       cmp     al,cr
 35109                                  ;       je	short delim_ret
 35110                                  ;       cmp     al,lf
 35111                                  ;       je	short delim_ret
 35112                                  ;       cmp     al,'['
 35113                                  ;       je	short delim_ret
 35114                                  ;       cmp     al,']'
 35115                                  ;       je	short delim_ret
 35116                                  ;
 35117                                  ;;endif  ;MULTI_CONFIG
 35118                                  
 35119                                  	; 02/11/2022 - Retrodos v4.0 (Modified MSDOS 5.0 IO.SYS)
 35120                                  	; (SYSINIT:3450h)	
 35121                                  delim:
 35122 00003085 3C2F                    	cmp	al,'/'		; ibm will assume "/" as an delimeter.
 35123 00003087 7416                    	je	short delim_ret
 35124                                  
 35125 00003089 3C00                    	cmp	al,0		; special case for sysinit!!!
 35126 0000308B 7412                    	je	short delim_ret
 35127                                  
 35128                                  org_delim:			; used by organize routine except for getting
 35129 0000308D 3C20                    	cmp	al,' '          ; the filename.
 35130 0000308F 740E                    	je	short delim_ret
 35131 00003091 3C09                            cmp     al,tab ; 9
 35132 00003093 740A                    	je	short delim_ret
 35133 00003095 3C3D                    	cmp	al,'='
 35134 00003097 7406                    	je	short delim_ret
 35135 00003099 3C2C                    	cmp	al,','
 35136 0000309B 7402                    	je	short delim_ret
 35137 0000309D 3C3B                    	cmp	al,';'
 35138                                  
 35139                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 35140                                  ;;ifdef	MULTI_CONFIG
 35141                                  ;;   Make sure there's no chance of a false EOF indication
 35142                                  ;	clc
 35143                                  ;;endif
 35144                                  
 35145                                  	; 02/11/2022
 35146                                  delim_ret:
 35147 0000309F C3                      	retn
 35148                                  
 35149                                  ;----------------------------------------------------------------------------
 35150                                  ;
 35151                                  ; procedure : newline
 35152                                  ;
 35153                                  ;  newline returns with first character of next line
 35154                                  ;
 35155                                  ;----------------------------------------------------------------------------
 35156                                  
 35157                                  newline:
 35158 000030A0 E898F6                  	call	getchr			;skip non-control characters
 35159 000030A3 7207                    	jc	short nl_ret
 35160 000030A5 3C0A                    	cmp	al,lf			;look for line feed
 35161 000030A7 75F7                    	jne	short newline
 35162 000030A9 E88FF6                  	call	getchr
 35163                                  nl_ret:
 35164 000030AC C3                      	retn
 35165                                  
 35166                                  ;----------------------------------------------------------------------------
 35167                                  ; 
 35168                                  ; procedure : mapcase
 35169                                  ;
 35170                                  ;----------------------------------------------------------------------------
 35171                                  
 35172                                  	; 02/11/2022 - Retro DOS 4.0 (Modified MSDOS 5.0 IO.SYS)
 35173                                  mapcase:
 35174 000030AD 51                      	push	cx
 35175 000030AE 56                      	push	si
 35176 000030AF 1E                      	push	ds
 35177                                  
 35178 000030B0 06                      	push	es
 35179 000030B1 1F                      	pop	ds
 35180                                  
 35181                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 35182                                  ;;ifdef	MULTI_CONFIG
 35183                                  ;
 35184                                  ;	mov	bl,al                   ; same cmd code this line
 35185                                  ;;else
 35186                                  ;;	xor	si,si
 35187                                  ;;endif
 35188                                  	; 02/11/2022
 35189 000030B2 31F6                    	xor	si, si
 35190                                  
 35191                                  convloop:
 35192 000030B4 AC                      	lodsb
 35193 000030B5 3C61                    	cmp	al,'a'
 35194 000030B7 7209                    	jb	short noconv
 35195 000030B9 3C7A                    	cmp	al,'z'
 35196 000030BB 7705                    	ja	short noconv
 35197 000030BD 2C20                    	sub	al,20h
 35198 000030BF 8844FF                  	mov	[si-1],al
 35199                                  noconv:
 35200                                  
 35201                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 35202                                  ;;ifdef	MULTI_CONFIG
 35203                                  ;;
 35204                                  ;;   When MULTI_CONFIG enabled, "mapcase" is used to map everything to
 35205                                  ;;   upper-case a line at a time, after we've been able to figure out whether
 35206                                  ;;   the line is a SET command or not (since we don't want to upper-case
 35207                                  ;;   anything after the "=" in a SET)
 35208                                  ;;
 35209                                  ;       cmp     bl,CONFIG_SET  ; 'V'	; preserve case for part of the line?
 35210                                  ;       jne	short check_eol		; no, just check for end-of-line
 35211                                  ;       cmp     al,'='                  ; separator between SET var and value?
 35212                                  ;       je	short convdone		; yes
 35213                                  ;check_eol:
 35214                                  ;       cmp     al,cr
 35215                                  ;       je	short convdone
 35216                                  ;       cmp     al,lf
 35217                                  ;       je	short convdone
 35218                                  ;;endif
 35219                                  	
 35220                                  	; 02/11/2022
 35221 000030C2 E2F0                    	loop	convloop
 35222                                  convdone:
 35223 000030C4 1F                      	pop	ds
 35224 000030C5 5E                      	pop	si
 35225 000030C6 59                      	pop	cx
 35226 000030C7 C3                      	retn
 35227                                  
 35228                                  ;----------------------------------------------------------------------------
 35229                                  ;
 35230                                  ; procedure : round
 35231                                  ;
 35232                                  ; round the values in memlo and memhi to paragraph boundary.
 35233                                  ; perform bounds check.
 35234                                  ;
 35235                                  ;----------------------------------------------------------------------------
 35236                                  
 35237                                  round:
 35238 000030C8 50                      	push	ax
 35239 000030C9 2EA1[DE03]              	mov	ax,[cs:memlo]
 35240                                  
 35241 000030CD E8F1DF                  	call	ParaRound		; para round up
 35242                                  
 35243 000030D0 2E0106[E003]            	add	[cs:memhi],ax
 35244 000030D5 2EC706[DE03]0000        	mov	word [cs:memlo],0
 35245 000030DC 2EA1[E003]              	mov	ax,[cs:memhi]		; ax = new memhi
 35246 000030E0 2E3B06[A302]            	cmp	ax,[cs:ALLOCLIM]	; if new memhi >= alloclim, error
 35247 000030E5 7322                    	jae	short mem_err
 35248 000030E7 2EF606[3614]02          	test	byte [cs:setdevmarkflag],for_devmark ; 2
 35249 000030ED 7418                    	jz	short skip_set_devmarksize
 35250 000030EF 06                      	push	es
 35251 000030F0 56                      	push	si
 35252 000030F1 2E8B36[3414]            	mov	si,[cs:devmark_addr]
 35253 000030F6 8EC6                    	mov	es,si
 35254 000030F8 29F0                    	sub	ax,si
 35255 000030FA 48                      	dec	ax
 35256                                  	;mov	[es:3],ax
 35257 000030FB 26A30300                	mov	[es:devmark.size],ax	; paragraph
 35258 000030FF 2E8026[3614]FD          	and	byte [cs:setdevmarkflag],not_for_devmark ; 0FDh
 35259 00003105 5E                      	pop	si
 35260 00003106 07                      	pop	es
 35261                                  skip_set_devmarksize:
 35262 00003107 58                      	pop	ax
 35263                                  	; 11/12/2022
 35264                                  	; cf = 0
 35265                                  	; 02/11/2022
 35266                                  	;clc	; ? (not needed here)	; clear carry
 35267 00003108 C3                      	retn
 35268                                  
 35269                                  ;----------------------------------------------------------------------------
 35270                                  
 35271                                  mem_err:
 35272                                  	; 11/12/2022
 35273 00003109 0E                      	push	cs
 35274 0000310A 1F                      	pop	ds
 35275                                  mem_err2:
 35276 0000310B BA[3138]                	mov	dx,badmem
 35277                                  	;push	cs
 35278                                  	;pop	ds
 35279 0000310E E87602                  	call	print
 35280 00003111 E940D7                  	jmp	stall
 35281                                  
 35282                                  ;----------------------------------------------------------------------------
 35283                                  ;
 35284                                  ; procedure : calldev
 35285                                  ;
 35286                                  ;----------------------------------------------------------------------------
 35287                                  
 35288                                  	; 02/11/2022 - Retrodos v4.0 (Modified MSDOS 5.0 IO.SYS)
 35289                                  	; (SYSINIT:34E0h)
 35290                                  calldev:
 35291 00003114 2E8E1E[F21E]            	mov	ds,[cs:DevEntry+2]
 35292 00003119 2E031E[F01E]            	add	bx,[cs:DevEntry]	; do a little relocation
 35293 0000311E 8B07                    	mov	ax,[bx]
 35294                                  
 35295 00003120 2EFF36[F01E]            	push	word [cs:DevEntry]
 35296 00003125 2EA3[F01E]              	mov	word [cs:DevEntry],ax
 35297 00003129 BB[E603]                	mov	bx,packet
 35298 0000312C 2EFF1E[F01E]            	call	far [cs:DevEntry]
 35299 00003131 2E8F06[F01E]            	pop	word [cs:DevEntry]
 35300 00003136 C3                      	retn
 35301                                  
 35302                                  ;----------------------------------------------------------------------------
 35303                                  ;
 35304                                  ; procedure : todigit
 35305                                  ;
 35306                                  ;----------------------------------------------------------------------------
 35307                                  
 35308                                  todigit:
 35309 00003137 2C30                    	sub	al,'0'
 35310                                  	;jb	short notdig  ; 02/11/2022
 35311                                  	; 12/12/2022
 35312 00003139 7203                    	jb	short notdig2
 35313                                  	;cmp	al,9
 35314                                  	;ja	short notdig
 35315                                  	;clc
 35316                                  	;retn
 35317                                  	; 12/12/2022
 35318 0000313B 3C0A                    	cmp	al,10
 35319 0000313D F5                      	cmc
 35320                                  notdig:
 35321                                  	;stc
 35322                                  notdig2:
 35323 0000313E C3                      	retn
 35324                                  
 35325                                  ;----------------------------------------------------------------------------
 35326                                  ;
 35327                                  ; procedure : getnum
 35328                                  ;
 35329                                  ; getnum parses a decimal number.
 35330                                  ; returns it in ax, sets zero flag if ax = 0 (may be considered an
 35331                                  ; error), if number is bad carry is set, zero is set, ax=0.
 35332                                  ;
 35333                                  ;----------------------------------------------------------------------------
 35334                                  
 35335                                  getnum:
 35336 0000313F 53                      	push	bx
 35337 00003140 31DB                    	xor	bx,bx			; running count is zero
 35338                                  b2:
 35339 00003142 E8F2FF                  	call	todigit 		; do we have a digit ?
 35340 00003145 7247                    	jc	short badnum		; no, bomb
 35341                                  
 35342 00003147 93                      	xchg	ax,bx			; put total in ax
 35343 00003148 53                      	push	bx			; save digit (0 to 9)
 35344                                  	;mov	bx,10			; base of arithmetic
 35345                                  	; 12/12/2022
 35346 00003149 B30A                    	mov	bl,10
 35347 0000314B F7E3                    	mul	bx			; shift by one decimal digit
 35348 0000314D 5B                      	pop	bx			; get back digit (0 to 9)
 35349 0000314E 00D8                    	add	al,bl			; get total
 35350 00003150 80D400                  	adc	ah,0			; make that 16 bits
 35351 00003153 7239                    	jc	short badnum		; too big a number
 35352                                  
 35353 00003155 93                      	xchg	ax,bx			; stash total
 35354                                  
 35355 00003156 E8E2F5                  	call	getchr			;get next digit
 35356 00003159 722D                    	jc	short b1		; no more characters
 35357 0000315B 3C20                    	cmp	al,' ' 			; space?
 35358 0000315D 741F                    	je	short b15		; then end of digits
 35359 0000315F 3C2C                    	cmp	al,',' 			; ',' is a seperator!!!
 35360 00003161 741B                    	je	short b15		; then end of digits.
 35361 00003163 3C09                    	cmp	al, tab ; 9		; tab
 35362 00003165 7417                    	je	short b15
 35363 00003167 2E3A06[2A03]            	cmp	al,[cs:sepchr]		; allow 0 or special separators
 35364 0000316C 7410                    	je	short b15
 35365 0000316E 3C2F                    	cmp	al,'/'			; see if another switch follows
 35366                                  	;nop				; cas - remnant of old bad code
 35367                                  	;nop
 35368                                  	; 12/12/2022
 35369                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 35370                                  	;nop
 35371                                  	;nop
 35372 00003170 740C                    	je	short b15
 35373 00003172 3C0A                    	cmp	al,lf			; line-feed?
 35374 00003174 7408                    	je	short b15
 35375 00003176 3C0D                    	cmp	al,cr			; carriage return?
 35376 00003178 7404                    	je	short b15
 35377 0000317A 08C0                    	or	al,al			; end of line separator?
 35378 0000317C 75C4                    	jnz	short b2		; no, try as a valid char...
 35379                                  b15:
 35380 0000317E 2EFF06[D203]            	inc	word [cs:count]		; one more character to s...
 35381 00003183 2EFF0E[D603]            	dec	word [cs:chrptr]	; back up over separator
 35382                                  b1:
 35383 00003188 89D8                    	mov	ax,bx			; get proper count
 35384 0000318A 09C0                    	or	ax,ax			; clears carry, sets zero accordingly
 35385 0000318C 5B                      	pop	bx
 35386 0000318D C3                      	retn
 35387                                  badnum:
 35388                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 35389                                  	;mov	byte [cs:sepchr],0
 35390 0000318E 31C0                    	xor	ax,ax			; set zero flag, and ax = 0
 35391                                  	; 12 /12/2022
 35392 00003190 2EA2[2A03]              	mov	[cs:sepchr],al ; 0
 35393 00003194 5B                      	pop	bx
 35394 00003195 F9                      	stc				; and carry set
 35395 00003196 C3                      	retn
 35396                                  
 35397                                  ;****************************************************************************
 35398                                  
 35399                                  setdoscountryinfo:
 35400                                  
 35401                                  ;----------------------------------------------------------------------------
 35402                                  ;input: es:di -> pointer to dos_country_cdpg_info
 35403                                  ;	ds:0  -> buffer.
 35404                                  ;	si = 0
 35405                                  ;	ax = country id
 35406                                  ;	dx = code page id. (if 0, then use ccsyscodepage as a default.)
 35407                                  ;	bx = file handle
 35408                                  ;	this routine can handle maximum 438 country_data entries.
 35409                                  ;
 35410                                  ;output: dos_country_cdpg_info set.
 35411                                  ;	 carry set if any file read failure or wrong information in the file.
 35412                                  ;	 carry set and cx = -1 if cannot find the matching country_id, 
 35413                                  ;	 codepage_id in the file.
 35414                                  ;----------------------------------------------------------------------------
 35415                                  
 35416 00003197 57                      	push	di
 35417 00003198 50                      	push	ax
 35418 00003199 52                      	push	dx
 35419                                  
 35420 0000319A 31C9                    	xor	cx,cx
 35421 0000319C 31D2                    	xor	dx,dx
 35422 0000319E B80002                  	mov	ax,512			;read 512 bytes
 35423 000031A1 E84F01                  	call	readincontrolbuffer	;read the file header
 35424 000031A4 724D                    	jc	short setdosdata_fail
 35425                                  
 35426 000031A6 06                      	push	es
 35427 000031A7 56                      	push	si
 35428                                  
 35429 000031A8 0E                      	push	cs
 35430 000031A9 07                      	pop	es
 35431                                  
 35432 000031AA BF[5334]                	mov	di,country_file_signature ; db 0FFh,'COUNTRY'
 35433 000031AD B90800                  	mov	cx,8			;length of the signature
 35434 000031B0 F3A6                    	repz	cmpsb
 35435                                  
 35436 000031B2 5E                      	pop	si
 35437 000031B3 07                      	pop	es
 35438 000031B4 753D                    	jnz	short setdosdata_fail 	;signature mismatch
 35439                                  
 35440 000031B6 83C612                  	add	si,18			;si -> county info type
 35441 000031B9 803C01                  	cmp	byte [si],1		;only accept type 1 (currently only 1 header type)
 35442 000031BC 7535                    	jne	short setdosdata_fail 	;cannot proceed. error return
 35443                                  
 35444 000031BE 46                      	inc	si			;si -> file offset
 35445 000031BF 8B14                    	mov	dx,[si]			;get the info file offset.
 35446 000031C1 8B4C02                  	mov	cx,[si+2]
 35447 000031C4 B80018                  	mov	ax,6144			;read 6144 bytes.
 35448 000031C7 E82901                  	call	readincontrolbuffer	;read info
 35449 000031CA 7227                    	jc	short setdosdata_fail
 35450                                  
 35451 000031CC 8B0C                    	mov	cx,[si]			;get the # of country, codepage combination entries
 35452 000031CE 81F9B601                	cmp	cx, 438			;cannot handle more than 438 entries.
 35453 000031D2 771F                    	ja	short setdosdata_fail
 35454                                  
 35455 000031D4 46                      	inc	si
 35456 000031D5 46                      	inc	si			;si -> entry information packet
 35457 000031D6 5A                      	pop	dx			;restore code page id
 35458 000031D7 58                      	pop	ax			;restore country id
 35459 000031D8 5F                      	pop	di
 35460                                  
 35461                                  setdoscntry_find:			;search for desired country_id,codepage_id.
 35462 000031D9 3B4402                  	cmp	ax,[si+2]		;compare country_id
 35463 000031DC 750A                    	jne	short setdoscntry_next
 35464                                  
 35465 000031DE 83FA00                  	cmp	dx,0			;no user specified code page ?
 35466 000031E1 7415                    	je	short setdoscntry_any_codepage ;then no need to match code page id.
 35467 000031E3 3B5404                  	cmp	dx,[si+4]		;compare code page id
 35468 000031E6 7413                    	je	short setdoscntry_got_it
 35469                                  
 35470                                  setdoscntry_next:
 35471 000031E8 0334                    	add	si,[si]			;next entry
 35472 000031EA 46                      	inc	si
 35473 000031EB 46                      	inc	si			;take a word for size of entry itself
 35474 000031EC E2EB                    	loop	setdoscntry_find
 35475                                  
 35476 000031EE B9FFFF                  	mov	cx,-1			;signals that bad country id entered.
 35477                                  setdoscntry_fail:
 35478 000031F1 F9                      	stc
 35479 000031F2 C3                      	retn
 35480                                  
 35481                                  setdosdata_fail:
 35482 000031F3 5E                      	pop	si
 35483 000031F4 59                      	pop	cx
 35484 000031F5 5F                      	pop	di
 35485 000031F6 EBF9                    	jmp	short setdoscntry_fail
 35486                                  
 35487                                  setdoscntry_any_codepage:		;use the code_page_id of the country_id found.
 35488 000031F8 8B5404                  	mov	dx,[si+4]
 35489                                  
 35490                                  setdoscntry_got_it:			;found the matching entry
 35491 000031FB 2E8916[5B34]            	mov	[cs:cntrycodepage_id],dx ;save code page id for this country.
 35492 00003200 8B540A                  	mov	dx,[si+10]		;get the file offset of country data
 35493 00003203 8B4C0C                  	mov	cx,[si+12]
 35494 00003206 B80002                  	mov	ax,512 			;read 512 bytes
 35495 00003209 E8E700                  	call	readincontrolbuffer
 35496 0000320C 72E3                    	jc	short setdoscntry_fail
 35497                                  
 35498 0000320E 8B0C                    	mov	cx,[si]			;get the number of entries to handle.
 35499 00003210 46                      	inc	si
 35500 00003211 46                      	inc	si			;si -> first entry
 35501                                  
 35502                                  setdoscntry_data:
 35503 00003212 57                      	push	di			;es:di -> dos_country_cdpg_info
 35504 00003213 51                      	push	cx			;save # of entry left
 35505 00003214 56                      	push	si			;si -> current entry in control buffer
 35506                                  
 35507 00003215 8A4402                  	mov	al,[si+2]		;get data entry id
 35508 00003218 E8AA00                  	call	getcountrydestination	;get the address of destination in es:di
 35509 0000321B 727D                    	jc	short setdoscntry_data_next ;no matching data entry id in dos
 35510                                  
 35511 0000321D 8B5404                  	mov	dx,[si+4]		;get offset of data
 35512 00003220 8B4C06                  	mov	cx,[si+6]
 35513 00003223 B80042                  	mov	ax,4200h
 35514 00003226 F9                      	stc
 35515 00003227 CD21                    	int	21h			;move pointer
 35516 00003229 72C8                    	jc	short setdosdata_fail
 35517                                  
 35518 0000322B BA0002                  	mov	dx,512			;start of data buffer
 35519 0000322E B91400                  	mov	cx,20			;read 20 bytes only. we only need to
 35520 00003231 B43F                    	mov	ah,3Fh			;look at the length of the data in the file.
 35521 00003233 F9                      	stc
 35522 00003234 CD21                    	int	21h			;read the country.sys data
 35523 00003236 72BB                    	jc	short setdosdata_fail 	;read failure
 35524                                  
 35525 00003238 39C8                    	cmp	ax,cx
 35526 0000323A 75B7                    	jne	short setdosdata_fail ; 13/05/2019
 35527                                  
 35528 0000323C 8B5404                  	mov	dx,[si+4]		;get offset of data again.
 35529 0000323F 8B4C06                  	mov	cx,[si+6]
 35530 00003242 B80042                  	mov	ax,4200h
 35531 00003245 F9                      	stc
 35532 00003246 CD21                    	int	21h			;move pointer back again
 35533 00003248 72A9                    	jc	short setdosdata_fail
 35534                                  
 35535 0000324A 56                      	push	si
 35536 0000324B BE0802                  	mov	si,(512+8)		;get length of the data from the file
 35537 0000324E 8B0C                    	mov	cx,[si]
 35538 00003250 5E                      	pop	si
 35539 00003251 BA0002                  	mov	dx,512			;start of data buffer
 35540 00003254 83C10A                  	add	cx,10			;signature + a word for the length itself
 35541 00003257 B43F                    	mov	ah,3Fh			;read the data from the file.
 35542 00003259 F9                      	stc
 35543 0000325A CD21                    	int	21h
 35544 0000325C 7295                    	jc	short setdosdata_fail
 35545                                  
 35546 0000325E 39C8                    	cmp	ax,cx
 35547 00003260 7591                    	jne	short setdosdata_fail
 35548                                  
 35549 00003262 8A4402                  	mov	al,[si+2]		;save data id for future use.
 35550 00003265 BE0802                  	mov	si,(512+8)		;si-> data buffer + id tag field
 35551 00003268 8B0C                    	mov	cx,[si]			;get the length of the file
 35552 0000326A 41                      	inc	cx			;take care of a word for lenght of tab
 35553 0000326B 41                      	inc	cx			;itself.
 35554 0000326C 81F9F805                	cmp	cx,(2048-512-8)	; 1528	;fit into the buffer?
 35555 00003270 7781                    	ja	short setdosdata_fail
 35556                                  
 35557                                  	;if	bugfix
 35558 00003272 E83500                  	call	setdbcs_before_copy
 35559                                  	;endif
 35560                                  
 35561 00003275 3C01                    	cmp	al,SetCountryInfo ; 1	;is the data for setcountryinfo table?
 35562 00003277 7512                    	jne	short setdoscntry_mov 	;no, don't worry
 35563                                  
 35564 00003279 26FF7518                	push	word [es:di+country_cdpg_info.ccMono_Ptr-country_cdpg_info.ccCountryInfoLen]  
 35565                                  	;push	word [es:di+24]		;cannot destroy ccmono_ptr address. save them.
 35566 0000327D 26FF751A                	push	word [es:di+country_cdpg_info.ccMono_Ptr-country_cdpg_info.ccCountryInfoLen+2] 
 35567                                  	;push	word [es:di+26]		;at this time di -> cccountryinfolen
 35568                                  	
 35569 00003281 57                      	push	di			;save di
 35570                                  
 35571 00003282 50                      	push	ax
 35572 00003283 2EA1[5B34]              	mov	ax,[cs:cntrycodepage_id] ;do not use the code page info in country_info
 35573 00003287 894404                  	mov	[si+4],ax		;use the saved one for this !!!!
 35574 0000328A 58                      	pop	ax
 35575                                  
 35576                                  setdoscntry_mov:
 35577 0000328B F3A4                    	rep	movsb			;copy the table into dos
 35578 0000328D 3C01                    	cmp	al,SetCountryInfo	;was the ccmono_ptr saved?
 35579 0000328F 7509                    	jne	short setdoscntry_data_next
 35580                                  
 35581 00003291 5F                      	pop	di			;restore di
 35582 00003292 268F451A                	pop	word [es:di+country_cdpg_info.ccMono_Ptr-country_cdpg_info.ccCountryInfoLen+2]
 35583                                  	;pop	word [es:di+26]		;restore
 35584 00003296 268F4518                	pop	word [es:di+country_cdpg_info.ccMono_Ptr-country_cdpg_info.ccCountryInfoLen] 
 35585                                  	;pop	word [es:di+24]
 35586                                  
 35587                                  setdoscntry_data_next:
 35588 0000329A 5E                      	pop	si			;restore control buffer pointer
 35589 0000329B 59                      	pop	cx			;restore # of entries left
 35590 0000329C 5F                      	pop	di			;restore pointer to dso_country_cdpg
 35591 0000329D 0334                    	add	si,[si]			;try to get the next entry
 35592 0000329F 46                      	inc	si
 35593 000032A0 46                      	inc	si			;take a word of entry length itself
 35594 000032A1 49                      	dec	cx
 35595 000032A2 83F900                  	cmp	cx,0
 35596 000032A5 741D                    	je	short setdoscntry_ok
 35597 000032A7 E968FF                  	jmp	setdoscntry_data
 35598                                  
 35599                                  	; 18/12/2022
 35600                                  ;setdoscntry_ok:
 35601                                  	;retn
 35602                                  
 35603                                  ;----------------------------------------------------------------------------
 35604                                  
 35605                                  	;if	bugfix
 35606                                  
 35607                                  setdbcs_before_copy:
 35608 000032AA 3C07                    	cmp	al,SetDBCS ; 7		; dbcs vector set?
 35609 000032AC 7516                    	jne	short sdbcsbc		; jump if not
 35610 000032AE 26833D00                	cmp	word [es:di],0		; zero byte data block?
 35611 000032B2 7410                    	je	short sdbcsbc		; jump if so
 35612                                  
 35613 000032B4 57                      	push	di
 35614 000032B5 50                      	push	ax
 35615 000032B6 51                      	push	cx
 35616 000032B7 268B0D                  	mov	cx,[es:di]		; load block length
 35617 000032BA 83C702                  	add	di,2			; points actual data
 35618 000032BD 30C0                    	xor	al,al			; fill bytes
 35619 000032BF F3AA                    	rep	stosb			; clear data block
 35620 000032C1 59                      	pop	cx
 35621 000032C2 58                      	pop	ax
 35622 000032C3 5F                      	pop	di
 35623                                  sdbcsbc:
 35624                                  setdoscntry_ok:	; 18/12/2022	
 35625 000032C4 C3                      	retn
 35626                                  
 35627                                  	;endif
 35628                                  
 35629                                  ;----------------------------------------------------------------------------
 35630                                  
 35631                                  getcountrydestination:
 35632                                  
 35633                                  ;get the destination address in the dos country info table.
 35634                                  ;input: al - data id
 35635                                  ;	es:di -> dos_country_cdpg_info
 35636                                  ;on return:
 35637                                  ;	es:di -> destination address of the matching data id
 35638                                  ;	carry set if no matching data id found in dos.
 35639                                  
 35640 000032C5 51                      	push	cx
 35641                                  	;add	di,74
 35642 000032C6 83C74A                  	add	di,country_cdpg_info.ccNumber_of_entries	
 35643                                  					;skip the reserved area, syscodepage etc.
 35644 000032C9 268B0D                  	mov	cx,[es:di]		;get the number of entries
 35645 000032CC 47                      	inc	di
 35646 000032CD 47                      	inc	di			;si -> the first start entry id
 35647                                  
 35648                                  getcntrydest:
 35649 000032CE 263805                  	cmp	byte [es:di],al
 35650 000032D1 7413                    	je	short getcntrydest_ok
 35651 000032D3 26803D01                	cmp	byte [es:di],SetCountryInfo ;was it setcountryinfo entry?
 35652 000032D7 7405                    	je	short getcntrydest_1
 35653                                  
 35654 000032D9 83C705                  	add	di,5			;next data id
 35655 000032DC EB03                    	jmp	short getcntrydest_loop
 35656                                  
 35657                                  getcntrydest_1:
 35658                                  	;add	di,41
 35659 000032DE 83C729                  	add	di,NEW_COUNTRY_SIZE+3	;next data id
 35660                                  getcntrydest_loop:
 35661 000032E1 E2EB                    	loop	getcntrydest
 35662 000032E3 F9                      	stc
 35663 000032E4 EB0B                    	jmp	short getcntrydest_exit
 35664                                  
 35665                                  getcntrydest_ok:
 35666 000032E6 3C01                    	cmp	al,SetCountryInfo ; 1	;select country info?
 35667 000032E8 7503                    	jne	short getcntrydest_ok1
 35668                                  
 35669 000032EA 47                      	inc	di			;now di -> cccountryinfolen
 35670 000032EB EB04                    	jmp	short getcntrydest_exit
 35671                                  
 35672                                  getcntrydest_ok1:
 35673 000032ED 26C47D01                	les	di,[es:di+1]		;get the destination in es:di
 35674                                  
 35675                                  getcntrydest_exit:
 35676 000032F1 59                      	pop	cx
 35677 000032F2 C3                      	retn
 35678                                  
 35679                                  ;----------------------------------------------------------------------------
 35680                                  
 35681                                  readincontrolbuffer:
 35682                                  
 35683                                  ;move file pointer to cx:dx
 35684                                  ;read ax bytes into the control buffer. (should be less than 2 kb)
 35685                                  ;si will be set to 0 hence ds:si points to the control buffer.
 35686                                  ;entry:  cx,dx offset from the start of the file where the read/write pointer
 35687                                  ;	 be moved.
 35688                                  ;	 ax - # of bytes to read
 35689                                  ;	 bx - file handle
 35690                                  ;	 ds - buffer seg.
 35691                                  ;return: the control data information is read into ds:0 - ds:0200.
 35692                                  ;	 cx,dx value destroyed.
 35693                                  ;	 carry set if error in reading file.
 35694                                  
 35695 000032F3 50                      	push	ax			;# of bytes to read
 35696 000032F4 B80042                  	mov	ax,4200h
 35697 000032F7 F9                      	stc
 35698 000032F8 CD21                    	int	21h			;move pointer
 35699 000032FA 59                      	pop	cx			;# of bytes to read
 35700 000032FB 7209                    	jc	short ricb_exit
 35701                                  
 35702 000032FD 31D2                    	xor	dx,dx			;ds:dx -> control buffer
 35703 000032FF 31F6                    	xor	si,si
 35704 00003301 B43F                    	mov	ah,3Fh			;read into the buffer
 35705 00003303 F9                      	stc
 35706 00003304 CD21                    	int	21h			;should be less than 1024 bytes.
 35707                                  ricb_exit:
 35708 00003306 C3                      	retn
 35709                                  
 35710                                  ;----------------------------------------------------------------------------
 35711                                  
 35712                                  set_country_path:
 35713                                  
 35714                                  ;in:  ds - sysinitseg, es - confbot, si -> start of the asciiz path string
 35715                                  ;     dosinfo_ext, cntry_drv, cntry_root, cntry_path
 35716                                  ;     assumes current directory is the root directory.
 35717                                  ;out: ds:di -> full path (cntry_drv).
 35718                                  ;     set the cntry_drv string from the country=,,path command.
 35719                                  ;     ds, es, si value saved.
 35720                                  
 35721 00003307 56                      	push	si
 35722                                  
 35723 00003308 1E                      	push	ds			;switch ds, es
 35724 00003309 06                      	push	es
 35725 0000330A 1F                      	pop	ds
 35726 0000330B 07                      	pop	es			;now ds -> confbot, es -> sysinitseg
 35727                                  
 35728 0000330C E82E00                  	call	chk_drive_letter	;current ds:[si] is a drive letter?
 35729 0000330F 7206                    	jc	short scp_default_drv 	;no, use current default drive.
 35730                                  
 35731 00003311 8A04                    	mov	al,[si]
 35732 00003313 46                      	inc	si
 35733 00003314 46                      	inc	si			;si -> next char after ":"
 35734 00003315 EB06                    	jmp	short scp_setdrv
 35735                                  
 35736                                  scp_default_drv:
 35737 00003317 B419                    	mov	ah,19h
 35738 00003319 CD21                    	int	21h
 35739 0000331B 0441                    	add	al,"A"			;convert it to a character.
 35740                                  
 35741                                  scp_setdrv:
 35742 0000331D 2EA2[1034]              	mov	[cs:cntry_drv],al	;set the drive letter.
 35743 00003321 BF[1334]                	mov	di,cntry_path
 35744 00003324 8A04                    	mov	al,[si]
 35745 00003326 3C5C                    	cmp	al, "\"
 35746 00003328 7406                    	je	short scp_root_dir
 35747                                  
 35748 0000332A 3C2F                    	cmp	al,"/"			;let's accept "/" as an directory delim
 35749 0000332C 7402                    	je	short scp_root_dir
 35750                                  
 35751 0000332E EB01                    	jmp	short scp_path
 35752                                  
 35753                                  scp_root_dir:
 35754 00003330 4F                      	dec	di			;di -> cntry_root
 35755                                  scp_path:
 35756 00003331 E81F00                  	call	move_asciiz		;copy it
 35757                                  
 35758 00003334 BF[1034]                	mov	di,cntry_drv
 35759                                  scpath_exit:
 35760                                  
 35761 00003337 1E                      	push	ds			;switch ds, es
 35762 00003338 06                      	push	es
 35763 00003339 1F                      	pop	ds
 35764 0000333A 07                      	pop	es			;ds, es value restored
 35765                                  
 35766 0000333B 5E                      	pop	si
 35767 0000333C C3                      	retn
 35768                                  
 35769                                  ;----------------------------------------------------------------------------
 35770                                  
 35771                                  chk_drive_letter:
 35772                                  
 35773                                  ;check if ds:[si] is a drive letter followed by ":".
 35774                                  ;assume that every alpha character is already converted to upper case.
 35775                                  ;carry set if not.
 35776                                  
 35777 0000333D 50                      	push	ax
 35778 0000333E 803C41                  	cmp	byte [si],"A"
 35779                                  	;jb	short cdletter_no
 35780 00003341 720E                    	jb	short cdletter_exit
 35781 00003343 803C5A                  	cmp	byte [si],"Z"
 35782 00003346 7708                    	ja	short cdletter_no
 35783 00003348 807C013A                	cmp	byte [si+1],":"
 35784 0000334C 7502                    	jne	short cdletter_no
 35785                                  
 35786 0000334E EB01                    	jmp	short cdletter_exit
 35787                                  
 35788                                  cdletter_no:
 35789 00003350 F9                      	stc
 35790                                  cdletter_exit:
 35791 00003351 58                      	pop	ax
 35792 00003352 C3                      	retn
 35793                                  
 35794                                  ;----------------------------------------------------------------------------
 35795                                  
 35796                                  move_asciiz:
 35797                                  
 35798                                  ;in: ds:si -> source es:di -> target
 35799                                  ;out: copy the string until 0.
 35800                                  ;assumes there exists a 0.
 35801                                  
 35802                                  masciiz_loop:
 35803 00003353 A4                      	movsb
 35804 00003354 807CFF00                	cmp	byte [si-1],0	; was it 0?
 35805 00003358 75F9                    	jne	short masciiz_loop
 35806 0000335A C3                      	retn
 35807                                  
 35808                                  ;----------------------------------------------------------------------------
 35809                                  
 35810                                  ;	ds:dx points to string to output (asciz)
 35811                                  ;
 35812                                  ;	prints <badld_pre> <string> <badld_post>
 35813                                  
 35814                                  badfil:
 35815 0000335B 0E                      	push	cs
 35816 0000335C 07                      	pop	es
 35817                                  
 35818 0000335D 89D6                    	mov	si,dx
 35819                                  badload:
 35820 0000335F BA[9B37]                	mov	dx,badld_pre	; want to print config error
 35821 00003362 BB[5837]                	mov	bx,crlfm
 35822                                  prnerr:
 35823 00003365 0E                      	push	cs
 35824 00003366 1F                      	pop	ds ; *
 35825 00003367 E81D00                  	call	print
 35826                                  prn1:
 35827 0000336A 268A14                  	mov	dl,[es:si]
 35828 0000336D 08D2                    	or	dl,dl
 35829 0000336F 7407                    	jz	short prn2
 35830 00003371 B402                    	mov	ah,STD_CON_OUTPUT ; 2 
 35831 00003373 CD21                    	int	21h
 35832 00003375 46                      	inc	si
 35833 00003376 EBF2                    	jmp	short prn1
 35834                                  prn2:
 35835 00003378 89DA                    	mov	dx,bx
 35836 0000337A E80A00                  	call	print
 35837                                  	; 11/12/2022
 35838                                  	; ds = cs ; *
 35839 0000337D 803E[D103]01            	cmp	byte [donotshownum],1 ; suppress line number when handling command.com
 35840                                  	;cmp	byte [cs:donotshownum],1 
 35841 00003382 7407                    	je	short prnexit
 35842                                  	
 35843                                  	; 18/12/2022
 35844                                  	;call	error_line
 35845 00003384 E9CBF3                  	jmp	error_line
 35846                                  ;prnexit:
 35847                                  	;retn
 35848                                  
 35849                                  ;----------------------------------------------------------------------------
 35850                                  
 35851                                  print:
 35852 00003387 B409                    	mov	ah,STD_CON_STRING_OUTPUT ; 9
 35853 00003389 CD21                    	int	21h
 35854                                  prnexit:	; 18/12/2022
 35855 0000338B C3                      	retn
 35856                                  
 35857                                  ;----------------------------------------------------------------------------
 35858                                  
 35859                                  ;  open device pointed to by dx, al has access code
 35860                                  ;   if unable to open do a device open null device instead
 35861                                  
 35862                                  	; 02/11/2022 - Retrodos v4.0 (Modified MSDOS 5.0 IO.SYS)
 35863                                  	; (SYSINIT:3764h)
 35864                                  open_dev:
 35865 0000338C E80500                  	call	open_file
 35866 0000338F 7309                    	jnc	short open_dev3
 35867                                  
 35868                                  open_dev1:
 35869 00003391 BA[F433]                	mov	dx,nuldev
 35870                                  	; 18/12/2022
 35871                                  	;call	open_file
 35872                                  ;of_retn:
 35873                                  	;retn
 35874                                  	; 18/12/2022
 35875                                  	;jmp	short open_file
 35876                                  open_file:
 35877 00003394 B43D                    	mov	ah,OPEN	; 3Dh
 35878 00003396 F9                      	stc
 35879 00003397 CD21                    	int	21h
 35880                                  of_retn:	; 18/12/2022
 35881 00003399 C3                      	retn
 35882                                  
 35883                                  open_dev3:
 35884 0000339A 89C3                    	mov	bx,ax			; handle from open to bx
 35885                                  	;;xor	ax,ax			; get device info
 35886                                  	;;mov	ah,IOCTL ; 44h
 35887                                  	;mov	ax,(IOCTL<<8) ; 13/05/2019
 35888                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 35889                                  	;xor	ax,ax
 35890                                  	;mov	ah,44h	; IOCTL
 35891                                  	; 11/12/2022
 35892 0000339C B80044                  	mov	ax,4400h ; IOCTL<<8 
 35893                                  
 35894 0000339F CD21                    	int	21h
 35895                                  
 35896 000033A1 F6C280                  	test	dl,10000000b ; 80h
 35897 000033A4 75F3                    	jnz	short of_retn
 35898                                  
 35899 000033A6 B43E                    	mov	ah,CLOSE ; 3Eh
 35900 000033A8 CD21                    	int	21h
 35901 000033AA EBE5                    	jmp	short open_dev1
 35902                                  
 35903                                  ;----------------------------------------------------------------------------
 35904                                  
 35905                                  ; 18/12/2022
 35906                                  %if 0
 35907                                  open_file:
 35908                                  	mov	ah,OPEN	; 3Dh
 35909                                  	stc
 35910                                  	int	21h
 35911                                  	retn
 35912                                  %endif
 35913                                  
 35914                                  ;----------------------------------------------------------------------------
 35915                                  
 35916                                  ; test int24. return back to dos with the fake user response of "fail"
 35917                                  
 35918                                  int24:
 35919 000033AC B003                    	mov	al,3			; fail the system call
 35920 000033AE CF                      	iret				; return back to dos.
 35921                                  
 35922                                  ; 19/04/2019 - Retro DOS v4.0
 35923                                  
 35924                                  ;----------------------------------------------------------------------------
 35925                                  ; DATA
 35926                                  ;----------------------------------------------------------------------------
 35927                                  
 35928                                  ;include copyrigh.inc			; copyright statement
 35929                                  
 35930                                  ; MSDOS 6.21 IO.SYS - SYSINIT:4FA3h
 35931                                  
 35932                                  ;MsDosVersion6Copyr:
 35933                                  ;	db	'MS DOS Version 6 (C)Copyright 1981-1993 Microsoft Corp '
 35934                                  ;	db	'Licensed Material - Property of Microsoft All rights reserved '
 35935                                  
 35936                                  ; 22/10/2022
 35937                                  ; MSDOS 5.0 IO.SYS - SYSINIT:378Ch
 35938                                  
 35939                                  ; 04/01/2023
 35940                                  %if 0
 35941                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 35942                                  MsDosVersion5Copyr:
 35943                                  	db	'MS DOS Version 5.00 (C)Copyright 1981-1991 Microsoft Corp '
 35944                                  	db	'Licensed Material - Property of Microsoft All rights reserved '
 35945                                  %endif
 35946                                  
 35947                                  ; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 35948                                  ; 22/10/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 35949                                  ; 20/04/2019 - Retro DOS v4.0
 35950                                  ;BOOTMES:
 35951                                  ;	db      13
 35952                                  ;	db      10
 35953                                  ;	db      "MS-DOS version "
 35954                                  ;	db      MAJOR_VERSION + "0"
 35955                                  ;	db      "."
 35956                                  ;	db      (MINOR_VERSION / 10) + "0"
 35957                                  ;	db      (MINOR_VERSION % 10) + "0"
 35958                                  ;	db      13,10
 35959                                  ;	;db	"Copyright 1981-1993 Microsoft Corp.",13,10,"$"
 35960                                  ;	; 22/10/2022
 35961                                  ;	db	"Copyright 1981-1991 Microsoft Corp.",13,10,"$"
 35962                                  ;	;
 35963                                  ;	db	0
 35964                                  
 35965                                  	; 12/12/2022
 35966 000033AF 00                      	db	0
 35967                                  ; 12/12/2022
 35968                                  BOOTMES:
 35969 000033B0 0D0A                    	db	13,10
 35970 000033B2 526574726F20444F53-     	db 	"Retro DOS v4.0 (Modified MSDOS 5.0) "
 35970 000033BB 2076342E3020284D6F-
 35970 000033C4 646966696564204D53-
 35970 000033CD 444F5320352E302920 
 35971 000033D6 0D0A                    	db	13,10
 35972                                  	;db	"by Erdogan Tan [2022] "
 35973 000033D8 6279204572646F6761-     	db	"by Erdogan Tan [2023] " ; 04/01/2023
 35973 000033E1 6E2054616E205B3230-
 35973 000033EA 32335D20           
 35974 000033EE 0D0A                    	db	13,10
 35975 000033F0 0D0A2400                	db	13,10,"$",0
 35976                                  
 35977 000033F4 4E554C00                nuldev:	db	"NUL",0
 35978 000033F8 434F4E00                condev:	db	"CON",0
 35979 000033FC 41555800                auxdev:	db	"AUX",0
 35980 00003400 50524E00                prndev:	db	"PRN",0
 35981                                  
 35982                                  ;IFDEF	CONFIGPROC
 35983 00003404 5C434F4E4649472E53-     config:	db	"\CONFIG.SYS",0
 35983 0000340D 595300             
 35984                                  
 35985 00003410 413A                    cntry_drv:  db	"A:"
 35986 00003412 5C                      cntry_root: db	"\"
 35987 00003413 434F554E5452592E53-     cntry_path: db	"COUNTRY.SYS",0
 35987 0000341C 595300             
 35988                                  	    ;db	52 dup (0)
 35989 0000341F 00<rep 34h>             	    times 52 db 0	
 35990                                  
 35991                                  country_file_signature:
 35992 00003453 FF434F554E545259        	db	0FFh,'COUNTRY'
 35993                                  
 35994                                  cntrycodepage_id: 
 35995 0000345B 0000                    	dw	0 	
 35996                                  
 35997                                  ;ENDIF ; CONFIGPROC
 35998                                  
 35999                                  ; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 36000                                  ;;ifdef	MULTI_CONFIG
 36001                                  ;newcmd:  db	0			; non-zero if non-std shell specified
 36002                                  ;tmplate: db	64                      ; must precede commnd
 36003                                  ;;endif
 36004                                  	; 02/11/2022
 36005                                  	;db	12                      ; size of commnd line (excl. null)
 36006                                  
 36007 0000345D 5C434F4D4D414E442E-     commnd:	db	"\COMMAND.COM",0
 36007 00003466 434F4D00           
 36008                                  	;db	51 dup (0)
 36009 0000346A 00<rep 33h>             	times	51 db 0
 36010                                  ;endif
 36011                                  
 36012                                  ; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 36013                                  ;;ifdef	MULTI_CONFIG
 36014                                  ;commnd2: db 	"\COMMAND.COM",0	; alternate commands to exec,
 36015                                  ;	 db	2,"/P",0 		; followed by their respective alternate
 36016                                  ;commnd3: db	"\MSDOS\COMMAND.COM",0	; command lines
 36017                                  ;	 db	11,"A:\MSDOS /P",0 	;(the drive letter are dynamically replaced)
 36018                                  ;commnd4: db	"\DOS\COMMAND.COM",0 	;
 36019                                  ;	 db	9,"A:\DOS /P",0		;
 36020                                  ;def_swchr:	
 36021                                  ;	 db	0			; default switchchar (referenced as command_line-1)
 36022                                  ;;endif
 36023                                  
 36024                                  	; 30/10/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 36025                                  ;command_line:
 36026                                  ;	db	2,"/P"			; default command.com args
 36027                                  ;	;db	125 dup (0)
 36028                                  ;	times	125 db 0
 36029                                  
 36030                                  pathstring:
 36031                                  	;db	64 dup (0)
 36032 0000349D 00<rep 40h>             	times	64 db 0
 36033                                  
 36034                                  ; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 36035                                  %if 0
 36036                                  
 36037                                  dae_flag:
 36038                                  	db	0 ; MSDOS 6.21 IO.SYS - SYSINIT:51D2h 	
 36039                                  
 36040                                  ;ifdef	MULTI_CONFIG
 36041                                  
 36042                                  MAX_MULTI_CONFIG equ 10
 36043                                  
 36044                                  ;   Beware of byte pairs accessed as words (see all "KEEP AFTER" notes below)
 36045                                  
 36046                                  bMenuColor:	db      07h ;1Fh        ; default fgnd/bgnd color
 36047                                  bMenuPage:	db      0               ; menu video page (KEEP AFTER bMenuColor)
 36048                                  		db      5               ; video page function # (KEEP AFTER bMenuPage)
 36049                                  bLastCol:	db      0               ; ending column on status line
 36050                                  bLastRow:	db      24              ; row # of status line (KEEP AFTER bLastCol)
 36051                                  bDisableUI:	db      0               ; 1=disable clean/interactive
 36052                                                                          ; 2=disable default 2-second delay
 36053                                  bCRTPage:	db      0               ; value saved from BIOS data area
 36054                                  wCRTStart:	dw      0               ; value saved from BIOS data area
 36055                                  bQueryOpt:	db      0               ; 0=off, 1=prompt all, 2=prompt none, 4=skip all
 36056                                  bDefBlock:	db      1               ; default block #
 36057                                  bMaxBlock:	db      0               ; maxmimum block #
 36058                                  offDefBlock:	dw      0               ; offset of name of default block (if any)
 36059                                  secTimeOut:	db      -1              ; # of seconds for timeout (-1 == indefinite)
 36060                                  secElapsed:	db      0               ; # of seconds elapsed so far (KEEP AFTER secTimeOut)
 36061                                  abBlockType:	times MAX_MULTI_CONFIG+1 db 0 ; array of block types
 36062                                  aoffBlockName:	times MAX_MULTI_CONFIG+1 dw 0 ; array of offsets of block names
 36063                                  aoffBlockDesc:	times MAX_MULTI_CONFIG+1 dw 0 ; array of offsets of block descriptions
 36064                                  
 36065                                  szBoot:		db      "CONFIG=",0
 36066                                  szMenu:		db      "MENU",0
 36067                                  szCommon:	db      "COMMON",0
 36068                                  
 36069                                  ;endif	;MULTI_CONFIG
 36070                                  
 36071                                  comtab:	 ; label byte
 36072                                  
 36073                                  ;            cmd len    command         cmd code
 36074                                  ;            -------    -------         --------
 36075                                  
 36076                                  ;ifdef MULTI_CONFIG
 36077                                          db      1,      "[",            CONFIG_BEGIN
 36078                                  ;endif
 36079                                          db      5,      "BREAK",        CONFIG_BREAK
 36080                                          db      7,      "BUFFERS",      CONFIG_BUFFERS
 36081                                          db      7,      "COMMENT",      CONFIG_COMMENT
 36082                                          db      7,      "COUNTRY",      CONFIG_COUNTRY
 36083                                          db      6,      "DEVICE",       CONFIG_DEVICE
 36084                                          db      10,     "DEVICEHIGH",   CONFIG_DEVICEHIGH
 36085                                          db      3,      "DOS",          CONFIG_DOS
 36086                                          db      8,      "DRIVPARM",     CONFIG_DRIVPARM
 36087                                          db      4,      "FCBS",         CONFIG_FCBS
 36088                                          db      5,      "FILES",        CONFIG_FILES
 36089                                  ;ifdef MULTI_CONFIG
 36090                                          db      7,      "INCLUDE",      CONFIG_INCLUDE
 36091                                  ;endif
 36092                                          db      7,      "INSTALL",      CONFIG_INSTALL
 36093                                          db      11,     "INSTALLHIGH",  CONFIG_INSTALLHIGH
 36094                                          db      9,      "LASTDRIVE",    CONFIG_LASTDRIVE
 36095                                  ;ifdef MULTI_CONFIG
 36096                                          db      7,      "SUBMENU",      CONFIG_SUBMENU
 36097                                          db      9,      "MENUCOLOR",    CONFIG_MENUCOLOR
 36098                                          db      11,     "MENUDEFAULT",  CONFIG_MENUDEFAULT
 36099                                          db      8,      "MENUITEM",     CONFIG_MENUITEM
 36100                                  ;endif
 36101                                          db      10,     "MULTITRACK",   CONFIG_MULTITRACK
 36102                                  ;ifdef MULTI_CONFIG
 36103                                          db      7,      "NUMLOCK",      CONFIG_NUMLOCK
 36104                                  ;endif
 36105                                          db      3,      "REM",          CONFIG_REM
 36106                                  ;ifdef MULTI_CONFIG
 36107                                          db      3,      "SET",          CONFIG_SET
 36108                                  ;endif
 36109                                          db      5,      "SHELL",        CONFIG_SHELL
 36110                                  ;if    STACKSW
 36111                                          db      6,      "STACKS",       CONFIG_STACKS
 36112                                  ;endif
 36113                                          db      8,      "SWITCHES",     CONFIG_SWITCHES
 36114                                  	db	0
 36115                                  %endif
 36116                                  
 36117                                  comtab:
 36118                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 36119                                  	; (SYSINIT:38EDh)
 36120 000034DD 074255464645525342      	db      7,      "BUFFERS",      CONFIG_BUFFERS
 36121 000034E6 05425245414B43          	db      5,      "BREAK",        CONFIG_BREAK
 36122 000034ED 0644455649434544        	db      6,      "DEVICE",       CONFIG_DEVICE
 36123 000034F5 0A4445564943454849-     	db      10,     "DEVICEHIGH",   CONFIG_DEVICEHIGH
 36123 000034FE 474855             
 36124 00003501 0546494C455346          	db      5,      "FILES",        CONFIG_FILES
 36125 00003508 044643425358            	db      4,      "FCBS",         CONFIG_FCBS
 36126 0000350E 094C41535444524956-     	db      9,      "LASTDRIVE",    CONFIG_LASTDRIVE
 36126 00003517 454C               
 36127 00003519 0A4D554C5449545241-     	db      10,     "MULTITRACK",   CONFIG_MULTITRACK
 36127 00003522 434B4D             
 36128 00003525 08445249565041524D-     	db      8,      "DRIVPARM",     CONFIG_DRIVPARM
 36128 0000352E 50                 
 36129 0000352F 06535441434B534B        	db      6,      "STACKS",       CONFIG_STACKS
 36130 00003537 07434F554E54525951      	db      7,      "COUNTRY",      CONFIG_COUNTRY
 36131 00003540 055348454C4C53          	db      5,      "SHELL",        CONFIG_SHELL
 36132 00003547 07494E5354414C4C49      	db      7,      "INSTALL",      CONFIG_INSTALL
 36133 00003550 07434F4D4D454E5459      	db      7,      "COMMENT",      CONFIG_COMMENT
 36134 00003559 0352454D30              	db      3,      "REM",          CONFIG_REM
 36135 0000355E 085357495443484553-     	db      8,      "SWITCHES",     CONFIG_SWITCHES
 36135 00003567 31                 
 36136 00003568 03444F5348              	db      3,      "DOS",          CONFIG_DOS
 36137 0000356D 00                      	db	0
 36138                                  
 36139                                  deviceparameters:	
 36140                                  	; A_DEVICEPARAMETERS <0,dev_3inch720kb,0,80>
 36141                                  devp.specialfunc:	; deviceparameters +
 36142 0000356E 00                      	db	0	; A_DEVICEPARAMETERS.DP_SPECIALFUNCTIONS
 36143                                  devp.devtype:
 36144 0000356F 02                      	db	2	; A_DEVICEPARAMETERS.DP_DEVICETYPE
 36145                                  devp.devattr:
 36146 00003570 0000                    	dw	0	; A_DEVICEPARAMETERS.DP_DEVICEATTRIBUTES
 36147                                  devp.cylinders:
 36148 00003572 5000                    	dw	80	; A_DEVICEPARAMETERS.DP_CYLINDERS
 36149                                  
 36150 00003574 00<rep 11Eh>            	times	286	db 0
 36151                                  	
 36152 00003692 0200                    hlim:	dw	2
 36153 00003694 0900                    slim:	dw	9
 36154                                  
 36155 00003696 00                      drive:	db	0
 36156                                  
 36157                                  switches:
 36158 00003697 0000                    	dw	0
 36159                                  
 36160                                  ; the following are the recommended bpbs for the media that
 36161                                  ; we know of so far.
 36162                                  
 36163                                  ; 02/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 36164                                  ; MSDOS 5.0 IO.SYS - SYSINIT:3AA9h
 36165                                  
 36166                                  ; 48 tpi diskettes
 36167                                  
 36168 00003699 0002                    bpb48t	dw	512
 36169 0000369B 02                      	db	2
 36170 0000369C 0100                    	dw	1
 36171 0000369E 02                      	db	2
 36172 0000369F 7000                    	dw	112
 36173 000036A1 D002                    	dw	2*9*40 ; 720
 36174 000036A3 FD                      	db	0FDh
 36175 000036A4 0200                    	dw	2
 36176 000036A6 0900                    	dw	9
 36177 000036A8 0200                    	dw	2
 36178 000036AA 00000000                	dd	0
 36179 000036AE 00000000                        dd      0
 36180                                  
 36181                                  ; 96tpi diskettes
 36182                                  
 36183 000036B2 0002                    bpb96t:	dw	512
 36184 000036B4 01                      	db	1
 36185 000036B5 0100                    	dw	1
 36186 000036B7 02                      	db	2
 36187 000036B8 E000                    	dw	224
 36188 000036BA 6009                    	dw	2*15*80 ; 2400
 36189 000036BC F9                      	db	0F9h
 36190 000036BD 0700                    	dw	7
 36191 000036BF 0F00                    	dw	15
 36192 000036C1 0200                    	dw	2
 36193 000036C3 00000000                	dd	0
 36194 000036C7 00000000                        dd      0
 36195                                  
 36196                                  ; 3 1/2 inch diskette bpb
 36197                                  
 36198 000036CB 0002                    bpb35:	dw	512
 36199 000036CD 02                      	db	2
 36200 000036CE 0100                    	dw	1
 36201 000036D0 02                      	db	2
 36202 000036D1 7000                    	dw	112
 36203 000036D3 A005                    	dw	2*9*80 ; 1440
 36204 000036D5 F9                      	db	0F9h
 36205 000036D6 0300                    	dw	3
 36206 000036D8 0900                    	dw	9
 36207 000036DA 0200                    	dw	2
 36208 000036DC 00000000                	dd	0
 36209 000036E0 00000000                        dd      0
 36210                                        
 36211 000036E4 0002                    bpb35h:	dw	512
 36212 000036E6 01                      	db	1
 36213 000036E7 0100                    	dw	1
 36214 000036E9 02                      	db	2
 36215 000036EA E000                    	dw	224
 36216 000036EC 400B                    	dw	2*18*80 ; 2880
 36217 000036EE F0                      	db	0F0h
 36218 000036EF 0900                    	dw	9
 36219 000036F1 1200                    	dw	18
 36220 000036F3 0200                    	dw	2
 36221 000036F5 00000000                	dd	0
 36222 000036F9 00000000                        dd      0
 36223                                  
 36224                                  ; m037 - BEGIN
 36225                                  
 36226 000036FD 0002                    bpb288:	dw	512
 36227 000036FF 02                      	db	2
 36228 00003700 0100                    	dw	1
 36229 00003702 02                      	db	2
 36230 00003703 F000                    	dw	240
 36231 00003705 8016                    	dw	2*36*80 ; 5760
 36232 00003707 F0                      	db	0F0h
 36233 00003708 0900                    	dw	9
 36234 0000370A 2400                    	dw	36
 36235 0000370C 0200                    	dw	2
 36236 0000370E 00000000                	dd	0
 36237 00003712 00000000                        dd      0
 36238                                  
 36239                                  ; m037 - END
 36240                                  
 36241                                  ; 12/05/2019
 36242                                  
 36243                                  align 2
 36244                                  
 36245                                  ; 02/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 36246                                  ; MSDOS 5.0 IO.SYS - SYSINIT:3B26h
 36247                                  
 36248 00003716 [9936]                  bpbtable:   dw	    bpb48t		; 48tpi drives
 36249 00003718 [B236]                  	    dw	    bpb96t		; 96tpi drives
 36250 0000371A [CB36]                  	    dw	    bpb35		; 3.5" drives
 36251                                  ; the following are not supported, so default to 3.5" media layout
 36252 0000371C [CB36]                  	    dw	    bpb35		; not used - 8" drives
 36253 0000371E [CB36]                  	    dw	    bpb35		; not used - 8" drives
 36254 00003720 [CB36]                  	    dw	    bpb35		; not used - hard files
 36255 00003722 [CB36]                  	    dw	    bpb35		; not used - tape drives
 36256 00003724 [E436]                  	    dw	    bpb35h		; 3-1/2" 1.44mb drive
 36257 00003726 [CB36]                  	    dw	    bpb35		; ERIMO				m037
 36258 00003728 [FD36]                  	    dw	    bpb288		; 2.88 MB diskette drives	m037
 36259                                  
 36260                                  switchlist: 
 36261 0000372A 08464853544449434E      	db	8,"FHSTDICN"	     ; preserve the positions of n and c.
 36262                                  
 36263                                  ;----------------------------------------------------------------------------
 36264                                  ; Messages
 36265                                  ;----------------------------------------------------------------------------
 36266                                  
 36267                                  ; 19/04/2019 - Retro DOS v4.0
 36268                                  
 36269                                  ; MSDOS 6.21 IO.SYS - SYSINIT:54D1h
 36270                                  
 36271 00003733 00                      	db 	0
 36272                                  
 36273                                  ; 02/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 36274                                  ; MSDOS 5.0 IO.SYS - SYSINIT:3B44h
 36275                                  
 36276                                  badopm:
 36277 00003734 0D0A                    	db	0Dh,0Ah 
 36278 00003736 556E7265636F676E69-     	db	'Unrecognized command in CONFIG.SYS'
 36278 0000373F 7A656420636F6D6D61-
 36278 00003748 6E6420696E20434F4E-
 36278 00003751 4649472E535953     
 36279                                  crlfm:
 36280 00003758 0D0A24                  	db	0Dh,0Ah,'$'
 36281                                  badparm:
 36282 0000375B 0D0A                    	db	0Dh,0Ah
 36283 0000375D 42616420636F6D6D61-     	db	'Bad command or parameters - $'
 36283 00003766 6E64206F7220706172-
 36283 0000376F 616D6574657273202D-
 36283 00003778 2024               
 36284                                  badsiz_pre:
 36285 0000377A 0D0A                    	db	0Dh,0Ah
 36286 0000377C 536563746F72207369-     	db	'Sector size too large in file $'
 36286 00003785 7A6520746F6F206C61-
 36286 0000378E 72676520696E206669-
 36286 00003797 6C652024           
 36287                                  badld_pre:
 36288 0000379B 0D0A                    	db	0Dh,0Ah
 36289 0000379D 426164206F72206D69-     	db	'Bad or missing $'
 36289 000037A6 7373696E672024     
 36290                                  badcom:
 36291 000037AD 436F6D6D616E642049-     	db	'Command Interpreter',0
 36291 000037B6 6E7465727072657465-
 36291 000037BF 7200               
 36292                                  badcountry:
 36293 000037C1 0D0A                    	db	0Dh,0Ah
 36294 000037C3 496E76616C69642063-     	db	'Invalid country code or code page',0Dh,0Ah,'$'
 36294 000037CC 6F756E74727920636F-
 36294 000037D5 6465206F7220636F64-
 36294 000037DE 6520706167650D0A24 
 36295                                  badcountrycom:
 36296 000037E7 0D0A                    	db	0Dh,0Ah
 36297 000037E9 4572726F7220696E20-     	db	'Error in COUNTRY command',0Dh,0Ah,'$'
 36297 000037F2 434F554E5452592063-
 36297 000037FB 6F6D6D616E640D0A24 
 36298                                  insufmemory:
 36299 00003804 0D0A                    	db	0Dh,0Ah
 36300 00003806 496E73756666696369-     	db	'Insufficient memory for COUNTRY.SYS file',0Dh,0Ah,'$'
 36300 0000380F 656E74206D656D6F72-
 36300 00003818 7920666F7220434F55-
 36300 00003821 4E5452592E53595320-
 36300 0000382A 66696C650D0A24     
 36301                                  badmem:
 36302 00003831 0D0A                    	db	0Dh,0Ah
 36303 00003833 436F6E666967757261-     	db	'Configuration too large for memory',0Dh,0Ah,'$'
 36303 0000383C 74696F6E20746F6F20-
 36303 00003845 6C6172676520666F72-
 36303 0000384E 206D656D6F72790D0A-
 36303 00003857 24                 
 36304                                  badblock:
 36305 00003858 0D0A                    	db	0Dh,0Ah
 36306 0000385A 546F6F206D616E7920-     	db	'Too many block devices',0Dh,0Ah,'$'
 36306 00003863 626C6F636B20646576-
 36306 0000386C 696365730D0A24     
 36307                                  badstack:
 36308 00003873 0D0A                    	db	0Dh,0Ah
 36309 00003875 496E76616C69642053-     	db	'Invalid STACK parameters',0Dh,0Ah,'$'
 36309 0000387E 5441434B2070617261-
 36309 00003887 6D65746572730D0A24 
 36310                                  	; 18/12/2022
 36311                                  ;badorder:
 36312                                  	;db	0Dh,0Ah
 36313                                  	;db	'Incorrect order in CONFIG.SYS line $'
 36314                                  errorcmd:
 36315 00003890 4572726F7220696E20-     	db	'Error in CONFIG.SYS line $'
 36315 00003899 434F4E4649472E5359-
 36315 000038A2 53206C696E652024   
 36316                                  
 36317                                  ; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 36318                                  %if 0
 36319                                  
 36320                                  OnOff:	db	'ON'
 36321                                  OnOff2:	db	'OFF'
 36322                                  
 36323                                  StartMsg:
 36324                                  	db	'Starting MS-DOS...',0Dh,0Ah
 36325                                  	db	0Ah,0
 36326                                  _$PauseMsg:
 36327                                  	db	'Press any key to continue . . .',0Dh,0Ah,'$'
 36328                                  _$CleanMsg:
 36329                                  	db	'MS-DOS is bypassing your CONFIG.SYS and AUTOEXEC.BAT files.',0Dh,0Ah,'$'
 36330                                  _$InterMsg:
 36331                                  	db	'MS-DOS will prompt you to confirm each CONFIG.SYS command.',0Dh,0Ah,'$'
 36332                                  _$MenuHeader:
 36333                                  	db	0Dh,0Ah
 36334                                  	db	'  MS-DOS 6.2 Startup Menu',0Dh,0Ah
 36335                                  	db	'  =======================',0Dh,0Ah,'$'
 36336                                  _$MenuPrmpt:
 36337                                  	db	'  Enter a choice: $'
 36338                                  _$StatusLine:
 36339                                  	db	'F5=Bypass startup files F8=Confirm each line of CONFIG.SYS'
 36340                                  	db	'and AUTOEXEC.BAT [ ]$'
 36341                                  _$InterPrmpt:
 36342                                  	db	' [Y,N]?$'
 36343                                  _$YES:	db	'YES$'
 36344                                  _$NO:	db	'NO $'
 36345                                  _$TimeOut:
 36346                                  	db	'Time remaining: $'
 36347                                  badcomprmpt:
 36348                                  	db	'Enter correct name of Command Interpreter (eg, C:\COMMAND.COM)'
 36349                                  	db	0Dh,0Ah,'$'
 36350                                  _$AutoPrmpt:
 36351                                  	db	'Process AUTOEXEC.BAT [Y,N]?$'
 36352                                  
 36353                                  %endif
 36354                                  
 36355                                  ; 02/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 IO.SYS)
 36356                                  ; MSDOS 5.0 IO.SYS - SYSINIT:3CE0h
 36357                                  
 36358                                  TooManyDrivesMsg:
 36359 000038AA 5741524E494E472120-     	db	'WARNING! Logical drives past Z: exist and will be ignored',0Dh,0Ah,'$'
 36359 000038B3 4C6F676963616C2064-
 36359 000038BC 726976657320706173-
 36359 000038C5 74205A3A2065786973-
 36359 000038CE 7420616E642077696C-
 36359 000038D7 6C2062652069676E6F-
 36359 000038E0 7265640D0A24       
 36360                                  
 36361                                  ;MSDOS 6.21 IO.SYS - SYSINIT:587Ch
 36362                                  	;db	'Wrong DBLSPACE.BIN version',0Dh,0Ah,'$'
 36363                                  	;db	7 dup(0)
 36364                                  
 36365                                  	;times	7 db 0
 36366                                  	; 02/11/2022 (MSDOS 5.0 IO.SYS SYSINIT compatibility)
 36367                                  ;MSDOS 5.0 IO.SYS - SYSINIT:3D1Ch
 36368                                  	; 09/12/2022
 36369                                  	;times	4 db 0
 36370                                  
 36371                                  ;----------------------------------------------------------------------------
 36372                                  		; 09/12/2022
 36373                                  		;db 0
 36374                                  
 36375                                  number3div	equ ($-SYSINIT$)
 36376                                  number3mod	equ (number3div % 16)
 36377                                  
 36378                                  %if number3mod>0 & number3mod<16
 36379 000038E6 00<rep Ah>              		times (16-number3mod) db 0
 36380                                  %endif
 36381                                  
 36382                                  ;---------------------------------------------------------------------------- 
 36383                                  ; 09/12/2022 - MSDOS 5.0 IO.SYS:3D20h ;;; SI_end = 3D20h for MSDOS 5.0 IO.SYS 
 36384                                  ;---------------------------------------------------------------------------- 
 36385                                  
 36386                                  ;MSDOS 6.21 IO.SYS - SYSINIT:5899h
 36387                                  
 36388                                  ;----------------------------------------------------------------------------
 36389                                  ; 20/04/2019 - Retro DOS v4.0
 36390                                  
 36391                                  ; 09/12/2022
 36392                                  ;
 36393                                  ;bss_start:
 36394                                  ;
 36395                                  ;ABSOLUTE bss_start
 36396                                  ;
 36397                                  ;alignb 16
 36398                                  
 36399                                  SI_end:  ; SI_end equ $
 36400                                  
 36401                                  ;----------------------------------------------------------------------------
 36402                                  
 36403                                  ;sysinitseg	ends
 36404                                  
 36405                                  ; ***************************************************************************
 36406                                  
 36407                                  ; 09/12/2022 - MSDOS 5.0 IO.SYS:3D20h ;;; SI_end = 3D20h for MSDOS 5.0 IO.SYS
 36408                                  
 36409                                  SYSINITSIZE	equ SI_end - SYSINIT$
 36410                                  DOSLOADSEG	equ SYSINITSEG+((SYSINITSIZE+15)/16)
 36411                                  
 36412                                  ;----------------------------------------------------------------------------
 36413                                  ; End of Retro DOS v4.0 (MSDOS 5.0) IO.SYS source by Erdogan Tan - 09/12/2022
 36414                                  ;----------------------------------------------------------------------------
 36415                                  
 36416                                  ; 21/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0)
 36417                                  ;----------------------------------------------------------------------------
 36418                                  ;----------------------------------------------------------------------------
 36419                                  
 36420                                  ; ----------------------------------------------------------------------------
 36421                                  ; START OF MSDOS 6.0 -IBMDOS.COM- KERNEL CODE (MSDOS.SYS) -will be relocated-
 36422                                  ; ----------------------------------------------------------------------------
 36423                                  ; 18/03/2019 - Retro DOS v4.0 
 36424                                  ; 11/06/2018 - Retro DOS v3.0 
 36425                                  
 36426                                  MSDOS_BIN_OFFSET: ; this offset must be paragraph aligned
 36427                                  		;; 28/06/2019 ('msdos6.s') 
 36428                                  		;incbin	'MSDOS6.BIN' ; Retro DOS 4.0 - MSDOS 6.21 KERNEL
 36429                                  		
 36430                                  		; 28/12/2022 (BugFix)
 36431                                  		; 22/12/2022
 36432                                  		; 21/12/2022 ('msdos5.s')
 36433 000038F0 <bin 90F0h>             		incbin 'MSDOS5.BIN'  ; Retro DOS 4.0 - MSDOS 5.0+ KERNEL
 36434                                  	
 36435                                  msdos_bin_size equ $ - MSDOS_BIN_OFFSET
 36436                                  
 36437                                  align 2
 36438                                  
 36439                                  ; 21/12/2022
 36440                                  ;END_OF_KERNEL:
 36441                                  END_OF_KERNEL equ $
 36442                                  
 36443                                  ;=============================================================================
 36444                                  ;	END
 36445                                  ;=============================================================================
 36446                                  ; Retro DOS v4.0 by Erdogan Tan (Redevelopment of MSDOS 5.0 KERNEL via NASM)
 36447                                  ; ------------------------------
 36448                                  ; DECEMBER 2022, ISTANBUL - TURKIYE.
