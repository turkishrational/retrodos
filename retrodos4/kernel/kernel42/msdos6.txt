     1                                  ;*****************************************************************************
     2                                  ; MSDOS6.BIN (MSDOS 6.0 Kernel) - RETRO DOS v4.0 by ERDOGAN TAN - 03/11/2022
     3                                  ; ----------------------------------------------------------------------------
     4                                  ; Last Update: 30/12/2022 - Retro DOS v4.2 (Prev: 29/12/2022, Retro DOS v4.1)
     5                                  ; ----------------------------------------------------------------------------
     6                                  ; Beginning: 07/07/2018 (Retro DOS 3.0), 22/04/2019 (Retro DOS 4.0)
     7                                  ; ----------------------------------------------------------------------------
     8                                  ; Assembler: NASM version 2.15 (2.11)  
     9                                  ; ----------------------------------------------------------------------------
    10                                  ;	   ((nasm msdos6.s -l msdos6.lst -o MSDOS6.BIN -Z error.txt)) 	
    11                                  ; ----------------------------------------------------------------------------
    12                                  ; Modified from 'msdos3.s' file of Retro DOS 3.0 source code (10/09/2018)
    13                                  ; ----------------------------------------------------------------------------
    14                                  ; Derived from 'msdos2.s' file of Retro DOS 2.0 source code (04/05/2018)
    15                                  ; ----------------------------------------------------------------------------
    16                                  ; Derived from 'MSCODE.ASM' file of MSDOS 2.0 (IBM PCDOS v2.0) source code
    17                                  ; by Microsoft, 25/08/1983 (DOSLINK - 'MSDOS.ASM')
    18                                  ;*****************************************************************************
    19                                  ; main file: 'retrodos4.s'
    20                                  ; incbin 'MSDOS5.BIN'
    21                                  ;=============================================================================
    22                                  ; Modified from 'msdos6.s' (modified MSDOS 6.21 kernel src as Retro DOS v4.0)
    23                                  ; 28/07/2019  /// Retro DOS v4.0 (2022) -> Modified MSDOS 5.0 IO.SYS+MSDOS.SYS
    24                                  ;=============================================================================
    25                                  
    26                                  ; 30/12/2022 - Retro DOS v4.2 Kernel ('msdos6.s')
    27                                  ; Modified from 'msdos5.s' (29/12/2022, Retro DOS v4.1 Kernel) file
    28                                  ; as below:
    29                                  ;	1) MS-DOS version has been changed to 6.22 (It was 5.0) 
    30                                  ;	2) Retro DOS version has been changed to 4.2 (It was 4.1)
    31                                  ; (The content has not been changed except kernel version because the kernel
    32                                  ;  code is already compatible with MSDOS 6.x and it is optimized before.
    33                                  ;	(But IO.SYS part of the kernel is not same with Retro DOS v4.1 code.)	
    34                                  
    35                                  ; ----------------------------------------------------------------------------
    36                                  
    37                                  ; 03/11/2022 - Erdogan Tan (Istanbul)
    38                                  
    39                                  ; Note:	This code is a part of Retro DOS 4.0 kernel source code
    40                                  ;	(as included binary, 'MSDOS5.BIN') 
    41                                  ;	Equivalent of MSDOS 5.0 MSDOS.SYS kernel file 
    42                                  ;	
    43                                  ;	((MSDOS 6.0 kernel source code has been modified by using disassembled
    44                                  ;	MSDOS 5.0 MSDOS.SYS)) -- Disassembler: HEX-RAYS IDA Pro --
    45                                  ;	((Disassembly -Reverse engineering- reference: MSDOS 6.0 kernel src))
    46                                        
    47                                  ;------ Retro DOS v2 (v3) boot sector loads RETRODOS.SYS (MSDOS.SYS)
    48                                  ;	at 1000h:0000h and loader (initialization) part of RETRODOS kernel
    49                                  ;	moves IO.SYS (DOSBIOSCODE & DOSBIOSDATA, 'IOSYS5.BIN') to 70h:0000h.
    50                                  ;	Then SYSINIT code to the next segment (4D6h for current version)..
    51                                  ;	SYSINIT code relocates itself and DOSBIOSCODE and MSDOS.SYS
    52                                  ;	(MSDOS5.BIN) according to request/setting in 'config.sys' file.
    53                                  
    54                                  ;=============================================================================
    55                                  ; Most of comments in this file are from the original MSDOS 6.0 source code
    56                                  ;-----------------------------------------------------------------------------
    57                                  
    58                                  ; MSDOS 6.0 Kernel source files:
    59                                  ;	MSDATA.ASM, 
    60                                  ; 		(MSHEAD.ASM, MSCONST.ASM,CONST2.ASM, MS_DATA.ASM,
    61                                  ;		DOSTAB.ASM, LMSTUB.ASM, WPATCH.INC, MPATCH.ASM)
    62                                  ;	MSTABLE.ASM, MSCODE.ASM, MSDOSME.ASM (DOSMES.INC), TIME.ASM,
    63                                  ;	GETSET.ASM, PARSE.ASM, MISC.ASM, MISC2.ASM, CRIT.ASM, CPMIO.ASM,
    64                                  ;	CPMIO2.ASM, FCBIO.ASM, FCBIO2.ASM, SEARCH.ASM, PATH.ASM, IOCTL.ASM,
    65                                  ;	DELETE.ASM, RENAME.ASM, FINFO.ASM, DUP.ASM, CREATE.ASM, OPEN.ASM,
    66                                  ;	DINFO.ASM, ISEARCH.ASM, BUF.ASM, ABORT.ASM,CLOSE.ASM, DIRCALL.ASM,
    67                                  ;	DISK.ASM, DISK2.ASM, DISK3.ASM, DIR.ASM, DIR2.ASM, DEV.ASM,
    68                                  ;	MKNODE.ASM, ROM.ASM, FCB.ASM, MSCTRLC.ASM, FAT.ASM, MSPROC.ASM
    69                                  ;	ALLOC.ASM, SRVCALL.ASM, UTIL.ASM, MACRO.ASM, MACRO2.ASM, HANDLE.ASM
    70                                  ;	FILE.ASM, LOCK.ASM, ROMFIND.ASM, SHARE.ASM, MSINIT.ASM, ORIGIN.ASM
    71                                  ;
    72                                  ; MSDOS 2.0 Kernel source files:
    73                                  ; 	MSDOS.ASM (STDSW.ASM + MSHEAD.ASM + MSDATA.ASM)
    74                                  ;	MSCODE.ASM
    75                                  ;	DOSMES.ASM ... STDIO.ASM, TIME.ASM, XENIX.ASM, XENIX2.ASM
    76                                  
    77                                  ;============================================================================
    78                                  ; DOSLINK
    79                                  ;============================================================================
    80                                  ;msdos mscode dosmes misc getset dircall alloc dev dir +
    81                                  ;disk fat rom stdbuf stdcall stdctrlc stdfcb stdproc +
    82                                  ;stdio time xenix xenix2
    83                                  
    84                                  ;============================================================================
    85                                  ; This MSDOS source code is verified & modified by using IDA Pro Disassembler
    86                                  ; output in TASM syntax (July 2018 -> NASM syntax) [ IBMDOS.COM, 17/03/1987 ]
    87                                  ;============================================================================
    88                                  ;
    89                                  ; ###########################################################################
    90                                  ; #	This file is generated by The Interactive Disassembler (IDA)	    #
    91                                  ; #	Copyright (c) 2010 by Hex-Rays SA, <support@hex-rays.com>	    #
    92                                  ; #			 Licensed to: Freeware version			    #
    93                                  ; ###########################################################################
    94                                  ;
    95                                  ; Input	MD5   :	75959BC417C19135B982F7959EE9C92A
    96                                  
    97                                  ; ---------------------------------------------------------------------------
    98                                  ; File Name   :	C:\Documents and Settings\Erdoðan Tan\Desktop\MSDOS621.BIN
    99                                  ; Format      :	Binary file
   100                                  ;============================================================================
   101                                  ; MSDOS621.BIN = MSDOS.SYS, 13/02/1994, 38138 bytes (MSDOS 6.21 kernel) 2019
   102                                  ;----------------------------------------------------------------------------
   103                                  ; MSDOS5.BIN = MSDOS.SYS, 11/11/1991, 37394 bytes (MSDOS 5.0 kernel) 2022
   104                                  
   105                                  ;============================================================================
   106                                  ; MSDOS.ASM
   107                                  ;============================================================================
   108                                  
   109                                  ;TITLE   Standard MSDOS
   110                                  ;NAME    MSDOS_2
   111                                  
   112                                  ; Number of disk I/O buffers
   113                                  
   114                                  ;	INCLUDE STDSW.ASM
   115                                  ;       INCLUDE MSHEAD.ASM
   116                                  ;       INCLUDE MSDATA.ASM
   117                                  
   118                                  ;	END
   119                                  
   120                                  ;============================================================================
   121                                  ; STDSW.ASM
   122                                  ;============================================================================
   123                                  
   124                                  TRUE    EQU     0FFFFH
   125                                  FALSE   EQU     ~TRUE ; NOT TRUE
   126                                  
   127                                  ; Use the switches below to produce the standard Microsoft version or the IBM
   128                                  ; version of the operating system
   129                                  ;MSVER   EQU	false
   130                                  ;IBM     EQU	true
   131                                  ;WANG    EQU	FALSE
   132                                  ;ALTVECT EQU	FALSE
   133                                  
   134                                  ; Set this switch to cause DOS to move itself to the end of memory
   135                                  ;HIGHMEM EQU     FALSE
   136                                  
   137                                  ;	IF      IBM
   138                                  ESCCH    EQU	 0			;character to begin escape seq.
   139                                  CANCEL   EQU	 27			;Cancel with escape
   140                                  TOGLINS  EQU	TRUE			;One key toggles insert mode
   141                                  TOGLPRN  EQU	TRUE			;One key toggles printer echo
   142                                  ZEROEXT  EQU	TRUE
   143                                  ;       ELSE
   144                                  ;       IF      WANG			;Are we assembling for WANG?
   145                                  ;ESCCH	 EQU	1FH			;Yes. Use 1FH for escape character
   146                                  ;       ELSE
   147                                  ;ESCCH	 EQU	1BH
   148                                  ;       ENDIF
   149                                  ;CANCEL  EQU	"X"-"@"			;Cancel with Ctrl-X
   150                                  ;TOGLINS EQU	WANG			;Separate keys for insert mode on
   151                                  					;and off if not WANG
   152                                  ;TOGLPRN EQU	FALSE			;Separate keys for printer echo on
   153                                  					;and off
   154                                  ;ZEROEXT EQU	TRUE
   155                                  ;        ENDIF
   156                                  
   157                                  ;============================================================================
   158                                  ; MSHEAD.ASM
   159                                  ;============================================================================
   160                                  
   161                                  ;--------------------------------------------------------------
   162                                  ; TITLE   MSHEAD.ASM -- MS-DOS DEFINITIONS
   163                                  ;--------------------------------------------------------------
   164                                  
   165                                  ; MS-DOS High-performance operating system for the 8086  version 1.28
   166                                  ;        by Microsoft MSDOS development group:
   167                                  ;           Tim Paterson (Ret.)
   168                                  ;           Aaron Reynolds
   169                                  ;           Nancy Panners (Parenting)
   170                                  ;           Mark Zbikowski
   171                                  ;           Chris Peters (BIOS) (ret.)
   172                                  
   173                                  ; ****************** Revision History *************************
   174                                  ;          >> EVERY change must noted below!! <<
   175                                  ;
   176                                  ; 0.34 12/29/80 General release, updating all past customers
   177                                  ; 0.42 02/25/81 32-byte directory entries added
   178                                  ; 0.56 03/23/81 Variable record and sector sizes
   179                                  ; 0.60 03/27/81 Ctrl-C exit changes, including register save on user stack
   180                                  ; 0.74 04/15/81 Recognize I/O devices with file names
   181                                  ; 0.75 04/17/81 Improve and correct buffer handling
   182                                  ; 0.76 04/23/81 Correct directory size when not 2^N entries
   183                                  ; 0.80 04/27/81 Add console input without echo, Functions 7 & 8
   184                                  ; 1.00 04/28/81 Renumber for general release
   185                                  ; 1.01 05/12/81 Fix bug in `STORE'
   186                                  ; 1.10 07/21/81 Fatal error trapping, NUL device, hidden files, date & time,
   187                                  ;               RENAME fix, general cleanup
   188                                  ; 1.11 09/03/81 Don't set CURRENT BLOCK to 0 on open; fix SET FILE SIZE
   189                                  ; 1.12 10/09/81 Zero high half of CURRENT BLOCK after all (CP/M programs don't)
   190                                  ; 1.13 10/29/81 Fix classic "no write-through" error in buffer handling
   191                                  ; 1.20 12/31/81 Add time to FCB; separate FAT from DPT; Kill SMALLDIR; Add
   192                                  ;               FLUSH and MAPDEV calls; allow disk mapping in DSKCHG; Lots
   193                                  ;               of smaller improvements
   194                                  ; 1.21 01/06/82 HIGHMEM switch to run DOS in high memory
   195                                  ; 1.22 01/12/82 Add VERIFY system call to enable/disable verify after write
   196                                  ; 1.23 02/11/82 Add defaulting to parser; use variable escape character Don't
   197                                  ;               zero extent field in IBM version (back to 1.01!)
   198                                  ; 1.24 03/01/82 Restore fcn. 27 to 1.0 level; add fcn. 28
   199                                  ; 1.25 03/03/82 Put marker (00) at end of directory to speed searches
   200                                  ; 1.26 03/03/82 Directory buffers searched as a circular queue, current buffer
   201                                  ;               is searched first when possible to minimize I/O
   202                                  ;      03/03/82 STORE routine optimized to tack on partial sector tail as
   203                                  ;               full sector write when file is growing
   204                                  ;      03/09/82 Multiple I/O buffers
   205                                  ;      03/29/82 Two bugs:  Delete all case resets search to start at beginning
   206                                  ;               of directory (infinite loop possible otherwise), DSKRESET
   207                                  ;               must invalidate all buffers (disk and directory).
   208                                  ; 1.27 03/31/82 Installable device drivers
   209                                  ;                 Function call 47 - Get pointer to device table list
   210                                  ;                 Function call 48 - Assign CON AUX LIST
   211                                  ;      04/01/82 Spooler interrupt (INT 28) added.
   212                                  ; 1.28 04/15/82 DOS retructured to use ASSUMEs and PROC labels around system
   213                                  ;               call entries.  Most CS relative references changed to SS
   214                                  ;               relative with an eye toward putting a portion of the DOS in
   215                                  ;               ROM.  DOS source also broken into header, data and code pieces
   216                                  ;      04/15/82 GETDMA and GETVECT calls added as 24 and 32.  These calls
   217                                  ;               return the current values.
   218                                  ;      04/15/82 INDOS flag implemented for interrupt processing along with
   219                                  ;               call to return flag location (call 29)
   220                                  ;      04/15/82 Volume ID attribute added
   221                                  ;      04/17/82 Changed ABORT return to user to a long ret from a long jump to
   222                                  ;               avoid a CS relative reference.
   223                                  ;      04/17/82 Put call to STATCHK in dispatcher to catch ^C more often
   224                                  ;      04/20/82 Added INT int_upooler into loop ^S wait
   225                                  ;      04/22/82 Dynamic disk I/O buffer allocation and call to manage them
   226                                  ;               call 49.
   227                                  ;      04/23/82 Added GETDSKPTDL as call 50, similar to GETFATPT(DL), returns
   228                                  ;               address of DPB
   229                                  ;      04/29/82 Mod to WRTDEV to look for ^C or ^S at console input when
   230                                  ;               writting to console device via file I/O.  Added a console
   231                                  ;               output attribute to devices.
   232                                  ;      04/30/82 Call to en/dis able ^C check in dispatcher Call 51
   233                                  ;      04/30/82 Code to allow assignment of func 1-12 to disk files as well
   234                                  ;               as devices....  pipes, redirection now possible
   235                                  ;      04/30/82 Expanded GETLIST call to 2.0 standard
   236                                  ;      05/04/82 Change to INT int_fatal_abort callout int HARDERR.  DOS SS
   237                                  ;               (data segment) stashed in ES, INT int_fatal_abort routines must
   238                                  ;               preserve ES.  This mod so HARDERR can be ROMed.
   239                                  ; 1.29 06/01/82 Installable block and character devices as per 2.0 spec
   240                                  ;      06/04/82 Fixed Bug in CLOSE regarding call to CHKFATWRT.  It got left
   241                                  ;               out back about 1.27 or so (oops).  ARR
   242                                  ; 1.30 06/07/82 Directory sector buffering added to main DOS buffer queue
   243                                  ; 1.40 06/15/82 Tree structured directories.  XENIX Path Parser MKDIR CHDIR
   244                                  ;               RMDIR Xenix calls
   245                                  ; 1.41 06/13/82 Made GETBUFFR call PLACEBUF
   246                                  ; 1.50 06/17/82 FATs cached in buffer pool, get FAT pointer calls disappear
   247                                  ;               Frees up lots of memory.
   248                                  ; 1.51 06/24/82 BREAKDOWN modified to do EXACT one sector read/write through
   249                                  ;               system buffers
   250                                  ; 1.52 06/30/82 OPEN, CLOSE, READ, WRITE, DUP, DUP2, LSEEK implemented
   251                                  ; 1.53 07/01/82 OPEN CLOSE mod for Xenix calls, saves and gets remote dir
   252                                  ; 1.54 07/11/82 Function calls 1-12 make use of new 2.0 PDB. Init code
   253                                  ;               changed to set file handle environment.
   254                                  ; 2.00 08/01/82 Number for IBM release
   255                                  ;      01/19/83 No environ bug in EXEC
   256                                  ;      01/19/83 MS-DOS OEM INT 21 extensions (SET_OEM_HANDLER)
   257                                  ;      01/19/83 Performance bug fix in cooked write to NUL
   258                                  ;      01/27/83 Growcnt fixed for 32-bits
   259                                  ;      01/27/83 Find-first problem after create
   260                                  ; 2.01 02/17/83 International DOS
   261                                  ; 2.11 08/12/83 Dos split into several more modules for assembly on
   262                                  ;               an IBM PC
   263                                  ; 08/07/2018 - Retro DOS v3.0 by Erdogan Tan
   264                                  ; (MSHEAD.ASM, MSDOS 6.0, 1991) - mshead.asm 1.1 85/04/10 -
   265                                  ; 2.10 03/09/83 Start of NETWORK support
   266                                  ;		New Buffer structure
   267                                  ;		New Sytem file table structure
   268                                  ;		FCB moved to internal representation
   269                                  ;		DOS re-organized
   270                                  ; 2.11 04/21/83 Continuation of 2.10, preliminary Network
   271                                  ;		device interface.
   272                                  ; 2.11 08/12/83 Dos split into several more modules for assembly on
   273                                  ;               an IBM PC
   274                                  ; 2.50 09/12/83 More network stuff
   275                                  ;
   276                                  ; *************************************************************
   277                                  
   278                                  ; ----------------------------------------------------------------------------
   279                                  ; EQUATES
   280                                  
   281                                  ; Interrupt Entry Points:
   282                                  
   283                                  ; INTBASE:      ABORT
   284                                  ; INTBASE+4:    COMMAND
   285                                  ; INTBASE+8:    BASE EXIT ADDRESS
   286                                  ; INTBASE+C:    CONTROL-C ABORT
   287                                  ; INTBASE+10H:  FATAL ERROR ABORT
   288                                  ; INTBASE+14H:  BIOS DISK READ
   289                                  ; INTBASE+18H:  BIOS DISK WRITE
   290                                  ; INTBASE+1CH:  END BUT STAY RESIDENT (NOT SET BY DOS)
   291                                  ; INTBASE+20H:  SPOOLER INTERRUPT
   292                                  ; INTBASE+40H:  Long jump to CALL entry point
   293                                  
   294                                  ENTRYPOINTSEG   EQU     0Ch
   295                                  MAXDIF          EQU     0FFFh
   296                                  SAVEXIT         EQU     10
   297                                  ; 06/05/2019
   298                                  WRAPOFFSET	EQU	0FEF0h  ; (MISC.ASM, MSDOS 6.0, 1991)
   299                                  
   300                                         ; INCLUDE DOSSYM.ASM
   301                                         ; INCLUDE DEVSYM.ASM
   302                                  
   303                                  ; SUBTTL ^C, terminate/abort/exit and Hard error actions
   304                                  ; PAGE
   305                                  ; There are three kinds of context resets that can occur during normal DOS
   306                                  ; functioning:  ^C trap, terminate/abort/exit, and Hard-disk error.  These must
   307                                  ; be handles in a clean fashion that allows nested executions along with the
   308                                  ; ability to trap one's own errors.
   309                                  ;
   310                                  ; ^C trap - A process may elect to catch his own ^Cs.  This is achieved by
   311                                  ;           using the $GET_INTERRUPT_VECTOR and $SET_INTERRUPT_VECTOR as
   312                                  ;           follows:
   313                                  ;
   314                                  ;           $GET_INTERRUPT_VECTOR for INT int_ctrl_c
   315                                  ;           Save it in static memory.
   316                                  ;           $SET_INTERRUPT_VECTOR for INT int_ctrl_c
   317                                  ;
   318                                  ;           The interrupt service routine must preserve all registers and
   319                                  ;           return carry set iff the operation is to be aborted (via abort
   320                                  ;           system call), otherwise, carry is reset and the operation is
   321                                  ;           restarted.  ANY DEVIATION FROM THIS WILL LEAD TO UNRELIABLE
   322                                  ;           RESULTS.
   323                                  ;
   324                                  ;           To restore original ^C processing (done on terminate/abort/exit),
   325                                  ;           restore INT int_ctrl_c from the saved vector.
   326                                  ;
   327                                  ; Hard-disk error -- The interrupt service routine for INT int_fatal_abort must
   328                                  ;           also preserve registers and return one of three values in AL: 0 and
   329                                  ;           1 imply retry and ignore (???)  and 2 indicates an abort.  The user
   330                                  ;           himself is not to issue the abort, rather, the dos will do it for
   331                                  ;           him by simulating a normal abort/exit system call.  ANY DEVIATION
   332                                  ;           FROM THIS WILL LEAD TO UNRELIABLE RESULTS.
   333                                  ;
   334                                  ; terminate/abort/exit -- The user may not, under any circumstances trap an
   335                                  ;           abort call.  This is reserved for knowledgeable system programs.
   336                                  ;           ANY DEVIATION FROM THIS WILL LEAD TO UNRELIABLE RESULTS.
   337                                  
   338                                  ;SUBTTL SEGMENT DECLARATIONS
   339                                  
   340                                  ; The following are all of the segments used.  They are declared in the order
   341                                  ; that they should be placed in the executable
   342                                  
   343                                  ;
   344                                  ; segment ordering for MSDOS
   345                                  ;
   346                                  
   347                                  ;START           SEGMENT BYTE PUBLIC 'START'
   348                                  ;START           ENDS
   349                                  
   350                                  ;CONSTANTS       SEGMENT BYTE PUBLIC 'CONST'
   351                                  ;CONSTANTS       ENDS
   352                                  
   353                                  ;DATA            SEGMENT WORD PUBLIC 'DATA'
   354                                  ;DATA            ENDS
   355                                  
   356                                  ;CODE            SEGMENT BYTE PUBLIC 'CODE'
   357                                  ;CODE            ENDS
   358                                  
   359                                  ;LAST            SEGMENT BYTE PUBLIC 'LAST'
   360                                  ;LAST            ENDS
   361                                  
   362                                  ;DOSGROUP    GROUP   CODE,CONSTANTS,DATA,LAST
   363                                  
   364                                  ; The following segment is defined such that the data/const classes appear
   365                                  ; before the code class for ROMification
   366                                  
   367                                  ;START		SEGMENT BYTE PUBLIC 'START'
   368                                  ;           	ASSUME  CS:DOSGROUP,DS:NOTHING,ES:NOTHING,SS:NOTHING
   369                                  ;		JMP     DOSINIT
   370                                  ;START		ENDS
   371                                  
   372                                  ;============================================================================
   373                                  ; BPB.INC, MSDOS 6.0, 1991
   374                                  ;============================================================================
   375                                  ; 09/07/2018 - Retro DOS v3.0
   376                                  
   377                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   378                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
   379                                  ;									   ;
   380                                  
   381                                  ;**	BIOS PARAMETER BLOCK DEFINITION
   382                                  ;
   383                                  ;	The BPB contains information about the disk structure. It dates
   384                                  ;	back to the earliest FAT systems and so FAT information is
   385                                  ;	intermingled with physical driver information.
   386                                  ;
   387                                  ;	A boot sector contains a BPB for its device; for other disks
   388                                  ;	the driver creates a BPB. DOS keeps copies of some of this
   389                                  ;	information in the DPB.
   390                                  ;
   391                                  ;	The BDS structure contains a BPB within it. 
   392                                  
   393                                  struc A_BPB
   394 00000000 ????                    .BPB_BYTESPERSECTOR:	resw	1
   395 00000002 ??                      .BPB_SECTORSPERCLUSTER:	resb	1
   396 00000003 ????                    .BPB_RESERVEDSECTORS:	resw	1
   397 00000005 ??                      .BPB_NUMBEROFFATS:	resb	1
   398 00000006 ????                    .BPB_ROOTENTRIES: 	resw	1
   399 00000008 ????                    .BPB_TOTALSECTORS:	resw	1
   400 0000000A ??                      .BPB_MEDIADESCRIPTOR:	resb	1
   401 0000000B ????                    .BPB_SECTORSPERFAT:	resw	1
   402 0000000D ????                    .BPB_SECTORSPERTRACK:	resw	1
   403 0000000F ????                    .BPB_HEADS:		resw	1
   404 00000011 ????                    .BPB_HIDDENSECTORS:	resw	1
   405 00000013 ????                    			resw	1
   406 00000015 ????                    .BPB_BIGTOTALSECTORS:	resw	1
   407 00000017 ????                    			resw	1
   408 00000019 ????????????            			resb	6	; NOTE:  many times these
   409                                  ;					; 	 6 bytes are omitted
   410                                  ;					;	 when BPB manipulations
   411                                  ;					;	 are performed!
   412                                  .size:
   413                                  endstruc
   414                                  
   415                                  ;                                                                          ;
   416                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
   417                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   418                                  
   419                                  ;============================================================================
   420                                  ; BUFFER.INC, MSDOS 6.0, 1991
   421                                  ;============================================================================
   422                                  ; 04/05/2019 - Retro DOS v4.0
   423                                  
   424                                  ; <Disk I/O Buffer Header>
   425                                  
   426                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   427                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
   428                                  ;									   ;
   429                                  
   430                                  ; Field definition for I/O buffer information
   431                                  
   432                                  struc BUFFINFO
   433 00000000 ????                    .buf_next:	resw 1		; Pointer to next buffer in list
   434 00000002 ????                    .buf_prev:	resw 1		; Pointer to prev buffer in list
   435 00000004 ??                      .buf_ID:	resb 1		; Drive of buffer (bit 7 = 0)
   436                                  				; SFT table index (bit 7 = 1)
   437                                  				; = FFH if buffer free
   438 00000005 ??                      .buf_flags:	resb 1		; Bit 7 = 1 if Remote file buffer
   439                                  				;	= 0 if Local device buffer
   440                                  				; Bit 6 = 1 if buffer dirty
   441                                  				; Bit 5 = Reserved
   442                                  				; Bit 4 = Search bit (bit 7 = 1)
   443                                  				; Bit 3 = 1 if buffer is DATA
   444                                  				; Bit 2 = 1 if buffer is DIR
   445                                  				; Bit 1 = 1 if buffer is FAT
   446                                  				; Bit 0 = Reserved
   447 00000006 ????????                .buf_sector:	resd 1		; Sector number of buffer (flags bit 7 = 0)
   448                                  ; The next two items are often refed as a word (flags bit 7 = 0)
   449 0000000A ??                      .buf_wrtcnt:	resb 1		; For FAT sectors, # times sector written out
   450 0000000B ????                    .buf_wrtcntinc:	resw 1		; "   "     "   , # sectors between each write
   451 0000000D ????????                .buf_DPB:	resd 1		; Pointer to drive parameters
   452 00000011 ????                    .buf_fill:	resw 1		; How full buffer is (flags bit 7 = 1)
   453 00000013 ??                      .buf_reserved:	resb 1		; make DWORD boundary for 386
   454                                  .size:	; 20 bytes
   455                                  endstruc
   456                                  
   457                                  %define buf_offset	BUFFINFO.buf_sector ; 22/07/2019
   458                                  				;For buf_flags bit 7 = 1, this is the byte
   459                                  				;offset of the start of the buffer in
   460                                  				;the file pointed to by buf_ID. Thus
   461                                  				;the buffer starts at location
   462                                  				;buf_offset in the file and contains
   463                                  				;buf_fill bytes.
   464                                  
   465                                  BUFINSIZ        EQU     BUFFINFO.size
   466                                  
   467                                  buf_Free	EQU	0FFh	; buf_id of free buffer
   468                                  
   469                                  ;Flag byte masks
   470                                  buf_isnet	EQU	10000000B
   471                                  buf_dirty	EQU	01000000B
   472                                  ;***
   473                                  buf_visit	EQU	00100000B
   474                                  ;***
   475                                  buf_snbuf	EQU	00010000B
   476                                  
   477                                  buf_isDATA	EQU	00001000B
   478                                  buf_isDIR	EQU	00000100B
   479                                  buf_isFAT	EQU	00000010B
   480                                  buf_type_0	EQU	11110001B	; AND sets type to "none"
   481                                  
   482                                  buf_NetID	EQU	BUFINSIZ
   483                                  
   484                                  ;                                                                          ;
   485                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
   486                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   487                                  
   488                                  ;============================================================================
   489                                  ; DOSSSYM.INC, MSDOS 6.0, 1991
   490                                  ;============================================================================
   491                                  ; 04/05/2019 - Retro DOS v4.0
   492                                  
   493                                  ; <Control character definitions>
   494                                  
   495                                  c_DEL	    EQU     7Fh 	;    ASCII rubout or delete previous char
   496                                  c_BS	    EQU     08h 	; ^H ASCII backspace
   497                                  c_CR	    EQU     0Dh 	; ^M ASCII carriage return
   498                                  c_LF	    EQU     0Ah 	; ^J ASCII linefeed
   499                                  c_ETB	    EQU     17h 	; ^W ASCII end of transmission
   500                                  c_NAK	    EQU     15h 	; ^U ASCII negative acknowledge
   501                                  c_ETX	    EQU     03h 	; ^C ASCII end of text
   502                                  c_HT	    EQU     09h 	; ^I ASCII tab
   503                                  
   504                                  ; <User stack inside of system call>
   505                                  ; Location of user registers relative user stack pointer
   506                                  
   507                                  struc	user_env   ; user_environ
   508 00000000 ????                    .user_AX: resw 1
   509 00000002 ????                    .user_BX: resw 1
   510 00000004 ????                    .user_CX: resw 1
   511 00000006 ????                    .user_DX: resw 1
   512 00000008 ????                    .user_SI: resw 1
   513 0000000A ????                    .user_DI: resw 1
   514 0000000C ????                    .user_BP: resw 1
   515 0000000E ????                    .user_DS: resw 1
   516 00000010 ????                    .user_ES: resw 1
   517 00000012 ????                    .user_IP: resw 1
   518 00000014 ????                    .user_CS: resw 1
   519 00000016 ????                    .user_F:  resw 1
   520                                  .size:
   521                                  endstruc
   522                                  
   523                                  ; ---- <Disk map> ----
   524                                  
   525                                  ;	MSDOS partitions the disk into 4 sections:
   526                                  ;
   527                                  ;  phys sector 0:   +-------------------+
   528                                  ;	|	    | boot/reserved	|
   529                                  ;	|	    +-------------------+
   530                                  ;	|	    |  File allocation	|
   531                                  ;	v	    |	   table(s)	|
   532                                  ;		    |  (multiple copies |
   533                                  ;		    |	  are kept)	|
   534                                  ;		    +-------------------+
   535                                  ;		    |	  Directory	|
   536                                  ;		    +-------------------+
   537                                  ;		    |	  File space	|
   538                                  ;		    +-------------------+
   539                                  ;		    |	Unaddressable	|
   540                                  ;		    |  (to end of disk) |
   541                                  ;		    +-------------------+
   542                                  ;
   543                                  ; All partition boundaries are sector boundaries.  The size of the FAT is
   544                                  ; adjusted to maximize the file space addressable.
   545                                  
   546                                  ; <File allocation Table information>
   547                                  
   548                                  ; The File Allocation Table uses a 12-bit entry for each allocation unit on
   549                                  ; the disk.  These entries are packed, two for every three bytes.  The contents
   550                                  ; of entry number N is found by 1) multiplying N by 1.5; 2) adding the result
   551                                  ; to the base address of the Allocation Table; 3) fetching the 16-bit word
   552                                  ; at this address; 4) If N was odd (so that N*1.5 was not an integer), shift
   553                                  ; the word right four bits; 5) mask to 12 bits (AND with 0FFF hex).  Entry
   554                                  ; number zero is used as an end-of-file trap in the OS and is passed to the
   555                                  ; BIOS to help determine disk format.  Entry 1 is reserved for future use.
   556                                  ; The first available allocation unit is assigned entry number two, and even
   557                                  ; though it is the first, is called cluster 2.	Entries greater than 0FF8H
   558                                  ; (12-bit fats) or 0FFF8H (16-bit fats) are end of file marks; entries of zero
   559                                  ; are unallocated.  Otherwise, the contents of a FAT entry is the number of
   560                                  ; the next cluster in the file.
   561                                  ;
   562                                  ; Clusters with bad sectors are tagged with FF7H.  Any non-zero number would
   563                                  ; do because these clusters show as allocated, but are not part of any
   564                                  ; allocation chain and thus will never be allocated to a file.	A particular
   565                                  ; number is selected so that disk checking programs know what to do (ie.  a
   566                                  ; cluster with entry FF7H which is not in a chain is not an error).
   567                                  
   568                                  ;**	Character Type Flags
   569                                  ;
   570                                  ;	These flags are used in a lookup table indexed by the character code.
   571                                  ;	They're used to quickly classify characters when parsing paths.
   572                                  ;	I think that these are only used to parse FCBs - jgl
   573                                  
   574                                  FCHK	equ 1		; I think this means "normal name char, no chks needed" -jgl
   575                                  FDELIM	equ 2		; is a delimiter
   576                                  FSPCHK	equ 4		; set if character is not a space or equivalent
   577                                  FFCB	equ 8		; is valid in an FCB
   578                                  
   579                                  ;** Bit definitions for DOS_FLAG
   580                                  ;
   581                                  ; Bit 0 - this is set when a $open call is made from $exec. This is used in
   582                                  ;	  $open to indicate to the redirector that this open is being made
   583                                  ;	  by an exec call.
   584                                  ;
   585                                  ; Bit 2
   586                                  ;
   587                                  ; M003, M027:
   588                                  ;
   589                                  ; The start up code of MS PASCAL 3.2 programs depend on the 1M address wrap 
   590                                  ; if they load below 64K. This is a likely possiblity in DOS 5.x with DOS in
   591                                  ; the HMA. By default DOS will turn A20 OFF before Xferring control to the
   592                                  ; user program in the case of an Exec call. The next call to DOS will turn
   593                                  ; A20 line ON. It has been observed that MS PASCAL 3.2 start up does an int
   594                                  ; 21 ah=25h call before executing the faulty code. This will turn A20 On. 
   595                                  ; In order to support this we will set Bit 2 of this flag in the DOS exec
   596                                  ; call (msproc.asm) if DOS is running in the HMA. In $set_interrupt_vector in
   597                                  ; getset.asm A20OFF_COUNT is set to 1 if bit 2 of DOS_FLAG was previously set 
   598                                  ; by a call to exec and if A20OFF_COUNT is 0. In msdisp.asm, if A20OFF_COUNT 
   599                                  ; is non zero then A20 will be turned OFF before returning to the user. 
   600                                  ; Bit 2 will be unconditionally cleared here.
   601                                  ;
   602                                  ; M009, M027:
   603                                  ;
   604                                  ; Mace utilities MKEYRATE.COM version 1.0 copyright 1987 is an execpacked 
   605                                  ; program converted to a com file. Therefore if DOS is loaded high and if 
   606                                  ; this program is loaded below 64K it will blurt out "packed file is corrupt".
   607                                  ; This program does an int 21 ah=49h before executing the buggy execpacked
   608                                  ; code. This int21 call turns a20 on and hence the problem. In $dealloc
   609                                  ; alloc.asm A20OFF_COUNT is set to 1 if bit 2 of DOS_FLAG was previously set 
   610                                  ; by a call to exec and if A20OFF_COUNT is 0. In msdisp.asm, if A20OFF_COUNT 
   611                                  ; is non zero then A20 will be turned OFF before returning to the user. 
   612                                  ; Bit 2 will be unconditionally cleared here.
   613                                  
   614                                  EXECOPEN	EQU	00000001b	; bit 0 of DOS_FLAG
   615                                  SUPPRESS_WINA20	EQU	00000010b	; M025
   616                                  EXECA20OFF	EQU	00000100b	; bit 2 of DOS_FLAG
   617                                  
   618                                  ;============================================================================
   619                                  ; VECTOR.INC, MSDOS 6.0, 1991
   620                                  ;============================================================================
   621                                  ; 04/05/2019 - Retro DOS v4.0
   622                                  
   623                                  ; 09/07/2018 - Retro DOS v3.0 (VECTOR.INC, MSDOS 3.3, 1987)
   624                                  
   625                                  ; <interrupt definitions>
   626                                  
   627                                  INTTAB          EQU     20H
   628                                  INTBASE         EQU     4 * INTTAB
   629                                  ENTRYPOINT      EQU     INTBASE+40H
   630                                  
   631                                  ;	IF      ALTVECT
   632                                  ;ALTTAB  EQU     0F0H
   633                                  ;ALTBASE EQU     4 * ALTTAB
   634                                  ;	ENDIF
   635                                  
   636                                  ;
   637                                  ; interrupt assignments
   638                                  ;
   639                                  ;	IF	NOT ALTVECT
   640                                  int_abort	    EQU     INTTAB	; abort process
   641                                  int_command	    EQU     int_abort+1 ; call MSDOS
   642                                  int_terminate	    EQU     int_abort+2 ; int to terminate address
   643                                  int_ctrl_c	    EQU     int_abort+3 ; ^c trapper
   644                                  int_fatal_abort     EQU     int_abort+4 ; hard disk error
   645                                  int_disk_read	    EQU     int_abort+5 ; logical sector disk read
   646                                  int_disk_write	    EQU     int_abort+6 ; logical sector disk write
   647                                  int_keep_process    EQU     int_abort+7 ; terminate program and stay
   648                                  					; resident
   649                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   650                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
   651                                  ;									   ;
   652                                  int_spooler	    EQU     int_abort+8 ; spooler call
   653                                  int_fastcon	    EQU     int_abort+9 ; fast CON interrupt
   654                                  int_IBM 	    EQU     int_abort+10; critical section maintenance
   655                                  ;									   ;
   656                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
   657                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   658                                  ;	ELSE
   659                                  ;int_abort	    EQU     INTTAB	; abort process
   660                                  ;int_command	    EQU     int_abort+1 ; call MSDOS
   661                                  ;int_terminate	    EQU     ALTTAB	; int to terminate address
   662                                  ;int_ctrl_c	    EQU     int_terminate+1 ; ^c trapper
   663                                  ;int_fatal_abort    EQU     int_terminate+2 ; hard disk error
   664                                  ;int_disk_read	    EQU     int_abort+5 ; logical sector disk read
   665                                  ;int_disk_write	    EQU     int_abort+6 ; logical sector disk write
   666                                  ;int_keep_process   EQU     int_abort+7 ; terminate program and stay resident
   667                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   668                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
   669                                  ;									   ;
   670                                  ;int_spooler	    EQU     int_terminate+3 ; spooler call
   671                                  ;int_fastcon	    EQU     int_abort+9 ; fast CON interrupt
   672                                  ;									   ;
   673                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
   674                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   675                                  ;	ENDIF
   676                                  
   677                                  addr_int_abort		EQU    4 * int_abort
   678                                  addr_int_command	EQU    4 * int_command
   679                                  addr_int_terminate	EQU    4 * int_terminate
   680                                  addr_int_ctrl_c 	EQU    4 * int_ctrl_c
   681                                  addr_int_fatal_abort	EQU    4 * int_fatal_abort
   682                                  addr_int_disk_read	EQU    4 * int_disk_read
   683                                  addr_int_disk_write	EQU    4 * int_disk_write
   684                                  addr_int_keep_process	EQU    4 * int_keep_process
   685                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   686                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
   687                                  ;									   ;
   688                                  addr_int_spooler	EQU    4 * int_spooler
   689                                  addr_int_fastcon	EQU    4 * int_fastcon
   690                                  addr_int_ibm		EQU    4 * int_IBM
   691                                  ;									   ;
   692                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
   693                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   694                                  
   695                                  ;============================================================================
   696                                  ; DIRENT.INC, MSDOS 6.0, 1991
   697                                  ;============================================================================
   698                                  ; 04/05/2019 - Retro DOS v4.0
   699                                  
   700                                  ; BREAK <Directory entry>
   701                                  
   702                                  ;
   703                                  ;       +---------------------------+
   704                                  ;       |  (12 BYTE) filename/ext   |       0       0
   705                                  ;       +---------------------------+
   706                                  ;       |     (BYTE) attributes     |       11      B
   707                                  ;       +---------------------------+
   708                                  ;       |    (10 BYTE) reserved     |       12      C
   709                                  ;       +---------------------------+
   710                                  ;       | (WORD) time of last write |       22      16
   711                                  ;       +---------------------------+
   712                                  ;       | (WORD) date of last write |       24      18
   713                                  ;       +---------------------------+
   714                                  ;       |   (WORD) First cluster    |       26      1A
   715                                  ;       +---------------------------+
   716                                  ;       |     (DWORD) file size     |       28      1C
   717                                  ;       +---------------------------+
   718                                  ;
   719                                  ;   First byte of filename  = E5 -> free directory entry
   720                                  ;                           = 00 -> end of allocated directory
   721                                  ;   Time:   Bits 0-4=seconds/2, bits 5-10=minute, 11-15=hour
   722                                  ;   Date:   Bits 0-4=day, bits 5-8=month, bits 9-15=year-1980
   723                                  ;
   724                                  struc dir_entry
   725 00000000 <res Bh>                .dir_name:	resb 11			; file name
   726 0000000B ??                      .dir_attr:	resb 1			; attribute bits
   727 0000000C ????                    .dir_codepg:	resw 1			; code page DOS 4.00
   728 0000000E ????                    .dir_extcluster: resw 1			; extended attribute starting cluster
   729 00000010 ??                      .dir_attr2:	resb 1			; reserved
   730 00000011 ??????????              .dir_pad:	resb 5			; reserved for expansion
   731 00000016 ????                    .dir_time:	resw 1			; time of last write
   732 00000018 ????                    .dir_date:	resw 1			; date of last write
   733 0000001A ????                    .dir_first:	resw 1			; first allocation unit of file
   734 0000001C ????                    .dir_size_l:	resw 1			; low 16 bits of file size
   735 0000001E ????                    .dir_size_h:	resw 1			; high 16 bits of file size
   736                                  .size:
   737                                  endstruc
   738                                  
   739                                  attr_read_only      EQU      1h
   740                                  attr_hidden         EQU      2h
   741                                  attr_system         EQU      4h
   742                                  attr_volume_id      EQU      8h
   743                                  attr_directory      EQU     10h
   744                                  attr_archive        EQU     20h
   745                                  attr_device	    EQU     40h	; This is a VERY special bit.
   746                                  				;   NO directory entry on a disk EVER
   747                                  				;   has this bit set. It is set non-zero
   748                                  				;   when a device is found by GETPATH
   749                                  
   750                                  attr_all            EQU     attr_hidden+attr_system+attr_directory
   751                                                                          ; OR of hard attributes for FINDENTRY
   752                                  
   753                                  attr_ignore         EQU     attr_read_only+attr_archive
   754                                                                          ; ignore this(ese) attribute(s)
   755                                                                          ; during search first/next
   756                                  
   757                                  attr_changeable     EQU     attr_read_only+attr_hidden+attr_system+attr_archive
   758                                                                          ; changeable via CHMOD
   759                                  
   760                                  DIRFREE		equ	0E5h	; stored in dir_name[0] to indicate free slot
   761                                  
   762                                  ;============================================================================
   763                                  ; DPB.INC, MSDOS 6.0, 1991
   764                                  ;============================================================================
   765                                  ; 24/04/2019 - Retro DOS v4.0
   766                                  
   767                                  ; 19/07/2018 - Retro DOS v3.0 (DPB.INC, MSDOS 3.3, 1987)
   768                                  ; 07/07/2018 - Retro DOS v3.0 (DPB.INC, MSDOS 6.0, 1991)
   769                                  
   770                                  ; ---------------------------------------------------------------------------
   771                                  ;**	DPB - Drive Parameter Block
   772                                  ;
   773                                  ;	BUGBUG - this isn't authorative - it's my probably incomplete and
   774                                  ;	possibly inaccurate deductions from code study... - jgl
   775                                  ;
   776                                  ;	The DPB is DOS's main structure for describing block devices.
   777                                  ;	It contains info about the "Drive" intermingled with info about
   778                                  ;	the FAT file system which is presumably on the drive.  I don't know
   779                                  ;	how those fields are used if it's not the FAT file system - BUGBUG
   780                                  ;
   781                                  ;	The DPBs are statically allocated and chained off of DPBHead.
   782                                  ;	Users scan this chain looking for a match on DPB_DRIVE.
   783                                  ;	The DPBs are built at init time from info in the SYSDEV structure.
   784                                  ; ---------------------------------------------------------------------------
   785                                  
   786                                  struc	DPB
   787 00000000 ??                      .DRIVE:		resb 1		; Logical drive # assoc with DPB (A=0,B=1,...)
   788 00000001 ??                      .UNIT:		resb 1		; Driver unit number of DPB
   789 00000002 ????                    .SECTOR_SIZE:	resw 1		; Size of physical sector in bytes
   790 00000004 ??                      .CLUSTER_MASK:	resb 1		; Sectors/cluster - 1
   791 00000005 ??                      .CLUSTER_SHIFT:	resb 1		; Log2 of sectors/cluster
   792 00000006 ????                    .FIRST_FAT:	resw 1		; Starting record of FATs
   793 00000008 ??                      .FAT_COUNT:	resb 1		; Number of FATs for this drive
   794 00000009 ????                    .ROOT_ENTRIES:	resw 1		; Number of directory entries
   795 0000000B ????                    .FIRST_SECTOR:	resw 1		; First sector of first cluster
   796 0000000D ????                    .MAX_CLUSTER:	resw 1		; Number of clusters on drive + 1
   797                                  ; MSDOS 3.3
   798                                  ;.FAT_SIZE:	resb 1		; Number of records occupied by FAT
   799                                  ; MSDOS 6.0
   800 0000000F ????                    .FAT_SIZE:	resw 1		; Number of records occupied by FAT
   801 00000011 ????                    .DIR_SECTOR:	resw 1		; Starting record of directory
   802 00000013 ????????                .DRIVER_ADDR:	resd 1		; Pointer to driver
   803 00000017 ??                      .MEDIA:		resb 1		; Media byte
   804 00000018 ??                      .FIRST_ACCESS:	resb 1		; This is initialized to -1 to force a media
   805                                  				; check the first time this DPB is used
   806 00000019 ????????                .NEXT_DPB:	resd 1		; Pointer to next Drive parameter block
   807 0000001D ????                    .NEXT_FREE:	resw 1		; Cluster # of last allocated cluster
   808 0000001F ????                    .FREE_CNT:	resw 1		; Count of free clusters, -1 if unknown
   809                                  .size:
   810                                  endstruc
   811                                  
   812                                  DPBSIZ  EQU     DPB.size	; Size of the structure in bytes
   813                                  
   814                                  DSKSIZ  EQU	DPB.MAX_CLUSTER	; Size of disk (temp used during init only)
   815                                  
   816                                  ;                                                                          ;
   817                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
   818                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   819                                  
   820                                  ;============================================================================
   821                                  ; SF.INC, MSDOS 6.0, 1991
   822                                  ;============================================================================
   823                                  ; 25/04/2019 - Retro DOS v4.0
   824                                  ; 07/07/2018 - Retro DOS v3.0
   825                                  
   826                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
   827                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
   828                                  ;                                                                          ;
   829                                  
   830                                  ; ---------------------------------------------------------------------------
   831                                  ;**	SF.INC - System File Table
   832                                  ;
   833                                  ;   AN000   version 4.00   Jan. 1988
   834                                  ;   AN003   PTM 3680 --  make NAME offset the same as before (<=3.30)
   835                                  ;   AN009   PTM 3839	 reorder SFT for MS WINDOWS
   836                                  ; ---------------------------------------------------------------------------
   837                                  ;**	System File Table SuperStructure
   838                                  ;
   839                                  ;	The system file table entries are allocated in contiguous groups.
   840                                  ;	There may be more than one such groups; the SF "superstructure"
   841                                  ;	tracks the groups.
   842                                  ; ---------------------------------------------------------------------------
   843                                  
   844                                  struc	SFT
   845 00000000 ????????                .SFLink:	resd 1
   846 00000004 ????                    .SFCount:	resw 1		; number of entries
   847 00000006 ????                    .SFTable:	resw 1		; beginning of array of the following
   848                                  .size:
   849                                  endstruc
   850                                  
   851                                  ; ---------------------------------------------------------------------------
   852                                  ;**	System file table entry
   853                                  ;
   854                                  ;	These are the structures which are at SFTABLE in the SF structure.
   855                                  ; ---------------------------------------------------------------------------
   856                                  
   857                                  ; 25/04/2019 - Retro DOS v4.0
   858                                  
   859                                  struc SF_ENTRY
   860 00000000 ????                    .sf_ref_count:	resw 1		; number of processes sharing entry
   861                                  				;   if FCB then ref count
   862 00000002 ????                    .sf_mode:	resw 1		; mode of access or high bit on if FCB
   863 00000004 ??                      .sf_attr:	resb 1		; attribute of file
   864 00000005 ????                    .sf_flags:	resw 1		;Bits 8-15
   865                                  				; Bit 15 = 1 if remote file
   866                                  				;	 = 0 if local file or device
   867                                  				; Bit 14 = 1 if date/time is not to be
   868                                  				;   set from clock at CLOSE.  Set by
   869                                  				;   FILETIMES and FCB_CLOSE.  Reset by
   870                                  				;   other reseters of the dirty bit
   871                                  				;   (WRITE)
   872                                  				; Bit 13 = Pipe bit (reserved)
   873                                  				;
   874                                  				; Bits 0-7 (old FCB_devid bits)
   875                                  				; If remote file or local file, bit
   876                                  				; 6=0 if dirty Device ID number, bits
   877                                  				; 0-5 if local file.
   878                                  				; bit 7=0 for local file, bit 7
   879                                  				;      =1 for local I/O device
   880                                  				; If local I/O device, bit 6=0 if EOF (input)
   881                                  				;		Bit 5=1 if Raw mode
   882                                  				;		Bit 0=1 if console input device
   883                                  				;		Bit 1=1 if console output device
   884                                  				;		Bit 2=1 if null device
   885                                  				;		Bit 3=1 if clock device
   886 00000007 ????????                .sf_devptr:	resd	1	; Points to DPB if local file, points
   887                                  				; to device header if local device,
   888                                  				; points to net device header if
   889                                  				; remote
   890 0000000B ????                    .sf_firclus:	resw	1	; First cluster of file (bit 15 = 0)
   891 0000000D ????                    .sf_time:	resw	1	; Time associated with file
   892 0000000F ????                    .sf_date:	resw	1	; Date associated with file
   893 00000011 ????????                .sf_size:	resd 	1	; Size associated with file
   894 00000015 ????????                .sf_position:	resd	1	; Read/Write pointer or LRU count for FCBs
   895                                  
   896                                  ; Starting here, the next 7 bytes may be used by the file system to store
   897                                  ; an ID
   898                                  
   899                                  ; 09/07/2018 - Retro DOS v3.0
   900                                  
   901                                  ; MSDOS 3.3 SF.INC, 1987
   902                                  ;.sf_cluspos:	resw	1	; Position of last cluster accessed
   903                                  ;.sf_lstclus	resw	1	; Last cluster accessed
   904                                  ;.sf_dirsec:	resw	1	; Sector number of directory sector
   905                                  ;				; for this file
   906                                  ;.sf_dirpos:	resb	1	; Offset of this entry in the above
   907                                  
   908                                  ; MSDOS 6.0, SF.INC, 1991
   909 00000019 ????                    .sf_cluspos:	resw	1	; Position of last cluster accessed
   910 0000001B ????????                .sf_dirsec:	resd	1	; Sector number of directory sector
   911                                  				; for this file
   912 0000001F ??                      .sf_dirpos:	resb	1	; Offset of this entry in the above
   913                                  
   914                                  ; End of 7 bytes of file-system specific info.
   915                                  
   916 00000020 <res Bh>                .sf_name:	resb	11	; 11 character name that is in the
   917                                  				; directory entry.  This is used by
   918                                  				; close to detect file deleted and
   919                                  				; disk changed errors.
   920                                  ; SHARING INFO
   921 0000002B ????????                .sf_chain:	resd	1	; link to next SF
   922 0000002F ????                    .sf_UID:	resw	1
   923 00000031 ????                    .sf_PID:	resw	1
   924 00000033 ????                    .sf_MFT:	resw	1
   925                                  
   926                                  ; MSDOS 6.0, SF.INC, 1991
   927 00000035 ????                    .sf_lstclus:	resw	1	;AN009; Last cluster accessed
   928 00000037 ????????                .sf_IFS_HDR:	resd	1
   929                                  
   930                                  .size:
   931                                  endstruc
   932                                  
   933                                  ; 20/07/2018
   934                                  ; MSDOS 3.3, SF.INC, 1987
   935                                  %define sf_netid   SF_ENTRY.sf_cluspos    ; byte
   936                                  %define sf_OpenAge SF_ENTRY.sf_position+2 ; word
   937                                  %define sf_LRU	   SF_ENTRY.sf_position	  ; word
   938                                  ; MSDOS 6.0, SF.INC, 1991
   939                                  %define sf_fsda	     SF_ENTRY.sf_cluspos  ; byte ;DOS 4.00
   940                                  %define sf_serial_ID SF_ENTRY.sf_firclus  ; word ;DOS 4.00
   941                                  
   942                                  ; 19/07/2018
   943                                  ; MSDOS 3.3, SF.INC, 1987
   944                                  
   945                                  sf_default_number  EQU	5
   946                                  
   947                                  ; Note that we need to mark an SFT as being busy for OPEN/CREATE.  This is
   948                                  ; because an INT 24 may prevent us from 'freeing' it.  We mark this as such
   949                                  ; by placing a -1 in the ref_count field.
   950                                  
   951                                  sf_busy EQU -1
   952                                  
   953                                  ; mode mask for FCB detection
   954                                  sf_isFCB		EQU	1000000000000000B
   955                                  
   956                                  ; Flag word masks
   957                                  sf_isnet		EQU	1000000000000000B
   958                                  sf_close_nodate 	EQU	0100000000000000B
   959                                  sf_pipe 		EQU	0010000000000000B
   960                                  sf_no_inherit		EQU	0001000000000000B
   961                                  sf_net_spool		EQU	0000100000000000B
   962                                  
   963                                  ; 25/04/2019
   964                                  sf_entry_size equ SF_ENTRY.size ; 59 (MSDOS 6.0)
   965                                  
   966                                  ; ---------------------------------------------------------------------------
   967                                  ; Local file/device flag masks
   968                                  ; ---------------------------------------------------------------------------
   969                                  
   970                                  devid_file_clean        EQU     40h     ; true if file and not written
   971                                  devid_file_mask_drive   EQU     3Fh     ; mask for drive number
   972                                  
   973                                  devid_device            EQU     80h     ; true if a device
   974                                  devid_device_EOF        EQU     40h     ; true if end of file reached
   975                                  devid_device_raw        EQU     20h     ; true if in raw mode
   976                                  devid_device_special    EQU     10h     ; true if special device
   977                                  devid_device_clock      EQU     08h     ; true if clock device
   978                                  devid_device_null       EQU     04h     ; true if null device
   979                                  devid_device_con_out    EQU     02h     ; true if console output
   980                                  devid_device_con_in     EQU     01h     ; true if consle input
   981                                  
   982                                  ; ---------------------------------------------------------------------------
   983                                  ; structure of devid field as returned by IOCTL is:
   984                                  ;
   985                                  ;       BIT     7   6   5   4   3   2   1   0
   986                                  ;             |---|---|---|---|---|---|---|---|
   987                                  ;             | I | E | R | S | I | I | I | I |
   988                                  ;             | S | O | A | P | S | S | S | S |
   989                                  ;             | D | F | W | E | C | N | C | C |
   990                                  ;             | E |   |   | C | L | U | O | I |
   991                                  ;             | V |   |   | L | K | L | T | N |
   992                                  ;             |---|---|---|---|---|---|---|---|
   993                                  ;       ISDEV = 1 if this channel is a device
   994                                  ;             = 0 if this channel is a disk file
   995                                  ;
   996                                  ;       If ISDEV = 1
   997                                  ;
   998                                  ;             EOF = 0 if End Of File on input
   999                                  ;             RAW = 1 if this device is in Raw mode
  1000                                  ;                 = 0 if this device is cooked
  1001                                  ;             ISCLK = 1 if this device is the clock device
  1002                                  ;             ISNUL = 1 if this device is the null device
  1003                                  ;             ISCOT = 1 if this device is the console output
  1004                                  ;             ISCIN = 1 if this device is the console input
  1005                                  ;
  1006                                  ;       If ISDEV = 0
  1007                                  ;             EOF = 0 if channel has been written
  1008                                  ;             Bits 0-5  are  the  block  device  number  for
  1009                                  ;                 the channel (0 = A, 1 = B, ...)
  1010                                  ; ---------------------------------------------------------------------------
  1011                                  
  1012                                  devid_ISDEV     EQU     80h
  1013                                  devid_EOF       EQU     40h
  1014                                  devid_RAW       EQU     20h
  1015                                  devid_SPECIAL   EQU     10H
  1016                                  devid_ISCLK     EQU     08h
  1017                                  devid_ISNUL     EQU     04h
  1018                                  devid_ISCOT     EQU     02h
  1019                                  devid_ISCIN     EQU     01h
  1020                                  
  1021                                  devid_block_dev EQU     1Fh             ; mask for block device number
  1022                                  
  1023                                  ;============================================================================
  1024                                  ; PDB.INC, MSDOS 6.0, 1991
  1025                                  ;============================================================================
  1026                                  ; 04/05/2019 - Retro DOS v4.0
  1027                                  ; 08/07/2018 - Retro DOS v3.0
  1028                                  
  1029                                  ; ---------------------------------------------------------------------------
  1030                                  ; BREAK <Process data block>
  1031                                  ; ---------------------------------------------------------------------------
  1032                                  ;**	Process data block (otherwise known as program header)
  1033                                  ;
  1034                                  
  1035                                  ;	These offset are documented in the MSDOS Encyclopedia, so nothing
  1036                                  ;	can be rearranged here, ever. Reserved areas are probably safe
  1037                                  ;	for use.
  1038                                  ; ---------------------------------------------------------------------------
  1039                                  
  1040                                  FILPERPROC	EQU     20
  1041                                  
  1042                                  struc PDB	; Process_data_block
  1043 00000000 ????                    .EXIT_CALL:	resw 1   	; INT int_abort system terminate
  1044 00000002 ????                    .BLOCK_LEN:	resw 1		; size of execution block
  1045 00000004 ??                                      resb 1
  1046 00000005 ??????????              .CPM_CALL:	resb 5		; ancient call to system
  1047 0000000A ????????                .EXIT:		resd 1		; pointer to exit routine
  1048 0000000E ????????                .CTRL_C:	resd 1		; pointer to ^C routine
  1049 00000012 ????????                .FATAL_ABORT:	resd 1		; pointer to fatal error
  1050 00000016 ????                    .PARENT_PID:	resw 1		; PID of parent (terminate PID)
  1051 00000018 <res 14h>               .JFN_TABLE:     resb FILPERPROC ; indices into system table
  1052 0000002C ????                    .ENVIRON:	resw 1		; seg addr of environment
  1053 0000002E ????????                .USER_STACK:	resd 1		; stack of self during system calls
  1054 00000032 ????                    .JFN_Length:	resw 1		; number of handles allowed
  1055 00000034 ????????                .JFN_Pointer:	resd 1		; pointer to JFN table
  1056 00000038 ????????                .Next_PDB:	resd 1		; pointer to nested PDB's
  1057 0000003C ??                      .InterCon:	resb 1	; MSDOS 6.0 ; *** jh-3/28/90 *** 
  1058 0000003D ??                      .Append:	resb 1	; MSDOS 6.0 ; *** Not sure if still used ***
  1059 0000003E ????                    .Novell_Used:	resb 2	; MSDOS 6.0 ; Novell shell (redir) uses these
  1060 00000040 ????                    .Version:	resw 1	; MSDOS 6.0 ; DOS version reported to this app
  1061 00000042 <res Eh>                .PAD1:		resb 14 ; 0Eh
  1062 00000050 ??????????              .CALL_SYSTEM:	resb 5		; portable method of system call
  1063 00000055 ??????????????          .PAD2:		resb 7		; reserved so FCB 1 can be used as
  1064                                  				;  an extended FCB
  1065                                  ;endstruc 	; MSDOS 3.3
  1066                                  	  	; MSDOS 6.0
  1067 0000005C <res 10h>               .FCB1:		resb 16 ; 10h	; default FCB 1
  1068 0000006C <res 10h>               .FCB2:		resb 16 ; 10h	; default FCB 2
  1069 0000007C ????????                .PAD3:		resb 4		; not sure if this is used by PDB_FCB2
  1070 00000080 <res 80h>               .TAIL:		resb 128	; command tail and default DTA
  1071                                  endstruc
  1072                                  
  1073                                  ;============================================================================
  1074                                  ; EXE.INC, MSDOS 6.0, 1991
  1075                                  ;============================================================================
  1076                                  ; 04/05/2019 - Retro DOS v4.0
  1077                                  
  1078                                  ;**	EXE.INC - Definitions for the EXEC command and EXE files
  1079                                  ; ---------------------------------------------------------------------------
  1080                                  ; The following get used as arguments to the EXEC system call.  They indicate
  1081                                  ; whether or not the program is executed or whether or not a program header
  1082                                  ; gets created.
  1083                                  
  1084                                  exec_func_no_execute EQU 1	; no execute bit
  1085                                  exec_func_overlay    EQU 2	; overlay bit
  1086                                  
  1087                                  struc EXEC0
  1088 00000000 ????                    .ENVIRON:	resw 1		; seg addr of environment
  1089 00000002 ????????                .COM_LINE:	resd 1		; pointer to asciz command line
  1090 00000006 ????????                .5C_FCB:	resd 1		; default fcb at 5C
  1091 0000000A ????????                .6C_FCB:	resd 1		; default fcb at 6C
  1092                                  .size:
  1093                                  endstruc
  1094                                  
  1095                                  struc EXEC1
  1096 00000000 ????                    .ENVIRON:	resw 1		; seg addr of environment
  1097 00000002 ????????                .COM_LINE:	resd 1		; pointer to asciz command line
  1098 00000006 ????????                .5C_FCB:	resd 1		; default fcb at 5C
  1099 0000000A ????????                .6C_FCB:	resd 1		; default fcb at 6C
  1100 0000000E ????                    .SP:		resw 1		; stack pointer of program
  1101 00000010 ????                    .SS:		resw 1		; stack seg register of program
  1102 00000012 ????                    .IP:		resw 1		; entry point IP
  1103 00000014 ????                    .CS:		resw 1		; entry point CS
  1104                                  .size:
  1105                                  endstruc
  1106                                  
  1107                                  struc EXEC3
  1108 00000000 ????                    .load_addr:	resw 1		; seg address of load point
  1109 00000002 ????                    .reloc_fac:	resw 1		; relocation factor
  1110                                  endstruc
  1111                                  
  1112                                  ;**	Exit codes (in upper byte) for terminating programs
  1113                                  
  1114                                  EXIT_TERMINATE		EQU	0
  1115                                  EXIT_ABORT		EQU	0
  1116                                  EXIT_CTRL_C		EQU	1
  1117                                  EXIT_HARD_ERROR 	EQU	2
  1118                                  EXIT_KEEP_PROCESS	EQU	3
  1119                                  
  1120                                  ;**	EXE File Header Description
  1121                                  
  1122                                  struc EXE
  1123 00000000 ????                    .signature:   resw 1		; must contain 4D5A (yay zibo!)
  1124 00000002 ????                    .len_mod_512: resw 1		; low 9 bits of length
  1125 00000004 ????                    .pages:       resw 1		; number of 512b pages in file
  1126 00000006 ????                    .rle_count:   resw 1		; count of reloc entries
  1127 00000008 ????                    .par_dir:     resw 1		; number of paragraphs before image
  1128 0000000A ????                    .min_BSS:     resw 1		; minimum number of para of BSS
  1129 0000000C ????                    .max_BSS:     resw 1		; max number of para of BSS
  1130 0000000E ????                    .SS:          resw 1		; stack of image
  1131 00000010 ????                    .SP:          resw 1		; SP of image
  1132 00000012 ????                    .chksum:      resw 1		; checksum of file (ignored)
  1133 00000014 ????                    .IP:          resw 1		; IP of entry
  1134 00000016 ????                    .CS:          resw 1		; CS of entry
  1135 00000018 ????                    .rle_table:   resw 1		; byte offset of reloc table
  1136 0000001A ????                    .iov:         resw 1		; overlay number (0 for root)
  1137 0000001C ????????                .sym_tab:     resd 1		; offset of symbol table in file
  1138                                  .size:
  1139                                  endstruc
  1140                                  
  1141                                  exe_valid_signature     EQU 5A4Dh
  1142                                  exe_valid_old_signature EQU 4D5Ah
  1143                                  
  1144                                  ;**	EXE file symbol info definitions
  1145                                  
  1146                                  struc symbol_entry
  1147 00000000 ????????                .value:	resd 1
  1148 00000004 ????                    .type:	resw 1
  1149 00000006 ??                      .len:	resb 1
  1150 00000007 <res FFh>               .name:	resb 255
  1151                                  endstruc
  1152                                  
  1153                                  ;**	Data structure passed for ExecReady call
  1154                                  
  1155                                  struc ERStruc
  1156 00000000 ????                     .ER_Reserved:	resw	1	; reserved, should be zero
  1157 00000002 ????                     .ER_Flags:	resw	1
  1158 00000004 ????????                 .ER_ProgName:	resd	1	; ptr to ASCIIZ str of prog name
  1159 00000008 ????                     .ER_PSP:	resw	1	; PSP of the program
  1160 0000000A ????????                 .ER_StartAddr:	resd	1	; Start CS:IP of the program
  1161 0000000E ????????                 .ER_ProgSize:	resd	1	; Program size including PSP
  1162                                   .size:
  1163                                  endstruc
  1164                                  
  1165                                  ;** bit fields in ER_Flags
  1166                                  
  1167                                  ER_EXE		equ	0001h
  1168                                  ER_OVERLAY	equ	0002h
  1169                                  
  1170                                  
  1171                                  ;============================================================================
  1172                                  ; ARENA.INC, MSDOS 6.0, 1991
  1173                                  ;============================================================================
  1174                                  ; 24/04/2019 - Retro DOS v4.0
  1175                                  ; 04/08/2018 - Retro DOS v3.0
  1176                                  
  1177                                  ;BREAK <Memory arena structure>
  1178                                  
  1179                                  ;**	Arena Header
  1180                                  
  1181                                  struc ARENA
  1182 00000000 ??                      .SIGNATURE:	resb 1		; 4D for valid item, 5A for last item
  1183 00000001 ????                    .OWNER:		resw 1		; owner of arena item
  1184 00000003 ????                    .SIZE:		resw 1		; size in paragraphs of item
  1185 00000005 ??????                  .RESERVED:	resb 3		; reserved
  1186 00000008 ????????????????        .NAME:		resb 8		; owner file name
  1187                                  .headersize:			
  1188                                  endstruc
  1189                                  
  1190                                  ; 20/05/2019 - Retro DOS v4.0
  1191                                  ARENAHEADERSIZE equ ARENA.headersize 
  1192                                  
  1193                                  ; CAUTION: The routines in ALLOC.ASM rely on the fact that arena_signature
  1194                                  ; and arena_owner_system are all equal to zero and are contained in DI.
  1195                                  ; Change them and change ALLOC.ASM.
  1196                                  
  1197                                  arena_owner_system  EQU 0               ; free block indication
  1198                                  
  1199                                  arena_signature_normal	EQU 4Dh		; valid signature, not end of arena
  1200                                  arena_signature_end     EQU 5Ah         ; valid signature, last block in arena
  1201                                  
  1202                                  FIRST_FIT	EQU	00000000B
  1203                                  BEST_FIT	EQU	00000001B
  1204                                  LAST_FIT	EQU	00000010B
  1205                                  
  1206                                  ; MSDOS 6.0
  1207                                  LOW_FIRST	EQU	00000000B	; M001
  1208                                  HIGH_FIRST	EQU	10000000B	; M001
  1209                                  HIGH_ONLY	EQU	01000000B	; M001
  1210                                  
  1211                                  LINKSTATE	EQU	00000001B	; M002
  1212                                  
  1213                                  HF_MASK		EQU	~HIGH_FIRST	; M001
  1214                                  HO_MASK		EQU	~HIGH_ONLY	; M001
  1215                                  
  1216                                  STRAT_MASK	EQU	HF_MASK & HO_MASK	; M001;
  1217                                  						; M026: used to mask of bits
  1218                                  						; M026: 6 & 7 of AllocMethod
  1219                                  
  1220                                  ;============================================================================
  1221                                  ; MI.INC, MSDOS 6.0, 1991
  1222                                  ;============================================================================
  1223                                  ; 07/07/2018 - Retro DOS v3.0
  1224                                  
  1225                                  ;BREAK <Machine instruction, flag definitions and character types>
  1226                                  
  1227                                  mi_INT		EQU	0CDh
  1228                                  mi_long_jmp	EQU	0EAh
  1229                                  mi_Long_CALL	EQU	09Ah
  1230                                  mi_Long_RET	EQU	0CBh
  1231                                  mi_Near_RET	EQU	0C3h
  1232                                  
  1233                                  ;			xxxxoditszxaxpxc
  1234                                  f_Overflow	EQU	0000100000000000B
  1235                                  f_Direction	EQU	0000010000000000B
  1236                                  f_Interrupt	EQU	0000001000000000B
  1237                                  f_Trace 	EQU	0000000100000000B
  1238                                  f_Sign		EQU	0000000010000000B
  1239                                  f_Zero		EQU	0000000001000000B
  1240                                  f_Aux		EQU	0000000000010000B
  1241                                  f_Parity	EQU	0000000000000100B
  1242                                  f_Carry 	EQU	0000000000000001B
  1243                                  
  1244                                  ;============================================================================
  1245                                  ; FILEMODE.INC, MSDOS 6.0, 1991
  1246                                  ;============================================================================
  1247                                  ; 13/07/2018 - Retro DOS v3.0
  1248                                  ; 29/04/2019 - Retro DOS v4.0
  1249                                  
  1250                                  ;**	Standard I/O file handles
  1251                                  
  1252                                  stdin       EQU     0
  1253                                  stdout      EQU     1
  1254                                  stderr      EQU     2
  1255                                  stdaux      EQU     3
  1256                                  stdprn      EQU     4
  1257                                  
  1258                                  ;**	File Modes
  1259                                  ; <Xenix subfunction assignments>  ; MSDOS 3.3 FILEMODE.INC
  1260                                  
  1261                                  open_for_read   EQU 0
  1262                                  open_for_write  EQU 1
  1263                                  open_for_both   EQU 2
  1264                                  
  1265                                  ; MSDOS 6.0
  1266                                  OPEN_FOR_BOTH	equ 2
  1267                                  EXEC_OPEN	equ 3	; access code of 3 indicates that open was 
  1268                                  				; made from exec
  1269                                  
  1270                                  access_mask	EQU 0Fh ; 09/08/2018
  1271                                  
  1272                                  SHARING_MASK	    equ 0F0h
  1273                                  SHARING_COMPAT	    equ 000h
  1274                                  SHARING_DENY_BOTH   equ 010h
  1275                                  SHARING_DENY_WRITE  equ 020h
  1276                                  SHARING_DENY_READ   equ 030h
  1277                                  SHARING_DENY_NONE   equ 040h
  1278                                  SHARING_NET_FCB     equ 070h
  1279                                  SHARING_NO_INHERIT  equ 080h
  1280                                  
  1281                                  ; 29/04/2019
  1282                                  
  1283                                  ;**	Extended Open Definitions
  1284                                  
  1285                                  RESERVED_BITS_MASK equ 0FE00h	; reserved bits for extended open flags
  1286                                  EXISTS_MASK	   equ 0Fh 	; "file exists" action field
  1287                                  NOT_EXISTS_MASK    equ 0F0h
  1288                                  
  1289                                  ;*	SF_MODE values
  1290                                  
  1291                                  AUTO_COMMIT_WRITE	equ 4000h
  1292                                  INT_24_ERROR		equ 2000h
  1293                                  
  1294                                  ;*	Flags in EXTOPEN_ON
  1295                                  
  1296                                  EXT_OPEN_ON		equ 01h
  1297                                  EXT_FILE_NOT_EXISTS	equ 04h
  1298                                  EXT_OPEN_I24_OFF	equ 02h
  1299                                  
  1300                                  ;*	Flags in EXTOPEN_FLAG
  1301                                  
  1302                                  ACTION_OPENED		equ 01h
  1303                                  ACTION_CREATED_OPENED	equ 02h
  1304                                  ACTION_REPLACED_OPENED	equ 03h
  1305                                  EXT_EXISTS_OPEN 	equ 01h
  1306                                  EXT_EXISTS_FAIL 	equ 00h
  1307                                  EXT_NEXISTS_CREATE	equ 10h
  1308                                  
  1309                                  ;**	Extended Open Structure
  1310                                  
  1311                                  struc EXT_OPEN_PARM
  1312 00000000 ????????                .SET_LIST:	resd 1
  1313 00000004 ????                    .NUM_OF_PARM:	resw 1
  1314                                  endstruc
  1315                                  
  1316                                  ;============================================================================
  1317                                  ; SYSCALL.INC, MSDOS 6.0, 1991
  1318                                  ;============================================================================
  1319                                  ; 29/04/2019 - Retro DOS v4.0
  1320                                  ; 09/07/2018 - Retro DOS v3.0 (SYSCALL.INC, MSDOS 3.3, 1987)
  1321                                  
  1322                                  ; <system call definitions>
  1323                                  
  1324                                  ABORT                           EQU 0   ;  0      0
  1325                                  STD_CON_INPUT                   EQU 1   ;  1      1
  1326                                  STD_CON_OUTPUT                  EQU 2   ;  2      2
  1327                                  STD_AUX_INPUT                   EQU 3   ;  3      3
  1328                                  STD_AUX_OUTPUT                  EQU 4   ;  4      4
  1329                                  STD_PRINTER_OUTPUT              EQU 5   ;  5      5
  1330                                  RAW_CON_IO                      EQU 6   ;  6      6
  1331                                  RAW_CON_INPUT                   EQU 7   ;  7      7
  1332                                  STD_CON_INPUT_NO_ECHO           EQU 8   ;  8      8
  1333                                  STD_CON_STRING_OUTPUT           EQU 9   ;  9      9
  1334                                  STD_CON_STRING_INPUT            EQU 10  ; 10      A
  1335                                  STD_CON_INPUT_STATUS            EQU 11  ; 11      B
  1336                                  STD_CON_INPUT_FLUSH             EQU 12  ; 12      C
  1337                                  DISK_RESET                      EQU 13  ; 13      D
  1338                                  SET_DEFAULT_DRIVE               EQU 14  ; 14      E
  1339                                  FCB_OPEN                        EQU 15  ; 15      F
  1340                                  FCB_CLOSE                       EQU 16  ; 16     10
  1341                                  DIR_SEARCH_FIRST                EQU 17  ; 17     11
  1342                                  DIR_SEARCH_NEXT                 EQU 18  ; 18     12
  1343                                  FCB_DELETE                      EQU 19  ; 19     13
  1344                                  FCB_SEQ_READ                    EQU 20  ; 20     14
  1345                                  FCB_SEQ_WRITE                   EQU 21  ; 21     15
  1346                                  FCB_CREATE                      EQU 22  ; 22     16
  1347                                  FCB_RENAME                      EQU 23  ; 23     17
  1348                                  GET_DEFAULT_DRIVE               EQU 25  ; 25     19
  1349                                  SET_DMA                         EQU 26  ; 26     1A
  1350                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  1351                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  1352                                  ;                                                                          ;
  1353                                  GET_DEFAULT_DPB                 EQU 31  ; 31     1F
  1354                                  ;                                                                          ;
  1355                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  1356                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  1357                                  FCB_RANDOM_READ                 EQU 33  ; 33     21
  1358                                  FCB_RANDOM_WRITE                EQU 34  ; 34     22
  1359                                  GET_FCB_FILE_LENGTH             EQU 35  ; 35     23
  1360                                  GET_FCB_POSITION                EQU 36  ; 36     24
  1361                                  SET_INTERRUPT_VECTOR            EQU 37  ; 37     25
  1362                                  CREATE_PROCESS_DATA_BLOCK       EQU 38  ; 38     26
  1363                                  FCB_RANDOM_READ_BLOCK           EQU 39  ; 39     27
  1364                                  FCB_RANDOM_WRITE_BLOCK          EQU 40  ; 40     28
  1365                                  PARSE_FILE_DESCRIPTOR           EQU 41  ; 41     29
  1366                                  GET_DATE                        EQU 42  ; 42     2A
  1367                                  SET_DATE                        EQU 43  ; 43     2B
  1368                                  GET_TIME                        EQU 44  ; 44     2C
  1369                                  SET_TIME                        EQU 45  ; 45     2D
  1370                                  SET_VERIFY_ON_WRITE             EQU 46  ; 46     2E
  1371                                  ; Extended functionality group
  1372                                  GET_DMA                         EQU 47  ; 47     2F
  1373                                  GET_VERSION                     EQU 48  ; 48     30
  1374                                  KEEP_PROCESS                    EQU 49  ; 49     31
  1375                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  1376                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  1377                                  ;                                                                          ;
  1378                                  GET_DPB                         EQU 50  ; 50     32
  1379                                  ;                                                                          ;
  1380                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  1381                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  1382                                  SET_CTRL_C_TRAPPING             EQU 51  ; 51     33
  1383                                  GET_INDOS_FLAG                  EQU 52  ; 52     34
  1384                                  GET_INTERRUPT_VECTOR            EQU 53  ; 53     35
  1385                                  GET_DRIVE_FREESPACE             EQU 54  ; 54     36
  1386                                  CHAR_OPER                       EQU 55  ; 55     37
  1387                                  INTERNATIONAL                   EQU 56  ; 56     38
  1388                                  ; XENIX CALLS
  1389                                  ;   Directory Group
  1390                                  MKDIR                           EQU 57  ; 57     39
  1391                                  RMDIR                           EQU 58  ; 58     3A
  1392                                  CHDIR                           EQU 59  ; 59     3B
  1393                                  ;   File Group
  1394                                  CREAT                           EQU 60  ; 60     3C
  1395                                  OPEN                            EQU 61  ; 61     3D
  1396                                  CLOSE                           EQU 62  ; 62     3E
  1397                                  READ                            EQU 63  ; 63     3F
  1398                                  WRITE                           EQU 64  ; 64     40
  1399                                  UNLINK                          EQU 65  ; 65     41
  1400                                  LSEEK                           EQU 66  ; 66     42
  1401                                  CHMOD                           EQU 67  ; 67     43
  1402                                  IOCTL                           EQU 68  ; 68     44
  1403                                  XDUP                            EQU 69  ; 69     45
  1404                                  XDUP2                           EQU 70  ; 70     46
  1405                                  CURRENT_DIR                     EQU 71  ; 71     47
  1406                                  ;    Memory Group
  1407                                  ALLOC                           EQU 72  ; 72     48
  1408                                  DEALLOC                         EQU 73  ; 73     49
  1409                                  SETBLOCK                        EQU 74  ; 74     4A
  1410                                  ;    Process Group
  1411                                  EXEC                            EQU 75  ; 75     4B
  1412                                  EXIT                            EQU 76  ; 76     4C
  1413                                  _WAIT				EQU 77  ; 77     4D
  1414                                  FIND_FIRST                      EQU 78  ; 78     4E
  1415                                  ;   Special Group
  1416                                  FIND_NEXT                       EQU 79  ; 79     4F
  1417                                  ; SPECIAL SYSTEM GROUP
  1418                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  1419                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  1420                                  ;                                                                          ;
  1421                                  SET_CURRENT_PDB                 EQU 80  ; 80     50
  1422                                  GET_CURRENT_PDB                 EQU 81  ; 81     51
  1423                                  GET_IN_VARS                     EQU 82  ; 82     52
  1424                                  SETDPB                          EQU 83  ; 83     53
  1425                                  ;                                                                          ;
  1426                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  1427                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  1428                                  GET_VERIFY_ON_WRITE             EQU 84  ; 84     54
  1429                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  1430                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  1431                                  ;                                                                          ;
  1432                                  DUP_PDB                         EQU 85  ; 85     55
  1433                                  ;                                                                          ;
  1434                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  1435                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  1436                                  RENAME                          EQU 86  ; 86     56
  1437                                  FILE_TIMES                      EQU 87  ; 87     57
  1438                                  ALLOCOPER			EQU 88	; 88	 58
  1439                                  ; Network extention system calls
  1440                                  GETEXTENDEDERROR		EQU 89	; 89	 59
  1441                                  CREATETEMPFILE			EQU 90	; 90	 5A
  1442                                  CREATENEWFILE			EQU 91	; 91	 5B
  1443                                  LOCKOPER			EQU 92	; 92	 5C Lock and Unlock
  1444                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  1445                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
  1446                                  ;									   ;
  1447                                  SERVERCALL			EQU 93	; 93	 5D CommitAll, ServerDOSCall,
  1448                                  					;	    CloseByName, CloseUser,
  1449                                  					;	    CloseUserProcess,
  1450                                  					;	    GetOpenFileList
  1451                                  ;									   ;
  1452                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
  1453                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  1454                                  USEROPER			EQU 94	; 94	 5E Get and Set
  1455                                  ASSINGOPER			EQU 95	; 95	 5F On, Off, Get, Set, Cancel
  1456                                  XNAMETRANS			EQU 96	; 96	 60
  1457                                  PATHPARSE			EQU 97	; 97	 61
  1458                                  GETCURRENTPSP			EQU 98	; 98	 62
  1459                                  HONGEUL 			EQU 99	; 99	 63
  1460                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  1461                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
  1462                                  ;									   ;
  1463                                  SET_PRINTER_FLAG		EQU 100 ; 100	 64
  1464                                  ;									   ;
  1465                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
  1466                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  1467                                  GETEXTCNTRY			EQU 101 ; 101	 65 
  1468                                  GETSETCDPG			EQU 102 ; 102	 66
  1469                                  EXTHANDLE			EQU 103 ; 103	 67
  1470                                  COMMIT				EQU 104 ; 104	 68
  1471                                  
  1472                                  ; 29/04/2019 - Retro DOS v4.0
  1473                                  ; (MSDOS 6.0, SYSCALL.INC, 1987)
  1474                                  
  1475                                  GetSetMediaID			EQU 105 ; 105	 69
  1476                                  IFS_IOCTL			EQU 107 ; 107	 6B
  1477                                  ExtOpen 			EQU 108 ; 108	 6C
  1478                                  
  1479                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  1480                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  1481                                  ;                                                                          ;
  1482                                  ;ifdef ROMEXEC
  1483                                  ;ROM_FIND_FIRST			EQU 109 ; 109    6D
  1484                                  ;ROM_FIND_NEXT			EQU 110 ; 110    6E
  1485                                  ;ROM_EXCLUDE			EQU 111 ; 111	 6F		; M035
  1486                                  ;endif
  1487                                  ;                                                                          ;
  1488                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  1489                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  1490                                  
  1491                                  SET_OEM_HANDLER			EQU 248 ; 248    F8
  1492                                  ;OEM_C1				EQU 249 ; 249    F9
  1493                                  ;OEM_C2				EQU 250 ; 250    FA
  1494                                  ;OEM_C3				EQU 251 ; 251    FB
  1495                                  ;OEM_C4				EQU 252 ; 252    FC
  1496                                  ;OEM_C5				EQU 253 ; 253    FD
  1497                                  ;OEM_C6				EQU 254 ; 254    FE
  1498                                  ;OEM_C7				EQU 255 ; 255    FF
  1499                                  
  1500                                  ;============================================================================
  1501                                  ; VERSIONA.INC (MSDOS 6.0, 1991)
  1502                                  ;============================================================================
  1503                                  ; 24/04/2019 - Retro DOS 4.0
  1504                                  
  1505                                  ;MAJOR_VERSION	EQU     6
  1506                                  ;;MINOR_VERSION	EQU	00
  1507                                  ;MINOR_VERSION	EQU     21  ; MSDOS 6.21
  1508                                  
  1509                                  ; 04/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  1510                                  ;MAJOR_VERSION	EQU     5
  1511                                  ;MINOR_VERSION	EQU     0
  1512                                  
  1513                                  ; 30/12/2022 - Retro DOS v4.2
  1514                                  MAJOR_VERSION	EQU     6
  1515                                  MINOR_VERSION	EQU     22
  1516                                  
  1517                                  ;============================================================================
  1518                                  ; INTNAT.INC, MSDOS 3.3, 1987
  1519                                  ;============================================================================
  1520                                  ; 09/07/2018 - Retro DOS 3.0
  1521                                  
  1522                                  ; Current structure of the data returned by the international call
  1523                                  
  1524                                  struc	INTERNAT_BLOCK		; (-*-) Same with MSDOS 2.11 & MSDOS 6.0
  1525                                  .Date_tim_format:
  1526 00000000 ????                    		RESW 1		; 0-USA, 1-EUR, 2-JAP
  1527                                  .Currency_sym:
  1528 00000002 ??????????              		RESB 5		; Currency Symbol 5 bytes
  1529                                  .Thous_sep:
  1530 00000007 ????                    		RESB 2		; Thousands separator 2 bytes
  1531                                  .Decimal_sep:
  1532 00000009 ????                    		RESB 2		; Decimal separator 2 bytes
  1533                                  .Date_sep:
  1534 0000000B ????                    		RESB 2		; Date separator 2 bytes
  1535                                  .Time_sep:
  1536 0000000D ????                    		RESB 2		; Time separator 2 bytes
  1537                                  .Bit_field:	
  1538 0000000F ??                      		RESB 1		; Bit values
  1539                                                                     ;   Bit 0 = 0 if currency symbol first
  1540                                                                     ;         = 1 if currency symbol last
  1541                                                                     ;   Bit 1 = 0 if No space after currency symbol
  1542                                                                     ;         = 1 if space after currency symbol
  1543                                  .Currency_cents:
  1544 00000010 ??                      		RESB 	1	; Number of places after currency dec point
  1545                                  .Time_24:
  1546 00000011 ??                      		RESB 	1	; 1 if 24 hour time, 0 if 12 hour time
  1547                                  .Map_call:
  1548 00000012 ????                    		RESW	1	; Address of case mapping call (DWORD)
  1549 00000014 ????                                    RESW	1       ; THIS IS TWO WORDS SO IT CAN BE INITIALIZED
  1550                                  				;  in pieces.
  1551                                  .Data_sep:
  1552 00000016 ????                    		RESB	2	; Data list separator character
  1553                                  .size:		
  1554                                  endstruc
  1555                                  
  1556                                  ; Max size of the block returned by the INTERNATIONAL call
  1557                                  
  1558                                  internat_block_max	EQU	32
  1559                                  
  1560                                  ;============================================================================
  1561                                  ; SYSVAR.INC (MSDOS 6.0, 1991)
  1562                                  ;============================================================================
  1563                                  ; 08/07/2018 - Retro DOS v3.0
  1564                                  
  1565                                  ;SysInitVars STRUC
  1566                                  struc SYSI
  1567 00000000 ????????                .DPB:	    resd 1		; DPB chain
  1568 00000004 ????????                .SFT:	    resd 1		; SFT chain
  1569 00000008 ????????                .CLOCK:	    resd 1		; CLOCK device
  1570 0000000C ????????                .CON:	    resd 1		; CON device
  1571 00000010 ????                    .MAXSEC:    resw 1		; maximum sector size
  1572 00000012 ????????                .BUF:	    resd 1		; points to Hashinitvar
  1573 00000016 ????????                .CDS:	    resd 1		; CDS list
  1574 0000001A ????????                .FCB:	    resd 1		; FCB chain
  1575 0000001E ????                    .Keep:	    resw 1		; keep count
  1576 00000020 ??                      .NUMIO:	    resb 1		; Number of block devices
  1577 00000021 ??                      .NCDS:	    resb 1		; number of CDS's
  1578 00000022 ????????                .DEV:	    resd 1		; device list
  1579                                  ; 09/07/2018
  1580                                  ; Above parameters are described in MSDOS 3.3 SYSVAR.INC (85/04/10)
  1581                                  ; Following parameters are used with MSDOS 6.0 (Retro DOS v4.0)
  1582 00000026 ????                    .ATTR:	    resw 1		; null device attribute word
  1583 00000028 ????                    .STRAT:	    resw 1		; null device strategy entry point
  1584 0000002A ????                    .INTER:	    resw 1		; null device interrupt entry point
  1585 0000002C ????????????????        .NAME:	    resb 8		; null device name
  1586 00000034 ??                      .SPLICE:    resb 1		; TRUE -> splicees being done
  1587 00000035 ????                    .IBMDOS_SIZE: resw 1		; DOS size in paragraphs
  1588 00000037 ????????                .IFS_DOSCALL@: resd 1		; IFS DOS service rountine entry
  1589 0000003B ????????                .IFS:	    resd 1		; IFS header chain
  1590 0000003F ????????                .BUFFERS:   resw 2		; BUFFERS= values (m,n)
  1591 00000043 ??                      .BOOT_DRIVE: resb 1		; boot drive A=1 B=2,..
  1592 00000044 ??                      .DWMOVE:    resb 1		; 1 if 386 machine
  1593 00000045 ????                    .EXT_MEM:   resw 1		; Extended memory size in KB.
  1594                                  endstruc
  1595                                  ;SysInitVars ENDS
  1596                                  
  1597                                  ;This is added for more information exchange between DOS, BIOS.
  1598                                  ;DOS will give the pointer to SysInitTable in ES:DI. - J.K. 5/29/86
  1599                                  
  1600                                  ;SysInitVars_Ext struc
  1601                                  struc SYSI_EXT
  1602 00000000 ????????                .SysInitVars:	resd 1		; Points to the above structure.
  1603 00000004 ????????                .Country_Tab:	resd 1		; DOS_Country_cdpg_info
  1604                                  endstruc
  1605                                  ;SysInitVars_Ext ends
  1606                                  
  1607                                  ;============================================================================
  1608                                  ; IOCTL.INC - MSDOS 6.0 - 1991
  1609                                  ;============================================================================
  1610                                  ; 09/07/2018 - Retro DOS v3.0
  1611                                  
  1612                                  ;*** J.K.
  1613                                  ;General Guide -
  1614                                  ;Category Code:
  1615                                  ; 0... .... DOS Defined
  1616                                  ; 1... .... User defined
  1617                                  ; .xxx xxxx Code
  1618                                  
  1619                                  ;Function Code:
  1620                                  ; 0... .... Return error if unsupported
  1621                                  ; 1... .... Ignore if unsupported
  1622                                  ; .0.. .... Intercepted by DOS
  1623                                  ; .1.. .... Passed to driver
  1624                                  ; ..0. .... Sends data/commands to device
  1625                                  ; ..1. .... Quries data/info from device
  1626                                  ; ...x .... Subfunction
  1627                                  ;
  1628                                  ; Note that "Sends/queries" data bit is intended only to regularize the
  1629                                  ; function set.  It plays no critical role; some functions may contain both
  1630                                  ; command and query elements. The convention is that such commands are
  1631                                  ; defined as "sends data".
  1632                                  
  1633                                  ;*****************************;*
  1634                                  ; BLOCK DRIVERS 	      ;*
  1635                                  ;*****************************;*
  1636                                  
  1637                                  ; IOCTL SUB-FUNCTIONS
  1638                                  ; (MSDOS 3.3 + MSDOS 6.0)
  1639                                  IOCTL_GET_DEVICE_INFO	EQU	0
  1640                                  IOCTL_SET_DEVICE_INFO	EQU	1
  1641                                  IOCTL_READ_HANDLE	EQU	2
  1642                                  IOCTL_WRITE_HANDLE	EQU	3
  1643                                  IOCTL_READ_DRIVE	EQU	4
  1644                                  IOCTL_WRITE_DRIVE	EQU	5
  1645                                  IOCTL_GET_INPUT_STATUS	EQU	6
  1646                                  IOCTL_GET_OUTPUT_STATUS EQU	7
  1647                                  IOCTL_CHANGEABLE?	EQU	8
  1648                                  IOCTL_DeviceLocOrRem?	EQU	9
  1649                                  IOCTL_HandleLocOrRem?	EQU	0Ah   ;10
  1650                                  IOCTL_SHARING_RETRY	EQU	0Bh   ;11
  1651                                  GENERIC_IOCTL_HANDLE	EQU	0Ch   ;12
  1652                                  GENERIC_IOCTL		EQU	0Dh   ;13
  1653                                  ; (MSDOS 6.0 + MSDOS 3.3)
  1654                                  IOCTL_GET_DRIVE_MAP 	EQU	0Eh   ;14
  1655                                  IOCTL_SET_DRIVE_MAP	EQU	0Fh   ;15
  1656                                  ; (MSDOS 6.0)
  1657                                  IOCTL_QUERY_HANDLE	EQU	10h   ;16
  1658                                  IOCTL_QUERY_BLOCK	EQU	11h   ;17
  1659                                  
  1660                                  ; GENERIC IOCTL CATEGORY CODES
  1661                                  IOC_OTHER		EQU	0	; Other device control J.K. 4/29/86
  1662                                  IOC_SE			EQU	1	; SERIAL DEVICE CONTROL
  1663                                  IOC_TC			EQU	2	; TERMINAL CONTROL
  1664                                  IOC_SC			EQU	3	; SCREEN CONTROL
  1665                                  IOC_KC			EQU	4	; KEYBOARD CONTROL
  1666                                  IOC_PC			EQU	5	; PRINTER CONTROL
  1667                                  IOC_DC			EQU	8	; DISK CONTROL (SAME AS RAWIO)
  1668                                  
  1669                                  ; GENERIC IOCTL SUB-FUNCTIONS
  1670                                  RAWIO			EQU	8
  1671                                  
  1672                                  ; RAWIO SUB-FUNCTIONS
  1673                                  ; (MSDOS 3.3 + MSDOS 6.0)
  1674                                  GET_DEVICE_PARAMETERS	EQU	60H
  1675                                  SET_DEVICE_PARAMETERS	EQU	40H
  1676                                  READ_TRACK		EQU	61H
  1677                                  WRITE_TRACK		EQU	41H
  1678                                  VERIFY_TRACK		EQU	62H
  1679                                  FORMAT_TRACK		EQU	42H
  1680                                  ; (MSDOS 6.0)
  1681                                  GET_MEDIA_ID		EQU	66h	;AN000;AN003;changed from 63h
  1682                                  SET_MEDIA_ID		EQU	46h	;AN000;AN003;changed from 43h
  1683                                  GET_ACCESS_FLAG 	EQU	67h	;AN002;AN003;Unpublished function.Changed from 64h
  1684                                  SET_ACCESS_FLAG 	EQU	47h	;AN002;AN003;Unpublished function.Changed from 44h
  1685                                  SENSE_MEDIA_TYPE	EQU	68H	;Added for 5.00
  1686                                  
  1687                                  ; SPECIAL FUNCTION FOR GET DEVICE PARAMETERS
  1688                                  BUILD_DEVICE_BPB	EQU	000000001B
  1689                                  
  1690                                  ; SPECIAL FUNCTIONS FOR SET DEVICE PARAMETERS
  1691                                  INSTALL_FAKE_BPB	EQU	000000001B
  1692                                  ONLY_SET_TRACKLAYOUT	EQU	000000010B
  1693                                  TRACKLAYOUT_IS_GOOD	EQU	000000100B
  1694                                  
  1695                                  ; SPECIAL FUNCTION FOR FORMAT TRACK
  1696                                  ; (MSDOS 3.3 + MSDOS 6.0)
  1697                                  STATUS_FOR_FORMAT	EQU	000000001B
  1698                                  ; (MSDOS 6.0)
  1699                                  DO_FAST_FORMAT		EQU	000000010B ;AN001;
  1700                                  
  1701                                  ; CODES RETURNED FROM FORMAT STATUS CALL
  1702                                  FORMAT_NO_ROM_SUPPORT	EQU	000000001B
  1703                                  FORMAT_COMB_NOT_SUPPORTED EQU	000000010B
  1704                                  
  1705                                  ; DEVICETYPE VALUES
  1706                                  ; (MSDOS 3.3 + MSDOS 6.0)
  1707                                  MAX_SECTORS_IN_TRACK	EQU	63	; MAXIMUM SECTORS ON A DISK.(Was 40 in DOS 3.2)
  1708                                  DEV_5INCH		EQU	0
  1709                                  DEV_5INCH96TPI		EQU	1
  1710                                  DEV_3INCH720KB		EQU	2
  1711                                  DEV_8INCHSS		EQU	3
  1712                                  DEV_8INCHDS		EQU	4
  1713                                  DEV_HARDDISK		EQU	5
  1714                                  DEV_OTHER		EQU	7
  1715                                  ; (MSDOS 6.0)
  1716                                  ;DEV_3INCH1440KB	EQU	7
  1717                                  DEV_3INCH2880KB		EQU	9
  1718                                  ; Retro DOS v2.0 - 26/03/2018
  1719                                  ;;DEV_TAPE		EQU	6
  1720                                  ;;DEV_ERIMO		EQU	8
  1721                                  ;DEV_3INCH2880KB	EQU	9
  1722                                  DEV_3INCH1440KB		EQU	10
  1723                                  
  1724                                  ; (MSDOS 3.3)
  1725                                  ;MAX_DEV_TYPE		EQU	7
  1726                                  
  1727                                  ; (MSDOS 6.0)
  1728                                  MAX_DEV_TYPE		EQU	10	; MAXIMUM DEVICE TYPE THAT WE
  1729                                  					; CURRENTLY SUPPORT.
  1730                                  struc A_SECTORTABLE
  1731 00000000 ????                    .ST_SECTORNUMBER:	resw	1
  1732 00000002 ????                    .ST_SECTORSIZE:		resw	1
  1733                                  .size:
  1734                                  endstruc
  1735                                  
  1736                                  ;============================================================================
  1737                                  ; DEVSYM.INC
  1738                                  ;============================================================================
  1739                                  ; 07/07/2018 - Retro DOS v3.0
  1740                                  ; 30/04/2019 - Retro DOS v4.0 (DEVSYM.INC, MSDOS 6.0, 1991)
  1741                                  
  1742                                  ;**	DevSym.inc - Device Symbols
  1743                                  
  1744                                  ; The device table list has the form:
  1745                                  struc	SYSDEV
  1746 00000000 ????????                .NEXT:		resd 1		;Pointer to next device header
  1747 00000004 ????                    .ATT:		resw 1		;Attributes of the device
  1748 00000006 ????                    .STRAT:		resw 1		;Strategy entry point
  1749 00000008 ????                    .INT:		resw 1		;Interrupt entry point
  1750 0000000A ????????????????        .NAME:		resb 8		;Name of device (only first byte used for block)
  1751                                  .size:
  1752                                  endstruc
  1753                                  
  1754                                  ;
  1755                                  ; ATTRIBUTE BIT MASKS
  1756                                  ;
  1757                                  ; CHARACTER DEVICES:
  1758                                  ;
  1759                                  ; BIT 15 -> MUST BE 1
  1760                                  ;     14 -> 1 IF THE DEVICE UNDERSTANDS IOCTL CONTROL STRINGS
  1761                                  ;     13 -> 1 IF THE DEVICE SUPPORTS OUTPUT-UNTIL-BUSY
  1762                                  ;     12 -> UNUSED
  1763                                  ;     11 -> 1 IF THE DEVICE UNDERSTANDS OPEN/CLOSE
  1764                                  ;     10 -> MUST BE 0
  1765                                  ;      9 -> MUST BE 0
  1766                                  ;      8 -> UNUSED
  1767                                  ;      7 -> UNUSED
  1768                                  ;      6 -> UNUSED
  1769                                  ;      5 -> UNUSED
  1770                                  ;      4 -> 1 IF DEVICE IS RECIPIENT OF INT 29H
  1771                                  ;      3 -> 1 IF DEVICE IS CLOCK DEVICE
  1772                                  ;      2 -> 1 IF DEVICE IS NULL DEVICE
  1773                                  ;      1 -> 1 IF DEVICE IS CONSOLE OUTPUT
  1774                                  ;      0 -> 1 IF DEVICE IS CONSOLE INPUT
  1775                                  ;
  1776                                  ; BLOCK DEVICES:
  1777                                  ;
  1778                                  ; BIT 15 -> MUST BE 0
  1779                                  ;     14 -> 1 IF THE DEVICE UNDERSTANDS IOCTL CONTROL STRINGS
  1780                                  ;     13 -> 1 IF THE DEVICE DETERMINES MEDIA BY EXAMINING THE FAT ID BYTE.
  1781                                  ;	    THIS REQUIRES THE FIRST SECTOR OF THE FAT TO *ALWAYS* RESIDE IN
  1782                                  ;	    THE SAME PLACE.
  1783                                  ;     12 -> UNUSED
  1784                                  ;     11 -> 1 IF THE DEVICE UNDERSTANDS OPEN/CLOSE/REMOVABLE MEDIA
  1785                                  ;     10 -> MUST BE 0
  1786                                  ;      9 -> MUST BE 0
  1787                                  ;      8 -> UNUSED
  1788                                  ;      7 -> UNUSED
  1789                                  ;      6 -> IF DEVICE HAS SUPPORT FOR GETMAP/SETMAP OF LOGICAL DRIVES.
  1790                                  ;	    IF THE DEVICE UNDERSTANDS GENERIC IOCTL FUNCTION CALLS.
  1791                                  ;      5 -> UNUSED
  1792                                  ;      4 -> UNUSED
  1793                                  ;      3 -> UNUSED
  1794                                  ;      2 -> UNUSED
  1795                                  ;      1 -> UNUSED
  1796                                  ;      0 -> UNUSED
  1797                                  ;
  1798                                  
  1799                                  ;Attribute bit masks
  1800                                  DEVTYP	EQU     8000H           ;Bit 15 - 1 if Char, 0 if block
  1801                                  DEVIOCTL EQU    4000H           ;Bit 14 - CONTROL mode bit
  1802                                  ISFATBYDEV EQU  2000H           ;Bit 13 - Device uses FAT ID bytes, comp media.
  1803                                  
  1804                                  ; 09/07/2018 - Retro DOS (DEVSYM.INC, MSDOS 3.3, 1987) 
  1805                                  
  1806                                  OUTTILBUSY EQU	2000H		; OUTPUT UNTIL BUSY IS ENABLED
  1807                                  ISNET	   EQU	1000H		; BIT 12 - 1 IF A NET DEVICE, 0 IF
  1808                                  				;  NOT.  CURRENTLY BLOCK ONLY.
  1809                                  DEVOPCL    EQU	0800H		; BIT 11 - 1 IF THIS DEVICE HAS
  1810                                  				;  OPEN,CLOSE AND REMOVABLE MEDIA
  1811                                  				;  ENTRY POINTS, 0 IF NOT
  1812                                  
  1813                                  EXTENTBIT  EQU	0400H		; BIT 10 - CURRENTLY 0 ON ALL DEVS
  1814                                  				;  THIS BIT IS RESERVED FOR FUTURE USE
  1815                                  				;  TO EXTEND THE DEVICE HEADER BEYOND
  1816                                  				;  ITS CURRENT FORM.
  1817                                  
  1818                                  ; NOTE BIT 9 IS CURRENTLY USED ON IBM SYSTEMS TO INDICATE "DRIVE IS SHARED".
  1819                                  ;    SEE IOCTL FUNCTION 9. THIS USE IS NOT DOCUMENTED, IT IS USED BY SOME
  1820                                  ;    OF THE UTILITIES WHICH ARE SUPPOSED TO FAIL ON SHARED DRIVES ON SERVER
  1821                                  ;    MACHINES (FORMAT,CHKDSK,RECOVER,..).
  1822                                  
  1823                                  IOQUERY	EQU	0080H		;Bit 7 - Supports generic IOCtl query
  1824                                  
  1825                                  DEV320	EQU	0040H		;BIT 6 - FOR BLOCK DEVICES, THIS
  1826                                  				;DEVICE SUPPORTS SET/GET MAP OF
  1827                                  				;LOGICAL DRIVES, AND SUPPORTS
  1828                                  				;GENERIC IOCTL CALLS.
  1829                                  				;FOR CHARACTER DEVICES, THIS
  1830                                  				;DEVICE SUPPORTS GENERIC IOCTL.
  1831                                  				;THIS IS A DOS 3.2 DEVICE DRIVER.
  1832                                  
  1833                                  ISSPEC	EQU     0010H		;Bit 4 - This device is special ; 15/03/2018
  1834                                  ;ISIBM	EQU     0010H		;Bit 4 - This device is special
  1835                                  ISCLOCK EQU     0008H           ;Bit 3 - This device is the clock device.
  1836                                  ISNULL  EQU     0004H           ;Bit 2 - This device is the null device.
  1837                                  ISCOUT  EQU     0002H           ;Bit 1 - This device is the console output.
  1838                                  ISCIN   EQU     0001H           ;Bit 0 - This device is the console input.
  1839                                  
  1840                                  EXTDRVR	EQU	0002h		;BIT 1 - BLOCK DEVICE EXTENDED DRIVER
  1841                                  				; (MSDOS 6.0, DEVSYM.INC, 1991) ; 30/04/2019
  1842                                  
  1843                                  ;Static Reguest Header
  1844                                  struc	SRHEAD
  1845 00000000 ??                      .REQLEN:	resb 1		;Length in bytes of request block
  1846 00000001 ??                      .REQUNIT:	resb 1		;Device unit number
  1847 00000002 ??                      .REQFUNC:	resb 1		;Type of request
  1848 00000003 ????                    .REQSTAT:	resw 1		;Status Word
  1849 00000005 ????????????????                	resb 8		;Reserved for queue links
  1850                                  .size:
  1851                                  endstruc
  1852                                  
  1853                                  ;Status word masks
  1854                                  STERR   EQU     8000H           ;Bit 15 - Error
  1855                                  STBUI   EQU     0200H           ;Bit 9 - Buisy
  1856                                  STDON   EQU     0100H           ;Bit 8 - Done
  1857                                  STECODE EQU     00FFH           ;Error code
  1858                                  WRECODE EQU     0
  1859                                  
  1860                                  ;Function codes
  1861                                  DINITHL EQU     26              ;Size of init header
  1862                                  DMEDHL  EQU     15              ;Size of media check header
  1863                                  DBPBHL  EQU     22              ;Size of Get BPB header
  1864                                  DRDWRHL EQU     22              ;Size of RD/WR header
  1865                                  DRDNDHL EQU     14              ;Size of non destructive read header
  1866                                  DSTATHL EQU     13              ;Size of status header
  1867                                  DFLSHL  EQU     15              ;Size of flush header
  1868                                  
  1869                                  DEVINIT EQU     0               ;Initialization
  1870                                  DEVMDCH EQU     1               ;Media check
  1871                                  DEVBPB  EQU     2               ;Get BPB
  1872                                  DEVRDIOCTL EQU  3               ;IOCTL read
  1873                                  DEVRD   EQU     4               ;Read
  1874                                  DEVRDND EQU     5               ;Non destructive read no wait (character devs)
  1875                                  DEVIST  EQU     6               ;Input status
  1876                                  DEVIFL  EQU     7               ;Input flush
  1877                                  DEVWRT  EQU     8               ;Write
  1878                                  DEVWRTV EQU     9               ;Write with verify
  1879                                  DEVOST  EQU     10              ;Output status
  1880                                  DEVOFL  EQU     11              ;Output flush
  1881                                  DEVWRIOCTL EQU  12              ;IOCTL write
  1882                                  
  1883                                  ; 09/07/2018 - Retro DOS v3.0 (DEVSYM.INC, MSDOS 3.3, 1987) 
  1884                                  DEVOPN	EQU	13		;DEVICE OPEN
  1885                                  DEVCLS	EQU	14		;DEVICE CLOSE
  1886                                  DOPCLHL EQU	13		;SIZE OF OPEN/CLOSE HEADER
  1887                                  DEVRMD	EQU	15		;REMOVABLE MEDIA
  1888                                  ; 07/08/2018 - Retro DOS v3.0
  1889                                  REMHL	EQU	13		;SIZE OF REMOVABLE MEDIA HEADER
  1890                                  GENIOCTL EQU	19
  1891                                  
  1892                                  ; THE NEXT THREE ARE USED IN DOS 4.0
  1893                                  ;		     20
  1894                                  ;		     21
  1895                                  ;		     22
  1896                                  
  1897                                  DEVGETOWN      EQU   23		;GET DEVICE OWNER
  1898                                  DEVSETOWN      EQU   24		;SET DEVICE OWNER
  1899                                  ; 18/05/2019 - Retro DOS v4.0
  1900                                  IOCTL_QUERY    EQU   25		;Query generic ioctl support
  1901                                  
  1902                                  OWNHL	       EQU   13		;SIZE OF DEVICE OWNER HEADER
  1903                                  
  1904                                  DEVOUT	       EQU   16		; OUTPUT UNTIL BUSY.
  1905                                  DEVOUTL        EQU   DEVWRT	; LENGTH OF OUTPUT UNTIL BUSY
  1906                                  
  1907                                  ; ADDED FOR DOS 5.00
  1908                                  
  1909                                  ; GENERIC IOCTL REQUEST STRUCTURE
  1910                                  ;	SEE THE DOS 4.0 DEVICE DRIVER SPEC FOR FURTHER ELABORATION.
  1911                                  
  1912                                  struc IOCTL_REQ
  1913 00000000 <res Dh>                .SRHEAD:	resb SRHEAD.size
  1914                                  				; GENERIC IOCTL ADDITION.
  1915 0000000D ??                      .MAJORFUNCTION: resb 1		;FUNCTION CODE
  1916 0000000E ??                      .MINORFUNCTION: resb 1		;FUNCTION CATEGORY
  1917 0000000F ????                    .REG_SI:	resw 1
  1918 00000011 ????                    .REG_DI:	resw 1
  1919 00000013 ????????                .GENERICIOCTL_PACKET: resd 1	; POINTER TO DATA BUFFER
  1920                                  .size: ; 07/08/2018
  1921                                  endstruc
  1922                                  
  1923                                  ; DEFINITIONS FOR IOCTL_REQ.MINORFUNCTION
  1924                                  GEN_IOCTL_WRT_TRK EQU	40H
  1925                                  GEN_IOCTL_RD_TRK  EQU	60H
  1926                                  GEN_IOCTL_FN_TST  EQU	20H	; USED TO DIFF. BET READS AND WRTS
  1927                                  
  1928                                  ;; 32-bit absolute read/write input list structure
  1929                                  
  1930                                  struc ABS_32RW
  1931 00000000 ????????                .SECTOR_RBA:	resd 1		; relative block address
  1932 00000004 ????                    .ABS_RW_COUNT:	resw 1		; number of sectors to be transferred
  1933 00000006 ????????                .BUFFER_ADDR:	resd 1		; data addrress
  1934                                  .size:
  1935                                  endstruc
  1936                                  
  1937                                  ;; media ID info
  1938                                  
  1939                                  struc MEDIA_ID_INFO
  1940 00000000 ????                    .MEDIA_level:	resw	1	; info level
  1941 00000002 ????????                .MEDIA_Serial:	resd	1	; serial #
  1942 00000006 <res Bh>                .MEDIA_Label:	resb	11	; volume label
  1943 00000011 ????????????????        .MEDIA_System:	resb	8	; system type
  1944                                  .size:
  1945                                  endstruc
  1946                                  
  1947                                  ; equates for DOS34_FLAG
  1948                                  ; (BUGBUG: why are bits 0,1,3 and 4 not defined.)
  1949                                  
  1950                                  FROM_DISK_RESET       EQU   000000000100b   ;from disk reset
  1951                                  Force_I24_Fail	      EQU   000000100000b   ;form IFS CALL BACK
  1952                                  Disable_EOF_I24       EQU   000001000000b   ;disable EOF int24 for input status
  1953                                  DBCS_VOLID	      EQU   000010000000b   ;indicate from volume id
  1954                                  DBCS_VOLID2	      EQU   000100000000b   ;indicate 8th char is DBCS
  1955                                  CTRL_BREAK_FLAG       EQU   001000000000b   ;indicate control break is input
  1956                                  SEARCH_FASTOPEN       EQU   010000000000b   ;set fastopen flag for search
  1957                                  EXEC_AWARE_REDIR      EQU   100000000000b   ;M018: this bit is set by a redir 
  1958                                  					    ;M018: that knows how to handle 
  1959                                  					    ;M018: open for exec
  1960                                  
  1961                                  NO_FROM_DISK_RESET    EQU   ~FROM_DISK_RESET	;not from disk reset
  1962                                  NO_Force_I24_Fail     EQU   ~Force_I24_Fail	;not form IFS CALL BACK
  1963                                  NO_Disable_EOF_I24    EQU   ~Disable_EOF_I24
  1964                                  
  1965                                  ;============================================================================
  1966                                  ; ERROR.INC (MSDOS 6.0, 1991)
  1967                                  ;============================================================================
  1968                                  ; 16/07/2018 - Retro DOS v3.0 
  1969                                  
  1970                                  ;**	ERROR.INC - DOS Error Codes
  1971                                  ;
  1972                                  ;    The newer (DOS 2.0 and above) "XENIX-style" calls
  1973                                  ;    return error codes through AX. If an error occurred then
  1974                                  ;    the carry bit will be set and the error code is in AX. If no error
  1975                                  ;    occurred then the carry bit is reset and AX contains returned info.
  1976                                  ;
  1977                                  ;    Since the set of error codes is being extended as we extend the operating
  1978                                  ;    system, we have provided a means for applications to ask the system for a
  1979                                  ;    recommended course of action when they receive an error.
  1980                                  ;
  1981                                  ;    The GetExtendedError system call returns a universal error, an error
  1982                                  ;    location and a recommended course of action. The universal error code is
  1983                                  ;    a symptom of the error REGARDLESS of the context in which GetExtendedError
  1984                                  ;    is issued.
  1985                                  
  1986                                  ;	2.0 error codes
  1987                                  
  1988                                  error_invalid_function		EQU	1
  1989                                  error_file_not_found		EQU	2
  1990                                  error_path_not_found		EQU	3
  1991                                  error_too_many_open_files	EQU	4
  1992                                  error_access_denied		EQU	5
  1993                                  error_invalid_handle		EQU	6
  1994                                  error_arena_trashed		EQU	7
  1995                                  error_not_enough_memory 	EQU	8
  1996                                  error_invalid_block		EQU	9
  1997                                  error_bad_environment		EQU	10
  1998                                  error_bad_format		EQU	11
  1999                                  error_invalid_access		EQU	12
  2000                                  error_invalid_data		EQU	13
  2001                                  ;**** reserved			EQU	14	; *****
  2002                                  error_invalid_drive		EQU	15
  2003                                  error_current_directory 	EQU	16
  2004                                  error_not_same_device		EQU	17
  2005                                  error_no_more_files		EQU	18
  2006                                  
  2007                                  ;	These are the universal int 24 mappings for the old INT 24 set of errors
  2008                                  
  2009                                  error_write_protect		EQU	19
  2010                                  error_bad_unit			EQU	20
  2011                                  error_not_ready 		EQU	21
  2012                                  error_bad_command		EQU	22
  2013                                  error_CRC			EQU	23
  2014                                  error_bad_length		EQU	24
  2015                                  error_seek			EQU	25
  2016                                  error_not_DOS_disk		EQU	26
  2017                                  error_sector_not_found		EQU	27
  2018                                  error_out_of_paper		EQU	28
  2019                                  error_write_fault		EQU	29
  2020                                  error_read_fault		EQU	30
  2021                                  error_gen_failure		EQU	31
  2022                                  
  2023                                  ;	the new 3.0 error codes reported through INT 24
  2024                                  
  2025                                  error_sharing_violation 	EQU	32
  2026                                  error_lock_violation		EQU	33
  2027                                  error_wrong_disk		EQU	34
  2028                                  error_FCB_unavailable		EQU	35
  2029                                  error_sharing_buffer_exceeded	EQU	36
  2030                                  error_Code_Page_Mismatched	EQU	37    ; DOS 4.00  ;AN000;
  2031                                  error_handle_EOF		EQU	38    ; DOS 4.00  ;AN000;
  2032                                  error_handle_Disk_Full		EQU	39    ; DOS 4.00  ;AN000;
  2033                                  
  2034                                  ;	New OEM network-related errors are 50-79
  2035                                  
  2036                                  error_not_supported		EQU	50
  2037                                  
  2038                                  error_net_access_denied		EQU	65	;M028
  2039                                  
  2040                                  ;	End of INT 24 reportable errors
  2041                                  
  2042                                  error_file_exists		EQU	80
  2043                                  error_DUP_FCB			EQU	81	; *****
  2044                                  error_cannot_make		EQU	82
  2045                                  error_FAIL_I24			EQU	83
  2046                                  
  2047                                  ;	New 3.0 network related error codes
  2048                                  
  2049                                  error_out_of_structures 	EQU	84
  2050                                  error_already_assigned		EQU	85
  2051                                  error_invalid_password		EQU	86
  2052                                  error_invalid_parameter 	EQU	87
  2053                                  error_NET_write_fault		EQU	88
  2054                                  error_sys_comp_not_loaded	EQU	90    ; DOS 4.00  ;AN000;
  2055                                  
  2056                                  ;	BREAK <Interrupt 24 error codes>
  2057                                  
  2058                                  ;**	Int24 Error Codes
  2059                                  
  2060                                  error_I24_write_protect 	EQU	0
  2061                                  error_I24_bad_unit		EQU	1
  2062                                  error_I24_not_ready		EQU	2
  2063                                  error_I24_bad_command		EQU	3
  2064                                  error_I24_CRC			EQU	4
  2065                                  error_I24_bad_length		EQU	5
  2066                                  error_I24_Seek			EQU	6
  2067                                  error_I24_not_DOS_disk		EQU	7
  2068                                  error_I24_sector_not_found	EQU	8
  2069                                  error_I24_out_of_paper		EQU	9
  2070                                  error_I24_write_fault		EQU	0Ah
  2071                                  error_I24_read_fault		EQU	0Bh
  2072                                  error_I24_gen_failure		EQU	0Ch
  2073                                  ; NOTE: Code 0DH is used by MT-DOS.
  2074                                  error_I24_wrong_disk		EQU	0Fh
  2075                                  
  2076                                  ;	THE FOLLOWING ARE MASKS FOR THE AH REGISTER ON Int 24
  2077                                  ;
  2078                                  ;	NOTE: ABORT is ALWAYS allowed
  2079                                  
  2080                                  Allowed_FAIL			EQU	00001000B
  2081                                  Allowed_RETRY			EQU	00010000B
  2082                                  Allowed_IGNORE			EQU	00100000B
  2083                                  
  2084                                  I24_operation			EQU	00000001B  ;Z if READ,NZ if Write
  2085                                  I24_area			EQU	00000110B  ; 00 if DOS
  2086                                  						   ; 01 if FAT
  2087                                  						   ; 10 if root DIR
  2088                                  						   ; 11 if DATA
  2089                                  I24_class			EQU	10000000B  ;Z if DISK, NZ if FAT or char
  2090                                  
  2091                                  ;	BREAK <GetExtendedError CLASSes ACTIONs LOCUSs>
  2092                                  
  2093                                  ;**	The GetExtendedError call takes an error code and returns CLASS,
  2094                                  ;	ACTION and LOCUS codes to help programs determine the proper action
  2095                                  ;	to take for error codes that they don't explicitly understand.
  2096                                  
  2097                                  ;	Values for error CLASS
  2098                                  
  2099                                  errCLASS_OutRes 	EQU	1	; Out of Resource
  2100                                  errCLASS_TempSit	EQU	2	; Temporary Situation
  2101                                  errCLASS_Auth		EQU	3	; Permission problem
  2102                                  errCLASS_Intrn		EQU	4	; Internal System Error
  2103                                  errCLASS_HrdFail	EQU	5	; Hardware Failure
  2104                                  errCLASS_SysFail	EQU	6	; System Failure
  2105                                  errCLASS_Apperr 	EQU	7	; Application Error
  2106                                  errCLASS_NotFnd 	EQU	8	; Not Found
  2107                                  errCLASS_BadFmt 	EQU	9	; Bad Format
  2108                                  errCLASS_Locked 	EQU	10	; Locked
  2109                                  errCLASS_Media		EQU	11	; Media Failure
  2110                                  errCLASS_Already	EQU	12	; Collision with Existing Item
  2111                                  errCLASS_Unk		EQU	13	; Unknown/other
  2112                                  
  2113                                  ;	Values for error ACTION
  2114                                  
  2115                                  errACT_Retry		EQU	1	; Retry
  2116                                  errACT_DlyRet		EQU	2	; Delay Retry, retry after pause
  2117                                  errACT_User		EQU	3	; Ask user to regive info
  2118                                  errACT_Abort		EQU	4	; abort with clean up
  2119                                  errACT_Panic		EQU	5	; abort immediately
  2120                                  errACT_Ignore		EQU	6	; ignore
  2121                                  errACT_IntRet		EQU	7	; Retry after User Intervention
  2122                                  
  2123                                  ;	Values for error LOCUS
  2124                                  
  2125                                  errLOC_Unk		EQU	1	; No appropriate value
  2126                                  errLOC_Disk		EQU	2	; Random Access Mass Storage
  2127                                  errLOC_Net		EQU	3	; Network
  2128                                  errLOC_SerDev		EQU	4	; Serial Device
  2129                                  errLOC_Mem		EQU	5	; Memory
  2130                                  
  2131                                  ;============================================================================
  2132                                  ; INT2A.INC (MSDOS 6.0, 1991)
  2133                                  ;============================================================================
  2134                                  ; 04/05/2019 - Retro DOS v4.0
  2135                                  
  2136                                  ;**	Int 2A functions
  2137                                  ; ---------------------------------------------------------------------------
  2138                                  ;	Int 2A is an interface to the network code; it's also overloaded
  2139                                  ;		as a critical section handler since critical sections
  2140                                  ;		were originally created to support the net.
  2141                                  ; ---------------------------------------------------------------------------
  2142                                  
  2143                                  ; ---------------------------------------------------------------------------
  2144                                  ;**	This table was created by examining the source and may not be
  2145                                  ;	complete or completely accurate - JGL
  2146                                  ;
  2147                                  ;	M010	MD	8/31/90 - Added definition for AH = 5
  2148                                  
  2149                                  ;	(ah) = 0	installation check
  2150                                  ;			   (returns ah !=0 if installed)
  2151                                  ;	(ah) = 1	cooked net bios call
  2152                                  ;	(ah) = 3	query drive shared
  2153                                  ;			   (ds:si) = "n:" asciz string
  2154                                  ;	(ah) = 4	net bios
  2155                                  ;	       (al) = 0	   cooked net bios call
  2156                                  ;	       (al) = 1	   raw net bios call
  2157                                  ;	       (al) = 2	   ???
  2158                                  ;
  2159                                  ;	(ah) = 5	Get Net Adaptor Resources. CX returns the number of
  2160                                  ;			NCBs available/outstanding. DX returns the number of
  2161                                  ;			sessions. Supposedly, this is documented in an old
  2162                                  ;			IBM PC-LAN reference. Lotus Notes uses it. DOS LAN
  2163                                  ;			Manager 2.0 Enhanced responds to it. But it should
  2164                                  ;			not be used, as it is a hack, only to get Lotus
  2165                                  ;			Notes running.
  2166                                  ;
  2167                                  ;	(ah) = 80h	enter critical section
  2168                                  ;	(ah) = 81h	leave critical section
  2169                                  ;	(ah) = 82h	free all critical sections (Leave-all)
  2170                                  ;	(ah) = 84h	entering idle loop (don't understand how this works)
  2171                                  ; ---------------------------------------------------------------------------
  2172                                  
  2173                                  ;**	Critical section definitions
  2174                                  ; ---------------------------------------------------------------------------
  2175                                  ;	Although DOS is not designed to be reentrant there are some hacks
  2176                                  ;	which various programs use to make it so, in a limited fashion.
  2177                                  ;	Both WIN386 and some servers block copy a section of the DOS data
  2178                                  ;	area so that DOS can be reentered on behalf of another thread/program.
  2179                                  ;	DOS's global data structures, such as the memory arena, are not
  2180                                  ;	in this area, so critical section indicators are used to protect
  2181                                  ;	those areas.  DOS flags a critical section by issuing an INT_IBM
  2182                                  ;	(int 2Ah) at each critical section entry and exit.  Some clients
  2183                                  ;	(such as WIN386) just don't "context switch" the DOS when one
  2184                                  ;	of these is in effect, others, such as the IBM server, go ahead
  2185                                  ;	and reenter the DOS and if they get an int 2A to reenter the same
  2186                                  ;	critical section they then switch away from that second thread and
  2187                                  ;	let the first one finish and exit the section.
  2188                                  ; ---------------------------------------------------------------------------
  2189                                  
  2190                                  ; These below are subject to leave-all sections
  2191                                  critDisk    EQU     1			; Disk I/O critical section
  2192                                  critShare   EQU     1			; Sharer I/O critical section
  2193                                  critMem     EQU     1			; memory maintenance critical section
  2194                                  critSFT     EQU     1			; sft table allocation
  2195                                  critDevice  EQU     2			; Device I/O critical section
  2196                                  critNet     EQU     5			; network critical section
  2197                                  critIFS     EQU     6			; ifsfunc critical section
  2198                                  ; These below are not subject to leave-all sections
  2199                                  critASSIGN  EQU     8			; Assign has munged a system call
  2200                                  
  2201                                  ;============================================================================
  2202                                  ; MULT.INC (MSDOS 6.0, 1991)
  2203                                  ;============================================================================
  2204                                  ; 04/05/2019 - Retro DOS v4.0
  2205                                  
  2206                                  ;Break <Multiplex channels>
  2207                                  
  2208                                  ; ---------------------------------------------------------------------------
  2209                                  ; The current set of defined multiplex channels is (* means documented):
  2210                                  ;
  2211                                  ;   Channel(h)  Issuer          Receiver    Function
  2212                                  ;      00       server          PSPRINT     print job control
  2213                                  ;     *01       print/apps      PRINT       Queueing of files
  2214                                  ;      02       BIOS            REDIR       signal open/close of printers
  2215                                  ;
  2216                                  ;      05       command         REDIR       obtain text of net int 24 message
  2217                                  ;     *06       server/assign   ASSIGN      Install check
  2218                                  ;
  2219                                  ;      08       external driver IBMBIO      interface to internal routines
  2220                                  ;
  2221                                  ;      10       sharer/server   Sharer      install check
  2222                                  ;      11       DOS/server      Redir       install check/redirection funcs
  2223                                  ;      12       sharer/redir    DOS         dos functions and structure maint
  2224                                  ;      13       MSNET           MSNET       movement of NCBs
  2225                                  ;      13       external driver IBMBIO      Reset_Int_13, allows installation
  2226                                  ;                                           of alternative INT_13 drivers after
  2227                                  ;                                           boot_up
  2228                                  ;      14 (IBM) DOS             NLSFUNC     down load NLS country info,DOS 3.3
  2229                                  ;      14 (MS)  APPS            POPUP       MSDOS 4 popup screen functions
  2230                                  ;      15       APPS            MSCDEX      CD-ROM extensions interface
  2231                                  ;      16       WIN386          WIN386      Windows communications
  2232                                  ;      17       Clipboard       WINDOWS     Clipboard interface
  2233                                  ;     *18       Applications    MS-Manger   Toggle interface to manager
  2234                                  ;      19       Shell
  2235                                  ;      1A       Ansi.sys
  2236                                  ;      1B       Fastopen,Vdisk   IBMBIO     EMS INT 67H stub handler
  2237                                  ;
  2238                                  ;      40h      OS/2
  2239                                  ;      41h      Lanman
  2240                                  ;      42h      Lanman
  2241                                  ;      43h      Himem
  2242                                  ;                               AL = 20h    reserved for Mach 20 Himem support
  2243                                  ;                               AL = 30h    reserved for Himem external A20 code
  2244                                  ;      44h      Dosextender
  2245                                  ;      45H      Windows profiler
  2246                                  ;      46h      Windows/286 DOS extender
  2247                                  ;      47h      Basic Compiler Vn. 7.0
  2248                                  ;      48h      Doskey
  2249                                  ;      49h      DOS 5.x install 
  2250                                  ;      4Ah      Multi Purpose
  2251                                  ;                multMULTSWPDSK         0 - Swap Disk in drive A (BIOS)
  2252                                  ;                multMULTGETHMAPTR      1 - Get available HMA & ptr
  2253                                  ;                multMULTALLOCHMA       2 - Allocate HMA (bx == no of bytes)
  2254                                  ;                multMULTTASKSHELL      5 - Shell/switcher API
  2255                                  ;                multMULTRPLTOM         6 - Top Of Memory for RPL support
  2256                                  ;
  2257                                  ;                multSmartdrv           10h
  2258                                  ;                multMagicdrv           11h
  2259                                  ;      4Bh      Task Switcher API
  2260                                  ;
  2261                                  ;      4Ch      APPS            APM         Advanced power management
  2262                                  ;      4Dh      Kana Kanji Converter, MSKK
  2263                                  ;
  2264                                  ;      51h      ODI real mode support driver (for Chicago)
  2265                                  ;
  2266                                  ;      53h      POWER.EXE - used for broadcasting APM events    ; M036
  2267                                  ;      54h      POWER.EXE - used for POWER API                  ; M036
  2268                                  ;
  2269                                  ;      55h      COMMAND.COM
  2270                                  ;                multCOMFIRST           0 - API to determine whether 1st
  2271                                  ;                                           instance of command.com
  2272                                  ;                multCOMFIRSTROM        1 - API to determine whether 1st
  2273                                  ;                                           instance of ROM COMMAND
  2274                                  ;      56h      Sewell Development
  2275                                  ;               INTERLNK
  2276                                  ;
  2277                                  ;      57h      Iomega Corp.
  2278                                  ;
  2279                                  ;      ABh      Unspecified IBM use
  2280                                  ;      ACh      Graphics
  2281                                  ;      ADh      NLS (toronto)
  2282                                  ;      AEh
  2283                                  ;      AFh      Mode
  2284                                  ;      B0h      GRAFTABL        GRAFTABL
  2285                                  ;
  2286                                  ;      D7h      Banyan VINES
  2287                                  ; ---------------------------------------------------------------------------
  2288                                  
  2289                                  ;MUX 00-3F reserverd for IBM
  2290                                  ;MUX 80-BF reserverd for IBM
  2291                                  
  2292                                  ;MUX 40-7F reserved for Microsoft
  2293                                  
  2294                                  ;MUX C0-FF users
  2295                                  
  2296                                  MultSHARE   EQU     10h 		; sharer
  2297                                      ;	1   MFT_enter
  2298                                      ;	2   MFTClose
  2299                                      ;	3   MFTclU
  2300                                      ;	4   MFTCloseP
  2301                                      ;	5   MFTCloN
  2302                                      ;	6   set_block
  2303                                      ;	7   clr_block
  2304                                      ;	8   chk_block
  2305                                      ;	9   MFT_get
  2306                                      ;	10  ShSave
  2307                                      ;	11  ShChk
  2308                                      ;	12  ShCol
  2309                                      ;	13  ShCloseFile
  2310                                  
  2311                                  MultNET     EQU     11h 		; Network support
  2312                                  MultIFS     EQU     11h                 ; Network support
  2313                                      ;   1   IFS_RMDIR
  2314                                      ;   2   IFS_SEQ_RMDIR
  2315                                      ;   3   IFS_MKDIR
  2316                                      ;   4   IFS_SEQ_MKDIR
  2317                                      ;   5   IFS_CHDIR
  2318                                      ;   6   IFS_CLOSE
  2319                                      ;   7   IFS_COMMIT
  2320                                      ;   8   IFS_READ
  2321                                      ;   9   IFS_WRITE
  2322                                      ;   10  IFS_LOCK
  2323                                      ;   11  IFS_UNLOCK
  2324                                      ;   12  IFS_DISK_INFO
  2325                                      ;   13  IFS_SET_FILE_ATTRIBUTE
  2326                                      ;   14  IFS_SEQ_SET_FILE_ATTRIBUTE
  2327                                      ;   15  IFS_GET_FILE_INFO
  2328                                      ;   16  IFS_SEQ_GET_FILE_INFO
  2329                                      ;   17  IFS_RENAME
  2330                                      ;   18  IFS_SEQ_RENAME
  2331                                      ;   19  IFS_DELETE
  2332                                      ;   20  IFS_SEQ_DELETE
  2333                                      ;   21  IFS_OPEN
  2334                                      ;   22  IFS_SEQ_OPEN
  2335                                      ;   23  IFS_CREATE
  2336                                      ;   24  IFS_SEQ_CREATE
  2337                                      ;   25  IFS_SEQ_SEARCH_FIRST
  2338                                      ;   26  IFS_SEQ_SEARCH_NEXT
  2339                                      ;   27  IFS_SEARCH_FIRST
  2340                                      ;   28  IFS_SEARCH_NEXT
  2341                                      ;   29  IFS_ABORT
  2342                                      ;   30  IFS_ASSOPER
  2343                                      ;   31  Printer_SET_STRING
  2344                                      ;   32  IFSFlushBuf
  2345                                      ;   33  IFSBufWrite
  2346                                      ;   34  IFSResetEnvironment
  2347                                      ;   35  IFSSpoolCheck
  2348                                      ;   36  IFSSpoolClose
  2349                                      ;   37  IFSDeviceOper
  2350                                      ;   38  IFSSpoolEchoCheck
  2351                                      ;   39      - - -   Unused   - - -
  2352                                      ;   40      - - -   Unused   - - -
  2353                                      ;   41      - - -   Unused   - - -
  2354                                      ;   42  SERVER_DOSCALL_CLOSEFILES_FOR_UID
  2355                                      ;   43  DEVICE_IOCTL
  2356                                      ;   44  IFS_UPDATE_CB
  2357                                      ;   45  IFS_FILE_XATTRIBUTES
  2358                                      ;   46  IFS_XOPEN
  2359                                      ;   47  IFS_DEPENDENT_IOCTL
  2360                                  
  2361                                  MultDOS     EQU     12h 		; DOS call back
  2362                                      ;	1   DOS_CLOSE
  2363                                      ;	2   RECSET
  2364                                      ;	3   Get DOSGROUP
  2365                                      ;	4   PATHCHRCMP
  2366                                      ;	5   OUT
  2367                                      ;	6   NET_I24_ENTRY
  2368                                      ;	7   PLACEBUF
  2369                                      ;	8   FREE_SFT
  2370                                      ;	9   BUFWRITE
  2371                                      ;	10  SHARE_VIOLATION
  2372                                      ;	11  SHARE_ERROR
  2373                                      ;	12  SET_SFT_MODE
  2374                                      ;	13  DATE16
  2375                                      ;	14  SETVISIT
  2376                                      ;	15  SCANPLACE
  2377                                      ;	16  SKIPVISIT
  2378                                      ;	17  StrCpy
  2379                                      ;	18  StrLen
  2380                                      ;	19  UCase
  2381                                      ;	20  POINTCOMP
  2382                                      ;	21  CHECKFLUSH
  2383                                      ;	22  SFFromSFN
  2384                                      ;	23  GetCDSFromDrv
  2385                                      ;	24  Get_User_Stack
  2386                                      ;	25  GetThisDrv
  2387                                      ;	26  DriveFromText
  2388                                      ;	27  SETYEAR
  2389                                      ;	28  DSUM
  2390                                      ;	29  DSLIDE
  2391                                      ;	30  StrCmp
  2392                                      ;	31  initcds
  2393                                      ;	32  pjfnfromhandle
  2394                                      ;	33  $NameTrans
  2395                                      ;	34  CAL_LK
  2396                                      ;	35  DEVNAME
  2397                                      ;	36  Idle
  2398                                      ;   37  DStrLen
  2399                                      ;   38  NLS_OPEN      DOS 3.3
  2400                                      ;   39  $CLOSE        DOS 3.3
  2401                                      ;   40  NLS_LSEEK     DOS 3.3
  2402                                      ;   41  $READ         DOS 3.3
  2403                                      ;   42  FastInit      DOS 4.0
  2404                                      ;   43  NLS_IOCTL     DOS 3.3
  2405                                      ;   44  GetDevList    DOS 3.3
  2406                                      ;   45  NLS_GETEXT    DOS 3.3
  2407                                      ;   46  MSG_RETRIEVAL DOS 4.0
  2408                                      ;   47  FAKE_VERSION  DOS 4.0
  2409                                  
  2410                                  NLSFUNC     EQU     14h 		; NLSFUNC CALL , DOS 3.3
  2411                                      ;	0   NLSInstall
  2412                                      ;	1   ChgCodePage
  2413                                      ;	2   GetExtInfo
  2414                                      ;	3   SetCodePage
  2415                                      ;	4   GetCntry
  2416                                  
  2417                                  multANSI    EQU     1Ah                 ; ANSI multiplex number
  2418                                      ;   0   INSTALL_CHECK               ; install check for ANSI
  2419                                      ;   1   IOCTL_2F                    ; 2F interface to IOCTL
  2420                                      ;   2   DA_INFO_2F                  ; J.K. Information passing to ANSI.
  2421                                  
  2422                                  multMULT        EQU     4Ah
  2423                                  multMAGIC       EQU     256*multMULT + 11h
  2424                                  multMULTRPLTOM  EQU     06h
  2425                                  
  2426                                      ;   0   swap disk function for single floppy drive m/cs
  2427                                      ;       BIOS broadcasts with cx==0, and apps who handle
  2428                                      ;       swap disk messaging set cx == -1. BIOS sets dl == requested
  2429                                      ;       drive
  2430                                      ;
  2431                                      ;   1   Get available HMA & pointer to it. Returns in BX & ES:DI
  2432                                      ;   2   Allocate HMA. BX == number of bytes in HMA to be allocated
  2433                                      ;       returns pointer in ES:DI
  2434                                      ;
  2435                                      ;   3-4 currently used by nobody
  2436                                      ;   5   Switcher API
  2437                                      ;   6   Top of Memory for RPL.
  2438                                      ;           BIOS issues INT 2f AX=4a06 & DX = Top of Mem and any RPL
  2439                                      ;           code present in TOM should respond with a new TOM in DX
  2440                                      ;           to protect itself from MSLOAD & SYSINIT tromping over it.
  2441                                      ;           SYSINIT builds an arena with owner type 8 & name 'RPL' to
  2442                                      ;           protect the RPL code from COMMAND.COM transient protion.
  2443                                      ;           It is the responsibility of RPL program to release the mem.
  2444                                      ;   7   Reserved for PROTMAN support.
  2445                                      ;  10   smartdrv 4.0
  2446                                      ;  11   dblspace api
  2447                                      ;  12   MRCI     api
  2448                                      ;  13   dblspace/mrci stealth packet api
  2449                                  
  2450                                  MultAPM     EQU     4ch             ; Obselete ???
  2451                                      ;       00h     APM_VER_CHK
  2452                                      ;       01h     APM_SUS_SYS_REQ
  2453                                      ;       FFh     APM_SUS_RES_BATT_NOTIFY
  2454                                  
  2455                                  MultPWR_BRDCST  EQU     53h     ; Used by POWER.EXE to broadcast      ; M036
  2456                                  				;  APM events                         ; M036
  2457                                  MultPWR_API     EQU     54h     ; Used for accessing POWER.EXE's API  ; M036
  2458                                  
  2459                                  ;FASTOPEN is not chained through INT 2F   ; DOS 3.3 F.C.
  2460                                  ;	  it calls Multdos 42 to set up an entry routine address
  2461                                      ;	0   Install status  (reserved)
  2462                                      ;	1   Lookup
  2463                                      ;	2   Insert
  2464                                      ;	3   Delete
  2465                                      ;	4   Purge	    (reserved)
  2466                                  
  2467                                  ;============================================================================
  2468                                  ; FIND.INC (MSDOS 6.0, 1991)
  2469                                  ;============================================================================
  2470                                  ; 17/05/2019 - Retro DOS v4.0
  2471                                  ; 09/07/2018 - Retro DOS v3.0 (MSDOS 3.3, 1987)
  2472                                  
  2473                                  ;Break	<find first/next buffer>
  2474                                  
  2475                                  struc find_buf
  2476 00000000 ??                      .drive:	    resb 1		; drive of search
  2477 00000001 <res Bh>                .name:	    resb 11		; formatted name
  2478 0000000C ??                      .sattr:	    resb 1		; attribute of search
  2479 0000000D ????                    .LastEnt:   resw 1		; LastEnt
  2480 0000000F ????                    .DirStart:  resw 1		; DirStart
  2481 00000011 ????????                .NETID:	    resb 4 ; MSDOS 6.0 	; Reserved for NET
  2482 00000015 ??                      .attr:	    resb 1		; attribute found
  2483 00000016 ????                    .time:	    resw 1		; time
  2484 00000018 ????                    .date:	    resw 1		; date
  2485 0000001A ????                    .size_l:    resw 1		; low(size)
  2486 0000001C ????                    .size_h:    resw 1		; high(size)
  2487 0000001E <res Dh>                .pname:	    resb 13		; packed name
  2488                                  .size:
  2489                                  endstruc
  2490                                  
  2491                                  ;============================================================================
  2492                                  ; DOSCNTRY.INC (MSDOS 6.0, 1991)
  2493                                  ;============================================================================
  2494                                  ; 29/04/2019 - Retro DOS v4.0
  2495                                  ; 09/07/2018 - Retro DOS v3.0 (MSDOS 3.3, 1987)
  2496                                  
  2497                                  ;Equates for COUNTRY INFORMATION.
  2498                                  SetCountryInfo	EQU	1	;country info
  2499                                  SetUcase	EQU	2	;uppercase table
  2500                                  SetLcase	EQU	3	;lowercase table (Reserved)
  2501                                  SetUcaseFile	EQU	4	;uppercase file spec table
  2502                                  SetFileList	EQU	5	;valid file character list
  2503                                  SetCollate	EQU	6	;collating sequence
  2504                                  SetDBCS 	EQU	7	;double byte character set
  2505                                  SetALL		EQU	-1	;all the entries
  2506                                  
  2507                                  ;DOS country and code page information table structure.
  2508                                  ;Internally, IBMDOS gives a pointer to this table.
  2509                                  ;IBMBIO, MODE and NLSFUNC modules communicate with IBMDOS through
  2510                                  ;this structure.
  2511                                  
  2512                                  struc  DOS_CCDPG	; DOS_country_cdpg_info
  2513 00000000 ????????????????        .ccInfo_reserved: 	resb 8	;reserved for internal use
  2514 00000008 <res 40h>               .ccPath_CountrySys:	resb 64 ;path and filename for country info
  2515 00000048 ????                    .ccSysCodePage:		resw 1	;system code page id
  2516 0000004A ????                    .ccNumber_of_entries:	resw 1  ; (default value = 6)
  2517 0000004C ??                      .ccSetUcase:		resb 1  ; (default value = SetUcase)
  2518 0000004D ????????                .ccUcase_ptr:		resd 1	;pointer to Ucase table
  2519                                  
  2520 00000051 ??                      .ccSetUcaseFile:	resb 1	; (default value = SetUcaseFile)
  2521 00000052 ????????                .ccFileUcase_ptr: 	resd 1	;pointer to File Ucase table
  2522                                  
  2523 00000056 ??                      .ccSetFileList:		resb 1 	; (default value = SetFileList)
  2524 00000057 ????????                .ccFileChar_ptr:	resd 1	;pointer to File char list table
  2525                                  
  2526 0000005B ??                      .ccSetCollate:		resb 1	; (default value = SetCollate)
  2527 0000005C ????????                .ccCollate_ptr:		resd 1	;pointer to collate table
  2528                                  
  2529                                  ; MSDOS 6.0
  2530 00000060 ??                      .ccSetDBCS:		resb 1	; (default value = SetDBCS)
  2531 00000061 ????????                .ccDBCS_ptr:		resd 1	; pointer to DBCS table
  2532                                  
  2533 00000065 ??                      .ccSetCountryInfo:	resb 1  ; (default value = SetCountryInfo)
  2534 00000066 ????                    .ccCountryInfoLen:	resw 1	;length of country info
  2535 00000068 ????                    .ccDosCountry:		resw 1	;system country code id
  2536 0000006A ????                    .ccDosCodePage:		resw 1	;system code page id
  2537 0000006C ????                    .ccDFormat:		resw 1	;date format
  2538 0000006E ??????????              .ccCurSymbol:		resb 5	;5 byte of (currency symbol+0)
  2539 00000073 ????                    .cc1000Sep:		resb 2	;2 byte of (1000 sep. + 0)
  2540 00000075 ????                    .ccDecSep:		resb 2	;2 byte of (Decimal sep. + 0)
  2541 00000077 ????                    .ccDateSep:		resb 2	;2 byte of (date sep. + 0)
  2542 00000079 ????                    .ccTimeSep:		resb 2	;2 byte of (time sep. + 0)
  2543 0000007B ??                      .ccCFormat:		resb 1	;currency format flags
  2544 0000007C ??                      .ccCSigDigits:		resb 1	;# of digits in currency
  2545 0000007D ??                      .ccTFormat:		resb 1	;time format
  2546 0000007E ????????                .ccMono_ptr:		resd 1	;monocase routine entry point
  2547 00000082 ????                    .ccListSep:		resb 2	;data list separator
  2548 00000084 <res Ah>                .ccReserved_area: 	resw 5	;reserved
  2549                                  .size:
  2550                                  endstruc
  2551                                  
  2552                                  ;Ucase table
  2553                                  struc CC_UCASE_TAB
  2554 00000000 ????                    .ccUcase_leng:		resw 1	; (default value = 128)
  2555 00000002 <res 80h>               .ccUcase_data:		resb 128
  2556                                  endstruc
  2557                                  
  2558                                  ;File Ucase table
  2559                                  struc CC_FILE_UCASE_TAB
  2560 00000000 ????                    .ccFileucase_leng:	resw 1	; (default value = 128)
  2561 00000002 <res 80h>               .ccFileucase_data:	resb 128
  2562                                  endstruc
  2563                                  
  2564                                  ;File char list
  2565                                  struc CC_FILE_CHAR_TAB
  2566 00000000 ????                    .ccFilechar_leng:	resw 1
  2567 00000002 <res 2Eh>               .ccFilechar_data:	resb 46
  2568                                  endstruc
  2569                                  
  2570                                  ;collate table
  2571                                  struc CC_COLLATE_TAB
  2572 00000000 ????                    .ccCollate_leng:	resw 1	; (default value = 128)
  2573 00000002 <res 100h>              .ccCollate_data:	resb 256
  2574                                  endstruc
  2575                                  
  2576                                  OLD_COUNTRY_SIZE  equ	(DOS_CCDPG.size - DOS_CCDPG.ccDFormat - 10)
  2577                                  NEW_COUNTRY_SIZE  equ	(DOS_CCDPG.size - DOS_CCDPG.ccDosCountry) ; 38
  2578                                  
  2579                                  ; 06/08/2018
  2580                                  ; DOSCNTRY.INC (MSDOS 6.0, 1991)
  2581                                  
  2582                                  ;CAPITALIZATION equates
  2583                                  CAP_ONE_CHAR	equ	20H
  2584                                  CAP_STRING	equ	21H
  2585                                  CAP_ASCIIZ	equ	22H
  2586                                  CHECK_YES_NO	equ	23H
  2587                                  UPPER_TABLE	equ	80H
  2588                                  
  2589                                  ;NLS_YES	equ	59H  ; 'Y'
  2590                                  ;NLS_yes2	equ	79H  ; 'y' 	
  2591                                  ;NLS_NO		equ	4EH  ; 'N'	
  2592                                  ;NLS_no2	equ	6EH  ; 'n'	
  2593                                  
  2594                                  ;============================================================================
  2595                                  ; CURDIR.INC (MSDOS 6.0, 1991)
  2596                                  ;============================================================================
  2597                                  ; 25/04/2019 - Retro DOS v4.0
  2598                                  ; 09/07/2018 - Retro DOS v3.0 (CURDIR.INC, MSDOS 3.3, 1987)
  2599                                  
  2600                                  ;BREAK <Current directory list structure>
  2601                                  
  2602                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  2603                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
  2604                                  ;									   ;
  2605                                  ; CDS items are used bu the internal routines to store cluster numbers and ;
  2606                                  ; network identifiers for each logical name.  The ID field is used dually, ;
  2607                                  ; both as net ID and for a cluster number for local devices.  In the case  ;
  2608                                  ; of local devices, the cluster number will be -1 if there is a potential  ;
  2609                                  ; of the disk being changed or if the path must be recracked.		   ;
  2610                                  ;
  2611                                  ;	Some pathnames have special preambles, such as
  2612                                  ;
  2613                                  ;		\\machine\sharename\...
  2614                                  ;	For these pathnames we can't allow ".." processing to back us
  2615                                  ;	up into the special front part of the name.  The CURDIR_END field
  2616                                  ;	holds the address of the seperator character which marks
  2617                                  ;	the split between the special preamble and the regular
  2618                                  ;	path list; ".." processing isn't allowed to back us up past
  2619                                  ;	(i.e., before) CURDIR_END
  2620                                  ;	For the root, it points at the leading /.  For net
  2621                                  ;	assignments it points at the end (nul) of the initial assignment:
  2622                                  ;	A:/	\\foo\bar	    \\foo\bar\blech\bozo
  2623                                  ;	  ^		 ^		     ^
  2624                                  
  2625                                  DIRSTRLEN	EQU	64+3		; Max length in bytes of directory strings
  2626                                  TEMPLEN 	EQU	DIRSTRLEN*2
  2627                                  
  2628                                  struc curdir	; curdir_list
  2629 00000000 <res 43h>               .text:		resb DIRSTRLEN		; text of assignment and curdir
  2630 00000043 ????                    .flags:		resw 1			; various flags
  2631 00000045 ????????                .devptr:	resd 1			; local pointer to DPB or net device
  2632 00000049 ????????                .ID:		resw 2			; cluster of current dir (net ID)
  2633 0000004D ????                    .user_word:	resw 1
  2634 0000004F ????                    .end:		resw 1			; index to ".." backup limit - see above
  2635                                  ; MSDOS 6.0
  2636 00000051 ??                      .type:		resb 1			; IFS drive (2=ifs, 4=netuse)
  2637 00000052 ????????                .ifs_hdr:	resd 1			; Ptr to File System Header
  2638 00000056 ????                    .fsda:		resb 2			; File System Dependent Data Area
  2639                                  .size:
  2640                                  endstruc
  2641                                  
  2642                                  curdirLen	EQU curdir.size	; 88	; Needed for screwed up
  2643                                  
  2644                                  %define curdir_netID curdir_ID  ; dword
  2645                                  
  2646                                  ;**	Flag values for CURDIR_FLAGS
  2647                                  
  2648                                  curdir_isnet	EQU	1000000000000000B
  2649                                  CURDIR_isifs	EQU	1000000000000000B ; MSDOS 6.0	
  2650                                  curdir_inuse	EQU	0100000000000000B
  2651                                  curdir_splice	EQU	0010000000000000B
  2652                                  curdir_local	EQU	0001000000000000B
  2653                                  
  2654                                  ;									   ;
  2655                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
  2656                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  2657                                  
  2658                                  ;============================================================================
  2659                                  ; CPMFCB.INC (MSDOS 3.3, 1987)
  2660                                  ;============================================================================
  2661                                  ; 09/07/2018 - Retro DOS v3.0
  2662                                  
  2663                                  ;BREAK <File Control Block definition>
  2664                                  
  2665                                  ;
  2666                                  ; Field definition for FCBs
  2667                                  ; The FCB has the following structure:
  2668                                  ;
  2669                                  ;	+---------------------------+
  2670                                  ;	|   Drive indicator(byte)   |
  2671                                  ;	+---------------------------+
  2672                                  ;	|    Filename (8 chars)     |
  2673                                  ;	+---------------------------+
  2674                                  ;	|    Extension (3 chars)    |
  2675                                  ;	+---------------------------+
  2676                                  ;	|   Current Extent(word)    |
  2677                                  ;	+---------------------------+
  2678                                  ;	|    Record size (word)     |
  2679                                  ;	+---------------------------+
  2680                                  ;	|    File Size (2 words)    |
  2681                                  ;	+---------------------------+
  2682                                  ;	|	Date of write	    |
  2683                                  ;	+---------------------------+
  2684                                  ;	|	Time of write	    |
  2685                                  ;	+---------------------------+
  2686                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  2687                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
  2688                                  ;									   ;
  2689                                  ;	+---------------------------+
  2690                                  ;	|   8 bytes reserved	    |
  2691                                  ;	+---------------------------+
  2692                                  ;									   ;
  2693                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
  2694                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  2695                                  ;	|    next record number     |
  2696                                  ;	+---------------------------+
  2697                                  ;	|   random record number    |
  2698                                  ;	+---------------------------+
  2699                                  ;
  2700                                  
  2701                                  struc	SYS_FCB
  2702 00000000 ??                      .drive:	resb 1
  2703 00000001 ????????????????        .name:	resb 8
  2704 00000009 ??????                  .ext:	resb 3
  2705 0000000C ????                    .EXTENT: resw 1
  2706 0000000E ????                    .RECSIZ: resw 1			; Size of record (user settable)
  2707 00000010 ????                    .FILSIZ: resw 1			; Size of file in bytes; used with the
  2708                                  				; following word
  2709 00000012 ????                    .DRVBP:	resw 1			; BP for SEARCH FIRST and SEARCH NEXT
  2710 00000014 ????                    .FDATE:	resw 1			; Date of last writing
  2711 00000016 ????                    .FTIME:	resw 1			; Time of last writing
  2712                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  2713                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
  2714                                  ;									   ;
  2715 00000018 ????????????????        .reserved: resb 8		; RESERVED
  2716                                  ;									   ;
  2717                                  ;	     C	A  V  E  A  T	  P  R	O  G  R  A  M  M  E  R		   ;
  2718                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  2719 00000020 ??                      .NR:	resb 1			; Next record
  2720 00000021 ????????                .RR:	resb 4			; Random record
  2721                                  .size:
  2722                                  endstruc
  2723                                  
  2724                                  FILDIRENT EQU SYS_FCB.FILSIZ	; Used only by SEARCH FIRST and SEARCH
  2725                                  				; NEXT
  2726                                  ; 20/07/2018
  2727                                  %define fcb_sfn	SYS_FCB.reserved ; byte
  2728                                  
  2729                                  ; Note that fcb_net_handle, fcb_nsl_drive, fcb_nsld_drive and fcb_l_drive
  2730                                  ; all must point to the same byte.  Otherwise, the FCBRegen will fail.
  2731                                  ; NOTE about this byte (fcb_nsl_drive)
  2732                                  ;   The high two bits of this byte are used as follows to indicate the FCB type
  2733                                  ;	00 means a local file or device with sharing loaded
  2734                                  ;	10 means a remote (network) file
  2735                                  ;	01 means a local file with no sharing loaded
  2736                                  ;	11 means a local device with no sharing loaded
  2737                                  
  2738                                  ; 20/07/2018
  2739                                  
  2740                                  ;
  2741                                  ; Network FCB
  2742                                  ;
  2743                                  
  2744                                  %define fcb_net_drive	SYS_FCB.reserved+1  ; byte
  2745                                  %define fcb_net_handle	SYS_FCB.reserved+2  ; word
  2746                                  %define fcb_netID	SYS_FCB.reserved+4  ; dword		
  2747                                  
  2748                                  ;
  2749                                  ; No sharing local file FCB
  2750                                  ;
  2751                                  
  2752                                  %define fcb_nsl_drive	SYS_FCB.reserved+1  ; byte
  2753                                  %define fcb_nsl_bits	SYS_FCB.reserved+2  ; byte	
  2754                                  %define fcb_nsl_firclus SYS_FCB.reserved+3  ; word	
  2755                                  %define fcb_nsl_dirsec	SYS_FCB.reserved+5  ; word
  2756                                  %define fcb_nsl_dirpos  SYS_FCB.reserved+7  ; byte
  2757                                  
  2758                                  ;
  2759                                  ; No sharing local device FCB
  2760                                  ;
  2761                                  
  2762                                  %define fcb_nsld_drive	SYS_FCB.reserved+1  ; byte	
  2763                                  %define fcb_nsld_drvptr SYS_FCB.reserved+2  ; dword
  2764                                  
  2765                                  ;
  2766                                  ; Sharing local FCB
  2767                                  ;
  2768                                  
  2769                                  %define fcb_l_drive	SYS_FCB.reserved+1  ; byte
  2770                                  %define fcb_l_firclus	SYS_FCB.reserved+2  ; word
  2771                                  %define fcb_l_mfs	SYS_FCB.reserved+4  ; word
  2772                                  %define fcb_l_attr	SYS_FCB.reserved+6  ; byte
  2773                                  
  2774                                  ;
  2775                                  ; Bogusness:  the four cases are:
  2776                                  ;
  2777                                  ;   local file	    00
  2778                                  ;   local device    40
  2779                                  ;   local sharing   C0
  2780                                  ;   network	    80
  2781                                  ;
  2782                                  ; Since sharing and network collide, we cannot use a test instruction for
  2783                                  ; deciding whether a network or a share check in involved
  2784                                  ;
  2785                                  FCBDEVICE   EQU 040h
  2786                                  FCBNETWORK  EQU 080h
  2787                                  FCBSHARE    EQU 0C0h
  2788                                  
  2789                                  ; FCBSPECIAL must be able to mask off both net and share
  2790                                  FCBSPECIAL  EQU 080h
  2791                                  FCBMASK     EQU 0C0h
  2792                                  
  2793                                  ;============================================================================
  2794                                  ; FASTOPEN.INC, MSDOS 6.0, 1991
  2795                                  ;============================================================================
  2796                                  ; 11/07/2018 - Retro DOS v3.0
  2797                                  ; 25/04/2019 - Retro DOS v4.0
  2798                                  
  2799                                  struc FEI	; FASTOPEN_EXTENDED_INFO
  2800 00000000 ??                      .dirpos:	resb 1
  2801 00000001 ????????                .dirsec:	resd 1 ; MSDOS 6.0
  2802                                  ;.dirsec:	resw 1 ; MSDOS 3.3
  2803 00000005 ????                    .clusnum:	resw 1
  2804 00000007 ????                    .lastent:	resw 1	; for search first ; MSDOS 6.0
  2805 00000009 ????                    .dirstart:	resw 1	; for search first ; MSDOS 6.0
  2806                                  .size:
  2807                                  endstruc
  2808                                  
  2809                                  ; 23/07/2018
  2810                                  ;FASTOPEN NAME CACHING Subfunctions
  2811                                  FONC_Look_up	equ	1
  2812                                  FONC_insert	equ	2
  2813                                  FONC_delete	equ	3
  2814                                  FONC_update	equ	4
  2815                                  FONC_purge	equ	5	;reserved for the future use.
  2816                                  FONC_Rename	equ	6	;AN001
  2817                                  
  2818                                  ; 27/07/2018
  2819                                  ;FastOpen Data Structure
  2820                                  struc fastopen_entry	;Fastopen Entry pointer in DOS
  2821 00000000 ????                    .entry_size:	resw 1	; = 4	; size of the following
  2822 00000002 ????????                .name_caching:	resd 1
  2823                                  ; MSDOS 6.0
  2824                                  ;.fatchain_caching: resd 1	;reserved for future use
  2825                                  .size:
  2826                                  endstruc
  2827                                  
  2828                                  ; 27/07/2018
  2829                                  ;Equates used in DOS.
  2830                                  FastOpen_Set	       equ     00000001b
  2831                                  FastOpen_Reset	       equ     11111110b
  2832                                  Lookup_Success	       equ     00000010b
  2833                                  Lookup_Reset	       equ     11111101b
  2834                                  Special_Fill_Set       equ     00000100b
  2835                                  Special_Fill_Reset     equ     11111011b
  2836                                  No_Lookup	       equ     00001000b
  2837                                  Set_For_Search	       equ     00010000b	;DCR 167
  2838                                  
  2839                                  ; 09/08/2018 
  2840                                  ; (FASTXXXX.INC, MSDOS 6.0, 1991)
  2841                                  ; Fastxxx equates
  2842                                  FastOpen_ID	   equ	   1
  2843                                  FastSeek_ID	   equ	   2
  2844                                  Fast_yes	   equ	   10000000B	 ; fastxxx flag
  2845                                  
  2846                                  ;Structure definitions
  2847                                  ;
  2848                                  struc Fasttable_Entry	 ; Fastxxx  Entry pointer in DOS
  2849 00000000 ????                    .Fast_Entry_Num: resw 1	 ; number of entries
  2850 00000002 ????????                .FastOpen_Seek:	 resd 1	 ; fastopen & fastseek entry address
  2851                                  endstruc
  2852                                  
  2853                                  ;============================================================================
  2854                                  ; LOCK.INC, MSDOS 6.0, 1991
  2855                                  ;============================================================================
  2856                                  ; 14/07/2018 - Retro DOS v3.0
  2857                                  
  2858                                  ;**	LOCK.INC - Definitions for Record Locking
  2859                                  
  2860                                  ;**	LOCK functions
  2861                                  
  2862                                  LOCK_ALL	    equ    0
  2863                                  UNLOCK_ALL	    equ    1
  2864                                  LOCK_MUL_RANGE	    equ    2
  2865                                  UNLOCK_MUL_RANGE    equ    3
  2866                                  LOCK_READ	    equ    4
  2867                                  WRITE_UNLOCK	    equ    5
  2868                                  LOCK_ADD	    equ    6
  2869                                  
  2870                                  ;**	Structure for Lock buffer
  2871                                  
  2872                                  struc LockBuf
  2873 00000000 ????????                .Lock_position:	resd 1		; file position for LOCK
  2874 00000004 ????????                .Lock_length:	resd 1		; number of bytes to LOCK
  2875                                  endstruc
  2876                                  
  2877                                  ;============================================================================
  2878                                  ; DPL.ASM, MSDOS 6.0, 1991
  2879                                  ;============================================================================
  2880                                  ; 04/08/2018 - Retro DOS v3.0
  2881                                  
  2882                                  ; (SRVCALL.ASM)
  2883                                  
  2884                                  struc DPL
  2885 00000000 ????                    .AX:	resw	1	; AX register
  2886 00000002 ????                    .BX:	resw	1	; BX register
  2887 00000004 ????                    .CX:	resw	1	; CX register
  2888 00000006 ????                    .DX:	resw	1	; DX register
  2889 00000008 ????                    .SI:	resw	1	; SI register
  2890 0000000A ????                    .DI:	resw	1	; DI register
  2891 0000000C ????                    .DS:	resw	1	; DS register
  2892 0000000E ????                    .ES:	resw	1	; ES register
  2893 00000010 ????                    .rsrvd: resw	1	; Reserved
  2894 00000012 ????                    .UID:	resw	1	; User (Machine) ID (0 = local macine)
  2895 00000014 ????                    .PID:	resw	1	; Process ID (0 = local user PID)
  2896                                  .size:
  2897                                  endstruc
  2898                                   
  2899                                  ;----------------------------------------------------------------------------
  2900                                  ; DOSDATA
  2901                                  ;----------------------------------------------------------------------------
  2902                                  ;============================================================================
  2903                                  ; 24/04/2019 - Retro DOS v4.0
  2904                                  
  2905                                  DosDataSg equ 3 ; DOS Data Segment address (dw in 'retrodos4.s')
  2906                                  		; ((just after resident IO.SYS code&data))
  2907                                  
  2908                                  ;============================================================================
  2909                                  ; WIN386.INC, MSDOS 6.0, 1991
  2910                                  ;============================================================================
  2911                                  ; 24/04/2019 - Retro DOS 4.0
  2912                                  
  2913                                  ;
  2914                                  ;  Symbols and structures relating to WIN386 support.
  2915                                  ;
  2916                                  ;  Used by files in both the DOS and the BIOS.
  2917                                  ;
  2918                                  ;  Created: 7-13-89 by MRW
  2919                                  ;
  2920                                  
  2921                                  ; WIN386 broadcast int 2fh multiplex number and subfunction numbers
  2922                                  
  2923                                  MultWin386		equ     16h	; Int 2f multiplex number
  2924                                  
  2925                                  Win386_Init		equ	05h	; Win386 initialization
  2926                                  Win386_Exit		equ	06h	; Win386 exit
  2927                                  Win386_Devcall		equ	07h	; Win386 device call out
  2928                                  Win386_InitDone		equ	08h	; Win386 initialization is complete
  2929                                  
  2930                                  ; When Win386_Devcall is broadcast, BX is the Device ID. DOS must 
  2931                                  ; answer call outs from the DOSMGR
  2932                                  
  2933                                  Win386_DOSMGR		equ	15H
  2934                                  
  2935                                  ; The following structures are used to communicate instance data to 
  2936                                  ; Win386 from the DOS and the BIOS. See Win386 API documentation
  2937                                  ; (chapter 3, "Call Out Interfaces") for further description.
  2938                                  
  2939                                  struc Win386_SIS	; Startup Info Structure
  2940 00000000 ????                     .Version:		resb	2	; db 3, 0
  2941 00000002 ????????                 .Next_Dev_Ptr:		resd	1	; pointer to next SIS in list
  2942 00000006 ????????                 .Virt_Dev_File_Ptr:	resd	1
  2943 0000000A ????????                 .Reference_Data:	resd	1
  2944 0000000E ????????                 .Instance_Data_Ptr:	resd	1	; pointer to instance data array
  2945                                  endstruc
  2946                                  
  2947                                  size_of_Win386_SIS equ 18 ; 24/04/2019 - Retro DOS v4.0
  2948                                  
  2949                                  struc Win386_IIS	; Instance Item Structure
  2950 00000000 ????????                .Ptr:			resd	1	; pointer to an instance item
  2951 00000004 ????                    .Size:			resw	1	; size of an instance item
  2952                                  endstruc
  2953                                  
  2954                                  size_of_Win386_IIS equ 6 ; 24/04/2019 - Retro DOS v4.0
  2955                                  
  2956                                  ;Win386 DOSMGR function return values to indicate operation done
  2957                                  
  2958                                  WIN_OP_DONE		equ	0B97Ch	; 
  2959                                  DOSMGR_OP_DONE		equ	0A2ABh	;
  2960                                  
  2961                                  ;M021
  2962                                  ; WInoldap callout multiplex number
  2963                                  
  2964                                  WINOLDAP		equ	46h	;
  2965                                  
  2966                                  ;============================================================================
  2967                                  ;----------------------------------------------------------------------------
  2968                                  ; DOSCODE
  2969                                  ;----------------------------------------------------------------------------
  2970                                  ; 04/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  2971                                  
  2972                                  ;============================================================================
  2973                                  ; MSHEAD.ASM (MSDOS 6.0, 1991)
  2974                                  ;============================================================================
  2975                                  ; 16/07/2018 - Retro DOS 3.0
  2976                                  ;----------------------------------------------------------------------------
  2977                                  ; 24/04/2019 - Retro DOS 4.0
  2978                                  
  2979                                  ; MSDOS 6.0
  2980                                  ;----------------------------------------------------------------------------
  2981                                  ; FILE : ORIGIN.INC
  2982                                  ;----------------------------------------------------------------------------
  2983                                  ; This is included in origin.asm and mshead.asm. Contains the equate that
  2984                                  ; is used for ORGing the DOS code.
  2985                                  ;
  2986                                  ; Brief Description of the necessacity of this ORG:
  2987                                  ; -------------------------------------------------
  2988                                  ;
  2989                                  ; A special problem exits when running out of the HMA. The HMA starts at 
  2990                                  ; address FFFF:10. There is no place in the HMA with an offset of zero.
  2991                                  ; This means programs running out off the HMA must use non-zero offset base
  2992                                  ; addresses. It also means that if we're running multiple programs from the
  2993                                  ; HMA, the base offset of each segment must atleast be as big as all of the
  2994                                  ; HMA segments that precede it.
  2995                                  ; 
  2996                                  ; One solution to this problem to ORG each module at 64K minus its size.
  2997                                  ; For instance a code segment 1234h bytes in length would org'd at edcbh.
  2998                                  ; This gives max. flexibility regarding it's location in the HMA. By 
  2999                                  ; selecting segment values between f124h and ffffh it could be located 
  3000                                  ; anywhere in the HMA. The problem with this is that programs with such 
  3001                                  ; high ORGs would not be able to run in low RAM.
  3002                                  ;
  3003                                  ; A compromise solution is to set the ORG address somewhere between 0010h
  3004                                  ; and ffffh - their size. In the particular case of the BIOS and the DOS 
  3005                                  ; the following solution has been implemented:
  3006                                  ;
  3007                                  ; The Bios Code segment will have a very small offset and run at the very
  3008                                  ; front of the HMA, after the VDISK header. THE Dos Code segment will have 
  3009                                  ; a base offset of (700+<min. size off RAM based BIOS>+<min. size of the DOS
  3010                                  ; DATA segment when DOS is running low>). This will reflect the lowest 
  3011                                  ; possible physical address at which DOS code will run, while still providing
  3012                                  ; max. possible flexibility in HMA positioning. This offset MUST NOT be 
  3013                                  ; smaller then that 20+size of Bios Code segment when running high. This is 
  3014                                  ; mostly true.
  3015                                  ;
  3016                                  ; Also this ORG'd value must be communicated to the BIOS. This is done by
  3017                                  ; putting this value after the first jmp instruction in the DOS code in
  3018                                  ; mshead.asm. 
  3019                                  ;
  3020                                  ; In order for the stripz utility to know how many zeroes to be stripped 
  3021                                  ; out, this value is placed at the beginning of the binary in origin.asm.
  3022                                  ;
  3023                                  ; Revision History:
  3024                                  ;
  3025                                  ; Currently this is being done manually. Therefore any change in the DOS DATA
  3026                                  ; Size or the BIOS size should be reflected here. --- Feb 90
  3027                                  ;
  3028                                  ; BDSIZE.INC contains the equates for BIODATASIZE, BIOCODESIZ and DOSDATASIZ.
  3029                                  ; A utility called getsize will obtain the corresponding values from msdos
  3030                                  ; and msbio.map and update the values in BDSIZ.INC if they are different. 
  3031                                  ; DOS should now be built using the batch file makedos.bat which invokes this
  3032                                  ; utility. The FORMAT of BDSIZE.INC should not be changed as getsize is 
  3033                                  ; dependant on that.				  --- Apr 3 '90
  3034                                  ;
  3035                                  ; For ROMDOS, however, there is no need to org the doscode to any location
  3036                                  ; other than zero.  Therefore the stripz utility will not need to be used,
  3037                                  ; so the offset will not need to be included at the beginning of the code
  3038                                  ; segment.  Also, the BIOS can just assume that the resident code begins
  3039                                  ; at offset zero within the segment.
  3040                                  ; 
  3041                                  ;
  3042                                  ;--------------------------------------------------------------------------
  3043                                  
  3044                                  BIODATASTART	EQU	00700h
  3045                                  ;include	bdsize.inc	; this sets the values:
  3046                                  				;	BIODATASIZ
  3047                                  				;	BIOCODESIZ
  3048                                  				;	DOSDATASIZ
  3049                                  
  3050                                  ; 05/12/2022
  3051                                  ;BIODATASIZ EQU 00910H	; 0900h for MSDOS 6.21 IO.SYS
  3052                                  			; 0900h for MSDOS 5.0 IO.SYS
  3053                                  ;BIOCODESIZ EQU 01A70H	; 1A70h for MSDOS 6.21 IO.SYS
  3054                                  			; 1A60h for MSDOS 5.0 IO.SYS
  3055                                  ;DOSDATASIZ EQU 01370H	; 1370h for MSDOS 6.21 IO.SYS
  3056                                  			; 1370h for MSDOS 5.0 IO.SYS
  3057                                  ;ifndef ROMDOS
  3058                                  ;
  3059                                  ;BYTSTART	EQU    	BIODATASTART+BIODATASIZ+BIOCODESIZ+DOSDATASIZ
  3060                                  ;PARASTART	EQU	(BYTSTART + 0FH) AND (NOT 0FH)	
  3061                                  ;
  3062                                  ;else
  3063                                  ;
  3064                                  ;BYTSTART	EQU	0
  3065                                  ;PARASTART	EQU	0
  3066                                  ;
  3067                                  ;endif ; ROMDOS
  3068                                  
  3069                                  ; 24/04/2019 - Retro DOS v4.0 - Modification
  3070                                  ; -----------------------------------------------------------------
  3071                                  ;MSDAT001E equ 136Ah ; 4970 ; for MSDOS 6.21	
  3072                                  ;MSDAT001E equ 1370h ; 4976 ; for Retro DOS v4.0 modif. 25/05/2019	
  3073                                  ;DOSDATASIZE equ MSDAT001E
  3074                                  ; 05/12/2022
  3075                                  ;DOSDATASIZE equ $ ; 29/04/2019 ; -only- for RETRO DOS v4.0 :
  3076                                  ;_PARASTART_ equ DOSDATASIZE ; segment value will point to start of
  3077                                  			    ; of DOSDATA (in low memory) while
  3078                                  			    ; dos/kernel code starts just after 
  3079                                  			    ; this data block ((org = DOSDATASIZE))
  3080                                  			    ; (in low memory or in HMA)	
  3081                                  ; -----------------------------------------------------------------
  3082                                  
  3083                                  ; 04/11/2022	
  3084                                  ; -----------------------------------------------------------------	
  3085                                  ; NOTE:
  3086                                  ; Microsoft dos programmers were calling 'IO.SYS' as dos 'BIOS'
  3087                                  ; (Also, they were calling 'ROMBIOS' as 'ROM' only!)
  3088                                  ; -----------------------------------------------------------------
  3089                                  
  3090                                  ; ----------------------------------------------------------------------------
  3091                                  ; 06/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  3092                                  ; ----------------------------------------------------------------------------
  3093                                  
  3094                                  segment .code vstart=3DD0h ; 06/12/2022
  3095                                  								
  3096                                  ; ============================================================================
  3097                                  
  3098                                  
  3099                                  ;[ORG 3DE0h]
  3100                                  
  3101                                  ;[ORG _PARASTART_]     ; [org 136Ah]
  3102                                  
  3103                                  ;[ORG 1370h] ; 25/05/2019 - Retro DOS v4.0
  3104                                  
  3105                                  	; 05/12/2022 - RetroDOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  3106                                  	PARASTART equ 3DD0h ; BIOSDATASTART+BIOSDATASIZE
  3107                                  			    ; +BIOSCODESIZE+DOSDATASIZE (rounded up)
  3108                                  	[ORG PARASTART]	
  3109                                  
  3110                                  _$STARTCODE:
  3111                                  
  3112                                  ;PARASTART:
  3113 00000000 E9C077                          JMP     DOSINIT
  3114                                  
  3115                                  	;dw	PARASTART	; PARASTART = 3DE0h for MSDOS 6.0, 6.22
  3116                                  	; 04/11/2022
  3117 00000003 [0000]                  	dw	_$STARTCODE	; PARASTART = 3DD0h for MSDOS 5.0
  3118                                  
  3119                                  BioDataSeg:
  3120 00000005 7000                    	dw	0070h		; Bios data segment fixed at 70h
  3121                                  
  3122                                  ; DosDSeg is a data word in the DOSCODE segment that is loaded with
  3123                                  ; the segment address of DOSDATA. This is purely an optimization, that
  3124                                  ; allows getting the DOS data segment without going through the 
  3125                                  ; BIOS data segment. It is used by the "getdseg" macro.
  3126                                  
  3127                                  DosDSeg:
  3128 00000007 0000                    	dw	0
  3129                                  	
  3130                                  ;============================================================================
  3131                                  ; MSTABLE.ASM (MSDOS 6.0, 1991)
  3132                                  ;============================================================================
  3133                                  ; 16/07/2018 - Retro DOS 3.0
  3134                                  ; 29/04/2019 - Retro DOS 4.0
  3135                                  
  3136                                  	; (MSDOS version)
  3137                                  	; DOSCODE:3DE9h (MSDOS 6.21, MSDOS.SYS)
  3138                                  	;db	6
  3139                                  	;db	20
  3140                                  	; 04/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS) 
  3141                                  	; DOSCODE:3DD9h (MSDOS 5.0, MSDOS.SYS)
  3142                                  	;db	5
  3143                                  	;db	0	
  3144                                  
  3145                                  	; Offset 0C78h in IBMDOS.COM (MSDOS 3.3, 1987)
  3146                                  MSVERS:				; MS-DOS version in hex for $GET_VERSION
  3147 00000009 06                      MSMAJOR: DB	MAJOR_VERSION	; DOS_MAJOR_VERSION
  3148 0000000A 16                      MSMINOR: DB	MINOR_VERSION	; DOS_MINOR_VERSION  
  3149                                  
  3150                                  ;;hkn YRTAB & MONTAB moved to DOSDATA in ms_data.asm
  3151                                  ;	I_am	YRTAB,8,<200,166,200,165,200,165,200,165>   ; [SYSTEM]
  3152                                  ;	I_am	MONTAB,12,<31,28,31,30,31,30,31,31,30,31,30,31> ; [SYSTEM]
  3153                                  
  3154                                  ; DOSTAB.ASM (MSDOS 6.0, 1991)
  3155                                  ; YRTAB & MONTAB moved from TABLE segment in ms_table.asm
  3156                                  ;
  3157                                  ;	I_am    YRTAB,8,<200,166,200,165,200,165,200,165>   
  3158                                  ;	I_am    MONTAB,12,<31,28,31,30,31,30,31,31,30,31,30,31> 
  3159                                  
  3160                                  ; This is the error code mapping table for INT 21 errors. This table defines
  3161                                  ; those error codes which are "allowed" for each system call. If the error
  3162                                  ; code ABOUT to be returned is not "allowed" for the call, the correct action
  3163                                  ; is to return the "real" error via Extended error, and one of the allowed
  3164                                  ; errors on the actual call.
  3165                                  ;
  3166                                  ; The table is organized as follows:
  3167                                  ;
  3168                                  ;    Each entry in the table is of variable size, but the first
  3169                                  ;       two bytes are always:
  3170                                  ;
  3171                                  ;       Call#,Cnt of bytes following this byte
  3172                                  ;
  3173                                  ; EXAMPLE:
  3174                                  ;       Call 61 (OPEN)
  3175                                  ;
  3176                                  ;       DB      61,5,12,3,2,4,5
  3177                                  ;
  3178                                  ;       61 is the AH INT 21 call value for OPEN.
  3179                                  ;        5 indicates that there are 5 bytes after this byte (12,3,2,4,5).
  3180                                  ;       Next five bytes are those error codes which are "allowed" on OPEN.
  3181                                  ;       The order of these values is not important EXCEPT FOR THE LAST ONE (in
  3182                                  ;       this case 5).  The last value will be the one returned on the call if
  3183                                  ;       the "real" error is not one of the allowed ones.
  3184                                  ;
  3185                                  ; There are a number of calls (for instance all of the FCB calls) for which
  3186                                  ;   there is NO entry.  This means that NO error codes are returned on this
  3187                                  ;   call, so set up an Extended error and leave the current error code alone.
  3188                                  ;
  3189                                  ; The table is terminated by a call value of 0FFh
  3190                                  
  3191                                  ;PUBLIC I21_MAP_E_TAB
  3192                                  	; 10/08/2018
  3193                                  
  3194                                  ; 29/04/2019
  3195                                  ; DOSCODE:3DE9h (MSDOS 6.21, MSDOS.SYS)
  3196                                  ; 04/11/2022
  3197                                  ; DOSCODE:3DDBh	(MSDOS 5.0 MSDOS.SYS)
  3198                                  
  3199                                  I21_MAP_E_TAB:	; LABEL	BYTE
  3200 0000000B 38020102                    DB  INTERNATIONAL,2,error_invalid_function,error_file_not_found
  3201 0000000F 3903030205                  DB  MKDIR,3,error_path_not_found,error_file_not_found,error_access_denied
  3202 00000014 3A041003                    DB  RMDIR,4,error_current_directory,error_path_not_found
  3203 00000018 0205                        DB          error_file_not_found,error_access_denied
  3204 0000001A 3B020203                    DB  CHDIR,2,error_file_not_found,error_path_not_found
  3205 0000001E 3C040302                    DB  CREAT,4,error_path_not_found,error_file_not_found
  3206 00000022 04                          DB          error_too_many_open_files
  3207 00000023 05                          DB          error_access_denied
  3208                                      ; MSDOS 6.0
  3209 00000024 3D0603020C                  DB	OPEN,6,error_path_not_found,error_file_not_found,error_invalid_access
  3210 00000029 04                          DB          error_too_many_open_files
  3211 0000002A 1A05                        DB          error_not_DOS_disk,error_access_denied
  3212                                      ; MSDOS 3.3
  3213                                      ;DB	OPEN,5,error_path_not_found,error_file_not_found,error_invalid_access
  3214                                      ;DB		error_too_many_open_files,error_access_denied
  3215 0000002C 3E0106                      DB  CLOSE,1,error_invalid_handle
  3216 0000002F 3F020605                    DB  READ,2,error_invalid_handle,error_access_denied
  3217 00000033 40020605                    DB  WRITE,2,error_invalid_handle,error_access_denied
  3218 00000037 4103030205                  DB  UNLINK,3,error_path_not_found,error_file_not_found,error_access_denied
  3219 0000003C 42020601                    DB  LSEEK,2,error_invalid_handle,error_invalid_function
  3220 00000040 4304030201                  DB  CHMOD,4,error_path_not_found,error_file_not_found,error_invalid_function
  3221 00000045 05                          DB          error_access_denied
  3222 00000046 44050F0D01                  DB  IOCTL,5,error_invalid_drive,error_invalid_data,error_invalid_function
  3223 0000004B 0605                        DB          error_invalid_handle,error_access_denied
  3224 0000004D 45020604                    DB  XDUP,2,error_invalid_handle,error_too_many_open_files
  3225 00000051 46020604                    DB  XDUP2,2,error_invalid_handle,error_too_many_open_files
  3226                                      ; MSDOS 6.0	
  3227 00000055 47021A0F                    DB  CURRENT_DIR,2,error_not_DOS_disk,error_invalid_drive
  3228                                      ; MSDOS 3.3	
  3229                                      ;DB  CURRENT_DIR,1,error_invalid_drive
  3230 00000059 48020708                    DB  ALLOC,2,error_arena_trashed,error_not_enough_memory
  3231 0000005D 49020709                    DB  DEALLOC,2,error_arena_trashed,error_invalid_block
  3232 00000061 4A03070908                  DB  SETBLOCK,3,error_arena_trashed,error_invalid_block,error_not_enough_memory
  3233 00000066 4B08030102                  DB  EXEC,8,error_path_not_found,error_invalid_function,error_file_not_found
  3234 0000006B 040B0A                      DB          error_too_many_open_files,error_bad_format,error_bad_environment
  3235 0000006E 0805                        DB          error_not_enough_memory,error_access_denied
  3236 00000070 4E03030212                  DB  FIND_FIRST,3,error_path_not_found,error_file_not_found,error_no_more_files
  3237 00000075 4F0112                      DB  FIND_NEXT,1,error_no_more_files
  3238                                      ; MSDOS 6.0
  3239 00000078 5605110302                  DB  RENAME,5,error_not_same_device,error_path_not_found,error_file_not_found
  3240 0000007D 1005                        DB		error_current_directory,error_access_denied
  3241                                      ; MSDOS 3.3
  3242                                      ;DB  RENAME,4,error_not_same_device,error_path_not_found,error_file_not_found
  3243                                      ;DB		error_access_denied
  3244                                      ; MSDOS 6.0	
  3245 0000007F 57040608                    DB  FILE_TIMES,4,error_invalid_handle,error_not_enough_memory
  3246 00000083 0D01                        DB		error_invalid_data,error_invalid_function
  3247                                      ; MSDOS 3.3	
  3248                                      ;DB  FILE_TIMES,2,error_invalid_handle,error_invalid_function
  3249 00000085 580101                      DB  ALLOCOPER,1,error_invalid_function
  3250 00000088 5A040302                    DB  CREATETEMPFILE,4,error_path_not_found,error_file_not_found
  3251 0000008C 0405                        DB          error_too_many_open_files,error_access_denied
  3252 0000008E 5B055003                    DB  CREATENEWFILE,5,error_file_exists,error_path_not_found
  3253 00000092 020405                      DB          error_file_not_found,error_too_many_open_files,error_access_denied
  3254 00000095 5C040601                    DB  LOCKOPER,4,error_invalid_handle,error_invalid_function
  3255 00000099 2421                        DB          error_sharing_buffer_exceeded,error_lock_violation
  3256 0000009B 65020102                    DB  GETEXTCNTRY,2,error_invalid_function,error_file_not_found	;DOS 3.3
  3257 0000009F 66020102                    DB  GETSETCDPG,2,error_invalid_function,error_file_not_found        ;DOS 3.3
  3258 000000A3 680106                      DB  COMMIT,1,error_invalid_handle                                   ;DOS 3.3
  3259 000000A6 67030408                    DB  EXTHANDLE,3,error_too_many_open_files,error_not_enough_memory
  3260 000000AA 01                          DB              error_invalid_function
  3261                                      ; MSDOS 6.0		
  3262 000000AB 6C0A                        DB	ExtOpen,10
  3263 000000AD 03020C                      DB	  error_path_not_found,error_file_not_found,error_invalid_access
  3264 000000B0 045008                      DB		error_too_many_open_files,error_file_exists,error_not_enough_memory
  3265 000000B3 1A0D                        DB		error_not_DOS_disk,error_invalid_data
  3266 000000B5 0105                        DB		error_invalid_function,error_access_denied
  3267 000000B7 69040F0D                    DB	GetSetMediaID,4,error_invalid_drive,error_invalid_data
  3268 000000BB 0105                        DB		error_invalid_function,error_access_denied
  3269 000000BD FF                          DB  0FFh
  3270                                  
  3271                                  ;22/12/2022
  3272                                  ;04/11/2022	
  3273                                  ;29/04/2019 - Retro DOS v4.0
  3274                                  ;============================================================================
  3275                                  ; 	Retro DOS v4.0
  3276                                  ;============================================================================
  3277 000000BE 00                      	db 	0
  3278                                  RETRODOSMSG:
  3279 000000BF 0D0A                    	db	13,10
  3280                                  	;;;db	"Retro DOS v4.0 by Erdogan Tan [2019]"
  3281                                  	;;db	"Retro DOS v4.0 by Erdogan Tan [2022]"
  3282                                  	;db	"Retro DOS v4.1 by Erdogan Tan [2022]" ; 28/12/2022
  3283 000000C1 526574726F20444F53-     	db	"Retro DOS v4.2 by Erdogan Tan [2022]" ; 30/12/2022
  3283 000000CA 2076342E3220627920-
  3283 000000D3 4572646F67616E2054-
  3283 000000DC 616E205B323032325D 
  3284 000000E5 0D0A2400                	db	13,10,"$", 0 
  3285                                  
  3286                                  ;============================================================================
  3287                                  ; MSTABLE.ASM, MSDOS 6.0, 1991
  3288                                  ;============================================================================
  3289                                  ; 11/07/2018 - Retro DOS v3.0
  3290                                  
  3291                                  	%define short_addr dw  ; 03/03/2018 - Retro DOS v2.0
  3292 000000E9 90                      align 2
  3293                                  	; IBMDOS.COM (MSDOS 3.3) - Offset 0E00h
  3294                                  
  3295                                  ; Standard Functions
  3296                                  ;DISPATCH  LABEL WORD
  3297                                  DISPATCH:
  3298                                  	; 16/07/2018 - Retro DOS v3.0
  3299                                  	; (MSDOS 3.3)
  3300                                  
  3301                                  ; 29/04/2019
  3302                                  ; DOSCODE:3E9Eh (MSDOS 6.21, MSDOS.SYS)
  3303                                  
  3304                                  ; 04/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  3305                                  ; DOSCODE:3E8Eh (MSDOS 5.0, MSDOS.SYS)
  3306                                  
  3307 000000EA [ED62]                          short_addr  _$ABORT			    ;  0      0
  3308 000000EC [AB16]                          short_addr  _$STD_CON_INPUT		    ;  1      1
  3309 000000EE [B416]                          short_addr  _$STD_CON_OUTPUT		    ;  2      2
  3310 000000F0 [6617]                          short_addr  _$STD_AUX_INPUT		    ;  3      3
  3311 000000F2 [8117]                          short_addr  _$STD_AUX_OUTPUT		    ;  4      4
  3312 000000F4 [8717]                          short_addr  _$STD_PRINTER_OUTPUT	    ;  5      5
  3313 000000F6 [F215]                          short_addr  _$RAW_CON_IO		    ;  6      6
  3314 000000F8 [1E16]                          short_addr  _$RAW_CON_INPUT		    ;  7      7
  3315 000000FA [C213]                          short_addr  _$STD_CON_INPUT_NO_ECHO	    ;  8      8
  3316 000000FC [1C14]                          short_addr  _$STD_CON_STRING_OUTPUT	    ;  9      9
  3317 000000FE [2814]                          short_addr  _$STD_CON_STRING_INPUT	    ; 10      A
  3318 00000100 [9B17]                          short_addr  _$STD_CON_INPUT_STATUS	    ; 11      B
  3319 00000102 [A517]                          short_addr  _$STD_CON_INPUT_FLUSH	    ; 12      C
  3320 00000104 [E40F]                          short_addr  _$DISK_RESET		    ; 13      D
  3321 00000106 [B90E]                          short_addr  _$SET_DEFAULT_DRIVE		    ; 14      E
  3322 00000108 [811E]                          short_addr  _$FCB_OPEN			    ; 15      F
  3323 0000010A [4B18]                          short_addr  _$FCB_CLOSE			    ; 16     10
  3324 0000010C [931F]                          short_addr  _$DIR_SEARCH_FIRST		    ; 17     11
  3325 0000010E [2520]                          short_addr  _$DIR_SEARCH_NEXT		    ; 18     12
  3326 00000110 [EA17]                          short_addr  _$FCB_DELETE		    ; 19     13
  3327 00000112 [7F1F]                          short_addr  _$FCB_SEQ_READ		    ; 20     14
  3328 00000114 [841F]                          short_addr  _$FCB_SEQ_WRITE	            ; 21     15
  3329 00000116 [651F]                          short_addr  _$FCB_CREATE		    ; 22     16
  3330 00000118 [BB18]                          short_addr  _$FCB_RENAME		    ; 23     17
  3331                                  	; 16/07/2018
  3332                                          ;short_addr _CPMFUNC			    ; 24     18	
  3333 0000011A [6506]                          short_addr  NO_OP			    ; 24     18
  3334 0000011C [B40E]                          short_addr  _$GET_DEFAULT_DRIVE		    ; 25     19
  3335 0000011E [A90E]                          short_addr  _$SET_DMA			    ; 26     1A
  3336                                  
  3337                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  3338                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  3339                                  ;                                                                          ;
  3340 00000120 [700F]                          short_addr  _$SLEAZEFUNC		    ; 27     1B
  3341 00000122 [720F]                          short_addr  _$SLEAZEFUNCDL		    ; 28     1C
  3342                                  ;                                                                          ;
  3343                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  3344                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  3345                                  
  3346                                          ;short_addr  _CPMFUNC			    ; 29     1D
  3347                                          ;short_addr  _CPMFUNC			    ; 30     1E
  3348                                  
  3349                                  ; 08/07/2018 - Retro DOS v3.0
  3350                                  ; MSDOS 6.0 - MSTABLE.ASM, 1991
  3351                                  
  3352 00000124 [6506]                  	short_addr  NO_OP			    ; 29     1D
  3353 00000126 [6506]                  	short_addr  NO_OP			    ; 30     1E
  3354                                  
  3355                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  3356                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  3357                                  ;                                                                          ;
  3358 00000128 [B40F]                          short_addr  _$GET_DEFAULT_DPB               ; 31     1F
  3359                                  ;                                                                          ;
  3360                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  3361                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  3362                                          ;short_addr _CPMFUNC			    ; 32     20
  3363                                  
  3364                                  ; 08/07/2018 - Retro DOS v3.0
  3365                                  ; MSDOS 6.0 - MSTABLE.ASM, 1991
  3366                                  
  3367 0000012A [6506]                  	short_addr  NO_OP			    ; 32     20
  3368                                  
  3369 0000012C [891F]                          short_addr  _$FCB_RANDOM_READ               ; 33     21
  3370 0000012E [8E1F]                          short_addr  _$FCB_RANDOM_WRITE              ; 34     22
  3371 00000130 [FC17]                          short_addr  _$GET_FCB_FILE_LENGTH	    ; 35     23
  3372 00000132 [D217]                          short_addr  _$GET_FCB_POSITION		    ; 36     24
  3373                                  
  3374                                  ;MAXCALL = ($-DISPATCH)/2 - 1
  3375                                  MAXCALL EQU ($-DISPATCH)/2 - 1
  3376                                  
  3377                                  ; Extended Functions
  3378 00000134 [DB0E]                          short_addr  _$SET_INTERRUPT_VECTOR	    ; 37     25
  3379                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  3380                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  3381                                  ;                                                                          ;
  3382 00000136 [F010]                          short_addr  _$CREATE_PROCESS_DATA_BLOCK	    ; 38     26
  3383                                  ;                                                                          ;
  3384                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  3385                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  3386 00000138 [7A1F]                          short_addr  _$FCB_RANDOM_READ_BLOCK	    ; 39     27
  3387 0000013A [751F]                          short_addr  _$FCB_RANDOM_WRITE_BLOCK        ; 40     28
  3388 0000013C [650F]                          short_addr  _$PARSE_FILE_DESCRIPTOR	    ; 41     29
  3389 0000013E [7B0A]                          short_addr  _$GET_DATE                      ; 42     2A
  3390 00000140 [980A]                          short_addr  _$SET_DATE                      ; 43     2B
  3391 00000142 [B70A]                          short_addr  _$GET_TIME                      ; 44     2C
  3392 00000144 [C80A]                          short_addr  _$SET_TIME                      ; 45     2D
  3393 00000146 [870C]                          short_addr  _$SET_VERIFY_ON_WRITE           ; 46     2E
  3394                                  
  3395                                  ; Extended functionality group
  3396 00000148 [950E]                          short_addr  _$GET_DMA                       ; 47     2F
  3397 0000014A [5D0C]                          short_addr  _$GET_VERSION                   ; 48     30
  3398 0000014C [9162]                          short_addr  _$KEEP_PROCESS		    ; 49     31
  3399                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  3400                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  3401                                  ;                                                                          ;
  3402 0000014E [B60F]                          short_addr  _$GET_DPB			    ; 50     32
  3403                                  ;                                                                          ;
  3404                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  3405                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  3406 00000150 [6602]                          short_addr  _$SET_CTRL_C_TRAPPING           ; 51     33
  3407 00000152 [9C0F]                          short_addr  _$GET_INDOS_FLAG                ; 52     34
  3408 00000154 [CB0E]                          short_addr  _$GET_INTERRUPT_VECTOR          ; 53     35
  3409 00000156 [6C0E]                          short_addr  _$GET_DRIVE_FREESPACE           ; 54     36
  3410 00000158 [090F]                          short_addr  _$CHAR_OPER                     ; 55     37
  3411 0000015A [8E0C]                          short_addr  _$INTERNATIONAL                 ; 56     38
  3412                                  ; XENIX CALLS
  3413                                  ;   Directory Group
  3414 0000015C [7F22]                          short_addr  _$MKDIR			    ; 57     39
  3415 0000015E [CB21]                          short_addr  _$RMDIR			    ; 58     3A
  3416 00000160 [0622]                          short_addr  _$CHDIR			    ; 59     3B
  3417                                  ;   File Group
  3418 00000162 [B570]                          short_addr  _$CREAT			    ; 60     3C
  3419 00000164 [DE6F]                          short_addr  _$OPEN			    ; 61     3D
  3420 00000166 [0A68]                          short_addr  _$CLOSE		 	    ; 62     3E
  3421 00000168 [1B69]                          short_addr  _$READ			    ; 63     3F
  3422 0000016A [8169]                          short_addr  _$WRITE			    ; 64     40
  3423 0000016C [0571]                          short_addr  _$UNLINK			    ; 65     41
  3424 0000016E [8669]                          short_addr  _$LSEEK			    ; 66     42
  3425 00000170 [C270]                          short_addr  _$CHMOD			    ; 67     43
  3426 00000172 [E022]                          short_addr  _$IOCTL			    ; 68     44
  3427 00000174 [3B6A]                          short_addr  _$DUP			    ; 69     45
  3428 00000176 [596A]                          short_addr  _$DUP2			    ; 70     46
  3429 00000178 [5C21]                          short_addr  _$CURRENT_DIR		    ; 71     47
  3430                                  ;   Memory Group
  3431 0000017A [8463]                          short_addr  _$ALLOC			    ; 72     48
  3432 0000017C [FE64]                          short_addr  _$DEALLOC                       ; 73     49
  3433 0000017E [DA64]                          short_addr  _$SETBLOCK                      ; 74     4A
  3434                                  ;   Process Group
  3435 00000180 [655C]                          short_addr  _$EXEC			    ; 75     4B
  3436 00000182 [C962]                          short_addr  _$EXIT			    ; 76     4C
  3437 00000184 [5B5C]                          short_addr  _$WAIT			    ; 77     4D
  3438 00000186 [9820]                          short_addr  _$FIND_FIRST		    ; 78     4E
  3439                                  ;   Special Group
  3440 00000188 [EE20]                          short_addr  _$FIND_NEXT			    ; 79     4F
  3441                                  ; SPECIAL SYSTEM GROUP
  3442                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  3443                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  3444                                  ;                                                                          ;
  3445 0000018A [BD02]                          short_addr  _$SET_CURRENT_PDB		    ; 80     50
  3446 0000018C [C902]                          short_addr  _$GET_CURRENT_PDB               ; 81     51
  3447 0000018E [A80F]                          short_addr  _$GET_IN_VARS                   ; 82     52
  3448 00000190 [1910]                          short_addr  _$SETDPB			    ; 83     53
  3449                                  ;                                                                          ;
  3450                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  3451                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  3452 00000192 [820C]                          short_addr  _$GET_VERIFY_ON_WRITE	    ; 84     54
  3453                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  3454                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  3455                                  ;                                                                          ;
  3456 00000194 [DF10]                          short_addr  _$DUP_PDB                       ; 85     55
  3457                                  ;                                                                          ;
  3458                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  3459                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  3460 00000196 [2B71]                          short_addr  _$RENAME			    ; 86     56
  3461 00000198 [ED69]                          short_addr  _$FILE_TIMES                    ; 87     57
  3462 0000019A [3465]                          short_addr  _$ALLOCOPER                     ; 88     58
  3463                                  
  3464                                  ; 08/07/2018 - Retro DOS v3.0
  3465                                  ; -------------------------------------------------------------------------;
  3466                                  ; MSDOS 6.0 - MSTABLE.ASM, 1991
  3467                                  
  3468                                  ; Network extention system calls
  3469 0000019C [1D0F]                          short_addr  _$GetExtendedError              ; 89     59
  3470 0000019E [B671]                          short_addr  _$CreateTempFile                ; 90     5A
  3471 000001A0 [9E71]                          short_addr  _$CreateNewFile                 ; 91     5B
  3472 000001A2 [9773]                          short_addr  _$LockOper                      ; 92     5C
  3473 000001A4 [1A66]                          short_addr  _$ServerCall                    ; 93     5D
  3474 000001A6 [236B]                          short_addr  _$UserOper                      ; 94     5E
  3475 000001A8 [886A]                          short_addr  _$AssignOper                    ; 95     5F
  3476 000001AA [786F]                          short_addr  _$NameTrans                     ; 96     60
  3477 000001AC [6506]                  	short_addr  NO_OP			    ; 97     61
  3478 000001AE [C902]                          short_addr  _$GET_CURRENT_PDB		    ; 98     62
  3479                                  ; the next call is reserved for hangool sys call
  3480                                  	; 29/04/2019 - Retro DOS v4.0 (MSDOS 6.0)
  3481 000001B0 [4A0F]                  	short_addr  _$ECS_Call			    ; 99     63
  3482                                  	;short_addr  NO_OP  ;  MSDOS 3.3	    ; 99     63
  3483                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  3484                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  3485                                  ;                                                                          ;
  3486 000001B2 [D502]                          short_addr  _$SET_PRINTER_FLAG              ; 100    64
  3487                                  ;                                                                          ;
  3488                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  3489                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  3490 000001B4 [190D]                          short_addr  _$GetExtCntry                   ; 101    65
  3491 000001B6 [180E]                          short_addr  _$GetSetCdPg                    ; 102    66
  3492 000001B8 [5768]                          short_addr  _$ExtHandle                     ; 103    67
  3493 000001BA [3D68]                          short_addr  _$COMMIT                        ; 104    68
  3494                                  
  3495                                  ; 08/07/2018
  3496                                  ; Above system calls are valid for Retro DOS v3.0 (MSDOS 3.3) 
  3497                                  ; Following system calls are valid for Retro DOS v4.0 (MSDOS 6.0)
  3498                                  
  3499                                  ; 29/04/2019 - Retro DOS v4.0 (MSDOS 6.0)
  3500 000001BC [E211]                  	short_addr  _$GSetMediaID                   ; 105    69   ;AN000;
  3501 000001BE [3D68]                  	short_addr  _$COMMIT                        ; 106    6A   ;AN000;
  3502 000001C0 [6506]                  	short_addr  NO_OP                           ; 107    6B   
  3503                                  						    ; IFS_IOCTL no longer 
  3504                                  						    ; supported
  3505 000001C2 [4C72]                  	short_addr  _$Extended_Open                 ; 108    6C   ;AN000;
  3506                                  
  3507                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  3508                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  3509                                  ;                                                                          ;
  3510                                  ;ifdef ROMEXEC
  3511                                  ;       short_addr  $ROM_FIND_FIRST	   	    ; 109    6D
  3512                                  ;       short_addr  $ROM_FIND_NEXT	   	    ; 110    6E
  3513                                  ;	short_addr  $ROM_EXCLUDE		    ; 111    6F	  ; M078
  3514                                  ;endif
  3515                                  ;                                                                          ;
  3516                                  ;            C  A  V  E  A  T     P  R  O  G  R  A  M  M  E  R             ;
  3517                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
  3518                                  
  3519                                  ;MAXCOM  = ($-DISPATCH)/2 - 1
  3520                                  
  3521                                  MAXCOM  EQU ($-DISPATCH)/2 - 1
  3522                                  
  3523                                  ; 08/07/2018 - Retro DOS v3.0
  3524                                  ; MSDOS 6.0 - MSTABLE.ASM, 1991
  3525                                  
  3526                                  ;	If 	Installed
  3527                                  
  3528                                  align 2
  3529                                  
  3530                                  ;PUBLIC FOO
  3531                                  
  3532                                  FOO:	; LABEL WORD
  3533 000001C4 [2207]                          short_addr  Leave2F
  3534                                  
  3535 000001C6 [C801]                  DTab:	DW  DOSTable
  3536                                  
  3537                                  	;PUBLIC FOO,DTAB
  3538                                  
  3539                                  	; IBMDOS.COM (MSDOS 3.3) - Offset 0ED6h
  3540                                  
  3541                                  ; 29/04/2019
  3542                                  ; DOSCODE:3F7Ch (MSDOS 6.21, MSDOS.SYS)
  3543                                  
  3544                                  
  3545                                  ; 04/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  3546                                  ; DOSCODE:3F6Ch (MSDOS 5.0, MSDOS.SYS)
  3547                                         
  3548                                  DOSTable:  ; LABEL  WORD
  3549 000001C8 30                              DB      (DOSTableEnd-DOSTable-1)/2 ; db  48
  3550 000001C9 [5109]                          short_addr  DOSInstall          ;   0 install check
  3551 000001CB [A02F]                          short_addr  DOS_CLOSE           ;   1   DOS_CLOSE
  3552 000001CD [FE0E]                          short_addr  RECSET              ;   2   RECSET
  3553 000001CF [4B09]                          short_addr  DosGetGroup         ;   3   Get DOSGROUP
  3554 000001D1 [7B51]                          short_addr  PATHCHRCMP          ;   4   PATHCHRCMP
  3555 000001D3 [B616]                          short_addr  OUTT                ;   5   OUT
  3556 000001D5 [5254]                          short_addr  NET_I24_ENTRY       ;   6   NET_I24_ENTRY
  3557 000001D7 [F559]                          short_addr  PLACEBUF            ;   7   PLACEBUF
  3558 000001D9 [9E30]                          short_addr  FREE_SFT            ;   8   FREE_SFT
  3559 000001DB [A75B]                          short_addr  BUFWRITE            ;   9   BUFWRITE
  3560 000001DD [4B74]                          short_addr  SHARE_VIOLATION     ;   10  SHARE_VIOLATION
  3561 000001DF [E62C]                          short_addr  SHARE_ERROR         ;   11  SHARE_ERROR
  3562 000001E1 [D02C]                          short_addr  SET_SFT_MODE        ;   12  SET_SFT_MODE
  3563 000001E3 [0F0B]                          short_addr  DATE16              ;   13  DATE16
  3564 000001E5 [4E12]                          short_addr  Idle		;   14      empty slot
  3565 000001E7 [EE59]                          short_addr  SCANPLACE           ;   15  SCANPLACE
  3566 000001E9 [4E12]                          short_addr  Idle		;   16      empty slot
  3567 000001EB [1B12]                          short_addr  StrCpy              ;   17  StrCpy
  3568 000001ED [3312]                          short_addr  StrLen              ;   18  StrLen
  3569 000001EF [2651]                          short_addr  UCase		;   19  UCase
  3570 000001F1 [325A]                          short_addr  POINTCOMP           ;   20  POINTCOMP
  3571 000001F3 [7E5B]                          short_addr  CHECKFLUSH          ;   21  CHECKFLUSH
  3572 000001F5 [8567]                          short_addr  SFFromSFN           ;   22  SFFromSFN
  3573 000001F7 [E86B]                          short_addr  GetCDSFromDrv       ;   23  GetCDSFromDrv
  3574 000001F9 [8F04]                          short_addr  Get_User_Stack      ;   24  Get_User_Stack
  3575 000001FB [936B]                          short_addr  GETTHISDRV          ;   25  GetThisDrv
  3576 000001FD [9D6F]                          short_addr  DriveFromText       ;   26  DriveFromText
  3577 000001FF [B90B]                          short_addr  SETYEAR             ;   27  SETYEAR
  3578 00000201 [530C]                          short_addr  DSUM                ;   28  DSUM
  3579 00000203 [AD0B]                          short_addr  DSLIDE              ;   29  DSLIDE
  3580 00000205 [F911]                          short_addr  StrCmp              ;   30  StrCmp
  3581 00000207 [D66A]                          short_addr  InitCDS             ;   31  initcds
  3582 00000209 [5267]                          short_addr  pJFNFromHandle      ;   32  pJfnFromHandle
  3583 0000020B [786F]                          short_addr  _$NameTrans		;   33  $NameTrans
  3584 0000020D [8C06]                          short_addr  CAL_LK              ;   34  CAL_LK
  3585 0000020F [8842]                          short_addr  DEVNAME             ;   35  DEVNAME
  3586 00000211 [4E12]                          short_addr  Idle                ;   36  Idle
  3587 00000213 [4112]                          short_addr  DStrLen             ;   37  DStrLen
  3588 00000215 [F212]                          short_addr  NLS_OPEN            ;   38  NLS_OPEN      DOS 3.3
  3589 00000217 [0A68]                          short_addr  _$CLOSE		;   39  $CLOSE        DOS 3.3
  3590 00000219 [F812]                          short_addr  NLS_LSEEK           ;   40  NLS_LSEEK     DOS 3.3
  3591 0000021B [1B69]                          short_addr  _$READ		;   41  $READ         DOS 3.3
  3592 0000021D [B212]                          short_addr  FastInit            ;   42  FastInit      DOS 3.4  ;AN000;
  3593 0000021F [3513]                          short_addr  NLS_IOCTL           ;   43  NLS_IOCTL     DOS 3.3
  3594 00000221 [2413]                          short_addr  GetDevList          ;   44  GetDevList    DOS 3.3
  3595 00000223 [5213]                          short_addr  NLS_GETEXT          ;   45  NLS_GETEXT    DOS 3.3
  3596                                          
  3597                                  	; 29/04/2019 - Retro DOS v4.0
  3598 00000225 [5713]                  	short_addr  MSG_RETRIEVAL	;   46  MSG_RETRIEVAL DOS 4.0  ;AN000;
  3599                                  
  3600 00000227 [6506]                  	short_addr  NO_OP		;   M006: 47  no longer supported
  3601                                  ;*** 	short_addr  Fake_Version	;   47  Fake_Version  DOS 4.0  ;AN006;
  3602                                  
  3603                                  DOSTableEnd:  ; LABEL BYTE
  3604                                  
  3605                                  	;ENDIF
  3606                                  
  3607                                  ; ----------------------------------------------------------------------------
  3608                                  ; BREAK   <Copyright notice and version>
  3609                                  ; ----------------------------------------------------------------------------
  3610                                  
  3611                                  ;CODSTRT EQU	$
  3612                                  
  3613                                  ; 08/07/2018 - Retro DOS v3.0 by Erdogan Tan
  3614                                  ; (MSTABLE.ASM, MSDOS 6.0, 1991)
  3615                                  
  3616                                  ; NOTE WARNING: This declaration of HEADER must be THE LAST thing in this
  3617                                  ;       module. The reason is so that the data alignments are the same in
  3618                                  ;       IBM-DOS and MS-DOS up through header.
  3619                                  
  3620                                  	;PUBLIC	HEADER
  3621                                  
  3622                                  HEADER:	; LABEL	BYTE
  3623                                          ;IF	DEBUG
  3624                                          ;DB	13,10,"Debugging DOS version "
  3625                                          ;DB	MAJOR_VERSION + "0"
  3626                                          ;DB	"."
  3627                                          ;DB	(MINOR_VERSION / 10) + "0"
  3628                                          ;DB	(MINOR_VERSION MOD 10) + "0"
  3629                                          ;ENDIF
  3630                                  
  3631                                  ; 05/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  3632                                  ; (MSDOS 5.0 MSDOS.SYS compatibility)
  3633                                  %if 0
  3634                                          ;IF	NOT IBM
  3635                                          DB	13,10,"MS-DOS version "
  3636                                          DB	MAJOR_VERSION + "0"
  3637                                          DB	"."
  3638                                          DB	(MINOR_VERSION / 10) + "0"
  3639                                          ;DB	(MINOR_VERSION MOD 10) + "0"
  3640                                          DB	(MINOR_VERSION % 10) + "0"
  3641                                  
  3642                                          ;IF	HIGHMEM
  3643                                          ;DB	"H"
  3644                                          ;ENDIF
  3645                                  
  3646                                  	;DB	13,10,"Copyright 1981,82,83,84,88 Microsoft Corp.",13,10,"$"
  3647                                  	; 30/04/2019 - Retro DOS v4.0
  3648                                  	DB	13,10,"Copyright 1981-1993 Microsoft Corp.",13,10,"$"	
  3649                                  
  3650                                  	;ENDIF
  3651                                  
  3652                                  %endif
  3653                                  
  3654                                  ;IF DEBUG
  3655                                  ;	DB	13,10,"$"
  3656                                  ;ENDIF
  3657                                  
  3658                                  ;include copyrigh.inc
  3659                                  
  3660                                  ; DOSCODE:3FDDh (MSDOS 6.21, MSDOS.SYS)
  3661                                  
  3662                                  	;DB	"MS DOS Version 6 (C)Copyright 1981-1993 Microsoft Corp "
  3663                                  	;DB	"Licensed Material - Property of Microsoft "
  3664                                  	;DB	"All rights reserved "
  3665                                  
  3666                                  ; 05/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  3667                                  ; DOSCODE:3FCDh (MSDOS 5.0, MSDOS.SYS)
  3668                                  
  3669                                  ; 28/12/2022 - Retro DOS v4.1
  3670                                  %if 0
  3671                                  	; 05/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  3672                                  ms_copyright:
  3673                                  	db	'MS DOS Version 5.00 (C)Copyright 1981-1991 Microsoft Corp '
  3674                                  	db	'Licensed Material - Property of Microsoft '
  3675                                  	db	'All rights reserved '
  3676                                  
  3677                                  %endif
  3678                                  	; 28/12/2022 - Retro DOS v4.1
  3679                                  ms_copyright:
  3680 00000229 0D0A4D5320444F5320-       	db	13,10,"MS DOS Version 5.0"
  3680 00000232 56657273696F6E2035-
  3680 0000023B 2E30               
  3681 0000023D 0D0A436F7079726967-     	db	13,10,"Copyright 1981-1991 Microsoft Corp.",13,10,"$",0	
  3681 00000246 687420313938312D31-
  3681 0000024F 393931204D6963726F-
  3681 00000258 736F667420436F7270-
  3681 00000261 2E0D0A2400         
  3682                                  
  3683                                  ;============================================================================
  3684                                  ; MSCODE.ASM
  3685                                  ;============================================================================
  3686                                  
  3687                                  ; Retro DOS v2.0 (NASM 2.11) source code modifications by Erdogan Tan
  3688                                  ; 03/03/2018
  3689                                  
  3690                                  ;
  3691                                  ; MSCODE.ASM -- MSDOS code
  3692                                  ;
  3693                                  
  3694                                  ;INCLUDE DOSSEG.ASM
  3695                                  ;INCLUDE STDSW.ASM
  3696                                  
  3697                                  ;CODE    SEGMENT BYTE PUBLIC  'CODE'
  3698                                  ;ASSUME  CS:DOSGROUP,DS:NOTHING,ES:NOTHING,SS:NOTHING
  3699                                  
  3700                                  ;.xcref
  3701                                  ;INCLUDE DOSSYM.ASM
  3702                                  ;INCLUDE DEVSYM.ASM
  3703                                  ;.cref
  3704                                  ;.list
  3705                                  
  3706                                  ;IFNDEF  KANJI
  3707                                  ;KANJI   EQU     0       ; FALSE
  3708                                  ;ENDIF
  3709                                  
  3710                                  ;IFNDEF  IBM
  3711                                  ;IBM     EQU     0
  3712                                  ;ENDIF
  3713                                  
  3714                                  ;IFNDEF  HIGHMEM
  3715                                  ;HIGHMEM  EQU     0
  3716                                  ;ENDIF
  3717                                  
  3718                                          ;i_need  USER_SP,WORD
  3719                                          ;i_need  USER_SS,WORD
  3720                                          ;i_need  SAVEDS,WORD
  3721                                          ;i_need  SAVEBX,WORD
  3722                                          ;i_need  INDOS,BYTE
  3723                                          ;i_need  NSP,WORD
  3724                                          ;i_need  NSS,WORD
  3725                                          ;i_need  CURRENTPDB,WORD
  3726                                          ;i_need  AUXSTACK,BYTE
  3727                                          ;i_need  CONSWAP,BYTE
  3728                                          ;i_need  IDLEINT,BYTE
  3729                                          ;i_need  NOSETDIR,BYTE
  3730                                          ;i_need  ERRORMODE,BYTE
  3731                                          ;i_need  IOSTACK,BYTE
  3732                                          ;i_need  WPERR,BYTE
  3733                                          ;i_need  DSKSTACK,BYTE
  3734                                          ;i_need  CNTCFLAG,BYTE
  3735                                          ;i_need  LEAVEADDR,WORD
  3736                                          ;i_need  NULLDEVPT,DWORD
  3737                                  
  3738                                          ;IF NOT IBM
  3739                                          ;i_need  OEM_HANDLER,DWORD
  3740                                          ;ENDIF
  3741                                  
  3742                                          ;EXTRN   DSKSTATCHK:NEAR,GETBP:NEAR,DSKREAD:NEAR,DSKWRITE:NEAR
  3743                                  
  3744                                  ;============================================================================
  3745                                  ; MSDISP.ASM, MSDOS 6.0, 1991
  3746                                  ;============================================================================
  3747                                  ; 11/07/2018 - Retro DOS v3.0
  3748                                  ; 01/05/2019 - Retro DOS v4.0
  3749                                  
  3750                                  ; DosCode SEGMENT
  3751                                  
  3752                                  ; ==========================================================================
  3753                                  ;
  3754                                  ; $Set_CTRL_C_Trapping
  3755                                  ;
  3756                                  ; Function:
  3757                                  ;	Enable disable ^C checking in dispatcher
  3758                                  ;
  3759                                  ; Inputs:
  3760                                  ;		AL = 0 read ^C status
  3761                                  ;		AL = 1 Set ^C status, DL = 0/1 for ^C off/on
  3762                                  ;		AL = 2 Set ^C status to contents of DL.	Output is old state.
  3763                                  ;		AL = 5 get DOS boot drive
  3764                                  ;		AL = 6 Get version number
  3765                                  ;			RETURNS:
  3766                                  ;				BH = Minor version number
  3767                                  ;				BL = Major version number
  3768                                  ;				DL = DOS internal revision
  3769                                  ;				DH = DOS type flags
  3770                                  ;					Bit 3 	- DOS in ROM
  3771                                  ;					Bit 4 	- DOS in HMA
  3772                                  ;					Bit 0-2, 5-7 - Reserved
  3773                                  ; Outputs:
  3774                                  ;		If AL = 0 then DL = 0/1 for ^C off/on
  3775                                  ;
  3776                                  ; History:
  3777                                  ;      removed	AL = 3 Get CPSW state to DL	    DOS 3.4
  3778                                  ;      removed	AL = 4 Set CPSW state from DL	    DOS 3.4
  3779                                  ; ==========================================================================
  3780                                  
  3781                                  ; 04/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  3782                                  ; DOSCODE:4045h (MSDOS 5.0, MSDOS.SYS)
  3783                                  
  3784                                  _$SET_CTRL_C_TRAPPING:
  3785                                  	; 01/05/2019 - Retro DOS v4.0
  3786                                  
  3787 00000266 3C06                    	cmp	AL,6			; Is this a valid subfunction?
  3788 00000268 7603                    	jbe	short scct_1		; If yes continue processing
  3789                                  
  3790 0000026A B0FF                    	mov	AL,0FFh			; Else set AL to -1 and
  3791 0000026C CF                      	iret
  3792                                  scct_1:
  3793 0000026D 1E                      	push	DS
  3794                                  
  3795                                  	;getdseg <DS>			; DS -> DosData, ASSUME DS:DosSeg
  3796 0000026E 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  3797                                  	
  3798 00000273 50                      	push	AX			; DL only register that can change
  3799 00000274 56                      	push	SI
  3800                                  
  3801 00000275 BE[3703]                	mov	SI,CNTCFLAG		; DS:SI --> Ctrl C Status byte
  3802 00000278 30E4                    	xor	AH,AH			; Clear high byte of AX
  3803 0000027A 09C0                    	or	AX,AX			; Check for subfunction 0
  3804 0000027C 7504                    	jnz	short scct_2		; If not 0 jmp to next check
  3805                                  
  3806 0000027E 8A14                    	mov	DL,[SI]			; Else move current ctrl C status
  3807 00000280 EB35                    	jmp	SHORT scct_9s		; into DL and jmp to exit
  3808                                  scct_2:
  3809 00000282 48                      	dec	AX			; Now dec AX and see if it was 1
  3810 00000283 7507                    	jnz	short scct_3		; If not 0 it wasn't 1 so do next chk
  3811                                  
  3812 00000285 80E201                  	and	DL,1			; Else mask off bit 0 of DL and
  3813 00000288 8814                    	mov	[SI],DL			; save it as new Ctrl C status
  3814 0000028A EB2B                    	jmp	SHORT scct_9s		; Jmp to exit
  3815                                  scct_3:
  3816 0000028C 48                      	dec	AX			; Dec AX again to see if it was 2
  3817 0000028D 7507                    	jnz	short scct_4		; If not 0 wasn't 2 so go to next chk
  3818                                  
  3819 0000028F 80E201                  	and	DL,1			; Else mask off bit 0 of DL and
  3820 00000292 8614                    	xchg	[SI],DL			; Exchange DL with old status byte
  3821 00000294 EB21                    	jmp	SHORT scct_9s		; Jump to exit (returning old status)
  3822                                  scct_4:
  3823 00000296 83F803                  	cmp	AX,3 			; Test for 5 after it was dec twice
  3824 00000299 7506                    	jne	short scct_5		; If not equal then not get boot drv
  3825 0000029B 8A16[6900]              	mov	DL,[BOOTDRIVE]		; Else return boot drive in DL
  3826 0000029F EB16                    	jmp	SHORT scct_9s		; Jump to exit (returning boot drive)
  3827                                  scct_5:
  3828 000002A1 83F804                  	cmp	AX,4 			; Test for 6 after it was dec twice
  3829 000002A4 7511                    	jne	short scct_9s		; If not equal then not get version
  3830                                  	
  3831                                  	;mov	BX,(Minor_Version SHL 8) + Major_Version
  3832                                  	;mov	bx,1406h	; DOSCODE:4092h (MSDOS 6.21, MSDOS.SYS)	
  3833 000002A6 BB0616                  	mov	bx,(MINOR_VERSION<<8)+MAJOR_VERSION
  3834 000002A9 B200                    	mov	dl,0
  3835                                  	;mov	DL,DOSREVNM ; 0
  3836                                  
  3837 000002AB 30F6                    	xor	dh,dh			; assume vanilla DOS
  3838 000002AD 803E[F711]00            	cmp	byte [DosHasHMA],0	; is DOS in HMA?  (M021)
  3839                                  	;je	short @F
  3840 000002B2 7403                    	je	short scct_6
  3841 000002B4 80CE10                  	or	dh,10h
  3842                                  	;or	DH,DOSINHMA ; 10h
  3843                                  ;@@:
  3844                                  scct_6:
  3845                                  
  3846                                  ;ifdef ROMDOS
  3847                                  ;	or	DH, DOSINROM
  3848                                  ;endif ; ROMDOS
  3849                                  
  3850                                  scct_9s:
  3851 000002B7 5E                      	pop	SI
  3852 000002B8 58                      	pop	AX
  3853 000002B9 1F                      	pop	DS
  3854                                  scct_9f:
  3855 000002BA CF                      	iret
  3856                                  
  3857                                  SetCtrlShortEntry:			; This allows a conditional entry
  3858                                  					; from main dispatch code
  3859 000002BB EBA9                    	jmp	SHORT _$SET_CTRL_C_TRAPPING
  3860                                  
  3861                                  ; ==========================================================================
  3862                                  ;									   
  3863                                  ; The following two routines are dispatched to directly with ints disabled
  3864                                  ; immediately after the int 21h entry.	no DIS state is set.
  3865                                  ;
  3866                                  ; $Set_current_PDB takes BX and sets it to be the current process
  3867                                  ;   *** THIS FUNCTION CALL IS SUBJECT TO CHANGE!!! ***
  3868                                  ;
  3869                                  ; ==========================================================================
  3870                                  
  3871                                  _$SET_CURRENT_PDB:
  3872 000002BD 1E                      	push	DS
  3873                                  	;getdseg <DS>			; DS -> DosData, ASSUME DS:DosSeg
  3874 000002BE 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  3875 000002C3 891E[3003]              	mov	[CurrentPDB],BX		; Set new PSP segment from caller's BX
  3876 000002C7 1F                      	pop	DS
  3877 000002C8 CF                      	iret
  3878                                  
  3879                                  ; ==========================================================================
  3880                                  ;
  3881                                  ; $get_current_PDB returns in BX the current process
  3882                                  ;   *** THIS FUNCTION CALL IS SUBJECT TO CHANGE!!! ***
  3883                                  ;
  3884                                  ; ==========================================================================
  3885                                  
  3886                                  _$GET_CURRENT_PDB:
  3887 000002C9 1E                      	push	DS
  3888                                  	;getdseg <DS>			; DS -> DosData, ASSUME DS:DosSeg
  3889 000002CA 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  3890 000002CF 8B1E[3003]              	mov	BX,[CurrentPDB]		; Return current PSP segment in BX
  3891 000002D3 1F                      	pop	DS
  3892 000002D4 CF                      	iret
  3893                                  
  3894                                  ; ==========================================================================
  3895                                  ;
  3896                                  ; Sets the Printer Flag to whatever is in AL.
  3897                                  ; NOTE: THIS PROCEDURE IS SUBJECT TO CHANGE!!!
  3898                                  ;
  3899                                  ; ==========================================================================
  3900                                  
  3901                                  _$SET_PRINTER_FLAG:
  3902 000002D5 1E                      	push	ds
  3903                                  	;getdseg <DS>			; DS -> DosData, ASSUME DS:DosSeg
  3904 000002D6 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  3905 000002DB A2[A00A]                	mov	[PRINTER_FLAG],AL 	; Set printer flag from caller's AL
  3906 000002DE 1F                      	pop	ds
  3907 000002DF CF                      	iret
  3908                                  
  3909                                  ; 01/05/2019 - Retro DOS v4.0
  3910                                  ; 08/07/2018 - Retro DOS v3.0
  3911                                  ; (MSDISP.ASM, MSDOS 6.0, 1991)
  3912                                  
  3913                                  ; ----------------------------------------------------------------------------
  3914                                  ; BREAK   <System call entry points and dispatcher>
  3915                                  ; ----------------------------------------------------------------------------
  3916                                  
  3917                                  ; DOSCODE:40CCh (MSDOS 6.21, MSDOS.SYS)
  3918                                  
  3919                                  ; ==========================================================================
  3920                                  ;
  3921                                  ; The Quit entry point is where all INT 20h's come from. These are old- style
  3922                                  ; exit system calls. The CS of the caller indicates which Process is dying.
  3923                                  ; The error code is presumed to be 0. We simulate an ABORT system call.
  3924                                  ;
  3925                                  ; ==========================================================================
  3926                                  
  3927                                  SYSTEM_CALL:    ; PROC NEAR
  3928                                  
  3929                                  ; 04/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  3930                                  ; DOSCODE:40BFh (MSDOS 5.0, MSDOS.SYS)
  3931                                  
  3932                                  ;entry	QUIT				
  3933                                  QUIT:				; INT 20H entry point	
  3934                                  	;MOV	AH,0
  3935 000002E0 30E4                    	xor	ah,ah ; 08/07/2018
  3936 000002E2 EB36                    	JMP     SHORT SAVREGS
  3937                                  
  3938                                  ; ---------------------------------------------------------------------------
  3939                                  
  3940                                  	; The system call in AH is out of the range that we know how
  3941                                  	; to handle. We arbitrarily set the contents of AL to 0 and
  3942                                  	; IRET. Note that we CANNOT set the carry flag to indicate an
  3943                                  	; error as this may break some programs compatability.
  3944                                  
  3945                                  BADCALL:
  3946                                          ;MOV	AL,0
  3947 000002E4 30C0                    	xor	al,al ; 08/07/2018
  3948                                  IRETT:	; 06/05/2019
  3949                                  _IRET:
  3950 000002E6 CF                              IRET
  3951                                  
  3952                                  ; ---------------------------------------------------------------------------
  3953                                  
  3954                                  ; 01/05/2019 - Retro DOS v4.0
  3955                                  ; DOSCODE:40D3h (MSDOS 6.21 MSDOS.SYS)
  3956                                  ; 04/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  3957                                  ; DOSCODE:40C6h (MSDOS 5.0 MSDOS.SYS)
  3958                                  
  3959                                  	; An alternative method of entering the system is to perform a
  3960                                  	; CALL 5 in the program segment prefix with the contents of CL
  3961                                  	; indicating what system call the user would like. A subset of
  3962                                  	; the possible system calls is allowed here only the
  3963                                  	; CPM-compatible calls may get dispatched.
  3964                                  
  3965                                  		; System call entry point and dispatcher
  3966                                  CALL_ENTRY:
  3967 000002E7 1E                      	push	DS
  3968                                  	;getdseg <DS>			; DS -> DosData, ASSUME DS:DosSeg
  3969 000002E8 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  3970 000002ED 8F06[EC05]              	pop	word [SAVEDS]		; Save original DS
  3971                                  
  3972 000002F1 58                              POP     AX                      ; IP from the long call at 5
  3973 000002F2 58                              POP     AX                      ; Segment from the long call at 5
  3974 000002F3 8F06[8405]              	POP	WORD [USER_SP]		; IP from the CALL 5
  3975                                  
  3976                                  		; Re-order the stack to simulate an interrupt 21.
  3977                                  
  3978 000002F7 9C                      	PUSHF				; Start re-ordering the stack
  3979 000002F8 FA                      	CLI
  3980 000002F9 50                              PUSH    AX                      ; Save segment
  3981 000002FA FF36[8405]                      PUSH	WORD [USER_SP]		; Stack now ordered as if INT had been used
  3982                                  	; 04/11/2022
  3983                                  	; DOSCODE:40EAh (MSDOS 6.21 MSDOS.SYS)
  3984                                  	; DOSCODE:40DDh (MSDOS 5.0 MSDOS.SYS)
  3985 000002FE FF36[EC05]              	push	word [SAVEDS]
  3986 00000302 1F                      	pop	ds
  3987                                  	;
  3988                                  	;cmp	cl,36
  3989 00000303 80F924                          CMP     CL,MAXCALL              ; This entry point doesn't get as many calls
  3990 00000306 77DC                            JA      SHORT BADCALL
  3991 00000308 88CC                            MOV     AH,CL
  3992                                  	; 08/07/2018
  3993 0000030A EB0E                    	jmp	short SAVREGS
  3994                                  
  3995                                  ; ---------------------------------------------------------------------------
  3996                                  
  3997                                  ; 01/05/2019 - Retro DOS v4.0
  3998                                  
  3999                                  	; This is the normal INT 21 entry point. We first perform a
  4000                                  	; quick test to see if we need to perform expensive DOS-entry
  4001                                  	; functions. Certain system calls are done without interrupts
  4002                                  	; being enabled.
  4003                                  
  4004                                  	;entry	COMMAND 		; Interrupt call entry point (int 21h)
  4005                                  
  4006                                  ; DOSCODE:40F8h (MSDOS 6.21, MSDOS.SYS)
  4007                                  ; 04/11/2022
  4008                                  ; DOSCODE:40EBh (MSDOS 5.0, MSDOS.SYS)
  4009                                  
  4010                                  COMMAND:
  4011                                  	; 22/12/2022
  4012 0000030C FA                      	cli
  4013                                  
  4014                                  	; 01/05/2019 - Retro DOS v4.0
  4015                                  	; 08/07/2018 - Retro DOS v3.0
  4016                                  
  4017                                  ; 22/12/2022
  4018                                  ; 04/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  4019                                  	;IF	NOT IBM
  4020 0000030D 80FCF8                  	CMP	AH,SET_OEM_HANDLER
  4021 00000310 7203                    	JB	SHORT NOTOEM
  4022 00000312 E98401                  	JMP	_$SET_OEM_HANDLER
  4023                                  
  4024                                  NOTOEM:
  4025                                  	;ENDIF
  4026                                  
  4027                                  ; DOSCODE:40F8h (MSDOS 6.21, MSDOS.SYS)
  4028                                  ; DOSCODE:40EBh (MSDOS 5.0, MSDOS.SYS)
  4029                                  
  4030                                  	; 22/12/2022
  4031                                  	;cli	; 08/07/2018
  4032                                  
  4033                                  _COMMAND: ; MSDOS 3.3 (IBM)
  4034                                  	;cmp	ah,6Ch   ; MSDOS 6.21 ; Max int 21h function call number
  4035                                  	; 04/11/2022
  4036 00000315 80FC6C                  	CMP     AH,MAXCOM  ; 6Ch for MSDOS 6.0 (6.21,6.22) & MSDOS 5.0
  4037                                  	;JBE	SHORT SAVREGS
  4038 00000318 77CA                            JA	SHORT BADCALL ; 08/07/2018
  4039                                  
  4040                                  	; 31/05/2019
  4041                                  
  4042                                  	; The following set of calls are issued by the server at
  4043                                  	; *arbitrary* times and, therefore, must be executed on
  4044                                  	; the user's entry stack and executed with interrupts off.
  4045                                  
  4046                                  SAVREGS:
  4047                                  	; 01/05/2019 - Retro DOS v4.0
  4048                                  	; 10/08/2018
  4049                                  	; 08/07/2018 - Retro DOS v3.0
  4050 0000031A 80FC33                  	cmp	ah,33h			; Check Minimum special case #
  4051                                  	;;je	_$SET_CTRL_C_TRAPPING
  4052                                  	;je	short SetCtrlShortEntry ; If equal jmp directly to function
  4053 0000031D 7218                    	jb	short SaveAllRegs	; Not special case so continue	
  4054                                  	; 04/11/2022
  4055 0000031F 749A                    	je	short SetCtrlShortEntry ; If equal jmp directly to function
  4056 00000321 80FC64                  	cmp	ah,64h			; Check Max case number
  4057 00000324 7711                    	ja	short SaveAllRegs	; Not special case so continue
  4058 00000326 74AD                    	je	short _$SET_PRINTER_FLAG ; If equal jmp directly to function
  4059 00000328 80FC51                  	cmp	ah,51h			; Is this a Get PSP call (51h)?
  4060 0000032B 749C                    	je	short _$GET_CURRENT_PDB	; Yes, jmp directly to function
  4061 0000032D 80FC62                  	cmp	ah,62h			; Is this a Get PSP call (62h)?
  4062 00000330 7497                    	je	short _$GET_CURRENT_PDB	; Yes, jmp directly to function
  4063 00000332 80FC50                  	cmp     ah,50h			; Is this a Set PSP call (50h) ?
  4064 00000335 7486                    	je	short _$SET_CURRENT_PDB	; Yes, jmp directly to function
  4065                                  
  4066                                  SaveAllRegs:
  4067                                  	; 01/05/2019 - Retro DOS v4.0
  4068                                  
  4069 00000337 06                              push	ES
  4070 00000338 1E                      	push	DS
  4071 00000339 55                      	push	BP
  4072 0000033A 57                      	push	DI
  4073 0000033B 56                      	push	SI
  4074 0000033C 52                      	push	DX
  4075 0000033D 51                      	push	CX
  4076 0000033E 53                      	push	BX
  4077 0000033F 50                      	push	AX
  4078                                  
  4079 00000340 8CD8                    	mov	AX,DS
  4080                                  	;getdseg <DS>			; DS -> DosData, ASSUME DS:DosSeg
  4081 00000342 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  4082 00000347 A3[EC05]                	mov	[SAVEDS],AX		; save caller's DS
  4083 0000034A 891E[EA05]              	mov	[SAVEBX],BX
  4084                                  
  4085                                          ;INC     BYTE [INDOS]		; Flag that we're in the DOS
  4086                                  	
  4087                                  	; 08/07/2018 - Retro DOS v3.0        
  4088                                  	;xor     ax,ax
  4089                                  	;mov     [USER_ID],ax
  4090                                  	;mov     ax,[CurrentPDB]
  4091                                  	;mov     [PROC_ID],ax
  4092                                  
  4093                                  	; 01/05/2019
  4094                                  
  4095                                  	; Note: Nsp and Nss have to be unconditionally initialized here 
  4096                                  	; even if InDOS is zero. Programs like CROSSTALK 3.7 depend on
  4097                                  	; this!!!
  4098                                  
  4099 0000034E A1[8405]                	MOV     AX,[USER_SP]
  4100 00000351 A3[F205]                        MOV     [NSP],AX
  4101 00000354 A1[8605]                        MOV     AX,[USER_SS]
  4102 00000357 A3[F005]                        MOV     [NSS],AX
  4103                                  
  4104 0000035A 31C0                    	xor	AX,AX ; 0
  4105 0000035C A2[7205]                	mov	[FSHARING],AL		; allow redirection
  4106                                  
  4107 0000035F F606[2F10]01            	test	byte [IsWin386],1	; WIN386 patch. Do not update USER_ID
  4108 00000364 7503                    	jnz	short set_indos_flag	; if win386 present
  4109 00000366 A3[3E03]                	mov	[USER_ID],AX
  4110                                  set_indos_flag:
  4111 00000369 FE06[2103]              	INC     BYTE [INDOS]		; Flag that we're in the DOS
  4112                                  
  4113 0000036D 8926[8405]                      MOV     [USER_SP],SP
  4114 00000371 8C16[8605]                      MOV     [USER_SS],SS
  4115                                  
  4116 00000375 A1[3003]                	mov	AX,[CurrentPDB]
  4117 00000378 A3[3C03]                	mov	[PROC_ID],AX
  4118 0000037B 8ED8                    	mov	DS,AX
  4119 0000037D 58                      	pop	AX
  4120 0000037E 50                      	push	AX
  4121                                  
  4122                                  	; save user stack in his area for later returns (possibly from EXEC)
  4123                                  
  4124 0000037F 89262E00                        MOV     [PDB.USER_STACK],SP
  4125 00000383 8C163000                        MOV     [PDB.USER_STACK+2],SS
  4126                                  
  4127                                  	; 18/07/2018
  4128                                  	;mov	byte [CS:FSHARING], 0
  4129                                  
  4130                                  	;MOV     BX,CS			; no holes here.
  4131                                  	;MOV     SS,BX
  4132                                  
  4133                                  	;getdseg <ss>			; ss -> dosdat, already flag is CLI
  4134 00000387 2E8E16[0700]            	mov	ss,[cs:DosDSeg]
  4135                                  					;entry	REDISP
  4136                                  REDISP:
  4137 0000038C BC[A007]                        MOV     SP,AUXSTACK		; Enough stack for interrupts
  4138 0000038F FB                              STI                             ; stack is in our space now...
  4139                                  
  4140 00000390 8CD3                    	mov	bx,ss
  4141 00000392 8EDB                    	mov	ds,bx
  4142                                  
  4143 00000394 93                      	xchg	ax,bx
  4144                                  
  4145 00000395 31C0                    	xor	ax,ax ; 0
  4146                                  
  4147                                  	; 04/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  4148                                  	; MSDOS 5.0 MSDOS.SYS - DOSCODE:416Eh  (from org 3DD0h)
  4149                                  	; MSDOS 6.21 MSDOS.SYS - DOSCODE:417Bh (from org 3DE0h)
  4150                                  
  4151                                  	; (Note: ss: segment prefix was not needed here! ds=ss ! -04/11/2022-)
  4152                                  
  4153                                  	;mov	[ss:EXTOPEN_ON],al ; 0	; Clear extended open flag
  4154                                  	;;and	word [ss:DOS34_FLAG],EXEC_AWARE_REDIR
  4155                                  	;and	word [ss:DOS34_FLAG],800h ; clear all bits except bit 11
  4156                                  	;mov	[ss:CONSWAP],al  ; 0	; random clean up of possibly mis-set flags
  4157                                  	;mov	[ss:NoSetDir],al ; 0	; set directories on search
  4158                                  	;mov	[ss:FAILERR],al ; 0	; FAIL not in progress
  4159                                  	;inc	ax
  4160                                  	;;inc	AL			; AL = 1
  4161                                  	;mov	[ss:IDLEINT],al		; presume that we can issue INT 28
  4162                                  
  4163                                  	; 15/12/2022
  4164 00000397 A2[F605]                	mov	[EXTOPEN_ON],al ; 0	; Clear extended open flag
  4165                                  	;and	word [DOS34_FLAG],EXEC_AWARE_REDIR
  4166 0000039A 8126[1106]0008          	and	word [DOS34_FLAG],800h	; clear all bits except bit 11
  4167 000003A0 A2[5703]                	mov	[CONSWAP],al  ; 0	; random clean up of possibly mis-set flags
  4168                                  	;mov	byte [IDLEINT],1
  4169 000003A3 A2[4C03]                	mov	[NoSetDir],al ; 0	; set directories on search
  4170 000003A6 A2[4A03]                	mov	[FAILERR],al ; 0	; FAIL not in progress
  4171 000003A9 40                      	inc	ax
  4172                                  	;inc	al			; AL = 1
  4173 000003AA A2[5803]                	mov	[IDLEINT],al		; presume that we can issue INT 28
  4174                                  
  4175 000003AD 93                      	XCHG	AX,BX			; Restore AX and BX = 1		
  4176                                  
  4177 000003AE 88E3                    	MOV     BL,AH			
  4178 000003B0 D1E3                            SHL     BX,1			; 2 bytes per call in table
  4179                                         
  4180 000003B2 FC                      	CLD
  4181                                  		; Since the DOS maintains mucho state information across system
  4182                                  		; calls, we must be very careful about which stack we use.
  4183                                  		; First, all abort operations must be on the disk stack. This
  4184                                  		; is due to the fact that we may be hitting the disk (close
  4185                                  		; operations, flushing) and may need to report an INT 24.
  4186                                          
  4187 000003B3 08E4                    	OR      AH,AH
  4188 000003B5 7416                            JZ      SHORT DSKROUT		; ABORT
  4189                                  
  4190                                          ;CMP	AH,12
  4191                                          ;JBE	SHORT IOROUT		; Character I/O
  4192                                          ;CMP	AH,GET_CURRENT_PDB      ; INT 24 needs GET,SET PDB
  4193                                          ;JZ	SHORT IOROUT
  4194                                          ;CMP	AH,SET_CURRENT_PDB
  4195                                          ;JNZ	SHORT DSKROUT
  4196                                  
  4197                                  		; Second, PRINT and PSPRINT and the server issue
  4198                                  		; GetExtendedError calls at INT 28 and INT 24 time.
  4199                                  		; This call MUST, therefore, use the AUXSTACK.
  4200                                  
  4201                                  	; 10/08/2018
  4202 000003B7 80FC59                  	cmp     ah,GETEXTENDEDERROR ; 59h
  4203 000003BA 743D                    	je      short DISPCALL
  4204                                  	
  4205                                  	; 01/05/2019
  4206                                  	
  4207                                  		; Old 1-12 system calls may be either on the IOSTACK (normal
  4208                                  		; operation) or on the AUXSTACK (at INT 24 time).
  4209                                  
  4210 000003BC 80FC0C                  	cmp     ah,12 ; STD_CON_INPUT_FLUSH ; 0Ch
  4211 000003BF 770C                    	ja      short DSKROUT
  4212                                  
  4213                                  IOROUT:
  4214                                  	; 04/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  4215                                  	; (ss: prefix was not needed here! ds=ss)
  4216                                  	;cmp	byte [ss:ERRORMODE],0	; Are we in an INT 24? 
  4217                                  	; 15/12/2022
  4218 000003C1 803E[2003]00            	cmp     BYTE [ERRORMODE],0	; Are we in an INT 24?
  4219 000003C6 7531                            JNZ     SHORT DISPCALL		; Stay on AUXSTACK if INT 24
  4220 000003C8 BC[A00A]                        MOV     SP,IOSTACK
  4221 000003CB EB2C                            JMP     SHORT DISPCALL
  4222                                  
  4223                                  		; We are on a system call that is classified as "the rest".
  4224                                  		; We place ourselves onto the DSKSTACK and away we go.
  4225                                  		; We know at this point:
  4226                                  		; *  An INT 24 cannot be in progress. Therefore we reset
  4227                                  		;    ErrorMode and WpErr
  4228                                  		; *  That there can be no critical sections in effect.
  4229                                  		;    We signal the server to remove all the resources.
  4230                                  
  4231                                  DSKROUT:
  4232                                  	; 15/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  4233                                  	; 08/07/2018 - Retro DOS v3.0
  4234 000003CD A3[3A03]                	mov     [USER_IN_AX],ax		; Remember what user is doing
  4235 000003D0 C606[2303]01            	mov     byte [EXTERR_LOCUS],1	; errLOC_Unk (Default)
  4236                                  	
  4237 000003D5 C606[2003]00            	MOV     BYTE [ERRORMODE],0	; Cannot make non 1-12 calls in
  4238 000003DA C606[2203]FF            	MOV     BYTE [WPERR],-1		; error mode, so good place to
  4239                                  	                   		; make sure flags are reset
  4240                                  
  4241                                  	; 04/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  4242                                  	; (ss: prefix was not needed here! ds=ss)
  4243                                  
  4244                                  	;mov	[ss:USER_IN_AX],ax	; Remember what user is doing
  4245                                  	;mov	byte [ss:EXTERR_LOCUS],1 ; errLOC_Unk (Default)
  4246                                  	;mov	byte [ss:ERRORMODE],0	; Cannot make non 1-12 calls in
  4247                                  	;mov	byte [ss:WPERR],-1	; error mode, so good place to
  4248                                                                          ; make sure flags are reset
  4249 000003DF 50                      	push    ax
  4250 000003E0 B482                    	mov     ah,82h			; Release all resource information
  4251 000003E2 CD2A                    	int     2Ah 		; Microsoft Networks 
  4252                                  				; END DOS CRITICAL SECTIONS 0 THROUGH 7
  4253 000003E4 58                      	pop     ax
  4254                                  
  4255                                  		; Since we are going to be running on the DSKStack and since
  4256                                  		; INT 28 people will use the DSKStack, we must turn OFF the
  4257                                  		; generation of INT 28's.
  4258                                  
  4259                                  	; 15/12/2022
  4260                                  	;mov     byte [ss:IDLEINT],0
  4261                                  	;
  4262                                          ;mov	sp,DSKSTACK
  4263                                  	;test	byte [ss:CNTCFLAG],-1  ; 0FFh
  4264                                          ;jz	short DISPCALL
  4265                                  
  4266 000003E5 C606[5803]00            	mov     byte [IDLEINT],0
  4267                                  
  4268 000003EA BC[2009]                	MOV     SP,DSKSTACK
  4269 000003ED F606[3703]FF            	TEST    BYTE [CNTCFLAG],-1
  4270 000003F2 7405                    	JZ      SHORT DISPCALL
  4271                                  
  4272 000003F4 50                              PUSH    AX
  4273                                          ;invoke	DSKSTATCHK
  4274 000003F5 E89C4D                          CALL	DSKSTATCHK
  4275 000003F8 58                      	POP     AX
  4276                                  DISPCALL:
  4277                                  	; 01/05/2019 - Retro DOS v4.0
  4278 000003F9 2E8B9F[EA00]            	mov	bx,[CS:BX+DISPATCH]
  4279                                  
  4280                                  	; 15/12/2022
  4281 000003FE 871E[EA05]              	xchg	bx,[SAVEBX]
  4282 00000402 8E1E[EC05]              	MOV	DS,[SAVEDS]
  4283                                  
  4284                                  	; 04/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  4285                                  	; (ss: prefix was not needed here! ds=ss)        
  4286                                  	;xchg	bx,[ss:SAVEBX]
  4287                                  	;mov	ds,[ss:SAVEDS]
  4288                                  
  4289 00000406 36FF16[EA05]            	call	word [SS:SAVEBX] ; near call
  4290                                  
  4291                                  	; The EXEXA20OFF bit of DOS_FLAG will now be unconditionally cleared
  4292                                  	; here. Please see under M003, M009 and M068 tags in dossym.inc
  4293                                  	; for explanation. Also NOTE that a call to ExecReady (ax=4b05) will
  4294                                  	; return to LeaveDos and hence will not clear this bit. This is 
  4295                                  	; because this bit is used to indicate to the next int 21 call that
  4296                                  	; the previous int 21 was an exec.
  4297                                  	;
  4298                                  	; So do not add any code between the call above and the label 
  4299                                  	; LeaveDOS if it needs to be executed even for ax=4b05
  4300                                  
  4301                                  	;and	byte [ss:DOS_FLAG],~EXECA20OFF
  4302 0000040B 368026[8600]FB          	and	byte [ss:DOS_FLAG],0FBh
  4303                                  
  4304                                  ; 04/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  4305                                  ; DOSCODE:41F7h
  4306                                  
  4307                                  ;entry LEAVE
  4308                                  ;;;_LEAVE:				; Exit from a system call
  4309                                  LeaveDOS: ; 18/07/2018 
  4310                                  ;ASSUME	SS:NOTHING			; User routines may misbehave
  4311 00000411 FA                      	CLI
  4312                                  
  4313                                  	; 01/05/2019
  4314                                  	;getdseg <DS>			; DS -> DosData, ASSUME DS:DosSeg
  4315 00000412 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  4316 00000417 803E[8500]00            	cmp	byte [A20OFF_COUNT],0	; M068: Q: is count 0
  4317 0000041C 7527                    	jne	short disa20		; M068: N: dec count and turn a20 off
  4318                                  
  4319                                  LeaveA20On:
  4320 0000041E FE0E[2103]                      DEC     BYTE [INDOS]
  4321                                          ; 04/11/2022
  4322 00000422 8E16[8605]              	mov	ss,[USER_SS]
  4323 00000426 8B26[8405]              	MOV     SP,[USER_SP]
  4324                                  	;MOV	SS,[USER_SS]
  4325 0000042A 89E5                    	MOV     BP,SP
  4326                                  	;MOV	[BP.user_AX],AL	
  4327                                          ; 04/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  4328                                  	;;mov	[bp+0],al ; MSDOS 5.0 MSDOS.SYS - DOSCODE:4212h	
  4329                                  	;MOV	[BP+user_env.user_AX],AL  ; user_env.user_AX = 0
  4330                                  	; 15/12/2022
  4331 0000042C 884600                  	MOV	[BP],AL
  4332 0000042F A1[F205]                	MOV     AX,[NSP]
  4333 00000432 A3[8405]                        MOV     [USER_SP],AX
  4334 00000435 A1[F005]                        MOV     AX,[NSS]
  4335 00000438 A3[8605]                        MOV     [USER_SS],AX
  4336                                  
  4337 0000043B 58                      	pop	AX
  4338 0000043C 5B                      	pop	BX
  4339 0000043D 59                      	pop	CX
  4340 0000043E 5A                      	pop	DX
  4341 0000043F 5E                      	pop	SI
  4342 00000440 5F                      	pop	DI
  4343 00000441 5D                      	pop	BP
  4344 00000442 1F                      	pop	DS
  4345 00000443 07                      	pop	ES
  4346                                  
  4347 00000444 CF                              IRET
  4348                                  
  4349                                  disa20:	   				; M068 - Start
  4350 00000445 8B1E[6300]              	mov	bx,[A20OFF_PSP]		; bx = PSP for which a20 to be off'd
  4351 00000449 3B1E[3003]              	cmp	bx,[CurrentPDB]		; Q: do the PSP's match
  4352 0000044D 75CF                    	jne	short LeaveA20On	; N: don't clear bit and don't turn 
  4353                                  					;    a20 off
  4354                                  					; Y: turn a20 off and dec a20off_count
  4355 0000044F FE0E[8500]              	dec	byte [A20OFF_COUNT]	; M068 - End
  4356                                   					; Start - M004
  4357 00000453 1E                      	push	ds			; segment of stub
  4358 00000454 BB[1311]                	mov	bx,disa20_iret		; offset in stub
  4359 00000457 53                      	push	bx
  4360 00000458 CB                      	retf	  			; go to stub
  4361                                  					; End - M004
  4362                                  ;SYSTEM_CALL ENDP
  4363                                  
  4364                                  ; DOSCODE:424Ch (MSDOS 6.21, MSDOS.SYS)
  4365                                  ; 04/11/2022
  4366                                  ; DOSCODE:423Fh (MSDOS 5.0, MSDOS.SYS)
  4367                                  
  4368                                  ; ==========================================================================
  4369                                  ;
  4370                                  ; Restore_World restores all registers ('cept SS:SP, CS:IP, flags) from
  4371                                  ; the stack prior to giving the user control
  4372                                  ;
  4373                                  ; ==========================================================================
  4374                                  
  4375                                  ; 01/05/2019 - Retro DOS v4.0
  4376                                  
  4377                                          ;procedure restore_world,NEAR
  4378                                  restore_world:
  4379                                  	;getdseg <es>		; es -> dosdata
  4380 00000459 2E8E06[0700]            	mov	es,[cs:DosDSeg]
  4381                                  
  4382 0000045E 268F06[EE05]                    POP	WORD [ES:RESTORE_TMP]
  4383                                  
  4384 00000463 58                              POP     AX
  4385 00000464 5B                              POP     BX
  4386 00000465 59                              POP     CX
  4387 00000466 5A                              POP     DX
  4388 00000467 5E                              POP     SI
  4389 00000468 5F                              POP     DI
  4390 00000469 5D                              POP     BP
  4391 0000046A 1F                              POP     DS
  4392                                  
  4393 0000046B 26FF26[EE05]                   	jmp	word [ES:RESTORE_TMP]
  4394                                  
  4395                                  ;restore_world	ENDP
  4396                                  
  4397                                  ; 01/05/2019 - Retro DOS v4.0 (MSDOS 6.0, MSDISP.ASM, 1991)
  4398                                  
  4399                                  ; DOSCODE:4263h (MSDOS 6.21, MSDOS.SYS)
  4400                                  ; 04/11/2022
  4401                                  ; DOSCODE:4256h (MSDOS 5.0, MSDOS.SYS)
  4402                                  
  4403                                  ; ==========================================================================
  4404                                  ;
  4405                                  ; Save_World saves complete registers on the stack
  4406                                  ;
  4407                                  ; ==========================================================================
  4408                                  
  4409                                          ;procedure save_world,NEAR
  4410                                  save_world:
  4411                                  	;getdseg <es>		; es -> dosdata
  4412 00000470 2E8E06[0700]            	mov	es,[cs:DosDSeg]
  4413                                  
  4414 00000475 268F06[EE05]                    POP	WORD [ES:RESTORE_TMP]
  4415                                  
  4416                                  	; 12/05/2019
  4417                                          
  4418 0000047A 1E                      	PUSH    DS
  4419 0000047B 55                              PUSH    BP
  4420 0000047C 57                              PUSH    DI
  4421 0000047D 56                              PUSH    SI
  4422 0000047E 52                              PUSH    DX
  4423 0000047F 51                              PUSH    CX
  4424 00000480 53                              PUSH    BX
  4425 00000481 50                              PUSH    AX
  4426                                  
  4427 00000482 26FF36[EE05]            	push	word [ES:RESTORE_TMP]
  4428                                  
  4429 00000487 55                      	push	BP		
  4430 00000488 89E5                    	mov	BP,SP
  4431 0000048A 8E4614                  	mov	ES,[BP+20]	; es was pushed before call
  4432 0000048D 5D                      	pop	BP
  4433                                  	
  4434 0000048E C3                      	retn
  4435                                  
  4436                                  ;save_world	ENDP
  4437                                  
  4438                                  ; 01/05/2019
  4439                                  
  4440                                  ; DOSCODE:4282h (MSDOS 6.21, MSDOS.SYS)
  4441                                  ; 04/11/2022
  4442                                  ; DOSCODE:4275h (MSDOS 5.0, MSDOS.SYS)
  4443                                  
  4444                                  ; ==========================================================================
  4445                                  ;
  4446                                  ; Get_User_Stack returns the user's stack (and hence registers) in DS:SI
  4447                                  ;
  4448                                  ; ==========================================================================
  4449                                  
  4450                                          ;procedure get_user_stack,NEAR
  4451                                  Get_User_Stack:
  4452                                          ;getdseg <DS>			; DS -> DosData, ASSUME DS:DosSeg
  4453 0000048F 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  4454 00000494 C536[8405]                      lds	si,[USER_SP]
  4455 00000498 C3                      	retn
  4456                                  
  4457                                  ;get_user_stack  ENDP
  4458                                  
  4459                                  ; 22/12/2022
  4460                                  ; 04/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0, MSDOS.SYS)
  4461                                  ;%if 0
  4462                                  
  4463                                  ; ---------------------------------------------------------------------------
  4464                                  ;
  4465                                  ; Set_OEM_Handler -- Set OEM sys call address and handle OEM Calls
  4466                                  ; Inputs:
  4467                                  ;	User registers, User Stack, INTS disabled
  4468                                  ;	If CALL F8, DS:DX is new handler address
  4469                                  ; Function:
  4470                                  ;	Process OEM INT 21 extensions
  4471                                  ; Outputs:
  4472                                  ;	Jumps to OEM_HANDLER if appropriate
  4473                                  ;
  4474                                  ; ---------------------------------------------------------------------------
  4475                                  
  4476                                  ;IF	NOT IBM
  4477                                  
  4478                                  _$SET_OEM_HANDLER:
  4479                                  	; 01/05/2019 - Retro DOS v4.0
  4480                                  	
  4481                                  	;(cmp	ah,SET OEM HANDLER  ; 0F8h)
  4482                                  	;(jb	short NOTOOEM)
  4483                                  
  4484 00000499 06                      	push	es ; *
  4485                                  	;getdseg <es>			; es -> dosdata
  4486 0000049A 2E8E06[0700]            	mov	es,[cs:DosDSeg]
  4487                                  
  4488 0000049F 750C                    	jne	short check_trueversion_request ; check Retro DOS true version
  4489                                  						; (message) request	
  4490                                  	; AH = 0F8h = SET OEM HANDLER
  4491                                  
  4492 000004A1 268916[1400]            	MOV     [es:OEM_HANDLER],DX	; Set Handler
  4493 000004A6 268C1E[1600]            	MOV     [es:OEM_HANDLER+2],DS
  4494                                  
  4495 000004AB 07                      	pop	es ; *
  4496                                  
  4497 000004AC CF                      	IRET                            ; Quick return, Have altered no registers
  4498                                  
  4499                                  check_trueversion_request:
  4500                                  	; 18/07/2019 - Retro DOS v3.0
  4501                                  
  4502                                  	; Retro DOS v2.0 - 20/04/2018
  4503 000004AD 83F8FF                  	CMP	AX,0FFFFh
  4504                                  	; 18/07/2018
  4505 000004B0 7520                    	jne	short DO_OEM_FUNC ; 01/05/2019
  4506                                  
  4507                                  	; 01/05/2019
  4508 000004B2 07                      	pop	es ; *
  4509                                  
  4510 000004B3 B40E                    	mov	ah,0Eh
  4511                                  
  4512                                  	; Retro DOS v4.0 feature only!
  4513 000004B5 81FBA101                	cmp	bx,417  ; Signature to bypass
  4514                                  			; Retro DOS true version message	
  4515 000004B9 7414                    	je	short true_version_iret
  4516                                  
  4517 000004BB 56                      	push	si
  4518 000004BC 53                      	push	bx
  4519                                  
  4520 000004BD BE[BF00]                	mov	si,RETRODOSMSG
  4521                                  wrdosmsg:
  4522                                  	;movb	ah,0Eh
  4523 000004C0 BB0700                  	mov	bx,7
  4524                                  wrdosmsg_nxt:
  4525 000004C3 2EAC                    	cs	lodsb
  4526 000004C5 3C24                    	cmp	al,'$'
  4527 000004C7 7404                    	je	short wrdosmsg_ok		
  4528 000004C9 CD10                    	int	10h
  4529 000004CB EBF6                    	jmp	short wrdosmsg_nxt
  4530                                  
  4531                                  wrdosmsg_ok:
  4532 000004CD 5B                      	pop	bx
  4533 000004CE 5E                      	pop	si
  4534                                  
  4535                                  true_version_iret:
  4536                                  	; ah = 0Eh
  4537                                  	;mov	al,40h ; Retro DOS v4.0
  4538                                  	; 
  4539                                  	;mov	al,41h ; Retro DOS v4.1 
  4540                                  	; 30/12/2022
  4541 000004CF B042                    	mov	al,42h ; Retro DOS v4.2
  4542 000004D1 CF                      	iret
  4543                                  
  4544                                  	; If above F8 try to jump to handler
  4545                                  
  4546                                  DO_OEM_FUNC:
  4547                                  	; 01/05/2019
  4548 000004D2 26833E[1400]FF          	cmp     word [es:OEM_HANDLER],-1
  4549 000004D8 7504                    	JNE     short OEM_JMP
  4550 000004DA 07                      	pop	es ; *
  4551 000004DB E906FE                  	JMP     BADCALL                 ; Handler not initialized
  4552                                  OEM_JMP:
  4553 000004DE 06                      	push	es
  4554 000004DF 1F                      	pop	ds ; DOSDATA segment !
  4555 000004E0 07                      	pop	es ; *
  4556                                  
  4557                                  	; 22/12/2022
  4558 000004E1 FB                      	sti	; (enable interrupts before jumping to private handler)  
  4559                                  
  4560 000004E2 FF2E[1400]              	JMP     FAR [OEM_HANDLER]
  4561                                  
  4562                                  ;       ENDIF
  4563                                  
  4564                                  ; ---------------------------------------------------------------------------
  4565                                  
  4566                                  ;%endif
  4567                                  
  4568                                  ;============================================================================
  4569                                  ; MCODE.ASM, MSDOS 6.0, 1991
  4570                                  ;============================================================================
  4571                                  ; 17/07/2018 - Retro DOS v3.0
  4572                                  
  4573                                  ;	TITLE	MISC DOS ROUTINES - Int 25 and 26 handlers and other
  4574                                  ;	NAME	IBMCODE
  4575                                  
  4576                                  ;BREAK <NullDev -- Driver for null device>
  4577                                  
  4578                                  ; ROMDOS note:
  4579                                  ;	NUL device driver used to be here, but it was removed and placed in
  4580                                  ;	DOSDATA, because the entry points have to be in the segment as the
  4581                                  ;	header, which is also in DOSDATA.
  4582                                  
  4583                                  ;BREAK <AbsDRD, AbsDWRT -- INT int_disk_read, int_disk_write handlers>
  4584                                  
  4585                                  ;----------------------------------------------------------------------------
  4586                                  ; 04/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0, MSDOS.SYS)
  4587                                  ;----------------------------------------------------------------------------
  4588                                  ; DOSCODE:428Ch (MSDOS 6.21 MSDOS.SYS)
  4589                                  ; DOSCODE:427Fh (MSDOS 5.0 MSDOS.SYS)
  4590                                  
  4591                                  ;Public MSC001S,MSC001E
  4592                                  ;MSC001S label byte
  4593                                  	;IF	IBM
  4594                                  ; Codes returned by BIOS
  4595                                  ERRIN:
  4596 000004E6 02                      	DB	2			; NO RESPONSE
  4597 000004E7 06                      	DB	6			; SEEK FAILURE
  4598 000004E8 0C                      	DB	12			; GENERAL ERROR
  4599 000004E9 04                      	DB	4			; BAD CRC
  4600 000004EA 08                      	DB	8			; SECTOR NOT FOUND
  4601 000004EB 00                      	DB	0			; WRITE ATTEMPT ON WRITE-PROTECT DISK
  4602                                  ERROUT:
  4603                                  ; DISK ERRORS RETURNED FROM INT 25 and 26
  4604 000004EC 80                      	DB	80H			; NO RESPONSE
  4605 000004ED 40                      	DB	40H			; Seek failure
  4606 000004EE 02                      	DB	2			; Address Mark not found
  4607 000004EF 10                      	DB	10H			; BAD CRC
  4608 000004F0 04                      	DB	4			; SECTOR NOT FOUND
  4609 000004F1 03                      	DB	3			; WRITE ATTEMPT TO WRITE-PROTECT DISK
  4610                                  
  4611                                  NUMERR	EQU	$-ERROUT
  4612                                  	;ENDIF
  4613                                  ;MSC001E label byte
  4614                                  ;----------------------------------------------------------------------------
  4615                                  
  4616                                  ;============================================================================
  4617                                  ; MSCODE.ASM - MSDOS 6.0 - 1991
  4618                                  ;============================================================================
  4619                                  ; 18/07/2018 - Retro DOS v3.0
  4620                                  ; 15/05/2019 - Retro DOS v4.0
  4621                                  
  4622                                  ;BREAK <AbsDRD, AbsDWRT -- INT int_disk_read, int_disk_write handlers>>
  4623                                  
  4624                                  ;   AbsSetup - setup for abs disk functions
  4625                                  ;----------------------------------------------------------------------------
  4626                                  
  4627                                  AbsSetup:
  4628 000004F2 36FE06[2103]            	INC	byte [SS:INDOS]		; SS override
  4629 000004F7 FB                      	STI
  4630 000004F8 FC                      	CLD
  4631 000004F9 1E                      	PUSH	DS
  4632 000004FA 16                      	push	ss
  4633 000004FB 1F                      	pop	ds
  4634 000004FC E80C01                  	CALL	GETBP
  4635 000004FF 7206                    	JC	short errdriv 		; PM. error drive ;AN000;
  4636                                  	;mov	word [es:bp+1Fh]
  4637 00000501 26C7461FFFFF            	MOV	WORD [ES:BP+DPB.FREE_CNT],-1 ; do not trust user at all.
  4638                                  errdriv:
  4639 00000507 1F                      	POP	DS
  4640 00000508 7301                    	jnc	short AbsSetup2
  4641                                  AbsSetup_retn:
  4642 0000050A C3                      	retn
  4643                                  
  4644                                  AbsSetup2:
  4645                                  	; 15/05/2019 - Retro DOS v4.0
  4646                                  	; MSDOS 6.0
  4647                                  					; SS override
  4648 0000050B 36C706[0706]0000        	MOV	word [SS:HIGH_SECTOR],0 ;>32mb	from API		;AN000;
  4649 00000512 E83F04                  	CALL	RW32_CONVERT		;>32mb convert 32bit format to 16bit ;AN000;
  4650 00000515 72F3                    	jc	short AbsSetup_retn
  4651 00000517 E81A57                  	call	SET_RQ_SC_PARMS 	;LB. set up SC parms		;AN000;
  4652                                  
  4653                                  	; MSDOS 3.3 (& MSDOS 6.0)
  4654 0000051A 1E                      	PUSH	DS
  4655 0000051B 56                      	PUSH	SI
  4656 0000051C 50                      	PUSH	AX
  4657                                  
  4658 0000051D 16                      	push	ss
  4659 0000051E 1F                      	pop	ds
  4660                                  	
  4661 0000051F BE[BE03]                	MOV	SI,OPENBUF
  4662 00000522 8804                    	MOV	[SI],AL
  4663 00000524 800441                  	ADD	BYTE [SI],"A"
  4664 00000527 C744013A00              	MOV	WORD [SI+1],003AH ; ":",0
  4665 0000052C B80003                  	MOV	AX,0300H
  4666 0000052F F8                      	CLC
  4667 00000530 CD2A                    	INT	int_IBM ; int 2Ah	; Will set carry if shared
  4668                                  		
  4669                                  		; 04/11/2022
  4670                                  		; (INT 2Ah - AX = 0300h)
  4671                                  		; Microsoft Networks - CHECK DIRECT I/O
  4672                                  		; DS:SI -> ASCIIZ disk device name (may be full path or
  4673                                  		;    only drive specifier--must include the colon)
  4674                                  		; Return: CF clear if absolute disk access allowed
  4675                                  
  4676 00000532 58                      	POP	AX
  4677 00000533 5E                      	POP	SI
  4678 00000534 1F                      	POP	DS
  4679 00000535 73D3                    	jnc	short AbsSetup_retn
  4680                                  
  4681                                  	;mov	word [ss:EXTERR],32h
  4682 00000537 36C706[2403]3200        	MOV	word [ss:EXTERR],error_not_supported
  4683 0000053E C3                      	retn
  4684                                  
  4685                                  ;---------------------------------------------------------------------------
  4686                                  ;
  4687                                  ; Procedure Name : ABSDRD
  4688                                  ;
  4689                                  ; Interrupt 25 handler. Performs absolute disk read.
  4690                                  ; Inputs:	AL - 0-based drive number
  4691                                  ;		DS:BX point to destination buffer
  4692                                  ;		CX number of logical sectors to read
  4693                                  ;		DX starting logical sector number (0-based)
  4694                                  ; Outputs:	Original flags still on stack
  4695                                  ;		Carry set
  4696                                  ;		    AH error from BIOS
  4697                                  ;		    AL same as low byte of DI from INT 24
  4698                                  ;
  4699                                  ;---------------------------------------------------------------------------
  4700                                          ;procedure   ABSDRD,FAR
  4701                                  ABSDRD:
  4702                                  	; 15/05/2019 - Retro DOS v4.0
  4703                                  	; MSDOS 6.21 (DOSCODE:42E5h)
  4704                                  	; 04/11/2022
  4705                                  	; MSDOS 5.0 (DOSCODE:42D8h)
  4706                                  	
  4707                                  	; MSDOS 6.0
  4708 0000053F FA                      	CLI
  4709                                  	
  4710                                  ;	set up ds to point to DOSDATA
  4711                                  
  4712 00000540 50                      	push	ax			; preserve AX value
  4713 00000541 8CD8                    	mov	ax,ds			; store DS value in AX
  4714                                  	;getdseg <ds>
  4715 00000543 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  4716 00000548 A3[0A0D]                	mov	[TEMPSEG],ax		; store DS value in TEMPSEG
  4717 0000054B 58                      	pop	ax			; restore AX value
  4718                                  
  4719                                  	; M072:
  4720                                  	; We shall save es on the user stack here. We need to use ES in
  4721                                  	; order to access the DOSDATA variables AbsRdWr_SS/SP at exit 
  4722                                  	; time in order to restore the user stack.
  4723                                  
  4724 0000054C 06                      	push	es  ; ****		; M072
  4725                                  
  4726 0000054D 8C16[1B06]              	MOV	[AbsRdWr_SS],SS		; M013
  4727 00000551 8926[1D06]              	MOV	[AbsRdWr_SP],SP		; M013
  4728                                  
  4729                                  ; 	set up ss to point to DOSDATA
  4730                                  ;
  4731                                  ; NOTE! Due to an obscure bug in the 80286, you cannot use the ROMDOS
  4732                                  ; version of the getdseg macro with the SS register! An interrupt will
  4733                                  ; sneak through.
  4734                                  
  4735                                  ;ifndef ROMDOS
  4736                                  	;getdseg <ss>			; cli in entry of routine
  4737 00000555 2E8E16[0700]            	mov     ss,[cs:DosDSeg]
  4738                                  ;else
  4739                                  ;	mov	ds, cs:[BioDataSeg]
  4740                                  ;	assume	ds:bdata
  4741                                  ;
  4742                                  ;	mov	ss, ds:[DosDataSg]
  4743                                  ;	assume	ss:DOSDATA
  4744                                  ;
  4745                                  ;endif ; ROMDOS
  4746                                  
  4747 0000055A BC[2009]                	MOV	SP,DSKSTACK
  4748                                  
  4749 0000055D 8E1E[0A0D]              	mov	ds,[TEMPSEG]		; restore DS value
  4750                                  
  4751 00000561 06                      	push	es ; *** (MSDOS 6.21)
  4752 00000562 E80BFF                  	call	save_world		; save all regs
  4753                                  
  4754 00000565 06                      	PUSH	ES ; **
  4755 00000566 E889FF                  	CALL	AbsSetup
  4756 00000569 723D                    	JC	short ILEAVE
  4757                                  
  4758                                  	; Here is a gross temporary fix to get around a serious design flaw in
  4759                                  	;  the secondary cache. The secondary cache does not check for media
  4760                                  	;  changed (it should). Hence, you can change disks, do an absolute
  4761                                  	;  read, and get data from the previous disk. To get around this,
  4762                                  	;  we just won't use the secondary cache for absolute disk reads.
  4763                                  	;                                                      -mw 8/5/88
  4764                                  
  4765                                  	;EnterCrit critDisk
  4766 0000056B E8EA0D                  	call	ECritDisk
  4767 0000056E 36C606[B00D]FF          	MOV	byte [ss:CurSC_DRIVE],-1 ; invalidate SC  ;AN000;
  4768                                  	;LeaveCrit critDisk
  4769 00000574 E8FC0D                  	call	LCritDisk
  4770                                  
  4771                                          ;invoke	DSKREAD
  4772 00000577 E87932                  	CALL	DSKREAD
  4773 0000057A 7513                            jnz	short ERR_LEAVE		;Jump if read unsuccessful.
  4774                                  
  4775 0000057C 89F9                            mov     cx,di
  4776 0000057E 368C1E[0E06]                    mov     [ss:TEMP_VAR2],ds
  4777 00000583 36891E[0C06]                    mov     [ss:TEMP_VAR],bx
  4778                                  
  4779                                  ;       CX = # of contiguous sectors read. (These constitute a block of
  4780                                  ;            sectors, also termed an "Extent".)
  4781                                  ;       [HIGH_SECTOR]:DX = physical sector # of first sector in extent.
  4782                                  ;       [TEMP_VAR2]:[TEMP_VAR] = Transfer address (destination data address).
  4783                                  ;       ES:BP -> Drive Parameter Block (DPB).
  4784                                  ;
  4785                                  ;	The Buffer Queue must now be scanned: the contents of any dirty
  4786                                  ;	buffers must be "read" into the transfer memory block, so that the
  4787                                  ;       transfer memory reflects the most recent data.
  4788                                  
  4789                                  	;invoke	DskRdBufScan		;This trashes DS, but don't care.
  4790 00000588 E8BE34                          call	DskRdBufScan
  4791 0000058B EB1B                    	jmp     short ILEAVE
  4792                                  
  4793                                  TLEAVE:
  4794 0000058D 7419                    	JZ	short ILEAVE
  4795                                  
  4796                                  ERR_LEAVE:				; M039
  4797                                  	; 15/07/2018 - Retro DOS v3.0
  4798                                          ;IF	IBM
  4799                                  ; Translate the error code to ancient 1.1 codes
  4800 0000058F 06                              PUSH    ES ; *
  4801 00000590 0E                              PUSH    CS
  4802 00000591 07                              POP     ES
  4803 00000592 30E4                            XOR     AH,AH			; Nul error code
  4804                                  	;mov	cx,6
  4805 00000594 B90600                          MOV     CX,NUMERR		; Number of possible error conditions
  4806 00000597 BF[E604]                        MOV     DI,ERRIN		; Point to error conditions
  4807 0000059A F2AE                            REPNE   SCASB
  4808 0000059C 7504                            JNZ     SHORT LEAVECODE		; Not found
  4809                                  	;mov	ah,[ES:DI+5]
  4810 0000059E 268A6505                        MOV     AH,[ES:DI+NUMERR-1]	; Get translation
  4811                                  LEAVECODE:
  4812 000005A2 07                              POP     ES ; *
  4813                                  	; 15/05/2019 - Retro DOS v4.0
  4814 000005A3 36A3[B80D]              	mov	[ss:AbsDskErr],ax
  4815                                          ;ENDIF
  4816                                  
  4817 000005A7 F9                              STC
  4818                                  ILEAVE:
  4819                                  	; 15/05/2019
  4820 000005A8 07                              POP     ES ; **
  4821 000005A9 E8ADFE                  	call	restore_world
  4822 000005AC 07                              pop	es ; *** (MSDOS 6.21)
  4823 000005AD FA                      	CLI
  4824 000005AE 36A1[B80D]              	mov     ax,[ss:AbsDskErr]	; restore error
  4825 000005B2 36FE0E[2103]            	DEC	BYTE [SS:INDOS]
  4826 000005B7 16                              push	ss			; M072 - Start
  4827 000005B8 07                      	pop	es			; es - dosdata
  4828 000005B9 268E16[1B06]                    mov	ss,[es:AbsRdWr_SS]	; M013
  4829 000005BE 268B26[1D06]            	mov	sp,[es:AbsRdWr_SP]	; M013
  4830 000005C3 07                      	pop	es  ; ****		; Note es was saved on user
  4831                                  					; stack at entry 
  4832                                  					; M072 - End
  4833 000005C4 FB                              STI
  4834 000005C5 CB                      	RETF   ; ! FAR return !
  4835                                  
  4836                                  ;ABSDRD	ENDP
  4837                                  
  4838                                  ;---------------------------------------------------------------------------
  4839                                  ;
  4840                                  ; Procedure Name : ABSDWRT
  4841                                  ;
  4842                                  ; Interrupt 26 handler. Performs absolute disk write.
  4843                                  ; Inputs:	AL - 0-based drive number
  4844                                  ;		DS:BX point to source buffer
  4845                                  ;		CX number of logical sectors to write
  4846                                  ;		DX starting logical sector number (0-based)
  4847                                  ; Outputs:	Original flags still on stack
  4848                                  ;		Carry set
  4849                                  ;		    AH error from BIOS
  4850                                  ;		    AL same as low byte of DI from INT 24
  4851                                  ;
  4852                                  ;---------------------------------------------------------------------------
  4853                                          ;procedure   ABSDWRT,FAR
  4854                                  ABSDWRT:
  4855                                  	; 15/05/2019 - Retro DOS v4.0
  4856                                  	; MSDOS 6.21 (DOSCODE:436Ch)
  4857                                  	; 04/11/2022
  4858                                  	; MSDOS 5.0 (DOSCODE:435Fh)
  4859                                  
  4860 000005C6 FA                      	CLI
  4861                                  
  4862                                  ;	set up ds to point to DOSDATA
  4863                                  
  4864 000005C7 50                      	push	ax
  4865 000005C8 8CD8                    	mov	ax,ds
  4866                                  	;getdseg <ds>
  4867 000005CA 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  4868 000005CF A3[0A0D]                	mov	[TEMPSEG],ax
  4869 000005D2 58                      	pop	ax
  4870                                  
  4871                                  	; M072:
  4872                                  	; We shall save es on the user stack here. We need to use ES in
  4873                                  	; order to access the DOSDATA variables AbsRdWr_SS/SP at exit 
  4874                                  	; time in order to restore the user stack.
  4875                                  
  4876 000005D3 06                      	push	es ; ****		; M072
  4877                                  
  4878 000005D4 8C16[1B06]              	MOV	[AbsRdWr_SS],SS		; M013
  4879 000005D8 8926[1D06]              	MOV	[AbsRdWr_SP],SP		; M013
  4880                                  
  4881                                  	; set up ss to point to DOSDATA
  4882                                  	;
  4883                                  	; NOTE! Due to an obscure bug in the 80286, you cannot use the 
  4884                                  	; ROMDOS version of the getdseg macro with the SS register!
  4885                                  	; An interrupt will sneak through.
  4886                                  
  4887                                  ;ifndef ROMDOS
  4888                                  	;getdseg <ss>			; cli in entry of routine
  4889 000005DC 2E8E16[0700]            	mov     ss,[cs:DosDSeg]
  4890                                  ;else
  4891                                  ;	mov	ds, cs:[BioDataSeg]
  4892                                  ;	assume	ds:bdata
  4893                                  ;
  4894                                  ;	mov	ss, ds:[DosDataSg]
  4895                                  ;	assume	ss:DOSDATA
  4896                                  ;
  4897                                  ;endif ; ROMDOS
  4898                                  
  4899 000005E1 BC[2009]                	MOV	SP,DSKSTACK
  4900                                  		; we are now switched to DOS's disk stack
  4901                                  
  4902 000005E4 8E1E[0A0D]              	mov	ds,[TEMPSEG]		; restore user's ds
  4903                                  
  4904 000005E8 06                      	push	es ; *** (MSDOS 6.21)
  4905                                  
  4906 000005E9 E884FE                  	call	save_world	      	; save all regs
  4907                                  
  4908 000005EC 06                      	PUSH	ES ; **
  4909 000005ED E802FF                  	CALL	AbsSetup
  4910 000005F0 72B6                    	JC	short ILEAVE
  4911                                  
  4912                                  	;EnterCrit critDisk
  4913 000005F2 E8630D                  	call	ECritDisk
  4914 000005F5 36C606[B00D]FF          	MOV	byte [ss:CurSC_DRIVE],-1 ; invalidate SC ;AN000;
  4915 000005FB E89C03                  	CALL	Fastxxx_Purge		 ; purge fatopen ;AN000;
  4916                                  	;LeaveCrit critDisk
  4917 000005FE E8720D                  	call	LCritDisk
  4918                                  
  4919                                  ;M039
  4920                                  ;       DS:BX = transfer address (source data address).
  4921                                  ;       CX = # of contiguous sectors to write. (These constitute a block of
  4922                                  ;	     sectors, also termed an "Extent".)
  4923                                  ;       [HIGH_SECTOR]:DX = physical sector # of first sector in extent.
  4924                                  ;       ES:BP -> Drive Parameter Block (DPB).
  4925                                  ;       [CURSC_DRIVE] = -1 (invalid drive).
  4926                                  ;
  4927                                  ;       Free any buffered sectors which are in Extent; they are being over-
  4928                                  ;       written. Note that all the above registers are preserved for
  4929                                  ;       DSKWRITE.
  4930                                  
  4931 00000601 1E                              push    ds
  4932                                  	;invoke	DskWrtBufPurge          ;This trashes DS.
  4933 00000602 E85F37                  	call	DskWrtBufPurge
  4934 00000605 1F                              pop     ds
  4935                                  ;M039
  4936                                  	;invoke	DSKWRITE
  4937 00000606 E81332                  	call	DSKWRITE
  4938 00000609 EB82                    	JMP	short TLEAVE
  4939                                  
  4940                                  ;ABSDWRT ENDP
  4941                                  
  4942                                  ;----------------------------------------------------------------------------
  4943                                  ;
  4944                                  ; Procedure Name : GETBP
  4945                                  ;
  4946                                  ; Inputs:
  4947                                  ;	AL = Logical unit number (A = 0)
  4948                                  ; Function:
  4949                                  ;	Find Drive Parameter Block
  4950                                  ; Outputs:
  4951                                  ;	ES:BP points to DPB
  4952                                  ;	[THISDPB] = ES:BP
  4953                                  ;	Carry set if unit number bad or unit is a NET device.
  4954                                  ;		Later case sets extended error error_I24_not_supported
  4955                                  ; No other registers alteredjjj
  4956                                  ;
  4957                                  ;----------------------------------------------------------------------------
  4958                                  
  4959                                  	; 07/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  4960                                  GETBP:
  4961                                  	; 15/05/2019 - Retro DOS v4.0
  4962                                  	; 11/07/2018 - Retro DOS v3.0
  4963 0000060B 50                      	PUSH	AX
  4964 0000060C 0401                    	ADD	AL, 1		; No increment; need carry flag
  4965 0000060E 7216                    	JC	SHORT SKIPGET
  4966 00000610 E88065                  	CALL	GETTHISDRV
  4967                                  	; MSDOS 6.0
  4968 00000613 7311                    	JNC	SHORT SKIPGET		;PM. good drive		;AN000;
  4969 00000615 30E4                    	XOR	AH,AH			;DCR. ax= error code 	;AN000;
  4970 00000617 83F81A                  	CMP	AX,error_not_DOS_disk	;DCR. is unknown media ? ;AN000;
  4971 0000061A 740A                    	JZ	SHORT SKIPGET 		;DCR. yes, let it go 	;AN000;
  4972 0000061C F9                      	STC				;DCR.			;AN000;
  4973 0000061D A3[2403]                	MOV	[EXTERR],AX	;PM. invalid drive or Non DOS drive ;AN000;
  4974 00000620 C706[B80D]0102          	MOV	WORD [AbsDskErr],201h
  4975                                  SKIPGET:
  4976 00000626 58                      	POP	AX
  4977 00000627 7212                    	JC	SHORT GETBP_RETN ; 15/12/2022
  4978                                  	; 07/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  4979                                  	;jnc	short getbp_t
  4980                                  	;retn
  4981                                  getbp_t:
  4982 00000629 C42E[A205]              	LES	BP,[THISCDS]
  4983                                  	; 15/12/2022
  4984 0000062D 26F6464480              	test	byte [es:bp+curdir.flags+1],curdir_isnet>>8
  4985                                  	; 07/12/2022
  4986                                  	;TEST	WORD [ES:BP+43H],8000H
  4987                                  	;TEST	WORD [ES:BP+curdir.flags],curdir_isnet ; Clears carry
  4988 00000632 7408                    	JZ	SHORT GETBP_CDS
  4989 00000634 C706[2403]3200          	MOV	WORD [EXTERR],error_not_supported  ; 32h
  4990 0000063A F9                      	STC
  4991                                  GETBP_RETN:
  4992 0000063B C3                      	RETN
  4993                                  
  4994                                  GETBP_CDS:
  4995                                  	;LES	BP,[ES:BP+45H]
  4996 0000063C 26C46E45                	LES	BP,[ES:BP+curdir.devptr]
  4997                                  GOTDPB:
  4998                                  	; Load THISDPB from ES:BP
  4999 00000640 892E[8A05]              	MOV	[THISDPB],BP
  5000 00000644 8C06[8C05]              	MOV	[THISDPB+2],ES
  5001 00000648 C3                      	RETN
  5002                                  
  5003                                  ;BREAK <SYS_RET_OK SYS_RET_ERR CAL_LK ETAB_LK set system call returns>
  5004                                  
  5005                                  ;----------------------------------------------------------------------------
  5006                                  ;
  5007                                  ; Procedure Name : SYS_RETURN
  5008                                  ;
  5009                                  ; These are the general system call exit mechanisms. All internal system
  5010                                  ; calls will transfer (jump) to one of these at the end. Their sole purpose
  5011                                  ; is to set the user's flags and set his AX register for return.
  5012                                  ;
  5013                                  ;----------------------------------------------------------------------------
  5014                                  
  5015                                          ;procedure   SYS_RETURN,NEAR
  5016                                  SYS_RETURN:        
  5017                                          ;entry	SYS_RET_OK
  5018                                  SYS_RET_OK:   
  5019 00000649 E843FE                  	call    Get_User_Stack
  5020                                  		; turn off user's carry flag
  5021                                  SYS_RET_OK_clc: ; 25/06/2019 
  5022                                          ;;and	word [SI+16h],0FFFEh 
  5023                                  	;and	word [SI+user_env.user_F],~f_Carry 
  5024                                          ; 25/06/2019
  5025 0000064C 806416FE                	and	byte [SI+user_env.user_F],~f_Carry ; 0FEh
  5026 00000650 EB10                    	JMP     SHORT DO_RET
  5027                                  
  5028                                          ;entry   SYS_RET_ERR
  5029                                  SYS_RET_ERR:        
  5030 00000652 30E4                    	XOR     AH,AH 		; hack to allow for smaller error rets
  5031 00000654 E86C00                  	call	ETAB_LK 	; Make sure code is OK, EXTERR gets set
  5032 00000657 E81A00                  	CALL	ErrorMap
  5033                                  
  5034                                  	;entry	From_GetSet
  5035                                  From_GetSet:
  5036 0000065A E832FE                          call    Get_User_Stack
  5037                                  		 ; signal carry to user
  5038                                  	;;or	word [SI+16h],1
  5039                                  	;OR	word [SI+user_env.user_F],f_Carry
  5040                                  	; 25/06/2019
  5041 0000065D 804C1601                	or	byte [SI+user_env.user_F],f_Carry
  5042 00000661 F9                      	STC			; also, signal internal error
  5043                                  DO_RET:
  5044                                          ;MOV	[SI+user_env.user_AX],AX ; Really only sets AH
  5045 00000662 8904                    	MOV	[SI],AX
  5046 00000664 C3                      	RETN
  5047                                  
  5048                                  	;entry	FCB_RET_OK
  5049                                  FCB_RET_OK:
  5050                                  	;entry	NO_OP		; obsolete system calls dispatch to here
  5051                                  NO_OP:
  5052 00000665 30C0                    	XOR	AL,AL
  5053 00000667 C3                      	retn
  5054                                  
  5055                                  	;entry	FCB_RET_ERR
  5056                                  FCB_RET_ERR:
  5057 00000668 30E4                    	XOR	AH,AH
  5058 0000066A 36A3[2403]              	mov	[ss:EXTERR],AX
  5059 0000066E E80300                  	CALL	ErrorMap
  5060 00000671 B0FF                    	MOV	AL,-1
  5061 00000673 C3                      	retn
  5062                                  
  5063                                  	;entry	ErrorMap
  5064                                  ErrorMap:
  5065 00000674 56                      	PUSH	SI
  5066                                  				; ERR_TABLE_21 is now in DOSDATA
  5067 00000675 BE[DA0D]                	MOV	SI,ERR_TABLE_21
  5068                                  				; SS override for FAILERR and EXTERR
  5069 00000678 36803E[4A03]00          	CMP	byte [SS:FAILERR],0 ; Check for SPECIAL case.
  5070 0000067E 7407                    	JZ	short EXTENDED_NORMAL ; All is OK.
  5071                                  		 ; Ooops, this is the REAL reason
  5072                                  	;mov	word [SS:EXTERR],53h
  5073 00000680 36C706[2403]5300        	MOV	word [SS:EXTERR],error_FAIL_I24
  5074                                  EXTENDED_NORMAL:
  5075 00000687 E80200                  	call	CAL_LK		; Set CLASS,ACTION,LOCUS for EXTERR
  5076 0000068A 5E                      	POP	SI
  5077 0000068B C3                      	retn
  5078                                  
  5079                                  	;EndProc SYS_RETURN
  5080                                  
  5081                                  ;---------------------------------------------------------------------------
  5082                                  ;
  5083                                  ; Procedure Name : CAL_LK
  5084                                  ;
  5085                                  ; Inputs:
  5086                                  ;	SI is OFFSET in DOSDATA of CLASS,ACTION,LOCUS Table to use
  5087                                  ;		(DS NEED not be DOSDATA)
  5088                                  ;	[EXTERR] is set with error
  5089                                  ; Function:
  5090                                  ;	Look up and set CLASS ACTION and LOCUS values for GetExtendedError
  5091                                  ; Outputs:
  5092                                  ;	[EXTERR_CLASS] set
  5093                                  ;	[EXTERR_ACTION] set
  5094                                  ;	[EXTERR_LOCUS] set  (EXCEPT on certain errors as determined by table)
  5095                                  ; Destroys SI, FLAGS
  5096                                  ;
  5097                                  ;---------------------------------------------------------------------------
  5098                                  
  5099                                  	;procedure CAL_LK,NEAR
  5100                                  CAL_LK:
  5101 0000068C 1E                      	PUSH	DS
  5102 0000068D 50                      	PUSH	AX
  5103 0000068E 53                      	PUSH	BX
  5104                                  
  5105                                  ;M048	Context DS		; DS:SI -> Table
  5106                                  ;
  5107                                  ; Since this function can be called thru int 2f we shall not assume that SS
  5108                                  ; is DOSDATA
  5109                                  
  5110                                  	;getdseg  <ds>	; M048: DS:SI -> Table
  5111                                  	; 15/05/2019 - Retro DOS v4.0
  5112 0000068F 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  5113                                  
  5114                                  	; 18/07/2018
  5115                                  	;push	ss
  5116                                  	;pop	ds
  5117                                  
  5118 00000694 8B1E[2403]              	MOV	BX,[EXTERR]	; Get error in BL
  5119                                  TABLK1:
  5120 00000698 AC                      	LODSB
  5121                                  
  5122 00000699 3CFF                    	CMP	AL,0FFH
  5123 0000069B 7409                    	JZ	short GOT_VALS	; End of table
  5124 0000069D 38D8                    	CMP	AL,BL
  5125 0000069F 7405                    	JZ	short GOT_VALS	; Got entry
  5126 000006A1 83C603                  	ADD	SI,3		; Next table entry
  5127                                  	; 15/08/2018
  5128 000006A4 EBF2                    	JMP	short TABLK1
  5129                                  
  5130                                  GOT_VALS:
  5131 000006A6 AD                      	LODSW			; AL is CLASS, AH is ACTION
  5132                                  
  5133 000006A7 80FCFF                  	CMP	AH,0FFH
  5134 000006AA 7404                    	JZ	short NO_SET_ACT
  5135 000006AC 8826[2603]              	MOV	[EXTERR_ACTION],AH ; Set ACTION
  5136                                  NO_SET_ACT:
  5137 000006B0 3CFF                    	CMP	AL,0FFH
  5138 000006B2 7403                    	JZ	short NO_SET_CLS
  5139 000006B4 A2[2703]                	MOV	[EXTERR_CLASS],AL ; Set CLASS
  5140                                  NO_SET_CLS:
  5141 000006B7 AC                      	LODSB			; Get LOCUS
  5142                                  
  5143 000006B8 3CFF                    	CMP	AL,0FFH
  5144 000006BA 7403                    	JZ	short NO_SET_LOC
  5145 000006BC A2[2303]                	MOV	[EXTERR_LOCUS],AL
  5146                                  NO_SET_LOC:
  5147 000006BF 5B                      	POP	BX
  5148 000006C0 58                      	POP	AX
  5149 000006C1 1F                      	POP	DS
  5150 000006C2 C3                      	retn
  5151                                  
  5152                                  	;EndProc CAL_LK
  5153                                  
  5154                                  ;---------------------------------------------------------------------------
  5155                                  ;
  5156                                  ; Procedure Name : ETAB_LK
  5157                                  ;
  5158                                  ; Inputs:
  5159                                  ;	AX is error code
  5160                                  ;	[USER_IN_AX] has AH value of system call involved
  5161                                  ; Function:
  5162                                  ;	Make sure error code is appropriate to this call.
  5163                                  ; Outputs:
  5164                                  ;	AX MAY be mapped error code
  5165                                  ;	[EXTERR] = Input AX
  5166                                  ; Destroys ONLY AX and FLAGS
  5167                                  ;
  5168                                  ;---------------------------------------------------------------------------
  5169                                  
  5170                                  	;procedure ETAB_LK,NEAR
  5171                                  
  5172                                  ETAB_LK: ; 10/08/2018 - Retro DOS v3.0
  5173 000006C3 1E                      	PUSH	DS
  5174 000006C4 56                      	PUSH	SI
  5175 000006C5 51                      	PUSH	CX
  5176 000006C6 53                      	PUSH	BX
  5177                                  
  5178                                  	;Context DS			; SS is DOSDATA
  5179                                  
  5180 000006C7 16                      	push	ss
  5181 000006C8 1F                      	pop	ds
  5182                                  
  5183 000006C9 A3[2403]                	MOV	[EXTERR],AX		; Set EXTERR with "real" error
  5184                                  
  5185                                  					; I21_MAP_E_TAB is now in DOSCODE
  5186 000006CC BE[0B00]                	MOV	SI,I21_MAP_E_TAB
  5187 000006CF 88C7                    	MOV	BH,AL			; Real code to BH
  5188 000006D1 8A1E[3B03]              	MOV	BL,[USER_IN_AX+1]	; Sys call to BL
  5189                                  TABLK2:
  5190                                  	; 15/05/2019 - Retro DOS v4.0
  5191 000006D5 2E                      	cs
  5192 000006D6 AD                      	lodsw	; MSDOS 6.0 (MSDOS 6.21 - MSDOS.SYS, DOSCODE:447Dh)
  5193                                  	
  5194                                  	; 18/07/2018 - Retro DOS v3.0
  5195                                  	;lodsw		; IBMDOS.COM (MSDOS 3.3) - Offset 16F7h
  5196                                  
  5197 000006D7 3CFF                    	CMP	AL,0FFH 		; End of table?
  5198 000006D9 740C                    	JZ	short NOT_IN_TABLE	; Yes
  5199 000006DB 38D8                    	CMP	AL,BL			; Found call?
  5200 000006DD 740C                    	JZ	short GOT_CALL		; Yes
  5201 000006DF 86E0                    	XCHG	AH,AL			; Count to AL
  5202 000006E1 30E4                    	XOR	AH,AH			; Make word for add
  5203 000006E3 01C6                    	ADD	SI,AX			; Next table entry
  5204 000006E5 EBEE                    	JMP	short TABLK2
  5205                                  
  5206                                  NOT_IN_TABLE:
  5207 000006E7 88F8                    	MOV	AL,BH			; Restore original code
  5208 000006E9 EB0C                    	JMP	SHORT NO_MAP
  5209                                  
  5210                                  GOT_CALL:
  5211 000006EB 88E1                    	MOV	CL,AH
  5212 000006ED 30ED                    	XOR	CH,CH			; Count of valid err codes to CX
  5213                                  CHECK_CODE:
  5214                                  	; 15/05/2019 - Retro DOS v4.0
  5215 000006EF 2E                      	cs
  5216 000006F0 AC                      	lodsb	; MSDOS 6.0 (MSDOS 6.21 - MSDOS.SYS, DOSCODE:4497h)
  5217                                  
  5218                                  	; 18/07/2018
  5219                                  	;lodsb		; IBMDOS.COM (MSDOS 3.3) - Offset 1710h
  5220                                  
  5221 000006F1 38F8                    	CMP	AL,BH			; Code OK?
  5222 000006F3 7402                    	JZ	short NO_MAP		; Yes
  5223 000006F5 E2F8                    	LOOP	CHECK_CODE
  5224                                  NO_MAP:
  5225 000006F7 30E4                    	XOR	AH,AH			; AX is now valid code
  5226 000006F9 5B                      	POP	BX
  5227 000006FA 59                      	POP	CX
  5228 000006FB 5E                      	POP	SI
  5229 000006FC 1F                      	POP	DS
  5230 000006FD C3                      	retn
  5231                                  
  5232                                  	;EndProc ETAB_LK
  5233                                  
  5234                                  ; 18/07/2018 - Retro DOS v3.0
  5235                                  ;---------------------------------------------------------------------------
  5236                                  ; BREAK <DOS 2F Handler and default NET 2F handler>
  5237                                  
  5238                                  ;IF installed ; (*)
  5239                                  
  5240                                  ;---------------------------------------------------------------------------
  5241                                  ;
  5242                                  ; Procedure Name : SetBad
  5243                                  ;
  5244                                  ; SetBad sets up info for bad functions
  5245                                  ;
  5246                                  ;---------------------------------------------------------------------------
  5247                                  
  5248                                  SetBad:
  5249                                  	;mov	ax,1
  5250 000006FE B80100                  	MOV	AX,error_invalid_function ; ALL NET REQUESTS get inv func
  5251                                  
  5252                                  	; MSDOS 3.3
  5253                                  	;;mov	byte [cs:EXTERR_LOCUS],1
  5254                                  	;MOV	byte [CS:EXTERR_LOCUS],errLOC_Unk
  5255                                  
  5256                                  ;	set up ds to point to DOSDATA
  5257                                  
  5258                                  	; 15/05/2019 - Retro DOS v4.0
  5259                                  	; MSDOS 6.0
  5260 00000701 1E                      	push	ds
  5261                                  
  5262                                  	;getdseg <ds>
  5263 00000702 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  5264                                  
  5265 00000707 C606[2303]01            	MOV	byte [EXTERR_LOCUS],errLOC_Unk ; 1	
  5266                                  
  5267 0000070C 1F                      	pop	ds	  	;hkn; restore ds
  5268                                  
  5269 0000070D F9                      	STC
  5270 0000070E C3                      	retn
  5271                                  
  5272                                  ;--------------------------------------------------------------------------
  5273                                  ;
  5274                                  ; Procedure Name : BadCall
  5275                                  ;
  5276                                  ; BadCall is the initial routine for bad function calls
  5277                                  ;
  5278                                  ;--------------------------------------------------------------------------
  5279                                  
  5280                                  BadCall:
  5281 0000070F E8ECFF                  	call	SetBad
  5282 00000712 CB                      	retf
  5283                                  
  5284                                  ;--------------------------------------------------------------------------
  5285                                  ;
  5286                                  ; OKCall always sets carry to off.
  5287                                  ;
  5288                                  ;-----------------------------------------------------------------------
  5289                                  
  5290                                  OKCall:
  5291 00000713 F8                      	CLC
  5292 00000714 CB                      	retf
  5293                                  
  5294                                  ;---------------------------------------------------------------------------
  5295                                  ;
  5296                                  ; Procedure Name : INT2F
  5297                                  ;
  5298                                  ; INT 2F handler works as follows:
  5299                                  ;   PUSH    AX
  5300                                  ;   MOV     AX,multiplex:function
  5301                                  ;   INT     2F
  5302                                  ;   POP     ...
  5303                                  ; The handler itself needs to make the AX available for the various routines.
  5304                                  ;
  5305                                  ;----------------------------------------------------------------------------
  5306                                  
  5307                                  ; 15/05/2019 - Retro DOS v4.0
  5308                                  
  5309                                  ;KERNEL_SEGMENT equ 70h
  5310                                  ; 04/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  5311                                  DOSBIODATASEG equ 70h
  5312                                  
  5313                                  ; retrodos4.s - offset in BIOSDATA
  5314                                  bios_i2f equ 5
  5315                                  
  5316                                  ;PUBLIC	Int2F
  5317                                  ;INT2F	PROC	FAR
  5318                                  
  5319                                  ; 15/05/2019
  5320                                  ; DOSCODE:44BDh (MSDOS 6.21, MSDOS.SYS)
  5321                                  
  5322                                  ; 04/11/2022
  5323                                  ; DOSCODE:44B0h (MSDOS 5.0, MSDOS.SYS)
  5324                                  
  5325                                  	; 15/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  5326                                  	; 18/07/2018 - Retro DOS v3.0
  5327                                  INT2F:
  5328                                  	; Offset 172Fh in IBMDOS.COM (MSDOS 3.3), 1987
  5329                                  INT2FNT:
  5330                                  	;ASSUME	CS:DOSCODE,DS:NOTHING,ES:NOTHING,SS:NOTHING
  5331 00000715 FB                      	STI
  5332                                  	;cmp	ah,11h
  5333 00000716 80FC11                  	CMP	AH,MultNET
  5334 00000719 750A                    	JNZ	short INT2FSHR
  5335                                  TestInstall:
  5336 0000071B 08C0                    	OR	AL,AL
  5337 0000071D 7403                    	JZ	short Leave2F
  5338                                  BadFunc:
  5339 0000071F E8DCFF                  	CALL	SetBad
  5340                                  
  5341                                  	;entry	Leave2F
  5342                                  Leave2F:
  5343 00000722 CA0200                  	RETF	2			; long return + clear flags off stack
  5344                                  
  5345                                  INT2FSHR:
  5346                                  	;cmp	ah,10h
  5347 00000725 80FC10                  	CMP	AH,MultSHARE		; is this a share request
  5348 00000728 74F1                    	JZ	short TestInstall	; yes, check for installation
  5349                                  INT2FNLS:
  5350                                  	;cmp	ah,14h
  5351 0000072A 80FC14                  	CMP	AH,NLSFUNC		; is this a DOS 3.3 NLSFUNC request
  5352 0000072D 74EC                    	JZ	short TestInstall	; yes check for installation
  5353                                  INT2FDOS:
  5354                                  	;ASSUME	CS:DOSCODE,DS:NOTHING,ES:NOTHING,SS:NOTHING
  5355                                  
  5356                                  	; 18/07/2018
  5357                                  	; MSDOS 3.3
  5358                                  	;;cmp	ah,12h	
  5359                                  	;CMP	AH,MultDOS
  5360                                  	;jz	short DispatchDOS
  5361                                  	;iret
  5362                                  
  5363                                  	; 15/05/2019
  5364                                  	; MSDOS 6.0
  5365                                  	;cmp	ah,12h	; 07/12/2022
  5366 0000072F 80FC12                  	CMP	AH,MultDOS
  5367 00000732 7503                    	JNZ	short check_win		;check if win386 broadcast
  5368 00000734 E9FC01                  	jmp	DispatchDOS
  5369                                  
  5370                                  	; .... win386 .... 
  5371                                  
  5372                                  check_win:
  5373                                  	;cmp	ah,16h
  5374 00000737 80FC16                  	cmp	ah,MultWin386		; Is this a broadcast from Win386?
  5375 0000073A 7408                    	je	short Win386_Msg
  5376                                  
  5377                                  	; M044
  5378                                  	; Check if the callout is from Winoldap indicating swapping out or in 
  5379                                  	; of Windows. If so, do special action of going and saving last para
  5380                                  	; of the Windows memory arena which Winoldap does not save due to a 
  5381                                  	; bug
  5382                                  
  5383 0000073C 80FC46                  	cmp	ah,WINOLDAP ; 46h	; from Winoldap?
  5384                                  	;jne	short next_i2f		; no, chain on
  5385                                  	; 15/12/2022
  5386                                  	;jmp	winold_swap		; yes, do desired action
  5387 0000073F 7442                    	je	short winold_swap
  5388 00000741 E90701                  	jmp	next_i2f
  5389                                  
  5390                                  	; 15/12/2022
  5391                                  ;next_i2f:
  5392                                  ;	;;;jmp	bios_i2f
  5393                                  ;	;;jmp	far ptr 70h:5 ; MSDOS 6.21 (MSDOS.SYS, DOSCODE:44F1h)
  5394                                  ;	;jmp	KERNEL_SEGMENT:bios_i2f
  5395                                  ;	; 04/11/2022
  5396                                  ;	jmp	DOSBIODATASEG:bios_i2f
  5397                                  
  5398                                  ;	IRET				; This assume that we are at the head
  5399                                  					; of the list
  5400                                  ;INT2F	ENDP
  5401                                  
  5402                                  ; 15/05/2019 - Retro DOS v4.0
  5403                                  
  5404                                  ; We have received a message from Win386. There are three possible
  5405                                  ; messages we could get from Win386:
  5406                                  ;
  5407                                  ; Init 		- for this, we set the IsWin386 flag and return a pointer
  5408                                  ;		  to the Win386 startup info structure.
  5409                                  ; Exit		- for this, we clear the IsWin386 flag.
  5410                                  ; DOSMGR query 	- for this, we need to indicate that instance data
  5411                                  ;		  has already been handled. this is indicated by setting
  5412                                  ;		  CX to a non-zero value.
  5413                                  
  5414                                  Win386_Msg:
  5415 00000744 1E                      	push	ds
  5416                                  
  5417                                  	;getdseg <DS>			; ds is DOSDATA
  5418 00000745 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  5419                                  
  5420                                  	; For WIN386 2.xx instance data
  5421                                  
  5422 0000074A 3C03                    	cmp	al,3			; win386 2.xx instance data call?
  5423 0000074C 7503                    	jne	short Win386_Msg_exit
  5424 0000074E E92C01                  	jmp	OldWin386Init		; yes, return instance data
  5425                                  Win386_Msg_exit:
  5426 00000751 3C06                    	cmp	al,Win386_Exit	 ; 6	; is it an exit call?
  5427 00000753 7503                    	jne	short Win386_Msg_devcall
  5428 00000755 E92E01                  	jmp	Win386_Leaving
  5429                                  Win386_Msg_devcall:
  5430 00000758 3C07                    	cmp	al,Win386_Devcall ; 7	; is it call from DOSMGR?
  5431 0000075A 7503                    	jne	short Win386_Msg_init
  5432 0000075C E96501                  	jmp	Win386_Query
  5433                                  Win386_Msg_init:
  5434 0000075F 3C05                    	cmp	al,Win386_Init	; 5	; is it an init call?
  5435 00000761 7403                    	je	short Win386_Starting
  5436 00000763 E9E400                  	jmp	win_nexti2f		; no, return
  5437                                  Win386_Starting:
  5438                                  	; 17/12/2022
  5439 00000766 F6C201                  	test	dl,1
  5440                                  	;test	dx,1			; is this really win386?
  5441 00000769 7403                    	jz	short Win386_vchk	; YES! go and handle it
  5442 0000076B E9DC00                  	jmp	win_nexti2f		; NO! It's win 286 dos extender! M002
  5443                                  Win386_vchk:
  5444                                  	; M018 -- start of block changes
  5445                                  	; The VxD needs to be loaded only for Win 3.0. If version is greater 
  5446                                  	; than 030Ah, we skip the VxD presence check
  5447                                  
  5448                                  ;M067 -- Begin changes
  5449                                  ; If Win 3.0 is run, the VxD ptr has been initialized. If Win 3.1 is now
  5450                                  ;run, it tries to unnecesarily load the VxD even though it is not needed.
  5451                                  ;So, we null out the VxD ptr before the check.
  5452                                  
  5453                                  	;mov	word [Win386_Info+6],0
  5454 0000076E C706[E70F]0000          	mov	word [Win386_Info+Win386_SIS.Virt_Dev_File_Ptr],0
  5455                                  	;mov	word [Win386_Info+8],0
  5456 00000774 C706[E90F]0000          	mov	word [Win386_Info+Win386_SIS.Virt_Dev_File_Ptr+2],0
  5457                                  
  5458                                  ;M067 -- End changes
  5459                                  
  5460                                  ;ifdef JAPAN
  5461                                  ;	cmp	di,0300h		; version >= 300 i.e 3.10 ;M037
  5462                                  ;else
  5463 0000077A 81FF0A03                	cmp	di,030Ah		; version >= 30a i.e 3.10 ;M037
  5464                                  ;endif
  5465                                  	;ljae	noVxD31			; yes, VxD not needed 	 ;M037
  5466 0000077E 724E                    	jb	short Win386_vxd
  5467 00000780 E9DF00                  	jmp	noVxD31
  5468                                  
  5469                                  	; 15/12/2022
  5470                                  winold_swap:
  5471 00000783 1E                      	push	ds
  5472 00000784 06                      	push	es
  5473 00000785 56                      	push	si
  5474 00000786 57                      	push	di
  5475 00000787 51                      	push	cx
  5476                                  
  5477                                  	;getdseg <ds>			;ds = DOSDATA
  5478 00000788 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  5479                                  
  5480 0000078D 3C01                    	cmp	al,1			;swap Windows out call
  5481 0000078F 751B                    	jne	short swapin		;no, check if Swap in call
  5482 00000791 E89201                  	call	getwinlast
  5483 00000794 1E                      	push	ds
  5484 00000795 07                      	pop	es
  5485 00000796 8EDE                    	mov	ds,si			;ds = memory arena of Windows
  5486 00000798 31F6                    	xor	si,si
  5487 0000079A BF[0600]                	mov	di,WinoldPatch1
  5488 0000079D B90800                  	mov	cx,8
  5489 000007A0 FC                      	cld
  5490 000007A1 51                      	push	cx
  5491 000007A2 F3A4                    	rep	movsb			;save first 8 bytes
  5492 000007A4 59                      	pop	cx
  5493 000007A5 BF[CC0D]                	mov	di,WinoldPatch2
  5494 000007A8 F3A4                    	rep	movsb			;save next 8 bytes
  5495 000007AA EB1B                    	jmp	short winold_done
  5496                                  swapin:
  5497 000007AC 3C02                    	cmp	al,2			;swap Windows in call?
  5498 000007AE 7517                    	jne	short winold_done	;no, something else, pass it on
  5499 000007B0 E87301                  	call	getwinlast
  5500 000007B3 8EC6                    	mov	es,si
  5501 000007B5 31FF                    	xor	di,di
  5502 000007B7 BE[0600]                	mov	si,WinoldPatch1
  5503 000007BA B90800                  	mov	cx,8
  5504 000007BD FC                      	cld
  5505 000007BE 51                      	push	cx
  5506 000007BF F3A4                    	rep	movsb			;restore first 8 bytes
  5507 000007C1 59                      	pop	cx
  5508 000007C2 BE[CC0D]                	mov	si,WinoldPatch2
  5509 000007C5 F3A4                    	rep	movsb			;restore next 8 bytes
  5510                                  winold_done:
  5511 000007C7 59                      	pop	cx
  5512 000007C8 5F                      	pop	di
  5513 000007C9 5E                      	pop	si
  5514 000007CA 07                      	pop	es
  5515 000007CB 1F                      	pop	ds
  5516 000007CC EB7D                    	jmp	short next_i2f		;chain on
  5517                                  	; 15/12/2022
  5518                                  	;jmp	next_i2f	
  5519                                  
  5520                                  Win386_vxd:
  5521 000007CE 50                      	push	ax
  5522 000007CF 53                      	push	bx
  5523 000007D0 51                      	push	cx
  5524 000007D1 52                      	push	dx
  5525 000007D2 56                      	push	si
  5526 000007D3 57                      	push	di			; save regs !!dont change order!!
  5527                                  
  5528 000007D4 8B1E[8C00]              	mov	bx,[UMB_HEAD]		; M062 - Start
  5529 000007D8 83FBFF                  	cmp	bx,0FFFFh    		; Q: have umbs been initialized
  5530 000007DB 7421                    	je	short Vxd31		; N: continue
  5531                                  					; Y: save arena associated with 
  5532                                  					;    umb_head
  5533                                  
  5534 000007DD C606[D90D]01            	mov	byte [UmbSaveFlag],1	; indicate that we're saving 
  5535                                  					; umb_arena
  5536 000007E2 1E                      	push	ds
  5537 000007E3 06                      	push	es
  5538                                  
  5539 000007E4 8CD8                    	mov	ax,ds
  5540 000007E6 8EC0                    	mov	es,ax			; es - > dosdata
  5541                                  
  5542 000007E8 8EDB                    	mov	ds,bx
  5543 000007EA 31F6                    	xor	si,si			; ds:si -> umb_head
  5544                                  
  5545 000007EC FC                      	cld
  5546                                  
  5547 000007ED BF[FA11]                	mov	di,UmbSave1
  5548 000007F0 B90B00                  	mov	cx,11
  5549 000007F3 F3A4                    	rep	movsb
  5550                                  
  5551 000007F5 BF[D40D]                	mov	di,UmbSave2
  5552                                  	;mov	cx,5
  5553                                  	; 18/12/2022
  5554 000007F8 B105                    	mov	cl,5
  5555 000007FA F3A4                    	rep	movsb	
  5556                                  
  5557 000007FC 07                      	pop	es
  5558 000007FD 1F                      	pop	ds			; M062 - End
  5559                                  
  5560                                  Vxd31:
  5561                                  	;test	byte [DOS_FLAG],2
  5562 000007FE F606[8600]02            	test	byte [DOS_FLAG],SUPPRESS_WINA20	; M066
  5563 00000803 7408                    	jz	short Dont_Supress		; M066
  5564 00000805 5F                      	pop	di				; M066
  5565 00000806 5E                      	pop	si				; M066
  5566 00000807 5A                      	pop	dx				; M066
  5567 00000808 59                      	pop	cx				; M066
  5568 00000809 5B                      	pop	bx				; M066
  5569 0000080A 58                      	pop	ax				; M066
  5570 0000080B EB55                    	jmp	short noVxD31			; M066
  5571                                  
  5572                                  	; We check here if the VxD is available in the root of the boot drive. 
  5573                                  	; We do an extended open to suppress any error messages
  5574                                  	
  5575                                  Dont_Supress:
  5576 0000080D A0[6900]                	mov	al,[BOOTDRIVE]
  5577 00000810 0440                    	add	al,'A' - 1		; get drive letter
  5578 00000812 A2[3010]                	mov	[VxDpath],al		; path is root of bootdrive
  5579                                  	;mov	ah,ExtOpen  ;6Ch	; extended open
  5580                                  	;mov	al,0			; no extended attributes
  5581                                  	; 18/12/2022
  5582 00000815 B8006C                  	mov	ax,ExtOpen<<8 ; 6C00h
  5583 00000818 BB8020                  	mov	bx,2080h		; read access, compatibility mode
  5584                                  					; no inherit, suppress crit err
  5585 0000081B B90700                  	mov	cx,7			; hidden,system,read-only attr
  5586 0000081E BA0100                  	mov	dx,1			; fail if file does not exist
  5587 00000821 BE[3010]                	mov	si,VxDpath	
  5588                                  					; path of VxD file
  5589 00000824 BFFFFF                  	mov	di,0FFFFh		; no extended attributes
  5590                                  
  5591 00000827 CD21                    	int	21h			; do extended open
  5592                                  
  5593 00000829 5F                      	pop	di
  5594 0000082A 5E                      	pop	si
  5595 0000082B 5A                      	pop	dx
  5596 0000082C 59                      	pop	cx
  5597                                  
  5598 0000082D 7321                    	jnc	short VxDthere		; we found the VxD, go ahead
  5599                                  
  5600                                  	; We could not find the VxD. Cannot let windows load. Return cx != 0 
  5601                                  	; to indicate error to Windows after displaying message to user that 
  5602                                  	; VxD needs to be present to run Windows in enhanced mode.
  5603                                  
  5604 0000082F 52                      	push	dx
  5605 00000830 1E                      	push	ds
  5606 00000831 56                      	push	si
  5607 00000832 BE[CF09]                	mov	si,NoVxDErrMsg
  5608 00000835 0E                      	push	cs
  5609 00000836 1F                      	pop	ds
  5610 00000837 B96300                  	mov	cx,VxDMesLen ; 99	;
  5611 0000083A B402                    	mov	ah,2			; write char to console
  5612 0000083C FC                      	cld
  5613                                  vxdlp:
  5614 0000083D AC                      	lodsb
  5615 0000083E 86D0                    	xchg	dl,al			; get char in dl
  5616 00000840 CD21                    	int	21h
  5617 00000842 E2F9                    	loop	vxdlp
  5618                                  
  5619 00000844 5E                      	pop	si
  5620 00000845 1F                      	pop	ds
  5621 00000846 5A                      	pop	dx
  5622 00000847 5B                      	pop	bx
  5623 00000848 58                      	pop	ax			;all registers restored
  5624 00000849 41                      	inc	cx			;cx != 0 to indicate error
  5625                                  	; 15/12/22022
  5626                                  	;jmp	win_nexti2f		;chain on
  5627                                  	;jmp	short win_nexti2f
  5628                                  
  5629                                  	; 15/12/2022
  5630                                  win_nexti2f:
  5631 0000084A 1F                      	pop	ds
  5632                                  	;jmp	short next_i2f		; go to BIOS i2f handler
  5633                                  	; 15/12/2022
  5634                                  next_i2f:
  5635                                  	;;;jmp	bios_i2f
  5636                                  	;;jmp	far ptr 70h:5 ; MSDOS 6.21 (MSDOS.SYS, DOSCODE:44F1h)
  5637                                  	;jmp	KERNEL_SEGMENT:bios_i2f
  5638                                  	; 04/11/2022
  5639 0000084B EA05007000              	jmp	DOSBIODATASEG:bios_i2f
  5640                                  
  5641                                  VxDthere:
  5642 00000850 89C3                    	mov	bx,ax
  5643 00000852 B43E                    	mov	ah,CLOSE ; 3Eh
  5644 00000854 CD21                    	int	21h			;close the file
  5645                                  
  5646                                  	; Update the VxD ptr in the instance data structure with path to VxD
  5647                                  
  5648                                  	; 07/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  5649                                  	;mov	bx,Win386_Info
  5650                                  	;mov	word [bx+Win386_SIS.Virt_Dev_File_Ptr],VxDpath
  5651                                  	;mov	word [bx+Win386_SIS.Virt_Dev_File_Ptr+2],ds
  5652                                  	; 15/12/2022
  5653 00000856 C706[E70F][3010]        	mov	word [Win386_Info+Win386_SIS.Virt_Dev_File_Ptr],VxDpath
  5654 0000085C 8C1E[E90F]              	mov	word [Win386_Info+Win386_SIS.Virt_Dev_File_Ptr+2],ds
  5655                                  
  5656 00000860 5B                      	pop	bx
  5657 00000861 58                      	pop	ax
  5658                                  noVxD31:
  5659                                  	; M018; End of block changes
  5660                                  
  5661 00000862 800E[2F10]01            	or	byte [IsWin386],1 	; Indicate WIN386 present
  5662 00000867 800E[0C0D]01            	or	byte [redir_patch],1	; Enable critical sections; M002
  5663                                  
  5664                                  	; M002;
  5665                                  	; Save the previous es:bx (instance data ptr) into our instance table
  5666                                  
  5667 0000086C 52                      	push	dx			; M002
  5668 0000086D 89DA                    	mov	dx,bx			; M002
  5669                                  					; point ES:BX to Win386_Info ; M002
  5670 0000086F BB[E10F]                	mov	bx,Win386_Info 
  5671 00000872 895702                  	mov	[bx+2],dx		; M002
  5672 00000875 8C4704                  	mov	[bx+4],es		; M002
  5673 00000878 5A                      	pop	dx			; M002
  5674 00000879 1E                      	push	ds			; M002
  5675 0000087A 07                      	pop	es			; M002
  5676                                  	;jmp	win_nexti2f		; M002
  5677                                  	; 15/12/2022
  5678 0000087B EBCD                    	jmp	short win_nexti2f
  5679                                  
  5680                                  	; 15/12/2022
  5681                                  	; Code to return Win386 2.xx instance table
  5682                                  OldWin386Init:
  5683 0000087D 58                      	pop	ax			; discard ds pushed on stack
  5684 0000087E BE[CD11]                	mov	si,OldInstanceJunk 
  5685                                  					; ds:si = instance table
  5686 00000881 B84852                  	mov	ax,5248h ; 'RH'		; indicate instance data present
  5687                                  	;jmp	next_i2f
  5688                                  	; 15/12/2022
  5689 00000884 EBC5                    	jmp	short next_i2f
  5690                                  
  5691                                  Win386_Leaving:
  5692                                  	; 15/12/2022
  5693 00000886 F6C201                  	test 	dl,1
  5694                                  	;test	dx,1			; is this really win386?
  5695                                  	;jz	short Win386_Leaving_c
  5696                                  	;jmp	win_nexti2f		; NO! It's win 286 dos extender! M002
  5697                                  	; 15/12/2022
  5698 00000889 75BF                    	jnz	short win_nexti2f	
  5699                                  
  5700                                  Win386_Leaving_c:
  5701                                  					; M062 - Start
  5702 0000088B 803E[D90D]01            	cmp	byte [UmbSaveFlag], 1	; Q: was umb_arena saved at win start
  5703                                  					;    up.
  5704 00000890 7526                    	jne	short noumb		; N: not saved 
  5705 00000892 C606[D90D]00            	mov	byte [UmbSaveFlag], 0	; Y: clear UmbSaveFlag and restore 
  5706                                  					;    previously saved umb_head
  5707 00000897 50                      	push	ax
  5708 00000898 06                      	push	es
  5709 00000899 51                      	push	cx
  5710 0000089A 56                      	push	si
  5711 0000089B 57                      	push	di
  5712                                  
  5713 0000089C A1[8C00]                	mov	ax,[UMB_HEAD]	
  5714 0000089F 8EC0                    	mov	es,ax
  5715 000008A1 31FF                    	xor	di,di			; es:di -> umb_head
  5716                                  
  5717 000008A3 FC                      	cld
  5718                                  
  5719 000008A4 BE[FA11]                	mov	si,UmbSave1
  5720 000008A7 B90B00                  	mov	cx,11
  5721 000008AA F3A4                    	rep	movsb
  5722 000008AC BE[D40D]                	mov	si,UmbSave2
  5723                                  	;mov	cx,5
  5724                                  	; 18/12/2022
  5725 000008AF B105                    	mov	cl,5
  5726 000008B1 F3A4                    	rep	movsb
  5727                                  
  5728 000008B3 5F                      	pop	di
  5729 000008B4 5E                      	pop	si
  5730 000008B5 59                      	pop	cx
  5731 000008B6 07                      	pop	es
  5732 000008B7 58                      	pop	ax
  5733                                  noumb:					; M062 - End
  5734 000008B8 8026[2F10]00            	and	byte [IsWin386],0	; Win386 is gone
  5735 000008BD 8026[0C0D]00            	and	byte [redir_patch],0	; Disable critical sections ; M002
  5736 000008C2 EB86                    	jmp	short win_nexti2f
  5737                                  
  5738                                  ;	; 15/12/2022
  5739                                  ;	; Code to return Win386 2.xx instance table
  5740                                  ;OldWin386Init:
  5741                                  ;	pop	ax			; discard ds pushed on stack
  5742                                  ;	mov	si,OldInstanceJunk 
  5743                                  ;					; ds:si = instance table
  5744                                  ;	mov	ax,5248h ; 'RH'		; indicate instance data present
  5745                                  ;	;jmp	next_i2f
  5746                                  ;	; 15/12/2022
  5747                                  ;	jmp	short _next_i2f
  5748                                  
  5749                                  Win386_Query:
  5750 000008C4 83FB15                  	cmp	bx,Win386_DOSMGR ; 15h	; is this from DOSMGR?
  5751 000008C7 7581                    	jne	short win_nexti2f     	; no, ignore it & chain to next
  5752 000008C9 09C9                    	or	cx,cx			; is it an instance query?
  5753 000008CB 7508                    	jne	short dosmgr_func	; no, some DOSMGR query
  5754 000008CD 41                      	inc	cx			; indicate that data is instanced
  5755                                  ;
  5756                                  ; M001; We were previously returning a null ptr in es:bx. This will not work.
  5757                                  ; M001; WIN386 needs a ptr to a table in es:bx with the following offsets:
  5758                                  ; M001;  
  5759                                  ; M001; OFFSETS STRUC
  5760                                  ; M001; 	Major_version	db	?
  5761                                  ; M001; 	Minor_version	db	?
  5762                                  ; M001; 	SaveDS		dw	?
  5763                                  ; M001; 	SaveBX		dw	?
  5764                                  ; M001; 	Indos		dw	?
  5765                                  ; M001; 	User_id		dw	?
  5766                                  ; M001; 	CritPatch	dw	?
  5767                                  ; M001; OFFSETS	ENDS
  5768                                  ; M001; 
  5769                                  ; M001; User_Id is the only variable really important for proper functioning  
  5770                                  ; M001; of Win386. The other variables are used at init time to patch stuff
  5771                                  ; M001; out. In DOS 5.0, we do the patching ourselves. But we still need to 
  5772                                  ; M001; pass this table because Win386 depends on this table to get the 
  5773                                  ; M001; User_Id offset.
  5774                                  ; M001; 
  5775 000008CE BB[2110]                	mov	bx,Win386_DOSVars	; M001 
  5776 000008D1 1E                      	push	ds			; M001
  5777 000008D2 07                      	pop	es			; es:bx points at offset table ; M001
  5778 000008D3 EB41                    	jmp	short PopIret		; M001
  5779                                  
  5780                                  ; 15/12/2022
  5781                                  ;	; Code to return Win386 2.xx instance table
  5782                                  ;OldWin386Init:
  5783                                  ;	pop	ax			; discard ds pushed on stack
  5784                                  ;	mov	si,OldInstanceJunk 
  5785                                  ;					; ds:si = instance table
  5786                                  ;	mov	ax,5248h ; 'RH'		; indicate instance data present
  5787                                  ;	;jmp	next_i2f
  5788                                  ;	; 15/12/2022
  5789                                  ;	jmp	short _next_i2f
  5790                                  
  5791                                  dosmgr_func:
  5792 000008D5 49                      	dec	cx
  5793 000008D6 7436                    	jz	short win386_patch	; call to patch DOS
  5794 000008D8 49                      	dec	cx
  5795 000008D9 743B                    	jz	short PopIret		; remove DOS patches, ignore
  5796 000008DB 49                      	dec	cx
  5797 000008DC 743A                    	jz	short win386_size	; get size of DOS data structures
  5798 000008DE 49                      	dec	cx
  5799 000008DF 7441                    	jz	short win386_inst	; instance more data
  5800 000008E1 49                      	dec	cx
  5801 000008E2 7532                    	jnz	short PopIret		; no functions above this
  5802                                  
  5803                                  	; Get DOS device driver size -- es:di points at device driver header
  5804                                  	; In DOS 4.x, the para before the device header contains an arena 
  5805                                  	; header for the driver.
  5806                                  
  5807 000008E4 8CC0                    	mov	ax,es			; ax = device header segment
  5808                                  
  5809                                  	; We check to see if we have a memory arena for this device driver. 
  5810                                  	; The way to do this would be to look at the previous para to see if
  5811                                  	; it has a 'D' marking it as an arena and also see if the owner-field 
  5812                                  	; in the arena is the same as the device header segment. These two 
  5813                                  	; checks together should take care of all cases
  5814                                  
  5815 000008E6 48                      	dec	ax			; get arena header
  5816 000008E7 06                      	push	es
  5817 000008E8 8EC0                    	mov	es,ax			; arena header for device driver
  5818                                  
  5819 000008EA 26803D44                	cmp	byte [es:di],'D'	; is it a device arena?
  5820 000008EE 7517                    	jnz	short cantsize		; no, cant size this driver
  5821 000008F0 40                      	inc	ax			; get back device header segment
  5822 000008F1 26394501                	cmp	[es:di+1],ax		; owner field pointing at driver?
  5823 000008F5 7510                    	jnz	short cantsize		; no, not a proper arena
  5824                                  
  5825 000008F7 268B4503                	mov	ax,[es:di+3]		; get arena size in paras
  5826 000008FB 07                      	pop	es
  5827                                  
  5828                                  	; We have to multiply by 16 to get the number of bytes in (bx:cx)
  5829                                  	; Speed is not critical and so we choose the shortest method 
  5830                                  	; -- use "mul"
  5831                                  
  5832 000008FC BB1000                  	mov	bx,16
  5833 000008FF F7E3                    	mul	bx
  5834 00000901 89C1                    	mov	cx,ax
  5835 00000903 89D3                    	mov	bx,dx
  5836 00000905 EB09                    	jmp	short win386_done	; return with device driver size
  5837                                  cantsize:
  5838 00000907 07                      	pop	es
  5839 00000908 31C0                    	xor	ax,ax
  5840 0000090A 31D2                    	xor	dx,dx			; ask DOSMGR to use its methods
  5841 0000090C EB08                    	jmp	short PopIret		; return
  5842                                  
  5843                                  win386_patch:
  5844                                  	; dx contains bits marking the patches to be applied. We return 
  5845                                  	; the field with all bits set to indicate that all patches have been
  5846                                  	; done
  5847                                  
  5848 0000090E 89D3                    	mov	bx,dx			; move patch bitfield to bx
  5849                                   	;jmp	short win386_done	; done, return
  5850                                  	; 15/12/2022
  5851                                  	; 15/12/2022
  5852                                  win386_done:
  5853 00000910 B87CB9                  	mov	ax,WIN_OP_DONE		; 0B97Ch
  5854 00000913 BAABA2                  	mov	dx,DOSMGR_OP_DONE	; 0A2ABh
  5855                                  PopIret:
  5856 00000916 1F                      	pop	ds
  5857 00000917 CF                      	iret	
  5858                                  
  5859                                  win386_size:
  5860                                  	;Return the size of DOS data structures -- currently only CDS size
  5861                                  
  5862                                  	; 17/12/2022
  5863 00000918 F6C201                  	test	dl,1
  5864                                  	;test	dx,1			; check for CDS size bit
  5865 0000091B 74F9                    	jz	short PopIret		; no, unknown structure -- return
  5866                                  
  5867 0000091D B95800                  	mov	cx,curdirLen	; 88 	; cx = CDS size
  5868 00000920 EBEE                    	jmp	short win386_done	; return with the size
  5869                                  
  5870                                  win386_inst:
  5871                                  	; WIN386 check to see if DOS has identified the CDS,SFT and device 
  5872                                  	; chain as instance data. Currently, we let the WIN386 DOSMGR handle
  5873                                  	; this by returning a status of not previously instanced. The basic 
  5874                                  	; structure of these things have not changed and so the current 
  5875                                  	; DOSMGR code should be able to work it out
  5876                                  
  5877 00000922 31D2                    	xor	dx,dx			; make sure dx has a not done value
  5878 00000924 EBF0                    	jmp	short PopIret		; skip done indication
  5879                                  
  5880                                  	; 15/12/2022
  5881                                  ;win386_done:
  5882                                  ;	mov	ax,WIN_OP_DONE		; 0B97Ch
  5883                                  ;	mov	dx,DOSMGR_OP_DONE	; 0A2ABh
  5884                                  ;PopIret:
  5885                                  ;	pop	ds
  5886                                  ;	iret				; return back up the chain
  5887                                  
  5888                                  	; 15/12/2022
  5889                                  ;win_nexti2f:
  5890                                  	;pop	ds
  5891                                  	;jmp	next_i2f		; go to BIOS i2f handler
  5892                                  
  5893                                  ;End WIN386 support
  5894                                  
  5895                                  ; 15/05/2019
  5896                                  
  5897                                  ;M044; Start of changes
  5898                                  ; Winoldap has a bug in that its calculations for the Windows memory image
  5899                                  ; to save is off by 1 para. This para can happen to be a Windows arena if the
  5900                                  ; DOS top of memory happens to be at an odd boundary (as is the case when
  5901                                  ; UMBs are present). This is because Windows builds its arenas only at even
  5902                                  ; para boundaries. This arena now gets trashed when Windows is swapped back
  5903                                  ; in leading to a crash. Winoldap issues callouts when it swaps WIndows out
  5904                                  ; and back in. We sit on these callouts. On the Windows swapout, we save the
  5905                                  ; last para of the Windows memory block and then restore this para on the
  5906                                  ; Windows swapin callout. 
  5907                                  
  5908                                  getwinlast:
  5909                                  	; 07/12/2022
  5910 00000926 8B36[3003]              	mov	si,[CurrentPDB]
  5911 0000092A 4E                      	dec	si
  5912 0000092B 8EC6                    	mov	es,si
  5913 0000092D 2603360300              	add	si,[es:3]
  5914 00000932 C3                      	retn
  5915                                  
  5916                                  ; 15/12/2022
  5917                                  %if 0
  5918                                  winold_swap:
  5919                                  	push	ds
  5920                                  	push	es
  5921                                  	push	si
  5922                                  	push	di
  5923                                  	push	cx
  5924                                  
  5925                                  	;getdseg <ds>			;ds = DOSDATA
  5926                                  	mov	ds,[cs:DosDSeg]
  5927                                  
  5928                                  	cmp	al,1			;swap Windows out call
  5929                                  	jne	short swapin		;no, check if Swap in call
  5930                                  	call	getwinlast
  5931                                  	push	ds
  5932                                  	pop	es
  5933                                  	mov	ds,si			;ds = memory arena of Windows
  5934                                  	xor	si,si
  5935                                  	mov	di,WinoldPatch1
  5936                                  	mov	cx,8
  5937                                  	cld
  5938                                  	push	cx
  5939                                  	rep	movsb			;save first 8 bytes
  5940                                  	pop	cx
  5941                                  	mov	di,WinoldPatch2
  5942                                  	rep	movsb			;save next 8 bytes
  5943                                  	jmp	short winold_done
  5944                                  swapin:
  5945                                  	cmp	al,2			;swap Windows in call?
  5946                                  	jne	short winold_done	;no, something else, pass it on
  5947                                  	call	getwinlast
  5948                                  	mov	es,si
  5949                                  	xor	di,di
  5950                                  	mov	si,WinoldPatch1
  5951                                  	mov	cx,8
  5952                                  	cld
  5953                                  	push	cx
  5954                                  	rep	movsb			;restore first 8 bytes
  5955                                  	pop	cx
  5956                                  	mov	si,WinoldPatch2
  5957                                  	rep	movsb			;restore next 8 bytes
  5958                                  winold_done:
  5959                                  	pop	cx
  5960                                  	pop	di
  5961                                  	pop	si
  5962                                  	pop	es
  5963                                  	pop	ds
  5964                                  	jmp	next_i2f		;chain on
  5965                                  
  5966                                  %endif
  5967                                  
  5968                                  ;M044; End of changes
  5969                                  
  5970                                  ; 15/05/2019
  5971                                  
  5972                                  DispatchDOS:
  5973 00000933 2EFF36[C401]            	PUSH	word [CS:FOO]		; push return address
  5974 00000938 2EFF36[C601]            	PUSH	word [CS:DTab]		; push table address
  5975 0000093D 50                      	PUSH	AX			; push index
  5976 0000093E 55                      	PUSH	BP
  5977 0000093F 89E5                    	MOV	BP,SP
  5978                                  		; stack looks like:
  5979                                  		;   0	BP
  5980                                  		;   2	DISPATCH
  5981                                  		;   4	TABLE
  5982                                  		;   6	RETURN
  5983                                  		;   8	LONG-RETURN
  5984                                  		;   C	FLAGS
  5985                                  		;   E	AX
  5986                                  	
  5987 00000941 8B460E                  	MOV	AX,[BP+0Eh]		; get AX value
  5988 00000944 5D                      	POP	BP
  5989 00000945 E82009                  	call	TableDispatch
  5990 00000948 E9D4FD                  	JMP	BadFunc 		; return indicates invalid function
  5991                                  
  5992                                  INT2F_etcetera:
  5993                                  	;entry	DosGetGroup
  5994                                  DosGetGroup:
  5995                                  	; MSDOS 3.3
  5996                                  	;push	cs
  5997                                  	;pop	ds
  5998                                  	;retn
  5999                                  
  6000                                  	; MSDOS 6.0
  6001                                  ;SR; Cannot use CS now
  6002                                  ;
  6003                                  ;	PUSH	CS
  6004                                  ;	POP	DS
  6005                                  
  6006                                  	; 04/11/2022
  6007                                  	; (MSDOS 5.0 MSDOS.SYS - DOSCODE:46FBh)
  6008                                  
  6009                                  	;getdseg <ds>
  6010 0000094B 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  6011 00000950 C3                      	retn
  6012                                  
  6013                                  	;entry	DOSInstall
  6014                                  DOSInstall:
  6015 00000951 B0FF                    	MOV	AL,0FFh
  6016 00000953 C3                      	retn
  6017                                  
  6018                                  ;ENDIF ; (*)
  6019                                  
  6020                                  
  6021                                  ; 15/05/2019 - Retro DOS v4.0
  6022                                  
  6023                                  ;------------------------------------------------------------------------
  6024                                  ;
  6025                                  ; Procedure Name : RW32_CONVERT
  6026                                  ;
  6027                                  ;Input: same as ABSDRD and ABSDWRT
  6028                                  ;	 ES:BP -> DPB
  6029                                  ;Functions: convert 32bit absolute RW input parms to 16bit input parms
  6030                                  ;Output: carry set when CX=-1 and drive is less then 32mb
  6031                                  ;	 carry clear, parms ok
  6032                                  ;
  6033                                  ;------------------------------------------------------------------------
  6034                                  
  6035                                  RW32_CONVERT:
  6036 00000954 83F9FF                  	CMP	CX,-1			   ;>32mb  new format ?	;AN000;
  6037 00000957 7429                    	JZ	short new32format	   ;>32mb  yes		;AN000;
  6038 00000959 50                      	PUSH	AX			   ;>32mb  save ax	;AN000;
  6039 0000095A 52                      	PUSH	DX			   ;>32mb  save dx	;AN000;
  6040 0000095B 268B460D                	MOV	AX,[ES:BP+DPB.MAX_CLUSTER] ;>32mb  get max cluster # ;AN000;
  6041 0000095F 268A5604                	MOV	DL,[ES:BP+DPB.CLUSTER_MASK] ;>32mb		;AN000;
  6042 00000963 80FAFE                  	CMP	DL,0FEh 		;>32mb  removable ?	;AN000;
  6043 00000966 7407                    	JZ	short letold		;>32mb  yes		;AN000;
  6044                                  	;INC	DL			;>32mb			;AN000;
  6045                                  	; 17/12/2022
  6046 00000968 42                      	inc	dx
  6047 00000969 30F6                    	XOR	DH,DH			;>32mb  dx = sector/cluster ;AN000;
  6048 0000096B F7E2                    	MUL	DX			;>32mb  dx:ax= max sector # ;AN000;
  6049 0000096D 09D2                    	OR	DX,DX			;>32mb  > 32mb ?	;AN000;
  6050                                  letold:
  6051 0000096F 5A                      	POP	DX			;>32mb  restore dx	;AN000;
  6052 00000970 58                      	POP	AX			;>32mb  restore ax 	;AN000;
  6053 00000971 7425                    	JZ	short old_style		;>32mb  no 		;AN000;
  6054                                  
  6055 00000973 1E                      	push	ds
  6056                                  	;getdseg <ds>
  6057 00000974 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  6058 00000979 C706[B80D]0702          	mov	word [AbsDskErr],207h	;>32mb  bad address mark
  6059 0000097F 1F                      	pop	ds
  6060                                  
  6061 00000980 F9                      	STC				;>32mb			;AN000;
  6062 00000981 C3                      	retn				;>32mb			;AN000;
  6063                                  
  6064                                  new32format:
  6065                                  	;mov	dx,[bx+2]
  6066 00000982 8B5702                  	MOV	DX,[BX+ABS_32RW.SECTOR_RBA+2] ;>32mb		;AN000;
  6067                                  
  6068 00000985 1E                      	push	ds			; set up ds to DOSDATA
  6069                                  	;getdseg <ds>
  6070 00000986 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  6071 0000098B 8916[0706]              	MOV	[HIGH_SECTOR],DX	;>32mb			;AN000;
  6072 0000098F 1F                      	pop	ds
  6073                                  
  6074 00000990 8B17                    	mov	dx,[bx]
  6075                                  	;MOV	DX,[BX+ABS_32RW.SECTOR_RBA]  ;>32mb		;AN000;
  6076                                  	;mov	cx,[bx+4]
  6077 00000992 8B4F04                  	MOV	CX,[BX+ABS_32RW.ABS_RW_COUNT] ;>32mb		;AN000;
  6078                                  	;lds	bx,[bx+6]
  6079 00000995 C55F06                  	LDS	BX,[BX+ABS_32RW.BUFFER_ADDR] ;>32mb		;AN000;
  6080                                  old_style:				;>32mb			;AN000;
  6081 00000998 F8                      	CLC				;>32mb			;AN000;
  6082 00000999 C3                      	retn				;>32mb			;AN000;
  6083                                  
  6084                                  ;------------------------------------------------------------------------
  6085                                  ;
  6086                                  ; Procedure Name : Fastxxx_Purge
  6087                                  ;
  6088                                  ; Input: None
  6089                                  ; Functions: Purge Fastopen/ Cache Buffers
  6090                                  ; Output: None
  6091                                  ;
  6092                                  ;------------------------------------------------------------------------
  6093                                  
  6094                                  ; 05/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  6095                                  
  6096                                  Fastxxx_Purge:
  6097 0000099A 50                      	PUSH	AX			; save regs.	;AN000;
  6098 0000099B 56                      	PUSH	SI						;AN000;
  6099 0000099C 52                      	PUSH	DX						;AN000;
  6100                                  topen:
  6101 0000099D 1E                      	push	ds			; set up ds to DOSDATA
  6102                                  	;getdseg <ds>
  6103 0000099E 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  6104                                  
  6105 000009A3 F606[3A0D]80            	TEST	byte [FastOpenFlg],Fast_yes ; 80h 
  6106                                  					; fastopen installed ?	;AN000;
  6107 000009A8 1F                      	pop	ds
  6108 000009A9 740B                    	JZ	short nofast		; no			;AN000;
  6109 000009AB B401                    	MOV	AH,FastOpen_ID	; 1				;AN000;
  6110                                  dofast:
  6111 000009AD B005                    	MOV	AL,FONC_purge  ;5	; purge			;AN000;
  6112                                  	;;mov	dl,[es:bp+0]
  6113                                  	; 05/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  6114                                  	;MOV	DL,[ES:BP+DPB.DRIVE]	; set up drive number	;AN000;
  6115                                  	; 15/12/2022
  6116 000009AF 268A5600                	mov	dl,[es:bp]
  6117                                  	;invoke	Fast_Dispatch		; call fastopen/seek	;AN000;
  6118 000009B3 E8B51D                  	call	Fast_Dispatch
  6119                                  nofast:
  6120 000009B6 5A                      	POP	DX						;AN000;
  6121 000009B7 5E                      	POP	SI			; restore regs		;AN000;
  6122 000009B8 58                      	POP	AX			 			;AN000;
  6123 000009B9 C3                      	retn				; exit
  6124                                  
  6125                                  ;============================================================================
  6126                                  ; DOSMES.INC (MSDOS 6.0, 1991)
  6127                                  ;============================================================================
  6128                                  ; 29/04/2019 - Retro DOS v4.0
  6129                                  
  6130                                  ;include dossym.inc
  6131                                  ;include dosmac.inc
  6132                                  ;include doscntry.inc
  6133                                  
  6134                                  ; DOSCODE Segment
  6135                                  
  6136                                  ; 17/07/2018 - Retro DOS v3.0  [ DOSMES.INC (MSDOS 3.3, 1987) ]
  6137                                  ; ---------------------------------------------------------------------------
  6138                                  ;include divmes.inc
  6139                                  
  6140                                  ; DOSCODE:4778h (MSDOS 6.21, MSDOS.SYS)
  6141                                  ; -------------------------------------
  6142                                  ; DOSCODE:476Bh (MSDOS 5.0, MSDOS.SYS) - 05/11/2022 -
  6143                                  
  6144                                  ; THIS IS THE ONLY DOS "MESSAGE". IT DOES NOT NEED A TERMINATOR.
  6145                                  	;PUBLIC	DIVMES
  6146                                  
  6147 000009BA 0D0A44697669646520-     DIVMES:	DB	13,10,"Divide overflow",13,10
  6147 000009C3 6F766572666C6F770D-
  6147 000009CC 0A                 
  6148                                  
  6149                                  	;PUBLIC	DivMesLen
  6150                                  DivMesLen:
  6151 000009CD 1300                    	DW	$-DIVMES  ; 19	; Length of the above message in bytes
  6152                                  
  6153                                  ; DOSCODE:478Dh (MSDOS 6.21, MSDOS.SYS)
  6154                                  ; -------------------------------------
  6155                                  ; DOSCODE:4780h (MSDOS 5.0, MSDOS.SYS) - 05/11/2022 -
  6156                                  
  6157                                  ; (MSDOS 6.0)
  6158                                  ; VxD not found error message
  6159                                  
  6160                                  NoVxDErrMsg:
  6161 000009CF 596F75206D75737420-     	db  'You must have the file WINA20.386 in the root of your boot drive'
  6161 000009D8 686176652074686520-
  6161 000009E1 66696C652057494E41-
  6161 000009EA 32302E33383620696E-
  6161 000009F3 2074686520726F6F74-
  6161 000009FC 206F6620796F757220-
  6161 00000A05 626F6F742064726976-
  6161 00000A0E 65                 
  6162 00000A0F 0D0A746F2072756E20-     	db  0Dh,0Ah,'to run Windows in Enhanced Mode',0Dh,0Ah
  6162 00000A18 57696E646F77732069-
  6162 00000A21 6E20456E68616E6365-
  6162 00000A2A 64204D6F64650D0A   
  6163                                  
  6164                                  VxDMesLen equ $ - NoVxDErrMsg  ; 99
  6165                                  
  6166                                  ; 13/05/2019 - Retro DOS v4.0
  6167                                  ; 05/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  6168                                  
  6169                                  ;include yesno.asm  (MNSDOS 6.0)
  6170                                  ; -------------------------------------
  6171                                  ; DOSCODE:47F0h (MSDOS 6.21, MSDOS.SYS)
  6172                                  ; DOSCODE:47E3h (MSDOS 5.0, MSDOS.SYS) - 05/11/2022 -
  6173                                  
  6174                                  ; This is for country Yes and No
  6175                                  
  6176 00000A32 59                      NLS_YES:	db 'Y'
  6177 00000A33 4E                      NLS_NO:		db 'N'
  6178 00000A34 79                      NLS_yes2:	db 'y'
  6179 00000A35 6E                      NLS_no2:	db 'n'
  6180                                  
  6181                                  ; ---------------------------------------------------------------------------
  6182                                  
  6183                                  ; DOSCODE:47F4h (MSDOS 6.21, MSDOS.SYS)
  6184                                  ; DOSCODE:47E7h (MSDOS 5.0, MSDOS.SYS) - 05/11/2022 -
  6185                                  
  6186                                  ;SUBTTL EDIT FUNCTION ASSIGNMENTS AND HEADERS
  6187                                  
  6188                                  ; The following two tables implement the current buffered input editing
  6189                                  ; routines. The tables are pairwise associated in reverse order for ease
  6190                                  ; in indexing. That is; The first entry in ESCTAB corresponds to the last
  6191                                  ; entry in ESCFUNC, and the last entry in ESCTAB to the first entry in ESCFUNC.
  6192                                  
  6193                                  	;PUBLIC	CANCHAR
  6194                                  CANCHAR:
  6195 00000A36 1B                      	DB	CANCEL	; 1Bh	;Cancel line character
  6196                                  	
  6197                                  	;PUBLIC	ESCCHAR
  6198                                  ESCCHAR:
  6199 00000A37 00                      	DB	ESCCH	; 0	;Lead-in character for escape sequences
  6200                                  	
  6201                                  	;IF	NOT Rainbow
  6202                                  
  6203                                  ESCTAB:	; LABEL BYTE
  6204                                  
  6205                                  	;IF	IBM
  6206 00000A38 40                      	DB	64		; Ctrl-Z - F6
  6207 00000A39 4D                      	DB	77		; Copy one char - -->
  6208 00000A3A 3B                      	DB	59		; Copy one char - F1
  6209 00000A3B 53                      	DB	83		; Skip one char - DEL
  6210 00000A3C 3C                      	DB	60		; Copy to char - F2
  6211 00000A3D 3E                      	DB	62		; Skip to char - F4
  6212 00000A3E 3D                      	DB	61		; Copy line - F3
  6213 00000A3F 3D                      	DB	61		; Kill line (no change to template ) - Not used
  6214 00000A40 3F                      	DB	63		; Reedit line (new template) - F5
  6215 00000A41 4B                      	DB	75		; Backspace - <--
  6216 00000A42 52                      	DB	82		; Enter insert mode - INS (toggle)
  6217 00000A43 52                      	DB	82		; Exit insert mode - INS (toggle)
  6218 00000A44 41                      	DB	65		; Escape character - F7
  6219 00000A45 41                      	DB	65		; End of table
  6220                                  	;ENDIF
  6221                                  
  6222                                  ESCEND: ; LABEL BYTE
  6223                                  
  6224                                  ESCTABLEN EQU ESCEND-ESCTAB
  6225                                  
  6226                                  ESCFUNC: ; LABEL WORD
  6227                                  	
  6228 00000A46 [6314]                  	short_addr  GETCH	; Ignore the escape sequence
  6229 00000A48 [5315]                  	short_addr  TWOESC
  6230 00000A4A [DB15]                  	short_addr  EXITINS
  6231 00000A4C [DB15]                  	short_addr  ENTERINS
  6232 00000A4E [DD14]                  	short_addr  BACKSP
  6233 00000A50 [C715]                  	short_addr  REEDIT
  6234 00000A52 [CA14]                  	short_addr  KILNEW
  6235 00000A54 [5A15]                  	short_addr  COPYLIN
  6236 00000A56 [8D15]                  	short_addr  SKIPSTR
  6237 00000A58 [6015]                  	short_addr  COPYSTR
  6238 00000A5A [8315]                  	short_addr  SKIPONE
  6239 00000A5C [6515]                  	short_addr  COPYONE
  6240 00000A5E [6515]                  	short_addr  COPYONE
  6241 00000A60 [E315]                  	short_addr  CTRLZ
  6242                                  
  6243                                  	;ENDIF
  6244                                  
  6245                                  ; DOSMES.INC (MSDOS 6.0, 1991)
  6246                                  ; ---------------------------------------------------------------------------
  6247                                  ; DOSMES.ASM (MSDOS 2.11, 1983)
  6248                                  
  6249                                  ; OEMFunction key is expected to process a single function
  6250                                  ;   key input from a device and dispatch to the proper
  6251                                  ;   routines leaving all registers UNTOUCHED.
  6252                                  ;
  6253                                  ; Inputs:   CS, SS are DOSGROUP
  6254                                  ; Outputs:  None. This function is expected to JMP to onw of
  6255                                  ;           the following labels:
  6256                                  ;
  6257                                  ;           GetCh       - ignore the sequence
  6258                                  ;           TwoEsc      - insert an ESCChar in the buffer
  6259                                  ;           ExitIns     - toggle insert mode
  6260                                  ;           EnterIns    - toggle insert mode
  6261                                  ;           BackSp      - move backwards one space
  6262                                  ;           ReEdit      - reedit the line with a new template
  6263                                  ;           KilNew      - discard the current line and start from scratch
  6264                                  ;           CopyLin     - copy the rest of the template into the line
  6265                                  ;           SkipStr     - read the next character and skip to it in the template
  6266                                  ;           CopyStr     - read next char and copy from template to line until char
  6267                                  ;           SkipOne     - advance position in template one character
  6268                                  ;           CopyOne     - copy next character in template into line
  6269                                  ;           CtrlZ       - place a ^Z into the template
  6270                                  ; Registers that are allowed to be modified by this function are:
  6271                                  ;           AX, CX, BP
  6272                                  
  6273                                  ; 13/05/2019 - Retro DOS v4.0
  6274                                  ; -------------------------------------
  6275                                  ; DOSCODE:4820h (MSDOS 6.21, MSDOS.SYS)
  6276                                  
  6277                                  ; 05/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  6278                                  ; -------------------------------------
  6279                                  ; DOSCODE:4813h (MSDOS 5.0, MSDOS.SYS)
  6280                                  
  6281                                  OEMFunctionKey:
  6282 00000A62 E85D09                  	CALL	_$STD_CON_INPUT_NO_ECHO  ; Get the second byte of the sequence
  6283 00000A65 B10E                    	MOV     CL,ESCTABLEN ; 14	; length of table for scan
  6284 00000A67 57                      	PUSH    DI                      ; save DI (cannot change it!)
  6285 00000A68 BF[380A]                	MOV     DI,ESCTAB		; offset of second byte table
  6286 00000A6B 06                      	push	es
  6287 00000A6C 0E                      	push	cs
  6288 00000A6D 07                      	pop	es
  6289 00000A6E F2AE                    	REPNE   SCASB                   ; Look it up in the table
  6290 00000A70 07                      	pop	es
  6291 00000A71 5F                      	POP     DI                      ; restore DI
  6292 00000A72 D1E1                    	SHL     CX,1                    ; convert byte offset to word
  6293 00000A74 89CD                    	MOV     BP,CX                   ; move to indexable register
  6294                                  	;JMP	word [BP+ESCFUNC]	; Go to the right routine
  6295 00000A76 2EFFA6[460A]            	JMP	word [CS:BP+ESCFUNC]
  6296                                  
  6297                                  ;DOSCODE ENDS
  6298                                  	
  6299                                  ;============================================================================
  6300                                  ; TIME.ASM (MSDOS 6.0, 1991)
  6301                                  ;============================================================================
  6302                                  ; Retro DOS v3.0 - 18/07/2018
  6303                                  
  6304                                  ; SYSCALL.ASM (MSDOS 2.11, 1983)
  6305                                  ;----------------------------------------------------------------------------
  6306                                  ; Retro DOS v2.0 - 13/03/2018
  6307                                  
  6308                                  ;**	TIME.ASM - System Calls and low level routines for DATE and TIME
  6309                                  
  6310                                  	;BREAK <DATE AND TIME - SYSTEM CALLS 42,43,44,45>
  6311                                  
  6312                                  ;**	$GET_DATE - Get Current Date
  6313                                  ;----------------------------------------
  6314                                  ;	ENTRY	none
  6315                                  ;	EXIT	(cx:dx) = current date
  6316                                  ;	USES	all
  6317                                  
  6318                                  ; 05/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  6319                                  
  6320                                  _$GET_DATE:	;System call 42
  6321                                  
  6322 00000A7B 16                              PUSH    SS
  6323 00000A7C 1F                              POP     DS
  6324 00000A7D E8B900                          CALL	READTIME        ;Check for rollover to next day
  6325 00000A80 A1[5203]                        MOV     AX,[YEAR]
  6326                                  
  6327                                  ;	WARNING!!!! DAY and MONTH must be adjacently allocated!
  6328                                  
  6329 00000A83 8B1E[5003]                      MOV     BX,[DAY]	; fetch both day and month
  6330 00000A87 E805FA                  	CALL	Get_User_Stack	;Get pointer to user registers
  6331                                          ;MOV    [SI+6],BX  	;DH=month, DL=day
  6332 00000A8A 895C06                  	MOV	[SI+user_env.user_DX],BX
  6333 00000A8D 05BC07                          ADD     AX,1980         ;Put bias back
  6334                                          ;MOV    [SI+4],AX  	;CX=year
  6335 00000A90 894404                  	MOV	[SI+user_env.user_CX],AX
  6336 00000A93 36A0[5603]                      MOV	AL,[SS:WEEKDAY]	;hkn; SS override
  6337                                  RET20:	; 05/11/2022
  6338                                  RET24:	; 18/12/2022
  6339 00000A97 C3                      	RETN
  6340                                  
  6341                                  ;**	$SET_DATE - Set Current Date
  6342                                  ;----------------------------------------
  6343                                  ;	ENTRY	(cx:dx) = current date
  6344                                  ;	EXIT	(al) = -1 iff bad date
  6345                                  ;		(al) = 0 if ok
  6346                                  ;	USES	all
  6347                                  
  6348                                  _$SET_DATE:			;System call 43
  6349                                  
  6350 00000A98 B0FF                            MOV     AL,-1           ;Be ready to flag error
  6351 00000A9A 81E9BC07                        SUB     CX,1980         ;Fix bias in year
  6352                                  	;JC	SHORT RET24	;Error if not big enough
  6353                                          ; 05/11/2022
  6354 00000A9E 72F7                    	jc	short RET20
  6355 00000AA0 83F977                  	CMP     CX,119          ;Year must be less than 2100
  6356 00000AA3 77F2                            JA      SHORT RET24
  6357 00000AA5 08F6                            OR      DH,DH
  6358                                          ;JZ	SHORT RET24
  6359                                   	; 05/11/2022
  6360 00000AA7 74EE                    	jz	short RET20
  6361 00000AA9 08D2                            OR      DL,DL
  6362                                          ;JZ	SHORT RET24	;Error if either month or day is 0
  6363                                  	; 05/11/2022
  6364 00000AAB 74EA                    	jz	short RET20
  6365 00000AAD 80FE0C                          CMP     DH,12           ;Check against max. month
  6366 00000AB0 77E5                            JA      SHORT RET24
  6367 00000AB2 16                              PUSH    SS
  6368 00000AB3 1F                              POP     DS
  6369                                  	;CALL	DODATE
  6370                                  	; 18/12/2022
  6371 00000AB4 E91801                  	jmp	DODATE
  6372                                  ;RET24:  
  6373                                  	;RETN
  6374                                  
  6375                                  ;**	$GET_TIME - Get Current Time
  6376                                  ;----------------------------------------
  6377                                  ;	ENTRY	none
  6378                                  ;	EXIT	(cx:dx) = current time
  6379                                  ;	USES	all
  6380                                  
  6381                                  _$GET_TIME:			;System call 44
  6382                                  
  6383 00000AB7 16                              PUSH    SS
  6384 00000AB8 1F                              POP     DS
  6385 00000AB9 E87D00                  	CALL	READTIME
  6386 00000ABC E8D0F9                  	CALL	Get_User_Stack           ;Get pointer to user registers
  6387                                         ;MOV     [SI+6],DX
  6388 00000ABF 895406                  	MOV	[SI+user_env.user_DX],DX
  6389                                         ;MOV     [SI+4],CX
  6390 00000AC2 894C04                  	MOV	[SI+user_env.user_CX],CX
  6391 00000AC5 30C0                            XOR     AL,AL
  6392                                  RET26:  
  6393 00000AC7 C3                      	RETN
  6394                                  
  6395                                  ;**	$SET_TIME - Set Current Time
  6396                                  ;----------------------------------------
  6397                                  ;	ENTRY	(cx:dx) = time
  6398                                  ;	EXIT	(al) = 0 if 0k
  6399                                  ;		(al) = -1 if invalid
  6400                                  ;	USES	ALL
  6401                                  
  6402                                  _$SET_TIME:			;System call 45
  6403                                  
  6404 00000AC8 B0FF                            MOV     AL,-1           ;Flag in case of error
  6405 00000ACA 80FD18                          CMP     CH,24           ;Check hours
  6406 00000ACD 73F8                            JAE     SHORT RET26
  6407 00000ACF 80F93C                          CMP     CL,60           ;Check minutes
  6408 00000AD2 73F3                            JAE     SHORT RET26
  6409 00000AD4 80FE3C                          CMP     DH,60           ;Check seconds
  6410 00000AD7 73EE                            JAE     SHORT RET26
  6411 00000AD9 80FA64                          CMP     DL,100          ;Check 1/100's
  6412 00000ADC 73E9                            JAE     SHORT RET26
  6413 00000ADE 51                              PUSH    CX
  6414 00000ADF 52                              PUSH    DX
  6415 00000AE0 16                              PUSH    SS
  6416 00000AE1 1F                              POP     DS
  6417 00000AE2 BB[B603]                        MOV     BX,TIMEBUF
  6418 00000AE5 B90600                          MOV     CX,6
  6419 00000AE8 31D2                            XOR     DX,DX
  6420 00000AEA 89D0                            MOV     AX,DX
  6421 00000AEC 53                              PUSH    BX
  6422 00000AED E8AD3C                  	CALL	SETREAD
  6423 00000AF0 1E                              PUSH    DS
  6424 00000AF1 C536[2E00]                      LDS     SI,[BCLOCK]
  6425 00000AF5 E82F3C                  	CALL	DEVIOCALL2      ;Get correct day count
  6426 00000AF8 1F                              POP     DS
  6427 00000AF9 5B                              POP     BX
  6428 00000AFA E8D33C                  	CALL	SETWRITE
  6429 00000AFD 8F06[BA03]                      POP     WORD [TIMEBUF+4]
  6430 00000B01 8F06[B803]                      POP     WORD [TIMEBUF+2]
  6431 00000B05 C536[2E00]                      LDS     SI,[BCLOCK]
  6432 00000B09 E81B3C                  	CALL	DEVIOCALL2      ;Set the time
  6433 00000B0C 30C0                            XOR     AL,AL
  6434 00000B0E C3                              RETN
  6435                                  
  6436                                  ; 11/07/2018 - Retro DOS v3.0
  6437                                  ; Retro DOS v2.0 - 14/03/2018
  6438                                  
  6439                                  FOURYEARS EQU 3*365 + 366  ; = 1461 
  6440                                  
  6441                                  ;SUBTTL DATE16, READTIME, DODATE -- GUTS OF TIME AND DATE
  6442                                  ;----------------------------------------------------------
  6443                                  ; Date16 returns the current date in AX, current time in DX
  6444                                  ;   AX - YYYYYYYMMMMDDDDD  years months days
  6445                                  ;   DX - HHHHHMMMMMMSSSSS  hours minutes seconds/2
  6446                                  
  6447                                  DATE16:
  6448                                  	
  6449                                  ;M048	Context DS
  6450                                  ;
  6451                                  ; Since this function can be called thru int 2f we shall not assume that SS
  6452                                  ; is DOSDATA
  6453                                  
  6454                                  	;push	ss
  6455                                  	;pop	ds
  6456                                  
  6457                                  	;getdseg <ds>		; M048
  6458                                  
  6459                                  	; 13/05/2019 - Retro DOS v4.0
  6460 00000B0F 2E8E1E[0700]            	mov	ds, [cs:DosDSeg]	
  6461                                  
  6462 00000B14 51                              PUSH    CX
  6463 00000B15 06                              PUSH    ES
  6464 00000B16 E82000                          CALL    READTIME
  6465 00000B19 07                              POP     ES
  6466 00000B1A D0E1                            SHL     CL,1            ;Minutes to left part of byte
  6467 00000B1C D0E1                            SHL     CL,1
  6468 00000B1E D1E1                            SHL     CX,1            ;Push hours and minutes to left end
  6469 00000B20 D1E1                            SHL     CX,1
  6470 00000B22 D1E1                            SHL     CX,1
  6471 00000B24 D0EE                            SHR     DH,1            ;Count every two seconds
  6472 00000B26 08F1                            OR      CL,DH           ;Combine seconds with hours and minutes
  6473 00000B28 89CA                            MOV     DX,CX
  6474                                  
  6475                                  ;	WARNING! MONTH and YEAR must be adjacently allocated
  6476                                  
  6477 00000B2A A1[5103]                        MOV     AX,[MONTH]	;Fetch month and year
  6478 00000B2D B104                            MOV     CL,4
  6479 00000B2F D2E0                            SHL     AL,CL		;Push month to left to make room for day
  6480 00000B31 D1E0                            SHL     AX,1
  6481 00000B33 59                              POP     CX
  6482 00000B34 0A06[5003]                      OR      AL,[DAY]
  6483                                  RET21:
  6484 00000B38 C3                              RETN
  6485                                  
  6486                                  ;----------------------------------------------------------
  6487                                  
  6488                                  READTIME:
  6489                                  
  6490                                  ;Gets time in CX:DX. Figures new date if it has changed.
  6491                                  ;Uses AX, CX, DX.
  6492                                  
  6493 00000B39 C706[910D]0000          	MOV	word [DATE_FLAG],0 ; reset date flag for CPMIO
  6494 00000B3F 56                              PUSH    SI
  6495 00000B40 53                              PUSH    BX
  6496                                  
  6497 00000B41 BB[B603]                        MOV     BX,TIMEBUF
  6498                                  
  6499 00000B44 B90600                          MOV     CX,6
  6500 00000B47 31D2                            XOR     DX,DX
  6501 00000B49 89D0                            MOV     AX,DX
  6502 00000B4B E84F3C                  	CALL	SETREAD
  6503 00000B4E 1E                              PUSH    DS
  6504 00000B4F C536[2E00]                      LDS     SI,[BCLOCK]
  6505 00000B53 E8D13B                  	CALL	DEVIOCALL2      ;Get correct date and time
  6506 00000B56 1F                              POP     DS
  6507 00000B57 5B                              POP     BX
  6508 00000B58 5E                              POP     SI
  6509 00000B59 A1[B603]                        MOV     AX,[TIMEBUF]
  6510 00000B5C 8B0E[B803]                      MOV     CX,[TIMEBUF+2]
  6511 00000B60 8B16[BA03]                      MOV     DX,[TIMEBUF+4]
  6512 00000B64 3B06[5403]                      CMP     AX,[DAYCNT]     ;See if day count is the same
  6513                                          ;JZ	SHORT RET22
  6514 00000B68 74CE                    	JZ	SHORT RET21 ; 18/07/2018
  6515                                  	;cmp	ax,43830
  6516 00000B6A 3D36AB                          CMP     AX,FOURYEARS*30 ;Number of days in 120 years
  6517 00000B6D 733D                            JAE     SHORT RET22	;Ignore if too large
  6518 00000B6F A3[5403]                        MOV     [DAYCNT],AX
  6519 00000B72 56                              PUSH    SI
  6520 00000B73 51                              PUSH    CX
  6521 00000B74 52                              PUSH    DX              ;Save time
  6522 00000B75 31D2                            XOR     DX,DX
  6523                                  	;mov	cx,1461
  6524 00000B77 B9B505                          MOV     CX,FOURYEARS    ;Number of days in 4 years
  6525 00000B7A F7F1                            DIV     CX              ;Compute number of 4-year units
  6526 00000B7C D1E0                            SHL     AX,1
  6527 00000B7E D1E0                            SHL     AX,1
  6528 00000B80 D1E0                            SHL     AX,1            ;Multiply by 8 (no. of half-years)
  6529 00000B82 89C1                            MOV     CX,AX           ;<240 implies AH=0
  6530                                  
  6531 00000B84 BE[140D]                        MOV     SI,YRTAB        ;Table of days in each year
  6532                                  
  6533 00000B87 E82300                          CALL    DSLIDE          ;Find out which of four years we're in
  6534 00000B8A D1E9                            SHR     CX,1            ;Convert half-years to whole years
  6535 00000B8C 7304                            JNC     SHORT SK	;Extra half-year?
  6536 00000B8E 81C2C800                        ADD     DX,200
  6537                                  SK:
  6538 00000B92 E82400                          CALL    SETYEAR
  6539 00000B95 B101                            MOV     CL,1            ;At least at first month in year
  6540                                  
  6541 00000B97 BE[1C0D]                        MOV     SI,MONTAB       ;Table of days in each month
  6542                                          
  6543 00000B9A E81000                  	CALL    DSLIDE          ;Find out which month we're in
  6544 00000B9D 880E[5103]                      MOV     [MONTH],CL
  6545 00000BA1 42                              INC     DX              ;Remainder is day of month (start with one)
  6546 00000BA2 8816[5003]                      MOV     [DAY],DL
  6547 00000BA6 E89700                          CALL    WKDAY           ;Set day of week
  6548 00000BA9 5A                              POP     DX
  6549 00000BAA 59                              POP     CX
  6550 00000BAB 5E                              POP     SI
  6551                                  RET22:  
  6552 00000BAC C3                      	RETN
  6553                                  
  6554                                  ;----------------------------------------------------------
  6555                                  
  6556                                  DSLIDE:
  6557 00000BAD B400                            MOV     AH,0
  6558                                  DSLIDE1:
  6559 00000BAF AC                              LODSB			;Get count of days
  6560 00000BB0 39C2                            CMP     DX,AX           ;See if it will fit
  6561                                          ;JB	SHORT RET23	;If not, done
  6562 00000BB2 72F8                    	jb	short RET22 ; 13/05/2019 - Retro DOS v4.0
  6563 00000BB4 29C2                            SUB     DX,AX
  6564 00000BB6 41                              INC     CX              ;Count one more month/year
  6565 00000BB7 EBF6                            JMP     SHORT DSLIDE1
  6566                                  
  6567                                  ;----------------------------------------------------------
  6568                                  
  6569                                  SETYEAR:
  6570                                  
  6571                                  ;Set year with value in CX. Adjust length of February for this year.
  6572                                  
  6573                                  ; NOTE: This can also be called thru int 2f. If this is called then it will
  6574                                  ;       set DS to DOSDATA. Since the only guy calling this should be the DOS
  6575                                  ;	redir, DS will be DOSDATA anyway. It is going to be in-efficient to
  6576                                  ;	preserve DS as CHKYR is also called as a routine.
  6577                                  
  6578                                  	; MSDOS 6.0 (18/07/2018) ; *
  6579                                  
  6580                                  	;GETDSEG DS
  6581                                  
  6582                                  	;PUSH	CS  ; *
  6583                                  	;POP	DS  ; *
  6584                                  
  6585                                  	; 13/05/2019 - Retro DOS v4.0
  6586 00000BB9 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  6587                                  
  6588                                  	; Offset 18CEh in IBMDOS.COM (MSDOS 3.3), 1987
  6589                                  	; 05/11/2022 
  6590                                  	; DOSCODE:4970h in MSDOS.SYS (MSDOS 5.0), 1991 
  6591                                  
  6592 00000BBE 880E[5203]                      MOV     [YEAR],CL
  6593                                  CHKYR:
  6594 00000BC2 F6C103                          TEST    CL,3            ;Check for leap year
  6595 00000BC5 B01C                            MOV     AL,28
  6596 00000BC7 7502                            JNZ     SHORT SAVFEB	;28 days if no leap year
  6597 00000BC9 FEC0                            INC     AL              ;Add leap day
  6598                                  SAVFEB:
  6599 00000BCB A2[1D0D]                	mov	[february],al
  6600                                          ;MOV	[MONTAB+1],AL   ;Store for February
  6601                                  RET23:  
  6602 00000BCE C3                      	RETN
  6603                                  
  6604                                  ;----------------------------------------------------------
  6605                                  
  6606                                  DODATE:
  6607 00000BCF E8F0FF                          CALL    CHKYR           ;Set Feb. up for new year
  6608 00000BD2 88F0                            MOV     AL,DH
  6609                                  
  6610 00000BD4 BB[1B0D]                        MOV     BX,MONTAB-1	;DOSDATA:0D1Bh for MSDOS 6.21
  6611                                  
  6612 00000BD7 D7                              XLAT                    ;Look up days in month
  6613 00000BD8 38D0                            CMP     AL,DL
  6614 00000BDA B0FF                            MOV     AL,-1           ;Restore error flag, just in case
  6615                                          ;JB	SHORT RET25	;Error if too many days
  6616 00000BDC 72F0                            jb	short RET23 ; 18/07/2018
  6617 00000BDE E8D8FF                  	CALL    SETYEAR
  6618                                  ;
  6619                                  ; WARNING! DAY and MONTH must be adjacently allocated
  6620                                  ;
  6621 00000BE1 8916[5003]                      MOV     [DAY],DX	;Set both day and month
  6622 00000BE5 D1E9                            SHR     CX,1
  6623 00000BE7 D1E9                            SHR     CX,1
  6624                                  	;mov	ax,1461
  6625 00000BE9 B8B505                          MOV     AX,FOURYEARS
  6626 00000BEC 89D3                            MOV     BX,DX
  6627 00000BEE F7E1                            MUL     CX
  6628 00000BF0 8A0E[5203]                      MOV     CL,[YEAR]
  6629 00000BF4 80E103                          AND     CL,3
  6630                                  
  6631 00000BF7 BE[140D]                        MOV     SI,YRTAB
  6632                                  
  6633 00000BFA 89C2                            MOV     DX,AX
  6634 00000BFC D1E1                            SHL     CX,1            ;Two entries per year, so double count
  6635 00000BFE E85200                          CALL    DSUM            ;Add up the days in each year
  6636 00000C01 88F9                            MOV     CL,BH           ;Month of year
  6637                                  
  6638 00000C03 BE[1C0D]                        MOV     SI,MONTAB
  6639                                  
  6640 00000C06 49                              DEC     CX              ;Account for months starting with one
  6641 00000C07 E84900                          CALL    DSUM            ;Add up days in each month
  6642 00000C0A 88D9                            MOV     CL,BL           ;Day of month
  6643 00000C0C 49                              DEC     CX              ;Account for days starting with one
  6644 00000C0D 01CA                            ADD     DX,CX           ;Add in to day total
  6645 00000C0F 92                              XCHG    AX,DX           ;Get day count in AX
  6646 00000C10 A3[5403]                        MOV     [DAYCNT],AX
  6647 00000C13 56                              PUSH    SI
  6648 00000C14 53                              PUSH    BX
  6649 00000C15 50                              PUSH    AX
  6650                                  
  6651 00000C16 BB[B603]                        MOV     BX,TIMEBUF
  6652                                  
  6653 00000C19 B90600                          MOV     CX,6
  6654 00000C1C 31D2                            XOR     DX,DX
  6655 00000C1E 89D0                            MOV     AX,DX
  6656 00000C20 53                              PUSH    BX
  6657 00000C21 E8793B                  	CALL	SETREAD
  6658                                  
  6659 00000C24 1E                              PUSH    DS
  6660 00000C25 C536[2E00]                      LDS     SI,[BCLOCK]
  6661 00000C29 E8FB3A                  	CALL	DEVIOCALL2	;Get correct date and time
  6662 00000C2C 1F                              POP     DS
  6663 00000C2D 5B                              POP     BX
  6664 00000C2E E89F3B                  	CALL	SETWRITE
  6665 00000C31 8F06[B603]                      POP     WORD [TIMEBUF]
  6666 00000C35 1E                              PUSH    DS
  6667 00000C36 C536[2E00]                      LDS     SI,[BCLOCK]
  6668 00000C3A E8EA3A                  	CALL	DEVIOCALL2      ;Set the date
  6669 00000C3D 1F                              POP     DS
  6670 00000C3E 5B                              POP     BX
  6671 00000C3F 5E                              POP     SI
  6672                                  WKDAY:
  6673 00000C40 A1[5403]                        MOV     AX,[DAYCNT]
  6674 00000C43 31D2                            XOR     DX,DX
  6675 00000C45 B90700                          MOV     CX,7
  6676 00000C48 40                              INC     AX
  6677 00000C49 40                              INC     AX              ;First day was Tuesday
  6678 00000C4A F7F1                            DIV     CX              ;Compute day of week
  6679 00000C4C 8816[5603]                      MOV     [WEEKDAY],DL
  6680 00000C50 30C0                            XOR     AL,AL           ;Flag OK
  6681                                  RET25:
  6682 00000C52 C3                      	RETN
  6683                                  
  6684                                  ;----------------------------------------------------------
  6685                                  
  6686                                  ;**	DSUM - Compute the sum of a string of bytes
  6687                                  ;
  6688                                  ;	ENTRY	(cx) = byte count
  6689                                  ;		(ds:si) = byte address
  6690                                  ;		(dx) = sum register, initialized by caller
  6691                                  ;	EXIT	(dx) updated
  6692                                  ;	USES	ax, cx, dx, si, flags
  6693                                  
  6694                                  DSUM:
  6695 00000C53 B400                            MOV     AH,0
  6696 00000C55 E305                    	JCXZ	DSUM9 ; 13/05/2019 - Retro DOS v4.0
  6697                                         ;JCXZ	RET25 ; 18/07/2018
  6698                                  DSUM1:
  6699 00000C57 AC                              LODSB
  6700 00000C58 01C2                            ADD     DX,AX
  6701 00000C5A E2FB                            LOOP    DSUM1
  6702                                  DSUM9:
  6703 00000C5C C3                              RETN
  6704                                  
  6705                                  ;============================================================================
  6706                                  ; GETSET.ASM (MSDOS 6.0, 1991)
  6707                                  ;============================================================================
  6708                                  ; 29/04/2019 - Retro DOS v4.0
  6709                                  ; 18/07/2018 - Retro DOS v3.0 (GETSET.ASM, MSDOS 6.0, 1991)
  6710                                  
  6711                                  ; 12/03/2018 - Retro DOS v2.0 
  6712                                  
  6713                                  ;TITLE	GETSET - GETting and SETting MS-DOS system calls
  6714                                  ;NAME	GETSET
  6715                                  
  6716                                  ;CODE	SEGMENT BYTE PUBLIC  'CODE'
  6717                                  ;       ASSUME  SS:DOSGROUP,CS:DOSGROUP
  6718                                  
  6719                                  ;USERNUM:
  6720                                  ;	DW	0			; 24 bit user number
  6721                                  ;       DB      0
  6722                                  ;;	IF      IBM
  6723                                  ;;OEMNUM: DB    0			; 8 bit OEM number
  6724                                  ;;	ELSE
  6725                                  ;OEMNUM: DB     0FFH			; 8 bit OEM number
  6726                                  ;;	ENDIF
  6727                                  
  6728                                  ;MSVERS:		; MS-DOS version in hex for $GET_VERSION
  6729                                  ;; 08/07/2018 - Retro DOS v3.0
  6730                                  ;MSMAJOR: DB	MAJOR_VERSION	; DOS_MAJOR_VERSION
  6731                                  ;MSMINOR: DB	MINOR_VERSION	; DOS_MINOR_VERSION  
  6732                                  
  6733                                  ;BREAK <$Get_Version -- Return MSDOS version number>
  6734                                  ;----------------------------------------------------------------------------
  6735                                  
  6736                                  ; 05/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  6737                                  ; DOSCODE:4A0Fh (MSDOS 5.0 MSDOS.SYS)
  6738                                  
  6739                                  _$GET_VERSION:
  6740                                  
  6741                                  ; Inputs:
  6742                                  ;       None
  6743                                  ; Function:
  6744                                  ;       Return MS-DOS version number
  6745                                  ; Outputs:
  6746                                  ;       OEM number in BH
  6747                                  ;       User number in BL:CX (24 bits)
  6748                                  ;       Version number as AL.AH in binary
  6749                                  ;       NOTE: On pre 1.28 DOSs AL will be zero
  6750                                  
  6751                                  ; MSDOS 6.0
  6752                                  ;
  6753                                  ;	Fake_Count is used to lie about the version numbers to support
  6754                                  ;	old binarys. See ms_table.asm for more info.
  6755                                  ;
  6756                                  ;		if input al = 00
  6757                                  ;		  (bh) = OEM number			
  6758                                  ;		else if input al = 01
  6759                                  ;		  (bh) = version flags
  6760                                  ;		 
  6761                                  ;		       	 bits 0-2 = DOS internal revision
  6762                                  ;		       	 bits 3-7 = DOS type flags
  6763                                  ;		              bit 3    = DOS is in ROM
  6764                                  ;		              bit 4    = DOS in in HMA
  6765                                  ;		              bits 5-7 = reserved
  6766                                  ;               M007 change - only bit 3 is now valid. Other bits
  6767                                  ;               are 0 when AL = 1
  6768                                  
  6769                                  	; MSDOS 3.3 (IBMDOS.COM, offset 196Dh)
  6770                                  	;--------------------------------------
  6771                                  	; MSDOS 6.21 (MSDOS.SYS, DOSCODE:4A1Ch)
  6772                                  
  6773 00000C5D 16                              PUSH    SS
  6774 00000C5E 1F                              POP     DS
  6775 00000C5F 8B1E[B403]                      MOV     BX,[USERNUM+2]
  6776 00000C63 8B0E[B203]                      MOV     CX,[USERNUM]
  6777                                  
  6778                                  	; 13/05/2019 - Retro DOS v4.0
  6779                                  
  6780                                  	;If AL == 1, ROMDOS will return BH = dos internal version # &
  6781                                  	;DOS flags
  6782                                  
  6783 00000C67 3C01                    	cmp	AL,1
  6784 00000C69 7502                    	jne	short Norm_Vers
  6785                                  
  6786                                  ;ifdef ROMDOS
  6787                                  ;	mov	BH,DOSINROM 	; Just set the bit for ROM version
  6788                                  ;				(DOSINROM = 8)
  6789                                  ;else
  6790 00000C6B 30FF                            xor     bh,bh		; Otherwise return 0
  6791                                  ;endif				;M007 end
  6792                                  
  6793                                  Norm_Vers:
  6794                                  	;MOV	AX,[MSVERS]  ; MSDOS 3.3
  6795                                  
  6796                                          	; MSDOS 6.0	; MSVERS is a label in TABLE segment	
  6797                                  	; 13/05/2019 - Retro DOS v4.0
  6798 00000C6D 1E                      	push	ds		; Get the version number from the
  6799 00000C6E 8E1E[3003]              	mov	ds,[CurrentPDB]	; current app's PSP segment
  6800                                  	;mov	ax,[40h]
  6801 00000C72 A14000                  	mov	ax,[PDB.Version] ; AX = DOS version number	
  6802                                  	; 07/12/2022
  6803 00000C75 1F                      	pop	ds
  6804 00000C76 E816F8                  	call	Get_User_Stack
  6805                                  				; Put values for return registers
  6806                                  				; in the proper place on the user's	 
  6807                                  				; stack addressed by DS:SI
  6808                                          ;MOV	[SI+user_env.user_AX],AX
  6809 00000C79 8904                            MOV	[SI],AX			 
  6810                                  	;MOV	[SI+2],BX		 
  6811 00000C7B 895C02                  	mov	[SI+user_env.user_BX],BX 
  6812                                          ;MOV	[SI+4],CX
  6813 00000C7E 894C04                  	mov	[SI+user_env.user_CX],CX
  6814                                  
  6815 00000C81 C3                      	RETN
  6816                                  
  6817                                  ; 18/07/2018 - Retro DOS v3.0
  6818                                  
  6819                                  ;BREAK <$Get/Set_Verify_on_Write - return/set verify-after-write flag>
  6820                                  ;----------------------------------------------------------------------------
  6821                                  
  6822                                  ;**	$Get_Verify_On_Write - Get Status of Verify on write flag
  6823                                  ;
  6824                                  ;	ENTRY	none
  6825                                  ;	EXIT	(al) = value of VERIFY flag
  6826                                  ;	USES	all
  6827                                  
  6828                                  
  6829                                  _$GET_VERIFY_ON_WRITE:
  6830                                  
  6831                                  ;hkn; SS override
  6832 00000C82 36A0[FF02]              	MOV	AL,[SS:VERFLG]	; Retro DOS v2.0 - 12/03/2018
  6833 00000C86 C3                      	retn
  6834                                  
  6835                                  ;**	$Set_Verify_On_Write - Set Status of Verify on write flag
  6836                                  ;
  6837                                  ;	ENTRY	(al) = value of VERIFY flag
  6838                                  ;	EXIT	none
  6839                                  ;	USES	all
  6840                                  
  6841                                  _$SET_VERIFY_ON_WRITE:
  6842                                  
  6843 00000C87 2401                    	AND	AL,1
  6844                                  ;hkn; SS override
  6845 00000C89 36A2[FF02]              	MOV	[SS:VERFLG],AL	; Retro DOS v2.0 - 12/03/2018
  6846                                  RET27:	; 18/07/2018
  6847 00000C8D C3                      	retn
  6848                                  
  6849                                  ; 19/07/2018 - Retro DOS v3.0
  6850                                  
  6851                                  ;BREAK <$International - return country-dependent information>
  6852                                  ;----------------------------------------------------------------------------
  6853                                  ;
  6854                                  ; Procedure Name : $INTERNATIONAL
  6855                                  ;
  6856                                  ; Inputs:
  6857                                  ;	MOV	AH,International
  6858                                  ;	MOV	AL,country	(al = 0 => current country)
  6859                                  ;      [MOV	BX,country]
  6860                                  ;	LDS	DX,block
  6861                                  ;	INT	21
  6862                                  ; Function:
  6863                                  ;	give users an idea of what country the application is running
  6864                                  ; Outputs:
  6865                                  ;	IF DX != -1 on input (get country)
  6866                                  ;	  AL = 0 means return current country table.
  6867                                  ;	  0<AL<0FFH means return country table for country AL
  6868                                  ;	  AL = 0FF means return country table for country BX
  6869                                  ;	  No Carry:
  6870                                  ;	     Register BX will contain the 16-bit country code.
  6871                                  ;	     Register AL will contain the low 8 bits of the country code.
  6872                                  ;	     The block pointed to by DS:DX is filled in with the information
  6873                                  ;	     for the particular country.
  6874                                  ;		BYTE  Size of this table excluding this byte and the next
  6875                                  ;		BYTE  Country code represented by this table
  6876                                  ;			A sequence of n bytes, where n is the number specified
  6877                                  ;			by the first byte above and is not > internat_block_max,
  6878                                  ;			in the correct order for being returned by the
  6879                                  ;			INTERNATIONAL call as follows:
  6880                                  ;		WORD	Date format 0=mdy, 1=dmy, 2=ymd
  6881                                  ;		5 BYTE	Currency symbol null terminated
  6882                                  ;		2 BYTE	thousands separator null terminated
  6883                                  ;		2 BYTE	Decimal point null terminated
  6884                                  ;		2 BYTE	Date separator null terminated
  6885                                  ;		2 BYTE	Time separator null terminated
  6886                                  ;		1 BYTE	Bit field.  Currency format.
  6887                                  ;			Bit 0.	=0 $ before #  =1 $ after #
  6888                                  ;			Bit 1.	no. of spaces between # and $ (0 or 1)
  6889                                  ;		1 BYTE	No. of significant decimal digits in currency
  6890                                  ;		1 BYTE	Bit field.  Time format.
  6891                                  ;			Bit 0.	=0 12 hour clock  =1 24 hour
  6892                                  ;		DWORD	Call address of case conversion routine
  6893                                  ;		2 BYTE	Data list separator null terminated.
  6894                                  ;	  Carry:
  6895                                  ;	     Register AX has the error code.
  6896                                  ;	IF DX = -1 on input (set current country)
  6897                                  ;	  AL = 0 is an error
  6898                                  ;	  0<AL<0FFH means set current country to country AL
  6899                                  ;	  AL = 0FF means set current country to country BX
  6900                                  ;	  No Carry:
  6901                                  ;	    Current country SET
  6902                                  ;	    Register AL will contain the low 8 bits of the country code.
  6903                                  ;	  Carry:
  6904                                  ;	     Register AX has the error code.
  6905                                  ;-----------------------------------------------------------------------------
  6906                                  
  6907                                  ;procedure   $INTERNATIONAL,NEAR   ; DOS 3.3
  6908                                  
  6909                                  ; 13/05/2019 - Retro DOS v4.0
  6910                                  ; DOSCODE:4A4Dh (MSDOS 6.21, MSDOS.SYS)
  6911                                  
  6912                                  ; 05/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  6913                                  ; DOSCODE:4A40h (MSDOS 5.0, MSDOS.SYS)
  6914                                  
  6915                                  _$INTERNATIONAL:  ; IBMDOS.COM (MSDOS 3.3), offset 1992h
  6916                                  	 
  6917 00000C8E 3CFF                    	CMP	AL,0FFH
  6918 00000C90 7404                    	JZ	short BX_HAS_CODE	; -1 means country code is in BX
  6919 00000C92 88C3                    	MOV	BL,AL			; Put AL country code in BX
  6920 00000C94 30FF                    	XOR	BH,BH
  6921                                  BX_HAS_CODE:
  6922 00000C96 1E                      	PUSH	DS
  6923 00000C97 07                      	POP	ES
  6924 00000C98 52                      	PUSH	DX
  6925 00000C99 5F                      	POP	DI			; User buffer to ES:DI
  6926                                  
  6927                                  ;hkn; SS is DOSDATA
  6928                                  ;	context DS
  6929                                  
  6930 00000C9A 16                      	push	ss
  6931 00000C9B 1F                      	pop	ds
  6932                                  
  6933 00000C9C 83FFFF                  	CMP	DI,-1
  6934 00000C9F 7465                    	JZ	short international_set
  6935 00000CA1 09DB                    	OR	BX,BX
  6936 00000CA3 7505                    	JNZ	short international_find
  6937                                  
  6938                                  ;hkn; country_cdpg is in DOSDATA segment.
  6939 00000CA5 BE[0512]                	MOV	SI,COUNTRY_CDPG
  6940                                  
  6941 00000CA8 EB41                    	JMP	SHORT international_copy
  6942                                  
  6943                                  international_find:
  6944 00000CAA BD0000                  	MOV	BP,0			 ; flag it for GetCntry only
  6945 00000CAD E80B00                  	CALL	international_get
  6946 00000CB0 725C                    	JC	short errtn
  6947 00000CB2 83FB00                  	CMP	BX,0			 ; nlsfunc finished it ?
  6948 00000CB5 7534                    	JNZ	SHORT international_copy ; no, copy by myself
  6949 00000CB7 89D3                    	MOV	BX,DX			 ; put country back
  6950 00000CB9 EB40                    	JMP	SHORT international_ok3
  6951                                  
  6952                                  international_get:
  6953 00000CBB BE[0512]                	MOV	SI,COUNTRY_CDPG
  6954                                  
  6955                                  ;hkn; country_cdpg is in DOSDATA segment.
  6956                                  ;hkn; use ss override to access COUNTRY_CDPG fields
  6957                                  
  6958                                  	; MSDOS 3.3
  6959                                  	;;cmp	bx,[SI+63h]
  6960                                  	;CMP	BX,[SI+DOS_CCDPG.ccDosCountry]
  6961                                  	;jz	short RET27
  6962                                  
  6963                                  	; 13/05/2019 - Retro DOS v4.0
  6964                                  
  6965                                  	; MSDOS 6.0
  6966                                  	;cmp	bx,[ss:si+68h]
  6967 00000CBE 363B5C68                	CMP	BX,[ss:SI+DOS_CCDPG.ccDosCountry] ; = current country id
  6968 00000CC2 74C9                    	jz	short RET27			; return if equal
  6969                                  
  6970 00000CC4 89DA                    	MOV	DX,BX
  6971 00000CC6 31DB                    	XOR	BX,BX			; bx = 0, default code page
  6972                                  	;CallInstall NLSInstall,NLSFUNC,0 ; check if NLSFUNC in memory
  6973 00000CC8 B80014                  	mov	ax,1400h
  6974 00000CCB CD2F                    	int     2Fh	; - Multiplex - NLSFUNC.COM - INSTALLATION CHECK
  6975                                  			; Return: AL = 00h not installed, OK to install
  6976                                  			; 01h not installed, not OK
  6977                                  			; FFh installed
  6978 00000CCD 3CFF                    	CMP	AL,0FFH
  6979 00000CCF 7516                    	JNZ	short interr		; not in memory
  6980                                  	;cmp	bp,0
  6981 00000CD1 09ED                    	or	bp,bp			; GetCntry ?
  6982 00000CD3 7507                    	JNZ	short stcdpg
  6983                                  	
  6984                                  	;CallInstall GetCntry,NLSFUNC,4	; get country info
  6985 00000CD5 B80414                  	mov     ax,1404h
  6986 00000CD8 CD2F                    	int     2Fh	; - Multiplex - NLSFUNC.COM - GET COUNTRY INFO
  6987                                  			; BX = code page, DX = country code,
  6988                                  			; DS:SI -> internal code page structure
  6989                                  			; ES:DI -> user buffer
  6990                                  			; Return: AL = status
  6991                                  
  6992 00000CDA EB05                    	JMP	short chkok
  6993                                  	
  6994                                  	;nop
  6995                                  
  6996                                  stcdpg:
  6997                                  	;CallInstall SetCodePage,NLSFUNC,3  ; set country info
  6998 00000CDC B80314                  	mov     ax,1403h
  6999 00000CDF CD2F                    	int     2Fh	; - Multiplex - NLSFUNC.COM - SET COUNTRY INFO
  7000                                  			; DS:SI -> internal code page structure
  7001                                  			; BX = code page, DX = country code
  7002                                  			; Return: AL = status
  7003                                  chkok:
  7004 00000CE1 08C0                    	or	al,al			; success ?
  7005                                  	;retz				; yes
  7006 00000CE3 74A8                    	jz	short RET27
  7007                                  
  7008                                  setcarry:
  7009 00000CE5 F9                      	STC				; set carry
  7010 00000CE6 C3                      	retn
  7011                                  interr:
  7012 00000CE7 B0FF                    	MOV	AL,0FFH			; flag nlsfunc error
  7013 00000CE9 EBFA                    	JMP	short setcarry
  7014                                  
  7015                                  international_copy:
  7016                                  
  7017                                  ;hkn; country_cdpg is in DOSDATA segment.
  7018                                  ;hkn; use ss override to access COUNTRY_CDPG fields
  7019                                  
  7020                                  	; MSDOS 3.3
  7021                                  	;;mov	bx,[SI+63h]
  7022                                  	;mov	BX,[SI+DOS_CCDPG.ccDosCountry]
  7023                                  	;mov	SI,COUNTRY_CDPG+DOS_CCDPG.ccDFormat ; 08/09/2018
  7024                                  
  7025                                  	; 13/05/2019 - Retro DOS v4.0
  7026                                  
  7027                                  	; MSDOS 6.0
  7028                                  	;mov	bx,[ss:si+68h]
  7029 00000CEB 368B5C68                	MOV	BX,[ss:SI+DOS_CCDPG.ccDosCountry] ; = current country id
  7030 00000CEF BE[7112]                	MOV	SI,COUNTRY_CDPG+DOS_CCDPG.ccDFormat ; COUNTRY_CDPG + 108
  7031                                  
  7032                                  	;mov	cx,24
  7033 00000CF2 B91800                  	MOV	CX,OLD_COUNTRY_SIZE
  7034                                  
  7035                                  	; MSDOS 6.0
  7036                                  
  7037                                  ;hkn;	must set up DS to SS so that international info can be copied
  7038                                  	
  7039 00000CF5 1E                      	push	ds
  7040                                  
  7041 00000CF6 16                      	push	ss			; cs -> ss
  7042 00000CF7 1F                      	pop	ds
  7043                                  
  7044 00000CF8 F3A4                    	REP	MOVSB			; copy country info
  7045                                  
  7046                                  	; MSDOS 6.0
  7047                                  
  7048 00000CFA 1F                      	pop	ds	;hkn;	restore ds
  7049                                  
  7050                                  international_ok3:
  7051 00000CFB E891F7                  	call	Get_User_Stack
  7052                                  ;ASSUME	DS:NOTHING
  7053                                  	;MOV	[SI+2],BX
  7054 00000CFE 895C02                  	MOV	[SI+user_env.user_BX],BX
  7055                                  international_ok:
  7056 00000D01 89D8                    	MOV	AX,BX			; Return country code in AX too.
  7057                                  ;SYS_RET_OK_jmp:
  7058                                  	; 05/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  7059                                  nono:	; 15/12/2022
  7060                                  SYS_RET_OK_jmp:
  7061 00000D03 E943F9                  	jmp	SYS_RET_OK
  7062                                  
  7063                                  international_set:
  7064                                  
  7065                                  ;hkn; ASSUME	DS:DOSGROUP
  7066                                  ;ASSUME	DS:DOSDATA
  7067                                  
  7068 00000D06 BD0100                  	MOV	BP,1			; flag it for SetCodePage only
  7069 00000D09 E8AFFF                  	CALL	international_get
  7070 00000D0C 73F3                    	JNC	short international_ok
  7071                                  errtn:
  7072 00000D0E 3CFF                    	CMP	AL,0FFH
  7073 00000D10 7403                    	JZ	short errtn2
  7074                                  errtn1:
  7075 00000D12 E93DF9                  	jmp	SYS_RET_ERR		; return what we got from NLSFUNC
  7076                                  errtn2:
  7077                                  	;error	error_invalid_function	; NLSFUNC not existent
  7078                                  
  7079                                  	;mov	al,1
  7080 00000D15 B001                    	mov	al,error_invalid_function 
  7081 00000D17 EBF9                    	jmp	short errtn1 ; 13/05/2019 - Retro DOS v4.0
  7082                                  ;errtn3:
  7083                                  ;	jmp	SYS_RET_ERR
  7084                                  
  7085                                  ;EndProc $INTERNATIONAL
  7086                                  
  7087                                  ; 19/07/2018
  7088                                  
  7089                                  ;BREAK <$GetExtCntry - return extended country-dependent information>
  7090                                  
  7091                                  ;----------------------------------------------------------------------------
  7092                                  ;
  7093                                  ; Procedure Name : $GetExtCntry
  7094                                  ;
  7095                                  ; Inputs:
  7096                                  ;	if AL >= 20H
  7097                                  ;	  AL= 20H    capitalize single char, DL= char
  7098                                  ;	      21H    capitalize string, CX= string length
  7099                                  ;	      22H    capitalize ASCIIZ string
  7100                                  ;	      23H    YES/NO check, DL=1st char DH= 2nd char (DBCS)
  7101                                  ;	      80H bit 0 = use normal upper case table
  7102                                  ;		      1 = use file upper case table
  7103                                  ;	   DS:DX points to string
  7104                                  ;
  7105                                  ;	else
  7106                                  ;
  7107                                  ;	MOV	AH,GetExtCntry	 ; DOS 3.3
  7108                                  ;	MOV	AL,INFO_ID	( info type,-1 selects all )
  7109                                  ;	MOV	BX,CODE_PAGE	( -1 = active code page )
  7110                                  ;	MOV	DX,COUNTRY_ID	( -1 = active country )
  7111                                  ;	MOV	CX,SIZE 	( amount of data to return )
  7112                                  ;	LES	DI,COUNTRY_INFO ( buffer for returned data )
  7113                                  ;	INT	21
  7114                                  ; Function:
  7115                                  ;	give users extended country dependent information
  7116                                  ;	or capitalize chars
  7117                                  ; Outputs:
  7118                                  ;	  No Carry:
  7119                                  ;	     extended country info is succesfully returned
  7120                                  ;	  Carry:
  7121                                  ;	     Register AX has the error code.
  7122                                  ;	     AX=0, NO	 for YES/NO CHECK
  7123                                  ;		1, YES
  7124                                  ;----------------------------------------------------------------------------
  7125                                  
  7126                                  ;procedure   $GetExtCntry,NEAR	; DOS 3.3
  7127                                  
  7128                                  	; 06/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  7129                                  
  7130                                  	; MSDOS 6.0
  7131                                  _$GetExtCntry:
  7132 00000D19 3C20                    	CMP	AL,CAP_ONE_CHAR 	; < 20H ?
  7133 00000D1B 7269                    	JB	short notcap
  7134                                  capcap: 				;
  7135 00000D1D A880                    	TEST	AL,UPPER_TABLE	; 80h	; which upper case table
  7136 00000D1F 7505                    	JNZ	short fileupper		; file upper case
  7137                                  
  7138                                  ;hkn; UCASE_TAB in DOSDATA
  7139 00000D21 BB[AF0A]                	MOV	BX,UCASE_TAB+2		; get normal upper case
  7140 00000D24 EB03                    	JMP	SHORT capit
  7141                                  
  7142                                  fileupper:
  7143                                  ;hkn; FILE_UCASE_TAB in DOSDATA
  7144 00000D26 BB[310B]                	MOV	BX,FILE_UCASE_TAB+2 ; get file upper case
  7145                                  capit:					;
  7146 00000D29 3C20                    	CMP	AL,CAP_ONE_CHAR 	; cap one char ?
  7147 00000D2B 750D                    	JNZ	short chkyes		; no
  7148 00000D2D 88D0                    	MOV	AL,DL			; set up AL
  7149 00000D2F E81944                  	call	GETLET3 		; upper case it
  7150 00000D32 E85AF7                  	call	Get_User_Stack		; get user stack
  7151                                  	;mov	[si+6],al
  7152 00000D35 884406                  	MOV	[SI+user_env.user_DX],AL ; user's DL=AL
  7153 00000D38 EBC9                    	JMP	SHORT nono		; done
  7154                                  chkyes: 				;
  7155 00000D3A 3C23                    	CMP	AL,CHECK_YES_NO	; 23h	; check YES or NO ?
  7156 00000D3C 7522                    	JNZ	short capstring		; no
  7157                                  
  7158 00000D3E 31C0                    	XOR	AX,AX			; presume NO
  7159                                  		      
  7160                                  ;hkn; NLS_YES, NLS_NO, NLS_yes2, NLS_no2 is defined in msdos.cl3 which is
  7161                                  ;hkn; included in yesno.asm in the DOSCODE segment.
  7162                                  
  7163                                  	; 06/08/2018 - Retro DOS v3.0
  7164                                  	; 13/05/2019 - Retro DOS v4.0
  7165                                  	;cmp	dl,'Y'
  7166 00000D40 2E3A16[320A]            	CMP	DL,[cs:NLS_YES]		; is 'Y' ?
  7167 00000D45 7416                    	JZ	short yesyes		; yes
  7168                                  	;cmp	dl,'y'
  7169 00000D47 2E3A16[340A]            	CMP	DL,[cs:NLS_yes2]	; is 'y' ?
  7170 00000D4C 740F                    	JZ	short yesyes		; yes
  7171                                  	;cmp	dl,'N'
  7172 00000D4E 2E3A16[330A]            	CMP	DL,[cs:NLS_NO]		; is  'N'?
  7173 00000D53 74AE                    	JZ	short nono		; no
  7174                                  	;cmp	dl,'n'
  7175 00000D55 2E3A16[350A]            	CMP	DL,[cs:NLS_no2]		; is 'n' ?
  7176 00000D5A 74A7                    	JZ	short nono		; no
  7177                                  ;dbcs_char:				;
  7178 00000D5C 40                      	INC	AX			; not YES or NO
  7179                                  yesyes: 				;
  7180 00000D5D 40                      	INC	AX			; return 1
  7181                                  	; 15/12/2022
  7182                                  ;nono:	
  7183 00000D5E EBA3                    	jmp	short SYS_RET_OK_jmp	;
  7184                                  	; 06/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  7185                                  	;jmp	SYS_RET_OK		; done
  7186                                  
  7187                                  capstring:				;
  7188 00000D60 89D6                    	MOV	SI,DX			; si=dx
  7189 00000D62 3C21                    	CMP	AL,CAP_STRING	; 21h	; cap string ?
  7190 00000D64 750F                    	JNZ	short capascii		; no
  7191 00000D66 09C9                    	OR	CX,CX			; check count 0
  7192 00000D68 7499                    	JZ	short nono		; yes finished
  7193                                  concap: 				;
  7194 00000D6A AC                      	LODSB				; get char
  7195 00000D6B E8DD43                  	call	GETLET3 		; upper case it
  7196 00000D6E 8844FF                  	MOV	byte [SI-1],AL		; store back
  7197                                  ;next99: 				;
  7198 00000D71 E2F7                    	LOOP	concap			; continue
  7199 00000D73 EB8E                    	JMP	short nono		; done
  7200                                  capascii:				;
  7201 00000D75 3C22                    	CMP	AL,CAP_ASCIIZ	; 22h	; cap ASCIIZ string ?
  7202 00000D77 7545                    	JNZ	short capinval		; no
  7203                                  concap2:				;
  7204 00000D79 AC                      	LODSB				; get char
  7205 00000D7A 08C0                    	or	al,al			; end of string ?
  7206 00000D7C 7485                    	JZ	short nono		; yes
  7207 00000D7E E8CA43                  	call	GETLET3 		; upper case it
  7208 00000D81 8844FF                  	MOV	[SI-1],AL		; store back
  7209 00000D84 EBF3                    	JMP	short concap2 		; continue
  7210                                  
  7211                                  	; MSDOS 3.3 (& MSDOS 6.0)
  7212                                  
  7213                                  ; Offset 1A19h in IBMDOS.COM (MSDOS 3.3), 1987 	
  7214                                  ; _$GetExtCntry:
  7215                                  
  7216                                  notcap:
  7217 00000D86 83F905                  	CMP	CX,5			; minimum size is 5
  7218 00000D89 7279                    	jb	short sizeerror
  7219                                  
  7220                                  GEC_CONT:
  7221                                  ;hkn; SS is DOSDATA
  7222                                  	;context DS
  7223                                  
  7224 00000D8B 16                      	push	ss
  7225                                  	;pop	es  ; ! (Retro DOS v3.0 BUG) !
  7226 00000D8C 1F                      	pop	ds  ; 13/05/2019 - Retro DOS v4.0	
  7227                                  	
  7228                                  ;hkn; COUNTRY_CDPG is in DOSDATA
  7229 00000D8D BE[0512]                	MOV	SI,COUNTRY_CDPG
  7230                                  
  7231 00000D90 83FAFF                  	CMP	DX,-1			; active country ?
  7232 00000D93 7503                    	JNZ	short GETCDPG 		; no
  7233                                  
  7234                                  ;hkn; use DS override to accesss country_cdpg fields
  7235                                  	;;mov	dx,[si+63h] ; MSDOS 3.3
  7236                                  	;mov	dx,[si+68h] ; MSDOS 6.0
  7237 00000D95 8B5468                  	MOV	DX,[SI+DOS_CCDPG.ccDosCountry]
  7238                                  					; get active country id;smr;use DS
  7239                                  GETCDPG:
  7240 00000D98 83FBFF                  	CMP	BX,-1			; active code page?
  7241 00000D9B 7503                    	JNZ	short CHKAGAIN		; no, check again
  7242                                  
  7243                                  ;hkn; use DS override to accesss country_cdpg fields
  7244                                  	;;mov	bx,[si+65h] ; MSDOS 3.3	
  7245                                  	;mov	bx,[si+6Ah] ; MSDOS 6.0
  7246 00000D9D 8B5C6A                  	MOV	BX,[SI+DOS_CCDPG.ccDosCodePage]
  7247                                  					; get active code page id;smr;Use DS
  7248                                  CHKAGAIN:
  7249                                  	;cmp	dx,[si+68h] ; MSDOS 6.0
  7250 00000DA0 3B5468                  	CMP	DX,[SI+DOS_CCDPG.ccDosCountry]
  7251                                  					; same as active country id?;smr;use DS
  7252 00000DA3 7552                    	JNZ	short CHKNLS		; no
  7253                                  	;cmp	bx,[si+6Ah] ; MSDOS 6.0	
  7254 00000DA5 3B5C6A                  	CMP	BX,[SI+DOS_CCDPG.ccDosCodePage]	
  7255                                  					; same as active code pg id?;smr;use DS
  7256 00000DA8 754D                    	JNZ	short CHKNLS		; no
  7257                                  CHKTYPE:
  7258                                  	;mov	bx,[si+48h]
  7259 00000DAA 8B5C48                  	MOV	BX,[SI+DOS_CCDPG.ccSysCodePage]	
  7260                                  					; bx = sys code page id;smr;use DS
  7261 00000DAD 51                      	PUSH	CX			; save cx
  7262                                  	;mov	cx,[si+4Ah]
  7263 00000DAE 8B4C4A                  	MOV	CX,[SI+DOS_CCDPG.ccNumber_of_entries]  ;smr;use DS
  7264                                  	;mov	si,COUNTRY_CDPG+76
  7265 00000DB1 BE[5112]                	MOV	SI,COUNTRY_CDPG+DOS_CCDPG.ccSetUcase   ;smr;CDPG in DOSDATA
  7266                                  NXTENTRY:
  7267 00000DB4 3A04                    	CMP	AL,[SI] 		; compare info type;smr;use DS
  7268 00000DB6 740B                    	JZ	short FOUNDIT
  7269 00000DB8 83C605                  	ADD	SI,5			; next entry
  7270 00000DBB E2F7                    	LOOP	NXTENTRY
  7271 00000DBD 59                      	POP	CX
  7272                                  capinval:
  7273                                  	;error	error_invalid_function	; info type not found
  7274                                  	;mov	al,1
  7275 00000DBE B001                    	mov	al,error_invalid_function
  7276                                  ;SYS_RET_ERR_jmp:
  7277                                  	;jmp	SYS_RET_ERR
  7278                                  	; 06/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  7279                                  SYS_RET_ERR_jmp:
  7280 00000DC0 E98FF8                  	jmp	SYS_RET_ERR	
  7281                                  
  7282                                  FOUNDIT:
  7283 00000DC3 A4                      	MOVSB				; move info id byte
  7284 00000DC4 59                      	POP	CX			; restore char count
  7285                                  	;cmp	al,1
  7286 00000DC5 3C01                    	CMP	AL,SetCountryInfo	; select country info type ?
  7287 00000DC7 7415                    	JZ	short setsize
  7288 00000DC9 B90400                  	MOV	CX,4			; 4 bytes will be moved
  7289 00000DCC B80500                  	MOV	AX,5			; 5 bytes will be returned in CX
  7290                                  OK_RETN:
  7291 00000DCF F3A4                    	REP	MOVSB			; copy info
  7292 00000DD1 89C1                    	MOV	CX,AX			; CX = actual length returned
  7293 00000DD3 89D8                    	MOV	AX,BX			; return sys code page in ax
  7294                                  GETDONE:
  7295 00000DD5 E8B7F6                  	call	Get_User_Stack		; return actual length to user's CX
  7296                                  	;mov	[si+4],cx 
  7297 00000DD8 894C04                  	MOV	[SI+user_env.user_CX],CX
  7298                                  	;jmp	SYS_RET_OK
  7299                                  	; 15/12/2022
  7300                                  	; 25/06/2019
  7301 00000DDB E96EF8                  	jmp	SYS_RET_OK_clc
  7302                                  	; 06/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  7303                                  	; 15/12/2022
  7304                                  ;nono_jmp:
  7305                                  	;jmp	short nono
  7306                                  setsize:
  7307 00000DDE 83E903                  	SUB	CX,3			; size after length field
  7308 00000DE1 390C                    	CMP	[SI],CX			; less than table size ;smr;use ds
  7309 00000DE3 7302                    	JAE	short setsize2		; no
  7310 00000DE5 8B0C                    	MOV	CX,[SI]			; truncate to table size ;smr;use ds
  7311                                  setsize2:
  7312 00000DE7 26890D                  	MOV	[ES:DI],CX		; copy actual length to user's
  7313 00000DEA 83C702                  	ADD	DI,2			; update index
  7314 00000DED 83C602                  	ADD	SI,2
  7315 00000DF0 89C8                    	MOV	AX,CX
  7316 00000DF2 83C003                  	ADD	AX,3			; AX has the actual length
  7317 00000DF5 EBD8                    	JMP	short OK_RETN 		; go move it
  7318                                  CHKNLS:
  7319 00000DF7 30E4                    	XOR	AH,AH
  7320 00000DF9 50                      	PUSH	AX			; save info type
  7321 00000DFA 5D                      	POP	BP			; bp = info type
  7322                                  	
  7323                                  	;CallInstall NLSInstall,NLSFUNC,0 ; check if NLSFUNC in memory
  7324 00000DFB B80014                  	mov     ax,1400h
  7325 00000DFE CD2F                    	int     2Fh     ; - Multiplex - NLSFUNC.COM - INSTALLATION CHECK
  7326                                  			; Return: AL = 00h not installed, OK to install
  7327                                  			; 01h not installed, not OK
  7328                                  			; FFh installed
  7329 00000E00 3CFF                    	CMP	AL,0FFH
  7330 00000E02 7404                    	JZ	short NLSNXT		; in memory
  7331                                  
  7332                                  sizeerror:
  7333                                  	;error	error_invalid_function
  7334                                  	;mov	al,1
  7335 00000E04 B001                    	mov	al,error_invalid_function
  7336                                  	;jmp	SYS_RET_ERR
  7337                                  	; 06/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  7338                                  sys_ret_err_jmp2:
  7339 00000E06 EBB8                    	jmp	short SYS_RET_ERR_jmp
  7340                                  
  7341                                  NLSNXT: 
  7342                                  	;CallInstall GetExtInfo,NLSFUNC,2 ;get extended info
  7343 00000E08 B80214                  	mov     ax,1402h
  7344 00000E0B CD2F                    	int     2Fh	; - Multiplex - NLSFUNC.COM - GET COUNTRY INFO
  7345                                  			; BP = subfunction, BX = code page
  7346                                  			; DX = country code, DS:SI -> internal code page structure
  7347                                  			; ES:DI -> user buffer, CX = size of user buffer
  7348                                  			; Return: AL = status
  7349                                  			; 00h successful
  7350                                  			; else DOS error code
  7351                                  
  7352 00000E0D 3C00                    	CMP	AL,0			; success ?
  7353 00000E0F 7505                    	JNZ	short NLSERROR
  7354                                  	;mov	ax,[si+48h] ; 13/05/2019 
  7355 00000E11 8B4448                  	MOV	AX,[SI+DOS_CCDPG.ccSysCodePage]	
  7356                                  			; ax = sys code page id;smr;use ds;
  7357                                  			;BUGBUG;check whether DS is OK after the above calls
  7358 00000E14 EBBF                    	JMP	short GETDONE
  7359                                  seterr:
  7360                                  	; 15/12/2022
  7361                                  NLSERROR:
  7362                                  	;jmp	SYS_RET_ERR		; return what is got from NLSFUNC
  7363                                  	; 06/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  7364                                  	;jmp	short sys_ret_err_jmp2
  7365                                  	; 15/12/2022
  7366 00000E16 EBA8                    	jmp	short SYS_RET_ERR_jmp
  7367                                  
  7368                                  ;EndProc $GetExtCntry
  7369                                  
  7370                                  ; 13/05/2019 - Retro DOS v4.0
  7371                                  ; DOSCODE:4BD6h (MSDOS 6.21, MSDOS.SYS)
  7372                                  
  7373                                  ;BREAK <$GetSetCdPg - get or set global code page>
  7374                                  ;----------------------------------------------------------------------------
  7375                                  ;**	$GetSetCdPg - Get or Set Global Code Page
  7376                                  ;
  7377                                  ;   System call format:
  7378                                  ;
  7379                                  ;	MOV	AH,GetSetCdPg	; DOS 3.3
  7380                                  ;	MOV	AL,n		; n = 1 : get code page, n = 2 : set code page
  7381                                  ;	MOV	BX,CODE_PAGE	(set code page only)
  7382                                  ;	INT	21
  7383                                  ;
  7384                                  ;	ENTRY	(al) = n
  7385                                  ;		(bx) = code page
  7386                                  ;	EXIT	'C' clear
  7387                                  ;		  global code page is set	(set global code page)
  7388                                  ;		  (BX) = active code page id	(get global code page)
  7389                                  ;		  (DX) = system code page id	(get global code page)
  7390                                  ;		'C' set
  7391                                  ;		  (AX) = error code
  7392                                  
  7393                                  ;procedure  $GetSetCdPg,NEAR   ; DOS 3.3
  7394                                  
  7395                                  	; 06/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  7396                                  	; DOSCODE:4BC9h
  7397                                  
  7398                                  _$GetSetCdPg:
  7399                                  
  7400                                  ;hkn; SS is DOSDATA
  7401                                  	;context DS
  7402                                  
  7403 00000E18 16                      	push	ss
  7404 00000E19 1F                      	pop	ds
  7405                                  
  7406                                  ;hkn; COUNTRY_CDPG is in DOSDATA
  7407 00000E1A BE[0512]                	MOV	SI,COUNTRY_CDPG	  ; (DOSDATA:122Ah for MSDOS 6.21)
  7408                                  
  7409 00000E1D 3C01                    	CMP	AL,1		       ; get global code page
  7410 00000E1F 7512                    	JNZ	short setglpg 	       ; set global cod epage
  7411                                  	
  7412                                  	;;mov	bx,[si+65h] ; MSDOS 3.3
  7413                                  	;mov	bx,[si+6Ah] ; MSDOS 6.0
  7414 00000E21 8B5C6A                  	MOV	BX,[SI+DOS_CCDPG.ccDosCodePage]
  7415                                  					; get active code page id;smr;use ds
  7416                                  	;mov	dx,[si+48h]
  7417 00000E24 8B5448                  	MOV	DX,[SI+DOS_CCDPG.ccSysCodePage]
  7418                                  				  	; get sys code page id;smr;use ds
  7419 00000E27 E865F6                  	call	Get_User_Stack
  7420                                  ;ASSUME DS:NOTHING
  7421                                  	;mov	[si+2],bx
  7422 00000E2A 895C02                  	MOV	[SI+user_env.user_BX],BX ; update returned bx
  7423                                  	;mov	[si+6],dx
  7424 00000E2D 895406                  	MOV	[SI+user_env.user_DX],DX ; update returned dx
  7425                                  OK_RETURN:
  7426                                  	; 15/12/2022
  7427                                  	;transfer SYS_RET_OK
  7428 00000E30 E916F8                  	jmp	SYS_RET_OK
  7429                                  	; 06/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  7430                                  	;jmp	short nono_jmp
  7431                                  
  7432                                  ;hkn; ASSUME DS:DOSGROUP
  7433                                  ;ASSUME	DS:DOSDATA
  7434                                  
  7435                                  setglpg:
  7436 00000E33 3C02                    	CMP	AL,2
  7437 00000E35 7531                    	JNZ	short nomem
  7438                                  	
  7439                                  	;;mov	dx,[si+63h] ; MSDOS 3.3
  7440                                  	;mov	dx,[si+68h] ; MSDOS 6.0
  7441 00000E37 8B5468                  	MOV	DX,[SI+DOS_CCDPG.ccDosCountry]	;smr;use ds
  7442                                  	
  7443                                  	;CallInstall NLSInstall,NLSFUNC,0 ; check if NLSFUNC in memory
  7444 00000E3A B80014                  	mov     ax,1400h
  7445 00000E3D CD2F                    	int     2Fh	; - Multiplex - NLSFUNC.COM - INSTALLATION CHECK
  7446                                  			; Return: AL = 00h not installed, OK to install
  7447                                  			; 01h not installed, not OK
  7448                                  			; FFh installed
  7449 00000E3F 3CFF                    	CMP	AL,0FFH
  7450 00000E41 7525                    	JNZ	short nomem		; not in memory
  7451                                  
  7452                                  	;CallInstall SetCodePage,NLSFUNC,1 ;set the code page
  7453 00000E43 B80114                  	mov     ax,1401h
  7454 00000E46 CD2F                    	int     2Fh	; - Multiplex - NLSFUNC.COM - CHANGE CODE PAGE
  7455                                  			; DS:SI -> internal code page structure
  7456                                  			; BX = new code page, DX = country code???
  7457                                  			; Return: AL = status
  7458                                  			; 00h successful
  7459                                  			; else DOS error code
  7460                                  	;cmp	al,0
  7461 00000E48 08C0                    	or	al,al			; success ?
  7462 00000E4A 74E4                    	JZ	short OK_RETURN		; yes
  7463                                  
  7464 00000E4C 3C41                    	CMP	AL,65			; set device code page failed
  7465 00000E4E 75C6                    	JNZ	short seterr
  7466 00000E50 B84100                  	MOV	AX,65
  7467 00000E53 A3[2403]                	MOV	[EXTERR],AX
  7468                                  	;mov	byte [EXTERR_ACTION],6
  7469                                  	;mov	byte [EXTERR_CLASS],5
  7470                                  	;mov	byte [EXTERR_LOCUS],4
  7471 00000E56 C606[2603]06            	MOV	byte [EXTERR_ACTION],errACT_Ignore
  7472 00000E5B C606[2703]05            	MOV	byte [EXTERR_CLASS],errCLASS_HrdFail
  7473 00000E60 C606[2303]04            	MOV	byte [EXTERR_LOCUS],errLOC_SerDev
  7474                                  	;transfer From_GetSet
  7475 00000E65 E9F2F7                  	jmp	From_GetSet
  7476                                  
  7477                                  	; 15/12/2022
  7478                                  ;seterr:
  7479                                  	;;;transfer SYS_RET_ERR
  7480                                  	;;jmp	SYS_RET_ERR
  7481                                  	; 06/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  7482                                  	;jmp	short NLSERROR
  7483                                  
  7484                                  nomem:
  7485                                  	;error	error_invalid_function ; function not defined
  7486                                  	;mov	al,1
  7487 00000E68 B001                    	mov	al,error_invalid_function
  7488 00000E6A EBAA                    	jmp	short seterr
  7489                                  
  7490                                  ;EndProc $GetSetCdPg
  7491                                  
  7492                                  ; 13/05/2019 - Retro DOS v4.0
  7493                                  ; DOSCODE:4C2Bh (MSDOS 6.21, MSDOS.SYS)
  7494                                  
  7495                                  ;BREAK <$Get_Drive_Freespace -- Return bytes of free disk space on a drive>
  7496                                  ;----------------------------------------------------------------------------
  7497                                  ;**	$Get_Drive_Freespace - Return amount of drive free space
  7498                                  ;
  7499                                  ;	$Get_Drive_Freespace returns the # of free allocation units on a
  7500                                  ;		drive.
  7501                                  ;
  7502                                  ;	This call returns the same info in the same registers (except for the
  7503                                  ;	FAT pointer) as the old FAT pointer calls
  7504                                  ;
  7505                                  ;	ENTRY	DL = Drive number
  7506                                  ;	EXIT	AX = Sectors per allocation unit
  7507                                  ;		   = -1 if bad drive specified
  7508                                  ;		On User Stack
  7509                                  ;		    BX = Number of free allocation units
  7510                                  ;		    DX = Total Number of allocation units on disk
  7511                                  ;		    CX = Sector size
  7512                                  
  7513                                  ;procedure   $GET_DRIVE_FREESPACE,NEAR
  7514                                  
  7515                                  _$GET_DRIVE_FREESPACE:
  7516                                  
  7517                                  ;hkn; SS is DOSDATA
  7518                                  	;context DS
  7519 00000E6C 16                      	push	ss
  7520 00000E6D 1F                      	pop	ds
  7521                                  
  7522 00000E6E 88D0                    	MOV	AL,DL
  7523                                  	;invoke	GetThisDrv		; Get drive
  7524 00000E70 E8205D                  	call	GETTHISDRV
  7525                                  SET_AX_RET:
  7526 00000E73 7218                    	JC	short BADFDRV
  7527                                  	;invoke	DISK_INFO
  7528 00000E75 E8D71E                  	call	DISK_INFO
  7529 00000E78 87D3                    	XCHG	DX,BX
  7530 00000E7A 72F7                    	JC	short SET_AX_RET	; User FAILed to I 24
  7531 00000E7C 30E4                    	XOR	AH,AH			; Chuck Fat ID byte
  7532                                  DoSt:
  7533 00000E7E E80EF6                  	call	Get_User_Stack
  7534                                  ;ASSUME	DS:NOTHING
  7535                                  	;mov	[si+6],dx
  7536                                  	;mov	[si+4],cx
  7537                                  	;mov	[si+2],bx
  7538 00000E81 895406                  	MOV	[SI+user_env.user_DX],DX
  7539 00000E84 894C04                  	MOV	[SI+user_env.user_CX],CX
  7540 00000E87 895C02                  	MOV	[SI+user_env.user_BX],BX
  7541                                  	;MOV	[SI+user_env.user_AX],AX
  7542 00000E8A 8904                    	mov     [si],ax
  7543                                  	;return
  7544 00000E8C C3                      	retn
  7545                                  
  7546                                  BADFDRV:
  7547                                  	; MSDOS 3.3
  7548                                  	;;mov	al,0Fh
  7549                                  	;mov	al,error_invalid_drive	; Assume error
  7550                                  
  7551                                  	; 13/05/2019 - Retro DOS v4.0
  7552                                  
  7553                                  	; MSDOS 6.0 & MSDOS 3.3
  7554                                  	;invoke	FCB_RET_ERR
  7555 00000E8D E8D8F7                  	call	FCB_RET_ERR
  7556                                  	
  7557 00000E90 B8FFFF                  	MOV	AX,-1
  7558 00000E93 EBE9                    	JMP	short DoSt
  7559                                  
  7560                                  ;EndProc $GET_DRIVE_FREESPACE
  7561                                  
  7562                                  ;	BREAK <$Get_DMA, $Set_DMA -- Get/Set current DMA address>
  7563                                  ;----------------------------------------------------------------------------
  7564                                  ;**	$Get_DMA - Get Disk Transfer Address
  7565                                  ;
  7566                                  ;	ENTRY	none
  7567                                  ;	EXIT	ES:BX is current transfer address
  7568                                  ;	USES	all
  7569                                  
  7570                                  _$GET_DMA:
  7571 00000E95 368B1E[2C03]            	MOV	BX,[SS:DMAADD]
  7572 00000E9A 368B0E[2E03]            	MOV	CX,[SS:DMAADD+2]
  7573 00000E9F E8EDF5                  	call	Get_User_Stack
  7574                                  	;mov	[si+2],bx
  7575                                  	;mov	[si+10h],cx
  7576 00000EA2 895C02                  	MOV	[SI+user_env.user_BX],BX
  7577 00000EA5 894C10                  	MOV	[SI+user_env.user_ES],CX
  7578 00000EA8 C3                      	retn
  7579                                  
  7580                                  ;**	$Set_DMA - Set Disk Transfer Address
  7581                                  ;----------------------------------------------------------------------------
  7582                                  ;	ENTRY	DS:DX is current transfer address
  7583                                  ;	EXIT	none
  7584                                  ;	USES	all
  7585                                  
  7586                                  _$SET_DMA:
  7587 00000EA9 368916[2C03]            	MOV	[SS:DMAADD],DX
  7588 00000EAE 368C1E[2E03]            	MOV	[SS:DMAADD+2],DS
  7589 00000EB3 C3                      	retn
  7590                                  
  7591                                  ;	BREAK <$Get_Default_Drive, $Set_Default_Drive -- Set/Get default drive>
  7592                                  ;------------------------------------------------------------------------------
  7593                                  
  7594                                  ;**	$Get_Default_Drive - Get Current Default Drive
  7595                                  ;-----------------------------------------------------
  7596                                  ;	ENTRY	none
  7597                                  ;	EXIT	(AL) = drive number
  7598                                  ;	USES	all
  7599                                  
  7600                                  _$GET_DEFAULT_DRIVE:
  7601 00000EB4 36A0[3603]              	MOV	AL,[SS:CURDRV]
  7602 00000EB8 C3                      	retn
  7603                                  
  7604                                  ;**	$Set_Default_Drive - Specify new Default Drive
  7605                                  ;-----------------------------------------------------
  7606                                  ;	ENTRY	(DL) = Drive number for new default drive
  7607                                  ;	EXIT	(AL) = Number of drives, NO ERROR RETURN IF DRIVE NUMBER BAD
  7608                                  
  7609                                  _$SET_DEFAULT_DRIVE:
  7610 00000EB9 88D0                    	MOV	AL,DL
  7611 00000EBB FEC0                    	INC	AL			; A=1, B=2...
  7612 00000EBD E8B75C                  	call	GetVisDrv		; see if visible drive
  7613 00000EC0 7204                    	JC	short SETRET		; errors do not set
  7614 00000EC2 36A2[3603]              	MOV	[SS:CURDRV],AL		; no, set
  7615                                  
  7616                                  SETRET:
  7617 00000EC6 36A0[4700]              	MOV	AL,[SS:CDSCOUNT]	; let user see what the count really is
  7618 00000ECA C3                      	retn
  7619                                  
  7620                                  ;BREAK <$Get/Set_Interrupt_Vector - Get/Set interrupt vectors>
  7621                                  ;----------------------------------------------------------------------------
  7622                                  
  7623                                  ;**	$Get_Interrupt_Vector - Get Interrupt Vector
  7624                                  ;---------------------------------------------------
  7625                                  ;	$Get_Interrupt_Vector is the official way for user pgms to get the
  7626                                  ;	contents of an interrupt vector.
  7627                                  ;
  7628                                  ;	ENTRY	(AL) = interrupt number
  7629                                  ;	EXIT	(ES:BX) = current interrupt vector
  7630                                  
  7631                                  _$GET_INTERRUPT_VECTOR:
  7632 00000ECB E83000                  	CALL	RECSET
  7633 00000ECE 26C41F                  	LES	BX,[ES:BX]
  7634 00000ED1 E8BBF5                  	call	Get_User_Stack
  7635                                  	;mov	[si+2],bx
  7636                                  	;mov	[si+10h],es
  7637 00000ED4 895C02                  	MOV	[SI+user_env.user_BX],BX
  7638 00000ED7 8C4410                  	MOV	[SI+user_env.user_ES],ES
  7639 00000EDA C3                      	retn
  7640                                  
  7641                                  ;**	$Set_Interrupt_Vector - Set Interrupt Vector
  7642                                  ;---------------------------------------------------
  7643                                  ;	$Set_Interrupt_Vector is the official way for user pgms to set the
  7644                                  ;	contents of an interrupt vector.
  7645                                  ;
  7646                                  ;	M004, M068: Also set A20OFF_COUNT to 1 if EXECA20OFF bit has been set 
  7647                                  ;	and if A20OFF_COUNT is non-zero. See under tag M003 in inc\dossym.inc 
  7648                                  ;	for explanation.
  7649                                  ;
  7650                                  ;	ENTRY	(AL) = interrupt number
  7651                                  ;		(ds:dx) = desired new vector value
  7652                                  ;	EXIT	none
  7653                                  ;	USES	all
  7654                                  
  7655                                  ; 07/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  7656                                  ; 13/05/2019 - Retro DOS v4.0
  7657                                  
  7658                                  _$SET_INTERRUPT_VECTOR:
  7659 00000EDB E82000                  	CALL	RECSET
  7660 00000EDE FA                      	CLI				; Watch out!!!!! Folks sometimes use
  7661 00000EDF 268917                  	MOV	[ES:BX],DX		;   this for hardware ints (like timer).
  7662 00000EE2 268C5F02                	MOV	[ES:BX+2],DS
  7663 00000EE6 FB                      	STI
  7664                                  					; M004, M068 - Start
  7665                                  	; MSDOS 6.0
  7666 00000EE7 36F606[8600]04          	test	byte [ss:DOS_FLAG],EXECA20OFF ; 4
  7667                                  					; Q: was the previous call an int 21
  7668                                  					;    exec call
  7669                                  	; 07/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  7670                                  	;jnz	short siv_1		; Y: go set count
  7671                                  	;retn				; N: return
  7672                                  	; 15/12/2022
  7673 00000EED 740E                    	jz	short siv_2
  7674                                  siv_1:	
  7675 00000EEF 36803E[8500]00          	cmp	byte [ss:A20OFF_COUNT],0 ; Q: is count 0
  7676 00000EF5 7506                    	jne	short siv_2		 ; N: done 
  7677 00000EF7 36C606[8500]01          	mov	byte [ss:A20OFF_COUNT],1 ; Y: set it to 1 to indicate to dos 
  7678                                  					 ; dispatcher to turn A20 Off before 
  7679                                  					 ; returning to user.
  7680                                  siv_2:
  7681                                  	; 07/12/2022
  7682 00000EFD C3                      	retn				; M004, M068 - End
  7683                                  	
  7684                                  RECSET:
  7685 00000EFE 31DB                    	XOR	BX,BX
  7686 00000F00 8EC3                    	MOV	ES,BX
  7687 00000F02 88C3                    	MOV	BL,AL
  7688 00000F04 D1E3                    	SHL	BX,1
  7689 00000F06 D1E3                    	SHL	BX,1
  7690 00000F08 C3                      	retn
  7691                                  
  7692                                  ;	BREAK <$Char_Oper - hack on paths, switches so that xenix can look like PCDOS>
  7693                                  ;-------------------------------------------------------------------------------------
  7694                                  
  7695                                  ;**	$Char_Oper - Manipulate Switch Character
  7696                                  ;
  7697                                  ;	This function was put in to facilitate XENIX path/switch compatibility
  7698                                  ;
  7699                                  ;	ENTRY	AL = function:
  7700                                  ;		    0 - read switch char
  7701                                  ;		    1 - set switch char (char in DL)
  7702                                  ;		    2 - read device availability
  7703                                  ;			Always returns available
  7704                                  ;		    3 - set device availability
  7705                                  ;			No longer supported (NOP)
  7706                                  ;	EXIT	(al) = 0xff iff error
  7707                                  ;		(al) != 0xff if ok
  7708                                  ;		  (dl) = character/flag, if "read switch char" subfunction
  7709                                  ;	USES	AL, DL
  7710                                  ;
  7711                                  ;	NOTE	This already obsolete function has been deactivated in DOS 5.0
  7712                                  ;		The character / is always returned for subfunction 0,
  7713                                  ;		subfunction 2 always returns -1, all other subfunctions are ignored.
  7714                                  
  7715                                  ; 13/05/2019 - Retro DOS v4.0
  7716                                  ; DOSCODE:4CC9h (MSDOS 6.21, MSDOS.SYS)
  7717                                  
  7718                                  ; 06/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  7719                                  ; DOSCODE:4CBCh (MSDOS 5.0, MSDOS.SYS)
  7720                                  
  7721                                  _$CHAR_OPER:
  7722                                  	; MSDOS 6.0
  7723 00000F09 08C0                    	or	al,al				; get switch?
  7724 00000F0B B22F                    	mov	dl,'/'				; assume yes
  7725 00000F0D 7407                    	jz	short chop_1			; jump if yes
  7726 00000F0F 3C02                    	cmp	al,2				; check device availability?
  7727 00000F11 B2FF                    	mov	dl,-1				; assume yes
  7728 00000F13 7401                    	jz	short chop_1			; jump if yes
  7729 00000F15 C3                      	retn					; otherwise just quit
  7730                                  
  7731                                  ; subfunctions requiring return of value to user come here. DL holds
  7732                                  ; value to return
  7733                                  
  7734                                  chop_1:
  7735 00000F16 E876F5                  	call	Get_User_Stack
  7736 00000F19 895406                  	mov	[SI+user_env.user_DX],dx	; store value for user
  7737 00000F1C C3                      	retn
  7738                                  
  7739                                  	; MSDOS 3.3
  7740                                  	; Offset 1B87h in IBMDOS.COM (MSDOS 3.3), 1987
  7741                                  	;push	ss
  7742                                  	;pop	ds
  7743                                  	;cmp	al,1
  7744                                  	;jb	short chop_1
  7745                                  	;jz	short chop_2
  7746                                  	;cmp	al,3
  7747                                  	;jb	short chop_3
  7748                                  	;jz	short chop_5
  7749                                  	;mov	al,0FFh
  7750                                  	;retn
  7751                                  ;chop_1:
  7752                                  	;mov	dl,[chSwitch]
  7753                                  	;jmp	short chop_4
  7754                                  ;chop_2:
  7755                                  	;mov	[chSwitch],dl
  7756                                  	;retn
  7757                                  ;chop_3:
  7758                                  	;mov	dl, FFh
  7759                                  ;chop_4:
  7760                                  	;call	Get_User_Stack
  7761                                  	;mov	[si+6],dx
  7762                                  ;chop_5:
  7763                                  	;retn
  7764                                  
  7765                                  ;**	$GetExtendedError - Return Extended error code
  7766                                  ;----------------------------------------------------------------------------
  7767                                  ;	This function reads up the extended error info from the static
  7768                                  ;	variables where it was stored.
  7769                                  ;
  7770                                  ;	ENTRY	none
  7771                                  ;	EXIT	AX = Extended error code (0 means no extended error)
  7772                                  ;		BL = recommended action
  7773                                  ;		BH = class of error
  7774                                  ;		CH = locus of error
  7775                                  ;		ES:DI = may be pointer
  7776                                  ;	USES	ALL
  7777                                  
  7778                                  	; 06/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  7779                                  
  7780                                  _$GetExtendedError:
  7781 00000F1D 16                      	push	ss
  7782 00000F1E 1F                      	pop	ds
  7783 00000F1F A1[2403]                	MOV	AX,[EXTERR]
  7784 00000F22 C43E[2803]              	LES	DI,[EXTERRPT]
  7785 00000F26 8B1E[2603]              	MOV	BX,[EXTERR_ACTION]	; BL = Action, BH = Class
  7786 00000F2A 8A2E[2303]              	MOV	CH,[EXTERR_LOCUS]
  7787 00000F2E E85EF5                  	call	Get_User_Stack
  7788                                  	;mov	[si+0Ah],di
  7789 00000F31 897C0A                  	MOV	[SI+user_env.user_DI],DI
  7790                                  	;mov	[si+10h],es
  7791 00000F34 8C4410                  	MOV	[SI+user_env.user_ES],ES
  7792                                  	;mov	[si+2],bx
  7793 00000F37 895C02                  	MOV	[SI+user_env.user_BX],BX
  7794                                  	;mov	[si+4],cx
  7795 00000F3A 894C04                  	MOV	[SI+user_env.user_CX],CX
  7796                                  jmp_SYS_RET_OK:
  7797                                  	; 15/12/2022
  7798                                  	;jmp	SYS_RET_OK
  7799                                  	; 25/06/2019
  7800 00000F3D E90CF7                  	jmp	SYS_RET_OK_clc ; 15/12/2022
  7801                                  	; 06/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  7802                                  ;jmp_SYS_RET_OK:
  7803                                  	;jmp	SYS_RET_OK
  7804                                  
  7805                                  ; --------------------------------------------------------------------------
  7806                                  	; 06/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  7807                                  	; DOSCODE:4CF3h
  7808                                  ;patch_or_unknown:
  7809                                  ;get_code_page:
  7810 00000F40 56                      	push    si
  7811 00000F41 BE[0512]                	mov     si, COUNTRY_CDPG
  7812                                  	;mov	ax, [si+DOS_CCDPG.ccDosCodePage]
  7813 00000F44 368B446A                	mov     ax, [ss:si+6Ah]
  7814 00000F48 5E                      	pop     si
  7815 00000F49 C3                      	retn
  7816                                  ; --------------------------------------------------------------------------	
  7817                                  
  7818                                  ; 29/04/2019 - Retro DOS v4.0
  7819                                  
  7820                                  ;BREAK	<ECS_call - Extended Code System support function>
  7821                                  ;---------------------------------------------------------------------------
  7822                                  ; Inputs:
  7823                                  ;	AL = 0	get lead byte table
  7824                                  ;		on return DS:SI has the table location
  7825                                  ;
  7826                                  ;	AL = 1	set / reset interim console flag
  7827                                  ;		DL = flag (00H or 01H)
  7828                                  ;		no return
  7829                                  ;
  7830                                  ;	AL = 2	get interim console flag
  7831                                  ;		on return DL = current flag value
  7832                                  ;
  7833                                  ;	AL = OTHER then error, and returns with:
  7834                                  ;		AX = error_invalid_function
  7835                                  ;
  7836                                  ;  NOTE: THIS CALL DOES GUARANTEE THAT REGISTER OTHER THAN
  7837                                  ;	 SS:SP WILL BE PRESERVED!
  7838                                  ;---------------------------------------------------------------------------
  7839                                  
  7840                                  _$ECS_Call:
  7841 00000F4A 08C0                    	or	al,al			; AL = 0 (get table)?
  7842                                  	;jnz	short _okok
  7843                                  	; 15/12/2022
  7844 00000F4C 7403                    	jz	short get_lbt
  7845                                  ;_okok:
  7846 00000F4E E9F8F6                  	jmp	SYS_RET_OK
  7847                                  get_lbt:
  7848 00000F51 E83BF5                  	call	Get_User_Stack		; *
  7849                                  
  7850                                  ;hkn; dbcs_table moved low to dosdata
  7851                                  	;mov	word [si+8],DBCS_TAB+2
  7852 00000F54 C74408[E50C]            	mov	word [si+user_env.user_SI],DBCS_TAB+2
  7853                                  
  7854 00000F59 06                      	push	es
  7855                                  	;getdseg <es>			; es = DOSDATA
  7856 00000F5A 2E8E06[0700]            	mov	es,[cs:DosDSeg]
  7857                                  	;mov	[si+14],es
  7858 00000F5F 8C440E                  	mov	[SI+user_env.user_DS],es
  7859 00000F62 07                      	pop	es
  7860                                  
  7861                                  	; 15/12/2022
  7862 00000F63 EBD8                    	jmp	short jmp_SYS_RET_OK ; jmp SYS_RET_OK_clc ; *
  7863                                  ;_okok:
  7864                                  	; 15/12/2022	
  7865                                  	;;transfer SYS_RET_OK
  7866                                  	;jmp	short jmp_SYS_RET_OK
  7867                                  	; 06/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  7868                                  	;;jmp	SYS_RET_OK
  7869                                  	;jmp	short jmp_SYS_RET_OK
  7870                                  
  7871                                  ;============================================================================
  7872                                  ; PARSE.ASM, MSDOS 6.0, 1991
  7873                                  ;============================================================================
  7874                                  ; 19/07/2018 - Retro DOS v3.0
  7875                                  ; 15/05/2019 - Retro DOS v4.0
  7876                                  
  7877                                  ; System calls for parsing command lines
  7878                                  ;
  7879                                  ;   $PARSE_FILE_DESCRIPTOR
  7880                                  ;
  7881                                  ;   Modification history:
  7882                                  ;
  7883                                  ;       Created: ARR 30 March 1983
  7884                                  ;               EE PathParse 10 Sept 1983
  7885                                  ;
  7886                                  
  7887                                  ;BREAK <$Parse_File_Descriptor -- Parse an arbitrary string into an FCB>
  7888                                  ;---------------------------------------------------------------------------
  7889                                  ; Inputs:
  7890                                  ;       DS:SI Points to a command line
  7891                                  ;       ES:DI Points to an empty FCB
  7892                                  ;       Bit 0 of AL = 1 At most one leading separator scanned off
  7893                                  ;                   = 0 Parse stops if separator encountered
  7894                                  ;       Bit 1 of AL = 1 If drive field blank in command line - leave FCB
  7895                                  ;                   = 0  "    "    "     "         "      "  - put 0 in FCB
  7896                                  ;       Bit 2 of AL = 1 If filename field blank - leave FCB
  7897                                  ;                   = 0  "       "      "       - put blanks in FCB
  7898                                  ;       Bit 3 of AL = 1 If extension field blank - leave FCB
  7899                                  ;                   = 0  "       "      "        - put blanks in FCB
  7900                                  ; Function:
  7901                                  ;       Parse command line into FCB
  7902                                  ; Returns:
  7903                                  ;       AL = 1 if '*' or '?' in filename or extension, 0 otherwise
  7904                                  ;       DS:SI points to first character after filename
  7905                                  ;---------------------------------------------------------------------------
  7906                                  
  7907                                  _$PARSE_FILE_DESCRIPTOR:
  7908 00000F65 E88040                  	call	MAKEFCB
  7909 00000F68 56                      	PUSH    SI
  7910 00000F69 E823F5                  	call	Get_User_Stack
  7911                                  	;pop	word [si+8]
  7912 00000F6C 8F4408                  	POP     word [SI+user_env.user_SI]
  7913 00000F6F C3                      	retn
  7914                                  
  7915                                  ;============================================================================
  7916                                  ; MISC.ASM, MSDOS 6.0, 1991
  7917                                  ;============================================================================
  7918                                  ; 19/07/2018 - Retro DOS v3.0
  7919                                  
  7920                                  ; 29/04/2019 - Retro DOS v4.0
  7921                                  
  7922                                  ;ENTRYPOINTSEG	EQU	0CH
  7923                                  ;MAXDIF		EQU	0FFFH
  7924                                  ;SAVEXIT 	EQU	10
  7925                                  ;WRAPOFFSET	EQU	0FEF0h
  7926                                  
  7927                                  ;
  7928                                  ;----------------------------------------------------------------------------
  7929                                  ;
  7930                                  ;**	$SLEAZEFUNC - Get a Pointer to the Media Byte
  7931                                  ;
  7932                                  ;	Return Stuff sort of like old get fat call
  7933                                  ;
  7934                                  ;	ENTRY	none
  7935                                  ;	EXIT	DS:BX = Points to FAT ID byte (IBM only)
  7936                                  ;			GOD help anyone who tries to do ANYTHING except
  7937                                  ;			READ this ONE byte.
  7938                                  ;		DX = Total Number of allocation units on disk
  7939                                  ;		CX = Sector size
  7940                                  ;		AL = Sectors per allocation unit
  7941                                  ;		   = -1 if bad drive specified
  7942                                  ;	USES	all
  7943                                  ;
  7944                                  ;**	$SLEAZEFUNCDL - Get a Pointer to the Media Byte
  7945                                  ;
  7946                                  ;	Identical to $SLEAZEFUNC except (dl) = drive
  7947                                  ;
  7948                                  ;	ENTRY	(dl) = drive (0=default, 1=A, 2=B, etc.)
  7949                                  ;	EXIT	DS:BX = Points to FAT ID byte (IBM only)
  7950                                  ;			GOD help anyone who tries to do ANYTHING except
  7951                                  ;			READ this ONE byte.
  7952                                  ;		DX = Total Number of allocation units on disk
  7953                                  ;		CX = Sector size
  7954                                  ;		AL = Sectors per allocation unit
  7955                                  ;		   = -1 if bad drive specified
  7956                                  ;	USES	all
  7957                                  ;
  7958                                  ;----------------------------------------------------------------------------
  7959                                  ;
  7960                                  
  7961                                  _$SLEAZEFUNC:
  7962                                  	; 15/05/2019 - Retro DOS v4.0
  7963 00000F70 B200                    	MOV	DL,0
  7964                                  _$SLEAZEFUNCDL:
  7965 00000F72 16                      	push	ss
  7966 00000F73 1F                      	pop	ds
  7967                                  	
  7968 00000F74 88D0                    	MOV	AL,DL
  7969 00000F76 E81A5C                  	call	GETTHISDRV		; Get CDS structure
  7970                                  SET_AL_RET:
  7971                                  	; MSDOS 3.3
  7972                                  	;;mov	al, 0Fh
  7973                                  	;MOV	AL,error_invalid_drive	; Assume error	;AC000;
  7974                                  	
  7975                                  	; MSDOS 6.0 & MSDOS 3.3
  7976 00000F79 721E                    	JC	short BADSLDRIVE
  7977                                  
  7978 00000F7B E8D11D                  	call	DISK_INFO
  7979                                  	;JC	short SET_AL_RET	; User FAILed to I 24
  7980 00000F7E 7219                    	jc	short BADSLDRIVE
  7981 00000F80 8826[9805]              	MOV	[FATBYTE],AH
  7982                                  
  7983                                  ; NOTE THAT A FIXED MEMORY CELL IS USED --> THIS CALL IS NOT
  7984                                  ; RE-ENTRANT. USERS BETTER GET THE ID BYTE BEFORE THEY MAKE THE
  7985                                  ; CALL AGAIN
  7986                                  
  7987 00000F84 BF[9805]                	MOV	DI,FATBYTE
  7988 00000F87 30E4                    	XOR	AH,AH			; AL has sectors/cluster
  7989 00000F89 E803F5                  	call	Get_User_Stack
  7990                                  	;mov	[si+4],cx
  7991                                  	;mov	[si+6],bx
  7992                                  	;mov	[si+2],di
  7993 00000F8C 894C04                  	MOV	[SI+user_env.user_CX],CX
  7994 00000F8F 895C06                  	MOV	[SI+user_env.user_DX],BX
  7995 00000F92 897C02                  	MOV	[SI+user_env.user_BX],DI
  7996                                  	
  7997                                  	;mov	[si+0Eh],ss
  7998 00000F95 8C540E                  	MOV     [SI+user_env.user_DS],SS ; stash correct pointer
  7999                                  
  8000 00000F98 C3                      	retn
  8001                                  
  8002                                  BADSLDRIVE:
  8003 00000F99 E9CCF6                  	jmp	FCB_RET_ERR
  8004                                  
  8005                                  ;
  8006                                  ;----------------------------------------------------------------------------
  8007                                  ;
  8008                                  ;**	$Get_INDOS_Flag - Return location of DOS Critical Section Flag
  8009                                  ;
  8010                                  ;	Returns location of DOS status for interrupt routines
  8011                                  ;									   ;
  8012                                  ;	ENTRY	none
  8013                                  ;	EXIT	(es:bx) = flag location
  8014                                  ;	USES	all
  8015                                  ;
  8016                                  ;----------------------------------------------------------------------------
  8017                                  ;
  8018                                  
  8019                                  _$GET_INDOS_FLAG:
  8020 00000F9C E8F0F4                          CALL	Get_User_Stack
  8021                                          ;MOV	WORD [SI+2],INDOS
  8022 00000F9F C74402[2103]            	MOV     word [SI+user_env.user_BX],INDOS
  8023                                          ;MOV	[SI+10H],SS
  8024 00000FA4 8C5410                  	MOV	[SI+user_env.user_ES],SS
  8025 00000FA7 C3                      	RETN 
  8026                                  
  8027                                  ;
  8028                                  ;----------------------------------------------------------------------------
  8029                                  ;
  8030                                  ;**	$Get_IN_Vars - Return Pointer to DOS Variables
  8031                                  ;
  8032                                  ;	Return a pointer to interesting DOS variables This call is version
  8033                                  ;	dependent and is subject to change without notice in future versions.
  8034                                  ;	Use at risk.
  8035                                  ;
  8036                                  ;	ENTRY	none
  8037                                  ;	EXIT	(es:bx) = address of SYSINITVAR
  8038                                  ;	uses	ALL
  8039                                  ;
  8040                                  ;----------------------------------------------------------------------------
  8041                                  ;
  8042                                  
  8043                                  _$GET_IN_VARS:
  8044 00000FA8 E8E4F4                          CALL	Get_User_Stack
  8045                                          ;MOV	WORD [SI+2],SYSINITVAR
  8046                                  	;MOV	word [SI+user_env.user_BX],SYSINITVAR
  8047 00000FAB C74402[2600]            	MOV	word [SI+user_env.user_BX],SYSINITVARS
  8048                                          ;MOV	[SI+10H],SS
  8049 00000FB0 8C5410                  	MOV	[SI+user_env.user_ES],SS
  8050 00000FB3 C3                      	RETN
  8051                                  
  8052                                  ;
  8053                                  ;----------------------------------------------------------------------------
  8054                                  ;
  8055                                  ;**	$Get_Default_DPB - Return a pointer to the Default DPB
  8056                                  ;
  8057                                  ;	Return pointer to drive parameter table for default drive
  8058                                  ;
  8059                                  ;	ENTRY	none
  8060                                  ;	EXIT	(ds:bx) = DPB address
  8061                                  ;	USES	all
  8062                                  ;
  8063                                  ;**	$Get_DPB - Return a pointer to a specified DPB
  8064                                  ;
  8065                                  ;	Return pointer to a specified drive parameter table
  8066                                  ;
  8067                                  ;	ENTRY	(dl) = drive # (0 = default, 1=A, 2=B, etc.)
  8068                                  ;	EXIT	(al) = 0 iff ok
  8069                                  ;		  (ds:bx) = DPB address
  8070                                  ;		(al) = -1 if bad drive
  8071                                  ;	USES	all
  8072                                  ;
  8073                                  ;----------------------------------------------------------------------------
  8074                                  ;
  8075                                  
  8076                                  ; 15/05/2019 - Retro DOS v4.0
  8077                                  
  8078                                  _$GET_DEFAULT_DPB:
  8079 00000FB4 B200                    	MOV	DL,0
  8080                                  _$GET_DPB:
  8081 00000FB6 16                      	push	ss
  8082 00000FB7 1F                      	pop	ds
  8083                                  
  8084 00000FB8 88D0                    	MOV	AL,DL
  8085 00000FBA E8D65B                  	call	GETTHISDRV		; Get CDS structure
  8086 00000FBD 7222                    	JC	short ISNODRV 		; no valid drive
  8087 00000FBF C43E[A205]              	LES	DI,[THISCDS]		; check for net CDS
  8088                                  	;;test	word [es:di+43h],8000h
  8089                                  	;TEST	word [ES:DI+curdir.flags],curdir_isnet
  8090                                  	;test	byte [es:di+44h],80h
  8091 00000FC3 26F6454480              	test	byte [ES:DI+curdir.flags+1],(curdir_isnet>>8)
  8092 00000FC8 7517                    	JNZ	short ISNODRV 		; No DPB to point at on NET stuff
  8093 00000FCA E88B03                  	call	ECritDisk
  8094 00000FCD E80148                  	call	FATREAD_CDS		; Force Media Check and return DPB
  8095 00000FD0 E8A003                  	call	LCritDisk
  8096 00000FD3 720C                    	JC	short ISNODRV 		; User FAILed to I 24, only error we
  8097                                  					;   have.
  8098 00000FD5 E8B7F4                  	call	Get_User_Stack
  8099                                  	;mov	[si+2],bp
  8100 00000FD8 896C02                  	MOV	[SI+user_env.user_BX],BP
  8101                                  	;mov	[si+0Eh],es
  8102 00000FDB 8C440E                  	MOV	[SI+user_env.user_DS],ES
  8103 00000FDE 30C0                    	XOR	AL,AL
  8104 00000FE0 C3                      	retn
  8105                                  ISNODRV:
  8106 00000FE1 B0FF                    	MOV	AL,-1
  8107 00000FE3 C3                      	retn
  8108                                  
  8109                                  ;
  8110                                  ;----------------------------------------------------------------------------
  8111                                  ;
  8112                                  ;**	$Disk_Reset - Flush out Dirty Buffers
  8113                                  ;
  8114                                  ;	$DiskReset flushes and invalidates all buffers.  BUGBUG - do
  8115                                  ;		we really invalidate?  SHould we?  THis screws non-removable
  8116                                  ;		caching.  Maybe CHKDSK relies upon it, though....
  8117                                  ;
  8118                                  ;	ENTRY	none
  8119                                  ;	EXIT	none
  8120                                  ;	USES	all
  8121                                  ;
  8122                                  ;----------------------------------------------------------------------------
  8123                                  ;
  8124                                  
  8125                                  	; 06/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  8126                                  	; DOSCODE:4D94h
  8127                                  _$DISK_RESET:
  8128                                  	; 15/05/2019 - Retro DOS v4.0
  8129 00000FE4 B0FF                    	mov	al,0FFh	; -1
  8130 00000FE6 16                      	push	ss
  8131 00000FE7 1F                      	pop	ds
  8132                                  	; 06/11/2022
  8133                                  	;MOV	AL,-1
  8134 00000FE8 E86D03                  	call	ECritDisk
  8135                                  	; MSDOS 6.0
  8136                                  	;;or	word [DOS34_FLAG],4
  8137                                  	;or	word [DOS34_FLAG],FROM_DISK_RESET    ;AN000;
  8138 00000FEB 800E[1106]04            	or	byte [DOS34_FLAG],FROM_DISK_RESET ; 4 ; 15/05/2019
  8139 00000FF0 E84C4B                  	call	FLUSHBUF
  8140                                  	; MSDOS 6.0
  8141                                  	;and	word [DOS34_FLAG],0FFFBh
  8142                                  	; 06/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  8143                                  	;and	word [DOS34_FLAG],NO_FROM_DISK_RESET ;AN000;
  8144                                  	; 15/12/2022
  8145 00000FF3 8026[1106]FB            	and	byte [DOS34_FLAG],NO_FROM_DISK_RESET ; 0FBh ; 15/05/2019
  8146 00000FF8 C706[B50D]0000          	mov	word [SC_STATUS],0	; Throw out secondary cache M041
  8147                                  ;
  8148                                  ; We will "ignore" any errors on the flush, and go ahead and invalidate.  This
  8149                                  ; call doesn't return any errors and it is supposed to FORCE a known state, so
  8150                                  ; let's do it.
  8151                                  ;
  8152                                  ; Invalidate 'last-buffer' used
  8153                                  ;
  8154 00000FFE BBFFFF                  	MOV	BX,-1 ; 0FFFFh	
  8155 00001001 891E[2000]              	MOV	[LastBuffer+2],BX
  8156 00001005 891E[1E00]              	MOV	[LastBuffer],BX
  8157                                  
  8158                                  	; MSDOS 3.3 
  8159                                  	; IBMDOS.COM, Offset 1C66h
  8160                                  	;;;;
  8161                                  	;lds	si,[BUFFHEAD]
  8162                                  	;mov	ax,20FFh	; .buf_ID,    AL = FFh (Free buffer)
  8163                                  				; .buf_flags, AH = 0, reset/clear
  8164                                  ;DRST_1:
  8165                                  	;;mov	[si+4],ax
  8166                                  	;mov	[si+BUFFINFO.buf_ID],ax
  8167                                  	;lds	si,[SI]
  8168                                  	;cmp	si,bx ; -1
  8169                                  	;je	short DRST_2
  8170                                  	;;mov	[si+4],ax
  8171                                  	;mov	[si+BUFFINFO.buf_ID],ax
  8172                                  	;lds	si,[SI]
  8173                                  	;cmp	si,bx
  8174                                  	;jne	short DRST_1
  8175                                  	;;;;
  8176                                  ;DRST_2:
  8177 00001009 E86703                  	call	LCritDisk
  8178 0000100C B8FFFF                  	MOV	AX,-1
  8179                                  	; 07/12/2022
  8180                                  	;mov	ax,0FFFFh
  8181                                  	;CallInstall NetFlushBuf,MultNET,32,AX,AX
  8182 0000100F 50                      	push	ax ; * MSDOS 6.0 ; 15/05/2019
  8183 00001010 B82011                  	mov     ax,1120h
  8184 00001013 CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - FLUSH ALL DISK BUFFERS
  8185                                  			; DS = DOS CS
  8186                                  			; Return: CF clear (successful)
  8187 00001015 58                      	pop	ax ; * MSDOS 6.0 ; 15/05/2019
  8188                                  	
  8189 00001016 C3                      	retn
  8190                                  
  8191                                  	; 19/07/2018 - Retro DOS v3.0
  8192                                  
  8193                                  ;
  8194                                  ;	BREAK <$SetDPB - Create a valid DPB from a user-specified BPB>
  8195                                  ;
  8196                                  ;----------------------------------------------------------------------------
  8197                                  ;
  8198                                  ;**	$SetDPB - Create a DPB
  8199                                  ;
  8200                                  ;	SetDPB Creates a valid DPB from a user-specified BPB
  8201                                  ;
  8202                                  ;	ENTRY	ES:BP Points to DPB
  8203                                  ;		DS:SI Points to BPB
  8204                                  ;	EXIT	DPB setup
  8205                                  ;	USES	ALL but BP, DS, ES
  8206                                  ;
  8207                                  ;----------------------------------------------------------------------------
  8208                                  ;
  8209                                  
  8210                                  ; 10/05/2019 - Retro DOS v4.0
  8211                                  
  8212                                  ; DOSCODE:4DD6h (MSDOS 6.21, MSDOS.SYS)
  8213                                  
  8214                                  ; MSDOS 6.0
  8215 00001017 0300                    word3:	dw	3			; M008 -- word value for divides
  8216                                  
  8217                                  ; 06/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  8218                                  ; DOSCODE:4DC9h (MSDOS 5.0, MSDOS.SYS)
  8219                                  
  8220                                  ;procedure   $SETDPB,NEAR
  8221                                  
  8222                                  _$SETDPB:
  8223 00001019 89EF                    	MOV	DI,BP
  8224 0000101B 83C702                  	ADD	DI,2			; Skip over dpb_drive and dpb_UNIT
  8225 0000101E AD                      	LODSW
  8226 0000101F AB                      	STOSW				; dpb_sector_size
  8227                                  	; MSDOS 6.0
  8228                                  	;cmp	byte [si+3],0
  8229 00001020 807C0300                	CMP	BYTE [SI+A_BPB.BPB_NUMBEROFFATS-2],0 ; FAT file system drive ;AN000;
  8230 00001024 7507                    	JNZ	short yesfat			     ; yes		;AN000;
  8231                                  	;mov	byte [es:di+4],0
  8232 00001026 26C6450400              	MOV	BYTE [ES:DI+DPB.FAT_COUNT-4],0
  8233 0000102B EB70                    	JMP	short setend			     ; NO		;AN000;
  8234                                  
  8235                                  yesfat: ; 10/08/2018
  8236 0000102D 89C2                    	MOV	DX,AX
  8237 0000102F AC                      	LODSB
  8238                                  	;DEC	AL
  8239                                  	; 17/12/2022
  8240 00001030 48                      	dec	ax
  8241 00001031 AA                      	STOSB				; dpb_cluster_mask
  8242                                  	;INC	AL
  8243 00001032 40                      	inc	ax
  8244 00001033 30E4                    	XOR	AH,AH
  8245                                  LOG2LOOP:
  8246 00001035 A801                    	test	AL,1
  8247 00001037 7506                    	JNZ	short SAVLOG
  8248 00001039 FEC4                    	INC	AH
  8249 0000103B D0E8                    	SHR	AL,1
  8250 0000103D EBF6                    	JMP	SHORT LOG2LOOP
  8251                                  SAVLOG:
  8252 0000103F 88E0                    	MOV	AL,AH
  8253 00001041 AA                      	STOSB				; dpb_cluster_shift
  8254 00001042 88C3                    	MOV	BL,AL
  8255 00001044 A5                      	MOVSW				; dpb_first_FAT Start of FAT (# of reserved sectors)
  8256 00001045 AC                      	LODSB
  8257 00001046 AA                      	STOSB				; dpb_FAT_count Number of FATs
  8258                                  ;	OR	AL,AL			; NONFAT ?				;AN000;
  8259                                  ;	JZ	short setend		; yes, don't do anything                ;AN000;
  8260 00001047 88C7                    	MOV	BH,AL
  8261 00001049 AD                      	LODSW
  8262 0000104A AB                      	STOSW				; dpb_root_entries Number of directory entries
  8263 0000104B B105                    	MOV	CL,5
  8264 0000104D D3EA                    	SHR	DX,CL			; Directory entries per sector
  8265 0000104F 48                      	DEC	AX
  8266 00001050 01D0                    	ADD	AX,DX			; Cause Round Up
  8267 00001052 89D1                    	MOV	CX,DX
  8268 00001054 31D2                    	XOR	DX,DX
  8269 00001056 F7F1                    	DIV	CX
  8270 00001058 89C1                    	MOV	CX,AX			; Number of (root) directory sectors
  8271 0000105A 47                      	INC	DI
  8272 0000105B 47                      	INC	DI			; Skip dpb_first_sector
  8273 0000105C A5                      	MOVSW			; Total number of sectors in DSKSIZ (temp as dpb_max_cluster)
  8274 0000105D AC                      	LODSB
  8275                                  	;mov	[es:bp+17h],al
  8276 0000105E 26884617                	MOV	[ES:BP+DPB.MEDIA],AL	; Media byte
  8277 00001062 AD                      	LODSW				; Number of sectors in a FAT
  8278                                  	
  8279                                  	;;;
  8280                                  	;MSDOS 3.3
  8281                                  	;
  8282                                  	;STOSB		; DPB.FAT_SIZE
  8283                                  	;MUL	BH
  8284                                  	
  8285                                  	;MSDOS 6.0
  8286                                  	;
  8287 00001063 AB                      	STOSW		; DPB.FAT_SIZE	;AC000;;>32mb dpb_FAT_size
  8288 00001064 88FA                    	MOV	DL,BH			;AN000;;>32mb
  8289 00001066 30F6                    	XOR	DH,DH			;AN000;;>32mb
  8290 00001068 F7E2                    	MUL	DX			;AC000;;>32mb Space occupied by all FATs
  8291                                  	;;;
  8292                                  	
  8293                                  	;add	ax,[es:bp+6]
  8294 0000106A 26034606                	ADD	AX,[ES:BP+DPB.FIRST_FAT]
  8295 0000106E AB                      	STOSW				; dpb_dir_sector
  8296 0000106F 01C8                    	ADD	AX,CX			; Add number of (root) directory sectors
  8297                                  	;mov	[es:bp+0Bh],ax
  8298 00001071 2689460B                	MOV	[ES:BP+DPB.FIRST_SECTOR],AX
  8299                                  	
  8300                                  	; MSDOS 6.0
  8301 00001075 88D9                    	MOV	CL,BL			;F.C. >32mb				;AN000;
  8302                                  	;;cmp	word [es:bp+0Dh],0
  8303                                  	;CMP	WORD [ES:BP+DSKSIZ],0	;F.C. >32mb				;AN000;
  8304                                  	;JNZ	short normal_dpb	;F.C. >32mb				;AN000;
  8305                                  	; 06/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  8306                                  	; 15/12/2022
  8307                                  	; 28/07/2019
  8308 00001077 268B5E0D                	mov	bx,[ES:BP+DSKSIZ]
  8309 0000107B 09DB                    	or	bx,bx
  8310 0000107D 751A                    	JNZ	short normal_dpb	;F.C. >32mb				;AN000;
  8311                                  	;CMP	WORD [ES:BP+DSKSIZ],0	;F.C. >32mb				;AN000;
  8312                                  	;JNZ	short normal_dpb	;F.C. >32mb				;AN000;
  8313                                  	
  8314                                  
  8315 0000107F 30ED                    	XOR	CH,CH			;F.C. >32mb				;AN000;
  8316                                  	;mov	bx,[si+8]
  8317 00001081 8B5C08                  	MOV	BX,[SI+A_BPB.BPB_BIGTOTALSECTORS-A_BPB.BPB_SECTORSPERTRACK]	;AN000;
  8318                                  	;mov	dx,[si+10]
  8319 00001084 8B540A                  	MOV	DX,[SI+A_BPB.BPB_BIGTOTALSECTORS-A_BPB.BPB_SECTORSPERTRACK+2]	;AN000;
  8320 00001087 29C3                    	SUB	BX,AX			;AN000;;F.C. >32mb
  8321 00001089 83DA00                  	SBB	DX,0			;AN000;;F.C. >32mb
  8322 0000108C 09C9                    	OR	CX,CX			;AN000;;F.C. >32mb
  8323 0000108E 7407                    	JZ	short norot		;AN000;;F.C. >32mb
  8324                                  rott:					;AN000;;F.C. >32mb
  8325 00001090 F8                      	CLC				;AN000;;F.C. >32mb
  8326 00001091 D1DA                    	RCR	DX,1			;AN000;;F.C. >32mb
  8327 00001093 D1DB                    	RCR	BX,1			;AN000;;F.C. >32mb
  8328 00001095 E2F9                    	LOOP	rott			;AN000;;F.C. >32mb
  8329                                  norot:					;AN000;
  8330                                  	; 15/12/2022
  8331                                  	;MOV	AX,BX			;AN000;;F.C. >32mb
  8332 00001097 EB04                    	JMP	short setend		;AN000;;F.C. >32mb
  8333                                  normal_dpb:
  8334                                  	;;sub	ax,[es:bp+0Dh]
  8335                                  	;SUB	AX,[ES:BP+DSKSIZ]
  8336                                  	; 06/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  8337                                  	; 15/12/2022
  8338                                  	; bx = [es:bp+DSKSIZ]
  8339                                  	;sub	ax,bx ; 28/07/2019
  8340                                  	;;SUB	AX,[ES:BP+DSKSIZ]
  8341                                  	; 15/12/2022
  8342 00001099 29C3                    	sub	bx,ax
  8343                                  	;NEG	AX			; Sectors in data area
  8344                                  ;;	MOV	CL,BL			; dpb_cluster_shift
  8345                                  	; 15/12/2022
  8346                                  	; CL = cluster shift
  8347                                  	; BX = number of data sectors 
  8348                                  	;SHR	AX,CL			; Div by sectors/cluster
  8349 0000109B D3EB                    	shr	bx,cl 
  8350                                  setend:
  8351                                  ;	M008 - CAS
  8352                                  ;
  8353                                  	; 15/12/2022
  8354 0000109D 43                      	inc	bx
  8355                                  	;INC	AX			; +2 (reserved), -1 (count -> max)
  8356                                  ;
  8357                                  ;	There has been a bug in our fatsize calculation for so long
  8358                                  ;	  that we can't correct it now without causing some user to
  8359                                  ;	  experience data loss. There are even cases where allowing
  8360                                  ;	  the number of clusters to exceed the fats is the optimal
  8361                                  ;	  case -- where adding 2 more fat sectors would make the
  8362                                  ;	  data field smaller so that there's nothing to use the extra
  8363                                  ;	  fat sectors for.
  8364                                  ;
  8365                                  ;	Note that this bug had very minor known symptoms. CHKDSK would
  8366                                  ;	  still report that there was a cluster left when the disk was
  8367                                  ;	  actually full. Very graceful failure for a corrupt system
  8368                                  ;	  configuration. There may be worse cases that were never
  8369                                  ;	  properly traced back to this bug. The problem cases only
  8370                                  ;	  occurred when partition sizes were very near FAT sector
  8371                                  ;	  rounding boundaries, which were rare cases.
  8372                                  ;
  8373                                  ;	Also, it's possible that some third-party partition program might
  8374                                  ;	  create a partition that had a less-than-perfect FAT calculation
  8375                                  ;	  scheme. In this hypothetical case, the number of allocation
  8376                                  ;	  clusters which don't actually have FAT entries to represent
  8377                                  ;	  them might be larger and might create a more catastrophic
  8378                                  ;	  failure. So we'll provide the safeguard of limiting the
  8379                                  ;	  max_cluster to the amount that will fit in the FATs.
  8380                                  ;
  8381                                  ;	ax = maximum legal cluster, ES:BP -> dpb
  8382                                  
  8383                                  ;	make sure the number of fat sectors is actually enough to
  8384                                  ;	  hold that many clusters. otherwise, back the number of
  8385                                  ;	  clusters down
  8386                                  
  8387                                  	; 15/12/2022
  8388                                  	; bx = number of clusters
  8389                                  
  8390                                  	; 19/07/2018 - Retro DOS v3.0
  8391                                  	; MSDOS 6.0
  8392                                  	; 15/12/2022
  8393                                  	;mov	bx,ax			; remember calculated # clusters
  8394                                  
  8395                                  	; 01/08/2018 (MSDOS 3.3)
  8396                                  	;mov	al,[ES:BP+DPB.FAT_SIZE]
  8397                                  	;xor	ah,ah 
  8398                                  
  8399                                  	; 10/05/2019 - Retro DOS v4.0
  8400                                  	;mov	ax,[ES:BP+0Fh]
  8401 0000109E 268B460F                	mov	ax,[ES:BP+DPB.FAT_SIZE]
  8402                                  
  8403                                  	;mul	word [es:bp+2]	
  8404 000010A2 26F76602                	mul	word [ES:BP+DPB.SECTOR_SIZE] ; how big is the FAT?
  8405 000010A6 81FBF60F                	cmp	bx,4096-10  ; 0FF6h	; test for 12 vs. 16 bit fat
  8406 000010AA 720D                    	jb	short setend_fat12
  8407 000010AC D1EA                    	shr	dx,1
  8408                                  
  8409                                  ; 06/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  8410                                  	; 15/12/2022
  8411                                  ;cs3 7/2/92
  8412 000010AE 751C                    	jnz	short setend_faterr	; some bonehead gave us more fatspace
  8413                                  					; than enough for the maximum FAT,
  8414                                  					; so go ahead and use the calculated
  8415                                  					; number of clusters.
  8416                                  ;cs3 7/2/92
  8417                                  
  8418 000010B0 D1D8                    	rcr	ax,1			; find number of entries
  8419 000010B2 3DF70F                  	cmp	ax,4096-10+1		; would this truncation move us
  8420                                  ;					;  into 12-bit fatland?
  8421 000010B5 7215                    	jb	short setend_faterr	; then go ahead and let the
  8422                                  ;					;  inconsistency pass through
  8423                                  ;					;  rather than lose data by
  8424                                  ;					;  correcting the fat type
  8425 000010B7 EB0E                    	jmp	short setend_fat16
  8426                                  
  8427                                  setend_fat12:
  8428 000010B9 01C0                    	add	ax,ax			; (fatsiz*2)/3 = # of fat entries
  8429 000010BB 11D2                    	adc	dx,dx
  8430                                  
  8431                                  ; 06/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  8432                                  ;cs3 7/2/92
  8433                                  	; 15/12/2022
  8434 000010BD 83FA03                  	cmp	dx,3			; if our fatspace is WAY more than
  8435 000010C0 730A                    	jnb	short setend_faterr	; we need, we may get an overflow
  8436                                  					; here. Check for it and use
  8437                                  					; the calculated size in this case.
  8438                                  ;cs3 7/2/92
  8439                                  
  8440 000010C2 2EF736[1710]            	div	word [cs:word3]
  8441                                  
  8442                                  setend_fat16:
  8443 000010C7 48                      	dec	ax			; limit at 1
  8444 000010C8 39D8                    	cmp	ax,bx			; is fat big enough?
  8445 000010CA 7602                    	jbe	short setend_fat	; use max value that'll fit
  8446                                  
  8447                                  setend_faterr:
  8448 000010CC 89D8                    	mov	ax,bx			; use calculated value
  8449                                  
  8450                                  setend_fat:
  8451                                  
  8452                                  ;	now ax = maximum legal cluster
  8453                                  
  8454                                  ;	end M008
  8455                                  
  8456                                  	;mov	[es:bp+0Dh], ax
  8457 000010CE 2689460D                	MOV	[ES:BP+DPB.MAX_CLUSTER],AX
  8458                                  	;;mov	word [es:bp+1Ch],0  ; MSDOS 3.3
  8459                                  	;mov	word [es:bp+1Dh],0  ; MSDOS 6.0
  8460 000010D2 26C7461D0000            	MOV	word [ES:BP+DPB.NEXT_FREE],0 
  8461                                  					; Init so first ALLOC starts at
  8462                                  					; begining of FAT
  8463                                  	;;mov	word [es:bp+1Eh],-1 ; MSDOS 3.3
  8464                                  	;mov	word [es:bp+1Fh],-1 ; MSDOS 6.0
  8465 000010D8 26C7461FFFFF            	MOV	word [ES:BP+DPB.FREE_CNT],-1 ; current count is invalid.
  8466                                  
  8467 000010DE C3                      	retn
  8468                                  
  8469                                  ;EndProc $SETDPB
  8470                                  
  8471                                  ;BREAK <$Create_Process_Data_Block,SetMem -- Set up process data block>
  8472                                  
  8473                                  ;
  8474                                  ;----------------------------------------------------------------------------
  8475                                  ;
  8476                                  ;**	$Dup_PDB
  8477                                  ;
  8478                                  ; Inputs:   DX is new segment address of process
  8479                                  ;	    SI is end of new allocation block
  8480                                  ;
  8481                                  ;----------------------------------------------------------------------------
  8482                                  ;
  8483                                  
  8484                                  _$DUP_PDB:
  8485                                  
  8486                                  ;hkn;	CreatePDB would have a CS override. This is not valid.
  8487                                  ;hkn;	Must set up ds in order to acess CreatePDB. Also SS is 
  8488                                  ;hkn;	has been assumed to be NOTHING. It may not have DOSDATA.
  8489                                  
  8490                                  	; MSDOS 3.3
  8491                                  	;MOV	byte [CS:CreatePDB],0FFh  ; indicate a new process
  8492                                  	;MOV	DS,[CS:CurrentPDB]
  8493                                  
  8494                                  	; 15/05/2019 - Retro DOS v4.0
  8495                                  	; MSDOS 6.0
  8496 000010DF 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  8497 000010E4 C606[A803]FF            	MOV	byte [CreatePDB],0FFh
  8498 000010E9 8E1E[3003]              	MOV	DS,[CurrentPDB]
  8499                                  
  8500 000010ED 56                      	PUSH	SI
  8501 000010EE EB0A                    	JMP	SHORT CreateCopy
  8502                                  
  8503                                  ;
  8504                                  ;----------------------------------------------------------------------------
  8505                                  ;
  8506                                  ; Inputs:
  8507                                  ;	DX = Segment number of new base
  8508                                  ; Function:
  8509                                  ;	Set up program base and copy term and ^C from int area
  8510                                  ; Returns:
  8511                                  ;	None
  8512                                  ; Called at DOS init
  8513                                  ;
  8514                                  ;----------------------------------------------------------------------------
  8515                                  ;
  8516                                  
  8517                                  ; 15/05/2019 - Retro DOS v4.0
  8518                                  ; DOSCODE:4EB6h (MSDOS 6.21, MSDOS.SYS)
  8519                                  
  8520                                  ; 06/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  8521                                  ; DOSCODE:4EA2h (MSDOS 5.0, MSDOS.SYS)
  8522                                  
  8523                                  _$CREATE_PROCESS_DATA_BLOCK:
  8524                                  			; Offset 1D02h in IBMDOS.COM (MSDOS 3.3), 1987
  8525 000010F0 E89CF3                  	CALL	Get_User_Stack
  8526                                  	;mov	ds,[si+14h]
  8527 000010F3 8E5C14                  	MOV	DS,[SI+user_env.user_CS]
  8528                                  	;push	word [2]
  8529 000010F6 FF360200                	PUSH	word [PDB.BLOCK_LEN] ;*
  8530                                  CreateCopy:
  8531 000010FA 8EC2                    	MOV	ES,DX
  8532                                  
  8533 000010FC 31F6                    	XOR	SI,SI			; copy entire PDB
  8534 000010FE 89F7                    	MOV	DI,SI
  8535 00001100 B98000                  	MOV	CX,128
  8536 00001103 F3A5                    	REP	MOVSW
  8537                                  
  8538                                  ; DOS 3.3 7/9/86
  8539                                  	;mov	cx,20
  8540                                  	;MOV	CX,FILPERPROC		; copy handles in case of
  8541                                  	; 15/12/2022
  8542 00001105 B114                    	mov	cl,FILPERPROC ; 06/07/2019
  8543                                  	; 07/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  8544                                  	;mov	cx,FILPERPROC
  8545                                  
  8546                                  	;mov	di,18h
  8547 00001107 BF1800                  	MOV	DI,PDB.JFN_TABLE	; Set Handle Count has been issued
  8548                                  	;;PUSH	DS ; * 15/05/2019
  8549                                  	;;lds	si,[34h]
  8550                                  	;LDS	SI,[PDB.JFN_Pointer]
  8551                                  	;REP	MOVSB
  8552                                  	;;POP	DS ; * 15/05/2019
  8553                                  	; 06/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  8554                                  	; 05/12/2022
  8555                                  	; (push ds then pop ds is not needed here!)
  8556                                  	;push	ds
  8557                                  	;lds	si,[34h]
  8558 0000110A C5363400                	lds	si,[PDB.JFN_Pointer]
  8559 0000110E F3A4                    	rep	movsb
  8560                                  	;pop	ds
  8561                                  
  8562                                  ; DOS 3.3 7/9/86
  8563                                  	;hkn ;CreatePDB would have a CS override. This is not valid.
  8564                                  	;hkn ;Must set up ds in order to access CreatePDB. Also SS is 
  8565                                  	;hkn ;has been assumed to be NOTHING. It may not have DOSDATA.
  8566                                  
  8567 00001110 2E8E1E[0700]            	mov	ds,[cs:DosDSeg] ; 15/05/2019
  8568                                  
  8569                                  	;;test	byte [cs:CreatePDB],0FFh
  8570                                  	;cmp	byte [CS:CreatePDB],0	; Shall we create a process?
  8571                                  	; 17/12/2022
  8572 00001115 380E[A803]              	cmp	[CreatePDB],cl ; 0
  8573                                  	;cmp	byte [CreatePDB],0 ; 15/05/2019
  8574 00001119 744A                    	JZ	short Create_PDB_cont 	; nope, old style call
  8575                                  
  8576                                  ; Here we set up for a new process...
  8577                                  
  8578                                  	;PUSH	CS			; Called at DOSINIT time, NO SS
  8579                                  	;POP	DS
  8580                                  
  8581                                  	; MSDOS 6.0
  8582                                  	;;getdseg <ds>			; ds -> dosdata
  8583                                  	;mov	ds,[cs:DosDSeg] ; 15/05/2019
  8584                                  	; 07/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  8585                                  	; (nonsense! but i put this for addr compatibility as temporary)
  8586                                  	; 15/12/2022
  8587                                  	;mov	ds,[cs:DosDSeg] ; 15/05/2019
  8588                                  
  8589 0000111B 31DB                    	XOR	BX,BX			; dup all jfns
  8590                                  	;mov	cx,20
  8591                                  	; 06/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  8592                                  	;MOV	CX,FILPERPROC		; only 20 of them
  8593                                  	; 15/12/2022
  8594 0000111D B114                    	mov	cl,FILPERPROC ; 06/07/2019
  8595                                  
  8596                                  Create_dup_jfn:
  8597 0000111F 06                      	PUSH	ES ;**			; save new PDB
  8598 00001120 E84C56                  	call	SFFromHandle		; get sf pointer
  8599 00001123 B0FF                    	MOV	AL,-1			; unassigned JFN
  8600 00001125 7224                    	JC	short CreateStash	; file was not really open
  8601                                  	;;test	word [es:di+5],1000h
  8602                                  	;TEST	word [ES:DI+SF_ENTRY.sf_flags],sf_no_inherit
  8603                                  	; 15/05/2019
  8604                                  	;test	byte [es:di+6],10h
  8605 00001127 26F6450610              	test	byte [ES:DI+SF_ENTRY.sf_flags+1],(sf_no_inherit>>8)
  8606 0000112C 751D                    	JNZ	short CreateStash	; if no-inherit bit is set, skip dup.
  8607                                  
  8608                                  ; We do not inherit network file handles.
  8609                                  
  8610                                  	;mov	ah,[es:di+2]
  8611 0000112E 268A6502                	MOV	AH,[ES:DI+SF_ENTRY.sf_mode]
  8612                                  	;and	ah,0F0h
  8613 00001132 80E4F0                  	AND	AH,SHARING_MASK
  8614                                  	;cmp	ah,70h
  8615 00001135 80FC70                  	CMP	AH,SHARING_NET_FCB
  8616 00001138 7411                    	jz	short CreateStash
  8617                                  
  8618                                  ; The handle we have found is duplicatable (and inheritable). Perform
  8619                                  ; duplication operation.
  8620                                  
  8621 0000113A 893E[9E05]              	MOV	[THISSFT],DI
  8622 0000113E 8C06[A005]              	MOV	[THISSFT+2],ES
  8623 00001142 E85F19                  	call	DOS_DUP 		; signal duplication
  8624                                  
  8625                                  ; get the old sfn for copy
  8626                                  
  8627 00001145 E80A56                  	call	pJFNFromHandle		; ES:DI is jfn
  8628 00001148 268A05                  	MOV	AL,[ES:DI]		; get sfn
  8629                                  
  8630                                  ; Take AL (old sfn or -1) and stash it into the new position
  8631                                  
  8632                                  CreateStash:
  8633 0000114B 07                      	POP	ES ;**
  8634                                  	;mov	[es:bx+18h],al
  8635 0000114C 26884718                	MOV	[ES:BX+PDB.JFN_TABLE],AL ; copy into new place!
  8636 00001150 43                      	INC	BX			; next jfn...
  8637 00001151 E2CC                    	LOOP	Create_dup_jfn
  8638                                  
  8639 00001153 8B1E[3003]              	MOV	BX,[CurrentPDB]		; get current process
  8640                                  	; 06/11/2022
  8641                                  	;mov	[es:16h],bx
  8642 00001157 26891E1600              	MOV	[ES:PDB.PARENT_PID],BX	; stash in child
  8643 0000115C 8C06[3003]              	MOV	[CurrentPDB],ES
  8644                                  	;MOV	DS,BX ; 28/07/2019
  8645                                  	; 07/12/2022
  8646                                  	;mov	ds,[cs:DosDSeg]
  8647                                  	; 15/12/2022
  8648                                  	; ds = [cs:DosDSeg]
  8649 00001160 C606[A803]00            	mov	byte [CreatePDB],0	; reset flag
  8650                                  	;mov	ds,bx
  8651                                  	; 07/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  8652                                  	; 15/12/2022
  8653                                  	;mov	ds,bx
  8654                                  
  8655                                  ; end of new process create
  8656                                  
  8657                                  Create_PDB_cont:
  8658                                  	;MOV	BYTE [CS:CreatePDB],0	; reset flag
  8659                                  
  8660                                  ;hkn; It comes to this point from 2 places. So, change to DOSDATA temporarily	
  8661                                  
  8662                                  	;; 28/07/2019
  8663                                  	;;push	ds
  8664                                  	;;mov	ds,[cs:DosDSeg]
  8665                                  	;mov	byte [CreatePDB],0
  8666                                  	;;pop	ds
  8667                                  
  8668                                  ; 05/12/2022
  8669                                  ;	; 06/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  8670                                  ;	; (push-pop ds is nonsense here! 
  8671                                  ;	;  but i am using same code with original MSDOS.SYS
  8672                                  ;	;  for address compatibility.)
  8673                                  ;	push	ds
  8674                                  ;	; ds = [cs:DosDSeg] !
  8675                                  ;	mov	ds,[cs:DosDSeg]  ; again !
  8676                                  ;	mov	byte [CreatePDB],0
  8677                                  ;	pop	ds
  8678                                  
  8679 00001165 58                      	POP	AX ;*
  8680                                  
  8681                                  	;entry	SETMEM
  8682                                  
  8683                                  	; 17/12/2022
  8684                                  	; cx = 0
  8685                                  
  8686                                  ;---------------------------------------------------------------------------
  8687                                  ; Inputs:
  8688                                  ;	AX = Size of memory in paragraphs
  8689                                  ;	DX = Segment
  8690                                  ; Function:
  8691                                  ;	Completely prepares a program base at the
  8692                                  ;	specified segment.
  8693                                  ; Called at DOS init
  8694                                  ; Outputs:
  8695                                  ;	DS = DX
  8696                                  ;	ES = DX
  8697                                  ;	[0] has INT int_abort
  8698                                  ;	[2] = First unavailable segment
  8699                                  ;	[5] to [9] form a long call to the entry point
  8700                                  ;	[10] to [13] have exit address (from int_terminate)
  8701                                  ;	[14] to [17] have ctrl-C exit address (from int_ctrl_c)
  8702                                  ;	[18] to [21] have fatal error address (from int_fatal_abort)
  8703                                  ; DX,BP unchanged. All other registers destroyed.
  8704                                  ;---------------------------------------------------------------------------
  8705                                  
  8706                                  SETMEM:
  8707                                  	;XOR	CX,CX
  8708                                  	; 17/12/2022
  8709                                  	; cx = 0
  8710 00001166 8ED9                    	MOV	DS,CX
  8711 00001168 8EC2                    	MOV	ES,DX
  8712                                  	;mov	si,88h
  8713 0000116A BE8800                  	MOV	SI,addr_int_terminate
  8714                                  	;mov	di,10 ; 0Ah
  8715 0000116D BF0A00                  	MOV	DI,SAVEXIT
  8716                                  	;MOV	CX,6
  8717                                  	; 15/12/2022
  8718 00001170 B106                    	mov	cl,6
  8719 00001172 F3A5                    	REP	MOVSW
  8720 00001174 26A30200                	MOV	[ES:2],AX
  8721 00001178 29D0                    	SUB	AX,DX
  8722 0000117A 3DFF0F                  	CMP	AX,MAXDIF ; 0FFFh
  8723 0000117D 7603                    	JBE	short HAVDIF
  8724 0000117F B8FF0F                  	MOV	AX,MAXDIF
  8725                                  HAVDIF:
  8726 00001182 83E810                  	SUB	AX,10h			; Allow for 100h byte "stack"
  8727 00001185 BB0C00                  	MOV	BX,ENTRYPOINTSEG ; 0Ch	;	in .COM files
  8728 00001188 29C3                    	SUB	BX,AX
  8729 0000118A B104                    	MOV	CL,4
  8730 0000118C D3E0                    	SHL	AX,CL
  8731 0000118E 8EDA                    	MOV	DS,DX
  8732                                  
  8733                                  	; (MSDOS 6.0 note)
  8734                                  	;
  8735                                  	; The address in BX:AX will be F01D:FEF0 if there is 64K or more 
  8736                                  	; memory in the system. This is equivalent to 0:c0 if A20 is OFF.
  8737                                  	; If DOS is in HMA this equivalence is no longer valid as A20 is ON.
  8738                                  	; But the BIOS which now resides in FFFF:30 has 5 bytes in FFFF:D0
  8739                                  	; (F01D:FEF0) which is the same as the ones in 0:C0, thereby 
  8740                                  	; making this equvalence valid for this particular case. If however
  8741                                  	; there is less than 64K remaining the address in BX:AX will not 
  8742                                  	; be the same as above. We will then stuff 0:c0, the call 5 address
  8743                                  	; into the PSP.
  8744                                  	;
  8745                                  	; Therefore for the case where there is less than 64K remaining in 
  8746                                  	; the system old CPM Apps that look at PSP:6 to determine memory
  8747                                  	; requirements will not work. Call 5, however will continue to work
  8748                                  	; for all cases.
  8749                                  	;
  8750                                  
  8751                                  	;mov	[6],ax
  8752                                  	;mov	[8],bx
  8753                                  
  8754 00001190 A30600                  	MOV	[PDB.CPM_CALL+1],AX
  8755 00001193 891E0800                	MOV	[PDB.CPM_CALL+3],BX
  8756                                  
  8757                                  	; 06/05/2019 - Retro DOS v4.0
  8758 00001197 3DF0FE                  	cmp	ax,WRAPOFFSET ; 0FEF0h	; Q: does the system have >= 64k of
  8759                                  					;    memory left
  8760 0000119A 740C                    	je	short addr_ok		; Y: the above calculated address is
  8761                                  					;    OK
  8762                                  					; N: 
  8763                                  
  8764 0000119C C7060600C000            	MOV	WORD [PDB.CPM_CALL+1],0C0h
  8765 000011A2 C70608000000            	MOV	WORD [PDB.CPM_CALL+3],0
  8766                                  addr_ok:
  8767                                  	;mov	word [0],20CDh
  8768 000011A8 C7060000CD20            	MOV	word [PDB.EXIT_CALL],(int_abort*256) + mi_INT
  8769                                  	;mov	byte [5],9Ah
  8770 000011AE C60605009A              	MOV	BYTE [PDB.CPM_CALL],mi_Long_CALL
  8771                                  	;mov	word [50h],21CDh
  8772 000011B3 C7065000CD21            	MOV	WORD [PDB.CALL_SYSTEM],(int_command*256) + mi_INT
  8773                                  	;mov	byte [52h],0CBh
  8774 000011B9 C6065200CB              	MOV	BYTE [PDB.CALL_SYSTEM+2],mi_Long_RET
  8775                                  	;mov	word [34h],18h
  8776 000011BE C70634001800            	MOV	WORD [PDB.JFN_Pointer],PDB.JFN_TABLE
  8777                                  	;mov	word [36h],ds
  8778 000011C4 8C1E3600                	MOV	WORD [PDB.JFN_Pointer+2],DS
  8779                                  	;mov	word [32h],20
  8780 000011C8 C70632001400            	MOV	WORD [PDB.JFN_Length],FILPERPROC
  8781                                  ;
  8782                                  ; The server runs several PDB's without creating them VIA EXEC.  We need to
  8783                                  ; enumerate all PDB's at CPS time in order to find all references to a
  8784                                  ; particular SFT.  We perform this by requiring that the server link together
  8785                                  ; for us all sub-PDB's that he creates. The requirement for us, now, is to
  8786                                  ; initialize this pointer.
  8787                                  ;
  8788                                   	;mov	word [38h],-1
  8789 000011CE C7063800FFFF            	MOV	word [PDB.Next_PDB],-1
  8790                                  	;mov	word [3Ah],-1
  8791 000011D4 C7063A00FFFF            	MOV	word [PDB.Next_PDB+2],-1
  8792                                  
  8793                                  	; 06/05/2019
  8794                                  	; Set the real version number in the PSP - 5.00
  8795                                  
  8796                                  	;mov	word [es:PDB.Version],1406h ; MSDOS 6.21 (DOSCODE:4FB6h)
  8797                                  	; 07/12/2022
  8798 000011DA 26C70640000616          	mov	word [ES:PDB.Version],(MINOR_VERSION*256)+MAJOR_VERSION
  8799                                  
  8800 000011E1 C3                      	retn
  8801                                  
  8802                                  ; 29/04/2019 - Retro DOS v4.0
  8803                                  
  8804                                  ;BREAK <$GSetMediaID -- get set media ID>
  8805                                  
  8806                                  ;---------------------------------------------------------------------------
  8807                                  ; Inputs:
  8808                                  ;	BL= drive number as defined in IOCTL
  8809                                  ;	AL= 0 get media ID
  8810                                  ;	    1 set media ID
  8811                                  ;	DS:DX= buffer containing information
  8812                                  ;		DW  0  info level (set on input)
  8813                                  ;		DD  ?  serial #
  8814                                  ;		DB  11 dup(?)  volume id
  8815                                  ;		DB   8 dup(?)  file system type
  8816                                  ; Function:
  8817                                  ;	Get or set media ID
  8818                                  ; Returns:
  8819                                  ;	carry clear, DS:DX is filled
  8820                                  ;	carry set, error
  8821                                  ;---------------------------------------------------------------------------
  8822                                  
  8823                                  	; 06/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  8824                                  _$GSetMediaID:
  8825                                  	; RAWIO - GET_MEDIA_ID
  8826 000011E2 B96608                  	mov	cx,0866h	      ;AN000;MS.; assume get  for IOCTL
  8827 000011E5 3C00                    	cmp	al,0		      ;AN001;MS.; get ?
  8828 000011E7 7406                    	je	short doioctl 	      ;AN000;MS.; yes
  8829                                  	;cmp	al,1		      ;AN000;MS.; set ?
  8830                                  	;jne	short errorfunc	      ;AN000;MS.; no
  8831                                  	; 15/12/2022
  8832 000011E9 FEC8                    	dec	al
  8833 000011EB 7507                    	jnz	short errorfunc ; al > 1
  8834                                  	; RAWIO - SET_MEDIA_ID
  8835                                  	;mov	cx,0846h	      ;AN001;MS.;
  8836                                  	; 15/12/2022
  8837 000011ED B146                    	mov	cl,46h	; cx = 0846h 
  8838                                  doioctl:			      ;AN000;
  8839 000011EF B00D                    	mov	al,0Dh		      ;AN000;MS.; generic IOCTL
  8840                                  	;invoke	$IOCTL		      ;AN000;MS.; let IOCTL take care of it
  8841                                  	;call	_$IOCTL
  8842                                  	;retn			      ;AN000;MS.;
  8843                                  	; 15/12/2022
  8844 000011F1 E9EC10                  	jmp	_$IOCTL
  8845                                  errorfunc:			      ;AN000;
  8846                                  	;error	error_invalid_function;AN000;MS. ; invalid function
  8847                                  	;mov	al,1
  8848 000011F4 B001                    	mov	al,error_invalid_function
  8849 000011F6 E959F4                  	jmp	SYS_RET_ERR
  8850                                  
  8851                                  ; 16/05/2019 - Retro DOS v4.0
  8852                                  
  8853                                  ;============================================================================
  8854                                  ; MISC2.ASM, MSDOS 6.0, 1991
  8855                                  ;============================================================================
  8856                                  ; 20/07/2018 - Retro DOS v3.0
  8857                                  ; 29/04/2019 - Retro DOS v4.0
  8858                                  
  8859                                  ; Break <STRCMP - compare two ASCIZ strings DS:SI to ES:DI>
  8860                                  ;----------------------------------------------------------------------------
  8861                                  ;
  8862                                  ;   Strcmp - compare ASCIZ DS:SI to ES:DI. Case INSENSITIVE. '/' = '\'
  8863                                  ;	     Strings of different lengths don't match.
  8864                                  ;   Inputs:  DS:SI - pointer to source string  ES:DI - pointer to dest string
  8865                                  ;   Outputs: Z if strings same, NZ if different
  8866                                  ;   Registers modified: NONE
  8867                                  ;----------------------------------------------------------------------------
  8868                                  
  8869                                  	; 07/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  8870                                  StrCmp:
  8871 000011F9 56                      	push	si
  8872 000011FA 57                      	push	di
  8873 000011FB 50                      	push	ax
  8874                                  
  8875                                  Cmplp:
  8876 000011FC AC                      	LODSB
  8877 000011FD E8263F                  	call	UCase			; convert to upper case
  8878 00001200 E8783F                  	call	PATHCHRCMP		; convert '/' to '\' ; 07/12/2022 ('\')
  8879 00001203 88C4                    	MOV	AH,AL
  8880 00001205 268A05                  	MOV	AL,[ES:DI]
  8881 00001208 47                      	INC	DI
  8882 00001209 E81A3F                  	call	UCase			; convert to upper case
  8883 0000120C E86C3F                  	call	PATHCHRCMP		; convert '/' to '\' ; 07/12/2022 ('\')
  8884 0000120F 38C4                    	CMP	AH,AL
  8885 00001211 7504                    	JNZ	short PopRet		; Strings dif
  8886                                  
  8887 00001213 08C0                    	OR	AL,AL
  8888 00001215 75E5                    	JNZ	short Cmplp		; More string
  8889                                  PopRet:
  8890 00001217 58                      	pop	ax
  8891 00001218 5F                      	pop	di
  8892 00001219 5E                      	pop	si
  8893 0000121A C3                      	retn
  8894                                  
  8895                                  ;Break <STRCPY - copy ASCIZ string from DS:SI to ES:DI>
  8896                                  ;----------------------------------------------------------------------------
  8897                                  ;
  8898                                  ;   Strcpy - copy an ASCIZ string from DS:SI to ES:DI and make uppercase
  8899                                  ;   FStrcpy - copy an ASCIZ string from DS:SI to ES:DI. no modification of
  8900                                  ;	characters.
  8901                                  ;
  8902                                  ;   Inputs:	DS:SI - pointer to source string
  8903                                  ;		ES:DI - pointer to destination string
  8904                                  ;   Outputs:	ES:DI point byte after nul byte at end of dest string
  8905                                  ;		DS:SI point byte after nul byte at end of source string
  8906                                  ;   Registers modified: SI,DI
  8907                                  ;----------------------------------------------------------------------------
  8908                                  
  8909                                  StrCpy:
  8910 0000121B 50                      	push	ax
  8911                                  CPYLoop:
  8912 0000121C AC                      	LODSB
  8913 0000121D E8063F                  	call	UCase			; convert to upper case
  8914 00001220 E8583F                  	call	PATHCHRCMP		; convert / to \ ;
  8915 00001223 AA                      	STOSB
  8916                                  
  8917 00001224 08C0                    	OR	AL,AL
  8918 00001226 75F4                    	JNZ	short CPYLoop
  8919 00001228 58                      	pop	ax
  8920 00001229 C3                      	retn
  8921                                  
  8922                                  ;----------------------------------------------------------------------------
  8923                                  ; Procedure Name : FStrCpy
  8924                                  ;----------------------------------------------------------------------------
  8925                                  
  8926                                  FStrCpy:
  8927 0000122A 50                      	push	ax
  8928                                  FCPYLoop:
  8929 0000122B AC                      	LODSB
  8930 0000122C AA                      	STOSB
  8931 0000122D 08C0                    	OR	AL,AL
  8932 0000122F 75FA                    	JNZ	short FCPYLoop
  8933 00001231 58                      	pop	ax
  8934 00001232 C3                      	retn
  8935                                  
  8936                                  ; 20/07/2018 - Retro DOS v3.0
  8937                                  ;----------------------------------------------------------------------------
  8938                                  ; UCase, IBMDOS.COM (MSDOS 3.3), 1987 - Offset 1E2Fh
  8939                                  ;----------------------------------------------------------------------------
  8940                                  ;
  8941                                  ;UCase:	
  8942                                  ;	call	_UCase	 ; Offset 5518h (GetLet, Offset 5517h)
  8943                                  ;	retn
  8944                                  
  8945                                  ;Break <StrLen - compute length of string ES:DI>
  8946                                  ;----------------------------------------------------------------------------
  8947                                  ;**	StrLen - Compute Length of String
  8948                                  ;
  8949                                  ;	StrLen computes the length of a string, including the trailing 00
  8950                                  ;
  8951                                  ;	ENTRY	(es:di) = address of string
  8952                                  ;	EXIT	(cx) = size of string
  8953                                  ;	USES	cx, flags
  8954                                  ;----------------------------------------------------------------------------
  8955                                  
  8956                                  StrLen:
  8957 00001233 57                      	push	di
  8958 00001234 50                      	push	ax
  8959                                  	;MOV	CX,-1
  8960 00001235 B9FFFF                  	mov	cx,65535
  8961 00001238 30C0                    	XOR	AL,AL
  8962 0000123A F2AE                    	REPNE	SCASB
  8963 0000123C F7D1                    	NOT	CX
  8964 0000123E 58                      	pop	ax
  8965 0000123F 5F                      	pop	di
  8966 00001240 C3                      	retn
  8967                                  
  8968                                  ;----------------------------------------------------------------------------
  8969                                  ;**	DStrLen - Compute Length of String
  8970                                  ;
  8971                                  ;	ENTRY	(ds:si) = address of string
  8972                                  ;	EXIT	(cx) = size of string, including trailing NUL
  8973                                  ;	USES	cx, flags
  8974                                  ;----------------------------------------------------------------------------
  8975                                  
  8976                                  DStrLen:	; BUGBUG - this guy is a pig, who uses him?
  8977 00001241 E80300                  	CALL	XCHGP
  8978 00001244 E8ECFF                  	CALL	StrLen
  8979                                  	;CALL	XCHGP
  8980                                  	;retn
  8981                                  	; 18/12/2022
  8982                                  	;jmp	short XCHGP
  8983                                  
  8984                                  ;----------------------------------------------------------------------------
  8985                                  ;**	XCHGP - Exchange Source and Destination Pointers
  8986                                  ;
  8987                                  ;	XCHGP exchanges (DS:SI) and (ES:DI)
  8988                                  ;
  8989                                  ;	ENTRY	none
  8990                                  ;	EXIT	pairs exchanged
  8991                                  ;	USES	SI, DI, DS, ES
  8992                                  ;----------------------------------------------------------------------------
  8993                                  
  8994                                  XCHGP:
  8995 00001247 1E                      	push	ds
  8996 00001248 06                      	push	es
  8997 00001249 1F                      	pop	ds
  8998 0000124A 07                      	pop	es
  8999 0000124B 87F7                    	XCHG	SI,DI
  9000                                  xchgp_retn:
  9001 0000124D C3                      	retn
  9002                                  
  9003                                  ;Break	<Idle - wait for a specified amount of time>
  9004                                  ;----------------------------------------------------------------------------
  9005                                  ;
  9006                                  ;   Idle - when retrying an operation due to a lock/sharing violation,
  9007                                  ;   	   we spin until RetryLoop is exhausted.
  9008                                  ;
  9009                                  ;   Inputs:	RetryLoop is the number of times we spin
  9010                                  ;   Outputs:	Wait
  9011                                  ;   Registers modified: none
  9012                                  ;----------------------------------------------------------------------------
  9013                                  
  9014                                  Idle:
  9015                                  	;test	byte [SS:FSHARING],0FFh
  9016 0000124E 36803E[7205]00          	cmp	byte [SS:FSHARING],0	;hkn; SS override
  9017                                  	;retnz
  9018 00001254 75F7                    	jnz	short xchgp_retn
  9019                                  	;SAVE	<CX>
  9020 00001256 51                      	push	cx
  9021 00001257 368B0E[1C00]            	MOV	CX,[ss:RetryLoop]	;hkn; SS override
  9022 0000125C E308                    	JCXZ	Idle3
  9023                                  Idle1:	
  9024 0000125E 51                      	PUSH	CX
  9025 0000125F 31C9                    	XOR	CX,CX
  9026                                  Idle2:	
  9027 00001261 E2FE                    	LOOP	Idle2
  9028 00001263 59                      	POP	CX
  9029 00001264 E2F8                    	LOOP	Idle1
  9030                                  Idle3:	
  9031                                  	;RESTORE <CX>
  9032 00001266 59                      	pop	cx
  9033 00001267 C3                      	retn
  9034                                  
  9035                                  ;Break	<TableDispatch - dispatch to a table>
  9036                                  ;----------------------------------------------------------------------------
  9037                                  ;
  9038                                  ;   TableDispatch - given a table and an index, jmp to the approptiate
  9039                                  ;   routine. Preserve all input registers to the routine.
  9040                                  ;
  9041                                  ;   Inputs:	Push	return address
  9042                                  ;		Push	Table address
  9043                                  ;		Push	index (byte)
  9044                                  ;   Outputs:	appropriate routine gets jumped to.
  9045                                  ;		return indicates invalid index
  9046                                  ;   Registers modified: none.
  9047                                  ;----------------------------------------------------------------------------
  9048                                  
  9049                                  struc TFrame	 ; TableFrame
  9050 00000000 ????                    .OldBP:	 resw 1  ; 0
  9051 00000002 ????                    .OldRet: resw 1  ; 2
  9052 00000004 ??                      .Index:	 resb 1  ; 4
  9053 00000005 ??                      .Pad:	 resb 1  ; 5  
  9054 00000006 ????                    .Tab:	 resw 1  ; 6
  9055 00000008 ????                    .NewRet: resw 1  ; 8
  9056                                  endstruc
  9057                                  
  9058                                  TableDispatch:
  9059 00001268 55                      	PUSH	BP
  9060 00001269 89E5                    	MOV	BP,SP
  9061 0000126B 53                      	PUSH	BX			; save BX
  9062                                  	;mov	bx,[bp+6]
  9063 0000126C 8B5E06                  	MOV	BX,[BP+TFrame.Tab]	; get pointer to table
  9064 0000126F 2E8A1F                  	MOV	BL,[CS:BX]		; maximum index
  9065                                  	;cmp	[bp+4],bl
  9066 00001272 385E04                  	CMP	[BP+TFrame.Index],BL	; table error?
  9067 00001275 7317                    	JAE	short TableError	; yes
  9068                                  	;mov	bl,[bp+4]
  9069 00001277 8A5E04                  	MOV	BL,[BP+TFrame.Index]	; get desired table index
  9070 0000127A 30FF                    	XOR	BH,BH			; convert to word
  9071 0000127C D1E3                    	SHL	BX,1			; convert to word pointer
  9072 0000127E 43                      	INC	BX			; point past first length byte
  9073                                  	; 17/08/2018
  9074                                  	;add	bx,[bp+6]
  9075 0000127F 035E06                  	ADD	BX,[BP+TFrame.Tab]	; get real offset
  9076 00001282 2E8B1F                  	MOV	BX,[CS:BX]		; get contents of table entry
  9077                                  	;mov	[bp+6],bx
  9078 00001285 895E06                  	MOV	[BP+TFrame.Tab],BX	; put table entry into return address
  9079 00001288 5B                      	POP	BX			; restore BX
  9080 00001289 5D                      	POP	BP			; restore BP
  9081 0000128A 83C404                  	ADD	SP,4			; clean off Index and our return addr
  9082 0000128D C3                      	retn				; do operation
  9083                                  TableError:
  9084 0000128E 5B                      	POP	BX			; restore BX
  9085 0000128F 5D                      	POP	BP			; restore BP
  9086 00001290 C20600                  	RETN	6			; clean off Index, Table and RetAddr
  9087                                  
  9088                                  
  9089                                  ;Break	<TestNet - determine if a CDS is for the network>
  9090                                  ;----------------------------------------------------------------------------
  9091                                  ;
  9092                                  ;   TestNet - examine CDS pointed to by ThisCDS and see if it indicates a
  9093                                  ;	network CDS. This will handle NULL cds also.
  9094                                  ;
  9095                                  ;   Inputs:	ThisCDS points to CDS or NULL
  9096                                  ;   Outputs:	ES:DI = ThisCDS
  9097                                  ;		carry Set => network
  9098                                  ;		carry Clear => local
  9099                                  ;   Registers modified: none.
  9100                                  ;----------------------------------------------------------------------------
  9101                                  
  9102                                  TestNet:
  9103                                  	;LES	DI,[CS:THISCDS]
  9104                                  
  9105                                  	; 16/05/2019 - Retro DOS v4.0
  9106 00001293 2E8E06[0700]            	mov	es,[cs:DosDSeg]
  9107 00001298 26C43E[A205]            	LES	DI,[ES:THISCDS]
  9108 0000129D 83FFFF                  	CMP	DI,-1
  9109 000012A0 7408                    	JZ	short CMCRet		; UNC? carry is clear
  9110                                  	;;test	word [es:di+43h],8000h
  9111                                  	;TEST	word [ES:DI+curdir.flags],curdir_isnet
  9112                                  	;test	byte [es:di+44h],80h
  9113 000012A2 26F6454480              	TEST	byte [ES:DI+curdir.flags+1],(curdir_isnet>>8)
  9114 000012A7 7501                    	JNZ	short CMCRet		; jump has carry clear
  9115 000012A9 C3                      	retn				; carry is clear
  9116                                  CMCRet: 
  9117 000012AA F5                      	CMC
  9118 000012AB C3                      	retn
  9119                                  
  9120                                  ;Break	<IsSFTNet - see if an sft is for the network>
  9121                                  ;----------------------------------------------------------------------------
  9122                                  ;
  9123                                  ;   IsSFTNet - examine SF pointed to by ES:DI and see if it indicates a
  9124                                  ;	network file.
  9125                                  ;
  9126                                  ;   Inputs:	ES:DI point to SFT
  9127                                  ;   Outputs:	Zero set if not network sft
  9128                                  ;		zero reset otherwise
  9129                                  ;		Carry CLEAR!!!
  9130                                  ;   Registers modified: none.
  9131                                  ;----------------------------------------------------------------------------
  9132                                  
  9133                                  IsSFTNet:
  9134                                  	;;test	word [es:di+5],8000h
  9135                                  	;TEST	word [ES:DI+SF_ENTRY.sf_flags],sf_isnet
  9136                                  	; 16/05/2019 
  9137                                  	;test	byte [es:di+6],80h
  9138 000012AC 26F6450680              	TEST	byte [ES:DI+SF_ENTRY.sf_flags+1],(sf_isnet>>8)
  9139 000012B1 C3                      	retn
  9140                                  
  9141                                  ;Break	<FastInit - Initialize FastTable entries >
  9142                                  ;----------------------------------------------------------------------------
  9143                                  ;   DOS 4.00   2/9/87
  9144                                  ;   FastInit  - initialize the FASTXXX routine entry
  9145                                  ;		  in the FastTable
  9146                                  ;
  9147                                  ;   Inputs:	BX = FASTXXX ID ( 1=fastopen )
  9148                                  ;		DS:SI = address of FASTXXX routine entry
  9149                                  ;		   SI = -1 for query only
  9150                                  ;   Outputs:	Carry flag clear, if success
  9151                                  ;		Carry flag set,   if failure
  9152                                  ;
  9153                                  ;
  9154                                  ;----------------------------------------------------------------------------
  9155                                  
  9156                                  ;Procedure FastInit,NEAR
  9157                                  ;	ASSUME	CS:DOSCODE,SS:NOTHING
  9158                                  
  9159                                  ;	; MSDOS 3.3
  9160                                  ;	; IBMDOS.COM (1987) - Offset 1EB3h
  9161                                  ;FastInit:
  9162                                  ;	mov	di,FastTable ; FastOpenTable
  9163                                  ;	mov	ax,[cs:di+4]		; Entry segment
  9164                                  ;	mov	bx,cs			; get DOS segment
  9165                                  ;	cmp	ax,bx			; first time installed ?	
  9166                                  ;	je	short ok_install	; yes
  9167                                  ;	stc				; set carry
  9168                                  ;	retn				; (cf=1 means) already installed !
  9169                                  ;
  9170                                  ;ok_install:
  9171                                  ;	mov	bx,FastTable ; FastOpenTable
  9172                                  ;	mov	cx,ds
  9173                                  ;	; set address of FASTXXX (FASTOPEN) routine entry
  9174                                  ;	mov	[cs:bx+4],cx
  9175                                  ;	mov	[cs:bx+2],si
  9176                                  ;	retn
  9177                                  
  9178                                  ; 16/05/2019 - Retro DOS v4.0
  9179                                  
  9180                                  FastInit:
  9181                                  	; MSDOS 6.0
  9182                                  	;hkn; set up es to dosdataseg.
  9183 000012B2 06                      	push	es
  9184                                  	;getdseg <es>			; es -> dosdata
  9185 000012B3 2E8E06[0700]            	mov	es,[cs:DosDSeg]
  9186                                  
  9187                                  	;hkn; FastTable is in DOSDATA
  9188 000012B8 BF[320D]                	MOV	DI,FastTable+2		;AN000;FO. points to fastxxx entry
  9189 000012BB 4B                      	DEC	BX			;AN000;FO.;; decrement index
  9190 000012BC 89DA                    	MOV	DX,BX			;AN000;FO.;; save bx
  9191 000012BE D1E3                    	SHL	BX,1			;AN000;FO.;; times 4 , each entry is DWORD
  9192 000012C0 D1E3                    	SHL	BX,1			;AN000;FO.
  9193 000012C2 01DF                    	ADD	DI,BX			;AN000;FO. index to the entry
  9194 000012C4 268B4502                	MOV	AX,[ES:DI+2]		;AN000;FO. get entry segment
  9195                                  fcheck: 				;AN000;
  9196 000012C8 8CC9                    	MOV	CX,CS			;AN000;FO.;; get DOS segment
  9197 000012CA 39C8                    	CMP	AX,CX			;AN000;FO.;; first time installed ?
  9198 000012CC 7407                    	JZ	short ok_install	;AN000;FO.;; yes
  9199 000012CE 09C0                    	OR	AX,AX			;AN000;FO.;
  9200 000012D0 7403                    	JZ	short ok_install	;AN000;FO.;
  9201 000012D2 F9                      	STC				;AN000;FO.;; already installed !
  9202 000012D3 EB17                    	JMP	SHORT FSret		;AN000;FO. set carry
  9203                                  ok_install:				;AN000;
  9204 000012D5 83FEFF                  	CMP	SI,-1			;AN000;FO.; Query only ?
  9205 000012D8 7412                    	JZ	short FSret		;AN000;FO.; yes
  9206 000012DA 8CD9                    	MOV	CX,DS			;AN000;FO.; get FASTXXX entry segment
  9207 000012DC 26894D02                	MOV	[ES:DI+2],CX		;AN000;FO.; initialize routine entry
  9208 000012E0 268935                  	MOV	[ES:DI],SI		;AN000;FO.; initialize routine offset
  9209                                  
  9210                                  ;hkn; FastFlg moved to DOSDATA
  9211 000012E3 BF[3A0D]                	MOV	DI,FastFlg		;AN000;FO.; get addr of FASTXXX flags
  9212 000012E6 01D7                    	ADD	DI,DX			;AN000;FO.; index to a FASTXXX flag
  9213                                  	;or	byte [es:di],80h
  9214 000012E8 26800D80                	OR	byte [ES:DI],Fast_yes	;AN000;FO.; indicate installed
  9215                                  FSret:					;AN000;
  9216 000012EC 07                      	pop	es
  9217 000012ED C3                      	retn				;AN000;FO.
  9218                                  
  9219                                  ;EndProc FastInit
  9220                                  
  9221                                  ;Break	<FastRet - initial routine in FastOpenTable >
  9222                                  ;----------------------------------------------------------------------------
  9223                                  ;   DOS 3.3   6/10/86
  9224                                  ;   FastRet	- indicate FASTXXXX  not in memory
  9225                                  ;
  9226                                  ;   Inputs:	None
  9227                                  ;   Outputs:	AX = -1 and carry flag set
  9228                                  ;
  9229                                  ;   Registers modified: none.
  9230                                  ;----------------------------------------------------------------------------
  9231                                  
  9232                                  FastRet:
  9233                                  	;mov	ax,-1
  9234                                  	;stc
  9235                                  	;retf
  9236 000012EE F9                      	STC
  9237 000012EF 19C0                    	sbb	ax,ax		; (ax) = -1, 'C' set
  9238 000012F1 CB                      	RETF
  9239                                  
  9240                                  ;Break	<NLS_OPEN - do $open for NLSFUNC>
  9241                                  ;----------------------------------------------------------------------------
  9242                                  ;   DOS 3.3   6/10/86
  9243                                  ;   NLS_OPEN	- call $OPEN for NLSFUNC
  9244                                  ;
  9245                                  ;   Inputs:	Same input as $OPEN except CL = mode
  9246                                  ;   Outputs:	same output as $OPEN
  9247                                  ;
  9248                                  ;----------------------------------------------------------------------------
  9249                                  
  9250                                  ;hkn; NOTE! SS MUST HAVE BEEN SET UP TO DOSDATA BY THE TIME THESE
  9251                                  ;hkn; NLS FUNCTIONS ARE CALLED!!! THERE FORE WE WILL USE SS OVERRIDES
  9252                                  ;hkn; IN ORDER TO ACCESS DOS DATA VARIABLES!
  9253                                  
  9254                                  NLS_OPEN:
  9255                                  ;	MOV	BL,[CPSWFLAG]	 ; disable code page matching logic
  9256                                  ;	MOV	BYTE [CPSWFLAG],0
  9257                                  ;	PUSH	BX		 ; save current state
  9258                                  
  9259 000012F2 88C8                    	MOV	AL,CL		 ; set up correct interface for $OPEN
  9260 000012F4 E8E75C                  	call	_$OPEN
  9261                                  
  9262                                  ;	POP	BX		 ; restore current state
  9263                                  ;	MOV	[CPSWFLAG],BL
  9264 000012F7 C3                      	RETN
  9265                                  
  9266                                  ;Break	<NLS_LSEEK - do $LSEEK for NLSFUNC>
  9267                                  ;----------------------------------------------------------------------------
  9268                                  ;   DOS 3.3   6/10/86
  9269                                  ;   NLS_LSEEK	- call $LSEEK for NLSFUNC
  9270                                  ;
  9271                                  ;   Inputs:	BP = open mode
  9272                                  ;   Outputs:	same output as $LSEEK
  9273                                  ;
  9274                                  ;----------------------------------------------------------------------------
  9275                                  
  9276                                  ; 16/05/2019 - Retro DOS v4.0
  9277                                  
  9278                                  NLS_LSEEK:
  9279 000012F8 36FF36[8405]            	PUSH	word [SS:USER_SP] ; save user stack
  9280 000012FD 36FF36[8605]            	PUSH	word [SS:USER_SS]
  9281 00001302 E81000                  	CALL	Fake_User_Stack
  9282 00001305 89E8                    	MOV	AX,BP		; set up correct interface for $LSEEK
  9283 00001307 E87C56                  	call	_$LSEEK
  9284 0000130A 368F06[8605]            	POP	word [SS:USER_SS] ; restore user stack
  9285 0000130F 368F06[8405]            	POP	word [SS:USER_SP]
  9286 00001314 C3                      	RETN
  9287                                  
  9288                                  ;Break	<Fake_User_Stack - save user stack>
  9289                                  ;----------------------------------------------------------------------------
  9290                                  ;   DOS 3.3   6/10/86
  9291                                  ;   Fake_User_Stack - save user stack pointer
  9292                                  ;
  9293                                  ;----------------------------------------------------------------------------
  9294                                  
  9295                                  Fake_User_Stack:
  9296 00001315 36A1[6A0D]              	MOV	AX,[SS:USER_SP_2F] ; replace with INT 2F stack
  9297 00001319 36A3[8405]              	MOV	[SS:USER_SP],AX
  9298 0000131D 8CD0                    	MOV	AX,SS
  9299 0000131F 36A3[8605]              	MOV	[SS:USER_SS],AX
  9300 00001323 C3                      	RETN
  9301                                  
  9302                                  ;Break	<GetDevList - get device header list pointer>
  9303                                  ;----------------------------------------------------------------------------
  9304                                  ;   DOS 3.3   7/25/86
  9305                                  ;   GetDevList - get device header list pointer
  9306                                  ;
  9307                                  ;   Output: AX:BX points to the device header list
  9308                                  ;----------------------------------------------------------------------------
  9309                                  
  9310                                  GetDevList:
  9311                                  	; 16/05/2019 - Retro DOS v4.0
  9312 00001324 BE[280D]                	MOV	SI,SysInitTable
  9313 00001327 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
  9314 0000132C C534                    	LDS	SI,[SI]
  9315                                  	;mov	ax,[si+34]  ; SSYSINITVARS offset 34 = [SI+SYSI.DEV]
  9316 0000132E 8B4422                  	MOV	AX,[SI+SYSI.DEV]
  9317                                  	;mov	bx,[si+36]  ; SSYSINITVARS offset 36 = [SI+SYSI.DEV+2]
  9318 00001331 8B5C24                  	MOV	BX,[SI+SYSI.DEV+2]
  9319 00001334 C3                      	RETN
  9320                                  
  9321                                  ;Break	<NLS_IOCTL - do $IOCTL for NLSFUNC   >
  9322                                  ;----------------------------------------------------------------------------
  9323                                  ;   DOS 3.3   7/25/86
  9324                                  ;   NLS_IOCTL	- call $IOCTL for NLSFUNC
  9325                                  ;
  9326                                  ;   Inputs:	BP = function code 0CH
  9327                                  ;   Outputs:	same output as generic $IOCTL
  9328                                  ;
  9329                                  ;----------------------------------------------------------------------------
  9330                                  
  9331                                  NLS_IOCTL:
  9332                                  	; 16/05/2019 - Retro DOS v4.0
  9333 00001335 36FF36[8405]            	PUSH	word [SS:USER_SP] ; save user stack
  9334 0000133A 36FF36[8605]            	PUSH	word [SS:USER_SS]
  9335 0000133F E8D3FF                  	CALL	Fake_User_Stack
  9336 00001342 89E8                    	MOV	AX,BP	     ; set up correct interface for $LSEEK
  9337 00001344 E8990F                  	call	_$IOCTL
  9338 00001347 368F06[8605]            	POP	word [SS:USER_SS] ; restore user stack
  9339 0000134C 368F06[8405]            	POP	word [SS:USER_SP]
  9340 00001351 C3                      	RETN
  9341                                  
  9342                                  ;Break	<NLS_GETEXT- get extended error for NLSFUNC>
  9343                                  ;----------------------------------------------------------------------------
  9344                                  ;   DOS 3.3   7/25/86
  9345                                  ;   NLS_GETEXT	-
  9346                                  ;
  9347                                  ;   Inputs:	none
  9348                                  ;   Outputs:	AX = extended error
  9349                                  ;
  9350                                  ;----------------------------------------------------------------------------
  9351                                  
  9352                                  NLS_GETEXT:
  9353                                  	; 16/05/2019 - Retro DOS v4.0
  9354 00001352 36A1[2403]              	MOV	AX,[SS:EXTERR]	 ; return extended error
  9355 00001356 C3                      	RETN
  9356                                  
  9357                                  ; 29/04/2019 - Retro DOS v4.0
  9358                                  
  9359                                  ;Break	<MSG_RETRIEVAL- get beginning addr of system and parser messages>
  9360                                  
  9361                                  ;----------------------------------------------------------------------------
  9362                                  ;   DOS 4.00
  9363                                  ;
  9364                                  ;   Inputs:	DL=0 get extended error message addr
  9365                                  ;		  =1 set extended error message addr
  9366                                  ;		  =2 get parser error message addr
  9367                                  ;		  =3 set parser error message addr
  9368                                  ;		  =4 get critical error message addr
  9369                                  ;		  =5 set critical error message addr
  9370                                  ;		  =6 get file system error message addr
  9371                                  ;		  =7 set file system error message addr
  9372                                  ;		  =8 get address for code reduction
  9373                                  ;		  =9 set address for code reduction
  9374                                  ;   Function:	get/set message address
  9375                                  ;   Outputs:	ES:DI points to addr when get
  9376                                  ;----------------------------------------------------------------------------
  9377                                  
  9378                                  ;Procedure MSG_RETRIEVAL,NEAR
  9379                                  ;	ASSUME	CS:DOSCODE,SS:NOTHING
  9380                                  
  9381                                  MSG_RETRIEVAL:
  9382                                  
  9383                                  ;;	NOTE:  This function lives in command.com resident code now.
  9384                                  ;;	If the int 2F ever gets this far, we'll return registers
  9385                                  ;;	unchanged, which produces the same result as before, if
  9386                                  ;;	command.com wasn't present (and therefore no messages available).
  9387                                  ;;
  9388                                  ;;	I didn't point the entry in the 2F table to No_Op because
  9389                                  ;;	No_Op zeroes AL.
  9390                                  ;;
  9391                                  ;;;hkn; set up ds to point to DOSDATA
  9392                                  ;;	push	ds
  9393                                  ;;	getdseg	<ds>			; ds -> dosdata
  9394                                  ;;
  9395                                  ;;	PUSH	AX		    ;AN000;;MS. save regs
  9396                                  ;;	PUSH	SI		    ;AN000;;MS. save regs
  9397                                  ;;	MOV	AX,DX		    ;AN000;;MS.
  9398                                  ;;	MOV	SI,OFFSET DOSDATA:MSG_EXTERROR ;AN000;;MS.
  9399                                  ;;	test	AL,1		    ;AN000;;MS. get ?
  9400                                  ;;	JZ	toget		    ;AN000;;MS. yes
  9401                                  ;;	DEC	AL		    ;AN000;;MS.
  9402                                  ;;toget:				    ;AN000;
  9403                                  ;;	SHL	AL,1		    ;AN000;;MS. times 2
  9404                                  ;;	XOR	AH,AH		    ;AN000;;MS.
  9405                                  ;;	ADD	SI,AX		    ;AN000;;MS. position to the entry
  9406                                  ;;	test	DL,1		    ;AN000;;MS. get ?
  9407                                  ;;	JZ	getget			     ;AN000;;MS. yes
  9408                                  ;;	MOV	WORD PTR DS:[SI],DI    ;AN000;;MS. set MSG
  9409                                  ;;	MOV	WORD PTR DS:[SI+2],ES  ;AN000;;MS. address to ES:DI
  9410                                  ;;	JMP	SHORT MSGret		     ;AN000;;MS. exit
  9411                                  ;;getget: 				     ;AN000;
  9412                                  ;;	LES	DI,DWORD PTR DS:[SI]	     ;AN000;;MS. get msg addr
  9413                                  ;;MSGret: 				     ;AN000;
  9414                                  ;;	POP	SI			     ;AN000;;MS.
  9415                                  ;;	POP	AX			     ;AN000;;MS.
  9416                                  ;;
  9417                                  ;;	pop	ds
  9418                                  
  9419                                  ;	return				     ;AN000;;MS. exit
  9420 00001357 C3                      	retn	; 29/04/2019
  9421                                  
  9422                                  ;============================================================================
  9423                                  ; ECritDisk, LCritDisk, ECritDevice, LCritDevice
  9424                                  ; IBMDOS.COM (MSDOS 3.3), 1987 - Offset 1F36h
  9425                                  ;============================================================================
  9426                                  ; 20/07/2018 - Retro DOS v3.0
  9427                                  
  9428                                  ;	; MSDOS 3.3
  9429                                  ;	; 08/08/2018 - Retro DOS v3.0
  9430                                  ;ECritMEM:
  9431                                  ;ECritSFT:
  9432                                  ;	;
  9433                                  ;ECritDisk:
  9434                                  ;	retn
  9435                                  ;	;push	ax
  9436                                  ;	
  9437                                  ;	mov	ax,8001h
  9438                                  ;	int	2Ah	; Microsoft Networks - BEGIN DOS CRITICAL SECTION
  9439                                  ;			; AL = critical section number (00h-0Fh)
  9440                                  ;	pop	ax
  9441                                  ;	retn
  9442                                  ;
  9443                                  ;	; MSDOS 3.3
  9444                                  ;	; 08/08/2018 - Retro DOS v3.0
  9445                                  ;LCritMEM:
  9446                                  ;LCritSFT:
  9447                                  ;	;
  9448                                  ;LCritDisk:
  9449                                  ;	retn
  9450                                  ;	;push	ax
  9451                                  ;	
  9452                                  ;	mov	ax,8101h
  9453                                  ;	int	2Ah	; Microsoft Networks - END DOS CRITICAL SECTION
  9454                                  ;			; AL = critical section number (00h-0Fh)
  9455                                  ;	pop	ax
  9456                                  ;	retn
  9457                                  ;
  9458                                  ;ECritDevice:
  9459                                  ;	retn
  9460                                  ;	;push	ax
  9461                                  ;	
  9462                                  ;	mov	ax,8002h
  9463                                  ;	int	2Ah	; Microsoft Networks - BEGIN DOS CRITICAL SECTION
  9464                                  ;			; AL = critical section number (00h-0Fh)
  9465                                  ;	pop	ax
  9466                                  ;	retn
  9467                                  ;
  9468                                  ;LCritDevice:
  9469                                  ;	retn
  9470                                  ;	;push	ax
  9471                                  ;	
  9472                                  ;	mov	ax,8102h
  9473                                  ;	int	2Ah	; Microsoft Networks - END DOS CRITICAL SECTION
  9474                                  ;			; AL = critical section number (00h-0Fh)
  9475                                  ;	pop	ax
  9476                                  ;	retn
  9477                                  
  9478                                  ;============================================================================
  9479                                  ; CRIT.ASM, MSDOS 6.0, 1991
  9480                                  ;============================================================================
  9481                                  ; 12/05/2019 - Retro DOS v4.0
  9482                                  
  9483                                  ; Critical Section Routines
  9484                                  
  9485                                  ; MSDOS 6.21 - MSDOS.SYS - DOSCODE:513Ah
  9486                                  
  9487                                  ; 06/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  9488                                  ; DOSCODE:5126h (MSDOS 5.0 MSDOS.SYS)
  9489                                  
  9490                                  ; ---------------------------------------------------------------------------
  9491                                  ; Each handler must leave everything untouched; including flags!
  9492                                  ;
  9493                                  ; Sleaze for time savings:  first instruction is a return. This is patched
  9494                                  ; by the sharer to be a PUSH AX to complete the correct routines.
  9495                                  ; ---------------------------------------------------------------------------
  9496                                  
  9497                                  ; (DOSMAC.INC, MSDOS 6.0, 1991)
  9498                                  ; ---------------------------------------------------------------------------
  9499                                  ; Some old versions of the 80286 have a bug in the chip. The popf instruction
  9500                                  ; will enable interrupts. Therefore in a section of code with interrupts
  9501                                  ; disabled and you need a popf instruction use the 'popff' macro instead.
  9502                                  ; ---------------------------------------------------------------------------
  9503                                  
  9504                                  ;%macro POPFF 0
  9505                                  ;	jmp	$+3
  9506                                  ;	iret
  9507                                  ;	push	cs
  9508                                  ;	call	$-2
  9509                                  ;%endmacro
  9510                                  
  9511                                  ; ---------------------------
  9512                                  
  9513                                  ;Procedure  ECritDisk,NEAR
  9514                                  	;public  ECritMEM
  9515                                  	;public  ECritSFT
  9516                                  ECritMEM:
  9517                                  ECritSFT:
  9518                                  ;
  9519                                  ECritDisk:
  9520                                  
  9521                                  ;SR; Check if critical section is to be entered
  9522                                  
  9523 00001358 9C                      	pushf
  9524 00001359 36803E[0C0D]00          	cmp	byte [ss:redir_patch],0
  9525 0000135F 740D                    	jz	short ECritDisk_2
  9526                                  
  9527                                  ; 06/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  9528                                  ;	;popff  ; * (macro)
  9529                                  ;	jmp	short ECritDisk_1 ; *
  9530                                  ;
  9531                                  ;ECritDisk_iret: ; *
  9532                                  ;	iret ; *
  9533                                  
  9534                                  	; 16/12/2022
  9535                                  	; 13/11/2022
  9536                                  	;jmp	short ECritDisk_1
  9537                                  	; 06/11/2022
  9538                                  ;ECritDisk_iret:
  9539                                  ;	iret	
  9540                                  
  9541                                  	; 06/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  9542                                  ECritDisk_1:
  9543 00001361 0E                      	push	cs ; *
  9544 00001362 E80800                  	call	ECritDisk_iret ; *		
  9545                                  	
  9546                                  ECritDisk_0:
  9547 00001365 50                      	PUSH    AX
  9548                                  	;MOV	AX,8000h+critDisk
  9549                                  	;INT	int_IBM
  9550 00001366 B80180                  	mov	ax,8001h
  9551 00001369 CD2A                    	int	2Ah	; Microsoft Networks - BEGIN DOS CRITICAL SECTION
  9552                                  			; AL = critical section number (00h-0Fh)
  9553 0000136B 58                      	POP     AX
  9554 0000136C C3                      	retn
  9555                                  
  9556                                  	; 16/12/2022
  9557                                  	; 13/11/2022
  9558                                  ECritDisk_iret:  ; 12/05/2019 - Retro DOS v4.0
  9559                                  LCritDisk_iret: 
  9560 0000136D CF                      	iret
  9561                                  
  9562                                  ECritDisk_2:
  9563                                  	;;popff ; *
  9564                                  	;;retn
  9565                                  ;	jmp	short ECritDisk_3 ; *
  9566                                  ;ECritDisk_iret2: ; *
  9567                                  ;	iret
  9568                                  	
  9569                                  	; 16/12/2022
  9570                                  	; 13/11/2022
  9571                                  	;jmp	short ECritDisk_3
  9572                                  ;ECritDisk_iret2:
  9573                                  	;iret
  9574                                  
  9575                                  ECritDisk_3:
  9576 0000136E 0E                      	push    cs ; *
  9577                                  	; 13/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  9578                                  	;call	ECritDisk_iret2 ; *
  9579                                  	;retn
  9580                                  	; 16/12/2022
  9581 0000136F E8FBFF                  	call	ECritDisk_iret
  9582 00001372 C3                      	retn
  9583                                  
  9584                                  ;EndProc ECritDisk
  9585                                  
  9586                                  ; ---------------------------
  9587                                  
  9588                                  ;Procedure   LCritDisk,NEAR
  9589                                  	;public  LCritMEM
  9590                                  	;public  LCritSFT
  9591                                  LCritMEM:
  9592                                  LCritSFT:
  9593                                  ;
  9594                                  LCritDisk:
  9595                                  
  9596                                  ;SR; Check if critical section is to be entered
  9597                                  
  9598 00001373 9C                      	pushf
  9599 00001374 36803E[0C0D]00          	cmp	byte [ss:redir_patch],0
  9600 0000137A 740C                    	jz	short LCritDisk_2
  9601                                  	;popff  ; * (macro)
  9602                                  ;	jmp	short LCritDisk_1 ; *
  9603                                  ;
  9604                                  ;LCritDisk_iret: ; *
  9605                                  ;	iret ; *
  9606                                  
  9607                                  	; 16/12/2022
  9608                                  	; 13/11/2022
  9609                                  	;jmp	short LCritDisk_1
  9610                                  ;LCritDisk_iret:
  9611                                  	;iret
  9612                                  
  9613                                  LCritDisk_1:
  9614 0000137C 0E                      	push	cs ; *
  9615 0000137D E8EDFF                  	call	LCritDisk_iret ; *		
  9616                                  	
  9617                                  LCritDisk_0:
  9618 00001380 50                      	PUSH	AX
  9619                                  	;MOV	AX,8100h+critDisk
  9620                                  	;INT	int_IBM
  9621 00001381 B80181                  	mov	ax,8101h
  9622 00001384 CD2A                    	int	2Ah	; Microsoft Networks - END DOS CRITICAL SECTION
  9623                                  			; AL = critical section number (00h-0Fh)
  9624 00001386 58                      	POP	AX
  9625 00001387 C3                      	retn
  9626                                  
  9627                                  ;LCritDisk_iret:  ; 12/05/2019 - Retro DOS v4.0 
  9628                                  ;	iret
  9629                                  
  9630                                  LCritDisk_2:
  9631                                  	;;popff ; *
  9632                                  	;;retn
  9633                                  ;	jmp	short LCritDisk_3 ; *
  9634                                  ;LCritDisk_iret2: ; *
  9635                                  ;	iret
  9636                                  
  9637                                  	; 16/12/2022
  9638                                  	; 13/11/2022
  9639                                  	;jmp	short LCritDisk_3
  9640                                  ;LCritDisk_iret2:
  9641                                  	;iret
  9642                                  
  9643                                  LCritDisk_3:
  9644 00001388 0E                      	push    cs ; *
  9645                                  	; 13/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  9646                                  	;call	LCritDisk_iret2 ; *
  9647                                  	;retn
  9648                                  	; 16/12/2022
  9649 00001389 E8E1FF                  	call	LCritDisk_iret
  9650 0000138C C3                      	retn
  9651                                  
  9652                                  ;EndProc LCritDisk
  9653                                  
  9654                                  ; ---------------------------
  9655                                  
  9656                                  ;Procedure   ECritDevice,NEAR
  9657                                  
  9658                                  ECritDevice:
  9659                                  
  9660                                  ;SR; Check if critical section is to be entered
  9661                                  
  9662 0000138D 9C                      	pushf
  9663 0000138E 36803E[0C0D]00          	cmp	byte [ss:redir_patch],0
  9664 00001394 740D                    	jz	short ECritDevice_2
  9665                                  	;popff  ; * (macro)
  9666                                  ;	jmp	short ECritDevice_1 ; *
  9667                                  ;
  9668                                  ;ECritDevice_iret: ; *
  9669                                  ;	iret ; *
  9670                                  
  9671                                  	; 16/12/2022	
  9672                                  	; 13/11/2022
  9673                                  	;jmp	short ECritDevice_1
  9674                                  ;ECritDevice_iret:
  9675                                  	;iret
  9676                                  
  9677                                  ECritDevice_1:
  9678 00001396 0E                      	push	cs ; *
  9679 00001397 E80800                  	call	ECritDevice_iret ; *		
  9680                                  	
  9681                                  ECritDevice_0:
  9682 0000139A 50                      	PUSH	AX
  9683                                  	;MOV	AX,8000h+critDevice
  9684                                  	;INT	int_IBM
  9685 0000139B B80280                  	mov	ax,8002h
  9686 0000139E CD2A                    	int	2Ah	; Microsoft Networks - BEGIN DOS CRITICAL SECTION
  9687                                  			; AL = critical section number (00h-0Fh)
  9688 000013A0 58                      	POP     AX
  9689 000013A1 C3                      	retn
  9690                                  
  9691                                  	; 16/12/2022
  9692                                  	; 06/12/2022
  9693                                  ECritDevice_iret:  ; 12/05/2019 - Retro DOS v4.0
  9694                                  LCritDevice_iret: 
  9695 000013A2 CF                      	iret
  9696                                  
  9697                                  ECritDevice_2:
  9698                                  	;;popff ; *
  9699                                  	;;retn
  9700                                  ;	jmp	short ECritDevice_3 ; *
  9701                                  ;ECritDevice_iret2: ; *
  9702                                  ;	iret
  9703                                  
  9704                                  	; 16/12/2022
  9705                                  	; 13/11/2022
  9706                                  	;jmp	short ECritDevice_3
  9707                                  ;ECritDevice_iret2:
  9708                                  	;iret
  9709                                  
  9710                                  ECritDevice_3:
  9711 000013A3 0E                      	push    cs ; *
  9712                                  	; 13/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  9713                                  	;call	ECritDevice_iret2 ; *
  9714                                  	;retn
  9715                                  	; 16/12/2022
  9716 000013A4 E8FBFF                  	call	ECritDevice_iret
  9717 000013A7 C3                      	retn
  9718                                  
  9719                                  ;EndProc ECritDevice
  9720                                  
  9721                                  ; ---------------------------
  9722                                  
  9723                                  ;Procedure   LCritDevice,NEAR
  9724                                  
  9725                                  LCritDevice:
  9726                                  
  9727                                  ;SR; Check if critical section is to be entered
  9728                                  
  9729 000013A8 9C                      	pushf
  9730 000013A9 36803E[0C0D]00          	cmp	byte [ss:redir_patch],0
  9731 000013AF 740C                    	jz	short LCritDevice_2
  9732                                  	;popff  ; * (macro)
  9733                                  ;	jmp	short LCritDevice_1 ; *
  9734                                  ;
  9735                                  ;LCritDevice_iret: ; *
  9736                                  ;	iret ; *
  9737                                  
  9738                                  	; 16/12/2022
  9739                                  	; 13/11/2022
  9740                                  	;jmp	short LCritDevice_1
  9741                                  ;LCritDevice_iret:
  9742                                  	;iret
  9743                                  
  9744                                  LCritDevice_1:
  9745 000013B1 0E                      	push	cs ; *
  9746 000013B2 E8EDFF                  	call	LCritDevice_iret ; *		
  9747                                  	
  9748                                  LCritDevice_0:
  9749 000013B5 50                      	PUSH	AX
  9750                                  	;MOV	AX,8100h+critDevice
  9751                                  	;INT	int_IBM
  9752 000013B6 B80281                  	mov	ax,8102h
  9753 000013B9 CD2A                    	int	2Ah	; Microsoft Networks - END DOS CRITICAL SECTION
  9754                                  			; AL = critical section number (00h-0Fh)
  9755 000013BB 58                      	POP     AX
  9756 000013BC C3                      	retn
  9757                                  
  9758                                  ;LCritDevice_iret:  ; 12/05/2019 - Retro DOS v4.0 
  9759                                  ;	iret
  9760                                  
  9761                                  LCritDevice_2:
  9762                                  	;;popff ; *
  9763                                  	;;retn
  9764                                  ;	jmp	short LCritDevice_3 ; *
  9765                                  ;LCritDevice_iret2: ; *
  9766                                  ;	iret
  9767                                  
  9768                                  	; 16/12/2022
  9769                                  	; 13/11/2022
  9770                                  	;jmp	short LCritDevice_3
  9771                                  ;LCritDevice_iret2:
  9772                                  	;iret
  9773                                  
  9774                                  LCritDevice_3:
  9775 000013BD 0E                      	push    cs ; *
  9776                                  	; 13/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
  9777                                  	;call	LCritDevice_iret2 ; *
  9778                                  	;retn
  9779                                  	; 16/12/2022
  9780 000013BE E8E1FF                  	call	LCritDevice_iret
  9781 000013C1 C3                      	retn
  9782                                  
  9783                                  ;EndProc LCritDevice
  9784                                  
  9785                                  ;============================================================================
  9786                                  ; CPMIO.ASM, MSDOS 6.0, 1991
  9787                                  ;============================================================================
  9788                                  ; 20/07/2018 - Retro DOS v3.0
  9789                                  
  9790                                  ;============================================================================
  9791                                  ; STDIO.ASM - (MSDOS 2.0)
  9792                                  ;============================================================================
  9793                                  
  9794                                  ;
  9795                                  ; Standard device IO for MSDOS (first 12 function calls)
  9796                                  ;
  9797                                  
  9798                                  ;.xlist
  9799                                  ;.xcref
  9800                                  ;INCLUDE STDSW.ASM
  9801                                  ;INCLUDE DOSSEG.ASM
  9802                                  ;.cref
  9803                                  ;.list
  9804                                  
  9805                                  ;TITLE   STDIO - device IO for MSDOS
  9806                                  ;NAME    STDIO
  9807                                  
  9808                                  ;INCLUDE IO.ASM
  9809                                  
  9810                                  ; ---------------------------------------------------------------------------
  9811                                  ;
  9812                                  ; NOTE for Retro DOS v2.0 :  (ERDOGAN TAN - 13/03/2018)
  9813                                  ;	  I0.ASM is missing in MSDOS 2.0 kernel source code files !!!
  9814                                  ;	  INSTEAD of IO.ASM, I have disassembled IBMDOS.COM (MSDOS 2.0)
  9815                                  ;			    and I have used CPMIO.ASM (MSDOS 6.0 source code)
  9816                                  ;			    to restore MSDOS 2.0 device IO source code 
  9817                                  ;
  9818                                  ;		(STRIN.ASM has '$STD_CON_STRING_INPUT' code.)	
  9819                                  	
  9820                                  ;============================================================================
  9821                                  ; STDIO.ASM - (MSDOS 2.0)
  9822                                  ;============================================================================
  9823                                  
  9824                                  ;
  9825                                  ; Standard device IO for MSDOS (first 12 function calls)
  9826                                  ;
  9827                                  
  9828                                  ;.xlist
  9829                                  ;.xcref
  9830                                  ;INCLUDE STDSW.ASM
  9831                                  ;INCLUDE DOSSEG.ASM
  9832                                  ;.cref
  9833                                  ;.list
  9834                                  
  9835                                  ;TITLE   STDIO - device IO for MSDOS
  9836                                  ;NAME    STDIO
  9837                                  
  9838                                  ;INCLUDE IO.ASM
  9839                                  
  9840                                  ; ---------------------------------------------------------------------------
  9841                                  ;
  9842                                  ; NOTE for Retro DOS v2.0 :  (ERDOGAN TAN - 13/03/2018)
  9843                                  ;	  I0.ASM is missing in MSDOS 2.0 kernel source code files !!!
  9844                                  ;	  INSTEAD of IO.ASM, I have disassembled IBMDOS.COM (MSDOS 2.0)
  9845                                  ;			    and I have used CPMIO.ASM (MSDOS 6.0 source code)
  9846                                  ;			    to restore MSDOS 2.0 device IO source code 
  9847                                  ;
  9848                                  ;		(STRIN.ASM has '$STD_CON_STRING_INPUT' code.)		
  9849                                  ;
  9850                                  ;============================================================================
  9851                                  ; IO.ASM (MSDOS 2.0) (IBMDOS.COM 2.0) - STRIN.ASM (MSDOS 2.0, 19/08/1983)
  9852                                  ;============================================================================
  9853                                  ; Retro DOS v2.0 by Erdogan Tan, 13/03/2018 - 14/03/2018
  9854                                  
  9855                                  ; (Disassembled code of IBMDOS.COM, 08/03/1983) - Dissassembler: IDA Pro Free
  9856                                  ; (Comments are from CPMIO.ASM - 1991, MSDOS 6.0) 
  9857                                  
  9858                                  ;============================================================================
  9859                                  ; CPMIO.ASM (MSDOS 6.0, 1991)
  9860                                  ;============================================================================
  9861                                  ; Retro DOS v4.0 by Erdogan Tan, 04/05/2019
  9862                                  
  9863                                  	; 08/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
  9864                                  
  9865                                  ;**	Standard device IO for MSDOS (first 12 function calls)
  9866                                  ;
  9867                                  ;	TITLE	IBMCPMIO - device IO for MSDOS
  9868                                  ;	NAME	IBMCPMIO
  9869                                  
  9870                                  ;	Old style CP/M 1-12 system calls to talk to reserved devices
  9871                                  ;
  9872                                  ;	$Std_Con_Input_No_Echo
  9873                                  ;	$Std_Con_String_Output
  9874                                  ;	$Std_Con_String_Input
  9875                                  ;	$RawConIO
  9876                                  ;	$RawConInput
  9877                                  ;	RAWOUT
  9878                                  ;	RAWOUT2
  9879                                  ;
  9880                                  
  9881                                  ; The following routines form the console I/O group (funcs 1,2,6,7,8,9,10,11).
  9882                                  ; They assume ES and DS NOTHING, while not strictly correct, this forces data
  9883                                  ; references to be SS or CS relative which is desired.
  9884                                  
  9885                                  ; ---------------------------------------------------------------------------
  9886                                  
  9887                                  ;	TITLE	CPMIO2 - device IO for MSDOS
  9888                                  ;	NAME	CPMIO2
  9889                                  
  9890                                  ;
  9891                                  ;	Microsoft Confidential
  9892                                  ;	Copyright (C) Microsoft Corporation 1991
  9893                                  ;	All Rights Reserved.
  9894                                  ;
  9895                                  
  9896                                  ;**	Old style CP/M 1-12 system calls to talk to reserved devices
  9897                                  ;
  9898                                  ;	$Std_Con_Input
  9899                                  ;	$Std_Con_Output
  9900                                  ;	OUTT
  9901                                  ;	TAB
  9902                                  ;	BUFOUT
  9903                                  ;	$Std_Aux_Input
  9904                                  ;	$Std_Aux_Output
  9905                                  ;	$Std_Printer_Output
  9906                                  ;	$Std_Con_Input_Status
  9907                                  ;	$Std_Con_Input_Flush
  9908                                  ;
  9909                                  ;	Revision History:
  9910                                  ;
  9911                                  ;	  AN000	 version 4.00 - Jan. 1988
  9912                                  
  9913                                  ; The following routines form the console I/O group (funcs 1,2,6,7,8,9,10,11).
  9914                                  ; They assume ES and DS NOTHING, while not strictly correct, this forces data
  9915                                  ; references to be SS or CS relative which is desired.
  9916                                  
  9917                                  ;DOSCODE SEGMENT
  9918                                  ;	ASSUME	SS:DOSDATA,CS:DOSCODE
  9919                                  
  9920                                  
  9921                                  ;hkn; 	All the variables use SS override or DS. Therefore there is
  9922                                  ;hkn;	no need to specifically set up any seg regs unless SS assumption is
  9923                                  ;hkn;	not valid. 
  9924                                  
  9925                                  ; DOSCODE:51BAh (MSDOS 6.21, MSDOS.SYS)
  9926                                  ; 08/11/2022
  9927                                  ; DOSCODE:51A6h (MSDOS 5.0, MSDOS.SYS)
  9928                                  
  9929                                  ;
  9930                                  ;----------------------------------------------------------------------------
  9931                                  ;
  9932                                  ; Procedure : $Std_Con_Input_No_Echo
  9933                                  ;
  9934                                  ;----------------------------------------------------------------------------
  9935                                  ;
  9936                                  
  9937                                  _$STD_CON_INPUT_NO_ECHO:   ;System call 8
  9938                                  
  9939                                  ; Inputs:
  9940                                  ;	None
  9941                                  ; Function:
  9942                                  ;	Input character from console, no echo
  9943                                  ; Returns:
  9944                                  ;	AL = character
  9945                                  
  9946 000013C2 1E                      	push	ds
  9947 000013C3 56                      	push	si
  9948                                  INTEST:
  9949 000013C4 E87F3E                  	call	STATCHK
  9950 000013C7 753B                    	jnz	short GET ; 08/09/2018
  9951                                  ;*************************************************************************
  9952                                  ;hkn; SS override
  9953 000013C9 36803E[A00A]00          	cmp	byte [SS:PRINTER_FLAG],0  ; is printer idle?
  9954 000013CF 7505                    	jnz	short no_sys_wait
  9955 000013D1 B405                    	mov	ah,5			; get input status with system wait
  9956 000013D3 E87A31                  	call	IOFUNC
  9957                                  no_sys_wait:
  9958                                  ;**************************************************************************
  9959 000013D6 B484                    	MOV	AH,84h
  9960 000013D8 CD2A                    	INT	int_IBM	 ; int 2Ah
  9961                                  
  9962                                  ;;; 7/15/86  update the date in the idle loop
  9963                                  ;;; Dec 19, 1986 D.C.L. changed following CMP to Byte Ptr from Word Ptr
  9964                                  ;;;;		 to shorten loop in consideration of the PC Convertible
  9965                                  
  9966                                  ;hkn; SS override
  9967 000013DA 36803E[910D]FF          	CMP	byte [SS:DATE_FLAG],-1	; date is updated may be every
  9968 000013E0 751B                    	JNZ	short NoUpdate		; 65535 x ? ms if no one calls
  9969                                  
  9970 000013E2 50                      	PUSH	AX
  9971 000013E3 53                      	PUSH	BX			; following is tricky,
  9972 000013E4 51                      	PUSH	CX			; it may be called by critical handler
  9973 000013E5 52                      	PUSH	DX			; at that time, DEVCALL is used by
  9974                                  					; other's READ or WRITE
  9975 000013E6 1E                      	PUSH	DS			; save DS = SFT's segment
  9976                                  
  9977                                  ;hkn; READTIME must use ds = DOSDATA
  9978                                  ;hkn;	PUSH	CS			; READTIME must use DS=CS
  9979                                  
  9980 000013E7 16                      	PUSH	SS ; 04/05/2019
  9981 000013E8 1F                      	POP	DS
  9982                                  
  9983 000013E9 B80000                  	MOV	AX,0			; therefore, we save DEVCALL
  9984 000013EC E89B02                  	CALL	Save_Restore_Packet	; save DEVCALL packet
  9985                                  	;invoke	READTIME		; readtime
  9986 000013EF E847F7                  	call	READTIME
  9987 000013F2 B80100                  	MOV	AX,1
  9988 000013F5 E89202                  	CALL	Save_Restore_Packet	; restore DEVCALL packet
  9989                                  
  9990                                  ;	; MSDOS 3.3 (IBMDOS.COM, Offset 1F8Ch)
  9991                                  ;	; (MSDOS 6.0 code does not contain IBM DOS FETCHI_TAG check)
  9992                                  ;	push	bx
  9993                                  ;	mov	bx,DATE_FLAG
  9994                                  ;	add	bx,2  ; mov bx,FETCHI_FLAG
  9995                                  ;	cmp	word [cs:bx],5872h
  9996                                  ;	jz	short FETCHI_TAG_chk_ok
  9997                                  ;	call	DOSINIT
  9998                                  ;FETCHI_TAG_chk_ok:
  9999                                  ;	pop	bx
 10000                                  
 10001 000013F8 1F                      	POP	DS			; restore DS
 10002 000013F9 5A                      	POP	DX
 10003 000013FA 59                      	POP	CX
 10004 000013FB 5B                      	POP	BX
 10005 000013FC 58                      	POP	AX
 10006                                  NoUpdate:
 10007                                  
 10008                                  ;hkn; SS override
 10009 000013FD 36FF06[910D]            	INC	word [SS:DATE_FLAG]
 10010                                  
 10011                                  ;;; 7/15/86 ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 10012 00001402 EBC0                    	JMP	short INTEST
 10013                                  GET:
 10014 00001404 30E4                    	XOR	AH,AH
 10015 00001406 E84731                  	call	IOFUNC
 10016 00001409 5E                      	POP	SI
 10017 0000140A 1F                      	POP	DS
 10018                                  ;;; 7/15/86
 10019                                  
 10020                                  ;hkn; SS override
 10021                                  	; MSDOS 6.0
 10022 0000140B 36C606[900D]00          	MOV	BYTE [SS:SCAN_FLAG],0
 10023                                  	;
 10024 00001411 3C00                    	CMP	AL,0	    ; extended code ( AL )
 10025 00001413 7506                    	JNZ	short noscan
 10026                                  
 10027                                  ;hkn; SS override
 10028 00001415 36C606[900D]01          	MOV	BYTE [SS:SCAN_FLAG],1 ; set this flag for ALT_Q key
 10029                                  noscan:
 10030 0000141B C3                      	retn
 10031                                  ;
 10032                                  ;----------------------------------------------------------------------------
 10033                                  ;
 10034                                  ;**	$STD_CON_STRING_OUTPUT - Console String Output
 10035                                  ;
 10036                                  ;
 10037                                  ;	ENTRY	(DS:DX) Point to output string '$' terminated
 10038                                  ;	EXIT	none
 10039                                  ;	USES	ALL
 10040                                  ;
 10041                                  ;----------------------------------------------------------------------------
 10042                                  ;
 10043                                  
 10044                                  _$STD_CON_STRING_OUTPUT:	;System call 9
 10045                                  
 10046 0000141C 89D6                    	mov	si,dx
 10047                                  STRING_OUT1:	
 10048 0000141E AC                      	lodsb
 10049 0000141F 3C24                    	cmp	al,'$'
 10050 00001421 74F8                    	je	short noscan
 10051                                  NEXT_STR1:
 10052 00001423 E89002                  	call	OUTT
 10053 00001426 EBF6                    	jmp	short STRING_OUT1
 10054                                  
 10055                                  ;----------------------------------------------------------------------------
 10056                                  ;
 10057                                  ;**	$STD_CON_STRING_INPUT - Input Line from Console
 10058                                  ;
 10059                                  ;	$STD_CON_STRING_INPUT Fills a buffer from console input until CR
 10060                                  ;
 10061                                  ;	ENTRY	(ds:dx) = input buffer
 10062                                  ;	EXIT	none
 10063                                  ;	USES	ALL
 10064                                  ;
 10065                                  ;----------------------------------------------------------------------------
 10066                                  
 10067                                  _$STD_CON_STRING_INPUT:		;System call 10
 10068                                  
 10069 00001428 8CD0                    	mov	ax,ss
 10070 0000142A 8EC0                    	mov	es,ax
 10071 0000142C 89D6                    	mov	si,dx
 10072 0000142E 30ED                    	xor	ch,ch
 10073 00001430 AD                      	lodsw
 10074                                  
 10075                                  ;	(AL) = the buffer length
 10076                                  ;	(AH) = the template length
 10077                                  
 10078 00001431 08C0                            or	al,al
 10079 00001433 74E6                            jz	short noscan	;Buffer is 0 length!!?
 10080 00001435 88E3                    	mov	bl,ah		;Init template counter
 10081 00001437 88EF                            mov	bh,ch		;Init template counter
 10082                                  
 10083                                  ;	(BL) = the number of bytes in the template
 10084                                  
 10085 00001439 38D8                            cmp	al,bl
 10086 0000143B 7605                            jbe	short NOEDIT	;If length of buffer inconsistent with contents
 10087 0000143D 80380D                          cmp	byte [bx+si],c_CR ; 0Dh
 10088 00001440 7402                            jz	short EDITON	;If CR correctly placed EDIT is OK
 10089                                  
 10090                                  ; The number of chars in the template is >= the number of chars in buffer or
 10091                                  ; there is no CR at the end of the template.  This is an inconsistant state
 10092                                  ; of affairs.  Pretend that the template was empty:
 10093                                  ;
 10094                                  
 10095                                  NOEDIT:	
 10096 00001442 88EB                    	mov	bl,ch		;Reset buffer
 10097                                  EDITON: 
 10098 00001444 88C2                    	mov	dl,al
 10099 00001446 4A                      	dec	dx		;DL is # of bytes we can put in the buffer
 10100                                  
 10101                                  ;	Top level. We begin to read a line in.
 10102                                  
 10103                                  NEWLIN: 
 10104 00001447 36A0[F901]              	mov	al,[SS:CARPOS]
 10105 0000144B 36A2[FA01]              	mov	[SS:STARTPOS],al ;Remember position in raw buffer
 10106                                  
 10107 0000144F 56                      	push	si
 10108 00001450 BF[FB01]                	mov	di,INBUF ;Build the new line here
 10109 00001453 36882E[7905]            	mov	byte [SS:INSMODE],ch ;Insert mode off
 10110 00001458 88EF                    	mov	bh,ch		;No chars from template yet
 10111 0000145A 88EE                    	mov	dh,ch		;No chars to new line yet
 10112 0000145C E863FF                  	call	_$STD_CON_INPUT_NO_ECHO ;Get first char
 10113 0000145F 3C0A                    	cmp	al,c_LF		; 0Ah	;Linefeed 
 10114 00001461 7503                    	jnz	short GOTCH
 10115                                  
 10116                                  ;	This is the main loop of reading in a character and processing it.
 10117                                  ;
 10118                                  ;	(BH) = the index of the next byte in the template
 10119                                  ;	(BL) = the length of the template
 10120                                  ;	(DH) = the number of bytes in the buffer
 10121                                  ;	(DL) = the length of the buffer
 10122                                  
 10123                                  GETCH:
 10124 00001463 E85CFF                  	call	_$STD_CON_INPUT_NO_ECHO
 10125                                  GOTCH:
 10126                                  ;
 10127                                  ; Brain-damaged Tim Patterson ignored ^F in case his BIOS did not flush the
 10128                                  ; input queue.
 10129                                  ;
 10130 00001466 3C06                            cmp	al,"F"-"@"  ; CMP AL, 6  ; Ignore ^F
 10131 00001468 74F9                    	jz	short GETCH
 10132                                  
 10133                                  ;	If the leading char is the function-key lead byte
 10134                                  
 10135                                  	;cmp	al,[SS:ESCCHAR]
 10136                                  
 10137                                  	; 04/05/2019 - Retro DOS v4.0
 10138                                  
 10139                                  ;hkn; 	ESCCHAR is in TABLE seg (DOSCODE)
 10140                                  
 10141 0000146A 2E3A06[370A]            	CMP	AL,[cs:ESCCHAR]
 10142 0000146F 743B                            jz	short ESCAPE	;change reserved keyword DBM 5-7-87
 10143                                  
 10144                                  ;	Rubout and ^H are both destructive backspaces.
 10145                                  
 10146 00001471 3C7F                            cmp	al,c_DEL ; 7FH
 10147 00001473 742E                            jz	short BACKSPJ
 10148 00001475 3C08                            cmp	al,c_BS  ; 8
 10149 00001477 742A                            jz	short BACKSPJ
 10150                                  
 10151                                  	; 04/05/2019 -	MSDOS 6.0, also MSDOS 6.21 has bug (bullshit) here. 
 10152                                  	;		Two NOPs -instead of a JMP short, as two bytes-
 10153                                  	;	   	after CMP and a CMP again!
 10154                                  	;		
 10155                                  	;		-It would be better if they use a 'JMP short' to 
 10156                                  	;	      	DOSCODE:5279h from DOSCODE:5271h and leave NOPs
 10157                                  	;		between them. Then, they would be able use a patch
 10158                                  	;		between 5271h and 5279h when if it will be required.
 10159                                  	;		I think Tim Patterson would not do this CMP mistake!-
 10160                                  	;	
 10161                                  	; (MSDOS.SYS, from DOSCODE:5271h to DOSCODE:5279h)
 10162                                  
 10163                                  	; 08/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 10164                                  	;
 10165                                  	; (Note: nops below might be used for patching code for Windows 3.1)
 10166                                  
 10167                                  ;DOSCODE:526D	cmp     al, 8
 10168                                  ;DOSCODE:526F	jz      short BACKSPJ
 10169                                  ;DOSCODE:5271	cmp     al, 17h
 10170                                  ;DOSCODE:5273	nop
 10171                                  ;DOSCODE:5274	nop
 10172                                  ;DOSCODE:5275	cmp     al, 15h
 10173                                  ;DOSCODE:5277	nop
 10174                                  ;DOSCODE:5278	nop
 10175                                  ;DOSCODE:5279	cmp     al, 0Dh
 10176                                  ;DOSCODE:527B	jz      short ENDLIN
 10177                                  ;DOSCODE:527D	cmp     al, 0Ah
 10178                                  ;DOSCODE:527F	jz      short PHYCRLF
 10179                                  	
 10180                                  	; 08/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 10181                                  	; DOSCODE:525Dh
 10182                                  
 10183                                  ; 16/12/2022
 10184                                  %if 0
 10185                                  	; MSDOS 6.0
 10186                                  ;	^W deletes backward once and then backs up until a letter is before the
 10187                                  ;	cursor
 10188                                  
 10189                                  	CMP     AL,"W"-"@" ; 17h
 10190                                  
 10191                                  ;	The removal of the comment characters before the jump statement will
 10192                                  ;	cause ^W to backup a word.
 10193                                  
 10194                                  ;***	JZ	short WordDel
 10195                                  	NOP
 10196                                  	NOP
 10197                                  
 10198                                  	CMP     AL,"U"-"@" ; 15h
 10199                                  
 10200                                  ;	The removal of the comment characters before the jump statement will
 10201                                  ;	cause ^U to clear a line.
 10202                                  
 10203                                  ;***	JZ	short LineDel
 10204                                  	NOP
 10205                                  	NOP
 10206                                  
 10207                                  %endif
 10208                                  
 10209                                  ;	CR terminates the line.
 10210                                  
 10211 00001479 3C0D                            cmp	al,c_CR ; 0Dh
 10212 0000147B 7432                            jz	short ENDLIN
 10213                                  
 10214                                  ;	LF goes to a new line and keeps on reading.
 10215                                  
 10216 0000147D 3C0A                            cmp	al,c_LF ; 0Ah
 10217 0000147F 7444                    	jz	short PHYCRLF
 10218                                  
 10219                                  ;	^X (or ESC) deletes the line and starts over
 10220                                  
 10221                                  	; MSDOS 3.3
 10222                                  	;cmp	al,[ss:CANCHAR] ; 1Bh
 10223                                  	;jz	short KILNEW
 10224                                  
 10225                                  	; MSDOS 6.0 (& MSDOS 6.21)
 10226                                  
 10227                                  ;hkn; 	CANCHAR is in TABLE seg (DOSCODE), so CS override
 10228                                  
 10229 00001481 2E3A06[360A]            	cmp	al,[cs:CANCHAR] ; 1Bh
 10230 00001486 7442                    	jz	short KILNEW
 10231                                  	
 10232                                  	;cmp	al,CANCEL ; 1Bh	; Retro DOS v3.0
 10233                                  	;jz	short KILNEW
 10234                                  
 10235                                  ; Otherwise, we save the input character.
 10236                                  
 10237                                  SAVCH:	
 10238 00001488 38D6                    	cmp	dh,dl
 10239 0000148A 7319                    	jnb	short BUFFUL		; buffer is full.
 10240 0000148C AA                              stosb
 10241 0000148D FEC6                    	inc	dh                      ; increment count in buffer.
 10242 0000148F E8B802                  	call	BUFOUT			; Print control chars nicely
 10243                                  
 10244 00001492 36803E[7905]00                  cmp	byte [SS:INSMODE], 0
 10245 00001498 75C9                    	jnz	short GETCH		; insertmode => don't advance template
 10246 0000149A 38DF                            cmp	bh,bl
 10247 0000149C 73C5                            jnb	short GETCH		; no more characters in template
 10248 0000149E 46                              inc	si                      ; Skip to next char in template
 10249 0000149F FEC7                            inc	bh                      ; remember position in template
 10250 000014A1 EBC0                            jmp	short GETCH
 10251                                  
 10252                                  BACKSPJ: 
 10253 000014A3 EB38                    	jmp	short BACKSP
 10254                                  
 10255                                  BUFFUL: 
 10256 000014A5 B007                    	mov	al, 7			; Bell to signal full buffer
 10257 000014A7 E80C02                  	call	OUTT
 10258 000014AA EBB7                    	jmp	short GETCH
 10259                                  
 10260                                  ESCAPE: 
 10261                                  	;transfer OEMFunctionKey
 10262 000014AC E9B3F5                  	JMP	OEMFunctionKey		; let the OEM's handle the key dispatch
 10263                                  
 10264                                  ENDLIN:
 10265 000014AF AA                              stosb				; Put the CR in the buffer
 10266 000014B0 E80302                  	call	OUTT                    ; Echo it
 10267 000014B3 5F                              pop	di                      ; Get start of user buffer
 10268 000014B4 8875FF                          mov	[di-1], dh		; Tell user how many bytes
 10269 000014B7 FEC6                            inc	dh			; DH is length including CR
 10270                                  
 10271                                  COPYNEW:
 10272                                  	; (IBMDOS.COM, MSDOS 2.0, STRIN.ASM)
 10273                                  	;mov	bp, es
 10274                                  	;mov	bx, ds
 10275                                  	;mov	es, bx
 10276                                  	;mov	ds, bp
 10277                                  	;mov	si, INBUF
 10278                                  	;mov	cl, dh
 10279                                  	;rep	movsb
 10280                                  	;retn
 10281                                  
 10282                                  	; CPMIO.ASM (MSDOS 6.0)
 10283                                  	; (IBMDOS.COM, MSDOS 3.3, Offset 2061h) 
 10284                                  	;SAVE	<DS,ES>
 10285 000014B9 1E                      	PUSH	DS
 10286 000014BA 06                      	PUSH	ES
 10287                                  	;RESTORE <DS,ES>		; XCHG ES,DS
 10288 000014BB 1F                      	POP	DS
 10289 000014BC 07                      	POP	ES
 10290                                  
 10291                                  ;;hkn; INBUF is in DOSDATA
 10292 000014BD BE[FB01]                        MOV     SI,INBUF
 10293 000014C0 88F1                            MOV     CL,DH                   ; set up count
 10294 000014C2 F3A4                            REP     MOVSB                   ; Copy final line to user buffer
 10295                                  OLDBAK_RETN:
 10296 000014C4 C3                              RETN
 10297                                  
 10298                                  ;	Output a CRLF to the user screen and do NOT store it into the buffer
 10299                                  
 10300                                  PHYCRLF:
 10301 000014C5 E82001                  	CALL	CRLF
 10302 000014C8 EB99                            JMP	short GETCH
 10303                                  
 10304                                  	; MSDOS 6.0 (& MSDOS 3.3, IBMDOS.COM, 1987)
 10305                                  
 10306                                  ; DOSCODE:52CAh (MSDOS 621, MSDOS.SYS)
 10307                                  
 10308                                  	; Note: Following routines were not used in IBMDOS.COM
 10309                                  	;	-CRTL+W, CRTL+U is not activated-
 10310                                  	;	but they were in the kernel code!?)
 10311                                  
 10312                                  	; 08/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 10313                                  	; DOSCODE:52B6h
 10314                                  
 10315                                  ;;;;;;;;
 10316                                  
 10317                                  ; 16/12/2022
 10318                                  %if 0
 10319                                  ;
 10320                                  ; Delete the previous line
 10321                                  ;
 10322                                  LineDel:
 10323                                  	OR      DH,DH
 10324                                  	JZ	short GETCH	 ; 06/12/2022
 10325                                  	Call    BackSpace
 10326                                  	JMP	short LineDel
 10327                                  
 10328                                  %endif
 10329                                  
 10330                                  ;
 10331                                  ; delete the previous word.
 10332                                  ;
 10333                                  WordDel:
 10334                                  WordLoop:
 10335                                  ;	Call    BackSpace               ; backspace the one spot
 10336                                  ;	OR      DH,DH
 10337                                  ;	JZ	short GetChj
 10338                                  ;	MOV     AL,[ES:DI-1]
 10339                                  ;	cmp     al,'0'
 10340                                  ;	jb	short GetChj
 10341                                  ;	cmp     al,'9'
 10342                                  ;	jbe	short WordLoop
 10343                                  ;	OR      AL,20h
 10344                                  ;	CMP     AL,'a'
 10345                                  ;	JB	short GetChj
 10346                                  ;	CMP     AL,'z'
 10347                                  ;	JBE	short WordLoop
 10348                                  ;GetChj: 
 10349                                  ;	JMP	GETCH
 10350                                  
 10351                                  ; 16/12/2022
 10352                                  %if 0
 10353                                  	; 07/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 10354                                  	; (Worddel is not called or jumped from anywhere!)
 10355                                  WordDel:
 10356                                  WordLoop:
 10357                                  	Call    BackSpace               ; backspace the one spot
 10358                                  	OR      DH,DH
 10359                                  	JZ	short GetChj
 10360                                  	MOV     AL,[ES:DI-1]
 10361                                  	cmp     al,'0'
 10362                                  	jb	short GetChj
 10363                                  	cmp     al,'9'
 10364                                  	jbe	short WordLoop
 10365                                  	OR      AL,20h
 10366                                  	CMP     AL,'a'
 10367                                  	JB	short GetChj
 10368                                  	CMP     AL,'z'
 10369                                  	JBE	short WordLoop
 10370                                  GetChj: 
 10371                                  	JMP	GETCH
 10372                                  
 10373                                  %endif
 10374                                  
 10375                                  ;;;;;;;;
 10376                                  
 10377                                  ; DOSCODE:52F3h (MSDOS 621, MSDOS.SYS)
 10378                                  
 10379                                  ; The user wants to throw away what he's typed in and wants to start over.
 10380                                  ; We print the backslash and then go to the next line and tab to the correct
 10381                                  ; spot to begin the buffered input.
 10382                                  
 10383                                  KILNEW:
 10384 000014CA B05C                            mov	al,'\'
 10385 000014CC E8E701                          call	OUTT            ;Print the CANCEL indicator
 10386 000014CF 5E                              pop	si		;Remember start of edit buffer
 10387                                  PUTNEW:
 10388 000014D0 E81501                  	call	CRLF            ;Go to next line on screen
 10389 000014D3 36A0[FA01]              	mov	al,[SS:STARTPOS]
 10390 000014D7 E85002                  	call	TAB             ;Tab over
 10391 000014DA E96AFF                          JMP     NEWLIN		;Start over again
 10392                                  
 10393                                  ;	Destructively back up one character position
 10394                                  
 10395                                  BACKSP:
 10396                                  	; 09/09/2018
 10397 000014DD E80200                  	Call    BackSpace
 10398 000014E0 EB81                    	JMP     GETCH
 10399                                  
 10400                                  BackSpace:
 10401 000014E2 08F6                    	or	dh,dh
 10402 000014E4 7419                    	jz	short OLDBAK	;No chars in line, do nothing to line
 10403 000014E6 E85800                  	call	BACKUP          ;Do the backup
 10404 000014E9 268A05                  	mov	al,[es:di]	;Get the deleted char
 10405 000014EC 3C20                            cmp	al,20h	; ' '
 10406 000014EE 730F                    	jnb	short OLDBAK	;Was a normal char
 10407 000014F0 3C09                            cmp	al,c_HT ; 9
 10408 000014F2 741B                    	jz	short BAKTAB	;Was a tab, fix up users display
 10409                                  ;; 9/27/86 fix for ctrl-U backspace
 10410 000014F4 3C15                    	CMP     AL,"U"-"@" ; 15h ; ctrl-U is a section symbol not ^U
 10411 000014F6 7407                    	JZ	short OLDBAK
 10412 000014F8 3C14                           	CMP     AL,"T"-"@" ; 14h ; ctrl-T is a paragraphs symbol not ^T
 10413 000014FA 7403                    	JZ	short OLDBAK
 10414                                  ;; 9/27/86 fix for ctrl-U backspace
 10415 000014FC E84500                          call	BACKMES         ;Was a control char, zap the '^'
 10416                                  OLDBAK:
 10417 000014FF 36803E[7905]00                  cmp	byte [SS:INSMODE], 0
 10418 00001505 75BD                    	jnz	short OLDBAK_RETN ;In insert mode, done
 10419 00001507 08FF                    	or	bh,bh
 10420 00001509 74B9                            jz	short OLDBAK_RETN 
 10421                                  				;Not advanced in template, stay where we are
 10422 0000150B FECF                    	dec	bh		;Go back in template
 10423 0000150D 4E                              dec	si
 10424 0000150E C3                      	retn
 10425                                  BAKTAB:
 10426 0000150F 57                              push	di
 10427 00001510 4F                              dec	di		;Back up one char
 10428 00001511 FD                              std			;Go backward
 10429 00001512 88F1                            mov	cl,dh		;Number of chars currently in line
 10430 00001514 B020                            mov	al,20h	; ' '
 10431 00001516 53                              push	bx
 10432 00001517 B307                            mov	bl,7		;Max
 10433 00001519 E30E                            jcxz	FIGTAB		;At start, do nothing
 10434                                  FNDPOS:
 10435 0000151B AE                              scasb			;Look back
 10436 0000151C 7609                    	jbe	short CHKCNT
 10437 0000151E 26807D0109              	cmp	byte [es:di+1],9
 10438 00001523 7409                    	jz	short HAVTAB	;Found a tab
 10439 00001525 FECB                    	dec	bl		;Back one char if non tab control char
 10440                                  CHKCNT:
 10441 00001527 E2F2                            loop	FNDPOS
 10442                                  FIGTAB:		
 10443 00001529 362A1E[FA01]            	sub	bl,[SS:STARTPOS]
 10444                                  HAVTAB:
 10445 0000152E 28F3                    	sub	bl,dh
 10446 00001530 00D9                    	add	cl,bl
 10447 00001532 80E107                  	and	cl,7		;CX has correct number to erase
 10448 00001535 FC                      	cld			;Back to normal
 10449 00001536 5B                      	pop	bx
 10450 00001537 5F                      	pop	di
 10451 00001538 74C5                    	jz	short OLDBAK	;Nothing to erase
 10452                                  TABBAK:
 10453 0000153A E80700                  	call	BACKMES
 10454 0000153D E2FB                    	loop	TABBAK		;Erase correct number of chars
 10455 0000153F EBBE                    	jmp	short OLDBAK
 10456                                  
 10457                                  BACKUP:
 10458 00001541 FECE                            dec	dh		;Back up in line
 10459 00001543 4F                              dec	di
 10460                                  BACKMES:
 10461 00001544 B008                            mov	al,c_BS ; 8	;Backspace
 10462 00001546 E86D01                          call	OUTT
 10463 00001549 B020                            mov	al,20h ; ' '	;Erase
 10464 0000154B E86801                          call	OUTT
 10465 0000154E B008                            mov	al,c_BS ; 8	;Backspace
 10466 00001550 E96301                  	jmp	OUTT		;Done
 10467                                  
 10468                                  ;User really wants an ESC character in his line
 10469                                  TWOESC:	
 10470 00001553 2EA0[370A]              	mov	al,[cs:ESCCHAR] ; 10/06/2019
 10471 00001557 E92EFF                  	jmp	SAVCH
 10472                                  
 10473                                  ;Copy the rest of the template
 10474                                  COPYLIN:
 10475 0000155A 88D9                            mov	cl,bl		;Total size of template
 10476 0000155C 28F9                    	sub	cl,bh		;Minus position in template, is number to move
 10477 0000155E EB07                            jmp	short COPYEACH
 10478                                  
 10479                                  COPYSTR:
 10480 00001560 E83400                  	call	FINDOLD         ;Find the char
 10481 00001563 EB02                    	jmp	short COPYEACH  ;Copy up to it
 10482                                  
 10483                                  ;Copy one char from template to line
 10484                                  COPYONE:
 10485 00001565 B101                            mov	cl,1
 10486                                  ;Copy CX chars from template to line
 10487                                  COPYEACH:
 10488 00001567 36C606[7905]00                  mov	byte [SS:INSMODE],0	;All copies turn off insert mode
 10489 0000156D 38D6                    	cmp	dh,dl
 10490 0000156F 740F                            jz	short GETCH2		;At end of line, can't do anything
 10491 00001571 38DF                            cmp	bh,bl
 10492 00001573 740B                            jz	short GETCH2		;At end of template, can't do anything
 10493 00001575 AC                              lodsb
 10494 00001576 AA                              stosb
 10495 00001577 E8D001                  	call	BUFOUT
 10496 0000157A FEC7                            inc	bh			;Ahead in template
 10497 0000157C FEC6                            inc	dh			;Ahead in line
 10498 0000157E E2E7                            loop	COPYEACH
 10499                                  GETCH2:
 10500 00001580 E9E0FE                          jmp	GETCH
 10501                                  
 10502                                  ;Skip one char in template
 10503                                  SKIPONE:
 10504 00001583 38DF                    	cmp	bh,bl
 10505 00001585 74F9                    	jz	short GETCH2		;At end of template
 10506 00001587 FEC7                    	inc	bh			;Ahead in templat
 10507 00001589 46                      	inc	si
 10508 0000158A E9D6FE                  	jmp	GETCH
 10509                                  
 10510                                  SKIPSTR:
 10511 0000158D E80700                  	call	FINDOLD                 ;Find out how far to go
 10512 00001590 01CE                            add	si,cx			;Go there
 10513 00001592 00CF                            add	bh,cl
 10514 00001594 E9CCFE                          jmp	GETCH
 10515                                  
 10516                                  ;Get the next user char, and look ahead in template for a match
 10517                                  ;CX indicates how many chars to skip to get there on output
 10518                                  ;NOTE: WARNING: If the operation cannot be done, the return
 10519                                  ;       address is popped off and a jump to GETCH is taken.
 10520                                  ;       Make sure nothing extra on stack when this routine
 10521                                  ;       is called!!! (no PUSHes before calling it).
 10522                                  
 10523                                  FINDOLD:
 10524 00001597 E828FE                          call	_$STD_CON_INPUT_NO_ECHO
 10525                                  
 10526                                  	; STRIN.ASM (MSDOS 2.11, 19/07/2018) 
 10527                                  
 10528                                  	;CMP     AL,[SS:ESCCHAR]	
 10529                                  	;JNZ     SHORT FINDSETUP
 10530                                  
 10531                                  	; CPMIO.ASM (MSDOS 6.0, 04/05/2019 - Retro DOS v4.0)
 10532                                  
 10533                                  ;hkn; ESCCHAR is in TABLE seg (DOSCODE), so CS override
 10534                                  
 10535 0000159A 2E3A06[370A]            	CMP	AL,[CS:ESCCHAR]		; did he type a function key?
 10536 0000159F 7505                    	JNZ     SHORT FINDSETUP		; no, set up for scan
 10537                                  
 10538 000015A1 E81EFE                  	CALL	_$STD_CON_INPUT_NO_ECHO	; eat next char
 10539 000015A4 EB1D                            JMP     SHORT NOTFND		; go try again
 10540                                  FINDSETUP:
 10541 000015A6 88D9                    	mov	cl,bl
 10542 000015A8 28F9                            sub	cl,bh		;CX is number of chars to end of template
 10543 000015AA 7417                    	jz	short NOTFND	;At end of template
 10544 000015AC 49                              dec	cx		;Cannot point past end, limit search
 10545 000015AD 7414                            jz	short NOTFND	 ;If only one char in template, forget it
 10546 000015AF 06                      	push	es
 10547 000015B0 1E                      	push	ds
 10548 000015B1 07                      	pop	es
 10549 000015B2 57                      	push	di
 10550 000015B3 89F7                    	mov	di,si		;Template to ES:DI
 10551 000015B5 47                      	inc	di
 10552 000015B6 F2AE                    	repne	scasb		;Look
 10553 000015B8 5F                      	pop	di
 10554 000015B9 07                      	pop	es
 10555 000015BA 7507                    	jnz	short NOTFND	;Didn't find the char
 10556 000015BC F6D1                            not	cl		;Turn how far to go into how far we went
 10557 000015BE 00D9                            add	cl,bl		;Add size of template
 10558 000015C0 28F9                            sub	cl,bh		;Subtract current pos, result distance to skip
 10559                                  FINDOLD_RETN:
 10560 000015C2 C3                      	retn
 10561                                  
 10562                                  NOTFND:
 10563 000015C3 5D                              pop	bp              ;Chuck return address
 10564 000015C4 E99CFE                          jmp	GETCH
 10565                                  
 10566                                  REEDIT:
 10567 000015C7 B040                    	mov	al,'@'		;Output re-edit character
 10568 000015C9 E8EA00                  	call	OUTT
 10569 000015CC 5F                      	pop	di
 10570 000015CD 57                      	push	di
 10571 000015CE 06                      	push	es
 10572 000015CF 1E                      	push	ds
 10573 000015D0 E8E6FE                  	call	COPYNEW		;Copy current line into template
 10574 000015D3 1F                      	pop	ds
 10575 000015D4 07                      	pop	es
 10576 000015D5 5E                      	pop	si
 10577 000015D6 88F3                    	mov	bl,dh		;Size of line is new size template
 10578 000015D8 E9F5FE                  	jmp	PUTNEW		;Start over again
 10579                                  
 10580                                  EXITINS:
 10581                                  ENTERINS:
 10582 000015DB 36F616[7905]            	not	byte [SS:INSMODE]
 10583 000015E0 E980FE                  	jmp	GETCH
 10584                                  
 10585                                  ;Put a real live ^Z in the buffer (embedded)
 10586                                  CTRLZ:
 10587 000015E3 B01A                    	mov	al,"Z"-"@" ; 1Ah
 10588 000015E5 E9A0FE                          jmp	SAVCH
 10589                                  
 10590                                  ;Output a CRLF
 10591                                  CRLF:
 10592 000015E8 B00D                    	mov	al,c_CR ; 0Dh 
 10593 000015EA E8C900                  	call	OUTT
 10594 000015ED B00A                    	mov	al,c_LF ; 0Ah
 10595 000015EF E9C400                  	jmp	OUTT
 10596                                  
 10597                                  ;
 10598                                  ;----------------------------------------------------------------------------
 10599                                  ;
 10600                                  ;**	$RAW_CON_IO - Do Raw Console I/O
 10601                                  ;
 10602                                  ;	Input or output raw character from console, no echo
 10603                                  ;
 10604                                  ;	ENTRY	DL = -1 if input
 10605                                  ;		   =  output character if output
 10606                                  ;	EXIT	(AL) = input character if input
 10607                                  ;	USES	all
 10608                                  ;
 10609                                  ;----------------------------------------------------------------------------
 10610                                  ; 20/07/2018 - Retro DOS v3.0
 10611                                  
 10612                                  ; 04/05/2019 - Retro DOS v4.0
 10613                                  ; DOSCODE:541Ch (MSDOS 6.21, MSDOS.SYS)
 10614                                  
 10615                                  ; 08/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 10616                                  ; DOSCODE:5408h (MSDOS 5.0, MSDOS.SYS)
 10617                                  
 10618                                  _$RAW_CON_IO:			; System call 6
 10619                                  
 10620 000015F2 88D0                            MOV     AL,DL
 10621 000015F4 3CFF                            CMP     AL,-1
 10622 000015F6 7541                    	JNZ	SHORT RAWOUT ; 16/12/2022
 10623                                  	; 08/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 10624                                  	;jz	short rci1
 10625                                  	;jmp	short RAWOUT
 10626                                  	; 16/12/202
 10627                                  	; 07/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 10628                                  	;nop
 10629                                  rci1:	        
 10630                                  			; Get pointer to register save area
 10631 000015F8 36C43E[8405]                    LES     DI,[SS:USER_SP] ; 12/03/2018
 10632 000015FD 31DB                    	XOR     BX,BX
 10633                                      	;CALL	GET_IO_FCB	; MSDOS 2.11 (Retro DOS v2.0)
 10634 000015FF E8DD20                  	CALL	GET_IO_SFT	; MSDOS 3.3 & MSDOS 6.0
 10635                                          ;JC	SHORT RET17
 10636 00001602 72BE                            jc	short FINDOLD_RETN
 10637 00001604 B401                    	MOV     AH,1
 10638 00001606 E8472F                          CALL	IOFUNC
 10639 00001609 750B                            JNZ     SHORT RESFLG
 10640 0000160B E80A3C                          CALL	SPOOLINT
 10641                                          ;OR	BYTE [ES:DI+16H],40H
 10642 0000160E 26804D1640              	OR	BYTE [ES:DI+user_env.user_F],40H ; Set user's zero flag
 10643 00001613 30C0                            XOR     AL,AL
 10644                                  RET17:
 10645 00001615 C3                              RETN
 10646                                  
 10647                                  RESFLG:
 10648                                  	;AND	BYTE [ES:DI+16H],0FFH-40H  ; 0BFh
 10649 00001616 26806516BF              	AND	BYTE [ES:DI+user_env.user_F],0FFH-40H
 10650                                  				; Reset user's zero flag
 10651                                  ;RILP:
 10652                                  rci0:
 10653 0000161B E8FA3B                       	CALL	SPOOLINT
 10654                                  ;
 10655                                  ;----------------------------------------------------------------------------
 10656                                  ;
 10657                                  ;**	$Raw_CON_INPUT - Raw Console Input
 10658                                  ;
 10659                                  ;	Input raw character from console, no echo
 10660                                  ;
 10661                                  ;	ENTRY	none
 10662                                  ;	EXIT	(al) = character
 10663                                  ;	USES	all
 10664                                  ;
 10665                                  ;----------------------------------------------------------------------------
 10666                                  ;
 10667                                  
 10668                                  ;rci0:	invoke	SPOOLINT
 10669                                  
 10670                                  	;entry	$RAW_CON_INPUT
 10671                                  
 10672                                  	; 04/05/2019 - Retro DOS v4.0
 10673                                  
 10674                                  ; DOSCODE:544Bh (MSDOS 6.21, MSDOS.SYS)
 10675                                  
 10676                                  _$RAW_CON_INPUT:		; System call 7
 10677 0000161E 53                      	push	bx
 10678 0000161F 31DB                            XOR     BX,BX
 10679                                          ;CALL	GET_IO_FCB	; MSDOS 2.11 (Retro DOS v2.0)
 10680 00001621 E8BB20                  	CALL	GET_IO_SFT	; MSDOS 3.3 & MSDOS 6.0
 10681 00001624 5B                              pop	bx
 10682 00001625 72EE                    	JC	SHORT RET17
 10683 00001627 B401                            MOV     AH,1
 10684 00001629 E8242F                          CALL	IOFUNC
 10685                                  	;JZ	SHORT RILP	; MSDOS 2.11
 10686                                  	;XOR	AH,AH
 10687                                          ;CALL	IOFUNC
 10688                                          ;RETN
 10689 0000162C 7506                    	jnz	short rci5	; MSDOS 3.3 & MSDOS 6.0
 10690 0000162E B484                    	MOV	AH,84h
 10691 00001630 CD2A                    	INT	int_IBM  ; int 2Ah
 10692 00001632 EBE7                    	JMP	short rci0
 10693                                  rci5:	
 10694 00001634 30E4                            XOR     AH,AH
 10695                                          ;CALL	IOFUNC
 10696                                          ;RETN
 10697                                  	; 18/12/2022
 10698 00001636 E9172F                  	jmp	IOFUNC
 10699                                  
 10700                                  ;       Output the character in AL to stdout
 10701                                  ;
 10702                                  	;entry   RAWOUT
 10703                                  RAWOUT:
 10704 00001639 53                              PUSH    BX
 10705 0000163A BB0100                          MOV     BX,1
 10706                                  
 10707                                          ;CALL	GET_IO_FCB	; MSDOS 2.11 (Retro DOS v2.0)
 10708 0000163D E89F20                  	CALL	GET_IO_SFT	; MSDOS 3.3 & MSDOS 6.0
 10709 00001640 721B                            JC      SHORT RAWRET1
 10710                                  
 10711                                  	;
 10712                                  	; MSDOS 2.11
 10713                                          ;TEST	BYTE [SI+18H],080H	; output to file?
 10714                                          ;JZ	SHORT RAWNORM		; if so, do normally
 10715                                          ;PUSH	DS
 10716                                          ;PUSH	SI
 10717                                          ;LDS	SI,[SI+19H]		; output to special?
 10718                                  	;TEST	BYTE [SI+4],ISSPEC
 10719                                  	;POP	SI
 10720                                  	;
 10721                                          
 10722                                  	; MSDOS 3.3 & MSDOS 6.0
 10723                                  	;mov	bx,[si+5]
 10724 00001642 8B5C05                  	MOV	BX,[SI+SF_ENTRY.sf_flags] ;hkn; DS set up by get_io_sft
 10725                                   ;
 10726                                   ; If we are a network handle OR if we are not a local device then go do the
 10727                                   ; output the hard way.
 10728                                   ;	
 10729                                  	;and	bx,8080h
 10730 00001645 81E38080                	AND	BX,sf_isnet+devid_device
 10731                                  	;cmp	bx,80h
 10732 00001649 81FB8000                	CMP	BX,devid_device
 10733 0000164D 7510                    	jnz     short RAWNORM
 10734 0000164F 1E                      	push    ds
 10735                                  	;lds	bx,[si+7]
 10736 00001650 C55C07                  	LDS	BX,[SI+SF_ENTRY.sf_devptr] ; output to special?
 10737                                  	;test	byte [bx+4],10h
 10738 00001653 F6470410                	TEST	BYTE [BX+SYSDEV.ATT],ISSPEC
 10739                                  	;
 10740                                  
 10741 00001657 1F                              POP     DS
 10742 00001658 7405                            JZ      SHORT RAWNORM		; if not, do normally
 10743                                  
 10744 0000165A CD29                            INT	int_fastcon  ; int 29h	; quickly output the char
 10745                                  
 10746                                          ;JMP	SHORT RAWRET
 10747                                  ;RAWNORM:
 10748                                  ;	CALL    RAWOUT3
 10749                                  RAWRET: 
 10750 0000165C F8                      	CLC
 10751                                  RAWRET1:
 10752 0000165D 5B                              POP     BX
 10753                                  RAWRET2:
 10754 0000165E C3                      	RETN
 10755                                  RAWNORM:
 10756 0000165F E80700                  	CALL    RAWOUT3
 10757 00001662 EBF8                    	jmp	short RAWRET
 10758                                  
 10759                                  ;       Output the character in AL to handle in BX
 10760                                  ;
 10761                                  ;	entry   RAWOUT2
 10762                                  
 10763                                  RAWOUT2:
 10764                                  	;CALL	GET_IO_FCB	; MSDOS 2.11 (Retro DOS v2.0)
 10765                                  	;JC	SHORT RET18
 10766 00001664 E87820                  	CALL	GET_IO_SFT	; MSDOS 3.3 & MSDOS 6.0
 10767 00001667 72F5                    	JC	SHORT RAWRET2
 10768                                  RAWOUT3:
 10769 00001669 50                              PUSH    AX
 10770 0000166A EB0C                            JMP     SHORT RAWOSTRT
 10771                                  ROLP:
 10772 0000166C E8A93B                          CALL	SPOOLINT
 10773                                  
 10774                                  	; 01/05/2019 - Retro DOS v4.0
 10775                                  
 10776                                  	; MSDOS 6.0
 10777                                  	;OR	word [ss:DOS34_FLAG],CTRL_BREAK_FLAG ; 001000000000b
 10778                                  	; 17/12/2022
 10779 0000166F 36800E[1206]02          	or	byte [ss:DOS34_FLAG+1],(CTRL_BREAK_FLAG>>8) ; 02h	
 10780                                  	;or	word [ss:DOS34_FLAG],200h
 10781                                  				;AN002; set control break
 10782                                  	;invoke DSKSTATCHK
 10783 00001675 E81C3B                  	call	DSKSTATCHK	;AN002; check control break
 10784                                  RAWOSTRT:
 10785 00001678 B403                            MOV     AH,3
 10786 0000167A E8D32E                          CALL    IOFUNC
 10787 0000167D 74ED                            JZ      SHORT ROLP
 10788                                  
 10789                                  	; MSDOS 6.0
 10790                                  ;SR;
 10791                                  ; IOFUNC now returns ax = 0ffffh if there was an I24 on a status call and
 10792                                  ;the user failed. We do not send a char if this happens. We however return 
 10793                                  ;to the caller with carry clear because this DOS call does not return any
 10794                                  ;status. 
 10795                                  ;
 10796 0000167F 40                      	inc	ax		;fail on I24 if ax = -1
 10797 00001680 58                      	POP	AX
 10798 00001681 7405                    	jz	short nosend	;yes, do not send char
 10799 00001683 B402                    	MOV	AH,2
 10800 00001685 E8C82E                  	call	IOFUNC
 10801                                  nosend:
 10802 00001688 F8                      	CLC			; Clear carry indicating successful
 10803 00001689 C3                      	retn
 10804                                  
 10805                                  	; MSDOS 3.3 & MSDOS 2.11
 10806                                  	;POP	AX
 10807                                  	;MOV	AH,2
 10808                                          ;CALL	IOFUNC
 10809                                  	;CLC			; Clear carry indicating successful
 10810                                  ;RET18:    
 10811                                  	;RETN
 10812                                  
 10813                                  ;;10/08/2018
 10814                                  ; 20/07/2018 - Retro DOS v3.0
 10815                                  ; ---------------------------------------------------------------------------
 10816                                  ; Retro DOS v2.0 (MSDOS 2.11) - OUTMES
 10817                                  ; ---------------------------------------------------------------------------
 10818                                  
 10819                                  ; This routine is called at DOS init
 10820                                  
 10821                                  ;;	;procedure OUTMES,NEAR ; String output for internal messages
 10822                                  ;;OUTMES:
 10823                                  ;;	;LODS	CS:BYTE PTR [SI]
 10824                                  ;;	CS	LODSB
 10825                                  ;;	CMP     AL,"$" ; 24h
 10826                                  ;;	JZ	SHORT RET18
 10827                                  ;;	CALL	OUTT
 10828                                  ;;	JMP     SHORT OUTMES
 10829                                  
 10830                                  ; ---------------------------------------------------------------------------
 10831                                  
 10832                                  ; 20/07/2018 - Retro DOS v3.0
 10833                                  
 10834                                  ; IBMDOS.COM (MSDOS 3.3 kernel) - Offset 2252h
 10835                                  
 10836                                  ;
 10837                                  ;----------------------------------------------------------------------------
 10838                                  ;
 10839                                  ; Inputs:
 10840                                  ;	AX=0 save the DEVCALL request packet
 10841                                  ;	  =1 restore the DEVCALL request packet
 10842                                  ; Function:
 10843                                  ;	save or restore the DEVCALL packet
 10844                                  ; Returns:
 10845                                  ;	none
 10846                                  ;
 10847                                  ;----------------------------------------------------------------------------
 10848                                  ;
 10849                                  
 10850                                  ; 04/05/2019 - Retro DOS v4.0
 10851                                  ; DOSCODE:54B9h (MSDOS 6.21, MSDOS.SYS)
 10852                                  
 10853                                  ; 08/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 10854                                  ; DOSCODE:54A5h (MSDOS 5.0, MSDOS.SYS)
 10855                                  
 10856                                  ; 12/05/2019
 10857                                  
 10858                                  Save_Restore_Packet:
 10859 0000168A 1E                      	PUSH	DS
 10860 0000168B 06                      	PUSH	ES
 10861 0000168C 56                      	PUSH	SI
 10862 0000168D 57                      	PUSH	DI
 10863                                  
 10864                                  	; 16/12/2022
 10865                                  	; 08/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 10866                                  	; 09/09/2018
 10867 0000168E BF[6C0D]                	mov	di,FAKE_STACK_2F 
 10868 00001691 BE[5A03]                	mov	si,DEVCALL
 10869                                  	;
 10870 00001694 83F800                  	CMP	AX,0		; save packet
 10871 00001697 7402                    	JZ	short save_packet ; 16/12/2022
 10872                                  	;je	short set_seg
 10873                                  
 10874                                  	; MSDOS 6.0
 10875                                  restore_packet:
 10876                                  ;	MOV	SI,OFFSET DOSDATA:Packet_Temp	;source
 10877                                  ;	MOV	DI,OFFSET DOSDATA:DEVCALL	;destination
 10878                                  	; MSDOS 3.3
 10879                                  	;mov	si,FAKE_STACK_2F ; DOS_TEMP ; Packed_Temp 
 10880                                  	;mov	di,DEVCALL  ; 09/09/2018
 10881                                  	;
 10882                                  	;JMP	short set_seg
 10883                                  
 10884                                  	; 16/12/2022	
 10885                                  	; 09/09/2018
 10886 00001699 87F7                    	xchg	si,di  ; DI = offset DEVCALL, SI = offset FAKE_STACK_2F
 10887                                  
 10888                                  ; 16/12/2022
 10889                                  %if 0
 10890                                  	; 08/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 10891                                  	cmp	ax,0		; save packet
 10892                                  	jz	short save_packet
 10893                                  	mov	si,FAKE_STACK_2F ; 07/12/2022
 10894                                  	mov	di,DEVCALL 
 10895                                  	jmp	short set_seg
 10896                                  
 10897                                  	; MSDOS 6.0
 10898                                  save_packet:
 10899                                  ;	MOV	DI,OFFSET DOSDATA:Packet_Temp	;destination
 10900                                  ;	MOV	SI,OFFSET DOSDATA:DEVCALL	;source
 10901                                  	; 09/09/2018
 10902                                  	; MSDOS 3.3
 10903                                  	;mov	di,FAKE_STACK_2F ; DOS_TEMP ; Packed_Temp 
 10904                                  	;mov	si,DEVCALL ; 09/09/2018
 10905                                  
 10906                                  	; 07/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 10907                                  	mov	di,FAKE_STACK_2F ; DOS_TEMP ; Packed_Temp 
 10908                                  	mov	si,DEVCALL
 10909                                  %endif
 10910                                  
 10911                                  ; 16/12/2022
 10912                                  save_packet:
 10913                                  ;set_seg:
 10914                                  	; MSDOS 3.3
 10915                                  	;mov	ax,cs
 10916                                  
 10917                                  	; MSDOS 6.0
 10918 0000169B 8CD0                    	MOV	AX,SS		; set DS,ES to DOSDATA	
 10919                                  
 10920 0000169D 8ED8                    	MOV	DS,AX
 10921 0000169F 8EC0                    	MOV	ES,AX
 10922 000016A1 B90B00                  	MOV	CX,11		; 11 words to move
 10923 000016A4 F3A5                    	REP	MOVSW
 10924                                  
 10925 000016A6 5F                      	POP	DI
 10926 000016A7 5E                      	POP	SI
 10927 000016A8 07                      	POP	ES
 10928 000016A9 1F                      	POP	DS
 10929 000016AA C3                      	retn
 10930                                  
 10931                                  ;============================================================================
 10932                                  ; CPMIO2.ASM, MSDOS 6.0, 1991
 10933                                  ;============================================================================
 10934                                  ; 20/07/2018 - Retro DOS v3.0
 10935                                  ; 01/05/2019 - Retro DOS v4.0
 10936                                  
 10937                                  ;hkn; 	All the variables use SS override or DS. Therefore there is
 10938                                  ;hkn;	no need to specifically set up any seg regs unless SS assumption is
 10939                                  ;hkn;	not valid. 
 10940                                  
 10941                                  ;
 10942                                  ;----------------------------------------------------------------------------
 10943                                  ;
 10944                                  ;**	$STD_CON_INPUT - System Call 1
 10945                                  ;
 10946                                  ;	Input character from console, echo
 10947                                  ;
 10948                                  ;	ENTRY	none
 10949                                  ;	EXIT	(al) = character
 10950                                  ;	USES	ALL
 10951                                  ;
 10952                                  ;----------------------------------------------------------------------------
 10953                                  ;
 10954                                  
 10955                                  _$STD_CON_INPUT:	;System call 1
 10956                                  	
 10957 000016AB E814FD                  	CALL	_$STD_CON_INPUT_NO_ECHO
 10958 000016AE 50                      	PUSH	AX
 10959 000016AF E80400                  	CALL	OUTT
 10960 000016B2 58                      	POP	AX
 10961                                  CON_INPUT_RETN:	
 10962 000016B3 C3                      	RETN
 10963                                  
 10964                                  ;
 10965                                  ;----------------------------------------------------------------------------
 10966                                  ;
 10967                                  ;**	$STD_CON_OUTPUT - System Call 2
 10968                                  ;
 10969                                  ;	Output character to console
 10970                                  ;
 10971                                  ;	ENTRY	(dl) = character
 10972                                  ;	EXIT	none
 10973                                  ;	USES	all
 10974                                  ;
 10975                                  ;----------------------------------------------------------------------------
 10976                                  ;
 10977                                  
 10978                                  ; DOSCODE:54E9h (MSDOS 6.21, MSDOS.SYS)
 10979                                  
 10980                                  ; 08/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 10981                                  ; DOSCODE:54D5h (MSDOS 5.0, MSDOS.SYS)
 10982                                  
 10983                                  _$STD_CON_OUTPUT:	;System call 2
 10984                                  
 10985 000016B4 88D0                    	MOV	AL,DL
 10986                                  OUTT:
 10987 000016B6 3C20                    	CMP	AL,20H ; " "
 10988 000016B8 725C                    	JB	SHORT CTRLOUT
 10989 000016BA 3C7F                    	CMP	AL,c_DEL ; 7Fh
 10990 000016BC 7405                    	JZ	SHORT OUTCH
 10991                                  OUTCHA:	
 10992                                  	;INC	BYTE PTR [CARPOS]
 10993 000016BE 36FE06[F901]            	INC	BYTE [SS:CARPOS]
 10994                                  OUTCH:
 10995 000016C3 1E                      	PUSH	DS
 10996 000016C4 56                      	PUSH	SI
 10997                                  	;INC	BYTE PTR [CHARCO]		;invoke  statchk...
 10998                                  	;AND	BYTE PTR [CHARCO],00111111B	;AN000; every 64th char
 10999 000016C5 36FE06[0003]            	INC	BYTE [SS:CHARCO]	
 11000                                  	;AND	BYTE [SS:CHARCO],00111111B
 11001                                  	; 01/05/2019 - Retro DOS v4.0
 11002 000016CA 368026[0003]3F          	and	byte [SS:CHARCO],3Fh
 11003 000016D0 7505                    	JNZ	SHORT OUTSKIP
 11004                                  
 11005 000016D2 50                      	PUSH	AX
 11006 000016D3 E8703B                  	CALL	STATCHK
 11007 000016D6 58                      	POP	AX
 11008                                  OUTSKIP:
 11009 000016D7 E85FFF                  	CALL	RAWOUT				;output the character
 11010                                  
 11011 000016DA 5E                      	POP	SI
 11012 000016DB 1F                      	POP	DS
 11013                                  
 11014                                  	;TEST	BYTE PTR [PFLAG],-1
 11015                                  	;retz
 11016 000016DC 36F606[FE02]FF          	TEST	BYTE [SS:PFLAG],0FFh
 11017 000016E2 74CF                    	JZ	SHORT CON_INPUT_RETN
 11018                                  
 11019 000016E4 53                      	PUSH	BX
 11020 000016E5 1E                      	PUSH	DS
 11021 000016E6 56                      	PUSH	SI
 11022 000016E7 BB0100                  	MOV	BX,1
 11023                                  	; 20/07/2018 - Retro DOS v3.0
 11024                                  	; MSDOS 3.3
 11025                                  	; MSDOS 6.0 (CPMIO2.ASM)
 11026 000016EA E8F21F                  	CALL	GET_IO_SFT		;hkn; GET_IO_SFT will set up DS:SI 
 11027                                  					;hkn; to sft entry
 11028 000016ED 7224                    	JC	SHORT TRIPOPJ
 11029                                  
 11030                                  	; 01/05/2019 - Retro DOS v4.0
 11031                                  
 11032                                  	;mov	bx,[si+5]
 11033 000016EF 8B5C05                  	MOV	BX,[SI+SF_ENTRY.sf_flags]
 11034                                  	;test	bx,8000h
 11035                                  	;TEST	BX,sf_isnet	; 8000h		; output to NET?
 11036 000016F2 F6C780                  	test	bh,(sf_isnet>>8) ; 80h
 11037 000016F5 751C                    	JNZ	short TRIPOPJ 			; if so, no echo
 11038                                  	;;test	bx,80h
 11039                                  	;TEST	BX,devid_device 		; output to file?
 11040 000016F7 F6C380                  	test	bl,devid_device ; 80h
 11041 000016FA 7417                    	JZ	SHORT TRIPOPJ 			; if so, no echo
 11042                                  	; 14/03/2018
 11043                                  	;call	GET_IO_FCB	 	; IBMDOS.COM, MSDOS 2.11
 11044                                  	;jc	short TRIPOPJ
 11045                                  	; MSDOS 2.11
 11046                                  	;test	byte [SI+18H], 80h
 11047                                  	;jz	short TRIPOPJ
 11048 000016FC BB0400                  	MOV	BX,4
 11049 000016FF E8DD1F                  	CALL	GET_IO_SFT
 11050 00001702 720F                    	JC	SHORT TRIPOPJ
 11051                                  	;;test	word [si+5], 800h
 11052                                  	;TEST	word [SI+SF_ENTRY.sf_flags],sf_net_spool ; 800H
 11053                                  	;test	byte [si+6],8 ; 08/11/2022
 11054 00001704 F6440608                	test	byte [SI+SF_ENTRY.sf_flags+1],(sf_net_spool>>8) ; 8 
 11055                                  						; StdPrn redirected?
 11056                                  	;;JZ	SHORT LISSTRT2J			; No, OK to echo
 11057                                  	;jz	LISSTRT2 ; 10/08/2018 
 11058                                  	; 16/12/2022
 11059 00001708 7503                    	jnz	short outch1
 11060 0000170A E98700                  	jmp	LISSTRT2
 11061                                  	; 08/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 11062                                  	;jz	short LISSTRT2J
 11063                                  outch1:
 11064                                  	;MOV	BYTE [PFLAG],0			
 11065 0000170D 36C606[FE02]00          	MOV	BYTE [SS:PFLAG],0		; If a spool, NEVER echo
 11066                                  	; MSDOS 2.11
 11067                                  	;mov	bx,4
 11068                                  	;jmp	short LISSTRT2
 11069                                  	
 11070                                  TRIPOPJ:
 11071                                  	; 20/07/2018
 11072 00001713 E98100                  	JMP	TRIPOP
 11073                                  
 11074                                  	; 16/12/2022
 11075                                  	; 08/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 11076                                  ;LISSTRT2J:
 11077                                  ;	JMP	LISSTRT2
 11078                                  
 11079                                  CTRLOUT:
 11080 00001716 3C0D                    	CMP	AL,c_CR ; 0Dh
 11081 00001718 7420                    	JZ	SHORT ZERPOS
 11082 0000171A 3C08                    	CMP	AL,c_BS ; 8
 11083 0000171C 7424                    	JZ	SHORT BACKPOS
 11084 0000171E 3C09                    	CMP	AL,c_HT ; 9
 11085 00001720 75A1                    	JNZ	SHORT OUTCH
 11086                                  	;MOV	AL,[CARPOS]
 11087 00001722 36A0[F901]              	MOV	AL,[SS:CARPOS]
 11088 00001726 0CF8                    	OR	AL,0F8H
 11089 00001728 F6D8                    	NEG	AL
 11090                                  TAB:
 11091 0000172A 51                      	PUSH	CX
 11092 0000172B 88C1                    	MOV	CL,AL
 11093 0000172D B500                    	MOV	CH,0
 11094 0000172F E307                    	JCXZ	POPTAB
 11095                                  TABLP:
 11096 00001731 B020                    	MOV	AL," "
 11097 00001733 E880FF                  	CALL	OUTT
 11098 00001736 E2F9                    	LOOP	TABLP
 11099                                  POPTAB:
 11100 00001738 59                      	POP	CX
 11101                                  
 11102 00001739 C3                      	RETN
 11103                                  
 11104                                  ZERPOS:
 11105                                  	;MOV	BYTE PTR [CARPOS],0
 11106 0000173A 36C606[F901]00          	MOV	BYTE [SS:CARPOS],0
 11107                                  	; 10/08/2018
 11108 00001740 EB81                    	JMP	short OUTCH ; 04/05/2019
 11109                                  	
 11110                                  	; 18/12/2022
 11111                                  ;OUTJ:	
 11112                                  	;JMP	OUTT
 11113                                  
 11114                                  BACKPOS:
 11115                                  	;DEC	BYTE PTR [CARPOS]
 11116 00001742 36FE0E[F901]            	DEC	BYTE [SS:CARPOS]
 11117 00001747 E979FF                  	JMP	OUTCH
 11118                                  
 11119                                  BUFOUT:
 11120 0000174A 3C20                    	CMP	AL," "
 11121 0000174C 7315                    	JAE	SHORT OUTJ		;Normal char
 11122 0000174E 3C09                    	CMP	AL,9
 11123 00001750 7411                    	JZ	SHORT OUTJ		;OUT knows how to expand tabs
 11124                                  	;DOS 3.3  7/14/86
 11125 00001752 3C15                    	CMP	AL,"U"-"@" ; 15h	; turn ^U to section symbol
 11126 00001754 740D                    	JZ	short CTRLU
 11127 00001756 3C14                    	CMP	AL,"T"-"@" ; 14h	; turn ^T to paragraph symbol
 11128 00001758 7409                    	JZ	short CTRLU
 11129                                  NOT_CTRLU:
 11130                                  	;DOS 3.3  7/14/86
 11131 0000175A 50                      	PUSH	AX
 11132 0000175B B05E                    	MOV	AL,"^"
 11133 0000175D E856FF                  	CALL	OUTT		;Print '^' before control chars
 11134 00001760 58                      	POP	AX
 11135 00001761 0C40                    	OR	AL,40H		;Turn it into Upper case mate
 11136                                  CTRLU:
 11137                                  	;CALL	OUTT
 11138                                  	; 18/12/2022
 11139                                  OUTJ:
 11140 00001763 E950FF                  	jmp	OUTT
 11141                                  ;BUFOUT_RETN:
 11142                                  	;RETN
 11143                                  
 11144                                  ;
 11145                                  ;----------------------------------------------------------------------------
 11146                                  ;
 11147                                  ;**	$STD_AUX_INPUT - System Call 3
 11148                                  ;
 11149                                  ;	$STD_AUX_INPUT returns a character from Aux Input
 11150                                  ;
 11151                                  ;	ENTRY	none
 11152                                  ;	EXIT	(al) = character
 11153                                  ;	USES	all
 11154                                  ;
 11155                                  ;----------------------------------------------------------------------------
 11156                                  ;
 11157                                  
 11158                                  	; 08/11/2022 Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 11159                                  
 11160                                  _$STD_AUX_INPUT:	;System call 3
 11161                                  
 11162 00001766 E8DD3A                  	CALL	STATCHK
 11163 00001769 BB0300                  	MOV	BX,3
 11164 0000176C E8701F                  	CALL	GET_IO_SFT	; 20/07/2018 - MSDOS 3.3 (MSDOS 6.0)
 11165                                  	;CALL	GET_IO_FCB	; 14/03/2018 - MSDOS 2.11
 11166                                  	;retc
 11167                                  	; 16/12/2022
 11168                                  	; 08/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 11169                                  	;JC	SHORT BUFOUT_RETN
 11170                                  	;JMP	SHORT TAISTRT
 11171                                  	; 07/12/2022
 11172 0000176F 7304                    	jnc	SHORT TAISTRT
 11173 00001771 C3                      	retn	
 11174                                  
 11175                                  AUXILP:
 11176 00001772 E8A33A                  	CALL	SPOOLINT
 11177                                  TAISTRT:
 11178 00001775 B401                    	MOV	AH,1
 11179 00001777 E8D62D                  	CALL	IOFUNC
 11180 0000177A 74F6                    	JZ	SHORT AUXILP
 11181 0000177C 30E4                    	XOR	AH,AH
 11182                                  	; 16/12/2022
 11183                                  	;CALL	IOFUNC
 11184                                  	;RETN
 11185                                  	; 07/12/2022
 11186 0000177E E9CF2D                  	jmp	IOFUNC
 11187                                  
 11188                                  ;
 11189                                  ;----------------------------------------------------------------------------
 11190                                  ;
 11191                                  ;**	$STD_AUX_OUTPUT - Output character to AUX
 11192                                  ;
 11193                                  ;	ENTRY	(dl) = character
 11194                                  ;	EXIT	none
 11195                                  ;	USES	all
 11196                                  ;
 11197                                  ;----------------------------------------------------------------------------
 11198                                  ;
 11199                                  
 11200                                  _$STD_AUX_OUTPUT:	;System call 4
 11201                                  
 11202 00001781 53                      	PUSH	BX
 11203 00001782 BB0300                  	MOV	BX,3
 11204 00001785 EB04                    	JMP	SHORT SENDOUT
 11205                                  
 11206                                  ;
 11207                                  ;----------------------------------------------------------------------------
 11208                                  ;
 11209                                  ;**	$STD_PRINTER_OUTPUT - Output character to printer
 11210                                  ;
 11211                                  ;	ENTRY	(dl) = character
 11212                                  ;	EXIT	none
 11213                                  ;	USES	all
 11214                                  ;
 11215                                  ;----------------------------------------------------------------------------
 11216                                  ;
 11217                                  
 11218                                  _$STD_PRINTER_OUTPUT:	;System call 5
 11219                                  
 11220 00001787 53                      	PUSH	BX
 11221 00001788 BB0400                  	MOV	BX,4
 11222                                  
 11223                                  SENDOUT:
 11224 0000178B 88D0                    	MOV	AL,DL
 11225 0000178D 50                      	PUSH	AX
 11226 0000178E E8B53A                  	CALL	STATCHK
 11227 00001791 58                      	POP	AX
 11228 00001792 1E                      	PUSH	DS
 11229 00001793 56                      	PUSH	SI
 11230                                  LISSTRT2:
 11231 00001794 E8CDFE                  	CALL	RAWOUT2
 11232                                  TRIPOP:
 11233 00001797 5E                      	POP	SI
 11234 00001798 1F                      	POP	DS
 11235 00001799 5B                      	POP	BX
 11236                                  SCIS_RETN:	; 20/07/2018
 11237 0000179A C3                      	RETN
 11238                                  ;
 11239                                  ;----------------------------------------------------------------------------
 11240                                  ;
 11241                                  ;**	$STD_CON_INPUT_STATUS - System Call 11
 11242                                  ;
 11243                                  ;	Check console input status
 11244                                  ;
 11245                                  ;	ENTRY	none
 11246                                  ;	EXIT	AL = -1 character available, = 0 no character
 11247                                  ;	USES	all
 11248                                  ;
 11249                                  ;----------------------------------------------------------------------------
 11250                                  ;
 11251                                  
 11252                                  _$STD_CON_INPUT_STATUS:		;System call 11
 11253                                  
 11254 0000179B E8A83A                  	CALL	STATCHK
 11255 0000179E B000                    	MOV	AL,0		; no xor!!
 11256                                  	;retz
 11257 000017A0 74F8                    	JZ	SHORT SCIS_RETN ; 15/04/2018
 11258 000017A2 0CFF                    	OR	AL,-1
 11259                                  ;SCIS_RETN:
 11260 000017A4 C3                      	RETN
 11261                                  
 11262                                  ;
 11263                                  ;----------------------------------------------------------------------------
 11264                                  ;
 11265                                  ;**	$STD_CON_INPUT_FLUSH - System Call 12
 11266                                  ;
 11267                                  ;	Flush console input buffer and perform call in AL
 11268                                  ;
 11269                                  ;	ENTRY	(AL) = DOS function to be called after flush (1,6,7,8,10)
 11270                                  ;	EXIT	(al) = 0 iff (al) was not one of the supported fcns
 11271                                  ;		return arguments for the fcn supplied in (AL)
 11272                                  ;	USES	all
 11273                                  ;
 11274                                  ;----------------------------------------------------------------------------
 11275                                  ;
 11276                                  
 11277                                  _$STD_CON_INPUT_FLUSH:		;System call 12
 11278                                  
 11279 000017A5 50                      	PUSH	AX
 11280 000017A6 52                      	PUSH	DX
 11281 000017A7 31DB                    	XOR	BX,BX
 11282 000017A9 E8331F                  	CALL	GET_IO_SFT	; 20/07/2018 - MSDOS 3.3 (MSDOS 6.0)
 11283                                  	;CALL	GET_IO_FCB	; 14/03/2018 - MSDOS 2.11
 11284 000017AC 7205                    	JC	SHORT BADJFNCON
 11285 000017AE B404                    	MOV	AH,4
 11286 000017B0 E89D2D                  	CALL	IOFUNC
 11287                                  
 11288                                  BADJFNCON:
 11289 000017B3 5A                      	POP	DX
 11290 000017B4 58                      	POP	AX
 11291 000017B5 88C4                    	MOV	AH,AL
 11292 000017B7 3C01                    	CMP	AL,1
 11293 000017B9 7413                    	JZ	SHORT REDISPJ
 11294 000017BB 3C06                    	CMP	AL,6
 11295 000017BD 740F                    	JZ	SHORT REDISPJ
 11296 000017BF 3C07                    	CMP	AL,7
 11297 000017C1 740B                    	JZ	SHORT REDISPJ
 11298 000017C3 3C08                    	CMP	AL,8
 11299 000017C5 7407                    	JZ	SHORT REDISPJ
 11300 000017C7 3C0A                    	CMP	AL,10
 11301 000017C9 7403                    	JZ	SHORT REDISPJ
 11302 000017CB B000                    	MOV	AL,0
 11303 000017CD C3                      	RETN
 11304                                  
 11305                                  REDISPJ:
 11306 000017CE FA                      	CLI
 11307                                  	;transfer REDISP
 11308 000017CF E9BAEB                  	JMP	REDISP
 11309                                  
 11310                                  ;============================================================================
 11311                                  ; FCBIO.ASM, MSDOS 6.0, 1991
 11312                                  ;============================================================================
 11313                                  ; 20/07/2018 - Retro DOS v3.0
 11314                                  ; 17/05/2019 - Retro DOS v4.0
 11315                                  
 11316                                  ;**	FCBIO.ASM - Ancient 1.0 1.1 FCB system calls
 11317                                  ;
 11318                                  ;	$GET_FCB_POSITION
 11319                                  ;	$FCB_DELETE
 11320                                  ;	$GET_FCB_FILE_LENGTH
 11321                                  ;	$FCB_CLOSE
 11322                                  ;	$FCB_RENAME
 11323                                  ;	SaveFCBInfo
 11324                                  ;	ResetLRU
 11325                                  ;	SetOpenAge
 11326                                  ;	LRUFCB
 11327                                  ;	FCBRegen
 11328                                  ;	BlastSFT
 11329                                  ;	CheckFCB
 11330                                  ;	SFTFromFCB
 11331                                  ;	FCBHardErr
 11332                                  ;
 11333                                  ;	Revision history:
 11334                                  ;
 11335                                  ;		Created: ARR 4 April 1983"
 11336                                  ;			 MZ  6 June  1983 completion of functions
 11337                                  ;			 MZ 15 Dec   1983 Brain damaged programs close FCBs multiple
 11338                                  ;					  times.  Change so successive closes work by
 11339                                  ;					  always returning OK.	Also, detect I/O to
 11340                                  ;					  already closed FCB and return EOF.
 11341                                  ;			 MZ 16 Jan   1984 More braindamage.  Need to separate info
 11342                                  ;					  out of sft into FCB for reconnection
 11343                                  ;
 11344                                  ;		A000	 version 4.00  Jan. 1988
 11345                                  
 11346                                  ;Break <$Get_FCB_Position - set random record fields to current pos>
 11347                                  ;----------------------------------------------------------------------------
 11348                                  ;
 11349                                  ;   $Get_FCB_Position - look at an FCB, retrieve the current position from the
 11350                                  ;	extent and next record field and set the random record field to point
 11351                                  ;	to that record
 11352                                  ;
 11353                                  ;   Inputs:	DS:DX point to a possible extended FCB
 11354                                  ;   Outputs:	The random record field of the FCB is set to the current record
 11355                                  ;   Registers modified: all
 11356                                  ;
 11357                                  ;----------------------------------------------------------------------------
 11358                                  ;
 11359                                  
 11360                                  _$GET_FCB_POSITION:
 11361 000017D2 E8F204                  	call	GetExtended		; point to FCB
 11362 000017D5 E8C204                  	call	GetExtent		; DX:AX is current record
 11363                                  	;mov	[si+21h],ax
 11364 000017D8 894421                  	MOV	[SI+SYS_FCB.RR],AX 	; drop in low order piece
 11365                                  	;mov	[si+23h],dl
 11366 000017DB 885423                  	MOV	[SI+SYS_FCB.RR+2],DL	; drop in high order piece
 11367                                  	;cmp	word [si+0Eh],64
 11368 000017DE 837C0E40                	CMP	word [SI+SYS_FCB.RECSIZ],64
 11369 000017E2 7303                    	JAE	short GetFCBBye
 11370                                  	;mov	[si+24h],dh
 11371 000017E4 887424                  	MOV	[SI+SYS_FCB.RR+2+1],DH	; Set 4th byte only if record size < 64
 11372                                  GoodPath:	; 16/12/2022
 11373                                  GetFCBBye:
 11374 000017E7 E97BEE                  	jmp	FCB_RET_OK
 11375                                  
 11376                                  ;Break <$FCB_Delete - remove several files that match the input FCB>
 11377                                  ;----------------------------------------------------------------------------
 11378                                  ;
 11379                                  ;**	$FCB_Delete - Delete from FCB Template
 11380                                  ;
 11381                                  ;	given an FCB, remove all directory entries in the current
 11382                                  ;	directory that have names that match the FCB's ?  marks.
 11383                                  ;
 11384                                  ;	ENTRY	(DS:DX) = address of FCB
 11385                                  ;	EXIT	entries matching the FCB are deleted
 11386                                  ;		(al) = ff iff no entries were deleted
 11387                                  ;	USES	all
 11388                                  ;
 11389                                  ;----------------------------------------------------------------------------
 11390                                  ;
 11391                                  	; 08/11/2022 Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 11392                                  
 11393                                  _$FCB_DELETE:		; System call 19
 11394                                  					; OpenBuf is in DOSDATA
 11395 000017EA BF[BE03]                	MOV	DI,OPENBUF 		; appropriate place 
 11396                                  
 11397 000017ED E81C54                  	call	TransFCB		; convert FCB to path
 11398 000017F0 7207                    	JC	short BadPath 		; signal no deletions
 11399                                  
 11400 000017F2 16                      	push	SS
 11401 000017F3 1F                      	pop	DS			; SS is DOSDATA
 11402                                  
 11403 000017F4 E89D0D                  	call	DOS_DELETE		; wham
 11404                                  	;JC	short BadPath
 11405                                  	; 16/12/2022
 11406 000017F7 73EE                    	jnc 	short GoodPath
 11407                                  ;GoodPath:
 11408                                  ;	;jmp	FCB_RET_OK		; do a good return
 11409                                  ;	; 08/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 11410                                  ;	jmp	short GetFCBBye
 11411                                  
 11412                                  BadPath:
 11413                                  	; Error code is in AX
 11414                                  
 11415 000017F9 E96CEE                  	jmp	FCB_RET_ERR		; let someone else signal the error
 11416                                  
 11417                                  ;Break <$Get_FCB_File_Length - return the length of a file>
 11418                                  ;----------------------------------------------------------------------------
 11419                                  ;
 11420                                  ;   $Get_FCB_File_Length - set the random record field to the length of the
 11421                                  ;	file in records (rounded up if partial).
 11422                                  ;
 11423                                  ;   Inputs:	DS:DX - point to a possible extended FCB
 11424                                  ;   Outputs:	Random record field updated to reflect the number of records
 11425                                  ;   Registers modified: all
 11426                                  ;
 11427                                  ;----------------------------------------------------------------------------
 11428                                  ;
 11429                                  
 11430                                  _$GET_FCB_FILE_LENGTH:
 11431                                  
 11432 000017FC E8C804                  	call	GetExtended		; get real FCB pointer
 11433                                  					; DX points to Input FCB
 11434                                  
 11435                                  					; OpenBuf is in DOSDATA
 11436 000017FF BF[BE03]                	MOV	DI,OPENBUF		; appropriate buffer
 11437                                  
 11438 00001802 1E                      	push	ds			; save pointer to true FCB
 11439 00001803 56                      	push	si
 11440 00001804 E80554                  	call	TransFCB		; Trans name DS:DX, sets SATTRIB
 11441 00001807 5E                      	pop	si
 11442 00001808 1F                      	pop	ds
 11443 00001809 72EE                    	JC	short BadPath
 11444 0000180B 1E                      	push	ds			; save pointer
 11445 0000180C 56                      	push	si
 11446 0000180D 16                      	push	ss		
 11447 0000180E 1F                      	pop	ds
 11448 0000180F E89211                  	call	GET_FILE_INFO		; grab the info
 11449 00001812 5E                      	pop	si			; get pointer back
 11450 00001813 1F                      	pop	ds
 11451 00001814 72E3                    	JC	short BadPath 		; invalid something
 11452 00001816 89DA                    	MOV	DX,BX			; get high order size
 11453 00001818 89F8                    	MOV	AX,DI			; get low order size
 11454                                  	;mov	bx,[si+0Eh]
 11455 0000181A 8B5C0E                  	MOV	BX,[SI+SYS_FCB.RECSIZ]	; get his record size
 11456 0000181D 09DB                    	OR	BX,BX			; empty record => 0 size for file
 11457 0000181F 7503                    	JNZ	short GetSize 		; not empty
 11458 00001821 BB8000                  	MOV	BX,128
 11459                                  GetSize:
 11460 00001824 89C7                    	MOV	DI,AX			; save low order word
 11461 00001826 89D0                    	MOV	AX,DX			; move high order for divide
 11462 00001828 31D2                    	XOR	DX,DX			; clear out high
 11463 0000182A F7F3                    	DIV	BX			; wham
 11464 0000182C 50                      	PUSH	AX			; save dividend
 11465 0000182D 89F8                    	MOV	AX,DI			; get low order piece
 11466 0000182F F7F3                    	DIV	BX			; wham
 11467 00001831 89D1                    	MOV	CX,DX			; save remainder
 11468 00001833 5A                      	POP	DX			; get high order dividend
 11469 00001834 E306                    	JCXZ	LengthStore		; no roundup
 11470 00001836 83C001                  	ADD	AX,1
 11471 00001839 83D200                  	ADC	DX,0			; 32-bit increment
 11472                                  LengthStore:
 11473                                  	;mov	[si+21h],ax
 11474 0000183C 894421                  	MOV	[SI+SYS_FCB.RR],AX	; store low order
 11475                                  	;mov	[si+23h],dl
 11476 0000183F 885423                  	MOV	[SI+SYS_FCB.RR+2],DL	; store high order
 11477 00001842 08F6                    	OR	DH,DH
 11478 00001844 74A1                    	JZ	short GoodPath		; not storing insignificant zero
 11479                                  	;mov	[si+24h],dh
 11480 00001846 887424                  	MOV	[SI+SYS_FCB.RR+3],DH	; save that high piece
 11481                                  	; 16/12/2022
 11482                                  GoodRet:
 11483                                  	;jmp	FCB_RET_OK
 11484 00001849 EB9C                    	jmp	short GoodPath
 11485                                  
 11486                                  ;Break <$FCB_Close - close a file>
 11487                                  ;----------------------------------------------------------------------------
 11488                                  ;
 11489                                  ;   $FCB_Close - given an FCB, look up the SFN and close it.  Do not free it
 11490                                  ;	as the FCB may be used for further I/O
 11491                                  ;
 11492                                  ;   Inputs:	DS:DX point to FCB
 11493                                  ;   Outputs:	AL = FF if file was not found on disk
 11494                                  ;   Registers modified: all
 11495                                  ;
 11496                                  ;----------------------------------------------------------------------------
 11497                                  ;
 11498                                  
 11499                                  _$FCB_CLOSE:		; System call 16
 11500                                  
 11501 0000184B 30C0                    	XOR	AL,AL			; default search attributes
 11502 0000184D E87704                  	call	GetExtended		; DS:SI point to real FCB
 11503 00001850 7403                    	JZ	short NoAttr		; not extended
 11504 00001852 8A44FF                  	MOV	AL,[SI-1]		; get attributes
 11505                                  NoAttr:
 11506                                  					; SS override
 11507 00001855 36A2[6B05]              	MOV	[SS:ATTRIB],AL		; stash away found attributes
 11508 00001859 E8D903                  	call	SFTFromFCB
 11509 0000185C 72EB                    	JC	short GoodRet 		; MZ 16 Jan Assume death
 11510                                  
 11511                                  	; If the sharer is present, then the SFT is not regenable. Thus, 
 11512                                  	; there is no need to set the SFT's attribute.
 11513                                  
 11514                                  	;;; 9/8/86 F.C. save SFT attribute and restore it back when close is 
 11515                                  	;;; done
 11516                                  
 11517                                  	;mov	al,[es:di+4]
 11518 0000185E 268A4504                	MOV	AL,[ES:DI+SF_ENTRY.sf_attr]
 11519 00001862 30E4                    	XOR	AH,AH
 11520 00001864 50                      	PUSH	AX
 11521                                  
 11522                                  	;;; 9/8/86 F.C. save SFT attribute and restore it back when close is 
 11523                                  	;;; done
 11524                                  
 11525 00001865 E8D15B                  	call	CheckShare
 11526 00001868 7508                    	JNZ	short NoStash
 11527 0000186A 36A0[6B05]              	MOV	AL,[SS:ATTRIB]
 11528                                  	;mov	[es:di+4],al
 11529 0000186E 26884504                	MOV	[ES:DI+SF_ENTRY.sf_attr],AL ; attempted attribute for close
 11530                                  NoStash:
 11531                                  	;mov	ax,[si+14h]
 11532 00001872 8B4414                  	MOV	AX,[SI+SYS_FCB.FDATE] ; move in the time and date
 11533                                  	;mov	[es:di+0Fh],ax
 11534 00001875 2689450F                	MOV	[ES:DI+SF_ENTRY.sf_date],AX
 11535                                  	;mov	ax,[si+16h]
 11536 00001879 8B4416                  	MOV	AX,[SI+SYS_FCB.FTIME]
 11537                                  	;mov	[es:di+0Dh],ax
 11538 0000187C 2689450D                	MOV	[ES:DI+SF_ENTRY.sf_time],AX
 11539                                  	;mov	ax,[si+10h]
 11540 00001880 8B4410                  	MOV	AX,[SI+SYS_FCB.FILSIZ]
 11541                                  	;mov	[es:di+11h],ax
 11542 00001883 26894511                	MOV	[ES:DI+SF_ENTRY.sf_size],AX
 11543                                  	;mov	ax,[si+12h]
 11544 00001887 8B4412                  	MOV	AX,[SI+SYS_FCB.FILSIZ+2]
 11545                                  	;mov	[es:di+13h],ax
 11546 0000188A 26894513                	MOV	[ES:DI+SF_ENTRY.sf_size+2],AX
 11547                                  	;or	word [es:di+5],4000h
 11548                                  	; 17/12/2022
 11549 0000188E 26804D0640              	or	byte [ES:DI+SF_ENTRY.sf_flags+1],(sf_close_nodate>>8) ; 40h
 11550                                  	;OR	word [ES:DI+SF_ENTRY.sf_flags],sf_close_nodate
 11551 00001893 16                      	push	ss
 11552 00001894 1F                      	pop	ds
 11553 00001895 E80817                  	call	DOS_CLOSE	; wham
 11554 00001898 C43E[9E05]              	LES	DI,[THISSFT]
 11555                                  
 11556                                  	;;; 9/8/86 F.C. restore SFT attribute
 11557 0000189C 59                      	POP	CX
 11558                                  	;mov	[es:di+4],cl
 11559 0000189D 26884D04                	MOV	[ES:DI+SF_ENTRY.sf_attr],CL
 11560                                  	;;; 9/8/86 F.C. restore SFT attribute
 11561                                  
 11562 000018A1 9C                      	PUSHF
 11563                                  	;test	word [es:di],0FFFFh
 11564                                  	;cmp	word [ES:DI+SF_ENTRY.sf_ref_count],0
 11565                                  				; zero ref count gets blasted
 11566 000018A2 26833D00                	cmp	word [ES:DI],0
 11567 000018A6 7507                    	jnz     short CloseOK
 11568 000018A8 50                      	PUSH	AX
 11569 000018A9 B04D                    	MOV	AL,'M'
 11570 000018AB E8FC02                  	call	BlastSFT
 11571 000018AE 58                      	POP	AX
 11572                                  CloseOK:
 11573 000018AF 9D                      	POPF
 11574 000018B0 7397                    	JNC	short GoodRet
 11575                                  	;cmp	al,6
 11576 000018B2 3C06                    	CMP	AL,error_invalid_handle
 11577 000018B4 7493                    	JZ	short GoodRet
 11578                                  	;mov	al,2
 11579 000018B6 B002                    	MOV	AL,error_file_not_found
 11580                                  fren90:
 11581                                  	; 16/12/2022
 11582                                  fcb_close_err:
 11583 000018B8 E9ADED                  	jmp	FCB_RET_ERR
 11584                                  
 11585                                  ;
 11586                                  ;----------------------------------------------------------------------------
 11587                                  ;
 11588                                  ;**	$FCB_Rename - Rename a File
 11589                                  ;
 11590                                  ;	$FCB_Rename - rename a file in place within a directory. Renames
 11591                                  ;	multiple files copying from the meta characters.
 11592                                  ;
 11593                                  ;	ENTRY	DS:DX point to an FCB. The normal name field is the source
 11594                                  ;		    name of the files to be renamed. Starting at offset 11h
 11595                                  ;		    in the FCB is the destination name.
 11596                                  ;	EXIT	AL = 0 -> no error occurred and all files were renamed
 11597                                  ;		AL = FF -> some files may have been renamed but:
 11598                                  ;			rename to existing file or source file not found
 11599                                  ;	USES	ALL
 11600                                  ;
 11601                                  ;----------------------------------------------------------------------------
 11602                                  ;
 11603                                  	; 08/11/2022 Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 11604                                  
 11605                                  _$FCB_RENAME:		; System call 23
 11606                                  
 11607 000018BB E80904                  	call	GetExtended		; get pointer to real FCB
 11608 000018BE 52                      	push	dx
 11609 000018BF 8A04                    	MOV	AL,[SI] 		; get drive byte
 11610 000018C1 83C610                  	ADD	SI,10h			; point to destination
 11611                                  
 11612                                  					; RenBuf is in DOSDATA
 11613 000018C4 BF[3E04]                	MOV	DI,RENBUF		; point to destination buffer
 11614 000018C7 FF34                    	push	word [SI]
 11615 000018C9 1E                      	push	ds
 11616 000018CA 57                      	push	di			; save source pointer for TransFCB
 11617 000018CB 8804                    	MOV	[SI],AL			; drop in real drive
 11618 000018CD 89F2                    	MOV	DX,SI			; let TransFCB know where the FCB is
 11619 000018CF E83A53                  	call	TransFCB		; munch this pathname
 11620 000018D2 5E                      	pop	si
 11621 000018D3 1F                      	pop	ds	
 11622 000018D4 8F04                    	pop	WORD [SI]		; get path back
 11623 000018D6 5A                      	pop	dx			; Original FCB pointer
 11624 000018D7 72DF                    	JC	short fren90		; bad path -> error
 11625                                  
 11626                                  					; SS override for WFP_Start & Ren_WFP
 11627 000018D9 368B36[B205]            	MOV	SI,[ss:WFP_START]	; get pointer
 11628 000018DE 368936[B405]            	MOV	[ss:REN_WFP],SI		; stash it
 11629                                  
 11630                                  					; OpenBuf is in DOSDATA
 11631 000018E3 BF[BE03]                	MOV	DI,OPENBUF		; appropriate spot
 11632 000018E6 E82353                  	call	TransFCB		; wham
 11633                                  					; NOTE that this call is pointing
 11634                                  					;  back to the ORIGINAL FCB so
 11635                                  					;  SATTRIB gets set correctly
 11636 000018E9 72CD                    	JC	short fren90		; error
 11637 000018EB E8840E                  	call	DOS_RENAME
 11638 000018EE 72C8                    	JC	short fren90
 11639                                  	; 16/12/2022
 11640 000018F0 E972ED                  	jmp	FCB_RET_OK
 11641                                  	
 11642                                  ;	Error -
 11643                                  ;
 11644                                  ;	(al) = error code
 11645                                  
 11646                                  	; 16/12/2022
 11647                                  ;fren90:	
 11648                                  ;	;jmp	FCB_RET_ERR
 11649                                  ;	; 08/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 11650                                  ;	jmp	short fcb_close_err
 11651                                  
 11652                                  ;Break <Misbehavior fixers>
 11653                                  ;
 11654                                  ;   FCBs suffer from several problems. First, they are maintained in the
 11655                                  ;   user's space so he may move them at will. Second, they have a small
 11656                                  ;   reserved area that may be used for system information. Third, there was
 11657                                  ;   never any "rules for behavior" for FCBs; there was no protocol for their
 11658                                  ;   usage.
 11659                                  ;
 11660                                  ;   This results in the following misbehavior:
 11661                                  ;
 11662                                  ;	infinite opens of the same file:
 11663                                  ;
 11664                                  ;	While (TRUE) {			While (TRUE) {
 11665                                  ;	    FCBOpen (FCB);		    FCBOpen (FCB);
 11666                                  ;	    Read (FCB); 		    Write (FCB);
 11667                                  ;	    }				    }
 11668                                  ;
 11669                                  ;	infinite opens of different files:
 11670                                  ;
 11671                                  ;	While (TRUE) {			While (TRUE) {
 11672                                  ;	    FCBOpen (FCB[i++]); 	    FCBOpen (FCB[i++]);
 11673                                  ;	    Read (FCB); 		    Write (FCB);
 11674                                  ;	    }				    }
 11675                                  ;
 11676                                  ;	multiple closes of the same file:
 11677                                  ;
 11678                                  ;	FCBOpen (FCB);
 11679                                  ;	while (TRUE)
 11680                                  ;	    FCBClose (FCB);
 11681                                  ;
 11682                                  ;	I/O after closing file:
 11683                                  ;
 11684                                  ;	FCBOpen (FCB);
 11685                                  ;	while (TRUE) {
 11686                                  ;	    FCBWrite (FCB);
 11687                                  ;	    FCBClose (FCB);
 11688                                  ;	    }
 11689                                  ;
 11690                                  ;   The following is am implementation of a methodology for emulating the
 11691                                  ;   above with the exception of I/O after close. We are NOT attempting to
 11692                                  ;   resolve that particular misbehavior. We will enforce correct behaviour in
 11693                                  ;   FCBs when they refer to a network file or when there is file sharing on
 11694                                  ;   the local machine.
 11695                                  ;
 11696                                  ;   The reserved fields of the FCB (10 bytes worth) is divided up into various
 11697                                  ;   structures depending on the file itself and the state of operations of the
 11698                                  ;   OS. The information contained in this reserved field is enough to
 11699                                  ;   regenerate the SFT for the local non-shared file. It is assumed that this
 11700                                  ;   regeneration procedure may be expensive. The SFT for the FCB is
 11701                                  ;   maintained in a LRU cache as the ONLY performance inprovement.
 11702                                  ;
 11703                                  ;   No regeneration of SFTs is attempted for network FCBs.
 11704                                  ;
 11705                                  ;   To regenerate the SFT for a local FCB, it is necessary to determine if the
 11706                                  ;   file sharer is working. If the file sharer is present then the SFT is not
 11707                                  ;   regenerated.
 11708                                  ;
 11709                                  ;   Finally, if there is no local sharing, the full name of the file is no
 11710                                  ;   longer available. We can make up for this by using the following
 11711                                  ;   information:
 11712                                  ;
 11713                                  ;	The Drive number (from the DPB).
 11714                                  ;	The physical sector of the directory that contains the entry.
 11715                                  ;	The relative position of the entry in the sector.
 11716                                  ;	The first cluster field.
 11717                                  ;	The last used SFT.
 11718                                  ;      OR In the case of a device FCB
 11719                                  ;	The low 6 bits of sf_flags (indicating device type)
 11720                                  ;	The pointer to the device header
 11721                                  ;
 11722                                  ;   We read in the particular directory sector and examine the indicated
 11723                                  ;   directory entry. If it matches, then we are kosher; otherwise, we fail.
 11724                                  ;
 11725                                  ;   Some key items need to be remembered:
 11726                                  ;
 11727                                  ;	Even though we are caching SFTs, they may contain useful sharing
 11728                                  ;	information. We enforce good behavior on the FCBs.
 11729                                  ;
 11730                                  ;	Network support must not treat FCBs as impacting the ref counts on
 11731                                  ;	open VCs. The VCs may be closed only at process termination.
 11732                                  ;
 11733                                  ;	If this is not an installed version of the DOS, file sharing will
 11734                                  ;	always be present.
 11735                                  ;
 11736                                  ;	We MUST always initialize lstclus to = firclus when regenerating a
 11737                                  ;	file. Otherwise we start allocating clusters up the wazoo.
 11738                                  ;
 11739                                  ;	Always initialize, during regeneration, the mode field to both isFCB
 11740                                  ;	and open_for_both. This is so the FCB code in the sharer can find the
 11741                                  ;	proper OI record.
 11742                                  ;
 11743                                  ;   The test bits are:
 11744                                  ;
 11745                                  ;	00 -> local file
 11746                                  ;	40 -> sharing local
 11747                                  ;	80 -> network
 11748                                  ;	C0 -> local device
 11749                                  
 11750                                  ;Break	<SaveFCBInfo - store pertinent information from an SFT into the FCB>
 11751                                  ;----------------------------------------------------------------------------
 11752                                  ;
 11753                                  ;   SaveFCBInfo - given an FCB and its associated SFT, copy the relevant
 11754                                  ;	pieces of information into the FCB to allow for subsequent
 11755                                  ;	regeneration. Poke LRU also.
 11756                                  ;
 11757                                  ;   Inputs:	ThisSFT points to a complete SFT.
 11758                                  ;		DS:SI point to the FCB (not an extended one)
 11759                                  ;   Outputs:	The relevant reserved fields in the FCB are filled in.
 11760                                  ;		DS:SI preserved
 11761                                  ;		ES:DI point to sft
 11762                                  ;   Registers modified: All
 11763                                  ;
 11764                                  ;
 11765                                  ;----------------------------------------------------------------------------
 11766                                  ;
 11767                                  
 11768                                  	; 08/11/2022 Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 11769                                  
 11770                                  SaveFCBInfo:
 11771                                  
 11772 000018F3 36C43E[9E05]            	LES	DI,[SS:THISSFT]		; SS override
 11773 000018F8 E8B1F9                  	call	IsSFTNet
 11774 000018FB 740B                    	JZ	short SaveLocal		; if not network then save local info
 11775                                  ;
 11776                                  ;----- In net support -----
 11777                                  ;
 11778                                  	; 17/05/2019 - Retro DOS v4.0
 11779                                  
 11780                                  	; MSDOS 3.3
 11781                                  	;;mov	ax,[es:di+1Dh]
 11782                                  	;mov	ax,[es:di+SF_ENTRY.sf_dirsec]
 11783                                  	;;mov	[si+1Ah],ax
 11784                                  	;mov	[si+fcb_net_handle],ax
 11785                                  	;push	es
 11786                                  	;push	di
 11787                                  	;;les	di,[es:di+19h]
 11788                                  	;LES	DI,[ES:DI+sf_netid]
 11789                                  	;;mov	[si+1Ch],di
 11790                                  	;MOV	[SI+fcb_netID],DI	; save net ID
 11791                                  	;;mov 	[si+1Eh],es
 11792                                  	;MOV	[SI+fcb_netID+2],ES
 11793                                  	;pop	di
 11794                                  	;pop	es
 11795                                  
 11796                                  	; MSDOS 6.0
 11797                                  	;mov	ax,[es:di+0Bh]
 11798 000018FD 268B450B                	MOV	AX,[ES:DI+sf_serial_ID] ;AN000;;IFS. save IFS ID
 11799                                  	;mov	[si+1Ch],ax
 11800 00001901 89441C                  	MOV	[SI+fcb_netID],ax	;AN000;;IFS.
 11801                                  	
 11802                                  	;mov	bl,80h
 11803 00001904 B380                    	MOV	BL,FCBNETWORK
 11804                                  ;
 11805                                  ;----- END In net support -----
 11806                                  ;
 11807 00001906 EB65                    	jmp	SHORT SaveSFN
 11808                                  
 11809                                  SaveLocal:
 11810                                  	;IF	Installed
 11811 00001908 E82E5B                  	call	CheckShare
 11812                                  	;JZ	short SaveNoShare	; no sharer
 11813                                  	;JMP	short SaveShare		; sharer present
 11814                                  	; 16/12/2022
 11815                                  	; 28/07/2019
 11816 0000190B 755B                    	jnz	short SaveShare
 11817                                  	; 08/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 11818                                  	;JZ	short SaveNoShare	; no sharer
 11819                                  	;JMP	short SaveShare		; sharer present
 11820                                  
 11821                                  SaveNoShare:
 11822                                  	;;test 	word [es:di+5],80h
 11823                                  	;TEST	word [ES:DI+SF_ENTRY.sf_flags],devid_device
 11824 0000190D 26F6450580              	test	byte [ES:DI+SF_ENTRY.sf_flags],devid_device ; 80h	
 11825 00001912 7542                    	JNZ	short SaveNoShareDev	; Device
 11826                                  
 11827                                  	; Save no sharing local file information
 11828                                  
 11829                                  	;;mov	ax,[es:di+1Dh]  ; MSDOS 3.3
 11830                                  	;mov	ax,[es:di+1Bh]  ; MSDOS 6.0
 11831 00001914 268B451B                	MOV	AX,[ES:DI+SF_ENTRY.sf_dirsec] ; get directory sector F.C.
 11832                                  	;mov	[si+1Dh],ax
 11833 00001918 89441D                  	MOV	[SI+fcb_nsl_dirsec],AX
 11834                                  
 11835                                  	; MSDOS 6.0
 11836                                  
 11837                                  	;SR; Store high byte of directory sector
 11838                                  	;mov	ax,[es:di+1Dh]
 11839 0000191B 268B451D                	mov	ax,[es:di+SF_ENTRY.sf_dirsec+2] ; get high word
 11840                                  	
 11841                                  	; SR;
 11842                                  	; We have to store the read-only and archive attributes of the file.
 11843                                  	; We extract it from the SFT and store it in the top two bits of the 
 11844                                  	; sector number ( sector number == 22 bits only )
 11845                                  
 11846                                  	;mov	bl,[es:di+4]
 11847 0000191F 268A5D04                	mov	bl,[es:di+SF_ENTRY.sf_attr]
 11848 00001923 88DF                    	mov	bh,bl
 11849 00001925 D0CB                    	ror	bl,1
 11850 00001927 D0E7                    	shl	bh,1
 11851 00001929 08FB                    	or	bl,bh
 11852 0000192B 80E3C0                  	and	bl,0C0h
 11853 0000192E 08D8                    	or	al,bl
 11854                                  	;mov	[si+18h],al ; 08/11/2022
 11855 00001930 884418                  	mov	[si+fcb_sfn],al	; sector number = 22 bits
 11856                                  
 11857                                  	; MSDOS 6.0 (& MSDOS 3.3)
 11858                                  	;mov	al,[es:di+1Fh]
 11859 00001933 268A451F                	MOV	AL,[ES:DI+SF_ENTRY.sf_dirpos] ; location in sector
 11860                                  	;mov	[si+1Fh],al
 11861 00001937 88441F                  	MOV	[SI+fcb_nsl_dirpos],AL
 11862                                  	;mov	ax,[es:di+0Bh]
 11863 0000193A 268B450B                	MOV	AX,[ES:DI+SF_ENTRY.sf_firclus] ; first cluster
 11864                                  	;mov	[si+1Bh],ax
 11865 0000193E 89441B                  	MOV	[SI+fcb_nsl_firclus],AX
 11866 00001941 B300                    	MOV	BL,0
 11867                                  
 11868                                  	; Create the bits field from the dirty/device bits of the flags word 
 11869                                  	; and the mode byte
 11870                                  
 11871                                  SetFCBBits:
 11872                                  	;mov	ax,[es:di+5]
 11873 00001943 268B4505                	MOV	AX,[ES:DI+SF_ENTRY.sf_flags]
 11874 00001947 24C0                    	AND	AL,0C0h 		; mask off drive bits
 11875                                  	;or	al,[es:di+2]
 11876 00001949 260A4502                	OR	AL,[ES:DI+SF_ENTRY.sf_mode] ; stick in open mode
 11877                                  	;mov	[si+1Ah], al
 11878 0000194D 88441A                  	MOV	[SI+fcb_nsl_bits],AL	; save dirty info
 11879                                  
 11880                                  	; MSDOS 6.0
 11881                                  	
 11882                                  	; SR;
 11883                                  	; Check if we came here for local file or device. If for local file, 
 11884                                  	; skip setting of SFT index
 11885                                  	
 11886 00001950 08DB                    	or	bl,bl
 11887 00001952 742A                    	jz	short SaveNoSFN		; do not save SFN if local file
 11888                                  
 11889 00001954 EB17                    	JMP	short SaveSFN 		; go and save SFN
 11890                                  
 11891                                  	; Save no sharing local device information
 11892                                  
 11893                                  SaveNoShareDev:
 11894                                  	;mov	ax,[es:di+7]
 11895 00001956 268B4507                	MOV	AX,[ES:DI+SF_ENTRY.sf_devptr]
 11896                                  	;mov	[si+1Ah],ax
 11897 0000195A 89441A                  	MOV	[SI+fcb_nsld_drvptr],AX
 11898                                  	;mov	ax,[es:di+9]
 11899 0000195D 268B4509                	MOV	AX,[ES:DI+SF_ENTRY.sf_devptr+2]
 11900 00001961 89441C                  	MOV	[SI+fcb_nsld_drvptr+2],AX
 11901                                  	;mov	bl,40h
 11902 00001964 B340                    	MOV	BL,FCBDEVICE
 11903                                  	; 28/12/2022
 11904 00001966 EBDB                    	JMP	short SetFCBBits	; go and save SFN
 11905                                  
 11906                                  SaveShare:
 11907                                  	;ENDIF
 11908                                  
 11909                                  ;----- In share support -----
 11910                                  
 11911                                  	;call	far [ss:ShSave]
 11912 00001968 36FF1E[B800]            	Call	far [ss:JShare+(10*4)] ; 10 = ShSave ; SS Override
 11913                                  
 11914                                  ;----- end in share support -----
 11915                                  
 11916                                  	; 17/05/2019
 11917                                  
 11918                                  SaveSFN:
 11919                                  	;lea	ax,[di-6]
 11920 0000196D 8D45FA                  	LEA	AX,[DI-SFT.SFTable]
 11921                                  	
 11922                                  	; Adjust for offset to table.
 11923                                  	
 11924 00001970 362B06[4000]            	SUB	AX,[SS:SFTFCB]		; SS override for SftFCB
 11925                                  
 11926 00001975 53                      	push	bx			;bx = FCB type (net/Share or local)
 11927                                  	;;mov	bl,53 ; MSDOS 3.3
 11928                                  	;mov	bl,59 ; MSDOS 6.0
 11929 00001976 B33B                    	MOV	BL,SF_ENTRY.size
 11930 00001978 F6F3                    	DIV	BL
 11931                                  	;mov	[si+18h],al
 11932 0000197A 884418                  	MOV	[SI+fcb_sfn],AL		; last used SFN
 11933 0000197D 5B                      	pop	bx			;restore bx
 11934                                  
 11935                                  SaveNoSFN:
 11936                                  	;mov	ax,[es:di+5]
 11937 0000197E 268B4505                	MOV	AX,[ES:DI+SF_ENTRY.sf_flags]
 11938 00001982 243F                    	AND	AL,3Fh			; get real drive
 11939 00001984 08D8                    	OR	AL,BL
 11940                                  	;mov	[si+19h],al
 11941 00001986 884419                  	MOV	[SI+fcb_l_drive],AL
 11942                                  
 11943 00001989 36A1[1000]              	MOV	AX,[SS:FCBLRU]		; get lru count
 11944 0000198D 40                      	INC	AX
 11945                                  	;mov	[es:di+15h],ax
 11946 0000198E 26894515                	MOV	[ES:DI+sf_LRU],AX
 11947 00001992 7506                    	JNZ	short SimpleStuff
 11948                                  	
 11949                                  	; lru flag overflowed. Run through all FCB sfts and adjust:  
 11950                                  	; LRU < 8000H get set to 0. Others -= 8000h. This LRU = 8000h
 11951                                  	
 11952                                  	;mov	bx,15h
 11953 00001994 BB1500                  	MOV	BX,SF_ENTRY.sf_position
 11954 00001997 E80500                  	call	ResetLRU
 11955                                  
 11956                                  	; Set new LRU to AX
 11957                                  SimpleStuff:
 11958 0000199A 36A3[1000]              	MOV	[SS:FCBLRU],AX
 11959 0000199E C3                      	retn
 11960                                  
 11961                                  ;Break	<ResetLRU - reset overflowed lru counts>
 11962                                  ;----------------------------------------------------------------------------
 11963                                  ;
 11964                                  ;   ResetLRU - during lru updates, we may wrap at 64K. We must walk the
 11965                                  ;   entire set of SFTs and subtract 8000h from their lru counts and truncate
 11966                                  ;   at 0.
 11967                                  ;
 11968                                  ;   Inputs:	BX is offset into SFT field where lru firld is kept
 11969                                  ;		ES:DI point to SFT currently being updated
 11970                                  ;   Outputs:	All FCB SFTs have their lru fields truncated
 11971                                  ;		AX has 8000h
 11972                                  ;   Registers modified: none
 11973                                  ;
 11974                                  ;----------------------------------------------------------------------------
 11975                                  ;
 11976                                  
 11977                                  	; 17/05/2019 - Retro DOS v4.0
 11978                                  ResetLRU:
 11979                                  	; ResetLRU is only called from fcbio.asm. So SS can be assumed to be 
 11980                                  	; DOSDATA
 11981                                  
 11982 0000199F B80080                  	MOV	AX,8000h
 11983 000019A2 06                      	push	es
 11984 000019A3 57                      	push	di
 11985                                  	;LES	DI,[CS:SFTFCB]		; get pointer to head
 11986 000019A4 36C43E[4000]            	LES	DI,[SS:SFTFCB] ; MSDOS 6.0
 11987                                  	;mov	cx,[es:di+4]
 11988 000019A9 268B4D04                	MOV	CX,[ES:DI+SFT.SFCount]
 11989                                  	;lea	di,[di+6]
 11990 000019AD 8D7D06                  	LEA	DI,[DI+SFT.SFTable] 	; point at table
 11991                                  ovScan:
 11992 000019B0 262901                  	SUB	[ES:DI+BX],AX		; decrement lru count
 11993 000019B3 7703                    	JA	short ovLoop
 11994 000019B5 268901                  	MOV	[ES:DI+BX],AX		; truncate at 0
 11995                                  ovLoop:
 11996                                  	;;add	di,53	; MSDOS 3.3
 11997                                  	;add	di,59	; MSDOS 6.0	
 11998 000019B8 83C73B                  	ADD	DI,SF_ENTRY.size	; advance to next
 11999 000019BB E2F3                    	LOOP	ovScan
 12000 000019BD 5F                      	pop	di
 12001 000019BE 07                      	pop	es
 12002 000019BF 268901                  	MOV	[ES:DI+BX],AX
 12003 000019C2 C3                      	retn
 12004                                  
 12005                                  ;IF  0  ; We dont need this routine any more.
 12006                                  ;
 12007                                  ;Break	<SetOpenAge - update the open age of a SFT>
 12008                                  ;----------------------------------------------------------------------------
 12009                                  ;
 12010                                  ;   SetOpenAge - In order to maintain the first N open files in the FCB cache,
 12011                                  ;   we keep the 'open age' or an LRU count based on opens. We update the
 12012                                  ;   count here and fill in the appropriate field.
 12013                                  ;
 12014                                  ;   Inputs:	ES:DI point to SFT
 12015                                  ;   Outputs:	ES:DI has the open age field filled in.
 12016                                  ;		If open age has wraparound, we will have subtracted 8000h
 12017                                  ;		    from all open ages.
 12018                                  ;   Registers modified: AX
 12019                                  ;
 12020                                  ;----------------------------------------------------------------------------
 12021                                  ;
 12022                                  ;SetOpenAge:
 12023                                  ;	; 20/07/2018 - Retro DOS v3.0
 12024                                  ;	; MSDOS 3.3 - IBMDOS.COM, Offset 2597h 
 12025                                  ;	; (& MSDOS 6.0, FCBIO.ASM)
 12026                                  ;
 12027                                  ;	; SetOpenAge is called from fcbio2.asm. SS can be assumed to be valid.
 12028                                  ;
 12029                                  ;	MOV	AX,[CS:OpenLRU]	; SS override
 12030                                  ;	INC	AX
 12031                                  ;	;mov	[es:di+17h],ax
 12032                                  ;	MOV	[ES:DI+sf_OpenAge],AX
 12033                                  ;	JNZ	short SetDone
 12034                                  ;	;mov	bx,17h
 12035                                  ;	MOV	BX,SF_ENTRY.sf_position+2 ; mov bx,sf_OpenAge
 12036                                  ;	call	ResetLRU
 12037                                  ;SetDone:
 12038                                  ;	MOV	[CS:OpenLRU],AX
 12039                                  ;	retn
 12040                                  ;
 12041                                  ;ENDIF	; SetOpenAge no longer needed
 12042                                  
 12043                                  ; 21/07/2018 - Retro DOS v3.0
 12044                                  ; LRUFCB for MSDOS 6.0 !
 12045                                  
 12046                                  ;Break	<LRUFCB - perform LRU on FCB sfts>
 12047                                  ;----------------------------------------------------------------------------
 12048                                  ;
 12049                                  ;   LRUFCB - find LRU fcb in cache. Set ThisSFT and return it. We preserve
 12050                                  ;	the first keepcount sfts if they are network sfts or if sharing is
 12051                                  ;	loaded.  If carry is set then NO BLASTING is NECESSARY.
 12052                                  ;
 12053                                  ;   Inputs:	none
 12054                                  ;   Outputs:	ES:DI point to SFT
 12055                                  ;		ThisSFT points to SFT
 12056                                  ;		SFT is zeroed
 12057                                  ;		Carry set of closes failed
 12058                                  ;   Registers modified: none
 12059                                  ;
 12060                                  ;----------------------------------------------------------------------------
 12061                                  ;
 12062                                  ; MSDOS 6.0
 12063                                  ;IF 0	; rewritten this routine
 12064                                  ;
 12065                                  ;LRUFCB: ; MSDOS 3.3 - IBMDOS.COM (1987) - Offset 25ADh
 12066                                  ;	call	save_world
 12067                                  ;	
 12068                                  ; Find nth oldest NET/SHARE FCB. We want to find its age for the second scan
 12069                                  ; to find the lease recently used one that is younger than the open age.  We
 12070                                  ; operate be scanning the list n times finding the least age that is greater
 12071                                  ; or equal to the previous minimum age.
 12072                                  ;
 12073                                  ;   BP is the count of times we need to go through this loop.
 12074                                  ;   AX is the current acceptable minimum age to consider
 12075                                  ;
 12076                                  ;	mov	bp,[CS:KEEPCOUNT]	; k = keepcount;
 12077                                  ;	XOR	AX,AX			; low = 0;
 12078                                  ;
 12079                                  ; If we've scanned the table n times, then we are done.
 12080                                  ;
 12081                                  ;lru1:
 12082                                  ;	CMP	bp,0			; while (k--) {
 12083                                  ;	JZ	short lru75
 12084                                  ;	DEC	bp
 12085                                  ;
 12086                                  ; Set up for scan.
 12087                                  ;
 12088                                  ;   AX is the minimum age for consideration
 12089                                  ;   BX is the minimum age found during the scan
 12090                                  ;   SI is the position of the entry that corresponds to BX
 12091                                  ;
 12092                                  ;	MOV	BX,-1			;     min = 0xffff;
 12093                                  ;	MOV	si,BX			;     pos = 0xffff;
 12094                                  ;	LES	DI,[CS:SFTFCB]		;     for (CX=FCBCount; CX>0; CX--)
 12095                                  ;	;mov	cx,[es:di+4]
 12096                                  ;	MOV	CX,[ES:DI+SFT.SFCount]
 12097                                  ;	;lea	di,[di+6]
 12098                                  ;	LEA	DI,[DI+SFT.SFTable]
 12099                                  ;
 12100                                  ; Innermost loop.  If the current entry is free, then we are done.  Or, if the
 12101                                  ; current entry is busy (indicating a previous aborted allocation), then we
 12102                                  ; are done.  In both cases, we use the found entry.
 12103                                  ;
 12104                                  ;lru2:
 12105                                  ;	cmp	word [es:di],0
 12106                                  ;	;cmp	word [es:di+SF_ENTRY.sf_ref_count],0
 12107                                  ;	jz	short lru25
 12108                                  ;	;cmp	word [es:di],-1
 12109                                  ;	;cmp	word [es:di+SFT_ENTRY.sf_ref_count],sf_busy
 12110                                  ;	cmp	word [es:di],sf_busy
 12111                                  ;	jnz	short lru3
 12112                                  ;
 12113                                  ; The entry is usable without further scan.  Go and use it.
 12114                                  ;
 12115                                  ;lru25:
 12116                                  ;	MOV	si,DI			;	      pos = i;
 12117                                  ;	JMP	short lru11		;	      goto got;
 12118                                  ;
 12119                                  ; See if the entry is for the network or for the sharer.
 12120                                  ;
 12121                                  ;  If for the sharer or network then
 12122                                  ;	if the age < current minimum AND >= allowed minimum then
 12123                                  ;	    this entry becomes current minimum
 12124                                  ;
 12125                                  ;lru3:
 12126                                  ;	;test	word [es:di+5],8000h
 12127                                  ;	TEST	word [ES:DI+SF_ENTRY.sf_flags],sf_isnet 
 12128                                  ;					;	  if (!net[i]
 12129                                  ;	JNZ	short lru35
 12130                                  ;if installed
 12131                                  ;	call	CheckShare		;		&& !sharing)
 12132                                  ;	JZ	short lru5		;	  else
 12133                                  ;ENDIF
 12134                                  ;
 12135                                  ; This SFT is for the net or is for the sharer. See if it less than the
 12136                                  ; current minimum.
 12137                                  ;
 12138                                  ;lru35:
 12139                                  ;	;mov	dx,[es:di+17h]
 12140                                  ;	MOV	DX,[ES:DI+sf_OpenAge]
 12141                                  ;	CMP	DX,AX			;	  if (age[i] >= low &&
 12142                                  ;	JB	short lru5
 12143                                  ;	CMP	DX,BX
 12144                                  ;	JAE	short lru5		;	      age[i] < min) {
 12145                                  ;
 12146                                  ; entry is new minimum.  Remember his age.
 12147                                  ;
 12148                                  ;	mov	bx,DX			;	      min = age[i];
 12149                                  ;	mov	si,di			;	      pos = i;
 12150                                  ;
 12151                                  ; End of loop.	gp back for more
 12152                                  ;
 12153                                  ;lru5:
 12154                                  ;	;add	di,53
 12155                                  ;	add	di,SF_ENTRY.size
 12156                                  ;	loop	lru2			;	      }
 12157                                  ;
 12158                                  ; The scan is complete. If we have successfully found a new minimum (pos != -1)
 12159                                  ; set then threshold value to this new minimum + 1. Otherwise, the scan is
 12160                                  ; complete.  Go find LRU.
 12161                                  ;
 12162                                  ;lru6:	
 12163                                  ;	cmp	si,-1			; position not -1?
 12164                                  ;	jz	short lru75		; no, done with everything
 12165                                  ;	lea	ax,[bx+1]		; set new threshold age
 12166                                  ;	jmp	short lru1		; go and loop for more
 12167                                  ;lru65:	
 12168                                  ;	stc
 12169                                  ;	jmp	short LRUDead		;	  return -1;
 12170                                  ;
 12171                                  ; Main loop is done. We have AX being the age+1 of the nth oldest sharer or
 12172                                  ; network entry. We now make a second pass through to find the LRU entry
 12173                                  ; that is local-no-share or has age >= AX
 12174                                  ;
 12175                                  ;lru75:
 12176                                  ;	mov	bx,-1			; min = 0xffff;
 12177                                  ;	mov	si,bx			; pos = 0xffff;
 12178                                  ;	LES	DI,[CS:SFTFCB]		; for (CX=FCBCount; CX>0; CX--)
 12179                                  ;	;mov	cx,[es:di+4]
 12180                                  ;	MOV	CX,[ES:DI+SFT.SFCount]
 12181                                  ;	;lea	di,[di+6]
 12182                                  ;	LEA	DI,[DI+SFT.SFTable]
 12183                                  ;
 12184                                  ; If this is is local-no-share then go check for LRU else if age >= threshold
 12185                                  ; then check for lru.
 12186                                  ;
 12187                                  ;lru8:
 12188                                  ;	;test	word [es:di+5],8000h
 12189                                  ;	TEST	word [ES:DI+SF_ENTRY.sf_flags],sf_isnet
 12190                                  ;	jnz	short lru85		; is for network, go check age
 12191                                  ;	call	CheckShare		; sharer here?
 12192                                  ;	jz	short lru86		; no, go check lru
 12193                                  ;
 12194                                  ; Network or sharer.  Check age
 12195                                  ;
 12196                                  ;lru85:
 12197                                  ;	;cmp	[es:di+17h],ax
 12198                                  ;	cmp	[es:di+sf_OpenAge],ax
 12199                                  ;	jb	short lru9		; age is before threshold, skip it
 12200                                  ;
 12201                                  ; Check LRU
 12202                                  ;
 12203                                  ;lru86:
 12204                                  ;	;cmp	[es:di+15h],bx
 12205                                  ;	cmp	[es:di+sf_LRU],bx	; is LRU less than current LRU?
 12206                                  ;	jae	short lru9		; no, skip this
 12207                                  ;	mov	si,di			; remember position
 12208                                  ;	;mov	bx,[es:di+15h]
 12209                                  ;	mov	bx,[es:di+sf_LRU]	; remember new minimum LRU
 12210                                  ;
 12211                                  ; Done with this entry, go back for more.
 12212                                  ;
 12213                                  ;lru9:
 12214                                  ;	;add	di, 53
 12215                                  ;	add	di,SF_ENTRY.size
 12216                                  ;	loop	lru8
 12217                                  ;
 12218                                  ; Scan is complete. If we found NOTHING that satisfied us then we bomb
 12219                                  ; out. The conditions here are:
 12220                                  ;
 12221                                  ;  No local-no-shares AND all net/share entries are older than threshold
 12222                                  ;
 12223                                  ;lru10:
 12224                                  ;	cmp	si,-1			; if no one f
 12225                                  ;	jz	short lru65		;     return -1;
 12226                                  ;lru11:
 12227                                  ;	mov	di,si
 12228                                  ;	MOV	[CS:THISSFT],DI		; set thissft
 12229                                  ;	MOV	[CS:THISSFT+2],ES
 12230                                  ;
 12231                                  ; If we have sharing or thisSFT is a net sft, then close it until ref count
 12232                                  ; is 0.
 12233                                  ;
 12234                                  ;	;test	word [es:di+5],8000h
 12235                                  ;	TEST	word [ES:DI+SF_ENTRY.sf_flags],sf_isnet
 12236                                  ;	JNZ	short LRUClose
 12237                                  ;IF INSTALLED
 12238                                  ;	call	CheckShare
 12239                                  ;	JZ	short LRUDone
 12240                                  ;ENDIF
 12241                                  ;
 12242                                  ; Repeat close until ref count is 0
 12243                                  ;
 12244                                  ;LRUClose:
 12245                                  ;	push	ss
 12246                                  ;	pop	ds
 12247                                  ;	LES	DI,[THISSFT]
 12248                                  ;	cmp     word [es:di],0
 12249                                  ;	;CMP	word [ES:DI+SFT.sf_ref_count],0 ; is ref count still <> 0?
 12250                                  ;	JZ	short LRUDone 		; nope, all done
 12251                                  ;	call	DOS_CLOSE
 12252                                  ;	jnc	short LRUClose		; no error => clean up
 12253                                  ;	;cmp	al,6
 12254                                  ;	cmp	al,error_invalid_handle
 12255                                  ;	jz	short LRUClose
 12256                                  ;	stc
 12257                                  ;	JMP	short LRUDead
 12258                                  ;LRUDone:
 12259                                  ;	XOR	AL,AL
 12260                                  ;	call	BlastSFT		; fill SFT with 0 (AL), 'C' cleared
 12261                                  ;
 12262                                  ;LRUDead:
 12263                                  ;	call	restore_world
 12264                                  ;	LES     DI,[CS:THISSFT]
 12265                                  ;	jnc	short LRUFCB_retn
 12266                                  ;LRUFCB_err:
 12267                                  ;	; mov	al, 23h	
 12268                                  ;	MOV	AL,error_FCB_unavailable
 12269                                  ;LRUFCB_retn:	
 12270                                  ;	retn:
 12271                                  ;
 12272                                  ;ENDIF	; LRUFCB has been rewritten below.
 12273                                  
 12274                                  ; 17/05/2019 - Retro DOS v4.0
 12275                                  ; LRUFCB for MSDOS 6.0 !
 12276                                  ;----------------------------------------------------------------------------
 12277                                  ;
 12278                                  ; LruFCB -- allocate the LRU SFT from the SFT Table. The LRU scheme
 12279                                  ; maintains separate counts for net/Share and local SFTs. We allocate a 
 12280                                  ; net/Share SFT only if we do not find a local SFT. This helps keep
 12281                                  ; net/Share SFTs which cannot be regenerated for as long as possible. We
 12282                                  ; optimize regeneration operations by keeping track of the current local
 12283                                  ; SFT. This avoids scanning of the SFTs as long as we have at least one 
 12284                                  ; local SFT in the SFT Block.
 12285                                  ;
 12286                                  ; Inputs: al = 0 => Regenerate SFT operation
 12287                                  ;	    = 1 => Allocate new SFT for Open/Create
 12288                                  ;
 12289                                  ; Outputs: Carry clear
 12290                                  ;	 	es:di = Address of allocated SFT
 12291                                  ;	  	ThisSFT = Address of allocated SFT
 12292                                  ;
 12293                                  ;	  carry set if closes of net/Share files failed 
 12294                                  ;		al = error_FCB_unavailable
 12295                                  ;
 12296                                  ; Registers affected: None
 12297                                  ;
 12298                                  ;----------------------------------------------------------------------------
 12299                                  
 12300                                  ;LruFCB	PROC	NEAR
 12301                                  LRUFCB:
 12302                                  	; 17/05/2019 - Retro DOS v4.0
 12303                                  	; DOSCODE:5805h (MSDOS 6.21, MSDOS.SYS)
 12304                                  
 12305                                  	; 08/11/2022 Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 12306                                  	; DOSCODE:57F1h (MSDOS 5.0, MSDOS.SYS)
 12307                                  
 12308 000019C3 06                      	push	es	; * (MSDOS 6.21)
 12309                                  	
 12310 000019C4 E8A9EA                  	call	save_world
 12311                                  	
 12312                                  	;getdseg <ds>		;ds = DOSDATA
 12313 000019C7 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
 12314                                  
 12315 000019CC 08C0                    	or	al,al		;Check if regenerate allocation
 12316 000019CE 751A                    	jnz	short lru1	;Try to find SFT to use
 12317                                  
 12318                                  	; This is a regen call. If LocalSFT contains the address of a valid 
 12319                                  	; local SFT, just return that SFT to reuse
 12320                                  
 12321 000019D0 8B3E[4310]              	mov	di,[LocalSFT]
 12322 000019D4 0B3E[4510]              	or	di,[LocalSFT+2]	;is address == 0?
 12323 000019D8 7410                    	jz	short lru1	;invalid local SFT, find one
 12324                                  
 12325                                  	; We have found a valid local SFT. Recycle this SFT
 12326                                  
 12327 000019DA C43E[4310]              	les	di,[LocalSFT]
 12328                                  
 12329                                  gotlocalSFT:
 12330 000019DE 893E[9E05]              	mov	[THISSFT],di
 12331 000019E2 8C06[A005]              	mov	[THISSFT+2],es
 12332 000019E6 F8                      	clc
 12333 000019E7 E9AD00                  	jmp	LRUDone		;clear up SFT and return
 12334                                  
 12335                                  lru1:
 12336 000019EA C43E[4000]              	les	di,[SFTFCB]	;es:di = SF Table for FCBs
 12337                                  	;mov	cx,[es:di+4]
 12338 000019EE 268B4D04                	mov	cx,[es:di+SFT.SFCount]	;cx = number of SFTs
 12339                                  	;lea	di,[di+6]
 12340 000019F2 8D7D06                  	lea	di,[di+SFT.SFTable]	;es:di = first SFT
 12341                                  
 12342                                  	; We scan through all the SFTs scanning for a free one. It also 
 12343                                  	; remembers the LRU SFT for net/Share SFTs and local SFTs separately. 
 12344                                  	; bx = min. LRU for local SFTs
 12345                                  	; si = pos. of local SFT with min. LRU
 12346                                  	; dx = min. LRU for net/Share SFTs
 12347                                  	; bp = pos. of net/Share SFT with min. LRU
 12348                                  
 12349 000019F5 BBFFFF                  	mov	bx,-1		; init. to 0xffff ( max. LRU value )
 12350 000019F8 89DE                    	mov	si,bx
 12351 000019FA 89DA                    	mov	dx,bx
 12352 000019FC 89DD                    	mov	bp,bx
 12353                                  
 12354                                  findSFT:
 12355                                  	;See if this SFT is a free one. If so, return it
 12356 000019FE 26830D00                	or	word [es:di],0
 12357                                  	;or	word [es:di+SF_ENTRY.sf_ref_count],0 ;reference count = 0 ?
 12358 00001A02 744D                    	jz	short gotSFT	;yes, SFT is free
 12359                                  	;;cmp	word [es:di],-1
 12360                                  	;cmp	word [es:di+SF_ENTRY.sf_ref_count],sf_busy ;Is it busy?
 12361 00001A04 26833DFF                	cmp	word [es:di],sf_busy ; -1 
 12362 00001A08 7447                    	jz	short gotSFT	;no, can use it
 12363                                  
 12364                                  	; Check if this SFT is local and store its address in LocalSFT. Can be 
 12365                                  	; used for a later regen.
 12366                                  
 12367                                  	; 16/12/2022
 12368                                  	; 08/11/2022
 12369                                  	;test	byte [es:di+6],80h
 12370 00001A0A 26F6450680              	test	byte [es:di+SF_ENTRY.sf_flags+1],(sf_isnet>>8) ; 80h
 12371                                  	; 08/11/2022 Retro DOS v4.0 (MSDOS 5.0 MSDOS.SYS compatibility)
 12372                                  	;;test	word [es:di+5],8000h
 12373                                  	;test	word [ES:DI+SF_ENTRY.sf_flags],sf_isnet ; network SFT?
 12374 00001A0F 7532                    	jnz	short lru5	;yes, get net/Share LRU
 12375                                  
 12376                                  ;IF installed
 12377 00001A11 E8255A                  	call	CheckShare	;Share present?
 12378                                  ;ENDIF
 12379 00001A14 752D                    	jnz	short lru5	;yes, get net/Share LRU
 12380                                  
 12381                                  	;Local SFT, register its address
 12382                                  
 12383                                  	; !!HACK!!!
 12384                                  	; There is a slightly dirty hack out here in a desperate bid to save  
 12385                                  	; code space. There is similar code duplicated at label 'gotSFT'. We 
 12386                                  	; enter from there if al = 0, update the LocalSFT variable, and since 
 12387                                  	; al = 0, we jump out of the loop to the exit point. I have commented 
 12388                                  	; out the code that previously existed at label 'gotSFT'
 12389                                  
 12390                                  hackpoint:
 12391 00001A16 893E[4310]              	mov	[LocalSFT],di
 12392 00001A1A 8C06[4510]              	mov	[LocalSFT+2],es	;store local SFT address
 12393                                  
 12394 00001A1E 08C0                    	or	al,al		;Is operation = REGEN?
 12395 00001A20 74BC                    	jz	short gotlocalSFT ;yes, return this SFT for reuse
 12396                                  
 12397                                  	;Get LRU for local files
 12398                                  	
 12399                                  	;cmp	[es:di+15h],bx
 12400 00001A22 26395D15                	cmp	[es:di+sf_LRU],bx ;SFT.LRU < min?
 12401 00001A26 7306                    	jae	short lru4	;no, skip 
 12402                                  
 12403                                  	;mov	bx,[es:di+15h]
 12404 00001A28 268B5D15                	mov	bx,[es:di+sf_LRU] ;yes, store new minimum
 12405 00001A2C 89FE                    	mov	si,di		;store SFT position
 12406                                  lru4:
 12407                                  	;add	di,59
 12408 00001A2E 83C73B                  	add	di,SF_ENTRY.size ;go to next SFT
 12409 00001A31 E2CB                    	loop	findSFT
 12410                                  
 12411                                  	; Check whether we got a net/Share or local SFT. If local SFT 
 12412                                  	; available, we will reuse it instead of net/Share LRU
 12413                                  
 12414 00001A33 89F7                    	mov	di,si
 12415 00001A35 83FEFF                  	cmp	si,-1		;local SFT available?
 12416 00001A38 7517                    	jnz	short gotSFT	;yes, return it
 12417                                  
 12418                                  	;No local SFT, see if we got a net/Share SFT
 12419                                  
 12420 00001A3A 89EF                    	mov	di,bp
 12421 00001A3C 83FDFF                  	cmp	bp,-1		;net/Share SFT available?
 12422 00001A3F 7530                    	jnz	short gotnetSFT	;yes, return it
 12423                                  noSFT:
 12424                                  	; NB: This error should never occur. We always must have an LRU SFT. 
 12425                                  	; This error can occur only if the SFT has been corrupted or the LRU 
 12426                                  	; count is not maintained properly.
 12427                                  
 12428 00001A41 EB51                    	jmp	short errorbadSFT ;error, no FCB available.
 12429                                  
 12430                                  	; Handle the LRU for net/Share SFTs
 12431                                  lru5:
 12432                                  	;cmp	[es:di+15h],dx
 12433 00001A43 26395515                	cmp	[es:di+sf_LRU],dx ;SFT.LRU < min?
 12434 00001A47 73E5                    	jae	short lru4	;no, skip 
 12435                                  
 12436                                  	;mov	dx,[es:di+15h]
 12437 00001A49 268B5515                	mov	dx,[es:di+sf_LRU] ;yes, store new minimum
 12438                                  
 12439 00001A4D 89FD                    	mov	bp,di		;store SFT position
 12440 00001A4F EBDD                    	jmp	short lru4	;continue with next SFT
 12441                                  
 12442                                  gotSFT:
 12443 00001A51 08C0                    	or	al,al
 12444 00001A53 74C1                    	jz	short hackpoint	;save es:di in LocalSFT
 12445                                  
 12446                                  	; HACK!!!
 12447                                  	; The code here differs from the code at 'hackpoint' only in the 
 12448                                  	; order of the check for al. If al = 0, we can jump to 'hackpoint' 
 12449                                  	; and then from there jump out to 'gotlocalSFT'. The original code 
 12450                                  	; has been commented out below and replaced by the code just above.
 12451                                  
 12452                                  ;If regen, then this SFT can be registered as a local one ( even if free ).
 12453                                  ;
 12454                                  ;	or	al,al		  ;Regen?
 12455                                  ;	jnz	short notlocaluse ;yes, register it and return
 12456                                  ;
 12457                                  ;Register this SFT as a local one
 12458                                  ;
 12459                                  ;	mov	[LocalSFT],di
 12460                                  ;	mov	[LocalSFT+2],es
 12461                                  ;	jmp	gotlocalSFT	;return to caller
 12462                                  ;
 12463                                  ;notlocaluse:
 12464                                  
 12465                                  	; The caller is probably going to use this SFT for a net/Share file. 
 12466                                  	; We will come here only on a Open/Create when the caller($FCB_OPEN) 
 12467                                  	; does not really know whether it is a local file or not. We 
 12468                                  	; invalidate LocalSFT if the SFT we are going to use was previously 
 12469                                  	; registered as a local SFT that can be recycled.
 12470                                  
 12471 00001A55 8CC0                    	mov	ax,es
 12472 00001A57 393E[4310]              	cmp	[LocalSFT],di		;Offset same?
 12473 00001A5B 7506                    	jne	short notinvalid
 12474 00001A5D 3906[4510]              	cmp	[LocalSFT+2],ax		;Segments same?
 12475 00001A61 7403                    	je	short zerolocalSFT	;no, no need to invalidate
 12476                                  notinvalid:
 12477 00001A63 E978FF                  	jmp	gotlocalSFT
 12478                                  
 12479                                  	; The SFT we are going to use was registered in the LocalSFT variable. 
 12480                                  	; Invalidate this variable i.e LocalSFT = NULL
 12481                                  
 12482                                  zerolocalSFT:
 12483 00001A66 31C0                    	xor	ax,ax ; 0
 12484 00001A68 A3[4310]                	mov	[LocalSFT],ax
 12485 00001A6B A3[4510]                	mov	[LocalSFT+2],ax
 12486                                  
 12487 00001A6E E96DFF                  	jmp	gotlocalSFT
 12488                                  
 12489                                  gotnetSFT:
 12490                                  	; We have an SFT that is currently net/Share. If it is going to be 
 12491                                  	; used for a regen, we know it has to be a local SFT. Update the 
 12492                                  	; LocalSFT variable
 12493                                  
 12494 00001A71 08C0                    	or	al,al
 12495 00001A73 7508                    	jnz	short closenet
 12496                                  
 12497 00001A75 893E[4310]              	mov	[LocalSFT],di
 12498 00001A79 8C06[4510]              	mov	[LocalSFT+2],es	;store local SFT address
 12499                                  closenet:
 12500 00001A7D 893E[9E05]              	mov	[THISSFT],di	; set thissft
 12501 00001A81 8C06[A005]              	mov	[THISSFT+2],es	
 12502                                  
 12503                                  	; If we have sharing or thisSFT is a net sft, then close it until ref 
 12504                                  	; count is 0.
 12505                                  	; NB: We come here only if it is a net/Share SFT that is going to be 
 12506                                  	; recycled -- no need to check for this.
 12507                                  
 12508                                  LRUClose:
 12509 00001A85 26833D00                	cmp	word [es:di],0
 12510                                  	;cmp	word [es:di+SF_ENTRY.sf_ref_count],0 ; is ref count still <> 0?
 12511 00001A89 740C                    	jz	short LRUDone	; nope, all done
 12512                                  
 12513 00001A8B E81215                  	call	DOS_CLOSE
 12514 00001A8E 73F5                    	jnc	short LRUClose	; no error => clean up
 12515                                  
 12516                                  	; Bugbug: I dont know why we are trying to close after we get an 
 12517                                  	; error closing. Seems like we could have a potential infinite loop  
 12518                                  	; here. This has to be verified.
 12519                                  
 12520 00001A90 3C06                    	cmp	al,error_invalid_handle ; 6
 12521 00001A92 74F1                    	je	short LRUClose
 12522                                  errorbadSFT:
 12523 00001A94 F9                      	stc
 12524 00001A95 EB05                    	JMP	short LRUDead
 12525                                  LRUDone:
 12526 00001A97 30C0                    	XOR	AL,AL
 12527 00001A99 E80E01                  	call	BlastSFT		; fill SFT with 0 (AL), 'C' cleared
 12528                                  
 12529                                  LRUDead:
 12530 00001A9C E8BAE9                  	call	restore_world		; use macro
 12531                                  	
 12532 00001A9F 07                      	pop	es ; * (MSDOS 6.21)
 12533                                  
 12534                                  	;getdseg <es>
 12535 00001AA0 2E8E06[0700]            	mov	es,[cs:DosDSeg]
 12536 00001AA5 26C43E[9E05]            	les	di,[es:THISSFT]		;es:di points at allocated SFT
 12537                                  
 12538                                  	;;retnc
 12539                                  	;jc	short LruFCB_err
 12540                                  	;retn
 12541                                  
 12542                                  	; 16/12/2022
 12543                                  	; 08/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 12544 00001AAA 7302                    	jnc	short LruFCB_retn
 12545                                  	;jc	short LruFCB_err
 12546                                  	;retn
 12547                                  		
 12548                                  LruFCB_err:
 12549 00001AAC B023                    	MOV	AL,error_FCB_unavailable ; 23h
 12550                                  LruFCB_retn:
 12551 00001AAE C3                      	retn
 12552                                  	
 12553                                  ;LruFCB	ENDP
 12554                                  
 12555                                  ; 17/05/2019 - Retro DOS v4.0
 12556                                  
 12557                                  ; DOSCODE:58F3h (MSDOS 6.21, MSDOS.SYS)
 12558                                  
 12559                                  ; --------------------------------------------------------------------------
 12560                                  ;**** RegenCopyName -- This function copies the filename from the FCB to
 12561                                  ; SFT and also to DOS local buffers. There was duplicate code in FCBRegen
 12562                                  ; to copy the name to different destinations
 12563                                  ;
 12564                                  ; Inputs: ds:si = source string
 12565                                  ;	 es:di = destination string
 12566                                  ;	 cx = length of string
 12567                                  ;
 12568                                  ; Outputs: String copied to destination
 12569                                  ;
 12570                                  ; Registers affected: cx,di,si
 12571                                  ; --------------------------------------------------------------------------
 12572                                  
 12573                                  RegenCopyName:
 12574                                  CopyName:
 12575 00001AAF AC                      	lodsb			;load character
 12576 00001AB0 E87336                  	call	UCase		; convert char to upper case
 12577                                  StuffChar2:
 12578 00001AB3 AA                      	STOSB			;store converted character
 12579 00001AB4 E2F9                    	LOOP	CopyName	;
 12580                                  DoneName:
 12581 00001AB6 C3                      	retn
 12582                                  
 12583                                  ; --------------------------------------------------------------------------
 12584                                  
 12585                                  	; 09/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 12586                                  FCBRegen:
 12587                                  	; called from SFTFromFCB. SS already DOSDATA
 12588                                  
 12589                                  	; General data filling. Mode is sf_isFCB + open_for_both, date/time 
 12590                                  	; we do not fill, size we do no fill, position we do not fill,
 12591                                  	; bit 14 of flags = TRUE, other bits = FALSE
 12592                                  
 12593                                  	;mov	al,[si+19h]
 12594 00001AB7 8A4419                  	MOV	AL,[SI+fcb_l_drive]
 12595                                  
 12596                                  	; We discriminate based on the first two bits in the reserved field.
 12597                                  	
 12598                                  	;test	al,80h
 12599 00001ABA A880                    	test	AL,FCBSPECIAL		; check for no sharing test
 12600 00001ABC 741C                    	JZ	short RegenNoSharing	; yes, go regen from no sharing
 12601                                  
 12602                                  	; The FCB is for a network or a sharing based system. At this point 
 12603                                  	; we have already closed the SFT for this guy and reconnection is 
 12604                                  	; impossible.
 12605                                  	;
 12606                                  	; Remember that he may have given us a FCB with bogus information in
 12607                                  	; it. Check to see if sharing is present or if the redir is present.
 12608                                  	; If either is around, presume that we have cycled out the FCB and 
 12609                                  	; give the hard error. Otherwise, just return with carry set.
 12610                                  
 12611 00001ABE E87859                  	call	CheckShare		; test for sharer
 12612 00001AC1 7509                    	JNZ	short RegenFail		; yep, fail this.
 12613                                  	
 12614                                  	;mov	ax,1100h
 12615 00001AC3 B80011                  	MOV	AX,MultNET<<8		; install check on multnet
 12616 00001AC6 CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - INSTALLATION CHECK
 12617                                  			; Return: AL = 00h  not installed, OK to install
 12618                                  			; 01h  not installed, not OK to install
 12619                                  			; FFh  installed
 12620 00001AC8 08C0                    	OR	AL,AL			; is it there?
 12621 00001ACA 740C                    	JZ	short RegenDead		; no, just fail the operation
 12622                                  RegenFail:
 12623                                  	; 17/05/2019 - Retro DOS v4.0
 12624                                  	;MOV	AX,[CS:USER_IN_AX]	; SS override
 12625 00001ACC 36A1[3A03]              	mov	ax,[SS:USER_IN_AX] ; MSDOS 6.0
 12626                                  
 12627                                  	;cmp	ah,10h
 12628 00001AD0 80FC10                  	cmp	AH,FCB_CLOSE
 12629 00001AD3 7403                    	jz	short RegenDead
 12630 00001AD5 E89301                  	call	FCBHardErr		; massive hard error.
 12631                                  RegenDead:
 12632 00001AD8 F9                      	STC				; carry set
 12633                                  FCBRegen_retn:
 12634 00001AD9 C3                      	retn
 12635                                  
 12636                                  	; Local FCB without sharing. Check to see if sharing is loaded. If 
 12637                                  	; so fail the operation.
 12638                                  
 12639                                  RegenNoSharing:
 12640 00001ADA E85C59                  	call	CheckShare		; Sharing around?
 12641 00001ADD 75ED                    	JNZ	short RegenFail
 12642                                  	
 12643                                  	; Find an SFT for this guy.
 12644                                  	
 12645                                  	; 17/05/2019 - Retro DOS v4.0
 12646                                  
 12647                                  	; MSDOS 3.3
 12648                                  	;call	LRUFCB
 12649                                  	;jc	short FCBRegen_retn
 12650                                  	
 12651                                  	; MSDOS 6.0
 12652 00001ADF 50                      	push	ax
 12653 00001AE0 B000                    	mov	al,0			;indicate it is a regen operation
 12654 00001AE2 E8DEFE                  	call	LRUFCB
 12655 00001AE5 58                      	pop	ax
 12656 00001AE6 72F1                    	jc	short FCBRegen_retn
 12657                                  
 12658                                  	;mov	word [es:di+2],8002h
 12659 00001AE8 26C745020280            	MOV	word [ES:DI+SF_ENTRY.sf_mode],sf_isFCB+open_for_both+SHARING_COMPAT
 12660 00001AEE 243F                    	AND	AL,3Fh			; get drive number for flags
 12661 00001AF0 98                      	CBW
 12662                                  	;or	ax,4000h
 12663 00001AF1 0D0040                  	OR	AX,sf_close_nodate	; normal FCB operation
 12664                                  
 12665                                  	; The bits field consists of the upper two bits (dirty and device) 
 12666                                  	; from the SFT and the low 4 bits from the open mode.
 12667                                  
 12668                                  	;mov	cl,[si+1Ah]
 12669 00001AF4 8A4C1A                  	MOV	CL,[SI+fcb_nsl_bits]	; stick in dirty bits.
 12670 00001AF7 88CD                    	MOV	CH,CL
 12671 00001AF9 80E5C0                  	AND	CH,0C0h 		; mask off the dirty/device bits
 12672 00001AFC 08E8                    	OR	AL,CH
 12673                                  	;and	cl,0Fh
 12674 00001AFE 80E10F                  	AND	CL,access_mask		; get the mode bits
 12675                                  	;mov	[es:di+2],cl
 12676 00001B01 26884D02                	MOV	[ES:DI+SF_ENTRY.sf_mode],CL
 12677                                  	;mov	[es:di+5],ax
 12678 00001B05 26894505                	MOV	[ES:DI+SF_ENTRY.sf_flags],AX ; initial flags
 12679                                  	;MOV	AX,[CS:PROC_ID]		; SS override
 12680 00001B09 36A1[3C03]              	mov	ax,[ss:PROC_ID] ; MSDOS 6.0
 12681                                  	;mov	[es:di+31h],ax
 12682 00001B0D 26894531                	MOV	[ES:DI+SF_ENTRY.sf_PID],AX
 12683 00001B11 1E                      	push	ds
 12684 00001B12 56                      	push	si
 12685 00001B13 06                      	push	es
 12686 00001B14 57                      	push	di
 12687 00001B15 16                      	push	ss
 12688 00001B16 07                      	pop	es
 12689 00001B17 BF[4B05]                	MOV	DI,NAME1		; NAME1 is in DOSDATA
 12690                                  
 12691 00001B1A B90800                  	MOV	CX,8
 12692 00001B1D 46                      	INC	SI			; Skip past drive byte to name in FCB
 12693                                  
 12694                                  	; MSDOS 3.3
 12695                                  ;RegenCopyName:
 12696                                  	;lodsb
 12697                                  	;call	UCase
 12698                                  	;stosb
 12699                                  	;loop	RegenCopyName
 12700                                  
 12701                                  	; MSDOS 6.0
 12702 00001B1E E88EFF                  	call	RegenCopyName		;copy the name to NAME1
 12703                                  
 12704 00001B21 16                      	push	ss	; SS is DOSDATA
 12705 00001B22 1F                      	pop	ds
 12706                                  
 12707                                  	;mov	byte [ATTRIB],16h
 12708 00001B23 C606[6B05]16            	MOV	byte [ATTRIB],attr_hidden+attr_system+attr_directory
 12709                                  					; Must set this to something interesting
 12710                                  					; to call DEVNAME.
 12711 00001B28 E85D27                  	call	DEVNAME 		; check for device
 12712 00001B2B 5E                      	pop	si
 12713 00001B2C 07                      	pop	es
 12714 00001B2D 5E                      	pop	si
 12715 00001B2E 1F                      	pop	ds
 12716 00001B2F 7219                    	JC	short RegenFileNoSharing ; not found on device list => file
 12717                                  
 12718                                  	; Device found. We can ignore disk-specific info
 12719                                  
 12720                                  	;mov	[es:di+5],bh
 12721 00001B31 26887D05                	MOV	[ES:DI+SF_ENTRY.sf_flags],BH ; device parms
 12722                                  	;mov	byte [es:di+4],0
 12723 00001B35 26C6450400              	MOV	byte [ES:DI+SF_ENTRY.sf_attr],0 ; attribute
 12724                                  					; SS override
 12725                                  	;LDS	SI,[CS:DEVPT]		; get device driver
 12726 00001B3A 36C536[9A05]            	lds	si,[ss:DEVPT] ; MSDOS 6.0
 12727                                  	;mov	[es:di+7],si
 12728 00001B3F 26897507                	MOV	[ES:DI+SF_ENTRY.sf_devptr],SI
 12729                                  	;mov	[es:di+9],ds
 12730 00001B43 268C5D09                	MOV	[ES:DI+SF_ENTRY.sf_devptr+2],DS
 12731 00001B47 C3                      	retn				; carry is clear
 12732                                  
 12733                                  RegenDeadJ:
 12734 00001B48 EB8E                    	JMP	short RegenDead
 12735                                  
 12736                                  	; File found. Just copy in the remaining pieces.
 12737                                  
 12738                                  RegenFileNoSharing:
 12739                                  	;mov	ax,[es:di+5]
 12740 00001B4A 268B4505                	MOV	AX,[ES:DI+SF_ENTRY.sf_flags]
 12741 00001B4E 83E03F                  	AND	AX,03Fh
 12742 00001B51 1E                      	push	ds
 12743 00001B52 56                      	push	si
 12744 00001B53 E86B4F                  	call	FIND_DPB
 12745                                  	;mov	[es:di+7],si
 12746 00001B56 26897507                	MOV	[ES:DI+SF_ENTRY.sf_devptr],SI
 12747                                  	;mov	[es:di+9],ds
 12748 00001B5A 268C5D09                	MOV	[ES:DI+SF_ENTRY.sf_devptr+2],DS
 12749 00001B5E 5E                      	pop	si
 12750 00001B5F 1F                      	pop	ds
 12751 00001B60 72E6                    	jc	short RegenDeadJ	; if find DPB fails, then drive
 12752                                  					; indicator was bogus
 12753                                  	;mov	ax,[si+1Dh]
 12754 00001B62 8B441D                  	MOV	AX,[SI+fcb_nsl_dirsec]
 12755                                  	;;mov	[es:di+1Dh],ax ; MSDOS 3.3
 12756                                  	;mov	[es:di+1Bh],ax ; MSDOS 6.0
 12757 00001B65 2689451B                	MOV	[ES:DI+SF_ENTRY.sf_dirsec],AX
 12758                                  
 12759                                  	; MSDOS 6.0
 12760                                  
 12761                                  	; SR;
 12762                                  	; Extract the read-only and archive bits from the top 2 bits of the sector
 12763                                  	; number
 12764                                  
 12765                                  	;mov	al,[si+18h]
 12766 00001B69 8A4418                  	mov	al,[si+fcb_sfn]
 12767 00001B6C 24C0                    	and	al,0C0h		;get the 2 attribute bits
 12768 00001B6E 88C4                    	mov	ah,al
 12769 00001B70 D0C4                    	rol	ah,1
 12770 00001B72 D0E8                    	shr	al,1
 12771 00001B74 08E0                    	or	al,ah
 12772 00001B76 243F                    	and	al,03Fh		;mask off unused bits
 12773                                  	;mov	[es:di+4],al
 12774 00001B78 26884504                	mov	[es:di+SF_ENTRY.sf_attr],al
 12775                                  
 12776                                  	; SR;
 12777                                  	; Update the higher word of the directory sector from the FCB
 12778                                  
 12779                                  	;;mov	al,[si+18h]
 12780 00001B7C 8A4418                  	mov	al,[si+fcb_sfn]
 12781 00001B7F 243F                    	and	al,03Fh		;mask off top 2 bits -- attr bits
 12782 00001B81 28E4                    	sub	ah,ah
 12783                                  	;mov	[es:di+1Dh],ax
 12784 00001B83 2689451D                	mov	[es:di+SF_ENTRY.sf_dirsec+2],ax ;update high word
 12785                                  
 12786                                  	; MSDOS 6.0 (& MSDOS 3.3)
 12787                                  	;mov	ax,[si+1Bh]
 12788 00001B87 8B441B                  	MOV	AX,[SI+fcb_nsl_firclus]
 12789                                  	;mov	[es:di+0Bh],ax
 12790 00001B8A 2689450B                	MOV	[ES:DI+SF_ENTRY.sf_firclus],AX
 12791                                  	;;mov	[es:di+1Bh],ax ; MSDOS 3.3
 12792                                  	;mov	[es:di+35h],ax ; MSDOS 6.0
 12793 00001B8E 26894535                	MOV	[ES:DI+SF_ENTRY.sf_lstclus],AX
 12794                                  	;mov	al,[si+1Fh]
 12795 00001B92 8A441F                  	MOV	AL,[SI+fcb_nsl_dirpos]
 12796                                  	;mov  	[es:di+1Fh],al
 12797 00001B95 2688451F                	MOV	[ES:DI+SF_ENTRY.sf_dirpos],AL
 12798                                  	;INC	word [ES:DI+SF_ENTRY.sf_ref_count]
 12799 00001B99 26FF05                  	inc	word [ES:DI]		; Increment reference count.
 12800                                  					; Existing FCB entries would be
 12801                                  					; flushed unnecessarily because of
 12802                                  					; check in CheckFCB of the ref_count.
 12803                                  					; July 22/85 - BAS
 12804                                  	;lea	si,[si+1]
 12805 00001B9C 8D7401                  	LEA	SI,[SI+SYS_FCB.name]
 12806                                  	;lea	di,[di+20h]
 12807 00001B9F 8D7D20                  	LEA	DI,[DI+SF_ENTRY.sf_name]
 12808                                  	;mov	cx,11
 12809 00001BA2 B90B00                  	MOV	CX,SYS_FCB.EXTENT-SYS_FCB.name ; 12-1
 12810                                  	
 12811                                  	; MSDOS 6.0
 12812 00001BA5 E807FF                  	call	RegenCopyName	;copy name to SFT 
 12813                                  	
 12814                                  	; MSDOS 3.3
 12815                                  ;RegenCopyName2:
 12816                                  	;lodsb
 12817                                  	;call    UCase
 12818                                  	;stosb
 12819                                  	;loop    RegenCopyName2
 12820                                  
 12821 00001BA8 F8                      	clc
 12822 00001BA9 C3                      	retn
 12823                                  
 12824                                  ; 17/05/2019 - Retro DOS v4.0
 12825                                  
 12826                                  ;**	BlastSFT - FIll SFT with Garbage
 12827                                  ; --------------------------------------------------------------------------
 12828                                  ;	BlastSFT is used when an SFT is no longer needed; it's called with
 12829                                  ;	various garbage values to put into the SFT.  I don't know why,
 12830                                  ;	presumably to help with debugging (jgl).  We clear the few fields
 12831                                  ;	necessary to show that the SFT is free after filling it.
 12832                                  ;
 12833                                  ;	ENTRY	(es:di) = address of SFT
 12834                                  ;		(al) = fill character
 12835                                  ;	EXIT	(ax) = -1
 12836                                  ;		'C' clear
 12837                                  ;	USES	AX, CX, Flags
 12838                                  
 12839                                  BlastSFT:
 12840 00001BAA 57                      	push	di
 12841                                  	;mov	cx,53 ; MSDOS 3.3
 12842                                  	;mov	cx,59 ; MSDOS 6.0
 12843 00001BAB B93B00                  	mov	cx,SF_ENTRY.size
 12844 00001BAE F3AA                    	rep	stosb
 12845 00001BB0 5F                      	pop	di
 12846 00001BB1 29C0                    	sub	ax,ax	; 0		; clear 'C'-----------------;
 12847 00001BB3 268905                  	mov	[es:di],ax
 12848                                  	;mov	[es:di+SFT_ENTRY.sf_ref_count],ax ; set ref count   ;
 12849                                  	;mov	[es:di+15h],ax
 12850 00001BB6 26894515                	mov	[es:di+sf_LRU],ax	; set lru		    ;
 12851 00001BBA 48                      	dec	ax	; -1					    ;
 12852                                  	;mov	[es:di+17h],ax ; 0FFFFh ; -1
 12853 00001BBB 26894517                	mov	[es:di+sf_OpenAge],ax	; set open age to -1	    ;
 12854                                  BlastSFT_retn:
 12855 00001BBF C3                      	retn				; return with 'C' clear     ;
 12856                                  
 12857                                  ;Break	<CheckFCB - see if the SFT pointed to by the FCB is still OK>
 12858                                  ; --------------------------------------------------------------------------
 12859                                  ;
 12860                                  ;   CheckFCB - examine an FCB and its contents to see if it needs to be
 12861                                  ;   regenerated.
 12862                                  ;
 12863                                  ;   Inputs:	DS:SI point to FCB (not extended)
 12864                                  ;		AL is SFT index
 12865                                  ;   Outputs:	Carry Set - FCB needs to be regened
 12866                                  ;		Carry clear - FCB is OK. ES:DI point to SFT
 12867                                  ;   Registers modified: AX and BX
 12868                                  ;
 12869                                  ; --------------------------------------------------------------------------
 12870                                  
 12871                                  	; 09/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 12872                                  	; DOSCODE:59F0h (MSDOS 5.0, MSDOS.SYS)
 12873                                  CheckFCB:
 12874                                  		
 12875                                  	; called from $fcb_open and sftfromfcb. SS already set up to DOSDATA
 12876                                  
 12877                                  	; MSDOS 3.3
 12878                                  
 12879                                  	; LES	DI,[CS:SFTFCB]
 12880                                  
 12881                                  	; MSDOS 6.0
 12882                                  	
 12883                                  	; SR;
 12884                                  	; We check if the given FCB is for a local file. If so, we return a 
 12885                                  	; bad SFT status forcing the caller to regenerate the SFT.
 12886                                  
 12887                                  	;test	byte [si+19h],0C0h
 12888 00001BC0 F64419C0                	test	byte [si+fcb_l_drive],FCBNETWORK|FCBSHARE|FCBDEVICE
 12889 00001BC4 744F                    	jz	short BadSFT		;Local file, return bad SFT
 12890 00001BC6 36C43E[4000]            	LES     DI,[SS:SFTFCB]		; SS override
 12891                                  
 12892                                  	; MSDOS 6.0 (& MSDOS 3.3)
 12893                                  	;cmp	[es:di+4],al
 12894 00001BCB 26384504                	CMP	[ES:DI+SFT.SFCount],AL
 12895 00001BCF 7244                    	JC	short BadSFT
 12896                                  	;;mov	bl,53 ; MSDOS 3.3
 12897                                  	;mov	bl,59 ; MSDOS 6.0
 12898 00001BD1 B33B                    	MOV	BL,SF_ENTRY.size
 12899 00001BD3 F6E3                    	MUL	BL
 12900                                  	;lea	di,[di+6]
 12901 00001BD5 8D7D06                  	LEA	DI,[DI+SFT.SFTable]
 12902 00001BD8 01C7                    	ADD	DI,AX
 12903                                  	;MOV	AX,[CS:PROC_ID]	; MSDOS 3.3
 12904 00001BDA 36A1[3C03]              	mov	ax,[SS:PROC_ID] ; MSDOS 6.0  ; SS override
 12905                                  	;cmp	[es:di+31h],ax
 12906 00001BDE 26394531                	CMP	[ES:DI+SF_ENTRY.sf_PID],AX
 12907 00001BE2 7531                    	JNZ	short BadSFT		; must match process
 12908 00001BE4 26833D00                	cmp	word [es:di],0
 12909                                  	;CMP	word [ES:DI+SF_ENTRY.sf_ref_count],0
 12910 00001BE8 742B                    	JZ	short BadSFT		; must also be in use
 12911                                  	;mov	al,[si+19h]
 12912 00001BEA 8A4419                  	MOV	AL,[SI+fcb_l_drive]
 12913                                  	;test	al,80h
 12914 00001BED A880                    	test	AL,FCBSPECIAL		; a special FCB?
 12915 00001BEF 7430                    	JZ	short CheckNoShare	; No. try local or device
 12916                                  
 12917                                  	; Since we are a special FCB, try NOT to use a bogus test instruction.
 12918                                  	; FCBSHARE is a superset of FCBNETWORK.
 12919                                  
 12920 00001BF1 50                      	PUSH	AX
 12921                                  	;and	al,0C0h
 12922 00001BF2 24C0                    	AND	AL,FCBMASK
 12923                                  	;cmp	al,0C0h
 12924 00001BF4 3CC0                    	CMP	AL,FCBSHARE		; net FCB?
 12925 00001BF6 58                      	POP	AX
 12926 00001BF7 751E                    	JNZ	short CheckNet		; yes
 12927                                  ;
 12928                                  ;----- In share support -----
 12929                                  ;
 12930                                  	;call	far [cs:JShare+(11*4)]
 12931 00001BF9 36FF1E[BC00]            	Call    far [ss:JShare+(11*4)] ; 11 = ShChk ; SS Override
 12932 00001BFE 7215                    	JC	short BadSFT
 12933 00001C00 EB06                    	JMP	SHORT CheckD
 12934                                  ;
 12935                                  ;----- End in share support -----
 12936                                  ;
 12937                                  	; 09/11/2022
 12938                                  	; (There is not any procedure/sub
 12939                                  	;  which calls or jumps to CheckFirClus here)
 12940                                  	;;;
 12941                                  CheckFirClus:
 12942                                  	;cmp     bx,[es:di+0Bh]
 12943                                  	; 07/12/2022
 12944 00001C02 263B5D0B                	CMP	BX,[ES:DI+SF_ENTRY.sf_firclus]
 12945 00001C06 750D                    	JNZ	short BadSFT
 12946                                  	;;;
 12947                                  CheckD: 
 12948 00001C08 243F                    	AND	AL,3Fh
 12949                                  	;mov	ah,[es:di+5]
 12950 00001C0A 268A6505                	MOV	AH,[ES:DI+SF_ENTRY.sf_flags]
 12951 00001C0E 80E43F                  	AND	AH,3Fh
 12952 00001C11 38C4                    	CMP	AH,AL
 12953                                  	; 16/12/2022
 12954 00001C13 74AA                    	jz	short BlastSFT_retn	; carry is clear
 12955                                  	; 09/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 12956                                  	;jnz	short BadSFT
 12957                                  ;CheckD_retn:
 12958                                  	;retn
 12959                                  BadSFT: 
 12960 00001C15 F9                      	STC
 12961 00001C16 C3                      	retn
 12962                                  				
 12963                                  CheckNet:
 12964                                  	; 17/05/2019 - Retro DOS v4.0
 12965                                  	
 12966                                  ;----- In net support -----
 12967                                  
 12968                                  	; MSDOS 3.3
 12969                                  	;;mov	ax,[si+1Ah]
 12970                                  	;mov	ax,[si+fcb_net_handle]
 12971                                  	;;cmp	ax,[es:di+1Dh]
 12972                                  	;cmp	ax,[ES:DI+SF_ENTRY.sf_dirsec]
 12973                                  	;jnz	short BadSFT
 12974                                  	;;cmp	ax,[es:di+19h]
 12975                                  	;cmp	ax,[ES:DI+sf_netid]
 12976                                  	;jnz     short BadSFT
 12977                                  	;;mov	ax,[si+1Eh]
 12978                                  	;mov	ax,[si+fcb_l_attr]
 12979                                  	;;cmp	ax,[es:di+1Bh]
 12980                                  	;cmp	ax,[es:di+SF_ENTRY.sf_lstclus]
 12981                                  	;jnz     short BadSFT
 12982                                  
 12983                                  	; MSDOS 6.0
 12984                                  	;mov	ax,[si+1Ch]
 12985 00001C17 8B441C                  	MOV	AX,[SI+fcb_netID]	;AN000;IFS.DOS 4.00
 12986                                  	; 09/11/2022
 12987                                  	;cmp	ax,[es:di+0Bh] 
 12988 00001C1A 263B450B                	CMP	AX,[ES:DI+sf_serial_ID]	;AN000;IFS.DOS 4.00
 12989 00001C1E 75F5                    	JNZ	short BadSFT
 12990                                  
 12991                                  ;----- END In net support -----
 12992                                  
 12993                                  CheckNet_retn:
 12994 00001C20 C3                      	retn
 12995                                  
 12996                                  CheckNoShare:
 12997                                  
 12998                                  ; 16/12/2022
 12999                                  ;	; 09/11/2022 (following test instruction is nonsense!)
 13000                                  ;	; (I am leaving it here for MSDOS 5.0 MSDOS.SYS compatibility)
 13001                                  ;	;test	al,40h
 13002                                  ;	test	AL,FCBDEVICE		; Device?
 13003                                  ;	;jnz	short $+2 ; 09/11/2022
 13004                                  ;	JNZ	short CheckNoShareDev 	; Yes
 13005                                  
 13006                                  	; MSDOS 3.3 - IBMDOS.COM - Offset 27EFh
 13007                                  	;;mov	bx,[si+1Dh]
 13008                                  	;MOV	BX,[SI+fcb_nsl_dirsec]
 13009                                  	;;cmp	bx,[es:di+1Dh]
 13010                                  	;cmp	bx,[ES:DI+SF_ENTRY.sf_dirsec]
 13011                                  	;jnz	short BadSFT
 13012                                  	;;mov	bl,[si+1Fh]
 13013                                  	;MOV	bl,[SI+fcb_nsl_dirpos]
 13014                                  	;;cmp	bl,[es:di+1Fh]
 13015                                  	;cmp	bl,[ES:DI+SF_ENTRY.sf_dirpos]
 13016                                  	;jnz	short BadSFT
 13017                                  	;;mov	bl,[si+1Ah]
 13018                                  	;MOV	bl,[SI+fcb_nsl_bits]
 13019                                  	;;mov	bh,[es:di+5]
 13020                                  	;MOV	bh,[ES:DI+SF_ENTRY.sf_flags]
 13021                                  	;xor	bh,bl
 13022                                  	;and	bh,0C0h
 13023                                  	;jnz	short BadSFT
 13024                                  	;;xor	bl,[es:di+2]
 13025                                  	;xor	bl,[ES:DI+SF_ENTRY.sf_mode]
 13026                                  	;and	bl,0Fh
 13027                                  	;jnz	short BadSFT
 13028                                  	;push	di
 13029                                  	;push	si
 13030                                  	;;lea	di,[di+20h]  ; MSDOS 3.3
 13031                                  	;LEA	DI,[DI+SF_ENTRY.sf_name]
 13032                                  	;;lea	si,[si+1]
 13033                                  	;LEA	SI,[SI+SYS_FCB.name]
 13034                                  	;;mov	cx,11
 13035                                  	;MOV	CX,SYS_FCB.EXTENT-SYS_FCB.name ; 12-1
 13036                                  	;repe	cmpsb
 13037                                  	;pop	si
 13038                                  	;pop	di
 13039                                  	;jnz	short BadSFT
 13040                                  	;;mov	bx,[si+1Bh]
 13041                                  	;MOV	bX,[SI+fcb_nsl_firclus]
 13042                                  	;jmp	short CheckFirClus
 13043                                  
 13044                                  	; MSDOS 6.0
 13045                                  
 13046                                  	; SR;
 13047                                  	; The code below to match a local FCB with its SFT can no longer be
 13048                                  	; used. We just return a no-match status. This check is done right
 13049                                  	; at the top.
 13050                                  
 13051                                  CheckNoShareDev:
 13052                                  	;mov	bx,[si+1Ah]
 13053 00001C21 8B5C1A                  	MOV	BX,[SI+fcb_nsld_drvptr]
 13054                                  	;cmp	bx,[es:di+7]
 13055 00001C24 263B5D07                	CMP	BX,[ES:DI+SF_ENTRY.sf_devptr]
 13056 00001C28 75EB                    	JNZ	short BadSFT
 13057                                  	;mov	bx,[si+1Ch]
 13058 00001C2A 8B5C1C                  	MOV	BX,[SI+fcb_nsld_drvptr+2]
 13059                                  	;cmp	bx,[es:di+9]
 13060 00001C2D 263B5D09                	CMP	BX,[ES:DI+SF_ENTRY.sf_devptr+2]
 13061 00001C31 75E2                    	JNZ	short BadSFT
 13062 00001C33 EBD3                    	JMP	short CheckD
 13063                                  
 13064                                  ;Break	<SFTFromFCB - take a FCB and obtain a SFT from it>
 13065                                  ;----------------------------------------------------------------------------
 13066                                  ;
 13067                                  ;   SFTFromFCB - the workhorse of this compatability crap. Check to see if
 13068                                  ;	the SFT for the FCB is Good. If so, make ThisSFT point to it. If not
 13069                                  ;	good, get one from the cache and regenerate it. Overlay the LRU field
 13070                                  ;	with PID
 13071                                  ;
 13072                                  ;   Inputs:	DS:SI point to FCB
 13073                                  ;   Outputs:	ThisSFT point to appropriate SFT
 13074                                  ;		Carry clear -> OK ES:DI -> SFT
 13075                                  ;		Carry set -> error in ax
 13076                                  ;   Registers modified: ES,DI, AX
 13077                                  ;
 13078                                  ;----------------------------------------------------------------------------
 13079                                  
 13080                                  SFTFromFCB:
 13081                                  	; called from fcbio and $fcb_close. SS already set up to DOSDATA
 13082                                  
 13083                                  	; 17/05/2019 - Retro DOS v4.0
 13084                                  
 13085 00001C35 50                      	push	ax
 13086 00001C36 53                      	push	bx
 13087                                  	;mov	al,[si+18h]
 13088 00001C37 8A4418                  	MOV	AL,[SI+fcb_sfn] 	; set SFN for check
 13089 00001C3A E883FF                  	call	CheckFCB
 13090 00001C3D 5B                      	pop	bx
 13091 00001C3E 58                      	pop	ax
 13092                                  	;MOV	[CS:THISSFT],DI		; SS override
 13093                                  	;MOV	[CS:THISSFT+2],ES
 13094 00001C3F 36893E[9E05]            	MOV	[SS:THISSFT],DI		; SS override
 13095 00001C44 368C06[A005]            	MOV	[SS:THISSFT+2],ES
 13096 00001C49 7311                    	JNC	short Set_SFT		; no problems, just set thissft
 13097                                  	
 13098                                  	; 09/11/2022 (MSDOS 5.0)
 13099                                  	; 31/05/2019
 13100 00001C4B 06                      	push	es ; * (MSDOS 6.21) & (MSDOS 5.0)
 13101 00001C4C E821E8                  	call	save_world
 13102 00001C4F E865FE                  	call	FCBRegen
 13103 00001C52 E804E8                  	call	restore_world		; use macro restore world
 13104 00001C55 07                      	pop	es ; * (MSDOS 6.21) ; 31/05/2019 ; 09/11/2022 (MSDOS 5.0)	
 13105                                  
 13106                                  	;MOV	AX,[CS:EXTERR]		; SS override
 13107 00001C56 36A1[2403]              	MOV	AX,[SS:EXTERR]		; SS override
 13108 00001C5A 72C4                    	jc	short CheckNet_retn
 13109                                  
 13110                                  Set_SFT: 
 13111                                  	;LES	DI,[CS:THISSFT]		; SS override for THISSFT & PROC_ID
 13112 00001C5C 36C43E[9E05]            	les	di,[ss:THISSFT]
 13113                                  	;PUSH	word [CS:PROC_ID]	; set process id
 13114 00001C61 36FF36[3C03]            	push	word [ss:PROC_ID]
 13115                                  	;pop	word [es:di+31h]
 13116 00001C66 268F4531                	POP     word [ES:DI+SF_ENTRY.sf_PID]
 13117 00001C6A C3                      	retn				; carry is clear
 13118                                  
 13119                                  ;Break	<FCBHardErr - generate INT 24 for hard errors on FCBS>
 13120                                  ;----------------------------------------------------------------------------
 13121                                  ;
 13122                                  ;   FCBHardErr - signal to a user app that he is trying to use an
 13123                                  ;	unavailable FCB.
 13124                                  ;
 13125                                  ;   Inputs:	none.
 13126                                  ;   Outputs:	none.
 13127                                  ;   Registers modified: all
 13128                                  ;
 13129                                  ;----------------------------------------------------------------------------
 13130                                  
 13131                                  FCBHardErr:
 13132                                  	; 17/05/2019 - Retro DOS v4.0
 13133 00001C6B 2E8E06[0700]            	mov	es,[cs:DosDSeg]
 13134                                  	;
 13135                                  	;mov	ax,23h
 13136 00001C70 B82300                  	MOV	AX,error_FCB_unavailable
 13137                                  	;;mov	byte [cs:ALLOWED],8
 13138                                  	;MOV	byte [CS:ALLOWED],Allowed_FAIL
 13139 00001C73 26C606[4B03]08          	mov	byte [es:ALLOWED],Allowed_FAIL	
 13140                                  	
 13141                                  	;LES	BP,[CS:THISDPB]
 13142 00001C79 26C42E[8A05]            	les	bp,[es:THISDPB]
 13143                                  	
 13144 00001C7E BF0100                  	MOV	DI,1			; Fake some registers
 13145 00001C81 89F9                    	MOV	CX,DI
 13146                                  	;mov	dx,[es:bp+0Bh]
 13147 00001C83 268B560B                	MOV	DX,[ES:BP+DPB.FIRST_SECTOR]
 13148 00001C87 E85B37                  	call	HARDERR
 13149 00001C8A F9                      	STC
 13150 00001C8B C3                      	retn
 13151                                  
 13152                                  ;============================================================================
 13153                                  ; FCBIO2.ASM, MSDOS 6.0, 1991
 13154                                  ;============================================================================
 13155                                  ; 21/07/2018 - Retro DOS v3.0
 13156                                  ; 17/05/2019 - Retro DOS v4.0
 13157                                  
 13158                                  ;**	FCBIO2.ASM - Ancient 1.0 1.1 FCB system calls
 13159                                  ;
 13160                                  ;	GetRR
 13161                                  ;	GetExtent
 13162                                  ;	SetExtent
 13163                                  ;	GetExtended
 13164                                  ;	GetRecSize
 13165                                  ;	FCBIO
 13166                                  ;	$FCB_OPEN
 13167                                  ;	$FCB_CREATE
 13168                                  ;	$FCB_RANDOM_WRITE_BLOCK
 13169                                  ;	$FCB_RANDOM_READ_BLOCK
 13170                                  ;	$FCB_SEQ_READ
 13171                                  ;	$FCB_SEQ_WRITE
 13172                                  ;	$FCB_RANDOM_READ
 13173                                  ;	$FCB_RANDOM_WRITE
 13174                                  ;
 13175                                  ;	Revision history:
 13176                                  ;
 13177                                  ;		Created: ARR 4 April 1983
 13178                                  ;			 MZ  6 June  1983 completion of functions
 13179                                  ;			 MZ 15 Dec   1983 Brain damaged programs close FCBs multiple
 13180                                  ;				  times.  Change so successive closes work by
 13181                                  ;				  always returning OK.	Also, detect I/O to
 13182                                  ;				  already closed FCB and return EOF.
 13183                                  ;		 MZ 16 Jan   1984 More braindamage.  Need to separate info
 13184                                  ;				  out of sft into FCB for reconnection
 13185                                  ;
 13186                                  ;	    A000   version 4.00	Jan. 1988
 13187                                  
 13188                                  ; Defintions for FCBOp flags
 13189                                  
 13190                                  RANDOM	equ 2				; random operation
 13191                                  FCBREAD equ 4				; doing a read
 13192                                  BLOCK	equ 8				; doing a block I/O
 13193                                  
 13194                                  ;Break <GetRR - return the random record field in DX:AX>
 13195                                  ;---------------------------------------------------------------------------
 13196                                  ;
 13197                                  ;   GetRR - correctly load DX:AX with the random record field (3 or 4 bytes)
 13198                                  ;	from the FCB pointed to by DS:SI
 13199                                  ;
 13200                                  ;   Inputs:	DS:SI point to an FCB
 13201                                  ;		BX has record size
 13202                                  ;   Outputs:	DX:AX contain the contents of the random record field
 13203                                  ;   Registers modified: none
 13204                                  ;---------------------------------------------------------------------------
 13205                                  
 13206                                  GetRR:
 13207                                  	;mov	ax,[si+21h]
 13208 00001C8C 8B4421                  	MOV	AX,[SI+SYS_FCB.RR]	; get low order part
 13209                                  	;mov	dx,[si+23h]
 13210 00001C8F 8B5423                  	MOV	DX,[SI+SYS_FCB.RR+2]	; get high order part
 13211 00001C92 83FB40                  	CMP	BX,64			; ignore MSB of RR if recsiz > 64
 13212 00001C95 7202                    	JB	short GetRRBye
 13213 00001C97 30F6                    	XOR	DH,DH
 13214                                  GetRRBye:
 13215 00001C99 C3                      	retn
 13216                                  
 13217                                  ;Break <GetExtent - retrieve next location for sequential IO>
 13218                                  ;---------------------------------------------------------------------------
 13219                                  ;
 13220                                  ;   GetExtent - Construct the next record to perform I/O from the EXTENT and
 13221                                  ;	NR fields in the FCB.
 13222                                  ;
 13223                                  ;   Inputs:	DS:SI - point to FCB
 13224                                  ;   Outputs:	DX:AX contain the contents of the random record field
 13225                                  ;   Registers modified: none
 13226                                  ;---------------------------------------------------------------------------
 13227                                  
 13228                                  GetExtent:
 13229                                  	;mov	al,[si+20h]
 13230 00001C9A 8A4420                  	MOV	AL,[SI+SYS_FCB.NR]	; get low order piece
 13231                                  	;mov	dx,[si+0Ch]
 13232 00001C9D 8B540C                  	MOV	DX,[SI+SYS_FCB.EXTENT]	; get high order piece
 13233 00001CA0 D0E0                    	SHL	AL,1
 13234 00001CA2 D1EA                    	SHR	DX,1
 13235 00001CA4 D0D8                    	RCR	AL,1	; move low order bit of DL to high order of AH
 13236 00001CA6 88D4                    	MOV	AH,DL
 13237 00001CA8 88F2                    	MOV	DL,DH
 13238 00001CAA 30F6                    	XOR	DH,DH
 13239 00001CAC C3                      	retn
 13240                                  
 13241                                  ;Break <SetExtent - update the extent/NR field>
 13242                                  ;---------------------------------------------------------------------------
 13243                                  ;
 13244                                  ;   SetExtent - change the position of an FCB by filling in the extent/NR
 13245                                  ;	fields
 13246                                  ;
 13247                                  ;   Inputs:	DS:SI point to FCB
 13248                                  ;		DX:AX is a record location in file
 13249                                  ;   Outputs:	Extent/NR fields are filled in
 13250                                  ;   Registers modified: CX
 13251                                  ;---------------------------------------------------------------------------
 13252                                  
 13253                                  SetExtent:
 13254 00001CAD 50                      	push	ax
 13255 00001CAE 52                      	push	dx
 13256 00001CAF 89C1                    	MOV	CX,AX
 13257 00001CB1 247F                    	AND	AL,7FH			; next rec field
 13258                                  	;mov	[si+20h],al
 13259 00001CB3 884420                  	MOV	[SI+SYS_FCB.NR],AL
 13260 00001CB6 80E180                  	AND	CL,80H			; save upper bit
 13261 00001CB9 D1E1                    	SHL	CX,1
 13262 00001CBB D1D2                    	RCL	DX,1			; move high bit of CX to low bit of DX
 13263 00001CBD 88E8                    	MOV	AL,CH
 13264 00001CBF 88D4                    	MOV	AH,DL
 13265                                  	;mov	[si+0Ch], ax
 13266 00001CC1 89440C                  	MOV	[SI+SYS_FCB.EXTENT],AX	; all done
 13267 00001CC4 5A                      	pop	dx
 13268 00001CC5 58                      	pop	ax
 13269 00001CC6 C3                      	retn
 13270                                  
 13271                                  ;Break <GetExtended - find FCB in potential extended fcb>
 13272                                  ;---------------------------------------------------------------------------
 13273                                  ;
 13274                                  ;   GetExtended - Make DS:SI point to FCB from DS:DX
 13275                                  ;
 13276                                  ;   Inputs:	DS:DX point to a possible extended FCB
 13277                                  ;   Outputs:	DS:SI point to the FCB part
 13278                                  ;		zeroflag set if not extended fcb
 13279                                  ;   Registers modified: SI
 13280                                  ;---------------------------------------------------------------------------
 13281                                  
 13282                                  GetExtended:
 13283 00001CC7 89D6                    	MOV	SI,DX			; point to Something
 13284 00001CC9 803CFF                  	CMP	BYTE [SI],-1		; look for extention
 13285 00001CCC 7503                    	JNZ	short GetBye		; not there
 13286 00001CCE 83C607                  	ADD	SI,7			; point to FCB
 13287                                  GetBye:
 13288 00001CD1 39D6                    	CMP	SI,DX			; set condition codes
 13289                                  getextd_retn:
 13290 00001CD3 C3                      	retn
 13291                                  
 13292                                  ;Break <GetRecSize - return in BX the FCB record size>
 13293                                  ;---------------------------------------------------------------------------
 13294                                  ;
 13295                                  ;   GetRecSize - return in BX the record size from the FCB at DS:SI
 13296                                  ;
 13297                                  ;   Inputs:	DS:SI point to a non-extended FCB
 13298                                  ;   Outputs:	BX contains the record size
 13299                                  ;   Registers modified: None
 13300                                  ;---------------------------------------------------------------------------
 13301                                  
 13302                                  	; 07/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 13303                                  GetRecSize:
 13304                                  	;mov	bx,[si+0Eh]
 13305 00001CD4 8B5C0E                  	MOV	BX,[SI+SYS_FCB.RECSIZ]	; get his record size
 13306 00001CD7 09DB                    	OR	BX,BX			; is it nul?
 13307 00001CD9 74F8                    	jz	short getextd_retn
 13308 00001CDB BB8000                  	MOV	BX,128			; use default size
 13309                                  	;mov	[si+0Eh],bx
 13310 00001CDE 895C0E                  	MOV	[SI+SYS_FCB.RECSIZ],BX	; stuff it back
 13311 00001CE1 C3                      	retn
 13312                                  
 13313                                  ;BREAK <FCBIO - do internal FCB I/O>
 13314                                  ;---------------------------------------------------------------------------
 13315                                  ;
 13316                                  ;   FCBIO - look at FCBOP and merge all FCB operations into a single routine.
 13317                                  ;
 13318                                  ;   Inputs:	FCBOP flags which operations need to be performed
 13319                                  ;		DS:DX point to FCB
 13320                                  ;		CX may have count of number of records to xfer
 13321                                  ;   Outputs:	AL has error code
 13322                                  ;   Registers modified: all
 13323                                  ;---------------------------------------------------------------------------
 13324                                  
 13325                                  	; 09/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 13326                                  	; DOSCODE:5B17h (MSDOS 5.0 MSDOS.SYS)
 13327                                  FCBIO:
 13328                                  
 13329                                  FEOF	EQU	1
 13330                                  FTRIM	EQU	2
 13331                                  
 13332                                  %define	FCBErr	byte [bp-1]  ; byte	
 13333                                  %define	cRec	word [bp-3]  ; word	
 13334                                  ;%define RecPos	word [bp-7]  ; dword
 13335                                  %define RecPosL	word [bp-7]  ; word
 13336                                  %define RecPosH	word [bp-5]  ; word
 13337                                  %define	RecSize	word [bp-9]  ; word
 13338                                  ;%define bPos	word [bp-13] ; dword
 13339                                  %define bPosL	word [bp-13] ; word
 13340                                  %define bPosH	word [bp-11] ; word
 13341                                  %define cByte	word [bp-15] ; word	
 13342                                  %define cResult word [bp-17] ; word	
 13343                                  %define	cRecRes	word [bp-19] ; word
 13344                                  %define	FCBOp	byte [bp-20] ; byte
 13345                                  
 13346                                  	;Enter
 13347                                  
 13348 00001CE2 55                      	push	bp
 13349 00001CE3 89E5                    	mov	bp,sp
 13350 00001CE5 83EC14                  	sub	sp,20
 13351                                  	;mov	[bp-20],al
 13352 00001CE8 8846EC                  	MOV	FCBOp,AL
 13353                                  	;mov	byte [bp-1],0
 13354 00001CEB C646FF00                	MOV	FCBErr,0		;   FCBErr = 0;
 13355 00001CEF E8D5FF                  	call	GetExtended		;   FCB = GetExtended ();
 13356                                  	;test	byte [bp-20],8
 13357 00001CF2 F646EC08                	TEST	FCBOp,BLOCK		;   if ((OP&BLOCK) == 0)
 13358 00001CF6 7503                    	JNZ	short GetPos
 13359 00001CF8 B90100                  	MOV	CX,1			;	cRec = 1;
 13360                                  GetPos:
 13361                                  	;mov	[bp-3],cx
 13362 00001CFB 894EFD                  	MOV	cRec,CX 		;*Tail coalesce
 13363 00001CFE E899FF                  	call	GetExtent		;   RecPos = GetExtent ();
 13364 00001D01 E8D0FF                  	call	GetRecSize		;   RecSize = GetRecSize ();
 13365                                  	;mov	[bp-9],bx
 13366 00001D04 895EF7                  	MOV	RecSize,BX
 13367                                  	;test	byte [bp-20],2
 13368 00001D07 F646EC02                	TEST	FCBOp,RANDOM		;   if ((OP&RANDOM) <> 0)
 13369 00001D0B 7403                    	JZ	short GetRec
 13370 00001D0D E87CFF                  	call	GetRR			;	RecPos = GetRR ();
 13371                                  GetRec:
 13372                                  	;mov	[bp-7],ax
 13373 00001D10 8946F9                  	MOV	RecPosL,AX		;*Tail coalesce
 13374                                  	;mov	[bp-5],dx
 13375 00001D13 8956FB                  	MOV	RecPosH,DX
 13376 00001D16 E894FF                  	call	SetExtent		;   SetExtent (RecPos);
 13377                                  	;mov	ax,[bp-5]
 13378 00001D19 8B46FB                  	MOV	AX,RecPosH		;   bPos = RecPos * RecSize;
 13379 00001D1C F7E3                    	MUL	BX
 13380 00001D1E 89C7                    	MOV	DI,AX
 13381                                  	;mov	ax,[bp-7]
 13382 00001D20 8B46F9                  	MOV	AX,RecPosL
 13383 00001D23 F7E3                    	MUL	BX
 13384 00001D25 01FA                    	ADD	DX,DI
 13385                                  	;mov	[bp-13],ax
 13386 00001D27 8946F3                  	MOV	bPosL,AX
 13387                                  	;mov	[bp-11],dx
 13388 00001D2A 8956F5                  	MOV	bPosH,DX
 13389                                  	;mov	ax,[bp-3]
 13390 00001D2D 8B46FD                  	MOV	AX,cRec 		;   cByte = cRec * RecSize;
 13391 00001D30 F7E3                    	MUL	BX
 13392                                  	;mov	[bp-15],ax
 13393 00001D32 8946F1                  	MOV	cByte,AX
 13394                                  
 13395                                  ;hkn; 	SS override
 13396 00001D35 360306[2C03]            	ADD	AX,[SS:DMAADD]		;   if (cByte+DMA > 64K) {
 13397 00001D3A 83D200                  	ADC	DX,0
 13398 00001D3D 7419                    	JZ	short DoOper
 13399                                  	;mov	byte [bp-1],2
 13400 00001D3F C646FF02                	MOV	FCBErr,FTRIM		;	FCBErr = FTRIM;
 13401                                  
 13402                                  ;hkn; 	SS override
 13403 00001D43 36A1[2C03]              	MOV	AX,[SS:DMAADD]		;	cRec = (64K-DMA)/RecSize;
 13404 00001D47 F7D8                    	NEG	AX
 13405 00001D49 7501                    	JNZ	short DoDiv
 13406 00001D4B 48                      	DEC	AX
 13407                                  DoDiv:
 13408 00001D4C 31D2                    	XOR	DX,DX
 13409 00001D4E F7F3                    	DIV	BX
 13410                                  	;mov	[bp-3],ax
 13411 00001D50 8946FD                  	MOV	cRec,AX
 13412 00001D53 F7E3                    	MUL	BX			;	cByte = cRec * RecSize;
 13413                                  	;mov	[bp-15],ax
 13414 00001D55 8946F1                  	MOV	cByte,AX		;	}
 13415                                  DoOper:
 13416 00001D58 31DB                    	XOR	BX,BX
 13417                                  	;mov	[bp-17],bx
 13418 00001D5A 895EEF                  	MOV	cResult,BX		;   cResult = 0;
 13419                                  	;cmp	[bp-15],bx
 13420 00001D5D 395EF1                  	CMP	cByte,BX		;   if (cByte <> 0 ||
 13421 00001D60 7506                    	JNZ	short DoGetExt
 13422                                  	;test	byte [bp-1],2
 13423 00001D62 F646FF02                	TEST	FCBErr,FTRIM		;	(FCBErr&FTRIM) == 0) {
 13424                                  	;JZ	short DoGetExt
 13425                                  	;JMP	short SkipOp
 13426                                  	; 16/12/2022
 13427 00001D66 7576                    	jnz	short SkipOp
 13428                                  	; 09/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 13429                                  	;JZ	short DoGetExt
 13430                                  	;JMP	short SkipOp
 13431                                  DoGetExt:
 13432 00001D68 E8CAFE                  	call	SFTFromFCB		;	if (!SFTFromFCB (SFT,FCB))
 13433 00001D6B 730F                    	JNC	short ContinueOp
 13434                                  FCBDeath:
 13435 00001D6D E8F8E8                  	call	FCB_RET_ERR		; signal error, map for extended
 13436                                  	;mov	word [bp-19],0
 13437 00001D70 C746ED0000              	MOV	cRecRes,0		; no bytes transferred
 13438                                  	;mov	byte [bp-1],1
 13439 00001D75 C646FF01                	MOV	FCBErr,FEOF		;	    return FTRIM;
 13440 00001D79 E9EF00                  	JMP	FCBSave 		; bam!
 13441                                  ContinueOp:
 13442                                  	;mov	ax,[si+10h]
 13443 00001D7C 8B4410                  	MOV	AX,[SI+SYS_FCB.FILSIZ]
 13444                                  	;mov	[es:di+11h],ax
 13445 00001D7F 26894511                	MOV	[ES:DI+SF_ENTRY.sf_size],AX
 13446                                  	;mov	ax,[si+12h]
 13447 00001D83 8B4412                  	MOV	AX,[SI+SYS_FCB.FILSIZ+2]
 13448                                  	;mov	[es:di+13h],ax
 13449 00001D86 26894513                	MOV	[ES:DI+SF_ENTRY.sf_size+2],AX
 13450                                  	;mov	ax,[bp-13]
 13451 00001D8A 8B46F3                  	MOV	AX,bPosL
 13452                                  	;mov	dx,[bp-11]
 13453 00001D8D 8B56F5                  	MOV	DX,bPosH
 13454                                  	;mov	[es:di+15h],ax
 13455 00001D90 26894515                	MOV	[ES:DI+SF_ENTRY.sf_position],AX
 13456                                  	;xchg	dx,[es:di+17h]
 13457 00001D94 26875517                	XCHG	[ES:DI+SF_ENTRY.sf_position+2],DX
 13458 00001D98 52                      	PUSH	DX			; save away Open age.
 13459                                  	;mov	cx,[bp-15]
 13460 00001D99 8B4EF1                  	MOV	CX,cByte		;	cResult =
 13461                                  
 13462                                  ;hkn; DOS_Read is in DOSCODE
 13463 00001D9C BF[6333]                	MOV	DI,DOS_READ		;	    *(OP&FCBRead ? DOS_Read
 13464                                  	;test	byte [bp-20],4
 13465 00001D9F F646EC04                	TEST	FCBOp,FCBREAD		;		 : DOS_Write)(cRec);
 13466 00001DA3 7503                    	JNZ	short DoContext
 13467                                  
 13468                                  ;hkn; DOS_Write is in DOSCODE
 13469 00001DA5 BF[8C35]                	MOV	DI,DOS_WRITE
 13470                                  DoContext:
 13471 00001DA8 55                      	push	bp
 13472 00001DA9 1E                      	push	ds
 13473 00001DAA 56                      	push	si
 13474                                  
 13475                                  ;hkn; SS is DOSDATA
 13476 00001DAB 16                      	push	ss
 13477 00001DAC 1F                      	pop	ds
 13478                                  
 13479                                  ;; Fix for disk full
 13480 00001DAD FFD7                    	CALL	DI	; DOS_READ or DOS_WRITE	
 13481                                  	
 13482 00001DAF 5E                      	pop	si
 13483 00001DB0 1F                      	pop	ds
 13484 00001DB1 5D                      	pop	bp
 13485 00001DB2 72B9                    	JC	short FCBDeath
 13486                                  	
 13487 00001DB4 36803E[0B06]00          	CMP	BYTE [SS:DISK_FULL],0	; treat disk full as error
 13488 00001DBA 740A                    	JZ	short NODSKFULL
 13489 00001DBC 36C606[0B06]00          	MOV	BYTE [SS:DISK_FULL],0	; clear the flag
 13490                                  	;mov	byte [bp-1],1 
 13491 00001DC2 C646FF01                	MOV	FCBErr,FEOF		; set disk full flag
 13492                                  NODSKFULL:
 13493                                  ;; Fix for disk full
 13494                                  	;mov	[bp-17],cx
 13495 00001DC6 894EEF                  	MOV	cResult,CX
 13496 00001DC9 E827FB                  	call	SaveFCBInfo		;	SaveFCBInfo (FCB);
 13497                                  	;pop	word [es:di+17h]	
 13498 00001DCC 268F4517                	POP	WORD [ES:DI+SF_ENTRY.sf_position+2] ; restore open age
 13499                                  			       ; (sf_OpenAge = SF_ENTRY.sf_position+2)			
 13500                                  	;mov	ax,[es:di+11h]
 13501 00001DD0 268B4511                	MOV	AX,[ES:DI+SF_ENTRY.sf_size]
 13502                                  	;mov	[si+10h],ax
 13503 00001DD4 894410                  	MOV	[SI+SYS_FCB.FILSIZ],AX
 13504                                  	;mov	ax,[es:di+13h]
 13505 00001DD7 268B4513                	MOV	AX,[ES:DI+SF_ENTRY.sf_size+2]
 13506                                  	;mov	[si+12h],ax
 13507 00001DDB 894412                  	MOV	[SI+SYS_FCB.FILSIZ+2],AX
 13508                                  					;	}
 13509                                  SkipOp:
 13510                                  	;mov	ax,[bp-17]
 13511 00001DDE 8B46EF                  	MOV	AX,cResult		;   cRecRes = cResult / RecSize;
 13512 00001DE1 31D2                    	XOR	DX,DX
 13513                                  	;div	word [bp-9]
 13514 00001DE3 F776F7                  	DIV	RecSize
 13515                                  	;mov	[bp-19],ax
 13516 00001DE6 8946ED                  	MOV	cRecRes,AX
 13517                                  	;add	[bp-7],ax
 13518 00001DE9 0146F9                  	ADD	RecPosL,AX		;   RecPos += cRecResult;
 13519                                  	;adc	word [bp-5],0
 13520 00001DEC 8356FB00                	ADC	RecPosH,0
 13521                                  
 13522                                  ; If we have not gotten the expected number of records, we signal an EOF
 13523                                  ; condition. On input, this is EOF. On output this is usually disk full.
 13524                                  ; BUT... Under 2.0 and before, all device output IGNORED this condition. So
 13525                                  ; do we.
 13526                                  
 13527                                  	;cmp	ax,[bp-3]
 13528 00001DF0 3B46FD                  	CMP	AX,cRec 		;   if (cRecRes <> cRec)
 13529 00001DF3 7411                    	JZ	short TryBlank
 13530                                  	;test	byte [bp-20],4
 13531 00001DF5 F646EC04                	TEST	FCBOp,FCBREAD		;	if (OP&FCBRead || !DEVICE)
 13532 00001DF9 7507                    	JNZ	short SetEOF
 13533                                  	; 07/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 13534                                  	; MSDOS 3.3
 13535                                  	;;test	word [es:di+5],80h
 13536                                  	;TEST	word [ES:DI+SF_ENTRY.sf_flags],devid_device
 13537                                  	;JNZ	short TryBlank
 13538                                  	; MSDOS 5.0 & MSDOS 6.0
 13539                                  	;test	byte [es:di+5],80h
 13540 00001DFB 26F6450580              	test	byte [ES:DI+SF_ENTRY.sf_flags],devid_device
 13541 00001E00 7504                    	jnz	short TryBlank
 13542                                  
 13543                                  SetEOF:
 13544                                  	;mov	byte [bp-1],1
 13545 00001E02 C646FF01                	MOV	FCBErr,FEOF		;	FCBErr = FEOF;
 13546                                  TryBlank:				;
 13547 00001E06 09D2                    	OR	DX,DX			;   if (cResult%RecSize <> 0) {
 13548 00001E08 7426                    	JZ	short SetExt
 13549                                  	;add	word [bp-7],1
 13550 00001E0A 8346F901                	ADD	RecPosL,1		;	RecPos++;
 13551                                  	;adc	word [bp-5],0
 13552 00001E0E 8356FB00                	ADC	RecPosH,0
 13553                                  	;test	byte [bp-20],4
 13554 00001E12 F646EC04                	TEST	FCBOp,FCBREAD		;	if(OP&FCBRead) <> 0) {
 13555 00001E16 7418                    	JZ	short SetExt
 13556                                  	;inc	word [bp-19]
 13557 00001E18 FF46ED                  	INC	cRecRes 		;	cRecRes++;
 13558                                  	;mov	byte [bp-1],3
 13559 00001E1B C646FF03                	MOV	FCBErr,FTRIM+FEOF	;	FCBErr = FTRIM | FEOF;
 13560                                  	;mov	cx,[bp-9]
 13561 00001E1F 8B4EF7                  	MOV	CX,RecSize		;	Blank (RecSize-cResult%RecSize,
 13562 00001E22 29D1                    	SUB	CX,DX			;	       DMA+cResult);
 13563 00001E24 30C0                    	XOR	AL,AL
 13564                                  ;hkn; 	SS override
 13565 00001E26 36C43E[2C03]            	les     di,[ss:DMAADD]
 13566                                  	;add	di,[bp-17]
 13567 00001E2B 037EEF                  	ADD	DI,cResult
 13568 00001E2E F3AA                    	REP	STOSB			;   }	}
 13569                                  SetExt:
 13570                                  	;mov	dx,[bp-5]
 13571 00001E30 8B56FB                  	MOV	DX,RecPosH
 13572                                  	;mov	ax,[bp-7]
 13573 00001E33 8B46F9                  	MOV	AX,RecPosL
 13574                                  	;test	byte [bp-20],2
 13575 00001E36 F646EC02                	TEST	FCBOp,RANDOM		;   if ((OP&Random) == 0 ||
 13576 00001E3A 7406                    	JZ	short DoSetExt
 13577                                  	;test	byte [bp-20],8
 13578 00001E3C F646EC08                	TEST	FCBOp,BLOCK		;	(OP&BLOCK) <> 0)
 13579 00001E40 7403                    	JZ	short TrySetRR
 13580                                  DoSetExt:
 13581 00001E42 E868FE                  	call	SetExtent		;	SetExtent (RecPos, FCB);
 13582                                  TrySetRR:
 13583                                  	;test	byte [bp-20],8
 13584 00001E45 F646EC08                	TEST	FCBOp,BLOCK		;   if ((op&BLOCK) <> 0)
 13585 00001E49 740F                    	JZ	short TryReturn
 13586                                  	;mov	[si+21h],ax
 13587 00001E4B 894421                  	MOV	[SI+SYS_FCB.RR],AX	;	FCB->RR = RecPos;
 13588                                  	;mov	[si+23h],dl
 13589 00001E4E 885423                  	MOV	[SI+SYS_FCB.RR+2],DL
 13590                                  	;cmp	word [si+0Eh],64
 13591 00001E51 837C0E40                	CMP	word [SI+SYS_FCB.RECSIZ],64
 13592 00001E55 7303                    	JAE	short TryReturn
 13593                                  	;mov	[si+24h],dh
 13594 00001E57 887424                  	MOV	[SI+SYS_FCB.RR+2+1],DH	; Set 4th byte only if record size < 64
 13595                                  TryReturn: 
 13596                                  	;test	byte [bp-20],4
 13597 00001E5A F646EC04                	TEST	FCBOp,FCBREAD		;   if (!(FCBOP & FCBREAD)) {
 13598 00001E5E 750B                    	JNZ	short FCBSave
 13599 00001E60 1E                      	push	ds			;	FCB->FDate = date;
 13600 00001E61 E8ABEC                  	call	DATE16			;	FCB->FTime = time;
 13601 00001E64 1F                      	pop	ds
 13602                                  	;mov	[si+14h],ax
 13603 00001E65 894414                  	MOV	[SI+SYS_FCB.FDATE],AX
 13604                                  	;mov	[si+16h],dx
 13605 00001E68 895416                  	MOV	[SI+SYS_FCB.FTIME],DX	;	}
 13606                                  FCBSave: 
 13607                                  	;test	byte [bp-20],8
 13608 00001E6B F646EC08                	TEST	FCBOp,BLOCK		;   if ((op&BLOCK) <> 0)
 13609 00001E6F 7409                    	jz	short DoReturn
 13610                                  	;mov	cx,[bp-19]
 13611 00001E71 8B4EED                  	MOV	CX,cRecRes		;	user_CX = cRecRes;
 13612 00001E74 E818E6                  	call    Get_User_Stack
 13613                                  	;mov	[si+4],cx
 13614 00001E77 894C04                  	MOV	[SI+user_env.user_CX],CX
 13615                                  DoReturn:
 13616                                  	;mov	al,[bp-1]
 13617 00001E7A 8A46FF                  	MOV	AL,FCBErr		;   return (FCBERR);
 13618                                  	;Leave	
 13619 00001E7D 89EC                    	mov     sp,bp
 13620 00001E7F 5D                      	pop     bp
 13621 00001E80 C3                      	retn
 13622                                  
 13623                                  ; 22/07/2018 - Retro DOS v3.0
 13624                                  
 13625                                  ;Break <$FCB_Open - open an old-style FCB>
 13626                                  ;---------------------------------------------------------------------------
 13627                                  ;
 13628                                  ;   $FCB_Open - CPM compatability file open. The user has formatted an FCB
 13629                                  ;	for us and asked to have the rest filled in.
 13630                                  ;
 13631                                  ;   Inputs:	DS:DX point to an unopenned FCB
 13632                                  ;   Outputs:	AL indicates status 0 is ok FF is error
 13633                                  ;		FCB has the following fields filled in:
 13634                                  ;		    Time/Date Extent/NR Size
 13635                                  ;---------------------------------------------------------------------------
 13636                                  
 13637                                  _$FCB_OPEN:			; System call 15
 13638                                  
 13639 00001E81 B80200                  	MOV	AX,SHARING_COMPAT+open_for_both
 13640                                  
 13641                                  ;hkn; DOS_Open is in DOSCODE
 13642 00001E84 B9[E42B]                	MOV	CX,DOS_OPEN
 13643                                  
 13644                                  ; The following is common code for Creation and openning of FCBs. AX is
 13645                                  ; either attributes (for create) or open mode (for open)... DS:DX points to
 13646                                  ; the FCB
 13647                                  
 13648                                  DoAccess:
 13649 00001E87 1E                      	push	ds
 13650 00001E88 52                      	push	dx
 13651 00001E89 51                      	push	cx
 13652 00001E8A 50                      	push	ax			; save FCB pointer away
 13653                                  
 13654                                  ;hkn; 	OpenBuf is in DOSDATA
 13655 00001E8B BF[BE03]                	MOV	DI,OPENBUF
 13656 00001E8E E87B4D                  	call	TransFCB		; crunch the fcb
 13657 00001E91 58                      	pop	ax
 13658 00001E92 59                      	pop	cx
 13659 00001E93 5A                      	pop	dx
 13660 00001E94 1F                      	pop	ds			; get fcb
 13661 00001E95 7303                    	JNC	short FindFCB		; everything seems ok
 13662                                  FCBOpenErr:
 13663                                  	; AL has error code
 13664 00001E97 E9CEE7                  	jmp	FCB_RET_ERR
 13665                                  FindFCB:
 13666 00001E9A E82AFE                  	call	GetExtended		; DS:SI will point to FCB
 13667                                  
 13668                                  	; 17/05/2019 - Retro DOS v4.0
 13669                                  
 13670                                  	; MSDOS 3.3
 13671                                  	;call	LRUFCB
 13672                                  	;jc	short HardMessage
 13673                                  
 13674                                  	; MSDOS 6.0
 13675 00001E9D 50                      	push	ax
 13676 00001E9E B001                    	mov	al,1			;indicate Open/Create operation
 13677 00001EA0 E820FB                  	call	LRUFCB			; get a sft entry (no error)
 13678 00001EA3 58                      	pop	ax
 13679 00001EA4 722A                    	jc	short HardMessage
 13680                                  	
 13681                                  	;mov	word [es:di+2],8000h
 13682 00001EA6 26C745020080            	mov	word [es:di+SF_ENTRY.sf_mode],sf_isFCB
 13683 00001EAC 1E                      	push	ds
 13684 00001EAD 56                      	push	si	
 13685 00001EAE 53                      	push	bx			; save fcb pointer
 13686 00001EAF 89CE                    	MOV	SI,CX
 13687                                  
 13688                                  ;hkn; SS is DOSDATA
 13689 00001EB1 16                      	push	ss
 13690 00001EB2 1F                      	pop	ds			    ; let DOS_Open see variables
 13691 00001EB3 FFD6                    	CALL	SI ; DOS_OPEN or DOS_CREATE ; go open the file
 13692 00001EB5 5B                      	pop	bx
 13693 00001EB6 5E                      	pop	si
 13694 00001EB7 1F                      	pop	ds			; get fcb
 13695                                  
 13696                                  ;hkn; SS override
 13697 00001EB8 36C43E[9E05]            	LES	DI,[SS:THISSFT]		; get sf pointer
 13698 00001EBD 7318                    	JNC	short FCBOK		; operation succeeded
 13699                                  failopen:
 13700 00001EBF 50                      	PUSH	AX
 13701 00001EC0 B052                    	MOV	AL,"R"	; 52h		; clear out field (free sft)
 13702 00001EC2 E8E5FC                  	call	BlastSFT
 13703 00001EC5 58                      	POP	AX
 13704                                  	;cmp	ax,4
 13705 00001EC6 83F804                  	CMP	AX,error_too_many_open_files
 13706 00001EC9 7405                    	JZ	short HardMessage
 13707                                  	;cmp	ax,24h
 13708 00001ECB 83F824                  	CMP	AX,error_sharing_buffer_exceeded
 13709 00001ECE 7505                    	jnz	short DeadFCB
 13710                                  HardMessage:
 13711 00001ED0 50                      	PUSH	AX
 13712 00001ED1 E897FD                  	call	FCBHardErr
 13713 00001ED4 58                      	POP	AX
 13714                                  DeadFCB:
 13715                                  	; 07/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 13716                                  	;jmp	FCB_RET_ERR
 13717 00001ED5 EBC0                    	jmp	short FCBOpenErr
 13718                                  FCBOK:
 13719                                  	; MSDOS 6.0
 13720 00001ED7 E8D2F3                  	call	IsSFTNet		;AN007;F.C. >32mb  Non Fat file?
 13721 00001EDA 750F                    	JNZ	short FCBOK2		;AN007;F.C. >32mb  yes
 13722 00001EDC E85A55                  	call	CheckShare		;AN000;F.C. >32mb  share around?
 13723 00001EDF 750A                    	JNZ	short FCBOK2		;AN000;F.C. >32mb  yes
 13724                                  ;SR;
 13725                                  ; If we reach here, we know we have got a local SFT. Let's update the 
 13726                                  ; LocalSFT variable to reflect this.
 13727                                  
 13728 00001EE1 36893E[4310]            	mov	[ss:LocalSFT],di
 13729 00001EE6 368C06[4510]            	mov	[ss:LocalSFT+2],es; Store the SFT address
 13730                                  ;;SR;
 13731                                  ;; The check below is not valid anymore since we regenerate for media > 32M.
 13732                                  ;;
 13733                                  ;;	CMP	WORD [ES:DI+SF_ENTRY.sf_dirsec+2],0 
 13734                                  ;;					       ;AN000;F.C. >32mb  if dirsec >32mb
 13735                                  ;;	JZ	short FCBOK2		       ;AN000;F.C. >32mb    then error
 13736                                  ;;	MOV	AX,error_sys_comp_not_loaded   ;AN000;F.C. >32mb
 13737                                  ;;	JMP	short failopen		       ;AN000;F.C. >32mb
 13738                                  
 13739                                  FCBOK2:
 13740                                  	; MSDOS 6.0 (& MSDOS 3.3)
 13741 00001EEB 26FF05                  	inc	word [es:di]
 13742                                  	;INC	word [ES:DI+SF_ENTRY.sf_ref_count] ; increment reference count
 13743 00001EEE E802FA                  	call	SaveFCBInfo
 13744                                  	; MSDOS 3.3
 13745                                  	;call	SetOpenAge
 13746                                  	; MSDOS 6.0 (& MSDOS 3.3)
 13747                                  	;test	word [es:di+5],80h
 13748                                  	;TEST	word [ES:DI+SF_ENTRY.sf_flags],devid_device
 13749 00001EF1 26F6450580              	test	byte [ES:DI+SF_ENTRY.sf_flags],devid_device  ; 28/07/2019
 13750 00001EF6 7508                    	JNZ	short FCBNoDrive	; do not munge drive on devices
 13751 00001EF8 8A04                    	MOV	AL,[SI]			; get drive byte
 13752 00001EFA E8964C                  	call	GETTHISDRV		; convert
 13753                                  	;INC	AL
 13754                                  	; 17/12/2022
 13755 00001EFD 40                      	inc	ax
 13756 00001EFE 8804                    	MOV	[SI],AL			; stash in good drive letter
 13757                                  FCBNoDrive:
 13758                                  	;mov	word [si+0Eh],128
 13759 00001F00 C7440E8000              	MOV	word [SI+SYS_FCB.RECSIZ],80h ; stuff in default record size
 13760                                  
 13761                                  	;mov	ax,[es:di+0Dh]
 13762 00001F05 268B450D                	MOV	AX,[ES:DI+SF_ENTRY.sf_time] ; set time
 13763                                  	;mov	[si+16h],ax
 13764 00001F09 894416                  	MOV	[SI+SYS_FCB.FTIME],AX
 13765                                  	;mov	ax,[es:di+0Fh]
 13766 00001F0C 268B450F                	MOV	AX,[ES:DI+SF_ENTRY.sf_date] ; set date
 13767                                  	;mov	[si+14h],ax
 13768 00001F10 894414                  	MOV	[SI+SYS_FCB.FDATE],AX
 13769                                  	;mov	ax,[es:di+11h]
 13770 00001F13 268B4511                	MOV	AX,[ES:DI+SF_ENTRY.sf_size] ; set sizes
 13771                                  	;mov	[si+10h],ax
 13772 00001F17 894410                  	MOV	[SI+SYS_FCB.FILSIZ],AX
 13773                                  	;mov	ax,[es:di+13h]
 13774 00001F1A 268B4513                	MOV	AX,[ES:DI+SF_ENTRY.sf_size+2]
 13775                                  	;mov	[si+12h],ax
 13776 00001F1E 894412                  	MOV	[SI+SYS_FCB.FILSIZ+2],AX
 13777 00001F21 31C0                    	XOR	AX,AX			; convenient zero
 13778                                  	;mov	[si+0Ch],ax
 13779 00001F23 89440C                  	MOV	[SI+SYS_FCB.EXTENT],AX	; point to beginning of file
 13780                                  
 13781                                  ; We must scan the set of FCB SFTs for one that appears to match the current
 13782                                  ; one.	We cheat and use CheckFCB to match the FCBs.
 13783                                  
 13784                                  ;hkn; 	SS override
 13785 00001F26 36C43E[4000]            	LES	DI,[SS:SFTFCB]		; get the pointer to head of the list
 13786                                  	;mov	ah,[es:di+4]
 13787 00001F2B 268A6504                	MOV	AH,[ES:DI+SFT.SFCount]	; get number of SFTs to scan
 13788                                  OpenScan:
 13789                                  	;cmp	al,[si+18h]
 13790 00001F2F 3A4418                  	CMP	AL,[SI+fcb_sfn]		; don't compare ourselves
 13791 00001F32 7407                    	JZ	short SkipCheck
 13792 00001F34 50                      	push	ax			; preserve count
 13793 00001F35 E888FC                  	call	CheckFCB		; do they match
 13794 00001F38 58                      	pop	ax			; get count back
 13795 00001F39 7309                    	JNC	short OpenFound		; found a match!
 13796                                  SkipCheck:
 13797 00001F3B FEC0                    	INC	AL			; advance to next FCB
 13798 00001F3D 38E0                    	CMP	AL,AH			; table full?
 13799 00001F3F 75EE                    	JNZ	short OpenScan		; no, go for more
 13800                                  OpenDone:
 13801 00001F41 30C0                    	xor	al,al			; return success
 13802 00001F43 C3                      	retn
 13803                                  
 13804                                  ; The SFT at ES:DI is the one that is already in use for this FCB. We set the
 13805                                  ; FCB to use this one. We increment its ref count. We do NOT close it at all.
 13806                                  ; Consider:
 13807                                  ;
 13808                                  ;   open (foo)	delete (foo) open (bar)
 13809                                  ;
 13810                                  ; This causes us to recycle (potentially) bar through the same local SFT as
 13811                                  ; foo even though foo is no longer needed; this is due to the server closing
 13812                                  ; foo for us when we delete it. Unfortunately, we cannot see this closure.
 13813                                  ; If we were to CLOSE bar, the server would then close the only reference to
 13814                                  ; bar and subsequent I/O would be lost to the redirector.
 13815                                  ;
 13816                                  ; This gets solved by NOT closing the sft, but zeroing the ref count
 13817                                  ; (effectively freeing the SFT) and informing the sharer (if relevant) that
 13818                                  ; the SFT is no longer in use. Note that the SHARER MUST keep its ref counts
 13819                                  ; around. This will allow us to access the same file through multiple network
 13820                                  ; connections and NOT prematurely terminate when the ref count on one
 13821                                  ; connection goes to zero.
 13822                                  
 13823                                  OpenFound:
 13824                                  	;mov	[si+18h],al
 13825 00001F44 884418                  	MOV	[SI+fcb_sfn],AL 	; assign with this
 13826 00001F47 26FF05                  	inc	word [es:di]
 13827                                  	;INC	word [ES:DI+SF_ENTRY.sf_ref_count]
 13828                                  					; remember this new invocation
 13829 00001F4A 36A1[1000]              	MOV	AX,[SS:FCBLRU]		; update LRU counts
 13830                                  	;mov	[es:di+15h],ax
 13831 00001F4E 26894515                	MOV	[ES:DI+sf_LRU],AX
 13832                                  ;
 13833                                  ; We have an FCB sft that is now of no use.  We release sharing info and then
 13834                                  ; blast it to prevent other reuse.
 13835                                  ;
 13836 00001F52 16                      	push	ss
 13837 00001F53 1F                      	pop	ds
 13838 00001F54 C43E[9E05]              	LES	DI,[THISSFT]
 13839 00001F58 26FF0D                  	dec	word [es:di]
 13840                                  	;DEC	word [ES:DI+SF_ENTRY.sf_ref_count]
 13841                                  					; free the newly allocated SFT
 13842 00001F5B E81355                  	call	ShareEnd
 13843 00001F5E B043                    	MOV	AL,'C'	 ; 43h
 13844 00001F60 E847FC                  	call	BlastSFT
 13845 00001F63 EBDC                    	JMP	short OpenDone
 13846                                  
 13847                                  ;BREAK	<$FCB_Create - create a new directory entry>
 13848                                  ;----------------------------------------------------------------------------
 13849                                  ;
 13850                                  ;   $FCB_Create - CPM compatability file create. The user has formatted an
 13851                                  ;	FCB for us and asked to have the rest filled in.
 13852                                  ;
 13853                                  ;   Inputs:	DS:DX point to an unopenned FCB
 13854                                  ;   Outputs:	AL indicates status 0 is ok FF is error
 13855                                  ;		FCB has the following fields filled in:
 13856                                  ;		    Time/Date Extent/NR Size
 13857                                  ;----------------------------------------------------------------------------
 13858                                  
 13859                                  _$FCB_CREATE:		; System call 22
 13860                                  
 13861                                  ;hkn; DOS_Create is in DOSCODE
 13862 00001F65 B9[BA2A]                	MOV	CX,DOS_CREATE		; routine to call
 13863 00001F68 31C0                    	XOR	AX,AX			; attributes to create
 13864 00001F6A E85AFD                  	call	GetExtended		; get extended FCB
 13865 00001F6D 7403                    	JZ	short DoAccessJ		; not an extended FCB
 13866 00001F6F 8A44FF                  	MOV	AL,[SI-1]		; get attributes
 13867                                  DoAccessJ:
 13868 00001F72 E912FF                  	JMP	DoAccess		; do dirty work
 13869                                  
 13870                                  ; 22/07/2018 - Retro DOS v3.0
 13871                                  
 13872                                  ;BREAK <$FCB_Random_write_Block - write a block of records to a file >
 13873                                  ;----------------------------------------------------------------------------
 13874                                  ;
 13875                                  ;   $FCB_Random_Write_Block - retrieve a location from the FCB, seek to it
 13876                                  ;	and write a number of blocks from it.
 13877                                  ;
 13878                                  ;   Inputs:	DS:DX point to an FCB
 13879                                  ;   Outputs:	AL = 0 write was successful and the FCB position is updated
 13880                                  ;		AL <> 0 Not enough room on disk for the output
 13881                                  ;
 13882                                  ;----------------------------------------------------------------------------
 13883                                  
 13884                                  _$FCB_RANDOM_WRITE_BLOCK:
 13885                                  	;mov	AL,0Ah	
 13886 00001F75 B00A                    	MOV	AL,RANDOM+BLOCK
 13887 00001F77 E968FD                  	JMP	FCBIO
 13888                                  
 13889                                  ;BREAK <$FCB_Random_Read_Block - read a block of records to a file >
 13890                                  ;----------------------------------------------------------------------------
 13891                                  ;
 13892                                  ;   $FCB_Random_Read_Block - retrieve a location from the FCB, seek to it
 13893                                  ;	and read a number of blocks from it.
 13894                                  ;
 13895                                  ;   Inputs:	DS:DX point to an FCB
 13896                                  ;   Outputs:	AL = error codes defined above
 13897                                  ;
 13898                                  ;----------------------------------------------------------------------------
 13899                                  
 13900                                  _$FCB_RANDOM_READ_BLOCK:
 13901                                  	;mov	AL,0Eh	
 13902 00001F7A B00E                    	MOV	AL,RANDOM+FCBREAD+BLOCK
 13903 00001F7C E963FD                  	JMP	FCBIO
 13904                                  
 13905                                  ;BREAK <$FCB_Seq_Read - read the next record from a file >
 13906                                  ;----------------------------------------------------------------------------
 13907                                  ;
 13908                                  ;   $FCB_Seq_Read - retrieve the next record from an FCB and read it into
 13909                                  ;	memory
 13910                                  ;
 13911                                  ;   Inputs:	DS:DX point to an FCB
 13912                                  ;   Outputs:	AL = error codes defined above
 13913                                  ;
 13914                                  ;----------------------------------------------------------------------------
 13915                                  
 13916                                  _$FCB_SEQ_READ:
 13917                                  	;mov	AL,4	
 13918 00001F7F B004                    	MOV	AL,FCBREAD
 13919 00001F81 E95EFD                  	JMP	FCBIO
 13920                                  
 13921                                  ;BREAK <$FCB_Seq_Write - write the next record to a file >
 13922                                  ;----------------------------------------------------------------------------
 13923                                  ;
 13924                                  ;   $FCB_Seq_Write - retrieve the next record from an FCB and write it to the
 13925                                  ;	file
 13926                                  ;
 13927                                  ;   Inputs:	DS:DX point to an FCB
 13928                                  ;   Outputs:	AL = error codes defined above
 13929                                  ;
 13930                                  ;----------------------------------------------------------------------------
 13931                                  
 13932                                  _$FCB_SEQ_WRITE:
 13933 00001F84 B000                    	MOV	AL,0
 13934 00001F86 E959FD                  	jmp	FCBIO
 13935                                  
 13936                                  ;BREAK <$FCB_Random_Read - Read a single record from a file >
 13937                                  ;----------------------------------------------------------------------------
 13938                                  ;
 13939                                  ;   $FCB_Random_Read - retrieve a location from the FCB, seek to it and read a
 13940                                  ;	record from it.
 13941                                  ;
 13942                                  ;   Inputs:	DS:DX point to an FCB
 13943                                  ;   Outputs:	AL = error codes defined above
 13944                                  ;
 13945                                  ;----------------------------------------------------------------------------
 13946                                  
 13947                                  _$FCB_RANDOM_READ:
 13948                                  	;mov	AL,6	
 13949 00001F89 B006                    	MOV	AL,RANDOM+FCBREAD
 13950 00001F8B E954FD                  	jmp	FCBIO			; single block
 13951                                  
 13952                                  ;BREAK <$FCB_Random_Write - write a single record to a file >
 13953                                  ;----------------------------------------------------------------------------
 13954                                  ;
 13955                                  ;   $FCB_Random_Write - retrieve a location from the FCB, seek to it and write
 13956                                  ;	a record to it.
 13957                                  ;
 13958                                  ;   Inputs:	DS:DX point to an FCB
 13959                                  ;   Outputs:	AL = error codes defined above
 13960                                  ;
 13961                                  ;----------------------------------------------------------------------------
 13962                                  
 13963                                  _$FCB_RANDOM_WRITE:
 13964                                  	;mov	AL,2	
 13965 00001F8E B002                    	MOV	AL,RANDOM
 13966 00001F90 E94FFD                  	jmp	FCBIO
 13967                                  
 13968                                  ;============================================================================
 13969                                  ; SEARCH.ASM, MSDOS 6.0, 1991
 13970                                  ;============================================================================
 13971                                  ; 22/07/2018 - Retro DOS v3.0
 13972                                  ; 17/05/2019 - Retro DOS v4.0
 13973                                  
 13974                                  ; DOSCODE:5DDFh (MSDOS 6.21, MSDOS.SYS)
 13975                                  
 13976                                  ; 09/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 13977                                  ; DOSCODE:5DCBh (MSDOS 5.0, MSDOS.SYS)
 13978                                  
 13979                                  ;**	Search.asm
 13980                                  ;----------------------------------------------------------------------------
 13981                                  ;	Directory search system calls.
 13982                                  ;	These will be passed direct text of the pathname from the user. 
 13983                                  ;	They will need to be passed through the macro expander prior to
 13984                                  ;	being sent through the low-level stuff. 
 13985                                  ;	I/O specs are defined in DISPATCH. The system calls are:
 13986                                  ;
 13987                                  ;	$Dir_Search_First	  written
 13988                                  ;	$Dir_Search_Next	  written
 13989                                  ;	$Find_First	  written
 13990                                  ;	$Find_Next		  written
 13991                                  ;	PackName		  written
 13992                                  ;
 13993                                  ;	Modification history:
 13994                                  ;
 13995                                  ;	  Created: ARR 4 April 1983
 13996                                  
 13997                                  ;----------------------------------------------------------------------------
 13998                                  ; Procedure Name : $DIR_SEARCH_FIRST
 13999                                  ;
 14000                                  ; Inputs:
 14001                                  ;	DS:DX Points to unopenned FCB
 14002                                  ; Function:
 14003                                  ;	Directory is searched for first matching entry and the directory
 14004                                  ;	entry is loaded at the disk transfer address
 14005                                  ; Returns:
 14006                                  ;	AL = -1 if no entries matched, otherwise 0
 14007                                  ;----------------------------------------------------------------------------
 14008                                  
 14009                                  	; IBMDOS.COM (MSDOS 3.3) - Offset 2B88h
 14010                                  
 14011                                  _$DIR_SEARCH_FIRST:
 14012 00001F93 368916[A605]            	MOV	[SS:THISFCB],DX
 14013 00001F98 368C1E[A805]            	MOV	[SS:THISFCB+2],DS
 14014 00001F9D 89D6                    	MOV	SI,DX
 14015 00001F9F 803CFF                  	CMP	BYTE [SI],0FFH
 14016 00001FA2 7503                    	JNZ	short NORMFCB4
 14017 00001FA4 83C607                  	ADD	SI,7			; Point to drive select byte
 14018                                  NORMFCB4:
 14019 00001FA7 FF34                    	push	word [SI]		; Save original drive byte for later
 14020                                  
 14021 00001FA9 16                      	push	ss
 14022 00001FAA 07                      	pop	es			; get es to address DOSGroup
 14023                                  
 14024 00001FAB BF[BE03]                	MOV	DI,OPENBUF		; appropriate buffer
 14025 00001FAE E85B4C                  	call	TransFCB		; convert the FCB, set SATTRIB EXTFCB
 14026 00001FB1 7304                    	JNC	short SearchIt		; no error, go and look
 14027 00001FB3 5B                      	pop	bx			; Clean stack
 14028                                  
 14029                                  ; Error code is in AX
 14030                                  
 14031                                  	; 09/11/2022
 14032                                  dcf_errj:
 14033 00001FB4 E9B1E6                  	jmp	FCB_RET_ERR		; error
 14034                                  
 14035                                  SearchIt:
 14036 00001FB7 16                      	push	ss
 14037 00001FB8 1F                      	pop	ds			; get ready for search
 14038 00001FB9 FF36[2C03]              	push	word [DMAADD]
 14039 00001FBD FF36[2E03]              	push	word [DMAADD+2]
 14040 00001FC1 C706[2C03][BE04]        	MOV	WORD [DMAADD],SEARCHBUF
 14041 00001FC7 8C1E[2E03]              	MOV	WORD [DMAADD+2],DS
 14042                                  	; MSDOS 3.3
 14043                                  	;call	DOS_SEARCH_FIRST
 14044                                  	; MSDOS 6.0
 14045 00001FCB E88501                  	call	GET_FAST_SEARCH		; search
 14046 00001FCE 8F06[2E03]              	pop	word [DMAADD+2]
 14047 00001FD2 8F06[2C03]              	pop	word [DMAADD]
 14048 00001FD6 7303                    	JNC	short SearchSet		; no error, transfer info
 14049 00001FD8 5B                      	pop	bx			; Clean stack
 14050                                  
 14051                                  ; Error code is in AX
 14052                                  
 14053                                  	; 09/11/2022
 14054                                  	;jmp	FCB_RET_ERR
 14055 00001FD9 EBD9                    	jmp	short dcf_errj
 14056                                  
 14057                                  ; The search was successful (or the search-next). We store the information
 14058                                  ; into the user's FCB for continuation.
 14059                                  
 14060                                  SearchSet:
 14061 00001FDB BE[BE04]                	MOV	SI,SEARCHBUF
 14062 00001FDE C43E[A605]              	LES	DI,[THISFCB]		; point to the FCB
 14063 00001FE2 F606[6C05]FF            	TEST	byte [EXTFCB],0FFh		;
 14064 00001FE7 7403                    	JZ	short NORMFCB1
 14065 00001FE9 83C707                  	ADD	DI,7			; Point past the extension
 14066                                  NORMFCB1:
 14067 00001FEC 5B                      	pop	bx			; Get original drive byte
 14068 00001FED 08DB                    	OR	BL,BL
 14069 00001FEF 7506                    	JNZ	short SearchDrv
 14070 00001FF1 8A1E[3603]              	MOV	BL,[CURDRV]
 14071 00001FF5 FEC3                    	INC	BL
 14072                                  SearchDrv:
 14073 00001FF7 AC                      	LODSB				; Get correct search contin drive byte
 14074 00001FF8 86C3                    	XCHG	AL,BL			; Search byte to BL, user byte to AL
 14075 00001FFA 47                      	INC	DI
 14076                                  	;STOSB				; Store the correct "user" drive byte
 14077                                  					;  at the start of the search info
 14078 00001FFB B90A00                  	MOV	CX,20/2
 14079 00001FFE F3A5                    	REP	MOVSW			; Rest of search cont info, SI -> entry
 14080 00002000 86C3                    	XCHG	AL,BL			; User drive byte back to BL, search
 14081                                  					;   byte to AL
 14082 00002002 AA                      	STOSB				; Search contin drive byte at end of
 14083                                  					;   contin info
 14084 00002003 C43E[2C03]              	LES	DI,[DMAADD]
 14085 00002007 F606[6C05]FF            	TEST	byte [EXTFCB],0FFh
 14086 0000200C 740D                    	JZ	short NORMFCB2
 14087 0000200E B0FF                    	MOV	AL,0FFh
 14088 00002010 AA                      	STOSB
 14089 00002011 FEC0                    	INC	AL
 14090                                  	;MOV	CX,5
 14091                                  	; 17/12/2022
 14092 00002013 B105                    	mov	cl,5
 14093 00002015 F3AA                    	REP	STOSB
 14094 00002017 A0[6D05]                	MOV	AL,[SATTRIB]
 14095 0000201A AA                      	STOSB
 14096                                  NORMFCB2:
 14097 0000201B 88D8                    	MOV	AL,BL			; User Drive byte
 14098 0000201D AA                      	STOSB
 14099                                  	;MOV	CX,16			; 32 / 2 words of dir entry
 14100                                  	; 17/12/2022
 14101 0000201E B110                    	mov	cl,16
 14102 00002020 F3A5                    	REP	MOVSW
 14103 00002022 E940E6                  	jmp	FCB_RET_OK
 14104                                  
 14105                                  ;----------------------------------------------------------------------------
 14106                                  ;
 14107                                  ; Procedure Name : $DIR_SEARCH_NEXT
 14108                                  ;
 14109                                  ; Inputs:
 14110                                  ;	DS:DX points to unopenned FCB returned by $DIR_SEARCH_FIRST
 14111                                  ; Function:
 14112                                  ;	Directory is searched for the next matching entry and the directory
 14113                                  ;	entry is loaded at the disk transfer address
 14114                                  ; Returns:
 14115                                  ;	AL = -1 if no entries matched, otherwise 0
 14116                                  ;----------------------------------------------------------------------------
 14117                                  
 14118                                  _$DIR_SEARCH_NEXT:
 14119 00002025 368916[A605]            	MOV	[SS:THISFCB],DX
 14120 0000202A 368C1E[A805]            	MOV	[SS:THISFCB+2],DS
 14121 0000202F 36C606[6D05]00          	MOV	byte [SS:SATTRIB],0
 14122 00002035 36C606[6C05]00          	MOV	byte [SS:EXTFCB],0
 14123                                  
 14124 0000203B 16                      	push	ss
 14125 0000203C 07                      	pop	es
 14126                                  
 14127 0000203D BF[BE04]                	MOV	DI,SEARCHBUF
 14128                                  
 14129 00002040 89D6                    	MOV	SI,DX
 14130 00002042 803CFF                  	CMP	BYTE [SI],0FFh
 14131 00002045 750D                    	JNZ	short NORMFCB6
 14132 00002047 83C606                  	ADD	SI,6
 14133 0000204A AC                      	LODSB
 14134                                  
 14135 0000204B 36A2[6D05]              	MOV	[SS:SATTRIB],AL
 14136 0000204F 36FE0E[6C05]            	DEC	byte [SS:EXTFCB]
 14137                                  NORMFCB6:
 14138 00002054 AC                      	LODSB				; Get original user drive byte
 14139 00002055 50                      	push	ax			; Put it on stack
 14140 00002056 8A4414                  	MOV	AL,[SI+20]		; Get correct search contin drive byte
 14141 00002059 AA                      	STOSB				; Put in correct place
 14142 0000205A B90A00                  	MOV	CX,20/2
 14143 0000205D F3A5                    	REP	MOVSW			; Transfer in rest of search contin info
 14144                                  
 14145 0000205F 16                      	push	ss
 14146 00002060 1F                      	pop	ds
 14147                                  
 14148 00002061 FF36[2C03]              	push	word [DMAADD]
 14149 00002065 FF36[2E03]              	push	word [DMAADD+2]
 14150 00002069 C706[2C03][BE04]        	MOV	WORD [DMAADD],SEARCHBUF
 14151 0000206F 8C1E[2E03]              	MOV	WORD [DMAADD+2],DS
 14152 00002073 E8250E                  	call	DOS_SEARCH_NEXT 	; Find it
 14153 00002076 8F06[2E03]              	pop	word [DMAADD+2]
 14154 0000207A 8F06[2C03]              	pop	word [DMAADD]
 14155 0000207E 7203                    	JC	short SearchNoMore
 14156 00002080 E958FF                  	JMP	SearchSet		; Ok set return
 14157                                  
 14158                                  SearchNoMore:
 14159 00002083 C43E[A605]              	LES	DI,[THISFCB]
 14160 00002087 F606[6C05]FF            	TEST	byte [EXTFCB],0FFh
 14161 0000208C 7403                    	JZ	short NORMFCB8
 14162 0000208E 83C707                  	ADD	DI,7			; Point past the extension
 14163                                  NORMFCB8:
 14164 00002091 5B                      	pop	bx			; Get original drive byte
 14165 00002092 26881D                  	MOV	[ES:DI],BL		; Store the correct "user" drive byte
 14166                                  					;  at the right spot
 14167                                  ; error code is in AX
 14168                                  
 14169 00002095 E9D0E5                  	jmp	FCB_RET_ERR
 14170                                  
 14171                                  ; 17/05/2019 - Retro DOS v4.0
 14172                                  
 14173                                  ; DOSCODE:5EE6h (MSDOS 6.21, MSDOS.SYS)
 14174                                  
 14175                                  ;---------------------------------------------------------------------------
 14176                                  ;
 14177                                  ;   Procedure Name : $FIND_FIRST
 14178                                  ; 
 14179                                  ;   Assembler usage:
 14180                                  ;	    MOV AH, FindFirst
 14181                                  ;	    LDS DX, name
 14182                                  ;	    MOV CX, attr
 14183                                  ;	    INT 21h
 14184                                  ;	; DMA address has datablock
 14185                                  ;
 14186                                  ;   Error Returns:
 14187                                  ;	    AX = error_path_not_found
 14188                                  ;	       = error_no_more_files
 14189                                  ;---------------------------------------------------------------------------
 14190                                  
 14191                                  	; 09/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 14192                                  	; DOSCODE:5ED2h (MSDOS 5.0, MSDOS.SYS)
 14193                                  
 14194                                  _$FIND_FIRST:
 14195 00002098 89D6                    	MOV	SI,DX			; get name in appropriate place
 14196 0000209A 36880E[6D05]            	MOV	[SS:SATTRIB],CL		; Search attribute to correct loc
 14197                                  
 14198 0000209F BF[BE03]                	MOV	DI,OPENBUF		; appropriate buffer
 14199                                  
 14200 000020A2 E8CD4B                  	call	TransPathSet		; convert the path
 14201 000020A5 7305                    	JNC	short Find_it 		; no error, go and look
 14202                                  FindError:
 14203                                  	;mov	al,3
 14204 000020A7 B003                    	mov	al, error_path_not_found ; error and map into one.
 14205                                  	; 09/11/2022
 14206                                  FF_errj:
 14207 000020A9 E9A6E5                  	jmp	SYS_RET_ERR
 14208                                  Find_it:
 14209 000020AC 16                      	push	ss
 14210 000020AD 1F                      	pop	ds
 14211                                  
 14212 000020AE FF36[2C03]              	push	word [DMAADD]
 14213 000020B2 FF36[2E03]              	push	word [DMAADD+2]
 14214 000020B6 C706[2C03][BE04]        	MOV	WORD [DMAADD],SEARCHBUF
 14215 000020BC 8C1E[2E03]              	MOV	WORD [DMAADD+2],DS
 14216                                  	; MSDOS 3.3
 14217                                  	;call	DOS_SEARCH_FIRST
 14218                                  	; MSDOS 6.0
 14219 000020C0 E89000                  	call	GET_FAST_SEARCH 	; search
 14220 000020C3 8F06[2E03]              	pop	word [DMAADD+2]
 14221 000020C7 8F06[2C03]              	pop	word [DMAADD]
 14222                                  	
 14223                                  	; 16/12/2022
 14224                                  	;JNC	short FindSet 		; no error, transfer info
 14225 000020CB 72DC                    	jc	short FF_errj	; jmp SYS_RET_ERR
 14226                                  	;
 14227                                  	;jmp	SYS_RET_ERR
 14228                                  	; 09/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 14229                                  ;FFF_errj:
 14230                                  	;jmp	short FF_errj	; jmp SYS_RET_ERR
 14231                                  
 14232                                  FindSet:
 14233 000020CD BE[BE04]                	MOV	SI,SEARCHBUF
 14234 000020D0 C43E[2C03]              	LES	DI,[DMAADD]
 14235 000020D4 B91500                  	MOV	CX,21
 14236 000020D7 F3A4                    	REP	MOVSB
 14237 000020D9 56                      	PUSH	SI			; Save pointer to start of entry
 14238                                  	;mov	al,[si+0Bh]
 14239 000020DA 8A440B                  	MOV	AL,[SI+dir_entry.dir_attr]
 14240 000020DD AA                      	STOSB
 14241                                  	;add	si,16h ; 22
 14242 000020DE 83C616                  	ADD	SI,dir_entry.dir_time
 14243 000020E1 A5                      	MOVSW				; dir_time
 14244 000020E2 A5                      	MOVSW				; dir_date
 14245 000020E3 46                      	INC	SI
 14246 000020E4 46                      	INC	SI			; Skip dir_first
 14247 000020E5 A5                      	MOVSW				; dir_size (2 words)
 14248 000020E6 A5                      	MOVSW
 14249 000020E7 5E                      	POP	SI			; Point back to dir_name
 14250 000020E8 E83500                   	CALL	PackName
 14251 000020EB E95BE5                  	jmp	SYS_RET_OK		; bye with no errors
 14252                                  
 14253                                  ;---------------------------------------------------------------------------
 14254                                  ;
 14255                                  ;   Procedure Name : $FIND_NEXT
 14256                                  ;
 14257                                  ;   Assembler usage:
 14258                                  ;	; dma points at area returned by find_first
 14259                                  ;	    MOV AH, findnext
 14260                                  ;	    INT 21h
 14261                                  ;	; next entry is at dma
 14262                                  ;
 14263                                  ;   Error Returns:
 14264                                  ;	    AX = error_no_more_files
 14265                                  ;---------------------------------------------------------------------------
 14266                                  
 14267                                  	; 09/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 14268                                  _$FIND_NEXT:
 14269 000020EE 16                      	push	ss
 14270 000020EF 07                      	pop	es
 14271                                  
 14272 000020F0 BF[BE04]                	MOV	DI,SEARCHBUF
 14273                                  
 14274 000020F3 36C536[2C03]            	LDS	SI,[SS:DMAADD]
 14275                                  
 14276 000020F8 B91500                  	MOV	CX,21
 14277 000020FB F3A4                    	REP	MOVSB			; Put the search continuation info
 14278                                  					;  in the right place
 14279 000020FD 16                      	push	ss
 14280 000020FE 1F                      	pop	ds			; get ready for search
 14281                                  	
 14282 000020FF FF36[2C03]              	push	word [DMAADD]
 14283 00002103 FF36[2E03]              	push	word [DMAADD+2]
 14284 00002107 C706[2C03][BE04]        	MOV	WORD [DMAADD],SEARCHBUF
 14285 0000210D 8C1E[2E03]              	MOV	WORD [DMAADD+2],DS
 14286 00002111 E8870D                  	call	DOS_SEARCH_NEXT 	; Find it
 14287 00002114 8F06[2E03]              	pop	word [DMAADD+2]
 14288 00002118 8F06[2C03]              	pop	word [DMAADD]
 14289 0000211C 73AF                    	JNC	short FindSet 		; No error, set info
 14290                                  	;jmp	SYS_RET_ERR
 14291                                  	; 16/12/2022
 14292 0000211E EB89                    	jmp	short FF_errj	; jmp SYS_RET_ERR
 14293                                  	; 09/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 14294                                  	;jmp	short FFF_errj	; jmp SYS_RET_ERR
 14295                                  
 14296                                  ;---------------------------------------------------------------------------
 14297                                  ;**	PackName - Convert file names from FCB to ASCIZ format.
 14298                                  ;
 14299                                  ;	PackName transfers a file name from DS:SI to ES:DI and converts it to
 14300                                  ;	the ASCIZ format.
 14301                                  ;
 14302                                  ;	ENTRY	(DS:SI) = 11 character FCB or dir entry name
 14303                                  ;		(ES:DI) = destination area (13 bytes)
 14304                                  ;	EXIT	(ds:SI) and (es:DI) advanced
 14305                                  ;	USES	al, CX, SI, DI, Flags  (BUGBUG - not verified - jgl)
 14306                                  ;---------------------------------------------------------------------------
 14307                                  
 14308                                  PackName:
 14309                                  ;	Move over 8 characters to cover the name component, then trim it's
 14310                                  ;	trailing blanks.
 14311                                  
 14312 00002120 B90800                  	MOV	CX,8			; Pack the name
 14313 00002123 F3A4                    	REP	MOVSB			; Move all of it
 14314                                  main_kill_tail:
 14315 00002125 26807DFF20              	CMP	BYTE [ES:DI-1]," "
 14316 0000212A 7507                    	JNZ	short find_check_dot
 14317 0000212C 4F                      	DEC	DI			; Back up over trailing space
 14318 0000212D 41                      	INC	CX
 14319 0000212E 83F908                  	CMP	CX,8
 14320 00002131 72F2                    	JB	short main_kill_tail
 14321                                  find_check_dot:
 14322                                  	;CMP	WORD [SI],(" " << 8) | " "
 14323 00002133 813C2020                	cmp     word [si],2020h 
 14324 00002137 7506                    	JNZ	short got_ext 		; Some chars in extension
 14325 00002139 807C0220                	CMP	BYTE [SI+2]," "
 14326 0000213D 7410                    	JZ	short find_done		; No extension
 14327                                  got_ext:
 14328 0000213F B02E                    	MOV	AL,"."	; 2Eh
 14329 00002141 AA                      	STOSB
 14330                                  	;MOV	CX,3
 14331                                  	; 18/12/2022
 14332                                  	;mov	cl,3
 14333                                  	;REP	MOVSB
 14334 00002142 A4                      	movsb
 14335 00002143 A4                      	movsb
 14336 00002144 A4                      	movsb
 14337                                  ext_kill_tail:
 14338 00002145 26807DFF20              	CMP	BYTE [ES:DI-1]," "
 14339 0000214A 7503                    	JNZ	short find_done
 14340 0000214C 4F                      	DEC	DI			; Back up over trailing space
 14341 0000214D EBF6                    	JMP	short ext_kill_tail
 14342                                  find_done:
 14343 0000214F 31C0                    	XOR	AX,AX
 14344 00002151 AA                      	STOSB				; NUL terminate
 14345 00002152 C3                      	retn
 14346                                  
 14347                                  ;---------------------------------------------------------------------------
 14348                                  
 14349                                  	; 17/05/2019 - Retro DOS v4.0
 14350                                  GET_FAST_SEARCH:
 14351                                  	; 22/07/2018
 14352                                  	; MSDOS 6.0
 14353                                  	; 17/12/2022
 14354 00002153 36800E[1206]04          	OR	byte [ss:DOS34_FLAG+1],(SEARCH_FASTOPEN>>8)  ; 04h
 14355                                  	;OR	word [ss:DOS34_FLAG],SEARCH_FASTOPEN  ; 400h
 14356                                  					;FO.trigger fastopen ;AN000;
 14357                                  	;call	DOS_SEARCH_FIRST
 14358                                  	;retn
 14359                                  	; 17/12/2022
 14360 00002159 E9530C                  	jmp	DOS_SEARCH_FIRST
 14361                                  
 14362                                  ;============================================================================
 14363                                  ; PATH.ASM, MSDOS 6.0, 1991
 14364                                  ;============================================================================
 14365                                  ; 06/08/2018 - Retro DOS v3.0
 14366                                  ; 17/05/2019 - Retro DOS v4.0
 14367                                  
 14368                                  ; DOSCODE:5FB0h (MSDOS 6.21, MSDOS.SYS)
 14369                                  
 14370                                  ;**	Directory related system calls. These will be passed direct text of the
 14371                                  ;	pathname from the user. They will need to be passed through the macro
 14372                                  ;	expander prior to being sent through the low-level stuff. I/O specs are
 14373                                  ;	defined in DISPATCH. The system calls are:
 14374                                  ;
 14375                                  ;	$CURRENT_DIR  Written
 14376                                  ;	$RMDIR	  Written
 14377                                  ;	$CHDIR	  Written
 14378                                  ;	$MKDIR	  Written
 14379                                  ;
 14380                                  ;
 14381                                  ;	Modification history:
 14382                                  ;
 14383                                  ;	    Created: ARR 4 April 1983
 14384                                  ;		 MZ 10 May 1983     CurrentDir implemented
 14385                                  ;		 MZ 11 May 1983     RmDir, ChDir, MkDir implemented
 14386                                  ;		 EE 19 Oct 1983     RmDir no longer allows you to delete a
 14387                                  ;				    current directory.
 14388                                  ;		 MZ 19 Jan 1983     Brain damaged applications rely on success
 14389                                  
 14390                                  ;	I_Need	ThisCDS,DWORD		; pointer to Current CDS
 14391                                  ;	I_Need	WFP_Start,WORD		; pointer to beginning of directory text
 14392                                  ;	I_Need	Curr_Dir_End,WORD	; offset to end of directory part
 14393                                  ;	I_Need	OpenBuf,128		; temp spot for translated name
 14394                                  ;	I_need	fSplice,BYTE		; TRUE => do splice
 14395                                  ;	I_Need	NoSetDir,BYTE		; TRUE => no exact match on splice
 14396                                  ;	I_Need	cMeta,BYTE
 14397                                  ;	I_Need	DrvErr,BYTE					;AN000;
 14398                                  
 14399                                  ;BREAK <$CURRENT_DIR - dump the current directory into user space>
 14400                                  ;----------------------------------------------------------------------------
 14401                                  ;
 14402                                  ;   Procedure Name : $CURRENT_DIR
 14403                                  ;
 14404                                  ;   Assembler usage:
 14405                                  ;		LDS	SI,area
 14406                                  ;		MOV	DL,drive
 14407                                  ;		INT	21h
 14408                                  ;	    ; DS:SI is a pointer to 64 byte area that contains drive
 14409                                  ;	    ; current directory.
 14410                                  ;   Error returns:
 14411                                  ;	    AX = error_invalid_drive
 14412                                  ;
 14413                                  ;----------------------------------------------------------------------------
 14414                                  
 14415                                  _$CURRENT_DIR:
 14416                                  	;06/08/2018 - Retro DOS v3.0
 14417                                  	;IBMDOS.COM (MSDOS 3.3, 1987) - Offset 2D4Eh
 14418 0000215C E8F9F1                  	call	ECritDisk
 14419 0000215F 88D0                    	MOV	AL,DL			; get drive number (0=def, 1=A)
 14420 00002161 E8134A                  	call	GetVisDrv		; grab it
 14421 00002164 7310                    	JNC	short CurrentValidate 	; no error -> go and validate dir
 14422                                  CurdirErr:
 14423 00002166 E80AF2                  	call	LCritDisk
 14424                                  
 14425                                  	; MSDOS 3.3
 14426                                  	;mov	al,0Fh
 14427                                  	
 14428                                  	; MSDOS 6.0
 14429 00002169 1E                      	push	ds
 14430 0000216A 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
 14431 0000216F A0[1006]                	mov	al,[DrvErr]		;IFS.			;AN000;
 14432 00002172 1F                      	pop	ds
 14433                                  
 14434                                  curdir_errj:
 14435 00002173 E9DCE4                  	jmp	SYS_RET_ERR		;IFS. make noise	;AN000;
 14436                                  
 14437                                  CurrentValidate:
 14438 00002176 1E                      	push	ds			; save destination
 14439 00002177 56                      	push	si
 14440                                  	
 14441                                  	;LDS	SI,[CS:THISCDS] ; MSDOS 3.3
 14442                                  	
 14443                                  	; MSDOS 6.0
 14444 00002178 2E8E1E[0700]            	mov     ds,[cs:DosDSeg]
 14445 0000217D C536[A205]              	lds     si,[THISCDS]
 14446                                  
 14447                                  ; 16/12/2022
 14448                                  %if 0
 14449                                  	; 09/11/2022 (following test instruction is nonsense!)
 14450                                  	; (I am leaving it here for MSDOS 5.0 MSDOS.SYS compatibility)
 14451                                  
 14452                                  	;test	word [si+43h],8000h
 14453                                  	TEST	word [SI+curdir.flags],curdir_isnet
 14454                                  	;jnz	short $+2  ; 09/11/2022	
 14455                                  	jnz	short DoCheck
 14456                                  %endif
 14457                                  
 14458                                  ; Random optimization nuked due to some utilities using GetCurrentDir to do
 14459                                  ; media check.
 14460                                  ;	CMP	word [SI+curdir.ID],0
 14461                                  ;	JZ	short GetDst
 14462                                  DoCheck:
 14463                                  	;MOV	byte [cs:NoSetDir],0	; interested only in contents
 14464                                  
 14465                                  	; MSDOS 6.0
 14466 00002181 1E                      	push	ds
 14467 00002182 2E8E1E[0700]            	mov     ds,[cs:DosDSeg]
 14468 00002187 C606[4C03]00            	mov	byte [NoSetDir],0
 14469 0000218C 1F                      	pop	ds
 14470                                  
 14471 0000218D BF[BE03]                	MOV	DI,OPENBUF
 14472 00002190 E88221                  	call	ValidateCDS		; output is ES:DI -> CDS
 14473                                  
 14474 00002193 06                      	push	es	 		; swap source and destination
 14475 00002194 57                      	push	di
 14476 00002195 5E                      	pop	si
 14477 00002196 1F                      	pop	ds
 14478                                  GetDst:
 14479 00002197 5F                      	pop	di
 14480 00002198 07                      	pop	es			; get real destination
 14481 00002199 72CB                    	JC	short CurdirErr
 14482                                  	;ADD	SI,curdir.text ; add si,0 ; 09/08/2018
 14483                                  	;
 14484                                  	; 09/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 14485                                  	; DOSCODE:5FE2h (MSDOS 5.0, MSDOS.SYS)
 14486                                  	; 16/12/2022
 14487                                  	;add	si,0  ; add si,curdir.text
 14488                                  	;
 14489                                  	;add	si,[si+4Fh] ; 17/05/2019
 14490 0000219B 03744F                  	ADD	SI,[SI+curdir.end]
 14491 0000219E 803C5C                  	CMP	BYTE [SI],'\'	; 5Ch	; root or subdirs present?
 14492 000021A1 7501                    	JNZ	short CurrentCopy
 14493 000021A3 46                      	INC	SI
 14494                                  CurrentCopy:
 14495                                  ;	call	FStrCpy
 14496                                  ;; 10/29/86 E5 char
 14497 000021A4 50                      	PUSH	AX
 14498 000021A5 AC                      	LODSB				; get char
 14499 000021A6 08C0                    	OR	AL,AL
 14500 000021A8 7413                    	JZ	short FOK
 14501 000021AA 3C05                    	CMP	AL,05H
 14502 000021AC 740D                    	JZ	short FCHANGE
 14503 000021AE EB01                    	JMP	short FFF
 14504                                  FCPYNEXT:
 14505 000021B0 AC                      	LODSB				; get char
 14506                                  FFF:
 14507 000021B1 3C5C                    	CMP	AL,'\'			; beginning of directory
 14508 000021B3 7508                    	JNZ	short FOK		; no
 14509 000021B5 AA                      	STOSB				; put into user's buffer
 14510 000021B6 AC                      	LODSB				; 1st char of dir is 05?
 14511 000021B7 3C05                    	CMP	AL,05H
 14512 000021B9 7502                    	JNZ	short FOK		; no
 14513                                  FCHANGE:
 14514 000021BB B0E5                    	MOV	AL,0E5H			; make it E5
 14515                                  FOK:
 14516 000021BD AA                      	STOSB				; put into user's buffer
 14517 000021BE 08C0                    	OR	AL,AL			; final char
 14518 000021C0 75EE                    	JNZ	short FCPYNEXT		; no
 14519 000021C2 58                      	POP	AX
 14520                                  
 14521                                  ;; 10/29/86 E5 char
 14522 000021C3 30C0                    	xor	AL,AL			; MZ 19 Jan 84
 14523 000021C5 E8ABF1                  	call	LCritDisk
 14524 000021C8 E97EE4                  	jmp	SYS_RET_OK		; no more, bye!
 14525                                  
 14526                                  ; 17/05/2019 - Retro DOS v4.0
 14527                                  
 14528                                  ; DOSCODE:6029h (MSDOS 6.21, MSDOS.SYS)
 14529                                  
 14530                                  ;BREAK <$RmDir -- Remove a directory>
 14531                                  ;----------------------------------------------------------------------------
 14532                                  ;
 14533                                  ; Procedure Name : $RmDir
 14534                                  ;
 14535                                  ; Inputs:
 14536                                  ;	DS:DX Points to asciz name
 14537                                  ; Function:
 14538                                  ;	Delete directory if empty
 14539                                  ; Returns:
 14540                                  ;	STD XENIX Return
 14541                                  ;	AX = error_path_not_found If path bad
 14542                                  ;	AX = error_access_denied If
 14543                                  ;		Directory not empty
 14544                                  ;		Path not directory
 14545                                  ;		Root directory specified
 14546                                  ;		Directory malformed (. and .. not first two entries)
 14547                                  ;		User tries to delete a current directory
 14548                                  ;	AX = error_current_directory
 14549                                  ;
 14550                                  ;----------------------------------------------------------------------------
 14551                                  
 14552                                  	; 10/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 14553                                  	; DOSCODE:6015h (MSDOS 5.0, MSDOS.SYS)
 14554                                  
 14555                                  _$RMDIR:
 14556 000021CB 52                      	push	dx			; Save ptr to name
 14557 000021CC 1E                      	push	ds
 14558 000021CD 89D6                    	mov	si,dx			; Load ptr into si
 14559 000021CF BF[BE03]                	mov	di,OPENBUF		; di = ptr to buf for trans name
 14560 000021D2 57                      	push	di
 14561 000021D3 E8A44A                  	call	TransPathNoSet		; Translate the name
 14562 000021D6 5F                      	pop	di			; di = ptr to buf for trans name
 14563 000021D7 7306                    	jnc	short rmlset		; If transpath succeeded, continue
 14564 000021D9 1F                      	pop	ds
 14565 000021DA 5A                      	pop	dx			; Restore the name
 14566                                  	;mov	al,3
 14567 000021DB B003                    	mov	al,error_path_not_found ; Otherwise, return an error
 14568                                  	; 16/12/2022
 14569                                  rmdir_errj: ; 10/08/2018
 14570                                  chdir_errj:
 14571 000021DD EB94                    	jmp	short curdir_errj
 14572                                  	;jmp	SYS_RET_ERR
 14573                                  rmlset:
 14574 000021DF 36803E[7A05]FF          	CMP	byte [ss:CMETA],-1	;   if (cMeta >= 0)
 14575 000021E5 7512                    	Jnz	short rmerr		;	return (-1);
 14576 000021E7 16                      	push	ss
 14577 000021E8 07                      	pop	es
 14578 000021E9 30C0                    	xor	al,al			; al = 0 , ie drive a:
 14579                                  rmloop: 
 14580 000021EB E8FA49                  	call	GetCDSFromDrv		; Get curdir for drive in al
 14581 000021EE 720F                    	jc	short rmcont		; If error, exit loop & cont normally
 14582 000021F0 E806F0                  	call	StrCmp			; Are the 2 paths the same?
 14583 000021F3 7404                    	jz	short rmerr		; Yes, report error.
 14584 000021F5 FEC0                    	inc	al			; No, inc al to next drive number
 14585 000021F7 EBF2                    	jmp	short rmloop		; Go check next drive.
 14586                                  rmerr:
 14587 000021F9 1F                      	pop	ds
 14588 000021FA 5A                      	pop	dx			; Restore the name
 14589                                  	;mov	al,10h
 14590 000021FB B010                    	mov	al,error_current_directory ; error
 14591                                  	; 16/12/2022
 14592                                  	; 10/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 14593                                  ;chdir_errj:
 14594 000021FD EBDE                    	jmp	short rmdir_errj
 14595                                  rmcont:
 14596 000021FF 1F                      	pop	ds
 14597 00002200 5A                      	pop	dx			; Restore the name
 14598 00002201 BE[8532]                	MOV	SI,DOS_RMDIR
 14599 00002204 EB7C                    	JMP	DoDirCall
 14600                                  
 14601                                  ; 17/05/2019 - Retro DOS v4.0
 14602                                  
 14603                                  ; DOSCODE:6065h (MSDOS 6.21, MSDOS.SYS)
 14604                                  
 14605                                  ;BREAK <$ChDir -- Change current directory on a drive>
 14606                                  ;----------------------------------------------------------------------------
 14607                                  ;
 14608                                  ; $ChDir - Top-level change directory system call.  This call is responsible
 14609                                  ; for setting up the CDS for the specified drive appropriately.  There are
 14610                                  ; several cases to consider:
 14611                                  ;
 14612                                  ;   o	Local, simple CDS.  In this case, we take the input path and convert
 14613                                  ;	it into a WFP.	We verify the existance of this directory and then
 14614                                  ;	copy the WFP into the CDS and set up the ID field to point to the
 14615                                  ;	directory cluster.
 14616                                  ;   o	Net CDS.  We form the path from the root (including network prefix)
 14617                                  ;	and verify its existance (via DOS_Chdir).  If successful, we copy the
 14618                                  ;	WFP back into the CDS.
 14619                                  ;   o	SUBST'ed CDS.  This is no different than the local, simple CDS.
 14620                                  ;   o	JOIN'ed CDS.  This is trouble as there are two CDS's at work.  If we
 14621                                  ;	call TransPath, we will get the PHYSICAL CDS that the path refers to
 14622                                  ;	and the PHYSICAL WFP that the input path refers to.  This is perfectly
 14623                                  ;	good for the validation but not for currency.  We call TransPathNoSet
 14624                                  ;	to process the path but to return the logical CDS and the logical
 14625                                  ;	path.  We then copy the logical path into the logical CDS.
 14626                                  ;
 14627                                  ; Inputs:
 14628                                  ;	DS:DX Points to asciz name
 14629                                  ; Returns:
 14630                                  ;	STD XENIX Return
 14631                                  ;	AX = chdir_path_not_found if error
 14632                                  ;
 14633                                  ;----------------------------------------------------------------------------
 14634                                  
 14635                                  _$CHDIR:
 14636 00002206 BF[BE03]                	MOV	DI,OPENBUF		; spot for translated name
 14637 00002209 89D6                    	MOV	SI,DX			; get source
 14638 0000220B E8604A                  	call	TransPath		; go munge the path and get real CDS
 14639 0000220E 7304                    	JNC	short ChDirCrack	; no errors, try path
 14640                                  ChDirErrP:
 14641                                  	;mov	al,3
 14642 00002210 B003                    	MOV	AL,error_path_not_found
 14643                                  ChDirErr:
 14644                                  	;jmp	SYS_RET_ERR 	; oops!
 14645                                  	; 10/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 14646 00002212 EBC9                    	jmp	short chdir_errj
 14647                                  
 14648                                  ChDirCrack:
 14649 00002214 803E[7A05]FF            	CMP	byte [CMETA],-1		; No meta chars allowed.
 14650 00002219 75F5                    	JNZ	short ChDirErrP
 14651                                  
 14652                                  ; We cannot do a ChDir (yet) on a raw CDS. This is treated as a path not
 14653                                  ; found.
 14654                                  
 14655 0000221B C43E[A205]              	LES	DI,[THISCDS]
 14656 0000221F 83FFFF                  	CMP	DI,-1			;   if (ThisCDS == NULL)
 14657 00002222 74EC                    	JZ	short ChDirErrP		;	error ();
 14658                                  
 14659                                  ; Find out if the directory exists.
 14660                                  
 14661 00002224 E81B10                  	call	DOS_CHDIR
 14662                                  	;Jc	short ChDirErr
 14663                                  	; 16/12/2022
 14664 00002227 72B4                    	jc	short chdir_errj
 14665                                  ;
 14666                                  ; Get back CDS to see if a join as seen. Set the currency pointer (only if
 14667                                  ; not network). If one was seen, all we need to do is copy in the text
 14668                                  ;
 14669 00002229 C43E[A205]              	LES	DI,[THISCDS]
 14670                                  	;test	word [es:di+43h],2000h
 14671                                  	; 17/12/2022
 14672 0000222D 26F6454420              	test	byte [ES:DI+curdir.flags+1],curdir_splice>>8
 14673                                  	;TEST	word [ES:DI+curdir.flags],curdir_splice
 14674 00002232 7425                    	JZ	short GotCDS
 14675                                  
 14676                                  ; The CDS was joined. Let's go back and grab the logical CDS.
 14677                                  
 14678 00002234 06                      	push	es	
 14679 00002235 57                      	push	di
 14680 00002236 51                      	push	cx			; save CDS and cluster...
 14681 00002237 E855E2                  	call	Get_User_Stack		; get original text
 14682                                  	
 14683                                  	;mov	di,[si+6]
 14684 0000223A 8B7C06                  	MOV	DI,[SI+user_env.user_DX]
 14685                                  	;mov	ds,[si+0Eh]
 14686 0000223D 8E5C0E                  	MOV	DS,[SI+user_env.user_DS]
 14687                                  	
 14688 00002240 BE[BE03]                	MOV	SI,OPENBUF		; spot for translated name
 14689 00002243 87F7                    	XCHG	SI,DI
 14690 00002245 30C0                    	XOR	AL,AL			; do no splicing
 14691 00002247 57                      	push	di
 14692 00002248 E82F4A                  	call	TransPathNoSet		; Munge path
 14693 0000224B 5E                      	pop	si
 14694                                  
 14695                                  ; There should NEVER be an error here.
 14696                                  
 14697                                  ;IF FALSE
 14698                                  ;	JNC SKipErr
 14699                                  ;	fmt <>,<>,<"$p: Internal CHDIR error\n">
 14700                                  ;SkipErr:
 14701                                  ;ENDIF
 14702 0000224C C43E[A205]              	LES	DI,[THISCDS]		; get new CDS
 14703                                  	;mov	word [es:di+49h],-1
 14704 00002250 26C74549FFFF            	MOV	word [ES:DI+curdir.ID],-1
 14705                                  					; no valid cluster here...
 14706 00002256 59                      	pop	cx
 14707 00002257 5F                      	pop	di
 14708 00002258 07                      	pop	es
 14709                                  
 14710                                  ; ES:DI point to the physical CDS, CX is the ID (local only)
 14711                                  
 14712                                  GotCDS:
 14713                                  
 14714                                  ; wfp_start points to the text. See if it is long enough
 14715                                  
 14716                                  	; MSDOS 3.3
 14717                                  	;push	ss
 14718                                  	;pop	ds
 14719                                  	;mov	si,[WFP_START]
 14720                                  	;push	cx
 14721                                  	;call	DStrLen
 14722                                  	;cmp	cx,67 ; cmp cx,DIRSTRLEN
 14723                                  	;pop	cx
 14724                                  	;ja	short ChDirErrP
 14725                                  
 14726                                  	; MSDOS 6.0
 14727 00002259 E85000                  	CALL	Check_PathLen		;PTM.		;AN000;
 14728 0000225C 77B2                    	JA	short ChDirErrP
 14729                                  	; MSDOS 3.3 & MSDOS 6.0
 14730                                  	;TEST	word [ES:DI+curdir.flags],curdir_isnet ; 8000h
 14731                                  	; 17/12/2022
 14732 0000225E 26F6454480              	test	byte [ES:DI+curdir.flags+1],curdir_isnet>>8
 14733 00002263 7512                    	JNZ	short SkipRecency
 14734                                  	; MSDOS 6.0
 14735                                  	;test	word [es:di+43h],2000h
 14736                                  	; 17/12/2022
 14737 00002265 26F6454420              	test	byte [ES:DI+curdir.flags+1],curdir_splice>>8
 14738                                  	;TEST	word [ES:DI+curdir.flags],curdir_splice 
 14739                                  					;PTM. for Join and Subst ;AN000;
 14740 0000226A 7403                    	JZ	short setdirclus	;PTM.		;AN000;
 14741 0000226C B9FFFF                  	MOV	CX,-1			;PTM.		;AN000;
 14742                                  setdirclus:
 14743                                  	;mov	[es:di+49h],cx
 14744 0000226F 26894D49                	MOV	[ES:DI+curdir.ID],CX
 14745 00002273 C43E[A205]              	LES	DI,[THISCDS]		; get logical CDS
 14746                                  SkipRecency:
 14747 00002277 E8B0EF                  	call	FStrCpy
 14748 0000227A 30C0                    	XOR	AL,AL
 14749                                  mkdir_ok:
 14750 0000227C E9CAE3                  	jmp	SYS_RET_OK
 14751                                  
 14752                                  ; 17/05/2019 - Retro DOS v4.0
 14753                                  
 14754                                  ; DOSCODE:60E1h (MSDOS 6.21, MSDOS.SYS)
 14755                                  
 14756                                  ;BREAK <$MkDir - Make a directory entry>
 14757                                  ;---------------------------------------------------------------------------
 14758                                  ;
 14759                                  ; Procedure Name : $MkDir
 14760                                  ; Inputs:
 14761                                  ;	DS:DX Points to asciz name
 14762                                  ; Function:
 14763                                  ;	Make a new directory
 14764                                  ; Returns:
 14765                                  ;	STD XENIX Return
 14766                                  ;	AX = mkdir_path_not_found if path bad
 14767                                  ;	AX = mkdir_access_denied  If
 14768                                  ;		Directory cannot be created
 14769                                  ;		Node already exists
 14770                                  ;		Device name given
 14771                                  ;		Disk or directory(root) full
 14772                                  ;---------------------------------------------------------------------------
 14773                                  
 14774                                  	; 10/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 14775                                  
 14776                                  _$MKDIR:
 14777 0000227F BE[4431]                	MOV	SI,DOS_MKDIR
 14778                                  DoDirCall:
 14779 00002282 BF[BE03]                	MOV	DI,OPENBUF		; spot for translated name
 14780                                  
 14781 00002285 56                      	push	si
 14782 00002286 89D6                    	MOV	SI,DX			; get source
 14783 00002288 E8E349                  	call	TransPath		; go munge the path
 14784 0000228B 5E                      	pop	si
 14785 0000228C 7305                    	JNC	short MkDirCrack	; no errors, try path
 14786                                  MkErrP:
 14787 0000228E B003                    	MOV	AL,error_path_not_found	; oops!
 14788                                  MkErr:
 14789 00002290 E9BFE3                  	jmp	SYS_RET_ERR
 14790                                  MkDirCrack:
 14791 00002293 36803E[7A05]FF          	CMP	byte [SS:CMETA],-1
 14792 00002299 75F3                    	JNZ	short MkErrP
 14793                                  
 14794                                  	; MSDOS 3.3
 14795                                  	;push	ss
 14796                                  	;pop	ds
 14797                                  	;call	si
 14798                                  	;jb	short MkErr
 14799                                  	;;jmp	short mkdir_ok
 14800                                  	;jmp	SYS_RET_OK
 14801                                  
 14802                                  	; MSDOS 6.0
 14803 0000229B 56                      	PUSH	SI			;PTM.			;AN000;
 14804 0000229C E80D00                  	CALL	Check_PathLen		;PTM. check path len > 67 ? ;AN000;
 14805 0000229F 5E                      	POP	SI			;PTM.			;AN000;
 14806 000022A0 7604                    	JBE	short pathok		;PTM.			;AN000;
 14807                                  	;mov	al,5
 14808 000022A2 B005                    	MOV	AL,error_access_denied	;PTM. ops!
 14809                                  	;jmp	SYS_RET_ERR		;PTM.
 14810 000022A4 EBEA                    	jmp	short MkErr
 14811                                  pathok:
 14812 000022A6 FFD6                    	CALL	SI			; go get file
 14813 000022A8 72E6                    	JC	short MkErr		; no errors
 14814                                  	; 16/12/2022
 14815                                  	; 10/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 14816 000022AA EBD0                    	jmp	short mkdir_ok
 14817                                  	;jmp	SYS_RET_OK
 14818                                  
 14819                                  ;----------------------------------------------------------------------------
 14820                                  ;
 14821                                  ; Procedure Name : Check_PathLen
 14822                                  ;
 14823                                  ; Inputs:
 14824                                  ;	nothing
 14825                                  ; Function:
 14826                                  ;	check if final path length greater than 67
 14827                                  ; Returns:
 14828                                  ;	Above flag set if > 67
 14829                                  ;
 14830                                  ;---------------------------------------------------------------------------
 14831                                  
 14832                                  Check_PathLen:
 14833                                  	; 09/09/2018
 14834                                  	;mov	SI,[WFP_START]
 14835 000022AC 368B36[B205]            	MOV	SI,[SS:WFP_START] ; MSDOS 6.0
 14836                                  Check_PathLen2:
 14837 000022B1 16                      	push	ss
 14838 000022B2 1F                      	pop	ds
 14839                                  	;mov	SI,[WFP_START]	  ; MSDOS 3.3
 14840 000022B3 51                      	push	CX	
 14841 000022B4 E88AEF                  	CALL	DStrLen
 14842 000022B7 83F943                  	CMP	CX,DIRSTRLEN ; 67
 14843 000022BA 59                      	POP	CX
 14844 000022BB C3                      	retn
 14845                                  
 14846                                  ;============================================================================
 14847                                  ; IOCTL.ASM, MSDOS 6.0, 1991
 14848                                  ;============================================================================
 14849                                  ; 07/08/2018 - Retro DOS v3.0
 14850                                  ; 17/05/2019 - Retro DOS v4.0
 14851                                  
 14852                                  ;**	IOCTL system call.
 14853                                  ;----------------------------------------------------------------------------
 14854                                  ;	$IOCTL
 14855                                  ;
 14856                                  ;	  Revision history:
 14857                                  ;
 14858                                  ;		Created: ARR 4 April 1983
 14859                                  ;
 14860                                  ;		GenericIOCTL added:		KGS	22 April 1985
 14861                                  ;
 14862                                  ;		A000	version 4.00	Jan. 1988
 14863                                  ;
 14864                                  ;		Used jump table to dispatch IOCTL functions. HKN 3/12/90
 14865                                  ;
 14866                                  
 14867                                  ;BREAK <IOCTL - munge on a handle to do device specific stuff>
 14868                                  ;---------------------------------------------------------------------------
 14869                                  ;
 14870                                  ;   Assembler usage:
 14871                                  ;	    MOV     BX, Handle
 14872                                  ;	    MOV     DX, Data
 14873                                  ;
 14874                                  ;	(or LDS     DX,BUF
 14875                                  ;	    MOV     CX,COUNT)
 14876                                  ;
 14877                                  ;	    MOV     AH, Ioctl
 14878                                  ;	    MOV     AL, Request
 14879                                  ;	    INT     21h
 14880                                  ;
 14881                                  ;   AH = 0  Return a combination of low byte of sf_flags and device driver
 14882                                  ;	    attribute word in DX, handle in BX:
 14883                                  ;	    DH = high word of device driver attributes
 14884                                  ;	    DL = low byte of sf_flags
 14885                                  ;	 1  Set the bits contained in DX to sf_flags.  DH MUST be 0.  Handle
 14886                                  ;	    in BX.
 14887                                  ;	 2  Read CX bytes from the device control channel for handle in BX
 14888                                  ;	    into DS:DX.  Return number read in AX.
 14889                                  ;	 3  Write CX bytes to the device control channel for handle in BX from
 14890                                  ;	    DS:DX.  Return bytes written in AX.
 14891                                  ;	 4  Read CX bytes from the device control channel for drive in BX
 14892                                  ;	    into DS:DX.  Return number read in AX.
 14893                                  ;	 5  Write CX bytes to the device control channel for drive in BX from
 14894                                  ;	    DS:DX.  Return bytes written in AX.
 14895                                  ;	 6  Return input status of handle in BX. If a read will go to the
 14896                                  ;	    device, AL = 0FFh, otherwise 0.
 14897                                  ;	 7  Return output status of handle in BX. If a write will go to the
 14898                                  ;	    device, AL = 0FFh, otherwise 0.
 14899                                  ;	 8  Given a drive in BX, return 1 if the device contains non-
 14900                                  ;	    removable media, 0 otherwise.
 14901                                  ;	 9  Return the contents of the device attribute word in DX for the
 14902                                  ;	    drive in BX.  0200h is the bit for shared.	1000h is the bit for
 14903                                  ;	    network. 8000h is the bit for local use.
 14904                                  ;	 A  Return 8000h if the handle in BX is for the network or not.
 14905                                  ;	 B  Change the retry delay and the retry count for the system. BX is
 14906                                  ;	    the count and CX is the delay.
 14907                                  ;
 14908                                  ;   Error returns:
 14909                                  ;	    AX = error_invalid_handle
 14910                                  ;	       = error_invalid_function
 14911                                  ;	       = error_invalid_data
 14912                                  ;
 14913                                  ;-------------------------------------------------------------------------------
 14914                                  ;
 14915                                  ;   This is the documentation copied from DOS 4.0 it is much better
 14916                                  ;   than the above
 14917                                  ;
 14918                                  ;	There are several basic forms of IOCTL calls:
 14919                                  ;
 14920                                  ;
 14921                                  ;	** Get/Set device information:	**
 14922                                  ;
 14923                                  ;	ENTRY	(AL) = function code
 14924                                  ;		  0 - Get device information
 14925                                  ;		  1 - Set device information
 14926                                  ;		(BX) = file handle
 14927                                  ;		(DX) = info for "Set Device Information"
 14928                                  ;	EXIT	'C' set if error
 14929                                  ;		  (AX) = error code
 14930                                  ;		'C' clear if OK
 14931                                  ;		  (DX) = info for "Get Device Information"
 14932                                  ;	USES	ALL
 14933                                  ;
 14934                                  ;
 14935                                  ;	**  Read/Write Control Data From/To Handle  **
 14936                                  ;
 14937                                  ;	ENTRY	(AL) = function code
 14938                                  ;		  2 - Read device control info
 14939                                  ;		  3 - Write device control info
 14940                                  ;		(BX) = file handle
 14941                                  ;		(CX) = transfer count
 14942                                  ;		(DS:DX) = address for data
 14943                                  ;	EXIT	'C' set if error
 14944                                  ;		  (AX) = error code
 14945                                  ;		'C' clear if OK
 14946                                  ;		  (AX) = count of bytes transfered
 14947                                  ;	USES	ALL
 14948                                  ;
 14949                                  ;
 14950                                  ;	**  Read/Write Control Data From/To Block Device  **
 14951                                  ;
 14952                                  ;	ENTRY	(AL) = function code
 14953                                  ;		  4 - Read device control info
 14954                                  ;		  5 - Write device control info
 14955                                  ;		(BL) = Drive number (0=default, 1='A', 2='B', etc)
 14956                                  ;		(CX) = transfer count
 14957                                  ;		(DS:DX) = address for data
 14958                                  ;	EXIT	'C' set if error
 14959                                  ;		  (AX) = error code
 14960                                  ;		'C' clear if OK
 14961                                  ;		  (AX) = count of bytes transfered
 14962                                  ;	USES	ALL
 14963                                  ;
 14964                                  ;
 14965                                  ;	**  Get Input/Output Status  **
 14966                                  ;
 14967                                  ;	ENTRY	(AL) = function code
 14968                                  ;		  6 - Get Input status
 14969                                  ;		  7 - Get Output Status
 14970                                  ;		(BX) = file handle
 14971                                  ;	EXIT	'C' set if error
 14972                                  ;		  (AX) = error code
 14973                                  ;		'C' clear if OK
 14974                                  ;		  (AL) = 00 if not ready
 14975                                  ;		  (AL) = FF if ready
 14976                                  ;	USES	ALL
 14977                                  ;
 14978                                  ;
 14979                                  ;	**  Get Drive Information  **
 14980                                  ;
 14981                                  ;	ENTRY	(AL) = function code
 14982                                  ;		  8 - Check for removable media
 14983                                  ;		  9 - Get device attributes
 14984                                  ;		(BL) = Drive number (0=default, 1='A', 2='B', etc)
 14985                                  ;	EXIT	'C' set if error
 14986                                  ;		  (AX) = error code
 14987                                  ;		'C' clear if OK
 14988                                  ;		  (AX) = 0/1 media is removable/fixed (func. 8)
 14989                                  ;		  (DX) = device attribute word (func. 9)
 14990                                  ;	USES	ALL
 14991                                  ;
 14992                                  ;
 14993                                  ;	**  Get Redirected bit	**
 14994                                  ;
 14995                                  ;	ENTRY	(AL) = function code
 14996                                  ;		  0Ah - Network stuff
 14997                                  ;		(BX) = file handle
 14998                                  ;	EXIT	'C' set if error
 14999                                  ;		  (AX) = error code
 15000                                  ;		'C' clear if OK
 15001                                  ;		  (DX) = SFT flags word, 8000h set if network file
 15002                                  ;	USES	ALL
 15003                                  ;
 15004                                  ;
 15005                                  ;	**  Change sharer retry parameters  **
 15006                                  ;
 15007                                  ;	ENTRY	(AL) = function code
 15008                                  ;		  0Bh - Set retry parameters
 15009                                  ;		(CX) = retry loop count
 15010                                  ;		(DX) = number of retries
 15011                                  ;	EXIT	'C' set if error
 15012                                  ;		  (AX) = error code
 15013                                  ;		'C' clear if OK
 15014                                  ;	USES	ALL
 15015                                  ;
 15016                                  ;
 15017                                  ;   =================================================================
 15018                                  ;
 15019                                  ;	**  New Standard Control  **
 15020                                  ;
 15021                                  ;	ALL NEW IOCTL FACILITIES SHOULD USE THIS FORM.	THE OTHER
 15022                                  ;	FORMS ARE OBSOLETE.
 15023                                  ;
 15024                                  ;   =================================================================
 15025                                  ;
 15026                                  ;	ENTRY	(AL) = function code
 15027                                  ;		  0Ch - Control Function subcode
 15028                                  ;		(BX) = File Handle
 15029                                  ;		(CH) = Category Indicator
 15030                                  ;		(CL) = Function within category
 15031                                  ;		(DS:DX) = address for data, if any
 15032                                  ;		(SI) = Passed to device as argument, use depends upon function
 15033                                  ;		(DI) = Passed to device as argument, use depends upon function
 15034                                  ;	EXIT	'C' set if error
 15035                                  ;		  (AX) = error code
 15036                                  ;		'C' clear if OK
 15037                                  ;		  (SI) = Return value, meaning is function dependent
 15038                                  ;		  (DI) = Return value, meaning is function dependent
 15039                                  ;		  (DS:DX) = Return address, use is function dependent
 15040                                  ;	USES	ALL
 15041                                  ;
 15042                                  ;    ============== Generic IOCTL Definitions for DOS 3.2 ============
 15043                                  ;     (See inc\ioctl.inc for more info)
 15044                                  ;
 15045                                  ;	ENTRY	(AL) = function code
 15046                                  ;		  0Dh - Control Function subcode
 15047                                  ;		(BL) = Drive Number (0 = Default, 1= 'A')
 15048                                  ;		(CH) = Category Indicator
 15049                                  ;		(CL) = Function within category
 15050                                  ;		(DS:DX) = address for data, if any
 15051                                  ;		(SI) = Passed to device as argument, use depends upon function
 15052                                  ;		(DI) = Passed to device as argument, use depends upon function
 15053                                  ;
 15054                                  ;	EXIT	'C' set if error
 15055                                  ;		  (AX) = error code
 15056                                  ;		'C' clear if OK
 15057                                  ;		  (DS:DX) = Return address, use is function dependent
 15058                                  ;	USES	ALL
 15059                                  ;
 15060                                  ;---------------------------------------------------------------------------
 15061                                  	
 15062                                  	; 17/05/2019 - Retro DOS v4.0
 15063                                  	; DOSCODE:611Eh (MSDOS 6.21, MSDOS.SYS)
 15064                                  
 15065                                  	; 11/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 15066                                  	; DOSCODE:610Ah (MSDOS 5.0, MSDOS.SYS)
 15067                                  
 15068                                  IOCTLJMPTABLE:	;label	word
 15069                                  	; MSDOS 3.3 (& MSDOS 6.0)
 15070 000022BC [FA22]                  	dw	ioctl_getset_data	; 0
 15071 000022BE [FA22]                  	dw	ioctl_getset_data   	; 1
 15072 000022C0 [4A23]                  	dw	ioctl_control_string	; 2
 15073 000022C2 [4A23]                  	dw	ioctl_control_string	; 3
 15074 000022C4 [9E24]                  	dw	ioctl_get_dev		; 4
 15075 000022C6 [9E24]                  	dw	ioctl_get_dev		; 5
 15076 000022C8 [6423]                  	dw	ioctl_status		; 6
 15077 000022CA [6423]                  	dw	ioctl_status		; 7
 15078 000022CC [0524]                  	dw	ioctl_rem_media		; 8
 15079 000022CE [4324]                  	dw	ioctl_drive_attr	; 9
 15080 000022D0 [9024]                  	dw	ioctl_handle_redir	; A
 15081 000022D2 [8023]                  	dw	Set_Retry_Parameters	; B
 15082 000022D4 [8E23]                  	dw	GENERICIOCTLHANDLE	; C
 15083 000022D6 [A523]                  	dw	GENERICIOCTL		; D
 15084                                  	; MSDOS 6.0 (& MSDOS 3.3)
 15085 000022D8 [4F25]                  	dw	ioctl_drive_owner	; E
 15086 000022DA [4F25]                  	dw	ioctl_drive_owner	; F
 15087                                  	; MSDOS 6.0
 15088 000022DC [8E23]                  	dw	query_handle_support	; 10h
 15089 000022DE [A523]                  	dw	query_device_support	; 11h
 15090                                  
 15091                                  	; 11/11/2022
 15092                                  _$IOCTL:
 15093 000022E0 8CDE                    	MOV	SI,DS			; Stash DS for calls 2,3,4 and 5
 15094 000022E2 16                      	push	ss
 15095 000022E3 1F                      	pop	ds			;hkn; SS is DOSDATA
 15096                                  
 15097                                  	; MSDOS 3.3
 15098                                  	;cmp	al,0Fh 
 15099                                  	; MSDOS 6.0
 15100 000022E4 3C11                    	cmp	al,11h			; al must be between 0 & 11h
 15101 000022E6 770F                    	ja	short ioctl_bad_funj2	; if not bad function #
 15102                                  
 15103                                  	; 28/05/2019
 15104 000022E8 50                      	push	AX			; Need to save AL for generic IOCTL
 15105 000022E9 89C7                    	mov	di,ax			; di NOT a PARM
 15106 000022EB 81E7FF00                	and	di,0FFh			; di = al
 15107 000022EF D1E7                    	shl	di,1			; di = index into jmp table
 15108 000022F1 58                      	pop	AX			; Restore AL for generic IOCTL
 15109                                  
 15110 000022F2 2EFFA5[BC22]            	jmp	word [CS:DI+IOCTLJMPTABLE]
 15111                                  
 15112                                  ioctl_bad_funj2:
 15113 000022F7 E90301                  	JMP	ioctl_bad_fun  ; 10/08/2018
 15114                                  
 15115                                  ;--------------------------------------------------------------------------
 15116                                  ;
 15117                                  ; IOCTL: AL = 0,1
 15118                                  ;
 15119                                  ; ENTRY: DS = DOSDATA
 15120                                  ;
 15121                                  ;--------------------------------------------------------------------------
 15122                                  
 15123                                  ioctl_getset_data:
 15124                                  	; MSDOS 6.0
 15125 000022FA E87244                  	call	SFFromHandle		; ES:DI -> SFT
 15126 000022FD 7305                    	JNC	short ioctl_check_permissions ; have valid handle
 15127                                  ioctl_bad_handle:
 15128                                  	;mov	al,6
 15129 000022FF B006                    	mov	al,error_invalid_handle
 15130                                  ioctl_error:
 15131 00002301 E94EE3                  	jmp	SYS_RET_ERR
 15132                                  
 15133                                  ioctl_check_permissions:
 15134 00002304 3C00                    	CMP	AL,0
 15135                                  	;mov	al,[es:di+5]
 15136 00002306 268A4505                	MOV	AL,[ES:DI+SF_ENTRY.sf_flags]; Get low byte of flags
 15137 0000230A 741B                    	JZ	short ioctl_read	; read the byte
 15138                                  
 15139 0000230C 08F6                    	or	dh,dh
 15140 0000230E 7404                    	JZ	short ioctl_check_device ; can I set with this data?
 15141                                  	;mov	al,0Dh
 15142 00002310 B00D                    	mov	al,error_invalid_data	; no DH <> 0
 15143                                  	;jmp	SYS_RET_ERR
 15144 00002312 EBED                    	jmp	short ioctl_error
 15145                                  
 15146                                  ioctl_check_device:
 15147 00002314 A880                    	test	AL,devid_device  ; 80h	; can I set this handle?
 15148 00002316 74DF                    	jz	short ioctl_bad_funj2
 15149 00002318 80CA80                  	OR	DL,devid_device 	; Make sure user doesn't turn off the
 15150                                  					;   device bit!! He can muck with the
 15151                                  					;   others at will.
 15152 0000231B C606[2303]04            	MOV	byte [EXTERR_LOCUS],errLOC_SerDev ; 4
 15153 00002320 26885505                	MOV	BYTE [ES:DI+SF_ENTRY.sf_flags],DL  ;AC000;MS.; Set flags
 15154                                  ioctl_ok:
 15155 00002324 E922E3                  	jmp	SYS_RET_OK
 15156                                  
 15157                                  ioctl_read:
 15158 00002327 C606[2303]02            	MOV	byte [EXTERR_LOCUS],errLOC_Disk  ; 2
 15159 0000232C 30E4                    	XOR	AH,AH
 15160 0000232E A880                    	test	AL,devid_device 	; Should I set high byte
 15161 00002330 740D                    	JZ	short ioctl_no_high	; no
 15162 00002332 C606[2303]04            	MOV	byte [EXTERR_LOCUS],errLOC_SerDev ; 4
 15163                                  	;les	di,[es:di+7]
 15164 00002337 26C47D07                	LES	DI,[ES:DI+SF_ENTRY.sf_devptr] ; Get device pointer
 15165                                  	;mov	ah,[es:di+5]
 15166 0000233B 268A6505                	MOV	AH,[ES:DI+SYSDEV.ATT+1] ; Get high byte
 15167                                  ioctl_no_high:
 15168 0000233F 89C2                    	MOV	DX,AX
 15169                                  ioctl_set_dx:	; 16/12/2022
 15170 00002341 E84BE1                  	call	Get_User_Stack
 15171                                  	;mov	[si+6],dx
 15172 00002344 895406                  	MOV	[SI+user_env.user_DX],DX
 15173                                  	;;jmp	SYS_RET_OK
 15174                                  	; 11/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 15175                                  ioctl_ok_j:
 15176                                  	; 16/12/2022
 15177 00002347 E902E3                  	jmp	SYS_RET_OK_clc	 ; (after 'Get_User_Stack') 
 15178                                  	;jmp	short ioctl_ok
 15179                                  	; 26/07/2019
 15180                                  	;jmp	SYS_RET_OK_clc
 15181                                  
 15182                                  ;--------------------------------------------------------------------------
 15183                                  ;
 15184                                  ; IOCTL: AL = 2,3
 15185                                  ;
 15186                                  ; ENTRY: DS = DOSDATA
 15187                                  ;	 SI = user's DS
 15188                                  ;
 15189                                  ;--------------------------------------------------------------------------
 15190                                  
 15191                                  	; 07/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 15192                                  ioctl_control_string:
 15193 0000234A E82244                  	call	SFFromHandle		; ES:DI -> SFT
 15194 0000234D 72B0                    	JC	short ioctl_bad_handle	; invalid handle
 15195                                  	; 07/12/2022
 15196                                  	;TEST	word [ES:DI+SF_ENTRY.sf_flags],devid_device ; can I?
 15197                                  	;jz	short ioctl_bad_funj2			; No it is a file
 15198                                  	; MSDOS 5.0 & MSDOS 6.0
 15199 0000234F 26F6450580              	test	byte [ES:DI+SF_ENTRY.sf_flags],devid_device ; can I?
 15200 00002354 74A1                    	jz	short ioctl_bad_funj2			; No it is a file
 15201 00002356 C606[2303]04            	MOV	byte [EXTERR_LOCUS],errLOC_SerDev
 15202 0000235B 26C47D07                	LES	DI,[ES:DI+SF_ENTRY.sf_devptr] ; Get device pointer
 15203 0000235F 30DB                    	XOR	BL,BL			; Unit number of char dev = 0
 15204 00002361 E94201                  	JMP	ioctl_do_string
 15205                                  
 15206                                  ;--------------------------------------------------------------------------
 15207                                  ;
 15208                                  ; IOCTL: AL = 6,7
 15209                                  ;
 15210                                  ; ENTRY: DS = DOSDATA
 15211                                  ;
 15212                                  ;--------------------------------------------------------------------------
 15213                                  
 15214                                  ioctl_status:
 15215 00002364 B401                    	MOV	AH,1
 15216 00002366 2C06                    	SUB	AL,6			; 6=0,7=1
 15217 00002368 7402                    	JZ	short ioctl_get_status
 15218 0000236A B403                    	MOV	AH,3
 15219                                  ioctl_get_status:
 15220 0000236C 50                      	PUSH	AX
 15221 0000236D E86F13                  	call	GET_IO_SFT
 15222 00002370 58                      	POP	AX
 15223                                  	;JNC	short DO_IOFUNC
 15224                                  	;JMP	short ioctl_bad_handle	; invalid SFT
 15225                                  	; 16/12/2022
 15226 00002371 728C                    	jc	short ioctl_bad_handle
 15227                                  DO_IOFUNC:
 15228 00002373 E8DA21                  	call	IOFUNC
 15229 00002376 88C4                    	MOV	AH,AL
 15230 00002378 B0FF                    	MOV	AL,0FFH
 15231 0000237A 7502                    	JNZ	short ioctl_status_ret
 15232 0000237C FEC0                    	INC	AL
 15233                                  ioctl_status_ret:
 15234                                  	;jmp	SYS_RET_OK
 15235                                  	; 11/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 15236                                  	;jmp	short ioctl_ok_j
 15237                                  	; 16/12/2022
 15238 0000237E EBA4                    	jmp	short ioctl_ok
 15239                                  
 15240                                  ;--------------------------------------------------------------------------
 15241                                  ;
 15242                                  ; IOCTL: AL = B
 15243                                  ;
 15244                                  ; ENTRY: DS = DOSDATA
 15245                                  ;
 15246                                  ;--------------------------------------------------------------------------
 15247                                  
 15248                                  Set_Retry_Parameters:
 15249                                  	; 09/09/2018
 15250 00002380 890E[1C00]              	MOV	[RetryLoop],CX		; 0 retry loop count allowed
 15251 00002384 09D2                    	OR	DX,DX			; zero retries not allowed
 15252 00002386 7475                    	JZ	short ioctl_bad_fun
 15253 00002388 8916[1A00]              	MOV	[RetryCount],DX		; Set new retry count
 15254                                  doneok:
 15255                                  	;jmp	SYS_RET_OK		; Done
 15256                                  	; 11/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 15257                                  	;jmp	short ioctl_status_ret
 15258                                  	; 16/12/2022
 15259 0000238C EB96                    	jmp	short ioctl_ok	 ; jmp SYS_RET_OK
 15260                                  
 15261                                  ;--------------------------------------------------------------------------
 15262                                  ;
 15263                                  ; Generic IOCTL entry point. AL = C, D, 10h, 11h
 15264                                  ;
 15265                                  ;	here we invoke the Generic IOCTL using the IOCTL_Req structure.
 15266                                  ;	SI:DX -> Users Device Parameter Table
 15267                                  ;	IOCALL -> IOCTL_Req structure
 15268                                  ;
 15269                                  ; 	If on entry AL >= IOCTL_QUERY_HANDLE the function is a
 15270                                  ;	QueryIOCtlSupport call ELSE it's a standard generic IOCtl
 15271                                  ;	call.
 15272                                  ;
 15273                                  ; BUGBUG: Don't push anything on the stack between GENERIOCTL: and 
 15274                                  ;         the call to Check_If_Net because Check_If_Net gets our
 15275                                  ;         return address off the stack if the drive is invalid.
 15276                                  ;
 15277                                  ;--------------------------------------------------------------------------
 15278                                  
 15279                                  query_handle_support:	; Entry point for handles
 15280                                  GENERICIOCTLHANDLE:
 15281 0000238E E8DE43                  	call	SFFromHandle		; Get SFT for device.
 15282 00002391 726F                    	jc	short ioctl_bad_handlej
 15283                                  
 15284                                  	;test	word [es:di+5],8000h
 15285                                  	;TEST	word [ES:DI+SF_ENTRY.sf_flags],sf_isnet	; M031;
 15286                                  	;test	byte [es:di+6],80h
 15287 00002393 26F6450680              	test	byte [ES:DI+SF_ENTRY.sf_flags+1],(sf_isnet>>8)
 15288 00002398 7563                    	jnz	short ioctl_bad_fun	; Cannot do this over net.
 15289                                  
 15290 0000239A C606[2303]04            	mov	byte [EXTERR_LOCUS],errLOC_SerDev ; 4
 15291                                  	;les	di,[es:di+7]
 15292 0000239F 26C47D07                	les	di,[es:di+SF_ENTRY.sf_devptr]	; Get pointer to device.
 15293 000023A3 EB0F                    	jmp	short Do_GenIOCTL
 15294                                  
 15295                                  query_device_support:	; Entry point for devices:
 15296                                  GENERICIOCTL:
 15297 000023A5 C606[2303]02            	mov	byte [EXTERR_LOCUS],errLOC_Disk ; 2
 15298 000023AA 80FD08                  	cmp	ch,IOC_DC ; 8		; Only disk devices are allowed to use
 15299 000023AD 754E                    	jne	short ioctl_bad_fun	; no handles with Generic IOCTL.
 15300                                  
 15301 000023AF E88101                  	CALL	Check_If_Net		; ES:DI := Get_hdr_block of device in BL
 15302 000023B2 7549                    	JNZ	short ioctl_bad_fun	; There are no "net devices", and they
 15303                                  
 15304                                  Do_GenIOCTL:
 15305                                  	;TEST	word [ES:DI+SYSDEV.ATT],DEV320 
 15306                                  					; Can device handle Generic IOCTL funcs
 15307                                  	; 09/09/2018
 15308                                  	;test	byte [es:di+4],40h
 15309 000023B4 26F6450440              	TEST	byte [ES:DI+SYSDEV.ATT],DEV320 ; 0040h
 15310 000023B9 7442                    	jz	short ioctl_bad_fun
 15311                                  
 15312                                  	; 17/05/2019 - Retro DOS v4.0
 15313                                  
 15314                                  	; MSDOS 6.0
 15315                                  	;mov	byte [IOCALL_REQFUNC],19 ; 13h
 15316 000023BB C606[7E03]13            	mov	byte [IOCALL_REQFUNC],GENIOCTL ; Assume real Request
 15317                                  	;cmp	al,10h
 15318 000023C0 3C10                    	cmp	AL,IOCTL_QUERY_HANDLE	; See if this is just a query
 15319 000023C2 7C0C                    	jl	short SetIOCtlBlock
 15320                                  	
 15321                                  	;TEST	word [ES:DI+SYSDEV.ATT],IOQUERY ; See if device supports a query
 15322                                  	;test	byte [es:di+4],80h 
 15323 000023C4 26F6450480              	TEST	byte [ES:DI+SYSDEV.ATT],IOQUERY ; See if device supports a query
 15324 000023C9 7432                    	jz	short ioctl_bad_fun	; No support for query 
 15325                                  	;
 15326                                  	;mov	byte [IOCALL_REQFUNC],19h	
 15327 000023CB C606[7E03]19            	mov	byte [IOCALL_REQFUNC],IOCTL_QUERY ; Just a query (5.00)
 15328                                  
 15329                                  SetIOCtlBlock:
 15330 000023D0 06                      	PUSH	ES			; DEVIOCALL2 expects Device header block
 15331 000023D1 57                      	PUSH	DI			; in DS:SI
 15332                                  					; Setup Generic IOCTL Request Block
 15333                                  	;mov	byte [IOCALL_REQLEN],23
 15334 000023D2 C606[7C03]17            	mov	byte [IOCALL_REQLEN],IOCTL_REQ.size
 15335                                  	; 07/09/2018 (MSDOS 3.3)
 15336                                  	;;mov	byte [IOCALL_REQFUNC],19
 15337                                  	;mov	byte [IOCALL_REQFUNC],GENIOCTL ; 07/09/2018
 15338                                  	;
 15339 000023D7 881E[7D03]              	MOV	[IOCALL_REQUNIT],BL
 15340 000023DB 882E[8903]              	MOV	[IOCALL+IOCTL_REQ.MAJORFUNCTION],CH
 15341 000023DF 880E[8A03]              	MOV	[IOCALL+IOCTL_REQ.MINORFUNCTION],CL
 15342 000023E3 8936[8B03]              	MOV	[IOCALL+IOCTL_REQ.REG_SI],SI
 15343 000023E7 893E[8D03]              	MOV	[IOCALL+IOCTL_REQ.REG_DI],DI
 15344 000023EB 8916[8F03]              	MOV	[IOCALL+IOCTL_REQ.GENERICIOCTL_PACKET],DX
 15345 000023EF 8936[9103]              	MOV	[IOCALL+IOCTL_REQ.GENERICIOCTL_PACKET+2],SI
 15346                                  
 15347                                  ;hkn; IOCALL is in DOSDATA
 15348 000023F3 BB[7C03]                	MOV	BX,IOCALL
 15349                                  
 15350 000023F6 16                      	PUSH	SS
 15351 000023F7 07                      	POP	ES
 15352                                  					; DS:SI -> Device header.
 15353 000023F8 5E                      	POP	SI
 15354 000023F9 1F                      	POP	DS
 15355                                  	; 10/08/2018
 15356 000023FA E9E200                  	jmp	ioctl_do_IO		; Perform Call to device driver
 15357                                  
 15358                                  ioctl_bad_fun:
 15359 000023FD B001                    	mov	al, error_invalid_function  ; 1
 15360 000023FF E950E2                  	jmp	SYS_RET_ERR	
 15361                                  
 15362                                  ioctl_bad_handlej:
 15363 00002402 E9FAFE                  	jmp	ioctl_bad_handle
 15364                                  
 15365                                  ;---------------------------------------------------------------------------
 15366                                  ;
 15367                                  ; IOCTL: AL = 8
 15368                                  ;
 15369                                  ; ENTRY: DS = DOSDATA
 15370                                  ;
 15371                                  ; BUGBUG: Don't push anything on the stack between ioctl_rem_media: and 
 15372                                  ;         the call to Check_If_Net because Check_If_Net gets our
 15373                                  ;         return address off the stack if the drive is invalid.
 15374                                  ;
 15375                                  ;-------------------------------------------------------------------------
 15376                                  
 15377                                  ioctl_rem_media:
 15378                                  	; MSDOS 3.3 (& MSDOS 6.0)
 15379 00002405 E82B01                  	CALL	Check_If_Net
 15380 00002408 75F3                    	JNZ	short ioctl_bad_fun	; There are no "net devices", and they
 15381                                  					;   certainly don't know how to do this
 15382                                  					;   call.
 15383                                  	;test	word [es:di+4],800h
 15384                                  	;TEST	word [ES:DI+SYSDEV.ATT],DEVOPCL ; See if device can
 15385                                  	;test	byte [es:di+5],8
 15386 0000240A 26F6450508              	TEST	byte [es:di+SYSDEV.ATT+1],(DEVOPCL>>8)
 15387 0000240F 74EC                    	JZ	short ioctl_bad_fun		; NO
 15388                                  
 15389                                  ;hkn; SS override for IOCALL
 15390 00002411 36C606[7E03]0F          	MOV	byte [SS:IOCALL_REQFUNC],DEVRMD ; 15
 15391 00002417 B00D                    	MOV	AL,REMHL  ; 13
 15392 00002419 88DC                    	MOV	AH,BL			; Unit number
 15393 0000241B 36A3[7C03]              	MOV	[SS:IOCALL_REQLEN],AX
 15394 0000241F 31C0                    	XOR	AX,AX
 15395 00002421 36A3[7F03]              	MOV	[SS:IOCALL_REQSTAT],AX
 15396 00002425 06                      	PUSH	ES
 15397 00002426 1F                      	POP	DS
 15398 00002427 89FE                    	MOV	SI,DI			; DS:SI -> driver
 15399 00002429 16                      	PUSH	SS
 15400 0000242A 07                      	POP	ES
 15401                                  
 15402                                  ;hkn; IOCALL is in DOSDATA (msconst.asm)
 15403 0000242B BB[7C03]                	MOV	BX,IOCALL		; ES:BX -> Call header
 15404 0000242E 1E                      	push	ds
 15405 0000242F 56                      	push	si
 15406 00002430 E8F422                  	call	DEVIOCALL2
 15407 00002433 5E                      	pop	si
 15408 00002434 1F                      	pop	ds
 15409                                  
 15410                                  ;hkn; SS override
 15411 00002435 36A1[7F03]              	MOV	AX,[SS:IOCALL_REQSTAT]	; Get Status word
 15412 00002439 250002                  	AND	AX,STBUI ; 200h		; Mask to busy bit
 15413 0000243C B109                    	MOV	CL,9
 15414 0000243E D3E8                    	SHR	AX,CL			; Busy bit to bit 0
 15415                                  ioctl_da_ok_j:	; 11/11/2022
 15416 00002440 E906E2                  	jmp	SYS_RET_OK
 15417                                  
 15418                                  ;-------------------------------------------------------------------------
 15419                                  ;
 15420                                  ; IOCTL: AL = 9
 15421                                  ;
 15422                                  ; ENTRY: DS = DOSDATA
 15423                                  ;
 15424                                  ;-------------------------------------------------------------------------
 15425                                  
 15426                                  ioctl_drive_attr:
 15427                                  	; MSDOS 3.3 (& MSDOS 6.0)
 15428 00002443 88D8                    	mov	al,bl
 15429 00002445 E84B47                  	call	GETTHISDRV
 15430 00002448 7241                    	jc	short ioctl_drv_err
 15431 0000244A E8B800                  	call	Get_Driver_BL
 15432                                  	; MSDOS 6.0
 15433 0000244D 723C                    	JC	short ioctl_drv_err	; drive not valid
 15434                                  
 15435                                  	;mov	dx,[es:di+4]
 15436 0000244F 268B5504                	mov	dx,[es:di+SYSDEV.ATT]	
 15437                                  					; get device attribute word
 15438 00002453 88C3                    	MOV	BL,AL			; Phys letter to BL (A=0)
 15439                                  
 15440                                  ;hkn; SS override
 15441 00002455 36C43E[A205]            	LES	DI,[SS:THISCDS]
 15442                                  	;test	word [es:di+43h],8000h
 15443                                  	;TEST	word [ES:DI+curdir.flags],curdir_isnet
 15444                                  	;test	byte [es:di+44h],80h
 15445 0000245A 26F6454480              	TEST	byte [ES:DI+curdir.flags+1],(curdir_isnet>>8)
 15446 0000245F 7403                    	JZ	short IOCTLShare
 15447                                  
 15448                                  	;or	dx,1000h ; (MSDOS 3.3)
 15449                                  
 15450                                  ;	Net devices don't return a device attribute word.
 15451                                  ;	Bit 12 = 1, meaning net device, all others = 0.
 15452                                  
 15453 00002461 BA0010                  	MOV	DX,1000h ; MSDOS 6.0
 15454                                  IOCTLShare:
 15455 00002464 16                      	push	ss
 15456 00002465 1F                      	pop	ds
 15457 00002466 BE[BE03]                	MOV	SI,OPENBUF
 15458 00002469 80C341                  	ADD	BL,"A"	; 41h
 15459 0000246C 881C                    	MOV	[SI],BL
 15460 0000246E C744013A00              	MOV	WORD [SI+1],003AH ; ":",0
 15461 00002473 B80003                  	MOV	AX,0300h
 15462 00002476 F8                      	CLC
 15463                                  	;INT	int_IBM
 15464 00002477 CD2A                    	int     2Ah	; Microsoft Networks - CHECK DIRECT I/O
 15465                                  			; DS:SI -> ASCIZ disk device name 
 15466                                  			; (may be full path or only drive
 15467                                  			; specifier--must include the colon)
 15468                                  			; Return: CF clear if absolute disk access allowed
 15469 00002479 7303                    	JNC	short IOCTLLocal	; Not shared
 15470                                  	;OR	DX,0200H		; Shared, bit 9
 15471                                  	; 17/12/2022
 15472 0000247B 80CE02                  	or	dh,02h
 15473                                  IOCTLLocal:
 15474                                  	;test	word [es:di+43h],1000h
 15475                                  	;TEST	word [ES:DI+curdir.flags],curdir_local
 15476                                  	;test	byte [es:di+44h],10h
 15477 0000247E 26F6454410              	TEST	byte [ES:DI+curdir.flags+1],(curdir_local>>8)
 15478                                  	;JZ	short ioctl_set_DX
 15479                                  	; 16/12/2022
 15480 00002483 7403                    	jz	short _ioctl_set_DX
 15481                                  	;OR	DX,8000h
 15482                                  	; 17/12/2022
 15483 00002485 80CE80                  	or	dh,80h
 15484                                  ;ioctl_set_DX:
 15485                                  _ioctl_set_DX:
 15486                                  	; 16/12/2022
 15487 00002488 E9B6FE                  	jmp	ioctl_set_dx
 15488                                  ; 16/12/2022
 15489                                  %if 0	
 15490                                  	call	Get_User_Stack
 15491                                  	MOV	[SI+user_env.user_DX],DX
 15492                                  	;;jmp	SYS_RET_OK
 15493                                  	;; 25/06/2019
 15494                                  	;jmp	SYS_RET_OK_clc
 15495                                  	; 11/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 15496                                  ioctl_gd_ok_j:
 15497                                  	jmp	short ioctl_da_ok_j
 15498                                  %endif
 15499                                  
 15500                                  ioctl_drv_err:
 15501 0000248B B00F                    	mov	al,error_invalid_drive ; 0Fh
 15502                                  ioctl_gd_err_j:	; 11/11/2022
 15503 0000248D E9C2E1                  	jmp	SYS_RET_ERR
 15504                                  
 15505                                  ;--------------------------------------------------------------------------
 15506                                  ;
 15507                                  ; IOCTL: AL = A
 15508                                  ;
 15509                                  ; ENTRY: DS = DOSDATA
 15510                                  ;
 15511                                  ;--------------------------------------------------------------------------
 15512                                  
 15513                                  ioctl_handle_redir:
 15514 00002490 E8DC42                  	call	SFFromHandle		; ES:DI -> SFT
 15515 00002493 7303                    	JNC	short ioctl_got_sft	; have valid handle
 15516 00002495 E967FE                  	jmp	ioctl_bad_handle ; 10/08/2018
 15517                                  
 15518                                  ioctl_got_sft:
 15519                                  	;mov	dx,[es:di+5]
 15520 00002498 268B5505                	MOV	DX,[ES:DI+SF_ENTRY.sf_flags] ; Get flags
 15521                                  	;JMP	short ioctl_set_DX	; pass dx to user and return
 15522                                  	; 16/12/2022
 15523 0000249C EBEA                    	jmp	short _ioctl_set_DX
 15524                                  
 15525                                  	; 16/12/2022
 15526                                  ;ioctl_bad_funj:
 15527                                  	;JMP	ioctl_bad_fun
 15528                                  
 15529                                  ;--------------------------------------------------------------------------
 15530                                  ;
 15531                                  ; IOCTL: AL= 4,5
 15532                                  ;
 15533                                  ; ENTRY: DS = DOSDATA
 15534                                  ;	 SI = user's DS
 15535                                  ;
 15536                                  ;
 15537                                  ; BUGBUG: Don't push anything on the stack between ioctl_get_dev: and 
 15538                                  ;         the call to Check_If_Net because Check_If_Net gets our
 15539                                  ;         return address off the stack if the drive is invalid.
 15540                                  ;
 15541                                  ;-------------------------------------------------------------------------
 15542                                  
 15543                                  ioctl_get_dev:
 15544 0000249E E89200                  	CALL	Check_If_Net
 15545                                  	;JNZ	short ioctl_bad_funj	; There are no "net devices", and they
 15546                                  					; certainly don't know how to do this
 15547                                  					; call.
 15548                                  	; 16/12/2022
 15549 000024A1 7403                    	jz	short ioctl_do_string
 15550                                  ioctl_bad_funj:
 15551 000024A3 E957FF                  	JMP	ioctl_bad_fun
 15552                                  
 15553                                  ioctl_do_string:
 15554                                  	;test	word [es:di+4],4000h
 15555                                  	;TEST	word [ES:DI+SYSDEV.ATT],DEVIOCTL; See if device accepts control
 15556                                  	;test	byte [es:di+5],40h
 15557 000024A6 26F6450540              	TEST	byte [ES:DI+SYSDEV.ATT+1],(DEVIOCTL>>8)
 15558 000024AB 74F6                    	JZ	short ioctl_bad_funj		; NO
 15559                                  					; assume IOCTL read
 15560 000024AD C606[7E03]03            	MOV	byte [IOCALL_REQFUNC],DEVRDIOCTL  ; 3
 15561                                  
 15562 000024B2 A801                    	TEST	AL,1			; is it func. 4/5 or 2/3
 15563 000024B4 7405                    	JZ	short ioctl_control_call ; it is read. goto ioctl_control_call
 15564                                  
 15565                                  					; it is an IOCTL write
 15566 000024B6 C606[7E03]0C            	MOV	byte [IOCALL_REQFUNC],DEVWRIOCTL ; 12
 15567                                  
 15568                                  ioctl_control_call:
 15569 000024BB B016                    	MOV	AL,DRDWRHL ; 22
 15570                                  ioctl_setup_pkt:
 15571 000024BD 88DC                    	MOV	AH,BL			; Unit number
 15572 000024BF A3[7C03]                	MOV	[IOCALL_REQLEN],AX
 15573 000024C2 31C0                    	XOR	AX,AX
 15574 000024C4 A3[7F03]                	MOV	[IOCALL_REQSTAT],AX
 15575 000024C7 A2[8903]                	MOV	[IOMED],AL
 15576 000024CA 890E[8E03]              	MOV	[IOSCNT],CX
 15577 000024CE 8916[8A03]              	MOV	[IOXAD],DX
 15578 000024D2 8936[8C03]              	MOV	[IOXAD+2],SI
 15579 000024D6 06                      	PUSH	ES
 15580 000024D7 1F                      	POP	DS
 15581 000024D8 89FE                    	MOV	SI,DI			; DS:SI -> driver
 15582 000024DA 16                      	PUSH	SS
 15583 000024DB 07                      	POP	ES
 15584                                  
 15585 000024DC BB[7C03]                	MOV	BX,IOCALL		; ES:BX -> Call header
 15586                                  ioctl_do_IO:
 15587 000024DF E84522                  	call	DEVIOCALL2
 15588                                  
 15589                                  ;hkn; SS override for IOCALL
 15590                                  	;test	word [SS:IOCALL_REQSTAT],8000h
 15591                                  	;TEST	word [SS:IOCALL_REQSTAT],STERR ;Error?
 15592                                  	;test	byte [SS:IOCALL_REQSTAT+1],80h
 15593 000024E2 36F606[8003]80          	TEST	byte [SS:IOCALL_REQSTAT+1],(STERR>>8)
 15594 000024E8 7507                    	JNZ	short ioctl_string_err
 15595                                  
 15596                                  ;hkn; SS override
 15597 000024EA 36A1[8E03]              	MOV	AX,[SS:IOSCNT]		; Get actual bytes transferred
 15598                                  	; 16/12/2022
 15599 000024EE E958E1                  	jmp	SYS_RET_OK
 15600                                  	; 11/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 15601                                  	;jmp	short ioctl_gd_ok_j
 15602                                  
 15603                                  ioctl_string_err:
 15604 000024F1 368B3E[7F03]            	MOV	DI,[SS:IOCALL_REQSTAT]	;Get Error
 15605                                  device_err:
 15606 000024F6 81E7FF00                	AND	DI,STECODE ; 00FFh	; mask out irrelevant bits
 15607 000024FA 89F8                    	MOV	AX,DI
 15608 000024FC E8E230                  	call	SET_I24_EXTENDED_ERROR
 15609                                  
 15610                                  ;hkn; use SS override
 15611                                  ;hkn;	mov	ax,[CS:EXTERR]
 15612 000024FF 36A1[2403]              	mov	ax,[SS:EXTERR]
 15613                                  	;jmp	SYS_RET_ERR
 15614                                  	; 11/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 15615 00002503 EB88                    	jmp	short ioctl_gd_err_j
 15616                                  
 15617                                  ; 17/05/2019 - Retro DOS v4.0
 15618                                  
 15619                                  ;--------------------------------------------------------------------------
 15620                                  ; Proc name : Get_Driver_BL
 15621                                  ;
 15622                                  ;	DS is DOSDATA
 15623                                  ;	BL is drive number (0=default)
 15624                                  ;	Returns pointer to device in ES:DI, unit number in BL if carry clear
 15625                                  ;	No regs modified
 15626                                  ;
 15627                                  ;---------------------------------------------------------------------------
 15628                                  
 15629                                  Get_Driver_BL:
 15630 00002505 50                      	PUSH	AX
 15631 00002506 88D8                    	MOV	AL,BL			; Drive
 15632 00002508 E88846                  	call	GETTHISDRV
 15633 0000250B 7224                    	jc	short ioctl_bad_drv
 15634 0000250D 30DB                    	XOR	BL,BL			; Unit zero on Net device
 15635 0000250F C606[2303]03            	MOV	byte [EXTERR_LOCUS],errLOC_Net ; 3
 15636 00002514 C43E[A205]              	LES	DI,[THISCDS]
 15637                                  	;test	word [es:di+43h],8000h
 15638                                  	;TEST	word [ES:DI+curdir.flags],curdir_isnet
 15639                                  	;test	byte [es:di+44h],80h
 15640 00002518 26F6454480              	TEST	byte [ES:DI+curdir.flags+1],(curdir_isnet>>8)
 15641                                  	;les	di,[es:di+45h]
 15642 0000251D 26C47D45                	LES	DI,[ES:DI+curdir.devptr] ; ES:DI -> Dpb or net dev
 15643 00002521 750D                    	JNZ	short got_dev_ptr	 ; Is net
 15644 00002523 C606[2303]02            	MOV	byte [EXTERR_LOCUS],errLOC_Disk ; 2
 15645                                  	;mov	bl,[es:di+1]
 15646 00002528 268A5D01                	MOV	BL,[ES:DI+DPB.UNIT]	; Unit number
 15647                                  	;les	di,[es:di+13h]
 15648 0000252C 26C47D13                	LES	DI,[ES:DI+DPB.DRIVER_ADDR] ; Driver addr
 15649                                  got_dev_ptr:
 15650 00002530 F8                      	CLC
 15651                                  ioctl_bad_drv:
 15652 00002531 58                      	POP	AX
 15653 00002532 C3                      	retn
 15654                                  
 15655                                  ;-------------------------------------------------------------------------
 15656                                  ; Proc Name : Check_If_Net:
 15657                                  ;
 15658                                  ;
 15659                                  ; Checks if the device is over the net or not. Returns result in ZERO flag.
 15660                                  ; If no device is found, the return address is popped off the stack, and a
 15661                                  ; jump is made to ioctl_drv_err.
 15662                                  ;
 15663                                  ; On Entry:
 15664                                  ; Registers same as those for Get_Driver_BL
 15665                                  ;
 15666                                  ; On Exit:
 15667                                  ; ZERO flag	- set if not a net device
 15668                                  ;		- reset if net device
 15669                                  ; ES:DI -> the device
 15670                                  ;
 15671                                  ;
 15672                                  ; BUGBUG: This function assumes the following stack setup on entry
 15673                                  ;
 15674                                  ;	  SP+2 -> Error return address
 15675                                  ;	  SP   -> Normal return address
 15676                                  ;
 15677                                  ;-------------------------------------------------------------------------
 15678                                  
 15679                                  Check_If_Net:
 15680                                  	; MSDOS 3.3 (& MSDOS 6.0)
 15681 00002533 E8CFFF                  	CALL	Get_Driver_BL
 15682 00002536 720E                    	JC	short ioctl_drv_err_pop	; invalid drive letter
 15683 00002538 06                      	PUSH	ES
 15684 00002539 57                      	PUSH	DI
 15685 0000253A C43E[A205]              	LES	DI,[THISCDS]
 15686                                  	;test	word [es:di+43h],8000h
 15687                                  	;TEST	word [ES:DI+curdir.flags],curdir_isnet
 15688                                  	;test	byte [es:di+44h],80h
 15689 0000253E 26F6454480              	TEST	byte [ES:DI+curdir.flags+1],(curdir_isnet>>8)
 15690 00002543 5F                      	POP	DI
 15691 00002544 07                      	POP	ES
 15692 00002545 C3                      	retn
 15693                                  
 15694                                  ioctl_drv_err_pop:
 15695 00002546 58                      	pop	ax			; pop off return address
 15696 00002547 E941FF                  	jmp	ioctl_drv_err
 15697                                  
 15698                                  ioctl_bad_funj3:
 15699 0000254A E9B0FE                  	jmp	ioctl_bad_fun
 15700                                  
 15701                                  ioctl_string_errj:
 15702 0000254D EBA2                    	jmp	short ioctl_string_err  ; 25/05/2019
 15703                                  
 15704                                  ;--------------------------------------------------------------------------
 15705                                  ;
 15706                                  ; IOCTL: AL = E, F
 15707                                  ;
 15708                                  ; ENTRY: DS = DOSDATA
 15709                                  ;
 15710                                  ;
 15711                                  ; BUGBUG: Don't push anything on the stack between ioctl_drive_owner: and 
 15712                                  ;         the call to Check_If_Net because Check_If_Net gets our
 15713                                  ;         return address off the stack if the drive is invalid.
 15714                                  ;
 15715                                  ;--------------------------------------------------------------------------
 15716                                  
 15717                                  ioctl_drive_owner:
 15718                                  	; MSDOS 3.3 (& MSDOS 6.0)
 15719 0000254F E8E1FF                  	Call	Check_If_Net
 15720 00002552 75F6                    	JNZ	short ioctl_bad_funj3 	; There are no "net devices", and they
 15721                                  					;   certainly don't know how to do this
 15722                                  					;   call.
 15723                                  	;TEST	word [ES:DI+SYSDEV.ATT],DEV320	; See if device can handle this
 15724                                  	; 09/09/2018
 15725                                  	;test	byte [es:di+4],40h
 15726 00002554 26F6450440              	TEST	byte [ES:DI+SYSDEV.ATT],DEV320 ; 0040h
 15727 00002559 74EF                    	JZ	short ioctl_bad_funj3 	; NO
 15728                                  	;mov	byte [IOCALL_REQFUNC],23
 15729 0000255B C606[7E03]17            	mov	byte [IOCALL_REQFUNC],DEVGETOWN	; default to get owner
 15730 00002560 3C0E                    	cmp	al,0Eh			; Get Owner ?
 15731 00002562 7405                    	jz	short GetOwner
 15732                                  SetOwner:
 15733 00002564 C606[7E03]18            	MOV	byte [IOCALL_REQFUNC],DEVSETOWN ; 24
 15734                                  GetOwner:
 15735 00002569 B00D                    	MOV	AL,OWNHL ; 13
 15736 0000256B 88DC                    	MOV	AH,BL			; Unit number
 15737 0000256D A3[7C03]                	MOV	[IOCALL_REQLEN],AX
 15738 00002570 31C0                    	XOR	AX,AX
 15739 00002572 A3[7F03]                	MOV	[IOCALL_REQSTAT],AX
 15740 00002575 06                      	PUSH	ES
 15741 00002576 1F                      	POP	DS
 15742 00002577 89FE                    	MOV	SI,DI			; DS:SI -> driver
 15743 00002579 16                      	PUSH	SS
 15744 0000257A 07                      	POP	ES
 15745 0000257B BB[7C03]                	MOV	BX,IOCALL		; ES:BX -> Call header
 15746 0000257E 1E                      	push	ds
 15747 0000257F 56                      	push	si
 15748 00002580 E8A421                  	call	DEVIOCALL2
 15749 00002583 5E                      	pop	si
 15750 00002584 1F                      	pop	ds
 15751                                  ;hkn; SS override
 15752                                  	;TEST	word [SS:IOCALL_REQSTAT],STERR ;Error?
 15753                                  	;test	byte [SS:IOCALL_REQSTAT+1],80h
 15754 00002585 36F606[8003]80          	TEST	byte [SS:IOCALL_REQSTAT+1],(STERR>>8)
 15755 0000258B 75C0                    	jnz	short ioctl_string_errj
 15756 0000258D 36A0[7D03]              	MOV	AL,[SS:IOCALL_REQUNIT]	; Get owner returned by device
 15757                                  					; owner returned is 1-based.
 15758 00002591 E9B5E0                  	jmp	SYS_RET_OK
 15759                                  
 15760                                  ;============================================================================
 15761                                  ; DELETE.ASM, MSDOS 6.0, 1991
 15762                                  ;============================================================================
 15763                                  ; 07/08/2018 - Retro DOS v3.0
 15764                                  ; 17/05/2019 - Retro DOS v4.0
 15765                                  
 15766                                  ;	TITLE	DOS_DELETE - Internal DELETE call for MS-DOS
 15767                                  ;	NAME	DOS_DELETE
 15768                                  
 15769                                  ;
 15770                                  ;	Microsoft Confidential
 15771                                  ;	Copyright (C) Microsoft Corporation 1991
 15772                                  ;	All Rights Reserved.
 15773                                  ;
 15774                                  
 15775                                  ;**	DELETE.ASM - Low level routine for deleting files
 15776                                  ;----------------------------------------------------------------------------
 15777                                  ;		DOS_DELETE
 15778                                  ;		REN_DEL_Check
 15779                                  ;		FastOpen_Delete	       ; DOS 3.3
 15780                                  ;		FastOpen_Update	       ; DOS 3.3
 15781                                  
 15782                                  ;   Revision history:
 15783                                  ;
 15784                                  ;   A000  version 4.00	Jan. 1988
 15785                                  ;   A001  Fastopen Rename fix	April 1989
 15786                                  
 15787                                  ;Installed = TRUE
 15788                                  
 15789                                  ;	i_need	NoSetDir,BYTE
 15790                                  ;	i_need	Creating,BYTE
 15791                                  ;	i_need	DELALL,BYTE
 15792                                  ;	i_need	THISDPB,DWORD
 15793                                  ;	i_need	THISSFT,DWORD
 15794                                  ;	i_need	THISCDS,DWORD
 15795                                  ;	i_need	CURBUF,DWORD
 15796                                  ;	i_need	ATTRIB,BYTE
 15797                                  ;	i_need	SATTRIB,BYTE
 15798                                  ;	i_need	WFP_START,WORD
 15799                                  ;	i_need	REN_WFP,WORD			 ;BN001
 15800                                  ;	i_need	NAME1,BYTE			 ;BN001
 15801                                  ;	i_need	FoundDel,BYTE
 15802                                  ;	i_need	AUXSTACK,BYTE
 15803                                  ;	i_need	VOLCHNG_FLAG,BYTE
 15804                                  ;	i_need	JShare,DWORD
 15805                                  ;	i_need	FastOpenTable,BYTE		  ; DOS 3.3
 15806                                  ;	i_need	FastTable,BYTE			  ; DOS 4.00
 15807                                  ;
 15808                                  ;	i_need	Del_ExtCluster,WORD		  ; DOS 4.00
 15809                                  ;
 15810                                  ;	i_need	SAVE_BX,WORD			  ; DOS 4.00
 15811                                  ;	i_need	DMAADD,DWORD
 15812                                  ;	i_need	RENAMEDMA,BYTE
 15813                                  
 15814                                  ;----------------------------------------------------------------------------
 15815                                  ;
 15816                                  ; Procedure Name : DOS_DELETE
 15817                                  ;
 15818                                  ; Inputs:
 15819                                  ;	[WFP_START] Points to WFP string ("d:/" must be first 3 chars, NUL
 15820                                  ;		terminated)
 15821                                  ;	[CURR_DIR_END] Points to end of Current dir part of string
 15822                                  ;		( = -1 if current dir not involved, else
 15823                                  ;		 Points to first char after last "/" of current dir part)
 15824                                  ;	[THISCDS] Points to CDS being used
 15825                                  ;		(Low word = -1 if NUL CDS (Net direct request))
 15826                                  ;	[SATTRIB] Is attribute of search, determines what files can be found
 15827                                  ; Function:
 15828                                  ;	Delete the specified file(s)
 15829                                  ; Outputs:
 15830                                  ;	CARRY CLEAR
 15831                                  ;		OK
 15832                                  ;	CARRY SET
 15833                                  ;	    AX is error code
 15834                                  ;		error_file_not_found
 15835                                  ;			Last element of path not found
 15836                                  ;		error_path_not_found
 15837                                  ;			Bad path (not in curr dir part if present)
 15838                                  ;		error_bad_curr_dir
 15839                                  ;			Bad path in current directory part of path
 15840                                  ;		error_access_denied
 15841                                  ;			Attempt to delete device or directory
 15842                                  ;		***error_sharing_violation***
 15843                                  ;			Deny both access required, generates an INT 24.
 15844                                  ;			This error is NOT returned. The INT 24H is generated,
 15845                                  ;			  and the file is ignored (not deleted). Delete will
 15846                                  ;			  simply continue on looking for more files.
 15847                                  ;			  Carry will NOT be set in this case.
 15848                                  ; DS preserved, others destroyed
 15849                                  ;
 15850                                  ;----------------------------------------------------------------------------
 15851                                  
 15852                                  FILEFOUND   equ 01h
 15853                                  FILEDELETED equ 10h
 15854                                  
 15855                                  
 15856                                  	; 12/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 15857                                  	; DOSCODE:63E9h (MSDOS 5.0, MSDOS.SYS)
 15858                                  
 15859                                  DOS_DELETE:
 15860                                  
 15861                                  ;hkn; DOS_Delete is called from file.asm and fcbio.asm. DS has been set up 
 15862                                  ;hkn; appropriately at this point.
 15863                                  
 15864 00002594 E8FCEC                  	call	TestNet
 15865 00002597 7306                    	JNC	short LOCAL_DELETE
 15866                                  
 15867                                  ;IF NOT Installed
 15868                                  ;	transfer NET_DELETE
 15869                                  ;ELSE
 15870                                  	;MOV	AX,(MultNET SHL 8) | 19
 15871                                  	;INT	2FH
 15872                                  	;return
 15873                                  
 15874 00002599 B81311                  	mov	ax,1113h
 15875 0000259C CD2F                    	int     2Fh 	; Multiplex - NETWORK REDIRECTOR - DELETE REMOTE FILE
 15876                                  			; SS = DS = DOS CS, SDA first filename pointer -> 
 15877                                  			;		fully-qualified filename in DOS CS
 15878                                  			; SDA CDS pointer -> current directory structure for drive with file
 15879                                  			; Return: CF set on error
 15880 0000259E C3                      	retn
 15881                                  ;ENDIF
 15882                                  
 15883                                  LOCAL_DELETE:
 15884 0000259F C606[6F05]00            	MOV	byte [FOUNDDEL],0	; No files found and no files deleted
 15885 000025A4 E8B1ED                  	call	ECritDisk
 15886                                  	;mov	word [CREATING],0E500h
 15887 000025A7 C706[7E05]00E5          	MOV	WORD [CREATING],DIRFREE*256+0 ; Assume not del *.*
 15888 000025AD 8B36[B205]              	MOV	SI,[WFP_START]
 15889                                  SKPNUL:
 15890 000025B1 AC                      	LODSB
 15891 000025B2 08C0                    	OR	AL,AL
 15892 000025B4 75FB                    	JNZ	short SKPNUL		; go to end
 15893 000025B6 83EE04                  	SUB	SI,4			; Back over possible "*.*"
 15894 000025B9 813C2A2E                	CMP	WORD [SI],2E2Ah ; "*."
 15895 000025BD 7506                    	JNZ	short TEST_QUEST
 15896 000025BF 807C022A                	CMP	BYTE [SI+2],"*"
 15897 000025C3 741F                    	JZ	short CHECK_ATTS
 15898                                  TEST_QUEST:
 15899 000025C5 83EE09                  	SUB	SI,9		; Back over possible "????????.???"
 15900 000025C8 87FE                    	XCHG	DI,SI
 15901                                  
 15902 000025CA 16                      	push	ss
 15903                                  	;pop	ds ; ! Retro DOS v3.0 BUG !
 15904 000025CB 07                      	pop	es ; 17/05/2019
 15905                                  
 15906 000025CC B83F3F                  	MOV	AX,"??" ; 3F3Fh
 15907 000025CF B90400                  	MOV	CX,4		; four sets of "??"
 15908 000025D2 F3AF                    	REPE	SCASW
 15909 000025D4 751C                    	JNZ	short NOT_ALL
 15910 000025D6 87FE                    	XCHG	DI,SI
 15911 000025D8 AD                      	LODSW
 15912 000025D9 3D2E3F                  	CMP	AX,3F2Eh ; ".?"
 15913 000025DC 7514                    	JNZ	short NOT_ALL
 15914 000025DE AD                      	LODSW
 15915 000025DF 3D3F3F                  	CMP	AX,"??"
 15916 000025E2 750E                    	JNZ	short NOT_ALL
 15917                                  CHECK_ATTS:
 15918 000025E4 A0[6D05]                	MOV	AL,[SATTRIB]
 15919                                  	;and	al,1Fh
 15920 000025E7 241F                    	AND	AL,attr_hidden+attr_system+attr_directory+attr_volume_id+attr_read_only
 15921                                  					; Look only at hidden bits
 15922                                  	;cmp	al,1Fh
 15923 000025E9 3C1F                    	CMP	AL,attr_hidden+attr_system+attr_directory+attr_volume_id+attr_read_only
 15924                                  					; All must be set
 15925 000025EB 7505                    	JNZ	short NOT_ALL
 15926                                  
 15927                                  ; NOTE WARNING DANGER-----
 15928                                  ;    This DELALL stuff is not safe. It allows directories to be deleted.
 15929                                  ;	It should ONLY be used by FORMAT in the ROOT directory.
 15930                                  
 15931 000025ED C606[7F05]00            	MOV	byte [DELALL],0		; DEL *.* - flag deleting all
 15932                                  NOT_ALL:
 15933 000025F2 C606[4C03]01            	MOV	byte [NoSetDir],1
 15934 000025F7 E8D619                  	call	GetPathNoSet
 15935 000025FA 7312                    	JNC	short Del_found
 15936 000025FC 750B                    	JNZ	short _bad_path
 15937 000025FE 08C9                    	OR	CL,CL
 15938 00002600 7407                    	JZ	short _bad_path
 15939                                  No_file:
 15940 00002602 B80200                  	MOV	AX,error_file_not_found
 15941                                  ErrorReturn:
 15942 00002605 F9                      	STC
 15943                                  	;call	LCritDisk
 15944                                  	;retn
 15945                                  	; 18/12/2022
 15946 00002606 E96AED                  	jmp	LCritDisk
 15947                                  
 15948                                  _bad_path:
 15949 00002609 B80300                  	MOV	AX,error_path_not_found
 15950 0000260C EBF7                    	JMP	short ErrorReturn
 15951                                  
 15952                                  Del_found:
 15953 0000260E 750C                    	JNZ	short NOT_DIR		; Check for dir specified
 15954 00002610 803E[7F05]00            	CMP	byte [DELALL],0		; DelAll = 0 allows delete of dir.
 15955 00002615 7405                    	JZ	short NOT_DIR
 15956                                  Del_access_err:
 15957 00002617 B80500                  	MOV	AX,error_access_denied
 15958 0000261A EBE9                    	JMP	short ErrorReturn
 15959                                  
 15960                                  NOT_DIR:
 15961 0000261C 08E4                    	OR	AH,AH			; Check if device name
 15962 0000261E 78F7                    	JS	short Del_access_err	; Can't delete I/O devices
 15963                                  
 15964                                  ; Main delete loop. CURBUF+2:BX points to a matching directory entry.
 15965                                  
 15966                                  DELFILE:
 15967 00002620 800E[6F05]01            	OR	byte [FOUNDDEL],FILEFOUND ; file found, not deleted yet
 15968                                  
 15969                                  ; If we are deleting the Volume ID, then we set VOLUME_CHNG flag to make
 15970                                  ; DOS issue a build BPB call the next time this drive is accessed.
 15971                                  
 15972 00002625 1E                      	PUSH	DS
 15973 00002626 8A26[7F05]              	MOV	AH,[DELALL]
 15974 0000262A C53E[E205]              	LDS	DI,[CURBUF]
 15975                                  	
 15976                                  ;hkn; SS override
 15977 0000262E 36F606[6B05]01          	TEST	byte [SS:ATTRIB],attr_read_only ; are we deleting RO files too?
 15978 00002634 7509                    	JNZ	short DoDelete		; yes
 15979                                  
 15980 00002636 F6470B01                	TEST	byte [BX+dir_entry.dir_attr],attr_read_only
 15981 0000263A 7403                    	JZ	short DoDelete		; not read only
 15982                                  
 15983 0000263C 1F                      	POP	DS
 15984 0000263D EB32                    	JMP	SHORT DELNXT		; Skip it (Note ES:BP not set)
 15985                                  
 15986                                  DoDelete:
 15987 0000263F E88400                  	call	REN_DEL_Check		; Sets ES:BP = [THISDPB]
 15988 00002642 7303                    	JNC	short DEL_SHARE_OK
 15989 00002644 1F                      	POP	DS
 15990 00002645 EB2A                    	JMP	SHORT DELNXT		; Skip it
 15991                                  
 15992                                  DEL_SHARE_OK:
 15993                                  	; 17/05/2019 - Retro DOS v4.0
 15994                                  	; MSDOS 6.0
 15995                                  	;test	byte [di+5],40h
 15996 00002647 F6450540                	TEST	byte [DI+BUFFINFO.buf_flags],buf_dirty
 15997                                  					;LB. if already dirty		  ;AN000;
 15998 0000264B 7507                    	JNZ	short yesdirty		;LB.  don't increment dirty count ;AN000;
 15999 0000264D E8F735                  	call	INC_DIRTY_COUNT		;LB.				  ;AN000;
 16000                                  	;or	byte [di+5],40h
 16001 00002650 804D0540                	OR	byte [DI+BUFFINFO.buf_flags],buf_dirty
 16002                                  yesdirty:
 16003 00002654 8827                    	mov	[bx],ah 
 16004                                  	;MOV	[BX+dir_entry.dir_name],AH ; Put in E5H or 0
 16005 00002656 8B1C                    	MOV	BX,[SI] 		; Get firclus pointer
 16006 00002658 1F                      	POP	DS
 16007 00002659 800E[6F05]10            	OR	byte [FOUNDDEL],FILEDELETED ; 10h ; Deleted file
 16008                                  
 16009 0000265E 83FB02                  	CMP	BX,2
 16010 00002661 720E                    	JB	short DELNXT		; File has invalid FIRCLUS (too small)
 16011                                  	;cmp	bx,[es:bp+0Dh]
 16012 00002663 263B5E0D                	CMP	BX,[ES:BP+DPB.MAX_CLUSTER]
 16013 00002667 7708                    	JA	short DELNXT		; File has invalid FIRCLUS (too big)
 16014                                  
 16015 00002669 E82F29                  	call	RELEASE 		; Free file data
 16016 0000266C 7252                    	JC	short No_fileJ
 16017                                  
 16018                                  ; DOS 3.3  FastOpen
 16019                                  
 16020 0000266E E8C300                  	CALL	FastOpen_Delete 	; delete the dir info in fastopen
 16021                                  
 16022                                  ; DOS 3.3  FastOpen
 16023                                  
 16024                                  DELNXT:
 16025 00002671 C42E[8A05]              	LES	BP,[THISDPB]		; Possible to get here without this set
 16026 00002675 E8C018                  	call	GETENTRY		; Registers need to be reset
 16027 00002678 7246                    	JC	short No_fileJ
 16028 0000267A E8F417                  	call	NEXTENT
 16029 0000267D 73A1                    	JNC	short DELFILE
 16030 0000267F C42E[8A05]              	LES	BP,[THISDPB]		; NEXTENT sets ES=DOSGROUP
 16031                                  	; 12/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 16032                                  	;MOV	AL,[ES:BP+DPB.DRIVE]
 16033                                  	;;mov	al,[es:bp+0]
 16034                                  	; 15/12/2022
 16035 00002683 268A4600                	MOV	AL,[ES:BP]
 16036 00002687 E8B534                  	call	FLUSHBUF
 16037 0000268A 7234                    	JC	short No_fileJ
 16038                                  ;
 16039                                  ; Now we need to test FoundDel for our flags. The cases to consider are:
 16040                                  ;
 16041                                  ;   not found not deleted		file not found
 16042                                  ;   not found	  deleted		*** impossible ***
 16043                                  ;	found not deleted		access denied (read-only)
 16044                                  ;	found	  deleted		no error
 16045                                  ;
 16046 0000268C F606[6F05]10            	TEST	byte [FOUNDDEL],FILEDELETED ; did we delete a file?
 16047 00002691 7426                    	JZ	short DelError		; no, figure out what's wrong.
 16048                                  ; We set VOLCHNG_FLAG to indicate that we have changed the volume label
 16049                                  ; and to force the DOS to issue a media check.
 16050 00002693 F606[6B05]08            	TEST	byte [ATTRIB],attr_volume_id ; 8
 16051 00002698 741C                    	jz	short No_Set_Flag
 16052 0000269A 50                      	PUSH	AX
 16053 0000269B 06                      	PUSH	ES
 16054 0000269C 57                      	PUSH	DI
 16055 0000269D C43E[A205]              	LES	DI,[THISCDS]
 16056 000026A1 268A25                  	MOV	AH,[ES:DI]		; Get drive
 16057 000026A4 80EC41                  	SUB	AH,'A'                  ; Convert to 0-based
 16058 000026A7 8826[A10A]              	mov	[VOLCHNG_FLAG],AH
 16059                                  	
 16060                                  	; MSDOS 6.0
 16061 000026AB 30FF                    	XOR	BH,BH			;>32mb delete volume id from boot record ;AN000;
 16062 000026AD E8DC04                  	call	Set_Media_ID		;>32mb set volumme id to boot record	 ;AN000;
 16063                                  	 
 16064 000026B0 E81E31                  	call	FATREAD_CDS		; force media check
 16065 000026B3 5F                      	POP	DI
 16066 000026B4 07                      	POP	ES
 16067 000026B5 58                      	POP	AX
 16068                                  No_Set_Flag:
 16069                                  	;call	LCritDisk		; carry is clear
 16070                                  	;retn
 16071                                  	; 18/12/2022
 16072 000026B6 E9BAEC                  	jmp	LCritDisk
 16073                                  DelError:
 16074 000026B9 F606[6F05]01            	TEST	byte [FOUNDDEL],FILEFOUND ; not deleted. Did we find file?
 16075 000026BE 7503                    	JNZ	short Del_access_errJ 	; yes. Access denied
 16076                                  No_fileJ:
 16077 000026C0 E93FFF                  	JMP	No_file ; 10/08/2018 		; Nope
 16078                                  Del_access_errJ:
 16079 000026C3 E951FF                  	JMP	Del_access_err ; 10/08/2018
 16080                                  
 16081                                  ; 08/08/2018 - Retro DOS v3.0
 16082                                  
 16083                                  ;Break	<REN_DEL_Check - check for access for rename and delete>
 16084                                  ;---------------------------------------------------------------------------
 16085                                  ; Procedure Name : REN_DEL_Check
 16086                                  ;
 16087                                  ; Inputs:
 16088                                  ;	[THISDPB] set
 16089                                  ;	[CURBUF+2]:BX points to entry
 16090                                  ;	[CURBUF+2]:SI points to firclus field of entry
 16091                                  ;	[WFP_Start] points to name
 16092                                  ; Function:
 16093                                  ;	Check for Exclusive access on given file.
 16094                                  ;	  Used by RENAME, SET_FILE_INFO, and DELETE.
 16095                                  ; Outputs:
 16096                                  ;	ES:BP = [THISDPB]
 16097                                  ;	NOTE: The WFP string pointed to by [WFP_Start] Will be Modified.  The
 16098                                  ;		last element will be loaded from the directory entry.  This is
 16099                                  ;		so the name given to the sharer doesn't have any meta chars in
 16100                                  ;		it.
 16101                                  ;	Carry set if sharing violation, INT 24H generated
 16102                                  ;	    NOTE THAT AX IS NOT error_sharing_violation.
 16103                                  ;		This is because input AX is preserved.
 16104                                  ;		Caller must set the error if needed.
 16105                                  ;	Carry clear
 16106                                  ;		OK
 16107                                  ; AX,DS,BX,SI,DI preserved
 16108                                  ;---------------------------------------------------------------------------
 16109                                  
 16110                                  REN_DEL_Check:
 16111                                  
 16112 000026C6 1E                      	PUSH	DS
 16113 000026C7 57                      	PUSH	DI
 16114 000026C8 50                      	PUSH	AX
 16115 000026C9 53                      	PUSH	BX
 16116 000026CA 56                      	PUSH	SI		; Save CURBUF pointers
 16117                                  	
 16118 000026CB 16                      	push	ss
 16119 000026CC 07                      	pop	es
 16120                                  
 16121                                  ;hkn; context ES will assume ES to DOSDATA
 16122                                  ;hkn; ASSUME	ES:DOSGROUP
 16123                                  
 16124                                  ;hkn; SS override
 16125 000026CD 368B3E[B205]            	MOV	DI,[SS:WFP_START] ; ES:DI -> WFP
 16126 000026D2 89DE                    	MOV	SI,BX
 16127                                  
 16128                                  ;hkn; SS override
 16129 000026D4 368E1E[E405]            	MOV	DS,[SS:CURBUF+2] ; DS:SI -> entry (FCB style name)
 16130 000026D9 89FB                    	MOV	BX,DI		; Set backup limit for skipback
 16131 000026DB 83C302                  	ADD	BX,2		; Skip over d: to point to leading '\'
 16132 000026DE E852EB                  	call	StrLen		; CX is length of ES:DI including NUL
 16133 000026E1 49                      	DEC	CX		; Don't include nul in count
 16134 000026E2 01CF                    	ADD	DI,CX		; Point to NUL at end of string
 16135 000026E4 E86A47                  	call	SkipBack	; Back up one element
 16136 000026E7 47                      	INC	DI		; Point to start of last element
 16137                                  
 16138                                  	; 17/05/2019 - Retro DOS v4.0
 16139                                  ;hkn; SS override
 16140                                  	; MSDOS 6.0
 16141 000026E8 36893E[0106]            	MOV	[SS:SAVE_BX],DI	;IFS. save for DOS_RENAME   ;AN000;
 16142                                  	;
 16143 000026ED E830FA                  	call	PackName	; Transfer name from entry to ASCIZ tail.
 16144 000026F0 5E                      	POP	SI		; Get back entry pointers
 16145 000026F1 5B                      	POP	BX
 16146 000026F2 53                      	PUSH	BX
 16147 000026F3 56                      	PUSH	SI		; Back on stack
 16148                                  	
 16149 000026F4 16                      	push	ss
 16150 000026F5 1F                      	pop	ds
 16151                                  
 16152                                  ;hkn; context DS will assume ES to DOSDATA
 16153                                  ;hkn; ASSUME	DS:DOSGROUP
 16154                                  
 16155                                  ; Close the file if possible by us.
 16156                                  ;
 16157                                  ;if installed
 16158 000026F6 FF1E[C400]              	Call	far [JShare+(13*4)] ; 13 = ShCloseFile
 16159                                  ;else
 16160                                  ;	Call	ShCloseFile
 16161                                  ;endif
 16162 000026FA 8C1E[A005]              	MOV	[THISSFT+2],DS
 16163                                  
 16164                                  ;hkn; AUXSTACK is in DOSDATA
 16165 000026FE C706[9E05][6507]        	MOV	word [THISSFT],AUXSTACK-SF_ENTRY.size  ; RENAMEDMA+(384-59)
 16166                                  				; Scratch space
 16167 00002704 30E4                    	XOR	AH,AH		; Indicate file to DOOPEN (high bit off)
 16168 00002706 E80E25                  	call	DOOPEN		; Fill in SFT for share check
 16169 00002709 C43E[9E05]              	LES	DI,[THISSFT]
 16170                                  	;mov	word [es:di+2],10h
 16171 0000270D 26C745021000            	MOV	word [ES:DI+SF_ENTRY.sf_mode],SHARING_DENY_BOTH ; 10h
 16172                                  				; requires exclusive access
 16173                                  	;MOV	word [ES:DI+SF_ENTRY.sf_ref_count],1 ; Pretend open
 16174 00002713 26C7050100              	mov	word [ES:DI],1
 16175 00002718 E85B4D                  	call	ShareEnter
 16176 0000271B 720D                    	jc	short CheckDone
 16177 0000271D C43E[9E05]              	LES	DI,[THISSFT]
 16178                                  	;MOV	word [ES:DI+SF_ENTRY.sf_ref_count],0
 16179 00002721 26C7050000              	mov	word [ES:DI],0	; Pretend closed and free
 16180                                  	
 16181 00002726 E8484D                  	call	ShareEnd	; Tell sharer we're done with THISSFT
 16182 00002729 F8                      	CLC
 16183                                  CheckDone:
 16184 0000272A C42E[8A05]              	LES	BP,[THISDPB]
 16185 0000272E 5E                      	POP	SI
 16186 0000272F 5B                      	POP	BX
 16187 00002730 58                      	POP	AX
 16188 00002731 5F                      	POP	DI
 16189 00002732 1F                      	POP	DS
 16190 00002733 C3                      	retn
 16191                                  
 16192                                  ;Break	<FastOpen_Delete - delete dir info in fastopen>
 16193                                  ;---------------------------------------------------------------------------
 16194                                  ; Procedure Name : FastOpen_Delete
 16195                                  ; Inputs:
 16196                                  ;	None
 16197                                  ; Function:
 16198                                  ;	Call FastOpen to delete the dir info.
 16199                                  ; Outputs:
 16200                                  ;	None
 16201                                  ;---------------------------------------------------------------------------
 16202                                  
 16203                                  FastOpen_Delete:
 16204 00002734 9C                      	PUSHF			; save flag
 16205 00002735 56                      	PUSH	SI		; save registers
 16206 00002736 53                      	PUSH	BX
 16207 00002737 50                      	PUSH	AX
 16208                                  	;mov	si,[WFP_START] ; MSDOS 3.3
 16209                                  ;hkn; SS override
 16210                                  	; 17/05/2019 - Retro DOS v4.0
 16211                                  	; MSDOS 6.0
 16212 00002738 368B36[B205]            	MOV	SI,[ss:WFP_START] ; ds:si points to path name
 16213                                  	
 16214 0000273D B003                    	MOV	AL,FONC_delete	; al = 3
 16215                                  fastinvoke:
 16216                                  ;hkn; FastTable is in DOSDATA
 16217 0000273F BB[320D]                	MOV	BX,FastTable+2
 16218 00002742 FF1F                    	CALL	far [BX]	; call fastopen
 16219 00002744 58                      	POP	AX		; restore registers
 16220 00002745 5B                      	POP	BX
 16221 00002746 5E                      	POP	SI
 16222 00002747 9D                      	POPF			; restore flag
 16223 00002748 C3                      	retn
 16224                                  
 16225                                  	; 13/11/2022 Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 16226                                  	; DOSCODE:65A0h (MSDOS 5.0 MSDOS.SYS)
 16227                                  
 16228                                  ;Break	<FastOpen_Rename - Rename directory>	   ; PTR 5622
 16229                                  ;---------------------------------------------------------------------------
 16230                                  ; PROCEDURE Name : FastOpen_Rename
 16231                                  ;
 16232                                  ; Inputs:
 16233                                  ;	 REN_WFP   = Path Name
 16234                                  ;	 NAME1	   = New Name
 16235                                  ; Function:
 16236                                  ;	Call FastOpen to rename the dir entry in the cache
 16237                                  ; Outputs:
 16238                                  ;	None
 16239                                  ;---------------------------------------------------------------------------
 16240                                  
 16241                                  FastOpen_Rename:
 16242                                  	; 17/05/2019 - Retro DOS v4.0
 16243                                  	; 08/08/2018 - Retro DOS v3.0
 16244                                  	; MSDOS 6.0
 16245 00002749 9C                      	PUSHF			;AN001 save flag
 16246 0000274A 56                      	PUSH	SI		;AN001 save registers
 16247 0000274B 57                      	PUSH	DI		;AN001
 16248 0000274C 53                      	PUSH	BX		;AN001
 16249 0000274D 50                      	PUSH	AX		;AN001
 16250                                  	;
 16251                                  ;hkn; SS override
 16252 0000274E 368B36[B405]            	MOV	SI,[SS:REN_WFP]	;AN001	;;AN001  ds:si-->Path name addrs
 16253                                  
 16254                                  ;hkn; NAME1 is in DOSDATA
 16255 00002753 BF[4B05]                	MOV	DI,NAME1	;;AN001  ds:di-->New name addrs
 16256                                  	;mov	al,6
 16257 00002756 B006                    	MOV	AL,FONC_Rename	;;AN001  al = 6
 16258                                  	
 16259                                  ;hkn; FastTable is in DOSDATA
 16260 00002758 BB[320D]                	MOV	BX,FastTable+2
 16261 0000275B FF1F                    	CALL	far [BX]	;;AN001  call fastopen
 16262                                  	
 16263 0000275D 58                      	POP	AX		; restore registers  ;AN001
 16264 0000275E 5B                      	POP	BX				     ;AN001
 16265 0000275F 5F                      	POP	DI				     ;AN001
 16266 00002760 5E                      	POP	SI				     ;AN001
 16267 00002761 9D                      	POPF			; restore flag	     ;AN001
 16268 00002762 C3                      	retn					     ;AN001
 16269                                  
 16270                                  ;Break	<FastOpen_Update - update dir info in fastopen>
 16271                                  ;---------------------------------------------------------------------------
 16272                                  ; Procedure Name : FastOpen_Update
 16273                                  ;
 16274                                  ; Inputs:
 16275                                  ;	DL     drive number (A=0,B=1,,,)
 16276                                  ;	CX     first cluster #
 16277                                  ;	AH     0 updates dir entry
 16278                                  ;	       1 updates CLUSNUM , BP = new CLUSNUM
 16279                                  ;	ES:DI  directory entry
 16280                                  ; Function:
 16281                                  ;	Call FastOpen to update the dir info.
 16282                                  ; Outputs:
 16283                                  ;	None
 16284                                  ;---------------------------------------------------------------------------
 16285                                  
 16286                                  FastOpen_Update:
 16287 00002763 9C                      	PUSHF			; save flag
 16288 00002764 56                      	PUSH	SI
 16289 00002765 53                      	PUSH	BX		; save regs
 16290 00002766 50                      	PUSH	AX
 16291 00002767 B004                    	MOV	AL,FONC_update	; al = 4
 16292 00002769 EBD4                    	JMP	short fastinvoke
 16293                                  
 16294                                  	; 17/05/2019
 16295                                  
 16296                                  	; MSDOS 6.0
 16297                                  ;entry Fast_Dispatch		; future fastxxxx entry	;AN000;
 16298                                  ;---------------------------------------------------------------------------
 16299                                  Fast_Dispatch:
 16300                                  ;hkn; FastTable is in DOSDATA
 16301 0000276B BE[320D]                	MOV	SI,FastTable+2	; index to the	     ;AN000;
 16302                                  ;hkn; use SS override
 16303 0000276E 36FF1C                  	CALL	far [SS:SI]	; RMFD call fastopen
 16304 00002771 C3                      	retn
 16305                                  
 16306                                  ;============================================================================
 16307                                  ; RENAME.ASM, MSDOS 6.0, 1991
 16308                                  ;============================================================================
 16309                                  ; 08/08/2018 - Retro DOS v3.0
 16310                                  ; 17/05/2019 - Retro DOS v4.0
 16311                                  
 16312                                  ;	TITLE	DOS_RENAME - Internal RENAME call for MS-DOS
 16313                                  ;	NAME	DOS_RENAME
 16314                                  
 16315                                  ;**	Low level routine for renaming files
 16316                                  ;----------------------------------------------------------------------------
 16317                                  ;	DOS_RENAME
 16318                                  ;
 16319                                  ;	Modification history:
 16320                                  ;
 16321                                  ;	    Created: ARR 30 March 1983
 16322                                  
 16323                                  ;----------------------------------------------------------------------------
 16324                                  ;
 16325                                  ; Procedure Name : DOS_RENAME
 16326                                  ;
 16327                                  ; Inputs:
 16328                                  ;	[WFP_START] Points to SOURCE WFP string ("d:/" must be first 3
 16329                                  ;		chars, NUL terminated)
 16330                                  ;	[CURR_DIR_END] Points to end of Current dir part of string [SOURCE]
 16331                                  ;		( = -1 if current dir not involved, else
 16332                                  ;		 Points to first char after last "/" of current dir part)
 16333                                  ;	[REN_WFP] Points to DEST WFP string ("d:/" must be first 3
 16334                                  ;		chars, NUL terminated)
 16335                                  ;	[THISCDS] Points to CDS being used
 16336                                  ;		(Low word = -1 if NUL CDS (Net direct request))
 16337                                  ;	[SATTRIB] Is attribute of search, determines what files can be found
 16338                                  ; Function:
 16339                                  ;	Rename the specified file(s)
 16340                                  ;	NOTE: This routine uses most of AUXSTACK as a temp buffer.
 16341                                  ; Outputs:
 16342                                  ;	CARRY CLEAR
 16343                                  ;	    OK
 16344                                  ;	CARRY SET
 16345                                  ;	    AX is error code
 16346                                  ;		error_file_not_found
 16347                                  ;			No match for source, or dest path invalid
 16348                                  ;		error_not_same_device
 16349                                  ;			Source and dest are on different devices
 16350                                  ;		error_access_denied
 16351                                  ;			Directory specified (not simple rename),
 16352                                  ;			Device name given, Destination exists.
 16353                                  ;			NOTE: In third case some renames may have
 16354                                  ;			 been done if metas.
 16355                                  ;		error_path_not_found
 16356                                  ;			Bad path (not in curr dir part if present)
 16357                                  ;			SOURCE ONLY
 16358                                  ;		error_bad_curr_dir
 16359                                  ;			Bad path in current directory part of path
 16360                                  ;			SOURCE ONLY
 16361                                  ;		error_sharing_violation
 16362                                  ;			Deny both access required, generates an INT 24.
 16363                                  ; DS preserved, others destroyed
 16364                                  ;
 16365                                  ;----------------------------------------------------------------------------
 16366                                  
 16367                                  	; 14/11/2022 Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 16368                                  
 16369                                  DOS_RENAME:
 16370                                  
 16371                                  ;hkn; DOS_RENAME is called from file.asm and fcbio.asm. DS has been set up
 16372                                  ;hkn; at this point to DOSDATA.
 16373                                  
 16374 00002772 E81EEB                  	call	TestNet
 16375 00002775 7306                    	JNC	short LOCAL_RENAME
 16376                                  
 16377                                  ;IF NOT Installed
 16378                                  ;	transfer NET_RENAME
 16379                                  ;ELSE
 16380                                  	;MOV	AX,(MultNET SHL 8) OR 17
 16381                                  	;INT	2FH
 16382                                  	;return
 16383                                  
 16384 00002777 B81111                  	mov     ax, 1111h
 16385 0000277A CD2F                    	int     2Fh 	; Multiplex - NETWORK REDIRECTOR - RENAME REMOTE FILE
 16386                                  			; SS = DS = DOS CS, 
 16387                                  			; SDA first filename pointer = offset of fully-qualified old name
 16388                                  			; SDA CDS pointer -> current directory
 16389                                  			; Return: CF set on error
 16390 0000277C C3                      	retn
 16391                                  ;ENDIF
 16392                                  
 16393                                  LOCAL_RENAME:
 16394 0000277D C606[2303]02            	MOV	byte [EXTERR_LOCUS],errLOC_Disk ; 2
 16395 00002782 8B36[B205]              	MOV	SI,[WFP_START]
 16396 00002786 8B3E[B405]              	MOV	DI,[REN_WFP]
 16397 0000278A 8A04                    	MOV	AL,[SI]
 16398 0000278C 8A25                    	MOV	AH,[DI]
 16399 0000278E 0D2020                  	OR	AX,2020H		; Lower case
 16400 00002791 38E0                    	CMP	AL,AH
 16401 00002793 7405                    	JZ	short SAMEDRV
 16402 00002795 B81100                  	MOV	AX,error_not_same_device ; 11h
 16403 00002798 F9                      	STC
 16404 00002799 C3                      	retn
 16405                                  
 16406                                  SAMEDRV:
 16407 0000279A FF36[2E03]              	PUSH	WORD [DMAADD+2]
 16408 0000279E FF36[2C03]              	PUSH	WORD [DMAADD]
 16409 000027A2 8C1E[2E03]              	MOV	[DMAADD+2],DS
 16410                                  
 16411                                  ;hkn; RENAMEDMA is in DOSDATA
 16412 000027A6 C706[2C03][2006]        	MOV	WORD [DMAADD],RENAMEDMA
 16413 000027AC C606[7005]00            	MOV	byte [FOUND_DEV],0	; Rename fails on DEVS, assume not a dev
 16414 000027B1 E8A4EB                  	call	ECritDisk
 16415 000027B4 E8F805                  	call	DOS_SEARCH_FIRST	; Sets [NoSetDir] to 1, [CURBUF+2]:BX
 16416                                  					;    points to entry
 16417 000027B7 7314                    	JNC	short Check_Dev
 16418 000027B9 83F812                  	CMP	AX,error_no_more_files ; 12h
 16419 000027BC 7503                    	JNZ	short GOTERR
 16420 000027BE B80200                  	MOV	AX,error_file_not_found ; 2
 16421                                  GOTERR:
 16422 000027C1 F9                      	STC
 16423                                  RENAME_POP:
 16424 000027C2 8F06[2C03]              	POP	WORD [DMAADD]
 16425 000027C6 8F06[2E03]              	POP	WORD [DMAADD+2]
 16426                                  	;call	LCritDisk
 16427                                  	;retn
 16428                                  	; 16/12/2022
 16429 000027CA E9A6EB                  	jmp	LCritDisk
 16430                                  
 16431                                  Check_Dev:
 16432                                  	; 17/05/2019 - Retro DOS v4.0
 16433                                  	;mov	ax,5
 16434 000027CD B80500                  	MOV	AX,error_access_denied	; Assume error
 16435                                  	
 16436                                  	; MSDOS 6.0
 16437 000027D0 1E                      	PUSH	DS			      ;PTM.			    ;AN000;
 16438 000027D1 C536[2C03]              	LDS	SI,[DMAADD]		      ;PTM.  chek if source a dir   ;AN000;
 16439                                  	;add	si,21
 16440 000027D5 83C615                  	ADD	SI,find_buf.attr	      ;PTM.			    ;AN000;
 16441                                  	;test	byte [si+11],10h
 16442 000027D8 F6440B10                	TEST	byte [SI+dir_entry.dir_attr],attr_directory ;PTM.	    ;AN000;
 16443 000027DC 7407                    	JZ	short notdir		      ;PTM.			    ;AN000;
 16444 000027DE 8B36[B405]              	MOV	SI,[REN_WFP]		      ;PTM.  if yes, make sure path ;AN000;
 16445 000027E2 E8CCFA                  	call	Check_PathLen2		      ;PTM.   length < 67	    ;AN000;
 16446                                  notdir:
 16447 000027E5 1F                      	POP	DS			      ;PTM.			    ;AN000;
 16448 000027E6 77D9                    	JA	short GOTERR		      ;PTM.			    ;AN000;
 16449                                  
 16450                                  	; MSDOS 3.3 & MSDOS 6.0
 16451 000027E8 803E[7005]00            	CMP	byte [FOUND_DEV],0
 16452 000027ED 75D2                    	JNZ	short GOTERR
 16453                                  
 16454                                  ; At this point a source has been found. There is search continuation info (a
 16455                                  ; la DOS_SEARCH_NEXT) for the source at RENAMEDMA, together with the first
 16456                                  ; directory entry found.
 16457                                  ; [THISCDS], [THISDPB], and [THISDRV] are set and will remain correct
 16458                                  ; throughout the RENAME since it is known at this point that the source and
 16459                                  ; destination are both on the same device.
 16460                                  ; [SATTRIB] is also set.
 16461                                  
 16462 000027EF 89DE                    	MOV	SI,BX
 16463                                  	;add	si,26
 16464 000027F1 83C61A                  	ADD	SI,dir_entry.dir_first
 16465 000027F4 E8CFFE                  	call	REN_DEL_Check
 16466 000027F7 7305                    	JNC	short REN_OK1
 16467 000027F9 B82000                  	MOV	AX,error_sharing_violation  ; 20h
 16468 000027FC EBC4                    	JMP	short RENAME_POP
 16469                                  
 16470                                  ;------------------------------------------------------------------------------
 16471                                  ; Check if the source is a file or directory. If file, delete the entry
 16472                                  ; from the Fastopen cache. If directory, rename it later
 16473                                  ;------------------------------------------------------------------------------
 16474                                  
 16475                                  REN_OK1:				;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
 16476                                  	; MSDOS 6.0
 16477 000027FE 56                      	PUSH	SI
 16478 000027FF C536[2C03]              	LDS	SI,[DMAADD]		;BN00X; PTM. check if source a dir ;AN000;
 16479                                  	;add	si,21
 16480 00002803 83C615                  	ADD	SI,find_buf.attr	;;BN00XPTM.P5520		;AN000;
 16481                                  	;test	byte [si+11],10h
 16482 00002806 F6440B10                	TEST	byte [SI+dir_entry.dir_attr],attr_directory ;;BN00XPTM. ;AN000;
 16483 0000280A 7403                    	JZ	short NOT_DIR1		;;BN00XPTM.			;AN000;
 16484 0000280C 5E                      	POP	SI			;BN00X
 16485 0000280D EB04                    	JMP	SHORT SWAP_SOURCE	;BN00X
 16486                                  NOT_DIR1:				;;BN00X it is a file, delete the entry
 16487 0000280F 5E                      	POP	SI
 16488                                  
 16489                                  	; MSDOS 3.3 (& MSDOS 6.0)	
 16490 00002810 E821FF                  	call	FastOpen_Delete 	; delete dir info in fastopen DOS 3.3
 16491                                  SWAP_SOURCE:
 16492                                  	; MSDOS 3.3
 16493                                  	;MOV	SI,[REN_WFP]
 16494                                  	;MOV	[WFP_START],SI
 16495                                  	; MSDOS 6.0
 16496 00002813 A1[B205]                	MOV	AX,[WFP_START]		; Swap source and destination
 16497 00002816 8B36[B405]              	MOV	SI,[REN_WFP]		; Swap source and destination
 16498 0000281A 8936[B205]              	MOV	[WFP_START],SI		; WFP_START = Destination path
 16499 0000281E A3[B405]                	MOV	[REN_WFP],AX		; REN_WFP   = Source path
 16500                                  	; MSDOS 3.3 (& MSDOS 6.0)
 16501 00002821 C706[B605]FFFF          	MOV	word [CURR_DIR_END],-1	; No current dir on dest
 16502                                  	;mov	word [CREATING],0E5FFh
 16503 00002827 C706[7E05]FFE5          	MOV	WORD [CREATING],DIRFREE*256+0FFh  ; Creating, not DEL *.*
 16504                                  					; A rename is like a CREATE_NEW as far
 16505                                  					; as the destination is concerned.
 16506 0000282D E8A017                  	call	GetPathNoSet
 16507                                  
 16508                                  ;   If this GETPATH fails due to file not found, we know all renames will work
 16509                                  ;   since no files match the destination name. If it fails for any other
 16510                                  ;   reason, the rename fails on a path not found, or whatever (also fails if
 16511                                  ;   we find a device or directory). If the GETPATH succeeds, we aren't sure
 16512                                  ;   if the rename should fail because we haven't built an explicit name by
 16513                                  ;   substituting for the meta chars in it. In this case the destination file
 16514                                  ;   spec with metas is in [NAME1] and the explicit source name is at RENAMEDMA
 16515                                  ;   in the directory entry part.
 16516                                  	
 16517 00002830 7223                    	JC	short NODEST
 16518                                  	
 16519                                  	; MSDOS 6.0
 16520                                  	;JZ	short BAD_ACC 		; Dest string is a directory	;AC000;
 16521                                  	; !! MSDOS 3.3 !!
 16522                                  	;JZ	short BAD_ACC ; !!	; Dest string is a directory
 16523                                  
 16524 00002832 08E4                    	OR	AH,AH			; Device?
 16525 00002834 792C                    	JNS	short SAVEDEST		; No, continue
 16526                                  BAD_ACC:
 16527 00002836 B80500                  	MOV	AX,error_access_denied
 16528 00002839 F9                      	STC
 16529                                  RENAME_CLEAN:
 16530 0000283A 9C                      	PUSHF				; Save carry state
 16531 0000283B 50                      	PUSH	AX			; and error code (if carry set)
 16532 0000283C A0[7605]                	MOV	AL,[THISDRV]
 16533 0000283F E8FD32                  	call	FLUSHBUF
 16534 00002842 58                      	POP	AX
 16535 00002843 803E[4A03]00            	CMP	byte [FAILERR],0
 16536 00002848 7504                    	JNZ	short BAD_ERR		; User FAILed to I 24
 16537 0000284A 9D                      	POPF
 16538 0000284B E974FF                  	JMP	RENAME_POP
 16539                                  
 16540                                  BAD_ERR:
 16541 0000284E 58                      	POP	AX			; Saved flags
 16542                                  	; 16/12/202
 16543                                  	; 14/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 16544                                  BAD_PATH: ; *
 16545 0000284F B80300                  	MOV	AX,error_path_not_found
 16546 00002852 E96CFF                  	JMP	GOTERR
 16547                                  
 16548                                  NODEST:
 16549 00002855 75F8                    	JNZ	short BAD_PATH
 16550 00002857 803E[4A03]00            	CMP	byte [FAILERR],0
 16551 0000285C 75F1                    	JNZ	short BAD_PATH		; Search for dest failed 
 16552                                  					; because user FAILed on I 24
 16553                                  	; 14/11/2022
 16554 0000285E 08C9                    	OR	CL,CL
 16555                                  	;JNZ	short SAVEDEST
 16556                                  	; 17/05/2019
 16557 00002860 74ED                    	jz	short BAD_PATH ; *
 16558                                  ;BAD_PATH: ; *
 16559                                  ;	MOV	AX,error_path_not_found
 16560                                  ;	;STC
 16561                                  ;	;JMP	RENAME_POP
 16562                                  ;	; 17/05/2019
 16563                                  ;	jmp	GOTERR 
 16564                                  
 16565                                  ; 16/12/2022
 16566                                  %if 0
 16567                                  	; 14/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 16568                                  	or	cl,cl
 16569                                  	jnz	short SAVEDEST
 16570                                  	;jz	short BAD_PATH ; *
 16571                                  BAD_PATH: ; *
 16572                                  	;mov	ax,3
 16573                                  	mov	ax,error_path_not_found
 16574                                  	stc
 16575                                  	jmp	RENAME_POP
 16576                                  %endif
 16577                                  
 16578                                  SAVEDEST:
 16579 00002862 16                      	push	ss
 16580 00002863 07                      	pop	es
 16581                                  
 16582                                  ;hkn; NAME1 & NAME2 is in DOSDATA
 16583 00002864 BF[5705]                	MOV	DI,NAME2
 16584 00002867 BE[4B05]                	MOV	SI,NAME1
 16585                                  
 16586 0000286A B90B00                  	MOV	CX,11
 16587 0000286D F3A4                    	REP	MOVSB			; Save dest with metas at NAME2
 16588 0000286F A1[C205]                	MOV	AX,[DIRSTART]
 16589 00002872 A3[6405]                	MOV	[DESTSTART],AX
 16590                                  BUILDDEST:
 16591 00002875 16                      	push	ss
 16592 00002876 07                      	pop	es			; needed due to JMP BUILDDEST below
 16593                                  
 16594                                  ;hkn; RENAMEDMA, NAME1, NAME2 in DOSDATA
 16595 00002877 BB[3506]                	MOV	BX,RENAMEDMA+21		; Source of replace chars
 16596 0000287A BF[4B05]                	MOV	DI,NAME1		; Real dest name goes here
 16597 0000287D BE[5705]                	MOV	SI,NAME2		; Raw dest
 16598                                  
 16599 00002880 B90B00                  	MOV	CX,11
 16600                                  
 16601                                  	; 17/05/2019 - Retro DOS v4.0
 16602                                  	
 16603                                  	; MSDOS 6.0
 16604 00002883 E81201                  	CALL	NEW_RENAME		;IFS. replace ? chars	;AN000;
 16605                                  
 16606                                  	; MSDOS 3.3
 16607                                  
 16608                                  ; 08/08/2018 - Retro DOS v3.0
 16609                                  ; MSDOS 6.0 
 16610                                  ;---------------------------------------------------------------------------
 16611                                  ;Procedure: NEW_RENAME
 16612                                  ;
 16613                                  ;Input: DS:SI -> raw string with ?
 16614                                  ;	ES:DI -> destination string
 16615                                  ;	DS:BX -> source string
 16616                                  ;Function: replace ? chars of raw string with chars in source string and
 16617                                  ;	   put in destination string
 16618                                  ;Output: ES:DI-> new string
 16619                                  ;---------------------------------------------------------------------------
 16620                                  ;
 16621                                  ;NEW_RENAME:
 16622                                  ;NEWNAM:
 16623                                  ;	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 341Ah
 16624                                  ;	LODSB
 16625                                  ;	CMP	AL,"?"
 16626                                  ;	JNZ	short NOCHG
 16627                                  ;	MOV	AL,[BX] 		; Get replace char
 16628                                  ;NOCHG:
 16629                                  ;	STOSB
 16630                                  ;	INC	BX			; Next replace char
 16631                                  ;	LOOP	NEWNAM
 16632                                  ;	; MSDOS 6.0
 16633                                  ;	;retn
 16634                                  
 16635                                  	; MSDOS 3.3 & MSDOS 6.0
 16636                                  	;mov	byte [ATTRIB],16h
 16637 00002886 C606[6B05]16            	MOV	byte [ATTRIB],attr_all	; Stop duplicates with any attributes
 16638 0000288B C606[7E05]FF            	MOV	byte [CREATING],0FFH
 16639 00002890 E8F519                  	call	DEVNAME 		; Check if we built a device name
 16640 00002893 73A1                    	JNC	short BAD_ACC
 16641 00002895 8B1E[6405]              	MOV	BX,[DESTSTART]
 16642 00002899 C42E[8A05]              	LES	BP,[THISDPB]
 16643 0000289D E8CA16                  	call	SETDIRSRCH		; Reset search to start of dir
 16644 000028A0 7294                    	JC	short BAD_ACC 		; Screw up
 16645 000028A2 E87B15                  	call	FINDENTRY		; See if new name already exists
 16646 000028A5 738F                    	JNC	short BAD_ACC 		; Error if found
 16647 000028A7 803E[4A03]00            	CMP	byte [FAILERR],0
 16648 000028AC 752A                    	JNZ	short BAD_ACCJ		; Find failed because user FAILed to I 24
 16649 000028AE A1[6405]                	MOV	AX,[DESTSTART]		; DIRSTART of dest
 16650 000028B1 3B06[2F06]              	CMP	AX,[RENAMEDMA+15]	; DIRSTART of source
 16651 000028B5 745D                    	JZ	short SIMPLE_RENAME	; If =, just give new name
 16652                                  
 16653                                  	;mov	al,[RENAMEDMA+32]
 16654 000028B7 A0[4006]                	MOV	AL,[RENAMEDMA+21+dir_entry.dir_attr]
 16655 000028BA A810                    	TEST	AL,attr_directory ; 10h
 16656 000028BC 751A                    	JNZ	short BAD_ACCJ		; Can only do a simple rename on dirs,
 16657                                  					; otherwise the . and .. entries get
 16658                                  					; wiped.
 16659 000028BE A2[6B05]                	MOV	[ATTRIB],AL
 16660 000028C1 8C1E[A005]              	MOV	[THISSFT+2],DS
 16661                                  
 16662                                  ;hkn; AUXSTACK is in DOSDATA
 16663                                  	;mov	si,[RENAMEDMA+145h]
 16664 000028C5 BE[6507]                	MOV	SI,AUXSTACK-SF_ENTRY.size  ; RENAMEDMA+325
 16665 000028C8 8936[9E05]              	MOV	[THISSFT],SI
 16666                                  	;mov	word [SI+2],2
 16667 000028CC C744020200              	MOV	word [SI+SF_ENTRY.sf_mode],SHARING_COMPAT+open_for_both
 16668 000028D1 31C9                    	XOR	CX,CX			; Set "device ID" for call into makenode
 16669 000028D3 E8A821                  	call	RENAME_MAKE		; This is in mknode
 16670 000028D6 7303                    	JNC	short GOT_DEST
 16671                                  BAD_ACCJ:
 16672 000028D8 E95BFF                  	JMP	BAD_ACC
 16673                                  
 16674                                  GOT_DEST:
 16675 000028DB 53                      	push	bx
 16676 000028DC C43E[9E05]              	LES	DI,[THISSFT]		; RENAME_MAKE entered this into sharing
 16677 000028E0 E88E4B                  	call	ShareEnd		; we need to remove it.
 16678 000028E3 5B                      	pop	bx
 16679                                  
 16680                                  ; A zero length entry with the correct new name has now been made at
 16681                                  ;   [CURBUF+2]:BX.
 16682                                  
 16683 000028E4 C43E[E205]              	LES	DI,[CURBUF]
 16684                                  
 16685                                  	; MSDOS 6.0
 16686                                  	;test	byte [es:di+5],40h
 16687 000028E8 26F6450540              	TEST	byte [ES:DI+BUFFINFO.buf_flags],buf_dirty  
 16688                                  					;LB. if already dirty		  ;AN000;
 16689 000028ED 7508                    	JNZ	short yesdirty1		;LB.  don't increment dirty count ;AN000;
 16690 000028EF E85533                  	call	INC_DIRTY_COUNT 	;LB.				  ;AN000;
 16691                                  	;or	byte [es:di+5],40h
 16692 000028F2 26804D0540              	OR	byte [ES:DI+BUFFINFO.buf_flags],buf_dirty
 16693                                  yesdirty1:
 16694 000028F7 89DF                    	MOV	DI,BX
 16695                                  	;add	di,11
 16696 000028F9 83C70B                  	ADD	DI,dir_entry.dir_attr	; Skip name
 16697                                  
 16698                                  ;hkn; RENAMEDMA is in DOSDATA
 16699                                  	;mov	si,[RENAMEDMA+32]
 16700 000028FC BE[4006]                	MOV	SI,RENAMEDMA+21+dir_entry.dir_attr
 16701                                  	;mov	cx,21
 16702 000028FF B91500                  	MOV	CX,dir_entry.size-dir_entry.dir_attr
 16703 00002902 F3A4                    	REP	MOVSB
 16704 00002904 E87B00                  	CALL	GET_SOURCE
 16705 00002907 7276                    	JC	short RENAME_OVER
 16706 00002909 89DF                    	MOV	DI,BX
 16707 0000290B 8E06[E405]              	MOV	ES,[CURBUF+2]
 16708 0000290F B0E5                    	MOV	AL,DIRFREE ; 0E5h
 16709 00002911 AA                      	STOSB				; "free" the source
 16710 00002912 EB13                    	JMP	SHORT DIRTY_IT
 16711                                  
 16712                                  SIMPLE_RENAME:
 16713 00002914 E86B00                  	CALL	GET_SOURCE		; Get the source back
 16714 00002917 7266                    	JC	short RENAME_OVER
 16715 00002919 89DF                    	MOV	DI,BX
 16716 0000291B 8E06[E405]              	MOV	ES,[CURBUF+2]
 16717                                  
 16718                                  ;hkn; NAME1 is in DOSDATA
 16719 0000291F BE[4B05]                	MOV	SI,NAME1		; New Name
 16720 00002922 B90B00                  	MOV	CX,11
 16721 00002925 F3A4                    	REP	MOVSB
 16722                                  DIRTY_IT:
 16723 00002927 8B3E[E205]              	MOV	DI,[CURBUF]
 16724                                  
 16725                                  	; MSDOS 6.0
 16726 0000292B 26F6450540              	TEST	byte [ES:DI+BUFFINFO.buf_flags],buf_dirty  
 16727                                  					;LB. if already dirty		  ;AN000;
 16728 00002930 7508                    	JNZ	short yesdirty2		;LB.  don't increment dirty count ;AN000;
 16729 00002932 E81233                  	call	INC_DIRTY_COUNT 	;LB.				  ;AN000;
 16730                                  	
 16731 00002935 26804D0540              	OR	byte [ES:DI+BUFFINFO.buf_flags],buf_dirty
 16732                                  
 16733                                  ;------------------------------------------------------------------------------
 16734                                  ; Check if the source is a directory of file. If directory rename it to the
 16735                                  ; the new name in the Fastopen cache buffer. If file name it has been
 16736                                  ; previously deleted.
 16737                                  ;------------------------------------------------------------------------------
 16738                                  
 16739                                  yesdirty2:
 16740                                  	; MSDOS 6.0
 16741 0000293A 56                      	PUSH	SI
 16742 0000293B C536[2C03]              	LDS	SI,[DMAADD]		;;BN00XPTM. chek if source a dir ;AN000;
 16743 0000293F 83C615                  	ADD	SI,find_buf.attr	;;BN00XPTM.P5520		;AN000;
 16744 00002942 F6440B10                	TEST	byte [SI+dir_entry.dir_attr],attr_directory ;;BN00XPTM.	;AN000;
 16745 00002946 7406                    	JZ	short NOT_DIR2		;;BN00XPTM.			;AN000;
 16746 00002948 E8FEFD                  	call	FastOpen_Rename		;;BN00X rename dir entry in fastopen
 16747 0000294B 5E                      	POP	SI
 16748 0000294C EB01                    	JMP	SHORT NOT_DIRTY1
 16749                                  NOT_DIR2:				;;BN00X it is a file, delete the entry
 16750 0000294E 5E                      	POP	SI
 16751                                  NOT_DIRTY1:				;;BN00X
 16752                                  NEXT_SOURCE:
 16753                                  ;hkn; RENAMEDMA is in DOSDATA
 16754 0000294F BE[2106]                	MOV	SI,RENAMEDMA+1		;Name
 16755                                  
 16756                                  ; WARNING! Rename_Next leaves the disk critical section *ALWAYS*. We need
 16757                                  ; to enter it before going to RENAME_Next.
 16758                                  
 16759 00002952 E803EA                  	call	ECritDisk
 16760 00002955 C606[7E05]00            	MOV	byte [CREATING],0 ; Correct setting for search (we changed it
 16761                                  				  ;  to FF when we made the prev new file).
 16762 0000295A E88A05                  	call	RENAME_NEXT
 16763                                  
 16764                                  ; Note, now, that we have exited the previous ENTER and so are back to where
 16765                                  ; we were before.
 16766                                  
 16767 0000295D 7220                    	JC	short RENAME_OVER
 16768                                  
 16769                                  	;lea	si,[bx+26]
 16770 0000295F 8D771A                  	LEA	SI,[BX+dir_entry.dir_first]
 16771 00002962 E861FD                  	call	REN_DEL_Check
 16772 00002965 7306                    	JNC	short REN_OK2
 16773 00002967 B82000                  	MOV	AX,error_sharing_violation ; 20h
 16774                                  jmp_to_rename_clean: ; 28/12/2022
 16775 0000296A E9CDFE                  	JMP	RENAME_CLEAN ; 10/08/2018
 16776                                  
 16777                                  ;------------------------------------------------------------------------------
 16778                                  ; Check if file or directory. If file, delete file from the Fastopen cache,
 16779                                  ; if directory, rename directory name in the Fastopen cache.
 16780                                  ;-----------------------------------------------------------------------------
 16781                                  
 16782                                  REN_OK2:
 16783                                  	; MSDOS 6.0
 16784                                  	;mov	al,[RERNAMEDMA+32]
 16785 0000296D A0[4006]                	MOV	AL,[RENAMEDMA+21+dir_entry.dir_attr] ; PTR P5622
 16786                                  	;test	al,10h
 16787 00002970 A810                    	TEST	AL,attr_directory	;;BN00X directory
 16788 00002972 7406                    	JZ	short Ren_Directory	;;BN00X no - file, delete it
 16789                                  	
 16790                                  	; MSDOS 3.3 & MSDOS 6.0
 16791 00002974 E8BDFD                  	call	FastOpen_Delete 	;;BN00X delete dir info in fastopen DOS 3.3
 16792                                  jmp_to_builddest: ; 28/12/2022
 16793 00002977 E9FBFE                  	JMP	BUILDDEST		;;BN00X
 16794                                  
 16795                                  	; MSDOS 6.0
 16796                                  Ren_Directory:
 16797 0000297A E8CCFD                  	call	FastOpen_Rename 	;;BN00X delete dir info in fastopen DOS 3.3
 16798                                  	;JMP	BUILDDEST
 16799                                  	; 28/12/2022
 16800 0000297D EBF8                    	jmp	short jmp_to_builddest
 16801                                  
 16802                                  RENAME_OVER:
 16803 0000297F F8                      	CLC
 16804                                  	;JMP	RENAME_CLEAN ; 10/08/2018
 16805                                  	; 28/12/2022
 16806 00002980 EBE8                    	jmp	short jmp_to_rename_clean
 16807                                  
 16808                                  ;----------------------------------------------------------------------------
 16809                                  ; Procedure: GET_SOURCE
 16810                                  ;
 16811                                  ; Inputs:
 16812                                  ;	RENAMEDMA has source info
 16813                                  ; Function:
 16814                                  ;	Re-find the source
 16815                                  ; Output:
 16816                                  ;	[CURBUF] set
 16817                                  ;	[CURBUF+2]:BX points to entry
 16818                                  ;	Carry set if error (currently user FAILed to I 24)
 16819                                  ; DS preserved, others destroyed
 16820                                  ;----------------------------------------------------------------------------
 16821                                  
 16822                                  GET_SOURCE:
 16823 00002982 8B1E[2F06]              	MOV	BX,[RENAMEDMA+15]	; DirStart
 16824 00002986 C42E[8A05]              	LES	BP,[THISDPB]
 16825 0000298A E8DD15                  	call	SETDIRSRCH
 16826 0000298D 7214                    	JC	short gs_ret_label	; retc
 16827 0000298F E8D518                  	call	STARTSRCH
 16828 00002992 A1[2D06]                	MOV	AX,[RENAMEDMA+13]	; Lastent
 16829                                  	;call	GETENT
 16830                                  	; 18/12/2022
 16831 00002995 E9A315                  	jmp	GETENT
 16832                                  ;gs_ret_label:
 16833                                  	;retn
 16834                                  
 16835                                  ; MSDOS 6.0 
 16836                                  ;---------------------------------------------------------------------------
 16837                                  ;Procedure: NEW_RENAME
 16838                                  ;
 16839                                  ;Input: DS:SI -> raw string with ?
 16840                                  ;	ES:DI -> destination string
 16841                                  ;	DS:BX -> source string
 16842                                  ;Function: replace ? chars of raw string with chars in source string and
 16843                                  ;	   put in destination string
 16844                                  ;Output: ES:DI-> new string
 16845                                  ;---------------------------------------------------------------------------
 16846                                  
 16847                                  NEW_RENAME:
 16848                                  	; 17/05/2019 - Retro DOS v4.0
 16849                                  NEWNAM:
 16850                                  	; DOSCODE:680Eh (MSDOS 6.21, MSDOS.SYS)
 16851 00002998 AC                      	LODSB
 16852 00002999 3C3F                    	CMP	AL,"?" ; 3Fh
 16853 0000299B 7502                    	JNZ	short NOCHG
 16854 0000299D 8A07                    	MOV	AL,[BX] 		; Get replace char
 16855                                  NOCHG:
 16856 0000299F AA                      	STOSB
 16857 000029A0 43                      	INC	BX			; Next replace char
 16858 000029A1 E2F5                    	LOOP	NEWNAM
 16859                                  	; MSDOS 6.0
 16860                                  gs_ret_label:	; 18/12/2022
 16861 000029A3 C3                      	retn
 16862                                  
 16863                                  ;============================================================================
 16864                                  ; FINFO.ASM, MSDOS 6.0, 1991
 16865                                  ;============================================================================
 16866                                  ; 08/08/2018 - Retro DOS v3.0
 16867                                  ; 17/05/2019 - Retro DOS v4.0
 16868                                  
 16869                                  ;**	Low level routines for returning file information and setting file
 16870                                  ;	attributes
 16871                                  ;
 16872                                  ;	GET_FILE_INFO
 16873                                  ;	SET_FILE_ATTRIBUTE
 16874                                  ;
 16875                                  ;	Modification history:
 16876                                  ;
 16877                                  ;	    Created: ARR 30 March 1983
 16878                                  ;
 16879                                  ;	M025: Return access_denied if attempting to set
 16880                                  ;	      attribute of root directory.
 16881                                  ;
 16882                                  
 16883                                  ;SUBTTL GET_FILE_INFO -- Get File Information
 16884                                  
 16885                                  ;---------------------------------------------------------------------------
 16886                                  ; Procedure Name : GET_FILE_INFO
 16887                                  ;
 16888                                  ; Inputs:
 16889                                  ;	[WFP_START] Points to WFP string ("d:/" must be first 3 chars, NUL
 16890                                  ;		terminated)
 16891                                  ;	[CURR_DIR_END] Points to end of Current dir part of string
 16892                                  ;		( = -1 if current dir not involved, else
 16893                                  ;		 Points to first char after last "/" of current dir part)
 16894                                  ;	[THISCDS] Points to CDS being used
 16895                                  ;		(Low word = -1 if NUL CDS (Net direct request))
 16896                                  ;	[SATTRIB] Is attribute of search, determines what files can be found
 16897                                  ; Function:
 16898                                  ;	Get Information about a file
 16899                                  ; Returns:
 16900                                  ;	CARRY CLEAR
 16901                                  ;	    AX = Attribute of file
 16902                                  ;	    CX = Time stamp of file
 16903                                  ;	    DX = Date stamp of file
 16904                                  ;	    BX:DI = Size of file (32 bit)
 16905                                  ;	CARRY SET
 16906                                  ;	    AX is error code
 16907                                  ;		error_file_not_found
 16908                                  ;			Last element of path not found
 16909                                  ;		error_path_not_found
 16910                                  ;			Bad path (not in curr dir part if present)
 16911                                  ;		error_bad_curr_dir
 16912                                  ;			Bad path in current directory part of path
 16913                                  ; DS preserved, others destroyed
 16914                                  ;---------------------------------------------------------------------------
 16915                                  
 16916                                  	; 14/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 16917                                  
 16918                                  GET_FILE_INFO:
 16919                                  
 16920                                  ;hkn; get_file_info is called from file.asm and fcbio.asm. DS has been set 
 16921                                  ;hkn; to DOSDATA at this point. So DOSassume is OK.
 16922                                  
 16923 000029A4 E8ECE8                  	call	TestNet
 16924 000029A7 7306                    	JNC	short LOCAL_INFO
 16925                                  
 16926                                  ;IF NOT Installed
 16927                                  ;	transfer NET_GET_FILE_INFO
 16928                                  ;ELSE
 16929                                  ;	MOV	AX,(MultNET SHL 8) OR 15
 16930                                  ;	INT	2FH
 16931                                  ;	return
 16932                                  
 16933 000029A9 B80F11                  	mov     ax, 110Fh
 16934 000029AC CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - GET REMOTE FILE'S ATTRIBUTES
 16935                                  			; SS = DOS CS, SDA first filename pointer -> fully-qualified name of file
 16936                                  			; SDA CDS pointer -> current directory
 16937                                  			; Return: CF set on error, AX = file attributes
 16938 000029AE C3                      	retn
 16939                                  ;ENDIF
 16940                                  
 16941                                  LOCAL_INFO:
 16942 000029AF E8A6E9                  	call	ECritDisk
 16943 000029B2 C606[4C03]01            	MOV	byte [NoSetDir],1	; if we find a dir, don't change to it
 16944                                  	; MSDOS 3.3
 16945                                  	;call	GETPATH
 16946                                  	; MSDOS 6.0
 16947 000029B7 E8D800                  	call	GET_FAST_PATH
 16948                                  	; MSDOS 3.3 & MSDOS 6.0
 16949 000029BA 7312                    	JNC	short info_check_dev
 16950                                  NO_PATH:
 16951 000029BC 750B                    	JNZ	short bad_path1
 16952 000029BE 08C9                    	OR	CL,CL
 16953 000029C0 7407                    	JZ	short bad_path1
 16954                                  info_no_file:
 16955 000029C2 B80200                  	MOV	AX,error_file_not_found
 16956                                  BadRet:
 16957 000029C5 F9                      	STC
 16958                                  JustRet:
 16959                                  	;call	LCritDisk
 16960                                  	;retn
 16961                                  	; 18/12/2022
 16962 000029C6 E9AAE9                  	jmp	LCritDisk
 16963                                  
 16964                                  bad_path1:
 16965 000029C9 B80300                  	MOV	AX,error_path_not_found
 16966 000029CC EBF7                    	jmp	short BadRet
 16967                                  
 16968                                  info_check_dev:
 16969 000029CE 08E4                    	OR	AH,AH
 16970 000029D0 78F0                    	JS	short info_no_file	; device
 16971                                  
 16972                                  	; MSDOS 6.0
 16973                                  ;SR;
 16974                                  ; If root dir then CurBuf == -1. Check for this case and return subdir attr
 16975                                  ;for a root dir
 16976                                  
 16977 000029D2 833E[E205]FF            	cmp	word [CURBUF],-1	;is it a root dir?
 16978 000029D7 7506                    	jne	short not_root		;no, CurBuf ptr is valid
 16979                                  
 16980 000029D9 30E4                    	xor	ah,ah
 16981 000029DB B010                    	mov	al,attr_directory ; 10h
 16982                                  	;clc
 16983                                  	; 14/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 16984                                  	; (DOSCODE:683Eh)
 16985                                  	; 16/12/2022
 16986                                  	;clc
 16987 000029DD EBE7                    	jmp	short JustRet
 16988                                  
 16989                                  not_root:
 16990                                  	; MSDOS 3.3 (& MSDOS 6.0)
 16991 000029DF 1E                      	PUSH	DS
 16992 000029E0 8E1E[E405]              	MOV	DS,[CURBUF+2]
 16993 000029E4 89DE                    	MOV	SI,BX
 16994 000029E6 31DB                    	XOR	BX,BX			; Assume size=0 (dir)
 16995 000029E8 89DF                    	MOV	DI,BX
 16996                                  	;mov	cx,[si+16h]
 16997 000029EA 8B4C16                  	MOV	CX,[SI+dir_entry.dir_time]
 16998                                  	;mov	dx,[si+18h]
 16999 000029ED 8B5418                  	MOV	DX,[SI+dir_entry.dir_date]
 17000 000029F0 30E4                    	XOR	AH,AH
 17001                                  	;mov	al,[si+0Bh]
 17002 000029F2 8A440B                  	MOV	AL,[SI+dir_entry.dir_attr]
 17003                                  	;test	al,10h
 17004 000029F5 A810                    	TEST	AL,attr_directory
 17005 000029F7 7506                    	JNZ	short NO_SIZE
 17006                                  	;mov	di,[si+1Ch]
 17007 000029F9 8B7C1C                  	MOV	DI,[SI+dir_entry.dir_size_l]
 17008                                  	;mov	bx,[si+1Eh]
 17009 000029FC 8B5C1E                  	MOV	BX,[SI+dir_entry.dir_size_h]
 17010                                  NO_SIZE:
 17011 000029FF 1F                      	POP	DS
 17012                                  	;CLC
 17013                                  	; 14/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 17014                                  	; (DOSCODE:6864h)
 17015                                  	; 16/12/2022
 17016                                  	;clc
 17017 00002A00 EBC4                    	jmp	short JustRet
 17018                                  
 17019                                  ;Break	<SET_FILE_ATTRIBUTE -- Set File Attribute>
 17020                                  ;-------------------------------------------------------------------------------
 17021                                  ; Procedure Name : SET_FILE_ATTRIBUTE
 17022                                  ; Inputs:
 17023                                  ;	[WFP_START] Points to WFP string ("d:/" must be first 3 chars, NUL
 17024                                  ;		terminated)
 17025                                  ;	[CURR_DIR_END] Points to end of Current dir part of string
 17026                                  ;		( = -1 if current dir not involved, else
 17027                                  ;		 Points to first char after last "/" of current dir part)
 17028                                  ;	[THISCDS] Points to CDS being used
 17029                                  ;		(Low word = -1 if NUL CDS (Net direct request))
 17030                                  ;	[SATTRIB] is attribute of search (determines what files may be found)
 17031                                  ;	AX is new attributes to give to file
 17032                                  ; Function:
 17033                                  ;	Set File Attributes
 17034                                  ; Returns:
 17035                                  ;	CARRY CLEAR
 17036                                  ;	    No error
 17037                                  ;	CARRY SET
 17038                                  ;	    AX is error code
 17039                                  ;		error_file_not_found
 17040                                  ;			Last element of path not found
 17041                                  ;		error_path_not_found
 17042                                  ;			Bad path (not in curr dir part if present)
 17043                                  ;		error_bad_curr_dir
 17044                                  ;			Bad path in current directory part of path
 17045                                  ;		error_access_denied
 17046                                  ;			Attempt to set an attribute which cannot be set
 17047                                  ;			(attr_directory, attr_volume_ID)
 17048                                  ;		error_sharing_violation
 17049                                  ;			Sharing mode of file did not allow the change
 17050                                  ;			(this request requires exclusive write/read access)
 17051                                  ;			(INT 24H generated)
 17052                                  ; DS preserved, others destroyed
 17053                                  ;----------------------------------------------------------------------------
 17054                                  
 17055                                  SET_FILE_ATTRIBUTE:
 17056                                  
 17057                                  ;hkn; set_file_attr is called from file.asm. DS has been set 
 17058                                  ;hkn; to DOSDATA at this point. So DOSassume is OK.
 17059                                  
 17060 00002A02 A9D8FF                  	TEST	AX,~attr_changeable ; 0FFD8h
 17061 00002A05 7414                    	JZ	short set_look
 17062                                  _BAD_ACC:
 17063 00002A07 C606[2303]01            	MOV	byte [EXTERR_LOCUS],errLOC_Unk ; 1
 17064 00002A0C C606[2703]07            	MOV	byte [EXTERR_CLASS],errCLASS_Apperr ; 7
 17065 00002A11 C606[2603]04            	MOV	byte [EXTERR_ACTION],errACT_Abort ; 4
 17066 00002A16 B80500                  	MOV	AX,error_access_denied ; 5
 17067 00002A19 F9                      	STC
 17068 00002A1A C3                      	retn
 17069                                  
 17070                                  set_look:
 17071 00002A1B E875E8                  	call	TestNet
 17072 00002A1E 7308                    	JNC	short LOCAL_SET
 17073                                  
 17074                                  ;IF NOT Installed
 17075                                  ;	transfer NET_SEQ_SET_FILE_ATTRIBUTE
 17076                                  ;ELSE
 17077 00002A20 50                      	PUSH	AX
 17078                                  	
 17079                                  	;MOV	AX,(MultNET SHL 8) OR 14
 17080                                  	;INT	2FH
 17081                                  
 17082 00002A21 B80E11                  	mov     ax, 110Eh
 17083 00002A24 CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - SET REMOTE FILE'S ATTRIBUTES
 17084                                  			; SS = DOS CS, SDA first filename pointer -> fully-qualified name of file
 17085                                  			; SDA CDS pointer -> current directory
 17086                                  			; STACK: WORD new file attributes
 17087                                  			; Return: CF set on error
 17088                                  
 17089 00002A26 5B                      	POP	BX			; clean stack
 17090 00002A27 C3                      	retn
 17091                                  ;ENDIF
 17092                                  
 17093                                  LOCAL_SET:
 17094 00002A28 E82DE9                  	call	ECritDisk
 17095 00002A2B 50                      	PUSH	AX			; Save new attributes
 17096 00002A2C C606[4C03]01            	MOV	byte [NoSetDir],1	; if we find a dir, don't change to it
 17097 00002A31 E89615                  	call	GETPATH 		; get path through fastopen if there	;AC000;
 17098 00002A34 7303                    	JNC	short set_check_device
 17099 00002A36 5B                      	POP	BX			; Clean stack (don't zap AX)
 17100 00002A37 EB83                    	JMP	short NO_PATH
 17101                                  
 17102                                  set_check_device:
 17103 00002A39 08E4                    	OR	AH,AH
 17104 00002A3B 7906                    	JNS	short set_check_share
 17105 00002A3D 58                      	POP	AX
 17106 00002A3E E832E9                  	call	LCritDisk
 17107 00002A41 EBC4                    	JMP	short _BAD_ACC 		; device
 17108                                  
 17109                                  set_check_share:
 17110 00002A43 58                      	POP	AX			; Get new attributes
 17111                                  
 17112                                  	; MSDOS 6.0
 17113 00002A44 833E[E205]FF            	cmp	word [CURBUF], -1	; M025: Q: is this the root dir
 17114 00002A49 740A                    	je	short cannot_set_root	; M025: Y: return error
 17115                                  
 17116                                  	; MSDOS 3.3 & MSDOS 6.0
 17117 00002A4B E878FC                  	call	REN_DEL_Check
 17118 00002A4E 730B                    	JNC	short set_do
 17119 00002A50 B82000                  	MOV	AX,error_sharing_violation ; 32
 17120 00002A53 EB3A                    	jmp	short OK_BYE
 17121                                  
 17122                                  	; MSDOS 6.0
 17123                                  cannot_set_root:			; M025:
 17124 00002A55 B80500                  	mov	ax,error_access_denied	; M025: return error is attempting
 17125 00002A58 F9                      	stc				; M025: to set attr. of root
 17126 00002A59 EB34                    	jmp	short OK_BYE		; M025:
 17127                                  
 17128                                  set_do:
 17129                                  	; MSDOS 3.3 & MSDOS 6.0
 17130 00002A5B C43E[E205]              	LES	DI,[CURBUF]
 17131 00002A5F 2680670BD8              	AND	BYTE [ES:BX+dir_entry.dir_attr],~attr_changeable ; 0D8h
 17132 00002A64 2608470B                	OR	BYTE [ES:BX+dir_entry.dir_attr],AL
 17133                                  
 17134                                  	; MSDOS 6.0
 17135 00002A68 26F6450540              	TEST	byte [ES:DI+BUFFINFO.buf_flags],buf_dirty  
 17136                                  					;LB. if already dirty		  ;AN000;
 17137 00002A6D 7508                    	JNZ	short yesdirty3		;LB.  don't increment dirty count ;AN000;
 17138 00002A6F E8D531                  	call	INC_DIRTY_COUNT 	;LB.				  ;AN000;
 17139                                  	
 17140 00002A72 26804D0540              	OR	byte [ES:DI+BUFFINFO.buf_flags],buf_dirty
 17141                                  yesdirty3:
 17142 00002A77 A0[7605]                	MOV	AL,[THISDRV]
 17143                                  ;;;; 10/1/86 F.C update fastopen cache
 17144 00002A7A 52                      	PUSH	DX
 17145 00002A7B 57                      	PUSH	DI
 17146 00002A7C B400                    	MOV	AH,0		  ; dir entry update
 17147 00002A7E 88C2                    	MOV	DL,AL		  ; drive number A=0,B=1,,
 17148 00002A80 89DF                    	MOV	DI,BX		  ; ES:DI -> dir entry
 17149 00002A82 E8DEFC                  	call	FastOpen_Update
 17150 00002A85 5F                      	POP	DI
 17151 00002A86 5A                      	POP	DX
 17152                                  ;;;; 9/11/86 F.C update fastopen cache
 17153 00002A87 E8B530                  	call	FLUSHBUF
 17154 00002A8A 7303                    	JNC	short OK_BYE
 17155 00002A8C B80200                  	MOV	AX,error_file_not_found
 17156                                  OK_BYE:
 17157                                  	;call	LCritDisk
 17158                                  	;retn
 17159                                  	; 16/12/2022
 17160 00002A8F E9E1E8                  	jmp	LCritDisk
 17161                                  
 17162                                  	; 17/05/2019 - Retro DOS v4.0
 17163                                  
 17164                                  	; MSDOS 6.0
 17165                                  GET_FAST_PATH:
 17166                                  ;hkn; use SS override for FastOpenFlg
 17167 00002A92 36800E[3A0D]01          	OR	byte [ss:FastOpenFlg],FastOpen_Set
 17168                                  					;FO. trigger fastopen	;AN000;
 17169 00002A98 E82F15                  	call	GETPATH
 17170 00002A9B 9C                      	PUSHF			 	;FO.			;AN000;
 17171 00002A9C 368026[3A0D]80          	AND	byte [ss:FastOpenFlg],Fast_yes 
 17172                                  					;FO. clear all fastopen flags ;AN000;
 17173 00002AA2 9D                      	POPF				;FO.			;AN000;
 17174 00002AA3 C3                      	retn
 17175                                  
 17176                                  ;============================================================================
 17177                                  ; DUP.ASM, MSDOS 6.0, 1991
 17178                                  ;============================================================================
 17179                                  ; 08/08/2018 - Retro DOS v3.0
 17180                                  ; 17/05/2019 - Retro DOS v4.0
 17181                                  
 17182                                  ;** 	Low level DUP routine for use by EXEC when creating a new process.
 17183                                  ;   	Exports the DUP to the server machine and increments the SFT ref count
 17184                                  ;
 17185                                  ;	DOS_DUP
 17186                                  ;
 17187                                  ;	Modification history:
 17188                                  ;
 17189                                  ;	  Created: ARR 30 March 1983
 17190                                  
 17191                                  ;BREAK <DOS_DUP -- DUP SFT across network>
 17192                                  ;---------------------------------------------------------------------------
 17193                                  ; Procedure Name : DOS_DUP
 17194                                  ;
 17195                                  ; Inputs:
 17196                                  ;	[THISSFT] set to the SFT for the file being DUPed
 17197                                  ;		(a non net SFT is OK, in this case the ref
 17198                                  ;		 count is simply incremented)
 17199                                  ; Function:
 17200                                  ;	Signal to the devices that a logical open is occurring
 17201                                  ; Returns:
 17202                                  ;	ES:DI point to SFT
 17203                                  ;    Carry clear
 17204                                  ;	SFT ref_count is incremented
 17205                                  ; Registers modified: None.
 17206                                  ; NOTE:
 17207                                  ;	This routine is called from $CREATE_PROCESS_DATA_BLOCK at DOSINIT
 17208                                  ;	time with SS NOT DOSGROUP. There will be no Network handles at
 17209                                  ;	that time.
 17210                                  ;---------------------------------------------------------------------------
 17211                                  
 17212                                  DOS_DUP:
 17213                                  	;LES	DI,[CS:THISSFT]  ; MSDOS 3.3
 17214                                  
 17215                                  	; MSDOS 6.0
 17216 00002AA4 2E8E06[0700]            	mov	es,[cs:DosDSeg]
 17217 00002AA9 26C43E[9E05]            	les	di,[es:THISSFT]
 17218                                  
 17219                                  	;Entry	Dos_Dup_Direct
 17220                                  DOS_Dup_Direct:
 17221 00002AAE E8FBE7                  	call	IsSFTNet
 17222 00002AB1 7503                    	JNZ	short DO_INC
 17223 00002AB3 E8ED1B                  	call	DEV_OPEN_SFT
 17224                                  DO_INC:
 17225                                  	;INC	word [ES:DI+SF_ENTRY.sf_ref_count]
 17226 00002AB6 26FF05                  	inc	word [ES:DI]		; Clears carry (if this ever wraps
 17227                                  					;   we're in big trouble anyway)
 17228 00002AB9 C3                      	retn
 17229                                  
 17230                                  ;============================================================================
 17231                                  ; CREATE.ASM, MSDOS 6.0, 1991
 17232                                  ;============================================================================
 17233                                  ; 08/08/2018 - Retro DOS v3.0
 17234                                  ; 18/05/2019 - Retro DOS v4.0
 17235                                  
 17236                                  ;TITLE	DOS_CREATE/DOS_CREATE_NEW - Internal CREATE calls for MS-DOS
 17237                                  ;NAME	DOS_CREATE
 17238                                  ;----------------------------------------------------------------------------
 17239                                  ;**	Internal Create and Create new to create a local or NET file and SFT.
 17240                                  ;
 17241                                  ;	DOS_CREATE
 17242                                  ;	DOS_CREATE_NEW
 17243                                  ;	SET_MKND_ERR
 17244                                  ;	SET_Media_ID
 17245                                  ;	SET_EXT_Mode
 17246                                  ;
 17247                                  ;	Revision history:
 17248                                  ;
 17249                                  ;	    A000 version 4.00	  Jan. 1988
 17250                                  ;	    A001  D490 -- Change IOCTL subfunctios from 63h,43h to 66h, 46h
 17251                                  
 17252                                  ;Installed = TRUE
 17253                                  
 17254                                  ;	i_need	THISSFT,DWORD
 17255                                  ;	i_need	THISCDS,DWORD
 17256                                  ;	I_need	EXTERR,WORD
 17257                                  ;	I_Need	ExtErr_locus,BYTE
 17258                                  ;	I_need	JShare,DWORD
 17259                                  ;	I_need	VOLCHNG_FLAG,BYTE
 17260                                  ;	I_need	SATTRIB,BYTE
 17261                                  ;	I_need	CALLVIDM,DWORD
 17262                                  ;	I_need	EXTOPEN_ON,BYTE 		  ;AN000; extended open
 17263                                  ;	I_need	NAME1,BYTE			  ;AN000;
 17264                                  ;	I_need	NO_NAME_ID,BYTE 		  ;AN000;
 17265                                  ;	I_need	Packet_Temp,WORD		  ;AN000;
 17266                                  ;	I_need	DOS34_FLAG,WORD 		  ;AN000;
 17267                                  ;	I_need	SAVE_BX,WORD			  ;AN000;
 17268                                  
 17269                                  ;***	DOS_CREATE - Create a File
 17270                                  ;----------------------------------------------------------------------------
 17271                                  ;	DOS_Create is called to create the specified file, truncating
 17272                                  ;	the old one if it exists.
 17273                                  ;
 17274                                  ;	ENTRY	AX is Attribute to create
 17275                                  ;		(ds) = DOSDATA
 17276                                  ;		[WFP_START] Points to WFP string ("d:/" must be first 3 chars, NUL
 17277                                  ;			terminated)
 17278                                  ;		[CURR_DIR_END] Points to end of Current dir part of string
 17279                                  ;			( = -1 if current dir not involved, else
 17280                                  ;			 Points to first char after last "/" of current dir part)
 17281                                  ;		[THISCDS] Points to CDS being used
 17282                                  ;			(Low word = -1 if NUL CDS (Net direct request))
 17283                                  ;		[THISSFT] Points to SFT to fill in if file created
 17284                                  ;			(sf_mode field set so that FCB may be detected)
 17285                                  ;		[SATTRIB] Is attribute of search, determines what files can be found
 17286                                  ;
 17287                                  ;	EXIT	sf_ref_count is NOT altered
 17288                                  ;		CARRY CLEAR
 17289                                  ;		    THISSFT filled in.
 17290                                  ;			sf_mode = unchanged for FCB, sharing_compat + open_for_both
 17291                                  ;		CARRY SET
 17292                                  ;		    AX is error code
 17293                                  ;			error_path_not_found
 17294                                  ;				Bad path (not in curr dir part if present)
 17295                                  ;			error_bad_curr_dir
 17296                                  ;				Bad path in current directory part of path
 17297                                  ;			error_access_denied
 17298                                  ;				Attempt to re-create read only file , or
 17299                                  ;				create a second volume id or create a dir
 17300                                  ;			error_sharing_violation
 17301                                  ;				The sharing mode was correct but not allowed
 17302                                  ;				generates an INT 24
 17303                                  ;	USES	all but DS
 17304                                  ;----------------------------------------------------------------------------
 17305                                  
 17306                                  	; 14/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 17307                                  	; DOSCODE:6920h (MSDOS 5.0, MSDOS.SYS)
 17308                                  
 17309                                  DOS_CREATE:
 17310                                  	; 18/05/2019 - Retro DOS v4.0
 17311                                  	; DOSCODE:6934h (MSDOS 6.21, MSDOS.SYS)
 17312                                  
 17313                                  ;hkn; dispatched to from file.asm and fcbio.asm. DS set up to DOSDATA at 
 17314                                  ;hkn; this point.
 17315                                  
 17316 00002ABA 30E4                    	XOR	AH,AH		; Truncate is OK
 17317                                  
 17318                                  ;	Enter here from Dos_Create_New
 17319                                  ;
 17320                                  ;	(ah) = 0 iff truncate OK
 17321                                  
 17322                                  Create_inter:
 17323 00002ABC A8C0                    	TEST	AL,~(attr_all+attr_ignore+attr_volume_id) ; 80h
 17324                                  				; Mask out any meaningless bits
 17325 00002ABE 7511                    	JNZ	short AttErr
 17326 00002AC0 A808                    	TEST	AL,attr_volume_id
 17327 00002AC2 7407                    	JZ	short NoReset
 17328                                  	
 17329                                  	; MSDOS 6.0
 17330                                  	; 16/12/2022
 17331 00002AC4 800E[1106]80            	OR	byte [DOS34_FLAG],DBCS_VOLID ; 80h ;AN000;FOR dbcs volid
 17332                                  	; 07/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 17333                                  	;or	word [DOS34_FLAG],DBCS_VOLID ; 80h 
 17334                                  	
 17335 00002AC9 B008                    	MOV	AL,attr_volume_id ; 8
 17336                                  NoReset:
 17337 00002ACB 0C20                    	OR	AL,attr_archive ; File changed  ; 20 h
 17338 00002ACD A850                    	TEST	AL,attr_directory+attr_device ; 50h
 17339 00002ACF 740A                    	JZ	short ATT_OK
 17340                                  AttErr:
 17341 00002AD1 B80500                  	MOV	AX,5		; Attribute problem
 17342 00002AD4 C606[2303]01            	MOV	byte [EXTERR_LOCUS],errLOC_Unk ; 1
 17343 00002AD9 EB66                    	JMP	SHORT SET_MKND_ERR ; Gotta use MKDIR to make dirs, NEVER allow
 17344                                  				   ;	attr_device to be set.
 17345                                  ATT_OK:
 17346 00002ADB C43E[9E05]              	LES	DI,[THISSFT]
 17347 00002ADF 06                      	PUSH	ES
 17348 00002AE0 C436[A205]              	LES	SI,[THISCDS]
 17349 00002AE4 83FEFF                  	CMP	SI,-1
 17350 00002AE7 751D                    	JNE	short TEST_RE_NET
 17351                                  
 17352                                  ;	No CDS, it must be redirected.
 17353                                  
 17354 00002AE9 07                      	POP	ES
 17355                                  
 17356                                  	; MSDOS 6.0
 17357                                  ;Extended open hooks
 17358                                  	;test	byte [EXTOPEN_ON],1
 17359 00002AEA F606[F605]01            	TEST	byte [EXTOPEN_ON],EXT_OPEN_ON ;AN000;EO. from extended open
 17360 00002AEF 740D                    	JZ	short NOEXTOP 		    ;AN000;EO. no, do normal
 17361                                  IFS_extopen:				    ;AN000;EO.
 17362 00002AF1 50                      	PUSH	AX			    ;AN000;EO. pass create attr
 17363                                  	;MOV	AX,(MultNET SHL 8) OR 46    ;AN000;EO. issue extended open verb
 17364 00002AF2 B82E11                  	mov	ax,112Eh
 17365 00002AF5 CD2F                    	INT	2FH			    ;AN000;EO.
 17366 00002AF7 5B                      	POP	BX			    ;AN000;EO. trash bx
 17367 00002AF8 C606[F605]00            	MOV	byte [EXTOPEN_ON],0	    ;AN000;EO.
 17368 00002AFD C3                      	retn				    ;AN000;EO.
 17369                                  NOEXTOP:				    ;AN000;
 17370                                  ;Extended open hooks
 17371                                  
 17372                                  ;IF NOT Installed
 17373                                  ;	transfer NET_SEQ_CREATE
 17374                                  ;ELSE
 17375 00002AFE 50                      	PUSH	AX
 17376                                  
 17377                                  	;MOV	AX,(MultNET SHL 8) OR 24
 17378                                  	;INT	2FH
 17379                                  
 17380 00002AFF B81811                  	mov     ax,1118h
 17381 00002B02 CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - CREATE/TRUNCATE FILE
 17382                                  			; ES:DI -> uninitialized SFT, SS = DOS CS
 17383                                  			; SDA first filename pointer -> fully-qualified name of file
 17384                                  			; STACK: WORD file creation mode???
 17385                                  
 17386 00002B04 5B                      	POP	BX			; BX is trashed anyway
 17387 00002B05 C3                      	retn
 17388                                  ;ENDIF
 17389                                  
 17390                                  ;	We have a CDS. See if it's network
 17391                                  
 17392                                  TEST_RE_NET:
 17393                                  	;;test	word [es:si+43h],8000h
 17394                                  	;TEST	word [ES:SI+curdir.flags],curdir_isnet
 17395                                  	; 07/12/2022
 17396                                  	;test	byte [es:si+44h],80h
 17397                                  	; 17/12/2022
 17398 00002B06 26F6444480              	test	byte [ES:SI+curdir.flags+1],curdir_isnet>>8
 17399 00002B0B 07                      	POP	ES
 17400 00002B0C 7419                    	JZ	short LOCAL_CREATE
 17401                                  
 17402                                  	; MSDOS 6.0
 17403 00002B0E E8BF00                  	CALL	Set_EXT_mode		    ;AN000;EO.
 17404 00002B11 7205                    	JC	SHORT dochk		    ;AN000;EO.
 17405                                  	;;or	word [es:di+2],2
 17406                                  	;OR	word [ES:DI+SF_ENTRY.sf_mode],SHARING_COMPAT+open_for_both ;IFS.
 17407                                  	; 17/12/2022
 17408 00002B13 26804D0202              	or	byte [ES:DI+SF_ENTRY.sf_mode],SHARING_COMPAT+open_for_both ;IFS.
 17409                                  
 17410                                  ;Extended open hooks
 17411                                  dochk:
 17412 00002B18 F606[F605]01            	TEST	byte [EXTOPEN_ON],EXT_OPEN_ON ;AN000;EO. from extended open
 17413 00002B1D 75D2                    	JNZ	short IFS_extopen	    ;AN000;EO. yes, issue extended open
 17414                                  ;Extended open hooks
 17415                                  
 17416                                  ;IF NOT Installed
 17417                                  ;	transfer NET_CREATE
 17418                                  ;ELSE
 17419 00002B1F 50                      	PUSH	AX
 17420                                  	
 17421                                  	;MOV	AX,(MultNET SHL 8) OR 23
 17422                                  	;INT	2FH
 17423                                  	
 17424 00002B20 B81711                  	mov     ax,1117h
 17425 00002B23 CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - CREATE/TRUNCATE REMOTE FILE
 17426                                  			; ES:DI -> uninitialized SFT, SS = DOS CS
 17427                                  			; SDA first filename pointer -> fully-qualified name of file to open
 17428                                  			; SDA CDS pointer -> current directory
 17429                                  			; Return: CF set on error
 17430                                  
 17431 00002B25 5B                      	POP	BX			; BX is trashed anyway
 17432                                  ;nomore:
 17433 00002B26 C3                      	retn
 17434                                  ;ENDIF
 17435                                  
 17436                                  ;**	It's a local create. We have a local CDS for it.
 17437                                  
 17438                                  LOCAL_CREATE:
 17439                                  	; MSDOS 6.0
 17440 00002B27 E8A600                  	CALL	Set_EXT_mode	;AN000;EO. set mode if from extended open
 17441 00002B2A 7205                    	JC	short setdone	;AN000;EO.
 17442                                  	
 17443                                  	; MSDOS 3.3 & MSDOS 6.0
 17444                                  	; 17/12/2022
 17445                                  	;;or	word [es:di+2],2
 17446                                  	;OR	word [ES:DI+SF_ENTRY.sf_mode],SHARING_COMPAT+open_for_both
 17447                                  	;or	byte [es:di+2],2
 17448 00002B2C 26804D0202              	or	byte [ES:DI+SF_ENTRY.sf_mode],SHARING_COMPAT+open_for_both	
 17449                                  setdone:
 17450 00002B31 E824E8                  	call	ECritDisk
 17451 00002B34 E8211F                  	call	MakeNode
 17452 00002B37 7317                    	JNC	short Create_ok
 17453 00002B39 C606[A10A]FF            	mov	byte [VOLCHNG_FLAG],-1	; indicate no change in volume label
 17454 00002B3E E832E8                  	call	LCritDisk
 17455                                  
 17456                                  	;entry	SET_MKND_ERR
 17457                                  SET_MKND_ERR:
 17458                                  
 17459                                  ;	Looks up MakeNode errors and converts them. AL is MakeNode
 17460                                  ;	error, SI is GETPATH bad spot return if path_not_found error.
 17461                                  
 17462                                  ;hkn; CRTERRTAB is in TABLE seg (DOSCODE)
 17463 00002B41 BB[482B]                	MOV     BX,CRTERRTAB
 17464                                  	;XLAT  ; MSDOS 3.3
 17465                                  	; 18/05/2019 - Retro DOS v4.0
 17466 00002B44 2E                      	CS
 17467 00002B45 D7                      	XLAT
 17468                                  CreatBadRet:
 17469 00002B46 F9                      	STC
 17470 00002B47 C3                      	retn
 17471                                  
 17472                                  ; 13/05/2019 - Retro DOS v4.0
 17473                                  ; DOSCODE:69C4h (MSDOS 6.21, MSDOS.SYS)
 17474                                  ; ---------------------------------------------------------------------------
 17475                                  
 17476                                  ;** Internal Create and Create new to create a local or NET file and SFT.
 17477                                  
 17478                                  ; 17/07/2018 - Retro DOS v3.0
 17479                                  ; Offset 12B1h of IBMDOS.COM (MSDOS 3.3), 1987
 17480                                  
 17481                                  ;CRTERRTAB: ; 19/07/2018 - MSDOS 3.3	
 17482                                  ;	db	0,5,52h,50h,3,5,20h
 17483                                  
 17484                                  ;CRTERRTAB: ; 18/05/2019 - MSDOS 6.0	
 17485                                  ;	db	0,5,52h,50h,3,5,20h,2
 17486                                  
 17487                                  ; 08/08/2018
 17488                                  
 17489                                  CRTERRTAB:	;LABEL BYTE	; Lookup table for MakeNode returns
 17490 00002B48 00                      	DB	0			; none
 17491 00002B49 05                      	DB	error_access_denied	; MakeNode error 1
 17492 00002B4A 52                      	DB	error_cannot_make	; MakeNode error 2
 17493 00002B4B 50                      	DB	error_file_exists	; MakeNode error 3
 17494 00002B4C 03                      	DB	error_path_not_found	; MakeNode error 4
 17495 00002B4D 05                      	DB	error_access_denied	; MakeNode error 5
 17496 00002B4E 20                      	DB	error_sharing_violation ; MakeNode error 6
 17497                                  	; MSDOS 6.0
 17498 00002B4F 02                      	DB	error_file_not_found	; MakeNode error 7
 17499                                  
 17500                                  ; ---------------------------------------------------------------------------
 17501                                  
 17502                                  ; We have just created a new file. This results in the truncation of old
 17503                                  ; files. We must inform the sharer to slash all the open SFT's for this
 17504                                  ; file to the current size.
 17505                                  
 17506                                  ; If we created a volume id on the diskette, set the VOLCHNG_FLAG to logical
 17507                                  ; drive number to force a Build BPB after Media Check.
 17508                                  
 17509                                  ;;; FASTOPEN 8/29/86
 17510                                  Create_ok:
 17511 00002B50 E8E1FB                  	call	FastOpen_Delete
 17512                                  ;;; FASTOPEN 8/29/86
 17513 00002B53 A0[6D05]                	mov	al,[SATTRIB]
 17514 00002B56 A808                    	test	al,attr_volume_id
 17515 00002B58 741C                    	jz	short NoVolLabel
 17516 00002B5A C43E[A205]              	LES	DI,[THISCDS]
 17517                                  	;mov	ah,[ES:DI+curdir.text]	; get drive letter
 17518 00002B5E 268A25                  	mov	ah,[ES:DI] ; 09/08/2018
 17519 00002B61 80EC41                  	sub	ah,'A'	; 41h		; convert to drive number
 17520 00002B64 8826[A10A]              	mov	[VOLCHNG_FLAG],ah	;Set flag to indicate volid change
 17521                                  	
 17522                                  	; 18/05/2019 - Retro DOS v4.0
 17523                                  
 17524                                  	; MSDOS 6.0
 17525 00002B68 B701                    	MOV	BH,1			;AN000;>32mb set volume id to boot record
 17526 00002B6A E81F00                  	CALL	Set_Media_ID		;AN000;>32mb
 17527                                  	
 17528 00002B6D E8E8E7                  	call	ECritDisk
 17529 00002B70 E85E2C                  	call	FATREAD_CDS		; force a media check
 17530 00002B73 E8FDE7                  	call	LCritDisk
 17531                                  
 17532                                  NoVolLabel:
 17533 00002B76 B80200                  	MOV	ax,2
 17534 00002B79 C43E[9E05]              	LES	DI,[THISSFT]
 17535                                  ;if installed
 17536                                  	;call	JShare + 14 * 4
 17537 00002B7D FF1E[C800]              	call	far [JShare+(14*4)] ; 14 = ShSU
 17538                                  ;else
 17539                                  ;	Call	ShSU
 17540                                  ;endif
 17541 00002B81 E8EFE7                  	call	LCritDisk
 17542 00002B84 E94901                  	jmp	SET_SFT_MODE
 17543                                  
 17544                                  ;---------------------------------------------------------------------------
 17545                                  ; Procedure Name : Dos_Create_New
 17546                                  ;
 17547                                  ; Inputs:
 17548                                  ;	[WFP_START] Points to WFP string ("d:/" must be first 3 chars, NUL
 17549                                  ;		terminated)
 17550                                  ;	[CURR_DIR_END] Points to end of Current dir part of string
 17551                                  ;		( = -1 if current dir not involved, else
 17552                                  ;		 Points to first char after last "/" of current dir part)
 17553                                  ;	[THISCDS] Points to CDS being used
 17554                                  ;		(Low word = -1 if NUL CDS (Net direct request))
 17555                                  ;	[THISSFT] Points to SFT to fill in if file created
 17556                                  ;		(sf_mode field set so that FCB may be detected)
 17557                                  ;	[SATTRIB] Is attribute of search, determines what files can be found
 17558                                  ;	AX is Attribute to create
 17559                                  ; Function:
 17560                                  ;	Try to create the specified file truncating an old one that exists
 17561                                  ; Outputs:
 17562                                  ;	sf_ref_count is NOT altered
 17563                                  ;	CARRY CLEAR
 17564                                  ;	    THISSFT filled in.
 17565                                  ;		sf_mode = sharing_compat + open_for_both for Non-FCB SFT
 17566                                  ;	CARRY SET
 17567                                  ;	    AX is error code
 17568                                  ;		error_path_not_found
 17569                                  ;			Bad path (not in curr dir part if present)
 17570                                  ;		error_bad_curr_dir
 17571                                  ;			Bad path in current directory part of path
 17572                                  ;		error_access_denied
 17573                                  ;			Create a second volume id or create a dir
 17574                                  ;		error_file_exists
 17575                                  ;			Already a file by this name
 17576                                  ; DS preserved, others destroyed
 17577                                  ;---------------------------------------------------------------------------
 17578                                  
 17579                                  DOS_Create_New:
 17580 00002B87 B401                    	MOV	AH,1		; Truncate is NOT OK
 17581 00002B89 E930FF                  	JMP	Create_inter
 17582                                  
 17583                                  ; MSDOS 6.0
 17584                                  ;---------------------------------------------------------------------------
 17585                                  ; Procedure Name : Set_Media_ID
 17586                                  ;
 17587                                  ; Inputs:
 17588                                  ;	NAME1= Volume ID
 17589                                  ;	BH= 0, delete volume id
 17590                                  ;	    1, set new volume id
 17591                                  ;	DS= DOSGROUP
 17592                                  ; Function:
 17593                                  ;	Set Volume ID to DOS 4.00 Boot record.
 17594                                  ; Outputs:
 17595                                  ;	CARRY CLEAR
 17596                                  ;	    volume id set
 17597                                  ;	CARRY SET
 17598                                  ;	    AX is error code
 17599                                  ;---------------------------------------------------------------------------
 17600                                  
 17601                                  	; 18/05/2019 - Retro DOS v4.0
 17602                                  Set_Media_ID:
 17603 00002B8C 50                      	PUSH	AX		;AN000;;>32mb
 17604 00002B8D 06                      	PUSH	ES		;AN000;;>32mb
 17605 00002B8E 57                      	PUSH	DI		;AN000;;>32mb
 17606                                  
 17607 00002B8F FEC4                    	INC	AH		;AN000;;>32mb  bl=drive #
 17608 00002B91 88E3                    	MOV	BL,AH		;AN000;;>32mb  bl=drive # (A=1,B=2,,,)
 17609 00002B93 B00D                    	MOV	AL,0DH		;AN000;;>32mb  generic IOCTL
 17610 00002B95 B96608                  	MOV	CX,0866H	;AN001;;>32mb  get media id
 17611                                  
 17612                                  ;hkn; PACKET_TEMP is in DOSDATA
 17613 00002B98 BA[6C0D]                	MOV	DX,Packet_Temp	;AN000;>32mb
 17614                                  
 17615 00002B9B 53                      	PUSH	BX		;AN000;;>32mb
 17616 00002B9C 52                      	PUSH	DX		;AN000;;>32mb
 17617 00002B9D 30FF                    	XOR	BH,BH		;AN000;;>32mb
 17618                                  
 17619                                  	;invoke	$IOCTL		;AN000;;>32mb
 17620 00002B9F E83EF7                  	call	_$IOCTL	
 17621                                  
 17622 00002BA2 5A                      	POP	DX		;AN000;;>32mb
 17623 00002BA3 5B                      	POP	BX		;AN000;;>32mb
 17624 00002BA4 7224                    	JC	short geterr	;AN000;;>32mb
 17625                                  
 17626 00002BA6 08FF                    	OR	BH,BH		;AN000;;>32mb delete volume id
 17627 00002BA8 7405                    	JZ	short NoName	;AN000;>32mb yes
 17628                                  
 17629                                  ;hkn; NAME1 is in DOSDATA
 17630 00002BAA BE[4B05]                	MOV	SI,NAME1	;AN000;>32mb
 17631                                  
 17632 00002BAD EB03                    	JMP	SHORT doset	;AN000;>32mb yes
 17633                                  NoName: 			;AN000;
 17634                                  
 17635                                  ;hkn; NO_NAME_ID is in DOSDATA
 17636 00002BAF BE[BA0D]                	MOV	SI,NO_NAME_ID	;AN000;>32mb
 17637                                  
 17638                                  doset:				;AN000;
 17639 00002BB2 89D7                    	MOV	DI,DX		;AN000;;>32mb
 17640                                  	;add	di,6
 17641 00002BB4 83C706                  	ADD	DI,MEDIA_ID_INFO.MEDIA_Label ;AN000;;>32mb
 17642                                  
 17643                                  ;hkn; ES & DS must point to SS
 17644                                  ;hkn;	PUSH	CS		;AN000;;>32mb  move new volume id to packet
 17645 00002BB7 16                      	PUSH	SS		;AN000;;>32mb  move new volume id to packet
 17646                                  
 17647 00002BB8 1F                      	POP	DS		;AN000;;>32mb
 17648                                  
 17649                                  ;hkn;	PUSH	CS		;AN000;;>32mb
 17650 00002BB9 16                      	PUSH	SS		;AN000;;>32mb
 17651                                  
 17652 00002BBA 07                      	POP	ES		;AN000;;>32mb
 17653 00002BBB B90B00                  	MOV	CX,11		;AN000;;>32mb
 17654 00002BBE F3A4                    	REP	MOVSB		;AN000;;>32mb
 17655 00002BC0 B94608                  	MOV	CX,0846H	;AN001;;>32mb
 17656 00002BC3 B00D                    	MOV	AL,0DH		;AN000;;>32mb
 17657 00002BC5 30FF                    	XOR	BH,BH		;AN000;;>32mb
 17658                                  	;invoke	$IOCTL		;AN000;;>32mb  set volume id
 17659 00002BC7 E816F7                  	call	_$IOCTL	
 17660                                  geterr: 			;AN000;
 17661                                  ;hkn;	PUSH	CS		;AN000;>32mb
 17662 00002BCA 16                      	PUSH	SS		;AN000;>32mb
 17663                                  
 17664 00002BCB 1F                      	POP	DS		;AN000;>32mb   ds= dosgroup
 17665                                  
 17666 00002BCC 5F                      	POP	DI		;AN000;;>32mb
 17667 00002BCD 07                      	POP	ES		;AN000;;>32mb
 17668 00002BCE 58                      	POP	AX		;AN000;;>32mb
 17669 00002BCF C3                      	retn			;AN000;>32mb
 17670                                  
 17671                                  ; MSDOS 6.0
 17672                                  ;---------------------------------------------------------------------------
 17673                                  ; Procedure Name : Set_EXT_mode
 17674                                  ;
 17675                                  ; Inputs:
 17676                                  ;	[EXTOPEN_ON]= flag for extended open
 17677                                  ;	SAVE_BX= mode specified in Extended Open
 17678                                  ; Function:
 17679                                  ;	Set mode in ThisSFT
 17680                                  ; Outputs:
 17681                                  ;	carry set,mode is set if from Extended Open
 17682                                  ;	carry clear, mode not set yet
 17683                                  ;---------------------------------------------------------------------------
 17684                                  
 17685                                  ; 13/05/2019 - Retro DOS v4.0
 17686                                  
 17687                                  Set_EXT_mode:
 17688                                  
 17689                                  ;hkn; SS override
 17690 00002BD0 36F606[F605]01          	TEST	byte [ss:EXTOPEN_ON],EXT_OPEN_ON ;AN000;EO. from extended open
 17691 00002BD6 740B                    	JZ	short NOTEX		    ;AN000;EO. no, do normal
 17692 00002BD8 50                      	PUSH	AX			    ;AN000;EO.
 17693                                  
 17694                                  ;hkn; SS override
 17695 00002BD9 36A1[0106]              	MOV	AX,[ss:SAVE_BX]		    ;AN000;EO.
 17696                                  	;or	[es:di+2],ax
 17697 00002BDD 26094502                	OR	[ES:DI+SF_ENTRY.sf_mode],AX ;AN000;EO.
 17698 00002BE1 58                      	POP	AX			    ;AN000;EO.
 17699 00002BE2 F9                      	STC				    ;AN000;EO.
 17700                                  NOTEX:					    ;AN000;
 17701 00002BE3 C3                      	retn				    ;AN000;EO.
 17702                                  
 17703                                  ;============================================================================
 17704                                  ; OPEN.ASM, MSDOS 6.0, 1991
 17705                                  ;============================================================================
 17706                                  ; 08/08/2018 - Retro DOS v3.0
 17707                                  ; 18/05/2019 - Retro DOS v4.0
 17708                                  
 17709                                  ;	TITLE	DOS_OPEN - Internal OPEN call for MS-DOS
 17710                                  ;	NAME	DOS_OPEN
 17711                                  
 17712                                  ;**	OPEN.ASM - File Open
 17713                                  ;----------------------------------------------------------------------------
 17714                                  ;	Low level routines for openning a file from a file spec.
 17715                                  ;	Also misc routines for sharing errors
 17716                                  ;
 17717                                  ;	DOS_Open
 17718                                  ;	Check_Access_AX
 17719                                  ;	SHARE_ERROR
 17720                                  ;	SET_SFT_MODE
 17721                                  ;	Code_Page_Mismatched_Error		   ; DOS 4.00
 17722                                  ;
 17723                                  ;	Revision history:
 17724                                  ;
 17725                                  ;	    Created: ARR 30 March 1983
 17726                                  ;	    A000	version 4.00   Jan. 1988
 17727                                  ;
 17728                                  ;	M034 - The value in save_bx must be pushed on to the stack for
 17729                                  ; 	       remote extended opens and not save_cx.
 17730                                  ;
 17731                                  ;	M035 - if open made from exec then we must set the appropriate bits
 17732                                  ;	       on the stack before calling off to the redir.
 17733                                  ;	M042 - Bit 11 of DOS34_FLAG set indicates that the redir knows how 
 17734                                  ;	       to handle open from exec. In this case set the appropriate bit
 17735                                  ;	       else do not.
 17736                                  ;----------------------------------------------------------------------------	
 17737                                  
 17738                                  ;Installed = TRUE
 17739                                  
 17740                                  ;	i_need	NoSetDir,BYTE
 17741                                  ;	i_need	THISSFT,DWORD
 17742                                  ;	i_need	THISCDS,DWORD
 17743                                  ;	i_need	CURBUF,DWORD
 17744                                  ;	i_need	CurrentPDB,WORD
 17745                                  ;	i_need	CURR_DIR_END,WORD
 17746                                  ;	I_need	RetryCount,WORD
 17747                                  ;	I_need	Open_Access,BYTE
 17748                                  ;	I_need	fSharing,BYTE
 17749                                  ;	i_need	JShare,DWORD
 17750                                  ;	I_need	FastOpenFlg,byte
 17751                                  ;	I_need	EXTOPEN_ON,BYTE 		  ;AN000;; DOS 4.00
 17752                                  ;	I_need	ALLOWED,BYTE			  ;AN000;; DOS 4.00
 17753                                  ;	I_need	EXTERR,WORD			  ;AN000;; DOS 4.00
 17754                                  ;	I_need	EXTERR_LOCUS,BYTE		  ;AN000;; DOS 4.00
 17755                                  ;	I_need	EXTERR_ACTION,BYTE		  ;AN000;; DOS 4.00
 17756                                  ;	I_need	EXTERR_CLASS,BYTE		  ;AN000;; DOS 4.00
 17757                                  ;	I_need	CPSWFLAG,BYTE			  ;AN000;; DOS 4.00
 17758                                  ;	I_need	EXITHOLD,DWORD			  ;AN000;; DOS 4.00
 17759                                  ;	I_need	THISDPB,DWORD			  ;AN000;; DOS 4.00
 17760                                  ;	I_need	SAVE_CX,WORD			  ;AN000;; DOS 4.00
 17761                                  ;	I_need	SAVE_BX,WORD			  ;M034
 17762                                  ;
 17763                                  ;	I_need	DOS_FLAG,BYTE
 17764                                  ;	I_need	DOS34_FLAG,WORD			  ;M042
 17765                                  
 17766                                  ;Break	<DOS_Open - internal file access>
 17767                                  ;---------------------------------------------------------------------------
 17768                                  ; Procedure Name : DOS_Open
 17769                                  ;
 17770                                  ; Inputs:
 17771                                  ;	[WFP_START] Points to WFP string ("d:/" must be first 3 chars, NUL
 17772                                  ;		terminated)
 17773                                  ;	[CURR_DIR_END] Points to end of Current dir part of string
 17774                                  ;		( = -1 if current dir not involved, else
 17775                                  ;		 Points to first char after last "/" of current dir part)
 17776                                  ;	[THISCDS] Points to CDS being used
 17777                                  ;		(Low word = -1 if NUL CDS (Net direct request))
 17778                                  ;	[THISSFT] Points to SFT to fill in if file found
 17779                                  ;		(sf_mode field set so that FCB may be detected)
 17780                                  ;	[SATTRIB] Is attribute of search, determines what files can be found
 17781                                  ;	AX is Access and Sharing mode
 17782                                  ;	  High NIBBLE of AL (Sharing Mode)
 17783                                  ;		sharing_compat	   file is opened in compatibility mode
 17784                                  ;		sharing_deny_none  file is opened Multi reader, Multi writer
 17785                                  ;		sharing_deny_read  file is opened Only reader, Multi writer
 17786                                  ;		sharing_deny_write file is opened Multi reader, Only writer
 17787                                  ;		sharing_deny_both  file is opened Only reader, Only writer
 17788                                  ;	  Low NIBBLE of AL (Access Mode)
 17789                                  ;		open_for_read	file is opened for reading
 17790                                  ;		open_for_write	file is opened for writing
 17791                                  ;		open_for_both	file is opened for both reading and writing.
 17792                                  ;
 17793                                  ;	  For FCB SFTs AL should = sharing_compat + open_for_both
 17794                                  ;		(not checked)
 17795                                  ; Function:
 17796                                  ;	Try to open the specified file
 17797                                  ; Outputs:
 17798                                  ;	sf_ref_count is NOT altered
 17799                                  ;	CARRY CLEAR
 17800                                  ;	    THISSFT filled in.
 17801                                  ;	CARRY SET
 17802                                  ;	    AX is error code
 17803                                  ;		error_file_not_found
 17804                                  ;			Last element of path not found
 17805                                  ;		error_path_not_found
 17806                                  ;			Bad path (not in curr dir part if present)
 17807                                  ;		error_bad_curr_dir
 17808                                  ;			Bad path in current directory part of path
 17809                                  ;		error_invalid_access
 17810                                  ;			Bad sharing mode or bad access mode or bad combination
 17811                                  ;		error_access_denied
 17812                                  ;			Attempt to open read only file for writting, or
 17813                                  ;			open a directory
 17814                                  ;		error_sharing_violation
 17815                                  ;			The sharing mode was correct but not allowed
 17816                                  ;			generates an INT 24 on compatibility mode SFTs
 17817                                  ; DS preserved, others destroyed
 17818                                  ;----------------------------------------------------------------------------
 17819                                  
 17820                                  ; 18/05/2019 - Retro DOS v4.0
 17821                                  ; DOSCODE:6A60h (MSDOS 6.21, MSDOS.SYS)
 17822                                  ; 14/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 17823                                  ; DOSCODE:6A4Ch (MSDOS 5.0, MSDOS.SYS)
 17824                                  
 17825                                  DOS_OPEN:
 17826                                  	; DS has been set up to DOSDATA in file.asm and fcbio2.asm. 
 17827                                  
 17828 00002BE4 C606[4C03]00            	MOV	byte [NoSetDir],0
 17829 00002BE9 E83601                  	CALL	Check_Access_AX
 17830 00002BEC 722B                    	JC	short do_ret_label	    ; retc
 17831                                  
 17832 00002BEE C43E[9E05]              	LES	DI,[THISSFT]
 17833 00002BF2 30E4                    	XOR	AH,AH
 17834                                  
 17835                                  	; sleaze! move only access/sharing mode in. Leave sf_isFCB unchanged
 17836                                  
 17837 00002BF4 26884502                	MOV	[ES:DI+SF_ENTRY.sf_mode],AL ; For moment do this on FCBs too
 17838 00002BF8 06                      	PUSH	ES
 17839 00002BF9 C436[A205]              	LES	SI,[THISCDS]
 17840                                  	; 18/08/2018
 17841 00002BFD 83FEFF                  	CMP	SI,-1
 17842 00002C00 7530                    	JNZ	short TEST_RE_NET1
 17843 00002C02 07                      	POP	ES
 17844                                  
 17845                                  	; MSDOS 6.0
 17846                                  ;Extended open hooks
 17847 00002C03 F606[F605]01            	TEST	byte [EXTOPEN_ON],EXT_OPEN_ON ;FT. from extnded open		;AN000;
 17848 00002C08 7410                    	JZ	short _NOEXTOP 		    ;FT. no, do normal			;AN000;
 17849                                  _IFS_extopen:									;AN000;
 17850 00002C0A A0[0106]                	MOV	AL,[SAVE_BX]		    ; M034 - save_bx has original bx  
 17851                                  					    ; with which call was made. This
 17852                                  					    ; has the open access bits. 
 17853                                  	;;MOV	AL,[SAVE_CX]		    ; M034 - FT. al= create attribute
 17854                                  	
 17855 00002C0D 50                      	PUSH	AX			    ;FT. pass create attr to IFS	;AN000;
 17856                                  	;mov	ax,112Eh
 17857                                  	;MOV	AX,(MultNET SHL 8) OR 46    ;FT. issue extended open verb	;AN000;
 17858 00002C0E B82E11                  	mov	ax,(MultNET*256)+46 
 17859 00002C11 CD2F                    	INT	2FH			    ;FT.				;AN000;
 17860 00002C13 5B                      	POP	BX			    ;FT. trash bx			;AN000;
 17861 00002C14 C606[F605]00            	MOV	byte [EXTOPEN_ON],0	    ;FT.				;AN000;
 17862                                  
 17863                                  do_ret_label:
 17864 00002C19 C3                      	retn				    ;FT.				;AN000;
 17865                                  _NOEXTOP:
 17866                                  ;Extended open hooks
 17867                                  	;
 17868                                  ;IF NOT Installed
 17869                                  	;transfer NET_SEQ_OPEN
 17870                                  ;ELSE
 17871                                  	
 17872                                  do_net_int2f:
 17873 00002C1A F606[8600]01            	test	byte [DOS_FLAG],EXECOPEN ; Q: was this open call made from exec
 17874 00002C1F 7409                    	jz	short not_exec_open	; N: just do net open
 17875                                  					; Y: check to see if redir is aware
 17876                                  					;    of this 
 17877                                  	
 17878                                  					; M042 - start
 17879                                  	;test	word [DOS34_FLAG],EXEC_AWARE_REDIR ; 800h
 17880 00002C21 F606[1206]08            	test	byte [DOS34_FLAG+1],(EXEC_AWARE_REDIR>>8)
 17881                                  					; Q: does this redir know how to 
 17882                                  					;    this
 17883 00002C26 7402                    	jz	short not_exec_open	; N: just do net open
 17884                                  					; Y: set bit 3 of access byte and 
 17885                                  					;    set sharing mode to DENY_WRITE
 17886                                  					; M042 - end
 17887                                  	
 17888                                  	; NOTE: This specific mode has not been set for the code assembled
 17889                                  	; under the "NOT Installed" conditional. Currently Installed is 
 17890                                  	; always one.
 17891                                  					; M035 - set the bits on the stack
 17892                                  	;mov	al,23h
 17893 00002C28 B023                    	mov	AL,SHARING_DENY_WRITE+EXEC_OPEN
 17894                                  	
 17895                                  not_exec_open:
 17896                                  	; MSDOS 3.3 & MSDOS 6.0
 17897 00002C2A 50                      	PUSH	AX
 17898                                  
 17899                                  	;MOV	AX,(MultNET SHL 8) OR 22
 17900                                  	;INT	2FH
 17901                                  
 17902 00002C2B B81611                  	mov     ax,1116h
 17903 00002C2E CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - OPEN EXISTING REMOTE FILE
 17904                                  			; ES:DI -> uninitialized SFT, SS = DOS CS
 17905                                  			; SDA first filename pointer -> fully-qualified name of file to open
 17906                                  			; STACK: WORD file open mode
 17907                                  			; Return: CF set on error
 17908                                  
 17909 00002C30 5B                      	POP	BX			; clean stack
 17910                                  ;do_ret_label: ; 09/08/2018
 17911 00002C31 C3                      	retn
 17912                                  ;ENDIF
 17913                                  
 17914                                  TEST_RE_NET1:
 17915                                  	;TEST	word [ES:SI+curdir.flags],curdir_isnet
 17916                                  	; 17/12/2022
 17917 00002C32 26F6444480              	test	byte [ES:SI+curdir.flags+1],curdir_isnet>>8
 17918 00002C37 07                      	POP	ES
 17919                                  	; 18/05/2019
 17920 00002C38 7409                    	JZ	short LOCAL_OPEN
 17921                                  
 17922                                  ;Extended open hooks
 17923                                  	; MSDOS 6.0
 17924 00002C3A F606[F605]01            	TEST	byte [EXTOPEN_ON],EXT_OPEN_ON ;FT. from extended open	;AN000;
 17925 00002C3F 75C9                    	JNZ	short _IFS_extopen	      ;FT. isuue extended open	;AN000;
 17926                                  ;Extended open hooks
 17927                                  
 17928                                  ;IF NOT Installed
 17929                                  ;	transfer NET_OPEN
 17930                                  ;ELSE
 17931 00002C41 EBD7                    	jmp	short do_net_int2f
 17932                                  ;ENDIF
 17933                                  
 17934                                  LOCAL_OPEN:
 17935                                  	; MSDOS 3.3 & MSDOS 6.0
 17936 00002C43 E812E7                  	call	ECritDisk
 17937                                  
 17938                                  ; DOS 3.3 FastOPen 6/16/86
 17939                                  
 17940                                  	;or	byte [FastOpenFlg],5
 17941 00002C46 800E[3A0D]05            	OR	byte [FastOpenFlg],FastOpen_Set+Special_Fill_Set ; only open can
 17942                                  
 17943 00002C4B E87C13                  	call	GETPATH
 17944                                  
 17945                                  ; DOS 3.3 FastOPen 6/16/86
 17946                                  
 17947 00002C4E 731D                    	JNC	short Open_found
 17948 00002C50 7511                    	JNZ	short bad_path2
 17949 00002C52 08C9                    	OR	CL,CL
 17950 00002C54 740D                    	JZ	short bad_path2
 17951                                  OpenFNF:
 17952 00002C56 B80200                  	MOV	AX,error_file_not_found	; 2
 17953                                  OpenBadRet:
 17954                                  ;hkn; FastOpenFlg is in DOSDATA use SS override
 17955                                  	; 12/08/2018
 17956                                  	;mov	byte [cs:FastOpenFlg],0 ; IBMDOS.COM (MSDOS 3.3) offset 36CAh
 17957                                  	; MSDOS 6.0
 17958 00002C59 368026[3A0D]80          	AND	BYTE [SS:FastOpenFlg],Fast_yes    ;; DOS 3.3
 17959 00002C5F F9                      	STC
 17960                                  	;call	LCritDisk
 17961                                  	; 16/12/2022
 17962 00002C60 E910E7                  	jmp	LCritDisk
 17963                                  	;;JMP	Clear_FastOpen ; 10/08/2018
 17964                                  	;retn 	; 08/09/2018
 17965                                  	; 14/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 17966                                  	;jmp	Clear_FastOpen
 17967                                  
 17968                                  bad_path2:
 17969 00002C63 B80300                  	MOV	AX,error_path_not_found	; 3
 17970 00002C66 EBF1                    	JMP	short OpenBadRet
 17971                                  
 17972                                  Open_Bad_Access:
 17973 00002C68 B80500                  	MOV	AX,error_access_denied	; 5
 17974 00002C6B EBEC                    	JMP	short OpenBadRet
 17975                                  
 17976                                  Open_found:
 17977 00002C6D 74F9                    	JZ	short Open_Bad_Access 	; test for directories
 17978 00002C6F 08E4                    	OR	AH,AH
 17979 00002C71 783E                    	JS	short open_ok		; Devices don't have attributes
 17980 00002C73 8E06[E405]              	MOV	ES,[CURBUF+2]		; get buffer location
 17981                                  	;mov	al,[es:bx+0Bh]
 17982 00002C77 268A470B                	MOV	AL,[ES:BX+dir_entry.dir_attr]
 17983 00002C7B A808                    	TEST	AL,attr_volume_id	; can't open volume ids
 17984 00002C7D 75E9                    	JNZ	short Open_Bad_Access
 17985 00002C7F A801                    	TEST	AL,attr_read_only	; check write on read only
 17986 00002C81 742E                    	JZ	short open_ok
 17987                                  
 17988                                  ; The file is marked READ-ONLY. We verify that the open mode allows access to
 17989                                  ; the read-only file. Unfortunately, with FCB's and net-FCB's we cannot
 17990                                  ; determine at the OPEN time if such access is allowed. Thus, we defer such
 17991                                  ; processing until the actual write operation:
 17992                                  ;
 17993                                  ; If FCB, then we change the mode to be read_only.
 17994                                  ; If net_FCB, then we change the mode to be read_only.
 17995                                  ; If not open for read then error.
 17996                                  
 17997 00002C83 1E                      	push	ds
 17998 00002C84 56                      	push	si
 17999 00002C85 C536[9E05]              	LDS	SI,[THISSFT]
 18000                                  	;mov	cx,[si+2]
 18001 00002C89 8B4C02                  	MOV	CX,[SI+SF_ENTRY.sf_mode]
 18002                                  	; 17/12/2022
 18003                                  	;test	ch,80h
 18004 00002C8C F6C580                  	test	ch,sf_isFCB>>8
 18005                                  	;TEST	CX,sf_isFCB ; 8000h	; is it FCB?
 18006 00002C8F 750A                    	JNZ	short ResetAccess	; yes, reset the access
 18007 00002C91 88CA                    	MOV	DL,CL
 18008 00002C93 80E2F0                  	AND	DL,SHARING_MASK	; 0F0h
 18009 00002C96 80FA70                  	CMP	DL,SHARING_NET_FCB ; 70h ; is it net FCB?
 18010 00002C99 7508                    	JNZ	short NormalOpen	; no
 18011                                  ResetAccess:
 18012                                  	; 14/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)	
 18013                                  	;AND	CX,~access_mask	; 0FFF0h ; clear access
 18014                                  	; 16/12/2022
 18015 00002C9B 80E1F0                  	and	cl,0F0h ; 18/05/2019
 18016                                  ;	OR	CX,open_for_read ; 0	; stick in open_for_read
 18017 00002C9E 894C02                  	MOV	[SI+SF_ENTRY.sf_mode],CX
 18018 00002CA1 EB0C                    	JMP	SHORT FillSFT
 18019                                  
 18020                                  ; The SFT is normal. See if the requested access is open_for_read
 18021                                  
 18022                                  NormalOpen:
 18023 00002CA3 80E10F                  	AND	CL,access_mask	;0Fh	; remove extras
 18024 00002CA6 80F900                  	CMP	CL,open_for_read ; 0	; is it open for read?
 18025 00002CA9 7404                    	JZ	short FillSFT
 18026 00002CAB 5E                      	pop	si
 18027 00002CAC 1F                      	pop	ds
 18028 00002CAD EBB9                    	JMP	short Open_Bad_Access
 18029                                  ;
 18030                                  ; All done, restore registers and fill the SFT.
 18031                                  ;
 18032                                  FillSFT:
 18033 00002CAF 5E                      	pop	si
 18034 00002CB0 1F                      	pop	ds
 18035                                  open_ok:
 18036 00002CB1 E8631F                  	call	DOOPEN			; Fill in SFT
 18037                                  
 18038                                  ;hkn; FastOpenFlg is in DOSDATA. use SS override
 18039                                  	; 18/05/2019
 18040                                  	;and	byte [ss:FastOpenFlag],80h
 18041 00002CB4 368026[3A0D]80          	AND	BYTE [SS:FastOpenFlg],Fast_yes	;; DOS 3.3
 18042                                  	; 12/08/2018
 18043                                  	;and	byte [FastOpenFlg],Fast_yes	
 18044                                  
 18045                                  	; MSDOS 6.0
 18046 00002CBA E84600                  	CALL	DO_SHARE_CHECK
 18047 00002CBD 7303                    	JNC	short SHARE_OK
 18048                                  	;call	LCritDisk
 18049                                  	; 16/12/2022
 18050 00002CBF E9B1E6                  	jmp	LCritDisk
 18051                                  	;;JMP	short Clear_FastOpen
 18052                                  	;retn	; 18/05/2019
 18053                                  	; 14/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 18054                                  	;jmp	short Clear_FastOpen	
 18055                                  
 18056                                  	; MSDOS 3.3
 18057                                  ;DO_SHARE_CHECK:
 18058                                  ;	MOV	CX,[RetryCount]		; Get # tries to do
 18059                                  ;OpenShareRetry:
 18060                                  ;	push	cx			; Save number left to do
 18061                                  ;	call	SHARE_CHECK		; Final Check
 18062                                  ;	pop	cx			; CX = # left
 18063                                  ;	JNC	short SHARE_OK		; No problem with access
 18064                                  ;	call	Idle
 18065                                  ;	LOOP	OpenShareRetry		; One more retry used up
 18066                                  ;OpenShareFail:
 18067                                  ;	LES	DI,[THISSFT]
 18068                                  ;	call	SHARE_ERROR
 18069                                  ;	JNC	short DO_SHARE_CHECK	; User wants more retry
 18070                                  	
 18071                                  	;12/08/2018
 18072                                  	;mov	byte [ss:FastOpenFlg],0
 18073                                  	;08/09/2018
 18074                                  	;mov	byte [FastOpenFlg],0
 18075                                  	;call	LCritDisk
 18076                                  	;JMP	short Clear_FastOpen
 18077                                  	;retn
 18078                                  
 18079                                  SHARE_OK:
 18080                                  	; MSDOS 3.3 & MSDOS 6.0
 18081 00002CC2 B80300                  	MOV	AX,3
 18082 00002CC5 C43E[9E05]              	LES	DI,[THISSFT]
 18083                                  ;if installed
 18084                                  	;call	JShare + 14 * 4
 18085 00002CC9 FF1E[C800]              	call	far [JShare+(14*4)]  ; 14 = ShSU
 18086                                  ;else
 18087                                  ;	Call	ShSU
 18088                                  ;endif
 18089 00002CCD E8A3E6                  	call	LCritDisk
 18090                                  	
 18091                                  	;FallThru Set_SFT_Mode
 18092                                  
 18093                                  ;----------------------------------------------------------------------------
 18094                                  ; Procedure Name : SET_SFT_MODE
 18095                                  ;
 18096                                  ; Finish SFT initialization for new reference. Set the correct mode.
 18097                                  ;
 18098                                  ;   Inputs:
 18099                                  ;	ThisSFT points to SFT
 18100                                  ;
 18101                                  ;   Outputs:
 18102                                  ;	Carry clear
 18103                                  ;   Registers modified: AX.
 18104                                  ;---------------------------------------------------------------------------
 18105                                  
 18106                                  ;hkn; called from create. DS already set up to DOSDATA.
 18107                                  
 18108                                  SET_SFT_MODE:
 18109 00002CD0 C43E[9E05]              	LES	DI,[THISSFT]
 18110 00002CD4 E8CC19                  	call	DEV_OPEN_SFT
 18111                                  	;test	word [es:di+2],8000h
 18112                                  	; 17/12/2022
 18113                                  	;test	byte [es:di+3],80h
 18114 00002CD7 26F6450380              	test	byte [ES:DI+SF_ENTRY.sf_mode+1],sf_isFCB>>8
 18115                                  	;TEST	word [ES:DI+SF_ENTRY.sf_mode],sf_isFCB ; Clears carry
 18116 00002CDC 7407                    	JZ	short Clear_FastOpen	; sf_mode correct (retz)
 18117 00002CDE A1[3003]                	MOV	AX,[CurrentPDB]
 18118                                  	;mov	[es:di+31h],ax
 18119 00002CE1 26894531                	MOV	[ES:DI+SF_ENTRY.sf_PID],AX ; For FCB sf_PID=PDB
 18120                                  
 18121                                  Clear_FastOpen:
 18122 00002CE5 C3                      	retn			       ;;;;; DOS 3.3
 18123                                  
 18124                                  ;----------------------------------------------------------------------------
 18125                                  ; Procedure Name : SHARE_ERROR
 18126                                  ;
 18127                                  ; Called on sharing violations. ES:DI points to SFT. AX has error code
 18128                                  ; If SFT is FCB or compatibility mode gens INT 24 error.
 18129                                  ; Returns carry set AX=error_sharing_violation if user says ignore (can't
 18130                                  ; really ignore). Carry clear if user wants a retry. ES, DI, DS preserved
 18131                                  ;---------------------------------------------------------------------------
 18132                                  
 18133                                  SHARE_ERROR:
 18134                                  	; 17/12/2022
 18135                                  	;test	byte [es:di+3],80h
 18136 00002CE6 26F6450380              	test	byte [ES:DI+SF_ENTRY.sf_mode+1],sf_isFCB>>8 ; 80h
 18137                                  	;TEST	word [ES:DI+SF_ENTRY.sf_mode],sf_isFCB ; 8000h
 18138 00002CEB 750C                    	JNZ	short _HARD_ERR
 18139 00002CED 268A4D02                	MOV	CL,[ES:DI+SF_ENTRY.sf_mode]
 18140 00002CF1 80E1F0                  	AND	CL,SHARING_MASK  ; 0F0h
 18141 00002CF4 80F900                  	CMP	CL,SHARING_COMPAT ; 0
 18142 00002CF7 7505                    	JNE	short _NO_HARD_ERR
 18143                                  _HARD_ERR:
 18144 00002CF9 E84F47                  	call	SHARE_VIOLATION
 18145                                  	;retnc				; User wants retry
 18146 00002CFC 73E7                    	jnc	short Clear_FastOpen
 18147                                  _NO_HARD_ERR:
 18148 00002CFE B82000                  	MOV	AX,error_sharing_violation  ; 20h
 18149 00002D01 F9                      	STC
 18150 00002D02 C3                      	retn
 18151                                  
 18152                                  ; MSDOS 6.0
 18153                                  ;----------------------------------------------------------------------------
 18154                                  ; Procedure Name : DO_SHARE_CHECK
 18155                                  ;
 18156                                  ; Input: THISDPB, WFP_Start, THISSFT set
 18157                                  ; Functions: check file sharing mode is valid
 18158                                  ; Output: carry set, error
 18159                                  ;	  carry clear, share ok
 18160                                  ;----------------------------------------------------------------------------
 18161                                  
 18162                                  	; 18/05/2019 - Retro DOS v4.0
 18163                                  DO_SHARE_CHECK:
 18164 00002D03 E852E6                  	call	ECritDisk		; enter critical section
 18165                                  OPN_RETRY:
 18166 00002D06 8B0E[1A00]              	MOV	CX,[RetryCount]		; Get # tries to do
 18167                                  OpenShareRetry:
 18168 00002D0A 51                      	push	cx			; Save number left to do
 18169 00002D0B E83847                  	call	SHARE_CHECK		; Final Check
 18170 00002D0E 59                      	pop	cx			; CX = # left
 18171 00002D0F 730E                    	JNC	short Share_Ok2		; No problem with access
 18172 00002D11 E83AE5                  	call	Idle
 18173 00002D14 E2F4                    	LOOP	OpenShareRetry		; One more retry used up
 18174                                  OpenShareFail:
 18175 00002D16 C43E[9E05]              	LES	DI,[THISSFT]
 18176 00002D1A E8C9FF                  	call	SHARE_ERROR
 18177 00002D1D 73E7                    	JNC	short OPN_RETRY		; User wants more retry
 18178                                  Share_Ok2:
 18179                                  	;call	LCritDisk		; leave critical section
 18180                                  	;retn
 18181                                  	; 18/12/2022
 18182 00002D1F E951E6                  	jmp	LCritDisk
 18183                                  
 18184                                  ;-----------------------------------------------------------------------------
 18185                                  ; Procedure Name : Check_Access
 18186                                  ;
 18187                                  ; Inputs:
 18188                                  ;	AX is mode
 18189                                  ;	  High NIBBLE of AL (Sharing Mode)
 18190                                  ;		sharing_compat	   file is opened in compatibility mode
 18191                                  ;		sharing_deny_none  file is opened Multi reader, Multi writer
 18192                                  ;		sharing_deny_read  file is opened Only reader, Multi writer
 18193                                  ;		sharing_deny_write file is opened Multi reader, Only writer
 18194                                  ;		sharing_deny_both  file is opened Only reader, Only writer
 18195                                  ;	  Low NIBBLE of AL (Access Mode)
 18196                                  ;		open_for_read	file is opened for reading
 18197                                  ;		open_for_write	file is opened for writing
 18198                                  ;		open_for_both	file is opened for both reading and writing.
 18199                                  ; Function:
 18200                                  ;	Check this access mode for correctness
 18201                                  ; Outputs:
 18202                                  ;	[open_access] = AL input
 18203                                  ;	Carry Clear
 18204                                  ;		Mode is correct
 18205                                  ;		AX unchanged
 18206                                  ;	Carry Set
 18207                                  ;		Mode is bad
 18208                                  ;		AX = error_invalid_access
 18209                                  ; No other registers effected
 18210                                  ;----------------------------------------------------------------------------
 18211                                  
 18212                                  Check_Access_AX:
 18213 00002D22 A2[6E05]                	MOV	[OPEN_ACCESS],AL
 18214 00002D25 53                      	PUSH	BX
 18215                                  
 18216                                  ;	If sharing, then test for special sharing mode for FCBs
 18217                                  
 18218 00002D26 88C3                    	MOV	BL,AL
 18219 00002D28 80E3F0                  	AND	BL,SHARING_MASK ; 0F0h
 18220 00002D2B 803E[7205]FF            	CMP	byte [FSHARING],-1
 18221 00002D30 7505                    	JNZ	short CheckShareMode	; not through server call, must be ok
 18222 00002D32 80FB70                  	CMP	BL,SHARING_NET_FCB
 18223 00002D35 7405                    	JZ	short CheckAccessMode	; yes, we have an FCB
 18224                                  CheckShareMode:
 18225 00002D37 80FB40                  	CMP	BL,40h			; is this a good sharing mode?
 18226 00002D3A 770D                    	JA	short Make_Bad_Access
 18227                                  CheckAccessMode:
 18228 00002D3C 88C3                    	MOV	BL,AL
 18229 00002D3E 80E30F                  	AND	BL,access_mask
 18230 00002D41 80FB02                  	CMP	BL,2
 18231 00002D44 7703                    	JA	short Make_Bad_Access
 18232 00002D46 5B                      	POP	BX
 18233 00002D47 F8                      	CLC
 18234 00002D48 C3                      	retn
 18235                                  
 18236                                  Make_Bad_Access:
 18237 00002D49 B80C00                  	MOV	AX,error_invalid_access ; 0Ch
 18238 00002D4C 5B                      	POP	BX
 18239 00002D4D F9                      	STC
 18240 00002D4E C3                      	retn
 18241                                  
 18242                                  ;============================================================================
 18243                                  ; DINFO.ASM, MSDOS 6.0, 1991
 18244                                  ;============================================================================
 18245                                  ; 08/08/2018 - Retro DOS v3.0
 18246                                  ; 18/05/2019 - Retro DOS v4.0
 18247                                  
 18248                                  ;**	Low level routine for returning disk drive information from a local
 18249                                  ;	  or NET device
 18250                                  ;
 18251                                  ;	DISK_INFO
 18252                                  ;
 18253                                  ;	  Modification history:
 18254                                  ;
 18255                                  ;		Created: ARR 30 March 1983
 18256                                  
 18257                                  ;	Break	<DISK_INFO -- Get Disk Drive Information>
 18258                                  ;---------------------------------------------------------------------------
 18259                                  ; Procedure Name : DISK_INFO
 18260                                  ;
 18261                                  ; Inputs:
 18262                                  ;	[THISCDS] Points to the Macro List Structure of interest
 18263                                  ;		(It MAY NOT be NUL, error not detected)
 18264                                  ; Function:
 18265                                  ;	Get Interesting Drive Information
 18266                                  ; Returns:
 18267                                  ;	DX = Number of free allocation units
 18268                                  ;	BX = Total Number of allocation units on disk
 18269                                  ;	CX = Sector size
 18270                                  ;	AL = Sectors per allocation unit
 18271                                  ;	AH = FAT ID BYTE
 18272                                  ;	Carry set if error (currently user FAILed to I 24)
 18273                                  ; Segs except ES preserved, others destroyed
 18274                                  ;----------------------------------------------------------------------------
 18275                                  
 18276                                  ;hkn; called from getset.asm and misc.asm. DS has already been set up to 
 18277                                  ;hkn; DOSDATA. 
 18278                                  
 18279                                  DISK_INFO:
 18280                                  	; 08/08/2018 - Retro DOS v3.0
 18281                                  	; IBM DOS.COM (MSDOS 3.3, 1987) - Offset 37C5h
 18282                                  
 18283 00002D4F E841E5                  	call	TestNet
 18284 00002D52 7306                    	JNC	short LOCAL_DSK_INFO
 18285                                  
 18286                                  ;IF NOT Installed
 18287                                  ;	transfer NET_DISK_INFO
 18288                                  ;ELSE
 18289                                  	;MOV	AX,(MultNET SHL 8) OR 12
 18290                                  	;INT	2FH
 18291                                  	;return
 18292                                  
 18293 00002D54 B80C11                  	mov     ax,110Ch
 18294 00002D57 CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - GET DISK SPACE
 18295                                  			; ES:DI -> current directory
 18296                                  			; Return: AL = sectors per cluster, BX = total clusters
 18297                                  			; CX = bytes per sector, DX = number of available clusters
 18298 00002D59 C3                      	retn
 18299                                  ;ENDIF
 18300                                  
 18301                                  LOCAL_DSK_INFO:
 18302 00002D5A C606[2303]02            	MOV	byte [EXTERR_LOCUS],errLOC_Disk
 18303 00002D5F E8F6E5                  	call	ECritDisk
 18304 00002D62 E86C2A                  	call	FATREAD_CDS		; perform media check.
 18305 00002D65 7241                    	JC	short CRIT_LEAVE
 18306 00002D67 BB0200                  	MOV	BX,2
 18307 00002D6A E8B228                  	call	UNPACK			; Get first FAT sector into CURBUF
 18308 00002D6D 7239                    	JC	short CRIT_LEAVE
 18309 00002D6F C536[E205]              	LDS	SI,[CURBUF]
 18310                                  	;mov	ah,[si+20]
 18311 00002D73 8A6414                  	MOV	AH,[SI+BUFINSIZ]	; get FAT ID BYTE
 18312                                  
 18313                                  ;hkn; SS is DOSDATA
 18314 00002D76 16                      	push	ss
 18315 00002D77 1F                      	pop	ds
 18316                                  	;mov	cx,[es:bp+0Dh]
 18317 00002D78 268B4E0D                	MOV	CX,[ES:BP+DPB.MAX_CLUSTER]
 18318                                  
 18319                                  ; Examine the current free count. If it indicates that we have an invalid
 18320                                  ; count, do the expensive calculation.
 18321                                  
 18322                                  	;mov	dx,[es:bp+1Fh]
 18323 00002D7C 268B561F                	MOV	DX,[ES:BP+DPB.FREE_CNT] ; get free count
 18324 00002D80 83FAFF                  	CMP	DX,-1			; is it valid?
 18325 00002D83 7404                    	JZ	short DoScan
 18326                                  
 18327                                  ; Check to see if it is in a reasonable range. If so, trust it and return.
 18328                                  ; Otherwise, we need to blast out an internal error message and then recompute
 18329                                  ; the count.
 18330                                  
 18331 00002D85 39CA                    	CMP	DX,CX			; is it in a reasonable range?
 18332 00002D87 7222                    	JB	short GotVal		; yes, trust it.
 18333                                  DoScan:
 18334 00002D89 31D2                    	XOR	DX,DX
 18335 00002D8B 49                      	DEC	CX
 18336                                  SCANFREE:
 18337 00002D8C E89028                  	call	UNPACK
 18338 00002D8F 7217                    	JC	short CRIT_LEAVE
 18339 00002D91 7501                    	JNZ	short NOTFREECLUS
 18340 00002D93 42                      	INC	DX			; A free one
 18341                                  NOTFREECLUS:
 18342 00002D94 43                      	INC	BX			; Next cluster
 18343 00002D95 E2F5                    	LOOP	SCANFREE
 18344 00002D97 4B                      	DEC	BX			; BX was next cluster. Convert to
 18345                                  ReturnVals:
 18346 00002D98 4B                      	DEC	BX			; count
 18347                                  	;mov	al,[es:bp+4]
 18348 00002D99 268A4604                	MOV	AL,[ES:BP+DPB.CLUSTER_MASK]
 18349 00002D9D FEC0                    	INC	AL			; Sectors/cluster
 18350                                  	;mov	cx,[es:bp+2]
 18351 00002D9F 268B4E02                	MOV	CX,[ES:BP+DPB.SECTOR_SIZE] ; Bytes/sector
 18352                                  	;mov	[es:bp+1Fh],dx
 18353 00002DA3 2689561F                	MOV	[ES:BP+DPB.FREE_CNT],DX
 18354 00002DA7 F8                      	CLC
 18355                                  CRIT_LEAVE:
 18356                                  	;call	LCritDisk
 18357                                  	;retn
 18358                                  	; 17/12/2022
 18359 00002DA8 E9C8E5                  	jmp	LCritDisk
 18360                                  
 18361                                  ; We have correctly computed everything previously. Load up registers for
 18362                                  ; return.
 18363                                  
 18364                                  GotVal: 
 18365 00002DAB 89CB                    	MOV	BX,CX			; get cluster count
 18366 00002DAD EBE9                    	JMP	short ReturnVals
 18367                                  
 18368                                  ;============================================================================
 18369                                  ; ISEARCH.ASM, MSDOS 6.0, 1991
 18370                                  ;============================================================================
 18371                                  ; 22/07/2018 - Retro DOS v3.0
 18372                                  
 18373                                  ;	TITLE	DOS_SEARCH - Internal SEARCH calls for MS-DOS
 18374                                  ;	NAME	DOS_SEARCH
 18375                                  
 18376                                  ;**	Low level routines for doing local and NET directory searches
 18377                                  ;
 18378                                  ;	DOS_SEARCH_FIRST
 18379                                  ;	DOS_SEARCH_NEXT
 18380                                  ;	RENAME_NEXT
 18381                                  ;
 18382                                  ;	Revision history:
 18383                                  ;
 18384                                  ;	    Created: ARR 30 March 1983
 18385                                  ;	    A000	version 4.00  Jan. 1988
 18386                                  ;	    A001	PTM 3564 -- search for fastopen
 18387                                  
 18388                                  ;Installed = TRUE
 18389                                  
 18390                                  ;--------------------------------------------------------------------------
 18391                                  ;
 18392                                  ; Procedure Name : DOS_SEARCH_FIRST
 18393                                  ;
 18394                                  ; Inputs:
 18395                                  ;	[WFP_START] Points to WFP string ("d:/" must be first 3 chars, NUL
 18396                                  ;		terminated)
 18397                                  ;	[CURR_DIR_END] Points to end of Current dir part of string
 18398                                  ;		( = -1 if current dir not involved, else
 18399                                  ;		 Points to first char after last "/" of current dir part)
 18400                                  ;	[THISCDS] Points to CDS being used
 18401                                  ;		(Low word = -1 if NUL CDS (Net direct request))
 18402                                  ;	[SATTRIB] Is attribute of search, determines what files can be found
 18403                                  ;	[DMAADD] Points to 53 byte buffer
 18404                                  ; Function:
 18405                                  ;	Initiate a search for the given file spec
 18406                                  ; Outputs:
 18407                                  ;	CARRY CLEAR
 18408                                  ;	    The 53 bytes ot DMAADD are filled in as follows:
 18409                                  ;
 18410                                  ;	LOCAL
 18411                                  ;	    Drive Byte (A=1, B=2, ...) High bit clear
 18412                                  ;		NEVER STORE DRIVE BYTE AFTER  found_it
 18413                                  ;	    11 byte search name with Meta chars in it
 18414                                  ;	    Search Attribute Byte, attribute of search
 18415                                  ;	    WORD LastEnt value
 18416                                  ;	    WORD DirStart
 18417                                  ;	    4 byte pad
 18418                                  ;	    32 bytes of the directory entry found
 18419                                  ;	NET
 18420                                  ;	    21 bytes First byte has high bit set
 18421                                  ;	    32 bytes of the directory entry found
 18422                                  ;
 18423                                  ;	CARRY SET
 18424                                  ;	    AX = error code
 18425                                  ;		error_no_more_files
 18426                                  ;			No match for this file
 18427                                  ;		error_path_not_found
 18428                                  ;			Bad path (not in curr dir part if present)
 18429                                  ;		error_bad_curr_dir
 18430                                  ;			Bad path in current directory part of path
 18431                                  ; DS preserved, others destroyed
 18432                                  ;---------------------------------------------------------------------------
 18433                                  
 18434                                  	; 14/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 18435                                  	; DOSCODE:6C22h (MSDOS 5.0, MSDOS.SYS)
 18436                                  
 18437                                  DOS_SEARCH_FIRST:
 18438                                  	; IBMDOS.COM (MSDOS 3.3 kernel) - Offset 3826h
 18439                                  
 18440 00002DAF C43E[A205]              	LES	DI,[THISCDS]
 18441 00002DB3 83FFFF                  	CMP	DI,-1
 18442 00002DB6 7506                    	JNZ	short TEST_RE_NET2
 18443                                  
 18444                                  ;IF NOT Installed
 18445                                  ;	transfer NET_SEQ_SEARCH_FIRST
 18446                                  ;ELSE
 18447                                  	;mov	ax,1119h
 18448 00002DB8 B81911                  	MOV	AX,(MultNET<<8)|25
 18449 00002DBB CD2F                    	INT	2Fh
 18450 00002DBD C3                      	retn
 18451                                  ;ENDIF
 18452                                  
 18453                                  TEST_RE_NET2:
 18454                                  	;test	word [es:di+43h],8000h
 18455                                  	; 17/12/2022
 18456                                  	;test	byte [es:di+44h],80h
 18457                                  	; 28/12/2022
 18458 00002DBE 26F6454480              	test	byte [ES:DI+curdir.flags+1],curdir_isnet>>8	
 18459                                  	;TEST	word [ES:DI+curdir.flags],curdir_isnet
 18460 00002DC3 7406                    	JZ	short LOCAL_SEARCH_FIRST
 18461                                  
 18462                                  ;IF NOT Installed
 18463                                  ;	transfer NET_SEARCH_FIRST
 18464                                  ;ELSE
 18465                                  	;mov	ax,111Bh
 18466 00002DC5 B81B11                  	MOV	AX,(MultNET<<8)|27
 18467 00002DC8 CD2F                    	INT	2FH
 18468 00002DCA C3                      	retn
 18469                                  ;ENDIF
 18470                                  	; 18/05/2019 - Retro DOS v4.0
 18471                                  LOCAL_SEARCH_FIRST:
 18472 00002DCB E88AE5                  	call	ECritDisk
 18473                                  	; MSDOS 6.0
 18474                                  	;;test	word [DOS34_FLAG],400h
 18475                                  	; 17/12/2022
 18476                                  	;test	byte [DOS34_FLAG+1],04h
 18477 00002DCE F606[1206]04            	test	byte [DOS34_FLAG+1],(SEARCH_FASTOPEN>>8)
 18478                                  	;TEST	word [DOS34_FLAG],SEARCH_FASTOPEN ;AN000;
 18479 00002DD3 7405                    	JZ	short NOFN			;AN000;
 18480                                  	;or	byte [FastOpenFlg],1
 18481 00002DD5 800E[3A0D]01            	OR	byte [FastOpenFlg],FastOpen_Set	;AN000;
 18482                                  NOFN:						;AN000;
 18483 00002DDA C606[4C03]01            	MOV	byte [NoSetDir],1	; if we find a dir, don't change to it
 18484                                  	; MSDOS 6.0
 18485 00002DDF E84101                  	CALL	CHECK_QUESTION		;AN000;;FO. is '?' in path
 18486 00002DE2 7305                    	JNC	short norm_GETPATH	;AN000;;FO. no
 18487                                  	;and	byte [FastOpenFlg],80h
 18488 00002DE4 8026[3A0D]80            	AND	byte [FastOpenFlg],Fast_yes ;AN000;;FO. reset fastopen
 18489                                  norm_GETPATH:
 18490 00002DE9 E8DE11                  	call	GETPATH
 18491                                  	; BX = offset NAME1
 18492                                  ;_getdone:
 18493 00002DEC 7318                    	JNC	short find_check_dev
 18494 00002DEE 7511                    	JNZ	short bad_path3
 18495 00002DF0 08C9                    	OR	CL,CL
 18496 00002DF2 740D                    	JZ	short bad_path3
 18497                                  find_no_more:
 18498                                  	;mov	ax,12h
 18499 00002DF4 B81200                  	MOV	AX,error_no_more_files
 18500                                  BadBye:
 18501                                  	; MSDOS 6.0
 18502 00002DF7 368026[3A0D]80          	AND	byte [SS:FastOpenFlg],Fast_yes  ;AN000;;FO. reset fastopen
 18503                                  
 18504 00002DFD F9                      	STC
 18505                                  	;call	LCritDisk
 18506                                  	;retn
 18507                                  	; 18/12/2022
 18508 00002DFE E972E5                  	jmp	LCritDisk
 18509                                  
 18510                                  bad_path3:
 18511                                  	;mov	ax,3
 18512 00002E01 B80300                  	MOV	AX,error_path_not_found
 18513 00002E04 EBF1                    	JMP	short BadBye
 18514                                  
 18515                                  find_check_dev:
 18516 00002E06 08E4                    	OR	AH,AH
 18517 00002E08 790A                    	JNS	short found_entry
 18518 00002E0A C706[4803]FFFF          	MOV	word [LASTENT],-1	; Cause DOS_SEARCH_NEXT to fail
 18519 00002E10 FE06[7005]              	INC	byte [FOUND_DEV]	; Tell DOS_RENAME we found a device
 18520                                  found_entry:
 18521                                  
 18522                                  ; We set the physical drive byte here Instead of after found_it; Doing
 18523                                  ; a search-next may not have wfp_start set correctly
 18524                                  
 18525 00002E14 C43E[2C03]              	LES	DI,[DMAADD]
 18526 00002E18 8B36[B205]              	MOV	SI,[WFP_START]		; get pointer to beginning
 18527 00002E1C AC                      	LODSB
 18528 00002E1D 2C40                    	SUB	AL,'A'-1                ; logical drive
 18529 00002E1F AA                      	STOSB				; High bit not set (local)
 18530                                  found_it:
 18531 00002E20 C43E[2C03]              	LES	DI,[DMAADD]
 18532 00002E24 47                      	INC	DI
 18533                                  
 18534                                  	; MSDOS 6.0
 18535 00002E25 1E                      	PUSH	DS				  ;FO.;AN001; save ds
 18536                                  	;test	byte [FastOpenFlg],10h
 18537 00002E26 F606[3A0D]10            	TEST	byte [FastOpenFlg],Set_For_Search ;FO.;AN001; from fastopen
 18538 00002E2B 7408                    	JZ	short notfast			  ;FO.;AN001;
 18539 00002E2D 89DE                    	MOV	SI,BX				  ;FO.;AN001;
 18540 00002E2F 8E1E[E405]              	MOV	DS,[CURBUF+2]			  ;FO.;AN001;
 18541 00002E33 EB03                    	JMP	SHORT movmov			  ;FO.;AN001;
 18542                                  
 18543                                  notfast:
 18544 00002E35 BE[4B05]                	MOV	SI,NAME1		; find_buf 2 = formatted name
 18545                                  movmov:
 18546                                  ; Special E5 code
 18547 00002E38 A4                      	MOVSB
 18548 00002E39 26807DFF05              	CMP	BYTE [ES:DI-1],5
 18549 00002E3E 7505                    	JNZ	short NOTKANJB
 18550 00002E40 26C645FFE5              	MOV	BYTE [ES:DI-1],0E5H
 18551                                  NOTKANJB:
 18552 00002E45 B90A00                  	MOV	CX,10
 18553 00002E48 F3A4                    	REP	MOVSB
 18554                                  
 18555                                  	; 08/09/2018
 18556 00002E4A 1F                      	POP	DS			;FO.;AN001; restore ds
 18557                                  
 18558 00002E4B A0[6B05]                	MOV	AL,[ATTRIB]
 18559 00002E4E AA                      	STOSB
 18560 00002E4F 50                      	PUSH	AX			; Save AH device info
 18561 00002E50 A1[4803]                	MOV	AX,[LASTENT]
 18562 00002E53 AB                      	STOSW
 18563 00002E54 A1[C205]                	MOV	AX,[DIRSTART]
 18564 00002E57 AB                      	STOSW
 18565                                  ; 4 bytes of 21 byte cont structure left for NET stuff
 18566 00002E58 83C704                  	ADD	DI,4
 18567 00002E5B 58                      	POP	AX			; Recover AH device info
 18568 00002E5C 08E4                    	OR	AH,AH
 18569 00002E5E 781B                    	JS	short DOSREL		; Device entry is DOSGROUP relative
 18570 00002E60 833E[E205]FF            	CMP	WORD [CURBUF],-1
 18571 00002E65 7510                    	JNZ	short OKSTORE
 18572                                  
 18573                                  	; MSDOS 6.0
 18574 00002E67 F606[3A0D]10            	TEST	byte [FastOpenFlg],Set_For_Search
 18575                                  					;AN000;;FO. from fastopen and is good
 18576 00002E6C 7509                    	JNZ	short OKSTORE		;AN000;;FO.
 18577                                  
 18578                                  	; The user has specified the root directory itself, rather than some
 18579                                  	; contents of it. We can't "find" that.
 18580                                  
 18581 00002E6E 26C745F8FFFF            	MOV	WORD [ES:DI-8],-1	; Cause DOS_SEARCH_NEXT to fail by
 18582                                  					;   stuffing a -1 at Lastent
 18583 00002E74 E97DFF                  	JMP	find_no_more
 18584                                  
 18585                                  OKSTORE:
 18586 00002E77 8E1E[E405]              	MOV	DS,[CURBUF+2]
 18587                                  DOSREL:
 18588                                  	; BX = offset NAME1 (from GETPATH)
 18589 00002E7B 89DE                    	MOV	SI,BX			; SI-> start of entry
 18590                                  
 18591                                  ; NOTE: DOS_RENAME depends on BX not being altered after this point
 18592                                  
 18593                                  	;mov	cx,32
 18594 00002E7D B92000                  	MOV	CX,dir_entry.size
 18595                                  ;;;;; 7/29/86
 18596 00002E80 89F8                    	MOV	AX,DI			; save the 1st byte addr
 18597 00002E82 F3A4                    	REP	MOVSB
 18598 00002E84 89C7                    	MOV	DI,AX			; restore 1st byte addr
 18599 00002E86 26803D05                	CMP	BYTE [ES:DI],05H	; special char check
 18600 00002E8A 7504                    	JNZ	short NO05
 18601 00002E8C 26C605E5                	MOV	BYTE [ES:DI],0E5H	; convert it back to E5
 18602                                  NO05:
 18603                                  
 18604                                  ;;;;; 7/29/86
 18605                                  
 18606                                  ;hkn; FastOpenflg is in DOSDATA use SS
 18607                                  	; 16/12/2022
 18608                                  	; 14/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 18609                                  	; MSDOS 6.0
 18610                                  	;AND	byte [SS:FastOpenFlg],Fast_yes ;AN000;;FO. reset fastopen
 18611                                  	; 18/05/2019 - Retro DOS v4.0
 18612 00002E90 16                      	push	ss
 18613 00002E91 1F                      	pop	ds
 18614                                  	; 16/12/2022
 18615 00002E92 8026[3A0D]80            	AND	byte [FastOpenFlg],Fast_yes
 18616                                  
 18617                                  ;hkn; SS is DOSDATA
 18618                                  	;push	ss
 18619                                  	;pop	ds
 18620 00002E97 F8                      	CLC
 18621                                  	;call	LCritDisk
 18622                                  	;retn
 18623                                  	; 16/12/2022
 18624 00002E98 E9D8E4                  	jmp	LCritDisk
 18625                                  
 18626                                  ;BREAK <DOS_SEARCH_NEXT - scan for subsequent matches>
 18627                                  ;----------------------------------------------------------------------------
 18628                                  ;
 18629                                  ; Procedure Name : DOS_SEARCH_NEXT
 18630                                  ;
 18631                                  ; Inputs:
 18632                                  ;	[DMAADD] Points to 53 byte buffer returned by DOS_SEARCH_FIRST
 18633                                  ;	    (only first 21 bytes must have valid information)
 18634                                  ; Function:
 18635                                  ;	Look for subsequent matches
 18636                                  ; Outputs:
 18637                                  ;	CARRY CLEAR
 18638                                  ;	    The 53 bytes at DMAADD are updated for next call
 18639                                  ;		(see DOS_SEARCH_FIRST)
 18640                                  ;	CARRY SET
 18641                                  ;	    AX = error code
 18642                                  ;		error_no_more_files
 18643                                  ;			No more files to find
 18644                                  ; DS preserved, others destroyed
 18645                                  ;---------------------------------------------------------------------------
 18646                                  
 18647                                  ;hkn; called from search.asm. DS already set up at this point.
 18648                                  
 18649                                  DOS_SEARCH_NEXT:
 18650 00002E9B C43E[2C03]              	LES	DI,[DMAADD]
 18651 00002E9F 268A05                  	MOV	AL,[ES:DI]
 18652 00002EA2 A880                    	TEST	AL,80H			; Test for NET
 18653 00002EA4 7406                    	JZ	short LOCAL_SEARCH_NEXT
 18654                                  ;IF NOT Installed
 18655                                  ;	transfer NET_SEARCH_NEXT
 18656                                  ;ELSE
 18657                                  	;mov	ax,111Ch
 18658 00002EA6 B81C11                  	MOV	AX,(MultNET<<8)|28
 18659 00002EA9 CD2F                    	INT	2FH  ; Multiplex - NETWORK REDIRECTOR - FINDNEXT
 18660                                  		     ; SS = DS = DOS CS, [DTA] = 21-byte findfirst search data
 18661                                  		     ; Return: CF set on error, AX = DOS error code
 18662                                  		     ; CF clear if successful
 18663 00002EAB C3                      	retn
 18664                                  ;ENDIF
 18665                                  
 18666                                  LOCAL_SEARCH_NEXT:
 18667                                  	;AL is drive A=1
 18668                                  	;mov	byte [EXTERR_LOCUS],2
 18669 00002EAC C606[2303]02            	MOV	byte [EXTERR_LOCUS],errLOC_Disk
 18670 00002EB1 E8A4E4                  	call	ECritDisk
 18671                                  
 18672                                  ;hkn; DummyCDS is in DOSDATA
 18673 00002EB4 C706[A205][F304]        	MOV     word [THISCDS],DUMMYCDS
 18674                                  ;hkn; Segment address is DOSDATA - use ds
 18675                                  ;hkn;	MOV     WORD [THISCDS+2],CS
 18676 00002EBA 8C1E[A405]              	mov	[THISCDS+2],DS
 18677                                  
 18678 00002EBE 0440                    	ADD	AL,'A'-1
 18679 00002EC0 E8133C                  	call	InitCDS
 18680                                  
 18681                                  ;	call	GETTHISDRV		; Set CDS pointer
 18682                                  
 18683 00002EC3 7236                    	JC	short No_files		; Bogus drive letter
 18684 00002EC5 C43E[A205]              	LES	DI,[THISCDS]		; Get CDS pointer
 18685                                  	;les	bp,[es:di+45h]
 18686 00002EC9 26C46D45                	LES	BP,[ES:DI+curdir.devptr] ; Get DPB pointer
 18687 00002ECD E870D7                  	call	GOTDPB			; [THISDPB] = ES:BP
 18688                                  
 18689                                  	 ;16/12/2022
 18690 00002ED0 268A4600                	mov	al,[ES:BP]
 18691                                  	; 14/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 18692                                  	;mov	AL,[ES:BP+DPB.DRIVE] ; mov al,[ES:BP+0]
 18693 00002ED4 A2[7605]                	mov	[THISDRV],AL
 18694                                  	;mov	word [CREATING],0E500h
 18695 00002ED7 C706[7E05]00E5          	MOV	WORD [CREATING],(DIRFREE*256)+0
 18696 00002EDD C606[4C03]01            	MOV	byte [NoSetDir],1	; if we find a dir, don't change to it
 18697 00002EE2 C536[2C03]              	LDS	SI,[DMAADD]
 18698 00002EE6 AC                      	LODSB				; Drive Byte
 18699                                  
 18700                                  	;entry	RENAME_NEXT		; Entry used by DOS_RENAME
 18701                                  RENAME_NEXT:
 18702                                  	;context ES
 18703 00002EE7 16                      	push	ss
 18704 00002EE8 07                      	pop	es			; THIS BLOWS ES:BP POINTER TO DPB
 18705                                  
 18706                                  ;hkn; NAME1 is in DOSDATA
 18707 00002EE9 BF[4B05]                	MOV	DI,NAME1
 18708                                  
 18709 00002EEC B90B00                  	MOV	CX,11
 18710 00002EEF F3A4                    	REP	MOVSB			; Search name
 18711 00002EF1 AC                      	LODSB				; Attribute
 18712                                  
 18713                                  ;hkn; SS override
 18714 00002EF2 36A2[6B05]              	MOV	[SS:ATTRIB],AL
 18715 00002EF6 AD                      	LODSW				; LastEnt
 18716 00002EF7 09C0                    	OR	AX,AX
 18717 00002EF9 7903                    	JNS	short cont_load
 18718                                  No_files:
 18719 00002EFB E9F6FE                  	JMP	find_no_more
 18720                                  
 18721                                  cont_load:
 18722 00002EFE 50                      	PUSH	AX			; Save LastEnt
 18723 00002EFF AD                      	LODSW				; DirStart
 18724 00002F00 89C3                    	MOV	BX,AX
 18725                                  
 18726                                  ;hkn; SS is DOSDATA
 18727                                  	;context DS
 18728 00002F02 16                      	push	ss
 18729 00002F03 1F                      	pop	ds
 18730 00002F04 C42E[8A05]              	LES	BP,[THISDPB]		; Recover ES:BP
 18731                                  	;invoke	SetDirSrch
 18732 00002F08 E85F10                  	call	SETDIRSRCH
 18733 00002F0B 7303                    	JNC	short SEARCH_GOON
 18734 00002F0D 58                      	POP	AX			; Clean stack
 18735 00002F0E EBEB                    	JMP	short No_files
 18736                                  
 18737                                  SEARCH_GOON:
 18738 00002F10 E85413                  	call	STARTSRCH
 18739 00002F13 58                      	POP	AX
 18740 00002F14 E82410                  	call	GETENT
 18741 00002F17 72E2                    	JC	short No_files
 18742 00002F19 E8550F                  	call	NEXTENT
 18743 00002F1C 72DD                    	JC	short No_files
 18744 00002F1E 30E4                    	XOR	AH,AH			; If Search_Next, can't be a DEV
 18745 00002F20 E9FDFE                  	JMP	found_it ; 10/08/2018
 18746                                  
 18747                                  ; MSDOS 6.0
 18748                                  ;---------------------------------------------------------------------------
 18749                                  ;
 18750                                  ; Procedure Name : CHECK_QUESTION
 18751                                  ;
 18752                                  ; Input: [WFP_START]= pointer to final path
 18753                                  ; Function: check '?' char
 18754                                  ; Output: carry clear, if no '?'
 18755                                  ;	 carry set, if '?' exists
 18756                                  ;---------------------------------------------------------------------------
 18757                                  
 18758                                  	; 07/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 18759                                  CHECK_QUESTION:
 18760                                  ;hkn;	wfp_start is in DOSDATA;hkn;	MOV	WORD PTR ThisCDS+2,CS
 18761                                  ;hkn;	PUSH	CS			;AN000;;FO.
 18762 00002F23 16                      	push	ss
 18763 00002F24 1F                      	POP	DS			;AN000;;FO. ds:si -> final path
 18764                                  	; 16/12/2022
 18765                                  	; 07/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 18766 00002F25 8B36[B205]              	MOV	SI,[WFP_START]		;AN000;;FO.
 18767                                  	;mov	si,[ss:WFP_START]
 18768                                  getnext:				;AN000;
 18769 00002F29 AC                      	LODSB				;AN000;;FO. get char
 18770 00002F2A 08C0                    	OR	AL,AL			;AN000;;FO. is it null
 18771 00002F2C 7405                    	JZ	short NO_Question	;AN000;;FO. yes
 18772 00002F2E 3C3F                    	CMP	AL,'?'                  ;AN000;;FO. is '?'
 18773 00002F30 75F7                    	JNZ	short getnext 		;AN000;;FO. no
 18774 00002F32 F9                      	STC				;AN000;;FO.
 18775                                  NO_Question:				;AN000;
 18776 00002F33 C3                      	retn				;AN000;;FO.
 18777                                  
 18778                                  ;============================================================================
 18779                                  ; ABORT.ASM, MSDOS 6.0, 1991
 18780                                  ;============================================================================
 18781                                  ; 23/07/2018 - Retro DOS v3.0
 18782                                  ; 18/05/2019 - Retro DOS v4.0
 18783                                  
 18784                                  ;**
 18785                                  ;
 18786                                  ; Internal Abort call closes all handles and FCBs associated with a process.
 18787                                  ;  If process has NET resources a close all is sent out over the net.
 18788                                  ;
 18789                                  ;   DOS_ABORT
 18790                                  ;
 18791                                  ;   Modification history:
 18792                                  ;
 18793                                  ;       Created: ARR 30 March 1983
 18794                                  ;
 18795                                  ;	M038	SR	10/16/90	Free SFT with the PSP of the process
 18796                                  ;				being terminated only if it is busy.
 18797                                  ;
 18798                                  
 18799                                  ;Break   <DOS_ABORT -- CLOSE all files for process>
 18800                                  ;--------------------------------------------------------------------------
 18801                                  ;
 18802                                  ; Procedure Name : DOS_ABORT
 18803                                  ;
 18804                                  ; Inputs:
 18805                                  ;       [CurrentPDB] set to PID of process aborting
 18806                                  ; Function:
 18807                                  ;       Close all files and free all SFTs for this PID
 18808                                  ; Returns:
 18809                                  ;       None
 18810                                  ; All destroyed except stack
 18811                                  ;---------------------------------------------------------------------------
 18812                                  
 18813                                  DOS_ABORT:
 18814 00002F34 368E06[3003]            	MOV     ES,[SS:CurrentPDB]	; SS override
 18815 00002F39 268B0E3200              	MOV     CX,[ES:PDB.JFN_Length]  ; Number of JFNs
 18816                                  reset_free_jfn:
 18817 00002F3E 89CB                    	MOV     BX,CX
 18818 00002F40 51                      	PUSH    CX
 18819 00002F41 4B                      	DEC     BX                      ; get jfn (start with last one)
 18820                                  
 18821 00002F42 E8C538                  	CALL	_$CLOSE
 18822 00002F45 59                      	POP     CX
 18823 00002F46 E2F6                    	LOOP    reset_free_jfn          ; and do 'em all
 18824                                  
 18825                                  ; Note: We do need to explicitly close FCBs. Reasons are as follows: If we
 18826                                  ; are running in the no-sharing no-network environment, we are simulating the
 18827                                  ; 2.0 world and thus if the user doesn't close the file, that is his problem
 18828                                  ; BUT... the cache remains in a state with garbage that may be reused by the
 18829                                  ; next process. We scan the set and blast the ref counts of the FCBs we own.
 18830                                  ;
 18831                                  ; If sharing is loaded, then the following call to close process will
 18832                                  ; correctly close all FCBs. We will then need to walk the list AFTER here.
 18833                                  ;
 18834                                  ; Finally, the following call to NET_Abort will cause an EOP to be sent to all
 18835                                  ; known network resources. These resources are then responsible for cleaning
 18836                                  ; up after this process.
 18837                                  ;
 18838                                  ; Sleazy, eh?
 18839                                  
 18840                                  	;context DS			; SS is DOSDATA
 18841 00002F48 16                      	push	ss
 18842 00002F49 1F                      	pop	ds  ; 09/09/2018
 18843                                  
 18844                                  	;CallInstall Net_Abort, MultNET, 29
 18845 00002F4A B81D11                  	mov	ax, 111Dh
 18846 00002F4D CD2F                    	int     2Fh 	; Multiplex - NETWORK REDIRECTOR 
 18847                                  			;	    - CLOSE ALL REMOTE FILES FOR PROCESS
 18848                                  			; DS???, SS = DOS CS
 18849                                  ;if installed
 18850 00002F4F FF1E[A000]              	call	far [JShare+(4*4)]	; 4 = MFTCloseP
 18851                                  ;else
 18852                                  ;	call 	MFTCloseP
 18853                                  ;endif
 18854                                  
 18855                                  ; Scan the FCB cache for guys that belong to this process and zap their ref
 18856                                  ; counts.
 18857                                  					; SS override
 18858 00002F53 36C43E[4000]            	les     di,[ss:SFTFCB]		; grab the pointer to the table
 18859                                  	;mov	cx,[es:di+4]
 18860 00002F58 268B4D04                	mov     cx,[es:di+SFT.SFCount]
 18861 00002F5C E317                    	jcxz    FCBScanDone
 18862                                  	;lea	di,[di+6]
 18863 00002F5E 8D7D06                  	LEA     DI,[DI+SFT.SFTable]	; point at table
 18864 00002F61 36A1[3C03]              	mov     ax,[SS:PROC_ID]		; SS override
 18865                                  FCBTest:
 18866                                  	;cmp	[es:di+31h],ax
 18867 00002F65 26394531                	cmp	[es:di+SF_ENTRY.sf_PID],ax ; is this one of ours
 18868 00002F69 7505                    	jnz	short FCBNext		; no, skip it
 18869 00002F6B 26C7050000              	mov	word [es:di],0
 18870                                  	;mov	word [es:di+SF_ENTRY.sf_ref_count],0  ; yes, blast ref count
 18871                                  FCBNext:
 18872 00002F70 83C73B                  	add     di,SF_ENTRY.size ; 59 (for MSDOS 6.0)
 18873 00002F73 E2F0                    	loop    FCBTest
 18874                                  FCBScanDone:
 18875                                  
 18876                                  ; Walk the SFT to eliminate all busy SFT's for this process.
 18877                                  
 18878 00002F75 31DB                    	XOR     BX,BX
 18879                                  Scan:
 18880 00002F77 53                      	push    bx
 18881 00002F78 E80A38                  	call	SFFromSFN
 18882 00002F7B 5B                      	pop     bx
 18883                                  	;jnc	short Scan1
 18884                                  	;retn
 18885                                  	; 18/12/2022
 18886 00002F7C 72B5                    	jc	short NO_Question ; retn
 18887                                  
 18888                                  ;M038
 18889                                  ; Do what the comment above says, check for busy state
 18890                                  
 18891                                  Scan1:
 18892                                  	;cmp	word [es:di],0
 18893                                  	;jz	short scan_next  ; MSDOS 3.3
 18894                                  	; MSDOS 6.0
 18895 00002F7E 26833DFF                	cmp	word [es:di],sf_busy ; -1
 18896                                  	;cmp	word [es:di+SF_ENTRY.sf_ref_count],sf_busy
 18897                                  				; Is Sft busy? ;M038
 18898 00002F82 7519                    	jnz	short scan_next
 18899                                  ;
 18900                                  ; we have a SFT that is busy. See if it is for the current process
 18901                                  ;
 18902 00002F84 36A1[3C03]              	mov     ax,[SS:PROC_ID]		; SS override
 18903                                  	;cmp	[es:di+31h],ax
 18904 00002F88 26394531                	cmp	[es:di+SF_ENTRY.sf_PID],ax
 18905 00002F8C 750F                    	jnz	short scan_next
 18906 00002F8E 36A1[3E03]              	mov     ax,[SS:USER_ID]		; SS override
 18907                                  	;cmp	[es:di+2Fh],ax
 18908 00002F92 2639452F                	cmp	[es:di+SF_ENTRY.sf_UID],ax
 18909 00002F96 7505                    	jnz	short scan_next
 18910                                  
 18911                                  ; This SFT is labelled as ours.
 18912                                  
 18913 00002F98 26C7050000              	mov	word [es:di],0
 18914                                  	;mov	word [es:di+SF_ENTRY.sf_ref_count],0
 18915                                  scan_next:
 18916 00002F9D 43                      	inc     bx
 18917 00002F9E EBD7                    	jmp     short Scan
 18918                                  
 18919                                  ;============================================================================
 18920                                  ; CLOSE.ASM, MSDOS 6.0, 1991
 18921                                  ;============================================================================
 18922                                  ; 23/07/2018 - Retro DOS v3.0
 18923                                  ; 18/05/2019 - Retro DOS v4.0
 18924                                  
 18925                                  ;**	Internal Close and Commit calls to close a local or NET SFT.
 18926                                  ;
 18927                                  ;	DOS_CLOSE
 18928                                  ;	DOS_COMMIT
 18929                                  ;	FREE_SFT
 18930                                  ;	SetSFTTimes
 18931                                  ;
 18932                                  ;	Revision history:
 18933                                  ;
 18934                                  ;	   AN000  version 4.00	Jan. 1988
 18935                                  ;	   A005   PTM 3718 --- lost clusters when fastopen installed
 18936                                  ;	   A011   PTM 4766 --- C2 fastopen problem
 18937                                  
 18938                                  ;Installed = TRUE
 18939                                  
 18940                                  ;Break <DOS_CLOSE -- CLOSE FILE from SFT>
 18941                                  ;---------------------------------------------------------------------------
 18942                                  ;
 18943                                  ; Procedure Name : DOS_CLOSE
 18944                                  ;
 18945                                  ; Inputs:
 18946                                  ;	[THISSFT] set to the SFT for the file being used
 18947                                  ; Function:
 18948                                  ;	Close the indicated file via the SFT
 18949                                  ; Returns:
 18950                                  ;	sf_ref_count decremented otherwise
 18951                                  ;	ES:DI point to SFT
 18952                                  ;	Carry set if error
 18953                                  ;	    AX has error code
 18954                                  ; DS preserved, others destroyed
 18955                                  ;---------------------------------------------------------------------------
 18956                                  
 18957                                  ;hkn; DOS_CLOSE called from fcbio.asm and handle.asm. DS alreday set up.
 18958                                  
 18959                                  ; 18/05/2019 - Retro DOS v4.0
 18960                                  ; DOSCODE:6E2Eh (MSDOS 6.21, MSDOS.SYS)
 18961                                  
 18962                                  ; 14/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 18963                                  ; DOSCODE:6E1Ah (MSDOS 5.0, MSDOS.SYS)
 18964                                  
 18965                                  ; 23/07/2018 - IBMDOS.COM (MSDOS 3.3), 1987 - Offset 39D0h
 18966                                  
 18967                                  DOS_CLOSE:
 18968 00002FA0 C43E[9E05]              	LES	DI,[THISSFT]
 18969                                  	;mov	bx,[ES:DI+5]
 18970 00002FA4 268B5D05                	MOV	BX,[ES:DI+SF_ENTRY.sf_flags]
 18971                                  
 18972                                  ; Network closes are handled entirely by the net code.
 18973                                  
 18974                                  	;;test	bx,8000h
 18975                                  	;TEST	BX,sf_isnet
 18976                                  	; 17/12/2022
 18977                                  	;test	bh,80h
 18978 00002FA8 F6C780                  	test	bh,(sf_isnet>>8)
 18979 00002FAB 7406                    	JZ	short LocalClose
 18980                                  
 18981                                  	;CallInstall Net_Close,MultNET,6
 18982 00002FAD B80611                  	mov     ax,1106h
 18983 00002FB0 CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - CLOSE REMOTE FILE
 18984                                  			; ES:DI -> SFT
 18985                                  			; SFT DPB field -> DPB of drive containing file
 18986                                  			; Return: CF set on error, AX = DOS error code
 18987                                  			; CF clear if successful
 18988 00002FB2 C3                      	retn
 18989                                  
 18990                                  ; All closes release the sharing information.
 18991                                  ; No commit releases sharing information
 18992                                  ;
 18993                                  ; All closes decrement the ref count.
 18994                                  ; No commit decrements the ref count.
 18995                                  
 18996                                  LocalClose:
 18997 00002FB3 E8A2E3                  	call	ECritDisk
 18998 00002FB6 E86B01                  	CALL	SetSFTTimes
 18999 00002FB9 E8E200                  	CALL	FREE_SFT		; dec ref count or mark as busy
 19000                                  
 19001                                  ;hkn; SS is DOSDATA
 19002                                  	;Context DS
 19003 00002FBC 16                      	push	ss
 19004 00002FBD 1F                      	pop	ds
 19005                                  
 19006 00002FBE 50                      	push	ax
 19007 00002FBF 53                      	push	bx
 19008 00002FC0 E8AE44                  	call	ShareEnd
 19009 00002FC3 5B                      	pop	bx
 19010 00002FC4 58                      	pop	ax
 19011                                  
 19012                                  ; Commit enters here. AX from commit MUST be <> 1, BX is flags word
 19013                                  
 19014                                  CloseEntry:
 19015 00002FC5 50                      	PUSH	AX
 19016                                  
 19017                                  ; File clean or device does not get stamped nor disk looked at.
 19018                                  
 19019                                  	;test	bx,0C0h
 19020                                  	; 17/12/2022
 19021 00002FC6 F6C3C0                  	test	bl,devid_file_clean+devid_device
 19022                                  	;TEST	BX,devid_file_clean+devid_device
 19023 00002FC9 7403                    	JZ	short rdir
 19024                                  	; 14/11/2022
 19025 00002FCB E9BD00                  	JMP	FREE_SFT_OK		; either clean or device
 19026                                  	;jnz	short FREE_SFT_OK ; 24/07/2019	
 19027                                  
 19028                                  ; Retrieve the directory entry for the file
 19029                                  
 19030                                  rdir:
 19031 00002FCE E8DA00                  	CALL	DirFromSFT
 19032                                  	;mov	al,5
 19033 00002FD1 B005                    	MOV	AL,error_access_denied
 19034 00002FD3 7303                    	JNC	short clook
 19035                                  	; 14/11/2022
 19036 00002FD5 E9B400                  	JMP	CloseFinish		; pretend the close worked.
 19037                                  	;jc	short CloseFinish ; 24/07/2019
 19038                                  clook:
 19039                                  
 19040                                  ; ES:DI points to entry
 19041                                  ; DS:SI points to SFT
 19042                                  ; ES:BX points to buffer header
 19043                                  
 19044 00002FD8 57                      	push	di
 19045 00002FD9 56                      	push	si
 19046                                  	;lea	si,[si+20h]
 19047 00002FDA 8D7420                  	LEA	SI,[SI+SF_ENTRY.sf_name]
 19048                                  
 19049                                  ; ES:DI point to directory entry
 19050                                  ; DS:SI point to unpacked name
 19051                                  
 19052 00002FDD E867E2                  	call	XCHGP
 19053                                  
 19054                                  ; ES:DI point to unpacked name
 19055                                  ; DS:SI point to directory entry
 19056                                  
 19057 00002FE0 E8EC0E                  	call	MetaCompare
 19058 00002FE3 E861E2                  	call	XCHGP
 19059 00002FE6 5E                      	pop	si
 19060 00002FE7 5F                      	pop	di
 19061 00002FE8 740C                    	JZ	short CLOSE_GO		; Name OK
 19062                                  Bye:	
 19063 00002FEA 89F7                    	MOV	DI,SI
 19064 00002FEC 1E                      	PUSH	DS
 19065 00002FED 07                      	POP	ES			; ES:DI points to SFT
 19066 00002FEE 16                      	PUSH	SS
 19067 00002FEF 1F                      	POP	DS
 19068 00002FF0 F9                      	STC
 19069                                  	;mov	al,2
 19070 00002FF1 B002                    	MOV	AL,error_file_not_found
 19071 00002FF3 E99600                  	JMP	CloseFinish ; 24/07/2019
 19072                                  
 19073                                  	; 18/05/2019 - Retro DOS v4.0
 19074                                  CLOSE_GO:
 19075                                  	; MSDOS 6.0
 19076                                  	;test	word [si+2],8000h
 19077                                  	;TEST	word [SI+SF_ENTRY.sf_mode],sf_isFCB ; FCB ?
 19078                                  	; 17/12/2022
 19079                                  	;test	byte [si+3],80h
 19080 00002FF6 F6440380                	test	byte [SI+SF_ENTRY.sf_mode+1],(sf_isFCB>>8) ; FCB ?
 19081 00002FFA 740D                    	JZ	short nofcb		; no, set dir attr, sf_attr
 19082                                  	; MSDOS 3.3 & MSDOS 6.0
 19083                                  	;mov	ch,[es:di+0Bh]
 19084 00002FFC 268A6D0B                	MOV	CH,[ES:DI+dir_entry.dir_attr]
 19085                                  	;mov	al,[si+4]
 19086 00003000 8A4404                  	MOV	AL,[SI+SF_ENTRY.sf_attr]
 19087                                  
 19088                                  ;hkn; SS override
 19089 00003003 36A2[6B05]              	MOV	[SS:ATTRIB],AL
 19090                                  	; MSDOS 3.3
 19091                                  	;;call	MatchAttributes
 19092                                  	;;JNZ	short Bye		; attributes do not match
 19093                                  	; 18/05/2019
 19094 00003007 EB07                    	JMP	SHORT setattr		;FT.
 19095                                  nofcb:
 19096                                  	; MSDOS 6.0
 19097                                  	;mov	al,[si+4]
 19098 00003009 8A4404                  	MOV	AL,[SI+SF_ENTRY.sf_attr] ;FT.		;AN000;
 19099 0000300C 2688450B                	MOV	[ES:DI+dir_entry.dir_attr],AL ;FT.	;AN000;
 19100                                  setattr:
 19101                                  	; MSDOS 3.3 (& MSDOS 6.0)
 19102                                  	;or	byte [es:di+0Bh],20h
 19103 00003010 26804D0B20              	OR	BYTE [ES:DI+dir_entry.dir_attr],attr_archive ;Set archive
 19104                                  	; MSDOS 6.0
 19105                                  	;mov	ax,[es:di+1Ah]
 19106 00003015 268B451A                	MOV	AX,[ES:DI+dir_entry.dir_first] ;AN011
 19107                                  					;F.O. save old first cluster
 19108                                  ;hkn; SS override
 19109 00003019 36A3[BD0F]              	MOV	[SS:OLD_FIRSTCLUS],AX	;AN011;F.O. save old first cluster
 19110                                  
 19111                                  	;mov	ax,[si+0Bh]
 19112 0000301D 8B440B                  	MOV	AX,[SI+SF_ENTRY.sf_firclus]
 19113                                  	;mov	[es:di+1Ah],ax
 19114 00003020 2689451A                	MOV	[ES:DI+dir_entry.dir_first],AX	;Set firclus pointer
 19115                                  	;mov	ax,[si+11h]
 19116 00003024 8B4411                  	MOV	AX,[SI+SF_ENTRY.sf_size]
 19117                                  	;mov	[es:di+1Ch],ax
 19118 00003027 2689451C                	MOV	[ES:DI+dir_entry.dir_size_l],AX	;Set size
 19119                                  	;mov	ax,[si+13h]
 19120 0000302B 8B4413                  	MOV	AX,[SI+SF_ENTRY.sf_size+2]
 19121                                  	;mov	[es:di+1Eh],ax
 19122 0000302E 2689451E                	MOV	[ES:DI+dir_entry.dir_size_h],AX
 19123                                  	;mov	ax,[si+0Fh]
 19124 00003032 8B440F                  	MOV	AX,[SI+SF_ENTRY.sf_date]
 19125                                  	;mov	[es:di+18h],ax
 19126 00003035 26894518                	MOV	[ES:DI+dir_entry.dir_date],AX	;Set date
 19127                                  	;mov	ax,[si+0Dh]
 19128 00003039 8B440D                  	MOV	AX,[SI+SF_ENTRY.sf_time]
 19129                                  	;mov	[es:di+16h],ax
 19130 0000303C 26894516                	MOV	[ES:DI+dir_entry.dir_time],AX	;Set time
 19131                                  
 19132                                  	; MSDOS 6.0
 19133                                  ;; File Tagging
 19134 00003040 26F6470540              	TEST	byte [ES:BX+BUFFINFO.buf_flags],buf_dirty  
 19135                                  				  ;LB. if already dirty		    ;AN000;
 19136 00003045 7508                    	JNZ	short yesdirty4	  ;LB.  don't increment dirty count ;AN000;
 19137                                  	; 02/06/2019
 19138 00003047 E8FD2B                  	call	INC_DIRTY_COUNT   ;LB.				    ;AN000;
 19139                                  	; MSDOS 3.3 (& MSDOS 6.0)
 19140                                  	;or	byte [es:bx+5],40h
 19141 0000304A 26804F0540              	OR	byte [ES:BX+BUFFINFO.buf_flags],buf_dirty ;Buffer dirty
 19142                                  yesdirty4:
 19143 0000304F 1E                      	push	ds
 19144 00003050 56                      	push	si
 19145                                  	; MSDOS 6.0
 19146                                  	;mov	cx,[si+0Bh]
 19147                                  	; 07/12/2022
 19148 00003051 8B4C0B                  	MOV	CX,[SI+SF_ENTRY.sf_firclus] ; do this for Fastopen
 19149                                  ;hkn; SS override
 19150 00003054 36A0[7605]              	MOV	AL,[SS:THISDRV]
 19151                                  	; MSDOS 3.3 
 19152                                  	;push	ss
 19153                                  	;pop	ds
 19154                                  	;MOV	AL,[THISDRV]
 19155                                  ;;; 10/1/86  update fastopen cache
 19156                                  	; MSDOS 3.3 & MSDOS 6.0
 19157 00003058 52                      	PUSH	DX
 19158 00003059 B400                    	MOV	AH,0			; dir entry update
 19159 0000305B 88C2                    	MOV	DL,AL			; drive number A=0, B=1,,,
 19160                                  	; MSDOS 6.0
 19161 0000305D 09C9                    	OR	CX,CX			;AN005; first cluster 0; may be truncated
 19162 0000305F 750D                    	JNZ	short do_update2	;AN005; no, do update
 19163 00003061 B403                    	MOV	AH,3			;AN005; do a delete cache entry
 19164                                  	;mov	di,[si+1Bh]
 19165 00003063 8B7C1B                  	MOV	DI,[SI+SF_ENTRY.sf_dirsec] ;AN005; cx:di = dir sector
 19166                                  	;mov	cx,[si+1Dh]
 19167 00003066 8B4C1D                  	MOV	CX,[SI+SF_ENTRY.sf_dirsec+2] ;AN005;
 19168                                  	;mov	dh,[si+1Fh]
 19169 00003069 8A741F                  	MOV	DH,[SI+SF_ENTRY.sf_dirpos] ;AN005; dh = dir pos
 19170 0000306C EB0E                    	JMP	SHORT do_update 	;AN011;F.O.
 19171                                  do_update2:				;AN011;F.O.
 19172                                  ;hkn; SS override fort OLD_FIRSTCLUS
 19173                                  	; 
 19174 0000306E 363B0E[BD0F]            	CMP	CX,[SS:OLD_FIRSTCLUS]	;AN011;F.O. same as old first clusetr?
 19175 00003073 7407                    	JZ	short do_update		;AN011;F.O. yes
 19176 00003075 B402                    	MOV	AH,2			;AN011;F.O. delete the old entry
 19177 00003077 368B0E[BD0F]            	MOV	CX,[SS:OLD_FIRSTCLUS]	;AN011;F.O.
 19178                                  do_update:				;AN005;
 19179                                  ;hkn; SS is DOSDATA
 19180                                  	;Context DS
 19181 0000307C 16                      	push	ss
 19182 0000307D 1F                      	pop	ds	
 19183                                  	; MSDOS 3.3 & MSDOS 6.0
 19184 0000307E E8E2F6                  	call	FastOpen_Update 	; invoke fastopen
 19185 00003081 5A                      	POP	DX
 19186                                  
 19187                                  ;;; 10/1/86  update fastopen cache
 19188 00003082 E8BA2A                  	call	FLUSHBUF		; flush all relevant buffers
 19189 00003085 5F                      	pop	di
 19190 00003086 07                      	pop	es
 19191                                  	;mov	al,5
 19192 00003087 B005                    	MOV	AL,error_access_denied
 19193 00003089 7201                    	JC	short CloseFinish
 19194                                  FREE_SFT_OK:
 19195 0000308B F8                      	CLC				; signal no error.
 19196                                  CloseFinish:
 19197                                  
 19198                                  ; Indicate to the device that the SFT is being closed.
 19199                                  
 19200                                  ;;;; 7/21/86
 19201 0000308C 9C                      	PUSHF				; save flag from DirFromSFT
 19202 0000308D E81B16                  	call	DEV_CLOSE_SFT
 19203 00003090 9D                      	POPF
 19204                                  ;;;; 7/21/86
 19205                                  ;
 19206                                  ; See if the ref count indicates that we have busied the SFT. If so, mark the
 19207                                  ; SFT as being free. Note that we do NOT need to be in critSFT as we are ONLY
 19208                                  ; going to be moving from busy to free.
 19209                                  ;
 19210 00003091 59                      	POP	CX			; get old ref count
 19211 00003092 9C                      	PUSHF
 19212 00003093 49                      	DEC	CX			; if cx != 1
 19213 00003094 7503                    	JNZ	short NoFree		; then do NOT free SFT
 19214 00003096 26890D                  	mov	[es:di],cx
 19215                                  	;MOV	[ES:DI+SF_ENTRY.sf_ref_Count],CX ; mov [es:di+0],cx
 19216                                  NoFree:
 19217 00003099 E8D7E2                  	call	LCritDisk
 19218 0000309C 9D                      	POPF
 19219 0000309D C3                      	retn
 19220                                  
 19221                                  ;---------------------------------------------------------------------------
 19222                                  ;
 19223                                  ; Procedure Name : FREE_SFT
 19224                                  ;
 19225                                  ; ES:DI -> SFT. Decs sft_ref_count. If the count goes to 0, mark it as busy.
 19226                                  ; Flags preserved. Return old ref count in AX
 19227                                  ;
 19228                                  ; Note that busy is indicated by the SFT ref count being -1.
 19229                                  ;
 19230                                  ;---------------------------------------------------------------------------
 19231                                  
 19232                                  FREE_SFT:
 19233 0000309E 9C                      	PUSHF		; Save carry state
 19234 0000309F 268B05                  	mov	ax,[es:di]
 19235                                  	;MOV	AX,[ES:DI+SF_ENTRY.sf_ref_count]
 19236 000030A2 48                      	DEC	AX
 19237 000030A3 7501                    	JNZ	short SetCount
 19238 000030A5 48                      	DEC	AX
 19239                                  SetCount:
 19240 000030A6 268705                  	xchg	ax,[es:di]
 19241                                  	;XCHG	AX,[ES:DI+SF_ENTRY.sf_ref_count]
 19242 000030A9 9D                      	POPF
 19243 000030AA C3                      	retn
 19244                                  
 19245                                  	; 18/05/2019 - Retro DOS v4.0
 19246                                  
 19247                                  ;----------------------------------------------------------------------------
 19248                                  ;
 19249                                  ; Procedure Name : DirFromSFT
 19250                                  ;
 19251                                  ;   DirFromSFT - locate a directory entry given an SFT.
 19252                                  ;
 19253                                  ;   Inputs:	ES:DI point to SFT
 19254                                  ;		DS = DOSDATA
 19255                                  ;   Outputs:
 19256                                  ;		EXTERR_LOCUS = errLOC_Disk
 19257                                  ;		CurBuf points to buffer
 19258                                  ;		Carry Clear -> operation OK
 19259                                  ;		    ES:DI point to entry
 19260                                  ;		    ES:BX point to buffer
 19261                                  ;		    DS:SI point to SFT
 19262                                  ;		Carry SET   -> operation failed
 19263                                  ;		    registers trashified
 19264                                  ;   Registers modified: ALL
 19265                                  ;----------------------------------------------------------------------------
 19266                                  
 19267                                  DirFromSFT:
 19268                                  	;mov	byte [EXTERR_LOCUS],2
 19269 000030AB C606[2303]02            	MOV	byte [EXTERR_LOCUS],errLOC_Disk
 19270 000030B0 06                      	push	es
 19271 000030B1 57                      	push	di
 19272                                  	; MSDOS 3.3
 19273                                  	;;mov	dx,[es:di+1Dh]
 19274                                  	;MOV	dx,[ES:DI+SF_ENTRY.sf_dirsec]
 19275                                  	; MSDOS 6.0
 19276                                  	;mov	dx,[es:[di+1Dh]
 19277 000030B2 268B551D                	MOV	DX,[ES:DI+SF_ENTRY.sf_dirsec+2]  ;F.C. >32mb
 19278 000030B6 8916[0706]              	MOV	[HIGH_SECTOR],DX		 ;F.C. >32mb
 19279                                  	;mov	dx,[es:di+1Bh]
 19280 000030BA 268B551B                	MOV	DX,[ES:DI+SF_ENTRY.sf_dirsec]
 19281                                  	; 19/05/2019
 19282 000030BE FF36[0706]              	PUSH	word [HIGH_SECTOR]	;F.C. >32mb
 19283                                  	; MSDOS 3.3 & MSDOS 6.0
 19284 000030C2 52                      	PUSH	DX
 19285 000030C3 E8FB26                  	call	FATREAD_SFT		; ES:BP points to DPB, [THISDRV] set
 19286                                  					; [THISDPB] set
 19287 000030C6 5A                      	POP	DX
 19288 000030C7 8F06[0706]              	POP	word [HIGH_SECTOR]	;F.C. >32mb
 19289 000030CB 7225                    	JC	short PopDone
 19290 000030CD 30C0                    	XOR	AL,AL			; Pre read
 19291                                  	;mov	byte [ALLOWED],18h
 19292 000030CF C606[4B03]18            	MOV	byte [ALLOWED],Allowed_FAIL+Allowed_RETRY
 19293 000030D4 E86A29                  	call	GETBUFFR
 19294 000030D7 7219                    	JC	short PopDone
 19295 000030D9 5E                      	pop	si
 19296 000030DA 1F                      	pop	ds			; Get back SFT pointer
 19297                                  
 19298                                  ;hkn; SS override
 19299 000030DB 36C43E[E205]            	LES	DI,[SS:CURBUF]
 19300                                  	;or	byte [es:di+5],4
 19301 000030E0 26804D0504              	OR	byte [ES:DI+BUFFINFO.buf_flags],buf_isDIR
 19302 000030E5 89FB                    	MOV	BX,DI			; ES:BX point to buffer header
 19303                                  	;;lea	di,[di+16] ; MSDOS 3.3
 19304                                  	;lea	di,[di+20] ; MSDOS 6.0
 19305 000030E7 8D7D14                  	LEA	DI,[DI+BUFINSIZ] 	; Point to buffer
 19306                                  	;mov	al,32
 19307 000030EA B020                    	MOV	AL,dir_entry.size
 19308                                  	;mul	byte [si+1Fh] ; MSDOS 6.0
 19309 000030EC F6641F                  	MUL	byte [SI+SF_ENTRY.sf_dirpos]
 19310 000030EF 01C7                    	ADD	DI,AX			; Point at the entry
 19311 000030F1 C3                      	retn				; carry is clear
 19312                                  PopDone:
 19313 000030F2 5F                      	pop	di
 19314 000030F3 07                      	pop	es
 19315                                  PopDone_retn:
 19316 000030F4 C3                      	retn
 19317                                  
 19318                                  ;----------------------------------------------------------------------------
 19319                                  ;
 19320                                  ;**	DOS_Commit - UPdate Directory Entries
 19321                                  ;
 19322                                  ;	ENTRY	same as DOS_CLOSE (??? BUGBUG - update this jgl)
 19323                                  ;		(DS) = DOSGROUP
 19324                                  ;	EXIT	Same as DOS_CLOSE except ref_count field is not altered
 19325                                  ;	USES	all but DS
 19326                                  ;
 19327                                  ;----------------------------------------------------------------------------
 19328                                  
 19329                                  ; 14/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 19330                                  ; DOSCODE:6F72h (MSDOS 5.0, MSDOS.SYS)
 19331                                  
 19332                                  DOS_COMMIT:
 19333                                  	;hkn; called from srvcall. DS already set up.
 19334 000030F5 C43E[9E05]              	LES	DI,[THISSFT]
 19335                                  	;mov	bx,[es:di+5]
 19336 000030F9 268B5D05                	MOV	BX,[ES:DI+SF_ENTRY.sf_flags]
 19337                                  	;test	bx,0C0h
 19338                                  	; 17/12/2022
 19339 000030FD F6C3C0                  	test	bl,devid_file_clean+devid_device ;Clears carry
 19340                                  	;TEST	BX,devid_file_clean+devid_device ;Clears carry
 19341 00003100 75F2                    	jnz	short PopDone_retn
 19342                                  	;test	bx,8000h
 19343                                  	; 17/12/2022
 19344                                  	;test	bh,80h
 19345 00003102 F6C780                  	test	bh,(sf_isnet>>8) ; 80h
 19346                                  	;TEST	BX,sf_isnet ; 8000h
 19347 00003105 7406                    	JZ	short LOCAL_COMMIT
 19348                                  
 19349                                  ;IF NOT Installed
 19350                                  ;	transfer NET_COMMIT
 19351                                  ;ELSE
 19352                                  	;mov	ax,1107h
 19353 00003107 B80711                  	MOV	AX,(MultNET<<8)|7
 19354 0000310A CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - COMMIT REMOTE FILE
 19355                                  			; ES:DI -> SFT
 19356                                  			; SFT DPB field -> DPB of drive containing file
 19357                                  			; Return: CF set on error, AX = DOS error code
 19358                                  			; CF clear if successful
 19359                                  localcommit_retn: ; 18/12/2022	
 19360 0000310C C3                      	retn
 19361                                  ;ENDIF
 19362                                  
 19363                                  ; Perform local commit operation by doing a close but not releaseing the SFT.
 19364                                  ; There are three ways we can do this. One is to enter a critical section to
 19365                                  ; protect a potential free. The second is to increment the ref count to mask
 19366                                  ; the close decrementing.
 19367                                  ;
 19368                                  ; The proper way is to let the caller's of close decide if a decrement should
 19369                                  ; be done. We do this by providing another entry into close after the
 19370                                  ; decrement and after the share information release.
 19371                                  
 19372                                  ; DOSCODE:6FA0h (MSDOS 6.21, MSDOS.SYS)
 19373                                  ; DOSCODE:6F8Ch (MSDOS 5.0, MSDOS.SYS) 
 19374                                  
 19375                                  LOCAL_COMMIT:
 19376 0000310D E848E2                  	call	ECritDisk
 19377                                  	; MSDOS 6.0
 19378 00003110 E845E2                  	call	ECritDisk	;PTM.
 19379 00003113 E80E00                  	call	SetSFTTimes
 19380 00003116 B8FFFF                  	MOV	AX,-1
 19381 00003119 E8A9FE                  	call	CloseEntry
 19382                                  	; MSDOS 6.0
 19383 0000311C 9C                      	PUSHF			;PTM.				;AN000;
 19384 0000311D E88315                  	call	DEV_OPEN_SFT	;PTM.  increment device count	;AN000;
 19385 00003120 9D                      	POPF			;PTM.				;AN000;
 19386                                  	;call	LCritDisk	;PTM.				;AN000;
 19387                                  	; 18/12/2022
 19388 00003121 E94FE2                  	jmp	LCritDisk
 19389                                  ;localcommit_retn:
 19390                                  ;	retn
 19391                                  
 19392                                  ;Break	<SetSFTTimes - signal a change in the times for an SFT>
 19393                                  ;----------------------------------------------------------------------------
 19394                                  ;
 19395                                  ; Procedure Name : SetSFTTimes
 19396                                  ;
 19397                                  ;   SetSFTTimes - Examine the flags for a SFT and set the time appropriately.
 19398                                  ;   Reflect these times in other SFT's for the same file.
 19399                                  ;
 19400                                  ;   Inputs:	ES:DI point to SFT
 19401                                  ;		BX = sf_flags set apprpriately
 19402                                  ;   Outputs:	Set sft times to current time if File & dirty & !nodate
 19403                                  ;   Registers modified: All except ES:DI, BX, AX
 19404                                  ;
 19405                                  ;----------------------------------------------------------------------------
 19406                                  
 19407                                  SetSFTTimes:
 19408                                  ;	File clean or device does not get stamped nor disk looked at.
 19409                                  	
 19410                                  	;test	bx,0C0h
 19411                                  	; 17/12/2022
 19412 00003124 F6C3C0                  	test	bl,devid_file_clean+devid_device
 19413                                  	;TEST	BX,devid_file_clean+devid_device
 19414                                  	;retnz				; clean or device => no timestamp
 19415 00003127 75E3                    	jnz	short localcommit_retn
 19416                                  
 19417                                  ;	file and dirty. See if date is good
 19418                                  
 19419                                  	;test	bx,4000h
 19420                                  	; 17/12/2022
 19421                                  	;test	bh,40h
 19422 00003129 F6C740                  	test	bh,(sf_close_nodate>>8)
 19423                                  	;TEST	BX,sf_close_nodate
 19424                                  	;retnz				; nodate => no timestamp
 19425 0000312C 75DE                    	jnz	short localcommit_retn
 19426                                  
 19427 0000312E 50                      	push	ax
 19428 0000312F 53                      	push	bx
 19429 00003130 E8DCD9                  	call	DATE16			; Date/Time to AX/DX
 19430                                  	;mov	[es:di+0Fh],ax
 19431 00003133 2689450F                	MOV	[ES:DI+SF_ENTRY.sf_date],AX
 19432                                  	;mov	[es:di+0Dh],dx
 19433 00003137 2689550D                	MOV	[ES:DI+SF_ENTRY.sf_time],DX
 19434 0000313B 31C0                    	XOR	AX,AX
 19435                                  ;if installed
 19436                                  	;call	JShare + 14 * 4
 19437 0000313D FF1E[C800]              	call	far [JShare+(14*4)]	; 14 = ShSU
 19438                                  ;else
 19439                                  ;	call	ShSU
 19440                                  ;endif
 19441 00003141 5B                      	pop	bx
 19442 00003142 58                      	pop	ax
 19443 00003143 C3                      	retn
 19444                                  
 19445                                  ;============================================================================
 19446                                  ; DIRCALL.ASM, MSDOS 6.0, 1991
 19447                                  ;============================================================================
 19448                                  ; 23/07/2018 - Retro DOS v3.0
 19449                                  ; 18/05/2019 - Retro DOS v4.0
 19450                                  
 19451                                  ; DOSCODE:6FDAh (MSDOS 6.21, MSDOS.SYS)
 19452                                  
 19453                                  ;TITLE DIRCALL - Directory manipulation internal calls
 19454                                  ;NAME  DIRCALL
 19455                                  
 19456                                  ;**	Low level directory manipulation routines for making removing and
 19457                                  ;	  verifying local or NET directories
 19458                                  ;
 19459                                  ;	DOS_MKDIR
 19460                                  ;	DOS_CHDIR
 19461                                  ;	DOS_RMDIR
 19462                                  ;
 19463                                  ;	Modification history:
 19464                                  ;
 19465                                  ;		Created: ARR 30 March 1983
 19466                                  
 19467                                  ;BREAK <DOS_MkDir - Make a directory entry>
 19468                                  ;---------------------------------------------------------------------------
 19469                                  ;
 19470                                  ; Procedure Name : DOS_MkDir
 19471                                  ;
 19472                                  ; Inputs:
 19473                                  ;	[WFP_START] Points to WFP string ("d:/" must be first 3 chars, NUL
 19474                                  ;		terminated)
 19475                                  ;	[CURR_DIR_END] Points to end of Current dir part of string
 19476                                  ;		( = -1 if current dir not involved, else
 19477                                  ;		 Points to first char after last "/" of current dir part)
 19478                                  ;	[THISCDS] Points to CDS being used
 19479                                  ;		(Low word = -1 if NUL CDS (Net direct request))
 19480                                  ; Function:
 19481                                  ;	Make a new directory
 19482                                  ; Returns:
 19483                                  ;	Carry Clear
 19484                                  ;		No error
 19485                                  ;	Carry Set
 19486                                  ;	    AX is error code
 19487                                  ;		error_path_not_found
 19488                                  ;			Bad path (not in curr dir part if present)
 19489                                  ;		error_bad_curr_dir
 19490                                  ;			Bad path in current directory part of path
 19491                                  ;		error_access_denied
 19492                                  ;			Already exists, device name
 19493                                  ; DS preserved, Others destroyed
 19494                                  ;---------------------------------------------------------------------------
 19495                                  
 19496                                  ;hkn; called from path.asm. DS already set up.
 19497                                  
 19498                                  ; 17/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 19499                                  ; DOSCODE:6FC6h (MSDOS 5.0, MSDOS.SYS)
 19500                                  
 19501                                  DOS_MKDIR:
 19502 00003144 E84CE1                  	call	TestNet
 19503 00003147 7313                    	JNC	short LOCAL_MKDIR
 19504                                  
 19505                                  ;IF NOT Installed
 19506                                  ;	transfer NET_MKDIR
 19507                                  ;ELSE
 19508                                  	;mov	ax,1103h
 19509 00003149 B80311                  	MOV	AX,(MultNET<<8)|3
 19510 0000314C CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - MAKE REMOTE DIRECTORY
 19511                                  			; SS = DOS CS
 19512                                  			; SDA first filename pointer -> fully-qualified directory name
 19513                                  			; SDA CDS pointer -> current directory
 19514                                  			; Return: CF set on error, AX = DOS error code
 19515                                  			; CF clear if successful
 19516 0000314E C3                      	retn
 19517                                  ;ENDIF
 19518                                  
 19519                                  NODEACCERRJ:
 19520                                  	;mov	ax,5
 19521 0000314F B80500                  	MOV	AX,error_access_denied
 19522                                  _BadRet:
 19523 00003152 F9                      	STC
 19524                                  	;call	LCritDisk
 19525                                  	;retn
 19526                                  	; 18/12/2022
 19527 00003153 E91DE2                  	jmp	LCritDisk
 19528                                  
 19529                                  PATHNFJ:
 19530 00003156 E81AE2                  	call	LCritDisk
 19531 00003159 E9E5F9                  	jmp	SET_MKND_ERR	; Map the MakeNode error and return
 19532                                  
 19533                                  LOCAL_MKDIR:
 19534 0000315C E8F9E1                  	call	ECritDisk
 19535                                  
 19536                                  ; MakeNode requires an SFT to fiddle with. We Use a temp spot (RENBUF)
 19537                                  
 19538 0000315F 8C16[A005]              	MOV	[THISSFT+2],SS
 19539                                  
 19540                                  ;hkn; DOSDATA
 19541 00003163 C706[9E05][3E04]        	MOV	WORD [THISSFT],RENBUF
 19542                                  
 19543                                  ;  NOTE: Need WORD PTR because MASM takes type of
 19544                                  ;   TempSFT (byte) instead of type of sf_mft (word).
 19545                                  
 19546                                  	;mov	word [RENBUF+33h],0 ; MSDOS 6.0
 19547 00003169 C706[7104]0000          	MOV	WORD [RENBUF+SF_ENTRY.sf_MFT],0
 19548                                  				; make sure SHARER won't complain.
 19549                                  	;mov	al,10h
 19550 0000316F B010                    	MOV	AL,attr_directory
 19551 00003171 E8E418                  	call	MakeNode
 19552 00003174 72E0                    	JC	short PATHNFJ
 19553 00003176 83F803                  	CMP	AX,3
 19554 00003179 74D4                    	JZ	short NODEACCERRJ ; Can't make a device into a directory
 19555 0000317B C42E[8A05]              	LES	BP,[THISDPB]	; Makenode zaps this
 19556 0000317F C53E[E205]              	LDS	DI,[CURBUF]
 19557 00003183 29FE                    	SUB	SI,DI
 19558 00003185 56                      	PUSH	SI		; Pointer to dir_first
 19559                                  	; MSDOS 6.0
 19560                                  	;push	word [DI+8]
 19561 00003186 FF7508                  	PUSH	WORD [DI+BUFFINFO.buf_sector+2]	;F.C. >32mb
 19562                                  	; MSDOS 3.3 & MSDOS 6.0
 19563                                  	;push	word [di+6]
 19564 00003189 FF7506                  	PUSH	WORD [DI+BUFFINFO.buf_sector] ; Sector of new node
 19565 0000318C 16                      	push	ss
 19566 0000318D 1F                      	pop	ds
 19567 0000318E FF36[C205]              	PUSH	word [DIRSTART]	; Parent for .. entry
 19568 00003192 31C0                    	XOR	AX,AX
 19569 00003194 A3[C205]                	MOV	[DIRSTART],AX	; Null directory
 19570 00003197 E8F117                  	call	NEWDIR
 19571 0000319A 7276                    	JC	short NODEEXISTSPOPDEL ; No room
 19572 0000319C E89C0D                  	call	GETENT		; First entry
 19573 0000319F 7271                    	JC	short NODEEXISTSPOPDEL ; Screw up
 19574 000031A1 C43E[E205]              	LES	DI,[CURBUF]
 19575                                  
 19576                                  	; MSDOS 6.0
 19577 000031A5 26F6450540              	TEST	byte [ES:DI+BUFFINFO.buf_flags],buf_dirty  
 19578                                  				 ;LB. if already dirty		    ;AN000;
 19579 000031AA 7508                    	JNZ	short yesdirty5	 ;LB.   don't increment dirty count ;AN000;
 19580 000031AC E8982A                  	call	INC_DIRTY_COUNT  ;LB.				    ;AN000;
 19581                                  	
 19582                                  	; MSDOS 3.3 & MSDOS 6.0
 19583                                  	;or	byte [es:di+5],40h  ; 07/12/2022
 19584 000031AF 26804D0540              	OR	byte [ES:DI+BUFFINFO.buf_flags],buf_dirty
 19585                                  yesdirty5:
 19586                                  	;;add	di,16 ; MSDOS 3.3
 19587                                  	;add	di,20 ; MSDOS 6.0
 19588 000031B4 83C714                  	ADD	DI,BUFINSIZ	; Point at buffer
 19589 000031B7 B82E20                  	MOV	AX,202EH	; ". "
 19590 000031BA 8B16[C205]              	MOV	DX,[DIRSTART]	; Point at itself
 19591 000031BE E87318                  	call	SETDOTENT
 19592 000031C1 B82E2E                  	MOV	AX,2E2EH	; ".."
 19593 000031C4 5A                      	POP	DX		; Parent
 19594 000031C5 E86C18                  	call	SETDOTENT
 19595 000031C8 C42E[8A05]              	LES	BP,[THISDPB]
 19596                                  	;mov	byte [ALLOWED],18h
 19597 000031CC C606[4B03]18            	MOV	byte [ALLOWED],Allowed_FAIL+Allowed_RETRY
 19598 000031D1 5A                      	POP	DX		; Entry sector
 19599                                  	; MSDOS 6.0
 19600 000031D2 8F06[0706]              	POP	word [HIGH_SECTOR] ;F.C. >32mb
 19601                                  
 19602 000031D6 30C0                    	XOR	AL,AL		; Pre read
 19603 000031D8 E86628                  	call	GETBUFFR
 19604 000031DB 7262                    	JC	short NODEEXISTSP
 19605 000031DD 8B16[C205]              	MOV	DX,[DIRSTART]
 19606 000031E1 C53E[E205]              	LDS	DI,[CURBUF]
 19607                                  	;or	byte [di+5],4
 19608 000031E5 804D0504                	OR	byte [DI+BUFFINFO.buf_flags],buf_isDIR
 19609 000031E9 5E                      	POP	SI		; dir_first pointer
 19610 000031EA 01FE                    	ADD	SI,DI
 19611 000031EC 8914                    	MOV	[SI],DX
 19612 000031EE 31D2                    	XOR	DX,DX
 19613 000031F0 895402                  	MOV	[SI+2],DX	; Zero size
 19614 000031F3 895404                  	MOV	[SI+4],DX
 19615                                  DIRUP:
 19616                                  	; MSDOS 6.0
 19617 000031F6 F6450540                	TEST	byte [DI+BUFFINFO.buf_flags],buf_dirty  
 19618                                  	;			 ;LB. if already dirty 		   ;AN000;
 19619 000031FA 7507                    	JNZ	short yesdirty6	 ;LB.  don't increment dirty count ;AN000;
 19620 000031FC E8482A                  	call	INC_DIRTY_COUNT  ;LB.				   ;AN000;
 19621                                  	
 19622                                  	; MSDOS 3.3 & MSDOS 6.0
 19623                                  	;or	byte [di+5],40h
 19624 000031FF 804D0540                	OR	byte [DI+BUFFINFO.buf_flags],buf_dirty	; Dirty buffer
 19625                                  yesdirty6:
 19626 00003203 16                      	push	ss
 19627 00003204 1F                      	pop	ds
 19628 00003205 268A4600                	mov	al,[es:bp]
 19629                                  	;MOV	AL,[ES:BP+DPB.DRIVE]  ; mov al,[es:bp+0]
 19630 00003209 E83329                  	call	FLUSHBUF
 19631                                  	;mov	ax,5
 19632 0000320C B80500                  	MOV	AX,error_access_denied
 19633                                  	;call	LCritDisk
 19634                                  	;retn
 19635                                  	; 18/12/2022
 19636 0000320F E961E1                  	jmp	LCritDisk
 19637                                  
 19638                                  NODEEXISTSPOPDEL:
 19639 00003212 5A                      	POP	DX		; Parent
 19640 00003213 5A                      	POP	DX		; Entry sector
 19641                                  	; MSDOS 6.0 
 19642 00003214 8F06[0706]              	POP	word [HIGH_SECTOR] ; F.C. >32mb
 19643 00003218 C42E[8A05]              	LES	BP,[THISDPB]
 19644                                  	;mov	byte [ALLOWED],18h
 19645 0000321C C606[4B03]18            	MOV	byte [ALLOWED],Allowed_FAIL+Allowed_RETRY
 19646 00003221 30C0                    	XOR	AL,AL		; Pre read
 19647 00003223 E81B28                  	call	GETBUFFR
 19648 00003226 7217                    	JC	short NODEEXISTSP
 19649 00003228 C53E[E205]              	LDS	DI,[CURBUF]
 19650                                  	;or	byte [di+5],4
 19651 0000322C 804D0504                	OR	byte [DI+BUFFINFO.buf_flags],buf_isDIR
 19652 00003230 5E                      	POP	SI		; dir_first pointer
 19653 00003231 01FE                    	ADD	SI,DI
 19654                                  	;sub	si,1Ah ; 26
 19655 00003233 83EE1A                  	SUB	SI,dir_entry.dir_first	;Point back to start of dir entry
 19656 00003236 C604E5                  	MOV	BYTE [SI],0E5H	; Free the entry
 19657 00003239 E8BAFF                  	CALL	DIRUP		; Error doesn't matter since erroring anyway
 19658                                  NODEEXISTS:
 19659 0000323C E910FF                  	JMP	NODEACCERRJ ; 10/08/2018
 19660                                  
 19661                                  NODEEXISTSP:
 19662 0000323F 5E                      	POP	SI		; Clean stack
 19663 00003240 EBFA                    	JMP	short NODEEXISTS
 19664                                  
 19665                                  ; 17/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 19666                                  
 19667                                  ;BREAK <DOS_ChDir -- Verify a directory>
 19668                                  ;----------------------------------------------------------------------------
 19669                                  ;
 19670                                  ; Procedure Name : DOS_ChDir
 19671                                  ;
 19672                                  ; Inputs:
 19673                                  ;	[WFP_START] Points to WFP string ("d:/" must be first 3 chars, NUL
 19674                                  ;		terminated)
 19675                                  ;	[CURR_DIR_END] Points to end of Current dir part of string
 19676                                  ;		( = -1 if current dir not involved, else
 19677                                  ;		 Points to first char after last "/" of current dir part)
 19678                                  ;	[THISCDS] Points to CDS being used May not be NUL
 19679                                  ; Function:
 19680                                  ;	Validate the path for potential new current directory
 19681                                  ; Returns:
 19682                                  ;	NOTE:
 19683                                  ;	    [SATTRIB] is modified by this call
 19684                                  ;	Carry Clear
 19685                                  ;	    CX is cluster number of the DIR, LOCAL CDS ONLY
 19686                                  ;		Caller must NOT set ID fields on a NET CDS.
 19687                                  ;	Carry Set
 19688                                  ;	    AX is error code
 19689                                  ;		error_path_not_found
 19690                                  ;			Bad path
 19691                                  ;		error_access_denied
 19692                                  ;			device or file name
 19693                                  ; DS preserved, Others destroyed
 19694                                  ;----------------------------------------------------------------------------
 19695                                  
 19696                                  ;hkn; called from path.asm and dir2.asm. DS already set up.
 19697                                  
 19698                                  ; 18/05/2019 - Retro DOS v4.0
 19699                                  ; DOSCODE:70DAh (MSDOS 6.21, MSDOS.SYS)
 19700                                  
 19701                                  ; 17/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 19702                                  ; DOSCODE:70C6h (MSDOS 5.0, MSDOS.SYS)
 19703                                  
 19704                                  DOS_CHDIR:
 19705 00003242 E84EE0                  	call	TestNet
 19706 00003245 7306                    	JNC	short LOCAL_CHDIR
 19707                                  
 19708                                  ;IF NOT Installed
 19709                                  ;	transfer NET_CHDIR
 19710                                  ;ELSE
 19711                                  	;mov	ax,1105h
 19712 00003247 B80511                  	MOV	AX,(MultNET<<8)|5
 19713 0000324A CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - CHDIR
 19714                                  			; SS = DOS CS
 19715                                  			; SDA first filename pointer -> fully-qualified directory name
 19716                                  			; SDA CDS pointer -> current directory
 19717                                  			; Return: CF set on error, AX = DOS error code
 19718                                  			; CF clear if successful
 19719 0000324C C3                      	retn
 19720                                  ;ENDIF
 19721                                  
 19722                                  LOCAL_CHDIR:
 19723 0000324D E808E1                  	call	ECritDisk
 19724                                  	; MSDOS 6.0
 19725                                  	;;test	word [es:di+43h],2000h
 19726                                  	;TEST	word [ES:DI+curdir.flags],curdir_splice ;PTM.
 19727                                  	; 17/12/2022
 19728                                  	;test	byte [es:di+44h],20h
 19729 00003250 26F6454420              	test	byte [ES:DI+curdir.flags+1],(curdir_splice>>8) ;PTM.
 19730 00003255 7406                    	JZ	short nojoin		   ;PTM.
 19731                                  	;mov	word [es:di+49h], 0FFFFh
 19732 00003257 26C74549FFFF            	MOV	word [ES:DI+curdir.ID],0FFFFH ;PTM.
 19733                                  nojoin:
 19734                                  	; MSDOS 3.3 & MSDOS 6.0
 19735 0000325D C606[4C03]00            	MOV	byte [NoSetDir],0 ; FALSE
 19736                                  	;mov	byte [SATTRIB],16h
 19737 00003262 C606[6D05]16            	MOV	byte [SATTRIB],attr_directory+attr_system+attr_hidden
 19738                                  				; Dir calls can find these
 19739                                  ; DOS 3.3  6/24/86 FastOpen
 19740 00003267 800E[3A0D]01            	OR	byte [FastOpenFlg],FastOpen_Set	; set fastopen flag
 19741 0000326C E85B0D                  	call	GETPATH
 19742 0000326F 9C                      	PUSHF						;AN000;
 19743 00003270 8026[3A0D]80            	AND	byte [FastOpenFlg],Fast_yes ; clear it all ;AC000;
 19744 00003275 9D                      	POPF						;AN000;
 19745                                  ; DOS 3.3  6/24/86 FastOpen
 19746                                  
 19747                                  	; MSDOS 3.3
 19748                                  	;mov	byte [FastOpenFlg],0
 19749                                  	
 19750                                  	;mov	ax,3
 19751 00003276 B80300                  	MOV	AX,error_path_not_found
 19752 00003279 7207                    	JC	short ChDirDone
 19753 0000327B 753A                    	JNZ	short NOTDIRPATH	; Path not a DIR
 19754 0000327D 8B0E[C205]              	MOV	CX,[DIRSTART]		; Get cluster number
 19755 00003281 F8                      	CLC
 19756                                  ChDirDone:
 19757                                  	;call	LCritDisk
 19758                                  	;retn
 19759                                  	; 18/12/2022
 19760 00003282 E9EEE0                  	jmp	LCritDisk
 19761                                  
 19762                                  ;BREAK <DOS_RmDir -- Remove a directory>
 19763                                  ;----------------------------------------------------------------------------
 19764                                  ;
 19765                                  ; Procedure Name : DOS_RmDir
 19766                                  ;
 19767                                  ; Inputs:
 19768                                  ;	[WFP_START] Points to WFP string ("d:/" must be first 3 chars, NUL
 19769                                  ;		terminated)
 19770                                  ;	[CURR_DIR_END] Points to end of Current dir part of string
 19771                                  ;		( = -1 if current dir not involved, else
 19772                                  ;		 Points to first char after last "/" of current dir part)
 19773                                  ;	[THISCDS] Points to CDS being used
 19774                                  ;		(Low word = -1 if NUL CDS (Net direct request))
 19775                                  ; Function:
 19776                                  ;	Remove a directory
 19777                                  ;	NOTE: Attempt to remove current directory must be detected by caller
 19778                                  ; Returns:
 19779                                  ;	NOTE:
 19780                                  ;	    [SATTRIB] is modified by this call
 19781                                  ;	Carry Clear
 19782                                  ;		No error
 19783                                  ;	Carry Set
 19784                                  ;	    AX is error code
 19785                                  ;		error_path_not_found
 19786                                  ;			Bad path (not in curr dir part if present)
 19787                                  ;		error_bad_curr_dir
 19788                                  ;			Bad path in current directory part of path
 19789                                  ;		error_access_denied
 19790                                  ;			device or file name, root directory
 19791                                  ;			Bad directory ('.' '..' messed up)
 19792                                  ; DS preserved, Others destroyed
 19793                                  ;----------------------------------------------------------------------------
 19794                                  
 19795                                  ;hkn; called from path.asm. DS already set up.
 19796                                  
 19797                                  ; 18/05/2019 - Retro DOS v4.0
 19798                                  ; DOSCODE:711Fh (MSDOS 6.21, MSDOS.SYS)
 19799                                  
 19800                                  ; 17/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 19801                                  ; DOSCODE:710Bh (MSDOS 5.0, MSDOS.SYS)
 19802                                  
 19803                                  DOS_RMDIR:
 19804 00003285 E80BE0                  	call	TestNet
 19805 00003288 7306                    	JNC	short LOCAL_RMDIR
 19806                                  
 19807                                  ;IF NOT Installed
 19808                                  ;	transfer NET_RMDIR
 19809                                  ;ELSE
 19810                                  	;mov	ax,1101h
 19811 0000328A B80111                  	MOV	AX,(MultNET<<8)|1
 19812 0000328D CD2F                    	int	2Fh	; Multiplex - NETWORK REDIRECTOR - REMOVE REMOTE DIRECTORY
 19813                                  			; SS = DOS CS
 19814                                  			; SDA first filename pointer -> fully-qualified directory name
 19815                                  			; SDA CDS pointer -> current directory
 19816                                  			; Return: CF set on error, AX = DOS error code
 19817                                  			; CF clear if successful
 19818 0000328F C3                      	retn
 19819                                  ;ENDIF
 19820                                  
 19821                                  LOCAL_RMDIR:
 19822 00003290 E8C5E0                  	call	ECritDisk
 19823 00003293 C606[4C03]00            	MOV	byte [NoSetDir],0
 19824                                  	;mov	byte [SATTRIB],16h
 19825 00003298 C606[6D05]16            	MOV	byte [SATTRIB],attr_directory+attr_system+attr_hidden
 19826                                  					; Dir calls can find these
 19827 0000329D E82A0D                  	call	GETPATH
 19828 000032A0 720C                    	JC	short NOPATH		; Path not found
 19829 000032A2 7513                    	JNZ	short NOTDIRPATH	; Path not a DIR
 19830 000032A4 8B3E[C205]              	MOV	DI,[DIRSTART]
 19831 000032A8 09FF                    	OR	DI,DI			; Root ?
 19832 000032AA 750E                    	JNZ	short rmdir_get_buf	; No
 19833 000032AC EB09                    	JMP	SHORT NOTDIRPATH
 19834                                  
 19835                                  NOPATH:
 19836                                  	;mov	ax,3
 19837 000032AE B80300                  	MOV	AX,error_path_not_found
 19838 000032B1 E99EFE                  	JMP	_BadRet
 19839                                  
 19840                                  NOTDIRPATHPOP:
 19841 000032B4 58                      	POP	AX  ; MSDOS 6.0		;F.C. >32mb
 19842 000032B5 58                      	POP	AX
 19843                                  NOTDIRPATHPOP2:
 19844 000032B6 58                      	POP	AX
 19845                                  NOTDIRPATH:
 19846 000032B7 E995FE                  	JMP	NODEACCERRJ
 19847                                  
 19848                                  rmdir_get_buf:
 19849 000032BA C53E[E205]              	LDS	DI,[CURBUF]
 19850 000032BE 29FB                    	SUB	BX,DI		; Compute true offset
 19851 000032C0 53                      	PUSH	BX		; Save entry pointer
 19852                                  	
 19853                                  	; MSDOS 6.0
 19854                                  	;push	word [di+8]
 19855 000032C1 FF7508                  	PUSH	WORD [DI+BUFFINFO.buf_sector+2] ;F.C. >32mb
 19856                                  	
 19857                                  	; MSDOS 3.3 (& MSDOS 6.0)
 19858                                  	;push	word [di+6]
 19859 000032C4 FF7506                  	PUSH	WORD [DI+BUFFINFO.buf_sector] ; Save sector number
 19860                                  
 19861                                  ;hkn; SS is DOSDATA
 19862                                  	;context DS
 19863 000032C7 16                      	push	ss
 19864 000032C8 1F                      	pop	ds
 19865                                  	;context ES
 19866 000032C9 16                      	push	ss
 19867 000032CA 07                      	pop	es
 19868                                  
 19869                                  ;hkn; NAME1 is in DOSDATA
 19870 000032CB BF[4B05]                	MOV	DI,NAME1
 19871 000032CE B03F                    	MOV	AL,'?'
 19872 000032D0 B90B00                  	MOV	CX,11
 19873 000032D3 F3AA                    	REP	STOSB
 19874 000032D5 30C0                    	XOR	AL,AL
 19875 000032D7 AA                      	STOSB				; Nul terminate it
 19876 000032D8 E88C0F                  	call	STARTSRCH		; Set search
 19877 000032DB E85A0C                  	call	GETENTRY		; Get start of directory
 19878 000032DE 72D4                    	JC	short NOTDIRPATHPOP	; Screw up
 19879 000032E0 8E1E[E405]              	MOV	DS,[CURBUF+2]
 19880 000032E4 89DE                    	MOV	SI,BX
 19881 000032E6 AD                      	LODSW
 19882                                  	;CMP	AX,(' ' SHL 8) OR '.'   ; First entry '.'?
 19883 000032E7 3D2E20                  	cmp	ax,202Eh ; ". "
 19884 000032EA 75C8                    	JNZ	short NOTDIRPATHPOP	; Nope
 19885                                  	;add	si,30
 19886 000032EC 83C61E                  	ADD	SI,dir_entry.size-2 ; Next entry
 19887 000032EF AD                      	LODSW
 19888                                  	;CMP	AX,('.' SHL 8) OR '.'   ; Second entry '..'?
 19889                                  	;cmp	ax, '..'
 19890 000032F0 3D2E2E                  	cmp	ax,2E2Eh
 19891 000032F3 75BF                    	JNZ	short NOTDIRPATHPOP	; Nope
 19892                                  
 19893                                  ;hkn; SS is DOSDATA
 19894                                  	;context DS
 19895 000032F5 16                      	push	ss
 19896 000032F6 1F                      	pop	ds
 19897 000032F7 C706[4803]0200          	MOV	word [LASTENT],2	; Skip . and ..
 19898 000032FD E8380C                  	call	GETENTRY		; Get next entry
 19899 00003300 72B2                    	JC	short NOTDIRPATHPOP	; Screw up
 19900                                  	;mov	byte [ATTRIB],16h
 19901 00003302 C606[6B05]16            	MOV	byte [ATTRIB],attr_directory+attr_hidden+attr_system
 19902 00003307 E82D0B                  	call	SRCH			; Do a search
 19903 0000330A 73A8                    	JNC	short NOTDIRPATHPOP	; Found another entry!
 19904 0000330C 803E[4A03]00            	CMP	byte [FAILERR],0
 19905 00003311 75A1                    	JNZ	short NOTDIRPATHPOP	; Failure of search due to I 24 FAIL
 19906 00003313 C42E[8A05]              	LES	BP,[THISDPB]
 19907 00003317 8B1E[C205]              	MOV	BX,[DIRSTART]
 19908 0000331B E87D1C                  	call	RELEASE 		; Release data in sub dir
 19909 0000331E 7294                    	JC	short NOTDIRPATHPOP	; Screw up
 19910 00003320 5A                      	POP	DX			; Sector # of entry
 19911 00003321 8F06[0706]              	POP	word [HIGH_SECTOR] ; MSDOS 6.0	; F.C. >32mb
 19912                                  	;mov	byte [ALLOWED],18h
 19913 00003325 C606[4B03]18            	MOV	byte [ALLOWED],Allowed_FAIL+Allowed_RETRY
 19914 0000332A 30C0                    	XOR	AL,AL			; Pre read
 19915 0000332C E81227                  	call	GETBUFFR		; Get sector back
 19916 0000332F 7285                    	JC	short NOTDIRPATHPOP2	; Screw up
 19917 00003331 C53E[E205]              	LDS	DI,[CURBUF]
 19918                                  	;or	byte [di+5],4
 19919 00003335 804D0504                	OR	byte [DI+BUFFINFO.buf_flags],buf_isDIR
 19920 00003339 5B                      	POP	BX			; Pointer to start of entry
 19921 0000333A 01FB                    	ADD	BX,DI			; Corrected
 19922 0000333C C607E5                  	MOV	BYTE [BX],0E5H		; Free the entry
 19923                                  
 19924                                  ;DOS 3.3 FastOpen  6/16/86  F.C.
 19925 0000333F 1E                      	PUSH	DS
 19926                                  
 19927                                  ;hkn; SS is DOSDATA
 19928                                  	;context DS
 19929 00003340 16                      	push	ss
 19930 00003341 1F                      	pop	ds
 19931                                  
 19932                                  	; MSDOS 6.0
 19933 00003342 E8EFF3                  	call	FastOpen_Delete 	; call fastopen to delete an entry
 19934                                  
 19935                                  ;	; MSDOS 3.3
 19936                                  ;_FastOpen_Delete:
 19937                                  ;	push	ax
 19938                                  ;	mov	si,[WFP_START]
 19939                                  ;	mov	bx,FastTable
 19940                                  ;	;mov	al,3  ; FONC_delete
 19941                                  ;	mov	al,FONC_delete
 19942                                  ;	call	far [BX+2]  ; FastTable+2
 19943                                  ;	pop	ax
 19944                                  
 19945 00003345 1F                      	POP	DS
 19946                                  ;DOS 3.3 FastOpen  6/16/86  F.C.
 19947                                  
 19948 00003346 E9ADFE                  	JMP	DIRUP			; In MKDIR, dirty buffer and flush
 19949                                  
 19950                                  ;============================================================================
 19951                                  ; DISK.ASM, MSDOS 6.0, 1991
 19952                                  ;============================================================================
 19953                                  ; 23/07/2018 - Retro DOS v3.0 
 19954                                  ; 04/05/2019 - Retro DOS v4.0
 19955                                  
 19956                                  ;	TITLE	DISK - Disk utility routines
 19957                                  ;	NAME	Disk
 19958                                  
 19959                                  ;**	Low level Read and write routines for local SFT I/O on files and devs
 19960                                  ;
 19961                                  ;	SWAPCON
 19962                                  ;	SWAPBACK
 19963                                  ;	DOS_READ
 19964                                  ;	DOS_WRITE
 19965                                  ;	get_io_sft
 19966                                  ;	DirRead
 19967                                  ;	FIRSTCLUSTER
 19968                                  ;	SET_BUF_AS_DIR
 19969                                  ;	FATSecRd
 19970                                  ;	DREAD
 19971                                  ;	CHECK_WRITE_LOCK
 19972                                  ;	CHECK_READ_LOCK
 19973                                  ;
 19974                                  ;	Revision history:
 19975                                  ;
 19976                                  ;		A000   version 4.00  Jan. 1988
 19977                                  ;
 19978                                  ;----------------------------------------------------------------------------
 19979                                  ;
 19980                                  ; M065 : B#5276. On raw read/write of a block of characters if a critical
 19981                                  ;		error happens, DOS retries the entire block assuming that
 19982                                  ;		zero characters were transferred. Modified the code to take
 19983                                  ;		into account the number of characters transfered before
 19984                                  ;		retrying the operation.
 19985                                  ;
 19986                                  ;----------------------------------------------------------------------------
 19987                                  ;
 19988                                  
 19989                                  ;Installed = TRUE
 19990                                  
 19991                                  ;Break	<SwapCon, Swap Back - Old-style I/O to files>
 19992                                  
 19993                                  ; **** Drivers for file input from devices ****
 19994                                  ;----------------------------------------------------------------------------
 19995                                  ;   Indicate that there is no more I/O occurring through another SFT outside
 19996                                  ;   of handles 0 and 1
 19997                                  ;
 19998                                  ;   Inputs:	DS is DOSDATA
 19999                                  ;   Outputs:	CONSWAP is set to false.
 20000                                  ;   Registers modified: none
 20001                                  ;----------------------------------------------------------------------------
 20002                                  
 20003                                  ; IBMDOS.COM (MSDOS 3.3) - Offset 3CF8h
 20004                                  
 20005                                  ; DOSCODE:71E3h (MSDOS 6.21, MSDOS.SYS)
 20006                                  ; 04/05/2019 - Retro DOS v4.0
 20007                                  
 20008                                  ; DOSCODE:71CFh (MSDOS 5.0, MSDOS.SYS)
 20009                                  ; 17/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 20010                                  
 20011                                  SWAPBACK:
 20012 00003349 C606[5703]00            	MOV	BYTE [CONSWAP],0	; signal no conswaps
 20013 0000334E C3                      	retn
 20014                                  
 20015                                  ;----------------------------------------------------------------------------
 20016                                  ;
 20017                                  ; Procedure Name : SWAPCON
 20018                                  ;
 20019                                  ;   Copy ThisSFT to CONSFT for use by the 1-12 primitives.
 20020                                  ;
 20021                                  ;   Inputs:	ThisSFT as the sft of the desired file
 20022                                  ;		DS is DOSDATA
 20023                                  ;   Outputs:	CONSWAP is set.  CONSFT = ThisSFT.
 20024                                  ;   Registers modified: none
 20025                                  ;--------------------------------------------------------------------------
 20026                                  
 20027                                  SWAPCON:
 20028                                  	; MSDOS 3.3
 20029                                  	;push	es
 20030                                  	;push	di
 20031                                  	;mov	byte [CONSWAP],1
 20032                                  	;les	di,[THISSFT]
 20033                                  	;mov	word [CONSFT],di
 20034                                  	;mov	word [CONSFT+2],es
 20035                                  	;pop	di
 20036                                  	;pop	es
 20037                                  	;retn
 20038                                  
 20039                                  	; MSDOS 6.0
 20040 0000334F C606[5703]01            	mov	byte [CONSWAP],1	; ConSwap = TRUE
 20041 00003354 50                      	push	ax
 20042 00003355 A1[9E05]                	mov	ax,[THISSFT]
 20043 00003358 A3[E605]                	mov	[CONSFT],ax
 20044 0000335B A1[A005]                	mov	ax,[THISSFT+2]
 20045 0000335E A3[E805]                	mov	[CONSFT+2],ax
 20046 00003361 58                      	pop	ax
 20047 00003362 C3                      	retn
 20048                                  
 20049                                  ; DOSCODE:71FDh (MSDOS 6.21, MSDOS.SYS)
 20050                                  ; 04/05/2019 - Retro DOS v4.0
 20051                                  
 20052                                  ;Break	<DOS_READ -- MAIN READ ROUTINE AND DEVICE IN ROUTINES>
 20053                                  ;-----------------------------------------------------------------------------
 20054                                  ;
 20055                                  ; Inputs:
 20056                                  ;	ThisSFT set to the SFT for the file being used
 20057                                  ;	[DMAADD] contains transfer address
 20058                                  ;	CX = No. of bytes to read
 20059                                  ;	DS = DOSDATA
 20060                                  ; Function:
 20061                                  ;	Perform read operation
 20062                                  ; Outputs:
 20063                                  ;    Carry clear
 20064                                  ;	SFT Position and cluster pointers updated
 20065                                  ;	CX = No. of bytes read
 20066                                  ;	ES:DI point to SFT
 20067                                  ;    Carry set
 20068                                  ;	AX is error code
 20069                                  ;	CX = 0
 20070                                  ;	ES:DI point to SFT
 20071                                  ; DS preserved, all other registers destroyed
 20072                                  ;
 20073                                  ;-----------------------------------------------------------------------------
 20074                                  
 20075                                  ;hkn; called from fcbio.asm, handle.asm and dev.asm. DS is be set up.
 20076                                  
 20077                                  ; DOSCODE:71E9h (MSDOS 5.0, MSDOS.SYS)
 20078                                  ; 17/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 20079                                  
 20080                                  DOS_READ:
 20081 00003363 C43E[9E05]              	LES	DI,[THISSFT]
 20082                                  
 20083                                  ; Verify that the sft has been opened in a mode that allows reading.
 20084                                  
 20085                                  	;mov	al,[es:di+2]
 20086 00003367 268A4502                	MOV	AL,[ES:DI+SF_ENTRY.sf_mode]
 20087                                  	;and	al,0Fh
 20088 0000336B 240F                    	AND	AL,access_mask
 20089                                  	;cmp	al,1
 20090 0000336D 3C01                    	CMP	AL,open_for_write
 20091 0000336F 7503                    	JNE	short READ_NO_MODE	; Is read or both
 20092 00003371 E91506                  	jmp	SET_ACC_ERR
 20093                                  
 20094                                  READ_NO_MODE:
 20095 00003374 E8ED04                  	call	SETUP
 20096 00003377 E30B                    	JCXZ	NoIORet 		; no bytes to read - fast return
 20097 00003379 E830DF                  	call	IsSFTNet
 20098 0000337C 7408                    	JZ	short LOCAL_READ
 20099                                  
 20100                                  ;IF NOT Installed
 20101                                  ;	transfer NET_READ
 20102                                  ;ELSE
 20103                                  	;mov	ax,1108h
 20104 0000337E B80811                  	MOV	AX,(MultNET<<8)|8
 20105 00003381 CD2F                    	int	2Fh	; Multiplex - NETWORK REDIRECTOR - READ FROM REMOTE FILE
 20106                                  			; ES:DI -> SFT
 20107                                  			; SFT DPB field -> DPB of drive containing file
 20108                                  			; CX = number of bytes, SS = DOS CS, SDA DTA field -> user buffer
 20109                                  			; Return: CF set on error, CX = bytes read
 20110 00003383 C3                      	retn
 20111                                  ;ENDIF
 20112                                  
 20113                                  ; The user ended up requesting 0 bytes of input. We do nothing for this case
 20114                                  ; except return immediately.
 20115                                  
 20116                                  NoIORet:
 20117 00003384 F8                      	CLC
 20118 00003385 C3                      	retn
 20119                                  
 20120                                  LOCAL_READ:
 20121                                  	;test	word [es:di+5],80h
 20122                                  	;TEST	word [ES:DI+SF_ENTRY.sf_flags],devid_device  ; Check for named device I/O
 20123 00003386 26F6450580              	test	byte [ES:DI+SF_ENTRY.sf_flags],devid_device ; 02/06/2019
 20124 0000338B 750E                    	JNZ	short READDEV
 20125                                  
 20126                                  	;mov	byte [EXTERR_LOCUS],2
 20127 0000338D C606[2303]02            	MOV	byte [EXTERR_LOCUS],errLOC_Disk
 20128 00003392 E8C3DF                  	call	ECritDisk
 20129 00003395 E8AD05                  	call	DISKREAD
 20130                                  
 20131                                  critexit:
 20132                                  	;call	LCritDisk
 20133                                  	;retn
 20134                                  	; 16/12/2022
 20135 00003398 E9D8DF                  	jmp	LCritDisk
 20136                                  
 20137                                  ; We are reading from a device. Examine the status of the device to see if we
 20138                                  ; can short-circuit the I/O. If the device in the EOF state or if it is the
 20139                                  ; null device, we can safely indicate no transfer.
 20140                                  
 20141                                  READDEV:
 20142                                  	;mov	byte [EXTERR_LOCUS],4
 20143 0000339B C606[2303]04            	MOV	byte [EXTERR_LOCUS],errLOC_SerDev
 20144                                  	;mov	bl,[es:di+5]
 20145 000033A0 268A5D05                	MOV	BL,[ES:DI+SF_ENTRY.sf_flags]
 20146 000033A4 C43E[2C03]              	LES	DI,[DMAADD]
 20147                                  	;test	bl,40h
 20148 000033A8 F6C340                  	test	BL,devid_device_EOF	; End of file?
 20149 000033AB 7407                    	JZ	short ENDRDDEVJ3
 20150                                  	;test	bl,4
 20151 000033AD F6C304                  	test	BL,devid_device_null	; NUL device?
 20152 000033B0 7405                    	JZ	short TESTRAW 		; NO
 20153 000033B2 30C0                    	XOR	AL,AL			; Indicate EOF by setting zero
 20154                                  ENDRDDEVJ3:
 20155                                  	; 17/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility!)
 20156                                  	;JMP	short ENDRDDEVJ2
 20157                                  	; 16/12/2022
 20158 000033B4 E96701                  	jmp	ENDRDDEV ; 04/05/2019
 20159                                  
 20160                                  ; We need to hit the device. Figure out if we do a raw read or we do the
 20161                                  ; bizarre std_con_string_input.
 20162                                  
 20163                                  TESTRAW:
 20164                                  	;test	bl,20h
 20165 000033B7 F6C320                  	test	BL,devid_device_raw	; Raw mode?
 20166 000033BA 7508                    	JNZ	short DVRDRAW 		; Yes, let the device do all local editing
 20167                                  	;test	bl,1
 20168 000033BC F6C301                  	test	BL,devid_device_con_in	; Is it console device?
 20169 000033BF 7461                    	JZ	short NOTRDCON
 20170 000033C1 E98F01                  	JMP	READCON
 20171                                  
 20172                                  DVRDRAW:
 20173 000033C4 06                      	PUSH	ES
 20174 000033C5 1F                      	POP	DS			; Xaddr to DS:DI
 20175                                  
 20176                                  	; 04/05/2019 - Retro DOS v4.0
 20177                                  
 20178                                  	; MSDOS 6.0
 20179                                  ;SR;
 20180                                  ;Check for win386 presence -- if present, do polled read of characters
 20181                                  
 20182 000033C6 36F606[2F10]01          	test	byte [ss:IsWin386],1 ; 19/05/2019
 20183 000033CC 7408                    	jz	short ReadRawRetry	;not present
 20184 000033CE F6C301                  	test	bl,devid_device_con_in	;is it console device
 20185 000033D1 7403                    	jz	short ReadRawRetry	;no, do normal read
 20186 000033D3 E9BA00                  	jmp	do_polling		;yes, do win386 polling loop
 20187                                  
 20188                                  ReadRawRetry:
 20189 000033D6 89FB                    	MOV	BX,DI			; DS:BX transfer addr
 20190 000033D8 31C0                    	XOR	AX,AX			; Media Byte, unit = 0
 20191 000033DA 89C2                    	MOV	DX,AX			; Start at 0
 20192 000033DC E8BE13                  	call	SETREAD
 20193 000033DF 1E                      	PUSH	DS			; Save Seg part of Xaddr
 20194                                  
 20195                                  ;hkn; SS override
 20196 000033E0 36C536[9E05]            	LDS	SI,[SS:THISSFT]
 20197 000033E5 E83C13                  	call	DEVIOCALL
 20198 000033E8 89FA                    	MOV	DX,DI			; DS:DX is preserved by INT 24
 20199 000033EA B486                    	MOV	AH,86H			; Read error
 20200                                  
 20201                                  ;hkn; SS override
 20202 000033EC 368B3E[5D03]            	MOV	DI,[SS:DEVCALL_REQSTAT]
 20203                                  	; MSDOS 3.3
 20204                                  	;test	di,8000h
 20205                                  	;jz	short CRDROK
 20206                                  	; MSDOS 6.0
 20207 000033F1 09FF                    	or	di,di
 20208 000033F3 7923                    	jns	short CRDROK		; no errors
 20209                                  	; MSDOS 3.3 (& MSDOS 6.0)
 20210 000033F5 E8BC1F                  	call	CHARHARD
 20211 000033F8 89D7                    	MOV	DI,DX			; DS:DI is Xaddr
 20212                                  
 20213                                  	; 04/05/2019
 20214                                  
 20215                                  	; MSDOS 6.0
 20216 000033FA 36033E[6C03]            	add	di,[ss:CALLSCNT]	; update ptr and count to reflect the	M065
 20217 000033FF 362B0E[6C03]            	sub	cx,[ss:CALLSCNT]	; number of chars xferred		M065
 20218                                  
 20219                                  	; MSDOS 3.3 (& MSDOS 6.0)
 20220 00003404 08C0                    	OR	AL,AL
 20221 00003406 7410                    	JZ	short CRDROK		; Ignore
 20222 00003408 3C03                    	CMP	AL,3
 20223 0000340A 7403                    	JZ	short CRDFERR 		; fail.
 20224 0000340C 1F                      	POP	DS			; Recover saved seg part of Xaddr
 20225 0000340D EBC7                    	JMP	short ReadRawRetry	; Retry
 20226                                  
 20227                                  ; We have encountered a device-driver error. We have informed the user of it
 20228                                  ; and he has said for us to fail the system call.
 20229                                  
 20230                                  CRDFERR:
 20231 0000340F 5F                      	POP	DI			; Clean stack
 20232                                  DEVIOFERR:
 20233                                  
 20234                                  ;hkn; SS override
 20235 00003410 36C43E[9E05]            	LES	DI,[SS:THISSFT]
 20236 00003415 E96F05                  	jmp	SET_ACC_ERR_DS
 20237                                  
 20238                                  CRDROK:
 20239 00003418 5F                      	POP	DI			; Chuck saved seg of Xaddr
 20240 00003419 89D7                    	MOV	DI,DX
 20241                                  
 20242                                  ;hkn; SS override
 20243 0000341B 36033E[6C03]            	ADD	DI,[ss:CALLSCNT]	; Amount transferred
 20244                                  	;JMP	SHORT ENDRDDEVJ3
 20245                                  	; 16/12/2022
 20246 00003420 EB6B                    	jmp	short ENDRDDEVJ2
 20247                                  
 20248                                  ; We are going to do a cooked read on some character device. There is a
 20249                                  ; problem here, what does the data look like? Is it a terminal device, line
 20250                                  ; CR line CR line CR, or is it file data, line CR LF line CR LF? Does it have
 20251                                  ; a ^Z at the end which is data, or is the ^Z not data?  In any event we're
 20252                                  ; going to do this: Read in pieces up to CR (CRs included in data) or ^z (^z
 20253                                  ; included in data). this "simulates" the way con works in cooked mode
 20254                                  ; reading one line at a time. With file data, however, the lines will look
 20255                                  ; like, LF line CR. This is a little weird.
 20256                                  
 20257                                  NOTRDCON:
 20258 00003422 8CC0                    	MOV	AX,ES
 20259 00003424 8ED8                    	MOV	DS,AX
 20260 00003426 89FB                    	MOV	BX,DI
 20261 00003428 31D2                    	XOR	DX,DX
 20262 0000342A 89D0                    	MOV	AX,DX
 20263 0000342C 51                      	PUSH	CX
 20264 0000342D B90100                  	MOV	CX,1
 20265 00003430 E86A13                  	call	SETREAD
 20266 00003433 59                      	POP	CX
 20267                                  
 20268                                  ;hkn; SS override
 20269 00003434 36C536[9E05]            	LDS	SI,[SS:THISSFT]
 20270                                  	;lds	si,[si+7]
 20271 00003439 C57407                  	LDS	SI,[SI+SF_ENTRY.sf_devptr]
 20272                                  DVRDLP:
 20273 0000343C E8551D                  	call	DSKSTATCHK
 20274 0000343F E8E512                  	call	DEVIOCALL2
 20275 00003442 57                      	PUSH	DI		; Save "count" done
 20276 00003443 B486                    	MOV	AH,86H
 20277                                  
 20278                                  ;hkn; SS override
 20279 00003445 368B3E[5D03]            	MOV	DI,[SS:DEVCALL_REQSTAT]
 20280                                  	
 20281                                  	; MSDOS 3.3
 20282                                  	;test	di,8000h
 20283                                  	;jz	short CRDOK
 20284                                  	; MSDOS 6.0
 20285 0000344A 09FF                    	or	di,di
 20286 0000344C 7917                    	jns	short CRDOK
 20287                                  	
 20288 0000344E E8631F                  	call	CHARHARD
 20289 00003451 5F                      	POP	DI
 20290                                  
 20291                                  ;hkn; SS override
 20292 00003452 36C706[6C03]0100        	MOV	word [SS:CALLSCNT],1
 20293 00003459 3C01                    	CMP	AL,1
 20294 0000345B 74DF                    	JZ	short DVRDLP		;Retry
 20295 0000345D 3C03                    	CMP	AL,3
 20296 0000345F 74AF                    	JZ	short DEVIOFERR		; FAIL
 20297 00003461 30C0                    	XOR	AL,AL			; Ignore, Pick some random character
 20298 00003463 EB12                    	JMP	SHORT DVRDIGN
 20299                                  
 20300                                  CRDOK:
 20301 00003465 5F                      	POP	DI
 20302                                  
 20303                                  ;hkn; SS override
 20304 00003466 36833E[6C03]01          	CMP	word [SS:CALLSCNT],1
 20305                                  	; 17/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility!)
 20306 0000346C 751F                    	JNZ	short ENDRDDEVJ2
 20307                                  	; 16/12/2022
 20308                                  	;jnz	short ENDRDDEV ; 24/07/2019
 20309                                  
 20310 0000346E 1E                      	PUSH	DS
 20311                                  
 20312                                  ;hkn; SS override
 20313 0000346F 368E1E[6A03]            	MOV	DS,[SS:CALLXAD+2]
 20314 00003474 8A05                    	MOV	AL,[DI]			; Get the character we just read
 20315 00003476 1F                      	POP	DS
 20316                                  DVRDIGN:
 20317                                  
 20318                                  ;hkn; SS override
 20319 00003477 36FF06[6803]            	INC	WORD [SS:CALLXAD]	; Next character
 20320 0000347C 36C706[5D03]0000        	MOV	word [SS:DEVCALL_REQSTAT],0
 20321 00003483 47                      	INC	DI			; Next character
 20322 00003484 3C1A                    	CMP	AL,1Ah			; ^Z?
 20323                                  	; 17/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility!)
 20324 00003486 7405                    	JZ	short ENDRDDEVJ2	; Yes, done zero set (EOF)
 20325                                  	; 16/12/2022
 20326                                  	;jz	short ENDRDDEV ; 24/07/2019	
 20327 00003488 3C0D                    	CMP	AL,c_CR  ; 0Dh		; CR?
 20328 0000348A E0B0                    	LOOPNZ	DVRDLP			; Loop if no, else done
 20329 0000348C 40                      	INC	AX			; Resets zero flag so NOT EOF, unless
 20330                                  					;  AX=FFFF which is not likely
 20331                                  ENDRDDEVJ2:
 20332                                  	; 16/12/2022
 20333                                  	;JMP	short ENDRDDEV		; changed short to long for win386
 20334                                  	; 17/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 20335 0000348D E98E00                  	jmp	ENDRDDEV
 20336                                  
 20337                                  	; 04/05/2019
 20338                                  
 20339                                  	; MSDOS 6.0
 20340                                  ;SR;
 20341                                  ;Polling code for raw read on CON when WIN386 is present
 20342                                  ;
 20343                                  ;At this point -- ds:di is transfer address
 20344                                  ;		  cx is count
 20345                                  
 20346                                  do_polling:
 20347 00003490 89FB                    	mov	bx,di			;ds:bx is Xfer address
 20348 00003492 31C0                    	xor	ax,ax
 20349 00003494 89C2                    	mov	dx,ax
 20350 00003496 E80413                  	call	SETREAD			;prepare device packet
 20351                                  
 20352                                  do_io:
 20353                                  ;Change read to a NON-DESTRUCTIVE READ, NO WAIT
 20354                                  
 20355 00003499 26C6470205              	mov	byte [es:bx+2],DEVRDND ; 5 ;Change command code
 20356 0000349E 1E                      	push	ds
 20357 0000349F 36C536[9E05]            	lds	si,[ss:THISSFT]		;get device header
 20358 000034A4 E87D12                  	call	DEVIOCALL		;call device driver
 20359 000034A7 1F                      	pop	ds
 20360                                  	
 20361                                  	;test	word [es:bx+3],8000h
 20362                                  	; 16/12/2022
 20363                                  	;test	byte [es:bx+4],80h
 20364 000034A8 26F6470480              	test	byte [es:bx+SRHEAD.REQSTAT+1],STERR>>8 
 20365                                  	;test	word [es:bx+SRHEAD.REQSTAT],STERR ;check if error
 20366 000034AD 7413                    	jz	short check_busy	;no
 20367                                  
 20368 000034AF 1E                      	push	ds
 20369 000034B0 89FA                    	mov	dx,di
 20370                                  	;invoke charhard		;invoke int 24h handler
 20371 000034B2 E8FF1E                  	call	CHARHARD
 20372 000034B5 89D7                    	mov	di,dx
 20373 000034B7 08C0                    	or	al,al
 20374 000034B9 745D                    	jz	short pop_done_read	;ignore by user, assume read done
 20375 000034BB 3C03                    	cmp	al,3
 20376 000034BD 7448                    	jz	short devrderr		;user asked to fail
 20377 000034BF 1F                      	pop	ds
 20378 000034C0 EBD7                    	jmp	short do_io		;user asked to retry
 20379                                  
 20380                                  check_busy:
 20381                                  	;test	word [es:bx+3],200h
 20382                                  	; 16/12/2022
 20383 000034C2 26F6470402              	test	byte [es:bx+SRHEAD.REQSTAT+1],02h
 20384                                  	;test	word [es:bx+SRHEAD.REQSTAT],0200h ;see if busy bit set
 20385 000034C7 7547                    	jnz	short no_char		;yes, no character available
 20386                                  
 20387                                  ;Character is available. Read in 1 character at a time until all characters
 20388                                  ;are read in or no character is available
 20389                                  
 20390 000034C9 26C6470204              	mov	byte [es:bx+2],DEVRD ; 4 ;command code is READ now
 20391 000034CE 26C747120100            	mov	word [es:bx+18],1	;change count to 1 character
 20392 000034D4 1E                      	push	ds
 20393 000034D5 36C536[9E05]            	lds	si,[ss:THISSFT]
 20394 000034DA E84712                  	call	DEVIOCALL
 20395                                  
 20396 000034DD 89FA                    	mov	dx,di
 20397 000034DF B486                    	mov	ah,86h
 20398                                  	;mov	di,[es:bx+3]
 20399 000034E1 268B7F03                	mov	di,[es:bx+SRHEAD.REQSTAT] ;get returned status
 20400 000034E5 F7C70080                	test	di,STERR ; 8000h	;was there an error during read?
 20401 000034E9 7410                    	jz	short next_char		;no,read next character
 20402                                  
 20403                                  	;invoke	charhard		;invoke int 24h handler
 20404 000034EB E8C61E                  	call	CHARHARD
 20405 000034EE 89D7                    	mov	di,dx			;restore di
 20406 000034F0 08C0                    	or	al,al			;
 20407 000034F2 7424                    	jz	short pop_done_read	;ignore by user,assume read is done
 20408 000034F4 3C03                    	cmp	al,3
 20409 000034F6 740F                    	jz	short devrderr		;user issued a 'fail',indicate error
 20410 000034F8 1F                      	pop	ds
 20411 000034F9 EB9E                    	jmp	short do_io		;user issued a retry
 20412                                  
 20413                                  next_char:
 20414 000034FB 1F                      	pop	ds
 20415 000034FC 89D7                    	mov	di,dx
 20416 000034FE 49                      	dec	cx			;decrement count
 20417 000034FF E318                    	jcxz	done_read		;all characters read in
 20418 00003501 26FF470E                	inc	word [es:bx+14]		;update transfer address
 20419 00003505 EB92                    	jmp	short do_io			;read next character in
 20420                                  
 20421                                  devrderr:
 20422 00003507 5F                      	pop	di			;discard segment address
 20423 00003508 36C43E[9E05]            	les	di,[ss:THISSFT]
 20424                                  	;transfer SET_ACC_ERR_DS	;indicate error
 20425 0000350D E97704                  	jmp     SET_ACC_ERR_DS
 20426                                  
 20427                                  no_char:
 20428                                  ;Since no character is available, we let win386 switch the VM out
 20429                                  
 20430 00003510 50                      	push	ax
 20431 00003511 B484                    	mov	ah,84h	; Microsoft Networks - KEYBOARD BUSY LOOP
 20432 00003513 CD2A                    	int	2Ah			;indicate idle to WIN386
 20433                                  
 20434                                  ;When control returns from WIN386, we continue the raw read
 20435                                  
 20436 00003515 58                      	pop	ax
 20437 00003516 EB81                    	jmp	do_io
 20438                                  
 20439                                  pop_done_read:
 20440 00003518 1F                      	pop	ds
 20441                                  done_read:
 20442 00003519 36033E[6C03]            	add	di,[ss:CALLSCNT] ; 19/05/2019
 20443                                  
 20444                                  	; 16/12/2022
 20445                                  
 20446                                  	;jmp	ENDRDDEVJ3	;jump back to normal DOS raw read exit
 20447                                  	;jmp	ENDRDDEV ; 04/05/2019
 20448                                  
 20449                                  	; 04/05/2019 - Retro DOS v4.0
 20450                                  ENDRDDEV:
 20451 0000351E 16                      	push	ss
 20452 0000351F 1F                      	pop	ds
 20453 00003520 EB1F                    	jmp	short endrddev1
 20454                                  
 20455                                  	; 17/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 20456                                  	;jmp	ENDRDDEVJ3	;jump back to normal DOS raw read exit
 20457                                  
 20458                                  TRANBUF:
 20459 00003522 AC                      	LODSB
 20460 00003523 AA                      	STOSB
 20461 00003524 3C0D                    	CMP	AL,c_CR ; 0Dh	; Check for carriage return
 20462 00003526 7503                    	JNZ	short NORMCH
 20463 00003528 C6040A                  	MOV	BYTE [SI],c_LF ; 0Ah
 20464                                  NORMCH:
 20465 0000352B 3C0A                    	CMP	AL,c_LF ; 0Ah
 20466 0000352D E0F3                    	LOOPNZ	TRANBUF
 20467 0000352F 7507                    	JNZ	short ENDRDCON
 20468 00003531 31F6                    	XOR	SI,SI		; Cause a new buffer to be read
 20469 00003533 E880E1                  	call	OUTT		; Transmit linefeed
 20470 00003536 0C01                    	OR	AL,1		; Clear zero flag--not end of file
 20471                                  ENDRDCON:
 20472                                  ;hkn; SS is DOSDATA
 20473 00003538 16                      	push	ss
 20474 00003539 1F                      	pop	ds
 20475 0000353A E80CFE                  	CALL	SWAPBACK
 20476 0000353D 8936[2200]              	MOV	[CONTPOS],SI
 20477                                  
 20478                                  	; 16/12/2022
 20479                                  ;ENDRDDEV:
 20480                                  ;;hkn; SS is DOSDATA
 20481                                  ;	push	ss
 20482                                  ;	pop	ds
 20483                                  endrddev1:	; 04/05/2019
 20484 00003541 893E[B805]              	MOV	[NEXTADD],DI
 20485 00003545 7509                    	JNZ	short SETSFTC 	; Zero set if Ctrl-Z found in input
 20486 00003547 C43E[9E05]              	LES	DI,[THISSFT]
 20487                                  	;and	byte [es:di+5],0BFh
 20488 0000354B 26806505BF              	AND	BYTE [ES:DI+SF_ENTRY.sf_flags],~devid_device_EOF 
 20489                                  				; Mark as no more data available
 20490                                  SETSFTC:
 20491                                  	; 31/07/2019
 20492                                  	;call	SETSFT
 20493                                  	;retn
 20494 00003550 E9C804                  	jmp	SETSFT
 20495                                  
 20496                                  ; 16/12/2022
 20497                                  %if 0
 20498                                  	; 17/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 20499                                  ENDRDDEV:
 20500                                  ;hkn; SS is DOSDATA
 20501                                  	push	ss
 20502                                  	pop	ds
 20503                                  	MOV	[NEXTADD],DI
 20504                                  	JNZ	short SETSFTC 	; Zero set if Ctrl-Z found in input
 20505                                  	LES	DI,[THISSFT]
 20506                                  	;and	byte [es:di+5],0BFh
 20507                                  	AND	BYTE [ES:DI+SF_ENTRY.sf_flags],~devid_device_EOF 
 20508                                  				; Mark as no more data available
 20509                                  SETSFTC:
 20510                                  	;call	SETSFT
 20511                                  	;retn
 20512                                  	jmp	SETSFT	
 20513                                  %endif
 20514                                  
 20515                                  READCON:
 20516 00003553 E8F9FD                  	CALL	SWAPCON
 20517 00003556 8B36[2200]              	MOV	SI,[CONTPOS]
 20518 0000355A 09F6                    	OR	SI,SI
 20519 0000355C 75C4                    	JNZ	short TRANBUF
 20520 0000355E 803E[7B02]80            	CMP	BYTE [CONBUF],128 ; 80h
 20521 00003563 7406                    	JZ	short GETBUF
 20522 00003565 C706[7B02]80FF          	MOV	WORD [CONBUF],0FF80H ; Set up 128-byte buffer with no template
 20523                                  GETBUF:
 20524 0000356B 51                      	PUSH	CX
 20525 0000356C 06                      	PUSH	ES
 20526 0000356D 57                      	PUSH	DI
 20527                                  
 20528                                  ;hkn; CONBUF is in DOSDATA
 20529 0000356E BA[7B02]                	MOV	DX,CONBUF
 20530                                  
 20531 00003571 E8B4DE                  	call	_$STD_CON_STRING_INPUT	; Get input buffer
 20532 00003574 5F                      	POP	DI
 20533 00003575 07                      	POP	ES
 20534 00003576 59                      	POP	CX
 20535                                  
 20536                                  ;hkn; CONBUF is in DOSDATA
 20537 00003577 BE[7D02]                	MOV	SI,CONBUF+2
 20538                                  
 20539 0000357A 803C1A                  	CMP	BYTE [SI],1AH	; Check for Ctrl-Z in first character
 20540 0000357D 75A3                    	JNZ	short TRANBUF
 20541 0000357F B01A                    	MOV	AL,1AH
 20542 00003581 AA                      	STOSB
 20543 00003582 4F                      	DEC	DI
 20544 00003583 B00A                    	MOV	AL,c_LF
 20545 00003585 E82EE1                  	call	OUTT		; Send linefeed
 20546 00003588 31F6                    	XOR	SI,SI
 20547 0000358A EBAC                    	JMP	short ENDRDCON ; 04/05/2019
 20548                                  
 20549                                  ; 24/07/2018 - Retro DOS v3.0
 20550                                  
 20551                                  ;Break	<DOS_WRITE -- MAIN WRITE ROUTINE AND DEVICE OUT ROUTINES>
 20552                                  ;---------------------------------------------------------------------------
 20553                                  ;
 20554                                  ; Procedure Name : DOS_WRITE
 20555                                  ;
 20556                                  ; Inputs:
 20557                                  ;	ThisSFT set to the SFT for the file being used
 20558                                  ;	[DMAADD] contains transfer address
 20559                                  ;	CX = No. of bytes to write
 20560                                  ; Function:
 20561                                  ;	Perform write operation
 20562                                  ;	NOTE: If CX = 0 on input, file is truncated or grown
 20563                                  ;		to current sf_position
 20564                                  ; Outputs:
 20565                                  ;    Carry clear
 20566                                  ;	SFT Position and cluster pointers updated
 20567                                  ;	CX = No. of bytes written
 20568                                  ;	ES:DI point to SFT
 20569                                  ;    Carry set
 20570                                  ;	AX is error code
 20571                                  ;	CX = 0
 20572                                  ;	ES:DI point to SFT
 20573                                  ; DS preserved, all other registers destroyed
 20574                                  ;---------------------------------------------------------------------------
 20575                                  
 20576                                  ;hkn; called from fcbio2.asm, handle.asm and dev.asm. DS is set up at this 
 20577                                  ;hkn; point to DOSDATA.
 20578                                  
 20579                                  ; 04/05/2019 - Retro DOS v4.0
 20580                                  ; DOSCODE:742Ch (MSDOS 6.21, MSDOS.SYS)
 20581                                  
 20582                                  ; 17/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 20583                                  ; DOSCODE:7418h (MSDOS 5.0, MSDOS.SYS)
 20584                                  
 20585                                  DOS_WRITE:
 20586 0000358C C43E[9E05]              	LES	DI,[THISSFT]
 20587                                  	;mov	al,[ES:DI+2]
 20588 00003590 268A4502                	MOV	AL,[ES:DI+SF_ENTRY.sf_mode]
 20589                                  	;and	al,0Fh
 20590 00003594 240F                    	AND	AL,access_mask
 20591                                  	;cmp	al,0
 20592 00003596 3C00                    	CMP	AL,open_for_read
 20593 00003598 7503                    	JNE	short Check_FCB_RO		 ;Is write or both
 20594                                  BadMode:
 20595 0000359A E9EC03                  	jmp	SET_ACC_ERR
 20596                                  
 20597                                  ; NOTE: The following check for writting to a Read Only File is performed
 20598                                  ;	    ONLY on FCBs!!!!
 20599                                  ;	We ALLOW writes to Read Only files via handles to allow a CREATE
 20600                                  ;	    of a read only file which can then be written to.
 20601                                  ;	This is OK because we are NOT ALLOWED to OPEN a RO file via handles
 20602                                  ;	    for writting, or RE-CREATE an EXISTING RO file via handles. Thus,
 20603                                  ;	    CREATing a NEW RO file, or RE-CREATing an existing file which
 20604                                  ;	    is NOT RO to be RO, via handles are the only times we can write
 20605                                  ;	    to a read-only file.
 20606                                  
 20607                                  Check_FCB_RO:
 20608                                  	;;test	word [es:di+2],8000h
 20609                                  	;TEST	word [ES:DI+SF_ENTRY.sf_mode],sf_isFCB
 20610                                  	;JZ	short WRITE_NO_MODE	; Not an FCB
 20611                                  	
 20612                                  	;test	byte [es:di+3],80h
 20613 0000359D 26F6450380              	TEST	byte [ES:DI+SF_ENTRY.sf_mode+1],(sf_isFCB>>8)
 20614 000035A2 7407                    	JZ	short WRITE_NO_MODE	; Not an FCB
 20615                                  
 20616                                  	;test	byte [es:di+4],1
 20617 000035A4 26F6450401              	TEST	byte [ES:DI+SF_ENTRY.sf_attr],attr_read_only
 20618 000035A9 75EF                    	JNZ	short BadMode 		; Can't write to Read_Only files via FCB
 20619                                  WRITE_NO_MODE:
 20620 000035AB E8B602                  	call	SETUP
 20621 000035AE E8FBDC                  	call	IsSFTNet
 20622 000035B1 7406                    	JZ	short LOCAL_WRITE
 20623                                  
 20624                                  ;IF NOT Installed
 20625                                  ;	transfer NET_WRITE
 20626                                  ;ELSE
 20627                                  	;mov	ax,1109h
 20628 000035B3 B80911                  	MOV	AX,(MultNET<<8)|9
 20629 000035B6 CD2F                    	int	2Fh	; Multiplex - NETWORK REDIRECTOR - WRITE TO REMOTE FILE
 20630                                  			; ES:DI -> SFT
 20631                                  			; SFT DPB field -> DPB of drive containing file
 20632                                  			; CX = number of bytes, SS = DOS CS, SDA DTA field -> user buffer
 20633                                  			; Return: CF set on error, CX = bytes written
 20634 000035B8 C3                      	retn
 20635                                  ;ENDIF
 20636                                  
 20637                                  LOCAL_WRITE:
 20638                                  	;;test	word [es:di+5],80h
 20639                                  	;TEST	word [ES:DI+SF_ENTRY.sf_flags],devid_device
 20640                                  	;jnz	short WRTDEV
 20641                                  
 20642                                  	;test	byte [es:di+5],80h
 20643 000035B9 26F6450580              	TEST	byte [ES:DI+SF_ENTRY.sf_flags],devid_device ; Check for named device I/O
 20644 000035BE 756E                    	jnz	short WRTDEV
 20645                                  
 20646                                  	;mov	byte [EXTERR_LOCUS],2
 20647 000035C0 C606[2303]02            	MOV	byte [EXTERR_LOCUS],errLOC_Disk
 20648 000035C5 E890DD                  	call	ECritDisk
 20649                                  
 20650 000035C8 E80805                  	call	DISKWRITE
 20651                                  
 20652                                  	; 04/05/2019 - Retro DOS v4.0
 20653                                  
 20654                                  	; MSDOS 6.0
 20655                                  ; Extended Open
 20656 000035CB 7210                    	JC	short nocommit
 20657                                  	
 20658 000035CD C43E[9E05]              	LES	DI,[THISSFT]
 20659                                  	
 20660                                  	;;test	word [ES:DI+2],4000h
 20661                                  	;TEST	word [ES:DI+SF_ENTRY.sf_mode],AUTO_COMMIT_WRITE
 20662                                  	;JZ	short nocommit
 20663                                  	
 20664                                  	;test	byte [ES:DI+3],40h
 20665 000035D1 26F6450340              	TEST	byte [ES:DI+SF_ENTRY.sf_mode+1],(AUTO_COMMIT_WRITE>>8)
 20666 000035D6 7405                    	JZ	short nocommit
 20667                                  	
 20668 000035D8 51                      	PUSH	CX
 20669 000035D9 E819FB                  	call	DOS_COMMIT
 20670 000035DC 59                      	POP	CX
 20671                                  nocommit:
 20672                                  ; Extended Open
 20673                                  	;call	LCritDisk
 20674                                  	;retn
 20675                                  	; 18/12/2022
 20676 000035DD E993DD                  	jmp	LCritDisk
 20677                                  
 20678                                  DVWRTRAW:
 20679 000035E0 31C0                    	XOR	AX,AX			; Media Byte, unit = 0
 20680 000035E2 E8EB11                  	call	SETWRITE
 20681 000035E5 1E                      	PUSH	DS			; Save seg of transfer
 20682                                  
 20683                                  ;hkn; SS override
 20684 000035E6 36C536[9E05]            	LDS	SI,[SS:THISSFT]
 20685 000035EB E83611                  	call	DEVIOCALL		; DS:SI -> DEVICE
 20686                                  
 20687 000035EE 89FA                    	MOV	DX,DI			; Offset part of Xaddr saved in DX
 20688 000035F0 B487                    	MOV	AH,87H
 20689                                  
 20690                                  ;hkn; SS override
 20691 000035F2 368B3E[5D03]            	MOV	DI,[SS:DEVCALL_REQSTAT]
 20692                                  
 20693                                  	; MSDOS 3.3
 20694                                  	;test	di,8000h
 20695                                  	;jz	short CWRTROK
 20696                                  
 20697                                  	; MSDOS 6.0
 20698 000035F7 09FF                    	or	di,di
 20699 000035F9 7920                    	jns	short CWRTROK
 20700                                  	
 20701                                  	; MSDOS 3.3 (& MSDOS 6.0)
 20702 000035FB E8B61D                  	call	CHARHARD
 20703                                  
 20704                                  	; 04/05/2019  - Retro DOS v4.0
 20705                                  
 20706                                  	; MSDOS 6.0
 20707 000035FE 362B0E[6C03]            	sub	cx,[ss:CALLSCNT]	; update ptr & count to reflect	M065
 20708 00003603 89D3                    	mov	bx,dx			; number of chars xferred	M065
 20709 00003605 36031E[6C03]            	add	bx,[ss:CALLSCNT]	;				M065
 20710 0000360A 89DF                    	mov	di,bx			;				M065
 20711                                  	
 20712                                  	; MSDOS 3.3
 20713                                  	;MOV	BX,DX			; Recall transfer addr		M065
 20714                                  
 20715                                  	; MSDOS 3.3 (& MSDOS 6.0)
 20716 0000360C 08C0                    	OR	AL,AL
 20717 0000360E 740B                    	JZ	short CWRTROK 		; Ignore
 20718 00003610 3C03                    	CMP	AL,3
 20719 00003612 7403                    	JZ	short CWRFERR
 20720 00003614 1F                      	POP	DS			; Recover saved seg of transfer
 20721 00003615 EBC9                    	JMP	short DVWRTRAW		; Try again
 20722                                  CWRFERR:
 20723 00003617 58                      	POP	AX			; Chuck saved seg of transfer
 20724 00003618 E9F4FD                  	JMP	CRDFERR 		; Will pop one more stack element
 20725                                  CWRTROK:
 20726 0000361B 58                      	POP	AX			; Chuck saved seg of transfer
 20727 0000361C 1F                      	POP	DS
 20728 0000361D A1[6C03]                	MOV	AX,[CALLSCNT]		; Get actual number of bytes transferred
 20729                                  ENDWRDEV:
 20730 00003620 C43E[9E05]              	LES	DI,[THISSFT]
 20731 00003624 89C1                    	MOV	CX,AX
 20732                                  	;call	ADDREC
 20733                                  	;retn
 20734                                  	; 16/12/2022
 20735                                  	; 10/06/2019
 20736 00003626 E91304                  	jmp	ADDREC
 20737                                  	; 17/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 20738                                  	;call	ADDREC
 20739                                  	;retn
 20740                                  	
 20741                                  WRTNUL:
 20742 00003629 89CA                    	MOV	DX,CX			; Entire transfer done
 20743                                  WRTCOOKJ:
 20744 0000362B E98D00                  	JMP	WRTCOOKDONE
 20745                                  WRTDEV:
 20746                                  	;mov	byte [EXTERR_LOCUS],4
 20747 0000362E C606[2303]04            	MOV	byte [EXTERR_LOCUS],errLOC_SerDev
 20748                                  	;or	byte [es:di+5],40h
 20749 00003633 26804D0540              	OR	BYTE [ES:DI+SF_ENTRY.sf_flags],devid_device_EOF
 20750                                  					; Reset EOF for input
 20751                                  	;mov	bl,[es:di+5]
 20752 00003638 268A5D05                	MOV	BL,[ES:DI+SF_ENTRY.sf_flags]
 20753 0000363C 31C0                    	XOR	AX,AX
 20754 0000363E E3E0                    	JCXZ	ENDWRDEV		; problem of creating on a device.
 20755 00003640 1E                      	PUSH	DS
 20756 00003641 88D8                    	MOV	AL,BL
 20757 00003643 C51E[2C03]              	LDS	BX,[DMAADD]		; Xaddr to DS:BX
 20758 00003647 89DF                    	MOV	DI,BX			; Xaddr to DS:DI
 20759 00003649 31D2                    	XOR	DX,DX			; Set starting point
 20760                                  	;test	al,20h
 20761 0000364B A820                    	test	AL,devid_device_raw	; Raw?
 20762                                  	;JZ	short TEST_DEV_CON
 20763                                  	;JMP	DVWRTRAW
 20764                                  	; 16/12/2022
 20765 0000364D 7591                    	jnz	short DVWRTRAW
 20766                                  	; 17/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 20767                                  	;JZ	short TEST_DEV_CON
 20768                                  	;JMP	short DVWRTRAW
 20769                                  
 20770                                  TEST_DEV_CON:
 20771                                  	;test	al,2
 20772 0000364F A802                    	test	AL,devid_device_con_out ; Console output device?
 20773 00003651 756E                    	jnz	short WRITECON
 20774                                  	;test	al,4
 20775 00003653 A804                    	test	AL,devid_device_null
 20776 00003655 75D2                    	JNZ	short WRTNUL
 20777 00003657 89D0                    	MOV	AX,DX
 20778 00003659 803F1A                  	CMP	BYTE [BX],1Ah		; ^Z?
 20779 0000365C 74CD                    	JZ	short WRTCOOKJ		; Yes, transfer nothing
 20780 0000365E 51                      	PUSH	CX
 20781 0000365F B90100                  	MOV	CX,1
 20782 00003662 E86B11                  	call	SETWRITE
 20783 00003665 59                      	POP	CX
 20784                                  
 20785                                  ;hkn; SS override
 20786 00003666 36C536[9E05]            	LDS	SI,[SS:THISSFT]
 20787                                  ;
 20788                                  ;SR; Removed X25 support from here
 20789                                  ;
 20790                                  	;lds	si,[si+7]
 20791 0000366B C57407                  	LDS	SI,[SI+SF_ENTRY.sf_devptr]
 20792                                  DVWRTLP:
 20793 0000366E E8231B                  	call	DSKSTATCHK
 20794 00003671 E8B310                  	call	DEVIOCALL2
 20795 00003674 57                      	PUSH	DI
 20796 00003675 B487                    	MOV	AH,87H
 20797                                  
 20798                                  ;hkn; SS override
 20799 00003677 368B3E[5D03]            	MOV	DI,[SS:DEVCALL_REQSTAT]
 20800                                  	
 20801                                  	; MSDOS 3.3
 20802                                  	;test	di,8000h
 20803                                  	;jz	short CWROK
 20804                                  
 20805                                  	; MSDOS 6.0
 20806 0000367C 09FF                    	or	di,di
 20807 0000367E 7916                    	jns	short CWROK
 20808                                  	
 20809                                  	; MSDOS 3.3 (& MSDOS 6.0)
 20810 00003680 E8311D                  	call	CHARHARD
 20811 00003683 5F                      	POP	DI
 20812                                  
 20813                                  ;hkn; SS override
 20814 00003684 36C706[6C03]0100        	MOV	word [SS:CALLSCNT],1
 20815 0000368B 3C01                    	CMP	AL,1
 20816 0000368D 74DF                    	JZ	short DVWRTLP 	; Retry
 20817 0000368F 08C0                    	OR	AL,AL
 20818 00003691 740C                    	JZ	short DVWRTIGN	; Ignore
 20819                                  	; 10/08/2018
 20820 00003693 E979FD                  	JMP	CRDFERR 	; Fail, pops one stack element
 20821                                  CWROK:
 20822 00003696 5F                      	POP	DI
 20823                                  
 20824                                  ;hkn; SS override
 20825 00003697 36833E[6C03]00          	CMP	word [SS:CALLSCNT],0
 20826 0000369D 741C                    	JZ	short WRTCOOKDONE
 20827                                  DVWRTIGN:
 20828 0000369F 42                      	INC	DX
 20829                                  
 20830                                  ;hkn; SS override for CALLXAD
 20831 000036A0 36FF06[6803]            	INC	WORD [SS:CALLXAD]
 20832 000036A5 47                      	INC	DI
 20833 000036A6 1E                      	PUSH	DS
 20834 000036A7 368E1E[6A03]            	MOV	DS,[SS:CALLXAD+2]
 20835 000036AC 803D1A                  	CMP	BYTE [DI],1Ah	; ^Z?
 20836 000036AF 1F                      	POP	DS
 20837 000036B0 7409                    	JZ	short WRTCOOKDONE
 20838                                  
 20839                                  ;hkn; SS override
 20840 000036B2 36C706[5D03]0000        	MOV	word [SS:DEVCALL_REQSTAT],0
 20841 000036B9 E2B3                    	LOOP	DVWRTLP
 20842                                  WRTCOOKDONE:
 20843 000036BB 89D0                    	MOV	AX,DX
 20844 000036BD 1F                      	POP	DS
 20845 000036BE E95FFF                  	JMP	ENDWRDEV ; 10/08/2018
 20846                                  
 20847                                  WRITECON:
 20848 000036C1 1E                      	PUSH	DS
 20849                                  
 20850                                  ;hkn; SS is DOSDATA
 20851 000036C2 16                      	push	ss
 20852 000036C3 1F                      	pop	ds
 20853 000036C4 E888FC                  	CALL	SWAPCON
 20854 000036C7 1F                      	POP	DS
 20855 000036C8 89DE                    	MOV	SI,BX
 20856 000036CA 51                      	PUSH	CX
 20857                                  WRCONLP:
 20858 000036CB AC                      	LODSB
 20859 000036CC 3C1A                    	CMP	AL,1Ah		; ^Z?
 20860 000036CE 7405                    	JZ	short CONEOF
 20861 000036D0 E8E3DF                  	call	OUTT
 20862 000036D3 E2F6                    	LOOP	WRCONLP
 20863                                  CONEOF:
 20864 000036D5 58                      	POP	AX			; Count
 20865 000036D6 29C8                    	SUB	AX,CX			; Amount actually written
 20866 000036D8 1F                      	POP	DS
 20867 000036D9 E86DFC                  	CALL	SWAPBACK
 20868 000036DC E941FF                  	JMP	ENDWRDEV
 20869                                  
 20870                                  ;---------------------------------------------------------------------------
 20871                                  ;
 20872                                  ; Procedure Name : get_io_sft
 20873                                  ;
 20874                                  ;   Convert JFN number in BX to sf_entry in DS:SI We get the normal SFT if
 20875                                  ;   CONSWAP is FALSE or if the handle desired is 2 or more. Otherwise, we
 20876                                  ;   retrieve the sft from ConSFT which is set by SwapCon.
 20877                                  ;
 20878                                  ;---------------------------------------------------------------------------
 20879                                  
 20880                                  ; 04/05/2019 - Retro DOS v4.0
 20881                                  ; DOSCODE:7583h (MSDOS 6.21, MSDOS.SYS)
 20882                                  ; 17/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 20883                                  ; DOSCODE:756Fh (MSDOS 5.0, MSDOS.SYS)
 20884                                  
 20885                                  GET_IO_SFT:
 20886                                  	;test	byte [SS:CONSWAP],0FFh
 20887 000036DF 36803E[5703]00          	cmp	byte [SS:CONSWAP],0			;smr;SS Override
 20888 000036E5 7512                    	JNZ	short GetRedir
 20889                                  GetNormal:
 20890 000036E7 16                      	push	ss
 20891 000036E8 1F                      	pop	ds
 20892 000036E9 06                      	PUSH	ES
 20893 000036EA 57                      	PUSH	DI
 20894 000036EB E88130                  	call	SFFromHandle
 20895 000036EE 7206                    	JC	short RET44P
 20896 000036F0 8CC6                    	MOV	SI,ES
 20897 000036F2 8EDE                    	MOV	DS,SI
 20898 000036F4 89FE                    	MOV	SI,DI
 20899                                  RET44P:
 20900 000036F6 5F                      	POP	DI
 20901 000036F7 07                      	POP	ES
 20902 000036F8 C3                      	retn
 20903                                  GetRedir:
 20904 000036F9 83FB01                  	CMP	BX,1
 20905 000036FC 77E9                    	JA	short GetNormal
 20906 000036FE 36C536[E605]            	LDS	SI,[SS:CONSFT]
 20907 00003703 F8                      	CLC
 20908                                  get_io_sft_retn:
 20909 00003704 C3                      	retn
 20910                                  
 20911                                  ;Break	<DIRREAD -- READ A DIRECTORY SECTOR>
 20912                                  ;---------------------------------------------------------------------------
 20913                                  ;
 20914                                  ; Procedure Name : DIRREAD
 20915                                  ;
 20916                                  ; Inputs:
 20917                                  ;	AX = Directory block number (relative to first block of directory)
 20918                                  ;	ES:BP = Base of drive parameters
 20919                                  ;	[DIRSEC] = First sector of first cluster of directory
 20920                                  ;	[CLUSNUM] = Next cluster
 20921                                  ;	[CLUSFAC] = Sectors/Cluster
 20922                                  ; Function:
 20923                                  ;	Read the directory block into [CURBUF].
 20924                                  ; Outputs:
 20925                                  ;	[NXTCLUSNUM] = Next cluster (after the one skipped to)
 20926                                  ;	[SECCLUSPOS] Set
 20927                                  ;	ES:BP unchanged
 20928                                  ;	[CURBUF] Points to Buffer with dir sector
 20929                                  ;	Carry set if error (user said FAIL to I 24)
 20930                                  ; DS preserved, all other registers destroyed.
 20931                                  ;---------------------------------------------------------------------------
 20932                                  
 20933                                  ;hkn; called from dir.asm. DS already set up to DOSDATA.
 20934                                  
 20935                                  DIRREAD:
 20936                                  
 20937                                  ; Note that ClusFac is the sectors per cluster. This is NOT necessarily
 20938                                  ; the same as what is in the DPB! In the case of the root directory, we have
 20939                                  ; ClusFac = # sectors in the root directory. The root directory is detected
 20940                                  ; by DIRStart = 0.
 20941                                  
 20942 00003705 31D2                    	XOR	DX,DX
 20943 00003707 833E[C205]00            	CMP	word [DIRSTART],0
 20944 0000370C 7503                    	jnz	short SubDir
 20945 0000370E 92                      	XCHG	AX,DX
 20946 0000370F EB0C                    	JMP	short DoRead
 20947                                  
 20948                                  ; Convert the sector number in AX into cluster and sector-within-cluster pair
 20949                                  
 20950                                  SubDir:
 20951 00003711 88C2                    	MOV	DL,AL
 20952                                  	;and	dl,[es:bp+4]
 20953 00003713 26225604                	AND	DL,[ES:BP+DPB.CLUSTER_MASK]
 20954                                  
 20955                                  ;	(DX) = sector-in-cluster
 20956                                  
 20957                                  	;mov	cl,[es:bp+5]
 20958 00003717 268A4E05                	MOV	CL,[ES:BP+DPB.CLUSTER_SHIFT]
 20959 0000371B D3E8                    	SHR	AX,CL
 20960                                  
 20961                                  ;	(DX) = position in cluster
 20962                                  ;	(AX) = number of clusters to skip
 20963                                  
 20964                                  DoRead:
 20965 0000371D 8816[7305]              	MOV	[SECCLUSPOS],DL
 20966 00003721 89C1                    	MOV	CX,AX
 20967 00003723 88D4                    	MOV	AH,DL
 20968                                  
 20969                                  ;	(CX) = number of clusters to skip.
 20970                                  ;	(AH) = remainder
 20971                                  
 20972                                  	; 04/05/2019 - Retro DOS v4.0
 20973                                  
 20974                                  	; MSDOS 6.0
 20975 00003725 8B16[C005]              	MOV	DX,[DIRSEC+2]	     	  ;>32mb
 20976 00003729 8916[0706]              	MOV	[HIGH_SECTOR],DX	  ;>32mb
 20977 0000372D 8B16[BE05]              	MOV	DX,[DIRSEC]
 20978 00003731 00E2                    	ADD	DL,AH
 20979 00003733 80D600                  	ADC	DH,0
 20980 00003736 8316[0706]00            	ADC	word [HIGH_SECTOR],0	  ;>32mb
 20981                                  
 20982 0000373B 8B1E[BC05]              	MOV	BX,[CLUSNUM]
 20983 0000373F 891E[DC05]              	MOV	[NXTCLUSNUM],BX
 20984 00003743 E319                    	JCXZ	FIRSTCLUSTER
 20985                                  SKPCLLP:
 20986 00003745 E8D71E                  	call	UNPACK
 20987 00003748 72BA                    	jc	short get_io_sft_retn
 20988 0000374A 87DF                    	XCHG	BX,DI
 20989 0000374C E8B91E                  	call	IsEOF			; test for eof based on fat size
 20990 0000374F 7302                    	JAE	short HAVESKIPPED
 20991 00003751 E2F2                    	LOOP	SKPCLLP
 20992                                  HAVESKIPPED:
 20993 00003753 891E[DC05]              	MOV	[NXTCLUSNUM],BX
 20994 00003757 89FA                    	MOV	DX,DI
 20995 00003759 88E3                    	MOV	BL,AH
 20996 0000375B E86517                  	call	FIGREC
 20997                                  
 20998                                  	;entry	FIRSTCLUSTER
 20999                                  
 21000                                  FIRSTCLUSTER:
 21001                                  	;mov	byte [ALLOWED],18h
 21002 0000375E C606[4B03]18            	MOV	byte [ALLOWED],Allowed_RETRY+Allowed_FAIL
 21003 00003763 30C0                    	XOR	AL,AL		; Indicate pre-read
 21004 00003765 E8D922                  	call	GETBUFFR
 21005 00003768 729A                    	jc	short get_io_sft_retn
 21006                                  
 21007                                  	;entry	SET_BUF_AS_DIR
 21008                                  
 21009                                  SET_BUF_AS_DIR:
 21010                                  
 21011                                  ;	Set the type of CURBUF to be a directory sector.
 21012                                  ;	Only flags are modified.
 21013                                  
 21014 0000376A 1E                      	PUSH	DS
 21015 0000376B 56                      	PUSH	SI
 21016 0000376C C536[E205]              	LDS	SI,[CURBUF]
 21017                                  	;or	byte [si+5],4
 21018 00003770 804C0504                	OR	byte [SI+BUFFINFO.buf_flags],buf_isDIR	; Clears carry
 21019 00003774 5E                      	POP	SI
 21020 00003775 1F                      	POP	DS
 21021                                  dirread_retn:
 21022 00003776 C3                      	retn
 21023                                  
 21024                                  ;Break	<FATSECRD -- READ A FAT SECTOR>
 21025                                  ;----------------------------------------------------------------------------
 21026                                  ;
 21027                                  ; Procedure Name : FATSECRD
 21028                                  ; Inputs:
 21029                                  ;	Same as DREAD
 21030                                  ;	DS:BX = Transfer address
 21031                                  ;	CX = Number of sectors
 21032                                  ;	DX = Absolute record number
 21033                                  ;	ES:BP = Base of drive parameters
 21034                                  ; Function:
 21035                                  ;	Calls BIOS to perform FAT read.
 21036                                  ; Outputs:
 21037                                  ;	Same as DREAD
 21038                                  ;---------------------------------------------------------------------------
 21039                                  
 21040                                  	; 04/05/2019 - Retro DOS v4.0
 21041                                  	; 18/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)	
 21042                                  
 21043                                  FATSECRD:
 21044                                  ;hkn; SS override
 21045                                  	;mov	byte [ss:ALLOWED],18h
 21046 00003777 36C606[4B03]18          	MOV	byte [SS:ALLOWED],Allowed_RETRY+Allowed_FAIL
 21047 0000377D 89CF                    	MOV	DI,CX
 21048                                  	;mov	cl,[es:bp+8]
 21049 0000377F 268A4E08                	MOV	CL,[ES:BP+DPB.FAT_COUNT]
 21050                                  	; MSDOS 3.3
 21051                                  	;;mov	al,[es:bp+0Fh]
 21052                                  	;MOV	AL,[ES:BP+DPB.FAT_SIZE] 				
 21053                                  	;XOR	AH,AH
 21054                                  	; MSDOS 6.0
 21055                                  	;mov	ax,[es:bp+0Fh]
 21056 00003783 268B460F                	MOV	AX,[ES:BP+DPB.FAT_SIZE] ;>32mb
 21057 00003787 30ED                    	XOR	CH,CH	
 21058 00003789 52                      	PUSH	DX
 21059                                  NXTFAT:
 21060                                  	; MSDOS 6.0
 21061                                  ;hkn; SS override
 21062 0000378A 36C706[0706]0000        	MOV	word [SS:HIGH_SECTOR],0	;>32mb FAT sectors cannot exceed
 21063 00003791 51                      	PUSH	CX			;32mb
 21064 00003792 50                      	PUSH	AX
 21065 00003793 89F9                    	MOV	CX,DI
 21066 00003795 E85B00                  	call	DSKREAD
 21067 00003798 58                      	POP	AX
 21068 00003799 59                      	POP	CX
 21069 0000379A 7420                    	JZ	short RET41P		; Carry clear
 21070 0000379C 01C2                    	ADD	DX,AX
 21071 0000379E E2EA                    	LOOP	NXTFAT
 21072 000037A0 5A                      	POP	DX
 21073 000037A1 89F9                    	MOV	CX,DI
 21074                                  
 21075                                  ; NOTE FALL THROUGH
 21076                                  
 21077                                  ;Break	<DREAD -- DO A DISK READ>
 21078                                  ;---------------------------------------------------------------------------
 21079                                  ;
 21080                                  ; Procedure Name : DREAD
 21081                                  ;
 21082                                  ; Inputs:
 21083                                  ;	DS:BX = Transfer address
 21084                                  ;	CX = Number of sectors
 21085                                  ;	DX = Absolute record number	      (LOW)
 21086                                  ;	[HIGH_SECTOR] = Absolute record number (HIGH)
 21087                                  ;	ES:BP = Base of drive parameters
 21088                                  ;	[ALLOWED] must be set in case call to HARDERR needed
 21089                                  ; Function:
 21090                                  ;	Calls BIOS to perform disk read. If BIOS reports
 21091                                  ;	errors, will call HARDERRRW for further action.
 21092                                  ; Outputs:
 21093                                  ;	Carry set if error (currently user FAILED to INT 24)
 21094                                  ; DS,ES:BP preserved. All other registers destroyed.
 21095                                  ;---------------------------------------------------------------------------
 21096                                  
 21097                                  	;entry	DREAD
 21098                                  DREAD:
 21099 000037A3 E84D00                  	call	DSKREAD
 21100 000037A6 74CE                    	jz	short dirread_retn	; Carry clear
 21101                                  ;hkn; SS override
 21102 000037A8 36C606[7505]00          	MOV	BYTE [SS:READOP],0
 21103 000037AE E89A00                  	call	HARDERRRW
 21104 000037B1 3C01                    	CMP	AL,1			; Check for retry
 21105 000037B3 74EE                    	JZ	short DREAD
 21106 000037B5 3C03                    	CMP	AL,3			; Check for FAIL
 21107 000037B7 F8                      	CLC
 21108 000037B8 7501                    	JNZ	short NO_CAR		; Ignore
 21109 000037BA F9                      	STC
 21110                                  NO_CAR:
 21111 000037BB C3                      	retn
 21112                                  RET41P: 
 21113 000037BC 5A                      	POP	DX
 21114 000037BD C3                      	retn
 21115                                  
 21116                                  ; 24/07/2018 - Retro DOS v3.0
 21117                                  
 21118                                  ;Break	<CHECK_WRITE_LOCK>
 21119                                  ;---------------------------------------------------------------------------
 21120                                  ;
 21121                                  ; Procedure Name : CHECK_WRITE_LOCK
 21122                                  ;
 21123                                  ; Inputs:
 21124                                  ;	output of SETUP
 21125                                  ;	ES:DI -> SFT
 21126                                  ; Function:
 21127                                  ;	check write lock
 21128                                  ; Outputs:
 21129                                  ;	Carry set if error
 21130                                  ;	Carry clear if ok
 21131                                  ;
 21132                                  ;----------------------------------------------------------------------------
 21133                                  
 21134                                  	; 04/05/2019 - Retro DOS v4.0
 21135                                  	; 18/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 21136                                  
 21137                                  CHECK_WRITE_LOCK:
 21138                                  	; MSDOS 6.0
 21139                                  	;test	byte [es:di+4],8
 21140 000037BE 26F6450408              	TEST	byte [ES:DI+SF_ENTRY.sf_attr],attr_volume_id ;volume id
 21141                                  	;JZ	short write_cont			     ;no
 21142                                  	;;call	SET_ACC_ERR_DS
 21143                                  	;;retn
 21144                                  	;;jnz	SET_ACC_ERR_DS
 21145                                  	; 19/08/2018
 21146                                  	;jz	short write_cont
 21147                                  	;jmp	SET_ACC_ERR_DS
 21148                                  	; 18/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 21149 000037C3 7403                    	JZ	short write_cont
 21150                                  	;call	SET_ACC_ERR_DS
 21151                                  	;retn
 21152                                  	; 16/12/2022
 21153 000037C5 E9BF01                  	jmp	SET_ACC_ERR_DS
 21154                                  
 21155                                  write_cont:				;
 21156 000037C8 51                      	PUSH	CX			;save reg
 21157 000037C9 09C9                    	OR	CX,CX			;
 21158 000037CB 7501                    	JNZ	short Not_Truncate	;
 21159 000037CD 49                      	dec	cx			;(cx) = -1; check for lock on whole file
 21160                                  Not_Truncate:				;
 21161 000037CE B080                    	MOV	AL,80H			;check write access
 21162 000037D0 E82A3C                  	call	LOCK_CHECK		;check lock
 21163 000037D3 59                      	POP	CX			;restore reg
 21164 000037D4 7305                    	JNC	short WRITE_OK		;lock ok
 21165 000037D6 E86501                  	call	WRITE_LOCK_VIOLATION	;issue I24
 21166 000037D9 73ED                    	JNC	short write_cont	;retry
 21167                                  WRITE_OK:				;
 21168 000037DB C3                      	retn				;
 21169                                  
 21170                                  ;Break	<CHECK_READ_LOCK>
 21171                                  ;---------------------------------------------------------------------------
 21172                                  ;
 21173                                  ; Procedure Name : CHECK_READ_LOC
 21174                                  ;
 21175                                  ; Inputs:
 21176                                  ;	ES:DI -> SFT
 21177                                  ;	output of SETUP
 21178                                  ; Function:
 21179                                  ;	check read lock
 21180                                  ; Outputs:
 21181                                  ;	Carry set if error
 21182                                  ;	Carry clear if ok
 21183                                  ;----------------------------------------------------------------------------
 21184                                  
 21185                                  CHECK_READ_LOCK:
 21186                                  	; MSDOS 6.0
 21187                                  	;test	byte [es:di+4],8
 21188 000037DC 26F6450408              	TEST	byte [ES:DI+SF_ENTRY.sf_attr],attr_volume_id ;volume id
 21189                                  	;JZ	short do_retry			   	     ; no
 21190                                  	;;call	SET_ACC_ERR
 21191                                  	;;retn
 21192                                  	;;jnz	SET_ACC_ERR
 21193                                  	; 16/12/2022
 21194                                  	; 28/07/2019
 21195 000037E1 7403                    	jz	short do_retry
 21196 000037E3 E9A301                  	jmp	SET_ACC_ERR
 21197                                  	; 18/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 21198                                  	;JZ	short do_retry
 21199                                  	;call	SET_ACC_ERR
 21200                                  	;retn
 21201                                  do_retry:				;
 21202 000037E6 30C0                    	xor	al,al			;check read access
 21203 000037E8 E8123C                  	call	LOCK_CHECK		;check lock
 21204 000037EB 7305                    	JNC	short READLOCK_OK 	;lock ok
 21205 000037ED E82801                  	call	READ_LOCK_VIOLATION	;issue I24
 21206 000037F0 73F4                    	JNC	short do_retry		;retry
 21207                                  READLOCK_OK:				;
 21208 000037F2 C3                      	retn				;
 21209                                  
 21210                                  ;============================================================================
 21211                                  ; DISK2.ASM, MSDOS 6.0, 1991
 21212                                  ;============================================================================
 21213                                  ; 24/07/2018 - Retro DOS v3.0
 21214                                  ; 04/05/2019 - Retro DOS v4.0
 21215                                  
 21216                                  ;	TITLE	DISK2 - Disk utility routines
 21217                                  ;	NAME	Disk2
 21218                                  
 21219                                  ;**	Low level Read and write routines for local SFT I/O on files and devs
 21220                                  ;
 21221                                  ;	DskRead
 21222                                  ;	DWRITE
 21223                                  ;	DSKWRITE
 21224                                  ;	HarderrRW
 21225                                  ;	SETUP
 21226                                  ;	BREAKDOWN
 21227                                  ;	READ_LOCK_VIOLATION
 21228                                  ;	WRITE_LOCK_VIOLATION
 21229                                  ;	DISKREAD
 21230                                  ;	SET_ACC_ERR_DS
 21231                                  ;	SET_ACC_ERR
 21232                                  ;	SETSFT
 21233                                  ;	SETCLUS
 21234                                  ;	AddRec
 21235                                  ;
 21236                                  ;	Revision history:
 21237                                  ;
 21238                                  ;		AN000 version 4.00 Jan. 1988
 21239                                  ;		M039 DB 10/17/90 - Disk read/write optimization
 21240                                  
 21241                                  ; 04/05/2019 - Retro DOS v4.0
 21242                                  ; DOSCODE:7699h (MSDOS 6.21, MSDOS.SYS)
 21243                                  ; 18/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 21244                                  ; DOSCODE:7685h (MSDOS 5.0, MSDOS.SYS)
 21245                                  
 21246                                  ;Break	<DSKREAD -- PHYSICAL DISK READ>
 21247                                  ;---------------------------------------------------------------------------
 21248                                  ;
 21249                                  ; Procedure Name : DSKREAD
 21250                                  ;
 21251                                  ; Inputs:
 21252                                  ;	DS:BX = Transfer addr
 21253                                  ;	CX = Number of sectors
 21254                                  ;	[HIGH_SECTOR] = Absolute record number (HIGH)
 21255                                  ;	DX = Absolute record number	       (LOW)
 21256                                  ;	ES:BP = Base of drive parameters
 21257                                  ; Function:
 21258                                  ;	Call BIOS to perform disk read
 21259                                  ; Outputs:
 21260                                  ;	DI = CX on entry
 21261                                  ;	CX = Number of sectors unsuccessfully transfered
 21262                                  ;	AX = Status word as returned by BIOS (error code in AL if error)
 21263                                  ;	Zero set if OK (from BIOS) (carry clear)
 21264                                  ;	Zero clear if error (carry clear)
 21265                                  ; SI Destroyed, others preserved
 21266                                  ;---------------------------------------------------------------------------
 21267                                  
 21268                                  DSKREAD:
 21269 000037F3 51                      	PUSH	CX
 21270                                  	;mov	ah,[es:bp+17h] ; 04/05/2019
 21271 000037F4 268A6617                	MOV	AH,[ES:BP+DPB.MEDIA]
 21272                                  	;mov	al,[es:bp+1]
 21273 000037F8 268A4601                	MOV	AL,[ES:BP+DPB.UNIT]
 21274 000037FC 53                      	PUSH	BX
 21275 000037FD 06                      	PUSH	ES
 21276 000037FE E89C0F                  	call	SETREAD
 21277 00003801 EB27                    	JMP	short DODSKOP
 21278                                  
 21279                                  ;Break	<DWRITE -- SEE ABOUT WRITING>
 21280                                  ;--------------------------------------------------------------------------
 21281                                  ;
 21282                                  ; Procedure Name : DWRITE
 21283                                  ;
 21284                                  ; Inputs:
 21285                                  ;	DS:BX = Transfer address
 21286                                  ;	CX = Number of sectors
 21287                                  ;	[HIGH_SECTOR] = Absolute record number (HIGH)
 21288                                  ;	DX = Absolute record number	       (LOW)
 21289                                  ;	ES:BP = Base of drive parameters
 21290                                  ;	[ALLOWED] must be set in case HARDERR called
 21291                                  ; Function:
 21292                                  ;	Calls BIOS to perform disk write. If BIOS reports
 21293                                  ;	errors, will call HARDERRRW for further action.
 21294                                  ; Output:
 21295                                  ;	Carry set if error (currently, user FAILed to I 24)
 21296                                  ; BP preserved. All other registers destroyed.
 21297                                  ;----------------------------------------------------------------------------
 21298                                  
 21299                                  	;entry	DWRITE
 21300                                  DWRITE:
 21301 00003803 E81600                  	CALL	DSKWRITE
 21302 00003806 7413                    	jz	short dw_ret_label	; Carry clear (retz)
 21303                                  
 21304                                  ;hkn; SS override
 21305 00003808 36C606[7505]01          	MOV	BYTE [SS:READOP],1
 21306 0000380E E83A00                  	call	HARDERRRW
 21307 00003811 3C01                    	CMP	AL,1		; Check for retry
 21308 00003813 74EE                    	JZ	short DWRITE
 21309 00003815 3C03                    	CMP	AL,3		; Check for FAIL
 21310 00003817 F8                      	CLC
 21311 00003818 7501                    	JNZ	short NO_CAR2 	; Ignore
 21312 0000381A F9                      	STC
 21313                                  NO_CAR2:
 21314                                  dw_ret_label:
 21315 0000381B C3                      	retn
 21316                                  
 21317                                  ;Break	<DSKWRITE -- PHYSICAL DISK WRITE>
 21318                                  ;---------------------------------------------------------------------------
 21319                                  ;
 21320                                  ; Procedure Name : DSKWRITE
 21321                                  ;
 21322                                  ; Inputs:
 21323                                  ;	DS:BX = Transfer addr
 21324                                  ;	CX = Number of sectors
 21325                                  ;	DX = Absolute record number	       (LOW)
 21326                                  ;	[HIGH_SECTOR] = Absolute record number (HIGH)
 21327                                  ;	ES:BP = Base of drive parameters
 21328                                  ; Function:
 21329                                  ;	Call BIOS to perform disk read
 21330                                  ; Outputs:
 21331                                  ;	DI = CX on entry
 21332                                  ;	CX = Number of sectors unsuccessfully transfered
 21333                                  ;	AX = Status word as returned by BIOS (error code in AL if error)
 21334                                  ;	Zero set if OK (from BIOS) (carry clear)
 21335                                  ;	Zero clear if error (carry clear)
 21336                                  ; SI Destroyed, others preserved
 21337                                  ;
 21338                                  ;----------------------------------------------------------------------------
 21339                                  
 21340                                  	;entry	DSKWRITE
 21341                                  DSKWRITE:
 21342 0000381C 51                      	PUSH	CX
 21343                                  	;mov	ah,[es:bp+17h] ; 04/05/2019
 21344 0000381D 268A6617                	MOV	AH,[ES:BP+DPB.MEDIA]
 21345                                  	;mov	al,[es:bp+1]
 21346 00003821 268A4601                	MOV	AL,[ES:BP+DPB.UNIT]
 21347 00003825 53                      	PUSH	BX
 21348 00003826 06                      	PUSH	ES
 21349 00003827 E8A60F                  	call	SETWRITE
 21350                                  DODSKOP:
 21351 0000382A 8CD9                    	MOV	CX,DS		; Save DS
 21352 0000382C 1F                      	POP	DS		; DS:BP points to DPB
 21353 0000382D 1E                      	PUSH	DS
 21354                                  
 21355                                  	;lds	si,[ds:bp+13h] ; 04/05/2019
 21356 0000382E 3EC57613                	LDS	SI,[ds:BP+DPB.DRIVER_ADDR] ; 07/09/2018
 21357 00003832 E8F20E                  	call	DEVIOCALL2
 21358                                  
 21359 00003835 8ED9                    	MOV	DS,CX		; Restore DS
 21360 00003837 07                      	POP	ES		; Restore ES
 21361 00003838 5B                      	POP	BX
 21362                                  
 21363                                  ;hkn; SS override
 21364 00003839 368B0E[6C03]            	MOV	CX,[SS:CALLSCNT] ; Number of sectors transferred
 21365 0000383E 5F                      	POP	DI
 21366 0000383F 29F9                    	SUB	CX,DI
 21367 00003841 F7D9                    	NEG	CX		; Number of sectors not transferred
 21368                                  
 21369                                  ;hkn; SS override
 21370 00003843 36A1[5D03]              	MOV	AX,[SS:DEVCALL_REQSTAT]
 21371                                  	;test	ax,8000h
 21372                                  	; 17/12/2022
 21373                                  	;test	ah,80h
 21374 00003847 F6C480                  	test	ah,(STERR>>8)
 21375                                  	;test	AX,STERR
 21376 0000384A C3                      	retn
 21377                                  
 21378                                  ;Break	<HardErrRW - map extended errors and call harderr>
 21379                                  ;---------------------------------------------------------------------------
 21380                                  ;
 21381                                  ; Procedure Name : HardErrRW
 21382                                  ;
 21383                                  ; Inputs:
 21384                                  ;	AX is error code from read or write
 21385                                  ;	Other registers set as per HARDERR
 21386                                  ; Function:
 21387                                  ;	Checks the error code for special extended
 21388                                  ;	errors and maps them if needed. Then invokes
 21389                                  ;	Harderr
 21390                                  ; Outputs:
 21391                                  ;	Of HARDERR
 21392                                  ; AX may be modified prior to call to HARDERR.
 21393                                  ; No other registers altered.
 21394                                  ;
 21395                                  ;---------------------------------------------------------------------------
 21396                                  
 21397                                  	; 18/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 21398                                  HARDERRRW:
 21399                                  	;cmp	al,0Fh
 21400 0000384B 3C0F                    	CMP	AL,error_I24_wrong_disk
 21401 0000384D 7512                    	JNZ	short DO_ERR				; Nothing to do
 21402                                  
 21403                                  	; MSDOS 3.3
 21404                                  	;push	ds
 21405                                  	;push	si
 21406                                  	;lds	si,[ss:CALLVIDRW]
 21407                                  	;mov	[ss:EXTERRPT+2], ds
 21408                                  	;mov	[ss:EXTERRPT], si
 21409                                  	;pop	si
 21410                                  	;pop	ds
 21411                                  
 21412                                  	; MSDOS 6.0
 21413 0000384F 50                      	push	ax
 21414 00003850 36A1[7003]              	mov	ax,[SS:CALLVIDRW]		; get ptr lo  ;smr;SS Override
 21415 00003854 36A3[2803]              	mov	[ss:EXTERRPT],ax		; set ext err ptr lo
 21416 00003858 36A1[7203]              	mov	ax,[SS:CALLVIDRW+2]		; get ptr hi from dev
 21417 0000385C 36A3[2A03]              	mov	[ss:EXTERRPT+2],ax		; set ext err ptr hi
 21418 00003860 58                      	pop	ax
 21419                                  DO_ERR:
 21420                                  	;;call	HARDERR
 21421                                  	;;retn
 21422                                  	; 16/12/2022
 21423                                  	; 10/06/2019
 21424 00003861 E9811B                  	jmp	HARDERR	
 21425                                  	; 18/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 21426                                  	;call	HARDERR
 21427                                  	;retn
 21428                                  
 21429                                  ; 24/07/2018 - Retro DOS v3.0
 21430                                  
 21431                                  ;Break	<SETUP -- SETUP A DISK READ OR WRITE FROM USER>
 21432                                  ;----------------------------------------------------------------------------
 21433                                  ;
 21434                                  ; Procedure Name : SETUP
 21435                                  ;
 21436                                  ; Inputs:
 21437                                  ;	ES:DI point to SFT (value also in THISSFT)
 21438                                  ;	DMAAdd contains transfer address
 21439                                  ;	CX = Byte count
 21440                                  ;	DS = DOSDATA
 21441                                  ;   WARNING Stack must be clean, two ret addrs on stack, 1st of caller,
 21442                                  ;		2nd of caller of caller.
 21443                                  ; Outputs:
 21444                                  ;	    CX = byte count
 21445                                  ;	    [THISDPB] = Base of drive parameters if file
 21446                                  ;		      = Pointer to device header if device or NET
 21447                                  ;	    ES:DI Points to SFT
 21448                                  ;	    [NEXTADD] = Displacement of disk transfer within segment
 21449                                  ;	    [TRANS] = 0 (No transfers yet)
 21450                                  ;	    BytPos = Byte position in file
 21451                                  ;
 21452                                  ;	The following fields are relevant to local files (not devices) only:
 21453                                  ;
 21454                                  ;	    SecPos = Position of first sector (local files only)
 21455                                  ;	    [BYTSECPOS] = Byte position in first sector (local files only)
 21456                                  ;	    [CLUSNUM] = First cluster (local files only)
 21457                                  ;	    [SECCLUSPOS] = Sector within first cluster (local files only)
 21458                                  ;	    [THISDRV] = Physical unit number (local files only)
 21459                                  ;
 21460                                  ;      RETURNS ONE LEVEL UP WITH:
 21461                                  ;	   CX = 0
 21462                                  ;	   CARRY = Clear
 21463                                  ;	IF AN ERROR IS DETECTED
 21464                                  ; All other registers destroyed
 21465                                  ;----------------------------------------------------------------------------
 21466                                  
 21467                                  ;hkn; called from disk.asm. DS has been set up to DOSDATA.
 21468                                  
 21469                                  ; DOSCODE:770Bh (MSDOS 6.21, MSDOS.SYS)
 21470                                  
 21471                                  ; 18/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 21472                                  ; DOSCODE:76F7h (MSDOS 5.0, MSDOS.SYS)
 21473                                  
 21474                                  SETUP:
 21475                                  	; IBMDOS.COM (MSDOS 3.3) - Offset 411Bh
 21476                                  
 21477                                  	;lds 	si,[es:di+7]
 21478 00003864 26C57507                	LDS	SI,[ES:DI+SF_ENTRY.sf_devptr]
 21479                                  
 21480                                  ;hkn; SS override
 21481 00003868 368C1E[8C05]            	MOV	[SS:THISDPB+2],DS
 21482                                  
 21483                                  ;hkn; SS is DOSDATA
 21484 0000386D 16                      	push	ss
 21485 0000386E 1F                      	pop	ds
 21486                                  
 21487 0000386F 8936[8A05]              	MOV	[THISDPB],SI
 21488                                  
 21489 00003873 8B1E[2C03]              	MOV	BX,[DMAADD]
 21490 00003877 891E[B805]              	MOV	[NEXTADD],BX		;Set NEXTADD to start of Xaddr
 21491 0000387B C606[7405]00            	MOV	BYTE [TRANS],0		;No transferes
 21492                                  	;mov	ax,[es:di+15h]
 21493 00003880 268B4515                	MOV	AX,[ES:DI+SF_ENTRY.sf_position]
 21494                                  	;mov	dx,[es:di+17h]
 21495 00003884 268B5517                	MOV	DX,[ES:DI+SF_ENTRY.sf_position+2]
 21496 00003888 8916[D005]              	MOV	[BYTPOS+2],DX		;Set it
 21497 0000388C A3[CE05]                	MOV	[BYTPOS],AX
 21498                                  	;test	word [es:di+5],8080h
 21499 0000388F 26F745058080            	TEST	word [ES:DI+SF_ENTRY.sf_flags],sf_isnet+devid_device
 21500 00003895 753C                    	JNZ	short NOSETSTUFF	;Following not done on devs or NET
 21501 00003897 06                      	PUSH	ES
 21502 00003898 C42E[8A05]              	LES	BP,[THISDPB]		;Point at the DPB
 21503                                  
 21504                                  	; 18/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 21505                                  	;;mov	bl,[es:bp+0]
 21506                                  	;MOV	BL,[ES:BP+DPB.DRIVE]
 21507                                  	; 05/12/2022
 21508 0000389C 268A5E00                	mov	bl,[es:bp]
 21509                                  	
 21510 000038A0 881E[7605]              	MOV	[THISDRV],BL		;Set THISDRV
 21511                                  	;mov	bx,[es:bp+2]
 21512 000038A4 268B5E02                	MOV	BX,[ES:BP+DPB.SECTOR_SIZE]
 21513                                  
 21514                                  	;; MSDOS 3.3
 21515                                  	;cmp	dx,bx
 21516                                  	;jnb	short EOFERR
 21517                                  	;div	bx
 21518                                  	;mov	[SECPOS],ax
 21519                                  	;mov	[BYTSECPOS],dx
 21520                                  	;mov	dx,ax
 21521                                  	;;and	al,[es:bp+4]
 21522                                  	;AND	AL,[ES:BP+DPB.CLUSTER_MASK]
 21523                                  	;mov	[SECCLUSPOS],al
 21524                                  	;mov	ax,cx
 21525                                  	;;mov	cl,[es:bp+5]
 21526                                  	;MOV	CL,[ES:BP+DPB.CLUSTER_SHIFT]
 21527                                  	;shr	dx,cl
 21528                                  	;mov	[CLUSNUM],dx
 21529                                  	;pop	es
 21530                                  	;mov	cx,ax
 21531                                  
 21532                                  	; 04/05/2019 - Retro DOS v4.0
 21533                                  
 21534                                  	; MSDOS 6.0
 21535                                  ;M039: Optimized this section.
 21536 000038A8 51                              PUSH    CX			;SHR32 and DIV32 use CX.
 21537 000038A9 E83E05                  	call	DIV32			;DX:AX/BX = CX:AX + DX (rem)
 21538 000038AC 8916[CC05]              	MOV	[BYTSECPOS],DX
 21539 000038B0 A3[C405]                	MOV	[SECPOS],AX
 21540 000038B3 890E[C605]              	MOV	[SECPOS+2],CX
 21541 000038B7 89CA                    	MOV	DX,CX
 21542                                  
 21543 000038B9 89C3                    	MOV	BX,AX
 21544                                  	;and	bl,[es:bp+4]
 21545 000038BB 26225E04                	AND	BL,[ES:BP+DPB.CLUSTER_MASK]
 21546 000038BF 881E[7305]              	MOV	[SECCLUSPOS],BL
 21547                                  
 21548 000038C3 E84B05                  	call	SHR32			;(DX:AX SHR dpb_cluster_shift)
 21549 000038C6 59                      	POP	CX			;CX = byte count.
 21550 000038C7 751F                    	JNZ	short EOFERR		;cluster number above 64k
 21551                                  	;cmp	ax,[es:bp+0Dh]
 21552 000038C9 263B460D                	CMP	AX,[ES:BP+DPB.MAX_CLUSTER] ;>32mb  if > disk size ;AN000;
 21553 000038CD 7719                    	JA	short EOFERR		   ;>32mb  then EOF       ;AN000;
 21554                                  
 21555 000038CF A3[BC05]                	MOV	[CLUSNUM],AX
 21556 000038D2 07                      	POP	ES			; ES:DI point to SFT
 21557                                  ;M039
 21558                                  
 21559                                  NOSETSTUFF:
 21560 000038D3 89C8                    	MOV	AX,CX		; AX = Byte count.
 21561 000038D5 0306[2C03]              	ADD	AX,[DMAADD]	; See if it will fit in one segment
 21562 000038D9 730C                    	JNC	short setup_OK	; Must be less than 64
 21563 000038DB A1[2C03]                	MOV	AX,[DMAADD]
 21564 000038DE F7D8                    	NEG	AX		; Amount of room left in segment (know
 21565                                  				;    less than 64K since max value of CX
 21566                                  				;    is FFFF).
 21567 000038E0 7501                    	JNZ	short NoDec
 21568 000038E2 48                      	DEC	AX
 21569                                  NoDec:
 21570 000038E3 89C1                    	MOV	CX,AX		; Can do this much
 21571 000038E5 E304                    	JCXZ	NOROOM		; Silly user gave Xaddr of FFFF in segment
 21572                                  setup_OK:
 21573 000038E7 C3                      	retn
 21574                                  
 21575                                  EOFERR:
 21576 000038E8 07                      	POP	ES		; ES:DI point to SFT
 21577 000038E9 31C9                    	XOR	CX,CX		; No bytes read
 21578                                  ;;;;;;;;;;; 7/18/86
 21579                                  	; MSDOS 3.3
 21580                                  	;MOV	BYTE [DISK_FULL],1 ; set disk full flag
 21581                                  ;;;;;;;;;;;
 21582                                  NOROOM:
 21583 000038EB 5B                      	POP	BX		; Kill return address
 21584 000038EC F8                      	CLC
 21585 000038ED C3                      	retn			; RETURN TO CALLER OF CALLER
 21586                                  
 21587                                  ;Break	<BREAKDOWN -- CUT A USER READ OR WRITE INTO PIECES>
 21588                                  ;---------------------------------------------------------------------------
 21589                                  ;
 21590                                  ; Procedure Name : BREAKDOWN
 21591                                  ;
 21592                                  ; Inputs:
 21593                                  ;	CX = Length of disk transfer in bytes
 21594                                  ;	ES:BP = Base of drive parameters
 21595                                  ;	[BYTSECPOS] = Byte position within first sector
 21596                                  ;	DS = DOSDATA
 21597                                  ; Outputs:
 21598                                  ;	[BYTCNT1] = Bytes to transfer in first sector
 21599                                  ;	[SECCNT] = No. of whole sectors to transfer
 21600                                  ;	[BYTCNT2] = Bytes to transfer in last sector
 21601                                  ; AX, BX, DX destroyed. No other registers affected.
 21602                                  ;---------------------------------------------------------------------------
 21603                                  
 21604                                  BREAKDOWN:
 21605 000038EE A1[CC05]                	MOV	AX,[BYTSECPOS]
 21606 000038F1 89CB                    	MOV	BX,CX
 21607 000038F3 09C0                    	OR	AX,AX
 21608 000038F5 740E                    	JZ	short SAVFIR	; Partial first sector?
 21609                                  	;sub	ax,[es:bp+2]
 21610 000038F7 262B4602                	SUB	AX,[ES:BP+DPB.SECTOR_SIZE]
 21611 000038FB F7D8                    	NEG	AX		; Max number of bytes left in first sector
 21612 000038FD 29C3                    	SUB	BX,AX		; Subtract from total length
 21613 000038FF 7304                    	JAE	short SAVFIR
 21614 00003901 01D8                    	ADD	AX,BX		; Don't use all of the rest of the sector
 21615 00003903 31DB                    	XOR	BX,BX		; And no bytes are left
 21616                                  SAVFIR:
 21617 00003905 A3[D205]                	MOV	[BYTCNT1],AX
 21618 00003908 89D8                    	MOV	AX,BX
 21619 0000390A 31D2                    	XOR	DX,DX
 21620                                  	;div	word [ES:BP+2]
 21621 0000390C 26F77602                	DIV	word [ES:BP+DPB.SECTOR_SIZE]  ; How many whole sectors?
 21622 00003910 A3[D605]                	MOV	[SECCNT],AX
 21623 00003913 8916[D405]              	MOV	[BYTCNT2],DX	; Bytes remaining for last sector
 21624                                  	; MSDOS 3.3
 21625                                  	;OR	DX,[BYTCNT1]	; SMR ONESECTORFIX BUGBUG
 21626                                  	;retnz			; NOT (BYTCNT1 = BYTCNT2 = 0)
 21627                                  	;CMP	AX,1
 21628                                  	;retnz
 21629                                  	;MOV	AX,[ES:BP+DPB.SECTOR_SIZE] ; Buffer EXACT one sector I/O
 21630                                  	;MOV	[BYTCNT2],AX
 21631                                  	;MOV	[SECCNT],DX	; DX = 0
 21632                                  _RET45:
 21633 00003917 C3                      	retn
 21634                                  
 21635                                  ; DOSCODE:77BFh (MSDOS 6.21, MSDOS.SYS)
 21636                                  
 21637                                  ;----------------------------------------------------------------------------
 21638                                  ;
 21639                                  ; Procedure Name : READ_LOCK_VIOLATION
 21640                                  ;
 21641                                  ; ES:DI points to SFT. This entry used by NET_READ
 21642                                  ; Carry set if to return error (CX=0,AX=error_sharing_violation).
 21643                                  ; Else do retrys.
 21644                                  ; ES:DI,DS,CX preserved
 21645                                  ;
 21646                                  ;----------------------------------------------------------------------------
 21647                                  
 21648                                  READ_LOCK_VIOLATION:
 21649 00003918 C606[7505]00            	MOV	byte [READOP],0
 21650                                  ERR_ON_CHECK:
 21651                                  	;;test	word [es:di+2],8000h
 21652                                  	;TEST	word [ES:DI+SF_ENTRY.sf_mode],sf_isFCB
 21653                                  	;JNZ	short HARD_ERR
 21654                                  
 21655                                  	; 04/05/2019
 21656                                  	;test	byte [es:di+3],80h
 21657 0000391D 26F6450380              	TEST	byte [ES:DI+SF_ENTRY.sf_mode+1],(sf_isFCB>>8)
 21658 00003922 750E                    	JNZ	short HARD_ERR
 21659                                  
 21660 00003924 51                      	PUSH	CX
 21661                                  	;mov	cl,[es:di+2]
 21662 00003925 268A4D02                	MOV	CL,[ES:DI+SF_ENTRY.sf_mode]
 21663                                  	;and	cl,0F0h
 21664 00003929 80E1F0                  	AND	CL,SHARING_MASK
 21665                                  	;cmp	cl,0
 21666 0000392C 80F900                  	CMP	CL,SHARING_COMPAT
 21667 0000392F 59                      	POP	CX
 21668 00003930 7505                    	JNE	short NO_HARD_ERR
 21669                                  HARD_ERR:
 21670 00003932 E8DE3A                  	call	LOCK_VIOLATION
 21671 00003935 73E0                    	jnc	short _RET45		; User wants Retrys
 21672                                  NO_HARD_ERR:
 21673 00003937 31C9                    	XOR	CX,CX			;No bytes transferred
 21674                                  	;mov	ax,21h
 21675 00003939 B82100                  	MOV	AX,error_lock_violation
 21676 0000393C F9                      	STC
 21677 0000393D C3                      	retn
 21678                                  
 21679                                  ;----------------------------------------------------------------------------
 21680                                  ;
 21681                                  ; Procedure Name : WRITE_LOCK_VIOLATION
 21682                                  ;
 21683                                  ; Same as READ_LOCK_VIOLATION except for READOP.
 21684                                  ; This entry used by NET_WRITE
 21685                                  ;
 21686                                  ;----------------------------------------------------------------------------
 21687                                  
 21688                                  WRITE_LOCK_VIOLATION:
 21689 0000393E C606[7505]01            	MOV	byte [READOP],1
 21690 00003943 EBD8                    	JMP	short ERR_ON_CHECK
 21691                                  
 21692                                  ; 04/05/2019 - Retro DOS v4.0
 21693                                  
 21694                                  ; DOSCODE:77ECh (MSDOS 6.21, MSDOS.SYS)
 21695                                  
 21696                                  ;Break	<DISKREAD -- PERFORM USER DISK READ>
 21697                                  ;----------------------------------------------------------------------------
 21698                                  ;
 21699                                  ; Procedure Name : DISKREAD
 21700                                  ;
 21701                                  ; Inputs:
 21702                                  ;	Outputs of SETUP
 21703                                  ; Function:
 21704                                  ;	Perform disk read
 21705                                  ; Outputs:
 21706                                  ;    Carry clear
 21707                                  ;	CX = No. of bytes read
 21708                                  ;	ES:DI point to SFT
 21709                                  ;	SFT offset and cluster pointers updated
 21710                                  ;    Carry set
 21711                                  ;	CX = 0
 21712                                  ;	ES:DI point to SFT
 21713                                  ;	AX has error code
 21714                                  ;----------------------------------------------------------------------------
 21715                                  
 21716                                  ;hkn; called from disk.asm. DS already set up.
 21717                                  
 21718                                  ; 18/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 21719                                  ; DOSCODE:77D8h (MSDOS 5.0, MSDOS.SYS)
 21720                                  
 21721                                  DISKREAD:
 21722                                  	;mov	ax,[es:di+11h]
 21723 00003945 268B4511                	MOV	AX,[ES:DI+SF_ENTRY.sf_size]
 21724                                  	;mov	bx,[es:di+13h]
 21725 00003949 268B5D13                	MOV	BX,[ES:DI+SF_ENTRY.sf_size+2]
 21726 0000394D 2B06[CE05]              	SUB	AX,[BYTPOS]
 21727 00003951 1B1E[D005]              	SBB	BX,[BYTPOS+2]
 21728 00003955 7226                    	JB	short RDERR		;Read starts past EOF
 21729 00003957 750A                    	JNZ	short ENUF		;More than 64k to EOF
 21730 00003959 09C0                    	OR	AX,AX
 21731 0000395B 7420                    	JZ	short RDERR		;Read starts at EOF
 21732 0000395D 39C8                    	CMP	AX,CX
 21733 0000395F 7302                    	JAE	short ENUF		;I/O fits
 21734 00003961 89C1                    	MOV	CX,AX			;Limit read to up til EOF
 21735                                  ENUF:
 21736                                  	; MSDOS 3.3
 21737                                  	;test	byte [es:di+4],8
 21738                                  	;TEST	byte [ES:DI+SF_ENTRY.sf_attr],attr_volume_id
 21739                                  	;jnz	short SET_ACC_ERR
 21740                                  	;call	LOCK_CHECK
 21741                                  	;jnb	short _READ_OK
 21742                                  	;call	READ_LOCK_VIOLATION
 21743                                  	;jnb	short ENUF
 21744                                  	;retn
 21745                                  
 21746                                  	; MSDOS 6.0
 21747 00003963 E876FE                  	call	CHECK_READ_LOCK		;IFS. check read lock	;AN000;
 21748 00003966 7301                    	JNC	short _READ_OK 		; There are no locks
 21749 00003968 C3                      	retn
 21750                                  
 21751                                  _READ_OK:
 21752 00003969 C42E[8A05]              	LES	BP,[THISDPB]
 21753 0000396D E87EFF                  	CALL	BREAKDOWN
 21754 00003970 8B0E[BC05]              	MOV	CX,[CLUSNUM]
 21755                                  
 21756 00003974 E8AD13                  	call	FNDCLUS
 21757                                       	; MSDOS 6.0			;M022 conditional removed here
 21758 00003977 720E                    	JC	short SET_ACC_ERR_DS	; fix to take care of I24 fail
 21759                                  					; migrated from 330a - HKN
 21760 00003979 09C9                    	OR	CX,CX
 21761 0000397B 7413                    	JZ	short SKIPERR
 21762                                  RDERR:
 21763 0000397D B40E                    	MOV	AH,0EH			;MS. read/data/fail ;AN000;
 21764 0000397F E92502                  	jmp	WRTERR22
 21765                                  
 21766                                  ;RDLASTJ: 
 21767                                  	;JMP	RDLAST                  ;M039
 21768                                  
 21769                                  SETSFTJ2: 
 21770 00003982 E99600                  	JMP	SETSFT
 21771                                  
 21772                                  CANOT_READ:
 21773                                  	; MSDOS 3.3
 21774                                  	;POP	CX		;M039.
 21775                                  	; MSDOS 3.3 & MSDOS 6.0
 21776 00003985 59                      	POP	CX              ;Clean stack.
 21777 00003986 5B                      	POP	BX
 21778                                  
 21779                                  	;entry	SET_ACC_ERR_DS
 21780                                  SET_ACC_ERR_DS:
 21781                                  
 21782                                  ;hkn; SS is DOSDATA
 21783                                  	;Context DS
 21784 00003987 16                      	push	ss
 21785 00003988 1F                      	pop	ds
 21786                                  
 21787                                  	;entry	SET_ACC_ERR
 21788                                  SET_ACC_ERR:
 21789 00003989 31C9                    	XOR	CX,CX
 21790                                  	;mov	ax,5
 21791 0000398B B80500                  	MOV	AX,error_access_denied
 21792 0000398E F9                      	STC
 21793 0000398F C3                      	retn
 21794                                  
 21795                                  SKIPERR:
 21796 00003990 8916[BA05]              	MOV	[LASTPOS],DX
 21797 00003994 891E[BC05]              	MOV	[CLUSNUM],BX
 21798 00003998 833E[D205]00            	CMP	word [BYTCNT1],0
 21799 0000399D 7405                    	JZ	short RDMID
 21800                                  
 21801 0000399F E8F813                  	call	BUFRD
 21802 000039A2 72E3                    	JC	short SET_ACC_ERR_DS
 21803                                  
 21804                                  RDMID:
 21805 000039A4 833E[D605]00            	CMP	word [SECCNT],0
 21806                                  	;JZ	RDLAST ; 10/08/2018
 21807 000039A9 7453                    	jz	short RDLAST
 21808                                  
 21809 000039AB E88514                  	call	NEXTSEC
 21810 000039AE 72D2                    	JC	short SETSFTJ2
 21811                                  
 21812 000039B0 C606[7405]01            	MOV	BYTE [TRANS],1		; A transfer is taking place
 21813                                  ONSEC:
 21814 000039B5 8A16[7305]              	MOV	DL,[SECCLUSPOS]	; (dx/DL = Extent start) ((dh = ?))
 21815 000039B9 8B0E[D605]              	MOV	CX,[SECCNT]
 21816 000039BD 8B1E[BC05]              	MOV	BX,[CLUSNUM]
 21817                                  RDLP:
 21818 000039C1 E8A014                  	call	OPTIMIZE
 21819 000039C4 72C1                    	JC	short SET_ACC_ERR_DS
 21820                                  
 21821 000039C6 57                      	PUSH	DI                      ;DI = Next physical cluster.
 21822 000039C7 50                      	PUSH	AX                      ;AX = # of sectors remaining.
 21823 000039C8 53                      	PUSH	BX			;[DMAADD+2]:BX = Transfer address.
 21824                                  	;mov	byte [ALLOWED],38h
 21825 000039C9 C606[4B03]38            	MOV	byte [ALLOWED],Allowed_RETRY+Allowed_FAIL+Allowed_IGNORE
 21826 000039CE 8E1E[2E03]              	MOV	DS,[DMAADD+2]
 21827                                  
 21828 000039D2 52                      	PUSH	DX                      ;[HIGH_SECTOR]:DX = phys. sector #.
 21829 000039D3 51                      	PUSH	CX                      ;CX = # of contiguous sectors to read.
 21830                                  
 21831                                  	; 04/05/2019 - Retro DOS v4.0
 21832                                  
 21833                                  	; MSDOS 6.0
 21834 000039D4 E85D22                  	call	SET_RQ_SC_PARMS		;LB. do this for SC ;AN000;
 21835                                  
 21836                                  	; MSDOS 3.3 (& MSDOS 6.0)
 21837 000039D7 E8C9FD                  	call	DREAD
 21838                                  
 21839                                  	; MSDOS 3.3 
 21840                                  	;pop	bx
 21841                                  	;pop	dx
 21842                                  	;jc	short CANOT_READ
 21843                                  	;add	bx,dx	; (bx = Extent end)
 21844                                  	;mov	al,[es:bp] ; mov al,[es:bp+0]
 21845                                  	;;mov	al,[ES:BP+DPB.DRIVE] 
 21846                                  	;call	SETVISIT
 21847                                  	; ->***
 21848                                  ;M039
 21849                                  	; MSDOS 6.0 
 21850 000039DA 59                      	pop	cx
 21851 000039DB 5A                      	pop	dx
 21852 000039DC 368F06[0C06]            	pop	WORD [ss:TEMP_VAR]
 21853 000039E1 72A2                    	jc	short CANOT_READ
 21854                                  
 21855 000039E3 368C1E[0E06]            	mov	[ss:TEMP_VAR2],ds
 21856                                  
 21857                                  ;       CX = # of contiguous sectors read. (These constitute a block of
 21858                                  ;            sectors, also termed an "Extent".)
 21859                                  ;       [HIGH_SECTOR]:DX = physical sector # of first sector in extent.
 21860                                  ;       [TEMP_VAR2]:[TEMP_VAR] = Transfer address (destination data address).
 21861                                  ;       ES:BP -> Drive Parameter Block (DPB).
 21862                                  ;
 21863                                  ;	The Buffer Queue must now be scanned: the contents of any dirty
 21864                                  ;	buffers must be "read" into the transfer memory block, so that the
 21865                                  ;       transfer memory reflects the most recent data.
 21866                                  
 21867 000039E8 E85E00                  	call	DskRdBufScan
 21868                                  
 21869                                  	;Context DS
 21870 000039EB 16                      	push	ss
 21871 000039EC 1F                      	pop	ds
 21872                                          
 21873 000039ED 59                      	pop	cx
 21874 000039EE 5B                              pop	bx
 21875                                  
 21876                                  ;       CX = # of sector remaining.
 21877                                  ;       BX = Next physical cluster.
 21878                                  
 21879                                  ;M039
 21880                                  
 21881                                  ;;;;;;;;
 21882                                  ;	; 25/07/2018 - Retro DOS v3.0
 21883                                  ;	; ***->
 21884                                  ;	; MSDOS 3.3
 21885                                  ;	; IBMDOS.COM (1987) - Offset 42BDh
 21886                                  ;bufq:
 21887                                  ;;	DX = Extent start.
 21888                                  ;;	BX = Extent end.
 21889                                  ;;	 AL = Drive #.
 21890                                  ;;     DS:DI-> 1st buffer in queue.
 21891                                  ;
 21892                                  ;	;or	byte [di+5],20h
 21893                                  ;	or	byte [DI+BUFFINFO.buf_flags],buf_visit ; Bit 5 = reserved
 21894                                  ;	;cmp	al,[di+4]	
 21895                                  ;	cmp	al,[DI+BUFFINFO.buf_ID]
 21896                                  ;	jnz	short bufq3
 21897                                  ;	;cmp	[di+6],dx
 21898                                  ;	cmp	[DI+BUFFINFO.buf_sector],dx
 21899                                  ;	jb	short bufq3	; Jump if Extent start > buffer sector.
 21900                                  ;	;cmp	[di+6],bx
 21901                                  ;	cmp	[DI+BUFFINFO.buf_sector],bx
 21902                                  ;	jnb	short bufq3	; Jump if Extent end >= buffer sector.
 21903                                  ;	
 21904                                  ;	; Buffer sector is in the Extent (contiguous sectors to read)
 21905                                  ;
 21906                                  ;;      Buffer's sector is in Extent: if it is dirty, copy its contents to
 21907                                  ;;      transfer memory; otherwise, just re-position it in the buffer queue
 21908                                  ;;      as MRU (Most Recently Used).
 21909                                  ;
 21910                                  ;	;test	byte [di+5],40h
 21911                                  ;	test	byte [DI+BUFFINFO.buf_flags],buf_dirty ; Bit 6 = dirty flag
 21912                                  ;	jz	short bufq2	; clear buffer, check the next buff sec
 21913                                  ;	pop	ax ; transfer address
 21914                                  ;	push	ax
 21915                                  ;	push	di
 21916                                  ;	push	dx
 21917                                  ;	;sub	dx,[di+6]
 21918                                  ;	sub	dx,[DI+BUFFINFO.buf_sector]
 21919                                  ;	neg	dx
 21920                                  ;
 21921                                  ;;      DX = offset (in sectors) of buffer sector within Transfer memory
 21922                                  ;;           block.
 21923                                  ;
 21924                                  ;	mov	si,di
 21925                                  ;	mov	di,ax
 21926                                  ;	mov	ax,dx
 21927                                  ;	;mov	cx,[es:bp+6]	
 21928                                  ;	mov     cx,[ES:BP+DPB.SECTOR_SIZE] ; CX = sector size (in bytes).
 21929                                  ;	mul	cx
 21930                                  ;	add	di,ax
 21931                                  ;
 21932                                  ;	lea	si,[si+16]
 21933                                  ;	lea	si,[SI+BUFINSIZ] ;DS:SI -> buffer data.
 21934                                  ;	shr	cx,1
 21935                                  ;	push	es
 21936                                  ;	mov	es,[SS:DMAADD+2]
 21937                                  ;
 21938                                  ;;      CX = sector size (in WORDs) ; CF=1 if odd # of bytes.
 21939                                  ;;      DS:SI-> Buffer sector data.
 21940                                  ;;      ES:DI-> Destination within Transfer memory block.
 21941                                  ;
 21942                                  ;	rep	movsw			;Copy buffer sector to Transfer memory
 21943                                  ;	;adc	cx,0                    ;CX=1 if odd # of bytes, else CX=0.
 21944                                  ;	;rep	movsb                   ;Copy last byte.
 21945                                  ;	jnc	short bufq1
 21946                                  ;	movsb
 21947                                  ;bufq1:
 21948                                  ;	pop	es
 21949                                  ;	pop	dx
 21950                                  ;	pop	di
 21951                                  ;	mov	al,[es:bp]  ; mov al,[es:bp+0]
 21952                                  ;	;mov	al,[ES:BP+DPB.DRIVE]
 21953                                  ;bufq2:
 21954                                  ;	call	SCANPLACE
 21955                                  ;bufq3:
 21956                                  ;	call	SKIPVISIT
 21957                                  ;	jnz	short bufq
 21958                                  ;	
 21959                                  ;	push	ss
 21960                                  ;	pop	ds
 21961                                  ;	pop	cx
 21962                                  ;	pop	cx
 21963                                  ;	pop	bx	
 21964                                  ;bufq4:
 21965                                  ;;;;;;;
 21966 000039EF E30D                    	JCXZ	RDLAST
 21967                                  
 21968 000039F1 E8141C                  	call	IsEOF			; test for eof on fat size
 21969 000039F4 7325                    	JAE	short SETSFT
 21970                                  
 21971 000039F6 B200                    	MOV	DL,0
 21972 000039F8 FF06[BA05]              	INC	word [LASTPOS]		; We'll be using next cluster
 21973 000039FC EBC3                    	JMP	short RDLP ; 19/05/2019
 21974                                  
 21975                                  RDLAST:
 21976 000039FE A1[D405]                	MOV	AX,[BYTCNT2]
 21977 00003A01 09C0                    	OR	AX,AX
 21978 00003A03 7416                    	JZ	short SETSFT
 21979 00003A05 A3[D205]                	MOV	[BYTCNT1],AX
 21980                                  
 21981 00003A08 E82814                  	call	NEXTSEC
 21982 00003A0B 720E                    	JC	short SETSFT
 21983                                  
 21984 00003A0D C706[CC05]0000          	MOV	word [BYTSECPOS],0
 21985 00003A13 E88413                  	call	BUFRD
 21986                                  	; 10/08/2018
 21987                                  
 21988 00003A16 7303                    	JNC	short SETSFT
 21989 00003A18 E96CFF                  	JMP	SET_ACC_ERR_DS
 21990                                  
 21991                                  ;------------------------------------------------------------------------------
 21992                                  ;
 21993                                  ; Procedure Name : SETSFT
 21994                                  ; Inputs:
 21995                                  ;	[NEXTADD],[CLUSNUM],[LASTPOS] set to determine transfer size
 21996                                  ;		and set cluster fields
 21997                                  ; Function:
 21998                                  ;	Update [THISSFT] based on the transfer
 21999                                  ; Outputs:
 22000                                  ;	sf_position, sf_lstclus, and sf_cluspos updated
 22001                                  ;	ES:DI points to [THISSFT]
 22002                                  ;	CX No. of bytes transferred
 22003                                  ;	Carry clear
 22004                                  ;
 22005                                  ;----------------------------------------------------------------------------
 22006                                  
 22007                                  	;entry	SETSFT
 22008                                  
 22009                                  ; 26/07/2018 - Retro DOS v3.0
 22010                                  SETSFT:
 22011 00003A1B C43E[9E05]              	LES	DI,[THISSFT]
 22012                                  
 22013                                  ; Same as SETSFT except ES:DI already points to SFT
 22014                                  	;entry	SETCLUS
 22015                                  SETCLUS:	
 22016 00003A1F 8B0E[B805]              	MOV	CX,[NEXTADD]
 22017 00003A23 2B0E[2C03]              	SUB	CX,[DMAADD]		; Number of bytes transfered
 22018                                  	;;test	word [es:di+5],80h
 22019                                  	;TEST	word [ES:DI+SF_ENTRY.sf_flags],devid_device
 22020                                  	;JNZ	short ADDREC		; don't set clusters if device
 22021                                  
 22022                                  	; 04/05/2019 - Retro DOS v4.0
 22023                                  	;test	byte [es:di+5],80h
 22024 00003A27 26F6450580              	TEST	byte [ES:DI+SF_ENTRY.sf_flags],devid_device
 22025 00003A2C 750E                    	JNZ	short ADDREC		; don't set clusters if device
 22026                                  
 22027 00003A2E A1[BC05]                	MOV	AX,[CLUSNUM]
 22028                                  	;;mov	[es:di+1Bh],ax ; MSDOS 3.3
 22029                                  	;mov	[es:di+35h],ax ; MSDOS 6.0 (& MSDOS 6.21)
 22030 00003A31 26894535                	MOV	[ES:DI+SF_ENTRY.sf_lstclus],AX
 22031 00003A35 A1[BA05]                	MOV	AX,[LASTPOS]
 22032                                  	;mov	[es:di+19h],ax
 22033 00003A38 26894519                	MOV	[ES:DI+SF_ENTRY.sf_cluspos],AX
 22034                                  
 22035                                  ;----------------------------------------------------------------------------
 22036                                  ;
 22037                                  ; Procedure : AddRec
 22038                                  ; Inputs:
 22039                                  ;	ES:DI points to SFT
 22040                                  ;	CX is No. Bytes transferred
 22041                                  ; Function:
 22042                                  ;	Update the SFT offset based on the transfer
 22043                                  ; Outputs:
 22044                                  ;	sf_position updated to point to first byte after transfer
 22045                                  ;	ES:DI points to SFT
 22046                                  ;	CX No. of bytes transferred
 22047                                  ;	Carry clear
 22048                                  ;----------------------------------------------------------------------------
 22049                                  
 22050                                  	;entry	AddRec
 22051                                  ADDREC:
 22052 00003A3C E309                    	JCXZ	RET28		; If no records read,  don't change position
 22053                                  	;add	[es:di+15h],cx
 22054 00003A3E 26014D15                	ADD	[ES:DI+SF_ENTRY.sf_position],CX  ; Update current position
 22055                                  	;adc	word [es:di+17h], 0
 22056 00003A42 2683551700              	ADC	WORD [ES:DI+SF_ENTRY.sf_position+2],0
 22057                                  RET28:	
 22058 00003A47 F8                      	CLC
 22059 00003A48 C3                      	retn
 22060                                  
 22061                                  ; 25/07/2018
 22062                                  ; MSDOS 6.0
 22063                                  ;Break   <DskRdBufScan -- Disk Read Buffer Scan>
 22064                                  ;----------------------------------------------------------------------------
 22065                                  ;
 22066                                  ; Procedure Name : DskRdBufScan
 22067                                  ;
 22068                                  ; Inputs:
 22069                                  ;       CX = # of contiguous sectors read. (These constitute a block of
 22070                                  ;            sectors, also termed an "Extent".)
 22071                                  ;       [HIGH_SECTOR]:DX = physical sector # of first sector in extent.
 22072                                  ;       [TEMP_VAR2]:[TEMP_VAR] = Transfer address (destination data address).
 22073                                  ;       ES:BP -> Drive Parameter Block (DPB).
 22074                                  ;
 22075                                  ; Function:
 22076                                  ;	The Buffer Queue is scanned: the contents of any dirty buffers are
 22077                                  ;	"read" into the transfer memory block, so that the transfer memory
 22078                                  ;	reflects the most recent data.
 22079                                  ;
 22080                                  ; Outputs:
 22081                                  ;       Transfer memory updated as required.
 22082                                  ;
 22083                                  ; Uses:
 22084                                  ;       DS,AX,BX,CX,SI,DI destroyed.
 22085                                  ;       SS override for all global variables.
 22086                                  ;
 22087                                  ; Notes:
 22088                                  ;       FIRST_BUFF_ADDR is set-up to contain the LAST buffer to check, rather
 22089                                  ;	than the FIRST.
 22090                                  ;----------------------------------------------------------------------------
 22091                                  ;M039: Created
 22092                                  
 22093                                  ; 04/05/2019 - Retro DOS v4.0
 22094                                  ; DOSCODE:78F0h (MSDOS 6.21, MSDOS.SYS)
 22095                                  
 22096                                  ; 18/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 22097                                  ; DOSCODE:78DCh (MSDOS 5.0, MSDOS.SYS) 
 22098                                  
 22099                                  ;procedure DskRdBufScan,NEAR
 22100                                  ;
 22101                                  ;ASSUME  DS:NOTHING
 22102                                  
 22103                                  DskRdBufScan:
 22104 00003A49 36833E[7100]00          	cmp	word [ss:DirtyBufferCount],0 ; Any dirty buffers?
 22105 00003A4F 743C                    	je	short bufx		     ; -no, skip all work.
 22106                                  
 22107 00003A51 368B1E[0706]            	mov     bx,[ss:HIGH_SECTOR]
 22108 00003A56 89DE                    	mov     si,bx
 22109 00003A58 01D1                    	add     cx,dx
 22110 00003A5A 83D600                  	adc     si,0
 22111                                  
 22112 00003A5D E87C1F                  	call	GETCURHEAD		;DS:DI -> 1st buf in queue.
 22113                                  	;mov	ax,[di+2]
 22114 00003A60 8B4502                  	mov     ax,[di+BUFFINFO.buf_prev]
 22115 00003A63 36A3[BA0E]              	mov     [ss:FIRST_BUFF_ADDR],ax
 22116                                  		
 22117                                  	; 18/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 22118                                  	;;mov	al,[es:bp+0]
 22119                                  	;mov	al,[es:bp+DPB.DRIVE]
 22120                                  	; 15/12/2022
 22121 00003A67 268A4600                	mov	al,[es:bp]
 22122                                  
 22123                                  ;       BX:DX = Extent start.
 22124                                  ;       SI:CX = Extent end + 1.
 22125                                  ;          AL = Drive #.
 22126                                  ;       DS:DI-> 1st buffer in queue.
 22127                                  ;[FIRST_BUFF_ADDR] = Address offset of last buffer in queue.
 22128                                  
 22129                                  bufq:	
 22130                                  	;cmp	al,[di+4]
 22131 00003A6B 3A4504                  	cmp     al,[di+BUFFINFO.buf_ID] ;Same drive?
 22132 00003A6E 7514                    	jne	short bufq1        	;  -no, jump.
 22133                                  
 22134                                  ;       Cmp32   bx,dx,<WORD PTR [di.buf_sector+2]>,<WORD PTR [di.buf_sector]>
 22135                                  ;       ja	short bufq1		;Jump if Extent start > buffer sector.
 22136                                  
 22137                                  	;cmp	bx,[di+8]
 22138 00003A70 3B5D08                  	cmp	bx,[di+BUFFINFO.buf_sector+2]
 22139 00003A73 7503                    	jne	short bufq01
 22140                                  	;cmp	dx,[di+6]
 22141 00003A75 3B5506                  	cmp	dx,[di+BUFFINFO.buf_sector]
 22142                                  bufq01:
 22143 00003A78 770A                    	ja	short bufq1
 22144                                  
 22145                                  ;       Cmp32   si,cx,<WORD PTR [di.buf_sector+2]>,<WORD PTR [di.buf_sector]>
 22146                                  ;       ja	short bufq2		;Jump if Extent end >= buffer sector.
 22147                                  
 22148                                  	;cmp	si,[di+8]
 22149 00003A7A 3B7508                  	cmp	si,[di+BUFFINFO.buf_sector+2]
 22150 00003A7D 7503                    	jne	short bufq02
 22151                                  	;cmp	cx,[di+6]
 22152 00003A7F 3B4D06                  	cmp	cx,[di+BUFFINFO.buf_sector]
 22153                                  bufq02:
 22154 00003A82 770A                    	ja	short bufq2
 22155                                  bufq1:	
 22156 00003A84 363B3E[BA0E]            	cmp     di,[ss:FIRST_BUFF_ADDR]	;Scanned entire buffer queue?
 22157 00003A89 8B3D                    	mov	di,[di]
 22158                                  	;mov	di,[di+BUFFINFO.buf_next] ; Set-up for next buffer.
 22159 00003A8B 75DE                    	jne	short bufq		; -no, do next buffer
 22160                                  bufx:
 22161 00003A8D C3                      	retn				;Exit.
 22162                                  
 22163                                  ;       Buffer's sector is in Extent: if it is dirty, copy its contents to
 22164                                  ;	transfer memory; otherwise, just re-position it in the buffer queue
 22165                                  ;       as MRU (Most Recently Used).
 22166                                  
 22167                                  bufq2:	
 22168 00003A8E 50                      	push	ax
 22169                                  	;test	byte [di+5],40h
 22170 00003A8F F6450540                	test	byte [di+BUFFINFO.buf_flags],buf_dirty ;Buffer dirty?
 22171 00003A93 742F                    	jz	short bufq3                    ; -no, jump.
 22172                                  
 22173                                  ;       SaveReg <cx,dx,si,di,es>
 22174 00003A95 51                      	push	cx
 22175 00003A96 52                      	push	dx
 22176 00003A97 56                      	push	si
 22177 00003A98 57                      	push	di
 22178 00003A99 06                      	push	es
 22179                                  
 22180 00003A9A 89D0                    	mov     ax,dx
 22181                                  	;sub	ax,[di+6]
 22182 00003A9C 2B4506                  	sub	ax,[di+BUFFINFO.buf_sector]
 22183 00003A9F F7D8                    	neg	ax
 22184                                  
 22185                                  ;       AX = offset (in sectors) of buffer sector within Transfer memory
 22186                                  ;            block. (Note: the upper word of the sector # may be ignored
 22187                                  ;	     since no more than 64k bytes will ever be read. This 64k limit
 22188                                  ;            is imposed by the input parameters of the disk read operation.)
 22189                                  
 22190                                  	;lea	si,[di+20]
 22191 00003AA1 8D7514                  	lea	si,[di+BUFINSIZ]	;DS:SI -> buffer data.
 22192                                  	;mov	cx,[es:bp+2]
 22193 00003AA4 268B4E02                	mov     cx,[es:bp+DPB.SECTOR_SIZE] ;CX = sector size (in bytes).
 22194 00003AA8 F7E1                    	mul     cx			;AX = offset (in bytes) of buf. sector
 22195 00003AAA 368B3E[0C06]            	mov     di,[ss:TEMP_VAR]
 22196 00003AAF 01C7                    	add	di,ax
 22197 00003AB1 368E06[0E06]            	mov	es,[ss:TEMP_VAR2]
 22198 00003AB6 D1E9                    	shr	cx,1
 22199                                  
 22200                                  ;	   CX = sector size (in WORDs) ; CF=1 if odd # of bytes.
 22201                                  ;       DS:SI-> Buffer sector data.
 22202                                  ;       ES:DI-> Destination within Transfer memory block.
 22203                                  
 22204 00003AB8 F3A5                    	rep	movsw			;Copy buffer sector to Transfer memory
 22205                                  	;; 04/05/2019
 22206                                  	;;adc	cx,0                    ;CX=1 if odd # of bytes, else CX=0.
 22207                                  	;;rep	movsb                   ;Copy last byte.
 22208                                  	;jnc	short bufq03	
 22209                                  	;movsb
 22210                                  	; 18/11/2022 (MSDOS 5.0 MSDOS.SYS compability)
 22211 00003ABA 83D100                  	adc	cx,0
 22212 00003ABD F3A4                    	rep	movsb
 22213                                  bufq03:
 22214                                  	;RestoreReg <es,di,si,dx,cx>
 22215 00003ABF 07                      	pop	es
 22216 00003AC0 5F                      	pop	di
 22217 00003AC1 5E                      	pop	si
 22218 00003AC2 5A                      	pop	dx
 22219 00003AC3 59                      	pop	cx
 22220                                  
 22221                                  ;       DS:DI -> current buffer.
 22222                                  bufq3:	
 22223 00003AC4 89F8                    	mov     ax,di			;DS:AX -> Current buffer.
 22224                                          ;invoke SCANPLACE
 22225 00003AC6 E8251F                  	call	SCANPLACE
 22226 00003AC9 363B06[BA0E]            	cmp	ax,[ss:FIRST_BUFF_ADDR] ;Last buffer?
 22227 00003ACE 58                      	pop	ax
 22228                                  	;jne	short bufq		; -no, jump.
 22229                                  	;;jmp	short bufx		; -yes, exit.
 22230                                  	;; 12/06/2019
 22231                                  	;retn
 22232                                  	; 18/11/2022 (MSDOS 5.0 MSDOS.SYS compability)
 22233 00003ACF 759A                    	jne	short bufq
 22234 00003AD1 EBBA                    	jmp	short bufx
 22235                                  
 22236                                  ;EndProc DskRdBufScan
 22237                                  
 22238                                  ;============================================================================
 22239                                  ; DISK3.ASM, MSDOS 6.0, 1991
 22240                                  ;============================================================================
 22241                                  ; 04/05/2019 - Retro DOS v4.0
 22242                                  ; 24/07/2018 - Retro DOS v3.0
 22243                                  
 22244                                  ;Break   <DISKWRITE -- PERFORM USER DISK WRITE>
 22245                                  ;----------------------------------------------------------------------------
 22246                                  ;
 22247                                  ; Procedure Name : DISKWRITE
 22248                                  ;
 22249                                  ; Inputs:
 22250                                  ;       Outputs of SETUP
 22251                                  ; Function:
 22252                                  ;       Perform disk write
 22253                                  ; Outputs:
 22254                                  ;    Carry clear
 22255                                  ;       CX = No. of bytes written
 22256                                  ;       ES:DI point to SFT
 22257                                  ;       SFT offset and cluster pointers updated
 22258                                  ;    Carry set
 22259                                  ;       CX = 0
 22260                                  ;       ES:DI point to SFT
 22261                                  ;       AX has error code
 22262                                  ;----------------------------------------------------------------------------
 22263                                  
 22264                                  ;hkn; called by DOS_WRITE. DS already set up at this point.
 22265                                  
 22266                                  ; DOSCODE:797Ah (MSDOS 6.21, MSDOS.SYS)
 22267                                  
 22268                                  ; 20/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 22269                                  ; DOSCODE:7966h (MSDOS 5.0, MSDOS.SYS) 
 22270                                  
 22271                                  DISKWRITE:
 22272                                  	; MSDOS 3.3
 22273                                  	; IBMDOS.COM - Offset 436Dh
 22274                                  	;;test	byte [es:di+4],8
 22275                                  	;TEST	byte [ES:DI+SF_ENTRY.sf_attr],attr_volume_id
 22276                                  	;jz	short write_cont
 22277                                  	;jmp	SET_ACC_ERR_DS
 22278                                  ;write_cont:
 22279                                  	;push	cx
 22280                                  	;or	cx,cx
 22281                                  	;jnz	short Not_Truncate
 22282                                  	;;mov	cx,-1
 22283                                  	;dec	cx
 22284                                  ;Not_Truncate:
 22285                                  	;call	LOCK_CHECK
 22286                                  	;pop	cx
 22287                                  	;jnb	short _WRITE_OK
 22288                                  	;call	WRITE_LOCK_VIOLATION
 22289                                  	;jnb	short DISKWRITE
 22290                                  	;retn
 22291                                  
 22292                                  	; MSDOS 6.0
 22293 00003AD3 E8E8FC                  	call	CHECK_WRITE_LOCK	;IFS. check write lock	;AN000;
 22294                                  	; 19/08/2018
 22295 00003AD6 7304                    	JNC	short _WRITE_OK		;IFS. lock check ok	;AN000;
 22296 00003AD8 C3                      	retn
 22297                                  
 22298                                  WRTEOFJ:
 22299 00003AD9 E9DE01                  	JMP     WRTEOF
 22300                                  
 22301                                  _WRITE_OK:
 22302                                   	; 27/07/2018
 22303                                  	; IBMDOS.COM - Offset 438Eh
 22304                                  	
 22305                                  	; MSDOS 3.3 (& MSDOS 6.0)
 22306                                  	;and	word [es:di+5],0BFBFh
 22307 00003ADC 26816505BFBF            	AND     word [ES:DI+SF_ENTRY.sf_flags],~(sf_close_nodate|devid_file_clean)
 22308                                  				; Mark file as dirty, clear no date on close
 22309                                  
 22310                                  	; 04/05/2019 - Retro DOS v4.0	
 22311                                  
 22312                                  	; MSDOS 6.0
 22313                                  	; mov 	ax,[es:di+11h]
 22314 00003AE2 268B4511                	MOV	AX,[ES:DI+SF_ENTRY.sf_size]		;M039
 22315 00003AE6 A3[0C06]                        MOV	[TEMP_VAR],AX                           ;M039
 22316                                  	;mov	ax,[es:di+13h]
 22317 00003AE9 268B4513                	MOV	AX,[ES:DI+SF_ENTRY.sf_size+2]		;M039
 22318 00003AED A3[0E06]                        MOV	[TEMP_VAR2],AX                          ;M039
 22319                                  
 22320                                  ;	TEMP_VAR2:TEMP_VAR = Current file size (sf_size);M039
 22321                                  
 22322                                  	; MSDOS 3.3 (& MSDOS 6.0)
 22323 00003AF0 C42E[8A05]              	LES     BP,[THISDPB]
 22324                                  
 22325 00003AF4 E8F7FD                  	call	BREAKDOWN
 22326                                  
 22327 00003AF7 A1[CE05]                	MOV     AX,[BYTPOS]
 22328 00003AFA 8B16[D005]              	MOV     DX,[BYTPOS+2]
 22329 00003AFE E3D9                    	JCXZ    WRTEOFJ                 ;Make the file length = sf_position
 22330 00003B00 01C8                    	ADD     AX,CX
 22331 00003B02 83D200                  	ADC     DX,0                    ;DX:AX = last byte to write + 1.
 22332                                  
 22333                                  	;mov	bx,[es:bp+2]
 22334 00003B05 268B5E02                	MOV     BX,[ES:BP+DPB.SECTOR_SIZE]
 22335                                  
 22336                                  	; MSDOS 3.3
 22337                                  	;cmp	dx,bx
 22338                                  	;jnb	short WRTERR33
 22339                                  	;div	bx
 22340                                  	;mov	bx,ax
 22341                                  	;OR	DX,DX
 22342                                  	;JNZ	short CALCLUS
 22343                                  	;dec	ax
 22344                                  ;CALCLUS:
 22345                                  	; MSDOS 3.3
 22346                                  	;mov	cl,[es:bp+5]
 22347                                  	;MOV	CL,[ES:BP+DPB.CLUSTER_SHIFT]
 22348                                  	;shr	ax,cl
 22349                                  	;push	ax
 22350                                  	;push	dx
 22351                                  	;push	es
 22352                                  	;les	di,[THISSFT]
 22353                                  	;;mov	ax,[es:di+11h]
 22354                                  	;;mov	dx,[es:di+13h]
 22355                                  	;mov	ax,[ES:DI+SF_ENTRY.sf_size]
 22356                                  	;mov	dx,[ES:DI+SF_ENTRY.sf_size+2]
 22357                                  	;pop	es
 22358                                  	;;DX:AX = current file size (in bytes).
 22359                                  	;;div	word [es:bp+2]
 22360                                  	;div	word [ES:BP+DPB.SECTOR_SIZE]
 22361                                  	;mov	cx,ax
 22362                                  	;or	dx,dx
 22363                                  	;jz	short NORND
 22364                                  	;inc	ax
 22365                                  ;NORND:
 22366                                  	; MSDOS 6.0
 22367 00003B09 E8DE02                  	CALL	DIV32                   ;DX:AX/BX = CX:AX + DX (rem.).
 22368 00003B0C 89C6                    	MOV	SI,AX
 22369 00003B0E 890E[0706]                      MOV	[HIGH_SECTOR],CX
 22370                                  
 22371                                  ;       [HIGH_SECTOR]:SI = Last full sector to write.
 22372                                  
 22373 00003B12 09D2                    	OR	DX,DX
 22374 00003B14 52                      	PUSH	DX			;M039: Free DX for use by SHR32
 22375 00003B15 89CA                    	MOV	DX,CX			;M039
 22376 00003B17 7506                    	JNZ	short CALCLUS
 22377 00003B19 83E801                  	SUB	AX,1                    ;AX must be zero base indexed	;AC000;
 22378 00003B1C 83DA00                  	SBB	DX,0			;M039 ;F.C. >32mb		;AN000;
 22379                                  
 22380                                  CALCLUS:
 22381                                  	; MSDOS 6.0
 22382 00003B1F E8EF02                  	CALL	SHR32                   ;F.C. >32mb			;AN000;
 22383 00003B22 5A                      	POP	DX
 22384                                  
 22385                                  ;       AX = Last cluster to write.
 22386                                  ;       DX = # of bytes in last sector to write (the "tail").
 22387                                  ;       BX = [ES:BP+DPB.SECTOR_SIZE]
 22388                                  
 22389 00003B23 50                      	PUSH	AX
 22390 00003B24 52                      	PUSH	DX
 22391                                  ;M039
 22392 00003B25 8B16[0E06]              	mov	dx,[TEMP_VAR2]
 22393 00003B29 A1[0C06]                	mov	ax,[TEMP_VAR]           ;DX:AX = current file size (in bytes).
 22394 00003B2C E8BB02                  	call	DIV32           	;DX:AX/BX = CX:AX + DX (rem.)
 22395 00003B2F 890E[0E06]              	mov	[TEMP_VAR2],cx
 22396 00003B33 890E[CA05]              	mov	[VALSEC+2],cx
 22397 00003B37 89C1                    	mov	cx,ax
 22398 00003B39 89F3                    	mov	bx,si
 22399                                  
 22400                                  ;       [HIGH_SECTOR]:BX = Last full sector to write.
 22401                                  ;          [VALSEC+2]:CX = Last full sector of current file.
 22402                                  ;         [TEMP_VAR2]:CX = Last full sector of current file.
 22403                                  ;                     DX = # of bytes in last sector of current file.
 22404                                  ;M039
 22405 00003B3B 09D2                    	OR	DX,DX
 22406 00003B3D 7408                    	JZ	short NORND
 22407 00003B3F 83C001                  	ADD	AX,1            	;Round up if any remainder	;AC000;
 22408 00003B42 8316[CA05]00            	ADC	word [VALSEC+2],0
 22409                                  NORND:	
 22410                                  	; MSDOS 3.3 & MSDOS 6.0
 22411 00003B47 A3[C805]                	MOV     [VALSEC],AX
 22412                                  
 22413                                  ;       [VALSEC] = Last sector of current file.
 22414                                  
 22415 00003B4A 31C0                    	XOR     AX,AX
 22416 00003B4C A3[DE05]                	MOV     [GROWCNT],AX
 22417 00003B4F A3[E005]                	MOV     [GROWCNT+2],AX
 22418 00003B52 58                      	POP     AX
 22419                                  
 22420                                  	; MSDOS 6.0
 22421 00003B53 8B3E[0706]              	MOV	DI,[HIGH_SECTOR]        ;F.C. >32mb			;AN000;
 22422 00003B57 3B3E[0E06]              	CMP	DI,[TEMP_VAR2]		;M039; F.C. >32mb		;AN000;
 22423 00003B5B 7264                    	JB	short NOGROW		;F.C. >32mb                     ;AN000;
 22424 00003B5D 7408                    	JZ	short lowsec		;F.C. >32mb                     ;AN000;
 22425 00003B5F 29CB                    	SUB	BX,CX                   ;F.C. >32mb                     ;AN000;
 22426 00003B61 1B3E[0E06]              	SBB	DI,[TEMP_VAR2]   	;M039; F.C. >32mb di:bx no. of sectors ;AN000;
 22427 00003B65 EB09                    	JMP	short yesgrow           ;F.C. >32mb                     ;AN000;
 22428                                  lowsec:
 22429 00003B67 BF0000                  	MOV	DI,0			;F.C. >32mb
 22430                                  	; MSDOS 3.3 & MSDOS 6.0
 22431 00003B6A 29CB                    	SUB	BX,CX			; Number of full sectors
 22432 00003B6C 7253                    	JB	short NOGROW
 22433 00003B6E 7444                    	JZ	short TESTTAIL
 22434                                  yesgrow:
 22435                                  	; MSDOS 3.3 (& MSDOS 6.0)
 22436 00003B70 89D1                    	MOV     CX,DX
 22437 00003B72 93                      	XCHG    AX,BX
 22438                                  	;mul	word [es:bp+2]
 22439 00003B73 26F76602                	MUL	word [ES:BP+DPB.SECTOR_SIZE]  ; Bytes of full sector growth
 22440                                  	
 22441                                  	; MSDOS 6.0
 22442 00003B77 8916[0706]              	MOV	[HIGH_SECTOR],DX         ;F.C. >32mb save dx                    ;AN000;
 22443 00003B7B A3[0E06]                	MOV	[TEMP_VAR2],AX    	 ;M039; F.C. >32mb save ax		;AN000;
 22444 00003B7E 89F8                    	MOV	AX,DI                    ;F.C. >32mb                            ;AN000;
 22445                                  	;mul	word [es:bp+2]
 22446 00003B80 26F76602                	MUL	word [ES:BP+DPB.SECTOR_SIZE] ;F.C. >32mb do higher word multiply ;AN000;
 22447                                  	
 22448 00003B84 0306[0706]              	ADD	AX,[HIGH_SECTOR]         ;F.C. >32mb add lower value            ;AN000;
 22449 00003B88 89C2                    	MOV	DX,AX                    ;F.C. >32mb DX:AX is the result of     ;AN000;
 22450 00003B8A A1[0E06]                	MOV	AX,[TEMP_VAR2]    	 ;M039; F.C. >32mb a 32 bit multiply	;AN000;
 22451                                  
 22452                                  	; MSDOS 3.3 (& MSDOS 6.0)
 22453 00003B8D 29C8                    	SUB     AX,CX			; Take off current "tail"
 22454 00003B8F 83DA00                  	SBB     DX,0			; 32-bit extension
 22455 00003B92 01D8                    	ADD     AX,BX			; Add on new "tail"
 22456 00003B94 83D200                  	ADC     DX,0			; ripple tim's head off
 22457 00003B97 EB21                    	JMP     SHORT SETGRW
 22458                                  
 22459                                  HAVSTART:
 22460                                  	;int 3
 22461 00003B99 89C1                    	MOV     CX,AX
 22462 00003B9B E8A611                  	call	SKPCLP
 22463                                  	;JCXZ	DOWRTJ
 22464                                  	; 16/12/2022
 22465 00003B9E E357                    	jcxz	DOWRT
 22466                                  	; 20/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 22467                                  	;jcxz	DOWRTJ
 22468                                  
 22469 00003BA0 E84C13                  	call	ALLOCATE
 22470                                  	;JNC	short DOWRTJ
 22471                                  	; 16/12/2022
 22472 00003BA3 7352                    	jnc	short DOWRT
 22473                                  	; 20/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 22474                                  	;jnc	short DOWRTJ
 22475                                  
 22476                                  	;entry   WRTERR
 22477                                  WRTERR:
 22478 00003BA5 B40F                    	MOV     AH,0FH			;MS. write/data/fail/abort      ;AN000;
 22479                                  
 22480                                  	;entry WRTERR22
 22481                                  WRTERR22:
 22482 00003BA7 A0[7605]                	MOV     AL,[THISDRV]		;MS.                            ;AN000;
 22483                                  
 22484                                  	; 27/07/2018
 22485                                  WRTERR33:
 22486                                  	;MOV	CX,0			;No bytes transferred
 22487 00003BAA 31C9                    	XOR     CX,CX
 22488                                  					
 22489 00003BAC C43E[9E05]              	LES     DI,[THISSFT]
 22490                                  	;CLC ; 19/05/2019
 22491                                  	; 20/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 22492                                  	; 16/12/2022
 22493                                  	;clc
 22494 00003BB0 C3                      	retn
 22495                                  
 22496                                  	; 16/12/2022
 22497                                  	; 20/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 22498                                  ;DOWRTJ:
 22499                                  	;JMP	short DOWRT
 22500                                  
 22501                                  ACC_ERRWJ:
 22502                                  	; 10/08/2018
 22503                                  	;JMP	SET_ACC_ERRW
 22504                                  	; 16/12/2022
 22505 00003BB1 E9D3FD                  	jmp	SET_ACC_ERR_DS
 22506                                  	; 20/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 22507                                  	;jmp	SET_ACC_ERRW	
 22508                                  
 22509                                  TESTTAIL:
 22510 00003BB4 29D0                    	SUB     AX,DX
 22511 00003BB6 7609                    	JBE	short NOGROW
 22512 00003BB8 31D2                    	XOR     DX,DX
 22513                                  SETGRW:
 22514 00003BBA A3[DE05]                	MOV	[GROWCNT],AX
 22515 00003BBD 8916[E005]              	MOV	[GROWCNT+2],DX
 22516                                  NOGROW:
 22517 00003BC1 58                      	POP     AX
 22518 00003BC2 8B0E[BC05]              	MOV     CX,[CLUSNUM]    ; First cluster accessed
 22519 00003BC6 E85B11                  	call	FNDCLUS
 22520 00003BC9 72E6                    	JC	short ACC_ERRWJ
 22521 00003BCB 891E[BC05]              	MOV     [CLUSNUM],BX
 22522 00003BCF 8916[BA05]              	MOV     [LASTPOS],DX
 22523                                  
 22524 00003BD3 29D0                    	SUB     AX,DX           ; Last cluster minus current cluster
 22525 00003BD5 7420                    	JZ	short DOWRT	; If we have last clus, we must have first
 22526 00003BD7 E3C0                    	JCXZ    HAVSTART        ; See if no more data
 22527 00003BD9 51                      	PUSH    CX              ; No. of clusters short of first
 22528 00003BDA 89C1                    	MOV     CX,AX
 22529 00003BDC E81013                  	call	ALLOCATE
 22530 00003BDF 59                      	POP     CX
 22531 00003BE0 72C3                    	JC	short WRTERR
 22532 00003BE2 8B16[BA05]              	MOV     DX,[LASTPOS]
 22533 00003BE6 42                      	INC     DX
 22534 00003BE7 49                      	DEC     CX
 22535 00003BE8 7405                    	JZ	short NOSKIP
 22536 00003BEA E85711                  	call	SKPCLP
 22537 00003BED 72C2                    	JC	short ACC_ERRWJ
 22538                                  NOSKIP:
 22539 00003BEF 891E[BC05]              	MOV     [CLUSNUM],BX
 22540 00003BF3 8916[BA05]              	MOV     [LASTPOS],DX
 22541                                  DOWRT:
 22542 00003BF7 833E[D205]00            	CMP     word [BYTCNT1],0
 22543 00003BFC 7409                    	JZ	short WRTMID
 22544 00003BFE 8B1E[BC05]              	MOV     BX,[CLUSNUM]
 22545 00003C02 E8CE11                  	call	BUFWRT
 22546 00003C05 72AA                    	JC	short ACC_ERRWJ
 22547                                  WRTMID:
 22548 00003C07 A1[D605]                	MOV     AX,[SECCNT]
 22549 00003C0A 09C0                    	OR      AX,AX
 22550                                  	; 20/11/2022
 22551 00003C0C 746F                    	JZ	short WRTLAST	; 24/07/2019	;M039
 22552 00003C0E 0106[C405]              	ADD     [SECPOS],AX
 22553                                  	; 19/05/2019
 22554                                  	; MSDOS 6.0
 22555 00003C12 8316[C605]00            	ADC	WORD [SECPOS+2],0	;F.C. >32mb 	;AN000;
 22556 00003C17 E81912                  	call	NEXTSEC
 22557                                  	; 16/12/2022
 22558 00003C1A 7295                    	JC	short ACC_ERRWJ
 22559                                  	;JC	short SET_ACC_ERRW	;M039
 22560 00003C1C C606[7405]01            	MOV     BYTE [TRANS],1		; A transfer is taking place
 22561 00003C21 8A16[7305]              	MOV     DL,[SECCLUSPOS] 	; (dx/DL = Extent start) ((dh = ?))
 22562 00003C25 8B1E[BC05]              	MOV     BX,[CLUSNUM]
 22563 00003C29 8B0E[D605]              	MOV     CX,[SECCNT]
 22564                                  WRTLP:
 22565 00003C2D E83412                  	call	OPTIMIZE
 22566 00003C30 7248                    	JC	short SET_ACC_ERRW
 22567                                  	; 16/12/2022
 22568                                  	;JC	short ACC_ERRWJ
 22569                                  
 22570                                  ;M039
 22571                                  ;       DI = Next physical cluster.
 22572                                  ;       AX = # sectors remaining.
 22573                                  ;       [DMAADD+2]:BX = transfer address (source data address).
 22574                                  ;       CX = # of contiguous sectors to write. (These constitute a block of
 22575                                  ;	     sectors, also termed an "Extent".)
 22576                                  ;       [HIGH_SECTOR]:DX = physical sector # of first sector in extent.
 22577                                  ;       ES:BP -> Drive Parameter Block (DPB).
 22578                                  ;
 22579                                  ;       Purge the Buffer Queue and the Secondary Cache of any buffers which
 22580                                  ;	are in Extent; they are being over-written.
 22581                                  
 22582 00003C32 57                      	push    di
 22583 00003C33 50                      	push    ax
 22584                                  
 22585                                  	; MSDOS 3.3
 22586                                  	; IBMDOS.COM (1987) - Offset 4497h
 22587                                  	;push	dx
 22588                                  	;push	bx
 22589                                  	;mov	al,[es:bp]
 22590                                  	;;mov	AL,[ES:BP+DPB.DRIVE] ; mov al,[es:bp+0]
 22591                                  	;mov	bx,cx
 22592                                  	;add	bx,dx	; (bx = Extent end)
 22593                                  
 22594                                  ;	DX = Extent start.
 22595                                  ;	BX = Extent end.
 22596                                  ;	AL = Drive #.
 22597                                  
 22598                                  	;call	SETVISIT
 22599                                  
 22600                                  ;wbufq1:
 22601                                  	;;or	byte [di+5],20h
 22602                                  	;or	byte [DI+BUFFINFO.buf_flags],buf_visit ; Bit 5 = reserved
 22603                                  	;;cmp	al,[di+4]	
 22604                                  	;cmp	al,[DI+BUFFINFO.buf_ID]
 22605                                  	;jnz	short wbufq2	; Jump if Extent start > buffer sector.
 22606                                  	;;cmp	[di+6],dx
 22607                                  	;cmp	[DI+BUFFINFO.buf_sector],dx
 22608                                  	;jb	short wbufq2
 22609                                  	;;cmp	[di+6],bx
 22610                                  	;cmp	[DI+BUFFINFO.buf_sector],bx
 22611                                  	;jnb	short wbufq2	; Jump if Extent end >= buffer sector.
 22612                                  
 22613                                  	;; Buffer sector is in the Extent
 22614                                  
 22615                                  	;;mov	word [di+4],20FFh
 22616                                  	;mov	word [DI+BUFFINFO.buf_ID],20FFh
 22617                                  	;				; .buf_ID,    AL = FFh (Free buffer)
 22618                                  	;				; .buf_flags, AH = 0, reset/clear
 22619                                  	;call	SCANPLACE
 22620                                  ;wbufq2:
 22621                                  	;call	SKIPVISIT
 22622                                  	;jnz	short wbufq1
 22623                                  	;pop	bx
 22624                                  	;pop	dx
 22625                                  
 22626                                          ; MSDOS 6.0
 22627 00003C34 E82D01                  	call	DskWrtBufPurge		;DS trashed.
 22628                                  
 22629                                  ;ASSUME DS:NOTHING
 22630                                  ;M039
 22631                                  	; MSDOS 3.3 & MSDOS 6.0
 22632                                  ;hkn; SS override for DMAADD and ALLOWED
 22633 00003C37 368E1E[2E03]            	MOV     DS,[SS:DMAADD+2]
 22634                                  	;mov	byte [ss:ALLOWED],38h
 22635 00003C3C 36C606[4B03]38          	MOV	byte [SS:ALLOWED],Allowed_RETRY+Allowed_FAIL+Allowed_IGNORE
 22636                                  
 22637                                  ;	put logic from DWRITE in-line here so we can modify it
 22638                                  ;	for DISK FULL conditions.
 22639                                  
 22640                                  	; 20/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 22641                                  	; DOSCODE:7AD8h (MSDOS 5.0 MSDOS.SYS)
 22642                                  
 22643                                  	; 16/12/2022
 22644                                  	; MSDOS 3.3 (& MSDOS 5.0)
 22645                                  	;call	DWRITE
 22646                                  
 22647                                  ;DWRITE_OKAY:
 22648                                  
 22649                                  	; 16/12/2022
 22650                                  	; MSDOS 5.0 (& MSDOS 3.3)
 22651                                  	;pop     cx
 22652                                  	;pop     bx
 22653                                  	;push    ss
 22654                                  	;pop     ds
 22655                                  	;jc      short SET_ACC_ERRW
 22656                                  	;jcxz    WRTLAST
 22657                                  	;mov     dl, 0
 22658                                  	;inc     word [LASTPOS]
 22659                                  	;jmp     short WRTLP
 22660                                  
 22661                                  	; 16/12/2022
 22662                                  	; 20/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 22663                                  DWRITE_LUP:
 22664                                  	; 23/07/2019 - Retro DOS v3.2
 22665                                  
 22666                                  	; MSDOS 6.0
 22667 00003C42 E8D7FB                  	call	DSKWRITE
 22668 00003C45 7417                    	jz	short DWRITE_OKAY
 22669                                  
 22670                                  ;;	int	3
 22671                                  
 22672 00003C47 3C27                    	cmp	al,error_handle_Disk_Full	; compressed volume full?
 22673 00003C49 7423                    	jz	short DWRITE_DISK_FULL
 22674                                  
 22675                                  	; 16/12/2022
 22676                                  
 22677                                  ;;hkn; SS override
 22678 00003C4B 36C606[7505]01          	MOV	BYTE [SS:READOP],1
 22679 00003C51 E8F7FB                  	call	HARDERRRW
 22680 00003C54 3C01                    	CMP	AL,1		; Check for retry
 22681 00003C56 74EA                    	JZ	short DWRITE_LUP
 22682                                  
 22683                                  	; 16/12/2022
 22684                                  	; 23/07/2019
 22685                                  	;POP	CX ; *4*
 22686                                  	;POP	BX ; *5*
 22687                                  	;
 22688                                  	;push	ss
 22689                                  	;pop	ds
 22690                                  	;
 22691                                  
 22692                                  	; 20/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 22693                                  
 22694                                  	; 16/12/2022
 22695 00003C58 3C03                    	CMP	AL,3		; Check for FAIL
 22696 00003C5A F8                      	CLC
 22697 00003C5B 7501                    	JNZ	short DWRITE_OKAY ; Ignore
 22698 00003C5D F9                      	STC
 22699                                  
 22700                                  DWRITE_OKAY:
 22701                                  	; 16/12/2022
 22702                                  	; 23/07/2019
 22703                                  	; MSDOS 3.3 (& MSDOS 6.0)
 22704 00003C5E 59                      	POP	CX ; *4*
 22705 00003C5F 5B                      	POP	BX ; *5*
 22706                                  
 22707                                  ;       CX = # sectors remaining.
 22708                                  ;       BX = Next physical cluster.
 22709                                  
 22710                                  ;hkn; SS override
 22711                                          ;Context DS
 22712                                  	; 16/12/2022
 22713                                  	;push	ss
 22714                                  	;pop	ds
 22715                                  
 22716                                  	; 16/12/2022
 22717 00003C60 7218                    	jc	short SET_ACC_ERRW
 22718                                  
 22719                                  	; 16/12/2022
 22720 00003C62 16                      	push	ss
 22721 00003C63 1F                      	pop	ds
 22722                                  
 22723 00003C64 E317                    	JCXZ    WRTLAST
 22724                                  
 22725                                  	;MOV	DL,0
 22726 00003C66 30D2                    	xor	dl,dl ; 23/07/2019
 22727 00003C68 FF06[BA05]              	INC     word [LASTPOS]	; We'll be using next cluster
 22728 00003C6C EBBF                    	JMP     short WRTLP
 22729                                  
 22730                                  	; 23/07/2019 - Retro DOS v3.2
 22731                                  	; 09/08/2018
 22732                                  	; MSDOS 6.0
 22733                                  DWRITE_DISK_FULL:
 22734                                  	;Context DS		;SQ 3-5-93 DS must be setup on return!
 22735                                  	; 16/12/2022
 22736 00003C6E 16                      	push	ss
 22737 00003C6F 1F                      	pop	ds
 22738 00003C70 59                      	pop	cx		; unjunk stack
 22739 00003C71 5B                      	pop	bx
 22740 00003C72 C606[0B06]01            	mov	byte [DISK_FULL],1
 22741                                  	;stc
 22742 00003C77 E92BFF                  	jmp	WRTERR ; 24/07/2019 ; go to disk full exit
 22743                                  
 22744                                  	; 16/12/2022
 22745                                  SET_ACC_ERRW:
 22746 00003C7A E90AFD                  	jmp	SET_ACC_ERR_DS
 22747                                  
 22748                                  WRTLAST:
 22749 00003C7D A1[D405]                	MOV     AX,[BYTCNT2]
 22750 00003C80 09C0                    	OR      AX,AX
 22751 00003C82 7413                    	JZ	short FINWRT
 22752 00003C84 A3[D205]                	MOV     [BYTCNT1],AX
 22753 00003C87 E8A911                  	call	NEXTSEC
 22754 00003C8A 72EE                    	JC	short SET_ACC_ERRW
 22755 00003C8C C706[CC05]0000          	MOV     word [BYTSECPOS],0
 22756 00003C92 E83E11                  	call	BUFWRT
 22757 00003C95 72E3                    	JC	short SET_ACC_ERRW
 22758                                  FINWRT:
 22759 00003C97 C43E[9E05]              	LES     DI,[THISSFT]
 22760 00003C9B A1[DE05]                	MOV     AX,[GROWCNT]
 22761 00003C9E 8B0E[E005]              	MOV     CX,[GROWCNT+2]
 22762 00003CA2 09C0                    	OR      AX,AX
 22763 00003CA4 7502                    	JNZ	short UPDATE_size
 22764 00003CA6 E30F                    	JCXZ    SAMSIZ
 22765                                  UPDATE_size:
 22766                                  	;add	[es:di+11h],ax
 22767 00003CA8 26014511                	ADD     [ES:DI+SF_ENTRY.sf_size],AX
 22768                                  	;adc	[es:di+13h],cx
 22769 00003CAC 26114D13                	ADC     [ES:DI+SF_ENTRY.sf_size+2],CX
 22770                                  
 22771                                  ; Make sure that all other SFT's see this growth also.
 22772                                  
 22773 00003CB0 B80100                  	MOV     AX,1
 22774                                  ;if installed
 22775                                  	;Call	JShare + 14 * 4
 22776 00003CB3 FF1E[C800]              	call    far [JShare+(14*4)]	; 14 = ShSU
 22777                                  ;else
 22778                                  ;	Call    ShSU
 22779                                  ;endif
 22780                                  
 22781                                  SAMSIZ:
 22782 00003CB7 E965FD                  	jmp	SETCLUS	; ES:DI already points to SFT
 22783                                  
 22784                                  	; 16/12/2022
 22785                                  	; 20/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 22786                                  ;SET_ACC_ERRW:
 22787                                  	;jmp	SET_ACC_ERR_DS
 22788                                  
 22789                                  WRTEOF:
 22790 00003CBA 89C1                    	MOV     CX,AX
 22791 00003CBC 09D1                    	OR      CX,DX
 22792 00003CBE 746C                    	JZ	short KILLFIL
 22793 00003CC0 83E801                  	SUB     AX,1
 22794 00003CC3 83DA00                  	SBB     DX,0
 22795                                  
 22796                                  	; MSDOS 3.3
 22797                                  	;;div	word [es:bp+2]
 22798                                  	;div	word [ES:BP+DPB.SECTOR_SIZE]
 22799                                  	;;mov	cl,[es:bp+5]
 22800                                  	;mov	cl,[ES:BP+DPB.CLUSTER_SHIFT] 
 22801                                  	;shr	ax,cl
 22802                                  
 22803                                  	; MSDOS 6.0
 22804 00003CC6 53                      	PUSH	BX
 22805                                  	;mov	bx,[es:bp+2]
 22806 00003CC7 268B5E02                	MOV	BX,[ES:BP+DPB.SECTOR_SIZE]    ;F.C. >32mb                       ;AN000;
 22807 00003CCB E81C01                  	CALL	DIV32                         ;F.C. >32mb                       ;AN000;
 22808 00003CCE 5B                      	POP	BX			      ;F.C. >32mb			;AN000;
 22809 00003CCF 89CA                    	MOV	DX,CX			      ;M039
 22810 00003CD1 890E[0706]                      MOV	[HIGH_SECTOR],CX              ;M039: Probably extraneous, but not sure.
 22811 00003CD5 E83901                  	CALL	SHR32                         ;F.C. >32mb                       ;AN000;
 22812                                  
 22813 00003CD8 89C1                    	MOV     CX,AX
 22814 00003CDA E84710                  	call	FNDCLUS
 22815                                  SET_ACC_ERRWJ2:
 22816 00003CDD 729B                    	JC	short SET_ACC_ERRW
 22817                                  
 22818 00003CDF E326                    	JCXZ    RELFILE
 22819 00003CE1 E80B12                  	call	ALLOCATE
 22820                                  	;JC	short WRTERRJ              ;;;;;;;;; disk full
 22821                                  	; 16/12/2022
 22822 00003CE4 7303                    	jnc	short UPDATE
 22823 00003CE6 E9BCFE                  	JMP	WRTERR
 22824                                  UPDATE:
 22825 00003CE9 C43E[9E05]              	LES	DI,[THISSFT]
 22826 00003CED A1[CE05]                	MOV	AX,[BYTPOS]
 22827                                  	;mov	[es:di+11h],ax
 22828 00003CF0 26894511                	MOV	[ES:DI+SF_ENTRY.sf_size],AX
 22829 00003CF4 A1[D005]                	MOV	AX,[BYTPOS+2]
 22830                                  	;mov	[es:di+13h],ax
 22831 00003CF7 26894513                	MOV	[ES:DI+SF_ENTRY.sf_size+2],AX
 22832                                  ;
 22833                                  ; Make sure that all other SFT's see this growth also.
 22834                                  ;
 22835 00003CFB B80200                  	MOV     AX,2
 22836                                  ;if installed
 22837                                  	;Call	JShare + 14 * 4
 22838 00003CFE FF1E[C800]              	call    far [JShare+(14*4)]	; 14 = ShSU
 22839                                  ;else
 22840                                  ;	Call    ShSU
 22841                                  ;endif
 22842 00003D02 31C9                    	XOR     CX,CX
 22843 00003D04 E935FD                  	jmp	ADDREC
 22844                                  
 22845                                  	; 16/12/2022
 22846                                  ;WRTERRJ: 
 22847                                  	;JMP	WRTERR
 22848                                  
 22849                                  ;;;;;;;;;;;;;;;; 7/18/86
 22850                                  ;;;;;;;;;;;;;;;;
 22851                                  
 22852                                  RELFILE:
 22853                                  	; MSDOS 6.0
 22854 00003D07 06                      	PUSH    ES                    ;AN002; BL Reset Lstclus and cluspos to
 22855 00003D08 C43E[9E05]              	LES     DI,[THISSFT]          ;AN002; BL beginning of file if current
 22856                                  	;cmp	dx,[es:di+19h]
 22857 00003D0C 263B5519                	CMP     DX,[ES:DI+SF_ENTRY.sf_cluspos]	;AN002; BL cluspos is past EOF.
 22858 00003D10 730E                    	JAE	short SKIPRESET	      		;AN002; BL
 22859                                  	;mov	[es:di+19h],0
 22860 00003D12 26C745190000            	MOV     word [ES:DI+SF_ENTRY.sf_cluspos],0 ;AN002; BL
 22861                                  	;mov	dx,[es:di+0Bh]
 22862 00003D18 268B550B                	MOV     DX,[ES:DI+SF_ENTRY.sf_firclus]	;AN002; BL
 22863                                  	;mov	[es:di+35h],dx
 22864 00003D1C 26895535                	MOV     [ES:DI+SF_ENTRY.sf_lstclus],DX	;AN002; BL
 22865                                  SKIPRESET:                            		;AN002; BL
 22866 00003D20 07                      	POP     ES                    		;AN002; BL
 22867                                  ;
 22868 00003D21 BAFFFF                  	MOV     DX,0FFFFH
 22869 00003D24 E87612                  	call	RELBLKS
 22870                                  	; 16/12/2022
 22871                                  	; 20/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 22872 00003D27 73C0                    	jnc	short UPDATE
 22873                                  SET_ACC_ERRWJ:
 22874                                  	;JC	short SET_ACC_ERRWJ2
 22875                                  	;JMP	SHORT UPDATE
 22876                                  	; 16/12/2022
 22877 00003D29 E95BFC                  	jmp	SET_ACC_ERR_DS
 22878                                  	; 20/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 22879                                  	;JC	short SET_ACC_ERRWJ2
 22880                                  	;JMP	SHORT UPDATE
 22881                                  
 22882                                  KILLFIL:
 22883 00003D2C 31DB                    	XOR     BX,BX
 22884 00003D2E 06                      	PUSH    ES
 22885 00003D2F C43E[9E05]              	LES     DI,[THISSFT]
 22886                                  	;mov	[es:di+19h],bx
 22887 00003D33 26895D19                	MOV	[ES:DI+SF_ENTRY.sf_cluspos],BX
 22888                                  	;mov	[es:di+35h],bx ; 04/05/2019
 22889 00003D37 26895D35                	MOV	[ES:DI+SF_ENTRY.sf_lstclus],BX
 22890                                  	;xchg	bx,[es:di+0Bh]
 22891 00003D3B 26875D0B                	XCHG    BX,[ES:DI+SF_ENTRY.sf_firclus]
 22892 00003D3F 07                      	POP	ES
 22893                                  
 22894 00003D40 09DB                    	OR	BX,BX
 22895                                  	;JZ	short UPDATEJ
 22896                                  	; 16/12/2022
 22897 00003D42 74A5                    	jz	short UPDATE
 22898                                  	; 20/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 22899                                  	;jz	short UPDATEJ
 22900                                  
 22901                                  ;; 10/23/86 FastOpen update
 22902 00003D44 06                      	PUSH	ES              ; since first cluster # is 0
 22903 00003D45 55                      	PUSH	BP              ; we must delete the old cache entry
 22904 00003D46 50                      	PUSH	AX
 22905 00003D47 51                      	PUSH	CX
 22906 00003D48 52                      	PUSH	DX
 22907 00003D49 C42E[8A05]              	LES	BP,[THISDPB]             ; get current DPB
 22908                                  	; 15/12/2022
 22909 00003D4D 268A5600                	mov	dl,[ES:BP] ; mov dl,[es:bp+0]
 22910                                  	; 20/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 22911                                  	;MOV	DL,[ES:BP+DPB.DRIVE]	; get current drive
 22912 00003D51 89D9                    	MOV	CX,BX                    ; first cluster #
 22913 00003D53 B402                    	MOV	AH,2                     ; delete cache entry by drive:firclus
 22914 00003D55 E80BEA                  	call	FastOpen_Update          ; call fastopen
 22915 00003D58 5A                      	POP	DX
 22916 00003D59 59                      	POP	CX
 22917 00003D5A 58                      	POP	AX
 22918 00003D5B 5D                      	POP	BP
 22919 00003D5C 07                      	POP	ES
 22920                                  ;; 10/23/86 FastOpen update
 22921                                  
 22922 00003D5D E83B12                  	call	RELEASE
 22923 00003D60 72C7                    	JC	short SET_ACC_ERRWJ
 22924                                  UPDATEJ:
 22925                                  	; 20/11/2022
 22926 00003D62 EB85                    	JMP	short UPDATE ; 10/08/2018
 22927                                  
 22928                                  ;Break   <DskWrtBufPurge -- Disk Write Buffer Purge>
 22929                                  ;----------------------------------------------------------------------------
 22930                                  ;
 22931                                  ; Procedure Name : DskWrtBufPurge
 22932                                  ;
 22933                                  ; Inputs:
 22934                                  ;       CX = # of contiguous sectors to write. (These constitute a block of
 22935                                  ;	     sectors, also termed an "Extent".)
 22936                                  ;       [HIGH_SECTOR]:DX = physical sector # of first sector in extent.
 22937                                  ;       ES:BP -> Drive Parameter Block (DPB).
 22938                                  ;
 22939                                  ; Function:
 22940                                  ;       Purge the Buffer Queue and the Secondary Cache of any buffers which
 22941                                  ;	are in Extent; they are being over-written.
 22942                                  ;
 22943                                  ; Outputs:
 22944                                  ;       (Same as Input.)
 22945                                  ; Uses:
 22946                                  ;       All registers except DS,AX,SI,DI preserved.
 22947                                  ;       SS override for all global variables.
 22948                                  ;----------------------------------------------------------------------------
 22949                                  ;M039: Created
 22950                                  
 22951                                  ;procedure   DskWrtBufPurge,NEAR
 22952                                  ;
 22953                                  ;ASSUME  DS:NOTHING
 22954                                  
 22955                                  ; 04/05/2019 - Retro DOS v4.0
 22956                                  ; DOSCODE:7C0Eh (MSDOS 6.21, MSDOS.SYS)
 22957                                  
 22958                                  ; 21/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 22959                                  ; DOSCODE:7BD4h (MSDOS 5.0, MSDOS.SYS) 
 22960                                  
 22961                                  DskWrtBufPurge:
 22962                                  	;SaveReg <bx,cx>
 22963 00003D64 53                      	push	bx
 22964 00003D65 51                      	push	cx
 22965                                  
 22966 00003D66 368B1E[0706]            	mov	bx,[ss:HIGH_SECTOR]	;BX:DX = Extent start (sector #).
 22967 00003D6B 89DE                    	mov	si,bx
 22968 00003D6D 01D1                    	add	cx,dx
 22969 00003D6F 83D600                  	adc	si,0                    ;SI:CX = Extent end + 1.
 22970                                  
 22971                                  	; 21/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 22972                                  	;;mov	al,[es:bp+0]
 22973                                  	;mov	al,[es:bp+DPB.DRIVE]
 22974                                  	; 15/12/2022
 22975 00003D72 268A4600                	mov	al,[es:bp]
 22976                                  
 22977                                  ;	BX:DX = Extent start.
 22978                                  ;	SI:CX = Extent end + 1.
 22979                                  ;	AL = Drive #
 22980                                  
 22981 00003D76 36833E[7700]00          	cmp	word [ss:SC_CACHE_COUNT],0 ;Secondary cache in-use?
 22982 00003D7C 7431                    	je	short nosc		; -no, jump.
 22983                                  
 22984                                  ;	If any of the sectors to be written are in the secondary cache (SC),
 22985                                  ;	invalidate the entire SC. (This is an optimization; we really only
 22986                                  ;	need to invalidate those sectors which intersect, but that's slower.)
 22987                                  
 22988 00003D7E 363A06[B00D]            	cmp	al,[ss:CurSC_DRIVE]	;Same drive?
 22989 00003D83 752A                    	jne	short nosc		; -no, jump.
 22990                                  
 22991 00003D85 50                      	push    ax
 22992 00003D86 36A1[B10D]              	mov     ax,[ss:CurSC_SECTOR]
 22993 00003D8A 368B3E[B30D]            	mov     di,[ss:CurSC_SECTOR+2]	;DI:AX = SC start.
 22994                                  
 22995                                  	;Cmp32	si,cx,di,ax		;Extent end < SC start?
 22996                                  	;jbe	short sc5		; -yes, jump.
 22997                                  
 22998 00003D8F 39FE                    	cmp	si,di
 22999 00003D91 7502                    	jne	short sc01
 23000 00003D93 39C1                    	cmp	cx,ax
 23001                                  sc01: 
 23002 00003D95 7617                    	jbe	short sc5	
 23003                                  
 23004 00003D97 360306[7700]            	add	ax,[ss:SC_CACHE_COUNT]
 23005 00003D9C 83D700                  	adc	di,0                    ;DI:AX = SC end + 1.
 23006                                  	
 23007                                  	;Cmp32	bx,dx,di,ax             ;Extent start > SC end?
 23008                                  	;jae	short sc5		; -yes, jump.
 23009                                  
 23010 00003D9F 39FB                    	cmp	bx,di
 23011 00003DA1 7502                    	jne	short sc02
 23012 00003DA3 39C2                    	cmp	dx,ax
 23013                                  sc02:
 23014 00003DA5 7307                    	jnb	short sc5
 23015                                  
 23016 00003DA7 36C706[B50D]0000        	mov	word [ss:SC_STATUS],0	;Extent intersects SC: invalidate SC.
 23017                                  sc5:	
 23018 00003DAE 58                      	pop     ax
 23019                                  
 23020                                  ;	Free any buffered sectors which are in Extent; they are being over-
 23021                                  ;	written.
 23022                                  
 23023                                  nosc:	
 23024 00003DAF E82A1C                  	call	GETCURHEAD		;DS:DI -> first buffer in queue.
 23025                                  
 23026                                  _bufq:	
 23027                                  	;cmpo	al,[di+4]
 23028 00003DB2 3A4504                  	cmp     al,[di+BUFFINFO.buf_ID] ;Same drive?
 23029 00003DB5 7527                    	jne	short bufq5		; -no, jump.
 23030                                  
 23031                                  ;       Cmp32   bx,dx,<WORD PTR [di.buf_sector+2]>,<WORD PTR [di.buf_sector]>
 23032                                  ;       ja	short bufq5		;Jump if Extent start > buffer sector.
 23033                                  
 23034                                  	;cmp	bx,[di+8]
 23035 00003DB7 3B5D08                  	cmp	bx,[di+BUFFINFO.buf_sector+2]
 23036 00003DBA 7503                    	jne	short bufq04
 23037                                  	;cmp	dx,[di+6]
 23038 00003DBC 3B5506                  	cmp	dx,[di+BUFFINFO.buf_sector]
 23039                                  bufq04:
 23040 00003DBF 771D                    	ja	short bufq5
 23041                                  
 23042                                  ;       Cmp32   si,cx,<WORD PTR [di.buf_sector+2]>,<WORD PTR [di.buf_sector]>
 23043                                  ;       jbe	short bufq5		;Jump if Extent end < buffer sector.
 23044                                  
 23045                                  	;cmp	si,[di+8]
 23046 00003DC1 3B7508                  	cmp	si,[di+BUFFINFO.buf_sector+2]
 23047 00003DC4 7503                    	jne	short bufq05
 23048                                  	;cmp	cx,[di+6]
 23049 00003DC6 3B4D06                  	cmp	cx,[di+BUFFINFO.buf_sector]
 23050                                  bufq05:
 23051 00003DC9 7613                    	jbe	short bufq5
 23052                                  
 23053                                  ;	Buffer's sector is in Extent, so free it; it is being over-written.
 23054                                  
 23055                                  	;test	byte [di+5],40h
 23056 00003DCB F6450540                	test	byte [di+BUFFINFO.buf_flags],buf_dirty ;Buffer dirty?
 23057 00003DCF 7403                    	jz	short bufq4		; -no, jump.
 23058 00003DD1 E8791E                  	call	DEC_DIRTY_COUNT		; -yes, decrement dirty count.
 23059                                  bufq4:
 23060                                  	;mov	word [di+4],20FFh
 23061 00003DD4 C74504FF20              	mov     word [di+BUFFINFO.buf_ID],((buf_visit<<8)|0FFh)
 23062                                  
 23063 00003DD9 E8121C                  	call	SCANPLACE
 23064 00003DDC EB02                    	jmp     short bufq6
 23065                                  bufq5: 
 23066 00003DDE 8B3D                    	mov     di,[di]
 23067                                  	;mov	di,[di+BUFFINFO.buf_next]
 23068                                  bufq6: 
 23069 00003DE0 363B3E[BA0E]            	cmp	di,[ss:FIRST_BUFF_ADDR]	;Scanned entire buffer queue?
 23070 00003DE5 75CB                    	jne	short _bufq		; --no, go do next buffer.
 23071                                  	
 23072                                  	;RestoreReg <cx,bx>
 23073 00003DE7 59                      	pop	cx
 23074 00003DE8 5B                      	pop	bx
 23075 00003DE9 C3                      	retn
 23076                                  
 23077                                  ;EndProc DskWrtBufPurge
 23078                                  
 23079                                  ;Break   <DIV32 -- PERFORM 32 BIT DIVIDE>
 23080                                  ;----------------------------------------------------------------------------
 23081                                  ;
 23082                                  ; Procedure Name : DIV32
 23083                                  ;
 23084                                  ; Inputs:
 23085                                  ;       DX:AX = 32 bit dividend   BX= divisor
 23086                                  ; Function:
 23087                                  ;       Perform 32 bit division:  DX:AX/BX = CX:AX + DX (rem.)
 23088                                  ; Outputs:
 23089                                  ;       CX:AX = quotient , DX= remainder
 23090                                  ; Uses:
 23091                                  ;       All registers except AX,CX,DX preserved.
 23092                                  ;----------------------------------------------------------------------------
 23093                                  ;M039: DIV32 optimized for divisor of 512 (common sector size).
 23094                                  
 23095                                  ; 04/05/2019 - Retro DOS v4.0
 23096                                  ; DOSCODE:7C94h (MSDOS 6.21, MSDOS.SYS)
 23097                                  
 23098                                  ; 21/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 23099                                  ; DOSCODE:7C5Ah (MSDOS 5.0, MSDOS.SYS) 
 23100                                  
 23101                                  DIV32:
 23102 00003DEA 81FB0002                	cmp	bx,512
 23103 00003DEE 7515                    	jne	short div5
 23104                                  
 23105 00003DF0 89D1                    	mov	cx,dx
 23106 00003DF2 89C2                    	mov	dx,ax           ; CX:AX = Dividend
 23107 00003DF4 81E2FF01                	and	dx,(512-1)      ; DX = Remainder
 23108 00003DF8 88E0                    	mov	al,ah
 23109 00003DFA 88CC                    	mov	ah,cl
 23110 00003DFC 88E9                    	mov	cl,ch
 23111 00003DFE 30ED                    	xor	ch,ch
 23112 00003E00 D1E9                    	shr	cx,1
 23113 00003E02 D1D8                    	rcr	ax,1
 23114 00003E04 C3                      	retn
 23115                                  div5:	
 23116 00003E05 89C1                    	mov	cx,ax
 23117 00003E07 89D0                    	mov	ax,dx
 23118 00003E09 31D2                    	xor	dx,dx
 23119 00003E0B F7F3                    	div	bx              ; 0:AX/BX
 23120 00003E0D 91                      	xchg	cx,ax
 23121 00003E0E F7F3                    	div	bx              ; DX:AX/BX
 23122 00003E10 C3                      	retn
 23123                                  
 23124                                  ;Break   <SHR32 -- PERFORM 32 BIT SHIFT RIGHT>
 23125                                  ;----------------------------------------------------------------------------
 23126                                  ;
 23127                                  ; Procedure Name : SHR32
 23128                                  ;
 23129                                  ; Inputs:
 23130                                  ;	DX:AX = 32 bit sector number
 23131                                  ; Function:
 23132                                  ;       Perform 32 bit shift right
 23133                                  ; Outputs:
 23134                                  ;	AX = cluster number
 23135                                  ;	ZF = 1 if no error
 23136                                  ;	   = 0 if error (cluster number > 64k)
 23137                                  ; Uses:
 23138                                  ;       DX,CX
 23139                                  ;---------------------------------------------------------------------------
 23140                                  ; M017	- SHR32 rewritten for better performance
 23141                                  ; M039	- Additional optimization
 23142                                  
 23143                                  ; 04/05/2019 - Retro DOS v4.0
 23144                                  ; DOSCODE:7CBBh (MSDOS 6.21, MSDOS.SYS)
 23145                                  ; 21/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 23146                                  ; DOSCODE:7C81h (MSDOS 5.0, MSDOS.SYS) 
 23147                                  
 23148                                  SHR32:
 23149                                  	;mov	cl,[es:bp+5]
 23150 00003E11 268A4E05                	mov	cl,[ES:BP+DPB.CLUSTER_SHIFT]
 23151 00003E15 30ED                    	xor	ch,ch	    ;ZF=1
 23152 00003E17 E306                    	jcxz	norota
 23153                                  
 23154                                  rotashft2:
 23155 00003E19 D1EA                    	shr	dx,1	    ;ZF reflects state of DX.
 23156 00003E1B D1D8                    	rcr	ax,1	    ;ZF not affected.
 23157 00003E1D E2FA                    	loop	rotashft2
 23158                                  norota:
 23159 00003E1F C3                      	retn
 23160                                  
 23161                                  ;============================================================================
 23162                                  ; DIR.ASM, MSDOS 6.0, 1991
 23163                                  ;============================================================================
 23164                                  ; 27/07/2018 - Retro DOS v3.0
 23165                                  ; 19/05/2019 - Retro DOS v4.0 
 23166                                  
 23167                                  ;	TITLE	DIR - Directory and path cracking
 23168                                  ;	NAME	Dir
 23169                                  
 23170                                  ;Break	<FINDENTRY -- LOOK FOR AN ENTRY>
 23171                                  ;---------------------------------------------------------------------------
 23172                                  ;
 23173                                  ; Procedure Name : FINDENTRY,SEARCH
 23174                                  ;
 23175                                  ; Inputs:
 23176                                  ;	[THISDPB] set
 23177                                  ;	[SECCLUSPOS] = 0
 23178                                  ;	[DIRSEC] = Starting directory sector number
 23179                                  ;	[CLUSNUM] = Next cluster of directory
 23180                                  ;	[CLUSFAC] = Sectors/Cluster
 23181                                  ;	[NAME1] = Name to look for
 23182                                  ; Function:
 23183                                  ;	Find file name in disk directory.
 23184                                  ;	"?" matches any character.
 23185                                  ; Outputs:
 23186                                  ;	Carry set if name not found
 23187                                  ;	ELSE
 23188                                  ;	Zero set if attributes match (always except when creating)
 23189                                  ;	AH = Device ID (bit 7 set if not disk)
 23190                                  ;	[THISDPB] = Base of drive parameters
 23191                                  ;	DS = DOSGROUP
 23192                                  ;	ES = DOSGROUP
 23193                                  ;	[CURBUF+2]:BX = Pointer into directory buffer
 23194                                  ;	[CURBUF+2]:SI = Pointer to First Cluster field in directory entry
 23195                                  ;	[CURBUF] has directory record with match
 23196                                  ;	[NAME1] has file name
 23197                                  ;	[LASTENT] is entry number of the entry
 23198                                  ; All other registers destroyed.
 23199                                  ;----------------------------------------------------------------------------
 23200                                  
 23201                                  ;hkn; called from rename.asm and dir2.asm. DS must be already set up at
 23202                                  ;hkn; this point.
 23203                                  
 23204                                  SEARCH:
 23205                                  	; 21/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 23206                                  	; DOSCODE:7C90h (MSDOS 5.0, MSDOS.SYS) 
 23207                                  
 23208                                  	; 19/05/2019 - Retro DOS v4.0
 23209                                  	; DOSCODE:7CCA (MSDOS 6.21, MSDOS.SYS)
 23210                                  
 23211                                  	; 27/07/2018 - Retro DOS v3.0
 23212                                  	; IBMDOS.COM (MSDOS 3.3) - Offset 45B3h 
 23213                                  	; 15/03/2018 - Retro DOS v2.0
 23214                                  
 23215                                  	;entry	FindEntry
 23216                                  FINDENTRY:
 23217 00003E20 E84404                  	call	STARTSRCH
 23218 00003E23 A0[6B05]                	MOV	AL,[ATTRIB]
 23219                                  	;and	al,9Eh
 23220 00003E26 24DE                    	AND	AL,~attr_ignore		; Ignore useless bits
 23221                                  	;cmp	al,8
 23222 00003E28 3C08                    	CMP	AL,attr_volume_id	; Looking for vol ID only ?
 23223 00003E2A 7503                    	JNZ	short NOTVOLSRCH	; No
 23224 00003E2C E87601                  	CALL	SETROOTSRCH		; Yes force search of root
 23225                                  NOTVOLSRCH:
 23226 00003E2F E80601                  	CALL	GETENTRY
 23227 00003E32 7303                    	JNC	short SRCH
 23228 00003E34 E99500                  	JMP	SETESRET
 23229                                  
 23230                                  	;entry	Srch
 23231                                  SRCH:
 23232 00003E37 1E                      	PUSH	DS
 23233 00003E38 8E1E[E405]              	MOV	DS,[CURBUF+2]
 23234                                  
 23235                                  ;	(DS:BX) = directory entry address
 23236                                  
 23237 00003E3C 8A27                    	mov	ah,[BX]
 23238                                  	;MOV	AH,[BX+dir_entry.dir_name] ; mov ah,[bx+0]
 23239 00003E3E 08E4                    	OR	AH,AH			; End of directory?
 23240 00003E40 743A                    	JZ	short FREE
 23241                                  
 23242                                  ;hkn; SS override
 23243 00003E42 363A26[7F05]            	CMP	AH,[SS:DELALL]		; Free entry?
 23244 00003E47 7433                    	JZ	short FREE
 23245                                  	;test	byte [bx+0Bh],8
 23246 00003E49 F6470B08                	TEST	byte [BX+dir_entry.dir_attr],attr_volume_id
 23247                                  					; Volume ID file?
 23248 00003E4D 7405                    	JZ	short CHKFNAM 		; NO
 23249                                  
 23250                                  ;hkn; SS override
 23251 00003E4F 36FE06[7B05]            	INC	BYTE [SS:VOLID]
 23252                                  CHKFNAM:
 23253                                  ;	Context ES
 23254 00003E54 8CD6                    	MOV	SI,SS
 23255 00003E56 8EC6                    	MOV	ES,SI
 23256 00003E58 89DE                    	MOV	SI,BX
 23257                                  
 23258                                  ;hkn; NAME1 is in DOSDATA
 23259 00003E5A BF[4B05]                	MOV	DI,NAME1
 23260                                  ;;;;; 7/29/86
 23261                                  
 23262                                  ;hkn; SS override for NAME1
 23263 00003E5D 36803E[4B05]E5          	CMP	BYTE [SS:NAME1],0E5H	; special char check
 23264 00003E63 7506                    	JNZ	short NO_E5
 23265 00003E65 36C606[4B05]05          	MOV	BYTE [SS:NAME1],05H
 23266                                  NO_E5:
 23267                                  ;;;;; 7/29/86
 23268 00003E6B E86100                  	CALL	MetaCompare
 23269 00003E6E 7428                    	JZ	short FOUND
 23270 00003E70 1F                      	POP	DS
 23271                                  
 23272                                  	;entry	NEXTENT
 23273                                  NEXTENT:
 23274 00003E71 C42E[8A05]              	LES	BP,[THISDPB]
 23275 00003E75 E86600                  	CALL	NEXTENTRY
 23276 00003E78 73BD                    	JNC	short SRCH
 23277 00003E7A EB50                    	JMP	SHORT SETESRET
 23278                                  
 23279                                  FREE:
 23280 00003E7C 1F                      	POP	DS
 23281 00003E7D 8B0E[4803]              	MOV	CX,[LASTENT]
 23282 00003E81 3B0E[D805]              	CMP	CX,[ENTFREE]
 23283 00003E85 7304                    	JAE	short TSTALL
 23284 00003E87 890E[D805]              	MOV	[ENTFREE],CX
 23285                                  TSTALL:
 23286 00003E8B 3A26[7F05]              	CMP	AH,[DELALL]		; At end of directory?
 23287                                  NEXTENTJ:
 23288 00003E8F 74E0                    	je	short NEXTENT 		; No - continue search
 23289 00003E91 890E[DA05]              	MOV	[ENTLAST],CX
 23290 00003E95 F9                      	STC
 23291 00003E96 EB34                    	JMP	SHORT SETESRET
 23292                                  
 23293                                  FOUND:
 23294                                  ; We have a file with a matching name. We must now consider the attributes:
 23295                                  ; ATTRIB	Action
 23296                                  ; ------	------
 23297                                  ; Volume_ID	Is Volume_ID in test?
 23298                                  ; Otherwise	If no create then Is ATTRIB+extra superset of test?
 23299                                  ;		If create then Is ATTRIB equal to test?
 23300                                  
 23301 00003E98 8A2C                    	MOV	CH,[SI] 		; Attributes of file
 23302 00003E9A 1F                      	POP	DS
 23303 00003E9B 8A26[6B05]              	MOV	AH,[ATTRIB]		; Attributes of search
 23304                                  	;and	ah,9Eh
 23305 00003E9F 80E4DE                  	AND	AH,~attr_ignore
 23306                                  	;lea	si,[si+15]
 23307 00003EA2 8D740F                  	LEA	SI,[SI+dir_entry.dir_first-dir_entry.dir_attr]
 23308                                  					; point to first cluster field
 23309                                  	;test	ch,8
 23310 00003EA5 F6C508                  	TEST	CH,attr_volume_id	; Volume ID file?
 23311 00003EA8 7409                    	JZ	short check_one_volume_id ; Nope check other attributes
 23312                                  	;test	ah,8
 23313 00003EAA F6C408                  	TEST	AH,attr_volume_id	; Can we find Volume ID?
 23314                                  	;JZ	short NEXTENTJ		; Nope, (not even $FCB_CREATE)
 23315                                  	; 16/12/2022
 23316 00003EAD 74C2                    	jz	short NEXTENT ; 19/05/2019
 23317                                  	; 21/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 23318                                  	;JZ	short NEXTENTJ
 23319 00003EAF 30E4                    	XOR	AH,AH			; Set zero flag for $FCB_CREATE
 23320 00003EB1 EB11                    	JMP	SHORT RETFF		; Found Volume ID
 23321                                  check_one_volume_id:
 23322                                  	;CMP	ah,8
 23323 00003EB3 80FC08                  	CMP	AH,attr_volume_id	; Looking only for Volume ID?
 23324                                  	;JZ	short NEXTENTJ		; Yes, continue search
 23325                                  	; 16/12/2022
 23326 00003EB6 74B9                    	je	short NEXTENT ; 19/05/2019
 23327                                  	;JZ	short NEXTENTJ
 23328 00003EB8 E8C003                  	CALL	MatchAttributes
 23329 00003EBB 7407                    	JZ	SHORT RETFF
 23330 00003EBD F606[7E05]FF            	TEST	BYTE [CREATING],-1	; Pass back mismatch if creating
 23331                                  	; 16/12/2022
 23332                                  	;JZ	short NEXTENTJ		; Otherwise continue searching
 23333 00003EC2 74AD                    	jz	short NEXTENT ; 19/05/2019
 23334                                  RETFF:
 23335 00003EC4 C42E[8A05]              	LES	BP,[THISDPB]
 23336                                  	; 21/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 23337                                  	;MOV	AH,[ES:BP+DPB.DRIVE]  ; mov ah,[es:bp+0]
 23338                                  	; 15/12/2022
 23339 00003EC8 268A6600                	MOV	AH,[ES:BP]
 23340                                  SETESRET:
 23341 00003ECC 16                      	PUSH	SS
 23342 00003ECD 07                      	POP	ES
 23343 00003ECE C3                      	retn
 23344                                  
 23345                                  ;----------------------------------------------------------------------------
 23346                                  ;
 23347                                  ; Procedure Name : MetaCompare
 23348                                  ;
 23349                                  ; Inputs:
 23350                                  ;	DS:SI -> 11 character FCB style name NO '?'
 23351                                  ;	    Typically this is a directory entry. It MUST be in upper case
 23352                                  ;	ES:DI -> 11 character FCB style name with possible '?'
 23353                                  ;	    Typically this is a FCB or SFT. It MUST be in upper case
 23354                                  ; Function:
 23355                                  ;	Compare FCB style names allowing for ? match to any char
 23356                                  ; Outputs:
 23357                                  ;	Zero if match else NZ
 23358                                  ; Destroys CX,SI,DI all others preserved
 23359                                  ;----------------------------------------------------------------------------
 23360                                  
 23361                                  	; 21/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 23362                                  	; DOSCODE:7D3Fh (MSDOS 5.0, MSDOS.SYS) 
 23363                                  
 23364                                  MetaCompare:
 23365 00003ECF B90B00                  	MOV	CX,11
 23366                                  WILDCRD:
 23367 00003ED2 F3A6                    	REPE	CMPSB
 23368 00003ED4 7407                    	JZ	short MetaRet 		; most of the time we will fail.
 23369                                  CHECK_META:
 23370 00003ED6 26807DFF3F              	CMP	BYTE [ES:DI-1],"?"
 23371 00003EDB 74F5                    	JZ	short WILDCRD
 23372                                  MetaRet:
 23373 00003EDD C3                       	retn				; Zero set, Match
 23374                                  
 23375                                  ;Break	<NEXTENTRY -- STEP THROUGH DIRECTORY>
 23376                                  ;----------------------------------------------------------------------------
 23377                                  ;
 23378                                  ; Procedure Name : NEXTENTRY
 23379                                  ;
 23380                                  ; Inputs:
 23381                                  ;	Same as outputs of GETENTRY, above
 23382                                  ; Function:
 23383                                  ;	Update BX, and [LASTENT] for next directory entry.
 23384                                  ;	Carry set if no more.
 23385                                  ;----------------------------------------------------------------------------
 23386                                  
 23387                                  NEXTENTRY:
 23388                                  	; 21/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 23389                                  	; DOSCODE:7D4Eh (MSDOS 5.0, MSDOS.SYS) 
 23390                                  
 23391                                  	; 19/05/2019 - Retro DOS v4.0
 23392                                  	; DOSCODE:7D88h (MSDOS 6.21, MSDOS.SYS)
 23393                                  
 23394                                  	; 27/07/2018 - Retro DOS v3.0
 23395                                  	; IBMDOS.COM (MSDOS 3.3) - Offset 4671h 
 23396                                  	; 15/03/2018 - Retro DOS v2.0
 23397                                  
 23398 00003EDE A1[4803]                	MOV	AX,[LASTENT]
 23399 00003EE1 3B06[DA05]              	CMP	AX,[ENTLAST]
 23400 00003EE5 7422                    	JZ	short NONE
 23401 00003EE7 40                      	INC	AX
 23402                                  	;ADD	BX,32
 23403 00003EE8 8D5F20                  	LEA	BX,[BX+32]
 23404 00003EEB 39D3                    	CMP	BX,DX
 23405                                  	; 21/11/2022 - MSDOS 5.0 MSDOS.SYS (DOSCODE:7D5Dh)
 23406                                  	;JB	short HAVIT ; MSDOS 6.0 src (dir.asm)
 23407                                  	; 16/12/2022
 23408 00003EED 751C                    	jne	short HAVIT ; MSDOS 6.21 (DOSCODE:7D97h)
 23409 00003EEF 8A1E[7305]              	MOV	BL,[SECCLUSPOS]
 23410 00003EF3 FEC3                    	INC	BL
 23411 00003EF5 3A1E[7705]              	CMP	BL,[CLUSFAC]
 23412 00003EF9 7215                    	JB	short SAMECLUS
 23413 00003EFB 8B1E[DC05]              	MOV	BX,[NXTCLUSNUM]
 23414 00003EFF E80617                  	call	IsEOF
 23415 00003F02 7305                    	JAE	short NONE
 23416                                  	; 23/07/2019
 23417 00003F04 83FB02                  	CMP	BX,2
 23418                                  	;JB	short NONE
 23419                                  	;JMP	short GETENT
 23420                                  	; 16/12/2022
 23421 00003F07 7332                    	jnb	short GETENT
 23422                                  	; 21/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 23423                                  	;JB	short NONE
 23424                                  	;JMP	short GETENT
 23425                                  NONE:
 23426 00003F09 F9                      	STC
 23427 00003F0A C3                      	retn
 23428                                  HAVIT:
 23429 00003F0B A3[4803]                	MOV	[LASTENT],AX
 23430 00003F0E F8                      	CLC
 23431                                  nextentry_retn:
 23432 00003F0F C3                      	retn
 23433                                  SAMECLUS:
 23434 00003F10 881E[7305]              	MOV	[SECCLUSPOS],BL
 23435 00003F14 A3[4803]                	MOV	[LASTENT],AX
 23436 00003F17 1E                      	PUSH	DS
 23437 00003F18 C53E[E205]              	LDS	DI,[CURBUF]
 23438                                  	; 19/05/2019
 23439                                  	; MSDOS 6.0
 23440                                  	;mov	dx,[di+8]
 23441 00003F1C 8B5508                  	MOV	DX,[DI+BUFFINFO.buf_sector+2]	;AN000; >32mb
 23442                                  ;hkn; SS override
 23443 00003F1F 368916[0706]            	MOV	[SS:HIGH_SECTOR],DX 		;AN000; >32mb
 23444                                  	;mov	dx,[di+6]
 23445 00003F24 8B5506                  	MOV	DX,[DI+BUFFINFO.buf_sector]	;AN000; >32mb
 23446                                  	;inc	dx ; MSDOS 3.3
 23447                                  	; MSDOS 6.0
 23448 00003F27 83C201                  	ADD	DX,1				;AN000; >32mb
 23449 00003F2A 368316[0706]00          	ADC	word [SS:HIGH_SECTOR],0 	;AN000; >32mb
 23450                                  	; MSDOS 3.3 & MSDOS 6.0
 23451 00003F30 1F                      	POP	DS
 23452 00003F31 E82AF8                  	call	FIRSTCLUSTER
 23453 00003F34 31DB                    	XOR	BX,BX
 23454 00003F36 EB23                    	JMP	short SETENTRY
 23455                                  
 23456                                  ;----------------------------------------------------------------------------
 23457                                  ;
 23458                                  ; Procedure Name : GETENTRY
 23459                                  ;
 23460                                  ; Inputs:
 23461                                  ;	[LASTENT] has directory entry
 23462                                  ;	ES:BP points to drive parameters
 23463                                  ;	[DIRSEC],[CLUSNUM],[CLUSFAC],[ENTLAST] set for DIR involved
 23464                                  ; Function:
 23465                                  ;	Locates directory entry in preparation for search
 23466                                  ;	GETENT provides entry for passing desired entry in AX
 23467                                  ; Outputs:
 23468                                  ;	[CURBUF+2]:BX = Pointer to next directory entry in CURBUF
 23469                                  ;	[CURBUF+2]:DX = Pointer to first byte after end of CURBUF
 23470                                  ;	[LASTENT] = New directory entry number
 23471                                  ;	[NXTCLUSNUM],[SECCLUSPOS] set via DIRREAD
 23472                                  ;	Carry set if error (currently user FAILed to I 24)
 23473                                  ;----------------------------------------------------------------------------
 23474                                  
 23475                                  	; 21/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 23476                                  GETENTRY:
 23477                                  	; 27/07/2018 - Retro DOS v3.0
 23478 00003F38 A1[4803]                	MOV	AX,[LASTENT]
 23479                                  
 23480                                  	;entry	GETENT
 23481                                  GETENT:
 23482 00003F3B A3[4803]                	MOV	[LASTENT],AX
 23483                                  ;
 23484                                  ; Convert the entry number in AX into a byte offset from the beginning of the
 23485                                  ; directory.
 23486                                  ;
 23487 00003F3E B105                    	mov	cl,5			; shift left by 5 = mult by 32
 23488 00003F40 D3C0                    	rol	ax,cl			; keep hight order bits
 23489 00003F42 89C2                    	mov	dx,ax
 23490                                  	; 19/05/2019 - Retro DOS v4.0
 23491                                  	;and	ax,0FFE0h
 23492                                  	; 21/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 23493                                  	;and	ax,~(32-1)		; mask off high order bits
 23494                                  	; 16/12/2022
 23495 00003F44 24E0                    	and	al,0E0h ; ~31
 23496 00003F46 83E21F                  	and	dx,1Fh
 23497                                  	;and	dx,32-1			; mask off low order bits
 23498                                  ;
 23499                                  ; DX:AX contain the byte offset of the required directory entry from the
 23500                                  ; beginning of the directory. Convert this to a sector number. Round the
 23501                                  ; sector size down to a multiple of 32.
 23502                                  ;
 23503                                  	;mov	bx,[es:bp+2]
 23504 00003F49 268B5E02                	MOV	BX,[ES:BP+DPB.SECTOR_SIZE]
 23505 00003F4D 80E3E0                  	and	bl,0E0h
 23506                                  	;AND	BL,255-31		; Must be multiple of 32
 23507 00003F50 F7F3                    	DIV	BX
 23508 00003F52 89D3                    	MOV	BX,DX			; Position within sector
 23509 00003F54 53                      	PUSH	BX
 23510 00003F55 E8ADF7                  	call	DIRREAD
 23511 00003F58 5B                      	POP	BX
 23512                                  	;retc
 23513 00003F59 72B4                    	jc	short nextentry_retn	
 23514                                  SETENTRY:
 23515 00003F5B 8B16[E205]              	MOV	DX,[CURBUF]
 23516                                  	;add	dx,16 ; MSDOS 3.3
 23517                                  	;add	dx,20 ; MSDOS 6.0 
 23518 00003F5F 83C214                  	ADD	DX,BUFINSIZ
 23519 00003F62 01D3                    	ADD	BX,DX
 23520                                  	;add	dx,[es:bp+2]
 23521 00003F64 26035602                	ADD	DX,[ES:BP+DPB.SECTOR_SIZE]  ; Always clears carry
 23522                                  	; 29/12/2022
 23523                                  	; MSDOS 6.21 MSDOS.SYS contains a 'CLC' here, at DOSCODE:7E15h
 23524 00003F68 F8                      	clc
 23525 00003F69 C3                      	retn
 23526                                  
 23527                                  ;Break	<SETDIRSRCH SETROOTSRCH -- Set Search environments>
 23528                                  ;----------------------------------------------------------------------------
 23529                                  ;
 23530                                  ; Procedure Name : SETDIRSRCH,SETROOTSRCH
 23531                                  ;
 23532                                  ; Inputs:
 23533                                  ;	BX cluster number of start of directory
 23534                                  ;	ES:BP Points to DPB
 23535                                  ;	DI next cluster number from fastopen extended info. DOS 3.3 only
 23536                                  ; Function:
 23537                                  ;	Set up a directory search
 23538                                  ; Outputs:
 23539                                  ;	[DIRSTART] = BX
 23540                                  ;	[CLUSFAC],[CLUSNUM],[SECCLUSPOS],[DIRSEC] set
 23541                                  ;	Carry set if error (currently user FAILed to I 24)
 23542                                  ; destroys AX,DX,BX
 23543                                  ;----------------------------------------------------------------------------
 23544                                  
 23545                                  	; 21/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 23546                                  SETDIRSRCH:
 23547 00003F6A 09DB                    	OR	BX,BX
 23548 00003F6C 7437                    	JZ	short SETROOTSRCH
 23549 00003F6E 891E[C205]              	MOV	[DIRSTART],BX
 23550                                  	;mov	al,[es:bp+4]
 23551 00003F72 268A4604                	MOV	AL,[ES:BP+DPB.CLUSTER_MASK]
 23552 00003F76 FEC0                    	INC	AL
 23553 00003F78 A2[7705]                	MOV	[CLUSFAC],AL
 23554                                  
 23555                                  ; DOS 3.3 for FastOPen	F.C. 6/12/86
 23556                                  	;SAVE	<SI>
 23557 00003F7B 56                      	push	si
 23558                                  	;test	byte [FastOpenFlg],2
 23559 00003F7C F606[3A0D]02            	TEST	byte [FastOpenFlg],Lookup_Success
 23560 00003F81 7507                    	JNZ	short UNP_OK
 23561                                  
 23562                                  ; DOS 3.3 for FastOPen	F.C. 6/12/86
 23563                                  	;invoke	UNPACK
 23564 00003F83 E89916                  	call	UNPACK
 23565 00003F86 7302                    	JNC	short UNP_OK
 23566                                  	;RESTORE <SI>
 23567 00003F88 5E                      	pop	si
 23568                                  	;return
 23569 00003F89 C3                      	retn
 23570                                  
 23571                                  UNP_OK:
 23572 00003F8A 893E[BC05]              	MOV	[CLUSNUM],DI
 23573 00003F8E 89DA                    	MOV	DX,BX
 23574 00003F90 30DB                    	XOR	BL,BL
 23575 00003F92 881E[7305]              	MOV	[SECCLUSPOS],BL
 23576                                  	;invoke	FIGREC
 23577 00003F96 E82A0F                  	call	FIGREC
 23578                                  	;RESTORE <SI>
 23579 00003F99 5E                      	pop	si
 23580                                  	
 23581                                  	; 19/05/2019 - Retro DOS v4.0
 23582                                  
 23583                                  	; MSDOS 6.0
 23584                                  	;PUSH	DX			   ;AN000; >32mb
 23585                                  	;MOV	DX,[HIGH_SECTOR]	   ;AN000; >32mb
 23586                                  	;MOV	[DIRSEC+2],DX		   ;AN000; >32mb
 23587                                  	;POP	DX			   ;AN000; >32mb
 23588                                  
 23589                                  	; 21/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 23590                                  	;push	dx
 23591                                  	;mov	dx,[HIGH_SECTOR]
 23592                                  	;mov	[DIRSEC+2],dx
 23593                                  	;pop	dx
 23594                                  	;MOV	[DIRSEC],dx
 23595                                  	; 16/12/2022
 23596 00003F9A A1[0706]                	mov	ax,[HIGH_SECTOR]
 23597 00003F9D A3[C005]                	mov	[DIRSEC+2],AX
 23598 00003FA0 8916[BE05]              	MOV	[DIRSEC],DX
 23599                                  
 23600                                  	; 16/12/2022
 23601                                  	; cf=0 (at the return of FIGREC)
 23602                                  	;CLC
 23603 00003FA4 C3                      	retn
 23604                                  
 23605                                  	;entry	SETROOTSRCH
 23606                                  SETROOTSRCH:
 23607 00003FA5 31C0                    	XOR	AX,AX
 23608 00003FA7 A3[C205]                	MOV	[DIRSTART],AX
 23609 00003FAA A2[7305]                	MOV	[SECCLUSPOS],AL
 23610 00003FAD 48                      	DEC	AX
 23611 00003FAE A3[BC05]                	MOV	[CLUSNUM],AX
 23612                                  	;mov	ax,[es:bp+0Bh]
 23613 00003FB1 268B460B                	MOV	AX,[ES:BP+DPB.FIRST_SECTOR]
 23614                                  	; 19/05/2019
 23615                                  	;;mov	dx,[es:bp+10h] ; MSDOS 3.3
 23616                                  	;mov	dx,[es:bp+11h] ; MSDOS 6.0
 23617 00003FB5 268B5611                	MOV	DX,[ES:BP+DPB.DIR_SECTOR]
 23618 00003FB9 29D0                    	SUB	AX,DX
 23619 00003FBB A2[7705]                	MOV	[CLUSFAC],AL
 23620 00003FBE 8916[BE05]              	MOV	[DIRSEC],DX		      ;F.C. >32mb
 23621                                  	; MSDOS 6.0
 23622 00003FC2 C706[C005]0000          	MOV	WORD [DIRSEC+2],0	      ;F.C. >32mb
 23623 00003FC8 F8                      	CLC
 23624 00003FC9 C3                      	retn
 23625                                  
 23626                                  ;============================================================================
 23627                                  ; DIR2.ASM, MSDOS 6.0, 1991
 23628                                  ;============================================================================
 23629                                  ; 27/07/2018 - Retro DOS v3.0
 23630                                  ; 19/05/2019 - Retro DOS v4.0 
 23631                                  
 23632                                  ;	TITLE	DIR2 - Directory and path cracking
 23633                                  ;	NAME	Dir2
 23634                                  
 23635                                  ;Break	<GETPATH -- PARSE A WFP>
 23636                                  ;----------------------------------------------------------------------------
 23637                                  ;
 23638                                  ; Procedure Name : GETPATH
 23639                                  ;
 23640                                  ; Inputs:
 23641                                  ;	[WFP_START] Points to WFP string ("d:\" must be first 3 chars, NUL
 23642                                  ;		terminated; d:/ (note forward slash) indicates a real device).
 23643                                  ;	[CURR_DIR_END] Points to end of Current dir part of string
 23644                                  ;		( = -1 if current dir not involved, else
 23645                                  ;		 Points to first char after last "/" of current dir part)
 23646                                  ;	[THISCDS] Points to CDS being used
 23647                                  ;	[SATTRIB] Is attribute of search, determines what files can be found
 23648                                  ;	[NoSetDir] set
 23649                                  ;	[THISDPB] set to DPB if disk otherwise garbage.
 23650                                  ; Function:
 23651                                  ;	Crack the path
 23652                                  ; Outputs:
 23653                                  ;	Sets EXTERR_LOCUS = errLOC_Disk if disk file
 23654                                  ;	Sets EXTERR_LOCUS = errLOC_Unk if char device
 23655                                  ;	ID1 field of [THISCDS] updated appropriately
 23656                                  ;	[ATTRIB] = [SATTRIB]
 23657                                  ;	ES:BP Points to DPB
 23658                                  ;	Carry set if bad path
 23659                                  ;	   SI Points to path element causing failure
 23660                                  ;	   Zero set
 23661                                  ;	      [DIRSTART],[DIRSEC],[CLUSNUM], and [CLUSFAC] are set up to
 23662                                  ;	      start a search on the last directory
 23663                                  ;	      CL is zero if there is a bad name in the path
 23664                                  ;	      CL is non-zero if the name was simply not found
 23665                                  ;		 [ENTFREE] may have free spot in directory
 23666                                  ;		 [NAME1] is the name.
 23667                                  ;		 CL = 81H if '*'s or '?' in NAME1, 80H otherwise
 23668                                  ;	   Zero reset
 23669                                  ;	      File in middle of path or bad name in path or attribute mismatch
 23670                                  ;		or path too long or malformed path
 23671                                  ;	ELSE
 23672                                  ;	   [CurBuf] = -1 if root directory
 23673                                  ;	   [CURBUF] contains directory record with match
 23674                                  ;	   [CURBUF+2]:BX Points into [CURBUF] to start of entry
 23675                                  ;	   [CURBUF+2]:SI Points into [CURBUF] to dir_first field for entry
 23676                                  ;	   AH = device ID
 23677                                  ;	      bit 7 of AH set if device SI and BX
 23678                                  ;	      will point DOSGROUP relative The firclus
 23679                                  ;	      field of the device entry contains the device pointer
 23680                                  ;	   [NAME1] Has name looked for
 23681                                  ;	   If last element is a directory zero is set and:
 23682                                  ;	      [DIRSTART],[SECCLUSPOS],[DIRSEC],[CLUSNUM], and [CLUSFAC]
 23683                                  ;	      are set up to start a search on it.
 23684                                  ;	      unless [NoSetDir] is non zero in which case the return is
 23685                                  ;	      like that for a file (except for zero flag)
 23686                                  ;	   If last element is a file zero is reset
 23687                                  ;	      [DIRSEC],[CLUSNUM],[CLUSFAC],[NXTCLUSNUM],[SECCLUSPOS],
 23688                                  ;	      [LASTENT], [ENTLAST] are set to continue search of last
 23689                                  ;	      directory for furthur matches on NAME1 via the NEXTENT
 23690                                  ;	      entry point in FindEntry (or GETENT entry in GETENTRY in
 23691                                  ;	      which case [NXTCLUSNUM] and [SECCLUSPOS] need not be valid)
 23692                                  ; DS preserved, Others destroyed
 23693                                  ;---------------------------------------------------------------------------
 23694                                  
 23695                                  ;hkn; called from delete.asm, finfo.asm, mknode.asm and rename.asm.
 23696                                  ;hkn; DS already set up at this point.
 23697                                  
 23698                                  	; 21/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 23699                                  GETPATH:
 23700                                  	;mov	word [CREATING],0E500h
 23701 00003FCA C706[7E05]00E5          	MOV	WORD [CREATING],DIRFREE*256+0 ; Not Creating, not DEL *.*
 23702                                  
 23703                                  ; Same as GetPath only CREATING and DELALL already set
 23704                                  
 23705                                  	;entry	GetPathNoSet
 23706                                  GetPathNoSet:
 23707                                  	;mov	byte [EXTERR_LOCUS],2	
 23708 00003FD0 C606[2303]02            	MOV	byte [EXTERR_LOCUS],errLOC_Disk
 23709 00003FD5 C706[E205]FFFF          	MOV	word [CURBUF],-1	; initial setting
 23710                                  
 23711                                  ; See if the input indicates a device that has already been detected. If so,
 23712                                  ; go build the guy quickly. Otherwise, let findpath find the device.
 23713                                  
 23714 00003FDB 8B3E[B205]              	MOV	DI,[WFP_START]		; point to the beginning of the name
 23715                                  	;cmp	word [DI+1],5C3Ah
 23716                                  	;CMP	WORD [DI+1],'\' << 8 + ':'
 23717 00003FDF 817D013A5C              	cmp	word [DI+1],':\'
 23718 00003FE4 7438                    	JZ	short CrackIt
 23719                                  
 23720                                  ; Let ChkDev find it in the device list
 23721                                  
 23722 00003FE6 83C703                  	ADD	DI,3
 23723                                  	; 18/08/2018
 23724                                  	;MOV	SI,DI			; let CHKDEV see the original name
 23725                                  	; 21/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 23726                                  	; 16/12/2022
 23727                                  	;mov	si,di ; not required ! (it is written in CHKDEV proc already!)
 23728 00003FE9 E8AB00                  	CALL	CHKDEV
 23729 00003FEC 722E                    	JC	short InternalError
 23730                                  
 23731                                  Build_devJ:
 23732 00003FEE A0[6D05]                	MOV	AL,[SATTRIB]
 23733 00003FF1 A2[6B05]                	MOV	[ATTRIB],AL
 23734                                  	;mov	byte [EXTERR_LOCUS],1
 23735 00003FF4 C606[2303]01            	MOV	byte [EXTERR_LOCUS],errLOC_Unk ; In the particular case of
 23736                                  					; "finding" a char device
 23737                                  					; set LOCUS to Unknown. This makes
 23738                                  					; certain idiotic problems reported
 23739                                  					; by a certain 3 letter OEM go away.
 23740                                  
 23741                                  ; Take name in name1 and pack it back into where wfp_start points. This
 23742                                  ; guarantees wfp_start pointing to a canonical representation of a device.
 23743                                  ; We are allowed to do this as GetPath is *ALWAYS* called before entering a
 23744                                  ; wfp into the share set.
 23745                                  ;
 23746                                  ; We copy chars from name1 to wfp_start remembering the position of the last
 23747                                  ; non-space seen +1.  This position is kept in DX.
 23748                                  
 23749                                  ;hkn; SS is DOSDATA
 23750 00003FF9 16                      	push	ss
 23751 00003FFA 07                      	pop	es
 23752                                  
 23753                                  ;hkn; NAME1 is in DOSDATA
 23754 00003FFB BE[4B05]                	mov	si,NAME1
 23755 00003FFE 8B3E[B205]              	mov	di,[WFP_START]
 23756 00004002 89FA                    	mov	dx,di
 23757 00004004 B90800                  	mov	cx,8			; 8 chars in device name
 23758                                  MoveLoop:
 23759 00004007 AC                      	lodsb
 23760 00004008 AA                      	stosb
 23761 00004009 3C20                    	cmp	al," "
 23762 0000400B 7402                    	jz	short NoSave
 23763                                  
 23764 0000400D 89FA                    	mov	dx,di
 23765                                  NoSave:
 23766 0000400F E2F6                    	loop	MoveLoop
 23767                                  
 23768                                  ; DX is the position of the last seen non-space + 1. We terminate the name
 23769                                  ; at this point.
 23770                                  
 23771 00004011 89D7                    	mov	di,dx
 23772 00004013 C60500                  	mov	byte [di],0		; end of string
 23773 00004016 E8CE02                  	call	Build_device_ent	; Clears carry sets zero
 23774 00004019 FEC0                    	INC	AL			; reset zero
 23775 0000401B C3                      	retn
 23776                                  
 23777                                  InternalError:
 23778                                  InternalError_loop:
 23779 0000401C EBFE                    	JMP	short InternalError_loop	; freeze
 23780                                  
 23781                                  ; Start off at the correct spot. Optimize if the current dir part is valid.
 23782                                  
 23783                                  CrackIt:
 23784 0000401E 8B36[B605]              	MOV	SI,[CURR_DIR_END]	; get current directory pointer
 23785 00004022 83FEFF                  	CMP	SI,-1			; valid?
 23786 00004025 7503                    	JNZ	short LOOK_SING		; Yes, use it.
 23787 00004027 8D7503                  	LEA	SI,[DI+3]		; skip D:\.
 23788                                  LOOK_SING:
 23789                                  	;mov	byte [ATTRIB],16h
 23790 0000402A C606[6B05]16            	MOV	byte [ATTRIB],attr_directory+attr_system+attr_hidden
 23791                                  					; Attributes to search through Dirs
 23792 0000402F C43E[A205]              	LES	DI,[THISCDS]
 23793 00004033 B8FFFF                  	MOV	AX,-1
 23794                                  	;mov	bx,[es:di+73]
 23795 00004036 268B5D49                	MOV	BX,[ES:DI+curdir.ID]
 23796 0000403A 8B36[B605]              	MOV	SI,[CURR_DIR_END]
 23797                                  
 23798                                  ; AX = -1
 23799                                  ; BX = cluster number of current directory. THis number is -1 if the media
 23800                                  ;      has been uncertainly changed.
 23801                                  ; SI = offset in DOSGroup into path to end of current directory text. This
 23802                                  ;      may be -1 if no current directory part has been used.
 23803                                  
 23804 0000403E 39C6                    	CMP	SI,AX			; if Current directory is not part
 23805 00004040 743B                    	JZ	short NO_CURR_D		; then we must crack from root
 23806 00004042 39C3                    	CMP	BX,AX			; is the current directory cluster valid
 23807                                  
 23808                                  ; DOS 3.3  6/25/86
 23809 00004044 7437                    	JZ	short NO_CURR_D		; no, crack form the root
 23810                                  	;test	byte [FastOpenFlg],1
 23811 00004046 F606[3A0D]01            	TEST	byte [FastOpenFlg],FastOpen_Set ; for fastopen ?
 23812 0000404B 743D                    	JZ	short GOT_SEARCH_CLUSTER	; no
 23813 0000404D 06                      	PUSH	ES			; save registers
 23814 0000404E 57                      	PUSH	DI
 23815 0000404F 51                      	PUSH	CX
 23816 00004050 FF74FF                  	PUSH	word [SI-1]		; save \ and 1st char of next element
 23817 00004053 56                      	PUSH	SI
 23818 00004054 53                      	PUSH	BX
 23819                                  
 23820 00004055 C644FF00                	MOV	BYTE [SI-1],0		; call fastopen to look up cur dir info
 23821 00004059 8B36[B205]              	MOV	SI,[WFP_START]
 23822                                  
 23823                                  ;hkn; FastOpenTable, Dir_Info_Buff & FastOpen_Ext_Info are in DOSDATA
 23824 0000405D BB[300D]                	MOV	BX,FastOpenTable
 23825 00004060 BF[460D]                	MOV	DI,Dir_Info_Buff
 23826 00004063 B9[3B0D]                	MOV	CX,FastOpen_Ext_Info
 23827                                  	;mov	al,1
 23828 00004066 B001                    	MOV	AL,FONC_Look_up
 23829 00004068 1E                      	PUSH	DS
 23830 00004069 07                      	POP	ES
 23831                                  	;call	far [BX+2]
 23832 0000406A FF5F02                  	CALL	far [BX+fastopen_entry.name_caching]
 23833 0000406D 7203                    	JC	short GO_Chk_end1 	;fastopen not installed, or wrong drive.
 23834                                  					; Go to Got_Srch_cluster
 23835                                  	; 29/12/2022
 23836                                  	;CMP	BYTE [SI],0		;fastopen has current dir info?
 23837                                  	;JE	short GO_Chk_end	;yes. Go to got_search_cluster
 23838                                  	;stc
 23839                                  	;jmp	short GO_Chk_end	;Go to No_Curr_D
 23840                                  
 23841 0000406F 803C01                  	cmp	byte [si],1
 23842                                  GO_Chk_end1:	; 29/12/2022
 23843 00004072 F5                      	cmc 
 23844                                  	; [si] = 0 -> cf = 0
 23845                                  	; [si] > 0 -> cf = 1
 23846                                  
 23847                                  ;GO_Chk_end1:
 23848                                  	; 29/12/2022
 23849                                  	;clc
 23850                                  
 23851                                  GO_Chk_end:				; restore registers
 23852 00004073 5B                      	POP	BX
 23853 00004074 5E                      	POP	SI
 23854 00004075 8F44FF                  	POP	word [SI-1]
 23855 00004078 59                      	POP	CX
 23856 00004079 5F                      	POP	DI
 23857 0000407A 07                      	POP	ES
 23858 0000407B 730D                    	JNC	short GOT_SEARCH_CLUSTER ; crack based on cur dir
 23859                                  
 23860                                  ; DOS 3.3  6/25/86
 23861                                  ;
 23862                                  ; We must cract the path beginning at the root. Advance pointer to beginning
 23863                                  ; of path and go crack from root.
 23864                                  
 23865                                  NO_CURR_D:
 23866 0000407D 8B36[B205]              	MOV	SI,[WFP_START]
 23867 00004081 8D7403                  	LEA	SI,[SI+3]		; Skip "d:/"
 23868 00004084 C42E[8A05]              	LES	BP,[THISDPB]		; Get ES:BP
 23869 00004088 EB3C                    	JMP	short ROOTPATH
 23870                                  
 23871                                  ; We are able to crack from the current directory part. Go set up for search
 23872                                  ; of specified cluster.
 23873                                  
 23874                                  GOT_SEARCH_CLUSTER:
 23875 0000408A C42E[8A05]              	LES	BP,[THISDPB]		; Get ES:BP
 23876 0000408E E8D9FE                  	call	SETDIRSRCH
 23877                                  	;JC	short SETFERR
 23878                                  	;JMP	short FINDPATH
 23879                                  	; 16/12/2022
 23880 00004091 7344                    	jnc	short FINDPATH ; 17/08/2018
 23881                                  	; 21/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 23882                                  	;JC	short SETFERR
 23883                                  	;JMP	short FINDPATH
 23884                                  SETFERR:
 23885 00004093 30C9                    	XOR	CL,CL			; set zero
 23886 00004095 F9                      	STC
 23887 00004096 C3                      	retn
 23888                                  
 23889                                  ;---------------------------------------------------------------------------
 23890                                  ;
 23891                                  ; Procedure Name : ChkDev
 23892                                  ;
 23893                                  ; Check to see if the name at DS:DI is a device. Returns carry set if not a
 23894                                  ;   device.
 23895                                  ; Blasts CX,SI,DI,AX,BX
 23896                                  ;---------------------------------------------------------------------------
 23897                                  
 23898                                  CHKDEV:
 23899 00004097 89FE                    	MOV	SI,DI
 23900 00004099 8CD7                    	MOV	DI,SS
 23901 0000409B 8EC7                    	MOV	ES,DI
 23902                                  
 23903 0000409D BF[4B05]                	MOV	DI,NAME1
 23904 000040A0 B90900                  	MOV	CX,9
 23905                                  TESTLOOP:
 23906 000040A3 E87F10                  	call	GETLET
 23907                                  
 23908 000040A6 3C2E                    	CMP	AL,'.'
 23909 000040A8 740E                    	JZ	short TESTDEVICE
 23910 000040AA E8CE10                  	call	PATHCHRCMP
 23911 000040AD 7407                    	JZ	short NOTDEV
 23912 000040AF 08C0                    	OR	AL,AL
 23913 000040B1 7405                    	JZ	short TESTDEVICE
 23914                                  
 23915 000040B3 AA                      	STOSB
 23916 000040B4 E2ED                    	LOOP	TESTLOOP
 23917                                  NOTDEV:
 23918 000040B6 F9                      	STC
 23919 000040B7 C3                      	retn
 23920                                  
 23921                                  TESTDEVICE:
 23922 000040B8 83C102                  	ADD	CX,2
 23923 000040BB B020                    	MOV	AL,' '
 23924 000040BD F3AA                    	REP	STOSB
 23925 000040BF 8CD0                    	MOV	AX,SS
 23926 000040C1 8ED8                    	MOV	DS,AX
 23927                                  	;call	DEVNAME
 23928                                  	;retn
 23929                                  	; 18/12/2022
 23930 000040C3 E9C201                  	jmp	DEVNAME
 23931                                  
 23932                                  ;Break	<ROOTPATH, FINDPATH -- PARSE A PATH>
 23933                                  ;----------------------------------------------------------------------------
 23934                                  ;
 23935                                  ; Procedure Name : ROOTPATH,FINDPATH
 23936                                  ;
 23937                                  ; Inputs:
 23938                                  ;	Same as FINDPATH but,
 23939                                  ;	SI Points to asciz string of path which is assumed to start at
 23940                                  ;		the root (no leading '/').
 23941                                  ; Function:
 23942                                  ;	Search from root for path
 23943                                  ; Outputs:
 23944                                  ;	Same as FINDPATH but:
 23945                                  ;	If root directory specified, [CURBUF] and [NAME1] are NOT set, and
 23946                                  ;	[NoSetDir] is ignored.
 23947                                  ;----------------------------------------------------------------------------
 23948                                  
 23949                                  	; 21/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 23950                                  	; DOSCODE:7F47h (MSDOS 5.0, MSDOS.SYS)
 23951                                  
 23952                                  ROOTPATH:
 23953 000040C6 E8DCFE                  	call	SETROOTSRCH
 23954 000040C9 803C00                  	CMP	BYTE [SI],0
 23955 000040CC 7509                    	JNZ	short FINDPATH
 23956                                  
 23957                                  ; Root dir specified
 23958 000040CE A0[6D05]                	MOV	AL,[SATTRIB]
 23959 000040D1 A2[6B05]                	MOV	[ATTRIB],AL
 23960 000040D4 30E4                    	XOR	AH,AH			; Sets "device ID" byte, sets zero
 23961                                  					; (dir), clears carry.
 23962 000040D6 C3                      	retn
 23963                                  
 23964                                  ; Inputs:
 23965                                  ;	[ATTRIB] Set to get through directories
 23966                                  ;	[SATTRIB] Set to find last element
 23967                                  ;	ES:BP Points to DPB
 23968                                  ;	SI Points to asciz string of path (no leading '/').
 23969                                  ;	[SECCLUSPOS] = 0
 23970                                  ;	[DIRSEC] = Phys sec # of first sector of directory
 23971                                  ;	[CLUSNUM] = Cluster # of next cluster
 23972                                  ;	[CLUSFAC] = Sectors per cluster
 23973                                  ;	[NoSetDir] set
 23974                                  ;	[CURR_DIR_END] Points to end of Current dir part of string
 23975                                  ;		( = -1 if current dir not involved, else
 23976                                  ;		 Points to first char after last "/" of current dir part)
 23977                                  ;	[THISCDS] Points to CDS being used
 23978                                  ;	[CREATING] and [DELALL] set
 23979                                  ; Function:
 23980                                  ;	Parse path name
 23981                                  ; Outputs:
 23982                                  ;	ID1 field of [THISCDS] updated appropriately
 23983                                  ;	[ATTRIB] = [SATTRIB]
 23984                                  ;	ES:BP Points to DPB
 23985                                  ;	[THISDPB] = ES:BP
 23986                                  ;	Carry set if bad path
 23987                                  ;	   SI Points to path element causing failure
 23988                                  ;	   Zero set
 23989                                  ;	      [DIRSTART],[DIRSEC],[CLUSNUM], and [CLUSFAC] are set up to
 23990                                  ;	      start a search on the last directory
 23991                                  ;	      CL is zero if there is a bad name in the path
 23992                                  ;	      CL is non-zero if the name was simply not found
 23993                                  ;		 [ENTFREE] may have free spot in directory
 23994                                  ;		 [NAME1] is the name.
 23995                                  ;		 CL = 81H if '*'s or '?' in NAME1, 80H otherwise
 23996                                  ;	   Zero reset
 23997                                  ;	      File in middle of path or bad name in path
 23998                                  ;		or path too long or malformed path
 23999                                  ;	ELSE
 24000                                  ;	   [CURBUF] contains directory record with match
 24001                                  ;	   [CURBUF+2]:BX Points into [CURBUF] to start of entry
 24002                                  ;	   [CURBUF+2]:SI Points to fcb_FIRCLUS field for entry
 24003                                  ;	   [NAME1] Has name looked for
 24004                                  ;	   AH = device ID
 24005                                  ;	      bit 7 of AH set if device SI and BX
 24006                                  ;	      will point DOSGROUP relative The firclus
 24007                                  ;	      field of the device entry contains the device pointer
 24008                                  ;	   If last element is a directory zero is set and:
 24009                                  ;	      [DIRSTART],[SECCLUSPOS],[DIRSEC],[CLUSNUM], and [CLUSFAC]
 24010                                  ;	      are set up to start a search on it,
 24011                                  ;	      unless [NoSetDir] is non zero in which case the return is
 24012                                  ;	      like that for a file (except for zero flag)
 24013                                  ;	   If last element is a file zero is reset
 24014                                  ;	      [DIRSEC],[CLUSNUM],[CLUSFAC],[NXTCLUSNUM],[SECCLUSPOS],
 24015                                  ;	      [LASTENT], [ENTLAST] are set to continue search of last
 24016                                  ;	      directory for furthur matches on NAME1 via the NEXTENT
 24017                                  ;	      entry point in FindEntry (or GETENT entry in GETENTRY in
 24018                                  ;	      which case [NXTCLUSNUM] and [SECCLUSPOS] need not be valid)
 24019                                  ; Destroys all other registers
 24020                                  
 24021                                  	; 21/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 24022                                  	; DOSCODE:7F58h (MSDOS 5.0, MSDOS.SYS)
 24023                                  
 24024                                      	;entry	FINDPATH
 24025                                  FINDPATH:
 24026 000040D7 06                      	PUSH	ES			; Save ES:BP
 24027 000040D8 56                      	PUSH	SI
 24028 000040D9 89F7                    	MOV	DI,SI
 24029 000040DB 8B0E[C205]              	MOV	CX,[DIRSTART]		; Get start clus of dir being searched
 24030 000040DF 833E[B605]FF            	CMP	word [CURR_DIR_END],-1
 24031 000040E4 740E                    	JZ	short NOIDS		; No current dir part
 24032 000040E6 3B3E[B605]              	CMP	DI,[CURR_DIR_END]
 24033 000040EA 7508                    	JNZ	short NOIDS		; Not to current dir end yet
 24034 000040EC C43E[A205]              	LES	DI,[THISCDS]
 24035                                  	;mov	[es:di+73],cx
 24036 000040F0 26894D49                	MOV	[ES:DI+curdir.ID],CX	; Set current directory currency
 24037                                  NOIDS:
 24038                                  
 24039                                  ; Parse the name off of DS:SI into NAME1. AL = 1 if there was a meta
 24040                                  ; character in the string. CX,DI may be destroyed.
 24041                                  ;
 24042                                  ;	invoke	NAMETRANS
 24043                                  ;	MOV	CL,AL
 24044                                  ;
 24045                                  ; The above is the slow method. The name has *already* been munged by
 24046                                  ; TransPath so no special casing needs to be done. All we do is try to copy
 24047                                  ; the name until ., \ or 0 is hit.
 24048                                  
 24049 000040F4 8CD0                    	MOV	AX,SS
 24050 000040F6 8EC0                    	MOV	ES,AX
 24051                                  
 24052                                  ;hkn; Name1 is in DOSDATA
 24053 000040F8 BF[4B05]                	MOV	DI,NAME1
 24054 000040FB B82020                  	MOV	AX,'  ' ; 2020h
 24055 000040FE AA                      	STOSB
 24056 000040FF AB                      	STOSW
 24057 00004100 AB                      	STOSW
 24058 00004101 AB                      	STOSW
 24059 00004102 AB                      	STOSW
 24060 00004103 AB                      	STOSW
 24061                                  
 24062                                  ;hkn; Name1 is in DOSDATA
 24063 00004104 BF[4B05]                	MOV	DI,NAME1
 24064 00004107 30E4                    	XOR	AH,AH			; bits for CL
 24065                                  GetNam:
 24066                                  	; 19/05/2019 - Retro DOS v4.0
 24067                                  	;INC	CL ; ?*! ; MSDOS 6.0	;AN000; KK increment volid count
 24068                                  
 24069                                  	; 21/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 24070                                  	; 16/12/2022
 24071                                  	;inc	cl ; not required !	
 24072                                  	
 24073 00004109 AC                      	LODSB
 24074 0000410A 3C2E                    	CMP	AL,'.'	; 2Eh
 24075 0000410C 7412                    	JZ	short _SetExt
 24076 0000410E 08C0                    	OR	AL,AL
 24077 00004110 7424                    	JZ	short _GetDone
 24078 00004112 3C5C                    	CMP	AL,'\'	; 5Ch
 24079 00004114 7420                    	JZ	short _GetDone
 24080 00004116 3C3F                    	CMP	AL,'?'	; 3Fh
 24081 00004118 7503                    	JNZ	short StoNam
 24082 0000411A 80CC01                  	OR	AH,1
 24083                                  StoNam: 
 24084 0000411D AA                      	STOSB
 24085 0000411E EBE9                    	JMP	short GetNam
 24086                                  _SetExt:
 24087 00004120 BF[5305]                	MOV	DI,NAME1+8
 24088                                  GetExt:
 24089 00004123 AC                      	LODSB
 24090 00004124 08C0                    	OR	AL,AL
 24091 00004126 740E                    	JZ	short _GetDone
 24092 00004128 3C5C                    	CMP	AL,'\'
 24093 0000412A 740A                    	JZ	short _GetDone
 24094 0000412C 3C3F                    	CMP	AL,'?'
 24095 0000412E 7503                    	JNZ	short StoExt
 24096 00004130 80CC01                  	OR	AH,1
 24097                                  StoExt: 
 24098 00004133 AA                      	STOSB
 24099 00004134 EBED                    	JMP	short GetExt
 24100                                  _GetDone:
 24101 00004136 4E                      	DEC	SI
 24102 00004137 88E1                    	MOV	CL,AH  ; 0 or 1 ; 29/12/2022
 24103 00004139 80C980                  	OR	CL,80H
 24104 0000413C 5F                      	POP	DI			; Start of this element
 24105 0000413D 07                      	POP	ES			; Restore ES:BP
 24106 0000413E 39FE                    	CMP	SI,DI
 24107 00004140 7503                    	JNZ	short check_device
 24108 00004142 E9EA00                  	JMP	_BADPATH		; NUL parse (two delims most likely)
 24109                                  check_device:
 24110 00004145 56                      	PUSH	SI			; Start of next element
 24111 00004146 8A04                    	MOV	AL,[SI]
 24112 00004148 08C0                    	OR	AL,AL
 24113 0000414A 7508                    	JNZ	short NOT_LAST
 24114                                  
 24115                                  ; for last element of the path switch to the correct search attributes
 24116                                  
 24117 0000414C 8A3E[6D05]              	MOV	BH,[SATTRIB]
 24118 00004150 883E[6B05]              	MOV	[ATTRIB],BH
 24119                                  
 24120                                  NOT_LAST:
 24121                                  
 24122                                  ; check name1 to see if we have a device...
 24123                                  
 24124 00004154 06                      	PUSH	ES			; Save ES:BP
 24125                                  
 24126                                  ;hkn; SS is DOSDATA
 24127                                  	;context ES
 24128 00004155 16                      	push	ss
 24129 00004156 07                      	pop	es
 24130 00004157 E82E01                  	call	DEVNAME 		; blast BX
 24131 0000415A 07                      	POP	ES			; Restore ES:BP
 24132 0000415B 720B                    	JC	short FindFile		; Not a device
 24133 0000415D 08C0                    	OR	AL,AL			; Test next char again
 24134 0000415F 7403                    	JZ	short GO_BDEV
 24135 00004161 E9CF00                  	JMP	FILEINPATH		; Device name in middle of path
 24136                                  
 24137                                  GO_BDEV:
 24138 00004164 5E                      	POP	SI			; Points to NUL at end of path
 24139 00004165 E986FE                  	JMP	Build_devJ
 24140                                  
 24141                                  FindFile:
 24142                                  ;;;; 7/28/86
 24143 00004168 803E[4B05]E5            	CMP	BYTE [NAME1],0E5H	; if 1st char = E5
 24144 0000416D 7505                    	JNZ	short NOE5		; no
 24145 0000416F C606[4B05]05            	MOV	BYTE [NAME1],05H	; change it to 05
 24146                                  NOE5:
 24147                                  ;;;; 7/28/86
 24148 00004174 57                      	PUSH	DI			; Start of this element
 24149 00004175 06                      	PUSH	ES			; Save ES:BP
 24150 00004176 51                      	PUSH	CX			; CL return from NameTrans
 24151                                  ;DOS 3.3 FastOPen 6/12/86 F.C.
 24152                                  
 24153 00004177 E89C02                  	CALL	LookupPath		; call fastopen to get dir entry
 24154 0000417A 7303                    	JNC	short DIR_FOUND		; found dir entry
 24155                                  
 24156                                  ;DOS 3.3 FastOPen 6/12/86 F.C.
 24157 0000417C E8A1FC                  	call	FINDENTRY
 24158                                  DIR_FOUND:
 24159 0000417F 59                      	POP	CX
 24160 00004180 07                      	POP	ES
 24161 00004181 5F                      	POP	DI
 24162 00004182 7303                    	JNC	short LOAD_BUF
 24163 00004184 E9D100                  	JMP	BADPATHPOP
 24164                                  
 24165                                  LOAD_BUF:
 24166 00004187 C53E[E205]              	LDS	DI,[CURBUF]
 24167                                  	;test	byte [bx+0Bh],10h
 24168 0000418B F6470B10                	TEST	BYTE [BX+dir_entry.dir_attr],attr_directory
 24169 0000418F 7503                    	JNZ	short GO_NEXT 		; DOS 3.3
 24170 00004191 E99F00                  	JMP	FILEINPATH		; Error or end of path
 24171                                  
 24172                                  ; if we are not setting the directory, then check for end of string
 24173                                  
 24174                                  GO_NEXT:
 24175                                  ;hkn; SS override
 24176 00004194 36803E[4C03]00          	CMP	BYTE [SS:NoSetDir],0
 24177 0000419A 7423                    	JZ	short SetDir
 24178 0000419C 89FA                    	MOV	DX,DI			; Save pointer to entry
 24179 0000419E 8CD9                    	MOV	CX,DS
 24180                                  
 24181                                  ;hkn; SS is DOSDATA
 24182                                  	;context DS
 24183 000041A0 16                      	push	ss
 24184 000041A1 1F                      	pop	ds
 24185 000041A2 5F                      	POP	DI			; Start of next element
 24186                                  	; 19/05/2019 - Retro DOS v4.0
 24187                                  	; MSDOS 6.0
 24188 000041A3 F606[3A0D]01            	TEST	byte [FastOpenFlg],FastOpen_Set ;only DOSOPEN can take advantage of
 24189 000041A8 740B                    	JZ	short _nofast			; the FastOpen
 24190 000041AA F606[3A0D]02            	TEST	byte [FastOpenFlg],Lookup_Success ; Lookup just happened
 24191 000041AF 7404                    	JZ	short _nofast			; no
 24192 000041B1 8B3E[660D]              	MOV	DI,[Next_Element_Start]	; no need to insert it again
 24193                                  _nofast:
 24194 000041B5 803D00                  	CMP	BYTE [DI],0
 24195                                  	;;JNZ	short NEXT_ONE		; DOS 3.3
 24196                                  	;;JMP	_SETRET  ; retn		; Got it
 24197                                  	;retn	; 05/09/2018
 24198                                  	; 21/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 24199                                  	;jmp	_SETRET
 24200                                  	; 16/12/2022
 24201 000041B8 7421                    	jz	short _SETRET
 24202                                  
 24203                                  NEXT_ONE:
 24204 000041BA 57                      	PUSH	DI			; Put start of next element back on stack
 24205 000041BB 89D7                    	MOV	DI,DX
 24206 000041BD 8ED9                    	MOV	DS,CX			; Get back pointer to entry
 24207                                  SetDir:
 24208 000041BF 8B14                    	MOV	DX,[SI] 		; Dir_first
 24209                                  
 24210                                  ;DOS 3.3 FastOPen 6/12/86 F.C.
 24211 000041C1 1E                      	PUSH	DS		      ; save [curbuf+2]
 24212                                  ;hkn; SS is DOSDATA
 24213 000041C2 16                      	push	ss
 24214 000041C3 1F                      	pop	ds		      ; set DS Dosgroup
 24215                                  	;test	byte [FastOpenFlg],2
 24216 000041C4 F606[3A0D]02            	TEST	byte [FastOpenFlg],Lookup_Success
 24217 000041C9 7411                    	JZ	short DO_NORMAL	      ; fastopen not in memory or path not
 24218 000041CB 89D3                    	MOV	BX,DX		      ; not found
 24219 000041CD 8B3E[BC05]              	MOV	DI,[CLUSNUM]	      ; clusnum was set in LookupPath
 24220 000041D1 50                      	PUSH	AX		      ; save device id (AH)
 24221 000041D2 E895FD                  	call	SETDIRSRCH
 24222 000041D5 58                      	POP	AX		      ; restore device id (AH)
 24223 000041D6 83C402                  	ADD	SP,2		      ; pop ds in stack
 24224 000041D9 EB3E                    	JMP	short FAST_OPEN_SKIP
 24225                                  
 24226                                  	; 16/12/2022
 24227                                  _SETRET:
 24228 000041DB C3                      	retn
 24229                                  
 24230                                  DO_NORMAL:
 24231 000041DC 1F                      	POP	DS			; DS = [curbuf + 2]
 24232                                  ;DOS 3.3 FastOPen 6/12/86 F.C.
 24233                                  
 24234 000041DD 29FB                    	SUB	BX,DI			; Offset into sector of start of entry
 24235 000041DF 29FE                    	SUB	SI,DI			; Offset into sector of dir_first
 24236 000041E1 53                      	PUSH	BX
 24237 000041E2 50                      	PUSH	AX
 24238 000041E3 56                      	PUSH	SI
 24239 000041E4 51                      	PUSH	CX
 24240                                  	;push	word [di+6]
 24241 000041E5 FF7506                  	PUSH	WORD [DI+BUFFINFO.buf_sector]	;AN000;>32mb
 24242                                  	; 19/05/2019
 24243                                  	; MSDOS 6.0
 24244                                  	;push	word [di+8]
 24245 000041E8 FF7508                  	PUSH	WORD [DI+BUFFINFO.buf_sector+2]	;AN000;>32mb
 24246 000041EB 89D3                    	MOV	BX,DX
 24247                                  
 24248                                  ;hkn; SS is DOSDATA
 24249                                  	;context DS
 24250 000041ED 16                      	push	ss
 24251 000041EE 1F                      	pop	ds
 24252                                  	;invoke	SETDIRSRCH		; This uses UNPACK which might blow
 24253 000041EF E878FD                  	call	SETDIRSRCH		; the entry sector buffer
 24254                                  	; 19/05/2019
 24255                                  	; MSDOS 6.0
 24256 000041F2 8F06[0706]              	POP	word [HIGH_SECTOR]
 24257 000041F6 5A                      	POP	DX
 24258 000041F7 720A                    	JC	short SKIP_GETB
 24259                                  	;mov	byte [ALLOWED],18h
 24260 000041F9 C606[4B03]18            	MOV	byte [ALLOWED],Allowed_RETRY+Allowed_FAIL
 24261 000041FE 30C0                    	XOR	AL,AL
 24262                                  	;invoke	GETBUFFR		; Get the entry buffer back
 24263 00004200 E83E18                  	call	GETBUFFR
 24264                                  SKIP_GETB:
 24265 00004203 59                      	POP	CX
 24266 00004204 5E                      	POP	SI
 24267 00004205 58                      	POP	AX
 24268 00004206 5B                      	POP	BX
 24269 00004207 7305                    	JNC	short SET_THE_BUF
 24270 00004209 5F                      	POP	DI			; Start of next element
 24271 0000420A 89FE                    	MOV	SI,DI			; Point with SI
 24272 0000420C EB21                    	JMP	SHORT _BADPATH
 24273                                  
 24274                                  SET_THE_BUF:
 24275 0000420E E859F5                  	call	SET_BUF_AS_DIR
 24276 00004211 8B3E[E205]              	MOV	DI,[CURBUF]
 24277 00004215 01FE                    	ADD	SI,DI			; Get the offsets back
 24278 00004217 01FB                    	ADD	BX,DI
 24279                                  ; DOS 3.3 FastOpen 6/12/86  F.C.
 24280                                  FAST_OPEN_SKIP:
 24281 00004219 5F                      	POP	DI			; Start of next element
 24282 0000421A E89D02                  	CALL	InsertPath		; insert dir entry info
 24283                                  ; DOS 3.3 FastOpen 6/12/86  F.C.
 24284 0000421D 8A05                    	MOV	AL,[DI]
 24285 0000421F 08C0                    	OR	AL,AL
 24286 00004221 74B8                    	JZ	short _SETRET		; At end
 24287 00004223 47                      	INC	DI			; Skip over "/"
 24288 00004224 89FE                    	MOV	SI,DI			; Point with SI
 24289 00004226 E8520F                  	call	PATHCHRCMP
 24290 00004229 7503                    	JNZ	short find_bad_name	; oops
 24291 0000422B E9A9FE                  	JMP	FINDPATH		; Next element
 24292                                  
 24293                                  find_bad_name:
 24294 0000422E 4E                      	DEC	SI			; Undo above INC to get failure point
 24295                                  _BADPATH:
 24296 0000422F 30C9                    	XOR	CL,CL			; Set zero
 24297 00004231 EB2C                    	JMP	SHORT BADPRET
 24298                                  
 24299                                  FILEINPATH:
 24300 00004233 5F                      	POP	DI			; Start of next element
 24301                                  
 24302                                  ;hkn; SS is DOSDATA
 24303                                  	;context DS			; Got to from one place with DS gone
 24304 00004234 16                      	push	ss
 24305 00004235 1F                      	pop	ds
 24306                                  
 24307                                  ; DOS 3.3 FastOpen
 24308                                  	;test	byte [FastOpenFlg],1
 24309 00004236 F606[3A0D]01            	TEST	byte [FastOpenFlg],FastOpen_Set  ; do this here is we don't want to
 24310 0000423B 740B                    	JZ	short NO_FAST		; device info to fastopen
 24311                                  	;test	byte [FastOpenFlg],2
 24312 0000423D F606[3A0D]02            	TEST	byte [FastOpenFlg],Lookup_Success
 24313 00004242 7404                    	JZ	short NO_FAST
 24314 00004244 8B3E[660D]              	MOV	DI,[Next_Element_Start]  ; This takes care of one time lookup
 24315                                  					 ; success
 24316                                  NO_FAST:
 24317                                  ; DOS 3.3 FastOpen
 24318 00004248 8A05                    	MOV	AL,[DI]
 24319 0000424A 08C0                    	OR	AL,AL
 24320 0000424C 7404                    	JZ	short INCRET
 24321 0000424E 89FE                    	MOV	SI,DI			; Path too long
 24322 00004250 EB0D                    	JMP	SHORT BADPRET
 24323                                  
 24324                                  INCRET:
 24325                                  ; DOS 3.3 FasOpen 6/12/86  F.C.
 24326                                  
 24327 00004252 E86502                  	CALL   InsertPath		; insert dir entry info
 24328                                  
 24329                                  ; DOS 3.3 FasOpen 6/12/86  F.C.
 24330 00004255 FEC0                    	INC	AL			; Reset zero
 24331                                  	; 16/12/2022	
 24332                                  ;_SETRET:
 24333 00004257 C3                      	retn
 24334                                  
 24335                                  BADPATHPOP:
 24336 00004258 5E                      	POP	SI			; Start of next element
 24337 00004259 8A04                    	MOV	AL,[SI]
 24338 0000425B 89FE                    	MOV	SI,DI			; Start of bad element
 24339 0000425D 08C0                    	OR	AL,AL			; zero if bad element is last, non-zero if path too long
 24340                                  BADPRET:
 24341 0000425F A0[6D05]                	MOV	AL,[SATTRIB]
 24342 00004262 A2[6B05]                	MOV	[ATTRIB],AL		; Make sure return correct
 24343 00004265 F9                      	STC
 24344 00004266 C3                      	retn
 24345                                  
 24346                                  ;Break	<STARTSRCH -- INITIATE DIRECTORY SEARCH>
 24347                                  ;---------------------------------------------------------------------------
 24348                                  ;
 24349                                  ; Procedure Name : STARTSRCH
 24350                                  ;
 24351                                  ; Inputs:
 24352                                  ;	[THISDPB] Set
 24353                                  ; Function:
 24354                                  ;	Set up a search for GETENTRY and NEXTENTRY
 24355                                  ; Outputs:
 24356                                  ;	ES:BP = Drive parameters
 24357                                  ;	Sets up LASTENT, ENTFREE=ENTLAST=-1, VOLID=0
 24358                                  ; Destroys ES,BP,AX
 24359                                  ;--------------------------------------------------------------------------
 24360                                  
 24361                                  STARTSRCH:
 24362 00004267 C42E[8A05]              	LES	BP,[THISDPB]
 24363 0000426B 31C0                    	XOR	AX,AX
 24364 0000426D A3[4803]                	MOV	[LASTENT],AX
 24365 00004270 A2[7B05]                	MOV	[VOLID],AL		; No volume ID found
 24366 00004273 48                      	DEC	AX
 24367 00004274 A3[D805]                	MOV	[ENTFREE],AX
 24368 00004277 A3[DA05]                	MOV	[ENTLAST],AX
 24369 0000427A C3                      	retn
 24370                                  
 24371                                  ;BREAK <MatchAttributes - the final check for attribute matching>
 24372                                  ;----------------------------------------------------------------------------
 24373                                  ; Procedure Name : MatchAttributes
 24374                                  ;
 24375                                  ; Input:    [Attrib] = attribute to search for
 24376                                  ;	    CH = found attribute
 24377                                  ; Output:   JZ <match>
 24378                                  ;	    JNZ <nomatch>
 24379                                  ; Registers modified: noneski
 24380                                  ;----------------------------------------------------------------------------
 24381                                  
 24382                                  MatchAttributes:
 24383 0000427B 50                      	PUSH	AX
 24384                                  
 24385                                  ;hkn; SS override
 24386 0000427C 36A0[6B05]              	MOV	AL,[ss:ATTRIB]		; AL <- SearchSet
 24387 00004280 F6D0                    	NOT	AL			; AL <- SearchSet'
 24388 00004282 20E8                    	AND	AL,CH			; AL <- SearchSet' and FoundSet
 24389                                  	;and	al,16h
 24390 00004284 2416                    	AND	AL,attr_all	; AL <- SearchSet' and FoundSet and Important
 24391                                  ;
 24392                                  ; the result is non-zero if an attribute is not in the search set
 24393                                  ; and in the found set and in the important set. This means that we do not
 24394                                  ; have a match. Do a JNZ <nomatch> or JZ <match>
 24395                                  ;
 24396 00004286 58                      	POP	AX
 24397 00004287 C3                      	retn
 24398                                  
 24399                                  ; 19/05/2019 - Retro DOS v4.0
 24400                                  ; DOSCODE:8148h (MSDOS 6.21, MSDOS.SYS)
 24401                                  
 24402                                  ; 21/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 24403                                  ; DOSCODE:810Dh (MSDOS 5.0, MSDOS.SYS)
 24404                                  
 24405                                  ;Break <DevName - Look for name of device>
 24406                                  ;---------------------------------------------------------------------------
 24407                                  ;
 24408                                  ; Procedure Name : DevName
 24409                                  ;
 24410                                  ; Inputs:
 24411                                  ;	DS,ES:DOSDATA
 24412                                  ;	Filename in NAME1
 24413                                  ;	ATTRIB set so that we can error out if looking for Volume IDs
 24414                                  ; Function:
 24415                                  ;	Determine if file is in list of I/O drivers
 24416                                  ; Outputs:
 24417                                  ;	Carry set if not a device
 24418                                  ;	ELSE
 24419                                  ;	Zero flag set
 24420                                  ;	BH = Bit 7,6 = 1, bit 5 = 0 (cooked mode)
 24421                                  ;	     bits 0-4 set from low byte of attribute word
 24422                                  ;	DEVPT = DWORD pointer to Device header of device
 24423                                  ; BX destroyed, others preserved
 24424                                  ;---------------------------------------------------------------------------
 24425                                  
 24426                                  DEVNAME:
 24427                                  	; 28/07/2018 - Retro DOS v3.0
 24428                                  	; IBMDOS.COM (MSDOS 3.3) - Offset 49FBh
 24429                                  
 24430 00004288 56                      	PUSH	SI
 24431 00004289 57                      	PUSH	DI
 24432 0000428A 51                      	PUSH	CX
 24433 0000428B 50                      	PUSH	AX
 24434                                  
 24435                                  ; E5 special code
 24436 0000428C FF36[4B05]              	PUSH	WORD [NAME1]
 24437 00004290 803E[4B05]05            	CMP	byte [NAME1],5
 24438 00004295 7505                    	JNZ	short NOKTR
 24439 00004297 C606[4B05]E5            	MOV	byte [NAME1],0E5h
 24440                                  NOKTR:
 24441                                  	;test	byte [ATTRIB],8
 24442 0000429C F606[6B05]08            	TEST	byte [ATTRIB],attr_volume_id
 24443                                  					; If looking for VOL id don't find devs
 24444 000042A1 7521                    	JNZ	short RET31
 24445                                  
 24446                                  ;hkn; NULDEV is in DOSDATA
 24447 000042A3 BE[4800]                	MOV	SI,NULDEV
 24448                                  LOOKIO:
 24449                                  	; 21/11/2022
 24450                                  	;test	byte [SI+SYSDEV.ATT+1],80h
 24451                                  	; 17/12/2022
 24452                                  	;test	byte [si+5],80h
 24453 000042A6 F6440580                	test	byte [SI+SYSDEV.ATT+1],(DEVTYP>>8)
 24454                                  	;;test	word [si+4],8000h
 24455                                  	;TEST	word [SI+SYSDEV.ATT],DEVTYP
 24456 000042AA 7411                    	JZ	short SKIPDEV 		; Skip block devices (NET and LOCAL)
 24457 000042AC 89F0                    	MOV	AX,SI
 24458                                  	;add	si,10
 24459 000042AE 83C60A                  	ADD	SI,SYSDEV.NAME
 24460                                  
 24461                                  ;hkn; NAME1 is in DOSDATA
 24462 000042B1 BF[4B05]                	MOV	DI,NAME1
 24463 000042B4 B90400                  	MOV	CX,4			; All devices are 8 letters
 24464 000042B7 F3A7                    	REPE	CMPSW			; Check for name in list
 24465 000042B9 89C6                    	MOV	SI,AX
 24466 000042BB 7415                    	JZ	short IOCHK		; Found it?
 24467                                  SKIPDEV:
 24468 000042BD C534                    	LDS	SI,[SI]			; Get address of next device
 24469 000042BF 83FEFF                  	CMP	SI,-1			; At end of list?
 24470 000042C2 75E2                    	JNZ	short LOOKIO
 24471                                  RET31:	
 24472 000042C4 F9                      	STC				; Not found
 24473                                  RETNV:	
 24474 000042C5 8CD1                    	MOV	CX,SS
 24475 000042C7 8ED9                    	MOV	DS,CX
 24476                                  
 24477 000042C9 8F06[4B05]              	POP	WORD [NAME1]
 24478 000042CD 58                      	POP	AX
 24479 000042CE 59                      	POP	CX
 24480 000042CF 5F                      	POP	DI
 24481 000042D0 5E                      	POP	SI
 24482 000042D1 C3                      	RETN
 24483                                  
 24484                                  IOCHK:
 24485                                  ;hkn; SS override for DEVPT
 24486 000042D2 368C1E[9C05]            	MOV	[SS:DEVPT+2],DS		; Save pointer to device
 24487                                  	;mov	bh,[si+4]
 24488 000042D7 8A7C04                  	MOV	BH,[SI+SYSDEV.ATT]
 24489 000042DA 80CFC0                  	OR	BH,0C0h
 24490 000042DD 80E7DF                  	and	bh,0DFh
 24491                                  	;AND	BH,~(020h)		; Clears Carry
 24492 000042E0 368936[9A05]            	MOV	[SS:DEVPT],SI
 24493 000042E5 EBDE                    	JMP	short RETNV
 24494                                  
 24495                                  ;BREAK <Build_device_ent - Make a Directory entry>
 24496                                  ;---------------------------------------------------------------------------
 24497                                  ; Procedure Name : Build_device_ent
 24498                                  ;
 24499                                  ; Inputs:
 24500                                  ;	[NAME1] has name
 24501                                  ;	BH is attribute field (supplied by DEVNAME)
 24502                                  ;	[DEVPT] points to device header (supplied by DEVNAME)
 24503                                  ; Function:
 24504                                  ;	Build a directory entry for a device at DEVFCB
 24505                                  ; Outputs:
 24506                                  ;	BX points to DEVFCB
 24507                                  ;	SI points to dir_first field
 24508                                  ;	AH = input BH
 24509                                  ;	AL = 0
 24510                                  ;	dir_first = DEVPT
 24511                                  ;	Zero Set, Carry Clear
 24512                                  ; DS,ES,BP preserved, others destroyed
 24513                                  ;--------------------------------------------------------------------------
 24514                                  
 24515                                  Build_device_ent:
 24516 000042E7 B82020                  	MOV	AX,"  " ; 2020h
 24517                                  
 24518                                  ;hkn; DEVFCB is in DOSDATA
 24519 000042EA BF[5305]                	MOV	DI,DEVFCB+8		; Point to extent field
 24520                                  
 24521                                  ;	Fill dir_ext	BUGBUG - use ERRNZs for this stuff!
 24522                                  
 24523 000042ED AB                      	STOSW
 24524 000042EE AA                      	STOSB				; Blank out extent field
 24525                                  	;mov	al,40h
 24526 000042EF B040                    	MOV	AL,attr_device
 24527                                  
 24528                                  ;	Fill Dir_attr
 24529                                  
 24530 000042F1 AA                      	STOSB				; Set attribute field
 24531 000042F2 31C0                    	XOR	AX,AX
 24532 000042F4 B90A00                  	MOV	CX,10
 24533                                  
 24534                                  ; Fill dir_pad
 24535                                  
 24536 000042F7 F3AB                    	REP	STOSW			; Fill rest with zeros
 24537 000042F9 E813C8                  	call	DATE16
 24538                                  
 24539                                  ;hkn; DEVFCB is in DOSDATA
 24540 000042FC BF[6105]                	MOV	DI,DEVFCB+dir_entry.dir_time ; 09/08/2018
 24541 000042FF 92                      	XCHG	AX,DX
 24542                                  
 24543                                  ; Fill dir_time
 24544                                  
 24545 00004300 AB                      	STOSW
 24546 00004301 92                      	XCHG	AX,DX
 24547                                  
 24548                                  ; Fill dir_date
 24549                                  
 24550 00004302 AB                      	STOSW
 24551 00004303 89FE                    	MOV	SI,DI			; SI points to dir_first field
 24552 00004305 A1[9A05]                	MOV	AX,[DEVPT]
 24553                                  
 24554                                  ; Fill dir_first
 24555                                  
 24556 00004308 AB                      	STOSW				; Dir_first points to device
 24557 00004309 A1[9C05]                	MOV	AX,[DEVPT+2]
 24558                                  ;
 24559                                  ; Fill dir_size_l
 24560                                  ;
 24561 0000430C AB                      	STOSW
 24562 0000430D 88FC                    	MOV	AH,BH			; Put device atts in AH
 24563                                  
 24564                                  ;hkn; DEVFCB is in DOSDATA
 24565 0000430F BB[4B05]                	MOV	BX,DEVFCB
 24566 00004312 30C0                    	XOR	AL,AL			; Set zero, clear carry
 24567 00004314 C3                      	retn
 24568                                  
 24569                                  ;Break	<ValidateCDS - given a CDS, validate the media and the current directory>
 24570                                  ;----------------------------------------------------------------------------
 24571                                  ;
 24572                                  ;   ValidateCDS - Get current CDS. Splice it. Call FatReadCDS to check
 24573                                  ;   media. If media has been changed, do DOS_Chdir to validate path.
 24574                                  ;   If invalid, reset original CDS to root.
 24575                                  ;
 24576                                  ;   Inputs:	ThisCDS points to CDS of interest
 24577                                  ;		SS:DI points to temp buffer
 24578                                  ;   Outputs:	The current directory string is validated on the appropriate
 24579                                  ;		    drive
 24580                                  ;		ThisDPB changed
 24581                                  ;		ES:DI point to CDS
 24582                                  ;		Carry set if error (currently user FAILed to I 24)
 24583                                  ;   Registers modified: all
 24584                                  ;----------------------------------------------------------------------------
 24585                                  
 24586                                  	; 21/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 24587                                  	; DOSCODE:819Bh (MSDOS 5.0, MSDOS.SYS)
 24588                                  
 24589                                  ValidateCDS:
 24590                                  	; 19/05/2019 - Retro DOS v4.0
 24591                                  	; 28/07/2018 - Retro DOS v3.0
 24592                                  
 24593                                     %define  Temp	[bp-2]	; word
 24594                                     %define  SaveCDS	[bp-6]	; dword
 24595                                     %define  SaveCDSL	[bp-6]	; word
 24596                                     %define  SaveCDSH	[bp-4]	; word
 24597                                  
 24598                                  	;Enter
 24599 00004315 55                      	push	bp
 24600 00004316 89E5                    	mov	bp,sp
 24601 00004318 83EC06                  	sub	sp,6
 24602                                  
 24603 0000431B 897EFE                  	MOV	Temp,DI
 24604                                  
 24605                                  ;hkn; SS override
 24606 0000431E 36C536[A205]            	LDS	SI,[SS:THISCDS]
 24607 00004323 8976FA                  	MOV	SaveCDSL,SI
 24608 00004326 8C5EFC                  	MOV	SaveCDSH,DS
 24609                                  	;EnterCrit critDisk
 24610 00004329 E82CD0                  	call	ECritDisk
 24611                                  	; 21/11/2022
 24612                                  	;test	byte [SI+curdir.flags+1],80h
 24613                                  	;test	word [si+67],8000h
 24614                                  	; 17/12/2022
 24615                                  	;test	byte [SI+68],80h
 24616 0000432C F6444480                	test	byte [SI+curdir.flags+1],(curdir_isnet>>8)
 24617                                  	;TEST	word [SI+curdir.flags],curdir_isnet	; Clears carry
 24618 00004330 7403                    	JZ	short _DoSplice
 24619 00004332 E99200                  	JMP	FatFail
 24620                                  _DoSplice:
 24621 00004335 30D2                    	XOR	DL,DL
 24622 00004337 368616[4C03]            	XCHG	DL,[SS:NoSetDir]
 24623                                  
 24624                                  ;hkn; SS is DOSDATA
 24625                                  	;Context ES
 24626 0000433C 16                      	push	ss
 24627 0000433D 07                      	pop	es
 24628                                  	;Invoke	FStrcpy
 24629 0000433E E8E9CE                  	call	FStrCpy
 24630 00004341 8B76FE                  	MOV	SI,Temp
 24631                                  
 24632                                  ;hkn; SS is DOSDATA
 24633                                  	;Context DS
 24634 00004344 16                      	push	ss
 24635 00004345 1F                      	pop	ds	
 24636                                  	;Invoke	Splice
 24637 00004346 E8A92B                  	call	Splice
 24638                                  
 24639                                   ;hkn; SS is DOSDATA
 24640                                  	;Context DS			;   FatReadCDS (ThisCDS);
 24641 00004349 16                      	push	ss
 24642 0000434A 1F                      	pop	ds
 24643 0000434B 8816[4C03]              	MOV	[NoSetDir],DL
 24644 0000434F C43E[A205]              	LES	DI,[THISCDS]
 24645                                  	;SAVE	<BP>
 24646 00004353 55                      	push	bp
 24647                                  	;Invoke	FATREAD_CDS
 24648 00004354 E87A14                  	call	FATREAD_CDS	
 24649                                  	;RESTORE <BP>
 24650 00004357 5D                      	pop	bp
 24651 00004358 726D                    	JC	short FatFail
 24652                                  
 24653 0000435A C536[A205]              	LDS	SI,[THISCDS]		;   if (ThisCDS->ID == -1) {
 24654                                  	;cmp	word [si+73],-1
 24655 0000435E 837C49FF                	CMP	word [SI+curdir.ID],-1
 24656 00004362 7555                    	JNZ	short RestoreCDS
 24657                                  
 24658                                  ;hkn; SS is DOSDATA
 24659                                  	;Context ES
 24660 00004364 16                      	push	ss
 24661 00004365 07                      	pop	es
 24662                                  
 24663                                  ;hkn; SS override
 24664                                  	;SAVE	<wfp_Start>		;	t = wfp_Start;
 24665 00004366 36FF36[B205]            	push	word [SS:WFP_START]
 24666                                  	;cmp	si,[bp-6]
 24667 0000436B 3B76FA                  	CMP	SI,SaveCDSL		; if not spliced
 24668 0000436E 750B                    	JNZ	short DoChdir
 24669                                  	;mov	di,[bp-2]
 24670 00004370 8B7EFE                  	MOV	DI,Temp
 24671                                  
 24672                                  ;hkn; SS override
 24673 00004373 36893E[B205]            	MOV	[SS:WFP_START],DI	;	wfp_start = d;
 24674                                  	;Invoke	FStrCpy 		;	strcpy (d, ThisCDS->Text);
 24675 00004378 E8AFCE                  	call	FStrCpy
 24676                                  DoChdir:
 24677                                  ;hkn; SS is DOSDATA
 24678                                  	;Context DS
 24679 0000437B 16                      	push	ss
 24680 0000437C 1F                      	pop	ds
 24681                                  	;SAVE	<<WORD PTR SAttrib>,BP> ;	c = DOSChDir ();
 24682 0000437D FF36[6D05]              	push	word [SATTRIB]
 24683 00004381 55                      	push	bp
 24684                                  	;Invoke	DOS_ChDir
 24685 00004382 E8BDEE                  	call	DOS_CHDIR
 24686                                  	;RESTORE <BP,BX,wfp_start>	;	wfp_Start = t;
 24687 00004385 5D                      	pop	bp
 24688 00004386 5B                      	pop	bx
 24689 00004387 8F06[B205]              	pop	word [WFP_START]
 24690 0000438B 881E[6D05]              	MOV	[SATTRIB],BL
 24691 0000438F C576FA                  	LDS	SI,SaveCDS
 24692 00004392 730F                    	JNC	short SetCluster	;	if (c == -1) {
 24693                                  
 24694                                  ;hkn; SS override for THISCDS
 24695 00004394 368936[A205]            	MOV	[SS:THISCDS],SI		;	    ThisCDS = TmpCDS;
 24696 00004399 368C1E[A405]            	MOV	[SS:THISCDS+2],DS
 24697 0000439E 31C9                    	XOR	CX,CX			;	    TmpCDS->text[3] = c = 0;
 24698 000043A0 884C03                  	MOV	[SI+3],CL		;	    }
 24699                                  SetCluster:
 24700                                  	;mov	word [si+73],0FFFFh
 24701 000043A3 C74449FFFF              	MOV	word [SI+curdir.ID],-1	;	TmpCDS->ID = -1;
 24702 000043A8 36C536[A205]            	LDS	SI,[SS:THISCDS]		;	ThisCDS->ID = c;
 24703                                  	; 21/11/2022
 24704                                  	;test	byte [si+curdir.flags+1],20h
 24705                                  	; 19/05/2019
 24706                                  	; MSDOS 6.0
 24707                                  	; 17/12/2022
 24708                                  	;test	byte [si+68],20h
 24709 000043AD F6444420                	test	byte [SI+curdir.flags+1],(curdir_splice>>8)	
 24710                                  	;;test	word [si+67],2000h
 24711                                  	;TEST	word [SI+curdir.flags],curdir_splice ;AN000;;MS. for Join and Subst
 24712 000043B1 7403                    	JZ	short _setdirclus		     ;AN000;;MS.
 24713 000043B3 B9FFFF                  	MOV	CX,-1				     ;AN000;;MS.
 24714                                  _setdirclus:
 24715                                  	;mov	[si+73],cx
 24716 000043B6 894C49                  	MOV	[SI+curdir.ID],CX	;	}
 24717                                  RestoreCDS:
 24718 000043B9 C47EFA                  	LES	DI,SaveCDS
 24719 000043BC 36893E[A205]            	MOV	[SS:THISCDS],DI
 24720 000043C1 368C06[A405]            	MOV	[SS:THISCDS+2],ES
 24721 000043C6 F8                      	CLC
 24722                                  FatFail:
 24723                                  	;LeaveCrit critDisk
 24724 000043C7 E8A9CF                  	call	LCritDisk
 24725                                  
 24726                                  	;les	di,[bp-6]
 24727 000043CA C47EFA                  	LES	DI,SaveCDS
 24728                                  	;Leave
 24729 000043CD 89EC                    	mov	sp,bp
 24730 000043CF 5D                      	pop	bp
 24731 000043D0 C3                      	retn
 24732                                  
 24733                                  ; 28/07/2018 - Retro DOS v3.0
 24734                                  ; IBMDOS.COM (MSDOS 3.3, 1987) - offset 43BDh
 24735                                  
 24736                                  ;Break	<CheckThisDevice - Check for being a device>
 24737                                  ;---------------------------------------------------------------------------
 24738                                  ;
 24739                                  ;   CheckThisDevice - Examine the area at DS:SI to see if there is a valid
 24740                                  ;   device specified. We will return carry if there is a device present. 
 24741                                  ;   The forms of devices we will recognize are:
 24742                                  ;
 24743                                  ;	[path]device
 24744                                  ;
 24745                                  ;   Note that the drive letter has *already* been removed. All other forms
 24746                                  ;   are not considered to be devices. If such a device is found we change
 24747                                  ;   the source pointer to point to the device component.
 24748                                  ;
 24749                                  ;   Inputs:	ES is DOSDATA
 24750                                  ;		DS:SI contains name
 24751                                  ;   Outputs:	ES is DOSDATA
 24752                                  ;		DS:SI point to name or device
 24753                                  ;		Carry flag set if device was found
 24754                                  ;		Carry flag reset otherwise
 24755                                  ;   Registers Modified: all except ES:DI, DS
 24756                                  ;----------------------------------------------------------------------------
 24757                                  
 24758                                  CheckThisDevice:
 24759 000043D1 57                      	push	di
 24760 000043D2 56                      	push	si
 24761 000043D3 89F7                    	MOV	DI,SI
 24762                                  
 24763                                  ; Check for presence of \dev\ (Dam multiplan!)
 24764                                  
 24765 000043D5 8A04                    	MOV	AL,[SI]
 24766 000043D7 E8A10D                  	call	PATHCHRCMP		; is it a path char?
 24767 000043DA 7517                    	JNZ	short ParseDev		; no, go attempt to parse device
 24768 000043DC 46                      	INC	SI			; simulate LODSB
 24769                                  
 24770                                  ; We have the leading path separator. Look for DEV part.
 24771                                  
 24772 000043DD AD                      	LODSW
 24773 000043DE 0D2020                  	OR	AX,2020h
 24774 000043E1 3D6465                  	cmp	ax,"de"
 24775                                  	;CMP	AX,"e"<< 8 + "d"
 24776 000043E4 752D                    	JNZ	short NotDevice		; not "de", assume not device
 24777 000043E6 AC                      	LODSB
 24778 000043E7 0C20                    	OR	AL,20h
 24779 000043E9 3C76                    	CMP	AL,"v"                  ; Not "v", assume not device
 24780 000043EB 7526                    	JNZ	short NotDevice
 24781 000043ED AC                      	LODSB
 24782 000043EE E88A0D                  	call	PATHCHRCMP		; do we have the last path separator?
 24783 000043F1 7520                    	JNZ	short NotDevice		; no. go for it.
 24784                                  
 24785                                  ; DS:SI now points to a potential drive. Preserve them as NameTrans advances
 24786                                  ; SI and DevName may destroy DS.
 24787                                  
 24788                                  ParseDev:
 24789 000043F3 1E                      	push	ds
 24790 000043F4 56                      	push	si			; preserve the source pointer
 24791 000043F5 E8C10C                  	call	NameTrans		; advance DS:SI
 24792 000043F8 803C00                  	CMP	BYTE [SI],0		; parse entire string?
 24793 000043FB F9                      	STC				; simulate a Carry return from DevName
 24794 000043FC 750B                    	JNZ	short SkipSearch	; no parse. simulate a file return.
 24795                                  
 24796                                  ;hkn; SS is DOSDATA
 24797 000043FE 16                      	push	ss
 24798 000043FF 1F                      	pop	ds
 24799                                  
 24800                                  ; M026 - start - fix ported from ROMDOS2 for bug # 2849
 24801                                  ;
 24802                                  ; SR;
 24803                                  ; We have to set Attrib before invoking DevName. Otherwise, the value from
 24804                                  ; a previous DOS call is used and DevName thinks it is not a device if the
 24805                                  ; old call set the volume attribute bit.
 24806                                  
 24807 00004400 A0[6D05]                	mov	al,[SATTRIB]
 24808 00004403 A2[6B05]                	mov	[ATTRIB],al		;set Attrib for DevName
 24809                                  
 24810                                  ; M026 - end
 24811                                  
 24812 00004406 E87FFE                  	call	DEVNAME
 24813                                  
 24814                                  SkipSearch:
 24815 00004409 5E                      	pop	si
 24816 0000440A 1F                      	pop	ds
 24817                                  
 24818                                  ; SI points to the beginning of the potential device. If we have a device
 24819                                  ; then we do not change SI. If we have a file, then we reset SI back to the
 24820                                  ; original value. At this point Carry set indicates FILE.
 24821                                  
 24822                                  CheckReturn:
 24823 0000440B 5F                      	pop	di			; get original SI
 24824 0000440C 7302                    	JNC	short Check_Done	; if device then do not reset pointer
 24825 0000440E 89FE                    	MOV	SI,DI
 24826                                  Check_Done:
 24827 00004410 5F                      	pop	di
 24828 00004411 F5                      	CMC				; invert carry. Carry => device
 24829 00004412 C3                      	retn
 24830                                  NotDevice:
 24831 00004413 F9                      	STC
 24832 00004414 EBF5                    	JMP	short CheckReturn
 24833                                  
 24834                                  ;BREAK <LookupPath - call fastopen to get dir entry info>
 24835                                  ;-----------------------------------------------------------------------------
 24836                                  ;
 24837                                  ; Procedure Name : LookupPath
 24838                                  ;
 24839                                  ; Output  DS:SI -> path name,
 24840                                  ;	  ES:DI -> dir entry info buffer
 24841                                  ;	  ES:CX -> extended dir info buffer
 24842                                  ;
 24843                                  ;	  carry flag clear : tables pointed by ES:DI and ES:CX are filled by
 24844                                  ;			     FastOpen, DS:SI points to char just one after
 24845                                  ;			     the last char of path name which is fully or
 24846                                  ;			     partially found in FastOPen
 24847                                  ;	  carry flag set : FastOpen not in memory or path name not found
 24848                                  ;
 24849                                  ;----------------------------------------------------------------------------
 24850                                  
 24851                                  LookupPath:
 24852                                  ;	PUSH	AX
 24853                                  
 24854                                  ;hkn; SS override
 24855                                  	;test	byte [ss:FastOpenFlg],1
 24856 00004416 36F606[3A0D]01          	TEST	byte [ss:FastOpenFlg],FastOpen_Set  ; flg is set in DOSOPEN
 24857 0000441C 7503                    	JNZ	short FASTINST			    ; and this routine is
 24858                                  NOLOOK:
 24859 0000441E E99700                  	JMP	NOLOOKUP			    ; executed once
 24860                                  
 24861                                  FASTINST:
 24862                                  ;hkn; SS override
 24863                                  	;test	byte [ss:FastOpenFlg],8
 24864 00004421 36F606[3A0D]08          	TEST	byte [ss:FastOpenFlg],No_Lookup	    ; no more lookup?
 24865 00004427 75F5                    	JNZ	short NOLOOK			    ; yes
 24866                                  
 24867 00004429 BB[300D]                	MOV	BX,FastOpenTable		    ; get fastopen related tab
 24868                                  
 24869                                  ;hkn; SS override
 24870 0000442C 368B36[B205]            	MOV	SI,[SS:WFP_START]		    ; si points to path name
 24871 00004431 BF[460D]                	MOV	DI,Dir_Info_Buff
 24872 00004434 B9[3B0D]                	MOV	CX,FastOpen_Ext_Info
 24873 00004437 B001                    	MOV	AL,FONC_Look_up 		    ; al = 1
 24874 00004439 1E                      	PUSH	DS
 24875 0000443A 07                      	POP	ES
 24876                                  
 24877                                  ;hkn; SS override
 24878                                  	;call	far [bx+2]
 24879 0000443B FF5F02                  	CALL	far [BX+fastopen_entry.name_caching] ;call fastopen
 24880 0000443E 7267                    	JC	short NOTFOUND			    ; fastopen not in memory
 24881                                  
 24882 00004440 8D5CFE                  	LEA	BX,[SI-2]
 24883                                  
 24884                                  ;hkn; SS override
 24885 00004443 363B1E[B205]            	CMP	BX,[SS:WFP_START]		    ; path found ?
 24886 00004448 745D                    	JZ	short NOTFOUND			    ; no
 24887                                  
 24888                                  	; 19/05/2019 - Retro DOS v4.0
 24889                                  
 24890                                  	; MSDOS 6.0				    ; fully or partially found
 24891 0000444A 803C00                  	CMP	BYTE [SI],0			    ;AN000;FO.
 24892 0000444D 751A                    	JNZ	short parfnd			    ;AN000;FO.; partiallyfound
 24893 0000444F 51                      	PUSH	CX				    ;AN000;FO.; is attribute matched ?
 24894                                  
 24895                                  ;hkn; SS override for attrib/sattrib
 24896 00004450 368A0E[6B05]            	MOV	CL,[ss:ATTRIB]			    ;AN000;FO.;
 24897 00004455 368A2E[6D05]            	MOV	CH,[ss:SATTRIB]			    ;AN000;FO.; attrib=sattrib
 24898 0000445A 36882E[6B05]            	MOV	[ss:ATTRIB],CH			    ;AN000;FO.;
 24899                                  	;mov	ch,[es:di+0Bh]
 24900 0000445F 268A6D0B                	MOV	CH,[ES:DI+dir_entry.dir_attr]	    ;AN000;FO.;
 24901 00004463 E815FE                  	call	MatchAttributes 		    ;AN000;FO.;
 24902                                  ;;;	MOV	[ss:ATTRIB],CL			    ;AN001;FO.; restore attrib
 24903 00004466 59                      	POP	CX				    ;AN000;FO.;
 24904 00004467 754F                    	JNZ	short NOLOOKUP			    ;AN000;FO.; not matched
 24905                                  parfnd:
 24906                                  
 24907                                  ;hkn; SS override
 24908 00004469 368936[660D]            	MOV	[SS:Next_Element_Start],SI	    ; save si
 24909 0000446E 89CB                    	MOV	BX,CX
 24910                                  	; MSDOS 6.0
 24911                                  	;mov	ax,[bx+7]
 24912 00004470 8B4707                  	MOV	AX,[BX+FEI.lastent]		    ;AN000;;FO. restore lastentry
 24913                                  ;hkn; SS override for LASTENT, DIRSTART, CLUSNUM
 24914 00004473 36A3[4803]              	MOV	[SS:LASTENT],AX			    ;AN000;;FO.
 24915 00004477 8B4709                  	MOV	AX,[BX+FEI.dirstart]		    ;AN001;;FO. restore dirstart
 24916 0000447A 36A3[C205]              	MOV	[SS:DIRSTART],AX		    ;AN001;;FO.
 24917                                  	; MSDOS 3.3 (& MSDOS 6.0)
 24918                                  	;;mov	ax,[bx+3] ; MSDOS 3.3
 24919                                  	;mov	ax,[bx+5] ; MSDOS 6.0
 24920 0000447E 8B4705                  	MOV	AX,[BX+FEI.clusnum]		    ; restore next cluster num
 24921 00004481 36A3[BC05]              	MOV	[SS:CLUSNUM],AX			    ;
 24922                                  
 24923 00004485 06                      	PUSH	ES				    ; save ES
 24924                                  ;hkn; SS override
 24925 00004486 36C41E[8A05]            	LES	BX,[SS:THISDPB]			    ; put drive id
 24926 0000448B 268A27                  	mov	ah,[ES:BX] ; 15/08/2018
 24927                                  	;MOV	AH,[ES:BX+DPB.DRIVE]		    ; in AH for DOOPEN
 24928 0000448E 07                      	POP	ES				    ; pop ES
 24929                                  ;SR;
 24930                                  ; We cannot have a root dir if we have come here. So, we zero out CurBuf to
 24931                                  ;indicate it is not a root dir
 24932                                  
 24933 0000448F 36C706[E205]0000        	mov	word [SS:CURBUF],0		    ; indicate not root dir
 24934 00004496 368C06[E405]            	MOV	WORD [SS:CURBUF+2],ES		    ; [curbuf+2].bx points to
 24935 0000449B 89FB                    	MOV	BX,DI				    ; start of entry
 24936                                  	;lea	si,[di+1Ah]
 24937 0000449D 8D751A                  	LEA	SI,[DI+dir_entry.dir_first]	    ; [curbuf+2]:si points to
 24938                                  						    ; dir_first field in the
 24939                                  						    ; dir entry
 24940                                  ;hkn; SS override for FastOpenFlg
 24941                                  	;or	byte [ss:FastOpenFlg],12h ; 29/12/2022
 24942 000044A0 36800E[3A0D]12          	OR	byte [SS:FastOpenFlg],Lookup_Success+Set_For_Search
 24943                                  ;	POP	AX
 24944 000044A6 C3                      	RETN
 24945                                  NOTFOUND:
 24946 000044A7 83F8FF                  	CMP	AX,-1				    ; not in memory ?
 24947 000044AA 7506                    	JNZ	short Partial_Success 		    ; yes, in memory
 24948 000044AC 36C606[3A0D]00          	MOV	byte [SS:FastOpenFlg],0		    ; no more fastopen
 24949                                  Partial_Success:
 24950                                  	;and	byte [SS:FastOpenFlg],0FBh
 24951 000044B2 368026[3A0D]FB          	AND	byte [SS:FastOpenFlg],Special_Fill_Reset
 24952                                  NOLOOKUP:
 24953                                  ;	POP	AX
 24954 000044B8 F9                      	STC
 24955 000044B9 C3                      	RETN
 24956                                  
 24957                                  ;BREAK <InsertPath - call fastopen to insert dir entry info>
 24958                                  ;-----------------------------------------------------------------------------
 24959                                  ;
 24960                                  ; Procedure Name : InsertPath
 24961                                  ; Input:  FastOpen_Set flag set when from DOSOPEN otherwise 0
 24962                                  ;	  Lookup_Success flag set when got dir entry info from FASTOPEN
 24963                                  ;	  DS = DOSDATA
 24964                                  ; Output: FastOPen_Ext_Info is set and path dir info is inserted
 24965                                  ;
 24966                                  ;-----------------------------------------------------------------------------
 24967                                  
 24968                                  	; 21/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 24969                                  
 24970                                  InsertPath:
 24971 000044BA 9C                      	PUSHF
 24972                                  ;hkn; SS override for FastOpenFlag
 24973                                  	;test	byte [SS:FastOpenFlg], 1
 24974 000044BB 36F606[3A0D]01          	TEST	byte [SS:FastOpenFlg],FastOpen_Set ;only DOSOPEN can take advantage of
 24975 000044C1 7479                    	JZ	short GET_NEXT_ELEMENT		; the FastOpen
 24976                                  	;test	byte [ss:FastOpenFlg],2
 24977 000044C3 36F606[3A0D]02          	TEST	byte [SS:FastOpenFlg],Lookup_Success ; Lookup just happened
 24978 000044C9 740D                    	JZ	short INSERT_DIR_INFO		; no
 24979                                  	;and	byte [ss:FastOpenFlg],0FDh
 24980 000044CB 368026[3A0D]FD          	AND	byte [SS:FastOpenFlg],Lookup_Reset  ; we got dir info from fastopen so
 24981 000044D1 368B3E[660D]            	MOV	DI,[SS:Next_Element_Start]	; no need to insert it again
 24982 000044D6 EB5E                    	JMP	short GET_NEXT2
 24983                                  INSERT_DIR_INFO:				; save registers
 24984 000044D8 1E                      	PUSH	DS
 24985 000044D9 06                      	PUSH	ES
 24986 000044DA 53                      	PUSH	BX
 24987 000044DB 56                      	PUSH	SI
 24988 000044DC 57                      	PUSH	DI
 24989 000044DD 51                      	PUSH	CX
 24990 000044DE 50                      	PUSH	AX
 24991                                  
 24992                                  ;hkn; SS override
 24993 000044DF 36C53E[E205]            	LDS	DI,[SS:CURBUF]			; DS:DI -> buffer header
 24994 000044E4 BE[3B0D]                	MOV	SI,FastOpen_Ext_Info
 24995                                  	;mov	ax,[di+6]
 24996 000044E7 8B4506                  	MOV	AX,[DI+BUFFINFO.buf_sector]	; get directory sector
 24997                                  	; MSDOS 6.0
 24998                                  	;mov	[ss:si+1],ax
 24999 000044EA 36894401                	MOV	[SS:SI+FEI.dirsec],AX 		;AN000; >32mb save dir sector
 25000                                  	; 19/05/2019 - Retro DOS v4.0
 25001 000044EE 8B4508                  	MOV	AX,[DI+BUFFINFO.buf_sector+2]	;AN000; >32mb
 25002                                  
 25003                                  ;hkn; SS is DOSDATA
 25004 000044F1 16                      	push	ss
 25005 000044F2 1F                      	pop	ds
 25006                                  	; MSDOS 3.3	
 25007                                  	;;mov	[si+1],ax	
 25008                                  	;MOV	[SI+FEI.dirsec],AX
 25009                                  	; MSDOS 6.0
 25010                                  	;mov	[si+3],ax
 25011 000044F3 894403                  	MOV	[SI+FEI.dirsec+2],AX		;AN000;>32mb save high dir sector
 25012                                  	; MSDOS 3.3 (& MSDOS 6.0)
 25013 000044F6 A1[BC05]                	MOV	AX,[CLUSNUM]		; save next cluster number
 25014                                  	;;mov	[si+5],ax ; MSDOS 6.0
 25015                                  	;mov	[si+3],ax ; MSDOS 3.3
 25016 000044F9 894405                  	MOV	[SI+FEI.clusnum],AX
 25017                                  	; MSDOS 6.0
 25018 000044FC A1[4803]                	MOV	AX,[LASTENT]		;AN000;FO. save lastentry for search first
 25019                                  	;mov	[si+7],ax
 25020 000044FF 894407                  	MOV	[SI+FEI.lastent],AX	;AN000;FO.
 25021 00004502 A1[C205]                	MOV	AX,[DIRSTART]		;AN001;FO. save  for search first
 25022                                  	;mov	[si+9],ax
 25023 00004505 894409                  	MOV	[SI+FEI.dirstart],AX	;AN001;FO.
 25024                                  	; MSDOS 3.3 (& MSDOS 6.0)
 25025 00004508 89D8                    	MOV	AX,BX
 25026                                  	;;add	di,16  ; MSDOS 3.3
 25027                                  	;add	di,20  ; MSDOS 6.0
 25028 0000450A 83C714                  	ADD	DI,BUFINSIZ		; DS:DI -> start of data in buffer
 25029 0000450D 29F8                    	SUB	AX,DI			; AX=BX relative to start of sector
 25030                                  	;mov	cl,32
 25031 0000450F B120                    	MOV	CL,dir_entry.size
 25032 00004511 F6F1                    	DIV	CL
 25033                                  	;MOV	[SI+FEI.dirpos],AL	; save directory entry # in buffer
 25034 00004513 8804                    	mov	[si],al
 25035                                  
 25036 00004515 1E                      	PUSH	DS
 25037 00004516 07                      	POP	ES
 25038                                  
 25039 00004517 8E1E[E405]              	MOV	DS,[CURBUF+2]
 25040 0000451B 89DF                    	MOV	DI,BX			; DS:DI -> dir entry info
 25041                                  	;cmp	word [di+1Ah],0
 25042 0000451D 837D1A00                	CMP	word [DI+dir_entry.dir_first],0 
 25043                                  					; never insert info when file is empty
 25044 00004521 740C                    	JZ	short SKIP_INSERT	; e.g. newly created file
 25045                                  
 25046 00004523 56                      	PUSH	SI			; ES:BX -> extended info
 25047 00004524 5B                      	POP	BX
 25048                                  
 25049                                  	;mov	al,2
 25050 00004525 B002                    	MOV	AL,FONC_insert		; call fastopen insert operation
 25051 00004527 BE[300D]                	MOV	SI,FastOpenTable
 25052                                  	;call	far [es:si+2]	 ; call dword ptr es:[si+2] ; 29/12/2022
 25053                                  	; 07/12/2022
 25054 0000452A 26FF5C02                	CALL	far [ES:SI+fastopen_entry.name_caching]
 25055                                  
 25056 0000452E F8                      	CLC
 25057                                  SKIP_INSERT:
 25058 0000452F 58                      	POP	AX
 25059 00004530 59                      	POP	CX			; restore registers
 25060 00004531 5F                      	POP	DI
 25061 00004532 5E                      	POP	SI
 25062 00004533 5B                      	POP	BX
 25063 00004534 07                      	POP	ES
 25064 00004535 1F                      	POP	DS
 25065                                  GET_NEXT2:
 25066                                  	;or	[ss:FastOpenFlg],8
 25067 00004536 36800E[3A0D]08          	OR	byte [SS:FastOpenFlg],No_Lookup
 25068                                  					; we got dir info from fastopen so
 25069                                  GET_NEXT_ELEMENT:
 25070 0000453C 9D                      	POPF
 25071 0000453D C3                      	RETN
 25072                                  
 25073                                  ;============================================================================
 25074                                  ; DEV.ASM (MSDOS 6.0, 1991)
 25075                                  ;============================================================================
 25076                                  ; 17/07/2018 - Retro DOS v3.0
 25077                                  ; 30/04/2019 - Retro DOS v4.0
 25078                                  
 25079                                  ;**	Misc Routines to do 1-12 low level I/O and call devices
 25080                                  
 25081                                  ; Offset 12B8h of IBMDOS.COM (MSDOS 3.3), 1987
 25082                                  
 25083                                  ;DOSCODE:8401h (MSDOS 6.21, MSDOS.SYS)
 25084                                  
 25085                                  ;Public DEV001S, DEV001E 		; Pathgen labels
 25086                                  ;DEV001s:
 25087                                  ;		length of packets
 25088 0000453E 160E160D0F0E            LenTab:	 DB	DRDWRHL, DRDNDHL, DRDWRHL, DSTATHL, DFLSHL, DRDNDHL
 25089                                  ;LenTab: db	22,14,22,13,15,14
 25090                                  
 25091                                  ;	Error Function
 25092                                  
 25093                                  CmdTab:
 25094 00004544 8604                    	DB	86h, DEVRD	; 0 input
 25095 00004546 8605                    	DB	86h, DEVRDND	; 1 input status
 25096 00004548 8708                    	DB	87h, DEVWRT	; 2 output
 25097 0000454A 870A                    	DB	87h, DEVOST	; 3 output status
 25098 0000454C 8607                    	DB	86h, DEVIFL	; 4 input flush
 25099 0000454E 8605                    	DB	86h, DEVRDND	; 5 input status with system WAIT
 25100                                  
 25101                                  ; Offset 12BEh of IBMDOS.COM (MSDOS 3.3), 1987
 25102                                  
 25103                                  ;CmdTab:
 25104                                  ;	db	86h, 4
 25105                                  ;	db	86h, 5
 25106                                  ;	db	87h, 8
 25107                                  ;	db	87h, 10
 25108                                  ;	db	86h, 7
 25109                                  ;	db	86h, 5
 25110                                  
 25111                                  ;DEV001E:
 25112                                  
 25113                                  ; 30/04/2019 - Retro DOS v4.0
 25114                                  ; DOSCODE:8413h (MSDOS 6.21, MSDOS.SYS)
 25115                                  
 25116                                  ;Break	<IOFUNC -- DO FUNCTION 1-12 I/O>
 25117                                  ;----------------------------------------------------------------------------
 25118                                  ;
 25119                                  ; Procedure Name : IOFUNC
 25120                                  ;
 25121                                  ; Inputs:
 25122                                  ;	DS:SI Points to SFT
 25123                                  ;	AH is function code
 25124                                  ;		= 0 Input
 25125                                  ;		= 1 Input Status
 25126                                  ;		= 2 Output
 25127                                  ;		= 3 Output Status
 25128                                  ;		= 4 Flush
 25129                                  ;		= 5 Input Status - System WAIT invoked for K09 if no char
 25130                                  ;				   present.
 25131                                  ;	AL = character if output
 25132                                  ; Function:
 25133                                  ;	Perform indicated I/O to device or file
 25134                                  ; Outputs:
 25135                                  ;	AL is character if input
 25136                                  ;	If a status call
 25137                                  ;		zero set if not ready
 25138                                  ;		zero reset if ready (character in AL for input status)
 25139                                  ; For regular files:
 25140                                  ;	Input Status
 25141                                  ;		Gets character but restores position
 25142                                  ;		Zero set on EOF
 25143                                  ;	Input
 25144                                  ;		Gets character advances position
 25145                                  ;		Returns ^Z on EOF
 25146                                  ;	Output Status
 25147                                  ;		Always ready
 25148                                  ; AX altered, all other registers preserved
 25149                                  ;----------------------------------------------------------------------------
 25150                                  
 25151                                  ; 21/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 25152                                  ; DOSCODE:83D8h (MSDOS 5.0, MSDOS.SYS)
 25153                                  
 25154                                  IOFUNC:
 25155 00004550 368C16[8C03]            	MOV	[SS:IOXAD+2],SS		; SS override for IOXAD, IOSCNT, 
 25156                                  					; DEVIOBUF
 25157 00004555 36C706[8A03][BC03]      	MOV	WORD [SS:IOXAD],DEVIOBUF
 25158 0000455C 36C706[8E03]0100        	MOV	WORD [SS:IOSCNT],1
 25159 00004563 36A3[BC03]              	MOV	WORD [SS:DEVIOBUF],AX
 25160                                  	;test	byte [si+6],80h
 25161                                  	;TEST	word [SI+SF_ENTRY.sf_flags],sf_isnet ; 8000h
 25162 00004567 F6440680                	test	byte [SI+SF_ENTRY.sf_flags+1],(sf_isnet>>8)
 25163 0000456B 7403                    	JZ	short IOTO22		;AN000;
 25164 0000456D E9A500                  	JMP	IOTOFILE		;AN000;
 25165                                  IOTO22:
 25166                                  	;test	word [si+5],80h
 25167                                  	;TEST	word [SI+SF_ENTRY.sf_flags],devid_device 
 25168 00004570 F6440580                	test	byte [SI+SF_ENTRY.sf_flags],devid_device	
 25169 00004574 7503                    	JNZ	short IOTO33		;AN000;
 25170 00004576 E99C00                  	JMP	IOTOFILE		;AN000;
 25171                                  IOTO33:
 25172 00004579 06                      	push	es ; * (MSDOS 6.21)
 25173 0000457A E8F3BE                  	call	save_world
 25174 0000457D 8CDA                    	MOV	DX,DS
 25175 0000457F 8CD3                    	MOV	BX,SS
 25176 00004581 8EDB                    	MOV	DS,BX
 25177 00004583 8EC3                    	MOV	ES,BX
 25178 00004585 31DB                    	XOR	BX,BX
 25179 00004587 80FC05                  	cmp	ah,5		    ; system wait enabled?
 25180 0000458A 7503                    	jnz	short _no_sys_wait
 25181                                  	; 21/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 25182                                  	; 16/12/2022
 25183 0000458C 80CF04                  	or	bh,04h
 25184                                  	;or	bx,0400H	    ; Set bit 10 in status word for driver
 25185                                  				    ; It is up to device driver to carry out
 25186                                  				    ; appropriate action.
 25187                                  _no_sys_wait:
 25188 0000458F 891E[7F03]              	MOV	[IOCALL_REQSTAT],BX
 25189 00004593 31DB                    	XOR	BX,BX
 25190 00004595 881E[8903]              	MOV	[IOMED],BL
 25191                                  
 25192 00004599 88E3                    	MOV	BL,AH		 	; get function
 25193 0000459B 2E8AA7[3E45]            	MOV	AH,[cs:BX+LenTab]
 25194 000045A0 D1E3                    	SHL	BX,1
 25195 000045A2 2E8B8F[4445]            	MOV	CX,[cs:BX+CmdTab]
 25196 000045A7 BB[7C03]                	MOV	BX,IOCALL ; DOSDATA:037Ch
 25197 000045AA 8826[7C03]              	MOV	[IOCALL_REQLEN],AH
 25198 000045AE 882E[7E03]              	MOV	[IOCALL_REQFUNC],CH
 25199                                  
 25200 000045B2 8EDA                    	MOV	DS,DX
 25201 000045B4 E86D01                  	CALL	DEVIOCALL
 25202 000045B7 368B3E[7F03]            	MOV	DI,[SS:IOCALL_REQSTAT]	; SS override
 25203 000045BC 21FF                    	and	di,di
 25204 000045BE 7834                    	js	short DevErr
 25205                                  OKDevIO:
 25206 000045C0 8CD0                    	MOV	AX,SS
 25207 000045C2 8ED8                    	MOV	DS,AX
 25208                                  
 25209                                  	;cmp	ch,5
 25210 000045C4 80FD05                  	CMP	CH,DEVRDND
 25211 000045C7 7506                    	JNZ	short DNODRD
 25212 000045C9 A0[8903]                	MOV	AL,[IORCHR]
 25213 000045CC A2[BC03]                	MOV	[DEVIOBUF],AL
 25214                                  
 25215                                  DNODRD: 
 25216 000045CF 8A26[8003]              	MOV	AH,[IOCALL_REQSTAT+1]
 25217 000045D3 F6D4                    	NOT	AH			; Zero = busy, not zero = ready
 25218                                  	;and	ah,2
 25219 000045D5 80E402                  	AND	AH,STBUI>>8
 25220                                  
 25221                                  QuickReturn:				;AN000; 2/13/KK
 25222 000045D8 E87EBE                  	call	restore_world
 25223 000045DB 07                      	pop	es ; * (MSDOS 6.21)
 25224                                  
 25225                                  	; SR;
 25226                                  	; We return ax = -1 if the user failed on I24. This is the case if 
 25227                                  	; IoStatFail = -1 (set after return from the I24)
 25228                                  
 25229                                  	; MSDOS 6.0
 25230 000045DC 9C                      	pushf
 25231 000045DD 36A0[8300]              	mov	al,[ss:IoStatFail]	;assume fail error
 25232 000045E1 98                      	cbw				;sign extend to word
 25233 000045E2 83F8FF                  	cmp	ax,-1
 25234 000045E5 7507                    	jne	short not_fail_ret
 25235 000045E7 36FE06[8300]            	inc	byte [ss:IoStatFail]
 25236 000045EC 9D                      	popf
 25237 000045ED C3                      	retn
 25238                                  
 25239                                  not_fail_ret:
 25240 000045EE 36A1[BC03]              	mov	ax,[ss:DEVIOBUF]	;ss override
 25241 000045F2 9D                      	popf
 25242 000045F3 C3                      	retn
 25243                                  
 25244                                  DevErr:
 25245 000045F4 88CC                    	MOV	AH,CL
 25246 000045F6 E8BB0D                  	call	CHARHARD
 25247 000045F9 3C01                    	CMP	AL,1
 25248 000045FB 7507                    	JNZ	short NO_RETRY
 25249 000045FD E859BE                  	call	restore_world
 25250                                  	; 12/05/2019
 25251 00004600 07                      	pop	es ; * (MSDOS 6.21)		
 25252 00004601 E94CFF                  	JMP	IOFUNC	; 10/08/2018
 25253                                  
 25254                                  NO_RETRY:
 25255                                  	; Know user must have wanted Ignore OR Fail. Make sure device shows ready
 25256                                  	; ready so that DOS doesn't get caught in a status loop when user 
 25257                                  	; simply wants to ignore the error.
 25258                                  	;
 25259                                  	; SR; If fail wanted by user set ax to special value (ax = -1). This 
 25260                                  	; should be checked by the caller on return
 25261                                  
 25262                                  					; SS override
 25263 00004604 368026[8003]FD          	and	byte [SS:IOCALL_REQSTAT+1],0FDh
 25264                                  	;AND	BYTE [SS:IOCALL_REQSTAT+1],~(STBUI>>8)
 25265                                  
 25266                                  	; SR;
 25267                                  	; Check if user failed
 25268                                  
 25269                                  	; MSDOS 6.0
 25270 0000460A 3C03                    	cmp	al,3
 25271 0000460C 7505                    	jnz	short not_fail
 25272 0000460E 36FE0E[8300]            	dec	byte [ss:IoStatFail]	;set flag indicating fail on I24
 25273                                  not_fail:
 25274 00004613 EBAB                    	JMP	short OKDevIO
 25275                                  
 25276                                  IOTOFILE:
 25277 00004615 08E4                    	OR	AH,AH
 25278 00004617 7421                    	JZ	short IOIN
 25279 00004619 FECC                    	DEC	AH
 25280 0000461B 7405                    	JZ	short IOIST
 25281 0000461D FECC                    	DEC	AH
 25282 0000461F 7411                    	JZ	short IOUT
 25283                                  IOUT_retn:	; 18/12/2022
 25284 00004621 C3                      	retn				; NON ZERO FLAG FOR OUTPUT STATUS
 25285                                  IOIST:
 25286                                  	;push	word [si+15h]
 25287 00004622 FF7415                  	PUSH	WORD [SI+SF_ENTRY.sf_position]   ; Save position
 25288                                  	;push	word [si+17h]
 25289 00004625 FF7417                  	PUSH	WORD [SI+SF_ENTRY.sf_position+2]
 25290 00004628 E80F00                  	CALL	IOIN
 25291                                  	;pop	word [si+17h]
 25292 0000462B 8F4417                  	POP	WORD [SI+SF_ENTRY.sf_position+2] ; Restore position
 25293                                  	;pop	word [si+15h]
 25294 0000462E 8F4415                  	POP	WORD [SI+SF_ENTRY.sf_position]
 25295 00004631 C3                      	retn
 25296                                  IOUT:
 25297 00004632 E82500                  	CALL	SETXADDR
 25298 00004635 E854EF                  	call	DOS_WRITE
 25299                                  	;CALL	RESTXADDR	; If you change this into a jmp don't
 25300                                  	; 18/12/2022
 25301 00004638 EB54                    	jmp	RESTXADDR
 25302                                  ;IOUT_retn:
 25303                                  	;retn			; come crying to me when things don't
 25304                                  				; work ARR
 25305                                  IOIN:
 25306 0000463A E81D00                  	CALL	SETXADDR
 25307                                  					; SS override for DOS34_FLAG
 25308                                  	;OR	word [SS:DOS34_FLAG],Disable_EOF_I24	;AN000;
 25309                                  	;or	word [ss:DOS34_FLAG],40h
 25310                                  	; 21/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 25311                                  	; 16/12/2022
 25312 0000463D 36800E[1106]40          	or	byte [ss:DOS34_FLAG],40h 
 25313 00004643 E81DED                  	CALL	DOS_READ
 25314                                  	;AND	word [SS:DOS34_FLAG],NO_Disable_EOF_I24 ;AN000;
 25315                                  	;and	word [SS:DOS34_FLAG],0FFBFh
 25316                                  	; 21/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 25317                                  	; 16/12/2022
 25318 00004646 368026[1106]BF          	and	byte [SS:DOS34_FLAG],0BFh ; 07/12/2022
 25319 0000464C 09C9                    	OR	CX,CX			; Check EOF
 25320 0000464E E83D00                  	CALL	RESTXADDR
 25321                                  					; SS override
 25322 00004651 36A0[BC03]              	MOV	AL,[SS:DEVIOBUF]	; Get byte from trans addr
 25323 00004655 75CA                    	jnz	short IOUT_retn	
 25324 00004657 B01A                    	MOV	AL,1AH			; ^Z if no bytes
 25325 00004659 C3                      	retn
 25326                                  
 25327                                  SETXADDR:
 25328                                  					; SS override
 25329 0000465A 368F06[6C03]            	POP	WORD [SS:CALLSCNT]	; Return address
 25330                                  
 25331 0000465F 06                      	push	es ; * (MSDOS 6.21)
 25332                                  
 25333 00004660 E80DBE                  	call	save_world
 25334                                  					; SS override for DMAADD and THISSFT
 25335 00004663 36FF36[2C03]            	PUSH	WORD [SS:DMAADD]	; Save Disk trans addr
 25336 00004668 36FF36[2E03]            	PUSH	WORD [SS:DMAADD+2]
 25337 0000466D 368C1E[A005]            	MOV	[SS:THISSFT+2],DS
 25338                                  
 25339 00004672 16                      	push	ss
 25340 00004673 1F                      	pop	ds
 25341                                  
 25342 00004674 8936[9E05]              	MOV	[THISSFT],SI		; Finish setting SFT pointer
 25343 00004678 8B0E[8C03]              	MOV	CX,[IOXAD+2]
 25344 0000467C 890E[2E03]              	MOV	[DMAADD+2],CX
 25345 00004680 8B0E[8A03]              	MOV	CX,[IOXAD]
 25346 00004684 890E[2C03]              	MOV	[DMAADD],CX		; Set byte trans addr
 25347 00004688 8B0E[8E03]              	MOV	CX,[IOSCNT]		; ioscnt specifies length of buffer
 25348 0000468C EB10                    	JMP	SHORT RESTRET		; RETURN ADDRESS
 25349                                  
 25350                                  RESTXADDR:
 25351 0000468E 8F06[6C03]              	POP	WORD [CALLSCNT]		; Return address
 25352 00004692 8F06[2E03]              	POP	WORD [DMAADD+2]		; Restore Disk trans addr
 25353 00004696 8F06[2C03]              	POP	WORD [DMAADD]
 25354                                  
 25355 0000469A E8BCBD                  	call	restore_world
 25356                                  
 25357 0000469D 07                      	pop	es ; * (MSDOS 6.21)
 25358                                  					; SS override
 25359                                  RESTRET:
 25360 0000469E 36FF26[6C03]            	JMP	WORD [SS:CALLSCNT]	; Return address
 25361                                  
 25362                                  ; DOSCODE:8569h (MSDOS 6.21, MSDOS.SYS)
 25363                                  ; 21/11/2022
 25364                                  ; DOSCODE:852Eh (MSDOS 5.0, MSDOS.SYS)
 25365                                  
 25366                                  ;Break <DEV_OPEN_SFT, DEV_CLOSE_SFT - OPEN or CLOSE A DEVICE>
 25367                                  
 25368                                  ;----------------------------------------------------------------------------
 25369                                  ;**	Dev_Open_SFT - Open the Device for an SFT
 25370                                  ;
 25371                                  ;	Dev_Open_SFT issues an open call to the device associated with
 25372                                  ;	the SFT.
 25373                                  ;
 25374                                  ;	ENTRY	(ES:DI) = SFT
 25375                                  ;	EXIT	none
 25376                                  ;	USES	all
 25377                                  ;----------------------------------------------------------------------------
 25378                                  
 25379                                  DEV_OPEN_SFT:
 25380 000046A3 06                      	push	es ; * (MSDOS 6.21)
 25381 000046A4 E8C9BD                  	call	save_world
 25382                                  	;mov	al,0Dh	
 25383 000046A7 B00D                    	MOV	AL,DEVOPN
 25384 000046A9 EB06                    	JMP	SHORT DO_OPCLS
 25385                                  
 25386                                  ;----------------------------------------------------------------------------
 25387                                  ; Procedure Name : DEV_CLOSE_SFT
 25388                                  ;
 25389                                  ; Inputs:
 25390                                  ;	ES:DI Points to SFT
 25391                                  ; Function:
 25392                                  ;	Issue a CLOSE call to the correct device
 25393                                  ; Outputs:
 25394                                  ;	None
 25395                                  ; ALL preserved
 25396                                  ;----------------------------------------------------------------------------
 25397                                  
 25398                                  DEV_CLOSE_SFT:
 25399 000046AB 06                      	push	es ; * (MSDOS 6.21)
 25400 000046AC E8C1BD                  	call	save_world
 25401                                  	;mov	al,0Eh	
 25402 000046AF B00E                    	MOV	AL,DEVCLS
 25403                                  
 25404                                  	; Main entry for device open and close. AL contains the function 
 25405                                  	; requested. Subtlety: if Sharing is NOT loaded then we do NOT issue 
 25406                                  	; open/close to block devices. This allows networks to function but 
 25407                                  	; does NOT hang up with bogus change-line code.
 25408                                  
 25409                                  	;entry	DO_OPCLS
 25410                                  DO_OPCLS:
 25411                                  	; Is the SFT for the net? If so, no action necessary.
 25412                                  
 25413                                  	; MSDOS 6.0
 25414                                  	;test	word [es:di+5],8000h
 25415                                  	;TEST	word [ES:DI+SF_ENTRY.sf_flags],sf_isnet
 25416 000046B1 26F6450680              	test	byte [es:di+SF_ENTRY.sf_flags+1],(sf_isnet>>8)
 25417 000046B6 7567                    	jnz	short OPCLS_DONE	; NOP on net SFTs
 25418 000046B8 30E4                    	XOR	AH,AH			; Unit
 25419                                  	;test	byte [es:di+5],80h
 25420 000046BA 26F6450580              	TEST	byte [ES:DI+SF_ENTRY.sf_flags],devid_device
 25421                                  	;les	di,[es:di+7]
 25422 000046BF 26C47D07                	LES	DI,[ES:DI+SF_ENTRY.sf_devptr] ; Get DPB or device
 25423 000046C3 7513                    	JNZ	short GOT_DEV_ADDR
 25424                                  
 25425                                  	; We are about to call device open/close on a block driver. If no 
 25426                                  	; sharing then just short circuit to done.
 25427                                  	
 25428                                  	; MSDOS 6.0
 25429                                  					; SS override
 25430 000046C5 36803E[0303]01          	CMP	byte [ss:fShare],1	;AN010; /NC or no SHARE
 25431 000046CB 7652                    	JBE	short OPCLS_DONE	;AN010; yes
 25432                                  
 25433                                  	; MSDOS 3.3 (& MSDOS 6.0)
 25434                                  	;mov	ah,[es:di+1]
 25435 000046CD 268A6501                	MOV	AH,[ES:DI+DPB.UNIT]	; (ah) = unit
 25436 000046D1 268A0D                  	mov	cl,[es:di]
 25437                                  	;MOV	CL,[ES:DI+DPB.DRIVE]	; (cl) = drive
 25438                                  	;;les	di,[es:di+12h] ; MSDOS 3.3
 25439                                  	;les	di,[es:di+13h] ; MSDOS 6.0
 25440 000046D4 26C47D13                	LES	DI,[ES:DI+DPB.DRIVER_ADDR] ; Get device
 25441                                  GOT_DEV_ADDR:				; ES:DI -> device
 25442                                  	;test	word [es:di+4],800h
 25443                                  	;TEST	word [ES:DI+SYSDEV.ATT],DEVOPCL
 25444 000046D8 26F6450508              	test	byte [ES:DI+SYSDEV.ATT+1],(DEVOPCL>>8)
 25445 000046DD 7440                    	JZ	short OPCLS_DONE	; Device can't
 25446 000046DF 06                      	PUSH	ES
 25447 000046E0 1F                      	POP	DS
 25448 000046E1 89FE                    	MOV	SI,DI			; DS:SI -> device
 25449                                  
 25450                                  OPCLS_RETRY:
 25451                                  	;Context ES
 25452 000046E3 16                      	push	ss
 25453 000046E4 07                      	pop	es
 25454                                  					; DEVCALL is in DOSDATA
 25455 000046E5 BF[5A03]                	MOV	DI,DEVCALL
 25456                                  
 25457 000046E8 89FB                    	MOV	BX,DI
 25458 000046EA 50                      	PUSH	AX
 25459                                  	;mov	al,13
 25460 000046EB B00D                    	MOV	AL,DOPCLHL
 25461 000046ED AA                      	STOSB				; Length
 25462 000046EE 58                      	POP	AX
 25463 000046EF 86E0                    	XCHG	AH,AL
 25464 000046F1 AA                      	STOSB				; Unit
 25465 000046F2 86E0                    	XCHG	AH,AL
 25466 000046F4 AA                      	STOSB				; Command
 25467 000046F5 26C7050000              	MOV	WORD [ES:DI],0		; Status
 25468 000046FA 50                      	PUSH	AX			; Save Unit,Command
 25469                                  	;invoke	DEVIOCALL2
 25470 000046FB E82900                  	call	DEVIOCALL2
 25471                                  
 25472                                  	;mov	di,[es:bx+3]
 25473 000046FE 268B7F03                	MOV	DI,[ES:BX+SRHEAD.REQSTAT]
 25474                                  	;test	di,8000h
 25475                                  	;jz	short OPCLS_DONEP	
 25476 00004702 21FF                    	and	di,di
 25477 00004704 7918                    	jns	short OPCLS_DONEP	; No error
 25478                                  	; 21/11/2022
 25479                                  	;test	word [si+4],8000h
 25480                                  	;TEST	word [SI+SYSDEV.ATT],DEVTYP
 25481                                  	;test	word [si+5],80h
 25482 00004706 F6440580                	test	byte [SI+SYSDEV.ATT+1],(DEVTYP>>8)
 25483 0000470A 7404                    	JZ	short BLKDEV
 25484 0000470C B486                    	MOV	AH,86H			; Read error in data, Char dev
 25485 0000470E EB04                    	JMP	SHORT HRDERR
 25486                                  BLKDEV:
 25487 00004710 88C8                    	MOV	AL,CL			; Drive # in AL
 25488 00004712 B406                    	MOV	AH,6			; Read error in data, Blk dev
 25489                                  HRDERR:
 25490                                  	;invoke	CHARHARD
 25491 00004714 E89D0C                  	call	CHARHARD
 25492 00004717 3C01                    	cmp	al,1
 25493 00004719 7503                    	jne	short OPCLS_DONEP	; IGNORE or FAIL
 25494                                  					;  Note that FAIL is essentually IGNORED
 25495 0000471B 58                      	POP	AX			; Get back Unit, Command
 25496 0000471C EBC5                    	JMP	short OPCLS_RETRY
 25497                                  OPCLS_DONEP:
 25498 0000471E 58                      	POP	AX			; Clean stack
 25499                                  OPCLS_DONE:
 25500 0000471F E837BD                  	call	restore_world
 25501 00004722 07                      	pop	es ; * (MSDOS 6.21)
 25502 00004723 C3                      	retn
 25503                                  
 25504                                  ; 30/04/2019 - Retro DOS v4.0
 25505                                  ; DOSCODE:85EAh (MSDOS 6.21, MSDOS.SYS)
 25506                                  
 25507                                  ; 22/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 25508                                  ; DOSCODE:85AFh (MSDOS 5.0, MSDOS.SYS)
 25509                                  
 25510                                  ;Break	<DEVIOCALL, DEVIOCALL2 - CALL A DEVICE>
 25511                                  ;----------------------------------------------------------------------------
 25512                                  ;**	DevIoCall  - Call Device
 25513                                  ;
 25514                                  ;	ENTRY	DS:SI Points to device SFT
 25515                                  ;		ES:BX Points to request data
 25516                                  ;	EXIT	DS:SI -> Device driver
 25517                                  ;	USES	DS:SI,AX
 25518                                  ;----------------------------------------------------------------------------
 25519                                  ;**	DevIoCall2 - Call Device
 25520                                  ;
 25521                                  ;	ENTRY	DS:SI Points to DPB
 25522                                  ;		ES:BX Points to request data
 25523                                  ;	EXIT	DS:SI -> Device driver
 25524                                  ;	USES	DS:SI,AX
 25525                                  ;----------------------------------------------------------------------------
 25526                                  
 25527                                  DEVIOCALL:
 25528                                  					; SS override for CALLSSEC, 
 25529                                  	;lds	si,[si+7]		; CALLNEWSC, HIGH_SECTOR & CALLDEVAD
 25530 00004724 C57407                  	LDS	SI,[SI+SF_ENTRY.sf_devptr]
 25531                                  
 25532                                  	;entry	DEVIOCALL2
 25533                                  DEVIOCALL2:
 25534                                  	;EnterCrit critDevice
 25535 00004727 E863CC                  	call	ECritDevice
 25536                                  
 25537                                  	; MSDOS 6.0
 25538                                  	;TEST	word [SI+SYSDEV.ATT],DEVTYP ;AN000; >32mb block device ?
 25539                                  	;test	byte [si+5],80h
 25540 0000472A F6440580                	test	byte [si+SYSDEV.ATT+1],(DEVTYP>>8)
 25541 0000472E 7548                    	jnz	short chardev2		;AN000; >32mb no
 25542                                  
 25543                                  	; 16/12/2022
 25544                                  	; 22/11/2022
 25545 00004730 268A4702                	mov	al,[ES:BX+SRHEAD.REQFUNC] ; [es:bx+2]
 25546 00004734 3C04                    	cmp	al,DEVRD	; 4
 25547 00004736 7408                    	je	short chkext	
 25548 00004738 3C08                    	cmp	al,DEVWRT	; 8
 25549 0000473A 7404                    	je	short chkext
 25550 0000473C 3C09                    	cmp	al,DEVWRTV	; 9
 25551 0000473E 7538                    	jne	short chardev2
 25552                                  
 25553                                  	; 16/12/2022
 25554                                  	; 22/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 25555                                  	;;cmp	byte [es:bx+2],4
 25556                                  	;CMP	byte [ES:BX+SRHEAD.REQFUNC],DEVRD  ;AN000; >32mb read ?
 25557                                  	;JZ	short chkext		;AN000; >32mb   yes
 25558                                  	;;cmp	byte [es:bx+2],8
 25559                                  	;CMP	byte [ES:BX+SRHEAD.REQFUNC],DEVWRT ;AN000; >32mb write ?
 25560                                  	;JZ	short chkext		;AN000; >32mb   yes
 25561                                  	;;cmp	byte [es:bx+2],9
 25562                                  	;CMP	byte [ES:BX+SRHEAD.REQFUNC],DEVWRTV
 25563                                  	;				;AN000; >32mb write/verify ?
 25564                                  	;JNZ	short chardev2		;AN000; >32mb no
 25565                                  chkext:
 25566 00004740 E89900                  	CALL	RW_SC			;AN000;LB. use secondary cache if there
 25567 00004743 7255                    	JC	short dev_exit		;AN000;LB. done
 25568                                  
 25569                                  	;test	byte [si+4],2
 25570 00004745 F6440402                	TEST	byte [SI+SYSDEV.ATT],EXTDRVR ;AN000;>32mb extended driver?
 25571 00004749 741D                    	JZ	short chksector		;AN000;>32mb   no
 25572 0000474B 26800708                	ADD	BYTE [ES:BX],8		;AN000;>32mb   make length to 30
 25573 0000474F 36A1[6E03]              	MOV	AX,[SS:CALLSSEC]	;AN000;>32mb
 25574 00004753 36C706[6E03]FFFF        	MOV	word [SS:CALLSSEC],-1	;AN000;>32mb   old sector  =-1
 25575 0000475A 36A3[7403]              	MOV	[SS:CALLNEWSC],AX	;AN000;>32mb   new sector  =
 25576 0000475E 36A1[0706]              	MOV	AX,[SS:HIGH_SECTOR]	;AN000; >32mb  low sector,high sector
 25577 00004762 36A3[7603]              	MOV	[SS:CALLNEWSC+2],AX	;AN000; >32mb
 25578 00004766 EB10                    	JMP	short chardev2		;AN000; >32mb
 25579                                  chksector:				;AN000; >32mb
 25580 00004768 36833E[0706]00          	CMP	word [SS:HIGH_SECTOR],0	;AN000; >32mb   if >32mb
 25581 0000476E 7408                    	JZ	short chardev2		;AN000; >32mb   then fake error
 25582                                  	;mov	word [es:bx+3],8107h
 25583 00004770 26C747030781            	MOV	word [ES:BX+SRHEAD.REQSTAT],STERR+STDON+error_I24_not_DOS_disk 
 25584                                  					;AN000; >32mb
 25585 00004776 EB22                    	JMP	SHORT dev_exit		;AN000; >32mb
 25586                                  
 25587                                  chardev2:				;AN000;
 25588                                  	; As above only DS:SI points to device header on entry, and DS:SI is 
 25589                                  	; preserved
 25590                                  
 25591                                  	;mov	ax,[si+6]
 25592 00004778 8B4406                  	MOV	AX,[SI+SYSDEV.STRAT]
 25593 0000477B 36A3[7803]              	MOV	[SS:CALLDEVAD],AX
 25594 0000477F 368C1E[7A03]            	MOV	[SS:CALLDEVAD+2],DS
 25595 00004784 36FF1E[7803]            	CALL	far [SS:CALLDEVAD]
 25596                                  
 25597                                  	;mov	ax,[si+8]
 25598 00004789 8B4408                  	MOV	AX,[SI+SYSDEV.INT]
 25599 0000478C 36A3[7803]              	MOV	[SS:CALLDEVAD],AX
 25600 00004790 36FF1E[7803]            	CALL	far [SS:CALLDEVAD]
 25601                                  
 25602                                  	; MSDOS 6.0
 25603 00004795 E84001                  	CALL	VIRREAD 		;AN000;LB. move data from SC to buffer
 25604 00004798 72DE                    	JC	short chardev2		;AN000;LB. bad sector or exceeds max sec
 25605                                  
 25606                                  dev_exit:
 25607                                  	;LeaveCrit critDevice
 25608                                  	;call	LCritDevice
 25609                                  	;retn
 25610                                  	; 18/12/2022
 25611 0000479A E90BCC                  	jmp	LCritDevice
 25612                                  
 25613                                  ; DOSCODE:8669h (MSDOS 6.21, MSDOS.SYS)
 25614                                  ; 22/11/2022
 25615                                  ; DOSCODE:862Eh (MSDOS 5.0, MSDOS.SYS)
 25616                                  
 25617                                  ;Break	<SETREAD, SETWRITE -- SET UP HEADER BLOCK>
 25618                                  ;---------------------------------------------------------------------------
 25619                                  ;
 25620                                  ; Procedure Name : SETREAD, SETWRITE
 25621                                  ;
 25622                                  ; Inputs:
 25623                                  ;	DS:BX = Transfer Address
 25624                                  ;	CX = Record Count
 25625                                  ;	DX = Starting Record
 25626                                  ;	AH = Media Byte
 25627                                  ;	AL = Unit Code
 25628                                  ; Function:
 25629                                  ;	Set up the device call header at DEVCALL
 25630                                  ; Output:
 25631                                  ;	ES:BX Points to DEVCALL
 25632                                  ; No other registers effected
 25633                                  ;
 25634                                  ;---------------------------------------------------------------------------
 25635                                  
 25636                                  SETREAD:
 25637 0000479D 57                      	PUSH	DI
 25638 0000479E 51                      	PUSH	CX
 25639 0000479F 50                      	PUSH	AX
 25640 000047A0 B104                    	MOV	CL,DEVRD ; mov cl,4
 25641                                  SETCALLHEAD:
 25642 000047A2 B016                    	MOV	AL,DRDWRHL ; mov al,16h
 25643 000047A4 16                      	PUSH	SS
 25644 000047A5 07                      	POP	ES
 25645                                  					; DEVCALL is in DOSDATA
 25646 000047A6 BF[5A03]                	MOV	DI,DEVCALL
 25647                                  
 25648 000047A9 AA                      	STOSB				; length
 25649 000047AA 58                      	POP	AX			; 
 25650 000047AB AA                      	STOSB				; Unit
 25651 000047AC 50                      	PUSH	AX
 25652 000047AD 88C8                    	MOV	AL,CL
 25653 000047AF AA                      	STOSB				; Command code
 25654 000047B0 31C0                    	XOR	AX,AX
 25655 000047B2 AB                      	STOSW				; Status
 25656 000047B3 83C708                  	ADD	DI,8			; Skip link fields
 25657 000047B6 58                      	POP	AX
 25658 000047B7 86E0                    	XCHG	AH,AL
 25659 000047B9 AA                      	STOSB				; Media byte
 25660 000047BA 86C4                    	XCHG	AL,AH
 25661 000047BC 50                      	PUSH	AX
 25662 000047BD 89D8                    	MOV	AX,BX
 25663 000047BF AB                      	STOSW
 25664                                  
 25665 000047C0 8CD8                    	MOV	AX,DS
 25666 000047C2 AB                      	STOSW				; Transfer addr
 25667                                  
 25668 000047C3 59                      	POP	CX			; Real AX
 25669 000047C4 58                      	POP	AX			; Real CX
 25670 000047C5 AB                      	STOSW				; Count
 25671                                  
 25672 000047C6 92                      	XCHG	AX,DX			; AX=Real DX, DX=real CX, CX=real AX
 25673 000047C7 AB                      	STOSW				; Start
 25674 000047C8 91                      	XCHG	AX,CX
 25675 000047C9 87D1                    	XCHG	DX,CX
 25676 000047CB 5F                      	POP	DI
 25677                                  					; DEVCALL is in DOSDATA
 25678 000047CC BB[5A03]                	MOV	BX,DEVCALL
 25679 000047CF C3                      	retn
 25680                                  
 25681                                  	;entry	SETWRITE
 25682                                  SETWRITE:
 25683                                  
 25684                                  ; Inputs:
 25685                                  ;	DS:BX = Transfer Address
 25686                                  ;	CX = Record Count
 25687                                  ;	DX = Starting Record
 25688                                  ;	AH = Media Byte
 25689                                  ;	AL = Unit Code
 25690                                  ; Function:
 25691                                  ;	Set up the device call header at DEVCALL
 25692                                  ; Output:
 25693                                  ;	ES:BX Points to DEVCALL
 25694                                  ; No other registers effected
 25695                                  
 25696 000047D0 57                      	PUSH	DI
 25697 000047D1 51                      	PUSH	CX
 25698 000047D2 50                      	PUSH	AX
 25699 000047D3 B108                    	MOV	CL,DEVWRT ; mov cl,8
 25700 000047D5 36020E[FF02]            	ADD	CL,[SS:VERFLG]		; SS override
 25701 000047DA EBC6                    	JMP	SHORT SETCALLHEAD
 25702                                  
 25703                                  ; 30/04/2019 - Retro DOS v4.0
 25704                                  ; DOSCODE:86A8h (MSDOS 6.21, MSDOS.SYS)
 25705                                  ; 22/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 25706                                  ; DOSCODE:866Dh (MSDOS 5.0, MSDOS.SYS)
 25707                                  
 25708                                  ;Break	<RW_SC -- Read Write Secondary Cache>
 25709                                  ;---------------------------------------------------------------------------
 25710                                  ;
 25711                                  ; Procedure Name : RW_SC
 25712                                  ;
 25713                                  ; Inputs:
 25714                                  ;	 [SC_CACHE_COUNT]= secondary cache count
 25715                                  ;	 [SC_STATUS]= SC validity status
 25716                                  ;	 [SEQ_SECTOR]= last sector read
 25717                                  ; Function:
 25718                                  ;	Read from or write through secondary cache
 25719                                  ; Output:
 25720                                  ;	ES:BX Points to DEVCALL
 25721                                  ;	carry clear, I/O is not done
 25722                                  ;		     [SC_FLAG]=1 if continuos sectors will be read
 25723                                  ;	carry set, I/O is done
 25724                                  ;
 25725                                  ;----------------------------------------------------------------------------
 25726                                  
 25727                                  RW_SC:
 25728                                  	; SS override for all variables used.
 25729                                  	
 25730 000047DC 36833E[7700]00          	CMP	word [ss:SC_CACHE_COUNT],0  ;AN000;LB. secondary cache exists?
 25731 000047E2 7421                    	JZ	short scexit4		    ;AN000;LB. no, do nothing
 25732 000047E4 36833E[6C03]01          	CMP	word [ss:CALLSCNT],1	    ;AN000;LB. sector count = 1 (buffer I/O)
 25733 000047EA 7519                    	JNZ	short scexit4 		    ;AN000;LB. no, do nothing
 25734 000047EC 51                      	PUSH	CX			    ;AN000;LB.
 25735 000047ED 52                      	PUSH	DX			    ;AN000;LB. yes
 25736 000047EE 1E                      	PUSH	DS			    ;AN000;LB. save registers
 25737 000047EF 56                      	PUSH	SI			    ;AN000;LB.
 25738 000047F0 06                      	PUSH	ES			    ;AN000;LB.
 25739 000047F1 57                      	PUSH	DI			    ;AN000;LB.
 25740                                  
 25741 000047F2 368B16[6E03]            	MOV	DX,[ss:CALLSSEC]	    ;AN000;LB. starting sector
 25742 000047F7 36803E[5C03]04          	CMP	BYTE [ss:DEVCALL_REQFUNC],DEVRD ;AN000;LB. read ?
 25743 000047FD 7408                    	JZ	short doread		    ;AN000;LB. yes
 25744 000047FF E8C400                  	CALL	INVALIDATE_SC		    ;AN000;LB. invalidate SC
 25745 00004802 E98E00                  	JMP	scexit2 		    ;AN000;LB. back to normal
 25746                                  scexit4:				    ;AN000;
 25747 00004805 F8                      	CLC				    ;AN000;LB. I/O not done yet
 25748 00004806 C3                      	retn				    ;AN000;LB.
 25749                                  doread: 				    ;AN000;
 25750 00004807 E82601                  	CALL	SC2BUF			    ;AN000;LB. check if in SC
 25751 0000480A 720A                    	JC	short readSC		    ;AN000;LB.
 25752 0000480C 36C706[5D03]0001        	MOV	word [ss:DEVCALL_REQSTAT],STDON ;AN000;LB. fake done and ok
 25753 00004813 F9                      	STC				    ;AN000;LB. set carry
 25754 00004814 EB6B                    	JMP	short saveseq 		    ;AN000;LB. save seq. sector #
 25755                                  readSC: 				    ;AN000;
 25756 00004816 36A1[0706]              	MOV	AX,[ss:HIGH_SECTOR]   	    ;AN000;LB. subtract sector num from
 25757 0000481A 368B0E[6E03]            	MOV	CX,[ss:CALLSSEC]	    ;AN000;LB. saved sequential sector
 25758 0000481F 362B0E[A90D]            	SUB	CX,[ss:SEQ_SECTOR]    	    ;AN000;LB. number
 25759 00004824 361B06[AB0D]            	SBB	AX,[ss:SEQ_SECTOR+2]  	    ;AN000;LB.
 25760 00004829 83F800                  	CMP	AX,0			    ;AN000;LB. greater than 64K
 25761 0000482C 7552                    	JNZ	short saveseq2		    ;AN000;LB. yes,save seq. sector #
 25762                                  chklow: 						
 25763 0000482E 83F901                  	CMP	CX,1			    ;AN000;LB. <= 1
 25764 00004831 774D                    	JA	short saveseq2		    ;AN000;LB. no, not sequential
 25765 00004833 36C706[B50D]FFFF        	MOV	word [ss:SC_STATUS],-1	    ;AN000;LB. presume all SC valid
 25766 0000483A 36A1[7700]              	MOV	AX,[ss:SC_CACHE_COUNT]	    ;AN000;LB. yes, sequential
 25767 0000483E 36A3[6C03]              	MOV	[ss:CALLSCNT],AX	    ;AN000;LB. read continuous sectors
 25768                                  readsr:
 25769 00004842 36A1[6A03]              	MOV	AX,[ss:CALLXAD+2]	    ;AN000;LB. save buffer addr
 25770 00004846 36A3[0E06]              	MOV	[ss:TEMP_VAR2],AX	    ;AN000;LB. in temp vars
 25771 0000484A 36A1[6803]              	MOV	AX,[ss:CALLXAD]	    	    ;AN000;LB.
 25772 0000484E 36A3[0C06]              	MOV	[ss:TEMP_VAR],AX	    ;AN000;LB.
 25773                                  
 25774 00004852 36A1[7300]              	MOV	AX,[ss:SC_CACHE_PTR]	    ;AN000;LB. use SC cache addr as
 25775 00004856 36A3[6803]              	MOV	[ss:CALLXAD],AX		    ;AN000;LB. transfer addr
 25776 0000485A 36A1[7500]              	MOV	AX,[ss:SC_CACHE_PTR+2]	    ;AN000;LB.
 25777 0000485E 36A3[6A03]              	MOV	[ss:CALLXAD+2],AX	    ;AN000;LB.
 25778 00004862 36C606[B70D]01          	MOV	byte [ss:SC_FLAG],1	    ;AN000;LB. flag it for later;
 25779 00004868 36A0[AF0D]              	MOV	AL,[ss:SC_DRIVE]	    ;AN000;LB. current drive
 25780 0000486C 36A2[B00D]              	MOV	[ss:CurSC_DRIVE],AL	    ;AN000;LB. set current drive
 25781 00004870 36A1[6E03]              	MOV	AX,[ss:CALLSSEC]	    ;AN000;LB. current sector
 25782 00004874 36A3[B10D]              	MOV	[ss:CurSC_SECTOR],AX	    ;AN000;LB. set current sector
 25783 00004878 36A1[0706]              	MOV	AX,[ss:HIGH_SECTOR]	    ;AN000;LB.
 25784 0000487C 36A3[B30D]              	MOV	[ss:CurSC_SECTOR+2],AX	    ;AN000;LB.
 25785                                  saveseq2:				    ;AN000;
 25786 00004880 F8                      	CLC				    ;AN000;LB. clear carry
 25787                                  saveseq:				    ;AN000;	
 25788 00004881 36A1[0706]              	MOV	AX,[ss:HIGH_SECTOR]	    ;AN000;LB. save current sector #
 25789 00004885 36A3[AB0D]              	MOV	[ss:SEQ_SECTOR+2],AX	    ;AN000;LB. for access mode ref.
 25790 00004889 36A1[6E03]              	MOV	AX,[ss:CALLSSEC]	    ;AN000;LB.	
 25791 0000488D 36A3[A90D]              	MOV	[ss:SEQ_SECTOR],AX 	    ;AN000;LB.	
 25792 00004891 EB01                    	JMP	short scexit 		    ;AN000;LB.	
 25793                                  scexit2:				    ;AN000;LB.
 25794 00004893 F8                      	CLC				    ;AN000;LB.	clear carry
 25795                                  scexit: 				    ;AN000;		
 25796 00004894 5F                      	POP	DI			    ;AN000;LB.
 25797 00004895 07                      	POP	ES			    ;AN000;LB. restore registers
 25798 00004896 5E                      	POP	SI			    ;AN000;LB.
 25799 00004897 1F                      	POP	DS			    ;AN000;LB.
 25800 00004898 5A                      	POP	DX			    ;AN000;LB.
 25801 00004899 59                      	POP	CX			    ;AN000;LB.
 25802 0000489A C3                      	retn				    ;AN000;LB.
 25803                                  
 25804                                  ;Break	<IN_SC -- check if in secondary cache>
 25805                                  ;--------------------------------------------------------------------------
 25806                                  ;
 25807                                  ; Procedure Name : IN_SC
 25808                                  ;
 25809                                  ; Inputs:  [SC_DRIVE]= requesting drive
 25810                                  ;	   [CURSC_DRIVE]= current SC drive
 25811                                  ;	   [CURSC_SECTOR]= starting scetor # of SC
 25812                                  ;	   [SC_CACHE_COUNT]= SC count
 25813                                  ;	   [HIGH_SECTOR]:DX= sector number
 25814                                  ; Function:
 25815                                  ;	Check if the sector is in secondary cache
 25816                                  ; Output:
 25817                                  ;	carry clear, in SC
 25818                                  ;	   CX= the index in the secondary cache
 25819                                  ;	carry set, not in SC
 25820                                  ;
 25821                                  ;---------------------------------------------------------------------------
 25822                                  
 25823                                  	; 22/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 25824                                  IN_SC:
 25825                                  	; SS override for all variables used
 25826 0000489B 36A0[AF0D]              	MOV	AL,[ss:SC_DRIVE]	    ;AN000;;LB. current drive
 25827 0000489F 363A06[B00D]            	CMP	AL,[ss:CurSC_DRIVE]	    ;AN000;;LB. same as SC drive
 25828 000048A4 751E                    	JNZ	short outrange2		    ;AN000;;LB. no
 25829 000048A6 36A1[0706]              	MOV	AX,[ss:HIGH_SECTOR]	    ;AN000;;LB. subtract sector num from
 25830 000048AA 89D1                    	MOV	CX,DX			    ;AN000;;LB. secondary starting sector
 25831 000048AC 362B0E[B10D]            	SUB	CX,[ss:CurSC_SECTOR]        ;AN000;;LB. number
 25832 000048B1 361B06[B30D]            	SBB	AX,[ss:CurSC_SECTOR+2]      ;AN000;;LB.
 25833 000048B6 83F800                  	CMP	AX,0			    ;AN000;;LB. greater than 64K
 25834 000048B9 7509                    	JNZ	short outrange2		    ;AN000;;LB. yes
 25835 000048BB 363B0E[7700]            	CMP	CX,[ss:SC_CACHE_COUNT]	    ;AN000;;LB. greater than SC count
 25836 000048C0 7302                    	JAE	short outrange2		    ;AN000;;LB. yes
 25837 000048C2 F8                      	CLC				    ;AN000;;LB. clear carry
 25838                                  	;JMP	short inexit		    ;AN000;;LB. in SC
 25839                                  	; 16/12/2022
 25840 000048C3 C3                      	retn	; 30/04/2019
 25841                                  	; 22/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 25842                                  	;jmp	short inexit
 25843                                  
 25844                                  outrange2:				    ;AN000;;LB. set carry
 25845 000048C4 F9                      	STC				    ;AN000;;LB.
 25846                                  inexit: 				    ;AN000;;LB.
 25847 000048C5 C3                      	retn				    ;AN000;;LB.
 25848                                  
 25849                                  ;Break	<INVALIDATE_SC - invalide secondary cache>
 25850                                  ;---------------------------------------------------------------------------
 25851                                  ;
 25852                                  ; Procedure Name : Invalidate_Sc
 25853                                  ;
 25854                                  ; Inputs:  [SC_DRIVE]= requesting drive
 25855                                  ;	   [CURSC_DRIVE]= current SC drive
 25856                                  ;	   [CURSC_SECTOR]= starting scetor # of SC
 25857                                  ;	   [SC_CACHE_COUNT]= SC count
 25858                                  ;	   [SC_STATUS]= SC status word
 25859                                  ;	   [HIGH_SECTOR]:DX= sector number
 25860                                  ;
 25861                                  ; Function:
 25862                                  ;	invalidate secondary cache if in there
 25863                                  ; Output:
 25864                                  ;	[SC_STATUS] is updated
 25865                                  ;---------------------------------------------------------------------------
 25866                                  
 25867                                  INVALIDATE_SC:
 25868                                  	; SS override for all variables used
 25869                                  
 25870 000048C6 E8D2FF                  	CALL	IN_SC			    ;AN000;;LB. in secondary cache
 25871 000048C9 720C                    	JC	short outrange		    ;AN000;;LB. no
 25872 000048CB B80100                  	MOV	AX,1			    ;AN000;;LB. invalidate the sector
 25873 000048CE D3E0                    	SHL	AX,CL			    ;AN000;;LB. in the secondary cache
 25874 000048D0 F7D0                    	NOT	AX			    ;AN000;;LB.
 25875 000048D2 362106[B50D]            	AND	[ss:SC_STATUS],AX	    ;AN000;;LB. save the status
 25876                                  outrange:				    ;AN000;;LB.
 25877 000048D7 C3                      	retn				    ;AN000;;LB.
 25878                                  
 25879                                  ; DOSCODE:87A5h (MSDOS 6.21, MSDOS.SYS)
 25880                                  ; 22/11/2022
 25881                                  ; DOSCODE:876Ah (MSDOS 5.0, MSDOS.SYS)
 25882                                  
 25883                                  ;Break	<VIRREAD- virtually read data into buffer>
 25884                                  ;--------------------------------------------------------------------------
 25885                                  ;
 25886                                  ; Procedure Name : SC_FLAG
 25887                                  ;
 25888                                  ; Inputs:  SC_FLAG = 0, no sectors were read into SC
 25889                                  ;		     1, continuous sectors were read into SC
 25890                                  ; Function:
 25891                                  ;	   Move data from SC to buffer
 25892                                  ; Output:
 25893                                  ;	 carry clear, data is moved to buffer
 25894                                  ;	 carry set, bad sector or exceeds maximum sector
 25895                                  ;	   SC_FLAG =0
 25896                                  ;	   CALLSCNT=1
 25897                                  ;	   SC_STATUS= -1 if succeeded
 25898                                  ;     
 25899                                  ;		       0 if failed
 25900                                  ;--------------------------------------------------------------------------
 25901                                  
 25902                                  VIRREAD:
 25903                                  	; SS override for all variables used
 25904                                  
 25905 000048D8 36803E[B70D]00          	CMP	byte [ss:SC_FLAG],0	    ;AN000;;LB. from SC fill
 25906 000048DE 744E                    	JZ	short sc2end		    ;AN000;;LB. no
 25907 000048E0 36A1[0E06]              	MOV	AX,[ss:TEMP_VAR2]	    ;AN000;;LB. restore buffer addr
 25908 000048E4 36A3[6A03]              	MOV	[ss:CALLXAD+2],AX	    ;AN000;;LB.
 25909 000048E8 36A1[0C06]              	MOV	AX,[ss:TEMP_VAR]	    ;AN000;;LB.
 25910 000048EC 36A3[6803]              	MOV	[ss:CALLXAD],AX		    ;AN000;;LB.
 25911 000048F0 36C606[B70D]00          	MOV	byte [ss:SC_FLAG],0	    ;AN000;;LB. reset sc_flag
 25912 000048F6 36C706[6C03]0100        	MOV	word [ss:CALLSCNT],1	    ;AN000;;LB. one sector transferred
 25913                                  
 25914                                  	;TEST	word [SS:DEVCALL_REQSTAT],STERR ;AN000;;LB. error?
 25915 000048FD 36F606[5E03]80          	test	byte [ss:DEVCALL_REQSTAT+1],(STERR>>8) ; 80h
 25916 00004903 7513                    	JNZ	short scerror 		    ;AN000;;LB. yes
 25917 00004905 1E                      	PUSH	DS			    ;AN000;;LB.
 25918 00004906 56                      	PUSH	SI			    ;AN000;;LB.
 25919 00004907 06                      	PUSH	ES			    ;AN000;;LB.
 25920 00004908 57                      	PUSH	DI			    ;AN000;;LB.
 25921 00004909 52                      	PUSH	DX			    ;AN000;;LB.
 25922 0000490A 51                      	PUSH	CX			    ;AN000;;LB.
 25923 0000490B 31C9                    	XOR	CX,CX			    ;AN000;;LB. we want first sector in SC
 25924 0000490D E83100                  	CALL	SC2BUF2 		    ;AN000;;LB. move data from SC t
 25925 00004910 59                      	POP	CX
 25926 00004911 5A                      	POP	DX			    ;AN000;;LB.
 25927 00004912 5F                      	POP	DI			    ;AN000;;LB.
 25928 00004913 07                      	POP	ES			    ;AN000;;LB.
 25929 00004914 5E                      	POP	SI			    ;AN000;;LB.
 25930 00004915 1F                      	POP	DS			    ;AN000;;LB.
 25931 00004916 EB16                    	JMP	SHORT sc2end		    ;AN000;;LB. return
 25932                                  scerror:				    ;AN000;
 25933 00004918 36C706[6C03]0100        	MOV	word [ss:CALLSCNT],1	    ;AN000;;LB. reset sector count to 1
 25934 0000491F 36C706[B50D]0000        	MOV	word [ss:SC_STATUS],0	    ;AN000;;LB. invalidate all SC sectors
 25935 00004926 36C606[B00D]FF          	MOV	byte [ss:CurSC_DRIVE],-1    ;AN000;;LB. invalidate drive
 25936 0000492C F9                      	STC				    ;AN000;;LB. carry set
 25937 0000492D C3                      	retn				    ;AN000;;LB.
 25938                                  sc2end: 				    ;AN000;
 25939 0000492E F8                      	CLC				    ;AN000;;LB. carry clear
 25940 0000492F C3                      	retn				    ;AN000;;LB.
 25941                                  
 25942                                  ; 30/04/2019 - Retro  DOS v4.0
 25943                                  ; DOSCODE:87FDh (MSDOS 6.21, MSDOS.SYS)
 25944                                  ; 22/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 25945                                  ; DOSCODE:87C2h (MSDOS 5.0, MSDOS.SYS)
 25946                                  
 25947                                  ;Break	<SC2BUF- move data from SC to buffer>
 25948                                  ;----------------------------------------------------------------------------
 25949                                  ;
 25950                                  ; Procedure Name : SC2BUF
 25951                                  ;
 25952                                  ; Inputs:  [SC_STATUS] = SC validity status
 25953                                  ;	   [SC_SECTOR_SIZE] = request sector size
 25954                                  ;	   [SC_CACHE_PTR] = pointer to SC
 25955                                  ; Function:
 25956                                  ;	   Move data from SC to buffer
 25957                                  ; Output:
 25958                                  ;	   carry clear, in SC  and data is moved
 25959                                  ;	   carry set, not in SC and data is not moved
 25960                                  ;---------------------------------------------------------------------------
 25961                                  
 25962                                  SC2BUF:
 25963                                  	; SS override for all variables used
 25964 00004930 E868FF                  	CALL	IN_SC			    ;AN000;LB. in secondary cache
 25965 00004933 7241                    	JC	short noSC		    ;AN000;LB. no
 25966 00004935 B80100                  	MOV	AX,1			    ;AN000;LB. check if valid sector
 25967 00004938 D3E0                    	SHL	AX,CL			    ;AN000;LB. in the secondary cache
 25968 0000493A 368506[B50D]            	TEST	[ss:SC_STATUS],AX	    ;AN000;LB.
 25969 0000493F 7435                    	JZ	short noSC		    ;AN000;LB. invalid
 25970                                  ;entry SC2BUF2
 25971                                  SC2BUF2:				    ;AN000;
 25972 00004941 89C8                    	MOV	AX,CX			    ;AN000;LB. times index with
 25973 00004943 36F726[AD0D]            	MUL	word [ss:SC_SECTOR_SIZE]    ;AN000;LB. sector size
 25974 00004948 360306[7300]            	ADD	AX,[ss:SC_CACHE_PTR]	    ;AN000;LB. add SC starting addr
 25975 0000494D 361316[7500]            	ADC	DX,[ss:SC_CACHE_PTR+2]	    ;AN000;LB.
 25976 00004952 8EDA                    	MOV	DS,DX			    ;AN000;LB. DS:SI-> SC sector addr
 25977 00004954 89C6                    	MOV	SI,AX			    ;AN000;LB.
 25978 00004956 368E06[6A03]            	MOV	ES,[ss:CALLXAD+2]		    ;AN000;LB. ES:DI-> buffer addr
 25979 0000495B 368B3E[6803]            	MOV	DI,[ss:CALLXAD]		    ;AN000;LB.
 25980 00004960 368B0E[AD0D]            	MOV	CX,[ss:SC_SECTOR_SIZE]	    ;AN000;LB. count= sector size
 25981 00004965 D1E9                    	SHR	CX,1			    ;AN000;LB. may use DWORD move for 386
 25982                                  ;entry MOVWORDS
 25983                                  MOVWORDS:				    ;AN000;
 25984 00004967 36803E[6A00]00          	CMP	byte [ss:DDMOVE],0	    ;AN000;LB. 386 ?
 25985 0000496D 7403                    	JZ	short nodd		    ;AN000;LB. no
 25986 0000496F D1E9                    	SHR	CX,1			    ;AN000;LB. words/2
 25987 00004971 66                      	DB	66H			    ;AN000;LB. use double word move
 25988                                  nodd:
 25989 00004972 F3A5                    	REP	MOVSW			    ;AN000;LB. move to buffer
 25990 00004974 F8                      	CLC				    ;AN000;LB. clear carry
 25991 00004975 C3                      	retn				    ;AN000;LB. exit
 25992                                  noSC:					    ;AN000;
 25993 00004976 F9                      	STC				    ;AN000;LB. set carry
 25994                                  sexit:					    ;AN000;
 25995 00004977 C3                      	retn				    ;AN000;LB.
 25996                                  
 25997                                  ;============================================================================
 25998                                  ; MKNODE.ASM, MSDOS 6.0, 1991
 25999                                  ;============================================================================
 26000                                  ; 29/07/2018 - Retro DOS v3.0
 26001                                  ; 19/05/2019 - Retro DOS v4.0
 26002                                  
 26003                                  ;	TITLE	MKNODE - Node maker
 26004                                  ;	NAME	MKNODE
 26005                                  
 26006                                  ;**	MKNODE.ASM
 26007                                  ;----------------------------------------------------------------------------
 26008                                  ;	Low level routines for making a new local file system node
 26009                                  ;	and filling in an SFT from a directory entry
 26010                                  ;
 26011                                  ;	BUILDDIR
 26012                                  ;	SETDOTENT
 26013                                  ;	MakeNode
 26014                                  ;	NEWENTRY
 26015                                  ;	FREEENT
 26016                                  ;	NEWDIR
 26017                                  ;	DOOPEN
 26018                                  ;	RENAME_MAKE
 26019                                  ;	CHECK_VIRT_OPEN
 26020                                  ;
 26021                                  ;	Revision history:
 26022                                  ;
 26023                                  ;	 AN000	version 4.0  Jan. 1988
 26024                                  ;	 A004	PTM 3680  --- Make SFT NAME field offset same as 3.30
 26025                                  
 26026                                  ;Break   <BUILDDIR,NEWDIR -- ALLOCATE DIRECTORIES>
 26027                                  ;----------------------------------------------------------------------------
 26028                                  ;
 26029                                  ; Procedure Name : BUILDDIR,NEWDIR
 26030                                  ;
 26031                                  ; Inputs:
 26032                                  ;       ES:BP Points to DPB
 26033                                  ;       [THISSFT] Set if using NEWDIR entry point
 26034                                  ;               (used by ALLOCATE)
 26035                                  ;       [LASTENT] current last valid entry number in directory if no free
 26036                                  ;               entries
 26037                                  ;       [DIRSTART] Points to first cluster of dir (0 means root)
 26038                                  ; Function:
 26039                                  ;       Grow directory if no free entries and not root
 26040                                  ; Outputs:
 26041                                  ;       CARRY SET IF FAILURE
 26042                                  ;       ELSE
 26043                                  ;          AX entry number of new entry
 26044                                  ;          If a new dir [DIRSTART],[CLUSFAC],[CLUSNUM],[DIRSEC] set
 26045                                  ;               AX = first entry of new dir
 26046                                  ;       GETENT should be called to set [LASTENT]
 26047                                  ;
 26048                                  ;----------------------------------------------------------------------------
 26049                                  
 26050                                  ; 19/05/2019 - Retro DOS v4.0
 26051                                  ; DOSCODE:8845h (MSDOS 6.21, MSDOS.SYS)
 26052                                  ; 22/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 26053                                  ; DOSCODE:880Ah (MSDOS 6.21, MSDOS.SYS)
 26054                                  
 26055                                  BUILDDIR:
 26056                                  	; 29/07/2018 - Retro DOS v3.0
 26057                                  	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 4E66h
 26058                                  
 26059 00004978 A1[D805]                        MOV     AX,[ENTFREE]
 26060 0000497B 83F8FF                          CMP     AX,-1
 26061 0000497E 7402                            JZ	short CHECK_IF_ROOT
 26062 00004980 F8                              CLC
 26063 00004981 C3                              retn
 26064                                  
 26065                                  CHECK_IF_ROOT:
 26066 00004982 833E[C205]00                    CMP     word [DIRSTART],0
 26067 00004987 7502                            JNZ	short NEWDIR
 26068 00004989 F9                              STC
 26069                                  builddir_retn:
 26070 0000498A C3                              retn				; Can't grow root
 26071                                  
 26072                                  	;entry   NEWDIR
 26073                                  NEWDIR:        
 26074 0000498B 8B1E[C205]              	MOV     BX,[DIRSTART]
 26075 0000498F 09DB                            OR      BX,BX
 26076 00004991 7405                            JZ	short NULLDIR
 26077 00004993 E84006                  	call	GETEOF
 26078 00004996 72F2                            jc	short builddir_retn	; Screw up
 26079                                  NULLDIR:
 26080 00004998 B90100                          MOV     CX,1
 26081 0000499B E85105                  	call	ALLOCATE
 26082 0000499E 72EA                            jc	short  builddir_retn
 26083 000049A0 8B16[C205]                      MOV     DX,[DIRSTART]
 26084 000049A4 09D2                            OR      DX,DX
 26085 000049A6 750D                            JNZ	short ADDINGDIR
 26086 000049A8 E8BFF5                  	call	SETDIRSRCH
 26087 000049AB 72DD                            jc	short  builddir_retn
 26088 000049AD C706[4803]FFFF                  MOV     word [LASTENT],-1
 26089 000049B3 EB2B                            JMP     SHORT GOTDIRREC
 26090                                  ADDINGDIR:
 26091 000049B5 53                              PUSH    BX
 26092 000049B6 8B1E[BC05]                      MOV     BX,[CLUSNUM]
 26093 000049BA E84B0C                          call	IsEOF
 26094 000049BD 5B                              POP     BX
 26095 000049BE 7219                            JB	short NOTFIRSTGROW
 26096                                  ;;;; 10/17/86 update CLUSNUM in the fastopen cache
 26097 000049C0 891E[BC05]                      MOV     [CLUSNUM],BX
 26098 000049C4 51                              PUSH    CX
 26099 000049C5 50                              PUSH    AX
 26100 000049C6 55                              PUSH    BP
 26101 000049C7 B401                            MOV     AH,1			; CLUSNUM update
 26102                                  	; 15/12/2022
 26103 000049C9 268A5600                	mov	dl,[ES:BP] ; 09/09/2018
 26104                                          ; 22/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 26105                                  	;;mov	dl,[es:bp+0]
 26106                                  	;MOV	DL,[ES:BP+DPB.DRIVE]	; drive #
 26107 000049CD 8B0E[C205]                      MOV     CX,[DIRSTART]		; first cluster #
 26108 000049D1 89DD                            MOV     BP,BX 			; CLUSNUM
 26109 000049D3 E88DDD                  	call	FastOpen_Update
 26110 000049D6 5D                              POP     BP
 26111 000049D7 58                              POP     AX
 26112 000049D8 59                              POP     CX
 26113                                  
 26114                                  ;;;; 10/17/86 update CLUSNUM in the fastopen cache
 26115                                  NOTFIRSTGROW:
 26116 000049D9 89DA                            MOV     DX,BX
 26117 000049DB 30DB                            XOR     BL,BL
 26118 000049DD E8E304                  	call	FIGREC
 26119                                  GOTDIRREC:
 26120                                  	;mov	cl,[es:bp+4]
 26121 000049E0 268A4E04                        MOV     CL,[ES:BP+DPB.CLUSTER_MASK]
 26122 000049E4 FEC1                            INC     CL
 26123 000049E6 30ED                            XOR     CH,CH
 26124                                  ZERODIR:
 26125 000049E8 51                              PUSH    CX
 26126                                  	;mov	byte [ALLOWED],18h
 26127 000049E9 C606[4B03]18                    MOV     byte [ALLOWED],Allowed_FAIL+Allowed_RETRY
 26128 000049EE B0FF                            MOV     AL,0FFH
 26129 000049F0 E84E10                          call	GETBUFFR
 26130 000049F3 7302                            JNC	short GET_SSIZE
 26131 000049F5 59                              POP     CX
 26132 000049F6 C3                              retn
 26133                                  
 26134                                  GET_SSIZE:
 26135                                  	;mov	cx,[es:bp+2]
 26136 000049F7 268B4E02                        MOV     CX,[ES:BP+DPB.SECTOR_SIZE]
 26137 000049FB 06                              PUSH    ES
 26138 000049FC C43E[E205]                      LES     DI,[CURBUF]
 26139                                  	;or	byte [es:di+5],4
 26140 00004A00 26804D0504                      OR      byte [ES:DI+BUFFINFO.buf_flags],buf_isDIR
 26141 00004A05 57                              PUSH    DI
 26142                                  	;;add	di,16	; MSDOS 3.3
 26143                                  	;add	di,20	; MSDOS 6.0	
 26144 00004A06 83C714                          ADD     DI,BUFINSIZ
 26145 00004A09 31C0                            XOR     AX,AX
 26146 00004A0B D1E9                            SHR     CX,1
 26147 00004A0D F3AB                            REP     STOSW
 26148 00004A0F 7301                            JNC	short EVENZ
 26149 00004A11 AA                              STOSB
 26150                                  EVENZ:
 26151 00004A12 5F                              POP     DI
 26152                                  
 26153                                  	; MSDOS 6.0
 26154 00004A13 26F6450540              	TEST	byte [ES:DI+BUFFINFO.buf_flags],buf_dirty
 26155                                  					;LB. if already dirty		  ;AN000;
 26156 00004A18 7508                            JNZ	short yesdirty7		;LB.  don't increment dirty count ;AN000;
 26157 00004A1A E82A12                          call	INC_DIRTY_COUNT		;LB. 				  ;AN000;
 26158                                          
 26159                                  	;or	byte [es:di+5],40h
 26160 00004A1D 26804D0540              	OR      byte [ES:DI+BUFFINFO.buf_flags],buf_dirty
 26161                                  yesdirty7:
 26162 00004A22 07                              POP	ES
 26163 00004A23 59                              POP	CX
 26164                                  
 26165                                  	; 19/05/2019 - Retro DOS v4.0
 26166                                  
 26167                                  	; MSDOS 3.3
 26168                                  	;INC	DX
 26169                                  
 26170                                  	; MSDOS 6.0
 26171 00004A24 83C201                  	add	dx,1
 26172 00004A27 8316[0706]00            	adc	word [HIGH_SECTOR],0
 26173                                  
 26174 00004A2C E2BA                            LOOP    ZERODIR
 26175                                  
 26176 00004A2E A1[4803]                        MOV     AX,[LASTENT]
 26177 00004A31 40                              INC     AX
 26178 00004A32 F8                              CLC
 26179 00004A33 C3                              retn
 26180                                  
 26181                                  ;--------------------------------------------------------------------------
 26182                                  ;
 26183                                  ; Procedure Name : SETDOTENT
 26184                                  ;
 26185                                  ; set up a . or .. directory entry for a directory.
 26186                                  ;
 26187                                  ;   Inputs:     ES:DI point to the beginning of a directory entry.
 26188                                  ;               AX contains ". " or ".."
 26189                                  ;               DX contains first cluster of entry
 26190                                  ;
 26191                                  ;----------------------------------------------------------------------------
 26192                                  
 26193                                  SETDOTENT:
 26194                                  ;	Fill in name field
 26195 00004A34 AB                              STOSW
 26196 00004A35 B90400                          MOV     CX,4
 26197 00004A38 B82020                          MOV     AX,"  " ; 2020h
 26198 00004A3B F3AB                            REP     STOSW
 26199 00004A3D AA                              STOSB
 26200                                  
 26201                                  ;	Set up attribute
 26202                                  	;mov	al, 10h
 26203 00004A3E B010                            MOV     AL,attr_directory
 26204 00004A40 AA                              STOSB
 26205                                  
 26206                                  ;	Initialize time and date of creation
 26207 00004A41 83C70A                          ADD     DI,10
 26208 00004A44 8B36[9E05]                      MOV     SI,[THISSFT]
 26209                                  	;mov	ax,[si+0Dh]
 26210 00004A48 8B440D                          MOV     AX,[SI+SF_ENTRY.sf_time]
 26211 00004A4B AB                              STOSW
 26212                                  	;mov	ax,[si+0Fh]
 26213 00004A4C 8B440F                          MOV     AX,[SI+SF_ENTRY.sf_date]
 26214 00004A4F AB                      	STOSW
 26215                                  
 26216                                  ;	Set up first cluster field
 26217 00004A50 89D0                            MOV     AX,DX
 26218 00004A52 AB                              STOSW
 26219                                  
 26220                                  ;	0 file size
 26221 00004A53 31C0                            XOR     AX,AX
 26222 00004A55 AB                              STOSW
 26223 00004A56 AB                              STOSW
 26224 00004A57 C3                              retn
 26225                                  
 26226                                  ;Break   <MAKENODE -- CREATE A NEW NODE>
 26227                                  ;---------------------------------------------------------------------------
 26228                                  ;
 26229                                  ; Procedure Name : MakeNode
 26230                                  ;
 26231                                  ; Inputs:
 26232                                  ;       AL - attribute to create
 26233                                  ;       AH = 0 if it is ok to truncate a file already by this name
 26234                                  ;	AH != 0 if truncation not allowed (prexisting file is an error)
 26235                                  ;               (AH ignored on dirs and devices)
 26236                                  ;
 26237                                  ;        NOTE: When making a DIR or volume ID, AH need not be set since
 26238                                  ;               a name already existant is ALWAYS an error in these cases.
 26239                                  ;
 26240                                  ;       [WFP_START] Points to WFP string ("d:/" must be first 3 chars, NUL
 26241                                  ;               terminated)
 26242                                  ;       [CURR_DIR_END] Points to end of Current dir part of string
 26243                                  ;               ( = -1 if current dir not involved, else
 26244                                  ;                Points to first char after last "/" of current dir part)
 26245                                  ;       [THISCDS] Points to CDS being used
 26246                                  ;       [THISSFT] Points to an empty SFT. EXCEPT sf_mode filled in.
 26247                                  ; Function:
 26248                                  ;       Make a new node
 26249                                  ; Outputs:
 26250                                  ;       Sets EXTERR_LOCUS = errLOC_Disk or errLOC_Unk via GetPathNoset
 26251                                  ;       CARRY SET IF ERROR
 26252                                  ;          AX = 1 A node by this name exists and is a directory
 26253                                  ;          AX = 2 A new node could not be created
 26254                                  ;          AX = 3 A node by this name exists and is a disk file
 26255                                  ;               (AH was NZ on input)
 26256                                  ;          AX = 4 Bad Path
 26257                                  ;               SI return from GetPath maintained
 26258                                  ;          AX = 5 Attribute mismatch
 26259                                  ;          AX = 6 Sharing Violation
 26260                                  ;               (INT 24 generated ALWAYS since create is always compat mode
 26261                                  ;          AX = 7 file not found for Extended Open (not exists and fails)
 26262                                  ;       ELSE
 26263                                  ;          AX = 0 Disk Node
 26264                                  ;          AX = 3 Device Node (error in some cases)
 26265                                  ;          [DIRSTART],[DIRSEC],[CLUSFAC],[CLUSNUM] set to directory
 26266                                  ;               containing new node.
 26267                                  ;          [CURBUF+2]:BX Points to entry
 26268                                  ;          [CURBUF+2]:SI Points to entry.dir_first
 26269                                  ;          [THISSFT] is filled in
 26270                                  ;               sf_mode = unchanged.
 26271                                  ;          Attribute byte in entry is input AL
 26272                                  ; DS preserved, others destroyed
 26273                                  ;
 26274                                  ;-------------------------------------------------------------------------
 26275                                  
 26276                                  ; 19/05/2019 - Retro DOS v4.0
 26277                                  ; DOSCODE:8925h (MSDOS 6.21, MSDOS.SYS)
 26278                                  
 26279                                  ; 22/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 26280                                  ; DOSCODE:88EAh (MSDOS 5.0, MSDOS.SYS)
 26281                                  
 26282                                  MakeNode:
 26283                                  	;mov	word [CREATING],0E5FFh
 26284 00004A58 C706[7E05]FFE5          	MOV	WORD [CREATING],DIRFREE*256 + 0FFh ; Creating, not DEL *.*
 26285 00004A5E 50                              PUSH    AX              ; Save AH value
 26286 00004A5F C606[4C03]00            	MOV	byte [NoSetDir],0
 26287 00004A64 A2[6D05]                	MOV	[SATTRIB],AL
 26288 00004A67 E866F5                  	call	GetPathNoSet
 26289 00004A6A 88CA                            MOV     DL,CL           ; Save CL info
 26290 00004A6C 89C1                            MOV     CX,AX           ; Device ID to CH
 26291 00004A6E 58                              POP     AX              ; Get back AH
 26292 00004A6F 732E                            JNC	short make_exists ; File existed
 26293 00004A71 7505                            JNZ	short make_err_4 ; Path bad
 26294 00004A73 80FA80                          CMP     DL,80h          ; Check "CL" return from GETPATH
 26295 00004A76 7406                            JZ	short make_type	; Name simply not found, and no metas
 26296                                  make_err_4:
 26297 00004A78 B004                            MOV     AL,4            ; case 1 bad path
 26298                                  make_err_ret:
 26299 00004A7A 30E4                            XOR     AH,AH
 26300 00004A7C F9                              STC
 26301                                  ;make_retn:	; 22/11/2022
 26302 00004A7D C3                              retn
 26303                                  
 26304                                          ;entry	RENAME_MAKE     ; Used by DOS_RENAME to "copy" a node
 26305                                  RENAME_MAKE:
 26306                                  make_type:
 26307                                  ;Extended Open hooks
 26308                                  	; MSDOS 6.0
 26309                                  	;TESTB	EXTOPEN_ON,EXT_OPEN_ON	;FT. from extended open		;AN000;
 26310 00004A7E F606[F605]01            	test	byte [EXTOPEN_ON],EXT_OPEN_ON ; 1
 26311 00004A83 7411                    	JZ	short make_type2	;FT. no				;AN000;
 26312 00004A85 800E[F605]04            	OR	byte [EXTOPEN_ON],EXT_FILE_NOT_EXISTS ; 4
 26313                                  					;FT. set for extended open ;AN000;
 26314                                  	;TESTB	EXTOPEN_FLAG,0F0H	;FT. not exists and fails	;AN000;
 26315 00004A8A F606[F405]F0            	test	byte [EXTOPEN_FLAG],0F0h
 26316 00004A8F 7505                    	JNZ	short make_type2	;FT. no				;AN000;
 26317 00004A91 F9                      	STC				;FT. set carry			;AN000;
 26318 00004A92 B80700                  	MOV    AX,7			;FT. file not found		;AN000;
 26319                                  	; 22/11/2022
 26320                                  make_retn:
 26321                                  	;return
 26322 00004A95 C3                      	retn				;FT.				;AN000;
 26323                                  
 26324                                  ;	Extended Open hooks
 26325                                  
 26326                                  make_type2:
 26327 00004A96 C43E[9E05]                      LES     DI,[THISSFT]
 26328 00004A9A 31C0                            XOR     AX,AX           ; nothing exists Disk Node
 26329 00004A9C F9                              STC                     ; Not found
 26330 00004A9D EB5A                            JMP     short make_new
 26331                                  
 26332                                  ; The node exists. It may be either a device, directory or file:
 26333                                  ;   Zero set => directory
 26334                                  ;   High bit of CH on => device
 26335                                  ;   else => file
 26336                                  
 26337                                  make_exists:
 26338 00004A9F 7448                            JZ	short make_exists_dir
 26339 00004AA1 B003                            MOV     AL,3            ; file exists type 3  (error or device node)
 26340                                  	;test	byte [ATTRIB],18h
 26341 00004AA3 F606[6B05]18            	TEST	byte [ATTRIB],attr_volume_id+attr_directory
 26342 00004AA8 753B                            JNZ	short make_err_ret_5
 26343                                  				; Cannot already exist as Disk or Device Node
 26344                                                                  ;       if making DIR or Volume ID
 26345 00004AAA 08ED                            OR      CH,CH
 26346 00004AAC 781A                            JS	short make_share ; No further checks on attributes if device
 26347 00004AAE 08E4                            OR      AH,AH
 26348 00004AB0 75C8                            JNZ	short make_err_ret ; truncating NOT OK (AL = 3)
 26349 00004AB2 51                              PUSH    CX              ; Save device ID
 26350 00004AB3 8E06[E405]                      MOV     ES,[CURBUF+2]
 26351                                  	;mov	ch,[es:bx+0Bh]
 26352 00004AB7 268A6F0B                        MOV     CH,[ES:BX+dir_entry.dir_attr] ; Get file attributes
 26353                                  	;test	ch,1
 26354 00004ABB F6C501                  	test	CH,attr_read_only
 26355 00004ABE 7524                            JNZ	short make_err_ret_5P ; Cannot create on read only files
 26356 00004AC0 E8B8F7                  	call	MatchAttributes
 26357 00004AC3 59                              POP     CX              ; Devid back in CH
 26358 00004AC4 751F                            JNZ	short make_err_ret_5 ; Attributes not ok
 26359 00004AC6 30C0                            XOR     AL,AL           ; AL = 0, Disk Node
 26360                                  make_share:
 26361 00004AC8 30E4                            XOR     AH,AH
 26362 00004ACA 50                              PUSH    AX              ; Save Disk or Device node
 26363 00004ACB 51                              PUSH    CX              ; Save Device ID
 26364 00004ACC 88EC                            MOV     AH,CH           ; Device ID to AH
 26365 00004ACE E84601                          CALL    DOOPEN          ; Fill in SFT for share check
 26366 00004AD1 C43E[9E05]                      LES     DI,[THISSFT]
 26367 00004AD5 56                      	push	si
 26368 00004AD6 53                      	push	bx		; Save CURBUF pointers
 26369 00004AD7 E89C29                  	call	ShareEnter
 26370 00004ADA 735A                            jnc	short MakeEndShare
 26371                                  
 26372                                  ; User failed request.
 26373 00004ADC 5B                      	pop	bx
 26374 00004ADD 5E                      	pop	si
 26375 00004ADE 59                      	pop	cx
 26376 00004ADF 58                      	pop	ax
 26377                                  
 26378                                  Make_Share_ret:
 26379 00004AE0 B006                            MOV     AL,6
 26380 00004AE2 EB96                            JMP	short make_err_ret
 26381                                  
 26382                                  make_err_ret_5P:
 26383 00004AE4 59                              POP     CX              ; Get back device ID
 26384                                  make_err_ret_5:
 26385 00004AE5 B005                            MOV     AL,5            ; Attribute mismatch
 26386                                          ; 22/11/2022
 26387 00004AE7 EB91                    	JMP     short make_err_ret
 26388                                  
 26389                                  make_exists_dir:
 26390 00004AE9 B001                            MOV     AL,1            ; exists as directory, always an error
 26391                                  	; 22/11/2022
 26392 00004AEB EB8D                    	JMP     short make_err_ret
 26393                                  
 26394                                  make_save:
 26395 00004AED 50                              PUSH    AX              ; Save whether Disk or File
 26396 00004AEE 89C8                            MOV     AX,CX           ; Device ID to AH
 26397 00004AF0 E87400                          CALL    NEWENTRY
 26398 00004AF3 58                              POP     AX              ; 0 if Disk, 3 if File
 26399 00004AF4 739F                            jnc	short make_retn
 26400 00004AF6 B002                            MOV     AL,2            ; create failed case 2
 26401                                  make_save_retn:
 26402 00004AF8 C3                              retn
 26403                                  
 26404                                  make_new:
 26405 00004AF9 E8F1FF                          call    make_save
 26406 00004AFC 72FA                            jc	short make_save_retn	; case 2 fail
 26407                                  	;test	byte [ATTRIB],10h
 26408 00004AFE F606[6B05]10            	test	BYTE [ATTRIB],attr_directory
 26409 00004B03 75F3                            jnz	short make_save_retn	; Don't "open" directories,
 26410                                  					; so don't tell the sharer about them
 26411 00004B05 50                      	push	ax
 26412 00004B06 53                      	push	bx
 26413 00004B07 56                      	push	si		
 26414 00004B08 E86B29                          call	ShareEnter
 26415 00004B0B 5E                      	pop	si
 26416 00004B0C 5B                      	pop	bx
 26417 00004B0D 58                      	pop	ax
 26418 00004B0E 73E8                    	jnc	short make_save_retn
 26419                                  
 26420                                  ; We get here by having the user FAIL a share problem. Typically a failure of
 26421                                  ; this nature is an out-of-space or an internal error. We clean up as best as
 26422                                  ; possible: delete the newly created directory entry and return share_error.
 26423                                  
 26424 00004B10 50                              PUSH    AX
 26425 00004B11 C43E[E205]                      LES     DI,[CURBUF]
 26426                                  	;mov	byte [es:bx],0E5h
 26427 00004B15 26C607E5                	MOV	BYTE [ES:BX],DIRFREE	; nuke newly created entry.
 26428                                  	
 26429                                  	; MSDOS 6.0
 26430                                  	;test	byte [es:di+5],40h
 26431 00004B19 26F6450540              	TEST	byte [ES:DI+BUFFINFO.buf_flags],buf_dirty  
 26432                                  					;LB. if already dirty		  ;AN000;
 26433 00004B1E 7508                            JNZ	short yesdirty8		;LB.  don't increment dirty count ;AN000;
 26434                                  	; 22/11/2022
 26435 00004B20 E82411                  	call	INC_DIRTY_COUNT		;LB.				  ;AN000;
 26436                                  	;or	byte [es:di+5],40h
 26437 00004B23 26804D0540                      OR      byte [ES:DI+BUFFINFO.buf_flags],buf_dirty ; flag buffer as dirty
 26438                                  yesdirty8:
 26439 00004B28 C42E[8A05]                      LES     BP,[THISDPB]
 26440                                  	; 15/12/2022
 26441 00004B2C 268A4600                        mov	al,[ES:BP]
 26442                                  	; 22/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 26443                                  	;;mov	al,[es:bp+0]
 26444                                  	;MOV	AL,[ES:BP+DPB.DRIVE]	; get drive for flush
 26445 00004B30 E80C10                          call	FLUSHBUF		; write out buffer.
 26446 00004B33 58                              POP     AX
 26447 00004B34 EBAA                            jmp	short Make_Share_ret
 26448                                  
 26449                                  ; We have found an existing file. We have also entered it into the share set.
 26450                                  ; At this point we need to call newentry to correctly address the problem of
 26451                                  ; getting rid of old data (create an existing file) or creating a new
 26452                                  ; directory entry (create a new file). Unfortunately, this operation may
 26453                                  ; result in an INT 24 that the user doesn't return from, thus locking the file
 26454                                  ; irretrievably into the share set. The correct solution is for us to LEAVE
 26455                                  ; the share set now, do the operation and then reassert the share access.
 26456                                  ;
 26457                                  ; We are allowed to do this! There is no window! After all, we are in
 26458                                  ; critDisk here and for someone else to get in, they must enter critDisk also.
 26459                                  
 26460                                  	; 22/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 26461                                  	; DOSCODE:89C8h (MSDOS 5.0, MSDOS.SYS)
 26462                                  
 26463                                  MakeEndShare:
 26464 00004B36 C43E[9E05]                      LES     DI,[THISSFT]		; grab SFT
 26465 00004B3A 31C0                            XOR     AX,AX
 26466 00004B3C E819C8                  	call	ECritSFT
 26467 00004B3F 268705                  	xchg	AX,[ES:DI]
 26468                                  	;XCHG	AX,[ES:DI+SF_ENTRY.sf_ref_count]
 26469 00004B42 50                      	push	ax
 26470 00004B43 57                      	push	di
 26471 00004B44 06                      	push	es
 26472 00004B45 9C                              PUSHF
 26473 00004B46 E82829                          call	ShareEnd                ; remove sharing
 26474 00004B49 9D                              POPF
 26475 00004B4A 07                      	pop	es
 26476 00004B4B 5F                      	pop	di
 26477 00004B4C 268F05                          pop	word [ES:DI]	
 26478                                  	;pop	word [ES:DI+SF_ENTRY.sf_ref_count]
 26479 00004B4F E821C8                  	call	LCritSFT
 26480                                  	; 22/11/2022
 26481                                  	; DOSCODE:89E4h (MSDOS 5.0, MSDOS.SYS)
 26482 00004B52 5B                      	pop	bx
 26483 00004B53 5E                      	pop	si
 26484 00004B54 59                      	pop	cx
 26485 00004B55 58                      	pop	ax
 26486 00004B56 E894FF                          CALL    make_save
 26487                                  
 26488                                  ; If the user failed, we do not reenter into the sharing set.
 26489                                  
 26490 00004B59 729D                            jc	short make_save_retn	; bye if error
 26491 00004B5B 50                      	push	ax
 26492 00004B5C 53                      	push	bx
 26493 00004B5D 56                      	push	si
 26494 00004B5E 9C                              PUSHF
 26495 00004B5F E81429                          call	ShareEnter
 26496 00004B62 9D                              POPF
 26497 00004B63 5E                      	pop	si
 26498 00004B64 5B                      	pop	bx
 26499 00004B65 58                      	pop	ax
 26500                                  
 26501                                  ; If Share_check fails, then we have an internal ERROR!!!!!
 26502                                  
 26503                                  makeendshare_retn:
 26504 00004B66 C3                              retn
 26505                                  
 26506                                  ;---------------------------------------------------------------------------
 26507                                  ;
 26508                                  ; Procedure Name : NEWENTRY
 26509                                  ;
 26510                                  ; Inputs:
 26511                                  ;       [THISSFT] set
 26512                                  ;       [THISDPB] set
 26513                                  ;       [LASTENT] current last valid entry number in directory if no free
 26514                                  ;               entries
 26515                                  ;       [VOLID] set if a volume ID was found during search
 26516                                  ;	Attrib Contains attributes for new file
 26517                                  ;       [DIRSTART] Points to first cluster of dir (0 means root)
 26518                                  ;       CARRY FLAG INDICATES STATUS OF SEARCH FOR FILE
 26519                                  ;               NC means file existed (device)
 26520                                  ;               C  means file did not exist
 26521                                  ;       AH = Device ID byte
 26522                                  ;       If FILE
 26523                                  ;           [CURBUF+2]:BX points to start of directory entry
 26524                                  ;           [CURBUF+2]:SI points to dir_first of directory entry
 26525                                  ;       If device
 26526                                  ;           DS:BX points to start of "fake" directory entry
 26527                                  ;           DS:SI points to dir_first of "fake" directory entry
 26528                                  ;               (has DWORD pointer to device header)
 26529                                  ; Function:
 26530                                  ;       Make a new directory entry
 26531                                  ;       If an old one existed it is truncated first
 26532                                  ; Outputs:
 26533                                  ;       Carry set if error
 26534                                  ;               Can't grow dir, atts didn't match, attempt to make 2nd
 26535                                  ;               vol ID, user FAILed to I 24
 26536                                  ;       else
 26537                                  ;               outputs of DOOPEN
 26538                                  ; DS, BX, SI preserved (meaning on SI BX, not value), others destroyed
 26539                                  ;
 26540                                  ;----------------------------------------------------------------------------
 26541                                  
 26542                                  	; 22/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 26543                                  	; DOSCODE:89F9h (MSDOS 5.0, MSDOS.SYS)
 26544                                  
 26545                                  NEWENTRY:
 26546 00004B67 C42E[8A05]                      LES     BP,[THISDPB]
 26547 00004B6B 7316                            JNC	short EXISTENT	
 26548 00004B6D 803E[4A03]00                    CMP     byte [FAILERR],0
 26549 00004B72 F9                              STC
 26550 00004B73 75F1                            jnz	short makeendshare_retn	; User FAILed, node might exist
 26551 00004B75 E800FE                          CALL    BUILDDIR        ; Try to build dir
 26552 00004B78 72EC                            jc	short makeendshare_retn	; Failed
 26553 00004B7A E8BEF3                          call	GETENT          ; Point at that free entry
 26554 00004B7D 72E7                            jc	short makeendshare_retn	; Failed
 26555 00004B7F EB0E                            JMP     SHORT FREESPOT
 26556                                  
 26557                                  ERRRET3:
 26558 00004B81 F9                              STC
 26559                                  newentry_retn:
 26560 00004B82 C3                              retn
 26561                                  
 26562                                  EXISTENT:
 26563 00004B83 08E4                            OR      AH,AH           ; Check if file is I/O device
 26564 00004B85 7903                            JNS	short NOT_DEV1
 26565 00004B87 E98D00                          JMP     DOOPEN          ; If so, proceed with open
 26566                                  
 26567                                  NOT_DEV1:
 26568 00004B8A E82C01                          call	FREEENT		; Free cluster chain
 26569 00004B8D 72F3                            jc	short newentry_retn ; Failed
 26570                                  FREESPOT:
 26571                                  	;test	byte [ATTRIB],8
 26572 00004B8F F606[6B05]08            	test	BYTE [ATTRIB],attr_volume_id
 26573 00004B94 7407                            JZ	short NOTVOLID
 26574 00004B96 803E[7B05]00                    CMP     BYTE [VOLID],0
 26575 00004B9B 75E4                            JNZ	short ERRRET3	; Can't create a second volume ID
 26576                                  NOTVOLID:
 26577 00004B9D 8E06[E405]                      MOV     ES,[CURBUF+2]
 26578 00004BA1 89DF                            MOV     DI,BX
 26579                                  
 26580 00004BA3 BE[4B05]                        MOV     SI,NAME1
 26581                                  
 26582 00004BA6 B90500                          MOV     CX,5
 26583 00004BA9 F3A5                            REP     MOVSW
 26584 00004BAB A4                              MOVSB                   ; Move name into dir entry
 26585 00004BAC A0[6B05]                	MOV	AL,[ATTRIB]
 26586 00004BAF AA                      	STOSB                   ; Attributes
 26587                                  
 26588                                  ;; File Tagging for Create DOS 4.00
 26589 00004BB0 B105                            MOV     CL,5            ;FT. assume normal FBUGBUG	;AN000;
 26590                                  ;; File Tagging for Create DOS 4.00
 26591                                  
 26592 00004BB2 31C0                            XOR     AX,AX
 26593 00004BB4 F3AB                            REP     STOSW           ; Zero pad
 26594 00004BB6 E856BF                          call	DATE16
 26595 00004BB9 92                              XCHG    AX,DX
 26596 00004BBA AB                              STOSW                   ; dir_time
 26597 00004BBB 92                              XCHG    AX,DX
 26598 00004BBC AB                              STOSW                   ; dir_date
 26599 00004BBD 31C0                            XOR     AX,AX
 26600 00004BBF 57                              PUSH    DI              ; Correct SI input value
 26601                                  				; 	(recomputed for new buffer)
 26602 00004BC0 AB                              STOSW                   ; Zero dir_first and size
 26603 00004BC1 AB                              STOSW
 26604 00004BC2 AB                              STOSW
 26605                                  updnxt:
 26606 00004BC3 8B36[E205]              	MOV	SI,[CURBUF]
 26607                                  
 26608                                  	; 19/05/2019 - Retro DOS v4.0
 26609                                  
 26610                                  	; MSDOS 6.0
 26611 00004BC7 26F6440540              	TEST	byte [ES:SI+BUFFINFO.buf_flags],buf_dirty
 26612                                  				;LB. if already dirty		  ;AN000;
 26613 00004BCC 7508                            JNZ	short yesdirty9	;LB.  don't increment dirty count ;AN000;
 26614 00004BCE E87610                          call	INC_DIRTY_COUNT	;LB.				  ;AN000;
 26615                                          
 26616                                  	;or	byte [es:si+5],40h
 26617 00004BD1 26804C0540              	OR      byte [ES:SI+BUFFINFO.buf_flags],buf_dirty
 26618                                  yesdirty9:
 26619 00004BD6 C42E[8A05]                      LES     BP,[THISDPB]
 26620                                  	; 15/12/2022
 26621 00004BDA 268A4600                	MOV	AL,[ES:BP]
 26622                                  	; 22/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 26623                                  	;;mov	al,[es:bp+0]
 26624                                  	;MOV	AL,[ES:BP+DPB.DRIVE] ; Sets AH value again (in AL)
 26625 00004BDE 50                              PUSH    AX
 26626 00004BDF 53                              PUSH    BX
 26627                                  
 26628                                  ; If we have a file, we need to increment the open ref. count so that
 26629                                  ; we have some protection against invalid media changes if an Int 24
 26630                                  ; error occurs.
 26631                                  ; Do nothing for a device.
 26632                                  
 26633 00004BE0 06                      	push	es
 26634 00004BE1 57                      	push	di
 26635 00004BE2 C43E[9E05]                      LES     DI,[THISSFT]
 26636                                  	;test	word [es:di+5],80h
 26637                                  	;TEST	word [ES:DI+SF_ENTRY.sf_flags],devid_device
 26638 00004BE6 26F6450580              	test	byte [ES:DI+SF_ENTRY.sf_flags],devid_device
 26639 00004BEB 751A                            jnz	short GotADevice
 26640 00004BED 1E                      	push	ds
 26641 00004BEE 53                      	push	bx
 26642 00004BEF C51E[8A05]                      LDS     BX,[THISDPB]
 26643                                  	;mov	[es:di+7],bx
 26644 00004BF3 26895D07                        MOV     [ES:DI+SF_ENTRY.sf_devptr],BX
 26645 00004BF7 8CDB                            MOV     BX,DS
 26646                                  	;mov	[es:di+9],bx
 26647 00004BF9 26895D09                        MOV     [ES:DI+SF_ENTRY.sf_devptr+2],BX
 26648 00004BFD 5B                      	pop	bx
 26649 00004BFE 1F                      	pop	ds ; need to use DS for segment later on
 26650 00004BFF E8A1FA                  	call	DEV_OPEN_SFT    ; increment ref. count
 26651 00004C02 C606[A20A]01                    mov	byte [VIRTUAL_OPEN],1; set flag
 26652                                  GotADevice:
 26653 00004C07 5F                      	pop	di
 26654 00004C08 07                      	pop	es
 26655                                  
 26656 00004C09 E8330F                          call	FLUSHBUF
 26657 00004C0C E8F900                          Call    CHECK_VIRT_OPEN ; decrement ref. count            ;AN000;
 26658 00004C0F 5B                              POP     BX
 26659 00004C10 58                              POP     AX
 26660 00004C11 5E                              POP     SI              ; Get SI input back
 26661 00004C12 88C4                            MOV     AH,AL           ; Get I/O driver number back
 26662 00004C14 7301                    	jnc	short DOOPEN    ; Failed
 26663 00004C16 C3                      	retn
 26664                                  	
 26665                                  ;NOTE FALL THROUGH
 26666                                  
 26667                                  ; DOSCODE:8AE4h (MSDOS 6.21, MSDOS.SYS)
 26668                                  
 26669                                  ; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 26670                                  ; DOSCODE:8AA9h (MSDOS 5.0, MSDOS.SYS)
 26671                                  
 26672                                  ; DOOPEN
 26673                                  ;----------------------------------------------------------------------------
 26674                                  ;
 26675                                  ; Inputs:
 26676                                  ;       [THISDPB] points to DPB if file
 26677                                  ;       [THISSFT] points to SFT being used
 26678                                  ;       AH = Device ID byte
 26679                                  ;       If FILE
 26680                                  ;           [CURBUF+2]:BX points to start of directory entry
 26681                                  ;           [CURBUF+2]:SI points to dir_first of directory entry
 26682                                  ;       If device
 26683                                  ;           DS:BX points to start of "fake" directory entry
 26684                                  ;           DS:SI points to dir_first of "fake" directory entry
 26685                                  ;               (has DWORD pointer to device header)
 26686                                  ; Function:
 26687                                  ;       Fill in SFT from dir entry
 26688                                  ; Outputs:
 26689                                  ;       CARRY CLEAR
 26690                                  ;       sf_ref_count and sf_mode fields not altered
 26691                                  ;       sf_flags high byte = 0
 26692                                  ;       sf_flags low byte = AH except
 26693                                  ;       sf_flags Bit 6 set (not dirty or not EOF)
 26694                                  ;       sf_attr sf_date sf_time sf_name set from entry
 26695                                  ;       sf_position = 0
 26696                                  ;       If device
 26697                                  ;           sf_devptr = dword at dir_first (pointer to device header)
 26698                                  ;           sf_size = 0
 26699                                  ;       If file
 26700                                  ;           sf_firclus sf_size set from entry
 26701                                  ;           sf_devptr = [THISDPB]
 26702                                  ;           sf_cluspos = 0
 26703                                  ;           sf_lstclus = sf_firclus
 26704                                  ;           sf_dirsec sf_dirpos set
 26705                                  ; DS,SI,BX preserved, others destroyed
 26706                                  ;
 26707                                  ;----------------------------------------------------------------------------
 26708                                  
 26709                                  	;entry	DOOPEN
 26710                                  DOOPEN:
 26711                                  ;	Generate and store attribute
 26712                                  
 26713 00004C17 88E6                            MOV     DH,AH           ; AH to different place
 26714 00004C19 C43E[9E05]                      LES     DI,[THISSFT]
 26715                                  	;add	di,4
 26716 00004C1D 83C704                          ADD     DI,SF_ENTRY.sf_attr ; Skip ref_count and mode fields
 26717 00004C20 30C0                            XOR     AL,AL           ; Assume it's a device, devices have an
 26718                                                                  ;   attribute of 0 (for R/O testing etc).
 26719 00004C22 08F6                            OR      DH,DH           ; See if our assumption good.
 26720 00004C24 7807                            JS	short DEV_SFT1	; If device DS=DOSGROUP
 26721 00004C26 8E1E[E405]                      MOV     DS,[CURBUF+2]
 26722                                  	;mov	al,[BX+0Bh]
 26723 00004C2A 8A470B                          MOV     AL,[BX+dir_entry.dir_attr]
 26724                                  				; If file, get attrib from dir entry
 26725                                  DEV_SFT1:
 26726 00004C2D AA                              STOSB                   ; sf_attr, ES:DI -> sf_flags
 26727                                  
 26728                                  ;	Generate and store flags word
 26729                                  
 26730 00004C2E 31C0                            XOR     AX,AX
 26731 00004C30 88F0                            MOV     AL,DH
 26732                                  	;or	al,40h
 26733 00004C32 0C40                            OR      AL,devid_file_clean
 26734 00004C34 AB                              STOSW                   ; sf_flags, ES:DI -> sf_devptr
 26735                                  
 26736                                  ;	Generate and store device pointer
 26737                                  
 26738 00004C35 1E                              PUSH    DS
 26739                                  	;lds	ax,[bx+1Ah]
 26740 00004C36 C5471A                          LDS     AX,[BX+dir_entry.dir_first] ; Assume device
 26741 00004C39 08F6                            OR      DH,DH
 26742 00004C3B 7805                            JS	short DEV_SFT2
 26743                                  
 26744                                  ;hkn; SS override
 26745 00004C3D 36C506[8A05]                    LDS     AX,[SS:THISDPB]	; Was file
 26746                                  DEV_SFT2:
 26747 00004C42 AB                              STOSW 			; store offset
 26748 00004C43 8CD8                            MOV     AX,DS
 26749 00004C45 1F                              POP     DS
 26750 00004C46 AB                      	STOSW			; store segment
 26751                                  				; ES:DI -> sf_firclus
 26752                                  
 26753                                  ;	Generate pointer to, generate and store first cluster 
 26754                                  ;	(irrelevant for devices)
 26755                                  
 26756 00004C47 56                              PUSH    SI              ; Save pointer to dir_first
 26757 00004C48 A5                              MOVSW                   ; dir_first -> sf_firclus
 26758                                                                  ; DS:SI -> dir_size_l, ES:DI -> sf_time
 26759                                  
 26760                                  ;	Copy time/date of last modification
 26761                                  
 26762                                  	;sub	si,6
 26763 00004C49 83EE06                          SUB     SI,dir_entry.dir_size_l - dir_entry.dir_time 
 26764                                  				; DS:SI->dir_time
 26765 00004C4C A5                              MOVSW                   ; dir_time -> sf_time
 26766                                                                  ; DS:SI -> dir_date, ES:DI -> sf_date
 26767 00004C4D A5                              MOVSW                   ; dir_date -> sf_date
 26768                                                                  ; DS:SI -> dir_first, ES:DI -> sf_size
 26769                                  
 26770                                  ;	Generate and store file size (0 for devices)
 26771                                  
 26772 00004C4E AD                              LODSW                   ; skip dir_first, DS:SI -> dir_size_l
 26773 00004C4F AD                              LODSW                   ; dir_size_l in AX , DS:SI -> dir_size_h
 26774 00004C50 89C1                            MOV     CX,AX           ; dir_size_l in CX
 26775 00004C52 AD                              LODSW                   ; dir_size_h (size AX:CX), DS:SI -> ????
 26776 00004C53 08F6                            OR      DH,DH
 26777 00004C55 7904                            JNS	short FILE_SFT1
 26778 00004C57 31C0                            XOR     AX,AX
 26779 00004C59 89C1                            MOV     CX,AX           ; Devices are open ended
 26780                                  FILE_SFT1:
 26781 00004C5B 91                              XCHG    AX,CX
 26782 00004C5C AB                              STOSW                   ; Low word of sf_size
 26783 00004C5D 91                              XCHG    AX,CX
 26784 00004C5E AB                              STOSW                   ; High word of sf_size
 26785                                                                  ; ES:DI -> sf_position
 26786                                  ; Initialize position to 0
 26787                                  
 26788 00004C5F 31C0                            XOR     AX,AX
 26789 00004C61 AB                              STOSW
 26790 00004C62 AB                              STOSW                   ; sf_position
 26791                                                                  ; ES:DI -> sf_cluspos
 26792                                  
 26793                                  ; Generate cluster optimizations for files
 26794                                  
 26795 00004C63 08F6                            OR      DH,DH
 26796 00004C65 7843                            JS	short DEV_SFT3
 26797 00004C67 AB                              STOSW                   ; sf_cluspos ; 19h
 26798                                  	;mov	ax,[bx+1Ah]
 26799 00004C68 8B471A                          MOV     AX,[BX+dir_entry.dir_first]
 26800                                  	; 19/05/2019
 26801                                  	; MSDOS 3.3
 26802                                  	;STOSW 			; sf_lstclus ; 1Bh
 26803                                  	; MSDOS 6.0
 26804 00004C6B 57                              PUSH	DI              ;AN004; save dirsec offset
 26805                                  	;sub	di,1Bh
 26806 00004C6C 83EF1B                          SUB	DI,SF_ENTRY.sf_dirsec	;AN004; es:di -> SFT
 26807                                  	;mov	[es:di+35h],ax
 26808 00004C6F 26894535                        MOV	[ES:DI+SF_ENTRY.sf_lstclus],AX	;AN004; save it
 26809 00004C73 5F                              POP	DI              ;AN004; restore dirsec offset
 26810                                  
 26811                                  ; DOS 3.3  FastOpen  6/13/86
 26812                                  
 26813 00004C74 1E                      	PUSH	DS
 26814                                  
 26815                                  ;hkn; SS is DOSDATA
 26816 00004C75 16                      	push	ss
 26817 00004C76 1F                      	pop	ds
 26818                                  	;test	byte [FastOpenFlg],4
 26819 00004C77 F606[3A0D]04            	TEST	byte [FastOpenFlg],Special_Fill_Set
 26820 00004C7C 7411                    	JZ	short Not_FastOpen
 26821                                  
 26822                                  ;hkn; FastOpen_Ext_Info is in DOSDATA
 26823 00004C7E BE[3B0D]                        MOV     SI,FastOpen_Ext_Info
 26824                                  
 26825                                  	;mov	ax,[si+1]
 26826 00004C81 8B4401                          MOV     AX,[SI+FEI.dirsec]
 26827 00004C84 AB                              STOSW                   ; sf_dirsec
 26828                                  	; MSDOS 6.0
 26829                                  	;mov	ax,[si+3]
 26830 00004C85 8B4403                          MOV	AX,[SI+FEI.dirsec+2]
 26831                                  				;;; changed for >32mb
 26832 00004C88 AB                              STOSW                   ; sf_dirsec
 26833                                  	; 19/08//2018
 26834 00004C89 8A04                    	mov	al,[SI]
 26835                                          ;MOV	AL,[SI+FEI.dirpos] ; mov al,[SI+0]
 26836 00004C8B AA                              STOSB                   ; sf_dirpos
 26837 00004C8C 1F                              POP	DS
 26838 00004C8D EB19                            JMP     short Next_Name
 26839                                  
 26840                                  ; DOS 3.3  FastOpen  6/13/86
 26841                                  
 26842                                  Not_FastOpen:
 26843                                          ;POP     DS		; normal path
 26844                                  
 26845                                  ;hkn; SS override
 26846                                  	;MOV	SI,[SS:CURBUF]	; DS:SI->buffer header
 26847                                  	; 16/12/2022
 26848                                  	; 28/07/2019
 26849 00004C8F 8B36[E205]              	mov	si,[CURBUF]
 26850 00004C93 1F                      	pop	ds
 26851                                  	; 07/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 26852                                  	;pop	ds
 26853                                  	;mov	si,[ss:CURBUF]
 26854                                  	
 26855                                  	;mov	ax,[si+6]
 26856 00004C94 8B4406                          MOV     AX,[SI+BUFFINFO.buf_sector]     ;F.C. >32mb ;AN000;
 26857 00004C97 AB                              STOSW                   ; sf_dirsec     ;F.C. >32mb ;AN000;
 26858                                  	; 19/05/2019        
 26859                                  	; MSDOS 6.0
 26860                                  	;mov	ax,[si+8]
 26861 00004C98 8B4408                  	MOV	AX,[SI+BUFFINFO.buf_sector+2]	;F.C. >32mb ;AN000;
 26862 00004C9B AB                              STOSW                   ; sf_dirsec     ;F.C. >32mb ;AN000;
 26863                                          
 26864 00004C9C 89D8                    	MOV     AX,BX
 26865                                  	;;add	si,16	; MSDOS 3.3	
 26866                                  	;add	si,20	; MSDOS 6.0
 26867 00004C9E 83C614                          ADD     SI,BUFINSIZ     ; DS:SI-> start of data in buffer
 26868 00004CA1 29F0                            SUB     AX,SI           ; AX = BX relative to start of sector
 26869                                          ;mov	cl,32
 26870 00004CA3 B120                    	MOV     CL,dir_entry.size
 26871 00004CA5 F6F1                            DIV     CL
 26872 00004CA7 AA                              STOSB                   ; sf_dirpos
 26873                                  Next_Name:
 26874 00004CA8 EB03                            JMP     SHORT FILE_SFT2
 26875                                  
 26876                                  DEV_SFT3:
 26877                                  	;add	di,7
 26878 00004CAA 83C707                          ADD     DI,SF_ENTRY.sf_name-SF_ENTRY.sf_cluspos
 26879                                  FILE_SFT2:
 26880                                  
 26881                                  ; Copy in the object's name
 26882                                  
 26883 00004CAD 89DE                            MOV     SI,BX           ; DS:SI points to dir_name
 26884 00004CAF B90B00                          MOV     CX,11
 26885 00004CB2 F3A4                            REP     MOVSB           ; sf_name
 26886 00004CB4 5E                              POP     SI              ; recover DS:SI -> dir_first
 26887                                  
 26888                                  ;hkn; SS is DOSDATA
 26889 00004CB5 16                              push	ss
 26890 00004CB6 1F                      	pop	ds
 26891 00004CB7 F8                              CLC
 26892 00004CB8 C3                              retn
 26893                                  
 26894                                  ;---------------------------------------------------------------------------
 26895                                  ;
 26896                                  ; Procedure Name : FREEENT
 26897                                  ;
 26898                                  ; Inputs:
 26899                                  ;       ES:BP -> DPB
 26900                                  ;       [CURBUF] Set
 26901                                  ;       [CURBUF+2]:BX points to directory entry
 26902                                  ;       [CURBUF+2]:SI points to above dir_first
 26903                                  ; Function:
 26904                                  ;       Free the cluster chain for the entry if present
 26905                                  ; Outputs:
 26906                                  ;       Carry set if error (currently user FAILed to I 24)
 26907                                  ;       (NOTE dir_firclus and dir_size_l/h are wrong)
 26908                                  ; DS BX SI ES BP preserved (BX,SI in meaning, not value) others destroyed
 26909                                  ;---------------------------------------------------------------------------
 26910                                  
 26911                                  	; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 26912                                  FREEENT:
 26913 00004CB9 1E                              PUSH    DS
 26914 00004CBA C53E[E205]                      LDS     DI,[CURBUF]
 26915 00004CBE 8B0C                            MOV     CX,[SI]         ; Get pointer to clusters
 26916                                  	; 19/05/2019 - Retro DOS v4.0
 26917                                  	; MSDOS 6.0
 26918 00004CC0 8B5508                  	MOV	DX,[DI+BUFFINFO.buf_sector+2]  ;F.C. >32mb	;AN000;
 26919                                  ;hkn; SS override
 26920 00004CC3 368916[0706]                    MOV	[SS:HIGH_SECTOR],DX		;F.C. >32mb	;AN000;
 26921 00004CC8 8B5506                          MOV     DX,[DI+BUFFINFO.buf_sector]
 26922 00004CCB 1F                              POP     DS
 26923 00004CCC 83F902                  	CMP	CX,2
 26924 00004CCF 7235                            JB	short RET1	; Was 0 length file (or mucked Firclus if CX=1)
 26925                                  	;cmp	cx,[es:bp+0Dh]
 26926 00004CD1 263B4E0D                        CMP     CX,[ES:BP+DPB.MAX_CLUSTER]
 26927 00004CD5 772F                            JA	short RET1	; Treat like zero length file (firclus mucked)
 26928 00004CD7 29FB                            SUB     BX,DI
 26929 00004CD9 53                              PUSH    BX              ; Save offset
 26930 00004CDA FF36[0706]              	PUSH	word [HIGH_SECTOR] ;F.C. >32mb	;AN000;
 26931 00004CDE 52                              PUSH    DX              ; Save sector number
 26932 00004CDF 89CB                            MOV     BX,CX
 26933 00004CE1 E8B702                          call	RELEASE         ; Free any data allocated
 26934 00004CE4 5A                              POP     DX
 26935 00004CE5 8F06[0706]                      POP	word [HIGH_SECTOR] ;F.C. >32mb	;AN000;
 26936 00004CE9 7302                            JNC	short GET_BUF_BACK
 26937 00004CEB 5B                              POP     BX
 26938                                  freeent_retn:
 26939 00004CEC C3                              retn			; Screw up
 26940                                  
 26941                                  GET_BUF_BACK:
 26942                                  	;mov	byte [ALLOWED],18h
 26943 00004CED C606[4B03]18                    MOV     byte [ALLOWED],Allowed_RETRY+Allowed_FAIL
 26944 00004CF2 30C0                            XOR     AL,AL
 26945 00004CF4 E84A0D                  	call	GETBUFFR        ; Get sector back
 26946 00004CF7 5B                              POP     BX              ; Get offset back
 26947 00004CF8 72F2                            jc	short freeent_retn
 26948 00004CFA E86DEA                  	call	SET_BUF_AS_DIR
 26949 00004CFD 031E[E205]                      ADD     BX,[CURBUF]	; Correct it for new buffer
 26950 00004D01 89DE                            MOV     SI,BX
 26951                                  	;add	si,1Ah
 26952 00004D03 83C61A                          ADD     SI,dir_entry.dir_first	; Get corrected SI
 26953                                  RET1:
 26954 00004D06 F8                              CLC
 26955 00004D07 C3                              retn
 26956                                  
 26957                                  ;---------------------------------------------------------------------------
 26958                                  ;
 26959                                  ; Procedure Name : CHECK_VIRT_OPEN
 26960                                  ;
 26961                                  ; CHECK_VIRT_OPEN checks to see if we had performed a "virtual open" (by
 26962                                  ; examining the flag [VIRTUAL_OPEN] to see if it is 1). If we did, then
 26963                                  ; it calls Dev_Close_SFT to decrement the ref. count. It also resets the
 26964                                  ; flag [VIRTUAL_OPEN].
 26965                                  ; No registers affected (including flags).
 26966                                  ; On input, [THISSFT] points to current SFT.
 26967                                  ;
 26968                                  ;---------------------------------------------------------------------------
 26969                                  
 26970                                  CHECK_VIRT_OPEN:
 26971 00004D08 50                      	PUSH    AX
 26972 00004D09 9F                              lahf                    ; preserve flags
 26973 00004D0A 803E[A20A]00                    CMP     byte [VIRTUAL_OPEN],0
 26974 00004D0F 7410                            JZ	short ALL_CLOSED
 26975 00004D11 C606[A20A]00                    mov     byte [VIRTUAL_OPEN],0	; reset flag
 26976 00004D16 06                      	push	es
 26977 00004D17 57                      	push	di
 26978 00004D18 C43E[9E05]                      LES     DI,[THISSFT]
 26979 00004D1C E88CF9                          call	DEV_CLOSE_SFT
 26980 00004D1F 5F                      	pop	di
 26981 00004D20 07                      	pop	es
 26982                                  
 26983                                  ALL_CLOSED:
 26984 00004D21 9E                              sahf                    ; restore flags
 26985 00004D22 58                              POP     AX
 26986 00004D23 C3                              retn
 26987                                  
 26988                                  ;============================================================================
 26989                                  ; ROM.ASM, MSDOS 6.0, 1991
 26990                                  ;============================================================================
 26991                                  ; 29/07/2018 - Retro DOS v3.0
 26992                                  ; 20/05/2019 - Retro DOS v4.0
 26993                                  
 26994                                  ;	TITLE	ROM - Miscellaneous routines
 26995                                  ;	NAME	ROM
 26996                                  
 26997                                  ;**	Misc Low level routines for doing simple FCB computations, Cache
 26998                                  ;       reads and writes, I/O optimization, and FAT allocation/deallocation
 26999                                  ;
 27000                                  ;	SKPCLP
 27001                                  ;	FNDCLUS
 27002                                  ;	BUFSEC
 27003                                  ;	BUFRD
 27004                                  ;	BUFWRT
 27005                                  ;	NEXTSEC
 27006                                  ;	OPTIMIZE
 27007                                  ;	FIGREC
 27008                                  ;	ALLOCATE
 27009                                  ;	RESTFATBYT
 27010                                  ;	RELEASE
 27011                                  ;	RELBLKS
 27012                                  ;	GETEOF
 27013                                  ;
 27014                                  ;	Modification history:
 27015                                  ;
 27016                                  ;		Created: ARR 30 March 1983
 27017                                  ;               M039: DB 10/25/90 - Disk read/write optimization.
 27018                                  
 27019                                  ;Break   <FNDCLUS -- Skip over allocation units>
 27020                                  ;--------------------------------------------------------------------------
 27021                                  ;
 27022                                  ; Procedure Name : FNDCLUS
 27023                                  ;
 27024                                  ; Inputs:
 27025                                  ;       CX = No. of clusters to skip
 27026                                  ;       ES:BP = Base of drive parameters
 27027                                  ;       [THISSFT] point to SFT
 27028                                  ; Outputs:
 27029                                  ;       BX = Last cluster skipped to
 27030                                  ;       CX = No. of clusters remaining (0 unless EOF)
 27031                                  ;       DX = Position of last cluster
 27032                                  ;       Carry set if error (currently user FAILed to I 24)
 27033                                  ; DI destroyed. No other registers affected.
 27034                                  ;--------------------------------------------------------------------------
 27035                                  
 27036                                  ; 20/05/2019 - Retro DOS v4.0
 27037                                  ; DOSCODE:8BF2h (MSDOS 6.21, MSDOS.SYS)
 27038                                  ; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 27039                                  ; DOSCODE:8BB7h (MSDOS 5.0, MSDOS.SYS)
 27040                                  
 27041                                  FNDCLUS:
 27042 00004D24 06                      	PUSH	ES
 27043 00004D25 C43E[9E05]                      LES     DI,[THISSFT]		; setup addressability to SFT
 27044                                  	;;mov	bx,[es:di+1Bh] ; MSDOS 3.3
 27045                                  	;mov	bx,[es:di+35h] ; MSDOS 6.0
 27046 00004D29 268B5D35                	MOV	BX,[ES:DI+SF_ENTRY.sf_lstclus]
 27047                                  	;mov	dx,[es:di+19h]
 27048 00004D2D 268B5519                        MOV     DX,[ES:DI+SF_ENTRY.sf_cluspos]
 27049 00004D31 09DB                    	OR	BX,BX
 27050 00004D33 7424                    	JZ	short NOCLUS
 27051                                  
 27052 00004D35 29D1                            SUB     CX,DX
 27053 00004D37 7308                            JNB	short FINDIT
 27054                                  
 27055 00004D39 01D1                            ADD     CX,DX
 27056 00004D3B 31D2                            XOR     DX,DX
 27057                                  	;mov	bx,[es:di+0Bh]
 27058 00004D3D 268B5D0B                        MOV     BX,[ES:DI+SF_ENTRY.sf_firclus]
 27059                                  FINDIT:
 27060 00004D41 07                              POP	ES
 27061 00004D42 E313                    	JCXZ	RET9
 27062                                  
 27063                                  	;entry	SKPCLP
 27064                                  SKPCLP:
 27065 00004D44 E8D808                  	call	UNPACK
 27066 00004D47 7214                            jc	short fndclus_retn	; retc
 27067                                  
 27068                                  	; 09/09/2018
 27069                                  
 27070                                  	; MSDOS 3.3
 27071                                  	;push	bx
 27072                                  	;mov	bx,di
 27073                                  	;call	IsEOF
 27074                                  	;pop	bx	
 27075                                  	;jae	short RET9
 27076                                  
 27077                                  	; 20/05/2019 - Retro DOS v4.0
 27078                                  
 27079                                  	; MSDOS 6.0
 27080 00004D49 87DF                    	xchg	bx,di
 27081 00004D4B E8BA08                  	call	IsEOF
 27082 00004D4E 87DF                    	xchg	bx,di
 27083 00004D50 7305                    	jae	short RET9
 27084                                  
 27085 00004D52 87DF                            XCHG    BX,DI
 27086 00004D54 42                              INC     DX
 27087                                  
 27088 00004D55 E2ED                    	LOOP	SKPCLP			; RMFS
 27089                                  RET9:	
 27090 00004D57 F8                      	CLC
 27091 00004D58 C3                              retn
 27092                                  NOCLUS:
 27093 00004D59 07                              POP	ES
 27094 00004D5A 41                              INC	CX
 27095 00004D5B 4A                              DEC	DX
 27096 00004D5C F8                              CLC
 27097                                  
 27098                                  fndclus_retn:
 27099 00004D5D C3                              retn
 27100                                  
 27101                                  ;Break  <BUFSEC -- BUFFER A SECTOR AND SET UP A TRANSFER>
 27102                                  ;--------------------------------------------------------------------------
 27103                                  ;
 27104                                  ; Procedure Name : BUFSEC
 27105                                  ;
 27106                                  ; Inputs:
 27107                                  ;       AH = priority of buffer
 27108                                  ;       AL = 0 if buffer must be read, 1 if no pre-read needed
 27109                                  ;       ES:BP = Base of drive parameters
 27110                                  ;       [CLUSNUM] = Physical cluster number
 27111                                  ;       [SECCLUSPOS] = Sector position of transfer within cluster
 27112                                  ;       [BYTCNT1] = Size of transfer
 27113                                  ; Function:
 27114                                  ;       Insure specified sector is in buffer, flushing buffer before
 27115                                  ;       read if necessary.
 27116                                  ; Outputs:
 27117                                  ;       ES:DI = Pointer to buffer
 27118                                  ;       SI = Pointer to transfer address
 27119                                  ;       CX = Number of bytes
 27120                                  ;       [NEXTADD] updated
 27121                                  ;       [TRANS] set to indicate a transfer will occur
 27122                                  ;       Carry set if error (user FAILed to I 24)
 27123                                  ;--------------------------------------------------------------------------
 27124                                  
 27125                                  BUFSEC:
 27126 00004D5E 8B16[BC05]                      MOV     DX,[CLUSNUM]
 27127 00004D62 8A1E[7305]                      MOV     BL,[SECCLUSPOS]
 27128                                  	;mov	byte [ALLOWED],38h
 27129 00004D66 C606[4B03]38                    MOV     byte [ALLOWED],Allowed_FAIL+Allowed_RETRY+Allowed_IGNORE
 27130 00004D6B E85501                          CALL    FIGREC
 27131 00004D6E E8D00C                  	call	GETBUFFR
 27132 00004D71 72EA                            jc	short fndclus_retn
 27133                                  
 27134 00004D73 C606[7405]01                    MOV     BYTE [TRANS],1	; A transfer is taking place
 27135 00004D78 8B36[B805]                      MOV     SI,[NEXTADD]
 27136 00004D7C 89F7                            MOV     DI,SI
 27137 00004D7E 8B0E[D205]                      MOV     CX,[BYTCNT1]
 27138 00004D82 01CF                            ADD     DI,CX
 27139 00004D84 893E[B805]                      MOV     [NEXTADD],DI
 27140 00004D88 C43E[E205]                      LES     DI,[CURBUF]
 27141                                  	;or	byte [es:di+5],8
 27142 00004D8C 26804D0508                      OR      byte [ES:DI+BUFFINFO.buf_flags],buf_isDATA
 27143                                  	;;lea	di,[di+16] ; MSDOS 3.3 
 27144                                  	;lea	di,[di+20] ; MSDOS 6.0
 27145 00004D91 8D7D14                          LEA     DI,[DI+BUFINSIZ]        ; Point to buffer
 27146 00004D94 033E[CC05]                      ADD     DI,[BYTSECPOS]
 27147 00004D98 F8                              CLC
 27148 00004D99 C3                              retn
 27149                                  
 27150                                  ;Break   <BUFRD, BUFWRT -- PERFORM BUFFERED READ AND WRITE>
 27151                                  
 27152                                  ;---------------------------------------------------------------------------
 27153                                  ;
 27154                                  ; Procedure Name : BUFRD
 27155                                  ;
 27156                                  ; Do a partial sector read via one of the system buffers
 27157                                  ; ES:BP Points to DPB
 27158                                  ; Carry set if error (currently user FAILed to I 24)
 27159                                  ;
 27160                                  ; DS - set to DOSDATA
 27161                                  ;
 27162                                  ;----------------------------------------------------------------------------
 27163                                  
 27164                                  	; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 27165                                  	; 20/05/2019 - Retro DOS v4.0
 27166                                  BUFRD:
 27167 00004D9A 06                              PUSH	ES
 27168 00004D9B 31C0                            xor	ax, ax			; pre-read sector
 27169 00004D9D E8BEFF                          CALL    BUFSEC
 27170 00004DA0 7303                            JNC	short BUF_OK
 27171                                  
 27172                                  BUF_IO_FAIL:				; this label used by BUFWRT also
 27173 00004DA2 07                              POP	ES
 27174 00004DA3 EB2B                            JMP     SHORT RBUFPLACED
 27175                                  
 27176                                  BUF_OK:
 27177 00004DA5 8CC3                            MOV     BX,ES
 27178 00004DA7 8E06[2E03]                      MOV     ES,[DMAADD+2]
 27179 00004DAB 8EDB                            MOV     DS,BX
 27180 00004DAD 87FE                    	XCHG    DI,SI
 27181 00004DAF D1E9                            SHR     CX,1
 27182                                  ;M039
 27183                                  	; MSDOS 3.3
 27184                                  	;JNC	short EVENRD
 27185                                  	;MOVSB
 27186                                  ;EVENRD:
 27187                                  	;REP     MOVSW
 27188                                  
 27189                                  ;	CX = # of whole WORDs ; CF=1 if odd # of bytes.
 27190                                  ;       DS:SI-> Source within Buffer.
 27191                                  ;       ES:DI-> Destination within Transfer memory block.
 27192                                  
 27193                                  	; MSDOS 6.0
 27194 00004DB1 F3A5                    	rep	movsw			;Copy Buffer to Transfer memory.
 27195                                  	;adc	cx,0                    ;CX=1 if odd # of bytes, else CX=0.
 27196                                  	;rep	movsb                   ;Copy last byte.
 27197                                  	; 16/12/2022
 27198 00004DB3 7301                    	jnc	short EVENRD ; **** 20/05/2019
 27199 00004DB5 A4                      	movsb ; ****
 27200                                  	; 25/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 27201                                  	;adc	cx,0
 27202                                  	;rep	movsb
 27203                                  ;M039
 27204                                  EVENRD: ; ****
 27205 00004DB6 07                              POP	ES
 27206                                  ;hkn; SS override
 27207 00004DB7 36C53E[E205]                    LDS     DI,[SS:CURBUF]
 27208                                  	;;lea	bx,[di+16]
 27209                                  	;lea	bx,[di+20] ; MSDOS 6.0
 27210 00004DBC 8D5D14                  	LEA     BX,[DI+BUFINSIZ]
 27211 00004DBF 29DE                            SUB     SI,BX                   ; Position in buffer
 27212 00004DC1 E8310C                          call	PLACEBUF
 27213                                  	;cmp	si,[es:bp+2]
 27214 00004DC4 263B7602                	CMP	SI,[ES:BP+DPB.SECTOR_SIZE] ; Read Last byte?
 27215 00004DC8 7205                            JB	short RBUFPLACEDC	; No, leave buf where it is
 27216                                  ;M039
 27217                                  	; MSDOS 3.3
 27218                                  	;call	PLACEHEAD               ; Make it prime candidate for chucking
 27219                                                                          ;  even though it is MRU.
 27220                                          ; MSDOS 6.0
 27221 00004DCA 36893E[6D00]            	MOV	[ss:BufferQueue],DI	; Make it prime candidate for
 27222                                  ;M039					; chucking even though it is MRU.
 27223                                  
 27224                                  RBUFPLACEDC:
 27225 00004DCF F8                              CLC
 27226                                  RBUFPLACED:
 27227 00004DD0 16                      	push	ss
 27228 00004DD1 1F                      	pop	ds
 27229 00004DD2 C3                              retn
 27230                                  
 27231                                  ;----------------------------------------------------------------------------
 27232                                  ;
 27233                                  ; Procedure : BUFWRT
 27234                                  ;
 27235                                  ; Do a partial sector write via one of the system buffers
 27236                                  ; ES:BP Points to DPB
 27237                                  ; Carry set if error (currently user FAILed to I 24)
 27238                                  ;
 27239                                  ; DS - set to DOSDATA
 27240                                  ;
 27241                                  ;----------------------------------------------------------------------------
 27242                                  
 27243                                  	; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 27244                                  	; 20/05/2019 - Retro DOS v4.0
 27245                                  BUFWRT:
 27246 00004DD3 A1[C405]                        MOV     AX,[SECPOS]
 27247                                          ; MSDOS 6.0
 27248 00004DD6 83C001                  	ADD	AX,1            	; Set for next sector
 27249 00004DD9 A3[C405]                        MOV	[SECPOS],AX 		;F.C. >32mb	;AN000;
 27250 00004DDC 8316[C605]00                    ADC	word [SECPOS+2],0	;F.C. >32mb	;AN000;
 27251 00004DE1 A1[C605]                        MOV	AX,[SECPOS+2]		;F.C. >32mb	;AN000;
 27252 00004DE4 3B06[CA05]                      CMP	AX,[VALSEC+2]		;F.C. >32mb	;AN000;
 27253 00004DE8 B001                            MOV	AL,1			;F.C. >32mb	;AN000;
 27254 00004DEA 770F                            JA	short NOREAD		;F.C. >32mb	;AN000;
 27255 00004DEC 720B                            JB	short _doread		;F.C. >32mb	;AN000;
 27256 00004DEE A1[C405]                        MOV	AX,[SECPOS]		;F.C. >32mb	;AN000;
 27257                                  
 27258                                  	; MSDOS 3.3
 27259                                  	;INC	AX
 27260                                  	;MOV	[SECPOS],AX ; 09/09/2018
 27261                                  
 27262                                  	; 20/05/2019
 27263                                  	; MSDOS 3.3 & MSDOS 6.0
 27264 00004DF1 3B06[C805]                      CMP     AX,[VALSEC]		; Has sector been written before?
 27265 00004DF5 B001                            MOV     AL,1
 27266 00004DF7 7702                            JA	short NOREAD		; Skip preread if SECPOS>VALSEC
 27267                                  _doread:
 27268 00004DF9 30C0                            XOR     AL,AL
 27269                                  NOREAD:
 27270 00004DFB 06                              PUSH	ES
 27271 00004DFC E85FFF                          CALL    BUFSEC
 27272 00004DFF 72A1                    	JC	short BUF_IO_FAIL
 27273 00004E01 8E1E[2E03]                      MOV     DS,[DMAADD+2]
 27274 00004E05 D1E9                            SHR     CX,1
 27275                                  ;M039
 27276                                  	; MSDOS 3.3
 27277                                  	;JNC	short EVENWRT ; 09/09/2018
 27278                                  	;MOVSB
 27279                                  ;EVENWRT:
 27280                                  	;REP	MOVSW
 27281                                  
 27282                                  ;	CX = # of whole WORDs; CF=1 if odd # of bytes.
 27283                                  ;       DS:SI-> Source within Transfer memory block.
 27284                                  ;       ES:DI-> Destination within Buffer.
 27285                                  
 27286                                  	; MSDOS 6.0
 27287 00004E07 F3A5                    	rep	movsw			;Copy Transfer memory to Buffer.
 27288                                  	;adc	cx,0                    ;CX=1 if odd # of bytes, else CX=0.
 27289                                  	;rep	movsb                   ;Copy last byte.
 27290                                  	; 16/12/2022
 27291 00004E09 7301                    	jnc	short EVENWRT ; **** 20/05/2019
 27292 00004E0B A4                      	movsb ; ****
 27293                                  	; 25/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 27294                                  	;adc	cx,0
 27295                                  	;rep	movsb
 27296                                  ;M039
 27297                                  EVENWRT: ; ****
 27298 00004E0C 07                              POP	ES
 27299                                  
 27300                                  ;hkn; SS override
 27301 00004E0D 36C51E[E205]                    LDS     BX,[SS:CURBUF]
 27302                                  
 27303                                  	; MSDOS 6.0
 27304 00004E12 F6470540                        TEST	byte [BX+BUFFINFO.buf_flags],buf_dirty
 27305                                  					;LB. if already dirty		  ;AN000;
 27306 00004E16 7507                            JNZ	short yesdirty10	;LB.  don't increment dirty count ;AN000;
 27307 00004E18 E82C0E                  	call	INC_DIRTY_COUNT		;LB.				  ;AN000;
 27308                                  	
 27309                                  	;or	byte [bx+5],40h
 27310 00004E1B 804F0540                        OR	byte [BX+BUFFINFO.buf_flags],buf_dirty
 27311                                  yesdirty10:
 27312                                  	;;lea	si,[bx+16]
 27313                                  	;lea	si,[bx+20] ; MSDOS 6.0
 27314 00004E1F 8D7714                          LEA     SI,[BX+BUFINSIZ]
 27315 00004E22 29F7                            SUB     DI,SI                   ; Position in buffer
 27316                                  ;M039
 27317                                  	; MSDOS 3.3
 27318                                  	;MOV	SI,DI
 27319                                  	;MOV	DI,BX
 27320                                  	;call	PLACEBUF
 27321                                  	;;cmp	si,[es:bp+2]
 27322                                  	;CMP	SI,[ES:BP+DPB.SECTOR_SIZE] ; Written last byte?
 27323                                  	;JB	short WBUFPLACED	; No, leave buf where it is
 27324                                  	;call	PLACEHEAD               ; Make it prime candidate for chucking
 27325                                                                          ;  even though it is MRU.
 27326                                  	; MSDOS 6.0
 27327                                  	;cmp	di,[es:bp+2]
 27328 00004E24 263B7E02                	CMP	di,[ES:BP+DPB.SECTOR_SIZE] ; Written last byte?
 27329 00004E28 7205                            JB	short WBUFPLACED	; No, leave buf where it is
 27330 00004E2A 36891E[6D00]                    MOV	[ss:BufferQueue],BX	; Make it prime candidate for
 27331                                  					; chucking even though it is MRU.
 27332                                  ;M039
 27333                                  
 27334                                  WBUFPLACED:
 27335 00004E2F F8                              CLC
 27336 00004E30 16                      	push	ss
 27337 00004E31 1F                      	pop	ds
 27338 00004E32 C3                              retn
 27339                                  
 27340                                  ;Break   <NEXTSEC -- Compute next sector to read or write>
 27341                                  ;---------------------------------------------------------------------------
 27342                                  ;
 27343                                  ; Procedure Name : NEXTSEC
 27344                                  ;
 27345                                  ; Compute the next sector to read or write
 27346                                  ; ES:BP Points to DPB
 27347                                  ;
 27348                                  ;---------------------------------------------------------------------------
 27349                                  
 27350                                  NEXTSEC:
 27351 00004E33 F606[7405]FF            	test	byte [TRANS],0FFh ; -1 
 27352 00004E38 7426                            JZ	short CLRET
 27353                                  
 27354 00004E3A A0[7305]                        MOV     AL,[SECCLUSPOS]
 27355 00004E3D FEC0                            INC     AL
 27356                                  	;cmp	al,[es:bp+4]
 27357 00004E3F 263A4604                        CMP     AL,[ES:BP+DPB.CLUSTER_MASK]
 27358 00004E43 7618                            JBE	short SAVPOS
 27359                                  
 27360 00004E45 8B1E[BC05]                      MOV     BX,[CLUSNUM]
 27361 00004E49 E8BC07                          call	IsEOF
 27362 00004E4C 7314                            JAE	short NONEXT
 27363                                  
 27364 00004E4E E8CE07                          call	UNPACK
 27365 00004E51 720F                            JC	short NONEXT
 27366                                  clusgot:
 27367 00004E53 893E[BC05]                      MOV     [CLUSNUM],DI
 27368 00004E57 FF06[BA05]                      INC     word [LASTPOS]
 27369 00004E5B B000                            MOV     AL,0
 27370                                  SAVPOS:
 27371 00004E5D A2[7305]                        MOV     [SECCLUSPOS],AL
 27372                                  CLRET:
 27373 00004E60 F8                              CLC
 27374 00004E61 C3                              retn
 27375                                  NONEXT:
 27376 00004E62 F9                              STC
 27377 00004E63 C3                              retn
 27378                                  
 27379                                  ;Break	<OPTIMIZE -- DO A USER DISK REQUEST WELL>
 27380                                  ;----------------------------------------------------------------------------
 27381                                  ;
 27382                                  ; Procedure Name : OPTIMIZE
 27383                                  ;
 27384                                  ; Inputs:
 27385                                  ;       BX = Physical cluster
 27386                                  ;       CX = No. of records
 27387                                  ;       DL = sector within cluster
 27388                                  ;       ES:BP = Base of drive parameters
 27389                                  ;       [NEXTADD] = transfer address
 27390                                  ; Outputs:
 27391                                  ;       AX = No. of records remaining
 27392                                  ;       BX = Transfer address
 27393                                  ;       CX = No. or records to be transferred
 27394                                  ;       DX = Physical sector address            (LOW)
 27395                                  ;       [HIGH_SECTOR] = Physical sector address (HIGH)
 27396                                  ;       DI = Next cluster
 27397                                  ;       [CLUSNUM] = Last cluster accessed
 27398                                  ;       [NEXTADD] updated
 27399                                  ;       Carry set if error (currently user FAILed to I 24)
 27400                                  ; ES:BP unchanged. Note that segment of transfer not set.
 27401                                  ;
 27402                                  ;---------------------------------------------------------------------------
 27403                                  
 27404                                  	; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 27405                                  OPTIMIZE:
 27406 00004E64 52                      	PUSH    DX
 27407 00004E65 53                              PUSH    BX
 27408                                  	;mov	al,[es:bp+4]
 27409 00004E66 268A4604                        MOV     AL,[ES:BP+DPB.CLUSTER_MASK]
 27410 00004E6A FEC0                            INC     AL              ; Number of sectors per cluster
 27411 00004E6C 88C4                            MOV     AH,AL
 27412 00004E6E 28D0                            SUB     AL,DL           ; AL = Number of sectors left in first cluster
 27413 00004E70 89CA                            MOV     DX,CX
 27414                                  	;MOV	CX,0
 27415                                  	; 25/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 27416                                  	; 16/12/2022
 27417 00004E72 31C9                    	xor	cx,cx	; sub cx,cx
 27418                                  OPTCLUS:
 27419                                  ; AL has number of sectors available in current cluster
 27420                                  ; AH has number of sectors available in next cluster
 27421                                  ; BX has current physical cluster
 27422                                  ; CX has number of sequential sectors found so far
 27423                                  ; DX has number of sectors left to transfer
 27424                                  ; ES:BP Points to DPB
 27425                                  ; ES:SI has FAT pointer
 27426                                  
 27427                                  do_norm3:
 27428 00004E74 E8A807                          call	UNPACK
 27429 00004E77 7237                            JC	short OP_ERR
 27430                                  clusgot2:
 27431 00004E79 00C1                    	ADD	CL,AL
 27432 00004E7B 80D500                          ADC     CH,0
 27433 00004E7E 39D1                            CMP     CX,DX
 27434 00004E80 7333                            JAE	short BLKDON
 27435 00004E82 88E0                            MOV     AL,AH
 27436 00004E84 43                              INC     BX
 27437 00004E85 39DF                            CMP     DI,BX
 27438 00004E87 74EB                            JZ	short OPTCLUS
 27439 00004E89 4B                              DEC     BX
 27440                                  FINCLUS:
 27441 00004E8A 891E[BC05]                      MOV     [CLUSNUM],BX    ; Last cluster accessed
 27442 00004E8E 29CA                            SUB     DX,CX           ; Number of sectors still needed
 27443 00004E90 52                              PUSH    DX
 27444 00004E91 89C8                            MOV     AX,CX
 27445                                  	;mul	word[ES:BP+2]
 27446 00004E93 26F76602                        MUL	word [ES:BP+DPB.SECTOR_SIZE] 
 27447                                  				; Number of sectors times sector size
 27448 00004E97 8B36[B805]                      MOV     SI,[NEXTADD]
 27449 00004E9B 01F0                            ADD     AX,SI           ; Adjust by size of transfer
 27450 00004E9D A3[B805]                        MOV     [NEXTADD],AX
 27451 00004EA0 58                              POP     AX              ; Number of sectors still needed
 27452 00004EA1 5A                              POP     DX              ; Starting cluster
 27453 00004EA2 29D3                            SUB     BX,DX           ; Number of new clusters accessed
 27454 00004EA4 011E[BA05]                      ADD     [LASTPOS],BX
 27455 00004EA8 5B                              POP     BX              ; BL = sector position within cluster
 27456 00004EA9 E81700                  	call	FIGREC
 27457 00004EAC 89F3                            MOV     BX,SI
 27458 00004EAE F8                      	CLC
 27459 00004EAF C3                              retn
 27460                                  OP_ERR:
 27461 00004EB0 83C404                          ADD     SP,4
 27462 00004EB3 F9                      	STC
 27463 00004EB4 C3                              retn
 27464                                  BLKDON:
 27465 00004EB5 29D1                            SUB     CX,DX           ; Number of sectors in cluster we don't want
 27466 00004EB7 28CC                            SUB     AH,CL           ; Number of sectors in cluster we accepted
 27467 00004EB9 FECC                            DEC     AH              ; Adjust to mean position within cluster
 27468 00004EBB 8826[7305]                      MOV     [SECCLUSPOS],AH
 27469 00004EBF 89D1                            MOV     CX,DX           ; Anyway, make the total equal to the request
 27470 00004EC1 EBC7                            JMP     SHORT FINCLUS
 27471                                  
 27472                                  ;Break	<FIGREC -- Figure sector in allocation unit>
 27473                                  ;---------------------------------------------------------------------------
 27474                                  ;
 27475                                  ; Procedure Name : FIGREC
 27476                                  ;
 27477                                  ; Inputs:
 27478                                  ;       DX = Physical cluster number
 27479                                  ;       BL = Sector position within cluster
 27480                                  ;       ES:BP = Base of drive parameters
 27481                                  ; Outputs:
 27482                                  ;       DX = physical sector number           (LOW)
 27483                                  ;       [HIGH_SECTOR] Physical sector address (HIGH)
 27484                                  ; No other registers affected.
 27485                                  ;
 27486                                  ;---------------------------------------------------------------------------
 27487                                  
 27488                                  	; 10/06/2019
 27489                                  	; 20/05/2019 - Retro DOS v4.0
 27490                                  	; DOSCODE:8D96h (MSDOS 6.21, MSDOS.SYS)
 27491                                  	; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 27492                                  	; DOSCODE:8D5Bh (MSDOS 5.0, MSDOS.SYS)	
 27493                                  FIGREC:
 27494 00004EC3 51                              PUSH    CX
 27495                                  	;mov	cl,[es:bp+5]
 27496 00004EC4 268A4E05                        MOV     CL,[ES:BP+DPB.CLUSTER_SHIFT]
 27497 00004EC8 4A                              DEC     DX
 27498 00004EC9 4A                              DEC     DX
 27499                                  
 27500                                  	; MSDOS 3.3
 27501                                  	;SHL	DX,CL
 27502                                  
 27503                                  ;hkn; SS override HIGH_SECTOR
 27504                                  	; MSDOS 6.0
 27505 00004ECA 36C706[0706]0000        	MOV	word [SS:HIGH_SECTOR],0		;F.C. >32mb
 27506 00004ED1 08C9                    	OR	CL,CL				;F.C. >32mb
 27507 00004ED3 740C                    	JZ	short noshift			;F.C. >32mb
 27508 00004ED5 30ED                    	XOR	CH,CH 				;F.C. >32mb
 27509                                  rotleft:					;F.C. >32mb
 27510 00004ED7 F8                      	CLC					;F.C. >32mb
 27511 00004ED8 D1D2                    	RCL	DX,1				;F.C. >32mb
 27512                                  	; 10/06/2019
 27513 00004EDA 36D116[0706]            	RCL	word [ss:HIGH_SECTOR],1		;F.C. >32mb
 27514 00004EDF E2F6                    	LOOP	rotleft				;F.C. >32mb
 27515                                  noshift:
 27516                                  	; MSDOS 3.3 & MSDOS 6.0
 27517 00004EE1 08DA                            OR      DL,BL
 27518                                  	;add	dx,[es:bp+0Bh]
 27519 00004EE3 2603560B                        ADD     DX,[ES:BP+DPB.FIRST_SECTOR]
 27520                                  	; MSDOS 6.0
 27521                                  	; 10/06/2019
 27522 00004EE7 368316[0706]00                  ADC	word [ss:HIGH_SECTOR],0		;F.C. >32mb
 27523                                  	; MSDOS 3.3 & MSDOS 6.0        
 27524 00004EED 59                      	POP     CX
 27525                                  figrec_retn:
 27526 00004EEE C3                              retn
 27527                                  
 27528                                  ; 20/05/2019 - Retro DOS v4.0
 27529                                  ; DOSCODE:8DC2h (MSDOS 6.21, MSDOS.SYS)
 27530                                  
 27531                                  ; 30/07/2018 - Retro DOS v3.0
 27532                                  ; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 
 27533                                  
 27534                                  ;Break   <ALLOCATE -- Assign disk space>
 27535                                  ;---------------------------------------------------------------------------
 27536                                  ;
 27537                                  ; Procedure Name : ALLOCATE - Allocate Disk Space
 27538                                  ;
 27539                                  ;   ALLOCATE is called to allocate disk clusters. The new clusters are
 27540                                  ;   FAT-chained onto the end of the existing file.
 27541                                  ;
 27542                                  ;   The DPB contains the cluster # of the last free cluster allocated
 27543                                  ;   (dpb_next_free). We start at this cluster and scan towards higher
 27544                                  ;   numbered clusters, looking for the necessary free blocks.
 27545                                  ;
 27546                                  ;   Once again, fancy terminology gets in the way of correct coding. When
 27547                                  ;   using next_free, start scanning AT THAT POINT and not the one following it.
 27548                                  ;   This fixes the boundary condition bug when only free = next_free = 2.
 27549                                  ;
 27550                                  ;       If we get to the end of the disk without satisfaction:
 27551                                  ;
 27552                                  ;           if (dpb_next_free == 2) then we've scanned the whole disk.
 27553                                  ;               return (insufficient_disk_space)
 27554                                  ;           ELSE
 27555                                  ;               dpb_next_free = 2; start scan over from the beginning.
 27556                                  ;
 27557                                  ;   Note that there is no multitasking interlock. There is no race when
 27558                                  ;   examining the entrys in an in-core FAT block since there will be no
 27559                                  ;   context switch. When UNPACK context switches while waiting for a FAT read
 27560                                  ;   we are done with any in-core FAT blocks, so again there is no race. The
 27561                                  ;   only special concern is that V2 and V3 MSDOS left the last allocated
 27562                                  ;   cluster as "00"; marking it EOF only when the entire alloc request was
 27563                                  ;   satisfied. We can't allow another activation to think this cluster is
 27564                                  ;   free, so we give it a special temporary mark to show that it is, indeed,
 27565                                  ;   allocated.
 27566                                  ;
 27567                                  ;   Note that when we run out of space this algorithem will scan from
 27568                                  ;   dpb_next_free to the end, then scan from cluster 2 through the end,
 27569                                  ;   redundantly scanning the later part of the disk. This only happens when
 27570                                  ;   we run out of space, so sue me.
 27571                                  ;
 27572                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
 27573                                  ;            C  A  V  E  A  T     P  A  T  T  E  R  S  O  N                ;
 27574                                  ;                                                                          ;
 27575                                  ;   The use of FATBYT and RESTFATBYT is somewhat mysterious. Here is the
 27576                                  ;   explanation:
 27577                                  ;
 27578                                  ;   In the NUL file case (sf_firclus currently 0) ALLOCATE is called with
 27579                                  ;   entry BX = 0. What needs to be done in this case is to stuff the cluster
 27580                                  ;   number of the first cluster allocated in sf_firclus when the ALLOCATE is
 27581                                  ;   complete. THIS VALUE IS SAVED TEMPORARILY IN CLUSTER 0, HENCE THE CURRENT
 27582                                  ;   VALUE IN CLUSTER 0 MUST BE SAVED AND RESTORED. This is a side effect of
 27583                                  ;   the fact that PACK and UNPACK don't treat requests for clusters 0 and 1 as
 27584                                  ;   errors. This "stuff" is done by the call to PACK which is right before
 27585                                  ;   the
 27586                                  ;           LOOP   findfre         ; alloc more if needed
 27587                                  ;   instruction when the first cluster is allocated to the nul file. The
 27588                                  ;   value is recalled from cluster 0 and stored at sf_firclus at ads4:
 27589                                  ;
 27590                                  ;   This method is obviously useless (because it is non-reentrant) for
 27591                                  ;   multitasking, and will have to be changed. Storing the required value on
 27592                                  ;   the stack is recommended. Setting sf_firclus at the PACK of cluster 0
 27593                                  ;   (instead of actually doing the PACK) is BAD because it doesn't handle
 27594                                  ;   problems with INT 24 well.
 27595                                  ;
 27596                                  ;            C  A  V  E  A  T     P  A  T  T  E  R  S  O  N                ;
 27597                                  ;----+----+----+----+----+----+----+----+----+----+----+----+----+----+----;
 27598                                  ;                                                                          ;
 27599                                  ;       ENTRY   BX = Last cluster of file (0 if null file)
 27600                                  ;               CX = No. of clusters to allocate
 27601                                  ;               ES:BP = Base of drive parameters
 27602                                  ;               [THISSFT] = Points to SFT
 27603                                  ;
 27604                                  ;       EXIT    'C' set if insufficient space
 27605                                  ;                 [FAILERR] can be tested to see the reason for failure
 27606                                  ;                 CX = max. no. of clusters that could be added to file
 27607                                  ;               'C' clear if space allocated
 27608                                  ;                 BX = First cluster allocated
 27609                                  ;                 FAT is fully updated
 27610                                  ;                 sf_FIRCLUS field of SFT set if file was null
 27611                                  ;
 27612                                  ;       USES    ALL but SI, BP
 27613                                  
 27614                                  ;callmagic  proc near
 27615                                  ;       push    ds                             ;push segment of routine 
 27616                                  ;       push    Offset MagicPatch              ;push offset for routine
 27617                                  ;       retf                                   ;simulate jmp far
 27618                                  ;                                              ;far return address is on
 27619                                  ;                                              ;stack, so far return from
 27620                                  ;                                              ;call will return this routine
 27621                                  ;callmagic  endp
 27622                                  
 27623                                  ALLOCATE:
 27624                                  	; 10/09/2018
 27625                                  ;BEGIN MAGICDRV MODIFICATIONS
 27626                                  ;
 27627                                  ;7/5/92 scottq
 27628                                  ;
 27629                                  ;This is the disk compression patch location which allows
 27630                                  ;the disk compression software to fail allocations if the
 27631                                  ;FAT would allows allocation, but the free space for compressed
 27632                                  ;data would not.
 27633                                  ;        
 27634                                  ;;;	call    far ptr MAGICPATCH
 27635                                  ;;; We cannot do a far call since we cannot have fix-ups[romdos,hidos],
 27636                                  ;;; but we do know the segment and offset of the routine
 27637                                  ;;; so simulate a far call to dosdata:magicpatch
 27638                                  ;;; note dosassume above, so DS -> dosdata
 27639                                  
 27640                                  	; MSDOS 6.0
 27641                                          ;clc				;clear carry so we fall through
 27642                                  	;				;if no patch is present
 27643                                  	;push	cs			;push segment for far return
 27644                                          ;call	callmagic		;this is a near call
 27645                                          ;jnc	short Regular_Allocate_Path
 27646                                  	;jmp	Disk_Full_Return
 27647                                  
 27648                                  ;Regular_Allocate_Path:
 27649                                  	; 20/05/2019 - Retro DOS v4.0
 27650                                  ;END MAGICDRV MODIFICATIONS
 27651                                  
 27652                                  	; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 27653                                  	; DOSCODE:8D87h (MSDOS 5.0, MSDOS.SYS)
 27654                                  
 27655 00004EEF 53                              PUSH    BX                      ; save (bx)
 27656 00004EF0 31DB                            XOR     BX,BX
 27657 00004EF2 E82A07                  	call	UNPACK
 27658 00004EF5 893E[9605]                      MOV     [FATBYT],DI             ; save correct cluster 0 value
 27659 00004EF9 5B                              POP     BX
 27660 00004EFA 72F2                            jc	short figrec_retn	; abort if error   [INTERR?]
 27661                                  
 27662 00004EFC 51                              PUSH    CX
 27663 00004EFD 53                              PUSH    BX
 27664                                  
 27665 00004EFE 89DA                            MOV     DX,BX
 27666                                  	;;mov	bx,[es:bp+1Ch]  ; MSDOS 3.3
 27667                                  	;mov	bx,[es:bp+1Dh]	; MSDOS 6.0
 27668 00004F00 268B5E1D                        mov     bx,[ES:BP+DPB.NEXT_FREE]
 27669 00004F04 83FB02                          cmp     bx,2
 27670 00004F07 7709                            ja	short FINDFRE
 27671                                  
 27672                                  ;   couldn't find enough free space beyond dpb_next_free, or dpb_next_free is
 27673                                  ;   <2 or >dpb_max_clus. Reset it and restart the scan
 27674                                  
 27675                                  ads1:
 27676                                  	;;mov	word [es:bp+1Ch],2 ; MSDOS 3.3
 27677                                  	;mov	word [es:bp+1Dh],2 ; MSDOS 6.0
 27678 00004F09 26C7461D0200                    mov     word [ES:BP+DPB.NEXT_FREE],2
 27679 00004F0F BB0100                          mov     bx,1                    ; Counter next instruction so first
 27680                                                                          ;       cluster examined is 2
 27681                                  
 27682                                  ;   Scanning both forwards and backwards for a free cluster
 27683                                  ;
 27684                                  ;       (BX) = forwards scan pointer
 27685                                  ;       (CX) = clusters remaining to be allocated
 27686                                  ;       (DX) = current last cluster in file
 27687                                  ;       (TOS) = last cluster of file
 27688                                  
 27689                                  FINDFRE:
 27690 00004F12 43                              INC     BX
 27691                                  	;cmp	bx,[es:bp+0Dh]
 27692 00004F13 263B5E0D                        CMP	BX,[ES:BP+DPB.MAX_CLUSTER]
 27693 00004F17 7757                    	ja	short ads7	; at end of disk
 27694 00004F19 E80307                          call	UNPACK          ; check out this cluster
 27695 00004F1C 722F                            jc	short ads4	; FAT error             [INTERR?]
 27696 00004F1E 75F2                            jnz	short FINDFRE	; not free, keep on truckin
 27697                                  
 27698                                  ;   Have found a free cluster. Chain it to the file
 27699                                  ;
 27700                                  ;       (BX) = found free cluster #
 27701                                  ;       (DX) = current last cluster in file
 27702                                  
 27703                                  	;;mov	[es:bp+1Ch],bx
 27704                                  	;mov	[es:bp+1Dh],bx ; MSDOS 6.0
 27705 00004F20 26895E1D                        mov	[ES:BP+DPB.NEXT_FREE],bx ; next time start search here
 27706 00004F24 92                              xchg    ax,dx           ; save (dx) in ax
 27707 00004F25 BA0100                          mov     dx,1            ; mark this free guy as "1"
 27708 00004F28 E84807                  	call	PACK            ; set special "temporary" mark
 27709 00004F2B 7220                            jc	short ads4	; FAT error             [INTERR?]
 27710                                  	;;cmp	word [es:bp+1Eh],-1
 27711                                          ;cmp	word [es:bp+1Fh],-1 ; MSDOS 6.0
 27712 00004F2D 26837E1FFF              	CMP	word [ES:BP+DPB.FREE_CNT],-1 ; Free count valid?
 27713 00004F32 7404                            JZ	short NO_ALLOC	; No
 27714                                  	;;dec	word [es:bp+1Eh]
 27715                                          ;dec	word [es:bp+1Fh] ; MSDOS 6.0
 27716 00004F34 26FF4E1F                        DEC     word [ES:BP+DPB.FREE_CNT] ; Reduce free count by 1
 27717                                  NO_ALLOC:
 27718 00004F38 92                              xchg    ax,dx           ; (dx) = current last cluster in file
 27719 00004F39 87DA                            XCHG    BX,DX
 27720 00004F3B 89D0                            MOV     AX,DX
 27721 00004F3D E83307                  	call	PACK            ; link free cluster onto file
 27722                                                                  ;  CAVEAT.. On Nul file, first pass stuffs
 27723                                                                  ;    cluster 0 with FIRCLUS value.
 27724 00004F40 720B                            jc	short ads4	; FAT error [INTERR?]
 27725 00004F42 93                              xchg    BX,AX           ; (BX) = last one we looked at
 27726 00004F43 89DA                            mov     dx,bx           ; (dx) = current end of file
 27727 00004F45 E2CB                            LOOP    FINDFRE         ; alloc more if needed
 27728                                  
 27729                                  ;   We've successfully extended the file. Clean up and exit
 27730                                  ;
 27731                                  ;       (BX) = last cluster in file
 27732                                  
 27733 00004F47 BAFFFF                          MOV     DX,0FFFFH
 27734 00004F4A E82607                  	call	PACK            ; mark last cluster EOF
 27735                                  
 27736                                  ;   Note that FAT errors jump here to clean the stack and exit. This saves us
 27737                                  ;   2 whole bytes. Hope its worth it...
 27738                                  ;
 27739                                  ;       'C' set if error
 27740                                  ;       calling (BX) and (CX) pushed on stack
 27741                                  
 27742                                  ads4:   
 27743 00004F4D 5B                      	POP     BX
 27744 00004F4E 59                              POP     CX              ; Don't need this stuff since we're successful
 27745 00004F4F 729D                            jc	short figrec_retn
 27746 00004F51 E8CB06                          call	UNPACK          ; Get first cluster allocated for return
 27747                                                                  ; CAVEAT... In nul file case, UNPACKs cluster 0.
 27748 00004F54 7298                            jc	short figrec_retn
 27749 00004F56 E83200                  	call	RESTFATBYT      ; Restore correct cluster 0 value
 27750 00004F59 7293                            jc	short figrec_retn
 27751 00004F5B 87DF                            XCHG    BX,DI           ; (DI) = last cluster in file upon our entry
 27752 00004F5D 09FF                            OR      DI,DI           ; clear 'C'
 27753 00004F5F 758D                    	jnz	short figrec_retn ; we were extending an existing file
 27754                                  
 27755                                  ;   We were doing the first allocation for a new file. Update the SFT cluster
 27756                                  ;   info
 27757                                  dofastk:
 27758                                  	; 20/05/2019
 27759                                  	; MSDOS 6.0
 27760                                  	;push	dx ; * MSDOS 6.0
 27761                                  	;;mov	dl,[es:bp+0]
 27762                                  	;;MOV	DL,[ES:BP+DPB.DRIVE]	; get drive #
 27763                                  	;mov	dl,[es:bp]
 27764                                  
 27765                                  	; 25/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 27766                                  	; DOSCODE:8DF9h (MSDOS 5.0, MSDOS.SYS)
 27767                                  	
 27768                                  	; 16/12/2022
 27769                                  	;push	dx ; *
 27770                                  	;mov	dl,[ES:BP+DPB.DRIVE] 
 27771                                  	; 15/12/2022
 27772                                  	;mov	dl,[es:bp]
 27773                                  	
 27774                                  	; MSDOS 3.3 & MSDOS 6.0
 27775 00004F61 06                      	PUSH	ES
 27776 00004F62 C43E[9E05]              	LES     DI,[THISSFT]
 27777                                  	;mov	[es:di+0Bh],bx
 27778 00004F66 26895D0B                	MOV     [ES:DI+SF_ENTRY.sf_firclus],BX
 27779                                  	;;mov	[es:di+1Bh],bx ; MSDOS 3.3
 27780                                  	;mov	[es:di+35h],bx ; MSDOS 6.0
 27781 00004F6A 26895D35                	MOV     [ES:DI+SF_ENTRY.sf_lstclus],BX
 27782 00004F6E 07                      	POP	ES
 27783                                  	;retn
 27784                                  
 27785                                  	;pop	dx ; * MSDOS 6.0
 27786                                  
 27787                                  	; 16/12/2022
 27788                                  	; 25/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 27789                                  	;pop	dx ; *
 27790                                  
 27791 00004F6F C3                      	retn	
 27792                                  
 27793                                  ;** we're at the end of the disk, and not satisfied. See if we've scanned ALL
 27794                                  ;   of the disk...
 27795                                  
 27796                                  ads7:   
 27797 00004F70 26837E1D02              	cmp	word [ES:BP+DPB.NEXT_FREE],2
 27798 00004F75 7592                    	jnz	short ads1	; start scan from front of disk
 27799                                  
 27800                                  ;   Sorry, we've gone over the whole disk, with insufficient luck. Lets give
 27801                                  ;   the space back to the free list and tell the caller how much he could have
 27802                                  ;   had.  We have to make sure we remove the "special mark" we put on the last
 27803                                  ;   cluster we were able to allocate, so it doesn't become orphaned.
 27804                                  ;
 27805                                  ;       (CX) = clusters remaining to be allocated
 27806                                  ;       (TOS) = last cluster of file (before call to ALLOCATE)
 27807                                  ;       (TOS+1) = # of clusters wanted to allocate
 27808                                  
 27809 00004F77 5B                              POP     BX              ; (BX) = last cluster of file
 27810 00004F78 BAFFFF                          MOV     DX,0FFFFH
 27811 00004F7B E81F00                  	call	RELBLKS         ; give back any clusters just alloced
 27812 00004F7E 58                              POP     AX              ; No. of clusters requested
 27813                                                                  ; Don't "retc". We are setting Carry anyway,
 27814                                                                  ;   Alloc failed, so proceed with return CX
 27815                                                                  ;   setup.
 27816 00004F7F 29C8                            SUB     AX,CX           ; AX=No. of clusters allocated
 27817 00004F81 E80700                  	call	RESTFATBYT      ; Don't "retc". We are setting Carry anyway,
 27818                                                                  ;   Alloc failed.
 27819                                  Disk_Full_Return:               ;label added for magic patch 8-6-92 scottq
 27820                                          ; MSDOS 6.0
 27821 00004F84 C606[0B06]01            	MOV	byte [DISK_FULL],1 ;MS. indicating disk full
 27822 00004F89 F9                              STC
 27823 00004F8A C3                              retn
 27824                                  
 27825                                  ;-----------------------------------------------------------------------
 27826                                  ;
 27827                                  ; Procedure Name : RESTFATBYT
 27828                                  ;
 27829                                  ; SEE ALLOCATE CAVEAT
 27830                                  ;       Carry set if error (currently user FAILed to I 24)
 27831                                  ;-----------------------------------------------------------------------
 27832                                  
 27833                                  RESTFATBYT:
 27834 00004F8B 53                              PUSH    BX
 27835 00004F8C 52                              PUSH    DX
 27836 00004F8D 57                              PUSH    DI
 27837 00004F8E 31DB                            XOR     BX,BX
 27838 00004F90 8B16[9605]                      MOV     DX,[FATBYT]
 27839 00004F94 E8DC06                  	call	PACK
 27840 00004F97 5F                              POP     DI
 27841 00004F98 5A                              POP     DX
 27842 00004F99 5B                              POP     BX
 27843                                  ; 16/12/2022
 27844                                  ; 25/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 27845                                  ;RELEASE_flush:
 27846 00004F9A C3                      	retn
 27847                                  
 27848                                  ;Break	<RELEASE -- DEASSIGN DISK SPACE>
 27849                                  ;---------------------------------------------------------------------------
 27850                                  ;
 27851                                  ; Procedure Name : RELEASE
 27852                                  ;
 27853                                  ; Inputs:
 27854                                  ;       BX = Cluster in file
 27855                                  ;       ES:BP = Base of drive parameters
 27856                                  ; Function:
 27857                                  ;       Frees cluster chain starting with [BX]
 27858                                  ;       Carry set if error (currently user FAILed to I 24)
 27859                                  ; AX,BX,DX,DI all destroyed. Other registers unchanged.
 27860                                  ;
 27861                                  ;-----------------------------------------------------------------------------
 27862                                  
 27863                                  	; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 27864                                  	; 20/05/2019 - Retro DOS v4.0
 27865                                  RELEASE:
 27866 00004F9B 31D2                            XOR     DX,DX
 27867                                  
 27868                                  	;entry	RELBLKS
 27869                                  RELBLKS:
 27870                                  
 27871                                  ;   Enter here with DX=0FFFFH to put an end-of-file mark in the first cluster
 27872                                  ;   and free the rest in the chain.
 27873                                  
 27874 00004F9D E87F06                  	call	UNPACK
 27875 00004FA0 7224                    	jc	short RELEASE_flush
 27876 00004FA2 7422                    	jz	short RELEASE_flush
 27877 00004FA4 89F8                            MOV     AX,DI
 27878 00004FA6 52                              PUSH    DX
 27879 00004FA7 E8C906                  	call	PACK
 27880 00004FAA 5A                              POP     DX
 27881 00004FAB 7219                    	jc	short RELEASE_flush
 27882 00004FAD 09D2                            OR      DX,DX
 27883 00004FAF 750B                            JNZ	short NO_DEALLOC	; Was putting EOF mark
 27884                                  	;;cmp	word [es:bp+1Eh],-1 ; MSDOS 3.3
 27885                                  	;cmp	word [es:bp+1Fh],-1 ; MSDOS 6.0
 27886 00004FB1 26837E1FFF              	CMP     word [ES:BP+DPB.FREE_CNT],-1 ; Free count valid?
 27887 00004FB6 7404                            JZ	short NO_DEALLOC	; No
 27888 00004FB8 26FF461F                        INC	word [ES:BP+DPB.FREE_CNT] ; Increase free count by 1
 27889                                  NO_DEALLOC:
 27890 00004FBC 89C3                            MOV     BX,AX
 27891 00004FBE 48                              dec     ax              ; check for "1"
 27892 00004FBF 7405                    	jz	short RELEASE_flush	; is last cluster of incomplete chain
 27893 00004FC1 E84406                  	call	IsEOF
 27894 00004FC4 72D5                            JB	short RELEASE	; Carry clear if JMP not taken
 27895                                  
 27896                                  	; 16/12/2022
 27897                                  ; 25/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 27898                                  ;%if 0
 27899                                  RELEASE_flush:
 27900                                  	; MSDOS 6.0
 27901 00004FC6 268A4600                	mov	al,[es:bp]
 27902                                  	;MOV	AL,[ES:BP+DPB.DRIVE]
 27903 00004FCA 56                      	push	si		; FLUSHBUF may trash these and we guarantee
 27904 00004FCB 51                      	push	cx		;  them to be preserved.
 27905 00004FCC 06                      	push	es
 27906 00004FCD 55                      	push	bp
 27907 00004FCE E86E0B                  	call	FLUSHBUF	; commit buffers for this drive
 27908 00004FD1 5D                      	pop	bp
 27909 00004FD2 07                      	pop	es
 27910 00004FD3 59                      	pop	cx
 27911 00004FD4 5E                      	pop	si
 27912                                  ;%endif
 27913                                  RET12:
 27914 00004FD5 C3                      	retn
 27915                                  
 27916                                  ;Break	<GETEOF -- Find the end of a file>
 27917                                  ;------------------------------------------------------------------------
 27918                                  ;
 27919                                  ; Procedure Name : GETEOF
 27920                                  ;
 27921                                  ; Inputs:
 27922                                  ;       ES:BP Points to DPB
 27923                                  ;       BX = Cluster in a file
 27924                                  ;       DS = CS
 27925                                  ; Outputs:
 27926                                  ;       BX = Last cluster in the file
 27927                                  ;       Carry set if error (currently user FAILed to I 24)
 27928                                  ; DI destroyed. No other registers affected.
 27929                                  ;
 27930                                  ;--------------------------------------------------------------------------
 27931                                  
 27932                                  GETEOF:
 27933 00004FD6 E84606                  	call	UNPACK
 27934 00004FD9 72FA                            jc	short RET12
 27935 00004FDB 53                              PUSH    BX
 27936 00004FDC 89FB                            MOV     BX,DI
 27937 00004FDE E82706                  	call	IsEOF
 27938 00004FE1 5B                              POP     BX
 27939 00004FE2 73F1                            JAE     short RET12
 27940 00004FE4 89FB                            MOV     BX,DI
 27941 00004FE6 EBEE                            JMP     short GETEOF
 27942                                  
 27943                                  ;============================================================================
 27944                                  ; FCB.ASM, MSDOS 6.0, 1991
 27945                                  ;============================================================================
 27946                                  ; 30/07/2018 - Retro DOS v3.0
 27947                                  ; 20/05/2019 - Retro DOS v4.0
 27948                                  
 27949                                  ;	TITLE	FCB - FCB parse calls for MSDOS
 27950                                  ;	NAME	FCB
 27951                                  
 27952                                  ;**	FCB.ASM - Low level routines for parsing names into FCBs and analyzing
 27953                                  ;		  filename characters
 27954                                  ;
 27955                                  ;	MakeFcb
 27956                                  ;	NameTrans
 27957                                  ;	PATHCHRCMP
 27958                                  ;	GetLet
 27959                                  ;	UCase
 27960                                  ;	GetLet3
 27961                                  ;	GetCharType
 27962                                  ;	TESTKANJ
 27963                                  ;	NORMSCAN
 27964                                  ;	DELIM
 27965                                  ;
 27966                                  ;	Revision history:
 27967                                  ;
 27968                                  ;		A000  version 4.00  Jan. 1988
 27969                                  ;	
 27970                                  ;	M048 - access FILE_UCASE_TAB using DS rather than SS.
 27971                                  
 27972                                  TableLook	EQU	-1
 27973                                  
 27974                                  SCANSEPARATOR	EQU	1
 27975                                  DRVBIT		EQU	2
 27976                                  NAMBIT		EQU	4
 27977                                  EXTBIT		EQU	8
 27978                                  
 27979                                  ;----------------------------------------------------------------------------
 27980                                  ;
 27981                                  ; Procedure : MakeFcb
 27982                                  ;
 27983                                  ;----------------------------------------------------------------------------
 27984                                  
 27985                                  	; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 27986                                  	; DOSCODE:8E77h (MSDOS 5.0, MSDOS.SYS)
 27987                                  MAKEFCB:
 27988                                  ;hkn; SS override
 27989 00004FE8 36C606[4E03]00          	MOV	BYTE [SS:SpaceFlag],0
 27990 00004FEE 30D2                    	XOR	DL,DL		; Flag--not ambiguous file name
 27991                                  	;test	al,2
 27992 00004FF0 A802                    	test	AL,DRVBIT	; Use current drive field if default?
 27993 00004FF2 7504                    	JNZ	short DEFDRV
 27994 00004FF4 26C60500                	MOV	BYTE [ES:DI],0	; No - use default drive
 27995                                  DEFDRV:
 27996 00004FF8 47                      	INC	DI
 27997 00004FF9 B90800                  	MOV	CX,8
 27998                                  	;test	al,4
 27999 00004FFC A804                    	test	AL,NAMBIT	; Use current name fields as default?
 28000 00004FFE 93                      	XCHG	AX,BX		; Save bits in BX
 28001 00004FFF B020                    	MOV	AL," "
 28002 00005001 7404                    	JZ	short FILLB	; If not, go fill with blanks
 28003 00005003 01CF                    	ADD	DI,CX
 28004 00005005 31C9                    	XOR	CX,CX		; Don't fill any
 28005                                  FILLB:
 28006 00005007 F3AA                    	REP	STOSB
 28007 00005009 B103                    	MOV	CL,3
 28008 0000500B F6C308                  	test	BL,EXTBIT	; Use current extension as default
 28009 0000500E 7404                    	JZ	short FILLB2
 28010 00005010 01CF                    	ADD	DI,CX
 28011 00005012 31C9                    	XOR	CX,CX
 28012                                  FILLB2:
 28013 00005014 F3AA                    	REP	STOSB
 28014 00005016 91                      	XCHG	AX,CX		; Put zero in AX
 28015 00005017 AB                      	STOSW
 28016 00005018 AB                      	STOSW			; Initialize two words after to zero
 28017 00005019 83EF10                  	SUB	DI,16		; Point back at start
 28018                                  	;test	bl,1
 28019 0000501C F6C301                  	test	BL,SCANSEPARATOR; Scan off separators if not zero
 28020 0000501F 7409                    	JZ	short SKPSPC
 28021 00005021 E88D00                  	CALL	SCANB		; Peel off blanks and tabs
 28022 00005024 E82701                  	CALL	DELIM		; Is it a one-time-only delimiter?
 28023 00005027 7504                    	JNZ	short NOSCAN
 28024 00005029 46                      	INC	SI		; Skip over the delimiter
 28025                                  SKPSPC:
 28026 0000502A E88400                  	CALL	SCANB		; Always kill preceding blanks and tabs
 28027                                  NOSCAN:
 28028 0000502D E8F500                  	CALL	GETLET
 28029 00005030 761E                    	JBE	short NODRV	; Quit if termination character
 28030 00005032 803C3A                  	CMP	BYTE [SI],":"	; Check for potential drive specifier
 28031 00005035 7519                    	JNZ	short NODRV
 28032 00005037 46                      	INC	SI		; Skip over colon
 28033 00005038 2C40                    	SUB	AL,"@"          ; Convert drive letter to drive number (A=1)
 28034 0000503A 760F                    	JBE	short BADDRV	; Drive letter out of range
 28035                                  
 28036 0000503C 50                      	PUSH	AX
 28037 0000503D E8371B                  	call	GetVisDrv
 28038 00005040 58                      	POP	AX
 28039 00005041 730A                    	JNC	short HAVDRV
 28040                                  
 28041                                  	; 20/05/2019 - Retro DOS v4.0
 28042                                  	; MSDOS 6.0
 28043                                  ;hkn; SS override
 28044 00005043 36803E[1006]1A          	CMP	byte [SS:DrvErr],error_not_DOS_disk ; 1Ah
 28045                                  					; if not FAT drive ;AN000;
 28046 00005049 7402                    	JZ	short HAVDRV		; assume ok	   ;AN000;
 28047                                  BADDRV:
 28048 0000504B B2FF                    	MOV	DL,-1
 28049                                  HAVDRV:
 28050 0000504D AA                      	STOSB			; Put drive specifier in first byte
 28051 0000504E 46                      	INC	SI
 28052 0000504F 4F                      	DEC	DI		; Counteract next two instructions
 28053                                  NODRV:
 28054 00005050 4E                      	DEC	SI		; Back up
 28055 00005051 47                      	INC	DI		; Skip drive byte
 28056                                  
 28057                                  	;entry	NORMSCAN
 28058                                  NORMSCAN:
 28059 00005052 B90800                  	MOV	CX,8
 28060 00005055 E82700                  	CALL	GETWORD 	; Get 8-letter file name
 28061 00005058 803C2E                  	CMP	BYTE [SI],"."
 28062 0000505B 7515                    	JNZ	short NODOT
 28063 0000505D 46                      	INC	SI		; Skip over dot if present
 28064                                  
 28065                                  	; MSDOS 6.0
 28066                                  ;hkn; SS override
 28067                                  	;TEST	word [SS:DOS34_FLAG],DBCS_VOLID2 ; 100h ;AN000;
 28068                                  	; 10/06/2019
 28069 0000505E 36F606[1206]01          	test	byte [SS:DOS34_FLAG+1],(DBCS_VOLID2>>8) ; 1
 28070 00005064 7406                    	JZ	short VOLOK				;AN000;
 28071 00005066 A4                      	MOVSB			; 2nd byte of DBCS	;AN000;
 28072 00005067 B90200                  	MOV	CX,2					;AN000;
 28073 0000506A EB03                    	JMP	SHORT contvol				;AN000;
 28074                                  VOLOK:
 28075 0000506C B90300                  	MOV	CX,3		; Get 3-letter extension
 28076                                  contvol:
 28077 0000506F E81300                  	CALL	MUSTGETWORD
 28078                                  NODOT:
 28079 00005072 88D0                    	MOV	AL,DL
 28080                                  
 28081                                  	; MSDOS 6.0
 28082                                  	;and	word [ss:DOS34_FLAG],0FEFFh
 28083                                  	; 18/12/2022
 28084 00005074 368026[1206]FE          	and	byte [ss:DOS34_FLAG+1],0FEh ; (~DBCS_VOLID2)>>8
 28085                                  	;and	word [ss:DOS34_FLAG],~DBCS_VOLID2 ; ### BUG FIX ###
 28086                                  
 28087 0000507A C3                      	retn
 28088                                  
 28089                                  NONAM:
 28090 0000507B 01CF                    	ADD	DI,CX
 28091 0000507D 4E                      	DEC	SI
 28092 0000507E C3                      	retn
 28093                                  
 28094                                  GETWORD:
 28095 0000507F E8A300                  	CALL	GETLET		
 28096 00005082 76F7                    	JBE	short NONAM	; Exit if invalid character
 28097 00005084 4E                      	DEC	SI
 28098                                  
 28099                                  ;	UGH!!! Horrible bug here that should be fixed at some point:
 28100                                  ;	If the name we are scanning is longer than CX, we keep on reading!
 28101                                  
 28102                                  MUSTGETWORD:
 28103 00005085 E89D00                  	CALL	GETLET
 28104                                  
 28105                                  ;	If spaceFlag is set then we allow spaces in a pathname
 28106                                  
 28107                                  ;IF NOT TABLELOOK
 28108                                  ;	JB	short FILLNAM  ; MSDOS 3.3
 28109                                  ;ENDIF
 28110 00005088 750C                    	JNZ	short MustCheckCX
 28111                                  
 28112                                  ;hkn; SS override
 28113 0000508A 36F606[4E03]FF          	test	BYTE [SS:SpaceFlag],0FFh
 28114 00005090 7419                    	JZ	short FILLNAM
 28115 00005092 3C20                    	CMP	AL," "
 28116 00005094 7515                    	JNZ	short FILLNAM
 28117                                  
 28118                                  MustCheckCX:
 28119 00005096 E3ED                    	JCXZ	MUSTGETWORD
 28120 00005098 49                      	DEC	CX
 28121 00005099 3C2A                    	CMP	AL,"*"          ; Check for ambiguous file specifier
 28122 0000509B 7504                    	JNZ	short NOSTAR
 28123 0000509D B03F                    	MOV	AL,"?"
 28124 0000509F F3AA                    	REP	STOSB
 28125                                  NOSTAR:
 28126 000050A1 AA                      	STOSB
 28127 000050A2 3C3F                    	CMP	AL,"?"
 28128 000050A4 75DF                    	JNZ	short MUSTGETWORD
 28129 000050A6 80CA01                  	OR	DL,1		; Flag ambiguous file name
 28130 000050A9 EBDA                    	JMP	short MUSTGETWORD
 28131                                  FILLNAM:
 28132 000050AB B020                    	MOV	AL," "
 28133 000050AD F3AA                    	REP	STOSB
 28134 000050AF 4E                      	DEC	SI
 28135 000050B0 C3                      	retn
 28136                                  
 28137                                  SCANB:
 28138 000050B1 AC                      	LODSB
 28139 000050B2 E8A100                  	CALL	SPCHK
 28140 000050B5 74FA                    	JZ	short SCANB
 28141 000050B7 4E                      	DEC	SI
 28142                                  scanb_retn:
 28143 000050B8 C3                      	retn
 28144                                  
 28145                                  ;----------------------------------------------------------------------------
 28146                                  ;
 28147                                  ; Procedure Name : NameTrans
 28148                                  ;
 28149                                  ; NameTrans is used by FindPath to scan off an element of a path. We must
 28150                                  ; allow spaces in pathnames
 28151                                  ;
 28152                                  ;   Inputs:	DS:SI points to start of path element
 28153                                  ;   Outputs:	Name1 has unpacked name, uppercased
 28154                                  ;		ES = DOSGroup
 28155                                  ;		DS:SI advanced after name
 28156                                  ;   Registers modified: DI,AX,DX,CX
 28157                                  ;
 28158                                  ;----------------------------------------------------------------------------
 28159                                  
 28160                                  	; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 28161                                  	; 20/05/2019 - Retro DOS v4.0
 28162                                  NameTrans:
 28163                                  ;hkn; SS override
 28164 000050B9 36C606[4E03]01          	MOV	BYTE [SS:SpaceFlag],1
 28165 000050BF 16                      	push	ss
 28166 000050C0 07                      	pop	es
 28167                                  
 28168                                  ;hkn; NAME1 is in DOSDATA
 28169 000050C1 BF[4B05]                	MOV	DI,NAME1
 28170 000050C4 57                      	PUSH	DI
 28171 000050C5 B82020                  	MOV	AX,'  '
 28172 000050C8 B90500                  	MOV	CX,5
 28173 000050CB AA                      	STOSB
 28174 000050CC F3AB                    	REP	STOSW		; Fill "FCB" at NAME1 with spaces
 28175 000050CE 30C0                    	XOR	AL,AL		; Set stuff for NORMSCAN
 28176 000050D0 88C2                    	MOV	DL,AL
 28177 000050D2 AA                      	STOSB
 28178 000050D3 5F                      	POP	DI
 28179                                  
 28180 000050D4 E87BFF                  	CALL	NORMSCAN
 28181                                  
 28182                                  ;hkn; SS override for NAME1
 28183 000050D7 36803E[4B05]E5          	CMP	byte [SS:NAME1],0E5H
 28184 000050DD 75D9                    	jnz	short scanb_retn
 28185 000050DF 36C606[4B05]05          	MOV	byte [SS:NAME1],5 ; Magic name translation
 28186 000050E5 C3                      	retn
 28187                                  
 28188                                  ;Break	<GETLET, DELIM -- CHECK CHARACTERS AND CONVERT>
 28189                                  ;============================================================================
 28190                                  
 28191                                  ; 20/05/2019 - Retro DOS v4.0
 28192                                  ; DOSCODE:8FD2h (MSDOS 6.21, MSDOS.SYS)
 28193                                  
 28194                                  ;If TableLook
 28195                                  
 28196                                  ;hkn; Table	SEGMENT
 28197                                  ;	PUBLIC	CharType
 28198                                  ;----------------------------------------------------------------------------
 28199                                  
 28200                                  ; Character type table for file name scanning
 28201                                  ; Table provides a mapping of characters to validity bits.
 28202                                  ; Four bits are provided for each character. Values 7Dh and above
 28203                                  ; have all bits set, so that part of the table is chopped off, and
 28204                                  ; the translation routine is responsible for screening these values.
 28205                                  ; The bit values are defined in DOSSYM.INC
 28206                                  
 28207                                  ;	      ; ^A and NUL
 28208                                  ;CharType:
 28209                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
 28210                                  ;	      ; ^C and ^B
 28211                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
 28212                                  ;	      ; ^E and ^D
 28213                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
 28214                                  ;	      ; ^G and ^F
 28215                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
 28216                                  ;	      ; TAB and BS
 28217                                  ;	 db   LOW ((NOT FFCB+FCHK+FDELIM+FSPCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
 28218                                  ;	      ; ^K and ^J
 28219                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
 28220                                  ;	      ; ^M and ^L
 28221                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
 28222                                  ;	      ; ^O and ^N
 28223                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
 28224                                  ;	      ; ^Q and ^P
 28225                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
 28226                                  ;	      ; ^S and ^R
 28227                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
 28228                                  ;	      ; ^U and ^T
 28229                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
 28230                                  ;	      ; ^W and ^V
 28231                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
 28232                                  ;	      ; ^Y and ^X
 28233                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
 28234                                  ;	      ; ESC and ^Z
 28235                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
 28236                                  ;	      ; ^] and ^;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
 28238                                  ;	      ; ^_ and ^^
 28239                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
 28240                                  ;	      ; ! and SPACE
 28241                                  ;	 db   LOW (NOT FCHK+FDELIM+FSPCHK)
 28242                                  ;	      ; # and "
 28243                                  ;	 db   LOW (NOT FFCB+FCHK)
 28244                                  ;	      ; $ - )
 28245                                  ;	 db   3 dup (0FFh)
 28246                                  ;	      ; + and *
 28247                                  ;	 db   LOW ((NOT FFCB+FCHK+FDELIM) SHL 4) OR 0Fh
 28248                                  ;	      ; - and '
 28249                                  ;	 db   NOT (FFCB+FCHK+FDELIM)
 28250                                  ;	      ; / and .
 28251                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FCHK) AND 0Fh
 28252                                  ;	      ; 0 - 9
 28253                                  ;	 db   5 dup (0FFh)
 28254                                  ;	      ; ; and :
 28255                                  ;	 db   LOW ((NOT FFCB+FCHK+FDELIM) SHL 4) OR LOW (NOT FFCB+FCHK+FDELIM) AND 0Fh
 28256                                  ;	      ; = and <
 28257                                  ;	 db   LOW ((NOT FFCB+FCHK+FDELIM) SHL 4) OR LOW (NOT FFCB+FCHK+FDELIM) AND 0Fh
 28258                                  ;	      ; ? and >
 28259                                  ;	 db   NOT FFCB+FCHK+FDELIM
 28260                                  ;	      ; A - Z
 28261                                  ;	 db   13 dup (0FFh)
 28262                                  ;	      ; \ and [
 28263                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR 0Fh
 28264                                  ;	      ; ^ and ]
 28265                                  ;	 db   LOW ((NOT FFCB+FCHK) SHL 4) OR LOW (NOT FFCB+FCHK) AND 0Fh
 28266                                  ;	      ; _ - {
 28267                                  ;	 db   15 dup (0FFh)
 28268                                  ;	      ; } and |
 28269                                  ;	 db   NOT FFCB+FCHK+FDELIM
 28270                                  
 28271                                  ;CharType_last equ ($ - CharType) * 2	; This is the value of the last
 28272                                  ;					; character in the table
 28273                                  
 28274                                  ;FCHK	equ 1		; normal name char, no chks needed
 28275                                  ;FDELIM	equ 2		; is a delimiter
 28276                                  ;FSPCHK	equ 4		; set if character is not a space or equivalent
 28277                                  ;FFCB	equ 8		; is valid in an FCB
 28278                                  
 28279                                  ; DOSCODE:8FD2h (MSDOS 6.21, MSDOS.SYS)
 28280                                  ;----------------------------------------------------------------------------
 28281                                  ; DOSCODE:8F76h (MSDOS 5.0, MSDOS.SYS)
 28282                                  
 28283                                  CharType: ; 63 bytes
 28284 000050E6 6666666606666666                db  66h, 66h, 66h, 66h, 06h, 66h, 66h, 66h ; 0-7
 28285 000050EE 6666666666666666        	db  66h, 66h, 66h, 66h, 66h, 66h, 66h, 66h ; 8-15
 28286 000050F6 F8F6FFFFFF4FF46E        	db 0F8h,0F6h,0FFh,0FFh,0FFh, 4Fh,0F4h, 6Eh ; 16-23
 28287 000050FE FFFFFFFFFF4444F4        	db 0FFh,0FFh,0FFh,0FFh,0FFh, 44h, 44h,0F4h ; 24-31
 28288 00005106 FFFFFFFFFFFFFFFF        	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh ; 32-39
 28289 0000510E FFFFFFFFFF6F66FF        	db 0FFh,0FFh,0FFh,0FFh,0FFh, 6Fh, 66h,0FFh ; 40-47
 28290 00005116 FFFFFFFFFFFFFFFF        	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh ; 48-55
 28291 0000511E FFFFFFFFFFFFF4          	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0F4h	   ; 56-62
 28292                                  
 28293                                  CharType_last equ ($ - CharType) * 2
 28294                                  
 28295                                  ; Offset 12CAh of IBMDOS.COM (MSDOS 3.3), 1987
 28296                                  ;----------------------------------------------------------------------------
 28297                                  ;CharType:
 28298                                  ;       db 0F6h,0F6h,0F6h,0F6h,0F6h,0F6h,0F6h,0F6h
 28299                                  ;	db 0F6h,0F0h,0F6h,0F6h,0F6h,0F6h,0F6h,0F6h
 28300                                  ;	db 0F6h,0F6h,0F6h,0F6h,0F6h,0F6h,0F6h,0F6h
 28301                                  ;	db 0F6h,0F6h,0F6h,0F6h,0F6h,0F6h,0F6h,0F6h
 28302                                  ;	db 0F8h,0FFh,0F6h,0FFh,0FFh,0FFh,0FFh,0FFh
 28303                                  ;	db 0FFh,0FFh,0FFh,0F4h,0F4h,0FFh,0FEh,0F6h
 28304                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 28305                                  ;	db 0FFh,0FFh,0F4h,0F4h,0F4h,0F4h,0F4h,0FFh
 28306                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 28307                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 28308                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 28309                                  ;	db 0FFh,0FFh,0FFh,0F6h,0F6h,0F6h,0FFh,0FFh
 28310                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 28311                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 28312                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 28313                                  ;	db 0FFh,0FFh,0FFh,0FFh,0F4h,0FFh,0FFh,0FFh
 28314                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 28315                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 28316                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 28317                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 28318                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 28319                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 28320                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 28321                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 28322                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 28323                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 28324                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 28325                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 28326                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 28327                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 28328                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 28329                                  ;	db 0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh,0FFh
 28330                                  
 28331                                  ;hkn; Table	ENDS
 28332                                  
 28333                                  ;ENDIF
 28334                                  
 28335                                  ; 20/05/2019 - Retro DOS v4.0
 28336                                  ; DOSCODE:9011h (MSDOS 6.21, MSDOS.SYS)
 28337                                  
 28338                                  ; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 28339                                  ; DOSCODE:8FB5h (MSDOS 5.0, MSDOS.SYS)
 28340                                  
 28341                                  ;----------------------------------------------------------------------------
 28342                                  ;
 28343                                  ; Procedure Names : GetLet, UCase, GetLet3
 28344                                  ;
 28345                                  ; These routines take a character, convert it to upper case, and check
 28346                                  ; for delimiters.  Three different entry points:
 28347                                  ;	GetLet -  DS:[SI] = character to convert
 28348                                  ;	UCase  -  AL = character to convert
 28349                                  ;	GetLet3 - AL = character
 28350                                  ;		  [BX] = translation table to use
 28351                                  ;
 28352                                  ;	Exit (in all cases) : AL = upper case character
 28353                                  ;			      CY set if char is control char other than TAB
 28354                                  ;			      ZF set if char is a delimiter
 28355                                  ;	Uses : AX, flags
 28356                                  ;
 28357                                  ; NOTE: This routine exists in a fast table lookup version, and a slow
 28358                                  ; inline version.  Return with carry set is only possible in the inline
 28359                                  ; version. The table lookup version is the one in use.
 28360                                  ;
 28361                                  ;----------------------------------------------------------------------------
 28362                                  
 28363                                  ; This entry point has character at [SI]
 28364                                  
 28365                                  	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 5517h
 28366                                  GETLET:	
 28367 00005125 AC                      	LODSB
 28368                                  
 28369                                  ; This entry point has character in AL
 28370                                  
 28371                                  	;entry	UCase
 28372                                  UCase:	
 28373                                  	; 09/08/2018
 28374                                  	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 5518h
 28375                                  _UCase:
 28376 00005126 53                      	PUSH	BX
 28377 00005127 BB[310B]                	MOV	BX,FILE_UCASE_TAB+2
 28378                                  
 28379                                  ; Convert the character in AL to upper case
 28380                                  
 28381                                  gl_0:
 28382 0000512A 3C61                    	CMP	AL,"a"
 28383 0000512C 7214                    	JB	short gl_2	; Already upper case, go check type
 28384 0000512E 3C7A                    	CMP	AL,"z"
 28385 00005130 7702                    	JA	short gl_1
 28386 00005132 2C20                    	SUB	AL,20H		; Convert to upper case
 28387                                  
 28388                                  ; Map European character to upper case
 28389                                  
 28390                                  gl_1:
 28391 00005134 3C80                    	CMP	AL,80H
 28392 00005136 720A                    	JB	short gl_2	; Not EuroChar, go check type
 28393 00005138 2C80                    	SUB	AL,80H		; translate to upper case with this index
 28394                                  
 28395                                  	; M048 - Start 
 28396                                  	; Lantastic call Ucase thru int 2f without setting SS to DOSDATA.
 28397                                  	; So we shall set up DS and to access FILE_UCASE_TAB in BX and also 
 28398                                  	; preserve it.
 28399                                  
 28400                                  	; 09/08/2018 - Retro DOS v3.0
 28401                                  	; MSDOS 3.3
 28402                                  	;;XLAT	BYTE [CS:BX]	; ds as file_ucase_tab is in DOSDATA
 28403                                  	;CS	XLAT
 28404                                  
 28405                                  	; 20/05/2019 - Retro DOS v4.0
 28406                                  
 28407                                  	; MSDOS 6.0
 28408 0000513A 1E                      	push	ds
 28409                                  	;getdseg <ds>
 28410 0000513B 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
 28411 00005140 D7                      	XLAT			; ds as file_ucase_tab is in DOSDATA
 28412 00005141 1F                      	pop	ds
 28413                                  
 28414                                  	; M048 - End
 28415                                  
 28416                                  ; Now check the type
 28417                                  
 28418                                  ;If TableLook
 28419                                  gl_2:
 28420                                  	; 20/05/2019 - Retro DOS v4.0
 28421 00005142 50                      	PUSH	AX
 28422                                  
 28423                                  	; MSDOS 3.3
 28424                                  	;mov	bx,CharType
 28425                                  	;; 09/08/2018
 28426                                  	;;xlat	byte [cs:bx]
 28427                                  	;cs	xlat	
 28428                                  	
 28429                                  	; MSDOS 6.0
 28430 00005143 E81800                  	CALL	GetCharType	; returns type flags in AL
 28431                                  	
 28432                                  	;test	al,1	
 28433 00005146 A801                    	TEST	AL,FCHK 	; test for normal character
 28434 00005148 58                      	POP	AX
 28435 00005149 5B                      	POP	BX
 28436 0000514A C3                      	RETN
 28437                                  
 28438                                  ; This entry has character in AL and lookup table in BX
 28439                                  
 28440                                  	; MSDOS 6.0
 28441                                  ;	;entry GetLet3
 28442                                  GETLET3: ; 10/08/2018
 28443 0000514B 53                      	PUSH	BX
 28444 0000514C EBDC                    	JMP	short gl_0
 28445                                  ;ELSE
 28446                                  ;
 28447                                  ;gl_2:
 28448                                  ;	POP	BX
 28449                                  ;	CMP	AL,"."
 28450                                  ;	retz
 28451                                  ;	CMP	AL,'"'
 28452                                  ;	retz
 28453                                  ;	CALL	PATHCHRCMP
 28454                                  ;	retz
 28455                                  ;	CMP	AL,"["
 28456                                  ;	retz
 28457                                  ;	CMP	AL,"]"
 28458                                  ;	retz
 28459                                  ;ENDIF
 28460                                  
 28461                                  ;---------------------------------------------------------------------
 28462                                  ;
 28463                                  ; DELIM - check if character is a delimiter
 28464                                  ;	Entry : AX = character to check
 28465                                  ;	Exit  : ZF set if character is not a delimiter
 28466                                  ;	Uses  : Flags
 28467                                  ;
 28468                                  ;--------------------------------------------------------------------
 28469                                  
 28470                                  	;entry	DELIM
 28471                                  DELIM:
 28472                                  ;IF TableLook
 28473                                  	; 20/05/2019 - Retro DOS v4.0
 28474 0000514E 50                      	PUSH	AX
 28475                                  
 28476                                  	; MSDOS 3.3
 28477                                  	;push	bx
 28478                                  	;mov	bx,CharType
 28479                                  	;;09/08/2018
 28480                                  	;;xlat	byte [cs:bx]
 28481                                  	;cs	xlat
 28482                                  	;pop	bx
 28483                                  
 28484                                  	; MSDOS 6.0
 28485 0000514F E80C00                  	CALL	GetCharType
 28486                                  	
 28487                                  	;test	al,2
 28488 00005152 A802                    	TEST	AL,FDELIM
 28489 00005154 58                      	POP	AX
 28490 00005155 C3                      	RETN
 28491                                  ;ELSE
 28492                                  ;	CMP	AL,":"
 28493                                  ;	retz
 28494                                  ;
 28495                                  ;	CMP	AL,"<"
 28496                                  ;	retz
 28497                                  ;	CMP	AL,"|"
 28498                                  ;	retz
 28499                                  ;	CMP	AL,">"
 28500                                  ;	retz
 28501                                  ;
 28502                                  ;	CMP	AL,"+"
 28503                                  ;	retz
 28504                                  ;	CMP	AL,"="
 28505                                  ;	retz
 28506                                  ;	CMP	AL,";"
 28507                                  ;	retz
 28508                                  ;	CMP	AL,","
 28509                                  ;	retz
 28510                                  ;ENDIF
 28511                                  
 28512                                  ;-------------------------------------------------------------------------
 28513                                  ;
 28514                                  ;  SPCHK - checks to see if a character is a space or equivalent
 28515                                  ;	Entry : AL = character to check
 28516                                  ;	Exit  : ZF set if character is a space
 28517                                  ;	Uses  : flags
 28518                                  ;
 28519                                  ;-------------------------------------------------------------------------
 28520                                  
 28521                                  	;entry SPCHK
 28522                                  SPCHK:
 28523                                  ;IF TableLook
 28524                                  	; 20/05/2019 - Retro DOS v4.0
 28525 00005156 50                      	PUSH	AX
 28526                                  
 28527                                  	; MSDOS 3.3
 28528                                  	;push	bx
 28529                                  	;mov	bx,CharType
 28530                                  	;; 09/08/2018
 28531                                  	;;xlat	byte [cs:bx]
 28532                                  	;cs	xlat
 28533                                  	;pop	bx
 28534                                  
 28535                                  	; MSDOS 6.0
 28536 00005157 E80400                  	CALL	GetCharType
 28537                                  	
 28538                                  	;test	al,4
 28539 0000515A A804                    	TEST	AL,FSPCHK
 28540 0000515C 58                      	POP	AX
 28541 0000515D C3                      	RETN
 28542                                  ;ELSE
 28543                                  ;	CMP	AL,9		; Filter out tabs too
 28544                                  ;	retz
 28545                                  ;; WARNING! " " MUST be the last compare
 28546                                  ;	CMP	AL," "
 28547                                  ;	return
 28548                                  ;ENDIF
 28549                                  
 28550                                  ;-------------------------------------------------------------------------
 28551                                  ;
 28552                                  ;  GetCharType - return flag bits indicating character type
 28553                                  ;	Bits are defined in DOSSYM.INC. Uses lookup table
 28554                                  ;	defined above at label CharType.
 28555                                  ;
 28556                                  ;	Entry : AL = character to return type flags for
 28557                                  ;	Exit  : AL = type flags
 28558                                  ;	Uses  : AL, flags
 28559                                  ;
 28560                                  ;-------------------------------------------------------------------------
 28561                                  
 28562                                  	; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 28563                                  
 28564                                  	; 20/05/2019 - Retro DOS v4.0
 28565                                  	; MSDOS 6.0
 28566                                  GetCharType:
 28567                                  	;cmp	al,7Eh
 28568 0000515E 3C7E                    	cmp	al,CharType_last 	; beyond end of table?
 28569 00005160 7316                    	jae	short gct_90		; return standard value
 28570                                  
 28571 00005162 53                      	push	bx
 28572 00005163 BB[E650]                	mov	bx,CharType		; load lookup table
 28573 00005166 D0E8                    	shr	al,1			; adjust for half-byte table entry size
 28574                                  	;xlat	cs:[bx] 		; get flags
 28575 00005168 2ED7                    	cs	xlat	
 28576 0000516A 5B                      	pop	bx
 28577                                  
 28578                                  ; carry clear from previous shift means we want the low nibble.  Otherwise
 28579                                  ; we have to shift the flags down to the low nibble
 28580                                  
 28581 0000516B 7308                    	jnc	short gct_80		; carry clear, no shift needed
 28582                                  
 28583 0000516D D0E8                    	shr	al,1			; we want high nibble, shift it down
 28584 0000516F D0E8                    	shr	al,1
 28585 00005171 D0E8                    	shr	al,1
 28586 00005173 D0E8                    	shr	al,1
 28587                                  gct_80:
 28588 00005175 240F                    	and	al,0Fh			; clear the unused nibble
 28589 00005177 C3                      	retn
 28590                                  gct_90:
 28591 00005178 B00F                    	mov	al,0Fh			; set all flags
 28592 0000517A C3                      	retn
 28593                                  
 28594                                  ;----------------------------------------------------------------------------
 28595                                  ;
 28596                                  ; Procedure : PATHCHRCMP
 28597                                  ;
 28598                                  ;----------------------------------------------------------------------------
 28599                                  
 28600                                  PATHCHRCMP:
 28601 0000517B 3C2F                    	CMP	AL,'/'
 28602 0000517D 7606                    	JBE	short PathRet
 28603 0000517F 3C5C                    	CMP	AL,'\'
 28604 00005181 C3                      	retn
 28605                                  GotFor:
 28606 00005182 B05C                    	MOV	AL,'\'
 28607 00005184 C3                      	retn
 28608                                  PathRet:
 28609 00005185 74FB                    	JZ	short GotFor
 28610 00005187 C3                      	retn
 28611                                  
 28612                                  ;============================================================================
 28613                                  ; MSCRTLC.ASM, MSDOS 6.0, 1991
 28614                                  ;============================================================================
 28615                                  ; 30/07/2018 - Retro DOS v3.0
 28616                                  ; 29/04/2019 - Retro DOS v4.0
 28617                                  
 28618                                  ; 15/03/2018 - Retro DOS v2.0 (MSDOS 2.11, CTRLC.ASM, 1983)
 28619                                  
 28620                                  ;**	MSCTRLC.ASM - ^C and error handler for MSDOS
 28621                                  
 28622                                  ;	TITLE	Control C detection, Hard error and EXIT routines
 28623                                  ;	NAME	IBMCTRLC
 28624                                  
 28625                                  ;**	Low level routines for detecting special characters on CON input,
 28626                                  ;	the ^C exit/int code, the Hard error INT 24 code, the
 28627                                  ;	process termination code, and the INT 0 divide overflow handler.
 28628                                  ;
 28629                                  ;	FATAL
 28630                                  ;	FATAL1
 28631                                  ;	reset_environment
 28632                                  ;	DSKSTATCHK
 28633                                  ;	SPOOLINT
 28634                                  ;	STATCHK
 28635                                  ;	CNTCHAND
 28636                                  ;	DIVOV
 28637                                  ;	CHARHARD
 28638                                  ;	HardErr
 28639                                  ;
 28640                                  ;	Revision history:
 28641                                  ;
 28642                                  ;	    AN000	version 4.0   Jan 1988
 28643                                  ;	    A002	PTM    -- dir >lpt3 hangs
 28644                                  ;	    A003	PTM 3957- fake version for IBMCAHE.COM
 28645                                  ;
 28646                                  ; 	M011: NEC's 8086 clone chip uses Intel's undocumented bit number in
 28647                                  ;	      flags register. In order to return to user normally DOS used to
 28648                                  ;	      move F202 into flags, which sets bit number 1 in flags uncondit-
 28649                                  ;	      ionally. Now it is modified to maintain the state of bit 1.
 28650                                  ;
 28651                                  ; 	M024: suppressed fail and ignore options if not in the middle of int 
 28652                                  ;	      24 and if Ctrl P or ctrl printscrn is pressed in routine 
 28653                                  ;	      charhard.
 28654                                  
 28655                                  ; 29/04/2019 - Retro DOS v4.0
 28656                                  	; MSDOS 6.0
 28657                                  ;		public	LowInt23Addr		
 28658                                  LowInt23Addr: ;	LABEL	DWORD
 28659 00005188 [CD10]0000              	DW	LowInt23, 0
 28660                                  
 28661                                  ;		public	LowInt24Addr
 28662                                  LowInt24Addr: ;	LABEL	DWORD
 28663 0000518C [E110]0000              	DW	LowInt24, 0
 28664                                  
 28665                                  ;		public	LowInt28Addr
 28666                                  LowInt28Addr: ;	LABEL	DWORD
 28667 00005190 [F510]0000              	DW	LowInt28, 0
 28668                                  
 28669                                  ;Break	<Checks for ^C in CON I/O>
 28670                                  
 28671                                  ; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 28672                                  ; 05/05/2019 - Retro DOS v4.0
 28673                                  
 28674                                  ;---------------------------------------------------------------------------
 28675                                  ;
 28676                                  ; Procedure Name : DSKSTATCHK
 28677                                  ;
 28678                                  ; Check for ^C if only one level in
 28679                                  ;
 28680                                  ;---------------------------------------------------------------------------
 28681                                  
 28682                                          ;procedure DSKSTATCHK,NEAR ; Check for ^C if only one level in
 28683                                  
 28684                                  DSKSTATCHK:        
 28685                                  	;CMP	BYTE [INDOS],1
 28686 00005194 36803E[2103]01                  CMP     BYTE [SS:INDOS],1 ; 15/03/2018
 28687                                  	;retnz			; Do NOTHING
 28688                                  	; 16/12/2022
 28689 0000519A 7534                    	JNZ	SHORT _RET37 ; Retro DOS v2.0 - 04/03/2018         
 28690                                  	; 25/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 28691                                  	;jz	short _RET37 ; dskstatchk1
 28692                                  	;retn
 28693                                  ;_RET37:
 28694                                  ;dskstatchk1:
 28695 0000519C 51                      	PUSH    CX
 28696 0000519D 06                              PUSH    ES
 28697 0000519E 53                              PUSH    BX
 28698 0000519F 1E                              PUSH    DS
 28699 000051A0 56                              PUSH    SI
 28700                                          
 28701                                  	;PUSH	CS
 28702                                          ;POP	ES
 28703                                          ;PUSH	CS
 28704                                          ;POP	DS
 28705                                  
 28706 000051A1 8CD3                    	MOV	BX,SS		; SS is DOSDATA. ES:BX must be set up
 28707 000051A3 8EC3                    	MOV	ES,BX		; for deviocall2
 28708 000051A5 8EDB                    	MOV	DS,BX
 28709                                  
 28710                                  	; 16/12/2022
 28711                                  	; 07/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 28712                                  
 28713                                  	; 05/05/2019
 28714                                  	;MOV	BYTE [ss:DSKSTCOM],DEVRDND
 28715                                          ;MOV	BYTE [ss:DSKSTCALL],DRDNDHL
 28716                                  	;mov	word [ss:DSKSTST],0
 28717                                  
 28718                                  	; 16/12/2022
 28719                                  	; 25/06/2019
 28720 000051A7 C606[9403]05            	MOV	BYTE [DSKSTCOM],DEVRDND	 ; 5
 28721 000051AC C606[9203]0E                    MOV	BYTE [DSKSTCALL],DRDNDHL ; 14
 28722 000051B1 C706[9503]0000          	mov	word [DSKSTST],0
 28723                                  
 28724 000051B7 BB[9203]                        MOV     BX,DSKSTCALL
 28725                                  
 28726                                  	;LDS	SI,[ss:BCON]
 28727                                          ; 25/062019
 28728 000051BA C536[3200]              	lds	si,[BCON]
 28729                                  
 28730                                  ; 16/12/2022
 28731                                  ;	; 07/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 28732                                  ;	mov	byte [ss:DSKSTCOM],DEVRDND  ; 5
 28733                                  ;       mov	byte [ss:DSKSTCALL],DRDNDHL ; 14
 28734                                  ;	mov	word [ss:DSKSTST],0
 28735                                  ;	mov	bx,DSKSTCALL
 28736                                  ;	lds	si,[ss:BCON]
 28737                                  
 28738 000051BE E866F5                  	CALL	DEVIOCALL2
 28739                                   	; 15/03/2018
 28740                                  	;;test	word [ss:DSKSTST],200h
 28741                                          ;TEST	WORD [SS:DSKSTST],STBUI
 28742                                  	; 05/05/2019
 28743 000051C1 36F606[9603]02          	test	byte [ss:DSKSTST+1],(STBUI>>8) ; 2
 28744 000051C7 7408                    	jz	short _GotCh		; No characters available
 28745                                  
 28746 000051C9 30C0                            XOR     AL,AL                   ; Set zero
 28747                                  RET36:
 28748 000051CB 5E                              POP     SI
 28749 000051CC 1F                              POP     DS
 28750 000051CD 5B                              POP     BX
 28751 000051CE 07                              POP     ES
 28752 000051CF 59                              POP     CX
 28753                                  	; 16/12/2022
 28754                                  	; 25/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 28755                                  _RET37:
 28756 000051D0 C3                              RETN
 28757                                  
 28758                                  _GotCh:
 28759 000051D1 36A0[9F03]                      MOV     AL,[SS:DSKCHRET]	; SS override
 28760                                  
 28761 000051D5 3C03                            CMP     AL,"C"-"@" ; cmp al,3
 28762 000051D7 75F2                            JNZ     SHORT RET36
 28763 000051D9 36C606[9403]04                  MOV     BYTE [SS:DSKSTCOM],DEVRD
 28764 000051DF 36C606[9203]16                  MOV     BYTE [SS:DSKSTCALL],DRDWRHL
 28765 000051E5 36880E[9F03]                    MOV     [SS:DSKCHRET],CL
 28766                                  	; 09/09/2018
 28767 000051EA 36C706[9503]0000        	MOV	word [SS:DSKSTST],0
 28768 000051F1 36C706[A403]0100        	MOV	word [SS:DSKSTCNT],1
 28769 000051F8 E82CF5                  	CALL	DEVIOCALL2              ; Eat the ^C
 28770 000051FB 5E                              POP     SI
 28771 000051FC 1F                              POP     DS
 28772 000051FD 5B                              POP     BX                      ; Clean stack
 28773 000051FE 07                              POP     ES
 28774 000051FF 59                              POP     CX
 28775 00005200 E9D000                          JMP	CNTCHAND ; 10/08/2018
 28776                                  
 28777                                  	; 05/05/2019
 28778                                  NOSTOP:
 28779                                  	; MSDOS 6.0
 28780 00005203 3C10                    	CMP	AL,"P"-"@"
 28781 00005205 7509                    	JNZ	short check_next
 28782                                  				    	; SS override
 28783 00005207 36803E[900D]00          	CMP	BYTE [SS:SCAN_FLAG],0	; ALT_Q ?
 28784 0000520D 7406                    	JZ	short INCHKJ		; no
 28785 0000520F C3                      	retn
 28786                                  check_next:
 28787                                  	;IF	NOT TOGLPRN
 28788                                  	;CMP	AL,"N"-"@"
 28789                                  	;JZ	short INCHKJ
 28790                                  	;ENDIF
 28791                                  
 28792 00005210 3C03                    	CMP	AL,"C"-"@"
 28793 00005212 7401                    	JZ	short INCHKJ
 28794                                  check_end:
 28795 00005214 C3                      	retn
 28796                                  
 28797                                  	; MSDOS 3.3
 28798                                          ;CMP     AL,"P"-"@"  ; cmp al,16	
 28799                                          ;JZ	short INCHKJ
 28800                                  
 28801                                  	; 15/04/2018
 28802                                          ;;IF	NOT TOGLPRN
 28803                                          ;CMP	AL,"N"-"@"
 28804                                          ;JZ	SHORT INCHKJ
 28805                                          ;;ENDIF
 28806                                  	
 28807                                  	;CMP     AL,"C"-"@"  ; cmp al,3	
 28808                                          ;JZ	short INCHKJ
 28809                                  	;RETN
 28810                                  
 28811                                  	; 08/09/2018
 28812                                  INCHKJ:	; 10/08/2018
 28813 00005215 E9A500                  	JMP	INCHK
 28814                                  
 28815                                  ;----------------------------------------------------------------------------
 28816                                  ;
 28817                                  ; Procedure Name : SpoolInt
 28818                                  ;
 28819                                  ; SpoolInt - signal processes that the DOS is truly idle. We are allowed to
 28820                                  ; do this ONLY if we are working on a 1-12 system call AND if we are not in
 28821                                  ; the middle of an INT 24.
 28822                                  ;
 28823                                  ;----------------------------------------------------------------------------
 28824                                  
 28825                                  SPOOLINT:
 28826 00005218 9C                              PUSHF
 28827                                  	; 15/03/2018
 28828 00005219 36803E[5803]00                  CMP     BYTE [SS:IDLEINT],0	; SS override
 28829 0000521F 7423                            JZ      SHORT POPFRET
 28830 00005221 36803E[2003]00                  CMP     BYTE [SS:ERRORMODE],0
 28831 00005227 751B                            JNZ     SHORT POPFRET		;No spool ints in error mode
 28832                                  
 28833                                  	; 30/07/2018
 28834                                  
 28835                                  	; Note that we are going to allow an external program to issue system 
 28836                                  	; calls at this time. We MUST preserve IdleInt across this.
 28837                                  
 28838 00005229 36FF36[5803]            	PUSH	WORD [SS:IDLEINT]
 28839                                  
 28840                                  	; 05/05/2019 - Retro DOS v4.0
 28841                                   
 28842                                  	; MSDOS 6.0
 28843 0000522E 36803E[F711]00          	cmp	byte [SS:DosHasHMA],0	; Q: is dos running in HMA (M021)
 28844 00005234 7504                    	jne	short do_low_int28	; Y: the int must be done from low mem
 28845 00005236 CD28                    	INT	int_spooler  ; int 28h 	; N: Execute user int 28 handler
 28846 00005238 EB05                    	jmp	short spool_ret_addr
 28847                                  
 28848                                  do_low_int28:
 28849                                  	;call	far [ss:LowInt28Addr]
 28850 0000523A 2EFF1E[9051]            	call	far [cs:LowInt28Addr]	; 05/05/2019
 28851                                  
 28852                                  spool_ret_addr:
 28853                                  	;INT	int_spooler		; INT 28h
 28854                                  
 28855 0000523F 368F06[5803]            	POP	WORD [SS:IDLEINT]
 28856                                  POPFRET:
 28857 00005244 9D                              POPF
 28858                                  _RET18:  
 28859 00005245 C3                      	RETN
 28860                                  
 28861                                  ; 05/05/2019 - Retro DOS v4.0
 28862                                  ; DOSCODE:9137h (MSDOS 6.21, MSDOS.SYS)
 28863                                  ; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 28864                                  ; DOSCODE:90DBh (MSDOS 5.0, MSDOS.SYS)
 28865                                  
 28866                                  ;----------------------------------------------------------------------------
 28867                                  ;
 28868                                  ; Procedure Name : STATCHK
 28869                                  ;
 28870                                  ;----------------------------------------------------------------------------
 28871                                  
 28872                                  STATCHK:
 28873 00005246 E84BFF                          CALL	DSKSTATCHK              ; Allows ^C to be detected under
 28874                                                                          ; input redirection
 28875 00005249 53                              PUSH    BX
 28876 0000524A 31DB                            XOR     BX,BX
 28877 0000524C E890E4                          CALL	GET_IO_SFT
 28878 0000524F 5B                              POP     BX
 28879 00005250 72F3                            JC      SHORT _RET18
 28880                                  
 28881 00005252 B401                            MOV     AH,1
 28882 00005254 E8F9F2                          CALL	IOFUNC
 28883 00005257 74BF                            JZ      SHORT SPOOLINT
 28884 00005259 3C13                            CMP     AL,'S'-'@'
 28885 0000525B 75A6                            JNZ     SHORT NOSTOP
 28886                                  
 28887                                  	; 05/05/2019
 28888                                  	; MSDOS 6.0			; SS override
 28889 0000525D 36803E[900D]00          	CMP	BYTE [SS:SCAN_FLAG],0	; AN000; ALT_R ?
 28890 00005263 75AF                    	JNZ	short check_end		; AN000; yes
 28891                                  
 28892 00005265 30E4                            XOR     AH,AH
 28893 00005267 E8E6F2                          CALL	IOFUNC                  ; Eat Cntrl-S
 28894 0000526A EB4A                            JMP     SHORT PAUSOSTRT
 28895                                  PRINTOFF:
 28896                                  PRINTON:
 28897 0000526C 36F616[FE02]            	NOT	BYTE [SS:PFLAG] ; 14/03/2018
 28898                                  
 28899                                  	; 30/07/2018 - Retro DOS v3.0
 28900 00005271 53                      	PUSH	BX
 28901 00005272 BB0400                  	MOV	BX,4
 28902 00005275 E867E4                  	call	GET_IO_SFT
 28903 00005278 5B                      	POP	BX
 28904 00005279 72CA                    	jc	short _RET18
 28905 0000527B 06                      	PUSH	ES
 28906 0000527C 57                      	PUSH	DI
 28907 0000527D 1E                      	PUSH	DS
 28908 0000527E 07                      	POP	ES
 28909 0000527F 89F7                    	MOV	DI,SI			; ES:DI -> SFT
 28910                                  	;test	word [es:di+5],800h
 28911                                  	;TEST	word [ES:DI+SF_ENTRY.sf_flags],sf_net_spool
 28912                                  	; 05/05/2019
 28913 00005281 26F6450608              	test	byte [ES:DI+SF_ENTRY.sf_flags+1],(sf_net_spool>>8)
 28914 00005286 7418                    	JZ	short NORM_PR 		; Not redirected, echo is OK
 28915                                  
 28916                                  	;Callinstall NetSpoolEchoCheck,MultNet,38,<AX>,<AX> 
 28917                                  					; See if allowed
 28918 00005288 50                      	push	ax
 28919 00005289 B82611                  	mov	ax,1126h
 28920 0000528C CD2F                    	int	2Fh	; Multiplex - NETWORK REDIRECTOR - ???
 28921                                  			; Return: CF set on error, AX = error code
 28922                                  			; STACK unchanged
 28923 0000528E 58                      	pop	ax
 28924                                  
 28925 0000528F 730F                    	JNC	short NORM_PR 		; Echo is OK
 28926                                  
 28927                                  					; SS override
 28928 00005291 36C606[FE02]00          	MOV	BYTE [SS:PFLAG],0	; If not allowed, disable echo
 28929                                  
 28930                                  	;Callinstall NetSpoolClose,MultNet,36,<AX>,<AX> ; and close
 28931                                  
 28932 00005297 50                      	push    ax
 28933 00005298 B82411                  	mov     ax,1124h
 28934 0000529B CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - ???
 28935                                  			; ES:DI -> SFT, SS = DOS CS
 28936 0000529D 58                      	pop     ax
 28937                                  
 28938 0000529E EB10                    	JMP	SHORT RETP6
 28939                                  NORM_PR:
 28940 000052A0 36803E[FE02]00          	CMP	BYTE [SS:PFLAG],0	; SS override
 28941 000052A6 7505                    	JNZ	short PRNOPN
 28942 000052A8 E800F4                  	call	DEV_CLOSE_SFT
 28943 000052AB EB03                    	JMP	SHORT RETP6
 28944                                  PRNOPN:
 28945 000052AD E8F3F3                  	call	DEV_OPEN_SFT
 28946                                  RETP6:
 28947 000052B0 5F                      	POP	DI
 28948 000052B1 07                      	POP	ES
 28949                                  STATCHK_RETN:
 28950 000052B2 C3                              RETN
 28951                                  PAUSOLP:
 28952 000052B3 E862FF                          CALL    SPOOLINT
 28953                                  PAUSOSTRT:
 28954 000052B6 B401                            MOV     AH,1
 28955 000052B8 E895F2                          CALL	IOFUNC
 28956 000052BB 74F6                            JZ      SHORT PAUSOLP
 28957                                  INCHK:
 28958 000052BD 53                              PUSH    BX
 28959 000052BE 31DB                            XOR     BX,BX
 28960 000052C0 E81CE4                          CALL	GET_IO_SFT
 28961 000052C3 5B                              POP     BX
 28962 000052C4 72EC                            JC      SHORT STATCHK_RETN ; 30/07/2018
 28963 000052C6 30E4                            XOR     AH,AH
 28964 000052C8 E885F2                          CALL	IOFUNC
 28965                                  	; 30/07/2018
 28966                                  	; MSDOS 3.3
 28967                                          ;CMP	AL,'P'-'@' ;cmp al,16
 28968                                          ;JNZ	SHORT NOPRINT
 28969                                  
 28970                                  	;cmp	byte [SS:SCAN_FLAG],0
 28971                                  	;JZ	SHORT PRINTON	
 28972                                  	;mov	byte [ss:SCAN_FLAG],0
 28973                                  
 28974                                  	; 05/05/2019
 28975                                  	; MSDOS 6.0
 28976 000052CB 3C10                    	CMP	AL,"P"-"@"
 28977                                  	;;;;  7/14/86	ALT_Q key fix
 28978 000052CD 749D                    	JZ	short PRINTON		; no! must be CTRL_P
 28979                                  ;NOPRINT:	
 28980                                  	;IF	NOT TOGLPRN
 28981                                  	;CMP	AL,"N"-"@"
 28982                                  	;JZ	short PRINTOFF
 28983                                  	;ENDIF
 28984 000052CF 3C03                    	CMP	AL,"C"-"@" ; cmp al,3 
 28985                                  	;retnz
 28986 000052D1 75DF                    	jnz	short STATCHK_RETN
 28987                                  
 28988                                  	; !! NOTE: FALL THROUGH !!
 28989                                  
 28990                                  ;---------------------------------------------------------------------------
 28991                                  ;
 28992                                  ; Procedure Name : CNTHAND ( CTRLC_C HANDLER )
 28993                                  ;
 28994                                  ; "^C" and CR/LF is printed. Then the user registers are restored and the
 28995                                  ; user CTRL-C handler is executed. At this point the top of the stack has 1)
 28996                                  ; the interrupt return address should the user CTRL-C handler wish to allow
 28997                                  ; processing to continue; 2) the original interrupt return address to the code
 28998                                  ; that performed the function call in the first place. If the user CTRL-C
 28999                                  ; handler wishes to continue, it must leave all registers unchanged and RET
 29000                                  ; (not IRET) with carry CLEAR. If carry is SET then an terminate system call
 29001                                  ; is simulated.
 29002                                  ;
 29003                                  ;---------------------------------------------------------------------------
 29004                                  
 29005                                  CNTCHAND:
 29006                                  	; MSDOS 6.0			; SS override
 29007                                  					; AN002; from RAWOUT
 29008                                  	;TEST	word [SS:DOS34_FLAG],CTRL_BREAK_FLAG  
 29009                                  	;JNZ	short around_deadlock 	; AN002;
 29010                                  
 29011                                  	; 05/05/2019 - Retro DOS v4.0
 29012                                  	; (MSDOS 6.21 MSDOS.SYS DOSCODE:91C4h, 29/12/2022)
 29013 000052D3 36F606[1206]02          	TEST	byte [SS:DOS34_FLAG+1],(CTRL_BREAK_FLAG>>8)  ; 2 
 29014 000052D9 7508                    	JNZ	short around_deadlock 	; AN002;
 29015                                  
 29016 000052DB B003                            MOV     AL,3			; Display "^C"
 29017 000052DD E86AC4                          CALL	BUFOUT
 29018 000052E0 E805C3                          CALL	CRLF
 29019                                  around_deadlock:
 29020 000052E3 16                              PUSH    SS
 29021 000052E4 1F                              POP     DS
 29022 000052E5 803E[5703]00                    CMP     BYTE [CONSWAP],0
 29023 000052EA 7403                            JZ      SHORT NOSWAP
 29024 000052EC E85AE0                          CALL	SWAPBACK
 29025                                  NOSWAP:
 29026 000052EF FA                      	CLI				; Prepare to play with stack
 29027 000052F0 8E16[8605]              	MOV	SS,[USER_SS]		; User stack now restored
 29028 000052F4 8B26[8405]              	MOV	SP,[USER_SP]
 29029 000052F8 E85EB1                          CALL	restore_world       ; User registers now restored
 29030                                  
 29031                                  	; 30/07/2018 - Retro DOS v3.0 
 29032                                  	; MSDOS 3.3 (IBMDOS.COM - Offset 56ACh)
 29033                                          ; 14/03/2018 - Retro DOS v2.0
 29034                                  	;MOV	BYTE [CS:INDOS],0	
 29035                                          ;MOV	BYTE [CS:ERRORMODE],0
 29036                                          ;MOV	[CS:ConC_Spsave],SP
 29037                                  	;clc	;30/07/2018
 29038                                          ;INT	int_ctrl_c ; 23h    ; Execute user Ctrl-C handler
 29039                                  	;;int	23h	; DOS - CONTROL "C" EXIT ADDRESS
 29040                                  			; Return: return via RETF 2 with CF set
 29041                                  			; DOS will abort program with errorlevel 0
 29042                                  			; else
 29043                                  			; interrupted DOS call continues
 29044                                  
 29045                                  	; 05/05/2019 - Retro DOS v4.0
 29046                                  	; MSDOS 6.0 (MSDOS 6.21, MSDOS.SYS,91ECh) 
 29047                                  
 29048                                  	; CS was used to address these variables. We have to use DOSDATA
 29049                                  	
 29050 000052FB 07                      	pop	es ; *	; MSDOS 6.21 (MSDOS.SYS, DOSCODE:91ECh)
 29051                                  			; (pop es, after 'call restore_world')	
 29052 000052FC 1E                      	push	ds
 29053                                  	;getdseg <ds>			; ds -> dosdata
 29054 000052FD 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
 29055 00005302 C606[2103]00            	mov	byte [INDOS],0		; Go to known state
 29056 00005307 C606[2003]00            	mov	byte [ERRORMODE],0
 29057 0000530C 8926[3203]              	mov	[ConC_Spsave],SP	; save his SP
 29058                                  	; User SP has changed because of push. Adjust for it
 29059 00005310 8306[3203]02            	add	word [ConC_Spsave],2
 29060                                  
 29061 00005315 803E[F711]00            	cmp	byte [DosHasHMA],0	; Q: is dos running in HMA (M021)
 29062 0000531A 1F                       	pop	ds	; restore ds
 29063 0000531B 7505                    	jne	short do_low_int23	; Y: the int must be done from low mem
 29064 0000531D F8                      	CLC				
 29065 0000531E CD23                    	INT	int_ctrl_c  ; int 23h	; N: Execute user Ctrl-C handler
 29066 00005320 EB06                    	jmp	short ctrlc_ret_addr
 29067                                  
 29068                                  	; 05/05/2019
 29069                                  do_low_int23:
 29070 00005322 F8                      	clc
 29071 00005323 2EFF1E[8851]            	call	far [cs:LowInt23Addr]	
 29072                                  
 29073                                  	; 30/07/2018 
 29074                                  
 29075                                  	; MSDOS 3.3 (IBMDOS.COM - Offset 56C0h)
 29076                                  
 29077                                  ; The user has returned to us. The circumstances we allow are:
 29078                                  ;
 29079                                  ;   IRET	We retry the operation by redispatching the system call
 29080                                  ;   CLC/RETF	POP the stack and retry
 29081                                  ;   ... 	Exit the current process with ^C exit
 29082                                  ;
 29083                                  ; User's may RETURN to us and leave interrupts on. 
 29084                                  ; Turn 'em off just to be sure
 29085                                  
 29086                                  ctrlc_ret_addr: ; 05/05/2019
 29087                                  
 29088 00005328 FA                      	CLI
 29089                                  
 29090                                  	; MSDOS 3.3 
 29091                                  	;MOV	[CS:USER_IN_AX],ax	; save the AX
 29092                                  	;PUSHF				; and the flags (maybe new call)
 29093                                  	;POP	AX
 29094                                  
 29095                                  	; 05/05/2019
 29096                                  	; MSDOS 6.0
 29097                                  
 29098                                  	; We have to use DOSDATA for these variables. Previously CS was used 
 29099                                  
 29100 00005329 50                      	push	ax
 29101 0000532A 8CD8                    	mov	ax,ds
 29102                                  	;getdseg <ds>			; ds -> dosdata
 29103 0000532C 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
 29104 00005331 A3[0A0D]                	mov	[TEMPSEG],ax
 29105 00005334 58                      	pop	ax
 29106 00005335 A3[3A03]                	MOV	[USER_IN_AX],ax		; save the AX
 29107 00005338 9C                      	pushf				; and the flags (maybe new call)
 29108 00005339 58                      	pop	ax
 29109                                  
 29110                                  ; See if the input stack is identical to the output stack
 29111                                  
 29112                                  	; MSDOS 3.3
 29113                                  	;CMP	SP,[CS:ConC_Spsave]
 29114                                  	;JNZ     SHORT ctrlc_try_new ; current SP not the same as saved SP
 29115                                  
 29116                                  	; MSDOS 6.0
 29117 0000533A 3B26[3203]              	CMP	SP,[ConC_Spsave]
 29118 0000533E 750A                    	JNZ     SHORT ctrlc_try_new ; current SP not the same as saved SP
 29119                                  
 29120                                  ; Repeat the operation by redispatching the system call.
 29121                                  
 29122                                  ctrlc_repeat:
 29123                                  	; MSDOS 3.3
 29124                                  	;MOV	AX,[CS:USER_IN_AX]
 29125                                  	; 05/05/2019
 29126                                  	; MSDOS 6.0
 29127 00005340 A1[3A03]                	mov	ax,[USER_IN_AX]
 29128 00005343 8E1E[0A0D]              	mov	ds,[TEMPSEG]		; restore ds and original sp
 29129                                  	; MSDOS 3.3 & MSDOS 6.0 
 29130                                  	;transfer COMMAND
 29131                                  COMMANDJ:
 29132 00005347 E9C2AF                  	JMP	COMMAND
 29133                                  
 29134                                  ; The current SP is NOT the same as the input SP. Presume that he 
 29135                                  ; RETF'd leaving some flags on the stack and examine the input
 29136                                  
 29137                                  ctrlc_try_new:
 29138 0000534A 83C402                  	ADD	SP,2			; pop those flags
 29139                                  	;;test	ax,1
 29140                                  	;TEST	AX,f_Carry		; did he return with carry?
 29141 0000534D A801                    	test	al,f_Carry ; test al,1
 29142 0000534F 74EF                    	JZ	short ctrlc_repeat	; no carry set, just retry
 29143                                  
 29144                                  	; MSDOS 6.0
 29145 00005351 8E1E[0A0D]              	mov	ds,[TEMPSEG]		; restore ds
 29146                                  
 29147                                  	; Well...  time to abort the user.  
 29148                                  	; Signal a ^C exit and use the EXIT system call..
 29149                                  
 29150                                  ctrlc_abort:
 29151                                  	; MSDOS 3.3
 29152                                          ;;MOV	AX,(EXIT SHL 8) + 0
 29153                                          ;MOV	AX, (EXIT*256) + 0  ; 4C00h
 29154                                  	;mov	byte [CS:DidCTRLC],0FFh ; 14/03/2018
 29155                                          ;transfer COMMAND	    ; give up by faking $EXIT
 29156                                  	;;JMP	SHORT COMMANDJ
 29157                                  	;JMP	COMMAND
 29158                                  
 29159                                  	; 05/05/2019 - Retro DOS v4.0
 29160                                  	; MSDOS 6.0
 29161 00005355 B8004C                  	MOV	AX,(EXIT<<8)+0  ; 4C00h
 29162 00005358 1E                      	push	ds
 29163                                  	;getdseg <ds>			; ds -> dosdata
 29164 00005359 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]	
 29165 0000535E C606[4D03]FF            	MOV	byte [DidCTRLC],-1 ; 0FFh
 29166 00005363 1F                      	pop	ds
 29167                                  	;transfer COMMAND		; give up by faking $EXIT
 29168 00005364 EBE1                    	JMP	SHORT COMMANDJ
 29169                                  	;JMP	COMMAND
 29170                                  
 29171                                  ;Break	<DIVISION OVERFLOW INTERRUPT>
 29172                                  ;----------------------------------------------------------------------------
 29173                                  ;
 29174                                  ; Procedure Name : DIVOV
 29175                                  ;
 29176                                  ; Default handler for division overflow trap
 29177                                  ;
 29178                                  ;----------------------------------------------------------------------------
 29179                                  
 29180                                  	; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 29181                                  DIVOV: 
 29182                                  	; 05/05/2019 - Retro DOS v4.0
 29183                                  	; 30/07/2018
 29184                                  	; 07/07/2018 - Retro DOS v3.0
 29185 00005366 BE[BA09]                	mov	si,DIVMES
 29186 00005369 2E8B1E[CD09]            	mov	bx,[cs:DivMesLen]
 29187                                  	;mov	ax,cs
 29188                                  	;mov	ss,ax
 29189                                  	; 05/05/2019
 29190                                  	;getdseg <ss>		; we are in an ISR, flag is CLI
 29191 0000536E 2E8E16[0700]            	mov	ss,[cs:DosDSeg]
 29192 00005373 BC[A007]                	mov     sp,AUXSTACK
 29193                                  	;call	RealDivOv ; MSDOS 3.3
 29194 00005376 E80200                  	call	_OUTMES ; MSDOS 6.0
 29195 00005379 EBDA                    	jmp	short ctrlc_abort  ; Use Ctrl-C abort on divide overflow
 29196                                  
 29197                                  ; 30/07/2018
 29198                                  
 29199                                  ; MSDOS 6.0
 29200                                  ;---------------------------------------------------------------------------
 29201                                  ;
 29202                                  ; Procedure Name : OutMes
 29203                                  ;
 29204                                  ;
 29205                                  ; OutMes: perform message output
 29206                                  ; Inputs:   SS:SI points to message
 29207                                  ;	    BX has message length
 29208                                  ; Outputs:  message to BCON
 29209                                  ;
 29210                                  ;Actually, cs:si points to the message now. The segment address is filled in
 29211                                  ;at init. time ([dskchret+2]). This will be temporarily changed to DOSCODE. 
 29212                                  ;NB. This procedure is called only from DIVOV. -SR
 29213                                  ;
 29214                                  ;---------------------------------------------------------------------------
 29215                                  
 29216                                  ;MSDOS 3.3
 29217                                  ;---------------------------------------------------------------------------
 29218                                  ; RealDivOv: perform actual divide overflow stuff.
 29219                                  ; Inputs:   none
 29220                                  ; Outputs:  message to BCON
 29221                                  ;---------------------------------------------------------------------------
 29222                                  
 29223                                  	; 05/05/2019 - Retro DOS v4.0
 29224                                  	; DOSCODE:926Ch (MSDOS 6.21, MSDOS.SYS)
 29225                                  
 29226                                  	; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 29227                                  	; DOSCODE:9210h (MSDOS 5.0, MSDOS.SYS)
 29228                                  
 29229                                  ;---------------------------------------------------------------------------
 29230                                  ;
 29231                                  ; Procedure Name : OutMes
 29232                                  ;
 29233                                  ; OutMes: perform message output
 29234                                  ; Inputs:   SS:SI points to message
 29235                                  ;	    BX has message length
 29236                                  ; Outputs:  message to BCON
 29237                                  ;
 29238                                  ;Actually, cs:si points to the message now. The segment address is filled in
 29239                                  ;at init. time ([dskchret+2]). This will be temporarily changed to DOSCODE. 
 29240                                  ;NB. This procedure is called only from DIVOV. -SR
 29241                                  ;
 29242                                  ;---------------------------------------------------------------------------
 29243                                  
 29244                                  	; 30/07/2018
 29245                                  	; MSDOS 6.0
 29246                                  _OUTMES:
 29247                                  	; MSDOS 3.3
 29248                                  ;RealDivOv:
 29249                                  	; 07/07/2018 - Retro DOS v3.0
 29250                                          ;Context ES
 29251 0000537B 16                      	push	ss ; 05/05/2019
 29252                                  	;PUSH	CS ; 30/07/2018		; get ES addressability
 29253 0000537C 07                      	POP	ES
 29254                                          ;Context DS
 29255 0000537D 16                      	push	ss ; 05/05/2019	
 29256                                  	;PUSH	CS ; 30/07/2018		; get DS addressability
 29257 0000537E 1F                      	POP	DS
 29258 0000537F C606[9403]08                    MOV     BYTE [DSKSTCOM],DEVWRT
 29259 00005384 C606[9203]16                    MOV     BYTE [DSKSTCALL],DRDWRHL
 29260 00005389 C706[9503]0000                  MOV     WORD [DSKSTST],0
 29261                                  	; BX = [DivMesLen] = 19
 29262 0000538F 891E[A403]                      MOV     [DSKSTCNT],BX
 29263 00005393 BB[9203]                        MOV     BX,DSKSTCALL
 29264 00005396 8936[A003]                      MOV     [DSKCHRET+1],SI		; transfer address (need an EQU)
 29265                                  	; 08/09/2018
 29266                                  	;mov	[DEVIOBUF_PTR],si
 29267                                  	; MSDOS 6.0
 29268                                  					; CS is used for string, fill in 
 29269                                  					; segment address 
 29270 0000539A 8C0E[A203]              	MOV	[DSKCHRET+3],CS
 29271                                  
 29272 0000539E C536[3200]                      LDS     SI,[BCON]
 29273 000053A2 E882F3                          CALL	DEVIOCALL2
 29274                                  
 29275                                  	;; 14/03/2018
 29276                                          ;;MOV	WORD [CS:DSKCHRET+1],DEVIOBUF
 29277                                  	;; 08/09/2018
 29278                                  	;mov	word [CS:DEVIOBUF_PTR],DEVIOBUF
 29279                                          ;MOV	WORD [CS:DSKSTCNT],1
 29280                                          
 29281                                  	; 05/05/2019 - Retro DOS v4.0 (MSDOS 6.0, MSDOS 6.21)
 29282                                  
 29283                                  	; ES still points to DOSDATA. ES is
 29284                                  					; not destroyed by deviocall2. So use
 29285                                  					; ES override.
 29286                                  
 29287 000053A5 26C706[A003][BC03]      	MOV	WORD [ES:DSKCHRET+1],DEVIOBUF
 29288 000053AC 26C706[A403]0100        	MOV	WORD [ES:DSKSTCNT],1
 29289                                  
 29290 000053B3 C3                      	RETN
 29291                                  
 29292                                  ;Break	<CHARHRD,HARDERR,ERROR -- HANDLE DISK ERRORS AND RETURN TO USER>
 29293                                  ;---------------------------------------------------------------------------
 29294                                  ;
 29295                                  ; Procedure Name : CHARHARD
 29296                                  ;
 29297                                  ;
 29298                                  ; Character device error handler
 29299                                  ; Same function as HARDERR
 29300                                  ;
 29301                                  ;---------------------------------------------------------------------------
 29302                                  
 29303                                  	; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 29304                                  CHARHARD:
 29305                                  	; 05/05/2019 - Retro DOS v4.0
 29306                                  	; 30/07/2018
 29307                                  	; 08/07/2018 - Retro DOS v3.0
 29308                                  
 29309                                  	; MSDOS 6.0
 29310                                  		   			; M024 - start
 29311 000053B4 36803E[2003]00          	cmp	byte [SS:ERRORMODE], 0	; Q: are we in the middle of int 24
 29312                                  	;jne	short @f		; Y: allow fail
 29313 000053BA 750B                    	jne	short chard1
 29314                                  
 29315 000053BC 80CC10                  	OR	AH,Allowed_RETRY ; 10h	; assume ctrl p
 29316                                  
 29317 000053BF 36F606[FE02]FF          	test	byte [ss:PFLAG],-1	; Q: has ctrl p been pressed
 29318 000053C5 7503                    	jnz	short ctrlp		; Y: 
 29319                                  ;@@:
 29320                                  chard1:					; M024 - end
 29321                                  	; MSDOS 6.0 & MSDOS 3.3
 29322                                  
 29323                                  ; Character device error handler
 29324                                  ; Same function as HARDERR
 29325                                  
 29326                                  	;or	ah,38h
 29327 000053C7 80CC38                  	or	ah,Allowed_IGNORE+Allowed_RETRY+Allowed_FAIL
 29328                                  ctrlp:			; SS override for Allowed and EXITHOLD
 29329 000053CA 368826[4B03]            	mov	[SS:ALLOWED],ah
 29330                                  
 29331                                  	; 15/03/2018
 29332 000053CF 368C06[8205]                    MOV     [SS:EXITHOLD+2],ES
 29333 000053D4 36892E[8005]                    MOV     [SS:EXITHOLD],BP
 29334 000053D9 56                              PUSH    SI
 29335                                  	;and	di,0FFh
 29336 000053DA 81E7FF00                        AND     DI,STECODE
 29337 000053DE 8CDD                            MOV     BP,DS                   ;Device pointer is BP:SI
 29338 000053E0 E86400                          CALL    FATALC
 29339 000053E3 5E                              POP     SI
 29340                                  	;return
 29341 000053E4 C3                              RETN
 29342                                  
 29343                                  ;---------------------------------------------------------------------------
 29344                                  ;
 29345                                  ; Procedure Name : HardErr
 29346                                  ;
 29347                                  ; Hard disk error handler. Entry conditions:
 29348                                  ;	DS:BX = Original disk transfer address
 29349                                  ;	DX = Original logical sector number
 29350                                  ;	CX = Number of sectors to go (first one gave the error)
 29351                                  ;	AX = Hardware error code
 29352                                  ;	DI = Original sector transfer count	
 29353                                  ;	ES:BP = Base of drive parameters
 29354                                  ;	[READOP] = 0 for read, 1 for write
 29355                                  ;	Allowed Set with allowed responses to this error (other bits MUST BE 0)
 29356                                  ; Output:
 29357                                  ;	[FAILERR] will be set if user responded FAIL
 29358                                  ;
 29359                                  ;--------------------------------------------------------------------------
 29360                                  
 29361                                  	; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 29362                                  HARDERR:
 29363                                  	; 05/05/2019 - Retro DOS v4.0
 29364                                  	; 30/07/2018
 29365                                  	; 08/07/2018 - Retro DOS v3.0
 29366 000053E5 97                      	XCHG    AX,DI                   ; Error code in DI, count in AX
 29367                                          ;and	di,0FFh
 29368 000053E6 81E7FF00                	AND     DI,STECODE              ; And off status bits
 29369                                          ;CMP	DI,WRECODE		; Write Protect Error?
 29370                                  	;cmp	di,0
 29371 000053EA 83FF00                  	cmp	DI,error_I24_write_protect ; Write Protect Error?
 29372 000053ED 750A                            JNZ     short NOSETWRPERR
 29373 000053EF 50                              PUSH    AX
 29374                                  	; 25/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 29375                                  	;MOV	AL,[ES:BP+DPB.DRIVE]
 29376                                          ;;MOV	AL,[ES:BP+0]
 29377                                  	; 15/12/2022
 29378 000053F0 268A4600                	mov	al,[ES:BP]
 29379                                          	; 15/03/2018
 29380 000053F4 36A2[2203]                      MOV     [SS:WPERR],AL		; Flag drive with WP error
 29381 000053F8 58                              POP     AX
 29382                                  NOSETWRPERR:
 29383 000053F9 29C8                            SUB     AX,CX                   ; Number of sectors successfully transferred
 29384 000053FB 01C2                            ADD     DX,AX                   ; First sector number to retry
 29385 000053FD 52                              PUSH    DX
 29386                                  	; 08/07/2018
 29387                                          ;MUL	word [ES:BP+2] 		; Number of bytes transferred
 29388 000053FE 26F76602                	MUL	word [ES:BP+DPB.SECTOR_SIZE]
 29389 00005402 5A                              POP     DX
 29390 00005403 01C3                            ADD     BX,AX                   ; First address for retry
 29391 00005405 30E4                            XOR     AH,AH                   ; Flag disk section in error
 29392                                          ;CMP	DX,[ES:BP+6] 		; In reserved area?
 29393 00005407 263B5606                	CMP	DX,[ES:BP+DPB.FIRST_FAT]
 29394 0000540B 721A                            JB      SHORT ERRINT
 29395 0000540D FEC4                            INC     AH                      ; Flag for FAT
 29396                                          ;CMP	DX,[ES:BP+10H] ; MSDOS 3.3
 29397                                  	;cmp	dx,[ES:BP+11h] ; MSDOS 6.0 - 05/05/2019 	
 29398 0000540F 263B5611                	CMP	DX,[ES:BP+DPB.DIR_SECTOR]  ; In FAT?  
 29399 00005413 7308                    	JAE	short TESTDIR 		; No
 29400                                  		 ; Err in FAT must force recomp of freespace
 29401                                  	;mov	word [ES:BP+1Eh],-1 ; MSDOS 3.3
 29402                                  	;mov	word [ES:BP+1Fh],-1 ; MSDOS 6.0 - 05/05/2019 
 29403 00005415 26C7461FFFFF            	MOV	word [ES:BP+DPB.FREE_CNT],-1
 29404 0000541B EB0A                    	JMP	SHORT ERRINT
 29405                                  TESTDIR:
 29406 0000541D FEC4                            INC     AH
 29407                                          ;CMP	DX,[ES:BP+0BH]		; In directory?
 29408 0000541F 263B560B                	CMP	DX,[ES:BP+DPB.FIRST_SECTOR] 
 29409 00005423 7202                            JB      SHORT ERRINT
 29410 00005425 FEC4                            INC     AH                      ; Must be in data area
 29411                                  ERRINT:
 29412 00005427 D0E4                            SHL     AH,1                    ; Make room for read/write bit
 29413 00005429 360A26[7505]                    OR      AH,[SS:READOP] ; 15/03/2018
 29414                                  
 29415                                  	; 15/08/2018
 29416                                  					; SS override for allowed and EXITHOLD
 29417 0000542E 360A26[4B03]            	OR	AH,[SS:ALLOWED]		; Set the allowed_ bits
 29418                                  
 29419                                          ;entry   FATAL
 29420                                  FATAL:
 29421                                  	; 25/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 29422                                  	;MOV	AL,[ES:BP+DPB.DRIVE]
 29423                                          ;;MOV	AL,[ES:BP+0]		; Get drive number
 29424                                  	; 15/12/2022
 29425 00005433 268A4600                	MOV	AL,[ES:BP]        
 29426                                  
 29427                                  	;entry   FATAL1
 29428                                  FATAL1:  
 29429                                  	; 15/03/2018      
 29430 00005437 368C06[8205]            	MOV     [SS:EXITHOLD+2],ES
 29431 0000543C 36892E[8005]                    MOV     [SS:EXITHOLD],BP	; The only things we preserve	
 29432                                  	;LES	SI,[ES:BP+12H] ; MSDOS 3.3
 29433                                  	;LES	SI,[ES:BP+13H] ; MSDOS 6.0 - 05/05/2019
 29434 00005441 26C47613                	LES	SI,[ES:BP+DPB.DRIVER_ADDR]
 29435 00005445 8CC5                            MOV     BP,ES                   ; BP:SI points to the device involved
 29436                                  
 29437                                  	; DI has the INT-24-style extended error. We now map the error code 
 29438                                  	; for this into the normalized get extended error set by using the 
 29439                                  	; ErrMap24 table as a translate table. Note that we translate ONLY 
 29440                                  	; the device returned codes and leave all others beyond the look up 
 29441                                  	; table alone.
 29442                                  
 29443                                  	; 08/07/2018 - Retro DOS v3.0
 29444                                  FATALC:
 29445 00005447 E89701                  	call	SET_I24_EXTENDED_ERROR
 29446                                  	;cmp	di,0Ch
 29447 0000544A 83FF0C                  	CMP	DI,error_I24_gen_failure
 29448 0000544D 7603                    	JBE	short GOT_RIGHT_CODE	; Error codes above gen_failure get
 29449 0000544F BF0C00                  	MOV	DI,error_I24_gen_failure; mapped to gen_failure. Real codes
 29450                                  					;  Only come via GetExtendedError
 29451                                  ;** ----------------------------------------------------------------
 29452                                  ;
 29453                                  ; Entry point used by REDIRector on Network I 24 errors.
 29454                                  ;
 29455                                  ;	ASSUME	DS:NOTHING,ES:NOTHING,SS:DOSDATA
 29456                                  ;
 29457                                  ; ALL I 24 regs set up. ALL Extended error info SET. ALLOWED Set.
 29458                                  ;     EXITHOLD set for restore of ES:BP.
 29459                                  ; ------------------------------------------------------------------
 29460                                  	;entry	NET_I24_ENTRY
 29461                                  NET_I24_ENTRY:
 29462                                  GOT_RIGHT_CODE:
 29463 00005452 36803E[2003]00          	CMP     BYTE [SS:ERRORMODE],0	; No INT 24s if already INT 24
 29464 00005458 7404                            JZ	SHORT NoSetFail
 29465 0000545A B003                    	MOV	AL,3
 29466 0000545C EB6C                    	JMP	short FailRet
 29467                                  NoSetFail:
 29468 0000545E 368926[8805]                    MOV     [SS:CONTSTK],SP		; SS override
 29469 00005463 16                              PUSH	SS
 29470 00005464 07                              POP	ES
 29471                                      
 29472                                  	; Wango!!! We may need to free some user state info... In 
 29473                                  	; particular, we may have locked down a JFN for a user and he may 
 29474                                  	; NEVER return to us. Thus,we need to free it here and then 
 29475                                  	; reallocate it when we come back.
 29476                                  
 29477 00005465 36833E[AA05]FF          	CMP	word [SS:SFN],-1 ; 0FFFFh
 29478 0000546B 740C                    	JZ	short _NoFree
 29479 0000546D 1E                      	push	ds
 29480 0000546E 56                      	push	si
 29481 0000546F 36C536[AE05]            	LDS	SI,[SS:PJFN]
 29482 00005474 C604FF                  	MOV	BYTE [SI],0FFH
 29483 00005477 5E                      	pop	si
 29484 00005478 1F                      	pop	ds
 29485                                  
 29486                                  _NoFree:
 29487 00005479 FA                      	CLI
 29488                                  					; Prepare to play with stack
 29489 0000547A 36FE06[2003]                    INC     BYTE [SS:ERRORMODE]	; Flag INT 24 in progress
 29490 0000547F 36FE0E[2103]                    DEC     BYTE [SS:INDOS]		; INT 24 handler might not return
 29491                                  
 29492                                  	; 05/05/2019 - Retro DOS v4.0 (MSDOS 6.0, MSDOS 6.21)
 29493                                  
 29494                                  	;; Extended Open hooks
 29495                                  					; AN000;IFS.I24 error disabled
 29496                                  	;test	byte [ss:EXTOPEN_ON],2
 29497 00005484 36F606[F605]02          	TEST	byte [ss:EXTOPEN_ON],EXT_OPEN_I24_OFF 
 29498 0000548A 7404                    	JZ	short i24yes		; AN000;IFS.no
 29499                                  faili24:				; AN000;
 29500 0000548C B003                    	MOV	AL,3			; AN000;IFS.fake fail
 29501 0000548E EB29                    	JMP	short passi24 		; AN000;IFS.exit
 29502                                  i24yes: 				; AN000;
 29503                                  	;; Extended Open hooks
 29504                                  
 29505 00005490 368E16[8605]                    MOV     SS,[SS:USER_SS]
 29506 00005495 268B26[8405]                    MOV     SP,[ES:USER_SP]         ; User stack pointer restored
 29507                                  
 29508                                  	;;int	24h	
 29509                                          ;IN	int_fatal_abort		; Fatal error interrupt vector,
 29510                                  					; must preserve ES
 29511                                  	; 05/05/2019
 29512 0000549A 26803E[F711]00          	cmp	byte [es:DosHasHMA], 0	; Q: is dos running in HMA (M021)
 29513 000054A0 7504                    	jne	short do_low_int24	; Y: the int must be done from low mem
 29514 000054A2 CD24                    	INT	int_fatal_abort 	; Fatal error interrupt vector, 
 29515                                  					; must preserve ES
 29516 000054A4 EB05                    	jmp	short criterr_ret_addr
 29517                                  
 29518                                  do_low_int24:
 29519                                  	; 05/05/2019
 29520                                  	; MSDOS 6.0
 29521 000054A6 2EFF1E[8C51]            	call    far [cs:LowInt24Addr]
 29522                                  criterr_ret_addr:
 29523 000054AB 268926[8405]                    MOV     [ES:USER_SP],SP         ; restore our stack
 29524 000054B0 268C16[8605]                    MOV     [ES:USER_SS],SS
 29525 000054B5 8CC5                            MOV     BP,ES
 29526 000054B7 8ED5                            MOV     SS,BP
 29527                                  passi24:
 29528 000054B9 368B26[8805]                    MOV     SP,[SS:CONTSTK]
 29529 000054BE 36FE06[2103]                    INC     BYTE [SS:INDOS]		; Back in the DOS
 29530 000054C3 36C606[2003]00                  MOV     BYTE [SS:ERRORMODE],0	; Back from INT 24
 29531 000054C9 FB                              STI
 29532                                  FailRet:
 29533 000054CA 36C42E[8005]                    LES     BP,[SS:EXITHOLD]
 29534                                  	
 29535                                  	; 08/07/2018
 29536                                  
 29537                                  	; Triage the user's reply.
 29538                                  
 29539 000054CF 3C01                    	CMP	AL,1
 29540 000054D1 723D                    	JB	short CheckIgnore	; 0 => ignore
 29541 000054D3 7445                    	JZ	short CheckRetry	; 1 => retry
 29542 000054D5 3C03                    	CMP	AL,3			; 3 => fail
 29543 000054D7 754B                    	JNZ	short DoAbort 		; 2, invalid => abort
 29544                                  
 29545                                  	; The reply was fail. See if we are allowed to fail.
 29546                                  
 29547                                  				; SS override for ALLOWED, EXTOPEN_ON, 
 29548                                  				; ALLOWED, FAILERR, WPERR, SFN, pJFN
 29549                                  	;test	byte [ss:ALLOWED],8
 29550 000054D9 36F606[4B03]08          	test	byte [ss:ALLOWED],Allowed_FAIL ; Can we?
 29551 000054DF 7443                    	jz	short DoAbort	; No, do abort
 29552                                  DoFail:
 29553 000054E1 B003                    	MOV	AL,3		; just in case...
 29554                                  				; AN000;EO. I24 error disabled
 29555                                  	; 05/05/2019
 29556                                  	;(MSDOS 6.0, MSCTRLC.ASM, 1991)
 29557 000054E3 36F606[F605]02          	test	byte [ss:EXTOPEN_ON],EXT_OPEN_I24_OFF ; 2
 29558 000054E9 7505                    	jnz	short CleanUp 		; AN000;EO. no
 29559                                  	
 29560 000054EB 36FE06[4A03]            	inc	byte [SS:FAILERR]	; Tell everybody
 29561                                  CleanUp:
 29562 000054F0 36C606[2203]FF          	MOV	byte [SS:WPERR],-1
 29563 000054F6 36833E[AA05]FF          	CMP	word [SS:SFN],-1
 29564                                  	; 25/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 29565                                  	;jnz	short CleanUp2
 29566                                  	;retn
 29567                                  	; 17/12/2022
 29568 000054FC 7411                    	jz	short Cleanup_retn ; 08/07/2018 - Retro DOS v3.0
 29569                                  CleanUp2:
 29570 000054FE 1E                      	push	ds
 29571 000054FF 56                      	push	si
 29572 00005500 50                      	push	ax
 29573 00005501 36A1[AA05]              	MOV	AX,[ss:SFN]
 29574 00005505 36C536[AE05]            	LDS	SI,[ss:PJFN]
 29575 0000550A 8804                    	MOV	[SI],AL
 29576 0000550C 58                      	pop	ax
 29577 0000550D 5E                      	pop	si
 29578 0000550E 1F                      	pop	ds
 29579                                  Cleanup_retn:
 29580 0000550F C3                      	retn
 29581                                  
 29582                                  	; The reply was IGNORE. See if we are allowed to ignore.
 29583                                  
 29584                                  CheckIgnore:
 29585                                  	;test	byte [ss:ALLOWED],20h
 29586 00005510 36F606[4B03]20          	test	byte [ss:ALLOWED],Allowed_IGNORE ; Can we?
 29587 00005516 74C9                    	jz	short DoFail			 ; No, do fail
 29588 00005518 EBD6                    	jmp	short CleanUp
 29589                                  
 29590                                  	; The reply was RETRY. See if we are allowed to retry.
 29591                                  
 29592                                  CheckRetry:
 29593                                  	;test	byte [ss:ALLOWED],10h
 29594 0000551A 36F606[4B03]10          	test	byte [ss:ALLOWED],Allowed_RETRY	; Can we?
 29595 00005520 74BF                    	jz	short DoFail			; No, do fail
 29596 00005522 EBCC                    	JMP	short CleanUp
 29597                                  
 29598                                  	; The reply was ABORT.
 29599                                  DoAbort:
 29600 00005524 16                      	push	ss
 29601 00005525 1F                      	pop	ds
 29602                                  
 29603 00005526 803E[5703]00            	CMP	byte [CONSWAP],0
 29604 0000552B 7403                    	JZ	short NOSWAP2
 29605 0000552D E819DE                  	call	SWAPBACK
 29606                                  NOSWAP2:
 29607                                  	; See if we are to truly abort. If we are in the process of aborting, 
 29608                                  	; turn this abort into a fail.
 29609                                  
 29610                                  	;test	[fAborting],0FFh
 29611                                  	;jnz	short DoFail
 29612                                  
 29613 00005530 803E[5903]00            	cmp	byte [fAborting],0
 29614 00005535 75AA                    	JNZ	short DoFail
 29615                                  
 29616                                  	; Set return code
 29617                                  
 29618 00005537 C606[7C05]02            	MOV	BYTE [EXIT_TYPE],EXIT_HARD_ERROR ; 2
 29619 0000553C 30C0                    	XOR	AL,AL
 29620                                  
 29621                                  	; we are truly aborting the process. Go restore information from 
 29622                                  	; the PDB as necessary.
 29623                                  
 29624 0000553E E99F0D                  	jmp	exit_inner
 29625                                  
 29626                                  ;** --------------------------------------------------------------------------
 29627                                  ;
 29628                                  ; reset_environment checks the DS value against the CurrentPDB. If they are
 29629                                  ; different, then an old-style return is performed. If they are the same,
 29630                                  ; then we release jfns and restore to parent. We still use the PDB at DS:0 as
 29631                                  ; the source of the terminate addresses.
 29632                                  ;
 29633                                  ; Some subtlety: We are about to issue a bunch of calls that *may* generate
 29634                                  ; INT 24s. We *cannot* allow the user to restart the abort process; we may
 29635                                  ; end up aborting the wrong process or turn a terminate/stay/resident into a
 29636                                  ; normal abort and leave interrupt handlers around. What we do is to set a
 29637                                  ; flag that will indicate that if any abort code is seen, we just continue the
 29638                                  ; operation. In essence, we dis-allow the abort response.
 29639                                  ;
 29640                                  ; output:   none.
 29641                                  ; ----------------------------------------------------------------------------
 29642                                  
 29643                                  	;entry	reset_environment
 29644                                  	
 29645                                  reset_environment:
 29646                                  	; 30/07/2018 - Retro DOS v3.0
 29647                                  	; IBMDOS.COM (MSDOS 3.3) - Offset 588Ah 
 29648                                  
 29649                                  ;***	invoke	Reset_Version		; AN007 ;MS. reset version number
 29650                                  
 29651 00005541 1E                      	PUSH	DS			; save PDB of process
 29652                                  
 29653                                  	; There are no critical sections in force. Although we may enter 
 29654                                  	; here with critical sections locked down, they are no longer 
 29655                                  	; relevant. We may safely free all allocated resources.
 29656                                  
 29657 00005542 B482                    	MOV	AH,82h
 29658                                  		; Microsoft Networks - END DOS CRITICAL SECTIONS 0 THROUGH 7
 29659                                  	;int	2Ah 	
 29660 00005544 CD2A                    	INT	int_IBM
 29661                                  
 29662                                  					; SS override
 29663 00005546 36C606[5903]FF          	MOV	byte [SS:fAborting],-1	; signal abort in progress
 29664                                  
 29665                                  					; DOS 4.00 doesn't need it
 29666                                  	;CallInstall NetResetEnvironment, MultNET, 34  
 29667                                  					; Allow REDIR to clear some stuff
 29668                                  					; On process exit.
 29669 0000554C B82211                  	mov     ax, 1122h
 29670 0000554F CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - PROCESS TERMINATION HOOK
 29671                                  			; SS = DOS CS
 29672                                  	;mov	al,22h	
 29673 00005551 B022                    	MOV	AL,int_terminate
 29674 00005553 E875B9                  	call	_$GET_INTERRUPT_VECTOR	; and who to go to
 29675                                  
 29676 00005556 59                      	POP	CX			; get ThisPDB
 29677 00005557 06                      	push	es
 29678 00005558 53                      	push	bx			; save return address
 29679                                  
 29680 00005559 368B1E[3003]            	MOV	BX,[SS:CurrentPDB] 	; get currentPDB
 29681 0000555E 8EDB                    	MOV	DS,BX
 29682 00005560 A11600                  	MOV	AX,[PDB.PARENT_PID]	; get parentPDB
 29683                                  
 29684                                  	; AX = parentPDB, BX = CurrentPDB, CX = ThisPDB
 29685                                  	; Only free handles if AX <> BX and BX = CX and [exit_code].upper 
 29686                                  	; is not Exit_keep_process
 29687                                  	
 29688 00005563 39D8                    	CMP	AX,BX
 29689 00005565 7418                    	JZ	short reset_return	; parentPDB = CurrentPDB
 29690 00005567 39CB                    	CMP	BX,CX
 29691 00005569 7514                    	JNZ	short reset_return	; CurrentPDB <> ThisPDB
 29692 0000556B 50                      	PUSH	AX			; save parent
 29693                                  
 29694                                  					; SS override
 29695                                  	;cmp	byte [SS:EXIT_TYPE],3
 29696 0000556C 36803E[7C05]03          	CMP	BYTE [SS:EXIT_TYPE],EXIT_KEEP_PROCESS ; 15/08/2018
 29697 00005572 7406                    	JZ	short reset_to_parent 	; keeping this process
 29698                                  
 29699                                  	; We are truly removing a process. Free all allocation blocks 
 29700                                  	; belonging to this PDB
 29701                                  
 29702                                  	;invoke	arena_free_process
 29703 00005574 E8A10D                  	call	arena_free_process
 29704                                  
 29705                                  	; Kill off remainder of this process. Close file handles and signal 
 29706                                  	; to relevant network folks that this process is dead. Remember that 
 29707                                  	; CurrentPDB is STILL the current process!
 29708                                  
 29709                                  	;invoke	DOS_ABORT
 29710 00005577 E8BAD9                  	call	DOS_ABORT
 29711                                  
 29712                                  reset_to_parent:
 29713                                  					; SS override
 29714 0000557A 368F06[3003]            	POP	word [SS:CurrentPDB]	; set up process as parent
 29715                                  
 29716                                  reset_return:				; come here for normal return
 29717                                  	;Context DS			; DS is used to refer to DOSDATA  
 29718 0000557F 16                      	push	ss
 29719 00005580 1F                      	pop	ds	
 29720                                  
 29721 00005581 B0FF                    	MOV	AL,-1
 29722                                  
 29723                                  	; make sure that everything is clean In this case ignore any errors, 
 29724                                  	; we cannot "FAIL" the abort, the program being aborted is dead.
 29725                                  
 29726                                  	;EnterCrit critDisk
 29727 00005583 E8D2BD                  	call	ECritDisk
 29728                                  	;invoke	FLUSHBUF
 29729 00005586 E8B605                  	call	FLUSHBUF
 29730                                  	;LeaveCrit critDisk
 29731 00005589 E8E7BD                  	call	LCritDisk
 29732                                  
 29733                                  	; Decrement open ref. count if we had done a virtual open earlier.
 29734                                  
 29735 0000558C E879F7                  	call	CHECK_VIRT_OPEN
 29736 0000558F FA                      	CLI
 29737 00005590 C606[2103]00            	MOV	BYTE [INDOS],0		; Go to known state
 29738 00005595 C606[2203]FF            	MOV	BYTE [WPERR],-1		; Forget about WP error
 29739 0000559A C606[5903]00            	MOV	byte [fAborting],0	; let aborts occur
 29740 0000559F 8F06[8005]              	POP	WORD [EXITHOLD]
 29741 000055A3 8F06[8205]              	POP	WORD [EXITHOLD+2]
 29742                                  
 29743                                  	; Snake into multitasking... Get stack from CurrentPDB person
 29744                                  
 29745 000055A7 8E1E[3003]              	MOV	DS,[CurrentPDB]
 29746 000055AB 8E163000                	MOV	SS,[PDB.USER_STACK+2]
 29747 000055AF 8B262E00                	MOV	SP,[PDB.USER_STACK]
 29748                                  
 29749 000055B3 E8A3AE                  	call	restore_world
 29750                                  
 29751                                  	; 05/05/2019
 29752 000055B6 07                      	pop	es ; * ; MSDOS 6.21 (DOSCODE:94A8h, MSDOS.SYS)
 29753                                  
 29754                                  	; MSDOS 6.0
 29755 000055B7 50                      	push	ax			; set up ds, but save ds in TEMPSEG 
 29756 000055B8 8CD8                    	mov	ax,ds			; and not on stack.
 29757                                  	;getdseg <ds>			; ds -> dosdata
 29758 000055BA 2E8E1E[0700]            	mov	ds,[cs:DosDSeg] 
 29759 000055BF A3[0A0D]                	mov	[TEMPSEG],ax
 29760 000055C2 58                      	pop	ax
 29761                                  					; set up ds to DOSDATA
 29762                                  	;MOV	[CS:USER_SP],AX ; MSDOS 3.3
 29763 000055C3 A3[8405]                	mov	[USER_SP],ax
 29764                                  
 29765 000055C6 58                      	POP	AX			; suck off CS:IP of interrupt...
 29766 000055C7 58                      	POP	AX
 29767 000055C8 58                      	POP	AX
 29768                                  
 29769                                  ; M011 : BEGIN
 29770                                  
 29771                                  	; MSDOS 3.3
 29772                                  ;	MOV	AX,0F202h	; STI
 29773                                  
 29774                                  	; MSDOS 6.0
 29775 000055C9 9F                      	LAHF
 29776 000055CA 86E0                    	XCHG	AH,AL
 29777 000055CC 2402                    	AND	AL,2
 29778 000055CE B4F2                    	MOV	AH,0F2h
 29779                                  
 29780                                  ; M011 : END
 29781                                  
 29782                                  	; MSDOS 3.3 (& MSDOS 6.0)
 29783 000055D0 50                      	PUSH	AX
 29784                                   
 29785                                  	;PUSH	word [CS:EXITHOLD+2]
 29786                                  	;PUSH	word [CS:EXITHOLD]
 29787                                  	
 29788                                  	; MSDOS 6.0
 29789 000055D1 FF36[8205]              	PUSH	word [EXITHOLD+2]
 29790 000055D5 FF36[8005]              	PUSH	word [EXITHOLD]
 29791                                  
 29792                                  	;MOV	AX,[CS:USER_SP]
 29793                                  
 29794                                  	; MSDOS 6.0
 29795 000055D9 A1[8405]                	MOV	AX,[USER_SP]
 29796 000055DC 8E1E[0A0D]              	mov	ds,[TEMPSEG]	; restore ds
 29797                                  
 29798 000055E0 CF                      	IRET			; Long return back to user terminate address
 29799                                  
 29800                                  ;---------------------------------------------------------------------------
 29801                                  ;
 29802                                  ; Procedure Name : SET_I24_EXTENDED_ERROR
 29803                                  ;
 29804                                  ; This routine handles extended error codes.
 29805                                  ; Input : DI = error code from device
 29806                                  ; Output: All EXTERR fields are set
 29807                                  ;
 29808                                  ;--------------------------------------------------------------------------
 29809                                  
 29810                                  SET_I24_EXTENDED_ERROR:
 29811 000055E1 50                      	PUSH	AX
 29812                                  					; ErrMap24End is in DOSDATA
 29813 000055E2 B8[BA0E]                	MOV	AX,ErrMap24End
 29814 000055E5 2D[AA0E]                	SUB	AX,ErrMap24
 29815                                  					; Change to dosdata to access 
 29816                                  					; ErrMap24 and EXTERR -SR
 29817                                  	; 05/05/2019 - Retro DOS v4.0
 29818                                  	
 29819                                  	; MSDOS 6.0
 29820 000055E8 1E                      	push	ds
 29821                                  	;getdseg <ds>			; ds ->dosdata
 29822 000055E9 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
 29823                                  
 29824                                  	; AX is the index of the first unavailable error. Do not translate 
 29825                                  	; if greater or equal to AX.
 29826                                  
 29827 000055EE 39C7                    	CMP	DI,AX
 29828 000055F0 89F8                    	MOV	AX,DI
 29829 000055F2 7306                    	JAE	short NoTrans
 29830                                  
 29831                                  	;MOV	AL,[CS:DI+ErrMap24]  ; MSDOS 3.3
 29832 000055F4 8A85[AA0E]              	mov	al,[ErrMap24+di] ; MSDOS 6.0
 29833 000055F8 30E4                    	XOR	AH,AH
 29834                                  NoTrans:
 29835                                  	;MOV	[CS:EXTERR],AX
 29836 000055FA A3[2403]                	mov	[EXTERR],AX
 29837 000055FD 1F                      	pop	ds
 29838                                  	;assume	ds:nothing
 29839 000055FE 58                      	POP	AX
 29840                                  
 29841                                  	; Now Extended error is set correctly. Translate it to get correct 
 29842                                  	; error locus class and recommended action.
 29843                                  
 29844 000055FF 56                      	PUSH	SI
 29845                                  					; ERR_TABLE_24 is in DOSCODE 
 29846 00005600 BE[5A0E]                	MOV	SI,ERR_TABLE_24
 29847 00005603 E886B0                  	call	CAL_LK			; Set other extended error fields
 29848 00005606 5E                      	POP	SI
 29849 00005607 C3                      	retn
 29850                                  
 29851                                  ;============================================================================
 29852                                  ; FAT.ASM, MSDOS 6.0, 1991
 29853                                  ;============================================================================
 29854                                  ; 30/07/2018 - Retro DOS v3.0
 29855                                  ; 20/05/2019 - Retro DOS v4.0
 29856                                  
 29857                                  ;	TITLE	FAT - FAT maintenance routines
 29858                                  ;	NAME	FAT
 29859                                  
 29860                                  ;**	FAT.ASM
 29861                                  ;----------------------------------------------------------------------------
 29862                                  ;	Low level local device routines for performing disk change sequence,
 29863                                  ;	setting cluster validity, and manipulating the FAT
 29864                                  ;
 29865                                  ;	IsEof
 29866                                  ;	UNPACK
 29867                                  ;	PACK
 29868                                  ;	MAPCLUSTER
 29869                                  ;	FATREAD_SFT
 29870                                  ;	FATREAD_CDS
 29871                                  ;	FAT_operation
 29872                                  ;
 29873                                  ;	Revision history:
 29874                                  ;
 29875                                  ;	  AN000  version Jan. 1988
 29876                                  ;	   A001  PTM	      -- disk changed for look ahead buffers
 29877                                  ;
 29878                                  ;	M014 - if a request for pack\unpack cluster 0 is made we write\read
 29879                                  ;	       from CL0FATENTRY rather than disk.
 29880                                  
 29881                                  ; DOSCODE:94FAh (MSDOS 6.21, MSDOS.SYS)
 29882                                  
 29883                                  ;Break <IsEOF - check the quantity in BX for EOF>
 29884                                  ;----------------------------------------------------------------------------
 29885                                  ;
 29886                                  ; Procedure Name : IsEOF
 29887                                  ;
 29888                                  ; IsEOF - check the fat value in BX for eof.
 29889                                  ;
 29890                                  ;   Inputs:	ES:BP point to DPB
 29891                                  ;		BX has fat value
 29892                                  ;   Outputs:	JAE eof
 29893                                  ;   Registers modified: none
 29894                                  ;
 29895                                  ;---------------------------------------------------------------------------
 29896                                  
 29897                                  IsEOF:
 29898                                  	;cmp	word [es:bp+0Dh],0FF6h
 29899 00005608 26817E0DF60F            	CMP	word [ES:BP+DPB.MAX_CLUSTER],4096-10 ; is this 16 bit fat?
 29900 0000560E 730B                    	JAE	short EOF16			; yes, check for eof there
 29901                                  
 29902                                  ;J.K. 8/27/86
 29903                                  ;Modified to accept 0FF0h as an eof. This is to handle the diskfull case
 29904                                  ;of any media that has "F0"(Other) as a MediaByte.
 29905                                  ;Hopely, this does not create any side effect for those who may use any value
 29906                                  ;other than "FF8-FFF" as an EOF for their own file.
 29907                                  
 29908 00005610 81FBF00F                	cmp	bx,0FF0h
 29909 00005614 7404                    	je	short IsEOF_other
 29910                                  
 29911 00005616 81FBF80F                	CMP	BX,0FF8h		; do the 12 bit compare
 29912                                  IsEOF_other:
 29913 0000561A C3                      	retn
 29914                                  EOF16:
 29915 0000561B 83FBF8                  	CMP	BX,0FFF8h		; 16 bit compare
 29916 0000561E C3                      	retn
 29917                                  
 29918                                  ; DOSCODE:9511h (MSDOS 6.21, MSDOS.SYS)
 29919                                  
 29920                                  ;Break	<UNPACK -- UNPACK FAT ENTRIES>
 29921                                  ;---------------------------------------------------------------------------
 29922                                  ;
 29923                                  ; Procedur Name : UNPACK
 29924                                  ;
 29925                                  ; Inputs:
 29926                                  ;	BX = Cluster number (may be full 16-bit quantity)
 29927                                  ;	ES:BP = Base of drive parameters
 29928                                  ; Outputs:
 29929                                  ;	DI = Contents of FAT for given cluster (may be full 16-bit quantity)
 29930                                  ;	Zero set means DI=0 (free cluster)
 29931                                  ;	Carry set means error (currently user FAILed to I 24)
 29932                                  ; SI Destroyed, No other registers affected. Fatal error if cluster too big.
 29933                                  ;
 29934                                  ; NOTE: if BX = 0 then DI = contents of CL0FATENTRY
 29935                                  ;
 29936                                  ;----------------------------------------------------------------------------
 29937                                  	
 29938                                  	; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 29939                                  	; DOSCODE:94B5h (MSDOS 5.0, MSDOS.SYS)
 29940                                  
 29941                                  	; 20/05/2019 - Retro DOS v4.0
 29942                                  UNPACK:
 29943                                  	; MSDOS 6.0			; M014 - Start
 29944 0000561F 09DB                    	or	bx, bx			; Q: are we unpacking cluster 0
 29945 00005621 7507                    	jnz	short up_cont		; N: proceed with normal unpack
 29946 00005623 8B3E[8100]              	mov	di,[CL0FATENTRY]	; Y: return value in CL0FATENTRY
 29947 00005627 09FF                    	or	di,di 			; return z if di=0
 29948 00005629 C3                      	retn				; done
 29949                                  up_cont:				; M014 - End
 29950                                  	; MSDOS 3.3 & MSDOS 6.0
 29951                                  	;cmp	bx,[es:bp+0Dh]
 29952 0000562A 263B5E0D                	CMP	BX,[ES:BP+DPB.MAX_CLUSTER]
 29953 0000562E 7726                    	JA	short HURTFAT
 29954 00005630 E8DC00                  	CALL	MAPCLUSTER
 29955 00005633 721E                    	jc	short _DoContext
 29956 00005635 8B3D                    	MOV	DI,[DI]
 29957 00005637 750E                    	JNZ	short High12		; MZ if high 12 bits, go get 'em
 29958 00005639 268B760D                	MOV	SI,[ES:BP+DPB.MAX_CLUSTER] ; MZ is this 16-bit fat?
 29959 0000563D 81FEF60F                	CMP	SI,4096-10
 29960 00005641 720C                    	JB	short Unpack12		; MZ No, go 'AND' off bits
 29961 00005643 09FF                    	OR	DI,DI			; MZ set zero condition code, clears carry
 29962 00005645 EB0C                    	JMP	SHORT _DoContext 	; MZ go do context
 29963                                  High12:
 29964 00005647 D1EF                    	SHR	DI,1
 29965 00005649 D1EF                    	SHR	DI,1
 29966 0000564B D1EF                    	SHR	DI,1
 29967 0000564D D1EF                    	SHR	DI,1
 29968                                  Unpack12:
 29969 0000564F 81E7FF0F                	AND	DI,0FFFh		; Clears carry
 29970                                  _DoContext:
 29971 00005653 16                      	PUSH	SS
 29972 00005654 1F                      	POP	DS
 29973 00005655 C3                      	retn
 29974                                  HURTFAT:
 29975                                  	;;mov	word [es:bp+1Eh],0FFFFh
 29976                                  	;mov	word [es:bp+1Fh],0FFFFh  ; MSDOS 6.0
 29977 00005656 26C7461FFFFF            	MOV	word [ES:BP+DPB.FREE_CNT],-1 ; Err in FAT must force recomp of freespace
 29978 0000565C 50                      	PUSH	AX
 29979 0000565D B488                    	MOV	AH,Allowed_FAIL+80h ; 88h
 29980                                  
 29981                                  ;hkn; SS override
 29982 0000565F 36C606[4B03]08          	MOV	byte [SS:ALLOWED],Allowed_FAIL ; 8
 29983                                  ;
 29984                                  ; Signal Bad FAT to INT int_fatal_abort handler. We have an invalid cluster.
 29985                                  ;
 29986 00005665 BFFF0F                  	MOV	DI,0FFFh		; In case INT int_fatal_abort returns (it shouldn't)
 29987 00005668 E8C8FD                  	call	FATAL
 29988 0000566B 3C03                    	CMP	AL,3
 29989 0000566D F8                      	CLC
 29990 0000566E 7501                    	JNZ	short OKU_RET 		; Try to ignore bad FAT
 29991 00005670 F9                      	STC				; User said FAIL
 29992                                  OKU_RET:
 29993 00005671 58                      	POP	AX
 29994                                  hurtfat_retn:
 29995 00005672 C3                      	retn
 29996                                  
 29997                                  ; DOSCODE:9565h (MSDOS 6.21, MSDOS.SYS)
 29998                                  
 29999                                  ;Break	<PACK -- PACK FAT ENTRIES>
 30000                                  ;----------------------------------------------------------------------------
 30001                                  ;
 30002                                  ; Procedure Name : PACK
 30003                                  ;
 30004                                  ; Inputs:
 30005                                  ;	BX = Cluster number
 30006                                  ;	DX = Data
 30007                                  ;	ES:BP = Pointer to drive DPB
 30008                                  ; Outputs:
 30009                                  ;	The data is stored in the FAT at the given cluster.
 30010                                  ;	SI,DX,DI all destroyed
 30011                                  ;	Carry set means error (currently user FAILed to I 24)
 30012                                  ;	No other registers affected
 30013                                  ;
 30014                                  ; NOTE: if BX = 0 then data in DX is atored in CL0FATENTRY.
 30015                                  ;
 30016                                  ;---------------------------------------------------------------------------
 30017                                  
 30018                                  	; 25/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 30019                                  	; 20/05/2019 - Retro DOS v4.0
 30020                                  PACK:
 30021                                  	; MSDOS 6.0			; M014 - start
 30022 00005673 09DB                    	or	bx,bx			; Q: are we packing cluster 0
 30023 00005675 7505                    	jnz	short p_cont		; N: proceed with normal pack
 30024 00005677 8916[8100]              	mov	[CL0FATENTRY],dx	; Y: place value in CL0FATENTRY
 30025 0000567B C3                      	retn				; done
 30026                                  p_cont:					; M014 - end
 30027                                  	; MSDOS 3.3 & MSDOS 6.0
 30028 0000567C E89000                  	CALL	MAPCLUSTER
 30029 0000567F 72D2                    	JC	short _DoContext
 30030 00005681 8B35                    	MOV	SI,[DI]
 30031 00005683 740B                    	JZ	short ALIGNED 		; byte (not nibble) aligned
 30032 00005685 51                      	PUSH	CX			; move data to upper 12 bits
 30033 00005686 B104                    	MOV	CL,4
 30034 00005688 D3E2                    	SHL	DX,CL
 30035 0000568A 59                      	POP	CX
 30036 0000568B 83E60F                  	AND	SI,0FH			; leave in original low 4 bits
 30037 0000568E EB14                    	JMP	SHORT PACKIN
 30038                                  ALIGNED:
 30039                                  	;cmp	word [es:bp+0Dh],0FF6h
 30040 00005690 26817E0DF60F            	CMP	word [ES:BP+DPB.MAX_CLUSTER],4096-10 ; MZ 16 bit fats?
 30041 00005696 730A                    	JAE	short Pack16		; MZ yes, go clobber original data
 30042 00005698 81E600F0                	AND	SI,0F000h		; MZ leave in upper 4 bits of original
 30043 0000569C 81E2FF0F                	AND	DX,0FFFh		; MZ store only 12 bits
 30044 000056A0 EB02                    	JMP	SHORT PACKIN		; MZ go store
 30045                                  Pack16:
 30046 000056A2 31F6                    	XOR	SI,SI			; MZ no original data
 30047                                  PACKIN:
 30048 000056A4 09D6                    	OR	SI,DX
 30049 000056A6 8935                    	MOV	[DI],SI
 30050                                  
 30051                                  ;hkn; SS override
 30052 000056A8 36C536[E205]            	LDS	SI,[SS:CURBUF]
 30053                                  	; MSDOS 6.0
 30054 000056AD F6440540                	TEST	byte [SI+BUFFINFO.buf_flags],buf_dirty  
 30055                                  					;LB. if already dirty		  ;AN000;
 30056 000056B1 7507                    	JNZ	short yesdirty11	;LB.  don't increment dirty count ;AN000;
 30057                                  	; 10/06/2019
 30058 000056B3 E89105                  	call	INC_DIRTY_COUNT		;LB.				  ;AN000;
 30059                                  	
 30060                                  	;or	byte [si+5],40h
 30061 000056B6 804C0540                	OR	byte [SI+BUFFINFO.buf_flags],buf_dirty  
 30062                                  yesdirty11:				;LB.				;AN000;
 30063                                  ;hkn; SS override
 30064 000056BA 36803E[7805]00          	CMP	BYTE [SS:CLUSSPLIT],0	; 15/08/2018
 30065                                  ;hkn; SS is DOSDATA
 30066 000056C0 16                      	push	ss
 30067 000056C1 1F                      	pop	ds
 30068 000056C2 74AE                    	jz	short hurtfat_retn	; Carry clear
 30069 000056C4 50                      	PUSH	AX
 30070 000056C5 53                      	PUSH	BX
 30071 000056C6 51                      	PUSH	CX
 30072 000056C7 A1[8E05]                	MOV	AX,[CLUSSAVE]
 30073 000056CA 8E1E[E405]              	MOV	DS,[CURBUF+2]
 30074                                  	;;add	si,16 ; MSDOS 3.3
 30075                                  	;add	si,20 ; MSDOS 6.0
 30076 000056CE 83C614                  	ADD	SI,BUFINSIZ
 30077 000056D1 8824                    	MOV	[SI],AH
 30078                                  ;hkn; SS is DOSDATA
 30079                                  	;Context DS
 30080 000056D3 16                      	push	ss
 30081 000056D4 1F                      	pop	ds
 30082                                  	
 30083 000056D5 50                      	PUSH	AX
 30084                                  	
 30085                                  	; MSDOS 6.0
 30086 000056D6 8B16[9205]              	MOV	DX,[CLUSSEC+2]		;F.C. >32mb			;AN000;
 30087 000056DA 8916[0706]              	MOV	[HIGH_SECTOR],DX	;F.C. >32mb			;AN000;
 30088                                  
 30089                                  	; MSDOS 3.3 & MSDOS 6.0
 30090 000056DE 8B16[9005]              	MOV	DX,[CLUSSEC]
 30091 000056E2 BE0100                  	MOV	SI,1
 30092 000056E5 30C0                    	XOR	AL,AL
 30093 000056E7 E85903                  	call	GETBUFFRB
 30094 000056EA 58                      	POP	AX
 30095 000056EB 721C                    	JC	short POPP_RET
 30096 000056ED C53E[E205]              	LDS	DI,[CURBUF]
 30097                                  	
 30098                                  	; MSDOS 6.0
 30099 000056F1 F6450540                	TEST	byte [DI+BUFFINFO.buf_flags],buf_dirty  
 30100                                  					;LB. if already dirty		  ;AN000;
 30101 000056F5 7507                    	JNZ	short yesdirty12	;LB.  don't increment dirty count ;AN000;
 30102 000056F7 E84D05                  	call	INC_DIRTY_COUNT 	;LB.				  ;AN000;
 30103                                  	
 30104                                  	;or	byte [di+5],40h
 30105 000056FA 804D0540                	OR	byte [DI+BUFFINFO.buf_flags],buf_dirty 
 30106                                  yesdirty12:
 30107                                  	;;add	di,16
 30108                                  	;add	di,20 ; MSDOS 6.0
 30109 000056FE 83C714                  	ADD	DI,BUFINSIZ
 30110 00005701 4F                      	DEC	DI
 30111                                  	;add	di,[es:bp+2]
 30112 00005702 26037E02                	ADD	DI,[ES:BP+DPB.SECTOR_SIZE]
 30113 00005706 8805                    	MOV	[DI],AL
 30114 00005708 F8                      	CLC
 30115                                  POPP_RET:
 30116 00005709 16                      	PUSH	SS
 30117 0000570A 1F                      	POP	DS
 30118 0000570B 59                      	POP	CX
 30119 0000570C 5B                      	POP	BX
 30120 0000570D 58                      	POP	AX
 30121 0000570E C3                      	retn
 30122                                  
 30123                                  ; 31/07/2018 - Retro DOS v3.0
 30124                                  
 30125                                  ;Break	<MAPCLUSTER - BUFFER A FAT SECTOR>
 30126                                  ;---------------------------------------------------------------------------
 30127                                  ;
 30128                                  ; Procedure Name : MAPCLUSTER
 30129                                  ;
 30130                                  ; Inputs:
 30131                                  ;	ES:BP Points to DPB
 30132                                  ;	BX Is cluster number
 30133                                  ; Function:
 30134                                  ;	Get a pointer to the cluster
 30135                                  ; Outputs:
 30136                                  ;	DS:DI Points to contents of FAT for given cluster
 30137                                  ;	DS:SI Points to start of buffer
 30138                                  ;	Zero Not set if cluster data is in high 12 bits of word
 30139                                  ;	Zero set if cluster data is in low 12 or 16 bits
 30140                                  ;	Carry set if failed.
 30141                                  ; SI is destroyed.
 30142                                  ;
 30143                                  ;---------------------------------------------------------------------------
 30144                                  
 30145                                  	; 20/05/2019 - Retro DOS v4.0
 30146                                  	; DOSCODE:9601h (MSDOS 6.21, MSDOS.SYS)
 30147                                  	; 27/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 30148                                  	; DOSCODE:95A5h (MSDOS 5.0, MSDOS.SYS)
 30149                                  
 30150                                  MAPCLUSTER:
 30151                                  	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 5A15h
 30152 0000570F C606[7805]00            	MOV	BYTE [CLUSSPLIT],0
 30153                                  	;SAVE	<AX,BX,CX,DX>
 30154 00005714 50                      	push	ax
 30155 00005715 53                      	push	bx
 30156 00005716 51                      	push	cx
 30157 00005717 52                      	push	dx
 30158 00005718 89D8                    	MOV	AX,BX			; AX = BX
 30159 0000571A 26817E0DF60F            	CMP	word [ES:BP+DPB.MAX_CLUSTER],4096-10  ; MZ 16 bit fat?
 30160 00005720 7302                    	JAE	short Map16		; MZ yes, do 16 bit algorithm
 30161 00005722 D1E8                    	SHR	AX,1			; AX = BX/2
 30162                                  Map16:	
 30163                                  	; MSDOS 6.0			; MZ skip prev => AX=2*BX
 30164 00005724 31FF                    	XOR	DI,DI ; *		; >32mb fat ;AN000;
 30165                                  	; MSDOS 3.3 (& MSDOS 6.0)
 30166 00005726 01D8                    	ADD	AX,BX			; AX = 1.5*fat = byte offset in fat
 30167 00005728 11FF                    	ADC	DI,DI ; * MSDOS 6.0	; >32mb fat ;DI is zero before op;AN000;
 30168 0000572A 268B4E02                	MOV	CX,[ES:BP+DPB.SECTOR_SIZE]
 30169                                  
 30170                                  ;IF FastDiv
 30171                                  ;
 30172                                  ; Gross hack: 99% of all disks have 512 bytes per sector. We test for this
 30173                                  ; case and apply a really fast algorithm to get the desired results
 30174                                  ;
 30175                                  ; Divide method takes 157+4*4=173 (MOV and DIV)
 30176                                  ; Fast method takes 39+20*4=119
 30177                                  ;
 30178                                  ; This saves a bunch.
 30179                                  
 30180 0000572E 81F90002                	CMP	CX,512			; 4  Is this 512 byte sector?
 30181 00005732 7510                    	jne	short _DoDiv		; 4  for no jump
 30182 00005734 89C2                    	MOV	DX,AX			; 2  get set for remainder
 30183 00005736 81E2FF01                	AND	DX,512-1		; 4  Form remainder
 30184 0000573A 88E0                    	MOV	AL,AH			; 2  Quotient in formation in AL
 30185                                  	; MDOS 3.3
 30186                                  	;shr	al,1	
 30187                                  	; MDOS 6.0
 30188 0000573C D1EF                    	shr	di,1			; 2
 30189 0000573E D0D8                    	rcr	al,1			; 2
 30190                                  	; MDOS 3.3 (& MSDOS 6.0)
 30191 00005740 30E4                    	xor	ah,ah			; 3
 30192 00005742 EB04                    	jmp	short DivDone		; 16
 30193                                  _DoDiv:
 30194                                  ;ENDIF
 30195                                  	; MSDOS 3.3
 30196                                  	;xor	dx,dx
 30197                                  	; MSDOS 6.0
 30198 00005744 89FA                    	mov	dx,di			; 2
 30199                                  	; MSDOS 3.3 (& MSDOS 6.0)	
 30200 00005746 F7F1                    	DIV	CX			; 155 AX is FAT sector # DX is sector index
 30201                                  ;IF FastDiv
 30202                                  DivDone:
 30203                                  ;ENDIF
 30204                                  	;add	ax,[es:bp+6]
 30205 00005748 26034606                	ADD	AX,[ES:BP+DPB.FIRST_FAT]
 30206 0000574C 49                      	DEC	CX			; CX is sector size - 1
 30207                                  	;SAVE	<AX,DX,CX>
 30208 0000574D 50                      	push	ax
 30209 0000574E 52                      	push	dx
 30210 0000574F 51                      	push	cx
 30211 00005750 89C2                    	MOV	DX,AX
 30212                                  
 30213                                  	; MSDOS 6.0
 30214 00005752 C706[0706]0000          	MOV	word [HIGH_SECTOR],0 	;F.C. >32mb  low sector #
 30215                                  	; MDOS 3.3 (& MSDOS 6.0)
 30216 00005758 30C0                    	XOR	AL,AL
 30217 0000575A BE0100                  	MOV	SI,1
 30218                                  	;invoke	GETBUFFRB
 30219 0000575D E8E302                  	call	GETBUFFRB
 30220                                  	;RESTORE <CX,AX,DX>		; CX is sec siz-1, AX is offset in sec
 30221 00005760 59                      	pop	cx
 30222 00005761 58                      	pop	ax
 30223 00005762 5A                      	pop	dx
 30224 00005763 7257                    	JC	short MAP_POP
 30225                                  
 30226 00005765 C536[E205]              	LDS	SI,[CURBUF]
 30227                                  	;;lea	di,[si+16]
 30228                                  	;lea	di,[si+20] ; MSDOS 6.0
 30229 00005769 8D7C14                  	LEA	DI,[SI+BUFINSIZ]
 30230 0000576C 01C7                    	ADD	DI,AX
 30231 0000576E 39C8                    	CMP	AX,CX
 30232 00005770 7537                    	JNZ	short MAPRET
 30233 00005772 8A05                    	MOV	AL,[DI]
 30234                                  	;Context DS		 	;hkn; SS is DOSDATA
 30235 00005774 16                      	push	ss
 30236 00005775 1F                      	pop	ds	
 30237 00005776 FE06[7805]              	INC	BYTE [CLUSSPLIT]
 30238 0000577A A2[8E05]                	MOV	[CLUSSAVE],AL
 30239 0000577D 8916[9005]              	MOV	[CLUSSEC],DX
 30240                                  	; MSDOS 6.0
 30241 00005781 C706[9205]0000          	MOV	WORD [CLUSSEC+2],0      ;F.C. >32mb		;AN000;
 30242 00005787 42                      	INC	DX
 30243 00005788 C706[0706]0000          	MOV	word [HIGH_SECTOR],0	;F.C. >32mb FAT sector <32mb ;AN000;
 30244                                  	; MDOS 3.3 (& MSDOS 6.0)
 30245 0000578E 30C0                    	XOR	AL,AL
 30246 00005790 BE0100                  	MOV	SI,1
 30247                                  	;invoke	GETBUFFRB
 30248 00005793 E8AD02                  	call	GETBUFFRB
 30249 00005796 7224                    	JC	short MAP_POP
 30250 00005798 C536[E205]              	LDS	SI,[CURBUF]
 30251 0000579C 8D7C14                  	LEA	DI,[SI+BUFINSIZ]
 30252 0000579F 8A05                    	MOV	AL,[DI]
 30253                                  	;Context DS			;hkn; SS is DOSDATA
 30254 000057A1 16                      	push	ss
 30255 000057A2 1F                      	pop	ds
 30256 000057A3 A2[8F05]                	MOV	[CLUSSAVE+1],AL
 30257                                  
 30258                                  ;hkn; CLUSSAVE is in DOSDATA
 30259 000057A6 BF[8E05]                	MOV	DI,CLUSSAVE
 30260                                  MAPRET:
 30261                                  	;RESTORE <DX,CX,BX>
 30262 000057A9 5A                      	pop	dx
 30263 000057AA 59                      	pop	cx
 30264 000057AB 5B                      	pop	bx
 30265 000057AC 31C0                    	XOR	AX,AX			; MZ allow shift to clear carry
 30266 000057AE 26817E0DF60F            	CMP	word [ES:BP+DPB.MAX_CLUSTER],4096-10 ; MZ is this 16-bit fat?
 30267 000057B4 7302                    	JAE	short MapSet		; MZ no, set flags
 30268 000057B6 89D8                    	MOV	AX,BX
 30269                                  MapSet:
 30270 000057B8 A801                    	TEST	AL,1			; set zero flag if not on boundary
 30271                                  	;RESTORE <AX>
 30272 000057BA 58                      	pop	ax
 30273 000057BB C3                      	retn
 30274                                  
 30275                                  MAP_POP:
 30276                                  	;RESTORE <DX,CX,BX,AX>
 30277 000057BC 5A                      	pop	dx
 30278 000057BD 59                      	pop	cx
 30279 000057BE 5B                      	pop	bx
 30280 000057BF 58                      	pop	ax
 30281                                  fatread_sft_retn: ; 17/12/2022
 30282 000057C0 C3                      	retn
 30283                                  
 30284                                  ; 20/05/2019 - Retro DOS v4.0
 30285                                  ; DOSCODE:96B3h (MSDOS 6.21, MSDOS.SYS)
 30286                                  ; 27/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 30287                                  ; DOSCODE:9657h (MSDOS 5.0, MSDOS.SYS)
 30288                                  
 30289                                  ;Break	<FATREAD_SFT/FATREAD_CDS -- CHECK DRIVE GET FAT>
 30290                                  ;----------------------------------------------------------------------------
 30291                                  ;
 30292                                  ; Procedure Name : FATREAD_SFT
 30293                                  ;
 30294                                  ; Inputs:
 30295                                  ;	ES:DI points to an SFT for the drive of intrest (local only,
 30296                                  ;		giving a NET SFT will produce system crashing results).
 30297                                  ;	DS DOSDATA
 30298                                  ; Function:
 30299                                  ;	Can be used by an SFT routine (like CLOSE) to invalidate buffers
 30300                                  ;	if disk changed.
 30301                                  ;	In other respects, same as FATREAD_CDS.
 30302                                  ;	(note ES:DI destroyed!)
 30303                                  ; Outputs:
 30304                                  ;	Carry set if error (currently user FAILed to I 24)
 30305                                  ; NOTE: This routine may cause FATREAD_CDS to "miss" a disk change
 30306                                  ;	as far as invalidating curdir_ID is concerned.
 30307                                  ;	Since getting a true disk changed on this call is a screw up
 30308                                  ;	anyway, that's the way it goes.
 30309                                  ;
 30310                                  ;---------------------------------------------------------------------------
 30311                                  
 30312                                  FATREAD_SFT:
 30313 000057C1 26C46D07                	LES	BP,[ES:DI+SF_ENTRY.sf_devptr]
 30314                                  	; 27/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 30315                                  	;MOV	AL,[ES:BP+DPB.DRIVE] ; [es:bp+0]
 30316                                  	; 15/12/2022
 30317 000057C5 268A4600                	mov	AL,[ES:BP]
 30318 000057C9 A2[7605]                	MOV	[THISDRV],AL
 30319 000057CC E871AE                  	call	GOTDPB			;Set THISDPB
 30320                                  	;CALL	FAT_GOT_DPB
 30321                                  	; 17/12/2022
 30322 000057CF EB78                    	jmp	FAT_GOT_DPB
 30323                                  ;fatread_sft_retn:
 30324                                  	;retn
 30325                                  
 30326                                  ;----------------------------------------------------------------------------
 30327                                  ;
 30328                                  ; Procedure Name : FATREAD_CDS
 30329                                  ;
 30330                                  ; Inputs:
 30331                                  ;	DS:DOSDATA
 30332                                  ;	ES:DI points to an CDS for the drive of intrest (local only,
 30333                                  ;		giving a NET or NUL CDS will produce system crashing results).
 30334                                  ; Function:
 30335                                  ;	If disk may have been changed, media is determined and buffers are
 30336                                  ;	flagged invalid. If not, no action is taken.
 30337                                  ; Outputs:
 30338                                  ;	ES:BP = Drive parameter block
 30339                                  ;	THISDPB = ES:BP
 30340                                  ;	THISDRV set
 30341                                  ;	Carry set if error (currently user FAILed to I 24)
 30342                                  ; DS preserved , all other registers destroyed
 30343                                  ;
 30344                                  ;---------------------------------------------------------------------------
 30345                                  
 30346                                  	; 20/05/2019 - Retro DOS v4.0
 30347                                  	; DOSCODE:96C5h (MSDOS 6.21, MSDOS.SYS)
 30348                                  	; 27/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 30349                                  	; DOSCODE:9669h (MSDOS 5.0, MSDOS.SYS)
 30350                                  
 30351                                  FATREAD_CDS:
 30352 000057D1 06                      	PUSH	ES
 30353 000057D2 57                      	PUSH	DI
 30354                                  	;les	bp,[es:di+45h]
 30355 000057D3 26C46D45                	LES	BP,[ES:DI+curdir.devptr]
 30356                                  	; 27/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 30357                                  	;MOV	AL,[ES:BP+DPB.DRIVE] ; [es:bp+0]
 30358                                  	; 15/12/2022
 30359 000057D7 268A4600                	mov	AL,[ES:BP]
 30360 000057DB A2[7605]                	MOV	[THISDRV],AL
 30361 000057DE E85FAE                  	call	GOTDPB			;Set THISDPB
 30362 000057E1 E86500                  	CALL	FAT_GOT_DPB
 30363 000057E4 5F                      	POP	DI			;Get back CDS pointer
 30364 000057E5 07                      	POP	ES
 30365 000057E6 72D8                    	jc	short fatread_sft_retn
 30366 000057E8 7538                    	JNZ	short NO_CHANGE		;Media NOT changed
 30367                                  
 30368                                  ;	Media changed. We now need to find all CDS structures which use this
 30369                                  ;	DPB and invalidate their ID pointers.
 30370                                  
 30371                                  MED_CHANGE:
 30372 000057EA 31C0                    	XOR	AX,AX
 30373 000057EC 48                      	DEC	AX			; AX = -1
 30374 000057ED 1E                      	PUSH	DS
 30375 000057EE 8A0E[4700]              	MOV	CL,[CDSCOUNT]
 30376 000057F2 30ED                    	XOR	CH,CH			; CX is number of structures
 30377                                  	;lds	si,[es:di+45h]
 30378 000057F4 26C57545                	LDS	SI,[ES:DI+curdir.devptr] ; Find all CDS with this devptr
 30379                                  
 30380                                  ;hkn; SS override
 30381                                  
 30382                                  ;	Find all CDSs with this DevPtr
 30383                                  ;
 30384                                  ;	(ax) = -1
 30385                                  ;	(ds:si) = DevPtr
 30386                                  
 30387 000057F8 36C43E[3C00]            	LES	DI,[SS:CDSADDR]		; (es:di) = CDS pointer
 30388                                  frcd20: 
 30389                                  	;;test	word [es:di+43h],8000h
 30390                                  	;TEST	word [ES:DI+curdir.flags],curdir_isnet
 30391 000057FD 26F6454480              	TEST	byte [ES:DI+curdir.flags+1],(curdir_isnet>>8)
 30392 00005802 7518                    	JNZ	short frcd25		; Leave NET guys alone!!
 30393                                  
 30394                                  	; MSDOS 3.3
 30395                                  	;push	es
 30396                                  	;push	di
 30397                                  	;les	di,[es:di+45h]
 30398                                  	;;les	di,[ES:DI+curdir.devptr]
 30399                                  	;call	POINTCOMP
 30400                                  	;pop	di
 30401                                  	;pop	es
 30402                                  	;jnz	short frcd25
 30403                                  
 30404                                  	; MSDOS 6.0
 30405 00005804 263B7545                	cmp	si,[ES:DI+curdir.devptr]
 30406 00005808 7512                    	jne	short frcd25		; no match
 30407 0000580A 8CDB                    	mov	bx,ds
 30408 0000580C 263B5D47                	cmp	bx,[ES:DI+curdir.devptr+2]
 30409 00005810 750A                    	jne	short frcd25		; CDS not for this drive
 30410                                  
 30411                                  	; MSDOS 3.3 (& MSDOS 6.0)
 30412                                  	;test	[es:di+49h],ax
 30413 00005812 26854549                	test	[ES:DI+curdir.ID],AX
 30414 00005816 7404                    	JZ	short frcd25		; If root (0), leave root
 30415                                  	;mov	[es:di+49h],ax
 30416 00005818 26894549                	MOV	[ES:DI+curdir.ID],AX	; else invalid
 30417                                  frcd25:	
 30418                                  	;;add	di,81  ; MSDOS 3.3
 30419                                  	;add	di,88  ; MSDOS 6.0	 
 30420 0000581C 83C758                  	ADD	DI,curdir.size		; Point to next CDS
 30421 0000581F E2DC                    	LOOP	frcd20
 30422 00005821 1F                      	POP	DS
 30423                                  NO_CHANGE:
 30424 00005822 C42E[8A05]              	LES	BP,[THISDPB]
 30425 00005826 F8                      	CLC
 30426 00005827 C3                      	retn
 30427                                  
 30428                                  ;Break	<Fat_Operation - miscellaneous fat stuff>
 30429                                  ;----------------------------------------------------------------------------
 30430                                  ;
 30431                                  ; Procedure Name : FAT_operation
 30432                                  ;
 30433                                  ;----------------------------------------------------------------------------
 30434                                  
 30435                                  	; 27/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 30436                                  
 30437                                  FAT_operation:
 30438                                  	; 31/07/2018 - Retro DOS v3.0
 30439                                  FATERR:
 30440                                  	;mov	word [es:bp+1Eh],-1
 30441                                  	;mov	word [es:bp+1Fh],-1 ; MSDOS 6.0
 30442 00005828 26C7461FFFFF            	MOV	word [ES:BP+DPB.FREE_CNT],-1 
 30443                                  					; Err in FAT must force recomp of freespace
 30444                                  	;and	di,0FFh
 30445 0000582E 81E7FF00                	AND	DI,STECODE		; Put error code in DI
 30446                                  	;mov	byte [ALLOWED],18h
 30447 00005832 C606[4B03]18            	MOV	byte [ALLOWED],Allowed_FAIL+Allowed_RETRY
 30448                                  	;mov	ah,1Ah
 30449 00005837 B41A                    	MOV	AH,2+Allowed_FAIL+Allowed_RETRY ; While trying to read FAT
 30450 00005839 A0[7605]                	MOV	AL,[THISDRV]		; Tell which drive
 30451 0000583C E8F8FB                  	call	FATAL1
 30452 0000583F C42E[8A05]              	LES	BP,[THISDPB]
 30453 00005843 3C03                    	CMP	AL,3
 30454 00005845 7502                    	JNZ	short FAT_GOT_DPB	; User said retry
 30455 00005847 F9                      	STC				; User said FAIL
 30456 00005848 C3                      	retn
 30457                                  
 30458                                  FAT_GOT_DPB:
 30459                                  	;Context DS			;hkn; SS is DOSDATA
 30460 00005849 16                      	push	ss			
 30461 0000584A 1F                      	pop	ds
 30462                                  	;mov	al,0Fh
 30463 0000584B B00F                    	MOV	AL,DMEDHL
 30464                                  	;mov	ah,[es:bp+1]
 30465 0000584D 268A6601                	MOV	AH,[ES:BP+DPB.UNIT] 
 30466 00005851 A3[5A03]                	MOV	[DEVCALL_REQLEN],AX ; 09/09/2018 
 30467 00005854 C606[5C03]01            	MOV	BYTE [DEVCALL_REQFUNC],DEVMDCH
 30468 00005859 C706[5D03]0000          	MOV	word [DEVCALL_REQSTAT],0
 30469                                  	;;mov	al,[es:bp+16h]
 30470                                  	;mov	al,[es:bp+17h] ; MSDOS 6.0
 30471 0000585F 268A4617                	MOV	AL,[ES:BP+DPB.MEDIA]
 30472 00005863 A2[6703]                	MOV	[CALLMED],AL
 30473 00005866 06                      	PUSH	ES
 30474 00005867 1E                      	PUSH	DS
 30475                                  
 30476                                  ;hkn; DEVCALL is in DOSDATA
 30477 00005868 BB[5A03]                	MOV	BX,DEVCALL
 30478                                  	;;lds	si,[es:bp+12h]
 30479                                  	;lds	si,[es:bp+13h] ; MSDOS 6.0
 30480 0000586B 26C57613                	LDS	SI,[ES:BP+DPB.DRIVER_ADDR] ; DS:SI Points to device header
 30481 0000586F 07                      	POP	ES			; ES:BX Points to call header
 30482 00005870 E8B4EE                  	call	DEVIOCALL2
 30483                                  	;Context DS		 	;hkn; SS is DOSDATA
 30484 00005873 16                      	push	ss
 30485 00005874 1F                      	pop	ds
 30486 00005875 07                      	POP	ES			; Restore ES:BP
 30487 00005876 8B3E[5D03]              	MOV	DI,[DEVCALL_REQSTAT]
 30488                                  	;test	di,8000h
 30489                                  	;jnz	short FATERR
 30490 0000587A 09FF                    	or	di,di
 30491 0000587C 78AA                    	js	short FATERR		; have error
 30492 0000587E 30E4                    	XOR	AH,AH
 30493                                  	;xchg	ah,[es:bp+17h] ; MSDOS 3.3
 30494                                  	;xchg	ah,[es:bp+18h] ; MSDOS 6.0
 30495 00005880 26866618                	XCHG	AH,[ES:BP+DPB.FIRST_ACCESS] ; Reset dpb_first_access
 30496 00005884 A0[7605]                	MOV	AL,[THISDRV]		; Use physical unit number
 30497                                  ; See if we had changed volume id by creating one on the diskette
 30498 00005887 3806[A10A]              	cmp	[VOLCHNG_FLAG],AL
 30499 0000588B 7508                    	jnz	short CHECK_BYT
 30500 0000588D C606[A10A]FF            	mov	byte [VOLCHNG_FLAG],-1
 30501 00005892 E9A700                  	jmp	GOGETBPB		; Need to get device driver to read in
 30502                                  					; new volume label.
 30503                                  CHECK_BYT:
 30504 00005895 0A26[6803]              	OR	AH,[CALLRBYT]
 30505                                  	;JNS	short CHECK_ZR		; ns = 0 or 1
 30506                                  	;JMP	short NEWDSK
 30507                                  	; 17/12/2022
 30508 00005899 7865                    	js	short NEWDSK
 30509                                  	; 27/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 30510                                  	;JNS	short CHECK_ZR		; ns = 0 or 1
 30511                                  	;JMP	short NEWDSK
 30512                                  
 30513                                  CHECK_ZR:
 30514 0000589B 743C                    	JZ	short CHKBUFFDIRT	; jump if I don't know
 30515 0000589D F8                      	CLC
 30516 0000589E C3                      	retn				; If Media not changed (NZ)
 30517                                  
 30518                                  DISK_CHNG_ERR:
 30519 0000589F 06                      	PUSH	ES
 30520 000058A0 55                      	PUSH	BP
 30521                                  	;;les	bp,[es:bp+12h]
 30522                                  	;les	bp,[es:bp+13h] ; MSDOS 6.0
 30523 000058A1 26C46E13                	LES	BP,[ES:BP+DPB.DRIVER_ADDR] ; Get device pointer
 30524                                  	;;test	word [es:bp+4],800h
 30525                                  	;TEST	word [ES:BP+SYSDEV.ATT],DEVOPCL ; Did it set vol id?
 30526 000058A5 26F6460508              	test	byte [es:bp+SYSDEV.ATT+1],(DEVOPCL>>8)
 30527 000058AA 5D                      	POP	BP
 30528 000058AB 07                      	POP	ES
 30529 000058AC 7426                    	JZ	short FAIL_OPJ2		; Nope, FAIL
 30530 000058AE 1E                      	PUSH	DS			; Save buffer pointer for ignore
 30531 000058AF 57                      	PUSH	DI
 30532 000058B0 16                      	push	ss			;hkn; SS is DOSDATA
 30533 000058B1 1F                      	pop	ds
 30534                                  	;mov	byte [ALLOWED],18h
 30535 000058B2 C606[4B03]18            	MOV	byte [ALLOWED],Allowed_FAIL+Allowed_RETRY
 30536 000058B7 06                      	PUSH	ES
 30537 000058B8 C43E[6903]              	LES	DI,[CALLVIDM]		; Get volume ID pointer
 30538 000058BC 8C06[2A03]              	MOV	[EXTERRPT+2],ES
 30539 000058C0 07                      	POP	ES
 30540 000058C1 893E[2803]              	MOV	[EXTERRPT],DI
 30541                                  	;mov	ax,0Fh
 30542 000058C5 B80F00                  	MOV	AX,error_I24_wrong_disk
 30543 000058C8 C606[7505]01            	MOV	byte [READOP],1		; Write
 30544                                  	;invoke	HARDERR
 30545 000058CD E815FB                  	call	HARDERR
 30546 000058D0 5F                      	POP	DI			; Get back buffer for ignore
 30547 000058D1 1F                      	POP	DS
 30548 000058D2 3C03                    	CMP	AL,3
 30549                                  FAIL_OPJ2:
 30550 000058D4 741D                    	JZ	short FAIL_OP
 30551 000058D6 E970FF                  	JMP	FAT_GOT_DPB		; Retry
 30552                                  
 30553                                  CHKBUFFDIRT:
 30554                                  	; 20/05/2019 - Retro DOS v4.0
 30555                                  
 30556                                  	; MSDOS 3.3
 30557                                  	;lds	di,[BUFFHEAD]
 30558                                  
 30559                                  	; MSDOS 6.0
 30560 000058D9 36833E[7100]00          	cmp	word [ss:DirtyBufferCount],0	; any dirty buffers ? ;hkn;
 30561 000058DF 741F                    	je	short NEWDSK			; no, skip the check
 30562 000058E1 E8F800                  	call	GETCURHEAD			; get pointer to first buffer
 30563                                  nbuffer:
 30564                                  	;cmp	al,[di+4]
 30565 000058E4 384504                  	cmp	[di+BUFFINFO.buf_ID],al	; Unit OK ?
 30566 000058E7 750E                    	jne	short lfnxt			; no, go for next buffer
 30567                                  	;test   byte [di+5],40h
 30568 000058E9 F6450540                	TEST	byte [di+BUFFINFO.buf_flags],buf_dirty	; is the buffer dirty ?
 30569 000058ED 7408                    	jz	short lfnxt			; no, go for next buffer
 30570                                  	;Context DS
 30571 000058EF 16                      	push	ss
 30572 000058F0 1F                      	pop	ds
 30573 000058F1 F8                      	clc
 30574 000058F2 C3                      	retn
 30575                                  
 30576                                  FAIL_OP:					; This label & code is here
 30577                                  	;Context DS				;  for reachability
 30578 000058F3 16                      	push	ss
 30579 000058F4 1F                      	pop	ds
 30580 000058F5 F9                      	STC
 30581 000058F6 C3                      	retn
 30582                                  
 30583                                  lfnxt:
 30584                                  	; 15/08/2018 - Retro DOS v3.0
 30585                                  	; MSDOS 3.3
 30586                                  	;lds	di,[di]
 30587                                  
 30588                                  	; 20/05/2019 - Retro DOS v4.0
 30589 000058F7 8B3D                    	mov	di,[di]
 30590                                  	;;mov	di,[di+BUFFINFO.buf_next]	; get next buffer
 30591                                  	
 30592                                  	; MSDOS 3.3
 30593                                  	;cmp	di,-1
 30594                                  	;jne	short nbuffer
 30595                                  	
 30596                                  	; MSDOS 6.0
 30597 000058F9 36393E[BA0E]            	cmp	[ss:FIRST_BUFF_ADDR],di		; is this where we started ?;hkn;
 30598 000058FE 75E4                    	jne	short nbuffer			; no, check this guy also
 30599                                  
 30600                                  ; If no dirty buffers, assume Media changed
 30601                                  NEWDSK:
 30602                                  	;;mov	word [es:bp+1Eh],0FFFFh  ; MSDOS 3.3
 30603                                  	;mov	word [es:bp+1Fh],0FFFFh  ; MSDOS 6.0
 30604 00005900 26C7461FFFFF            	mov	word [ES:BP+DPB.FREE_CNT],-1	; Media changed, must
 30605                                  						;  recompute
 30606                                  	; MSDOS 3.3
 30607                                  	;call	SETVISIT
 30608                                  	; MSDOS 6.0
 30609 00005906 E8D300                  	call	 GETCURHEAD
 30610                                  nxbuffer:
 30611                                  	; MSDOS 3.3
 30612                                  	;or 	byte [di+5],20h
 30613                                  	; MSDOS 3.3 & MSDOS 6.0
 30614                                  	;cmp	[di+4],al
 30615 00005909 384504                  	cmp	[DI+BUFFINFO.buf_ID],al		; This drive ?
 30616 0000590C 7510                    	jne	short lfnxt2
 30617                                  	;test	byte [di+5],40h
 30618 0000590E F6450540                	TEST	byte [DI+BUFFINFO.buf_flags],buf_dirty
 30619 00005912 758B                    	jnz	short DISK_CHNG_ERR
 30620                                  	;mov	word [di+4],20FFh
 30621 00005914 C74504FF20              	mov	word [DI+BUFFINFO.buf_ID],(buf_visit*256)+0FFh ; free up
 30622 00005919 E8D200                  	call	SCANPLACE
 30623                                  	; MSDOS 6.0
 30624 0000591C EB02                    	jmp	short skpbuff
 30625                                  lfnxt2:
 30626 0000591E 8B3D                    	mov	di,[di]
 30627                                  	;mov	di,[di+BUFFINFO.buf_next]
 30628                                  skpbuff:
 30629                                  	; MSDOS 6.0
 30630 00005920 363B3E[BA0E]            	cmp	di,[ss:FIRST_BUFF_ADDR]					;hkn;
 30631 00005925 75E2                    	jne	short nxbuffer
 30632                                  
 30633 00005927 36833E[7700]00          	CMP	word [ss:SC_CACHE_COUNT],0 ;LB.  look ahead buffers ?	;AN001;
 30634 0000592D 740D                    	JZ	short GOGETBPB		;LB.  no			;AN001;
 30635 0000592F 363A06[B00D]            	CMP	AL,[ss:CurSC_DRIVE]	;LB.  same as changed drive	;AN001;
 30636 00005934 7506                    	JNZ	short GOGETBPB		;LB.  no			;AN001;
 30637 00005936 36C606[B00D]FF          	MOV	byte [ss:CurSC_DRIVE],-1 ;LB.  invalidate look ahead buffers ;AN000;
 30638                                  ;lfnxt2:
 30639                                  	; MSDOS 3.3
 30640                                  	;call	SKIPVISIT
 30641                                  	;jnz	short nxbuffer
 30642                                  GOGETBPB:
 30643                                  	; MSDOS 3.3 & MSDOS 6.0
 30644                                  	;;lds	di,[es:bp+12h]
 30645                                  	;lds	di,[es:bp+13h] ; MSDOS 6.0	
 30646 0000593C 26C57E13                	LDS	DI,[ES:BP+DPB.DRIVER_ADDR]
 30647                                  	; 20/05/2019
 30648                                  	;test	word [di+4],2000h
 30649                                  	;TEST	word [DI+SYSDEV.ATT],ISFATBYDEV
 30650 00005940 F6450520                	TEST	byte [DI+SYSDEV.ATT+1],(ISFATBYDEV>>8)
 30651 00005944 7510                    	JNZ	short GETFREEBUF
 30652                                  	;context DS	    		;hkn; SS is DOSDATA
 30653 00005946 16                      	push	ss
 30654 00005947 1F                      	pop	ds
 30655 00005948 BB0200                  	MOV	BX,2
 30656 0000594B E8D1FC                  	CALL	UNPACK			; Read the first FAT sector into CURBUF
 30657                                  FAIL_OPJ:
 30658 0000594E 72A3                    	JC	short FAIL_OP
 30659 00005950 C53E[E205]              	LDS	DI,[CURBUF]
 30660 00005954 EB13                    	JMP	SHORT GOTGETBUF
 30661                                  
 30662                                  GETFREEBUF:
 30663 00005956 06                      	PUSH	ES			; Get a free buffer for BIOS to use
 30664 00005957 55                      	PUSH	BP
 30665                                  	; MSDOS 3.3
 30666                                  	;LDS	DI,[SS:BUFFHEAD] ; 15/08/2018
 30667                                  	; MSDOS 6.0
 30668 00005958 31D2                    	XOR	DX,DX			;LB.  fake to get 1st	  ;AN000;
 30669                                  ;hkn; SS override
 30670 0000595A 368916[0706]            	MOV	[SS:HIGH_SECTOR],DX	;LB.  buffer addr	  ;AN000;
 30671 0000595F E87A00                  	call	GETCURHEAD		;LB.			  ;AN000;
 30672                                  	; MSDOS 3.3 & MSDOS 6.0
 30673 00005962 E84202                  	call	BUFWRITE
 30674 00005965 5D                      	POP	BP
 30675 00005966 07                      	POP	ES
 30676                                  	;JC	short FAIL_OPJ
 30677 00005967 728A                    	jc	short FAIL_OP
 30678                                  GOTGETBUF:
 30679                                  	;;add	di,16
 30680                                  	;add	di,20 ; MSDOS 6.0
 30681 00005969 83C714                  	ADD	DI,BUFINSIZ
 30682                                  
 30683                                  ;hkn; SS override
 30684 0000596C 368C1E[6A03]            	MOV	[SS:CALLXAD+2],DS
 30685                                  	;Context DS			;hkn; SS is DOSDATA
 30686 00005971 16                      	push	ss
 30687 00005972 1F                      	pop	ds
 30688 00005973 893E[6803]              	MOV	[CALLXAD],DI
 30689                                  	;mov	al,16h
 30690 00005977 B016                    	MOV	AL,DBPBHL
 30691                                  	;mov	ah,[es:bp+1]
 30692 00005979 268A6601                	MOV	AH,[ES:BP+DPB.UNIT]
 30693 0000597D A3[5A03]                	MOV	[DEVCALL_REQLEN],AX ; 09/09/2018
 30694 00005980 C606[5C03]02            	MOV	BYTE [DEVCALL_REQFUNC],DEVBPB
 30695 00005985 C706[5D03]0000          	MOV	word [DEVCALL_REQSTAT],0
 30696                                  	;;mov	al,[es:bp+16h]
 30697                                  	;mov	al,[es:bp+17h]
 30698 0000598B 268A4617                	MOV	AL,[ES:BP+DPB.MEDIA]
 30699 0000598F A2[6703]                	MOV	[CALLMED],AL
 30700 00005992 06                      	PUSH	ES
 30701 00005993 1E                      	PUSH	DS
 30702                                  	;;push	word [es:bp+14h]
 30703                                  	;push	word [es:bp+15h] ; MSDOS 6.0
 30704 00005994 26FF7615                	PUSH	WORD [ES:BP+DPB.DRIVER_ADDR+2]
 30705                                  	;;push	word [es:bp+12h]
 30706                                  	;push	word [es:bp+13h] ; MSDOS 6.0
 30707 00005998 26FF7613                	PUSH	WORD [ES:BP+DPB.DRIVER_ADDR]
 30708                                  
 30709                                  ;hkn; DEVCALL is in DOSDATA
 30710 0000599C BB[5A03]                	MOV	BX,DEVCALL
 30711 0000599F 5E                      	POP	SI
 30712 000059A0 1F                      	POP	DS			; DS:SI Points to device header
 30713 000059A1 07                      	POP	ES			; ES:BX Points to call header
 30714                                  	;invoke	DEVIOCALL2
 30715 000059A2 E882ED                  	call	DEVIOCALL2
 30716 000059A5 07                      	POP	ES			; Restore ES:BP
 30717                                  	;Context DS
 30718 000059A6 16                      	push	ss		 	;hkn; SS is DOSDATA
 30719 000059A7 1F                      	pop	ds
 30720 000059A8 8B3E[5D03]              	MOV	DI,[DEVCALL_REQSTAT]
 30721                                  	; MSDOS 3.3
 30722                                  	;test	di,8000h
 30723                                  	;jnz	short FATERRJ
 30724                                  	; MSDOS 6.0
 30725 000059AC 09FF                    	or	di,di
 30726 000059AE 7829                    	js	short FATERRJ 		; have error
 30727                                  	;;mov	al,[es:bp+16h]
 30728                                  	;mov	al,[es:bp+17h]  ; MSDOS 6.0
 30729 000059B0 268A4617                	MOV	AL,[ES:BP+DPB.MEDIA]
 30730 000059B4 C536[6C03]              	LDS	SI,[CALLBPB]
 30731                                  	;;mov	word [es:bp+1Ch],0
 30732                                  	;mov	word [es:bp+1Dh],0 ; MSDOS 6.0
 30733 000059B8 26C7461D0000            	MOV	word [ES:BP+DPB.NEXT_FREE],0 ; recycle scanning pointer
 30734                                  	;invoke	$SETDPB
 30735 000059BE E858B6                  	call	_$SETDPB
 30736                                  
 30737                                  ;hkn; SS override
 30738 000059C1 36C53E[6803]            	LDS	DI,[SS:CALLXAD]		; Get back buffer pointer
 30739                                  	;mov	al,[es:bp+8]
 30740 000059C6 268A4608                	MOV	AL,[ES:BP+DPB.FAT_COUNT]
 30741                                  
 30742                                  	; MSDOS 3.3
 30743                                  	;;mov	ah,[es:bp+0Fh]
 30744                                  	;MOV	AH,[ES:BP+DPB.FAT_SIZE]
 30745                                  	;;mov	[DI-8],ax
 30746                                  	;MOV	[DI+BUFFINFO.buf_wrtcnt-BUFINSIZ],AX
 30747                                  
 30748                                  	; MSDOS 6.0
 30749                                  	;mov	[di-0Ah],al
 30750 000059CA 8845F6                  	MOV	[DI+BUFFINFO.buf_wrtcnt-BUFINSIZ],AL 
 30751                                  						;>32mb		  ;AN000;
 30752                                  	;mov	ax,[es:bp+0Fh]
 30753 000059CD 268B460F                	MOV	AX,[ES:BP+DPB.FAT_SIZE]		;>32mb
 30754                                  	;mov	[di-9h],ax			  ;AC000;
 30755 000059D1 8945F7                  	MOV	[DI+BUFFINFO.buf_wrtcntinc-BUFINSIZ],AX 
 30756                                  					;>32mb Correct buffer info ;AC000;
 30757                                  	;Context DS			;hkn; SS is DOSDATA
 30758 000059D4 16                      	push	ss
 30759 000059D5 1F                      	pop	ds
 30760 000059D6 30C0                    	XOR	AL,AL			;Media changed (Z), Carry clear
 30761 000059D8 C3                      	retn
 30762                                  
 30763                                  FATERRJ: 
 30764 000059D9 E94CFE                  	JMP	FATERR
 30765                                  
 30766                                  ;============================================================================
 30767                                  ; STDBUF.ASM
 30768                                  ;============================================================================
 30769                                  ; Retro DOS v2.0 - 12/03/2018
 30770                                  
 30771                                  ;
 30772                                  ; Standard buffer management for MSDOS
 30773                                  ;
 30774                                  
 30775                                  ;.xlist
 30776                                  ;.xcref
 30777                                  ;INCLUDE STDSW.ASM
 30778                                  ;.cref
 30779                                  ;.list
 30780                                  
 30781                                  ;TITLE	STDBUF - MSDOS buffer management
 30782                                  ;NAME	STDBUF
 30783                                  
 30784                                  ;INCLUDE BUF.ASM
 30785                                  
 30786                                  ;============================================================================
 30787                                  ; BUF.ASM
 30788                                  ;============================================================================
 30789                                  ; 31/07/2018 - Retro DOS v3.0
 30790                                  ; Retro DOS v2.0 - 12/03/2018
 30791                                  ;
 30792                                  ; buffer management for MSDOS
 30793                                  ;
 30794                                  ;CODE	SEGMENT BYTE PUBLIC  'CODE'
 30795                                  ;       ASSUME  SS:DOSGROUP,CS:DOSGROUP
 30796                                  ;
 30797                                  ;SUBTTL SETVISIT,SKIPVISIT -- MANAGE BUFFER SCANS
 30798                                  ;
 30799                                  ;SETVISIT:
 30800                                  ;	; 31/07/2018 - Retro DOS v3.0
 30801                                  ;	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 5CAFh
 30802                                  ;; Inputs:
 30803                                  ;;      None
 30804                                  ;; Function:
 30805                                  ;;      Set up a scan of I/O buffers
 30806                                  ;; Outputs:
 30807                                  ;;      All visit flags = 0
 30808                                  ;;              NOTE: This pre-scan is needed because a hard disk error
 30809                                  ;;                    may cause a scan to stop in the middle leaving some
 30810                                  ;;                    visit flags set, and some not set.
 30811                                  ;;      DS:DI Points to [BUFFHEAD]
 30812                                  ;; No other registers altered
 30813                                  ;
 30814                                  ;       LDS     DI,[SS:BUFFHEAD] ; 15/03/2018
 30815                                  ;	PUSH    AX
 30816                                  ;       ;;XOR	AX,AX	  ;; MSDOS 2.11
 30817                                  ;	;mov	al,0DFh
 30818                                  ;	mov	al,~buf_visit
 30819                                  ;SETLOOP:
 30820                                  ;       ;;MOV	[DI+7],AL ;; MSDOS 2.11
 30821                                  ;	;and	[DI+5],al
 30822                                  ;	AND	[DI+BUFFINFO.buf_flags],AL
 30823                                  ;       LDS     DI,[DI]
 30824                                  ;       CMP     DI,-1
 30825                                  ;       JNZ     SHORT SETLOOP
 30826                                  ;       POP     AX ; 09/09/2018
 30827                                  ;	LDS     DI,[SS:BUFFHEAD] ; 15/03/2018
 30828                                  ;SVISIT_RETN:
 30829                                  ;       RETN
 30830                                  ;
 30831                                  ;SKIPVISIT:
 30832                                  ;	; 31/07/2018 - Retro DOS v3.0
 30833                                  ;	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 5CC8h
 30834                                  ;
 30835                                  ;; Inputs:
 30836                                  ;;      DS:DI Points to a buffer
 30837                                  ;; Function:
 30838                                  ;;      Skip visited buffers
 30839                                  ;; Outputs:
 30840                                  ;;      DS:DI Points to next unvisited buffer
 30841                                  ;;      Zero is set if skip to LAST buffer
 30842                                  ;; No other registers altered
 30843                                  ;
 30844                                  ;       CMP     DI,-1
 30845                                  ;       ;retz
 30846                                  ;       JZ	SHORT SVISIT_RETN
 30847                                  ;
 30848                                  ;	;;CMP	BYTE [DI+7],1 ;; MSDOS 2.11
 30849                                  ;       ;;;retnz
 30850                                  ;       ;;JNZ	SHORT SVISIT_RETN
 30851                                  ;
 30852                                  ;	;test	byte [di+5],20h
 30853                                  ;	TEST	byte [DI+BUFFINFO.buf_flags],buf_visit	
 30854                                  ;	JNZ	short SKIPLOOP
 30855                                  ;	
 30856                                  ;	push	ax
 30857                                  ;	or	al,1
 30858                                  ;	pop	ax
 30859                                  ;	retn	
 30860                                  ;
 30861                                  ;SKIPLOOP:
 30862                                  ;	LDS     DI,[DI]
 30863                                  ;       JMP     SHORT SKIPVISIT
 30864                                  
 30865                                  ;============================================================================
 30866                                  ; BUF.ASM, MSDOS 6.0, 1991
 30867                                  ;============================================================================
 30868                                  ; 31/07/2018 - Retro DOS v3.0
 30869                                  ; 04/05/2019 - Retro DOS v4.0
 30870                                  
 30871                                  ;	TITLE	BUF - MSDOS buffer management
 30872                                  ;	NAME	BUF
 30873                                  
 30874                                  ;**	BUF.ASM - Low level routines for buffer cache management
 30875                                  ;
 30876                                  ;	GETCURHEAD
 30877                                  ;	ScanPlace
 30878                                  ;	PLACEBUF
 30879                                  ;	PLACEHEAD
 30880                                  ;	PointComp
 30881                                  ;	GETBUFFR
 30882                                  ;	GETBUFFRB
 30883                                  ;	FlushBuf
 30884                                  ;	BufWrite
 30885                                  ;	SET_RQ_SC_PARMS
 30886                                  ;
 30887                                  ;	Revision history:
 30888                                  ;
 30889                                  ;		AN000  version 4.00  Jan. 1988
 30890                                  ;		A004   PTM 3765 -- Disk reset failed
 30891                                  ;		M039 DB 10/17/90 - Disk write optimization
 30892                                  ;		I001   5.0 PTR 722211 - Preserve CY when in buffer in HMA
 30893                                  
 30894                                  ;Break	<GETCURHEAD -- Get current buffer header>
 30895                                  ;----------------------------------------------------------------------------
 30896                                  ; Procedure Name : GetCurHead
 30897                                  ; Inputs:
 30898                                  ;	 No Inputs
 30899                                  ; Function:
 30900                                  ;	Returns the pointer to the first buffer in Queue
 30901                                  ;	and updates FIRST_BUFF_ADDR
 30902                                  ;       and invalidates LASTBUFFER (recency pointer)
 30903                                  ; Outputs:
 30904                                  ;	DS:DI = pointer to the first buffer in Queue
 30905                                  ;	FIRST_BUFF_ADDR = offset ( DI ) of First buffer in Queue
 30906                                  ;       LASTBUFFER = -1
 30907                                  ; No other registers altered
 30908                                  ;----------------------------------------------------------------------------
 30909                                  
 30910                                  ; 04/05/2019 - Retro DOS v4.0
 30911                                  ; DOSCODE:98D2h (MSDOS 6.21, MSDOS.SYS)
 30912                                  ; 27/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 30913                                  ; DOSCODE:9876h (MSDOS 5.0, MSDOS.SYS)
 30914                                  
 30915                                  GETCURHEAD:
 30916 000059DC 36C53E[6D00]            	lds	di,[ss:BufferQueue]	; Pointer to the first buffer
 30917 000059E1 36C706[1E00]FFFF        	mov	word [ss:LastBuffer],-1	; invalidate last buffer
 30918 000059E8 36893E[BA0E]            	mov	[ss:FIRST_BUFF_ADDR],di	;save first buffer addr
 30919 000059ED C3                      	retn
 30920                                  
 30921                                  ;Break	<SCANPLACE, PLACEBUF -- PUT A BUFFER BACK IN THE POOL>
 30922                                  ;----------------------------------------------------------------------------
 30923                                  ; Procedure Name : ScanPlace
 30924                                  ; Inputs:
 30925                                  ;	Same as PLACEBUF
 30926                                  ; Function:
 30927                                  ;	Save scan location and call PLACEBUF
 30928                                  ; Outputs:
 30929                                  ;	DS:DI Points to saved scan location
 30930                                  ; All registers, except DS:DI, preserved.
 30931                                  ;----------------------------------------------------------------------------
 30932                                  ;M039: Rewritten to preserve registers.
 30933                                  
 30934                                  ;SCANPLACE:
 30935                                  ;	; 31/07/2018 - Retro DOS v3.0
 30936                                  ;	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 5DDCh
 30937                                  ;	push	es
 30938                                  ;	les	si,[di]
 30939                                  ;	;les	si,[DI+BUFFINFO.buf_link]
 30940                                  ;	call	PLACEBUF
 30941                                  ;	push	es
 30942                                  ;	pop	ds
 30943                                  ;	mov	di,si
 30944                                  ;	pop	es
 30945                                  ;scanplace_retn:
 30946                                  ;	retn	
 30947                                  	
 30948                                  	; MSDOS 6.0
 30949                                  SCANPLACE:
 30950 000059EE FF35                    	push	word [di]
 30951                                  	;push	word [di+BUFFINFO.buf_next] ;Save scan location
 30952 000059F0 E80200                  	call	PLACEBUF
 30953 000059F3 5F                      	pop	di
 30954 000059F4 C3                      	retn
 30955                                  
 30956                                  ;----------------------------------------------------------------------------
 30957                                  ; Procedure Name : PlaceBuf
 30958                                  ; Input:
 30959                                  ;	DS:DI points to buffer (DS->BUFFINFO array, DI=offset in array)
 30960                                  ; Function:
 30961                                  ;	Remove buffer from queue and re-insert it in proper place.
 30962                                  ; NO registers altered
 30963                                  ;----------------------------------------------------------------------------
 30964                                  
 30965                                  ;procedure PLACEBUF,NEAR
 30966                                  
 30967                                  	; 27/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 30968                                  	; 20/05/2019 - Retro DOS v4.0
 30969                                  PLACEBUF:
 30970                                  	; 31/07/2018 - Retro DOS v3.0
 30971                                  
 30972                                  	; MSDOS 6.0
 30973 000059F5 50                      	push	AX			;Save only regs we modify	;AN000;
 30974 000059F6 53                      	push	BX							;AN000;
 30975 000059F7 56                      	push	SI							;AN000;
 30976                                  	
 30977 000059F8 8B05                    	mov	ax,[di]
 30978                                  	;mov	ax,[di+BUFFINFO.buf_next]
 30979 000059FA 368B1E[6D00]            	mov	bx,[ss:BufferQueue]	; bx = offset of head of list;smr;SS Override
 30980                                  	
 30981 000059FF 39D8                    	cmp	ax,bx				;Buf = last?		;AN000;
 30982 00005A01 7420                    	je	short nret			;Yes, special case	;AN000;
 30983 00005A03 39DF                    	cmp	di,bx				;Buf = first?		;AN000;
 30984 00005A05 7506                    	jne	short not_first 		;Yes, special case	;AN000;
 30985 00005A07 36A3[6D00]              	mov	[ss:BufferQueue],ax		;smr;SS Override
 30986 00005A0B EB16                    	jmp	short nret 			;Continue with repositioning;AN000;
 30987                                  not_first:
 30988                                  	;mov	si,[di+2]
 30989 00005A0D 8B7502                  	mov	SI,[DI+BUFFINFO.buf_prev]	;No, SI = prior Buf	;AN000;
 30990 00005A10 8904                    	mov	[si],ax
 30991                                  	;mov	[SI+BUFFINFO.buf_next],AX	; ax has di->buf_next	;AN000;
 30992 00005A12 96                      	xchg	si,ax
 30993                                  	;mov	[si+2],ax
 30994 00005A13 894402                  	mov	[SI+BUFFINFO.buf_prev],AX	;			;AN000;
 30995                                  	
 30996 00005A16 8B7702                  	mov	SI,[BX+BUFFINFO.buf_prev]	;SI-> last buffer	;AN000;
 30997 00005A19 893C                    	mov	[si],di
 30998                                  	;mov	[SI+BUFFINFO.buf_next],DI	;Add Buf to end of list ;AN000;
 30999 00005A1B 897F02                  	mov	[BX+BUFFINFO.buf_prev],DI				;AN000;
 31000 00005A1E 897502                  	mov	[DI+BUFFINFO.buf_prev],SI	;Update link in Buf too	;AN000;
 31001 00005A21 891D                    	mov	[di],bx
 31002                                  	;mov	[DI+BUFFINFO.buf_next],BX				;AN000;
 31003                                  nret:									;AN000;
 31004 00005A23 5E                      	pop	SI							;AN000;
 31005 00005A24 5B                      	pop	BX							;AN000;
 31006 00005A25 58                      	pop	AX							;AN000;
 31007                                  									;AN000;
 31008                                  	;cmp	byte [di+4],0FFh
 31009 00005A26 807D04FF                	cmp	byte [di+BUFFINFO.buf_ID],-1	; Buffer FREE?		;AN000;
 31010 00005A2A 7505                            jne	short pbx			; M039: -no, jump.
 31011 00005A2C 36893E[6D00]            	mov	[ss:BufferQueue],di		; M039: -yes, make it LRU.
 31012                                  pbx:	
 31013 00005A31 C3                      	retn								;AN000;
 31014                                  
 31015                                  	; 31/07/2018 - Retro DOS v3.0
 31016                                  
 31017                                  	; MSDOS 3.3
 31018                                  	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 5DDCh
 31019                                  
 31020                                  ;PLACEBUF:
 31021                                  ;	; 15/03/2018 - Retro DOS v2.0 (MSDOS 2.11)
 31022                                  ;	
 31023                                  ;       CALL	save_world
 31024                                  ;       LES     CX,[DI]
 31025                                  ;       CMP     CX,-1           	; Buf is LAST?
 31026                                  ;       JZ      SHORT NRET		; Buffer already last
 31027                                  ;       MOV     BP,ES           	; Pointsave = Buf.nextbuf
 31028                                  ;       PUSH    DS
 31029                                  ;       POP     ES              	; Buf is ES:DI
 31030                                  ;	; 15/03/2018
 31031                                  ;       LDS     SI,[SS:BUFFHEAD] 	; Curbuf = HEAD
 31032                                  ;       CALL    POINTCOMP       	; Buf == HEAD?
 31033                                  ;       JNZ     SHORT BUFLOOP
 31034                                  ;       MOV     [SS:BUFFHEAD],CX
 31035                                  ;       MOV     [SS:BUFFHEAD+2],BP	; HEAD = Pointsave
 31036                                  ;       JMP     SHORT LOOKEND
 31037                                  ;BUFLOOP:
 31038                                  ;	; 31/07/2018
 31039                                  ;	mov	ax,ds
 31040                                  ;	mov	bx,si
 31041                                  ;	;lds	si,[SI+BUFFINFO.buf_link]
 31042                                  ;       LDS     SI,[SI]
 31043                                  ;       CALL    POINTCOMP
 31044                                  ;       jnz	short BUFLOOP
 31045                                  ;	;
 31046                                  ;	mov	ds,ax
 31047                                  ;	mov	si,bx
 31048                                  ;	mov	[SI],cx
 31049                                  ;	;mov	[SI+BUFFINFO.buf_link],cx   ; If Curbuf.nextbuf == buf
 31050                                  ;	mov	[SI+2],bp
 31051                                  ;	;mov	[BX+BUFFINFO.buf_link+2],bp ; Curbuf.nextbuf = Pointsave
 31052                                  ;LOOKEND:
 31053                                  ;	mov	ax,ds
 31054                                  ;	mov	bx,si
 31055                                  ;       LDS     SI,[SI]
 31056                                  ;       CMP     SI,-1
 31057                                  ;       jnz     short LOOKEND
 31058                                  ;GOTHEEND:
 31059                                  ;       mov	ds,ax
 31060                                  ;	mov	[BX],di
 31061                                  ;	MOV     [BX+2],ES 		; Curbuf.nextbuf = Buf
 31062                                  ;       MOV     WORD [ES:DI],-1
 31063                                  ;	;mov	word [ES:DI+BUFFINFO.buf_link],-1
 31064                                  ;       MOV     WORD [ES:DI+2],-1 	; Buf is LAST
 31065                                  ;	;mov	word [ES:DI+BUFFINFO.buf_link+2],-1
 31066                                  ;NRET:
 31067                                  ;       CALL	restore_world
 31068                                  ;	
 31069                                  ;	;cmp	byte [di+4],-1
 31070                                  ;	cmp	byte [DI+BUFFINFO.buf_ID],-1  ; Free buffer ?
 31071                                  ;	jnz     short scanplace_retn
 31072                                  ;	call    PLACEHEAD
 31073                                  ;	retn
 31074                                  
 31075                                  ;EndProc PLACEBUF
 31076                                  
 31077                                  ;M039 - Removed PLACEHEAD.
 31078                                  ;----------------------------------------------------------------------------
 31079                                  ; places buffer at head
 31080                                  ;  NOTE:::::: ASSUMES THAT BUFFER IS CURRENTLY THE LAST
 31081                                  ;	ONE IN THE LIST!!!!!!!
 31082                                  ; BUGBUG ---- this routine can be removed because it has only
 31083                                  ; BUGBUG ---- one instruction. This routine is called from
 31084                                  ; BUGBUG ---- 3 places. ( Size = 3*3+6 = 15 bytes )
 31085                                  ; BUGBUG ---- if coded in line = 3 * 5 = 15 bytes
 31086                                  ; BUGBUG ---- But kept as it is for modularity
 31087                                  ;----------------------------------------------------------------------------
 31088                                  ;procedure   PLACEHEAD,NEAR
 31089                                  ;	mov	word ptr [BufferQueue], di
 31090                                  ;	ret
 31091                                  ;EndProc PLACEHEAD
 31092                                  ;M039
 31093                                  
 31094                                  ;----------------------------------------------------------------------------
 31095                                  ; Procedure Name : PLACEHEAD
 31096                                  ;
 31097                                  ; SAME AS PLACEBUF except places buffer at head
 31098                                  ;----------------------------------------------------------------------------
 31099                                  
 31100                                  	; MSDOS 3.3 (Retro DOS v3.0)
 31101                                  	; 05/09/2018
 31102                                  	; MSDOS 2.11 (Retro DOS v2.0)
 31103                                  ;PLACEHEAD:
 31104                                  ;	; 31/07/2018 - Retro DOS v3.0
 31105                                  ;	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 5D4Ah
 31106                                  ;
 31107                                  ;       CALL	save_world
 31108                                  ;       PUSH	DS
 31109                                  ;       POP	ES
 31110                                  ;	; 15/03/2018 - Retro DOS v2.0 (MSDOS 2.11)
 31111                                  ;       LDS     SI,[SS:BUFFHEAD]
 31112                                  ;	; 31/07/2018 - Retro DOS v3.0 (MSDOS 3.3)
 31113                                  ;	CALL    POINTCOMP
 31114                                  ;       JZ      SHORT GOTHEEND2
 31115                                  ;	MOV	[ES:DI],SI
 31116                                  ;	;mov	[ES:DI+BUFFINFO.buf_link],si
 31117                                  ;       MOV	[ES:DI+2],DS
 31118                                  ;	;mov	[ES:DI+BUFFINFO.buf_link+2],ds
 31119                                  ;       MOV	[SS:BUFFHEAD],DI
 31120                                  ;       MOV	[SS:BUFFHEAD+2],ES
 31121                                  ;LOOKEND2:
 31122                                  ;       mov	ax,ds
 31123                                  ;	mov	bx,si
 31124                                  ;	;lds	si,[SI+BUFFINFO.buf_link]
 31125                                  ;       LDS     SI,[SI]
 31126                                  ;       CALL    POINTCOMP
 31127                                  ;       JNZ	SHORT LOOKEND2 ; 05/09/2018
 31128                                  ;       mov	ds,ax
 31129                                  ;	mov	word [bx],-1
 31130                                  ;	;mov	word [BX+BUFFINFO.buf_link],-1
 31131                                  ;	mov	word [bx+2],-1
 31132                                  ;	;mov	word [BX+BUFFINFO.buf_link+2],-1
 31133                                  ;GOTHEEND2:
 31134                                  ;      	call	restore_world
 31135                                  ;placehead_retn:
 31136                                  ;	retn
 31137                                  
 31138                                  ; 20/05/2019 - Retro DOS v4.0
 31139                                  ; DOSCODE:9928h (MSDOS 6.21, MSDOS.SYS)
 31140                                  
 31141                                  ;Break	<POINTCOMP -- 20 BIT POINTER COMPARE>
 31142                                  ;----------------------------------------------------------------------------
 31143                                  ;
 31144                                  ; Procedure Name : PointComp
 31145                                  ; Inputs:
 31146                                  ;         DS:SI & ES:DI
 31147                                  ; Function:
 31148                                  ;          Checks for ((SI==DI) && (ES==DS))
 31149                                  ;	   Assumes that pointers are normalized for the
 31150                                  ;	   same segment
 31151                                  ;
 31152                                  ; Compare DS:SI to ES:DI (or DS:DI to ES:SI) for equality
 31153                                  ; DO NOT USE FOR < or >
 31154                                  ; No Registers altered
 31155                                  ;
 31156                                  ;----------------------------------------------------------------------------
 31157                                  
 31158                                  POINTCOMP:
 31159                                  	; 31/07/2018 - Retro DOS v3.0
 31160                                  	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 5D84h
 31161 00005A32 39FE                    	CMP	SI,DI
 31162 00005A34 750A                    	jnz	short _ret_label	; return if nz
 31163                                  	;jnz	short placehead_retn 
 31164 00005A36 51                      	PUSH	CX
 31165 00005A37 52                      	PUSH	DX
 31166 00005A38 8CD9                    	MOV	CX,DS
 31167 00005A3A 8CC2                    	MOV	DX,ES
 31168 00005A3C 39D1                    	CMP	CX,DX
 31169 00005A3E 5A                      	POP	DX
 31170 00005A3F 59                      	POP	CX
 31171                                  _ret_label:
 31172 00005A40 C3                      	retn
 31173                                  
 31174                                  ; 01/08/2018 - Retro DOS v3.0
 31175                                  ; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 5D93h 
 31176                                  
 31177                                  ;Break	<GETBUFFR, GETBUFFRB -- GET A SECTOR INTO A BUFFER>
 31178                                  
 31179                                  ;**	GetBuffr - Get a non-FAT Sector into a Buffer
 31180                                  ;----------------------------------------------------------------------------
 31181                                  ;	GetBuffr does normal ( non-FAT ) sector buffering
 31182                                  ;	It gets the specified local sector into one of the I/O buffers
 31183                                  ;	and shuffles the queue
 31184                                  ; 
 31185                                  ;	ENTRY	(AL) = 0 means sector must be pre-read
 31186                                  ;		       ELSE no pre-read
 31187                                  ;		(DX) = Desired physical sector number	      (LOW)
 31188                                  ;		HIGH_SECTOR = Desired physical sector number (HIGH)
 31189                                  ;		(ES:BP) = Pointer to drive parameters
 31190                                  ;		ALLOWED set in case of INT 24
 31191                                  ;	EXIT	'C' set if error (user FAIL response to INT24)
 31192                                  ;		'C' clear if OK
 31193                                  ;		CURBUF Points to the Buffer for the sector
 31194                                  ;		    the buffer type bits OF buf_flags = 0, caller must set it
 31195                                  ;	USES	AX, BX, CX, SI, DI, Flags
 31196                                  ;----------------------------------------------------------------------------
 31197                                  
 31198                                  ;**	GetBuffrb - Get a FAT Sector into a Buffer
 31199                                  ;----------------------------------------------------------------------------
 31200                                  ;	GetBuffr reads a sector from the FAT file system's FAT table.
 31201                                  ;	It gets the specified sector into one of the I/O buffers
 31202                                  ;	and shuffles the queue. We need a special entry point so that
 31203                                  ;	we can read the alternate FAT sector if the first read fails, also
 31204                                  ;	so we can mark the buffer as a FAT sector.
 31205                                  ; 
 31206                                  ;	ENTRY	(AL) = 0 means sector must be pre-read
 31207                                  ;		       ELSE no pre-read
 31208                                  ;		(DX) = Desired physical sector number	     (LOW)
 31209                                  ;		(SI) != 0
 31210                                  ;		HIGH_SECTOR = Desired physical sector number (HIGH)
 31211                                  ;		(ES:BP) = Pointer to drive parameters
 31212                                  ;		ALLOWED set in case of INT 24
 31213                                  ;	EXIT	'C' set if error (user FAIL response to INT24)
 31214                                  ;		'C' clear if OK
 31215                                  ;		CUR ddBUF Points to the Buffer for the sector
 31216                                  ;		    the buffer type bits OF buf_flags = 0, caller must set it
 31217                                  ;	USES	AX, BX, CX, SI, DI, Flags
 31218                                  ;----------------------------------------------------------------------------
 31219                                  
 31220                                  	; 20/05/2019 - Retro DOS v4.0
 31221                                  	; DOSCODE:9937h (MSDOS 6.21, MSDOS.SYS)
 31222                                  	; 27/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 31223                                  	; DOSCODE:98DBh (MSDOS 5.0, MSDOS.SYS)
 31224                                  GETBUFFR:
 31225 00005A41 31F6                    	XOR	SI,SI
 31226                                  
 31227                                  ;	This entry point is called for FAT buffering with SI != 0
 31228                                  
 31229                                  GETBUFFRB:
 31230 00005A43 A3[9405]                	MOV	[PREREAD],AX			; save pre-read flag
 31231                                  	; 15/12/2022
 31232 00005A46 268A4600                	mov	al,[ES:BP]
 31233                                  	; 27/11/2022 MSDOS 5.0 MSDOS.SYS compatibility)
 31234                                  	;MOV	AL,[ES:BP+DPB.DRIVE] ; mov al,[es:bp+0]
 31235 00005A4A C53E[1E00]              	LDS	DI,[LastBuffer]			; Get the recency pointer
 31236                                  	; MSDOS 6.0
 31237                                  ;hkn; SS override
 31238 00005A4E 368B0E[0706]            	MOV	CX,[SS:HIGH_SECTOR]		; F.C. >32mb		;AN000;
 31239                                  
 31240                                  ;	See if this is the buffer that was most recently returned.
 31241                                  ;	A big performance win if it is.
 31242                                  
 31243 00005A53 83FFFF                  	CMP	DI,-1				; Recency pointer valid?
 31244 00005A56 7412                    	je	short getb5			; No
 31245                                  	;cmp	dx,[di+6]
 31246 00005A58 3B5506                  	CMP	DX,[DI+BUFFINFO.buf_sector]
 31247 00005A5B 750D                    	JNZ	short getb5			; Wrong sector
 31248                                  	
 31249                                  	; MSDOS 6.0
 31250                                  	;cmp	cx,[di+8]
 31251 00005A5D 3B4D08                  	CMP	CX,[DI+BUFFINFO.buf_sector+2]	; F.C. >32mb		;AN000;
 31252 00005A60 7508                    	JNZ	short getb5			; F.C. >32mb		;AN000;
 31253                                  	
 31254                                  	;cmp	al,[di+4]
 31255 00005A62 3A4504                  	CMP	AL,[DI+BUFFINFO.buf_ID]
 31256                                  	;JZ	getb35				; Just asked for same buffer
 31257 00005A65 7503                    	jnz	short getb5
 31258                                  	;jmp	getb35
 31259                                  	; 17/12/2022
 31260                                  	; 28/07/2019
 31261 00005A67 E9C800                  	jmp	getb35x
 31262                                  	; 07/12/2022 MSDOS 5.0 MSDOS.SYS compatibility)
 31263                                  	;jmp	getb35
 31264                                  
 31265                                  ;	It's not the buffer most recently returned. See if it's in the
 31266                                  ;	cache.
 31267                                  ;
 31268                                  ;	(cx:dx) = sector #
 31269                                  ;	(al) = drive #
 31270                                  ;	(si) = 0 iff non fat sector, != 0 if FAT sector read
 31271                                  ;	??? list may be incomplete ???
 31272                                  
 31273                                  getb5:	
 31274                                  	; MSDOS 3.3
 31275                                  	;lds	di,[SS:BUFFHEAD]
 31276                                  	; MSDOS 6.0
 31277 00005A6A E86FFF                  	CALL	GETCURHEAD			; get Q Head
 31278                                  getb10:	
 31279                                  	;cmp	dx,[di+6]
 31280 00005A6D 3B5506                  	CMP	DX,[DI+BUFFINFO.buf_sector]
 31281 00005A70 750D                    	jne	short getb12			; wrong sector lo
 31282                                  	
 31283                                  	; MSDOS 6.0
 31284                                  	;cmp	cx,[di+8]
 31285 00005A72 3B4D08                  	CMP	CX,[DI+BUFFINFO.buf_sector+2]
 31286 00005A75 7508                    	jne	short getb12			; wrong sector hi
 31287                                  	
 31288                                  	;cmp	al,[di+4]
 31289 00005A77 3A4504                  	CMP	AL,[DI+BUFFINFO.buf_ID]
 31290                                  	;je	short getb25 ; 05/09/2018	; Found the requested sector
 31291 00005A7A 7503                    	jne	short getb12
 31292 00005A7C E98D00                  	jmp	getb25
 31293                                  getb12:	
 31294                                  	; MSDOS 3.3
 31295                                  	;;mov	di,[DI]
 31296                                  	;;;mov	di,[DI+BUFFINFO.buf_link]
 31297                                  	;
 31298                                  	; 15/08/2018
 31299                                  	;lds	di,[di]
 31300                                  
 31301                                  	;cmp	di,-1 ; 0FFFFh
 31302                                  	;jne	short getb10
 31303                                  	;lds	di,[SS:BUFFHEAD]
 31304                                  
 31305                                  	; MSDOS 6.0
 31306 00005A7F 8B3D                    	mov	di,[di]
 31307                                  	;mov	DI,[DI+BUFFINFO.BUF_NEXT]
 31308 00005A81 363B3E[BA0E]            	cmp	DI,[SS:FIRST_BUFF_ADDR]		; back at the front again?
 31309 00005A86 75E5                    	jne	short getb10			; no, continue looking
 31310                                  
 31311                                  ;	The requested sector is not available in the buffers. DS:DI now points
 31312                                  ;	to the first buffer in the Queue. Flush the first buffer & read in the
 31313                                  ;	new sector into it.
 31314                                  ;
 31315                                  ;	BUGBUG - what goes on here? Isn't the first guy the most recently
 31316                                  ;	used guy? Shuld be for fast lookup. If he is, we shouldn't take
 31317                                  ;	him, we should take LRU. And the above lookup shouldn't be
 31318                                  ;	down a chain, but should be hashed.
 31319                                  ;
 31320                                  ;	(DS:DI) = first buffer in the queue
 31321                                  ;	(CX:DX) = sector # we want
 31322                                  ;	(si) = 0 iff non fat sector, != 0 if FAT sector read
 31323                                  
 31324                                  	; MSDOS 3.3 & MSDOS 6.0
 31325                                  ;hkn; SS override
 31326 00005A88 51                      	PUSH	CX  ; MSDOS 6.0
 31327 00005A89 56                      	push	si
 31328 00005A8A 52                      	push	dx
 31329 00005A8B 55                      	push	bp
 31330 00005A8C 06                      	push	es
 31331 00005A8D E81701                  	CALL	BUFWRITE			; Write out the dirty buffer
 31332 00005A90 07                      	pop	es
 31333 00005A91 5D                      	pop	bp
 31334 00005A92 5A                      	pop	dx
 31335 00005A93 5E                      	pop	si
 31336 00005A94 368F06[0706]            	POP	word [SS:HIGH_SECTOR]  ; MSDOS 6.0
 31337                                  	;jc	short getbx			; if got hard error
 31338 00005A99 7303                    	jnc	short getb13
 31339 00005A9B E99E00                  	jmp	getbx
 31340                                  
 31341                                  getb13:
 31342                                  	; MSDOS 6.0
 31343 00005A9E E89301                  	CALL	SET_RQ_SC_PARMS 		; set parms for secondary cache
 31344                                  
 31345                                  ;	We're ready to read in the buffer, if need be. If the caller
 31346                                  ;	wanted to just *write* the buffer then we'll skip reading it in.
 31347                                  
 31348 00005AA1 30E4                    	XOR	AH,AH				; initial flags
 31349                                  ;hkn; SS override
 31350                                  	;test	byte [ss:PREREAD],0FFh
 31351                                  	;jnz	short getb20
 31352 00005AA3 363826[9405]            	CMP	[SS:PREREAD],ah ; 0		; am to Read in the new sector?
 31353 00005AA8 754A                    	JNZ	short getb20			; no, we're done
 31354                                  	;;lea	bx,[di+16] ; MSDOS 3.3
 31355                                  	;lea	bx,[di+20] ; MSDOS 6.0
 31356 00005AAA 8D5D14                  	LEA	BX,[DI+BUFINSIZ] 		; (ds:bx) = data address
 31357 00005AAD B90100                  	MOV	CX,1
 31358 00005AB0 56                      	push	si
 31359 00005AB1 57                      	push	di
 31360 00005AB2 52                      	push	dx
 31361                                  	; MSDOS 6.0
 31362 00005AB3 06                      	push	es ; ***
 31363                                  
 31364                                  ; Note: As far as I can tell, all disk reads into buffers go through
 31365                                  ;	this point. -mrw 10/88
 31366                                  	
 31367 00005AB4 36803E[7900]00          	cmp	byte [ss:BuffInHMA],0	; is buffers in HMA?
 31368 00005ABA 7407                    	jz	short getb14
 31369 00005ABC 1E                      	push	ds ; **
 31370 00005ABD 53                      	push	bx ; *
 31371 00005ABE 36C51E[7A00]            	lds	bx,[ss:LoMemBuff]	; Then let's read it into scratch buff
 31372                                  getb14:
 31373                                  ;M039: Eliminated redundant HMA code.
 31374                                  
 31375                                  	; MSDOS 3.3 (& MSDOS 6.0)
 31376 00005AC3 09F6                    	OR	SI,SI			; FAT sector ?
 31377 00005AC5 7407                    	JZ	short getb15		
 31378                                  
 31379 00005AC7 E8ADDC                  	call	FATSECRD
 31380                                  	;mov	ah,2
 31381 00005ACA B402                    	MOV	AH,buf_isFAT		; Set buf_flags
 31382                                  
 31383 00005ACC EB05                    	JMP	SHORT getb17		; Buffer is marked free if read barfs
 31384                                  
 31385                                  getb15:
 31386 00005ACE E8D2DC                  	call	DREAD			; Buffer is marked free if read barfs
 31387 00005AD1 B400                    	MOV	AH,0			; Set buf_flags to no type, DO NOT XOR!
 31388                                  getb17:
 31389                                  	; 17/12/2022	
 31390                                  ; 27/11/2022 MSDOS 5.0 MSDOS.SYS compatibility)
 31391                                  ;%if 0
 31392                                  	; MSDOS 6.0							  ;I001
 31393 00005AD3 9C                      	pushf								  ;I001
 31394 00005AD4 36803E[7900]00          	cmp	byte [SS:BuffInHMA],0	; did we read into scratch buff ? ;I001
 31395 00005ADA 7411                    	jz	short not_in_hma	; no				  ;I001
 31396                                  	;mov	cx,[es:bp+2]
 31397 00005ADC 268B4E02                	mov	cx,[ES:BP+DPB.SECTOR_SIZE]				  ;I001
 31398 00005AE0 D1E9                    	shr	cx,1							  ;I001
 31399 00005AE2 9D                      	popf				; Retrieve possible CY from DREAD ;I001
 31400 00005AE3 89DE                    	mov	si,bx							  ;I001
 31401 00005AE5 5F                      	pop	di ; *							  ;I001
 31402 00005AE6 07                      	pop	es ; **							  ;I001
 31403 00005AE7 FC                      	cld								  ;I001
 31404 00005AE8 9C                      	pushf				; Preserve possible CY from DREAD ;I001
 31405 00005AE9 F3A5                    	rep	movsw			; move the contents of scratch buf;I001
 31406 00005AEB 06                      	push	es							  ;I001
 31407 00005AEC 1F                      	pop	ds							  ;I001
 31408                                  ;%endif
 31409                                  
 31410                                  ; 17/12/2022
 31411                                  %if 0
 31412                                  	; 27/11/2022 MSDOS 5.0 MSDOS.SYS compatibility)
 31413                                  	; MSDOS 5.0
 31414                                  	pushf
 31415                                  	cmp	byte [SS:BuffInHMA],0	; did we read into scratch buff ?
 31416                                  	jz	short not_in_hma	; no
 31417                                  	popf
 31418                                  	mov	cx,[ES:BP+DPB.SECTOR_SIZE]
 31419                                  	shr	cx,1
 31420                                  	mov	si,bx
 31421                                  	pop	di ; *
 31422                                  	pop	es ; **
 31423                                  	cld
 31424                                  	rep	movsw
 31425                                  	push	es
 31426                                  	pop	ds
 31427                                  	jmp	short getb19 ; 27/11/2022
 31428                                  %endif
 31429                                  
 31430                                  not_in_hma:								  ;I001
 31431 00005AED 9D                      	popf							 	  ;I001
 31432                                  getb19:
 31433 00005AEE 07                      	pop	es ; ***
 31434 00005AEF 5A                      	pop	dx
 31435 00005AF0 5F                      	pop	di
 31436 00005AF1 5E                      	pop	si
 31437 00005AF2 7248                    	JC	short getbx
 31438                                  
 31439                                  ;	The buffer has the data setup in it (if we were to read)
 31440                                  ;	Setup the various buffer fields
 31441                                  ;
 31442                                  ;	(ds:di) = buffer address
 31443                                  ;	(es:bp) = DPB address
 31444                                  ;	(HIGH_SECTOR:DX) = sector #
 31445                                  ;	(ah) = BUF_FLAGS value
 31446                                  ;	(si) = 0 if non fat sector, != 0 if FAT sector read
 31447                                  
 31448                                  ;hkn; SS override
 31449                                  getb20:	; MSDOS 6.0
 31450 00005AF4 368B0E[0706]            	MOV	CX,[SS:HIGH_SECTOR]
 31451                                  	;mov	[di+8],cx
 31452 00005AF9 894D08                  	MOV	[DI+BUFFINFO.buf_sector+2],CX
 31453                                  	; MSDOS 3.3 (& MSDOS 6.0)	
 31454                                   	;mov	[di+6],dx
 31455 00005AFC 895506                  	MOV	[DI+BUFFINFO.buf_sector],DX
 31456                                  	;;mov	[di+0Ah],bp  ; MSDOS 3.3
 31457                                  	;mov	[di+0Dh],bp  ; MSDOS 6.0
 31458 00005AFF 896D0D                  	MOV	[DI+BUFFINFO.buf_DPB],BP
 31459                                  	;;mov	[di+0Ch],es
 31460                                  	;mov	[di+0Fh],es  ; MSDOS 6.0
 31461 00005B02 8C450F                  	MOV	[DI+BUFFINFO.buf_DPB+2],ES
 31462                                  	; 15/12/2022
 31463 00005B05 268A4600                	mov	al,[es:bp]
 31464                                  	;mov	al,[es:bp+0]
 31465                                  	; 27/11/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 31466                                  	;MOV	AL,[ES:BP+DPB.DRIVE]
 31467                                  	;mov	[di+4],ax
 31468 00005B09 894504                  	MOV	[DI+BUFFINFO.buf_ID],AX		; Set ID and Flags
 31469                                  getb25:	
 31470                                  	; MSDOS 3.3
 31471                                  	;mov     ax,1
 31472                                  
 31473                                  	; MSDOS 6.0
 31474                                  	;mov	byte [di+0Ah],1
 31475 00005B0C C6450A01                	MOV	byte [DI+BUFFINFO.buf_wrtcnt],1	; Default to not a FAT sector ;AC000;
 31476 00005B10 31C0                    	XOR	AX,AX
 31477                                  
 31478                                  	; MSDOS 3.3 (& MSDOS 6.0)
 31479 00005B12 09F6                    	OR	SI,SI				; FAT sector ?
 31480 00005B14 740B                    	JZ	short getb30
 31481                                  
 31482                                  	;mov	al,[es:bp+8]
 31483 00005B16 268A4608                	MOV	AL,[ES:BP+DPB.FAT_COUNT]	; update number of copies of
 31484                                  	
 31485                                  	; MSDOS 6.0
 31486 00005B1A 88450A                  	MOV	[DI+BUFFINFO.buf_wrtcnt],AL	;  this sector present on disk
 31487                                  	;mov	ax,[es:bp+0Fh]
 31488 00005B1D 268B460F                	MOV	AX,[ES:BP+DPB.FAT_SIZE]		; offset of identical FAT
 31489                                  						;  sectors
 31490                                  	; MSDOS 3.3
 31491                                  	;;mov	ah,[es:bp+0Fh]
 31492                                  	;MOV	AH,[ES:BP+DPB.FAT_SIZE]
 31493                                  
 31494                                  ;	BUGBUG - dos 6 can clean this up by not setting wrtcntinc unless wrtcnt
 31495                                  ;		is set
 31496                                  
 31497                                  getb30:	
 31498                                  	; MSDOS 6.0
 31499                                  	;mov	[di+0Bh],ax
 31500 00005B21 89450B                  	MOV	[DI+BUFFINFO.buf_wrtcntinc],AX
 31501                                  
 31502                                  	; MSDOS 3.3
 31503                                  	;;mov	[di+8],ax ; 15/08/2018	
 31504                                  	;MOV	[DI+BUFFINFO.buf_wrtcnt],AX
 31505                                  
 31506 00005B24 E8CEFE                  	CALL	PLACEBUF
 31507                                  
 31508                                  ;hkn; SS override for next 4
 31509                                  getb35: 
 31510                                  	; 17/12/2022
 31511                                  	; 07/12/2022 MSDOS 5.0 MSDOS.SYS compatibility)
 31512                                  	; MSDOS 3.3 & MSDOS 5.0 & MSDOS 6.0
 31513                                  	;MOV	[SS:CURBUF+2],DS
 31514                                  	;MOV	[SS:LastBuffer+2],DS
 31515                                  	;MOV	[SS:CURBUF],DI
 31516                                  	;MOV	[SS:LastBuffer],DI
 31517                                  	;CLC
 31518                                  
 31519                                  	; 17/12/2022
 31520                                  	; 07/12/2022
 31521                                  	; Retro DOS v4.0
 31522 00005B27 368C1E[2000]            	mov	[ss:LastBuffer+2],ds
 31523 00005B2C 36893E[1E00]            	mov	[ss:LastBuffer],di
 31524 00005B31 F8                      	clc
 31525                                  getb35x: ; 28/07/2019
 31526 00005B32 368C1E[E405]            	MOV	[ss:CURBUF+2],ds
 31527 00005B37 36893E[E205]            	MOV	[ss:CURBUF],di
 31528                                  
 31529                                  ;	Return with 'C' set appropriately
 31530                                  ;	(dx) = caller's original value
 31531                                  
 31532                                  getbx:	
 31533 00005B3C 16                      	push	ss
 31534 00005B3D 1F                      	pop	ds
 31535                                  	;retn
 31536                                  	; 27/11/2022 MSDOS 5.0 MSDOS.SYS compatibility)
 31537                                  getbuffrb_retn:
 31538                                  ;flushbuf_retn:	; 17/12/2022
 31539 00005B3E C3                      	retn
 31540                                  
 31541                                  ;Break	<FLUSHBUF -- WRITE OUT DIRTY BUFFERS>
 31542                                  ;----------------------------------------------------------------------------
 31543                                  ; Input:
 31544                                  ;	DS = DOSGROUP
 31545                                  ;	AL = Physical unit number local buffers only
 31546                                  ;	   = -1 for all units and all remote buffers
 31547                                  ; Function:
 31548                                  ;	Write out all dirty buffers for unit, and flag them as clean
 31549                                  ;	Carry set if error (user FAILed to I 24)
 31550                                  ;	    Flush operation completed.
 31551                                  ; DS Preserved, all others destroyed (ES too)
 31552                                  ;----------------------------------------------------------------------------
 31553                                  
 31554                                  	; 20/05/2019 - Retro DOS v4.0
 31555                                  	; DOSCODE:9A35h (MSDOS 6.21, MSDOS.SYS)
 31556                                  
 31557                                  	; 27/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 31558                                  	; DOSCODE:99DAh (MSDOS 5.0, MSDOS.SYS)
 31559                                  FLUSHBUF:
 31560                                  	; MSDOS 3.3
 31561                                  	;;mov	ah,-1 ; 01/08/2018 - Retro DOS v3.0
 31562                                  	;lds	di,[BUFFHEAD]
 31563                                  
 31564                                  	; MSDOS 6.0
 31565 00005B3F E89AFE                  	call	GETCURHEAD
 31566                                  	;TEST	word [ss:DOS34_FLAG],FROM_DISK_RESET ; from disk reset ? ;hkn;
 31567 00005B42 36F606[1106]04          	TEST	byte [ss:DOS34_FLAG],FROM_DISK_RESET ; 4
 31568 00005B48 7508                    	jnz	short scan_buf_queue
 31569 00005B4A 36833E[7100]00          	cmp	word [ss:DirtyBufferCount],0			;hkn;
 31570 00005B50 7423                    	je	short end_scan
 31571                                  	
 31572                                  scan_buf_queue:
 31573 00005B52 E82900                  	call	CHECKFLUSH
 31574                                  	;push	ax  ; MSDOS 3.3
 31575                                  	; MSDOS 6.0
 31576                                  	;mov	ah,[di+4]
 31577 00005B55 8A6504                  	mov	ah,[DI+BUFFINFO.buf_ID]
 31578 00005B58 363826[2203]            	cmp	[SS:WPERR],ah					;hkn;
 31579 00005B5D 7408                    	je	short free_the_buf
 31580                                  	;TEST	word [ss:DOS34_FLAG],FROM_DISK_RESET ; from disk reset ? ;hkn;
 31581 00005B5F 36F606[1106]04          	TEST	byte [ss:DOS34_FLAG],FROM_DISK_RESET ; 4
 31582 00005B65 7405                    	jz	short dont_free_the_buf
 31583                                  	; MSDOS 3.3
 31584                                  	;;mov	al,[di+4]
 31585                                  	;mov	al,[DI+BUFFINFO.buf_ID]
 31586                                  	;cmp	[SS:WPERR],al					;hkn;
 31587                                  	; 15/08/2018
 31588                                  	;jne	short dont_free_the_buf	
 31589                                  free_the_buf:
 31590                                  	; MSDOS 6.0 (& MSDOS 3.3)
 31591 00005B67 C74504FF00              	mov	word [DI+BUFFINFO.buf_ID],00FFh
 31592                                  dont_free_the_buf:
 31593                                  	;pop	ax  ; MSDOS 3.3 	   	
 31594                                  
 31595                                  	; MSDOS 3.3
 31596                                  	;mov	di,[DI]
 31597                                  	;;mov	di,[DI+BUFFINFO.buf_link] ; .buf_next
 31598                                  	;
 31599                                  	; 15/08/2018
 31600                                  	;lds	di,[di]
 31601                                  	;
 31602                                  	;cmp	di,-1 ; 0FFFFh
 31603                                  	;jnz	short scan_buf_queue 
 31604                                  	
 31605                                  	; MSDOS 6.0
 31606 00005B6C 8B3D                    	mov	di,[di]
 31607                                  	;mov	di,[DI+BUFFINFO.buf_next] ; .buf_link
 31608 00005B6E 363B3E[BA0E]            	cmp	di,[SS:FIRST_BUFF_ADDR]				;hkn;
 31609 00005B73 75DD                    	jne	short scan_buf_queue
 31610                                  
 31611                                  end_scan:
 31612 00005B75 16                      	push	ss
 31613 00005B76 1F                      	pop	ds
 31614                                  	; 01/08/2018 - Retro DOS v3.0
 31615                                  	;cmp	byte [FAILERR],0
 31616                                  	;jne	short bad_flush
 31617                                  	;retn
 31618                                  ;bad_flush:
 31619                                  	;stc
 31620                                  	;retn
 31621                                  
 31622                                  	; 17/12/2022
 31623                                  	; 27/11/2022 MSDOS 5.0 MSDOS.SYS compatibility)
 31624                                  	; 01/08/2018 - Retro DOS v3.0
 31625 00005B77 803E[4A03]01            	cmp	byte [FAILERR],1
 31626 00005B7C F5                      	cmc
 31627                                  flushbuf_retn:
 31628 00005B7D C3                      	retn
 31629                                  	
 31630                                  	; 17/12/2022
 31631                                  	; 27/11/2022 MSDOS 5.0 MSDOS.SYS compatibility)
 31632                                  	;cmp	byte [FAILERR],0
 31633                                  	;jne	short bad_flush
 31634                                  	;retn
 31635                                  ;bad_flush:
 31636                                  	;stc
 31637                                  	;retn
 31638                                  
 31639                                  ;----------------------------------------------------------------------------
 31640                                  ;
 31641                                  ; Procedure Name : CHECKFLUSH
 31642                                  ;
 31643                                  ; Inputs : AL - Drive number, -1 means do not check for drive
 31644                                  ;	   DS:DI - pointer to buffer
 31645                                  ;
 31646                                  ; Function : Write out a buffer if it is dirty
 31647                                  ;
 31648                                  ; Carry set if problem (currently user FAILed to I 24)
 31649                                  ;
 31650                                  ;----------------------------------------------------------------------------
 31651                                  
 31652                                  CHECKFLUSH:
 31653                                  	; MSDOS 6.0
 31654 00005B7E B4FF                    	mov	ah, -1 ; 01/08/2018 Retro DOS v3.0
 31655                                  	;cmp	[di+4],ah
 31656 00005B80 386504                  	CMP	[DI+BUFFINFO.buf_ID],AH
 31657 00005B83 74F8                    	jz	short flushbuf_retn	; Skip free buffer, carry clear
 31658 00005B85 38C4                    	CMP	AH,AL			; 
 31659 00005B87 7406                    	JZ	short DOBUFFER		; do this buffer
 31660                                  	;cmp	al,[di+4]
 31661 00005B89 3A4504                  	CMP	AL,[DI+BUFFINFO.buf_ID]
 31662 00005B8C F8                      	CLC
 31663 00005B8D 75EE                    	jnz	short flushbuf_retn	; Buffer not for this unit or SFT
 31664                                  DOBUFFER:
 31665                                  	;test	byte [di+5],40h
 31666 00005B8F F6450540                	TEST	byte [DI+BUFFINFO.buf_flags],buf_dirty
 31667 00005B93 74E8                    	jz	short flushbuf_retn	; Buffer not dirty, carry clear by TEST
 31668 00005B95 50                      	PUSH	AX
 31669                                  	;push	word [di+4]
 31670 00005B96 FF7504                  	PUSH	WORD [DI+BUFFINFO.buf_ID]
 31671 00005B99 E80B00                  	CALL	BUFWRITE
 31672 00005B9C 58                      	POP	AX
 31673 00005B9D 7206                    	JC	short LEAVE_BUF		; Leave buffer marked free (lost).
 31674                                  	;and	ah,0BFh
 31675 00005B9F 80E4BF                  	AND	AH,~buf_dirty		; Buffer is clean, clears carry
 31676                                  	;mov	[di+4],ax
 31677 00005BA2 894504                  	MOV	[DI+BUFFINFO.buf_ID],AX
 31678                                  LEAVE_BUF:
 31679 00005BA5 58                      	POP	AX			; Search info
 31680                                  checkflush_retn:
 31681 00005BA6 C3                      	retn
 31682                                  
 31683                                  ;Break	<BUFWRITE -- WRITE OUT A BUFFER IF DIRTY>
 31684                                  ;----------------------------------------------------------------------------
 31685                                  ;
 31686                                  ;	BufWrite writes a buffer to the disk, if it's dirty.
 31687                                  ;
 31688                                  ;	ENTRY	DS:DI Points to the buffer
 31689                                  ;
 31690                                  ;	EXIT	Buffer marked free
 31691                                  ;		Carry set if error (currently user FAILed to I 24)
 31692                                  ;
 31693                                  ;	USES	All buf DS:DI
 31694                                  ;		HIGH_SECTOR
 31695                                  ;----------------------------------------------------------------------------
 31696                                  
 31697                                  	; 20/05/2019 - Retro DOS v4.0
 31698                                  	; DOSCODE:9AA0h (MSDOS 6.21, MSDOS.SYS)
 31699                                  
 31700                                  
 31701                                  	; 27/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 31702                                  	; DOSCODE:9A45h (MSDOS 5.0, MSDOS.SYS)
 31703                                  
 31704                                  BUFWRITE:
 31705                                  	; 10/09/2018
 31706                                  	; 01/08/2018 - Retro DOS v3.0
 31707                                  	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 5E94h
 31708 00005BA7 B8FF00                  	MOV	AX,00FFH
 31709                                  	;xchg	ax,[di+4]
 31710 00005BAA 874504                  	XCHG	AX,[DI+BUFFINFO.buf_ID]	; Free, in case write barfs
 31711 00005BAD 3CFF                    	CMP	AL,0FFH
 31712 00005BAF 74F5                    	jz      short checkflush_retn	; Buffer is free, carry clear.
 31713                                  	;test	ah,40h
 31714 00005BB1 F6C440                  	test	AH,buf_dirty
 31715 00005BB4 74F0                    	jz      short checkflush_retn	; Buffer is clean, carry clear.
 31716                                  	; MSDOS 6.0
 31717 00005BB6 E89400                  	call	DEC_DIRTY_COUNT 	; LB. decrement dirty count
 31718                                  
 31719                                  ;hkn; SS override
 31720 00005BB9 363A06[2203]            	CMP	AL,[SS:WPERR]
 31721 00005BBE 74E6                    	jz      short checkflush_retn	; If in WP error zap buffer
 31722                                  
 31723                                  ;hkn; SS override
 31724                                  	; MSDOS 6.0
 31725 00005BC0 36A2[AF0D]              	MOV	[SS:SC_DRIVE],AL	;LB. set it for invalidation ;AN000;
 31726                                  	
 31727                                  	;;les	bp,[di+10] ; MSDOS 3.3
 31728                                  	;les	bp,[di+13] ; MSDOS 6.0
 31729 00005BC4 C46D0D                  	LES	BP,[DI+BUFFINFO.buf_DPB]
 31730                                  	;;lea	bx,[di+16]
 31731                                  	;lea	bx,[di+20] ; MSDOS 6.0
 31732 00005BC7 8D5D14                  	LEA	BX,[DI+BUFINSIZ]	; Point at buffer
 31733                                  	;mov	dx,[di+6]
 31734 00005BCA 8B5506                  	MOV	DX,[DI+BUFFINFO.buf_sector] ;F.C. >32mb		;AN000;
 31735                                  	
 31736                                  	; MSDOS 6.0
 31737                                  	;mov	cx,[di+8]
 31738 00005BCD 8B4D08                  	MOV	CX,[DI+BUFFINFO.buf_sector+2] ;F.C. >32mb	;AN000;
 31739                                  
 31740                                  ;hkn; SS override
 31741 00005BD0 36890E[0706]            	MOV	[SS:HIGH_SECTOR],CX	;F.C. >32mb		;AN000;
 31742 00005BD5 8A4D0A                  	MOV	CL,[DI+BUFFINFO.buf_wrtcnt] ;>32mb		;AC000;
 31743                                  	; MSDOS 3.3
 31744                                  	;; mov	cx,[DI+8]
 31745                                  	;mov	cx,[DI+BUFFINFO.buf_wrtcnt]
 31746                                  	;MOV	AL,CH			; [DI+BUFFINFO.buf_wrtcntinc]
 31747 00005BD8 30ED                    	XOR	CH,CH
 31748                                  	;;mov	ah,ch ; MSDOS 3.3
 31749                                  
 31750                                  ;hkn; SS override for ALLOWED
 31751                                  	;mov	byte [SS:ALLOWED],18h
 31752 00005BDA 36C606[4B03]18          	MOV	byte [SS:ALLOWED],Allowed_RETRY+Allowed_FAIL
 31753                                  	;test	byte [di+5],8
 31754                                  	; MSDOS 6.0 (& Retro DOS 3.0)
 31755                                  	;test	ah,8
 31756 00005BE0 F6C408                  	test	AH,buf_isDATA
 31757 00005BE3 7406                    	JZ	short NO_IGNORE
 31758                                  	;or	byte [SS:ALLOWED],20h
 31759 00005BE5 36800E[4B03]20          	OR	byte [SS:ALLOWED],Allowed_IGNORE
 31760                                  NO_IGNORE:
 31761                                  	;xor	ah,ah ; 10/09/2018 (MSDOS 3.3, Retro DOS v3.0)
 31762                                  	; MSDOS 6.0
 31763                                  	;mov	ax,[di+11]
 31764 00005BEB 8B450B                  	MOV	AX,[DI+BUFFINFO.buf_wrtcntinc]	;>32mb		;AC000;
 31765                                  
 31766 00005BEE 57                      	PUSH	DI		; Save buffer pointer
 31767 00005BEF 31FF                    	XOR	DI,DI		; Indicate failure
 31768                                  
 31769 00005BF1 1E                      	push	ds ; *
 31770 00005BF2 53                      	push	bx ; **
 31771                                  WRTAGAIN:
 31772 00005BF3 57                      	push	di ; ***
 31773 00005BF4 51                      	push	cx ; ****
 31774 00005BF5 50                      	push	ax ; *****
 31775                                  	;MOV	CX,1
 31776                                  	; 17/12/2022
 31777                                  	; ch = 0
 31778 00005BF6 B101                    	mov	cl,1 ; 24/07/2019
 31779                                  	; 27/11/2022 MSDOS 5.0 MSDOS.SYS compatibility)
 31780                                  	;mov	cx,1
 31781 00005BF8 53                      	push	bx ; ******
 31782 00005BF9 52                      	push	dx ; *******
 31783 00005BFA 1E                      	push	ds ; ********
 31784                                  
 31785                                  ; Note:  As far as I can tell, all disk reads into buffers go through this point. -mrw 10/88
 31786                                  
 31787                                  	; MSDOS 6.0
 31788 00005BFB 36803E[7900]00          	cmp	byte [ss:BuffInHMA],0 ; 10/06/2019
 31789 00005C01 7418                    	jz	short NBUFFINHMA
 31790 00005C03 51                      	push	cx
 31791 00005C04 06                      	push	es
 31792 00005C05 89DE                    	mov	si,bx
 31793 00005C07 268B4E02                	mov	cx,[es:bp+DPB.SECTOR_SIZE]
 31794 00005C0B D1E9                    	shr	cx,1
 31795 00005C0D 36C43E[7A00]            	les	di,[ss:LoMemBuff] ; 10/06/2019
 31796 00005C12 89FB                    	mov	bx,di
 31797 00005C14 FC                      	cld
 31798 00005C15 F3A5                    	rep	movsw
 31799 00005C17 06                      	push	es
 31800 00005C18 1F                      	pop	ds
 31801 00005C19 07                      	pop	es
 31802 00005C1A 59                      	pop	cx
 31803                                  NBUFFINHMA:
 31804 00005C1B E8E5DB                  	call	DWRITE		; Write out the dirty buffer
 31805 00005C1E 1F                      	pop	ds ; ********
 31806 00005C1F 5A                      	pop	dx ; *******
 31807 00005C20 5B                      	pop	bx ; ******
 31808 00005C21 58                      	pop	ax ; *****
 31809 00005C22 59                      	pop	cx ; ****
 31810 00005C23 5F                      	pop	di ; ***
 31811 00005C24 7201                    	JC	short NOSET
 31812 00005C26 47                      	INC	DI		; If at least ONE write succeedes, the operation
 31813                                  NOSET:				;	succeedes.
 31814 00005C27 01C2                    	ADD	DX,AX
 31815 00005C29 E2C8                    	LOOP	WRTAGAIN
 31816 00005C2B 5B                      	pop	bx ; **
 31817 00005C2C 1F                      	pop	ds ; *
 31818 00005C2D 09FF                    	OR	DI,DI		; Clears carry
 31819 00005C2F 7501                    	JNZ	short BWROK	; At least one write worked
 31820 00005C31 F9                      	STC			; DI never got INCed, all writes failed.
 31821                                  BWROK:	
 31822 00005C32 5F                      	POP	DI
 31823 00005C33 C3                      	retn
 31824                                  
 31825                                  ;**	Set_RQ_SC_Parms - Set Secondary Cache Parameters
 31826                                  ;----------------------------------------------------------------------------
 31827                                  ;	Set_RQ_SC_Parms sets the sector size and drive number value
 31828                                  ;	for the secondary cache. This updates SC_SECTOR_SIZE &
 31829                                  ;	SC_DRIVE even if SC is disabled to save the testing
 31830                                  ;	code and time
 31831                                  ;
 31832                                  ;	ENTRY	ES:BP = drive parameter block
 31833                                  ;
 31834                                  ;	EXIT	[SC_SECTOR_SIZE]= drive sector size
 31835                                  ;		[SC_DRIVE]= drive #
 31836                                  ;
 31837                                  ;	USES	Flags
 31838                                  ;----------------------------------------------------------------------------
 31839                                  
 31840                                  ; 27/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 31841                                  ; 04/05/2019 - Retro DOS v4.0
 31842                                  
 31843                                  SET_RQ_SC_PARMS:
 31844                                  ;hkn; SS override for all variables used in this procedure.
 31845 00005C34 50                      	push	ax
 31846                                  	;mov	ax,[es:bp+2]
 31847 00005C35 268B4602                	MOV	ax,[ES:BP+DPB.SECTOR_SIZE]	; save sector size
 31848 00005C39 36A3[AD0D]              	MOV	[ss:SC_SECTOR_SIZE],ax
 31849                                  	;;mov	al,[es:bp+0]
 31850                                  	; 27/11/2022 MSDOS 5.0 MSDOS.SYS compatibility)
 31851                                  	;MOV	al,[ES:BP+DPB.DRIVE]		; save drive #
 31852                                  	; 15/12/2022
 31853 00005C3D 268A4600                	mov	al,[ES:BP]
 31854 00005C41 36A2[AF0D]              	MOV	[ss:SC_DRIVE],al
 31855 00005C45 58                      	pop	ax
 31856                                  srspx:	
 31857 00005C46 C3                      	retn					;LB. return
 31858                                  
 31859                                  ;Break	<INC_DIRTY_COUNT-increment dirty count>
 31860                                  ;----------------------------------------------------------------------------
 31861                                  ; Input:
 31862                                  ;	none
 31863                                  ; Function:
 31864                                  ;	increment dirty buffers count
 31865                                  ; Output:
 31866                                  ;	dirty buffers count is incremented
 31867                                  ;
 31868                                  ; All registers preserved
 31869                                  ;----------------------------------------------------------------------------
 31870                                  
 31871                                  INC_DIRTY_COUNT:
 31872                                  ;; BUGBUG  ---- remove this routine
 31873                                  ;; BUGBUG ---- only one instruction is needed (speed win, space loose)
 31874 00005C47 36FF06[7100]            	inc	word [ss:DirtyBufferCount]	;hkn;
 31875 00005C4C C3                      	retn
 31876                                  
 31877                                  ;Break	<DEC_DIRTY_COUNT-decrement dirty count>
 31878                                  ;----------------------------------------------------------------------------
 31879                                  ; Input:
 31880                                  ;	none
 31881                                  ; Function:
 31882                                  ;	decrement dirty buffers count
 31883                                  ; Output:
 31884                                  ;	dirty buffers count is decremented
 31885                                  ;
 31886                                  ; All registers preserved
 31887                                  ;----------------------------------------------------------------------------
 31888                                  
 31889                                  DEC_DIRTY_COUNT:
 31890 00005C4D 36833E[7100]00          	cmp	word [ss:DirtyBufferCount],0 ;hkn;
 31891 00005C53 7405                    	jz	short ddcx		; BUGBUG - shouldn't it be an
 31892 00005C55 36FF0E[7100]            	dec	word [ss:DirtyBufferCount] 
 31893                                  					; error condition to underflow here? ;hkn;
 31894                                  ddcx:	
 31895 00005C5A C3                      	retn
 31896                                  
 31897                                  ;============================================================================
 31898                                  ; MSPROC.ASM, MSDOS 6.0, 1992
 31899                                  ;============================================================================
 31900                                  ; 02/08/2018 - Retro DOS v3.0
 31901                                  ; 29/04/2019 - Retro DOS v4.0
 31902                                  
 31903                                  ; (15/04/2018 - RetrO DOS v2.0, MSDOS 2.11 - PROC.ASM - 1983)
 31904                                  
 31905                                  ; Pseudo EXEC system call for DOS
 31906                                  
 31907                                  ;	TITLE	MSPROC - process maintenance
 31908                                  ;	NAME	MSPROC
 31909                                  
 31910                                  ; =========================================================================
 31911                                  ;**	Process related system calls and low level routines for DOS 2.X.
 31912                                  ;	I/O specs are defined in DISPATCH.
 31913                                  ;
 31914                                  ;	$WAIT
 31915                                  ;	$EXEC
 31916                                  ;	$Keep_process
 31917                                  ;	Stay_resident
 31918                                  ;	$EXIT
 31919                                  ;	$ABORT
 31920                                  ;	abort_inner
 31921                                  ;
 31922                                  ;	Modification history:
 31923                                  ;
 31924                                  ;		Created: ARR 30 March 1983
 31925                                  ;		AN000	version 4.0 jan. 1988
 31926                                  ;		A007	PTM 3957 - fake vesrion for IBMCACHE.COM
 31927                                  ;		A008	PTM 4070 - fake version for MS WINDOWS
 31928                                  ;
 31929                                  ;		M000	added support for loading programs into UMBs 7/9/90
 31930                                  ;
 31931                                  ;		M004 - MS PASCAL 3.2 support. Please see under tag M003 in 
 31932                                  ;		       dossym.inc. 7/30/90
 31933                                  ;		M005 - Support for EXE programs with out STACK segment and 
 31934                                  ;		       with resident size < 64K - 256 bytes. A 256 byte 
 31935                                  ;		       stack is provided at the end of the program. Note that
 31936                                  ;		       only SP is changed.
 31937                                  ;		M020 - Fix for Rational bug for details see exepatch.asm
 31938                                  ;
 31939                                  ;		M028 - 4b04 implementation
 31940                                  ;
 31941                                  ;		M029 - Support for EXEs without stack rewritten. If EXE is
 31942                                  ;			in memory block >= 64K, sp = 0. If memory block
 31943                                  ;			obtained is <64K, point sp at the end of the memory
 31944                                  ;			block. For EXEs smaller than 64K, 256 bytes are still
 31945                                  ;			added for a stack segment which may be needed if it
 31946                                  ;			is loaded in low memory situations.
 31947                                  ;
 31948                                  ;		M030 - Fixing bug in EXEPACPATCH & changing 4b04 to 4b05
 31949                                  ;
 31950                                  ;		M040 - Bug #3052. The environment sizing code would flag a
 31951                                  ;			a bad environment if it reached 32767 bytes. Changed
 31952                                  ;			to allow 32768 bytes of environment.
 31953                                  ;
 31954                                  ;		M047 - Release the allocated UMB when we failed to load a 
 31955                                  ;		       COM file high. Also ensure that if the biggest block
 31956                                  ;		       into which we load the com file is less than 64K then
 31957                                  ;		       we provide atleast 256 bytes of stack to the user.
 31958                                  ;
 31959                                  ;		M050 - Made Lie table search CASE insensitive
 31960                                  ;
 31961                                  ;		M060 - Removed special version table from the kernal and
 31962                                  ;                      put it in a device drive which puts the address
 31963                                  ;                      in the DOS DATA area location UU_IFS_DOS_CALL
 31964                                  ;		       as a DWORD.
 31965                                  ;
 31966                                  ;		M063 - Modified UMB support. If the HIGH_ONLY bit is set on
 31967                                  ;		       entry do not try to load low if there is no space in
 31968                                  ;		       UMBs.
 31969                                  ;
 31970                                  ;		M068 - Support for copy protect apps. Call ChkCopyProt to 
 31971                                  ;		       set a20off_count. Set bit EXECA20BIT in DOS_FLAG. Also
 31972                                  ;		       change return address to LeaveDos if AL=5.
 31973                                  ;
 31974                                  ;               20-Jul-1992 bens  Added ifdef RESTRICTED_BUILD code that
 31975                                  ;                      controls building a version of MSDOS.SYS that only
 31976                                  ;                      runs programs from a fixed list (defined in the
 31977                                  ;                      file RESTRICT.INC).  Search for "RESTRICTED_BUILD"
 31978                                  ;                      for details.  This feature is used to build a
 31979                                  ;                      "special" version of DOS that can be handed out to
 31980                                  ;                      OEM/ISV customers as part of a "service" disk.
 31981                                  ;
 31982                                  ; =========================================================================
 31983                                  
 31984                                  ;SAVEXIT  EQU  10
 31985                                  
 31986                                  ;BREAK	<$WAIT - return previous process error code>
 31987                                  ; =========================================================================
 31988                                  ;	$WAIT - Return previous process error code.
 31989                                  ;
 31990                                  ;	Assembler usage:
 31991                                  ;
 31992                                  ;	    MOV     AH, WaitProcess
 31993                                  ;	    INT     int_command
 31994                                  ;
 31995                                  ;	ENTRY	none
 31996                                  ;	EXIT	(ax) = exit code
 31997                                  ;	USES	all
 31998                                  ; =========================================================================
 31999                                  
 32000                                  	; 20/05/2019 - Retro DOS v4.0
 32001                                  	; DOSCODE:9B55h (MSDOS 6.21, MSDOS.SYS)
 32002                                  
 32003                                  	; 27/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 32004                                  	; DOSCODE:9A5Ah (MSDOS 5.0, MSDOS.SYS)	
 32005                                  _$WAIT:
 32006                                  	; 02/08/2018 - Retro DOS v3.0
 32007                                  	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 5E1h
 32008                                  
 32009 00005C5B 31C0                    	xor	AX,AX
 32010 00005C5D 368706[3403]            	xchg	AX,[ss:exit_code]
 32011 00005C62 E9E4A9                  	jmp	SYS_RET_OK
 32012                                  
 32013                                  ; =========================================================================
 32014                                  ;BREAK <$exec - load/go a program>
 32015                                  ;	EXEC.ASM - EXEC System Call
 32016                                  ;
 32017                                  ;
 32018                                  ; Assembler usage:
 32019                                  ;	    lds     DX, Name
 32020                                  ;	    les     BX, Blk
 32021                                  ;	    mov     AH, Exec
 32022                                  ;	    mov     AL, FUNC
 32023                                  ;	    int     INT_COMMAND
 32024                                  ;
 32025                                  ;	AL  Function
 32026                                  ;	--  --------
 32027                                  ;	 0  Load and execute the program.
 32028                                  ;	 1  Load, create the program header but do not
 32029                                  ;	    begin execution.
 32030                                  ;	 3  Load overlay. No header created.
 32031                                  ;
 32032                                  ;	    AL = 0 -> load/execute program
 32033                                  ;
 32034                                  ;	    +---------------------------+
 32035                                  ;	    | WORD segment address of	|
 32036                                  ;	    | environment.		|
 32037                                  ;	    +---------------------------+
 32038                                  ;	    | DWORD pointer to ASCIZ	|
 32039                                  ;	    | command line at 80h	|
 32040                                  ;	    +---------------------------+
 32041                                  ;	    | DWORD pointer to default	|
 32042                                  ;	    | FCB to be passed at 5Ch	|
 32043                                  ;	    +---------------------------+
 32044                                  ;	    | DWORD pointer to default	|
 32045                                  ;	    | FCB to be passed at 6Ch	|
 32046                                  ;	    +---------------------------+
 32047                                  ;
 32048                                  ;	    AL = 1 -> load program
 32049                                  ;
 32050                                  ;	    +---------------------------+
 32051                                  ;	    | WORD segment address of	|
 32052                                  ;	    | environment.		|
 32053                                  ;	    +---------------------------+
 32054                                  ;	    | DWORD pointer to ASCIZ	|
 32055                                  ;	    | command line at 80h	|
 32056                                  ;	    +---------------------------+
 32057                                  ;	    | DWORD pointer to default	|
 32058                                  ;	    | FCB to be passed at 5Ch	|
 32059                                  ;	    +---------------------------+
 32060                                  ;	    | DWORD pointer to default	|
 32061                                  ;	    | FCB to be passed at 6Ch	|
 32062                                  ;	    +---------------------------+
 32063                                  ;	    | DWORD returned value of	|
 32064                                  ;	    | CS:IP			|
 32065                                  ;	    +---------------------------+
 32066                                  ;	    | DWORD returned value of	|
 32067                                  ;	    | SS:IP			|
 32068                                  ;	    +---------------------------+
 32069                                  ;
 32070                                  ;	    AL = 3 -> load overlay
 32071                                  ;
 32072                                  ;	    +---------------------------+
 32073                                  ;	    | WORD segment address where|
 32074                                  ;	    | file will be loaded.	|
 32075                                  ;	    +---------------------------+
 32076                                  ;	    | WORD relocation factor to |
 32077                                  ;	    | be applied to the image.	|
 32078                                  ;	    +---------------------------+
 32079                                  ;
 32080                                  ; Returns:
 32081                                  ;	    AX = error_invalid_function
 32082                                  ;	       = error_bad_format
 32083                                  ;	       = error_bad_environment
 32084                                  ;	       = error_not_enough_memory
 32085                                  ;	       = error_file_not_found
 32086                                  ; =========================================================================
 32087                                  ;
 32088                                  ;   Revision history:
 32089                                  ;
 32090                                  ;	 A000	version 4.00  Jan. 1988
 32091                                  ;
 32092                                  ; =========================================================================
 32093                                  
 32094                                  Exec_Internal_Buffer		EQU	OPENBUF
 32095                                  Exec_Internal_Buffer_Size	EQU	(128+128+53+curdirLen)
 32096                                  
 32097                                  ; =========================================================================
 32098                                  
 32099                                  ;IF1		; warning message on buffers
 32100                                  ;%out	Please make sure that the following are contiguous and of the
 32101                                  ;%out	following sizes:
 32102                                  ;%out
 32103                                  ;%out	OpenBuf     128
 32104                                  ;%out	RenBuf	    128
 32105                                  ;%out	SearchBuf    53
 32106                                  ;%out	DummyCDS    curdirLen
 32107                                  ;ENDIF
 32108                                  
 32109                                  ; =========================================================================
 32110                                  
 32111                                  ; =========================================================================
 32112                                  ;
 32113                                  ; =========================================================================
 32114                                  
 32115                                  	; 20/05/2019 - Retro DOS v4.0
 32116                                  	; DOSCODE:9B5Fh (MSDOS 6.21, MSDOS.SYS)
 32117                                  
 32118                                  	; 30/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 32119                                  	; DOSCODE:9B04h (MSDOS 5.0, MSDOS.SYS)
 32120                                  	
 32121                                  _$EXEC:
 32122                                  	; 02/08/2018 - Retro DOS v3.0
 32123                                  	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 5EF1h
 32124                                  
 32125                                  EXEC001S:
 32126                                  	;LocalVar    Exec_Blk		,DWORD
 32127                                  	;LocalVar    Exec_Func		,BYTE
 32128                                  	;LocalVar    Exec_Load_High	,BYTE
 32129                                  	;LocalVar    Exec_FH		,WORD
 32130                                  	;LocalVar    Exec_Rel_Fac	,WORD
 32131                                  	;LocalVar    Exec_Res_Len_Para	,WORD
 32132                                  	;LocalVar    Exec_Environ	,WORD
 32133                                  	;LocalVar    Exec_Size		,WORD
 32134                                  	;LocalVar    Exec_Load_Block	,WORD
 32135                                  	;LocalVar    Exec_DMA		,WORD
 32136                                  	;LocalVar    ExecNameLen 	,WORD
 32137                                  	;LocalVar    ExecName		,DWORD
 32138                                  	;
 32139                                  	;LocalVar    Exec_DMA_Save	,WORD
 32140                                  	;LocalVar    Exec_NoStack	,BYTE
 32141                                  
 32142                                  	; MSDOS 3.3 (& MSDOS 6.0)
 32143                                  	;%define	Exec_Blk	dword [bp-4]
 32144                                  	%define		Exec_Blk	[bp-4] ; 09/08/2018
 32145                                  	%define		Exec_BlkL	word [bp-4]	
 32146                                  	%define		Exec_BlkH	word [bp-2]
 32147                                  	%define		Exec_Func	byte [bp-5]
 32148                                  	%define		Exec_Load_High	byte [bp-6]
 32149                                  	%define		Exec_FH		word [bp-8]
 32150                                  	%define		Exec_Rel_Fac	word [bp-10]
 32151                                  	%define		Exec_Res_Len_Para word [bp-12]
 32152                                  	%define		Exec_Environ	word [bp-14]
 32153                                  	%define		Exec_Size	word [bp-16]
 32154                                  	%define		Exec_Load_Block	word [bp-18]
 32155                                  	%define		Exec_DMA	word [bp-20]
 32156                                  	%define		ExecNameLen	word [bp-22]
 32157                                  	;%define	ExecName	dword [bp-26]
 32158                                  	%define		ExecName	[bp-26] ; 09/08/2018
 32159                                  	%define		ExecNameL	word [bp-26]	
 32160                                  	%define		ExecNameH	word [bp-24]
 32161                                  	; MSDOS 6.0
 32162                                  	%define		Exec_DMA_Save	word [bp-28]
 32163                                  	%define		Exec_NoStack	byte [bp-29]
 32164                                  	
 32165                                  	; ==================================================================
 32166                                  	; validate function
 32167                                  	; ==================================================================
 32168                                  		      	
 32169                                  	; M068 - Start
 32170                                  	;
 32171                                  	; Reset the A20OFF_COUNT to 0. This is done as there is a 
 32172                                  	; possibility that the count may not be decremented all the way to
 32173                                  	; 0. A typical case is if the program for which we intended to keep 
 32174                                  	; the A20  off for a sufficiently long time (A20OFF_COUNT int 21 
 32175                                  	; calls), exits pre-maturely due to error conditions.
 32176                                  
 32177                                  	; MSDOS 6.0
 32178 00005C65 36C606[8500]00          	mov	byte [SS:A20OFF_COUNT], 0
 32179                                  
 32180                                  	; If al=5 (ExecReady) we'll change the return address on the stack	
 32181                                  	; to be LeaveDos in msdisp.asm. This ensures that the EXECA20OFF
 32182                                  	; bit set in DOS_FLAG by ExceReady is not cleared in msdisp.asm
 32183                                  
 32184 00005C6B 3C05                    	cmp	al,5			; Q: is this ExecReady call
 32185                                  	;jne	short @f
 32186 00005C6D 7505                    	jne	short Exec_@f		; N: continue
 32187                                  					; Y: change ret addr. to LeaveDos.
 32188 00005C6F 59                      	pop	cx			; Note CX is not input to ExecReady
 32189 00005C70 B9[1104]                	mov	cx,LeaveDOS
 32190 00005C73 51                      	push	cx
 32191                                  ;@@:
 32192                                  Exec_@f:
 32193                                  	; M068 - End
 32194                                  	
 32195                                  	;Enter
 32196                                  
 32197 00005C74 55                      	push	bp
 32198 00005C75 89E5                    	mov	bp,sp
 32199                                  	;;sub	sp,26	; MSDOS 3.3
 32200                                  	; 30/11/2022 (MSDOS 5.0, MSDOS.SYS compatibility)	
 32201                                  	;sub	sp,29	; MSDOS 6.0 (& MSDOS 6.21)
 32202                                  	; 17/12/2022
 32203                                  	; 20/05/2019
 32204 00005C77 83EC1E                  	sub	sp,30	; Retro DOS v4.0	
 32205                                  
 32206                                  	; MSDOS 6.0
 32207 00005C7A 3C05                    	cmp	AL,5			; only 0, 1, 3 or 5 are allowed ;M028
 32208                                  					; M030
 32209 00005C7C 7614                    	jna	short Exec_Check_2
 32210                                  
 32211                                  	; MSDOS 3.3
 32212                                  	;cmp	AL,3
 32213                                  	;jna	short Exec_Check_2
 32214                                  
 32215                                  Exec_Bad_Fun:
 32216 00005C7E 36C606[2303]01          	mov	byte [ss:EXTERR_LOCUS],errLOC_Unk ; 1
 32217                                  					; Extended Error Locus	;smr;SS Override
 32218                                  	;mov	al,1
 32219 00005C84 B001                    	mov	al,error_invalid_function
 32220                                  
 32221                                  Exec_Ret_Err:
 32222                                  	;Leave
 32223 00005C86 89EC                    	mov	sp,bp
 32224 00005C88 5D                      	pop	bp
 32225                                  	;transfer SYS_RET_ERR
 32226 00005C89 E9C6A9                  	jmp	SYS_RET_ERR
 32227                                  
 32228                                  	; MSDOS 6.0
 32229                                  ExecReadyJ:
 32230 00005C8C E80918                  	call	ExecReady		; M028
 32231 00005C8F E90B04                  	jmp	norm_ovl		; do a Leave & xfer sysret_OK ; M028
 32232                                  
 32233                                  Exec_Check_2:
 32234 00005C92 3C02                    	cmp	AL,2			
 32235 00005C94 74E8                    	je	short Exec_Bad_Fun
 32236                                  
 32237                                  	; MSDOS 6.0
 32238 00005C96 3C04                    	cmp	al,4			; 2 & 4 are not allowed
 32239 00005C98 74E4                    	je	short Exec_Bad_Fun
 32240                                  	
 32241 00005C9A 3C05                    	cmp	al,5			; M028 ; M030
 32242 00005C9C 74EE                    	je	short ExecReadyJ	; M028
 32243                                  
 32244                                  	;mov	[bp-4],bx
 32245 00005C9E 895EFC                  	mov	Exec_BlkL,BX		; stash args
 32246                                  	;mov	[bp-2],es
 32247 00005CA1 8C46FE                  	mov	Exec_BlkH,ES
 32248                                  	;mov	[bp-5],al
 32249 00005CA4 8846FB                  	mov	Exec_Func,AL
 32250                                  	;mov	byte [bp-6],0
 32251 00005CA7 C646FA00                	mov	Exec_Load_High,0
 32252                                  
 32253                                  	;mov	[bp-26],dx
 32254 00005CAB 8956E6                  	mov	ExecNameL,DX		; set up length of exec name
 32255                                  	;mov	[bp-24],ds
 32256 00005CAE 8C5EE8                  	mov	ExecNameH,DS
 32257 00005CB1 89D6                    	mov	SI,DX			; move pointer to convenient place
 32258                                  	;invoke	DStrLen
 32259 00005CB3 E88BB5                  	call	DStrLen
 32260                                  	;mov	[bp-22],cx
 32261 00005CB6 894EEA                  	mov	ExecNameLen,CX		; save length
 32262                                  
 32263                                  	; MSDOS 6.0
 32264 00005CB9 36A0[0203]              	mov	al,[ss:AllocMethod]	; M063: save alloc method in 
 32265 00005CBD 36A2[8400]              	mov	[ss:ALLOCMSAVE],al	; M063: AllocMsave
 32266                                  
 32267 00005CC1 30C0                    	xor	AL,AL			; open for reading
 32268 00005CC3 55                      	push	BP
 32269                                  
 32270                                  	; MSDOS 6.0
 32271                                  	;or	byte [ss:DOS_FLAG],1
 32272 00005CC4 36800E[8600]01          	or	byte [ss:DOS_FLAG],EXECOPEN ; this flag is set to indicate to 
 32273                                  					; the redir that this open call is
 32274                                  					; due to an exec.
 32275                                  
 32276                                  	;invoke	$OPEN			; is the file there?
 32277 00005CCA E81113                  	call	_$OPEN
 32278                                  
 32279                                  	; MSDOS 6.0
 32280 00005CCD 9C                      	pushf
 32281                                  	; 02/06/2019
 32282                                  	;and	byte [ss:DOS_FLAG],0FEh
 32283 00005CCE 368026[8600]FE          	and	byte [ss:DOS_FLAG],~EXECOPEN ; reset flag
 32284 00005CD4 9D                      	popf
 32285                                  
 32286 00005CD5 5D                      	pop	BP
 32287                                  
 32288                                  	; MSDOS 3.3 & MSDOS 6.0
 32289 00005CD6 72AE                    	jc	short Exec_Ret_Err
 32290                                  
 32291                                  	;mov	[bp-8],ax
 32292 00005CD8 8946F8                  	mov	Exec_FH,AX
 32293 00005CDB 89C3                    	mov	BX,AX
 32294 00005CDD 30C0                    	xor	AL,AL
 32295                                  	;invoke	$Ioctl
 32296 00005CDF E8FEC5                  	call	_$IOCTL
 32297 00005CE2 7207                    	jc	short Exec_BombJ
 32298                                  
 32299                                  	;test	dl,80h
 32300 00005CE4 F6C280                  	test	DL,devid_ISDEV
 32301 00005CE7 740A                    	jz	short Exec_Check_Environ
 32302                                  
 32303                                  	;mov	al,2
 32304 00005CE9 B002                    	mov	AL,error_file_not_found
 32305                                  Exec_BombJ:
 32306 00005CEB E9D000                  	jmp	Exec_Bomb
 32307                                  
 32308                                  BadEnv:
 32309                                  	;mov	al,0Ah
 32310 00005CEE B00A                    	mov	AL,error_bad_environment
 32311 00005CF0 E9CB00                  	jmp	Exec_Bomb
 32312                                  
 32313                                  Exec_Check_Environ:
 32314                                  	;mov	word [bp-18],0
 32315 00005CF3 C746EE0000              	mov	Exec_Load_Block,0
 32316                                  	;mov	word [bp-14],0
 32317 00005CF8 C746F20000              	mov	Exec_Environ,0
 32318                                  					; overlays... no environment
 32319                                  	;test	byte [bp-5],2
 32320 00005CFD F646FB02                	test	Exec_Func,exec_func_overlay
 32321 00005D01 7552                    	jnz	short Exec_Read_Header
 32322                                  
 32323                                  	;lds	si,[bp-4]
 32324 00005D03 C576FC                  	lds	SI,Exec_Blk		; get block
 32325 00005D06 8B04                    	mov	ax,[SI]
 32326                                  	;mov	AX,[SI+EXEC1.ENVIRON]	; address of environ
 32327 00005D08 09C0                    	or	AX,AX
 32328 00005D0A 750C                    	jnz	short Exec_Scan_Env
 32329                                  
 32330 00005D0C 368E1E[3003]            	mov	DS,[SS:CurrentPDB]	;smr;SS Override
 32331                                  	;mov	ax,[44]
 32332 00005D11 A12C00                  	mov	AX,[PDB.ENVIRON]
 32333                                  
 32334                                  ; MSDOS 6.0
 32335                                  ;---------------------------------------------BUG 92 4/30/90-----------------
 32336                                  ;
 32337                                  ; Exec_environ is being correctly initialized after the environment has been
 32338                                  ; allocated and copied form the parent's env. It must not be initialized here.
 32339                                  ; Because if the call to $alloc below fails Exec_dealloc will deallocate the
 32340                                  ; parent's environment.
 32341                                  ;	mov	Exec_Environ,AX
 32342                                  ;
 32343                                  ;----------------------------------------------------------------------------
 32344                                  
 32345                                  	;mov	[bp-14],ax
 32346                                  	;mov	Exec_Environ,ax
 32347                                  
 32348 00005D14 09C0                    	or	AX,AX
 32349 00005D16 743D                    	jz	short Exec_Read_Header
 32350                                  
 32351                                  Exec_Scan_Env:
 32352 00005D18 8EC0                    	mov	ES,AX
 32353 00005D1A 31FF                    	xor	DI,DI
 32354                                  	;mov	cx,7FFFh ; MSDOS 3.3
 32355 00005D1C B90080                  	mov	CX,8000h ; MSDOS 6.0	; at most 32k of environment ;M040
 32356 00005D1F 30C0                    	xor	AL,AL
 32357                                  
 32358                                  Exec_Get_Environ_Len:
 32359 00005D21 F2AE                    	repnz	scasb			; find that nul byte
 32360 00005D23 75C9                    	jnz	short BadEnv
 32361                                  
 32362 00005D25 49                      	dec	CX			; Dec CX for the next nul byte test
 32363 00005D26 78C6                    	js	short BadEnv		; gone beyond the end of the environment
 32364                                  
 32365 00005D28 AE                      	scasb				; is there another nul byte?
 32366 00005D29 75F6                    	jnz	short Exec_Get_Environ_Len ; no, scan some more
 32367                                  
 32368 00005D2B 57                      	push	DI
 32369                                  	;lea	bx,[DI+11h]
 32370 00005D2C 8D5D11                  	lea	BX,[DI+0Fh+2]
 32371                                  	;add	bx,[bp-22]
 32372 00005D2F 035EEA                  	add	BX,ExecNameLen		; BX <- length of environment
 32373                                  					; remember argv[0] length
 32374                                  					; round up and remember argc
 32375 00005D32 B104                    	mov	CL,4
 32376 00005D34 D3EB                    	shr	BX,CL			; number of paragraphs needed
 32377 00005D36 06                      	push	ES
 32378                                  	;invoke	$Alloc			; can we get the space?
 32379 00005D37 E84A06                  	call	_$ALLOC
 32380 00005D3A 1F                      	pop	DS
 32381 00005D3B 59                      	pop	CX
 32382                                  
 32383                                  	;jnc	short Exec_Save_Environ
 32384                                  	;jmp	SHORT Exec_No_Mem	; nope... cry and sob
 32385                                  	; 17/12/2022
 32386 00005D3C 727A                    	jc	short Exec_No_Mem ; 02/06/2019
 32387                                  	; 30/11/2022 (MSDOS 5.0, MSDOS.SYS compatibility)
 32388                                  	;jnc	short Exec_Save_Environ
 32389                                  	;jmp	SHORT Exec_No_Mem
 32390                                  
 32391                                  Exec_Save_Environ:
 32392 00005D3E 8EC0                    	mov	ES,AX
 32393                                  	;mov	[bp-14],ax
 32394 00005D40 8946F2                  	mov	Exec_Environ,AX 	; save him for a rainy day
 32395 00005D43 31F6                    	xor	SI,SI
 32396 00005D45 89F7                    	mov	DI,SI
 32397 00005D47 F3A4                    	rep	movsb			; copy the environment
 32398 00005D49 B80100                  	mov	AX,1
 32399 00005D4C AB                      	stosw
 32400                                  	;lds	si,[bp-26]
 32401 00005D4D C576E6                  	lds	SI,ExecName
 32402                                  	;mov	cx,[bp-22]
 32403 00005D50 8B4EEA                  	mov	CX,ExecNameLen
 32404 00005D53 F3A4                    	rep	movsb
 32405                                  
 32406                                  Exec_Read_Header:
 32407                                  	; We read in the program header into the above data area and
 32408                                  	; determine where in this memory the image will be located.
 32409                                  
 32410                                  	;Context DS
 32411 00005D55 16                      	push	ss
 32412 00005D56 1F                      	pop	ds
 32413                                  	;mov	cx,26
 32414 00005D57 B91A00                  	mov	CX,exec_header_len	; header size
 32415 00005D5A BA[C70F]                	mov	DX,exec_signature
 32416 00005D5D 06                      	push	ES
 32417 00005D5E 1E                      	push	DS
 32418 00005D5F E88904                  	call	ExecRead
 32419 00005D62 1F                      	pop	DS
 32420 00005D63 07                      	pop	ES
 32421 00005D64 7256                    	jc	short Exec_Bad_File
 32422                                  
 32423 00005D66 09C0                    	or	AX,AX
 32424 00005D68 7452                    	jz	short Exec_Bad_File
 32425                                  	;cmp	ax,26
 32426 00005D6A 83F81A                  	cmp	AX,exec_header_len	; did we read the right number?
 32427 00005D6D 7519                    	jnz	short Exec_Com_Filej	; yep... continue
 32428                                  
 32429 00005D6F F706[D30F]FFFF          	test	word [exec_max_BSS],-1 	; indicate load high?
 32430 00005D75 7504                    	jnz	short Exec_Check_Sig
 32431                                  
 32432                                  	;mov	byte [bp-6],0FFh
 32433 00005D77 C646FAFF                	mov	Exec_Load_High,-1
 32434                                  
 32435                                  Exec_Check_Sig:
 32436 00005D7B A1[C70F]                	mov	AX,[exec_signature]	; rms;NSS
 32437                                  	;cmp	ax,5A4Dh ; 'MZ'
 32438 00005D7E 3D4D5A                  	cmp	AX,exe_valid_signature	; zibo arises!
 32439 00005D81 7408                    	jz	short Exec_Save_Start 	; assume com file if no signature
 32440                                  
 32441                                  	;cmp	ax,4D5Ah ; 'ZM'
 32442 00005D83 3D5A4D                  	cmp	AX,exe_valid_old_signature  ; zibo arises!
 32443 00005D86 7403                    	jz	short Exec_Save_Start 	; assume com file if no signature
 32444                                  
 32445                                  Exec_Com_Filej:
 32446 00005D88 E9EF01                  	jmp	Exec_Com_File
 32447                                  
 32448                                  	; We have the program header... determine memory requirements
 32449                                  
 32450                                  Exec_Save_Start:
 32451 00005D8B A1[CB0F]                	mov	AX,[exec_pages]		; get 512-byte pages	;rms;NSS
 32452 00005D8E B105                    	mov	CL,5			; convert to paragraphs
 32453 00005D90 D3E0                    	shl	AX,CL
 32454 00005D92 2B06[CF0F]              	sub	AX,[exec_par_dir] 	; AX = size in paragraphs ;rms;NSS
 32455                                  	;mov	[bp-12],ax
 32456 00005D96 8946F4                  	mov	Exec_Res_Len_Para,AX
 32457                                  
 32458                                  		; Do we need to allocate memory?
 32459                                  		; Yes if function is not load-overlay
 32460                                  
 32461                                  	;test	byte [bp-5],2
 32462 00005D99 F646FB02                	test	Exec_Func,exec_func_overlay
 32463 00005D9D 744B                    	jz	short Exec_Allocate	; allocation of space
 32464                                  
 32465                                  		; get load address from block
 32466                                  
 32467                                  	;les	di,[bp-4]
 32468 00005D9F C47EFC                  	les	DI,Exec_Blk
 32469 00005DA2 268B05                  	mov	ax,[es:di]
 32470                                  	;mov	AX,[ES:DI+EXEC3.load_addr]
 32471                                  	;mov	[bp-20],ax
 32472 00005DA5 8946EC                  	mov	Exec_DMA,AX
 32473                                  
 32474                                  	; 17/12/2022
 32475                                  	;;mov	ax,[es:di+2]
 32476                                  	;mov	AX,[ES:DI+EXEC3.reloc_fac]
 32477                                  	;;mov	[bp-10],ax
 32478                                  	;mov	Exec_Rel_Fac,AX
 32479                                  
 32480                                  	; 17/12/2022
 32481                                  	; 30/11/2022 (!most proper code!)
 32482                                  	;mov	dx,[es:di+2]
 32483 00005DA8 268B5502                	mov	dx,[ES:DI+EXEC3.reloc_fac]
 32484                                  	;mov	[bp-10],dx
 32485 00005DAC 8956F6                  	mov	Exec_Rel_Fac,dx
 32486                                  	; ax = Exec_DMA
 32487 00005DAF E9E400                  	jmp	Exec_Find_Res
 32488                                  
 32489                                  ; 17/12/2022
 32490                                  ; 30/11/2022 (MSDOS 5.0, MSDOS.SYS compatibility)
 32491                                  ;%if 0
 32492                                  	; 02/06/2019 - Retro DOS v4.0
 32493                                  	;mov	ax,[bp-20]  ; *+*
 32494 00005DB2 8B46EC                  	mov	AX,Exec_DMA ; *+*
 32495                                  	; 10/08/2018
 32496 00005DB5 E9DE00                  	jmp	Exec_Find_Res		; M000
 32497                                  ;%endif
 32498                                  
 32499                                  Exec_No_Mem:
 32500                                  	;mov	al,8
 32501 00005DB8 B008                    	mov	AL,error_not_enough_memory
 32502 00005DBA EB02                    	jmp	short Exec_Bomb
 32503                                  
 32504                                  Exec_Bad_File:
 32505                                  	;mov	al,0Bh
 32506 00005DBC B00B                    	mov	AL,error_bad_format
 32507                                  
 32508                                  Exec_Bomb:
 32509                                  	;mov	bx,[bp-8]
 32510 00005DBE 8B5EF8                  	mov	BX,Exec_FH
 32511 00005DC1 E84004                  	call	Exec_Dealloc
 32512                                  	;LeaveCrit CritMem
 32513 00005DC4 E8ACB5                  	call	LCritMEM
 32514                                  	;save	<AX,BP>
 32515 00005DC7 50                      	push	ax
 32516 00005DC8 55                      	push	bp
 32517                                  	;invoke	$CLOSE
 32518 00005DC9 E83E0A                  	call	_$CLOSE
 32519                                  	;restore <BP,AX>
 32520 00005DCC 5D                      	pop	bp
 32521 00005DCD 58                      	pop	ax
 32522 00005DCE E9B5FE                  	jmp	Exec_Ret_Err
 32523                                  
 32524                                  Exec_Chk_Mem: 
 32525                                  
 32526                                  ; 17/12/2022
 32527                                  ; 30/11/2022 (MSDOS 5.0, MSDOS.SYS compatibility)
 32528                                  ;%if 0
 32529                                  	; MSDOS 6.0    			; M063 - Start
 32530                                  	;mov	al,[ss:AllocMethod]	; save current alloc method in ax
 32531                                  	; 10/06/2019
 32532 00005DD1 A0[0203]                	mov	al,[AllocMethod]
 32533                                  	;mov	bl,[ss:ALLOCMSAVE]
 32534 00005DD4 8A1E[8400]              	mov	bl,[ALLOCMSAVE]
 32535                                  	;mov	[ss:AllocMethod],bl	; restore original allocmethod
 32536 00005DD8 881E[0203]              	mov	[AllocMethod],bl
 32537                                  	
 32538 00005DDC F6C340                  	test	bl,HIGH_ONLY ; 40h	; Q: was the HIGH_ONLY bit already set
 32539 00005DDF 75D7                    	jnz	short Exec_No_Mem	; Y: no space in UMBs. Quit
 32540                                  	;				; N: continue
 32541                                  	;
 32542 00005DE1 A840                    	test	al,HIGH_ONLY		; Q: did we set the HIGH_ONLY bit
 32543 00005DE3 74D3                    	jz	short Exec_No_Mem	; N: no memory 
 32544                                  	; 02/06/2019
 32545                                  	;mov	ax,[ss:SAVE_AX]		; Y: restore ax and
 32546 00005DE5 A1[8A00]                	mov	ax,[SAVE_AX]
 32547                                  	;jmp	short Exec_Norm_Alloc	;    Try again
 32548                                  					; M063 - End
 32549 00005DE8 EB2B                    	jmp	short Exec_Norm_Alloc1
 32550                                  ;%endif
 32551                                  
 32552                                  ; 17/12/2022
 32553                                  %if 0
 32554                                  	; 30/11/2022 (MSDOS 5.0, MSDOS.SYS compatibility)
 32555                                  	; MSDOS 6.0    			; M063 - Start
 32556                                  	mov	al,[ss:AllocMethod]	; save current alloc method in ax
 32557                                  	mov	bl,[ss:ALLOCMSAVE]
 32558                                  	mov	[ss:AllocMethod],bl	; restore original allocmethod
 32559                                  
 32560                                  	test	bl,HIGH_ONLY ; 40h	; Q: was the HIGH_ONLY bit already set
 32561                                  	jnz	short Exec_No_Mem	; Y: no space in UMBs. Quit
 32562                                  	;				; N: continue
 32563                                  	;
 32564                                  	test	al,HIGH_ONLY		; Q: did we set the HIGH_ONLY bit
 32565                                  	jz	short Exec_No_Mem	; N: no memory 
 32566                                  
 32567                                  	mov	ax,[ss:SAVE_AX]		; Y: restore ax and
 32568                                  	jmp	short Exec_Norm_Alloc	;    Try again
 32569                                  					; M063 - End
 32570                                  %endif
 32571                                  
 32572                                  Exec_Allocate:
 32573                                  	; 09/09/2018
 32574                                  
 32575                                  	; M005 - START
 32576                                  	; If there is no STACK segment for this exe file and if this
 32577                                  	; not an overlay and the resident size is less than 64K - 
 32578                                  	; 256 bytes we shall add 256 bytes to the programs 
 32579                                  	; resident memory requirement and set Exec_SP to this value.
 32580                                  	
 32581                                  	; 17/12/2022
 32582 00005DEA 29DB                    	sub	bx,bx ; 0	
 32583                                  
 32584                                  	; MSDOS 6.0
 32585                                  	;;mov	byte [bp-29],0
 32586                                  	;mov	Exec_NoStack,0
 32587                                  	; 17/12/2022
 32588 00005DEC 885EE3                  	mov	Exec_NoStack,bl ; 0
 32589 00005DEF 391E[D50F]              	cmp	[exec_SS],bx ; 0
 32590                                  	;cmp	word [exec_SS],0	; Q: is there a stack seg
 32591 00005DF3 7511                    	jne	short ea1		; Y: continue normal processing
 32592 00005DF5 391E[D70F]              	cmp	[exec_SP],bx ; 0
 32593                                  	;cmp	word [exec_SP],0	; Q: is there a stack ptr
 32594 00005DF9 750B                    	jne	short ea1		; Y: continue normal processing
 32595                                  
 32596                                  	;inc	byte [bp-29]
 32597 00005DFB FE46E3                  	inc	Exec_NoStack
 32598 00005DFE 3DF00F                  	cmp	ax,1000h-10h		; Q: is this >= 64K-256 bytes
 32599 00005E01 7303                    	jae	short ea1		; Y: don't set Exec_SP
 32600                                  
 32601 00005E03 83C010                  	add	ax,10h			; add 10h paras to mem requirement
 32602                                  ea1:
 32603                                  	; M005 - END
 32604                                  
 32605                                  	; MSDOS 6.0			; M000 - start
 32606                                  	; 20/05/2019
 32607                                  	; (ds = ss = DOSDATA)
 32608 00005E06 F606[0203]80            	test	byte [AllocMethod],HIGH_FIRST ; 80h
 32609                                  					; Q: is the alloc strat high_first
 32610 00005E0B 7405                    	jz	short Exec_Norm_Alloc	; N: normal allocate
 32611                                  					; Y: set high_only bit
 32612 00005E0D 800E[0203]40            	or	byte [AllocMethod],HIGH_ONLY ; 40h
 32613                                  					; M000 - end
 32614                                  Exec_Norm_Alloc:
 32615 00005E12 A3[8A00]                	mov	[SAVE_AX],ax		; M000: save ax for possible 2nd  
 32616                                  Exec_Norm_Alloc1:	; 02/06/2019
 32617                                  					; M000: attempt at allocating memory
 32618                                  	; MSDOS 3.3
 32619                                  	;push	ax			; M000
 32620                                  
 32621 00005E15 BBFFFF                  	mov	BX,0FFFFh		; see how much room in arena
 32622 00005E18 1E                      	push	DS
 32623                                  	;invoke	$Alloc			; should have carry set and BX has max
 32624 00005E19 E86805                  	call	_$ALLOC
 32625 00005E1C 1F                      	pop	DS
 32626                                  
 32627                                  	; MSDOS 6.0
 32628 00005E1D A1[8A00]                	mov	AX,[SAVE_AX]		; M000
 32629                                  	; MSDOS 3.3
 32630                                  	;pop	ax			; M000
 32631                                  
 32632 00005E20 83C010                  	add	AX,10h			; room for header
 32633 00005E23 83FB11                  	cmp	BX,11h			; enough room for a header
 32634                                  	; MSDOS 6.0
 32635 00005E26 72A9                    	jb	short Exec_Chk_Mem	; M000
 32636                                  	; MSDOS 3.3	
 32637                                  	;jb	short Exec_No_Mem
 32638                                  
 32639 00005E28 39D8                    	cmp	AX,BX			; is there enough for bare image?
 32640                                  	; MSDOS 6.0
 32641 00005E2A 77A5                    	ja	short Exec_Chk_Mem	; M000
 32642                                  	; MSDOS 3.3
 32643                                  	;ja	short Exec_No_Mem
 32644                                  
 32645                                  	;test	byte [bp-6],0FFh
 32646 00005E2C F646FAFF                	test	Exec_Load_High,-1	; if load high, use max
 32647 00005E30 7518                    	jnz	short Exec_BX_Max	; use max
 32648                                  
 32649                                  	; 09/09/2018
 32650                                  
 32651 00005E32 0306[D10F]              	add	AX,[exec_min_BSS] 	; go for min allocation;rms;NSS
 32652                                  	; MSDOS 6.0
 32653 00005E36 7299                    	jc	short Exec_Chk_Mem		; M000
 32654                                  	; MSDOS 3.3
 32655                                  	;jc	short Exec_No_Mem
 32656                                  
 32657 00005E38 39D8                    	cmp	AX,BX			; enough space?
 32658                                  	; MSDOS 6.0
 32659 00005E3A 7795                    	ja	short Exec_Chk_Mem	; M000: nope...	
 32660                                  	; MSDOS 3.3
 32661                                  	;ja	short Exec_No_Mem
 32662                                  
 32663 00005E3C 2B06[D10F]              	sub	AX,[exec_min_BSS] 	; rms;NSS
 32664 00005E40 0306[D30F]              	add	AX,[exec_max_BSS] 	; go for the MAX
 32665 00005E44 7204                    	jc	short Exec_BX_Max
 32666                                  
 32667 00005E46 39D8                    	cmp	AX,BX
 32668 00005E48 7602                    	jbe	short Exec_Got_Block
 32669                                  
 32670                                  Exec_BX_Max:
 32671 00005E4A 89D8                    	mov	AX,BX
 32672                                  
 32673                                  Exec_Got_Block:
 32674                                  	; 03/08/2018 - Retro DOS v3.0
 32675                                  
 32676 00005E4C 1E                      	push	DS
 32677 00005E4D 89C3                    	mov	BX,AX
 32678                                  	;mov	[bp-16],bx
 32679 00005E4F 895EF0                  	mov	Exec_Size,BX
 32680                                  	;invoke	$Alloc			; get the space
 32681 00005E52 E82F05                  	call	_$ALLOC
 32682 00005E55 1F                      	pop	DS
 32683                                  	; MSDOS 6.0
 32684                                  	;jc	short Exec_Chk_Mem	; M000
 32685                                  	; MSDOS 3.3
 32686                                  	;;jc	short Exec_No_Mem
 32687                                  	; 20/05/2019
 32688 00005E56 7303                    	jnc	short ea0
 32689 00005E58 E976FF                  	jmp	Exec_Chk_Mem
 32690                                  ea0:
 32691                                  	; MSDOS 6.0
 32692 00005E5B 8A0E[8400]              	mov	cl,[ALLOCMSAVE]		; M063: 
 32693 00005E5F 880E[0203]              	mov	[AllocMethod],cl	; M063: restore allocmethod
 32694                                  
 32695                                  ;M029; Begin changes
 32696                                  ; This code does special handling for programs with no stack segment. If so,
 32697                                  ;check if the current block is larger than 64K. If so, we do not modify
 32698                                  ;Exec_SP. If smaller than 64K, we make Exec_SP = top of block. In either
 32699                                  ;case Exec_SS is not changed.
 32700                                  
 32701                                  	; MSDOS 6.0
 32702                                  	;cmp	byte [bp-29],0
 32703 00005E63 807EE300                	cmp	Exec_NoStack,0
 32704                                  	;je	@f
 32705 00005E67 7412                    	je	short ea2
 32706                                  
 32707 00005E69 81FB0010                	cmp	bx,1000h		; Q: >= 64K memory block
 32708                                  	;jae	@f			; Y: Exec_SP = 0
 32709 00005E6D 730C                    	jae	short ea2
 32710                                  
 32711                                  ;Make Exec_SP point at the top of the memory block
 32712                                  
 32713 00005E6F B104                    	mov	cl,4
 32714 00005E71 D3E3                    	shl	bx,cl			; get byte offset
 32715 00005E73 81EB0001                	sub	bx,100h			; take care of PSP
 32716 00005E77 891E[D70F]              	mov	[exec_SP],bx		; Exec_SP = top of block
 32717                                  ea2:
 32718                                  ;@@:
 32719                                  ;M029; end changes
 32720                                  
 32721                                  	;mov	[bp-18],ax
 32722 00005E7B 8946EE                  	mov	Exec_Load_Block,AX
 32723 00005E7E 83C010                  	add	AX,10h
 32724                                  	;test	byte [bp-6],0FFh
 32725 00005E81 F646FAFF                	test	Exec_Load_High,-1
 32726 00005E85 7409                    	jz	short Exec_Use_AX	; use ax for load info
 32727                                  
 32728                                  	;add	ax,[bp-16]
 32729 00005E87 0346F0                  	add	AX,Exec_Size		; go to end
 32730                                  	;sub	ax,[bp-12]
 32731 00005E8A 2B46F4                  	sub	AX,Exec_Res_Len_Para	; drop off header
 32732 00005E8D 83E810                  	sub	AX,10h			; drop off pdb
 32733                                  
 32734                                  Exec_Use_AX:
 32735                                  	;mov	[bp-10],ax
 32736 00005E90 8946F6                  	mov	Exec_Rel_Fac,AX 	; new segment
 32737                                  	;mov	[bp-20],ax
 32738 00005E93 8946EC                  	mov	Exec_DMA,AX ; *+*	; beginning of dma
 32739                                  
 32740                                  	; Determine the location in the file of the beginning of
 32741                                  	; the resident
 32742                                  
 32743                                  ; 17/12/2022
 32744                                  ; 30/11/2022 (MSDOS 5.0, MSDOS.SYS compatibility)
 32745                                  ;%if 0
 32746                                  
 32747                                  Exec_Find_Res:
 32748                                  	; MSDOS 6.0
 32749                                  	;;mov	dx,[bp-20]
 32750                                  	;mov	DX,Exec_DMA ; *+*
 32751                                  	;;mov	[bp-28],dx
 32752                                  	;mov	Exec_DMA_Save,DX
 32753                                  
 32754                                  	; 17/12/2022
 32755                                  	; AX = Exec_DMA
 32756                                  
 32757                                  	; 02/06/2019 - Retro DOS v4.0
 32758                                  	;mov	[bp-28],ax ; *+*
 32759 00005E96 8946E4                  	mov	Exec_DMA_Save,AX ; *+*
 32760                                  
 32761                                  ;%endif
 32762                                  
 32763                                  ; 17/12/2022
 32764                                  %if 0
 32765                                  	; 30/11/2022 (MSDOS 5.0, MSDOS.SYS compatibility)
 32766                                  Exec_Find_Res:
 32767                                  	;mov	dx,[bp-20]
 32768                                  	mov	DX,Exec_DMA ; *+*
 32769                                  	;mov	[bp-28],dx
 32770                                  	mov	Exec_DMA_Save,DX
 32771                                  %endif
 32772                                  
 32773                                  	; MSDOS 3.3 (& MSDOS 6.0)
 32774 00005E99 8B16[CF0F]              	mov	DX,[exec_par_dir]
 32775 00005E9D 52                      	push	DX
 32776 00005E9E B104                    	mov	CL,4
 32777 00005EA0 D3E2                    	shl	DX,CL			; low word of location
 32778 00005EA2 58                      	pop	AX
 32779 00005EA3 B10C                    	mov	CL,12
 32780 00005EA5 D3E8                    	shr	AX,CL			; high word of location
 32781 00005EA7 89C1                    	mov	CX,AX			; CX <- high
 32782                                  
 32783                                  		; Read in the resident image (first, seek to it)
 32784                                  	;mov	bx,[bp-8]
 32785 00005EA9 8B5EF8                  	mov	BX,Exec_FH
 32786 00005EAC 1E                      	push	DS
 32787 00005EAD 30C0                    	xor	AL,AL
 32788                                  	;invoke	$Lseek			; Seek to resident
 32789 00005EAF E8D40A                  	call	_$LSEEK
 32790 00005EB2 1F                      	pop	DS
 32791 00005EB3 7303                    	jnc	short Exec_Big_Read
 32792                                  
 32793 00005EB5 E906FF                  	jmp	Exec_Bomb
 32794                                  
 32795                                  Exec_Big_Read:				; Read resident into memory
 32796                                  	;mov	bx,[bp-12]
 32797 00005EB8 8B5EF4                  	mov	BX,Exec_Res_Len_Para
 32798 00005EBB 81FB0010                	cmp	BX,1000h		; Too many bytes to read?
 32799 00005EBF 7203                    	jb	short Exec_Read_OK
 32800                                  
 32801 00005EC1 BBE00F                  	mov	BX,0FE0h		; Max in one chunk FE00 bytes
 32802                                  
 32803                                  Exec_Read_OK:
 32804                                  	;sub	[bp-12],bx
 32805 00005EC4 295EF4                  	sub	Exec_Res_Len_Para,BX	; We read (soon) this many
 32806 00005EC7 53                      	push	BX
 32807 00005EC8 B104                    	mov	CL,4
 32808 00005ECA D3E3                    	shl	BX,CL			; Get count in bytes from paras
 32809 00005ECC 89D9                    	mov	CX,BX			; Count in correct register
 32810 00005ECE 1E                      	push	DS
 32811                                  	;mov	ds,[bp-20]
 32812 00005ECF 8E5EEC                  	mov	DS,Exec_DMA		; Set up read buffer
 32813                                  
 32814 00005ED2 31D2                    	xor	DX,DX
 32815 00005ED4 51                      	push	CX			; Save our count
 32816 00005ED5 E81303                  	call	ExecRead
 32817 00005ED8 59                      	pop	CX			; Get old count to verify
 32818 00005ED9 1F                      	pop	DS
 32819 00005EDA 7248                    	jc	short Exec_Bad_FileJ
 32820                                  
 32821 00005EDC 39C1                    	cmp	CX,AX			; Did we read enough?
 32822 00005EDE 5B                      	pop	BX			; Get paragraph count back
 32823 00005EDF 7408                    	jz	short ExecCheckEnd	; and do reloc if no more to read
 32824                                  
 32825                                  	; The read did not match the request. If we are off by 512
 32826                                  	; bytes or more then the header lied and we have an error.
 32827                                  
 32828 00005EE1 29C1                    	sub	CX,AX
 32829 00005EE3 81F90002                	cmp	CX,512
 32830 00005EE7 733B                    	jae	short Exec_Bad_FileJ
 32831                                  
 32832                                  	; We've read in CX bytes... bump DTA location
 32833                                  
 32834                                  ExecCheckEnd:
 32835                                  	;add	[bp-20],bx
 32836 00005EE9 015EEC                  	add	Exec_DMA,BX		; Bump dma address
 32837                                  	;test	word [bp-12],0FFFFh
 32838 00005EEC F746F4FFFF              	test	Exec_Res_Len_Para,-1
 32839 00005EF1 75C5                    	jnz	short Exec_Big_Read
 32840                                  
 32841                                  	; The image has now been read in. We must perform relocation
 32842                                  	; to the current location.
 32843                                  
 32844                                  exec_do_reloc:
 32845                                  	;mov	cx,[bp-10]
 32846 00005EF3 8B4EF6                  	mov	CX,Exec_Rel_Fac
 32847 00005EF6 A1[D50F]                	mov	AX,[exec_SS]		; get initial SS ;rms;NSS
 32848 00005EF9 01C8                    	add	AX,CX			; and relocate him
 32849 00005EFB A3[C10F]                	mov	[exec_init_SS],AX 	; rms;NSS
 32850                                  
 32851 00005EFE A1[D70F]                	mov	AX,[exec_SP]		; initial SP ;rms;NSS
 32852 00005F01 A3[BF0F]                	mov	[exec_init_SP],AX 	; rms;NSS
 32853                                  
 32854 00005F04 C406[DB0F]              	les	AX,[exec_IP]		; rms;NSS
 32855 00005F08 A3[C30F]                	mov	[exec_init_IP],AX 	; rms;NSS
 32856 00005F0B 8CC0                    	mov	AX,ES			; rms;NSS
 32857 00005F0D 01C8                    	add	AX,CX			; relocated...
 32858 00005F0F A3[C50F]                	mov	[exec_init_CS],AX 	; rms;NSS
 32859                                  
 32860 00005F12 31C9                    	xor	CX,CX
 32861 00005F14 8B16[DF0F]              	mov	DX,[exec_rle_table]	; rms;NSS
 32862                                  	;mov	bx,[bp-8]
 32863 00005F18 8B5EF8                  	mov	BX,Exec_FH
 32864 00005F1B 1E                      	push	DS
 32865 00005F1C 31C0                    	xor	AX,AX
 32866                                  	;invoke	$Lseek
 32867 00005F1E E8650A                  	call	_$LSEEK
 32868 00005F21 1F                      	pop	DS
 32869 00005F22 7303                    	jnc	short exec_get_entries
 32870                                  
 32871                                  Exec_Bad_FileJ:
 32872 00005F24 E995FE                  	jmp	Exec_Bad_File
 32873                                  
 32874                                  exec_get_entries:
 32875 00005F27 8B16[CD0F]              	mov	DX,[exec_rle_count]	; Number of entries left ;rms;NSS
 32876                                  
 32877                                  exec_read_reloc:
 32878 00005F2B 52                      	push	DX
 32879                                  	;mov	dx,OPENBUF
 32880 00005F2C BA[BE03]                	mov	DX,Exec_Internal_Buffer
 32881                                  	;;mov	cx,388 ; MSDOS 3.3 ; (390>>2)<<2
 32882                                  	;mov	cx,396 ; MSDOS 6.0
 32883 00005F2F B98C01                  	mov	CX,((Exec_Internal_Buffer_Size)/4)*4 ; (397>>2)<<2
 32884 00005F32 1E                      	push	DS
 32885 00005F33 E8B502                  	call	ExecRead
 32886 00005F36 07                      	pop	ES
 32887 00005F37 5A                      	pop	DX
 32888 00005F38 72EA                    	jc	short Exec_Bad_FileJ
 32889                                  
 32890                                  	;;mov	cx,97 ;  MSDOS 3.3 ; (390>>2)
 32891                                  	;mov	cx,99 ;  MSDOS 6.0
 32892 00005F3A B96300                  	mov	CX,(Exec_Internal_Buffer_Size)/4 ; (397>>2)
 32893                                  					; Pointer to byte location in header
 32894                                  	;mov	di,OPENBUF
 32895 00005F3D BF[BE03]                	mov	DI,Exec_Internal_Buffer
 32896                                  	;mov	si,[bp-10]
 32897 00005F40 8B76F6                  	mov	SI,Exec_Rel_Fac 	; Relocate a single address
 32898                                  
 32899                                  exec_reloc_one:
 32900 00005F43 09D2                    	or	DX,DX			; Any more entries?
 32901 00005F45 7416                    	jz	short Exec_Set_PDBJ
 32902                                  
 32903                                  exec_get_addr:
 32904 00005F47 26C51D                  	lds	BX,[ES:DI]		; Get ra/sa of entry
 32905 00005F4A 8CD8                    	mov	AX,DS			; Relocate address of item
 32906                                  
 32907                                  	; MSDOS 6.0
 32908                                  ;;;;;;	add	AX,SI  ; MSDOS 3.3
 32909                                  	;add	ax,[bp-28]
 32910 00005F4C 0346E4                  	add	AX,Exec_DMA_Save
 32911                                  
 32912 00005F4F 8ED8                    	mov	DS,AX
 32913 00005F51 0137                    	add	[BX],SI
 32914 00005F53 83C704                  	add	DI,4
 32915 00005F56 4A                      	dec	DX
 32916 00005F57 E2EA                    	loop	exec_reloc_one		; End of internal buffer?
 32917                                  
 32918                                  	; We've exhausted a single buffer's worth. Read in the next
 32919                                  	; piece of the relocation table.
 32920                                  
 32921 00005F59 06                      	push	ES
 32922 00005F5A 1F                      	pop	DS
 32923 00005F5B EBCE                    	jmp	short exec_read_reloc
 32924                                  
 32925                                  Exec_Set_PDBJ:
 32926                                  	; MSDOS 6.0
 32927                                  	
 32928                                  	; We now determine if this is a buggy exe packed file and if 
 32929                                  	; so we patch in the right code. Note that fixexepatch will
 32930                                  	; point to a ret if dos loads low. The load segment as 
 32931                                  	; determined above will be in exec_dma_save
 32932                                  	
 32933 00005F5D 06                      	push	es
 32934 00005F5E 50                      	push	ax			; M030
 32935 00005F5F 51                      	push	cx			; M030
 32936                                  	;mov	es,[bp-28]
 32937 00005F60 8E46E4                  	mov	es,Exec_DMA_Save
 32938 00005F63 36A1[C50F]              	mov	ax,[ss:exec_init_CS]	; M030
 32939 00005F67 368B0E[C30F]            	mov	cx,[ss:exec_init_IP]	; M030
 32940 00005F6C 36FF16[F811]            	call	word [ss:FixExePatch]
 32941                                  	; 30/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 32942                                  	; (MSDOS 5.0 MSDOS.SYS does not contain 'Rational386Patch')
 32943                                  	;call	word [ss:Rational386PatchPtr]
 32944 00005F71 59                      	pop	cx			; M030
 32945 00005F72 58                      	pop	ax			; M030
 32946 00005F73 07                      	pop	es
 32947                                  
 32948 00005F74 E9DE00                  	jmp	Exec_Set_PDB
 32949                                  
 32950                                  Exec_No_Memj:
 32951 00005F77 E93EFE                  	jmp	Exec_No_Mem
 32952                                  
 32953                                  	; we have a .COM file. First, determine if we are merely
 32954                                  	; loading an overlay.
 32955                                  
 32956                                  Exec_Com_File:
 32957                                  	;test	byte [bp-5],2
 32958 00005F7A F646FB02                	test	Exec_Func,exec_func_overlay
 32959 00005F7E 742D                    	jz	short Exec_Alloc_Com_File
 32960                                  	;lds	si,[bp-4]
 32961 00005F80 C576FC                  	lds	SI,Exec_Blk		; get arg block
 32962 00005F83 AD                      	lodsw				; get load address
 32963                                  	;mov	[bp-20],ax
 32964 00005F84 8946EC                  	mov	Exec_DMA,AX
 32965 00005F87 B8FFFF                  	mov	AX,0FFFFh
 32966 00005F8A EB63                    	jmp	short Exec_Read_Block	; read it all!
 32967                                  
 32968                                  Exec_Chk_Com_Mem:			
 32969                                  	; MSDOS 6.0	     		; M063 - Start
 32970 00005F8C 36A0[0203]              	mov	al,[ss:AllocMethod]	; save current alloc method in ax
 32971 00005F90 368A1E[8400]            	mov	bl,[ss:ALLOCMSAVE]
 32972 00005F95 36881E[0203]            	mov	[ss:AllocMethod],bl	; restore original allocmethod
 32973 00005F9A F6C340                  	test	bl,HIGH_ONLY ; 40h	; Q: was the HIGH_ONLY bit already set
 32974 00005F9D 75D8                    	jnz	short Exec_No_Memj	; Y: no space in UMBs. Quit
 32975                                  					; N: continue
 32976                                  	
 32977 00005F9F A840                    	test	al,HIGH_ONLY		; Q: did we set the HIGH_ONLY bit
 32978 00005FA1 74D4                    	jz	short Exec_No_Memj	; N: no memory 
 32979                                  	
 32980                                  	;mov	ax,[bp-18]
 32981 00005FA3 8B46EE                  	mov	ax,Exec_Load_Block	; M047: ax = block we just allocated	
 32982 00005FA6 31DB                    	xor	bx,bx			; M047: bx => free arena
 32983 00005FA8 E87502                  	call	ChangeOwner		; M047: free this block
 32984                                  	
 32985 00005FAB EB0E                    	jmp	short Exec_Norm_Com_Alloc
 32986                                  					; M063 - End
 32987                                  	
 32988                                  	; We must allocate the max possible size block (ick!)
 32989                                  	; and set up CS=DS=ES=SS=PDB pointer, IP=100, SP=max
 32990                                  	; size of block.
 32991                                  
 32992                                  Exec_Alloc_Com_File:
 32993                                  	; MSDOS 6.0			; M000 -start
 32994 00005FAD 36F606[0203]80          	test	byte [ss:AllocMethod],HIGH_FIRST ; 80h
 32995                                  					; Q: is the alloc strat high_first
 32996 00005FB3 7406                    	jz	short Exec_Norm_Com_Alloc ; N: normal allocate
 32997                                  					; Y: set high_only bit
 32998 00005FB5 36800E[0203]40          	or	byte [ss:AllocMethod],HIGH_ONLY ; 40h
 32999                                  					; M000 - end
 33000                                  Exec_Norm_Com_Alloc:			; M000
 33001                                  	; MSDOS 3.3 (& MSDOS 6.0)
 33002 00005FBB BBFFFF                  	mov	BX,0FFFFh
 33003                                  	;invoke	$Alloc			; largest piece available as error
 33004 00005FBE E8C303                  	call	_$ALLOC
 33005 00005FC1 09DB                    	or	BX,BX
 33006                                  	; MSDOS 6.0
 33007 00005FC3 74C7                    	jz	short Exec_Chk_Com_Mem	; M000
 33008                                  	; MSDOS 3.3
 33009                                  	;jz	short Exec_No_Memj
 33010                                  
 33011                                  	;mov	[bp-16],bx
 33012 00005FC5 895EF0                  	mov	Exec_Size,BX		; save size of allocation block
 33013 00005FC8 53                      	push	BX
 33014                                  	;invoke	$ALLOC			; largest piece available
 33015 00005FC9 E8B803                  	call	_$ALLOC
 33016 00005FCC 5B                      	pop	BX			; get size of block...
 33017                                  	;mov	[bp-18],ax
 33018 00005FCD 8946EE                  	mov	Exec_Load_Block,AX
 33019                                  
 33020 00005FD0 83C010                  	add	AX,10h			; increment for header
 33021                                  	;mov	[bp-20],ax
 33022 00005FD3 8946EC                  	mov	Exec_DMA,AX
 33023                                  
 33024 00005FD6 31C0                    	xor	AX,AX			; presume 64K read...
 33025 00005FD8 81FB0010                	cmp	BX,1000h		; 64k or more in block?
 33026 00005FDC 730E                    	jae	short Exec_Read_Com	; yes, read only 64k
 33027                                  
 33028 00005FDE 89D8                    	mov	AX,BX			; convert size to bytes
 33029 00005FE0 B104                    	mov	CL,4
 33030 00005FE2 D3E0                    	shl	AX,CL
 33031                                  	; 17/12/2022
 33032                                  	; 30/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 33033                                  	;			(MSDOS 5.0, MSDOS.SYS compatibility)
 33034                                  	; MSDOS 5.0
 33035                                  	;cmp	AX,100h   
 33036                                  	; 02/06/2019 - Retro DOS v4.0
 33037                                  	; MSDOS 6.0
 33038                                          ; 17/12/2022
 33039 00005FE4 3D0002                  	cmp	AX,200h                 ; enough memory for PSP and stack?
 33040 00005FE7 76A3                    	jbe	short Exec_Chk_Com_Mem	; M000: jump if not
 33041                                  	;;jbe	short Exec_No_Memj	; M000: jump if not
 33042                                  	;; Retro DOS v3.0 modification (on MSDOS 6.0 code) -03/08/2018-
 33043                                  	;;jbe	short Exec_Chk_Com_Mem	; M000: jump if not
 33044                                  	;jbe	short Exec_No_Memj	; M000: jump if not
 33045                                  
 33046                                  					; M047: size of the block is < 64K
 33047 00005FE9 2D0001                  	sub	ax,100h			; M047: reserve 256 bytes for stack
 33048                                  
 33049                                  Exec_Read_Com:
 33050                                  	; MSDOS 3.3 (& MSDOS 6.0)
 33051 00005FEC 2D0001                  	sub	AX,100h 		; remember size of psp
 33052                                  Exec_Read_Block:
 33053 00005FEF 50                      	push	AX			; save number to read
 33054                                  	;mov	bx,[bp-8]
 33055 00005FF0 8B5EF8                  	mov	BX,Exec_FH		; of com file
 33056 00005FF3 31C9                    	xor	CX,CX			; but seek to 0:0
 33057 00005FF5 89CA                    	mov	DX,CX
 33058 00005FF7 31C0                    	xor	AX,AX			; seek relative to beginning
 33059                                  	;invoke	$Lseek			; back to beginning of file
 33060 00005FF9 E88A09                  	call	_$LSEEK
 33061 00005FFC 59                      	pop	CX			; number to read
 33062                                  	;mov	ds,[bp-20]
 33063 00005FFD 8E5EEC                  	mov	DS,Exec_DMA
 33064 00006000 31D2                    	xor	DX,DX
 33065 00006002 51                      	push	CX
 33066 00006003 E8E501                  	call	ExecRead
 33067 00006006 5E                      	pop	SI			; get number of bytes to read
 33068 00006007 7303                    	jnc	short OkRead
 33069 00006009 E9B0FD                  	jmp	Exec_Bad_File
 33070                                  
 33071                                  	; 10/09/2018
 33072                                  OkRead:
 33073 0000600C 39F0                    	cmp	AX,SI			; did we read them all?
 33074                                  	; MSDOS 6.0
 33075                                  	;jz	short Exec_Chk_Com_Mem	; M00: exactly the wrong number...no 
 33076                                  	; MSDOS 3.3
 33077                                  	;;jz	short Exec_No_Memj	; M00: exactly the wrong number...
 33078 0000600E 7503                    	jne	short OkRead2
 33079 00006010 E979FF                  	jmp	Exec_Chk_Com_Mem
 33080                                  OkRead2:
 33081                                  	; MSDOS 6.0
 33082 00006013 368A1E[8400]            	mov	bl,[ss:ALLOCMSAVE]	; M063
 33083 00006018 36881E[0203]            	mov	[ss:AllocMethod],bl	; M063: restore alloc method
 33084                                  
 33085                                  	; MSDOS 3.3 (& MSDOS 6.0)
 33086                                  	;test	byte [bp-5],2
 33087 0000601D F646FB02                	test	Exec_Func,exec_func_overlay
 33088 00006021 7532                    	jnz	short Exec_Set_PDB	; no starto, chumo!
 33089                                  
 33090                                  	;mov	ax,[bp-20]
 33091 00006023 8B46EC                  	mov	AX,Exec_DMA
 33092 00006026 83E810                  	sub	AX,10h
 33093 00006029 36A3[C50F]              	mov	[SS:exec_init_CS],AX
 33094 0000602D 36C706[C30F]0001        	mov	word [SS:exec_init_IP],100h ; initial IP is 100h
 33095                                  
 33096                                  	; SI is AT MOST FF00h. Add FE to account for PSP - word
 33097                                  	; of 0 on stack.
 33098                                  
 33099 00006034 81C6FE00                	add	SI,0FEh 		; make room for stack
 33100                                  
 33101                                  	; MSDOS 6.0
 33102 00006038 83FEFE                  	cmp	si,0FFFEh		; M047: Q: was there >= 64K available
 33103 0000603B 7404                    	je	short Exec_St_Ok	; M047: Y: stack is fine
 33104 0000603D 81C60001                	add	si,100h			; M047: N: add the xtra 100h for stack
 33105                                  
 33106                                  Exec_St_Ok:
 33107                                  	; MSDOS 3.3 (& MSDOS 6.0)
 33108 00006041 368936[BF0F]            	mov	[SS:exec_init_SP],SI 	; max value for read is also SP!;smr;SS Override
 33109 00006046 36A3[C10F]              	mov	[SS:exec_init_SS],AX 					;smr;SS Override
 33110 0000604A 8ED8                    	mov	DS,AX
 33111 0000604C C7040000                	mov	WORD [SI],0		; 0 for return
 33112                                  
 33113                                  	; MSDOS 6.0
 33114                                  
 33115                                  	; M068
 33116                                  	;
 33117                                  	; We now determine if this is a Copy Protected App. If so the 
 33118                                  	; A20OFF_COUNT is set to 6. Note that ChkCopyProt will point to a 
 33119                                  	; a ret if DOS is loaded low. Also DS contains the load segment.
 33120                                  
 33121 00006050 36FF16[6100]            	call	word [ss:ChkCopyProt]	
 33122                                  
 33123                                  Exec_Set_PDB:
 33124                                  	; MSDOS 3.3 (& MSDOS 6.0)
 33125                                  	;mov	bx,[bp-8]
 33126 00006055 8B5EF8                  	mov	BX,Exec_FH		; we are finished with the file.
 33127 00006058 E8A901                  	call	Exec_Dealloc
 33128 0000605B 55                      	push	BP
 33129                                  	;invoke	$Close			; release the jfn
 33130 0000605C E8AB07                  	call	_$CLOSE
 33131 0000605F 5D                      	pop	BP
 33132 00006060 E89301                  	call	Exec_Alloc
 33133                                  	;test	byte [bp-5],2
 33134 00006063 F646FB02                	test	Exec_Func,exec_func_overlay
 33135 00006067 743A                    	jz	short Exec_Build_Header
 33136                                  
 33137                                  	; MSDOS 6.0
 33138 00006069 E8C201                  	call	Scan_Execname
 33139 0000606C E8D601                  	call	Scan_Special_Entries
 33140                                  ;SR;
 33141                                  ;The current lie strategy uses the PSP to store the lie version. However,
 33142                                  ;device drivers are loaded as overlays and have no PSP. To handle them, we
 33143                                  ;use the Sysinit flag provided by the BIOS as part of a structure pointed at
 33144                                  ;by BiosDataPtr. If this flag is set, the overlay call has been issued from
 33145                                  ;Sysinit and therefore must be a device driver load. We then get the lie 
 33146                                  ;version for this driver and put it into the Sysinit PSP. When the driver
 33147                                  ;issues the version check, it gets the lie version until the next overlay
 33148                                  ;call is issued.
 33149                                  
 33150 0000606F 36803E[3E10]00          	cmp	byte [ss:DriverLoad],0	;was Sysinit processing done?
 33151 00006075 7426                    	je	short norm_ovl		;yes, no special handling
 33152 00006077 56                      	push	si
 33153 00006078 06                      	push	es
 33154 00006079 36C436[3F10]            	les	si,[ss:BiosDataPtr]	;get ptr to BIOS data block
 33155                                  	 
 33156                                  	; (es:si points to 'SysinitPresent' address/flag in retrodos4.s) 
 33157 0000607E 26803C00                	cmp	byte [es:si],0		;in Sysinit?
 33158 00006082 7411                    	je	short sysinit_done	;no, Sysinit is finished
 33159                                  	
 33160 00006084 368E06[3003]            	mov	es,[ss:CurrentPDB]	;es = current PSP (Sysinit PSP)
 33161 00006089 36FF36[BC0E]            	push	word [ss:SPECIAL_VERSION]
 33162 0000608E 268F064000              	pop	word [es:PDB.Version]	;store lie version in Sysinit PSP
 33163                                  		;;; PDB.VERSION
 33164 00006093 EB06                    	jmp	short setver_done
 33165                                  sysinit_done:
 33166 00006095 36C606[3E10]00          	mov	byte [ss:DriverLoad],0	;Sysinit done,special handling off
 33167                                  setver_done:
 33168 0000609B 07                      	pop	es
 33169 0000609C 5E                      	pop	si
 33170                                  norm_ovl:
 33171                                  	;leave
 33172 0000609D 89EC                    	mov	sp,bp		
 33173 0000609F 5D                      	pop	bp
 33174                                  
 33175                                  	;transfer SYS_RET_OK		; overlay load -> done
 33176 000060A0 E9A6A5                  	jmp	SYS_RET_OK
 33177                                  
 33178                                  Exec_Build_Header:
 33179                                  	;mov	dx,[bp-18]
 33180 000060A3 8B56EE                  	mov	DX,Exec_Load_Block
 33181                                  					; assign the space to the process
 33182                                  	;mov	si,1
 33183 000060A6 BE0100                  	mov	SI,ARENA.OWNER		; pointer to owner field
 33184                                  	;mov	ax,[bp-14]
 33185 000060A9 8B46F2                  	mov	AX,Exec_Environ 	; get environ pointer
 33186 000060AC 09C0                    	or	AX,AX
 33187 000060AE 7405                    	jz	short No_Owner		; no environment
 33188                                  
 33189 000060B0 48                      	dec	AX			; point to header
 33190 000060B1 8ED8                    	mov	DS,AX
 33191 000060B3 8914                    	mov	[SI],DX 		; assign ownership
 33192                                  No_Owner:
 33193                                  	;mov	ax,[bp-18]
 33194                                  	;mov	AX,Exec_Load_Block	; get load block pointer
 33195                                  	; 07/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 33196                                  	; 17/12/2022
 33197 000060B5 89D0                    	mov	ax,dx ; 06/06/2019
 33198                                  	;mov	ax,Exec_Load_Block	; get load block pointer
 33199                                  	
 33200 000060B7 48                      	dec	AX
 33201 000060B8 8ED8                    	mov	DS,AX			; point to header
 33202 000060BA 8914                    	mov	[SI],DX 		; assign ownership
 33203                                  
 33204                                  	; MSDOS 6.0
 33205 000060BC 1E                      	push	DS			;AN000;MS. make ES=DS
 33206 000060BD 07                      	pop	ES			;AN000;MS.
 33207                                  	;mov	di,8
 33208 000060BE BF0800                  	mov	DI,ARENA.NAME		;AN000;MS. ES:DI points to destination
 33209 000060C1 E86A01                  	call	Scan_Execname		;AN007;MS. parse execname
 33210                                  					;	   ds:si->name, cx=name length
 33211 000060C4 51                      	push	CX			;AN007;;MS. save for fake version
 33212 000060C5 56                      	push	SI			;AN007;;MS. save for fake version
 33213                                  
 33214                                  MoveName:				;AN000;
 33215 000060C6 AC                      	lodsb				;AN000;;MS. get char
 33216 000060C7 3C2E                    	cmp	AL,'.'			;AN000;;MS. is '.' ,may be name.exe
 33217 000060C9 7408                    	jz	short Mem_Done		;AN000;;MS. no, move to header
 33218                                  					;AN000;
 33219 000060CB AA                      	stosb				;AN000;;MS. move char
 33220                                  					; MSKK bug fix - limit length copied
 33221 000060CC 83FF10                  	cmp	di,16 ; ARENAHEADERSIZE	; end of memory arena block?
 33222 000060CF 7302                    	jae	short Mem_Done		; jump if so
 33223                                  	;
 33224 000060D1 E2F3                    	loop	MoveName		;AN000;;MS. continue
 33225                                  Mem_Done:				;AN000;
 33226 000060D3 30C0                    	xor	AL,AL			;AN000;;MS. make ASCIIZ
 33227                                  	;cmp	di,16
 33228 000060D5 83FF10                  	cmp	DI,ARENAHEADERSIZE ; 16 ;AN000;MS. if not all filled
 33229 000060D8 7301                    	jae	short Fill8		;AN000;MS.
 33230                                  	
 33231 000060DA AA                      	stosb				;AN000;MS.
 33232                                  	
 33233                                  Fill8:					;AN000;
 33234 000060DB 5E                      	pop	SI			;AN007;MS. ds:si -> file name
 33235 000060DC 59                      	pop	CX			;AN007;MS.
 33236                                  	
 33237 000060DD E86501                  	call	Scan_Special_Entries	;AN007;MS.
 33238                                  
 33239                                  	; MSDOS 3.3 (& MSDOS 6.0)
 33240 000060E0 52                      	push	DX
 33241                                  	;mov	si,[bp-16]
 33242 000060E1 8B76F0                  	mov	SI,Exec_Size
 33243 000060E4 01D6                    	add	SI,DX
 33244                                  	;Invoke	$Dup_PDB		; ES is now PDB
 33245 000060E6 E8F6AF                  	call	_$DUP_PDB
 33246 000060E9 5A                      	pop	DX
 33247                                  
 33248                                  	;push	word [bp-14]
 33249 000060EA FF76F2                  	push	Exec_Environ
 33250                                  	;pop	WORD [ES:2Ch]
 33251 000060ED 268F062C00              	pop	word [ES:PDB.ENVIRON]
 33252                                  
 33253                                  	; MSDOS 6.0			; *** Added for DOS 5.00
 33254                                  					; version number in PSP
 33255 000060F2 36FF36[BC0E]             	push	word [ss:SPECIAL_VERSION] ; Set the DOS version number to
 33256 000060F7 268F064000              	pop	word [ES:PDB.Version]	; to be used for this application
 33257                                  		; PDB.VERSION
 33258                                  
 33259                                  	; MSDOS 3.3 (& MSDOS 6.0)	; set up proper command line stuff
 33260                                  	;lds	si,[bp-4]
 33261 000060FC C576FC                  	lds	SI,Exec_Blk		; get the block
 33262 000060FF 1E                      	push	DS			; save its location
 33263 00006100 56                      	push	SI
 33264                                  	;lds	si,[si+6]
 33265 00006101 C57406                  	lds	SI,[SI+EXEC0.5C_FCB]	; get the 5c fcb
 33266                                  
 33267                                  	; DS points to user space 5C FCB
 33268                                  
 33269 00006104 B90C00                  	mov	CX,12			; copy drive, name and ext
 33270 00006107 51                      	push	CX
 33271 00006108 BF5C00                  	mov	DI,5Ch
 33272 0000610B 8A1C                    	mov	BL,[SI]
 33273 0000610D F3A4                    	rep	movsb
 33274                                  
 33275                                  	; DI = 5Ch + 12 = 5Ch + 0Ch = 68h
 33276                                  
 33277 0000610F 31C0                    	xor	AX,AX			; zero extent, etc for CPM
 33278 00006111 AB                      	stosw
 33279 00006112 AB                      	stosw
 33280                                  
 33281                                  	; DI = 5Ch + 12 + 4 = 5Ch + 10h = 6Ch
 33282                                  
 33283 00006113 59                      	pop	CX
 33284 00006114 5E                      	pop	SI			; get block
 33285 00006115 1F                      	pop	DS
 33286 00006116 1E                      	push	DS			; save (again)
 33287 00006117 56                      	push	SI
 33288                                  	;lds	si,[si+0Ah]
 33289 00006118 C5740A                  	lds	SI,[SI+EXEC0.6C_FCB]	; get 6C FCB
 33290                                  
 33291                                  	; DS points to user space 6C FCB
 33292                                  
 33293 0000611B 8A3C                    	mov	BH,[SI] 		; do same as above
 33294 0000611D F3A4                    	rep	movsb
 33295 0000611F AB                      	stosw
 33296 00006120 AB                      	stosw
 33297 00006121 5E                      	pop	SI			; get block (last time)
 33298 00006122 1F                      	pop	DS
 33299                                  	;ld	si,[si+2]
 33300 00006123 C57402                  	lds	SI,[SI+EXEC0.COM_LINE]	; command line
 33301                                  
 33302                                  	; DS points to user space 80 command line
 33303                                  
 33304 00006126 80C980                  	or	CL,80h
 33305 00006129 89CF                    	mov	DI,CX
 33306 0000612B F3A4                    	rep	movsb			; Wham!
 33307                                  
 33308                                  	; Process BX into default AX (validity of drive specs on args).
 33309                                  	; We no longer care about DS:SI.
 33310                                  
 33311 0000612D FEC9                    	dec	CL			; get 0FFh in CL
 33312 0000612F 88F8                    	mov	AL,BH
 33313 00006131 30FF                    	xor	BH,BH
 33314                                  	;invoke	GetVisDrv
 33315 00006133 E8410A                  	call	GetVisDrv
 33316 00006136 7302                    	jnc	short Exec_BL
 33317                                  
 33318 00006138 88CF                    	mov	BH,CL
 33319                                  
 33320                                  Exec_BL:
 33321 0000613A 88D8                    	mov	AL,BL
 33322 0000613C 30DB                    	xor	BL,BL
 33323                                  	;invoke	GetVisDrv
 33324 0000613E E8360A                  	call	GetVisDrv
 33325 00006141 7302                    	jnc	short Exec_Set_Return
 33326                                  
 33327 00006143 88CB                    	mov	BL,CL
 33328                                  
 33329                                  Exec_Set_Return:
 33330                                  	;invoke	Get_User_Stack			; get his return address
 33331 00006145 E847A3                  	call	Get_User_Stack
 33332                                  
 33333                                  	;push	word [si+14h]
 33334 00006148 FF7414                  	push	word [SI+user_env.user_CS]	; suck out the CS and IP
 33335                                  	;push	word [si+12h]
 33336 0000614B FF7412                  	push	word [SI+user_env.user_IP]
 33337                                  	;push	word [si+14h]
 33338 0000614E FF7414                  	push	word [SI+user_env.user_CS]	; suck out the CS and IP
 33339                                  	;push	word [si+12h]
 33340 00006151 FF7412                  	push	word [SI+user_env.user_IP]
 33341                                  	;pop	word [ES:0Ah]
 33342 00006154 268F060A00              	pop	WORD [ES:PDB.EXIT]
 33343                                  	;pop	word [ES:0Ch]
 33344 00006159 268F060C00              	pop	WORD [ES:PDB.EXIT+2]
 33345                                  
 33346 0000615E 31C0                    	xor	AX,AX
 33347 00006160 8ED8                    	mov	DS,AX
 33348                                  					; save them where we can get them
 33349                                  					; later when the child exits.
 33350                                  	;pop	word [88h]
 33351 00006162 8F068800                	pop	word [addr_int_terminate] ; 22h*4
 33352                                  	;pop	word [90h]
 33353 00006166 8F068A00                	pop	word [addr_int_terminate+2] ; (22h*4)+2
 33354                                  
 33355 0000616A 36C706[2C03]8000        	mov	WORD [SS:DMAADD],80h	; SS Override
 33356 00006171 368E1E[3003]            	mov	DS,[SS:CurrentPDB]	; SS Override
 33357 00006176 368C1E[2E03]            	mov	[SS:DMAADD+2],DS	; SS Override
 33358                                  
 33359                                  	;test	byte [bp-5],1
 33360 0000617B F646FB01                	test	Exec_Func,exec_func_no_execute
 33361 0000617F 7427                    	jz	short exec_go
 33362                                  
 33363 00006181 36C536[BF0F]            	lds	SI,[SS:exec_init_SP]	; get stack SS Override
 33364                                  	;les	di,[bp-4]
 33365 00006186 C47EFC                  	les	DI,Exec_Blk		; and block for return
 33366                                  	;mov	[es:di+10h],ds
 33367 00006189 268C5D10                	mov	[ES:DI+EXEC1.SS],DS	; return SS
 33368                                  
 33369 0000618D 4E                      	dec	SI			; 'push' default AX
 33370 0000618E 4E                      	dec	SI
 33371 0000618F 891C                    	mov	[SI],BX 		; save default AX reg
 33372                                  	;mov	[es:di+0Eh], si
 33373 00006191 2689750E                	mov	[ES:DI+EXEC1.SP],SI	; return 'SP'
 33374                                  
 33375 00006195 36C506[C30F]            	lds	AX,[SS:exec_init_IP]	; SS Override
 33376                                  	;mov	[es:di+14h],ds
 33377 0000619A 268C5D14                	mov	[ES:DI+EXEC1.CS],DS	; initial entry stuff
 33378                                  	;mov	[es:di+12h],ax
 33379 0000619E 26894512                	mov	[ES:DI+EXEC1.IP],AX
 33380                                  	
 33381                                  	;leave
 33382 000061A2 89EC                    	mov	sp,bp
 33383 000061A4 5D                      	pop	bp	
 33384                                  
 33385                                  	;transfer SYS_RET_OK
 33386 000061A5 E9A1A4                  	jmp	SYS_RET_OK
 33387                                  
 33388                                  exec_go:
 33389 000061A8 36C536[C30F]            	lds	SI,[SS:exec_init_IP]	; get entry point SS Override
 33390 000061AD 36C43E[BF0F]            	les	DI,[SS:exec_init_SP]	; new stack SS Override
 33391 000061B2 8CC0                    	mov	AX,ES
 33392                                  
 33393                                  	; MSDOS 6.0
 33394 000061B4 36803E[F711]00          	cmp	byte [SS:DosHasHMA],0	; Q: is dos in HMA (M021)
 33395 000061BA 741A                    	je	short Xfer_To_User	; N: transfer control to user
 33396                                  
 33397 000061BC 1E                      	push	ds			; Y: control must go to low mem stub
 33398                                  		
 33399 000061BD 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]		;    where we disable a20 and Xfer 
 33400                                  					;    control to user 
 33401 000061C2 800E[8600]04            	or	byte [DOS_FLAG],EXECA20OFF ; M068:
 33402                                  					; M004: Set bit to signal int 21
 33403                                  					; ah = 25 & ah= 49. See dossym.inc 
 33404                                  					; under TAG M003 & M009 for 
 33405                                  					; explanation
 33406 000061C7 8916[6300]              	mov	[A20OFF_PSP],dx		; M068: set the PSP for which A20 is
 33407                                  					; M068: going to be turned OFF.
 33408                                  	
 33409 000061CB 8CD8                    	mov	ax,ds			; ax = segment of low mem stub
 33410 000061CD 1F                      	pop	ds
 33411                                  	
 33412 000061CE 50                      	push	ax			; ret far into the low mem stub
 33413 000061CF B8[FB10]                	mov	ax,disa20_xfer
 33414 000061D2 50                      	push	ax
 33415 000061D3 8CC0                    	mov	AX,ES			; restore ax
 33416 000061D5 CB                      	retf
 33417                                  
 33418                                  Xfer_To_User:
 33419                                  	; DS:SI points to entry point
 33420                                  	; AX:DI points to initial stack
 33421                                  	; DX has PDB pointer
 33422                                  	; BX has initial AX value
 33423                                  
 33424 000061D6 FA                      	cli
 33425                                  	; 15/08/2018
 33426 000061D7 36C606[2103]00          	mov	BYTE [SS:INDOS],0	; SS Override
 33427                                  
 33428 000061DD 8ED0                    	mov	SS,AX			; set up user's stack
 33429 000061DF 89FC                    	mov	SP,DI			; and SP
 33430 000061E1 FB                      	sti
 33431                                  
 33432 000061E2 1E                      	push	DS			; fake long call to entry
 33433 000061E3 56                      	push	SI
 33434 000061E4 8EC2                    	mov	ES,DX			; set up proper seg registers
 33435 000061E6 8EDA                    	mov	DS,DX
 33436 000061E8 89D8                    	mov	AX,BX			; set up proper AX
 33437                                  
 33438 000061EA CB                      	retf
 33439                                  
 33440                                  ; 04/08/2018 - Retro DOS v3.0
 33441                                  
 33442                                  ;----------------------------------------------------------------------------
 33443                                  ;
 33444                                  ;----------------------------------------------------------------------------
 33445                                  
 33446                                  ExecRead:
 33447 000061EB E81600                  	CALL	Exec_Dealloc
 33448                                  	;mov	bx,[bp-8]
 33449 000061EE 8B5EF8                  	MOV	bx,Exec_FH
 33450                                  
 33451 000061F1 55                      	PUSH	BP
 33452 000061F2 E82607                  	call	_$READ
 33453 000061F5 5D                      	POP	BP
 33454                                  
 33455                                  	;CALL	Exec_Alloc
 33456                                  	;retn
 33457                                  	; 18/12/2022
 33458                                  	;jmp	short Exec_Alloc
 33459                                  
 33460                                  ; 18/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS) 
 33461                                  
 33462                                  ;----------------------------------------------------------------------------
 33463                                  ;
 33464                                  ;----------------------------------------------------------------------------
 33465                                  
 33466                                  Exec_Alloc:
 33467 000061F6 53                      	push	BX
 33468                                  	;mov	BX,[CS:CurrentPDB]  ; MSDOS 3.3
 33469                                  	; 20/05/2019 - Retro DOS v4.0
 33470                                  	; MSDOS 6.0
 33471 000061F7 368B1E[3003]            	mov	bx,[SS:CurrentPDB]  ; SS Override
 33472 000061FC E81000                  	call	ChangeOwners
 33473 000061FF E871B1                  	call	LCritMEM
 33474 00006202 5B                      	pop	BX
 33475 00006203 C3                      	retn
 33476                                  
 33477                                  ;----------------------------------------------------------------------------
 33478                                  ;
 33479                                  ;----------------------------------------------------------------------------
 33480                                  
 33481                                  Exec_Dealloc:
 33482 00006204 53                      	push	BX
 33483                                  	;mov	bx,0
 33484 00006205 29DB                    	sub	BX,BX		; (bx) = ARENA_OWNER_SYSTEM
 33485 00006207 E84EB1                  	call	ECritMEM
 33486 0000620A E80200                  	call	ChangeOwners
 33487 0000620D 5B                      	pop	BX
 33488 0000620E C3                      	retn
 33489                                  
 33490                                  ; 18/12/2022
 33491                                  %if 0
 33492                                  ;----------------------------------------------------------------------------
 33493                                  ;
 33494                                  ;----------------------------------------------------------------------------
 33495                                  
 33496                                  Exec_Alloc:
 33497                                  	push	BX
 33498                                  	;mov	BX,[CS:CurrentPDB]  ; MSDOS 3.3
 33499                                  	; 20/05/2019 - Retro DOS v4.0
 33500                                  	; MSDOS 6.0
 33501                                  	mov	bx,[SS:CurrentPDB]  ; SS Override
 33502                                  	call	ChangeOwners
 33503                                  	call	LCritMEM
 33504                                  	pop	BX
 33505                                  	retn
 33506                                  
 33507                                  %endif
 33508                                  
 33509                                  ;----------------------------------------------------------------------------
 33510                                  ;
 33511                                  ;----------------------------------------------------------------------------
 33512                                  
 33513                                  ChangeOwners:
 33514 0000620F 9C                      	pushf
 33515 00006210 50                      	push	AX
 33516                                  	;mov	ax,[bp-14]
 33517 00006211 8B46F2                  	mov	AX,Exec_Environ
 33518 00006214 E80900                  	call	ChangeOwner
 33519                                  	;mov	ax,[bp-18]
 33520 00006217 8B46EE                  	mov	AX,Exec_Load_Block
 33521 0000621A E80300                  	call	ChangeOwner
 33522 0000621D 58                      	pop	AX
 33523 0000621E 9D                      	popf
 33524                                  chgown_retn:
 33525 0000621F C3                      	retn
 33526                                  
 33527                                  ;----------------------------------------------------------------------------
 33528                                  ;
 33529                                  ;----------------------------------------------------------------------------
 33530                                  
 33531                                  ChangeOwner:
 33532 00006220 09C0                    	or	AX,AX			; is area allocated?
 33533 00006222 74FB                    	jz	short chgown_retn	; no, do nothing
 33534 00006224 48                      	dec	AX
 33535 00006225 1E                      	push	DS
 33536 00006226 8ED8                    	mov	DS,AX
 33537 00006228 891E0100                	mov	[ARENA.OWNER],BX
 33538 0000622C 1F                      	pop	DS
 33539 0000622D C3                      	retn
 33540                                  
 33541                                  ;----------------------------------------------------------------------------
 33542                                  ;
 33543                                  ;----------------------------------------------------------------------------
 33544                                  
 33545                                  ; 20/05/2019 - Retro DOS v4.0
 33546                                  
 33547                                  	; MSDOS 6.0
 33548                                  Scan_Execname:
 33549 0000622E C576E6                  	lds	SI,ExecName		; DS:SI points to name
 33550                                  Scan_Execname1:				; M028
 33551                                  Save_Begin:				;
 33552 00006231 89F1                    	mov	CX,SI			; CX= starting addr
 33553                                  Scan0:					;
 33554 00006233 AC                      	lodsb				; get char
 33555                                  
 33556 00006234 3C3A                    	cmp	AL,':'			; is ':' , may be A:name
 33557 00006236 74F9                    	jz	short Save_Begin	; yes, save si
 33558 00006238 3C5C                    	cmp	AL,'\'                  ; is '\', may be A:\name
 33559 0000623A 74F5                    	jz	short Save_Begin	; yes, save si
 33560 0000623C 3C00                    	cmp	AL,0			; is end of name
 33561 0000623E 75F3                    	jnz	short Scan0		; no, continue scanning
 33562 00006240 29CE                    	sub	SI,CX			; get name's length
 33563 00006242 87F1                    	xchg	SI,CX			; cx= length, si= starting addr
 33564                                  
 33565 00006244 C3                      	retn
 33566                                  
 33567                                  ;----------------------------------------------------------------------------
 33568                                  ;
 33569                                  ;----------------------------------------------------------------------------
 33570                                  
 33571                                  ; 20/05/2019 - Retro DOS v4.0
 33572                                  
 33573                                  ; 01/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 33574                                  ; DOSCODE:A0EDh (MSDOS 5.0, MSDOS.SYS)
 33575                                  
 33576                                  	; MSDOS 6.0
 33577                                  
 33578                                  Scan_Special_Entries:
 33579                                  
 33580 00006245 49                      	dec	CX			; cx= name length
 33581                                  ;M060	mov	DI,[Special_Entries]	; es:di -> addr of special entries
 33582                                  					;reset to current version
 33583                                  	;mov	word [ss:SPECIAL_VERSION],1406h 
 33584                                  				; (MSDOS 6.21, MSDOS.SYS, DOSCODE:A14Eh)
 33585                                  	;mov	word [ss:SPECIAL_VERSION],5
 33586                                  				; (MSDOS 5.0, MSDOS.SYS, DOSCODE:A0EEh)
 33587                                  
 33588                                  				; 5 for Retro DOS 4.0 (01/12/2022, MSDOS 5.0)
 33589 00006246 36C706[BC0E]0616        	mov	word [ss:SPECIAL_VERSION],(MINOR_VERSION<<8)+MAJOR_VERSION
 33590                                  				; 1506h for Retro DOS v4.0 (MSDOS 6.21)
 33591                                  ;***	call	Reset_Version
 33592                                  
 33593                                  ;M060	push	SS
 33594                                  ;M060	pop	ES
 33595                                  
 33596 0000624D 36C43E[5D00]            	les	DI,[SS:UU_IFS_DOS_CALL]	;M060; ES:DI --> Table in SETVER.SYS
 33597 00006252 8CC0                    	mov	AX,ES			;M060; First do a NULL ptr check to
 33598 00006254 09F8                    	or	AX,DI			;M060; be sure the table exists
 33599 00006256 7427                    	jz	short End_List		;M060; If ZR then no table
 33600                                  
 33601                                  GetEntries:
 33602 00006258 268A05                  	mov	AL,[ES:DI]		; end of list
 33603 0000625B 08C0                    	or	AL,AL
 33604 0000625D 7420                    	jz	short End_List		; yes
 33605                                  
 33606 0000625F 36893E[0E06]            	mov	[ss:TEMP_VAR2],DI	; save di
 33607 00006264 38C8                    	cmp	AL,CL			; same length ?
 33608 00006266 751B                    	jnz	short SkipOne 		; no
 33609                                  
 33610 00006268 47                      	inc	DI			; es:di -> special name
 33611 00006269 51                      	push	CX			; save length and name addr
 33612 0000626A 56                      	push	SI
 33613                                  
 33614                                  ; M050 - BEGIN
 33615                                  
 33616 0000626B 50                      	push	ax			; save len
 33617                                  sse_next_char:
 33618 0000626C AC                      	lodsb
 33619 0000626D E8B6EE                  	call	UCase
 33620 00006270 AE                      	scasb
 33621 00006271 750D                    	jne	short Not_Matched
 33622 00006273 E2F7                    	loop	sse_next_char
 33623                                  	
 33624                                  ;	repz	cmpsb			; same name ?
 33625                                  ;	jnz	short Not_Matched	; no
 33626                                  
 33627 00006275 58                      	pop	ax			; take len off the stack
 33628                                  
 33629                                  ; M050 - END
 33630                                  
 33631 00006276 268B05                  	mov	AX,[ES:DI]		; get special version
 33632 00006279 36A3[BC0E]              	mov	[ss:SPECIAL_VERSION],AX	; save it
 33633                                  
 33634                                  ;***	mov	AL,[ES:DI+2]		; get fake count
 33635                                  ;***	mov	[ss:FAKE_COUNT],AL 	; save it
 33636                                  
 33637 0000627D 5E                      	pop	SI
 33638 0000627E 59                      	pop	CX
 33639                                  	; 18/12/2022
 33640                                  	;jmp	SHORT End_List
 33641                                  
 33642                                  	; 18/12/2022
 33643                                  End_List:
 33644 0000627F C3                      	retn
 33645                                  
 33646                                  Not_Matched:
 33647 00006280 58                      	pop	ax			; get len from stack ; M050
 33648 00006281 5E                      	pop	SI			; restore si,cx
 33649 00006282 59                      	pop	CX
 33650                                  
 33651                                  SkipOne:
 33652 00006283 368B3E[0E06]            	mov	DI,[ss:TEMP_VAR2]	; restore old di use SS Override
 33653 00006288 30E4                    	xor	AH,AH			; position to next entry
 33654 0000628A 01C7                    	add	DI,AX
 33655                                  
 33656 0000628C 83C703                  	add	DI,3			; DI -> next entry length
 33657                                  ;***	add	DI,4			; DI -> next entry length
 33658                                  
 33659 0000628F EBC7                    	jmp	short GetEntries
 33660                                  
 33661                                  	; 18/12/2022
 33662                                  ;End_List:
 33663                                  	;retn
 33664                                  
 33665                                  ; 04/08/2018 - Retro DOS v3.0
 33666                                  ; IBMDOS.COm (MSDOS 3.3, 1987) - Offset 633Dh
 33667                                  
 33668                                  ;----------------------------------------------------------------------------
 33669                                  ;SUBTTL Terminate and stay resident handler
 33670                                  ;
 33671                                  ; Input:    DX is  an  offset  from  CurrentPDB  at which to
 33672                                  ;	    truncate the current block.
 33673                                  ;
 33674                                  ; output:   The current block is truncated (expanded) to be [DX+15]/16
 33675                                  ;	    paragraphs long.  An exit is simulated via resetting CurrentPDB
 33676                                  ;	    and restoring the vectors.
 33677                                  ;
 33678                                  ;----------------------------------------------------------------------------
 33679                                  
 33680                                  	; 20/05/2019 - Retro DOS v4.0
 33681                                  	; DOSCODE:A19Bh (MSDOS 6.21, MSDOS.SYS)
 33682                                  
 33683                                  	; 01/12/2022 - Retro DOS v4.0 (Modified MSDOS5.0 MSDOS.SYS)
 33684                                  	; DOSCODE:A13Bh (MSDOS 5.0, MSDOS.SYS)
 33685                                  
 33686                                  _$KEEP_PROCESS:
 33687 00006291 50                      	push	AX			; keep exit code around
 33688                                  	;mov	byte [SS:EXIT_TYPE],3
 33689 00006292 36C606[7C05]03          	mov	BYTE [SS:EXIT_TYPE],EXIT_KEEP_PROCESS
 33690 00006298 368E06[3003]            	mov	ES,[SS:CurrentPDB]
 33691 0000629D 83FA06                  	cmp	DX,6h			; keep enough space around for system
 33692 000062A0 7303                    	jae	short Keep_Shrink	; info
 33693                                  
 33694 000062A2 BA0600                  	mov	DX,6h
 33695                                  
 33696                                  Keep_Shrink:
 33697 000062A5 89D3                    	mov	BX,DX
 33698 000062A7 53                      	push	BX
 33699 000062A8 06                      	push	ES
 33700 000062A9 E82E02                  	call	_$SETBLOCK		; ignore return codes.
 33701 000062AC 1F                      	pop	DS
 33702 000062AD 5B                      	pop	BX
 33703 000062AE 7207                    	jc	short Keep_Done		; failed on modification
 33704                                  
 33705 000062B0 8CD8                    	mov	AX,DS
 33706 000062B2 01D8                    	add	AX,BX
 33707                                  	;mov	[2],ax
 33708 000062B4 A30200                  	mov	[PDB.BLOCK_LEN],AX	;PBUGBUG
 33709                                  
 33710                                  Keep_Done:
 33711 000062B7 58                      	pop	AX
 33712 000062B8 EB26                    	jmp	SHORT exit_inner	; and let abort take care of the rest
 33713                                  
 33714                                  ;----------------------------------------------------------------------------
 33715                                  ;
 33716                                  ;----------------------------------------------------------------------------
 33717                                  
 33718                                  STAY_RESIDENT:
 33719                                  	;mov	ax,3100h
 33720 000062BA B80031                  	mov	AX,(KEEP_PROCESS<<8)+0 ; Lower part is return code;PBUGBUG
 33721 000062BD 83C20F                  	add	DX,15
 33722 000062C0 D1DA                    	rcr	DX,1
 33723 000062C2 B103                    	mov	CL,3
 33724 000062C4 D3EA                    	shr	DX,CL
 33725                                  
 33726 000062C6 E943A0                  	jmp	COMMAND
 33727                                  
 33728                                  ;----------------------------------------------------------------------------
 33729                                  ;SUBTTL $EXIT - return to parent process
 33730                                  ;   Assembler usage:
 33731                                  ;	    MOV     AL, code
 33732                                  ;	    MOV     AH, Exit
 33733                                  ;	    INT     int_command
 33734                                  ;   Error return:
 33735                                  ;	    None.
 33736                                  ;
 33737                                  ;----------------------------------------------------------------------------
 33738                                  
 33739                                  	; 20/05/2019 - Retro DOS v4.0
 33740                                  	; DOSCODE:A1D3h (MSDOS 6.21, MSDOS.SYS)
 33741                                  
 33742                                  	; 01/12/2022 - Retro DOS v4.0 (Modified MSDOS5.0 MSDOS.SYS)
 33743                                  	; DOSCODE:A173h (MSDOS 5.0, MSDOS.SYS)
 33744                                  _$EXIT:
 33745                                  	; 04/08/2018 - Retro DOS v3.0
 33746                                  	; IBMDOSDOS.COM (MSDOS 3.3, 1987) - Offset 6375h
 33747 000062C9 30E4                    	xor	AH,AH
 33748 000062CB 368626[4D03]            	xchg	AH,[SS:DidCTRLC]
 33749 000062D0 08E4                    	or	AH,AH
 33750                                  	;mov	BYTE [SS:EXIT_TYPE],0
 33751 000062D2 36C606[7C05]00          	mov	BYTE [SS:EXIT_TYPE],EXIT_TERMINATE
 33752 000062D8 7406                    	jz	short exit_inner
 33753                                  	;mov	BYTE [SS:EXIT_TYPE],1
 33754 000062DA 36C606[7C05]01          	mov	BYTE [SS:EXIT_TYPE],EXIT_CTRL_C
 33755                                  
 33756                                  	;entry	Exit_inner
 33757                                  exit_inner:
 33758 000062E0 E8ACA1                  	call	Get_User_Stack		;PBUGBUG
 33759                                  
 33760 000062E3 36FF36[3003]            	push	word [ss:CurrentPDB]
 33761                                  	;pop	word [si+14h]
 33762 000062E8 8F4414                  	pop	word [SI+user_env.user_CS] ;PBUGBUG
 33763 000062EB EB08                    	jmp	short abort_inner
 33764                                  
 33765                                  ;BREAK <$ABORT -- Terminate a process>
 33766                                  ;----------------------------------------------------------------------------
 33767                                  ; Inputs:
 33768                                  ;	user_CS:00 must point to valid program header block
 33769                                  ; Function:
 33770                                  ;	Restore terminate and Cntrl-C addresses, flush buffers and transfer
 33771                                  ;	to the terminate address
 33772                                  ; Returns:
 33773                                  ;	TO THE TERMINATE ADDRESS
 33774                                  ;----------------------------------------------------------------------------
 33775                                  
 33776                                  _$ABORT:
 33777 000062ED 30C0                    	xor	AL,AL
 33778                                  	;mov	byte [SS:EXIT_TYPE],0
 33779                                  	;mov	byte [SS:EXIT_TYPE],AL ; = 0
 33780 000062EF 36C606[7C05]00          	mov	byte [SS:EXIT_TYPE],EXIT_ABORT
 33781                                  
 33782                                  	; abort_inner must have AL set as the exit code! The exit type
 33783                                  	; is retrieved from exit_type. Also, the PDB at user_CS needs
 33784                                  	; to be correct as the one that is terminating.
 33785                                  
 33786                                  abort_inner:
 33787 000062F5 368A26[7C05]            	mov	AH,[SS:EXIT_TYPE]
 33788 000062FA 36A3[3403]              	mov	[SS:exit_code],AX
 33789 000062FE E88EA1                  	call	Get_User_Stack
 33790                                  
 33791                                  	;mov	ds,[si+14h]
 33792 00006301 8E5C14                  	mov	DS,[SI+user_env.user_CS] ; set up old interrupts ;PBUGBUG
 33793 00006304 31C0                    	xor	AX,AX
 33794 00006306 8EC0                    	mov	ES,AX
 33795                                  	;mov	si,10
 33796 00006308 BE0A00                  	mov	SI,SAVEXIT
 33797                                  	;mov	di,88h
 33798 0000630B BF8800                  	mov	DI,addr_int_terminate
 33799 0000630E A5                      	movsw
 33800 0000630F A5                      	movsw
 33801 00006310 A5                      	movsw
 33802 00006311 A5                      	movsw
 33803 00006312 A5                      	movsw
 33804 00006313 A5                      	movsw
 33805 00006314 E92AF2                  	jmp	reset_environment
 33806                                  
 33807                                  ;----------------------------------------------------------------------------
 33808                                  ;
 33809                                  ; fixexepatch will point to this is DOS loads low. 
 33810                                  ;
 33811                                  ;----------------------------------------------------------------------------
 33812                                  ; MSDOS 6.0
 33813                                  
 33814                                  ; 29/04/2019 - Retro DOS v4.0
 33815                                  ; DOSCODE:A221h (MSDOS 6.21, MSDOS.SYS)
 33816                                  
 33817                                  ; 01/12/2022 - Retro DOS v4.0 (Modified MSDOS5.0 MSDOS.SYS)
 33818                                  ; DOSCODE:A1C1h (MSDOS 5.0, MSDOS.SYS)
 33819                                  
 33820                                  RetExePatch: ; proc near
 33821                                  	
 33822 00006317 C3                      	retn
 33823                                  
 33824                                  ;============================================================================
 33825                                  ; ALLOC.ASM, MSDOS 6.0, 1991
 33826                                  ;============================================================================
 33827                                  ; 04/08/2018 - Retro DOS v3.0
 33828                                  ; 14/05/2019 - Retro DOS v4.0
 33829                                  
 33830                                  ;	TITLE ALLOC.ASM - memory arena manager	NAME Alloc
 33831                                  
 33832                                  ;**
 33833                                  ;	Microsoft Confidential
 33834                                  ;	Copyright (C) Microsoft Corporation 1991
 33835                                  ;	All Rights Reserved.
 33836                                  ;
 33837                                  ;	Memory related system calls and low level routines for MSDOS 2.X.
 33838                                  ;	I/O specs are defined in DISPATCH.
 33839                                  ;
 33840                                  ;	$ALLOC
 33841                                  ;	$SETBLOCK
 33842                                  ;	$DEALLOC
 33843                                  ;	$AllocOper
 33844                                  ;	arena_free_process
 33845                                  ;	arena_next
 33846                                  ;	check_signature
 33847                                  ;	Coalesce
 33848                                  ;
 33849                                  ;	Modification history:
 33850                                  ;
 33851                                  ;	    Created: ARR 30 March 1983
 33852                                  ;
 33853                                  ;	    Revision: M000 - added support for allocing UMBs. 7/9/90
 33854                                  ;		      M003 - added support for link/unlink UMBs from
 33855                                  ;			     DOS arena chain. 7/18/90
 33856                                  ;		      M009 - Added error returns invalid function and 
 33857                                  ;			     arena trashed in set link state call.
 33858                                  ;		      M010 - Release UMB arenas allocated to current PDB
 33859                                  ;			     if UMB_HEAD is initialized.
 33860                                  ;
 33861                                  ;		      M016 - MACE utilities mkeyrate.com version 1.0 
 33862                                  ;			     support. Please see under M009 in 
 33863                                  ;			     ..\inc\dossym.inc. 8/31/90.
 33864                                  ;
 33865                                  ;		      M061 - In GetLastArena, if linking in UMBs check to make
 33866                                  ;			     sure that umb_head arena is valid and also make
 33867                                  ;			     sure that the previous arena is pointing to 
 33868                                  ;			     umb_head.
 33869                                  ;
 33870                                  ;		      M064 - allow HIGH_ONLY bit to be set by a call to 
 33871                                  ;			     set allloc strategy.
 33872                                  ;			     use STRAT_MASK to mask out bits 6 & 7 of 
 33873                                  ;			     bx in AllocSetStrat.
 33874                                  ;
 33875                                  ;		      M068 - use a count value (A20OFF_COUNT) rather than
 33876                                  ;			     a bit to indicate to dos dispatcher to turn
 33877                                  ;			     a20 off before iret. See M016.
 33878                                  ;
 33879                                  
 33880                                  ;	BREAK	<memory allocation utility routines>
 33881                                  
 33882                                  
 33883                                  ; 15/04/2018 - Retro DOS v2.0
 33884                                  ;----------------------------------------------------------------------------
 33885                                  ; xenix memory calls for MSDOS
 33886                                  ;
 33887                                  ; CAUTION: The following routines rely on the fact that arena_signature and
 33888                                  ; arena_owner_system are all equal to zero and are contained in DI.
 33889                                  ;
 33890                                  ;INCLUDE DOSSEG.ASM
 33891                                  
 33892                                  ;CODE	SEGMENT BYTE PUBLIC  'CODE'
 33893                                  ;       ASSUME  SS:DOSGROUP,CS:DOSGROUP
 33894                                  
 33895                                  ;.xlist
 33896                                  ;.xcref
 33897                                  ;INCLUDE DOSSYM.ASM
 33898                                  ;INCLUDE DEVSYM.ASM
 33899                                  ;.cref
 33900                                  ;.list
 33901                                  
 33902                                  ;TITLE ALLOC.ASM - memory arena manager
 33903                                  ;NAME Alloc
 33904                                  
 33905                                  ;SUBTTL memory allocation utility routines
 33906                                  ;PAGE
 33907                                  ;
 33908                                  ; arena data
 33909                                  ;
 33910                                  ;       i_need  arena_head,WORD         ; seg address of start of arena
 33911                                  ;       i_need  CurrentPDB,WORD         ; current process data block addr
 33912                                  ;       i_need  FirstArena,WORD         ; first free block found
 33913                                  ;       i_need  BestArena,WORD          ; best free block found
 33914                                  ;       i_need  LastArena,WORD          ; last free block found
 33915                                  ;       i_need  AllocMethod,BYTE        ; how to alloc first(best)last
 33916                                  
 33917                                  ;**	Arena_Free_Process
 33918                                  ;----------------------------------------------------------------------------
 33919                                  ;	Free all arena blocks allocated to a prOcess
 33920                                  ;
 33921                                  ;	ENTRY	(bx) = PID of process
 33922                                  ;	EXIT	none
 33923                                  ;	USES	????? BUGBUG
 33924                                  ;----------------------------------------------------------------------------
 33925                                  
 33926                                  	; 01/12/2022 - Retro DOS v4.0 (Modified MSDOS5.0 MSDOS.SYS)
 33927                                  	; DOSCODE:A1C2h (MSDOS 5.0, MSDOS.SYS)
 33928                                  
 33929                                  arena_free_process:
 33930                                  	; 14/05/2019 - Retro DOS v4.0
 33931                                  	; 04/08/2018 - Retro DOS v3.0
 33932 00006318 36A1[2400]                      MOV	AX,[SS:arena_head]
 33933                                  arena_free_process_start:
 33934 0000631C BF0000                  	MOV     DI,ARENA.SIGNATURE ; 0
 33935                                  	;MOV	AX,[SS:arena_head] ; 15/04/2018  
 33936 0000631F E83000                          CALL	check_signature         ; ES <- AX, check for valid block
 33937                                  
 33938                                  arena_free_process_loop:
 33939                                          ;retc
 33940 00006322 723D                            JC	SHORT AFP_RETN	; Retro DOS v2.0 - 05/03/2018
 33941 00006324 06                      	PUSH    ES
 33942 00006325 1F                              POP     DS
 33943                                  	;cmp	[1],bx 
 33944 00006326 391E0100                        CMP     [ARENA.OWNER],BX	; is block owned by pid?
 33945 0000632A 7504                            JNZ     SHORT arena_free_next	; no, skip to next
 33946                                  	;mov	[1],di
 33947 0000632C 893E0100                        MOV     [ARENA.OWNER],DI	; yes... free him
 33948                                  
 33949                                  arena_free_next:
 33950                                  	;cmp	byte [di],5Ah ;'Z'
 33951 00006330 803D5A                          CMP     BYTE [DI],arena_signature_end
 33952                                                                          ; end of road, Jack?
 33953                                          ;retz				; never come back no more
 33954                                  	;JZ	SHORT AFP_RETN  ; MSDOS 3.3 (& MSDOS 2.11)
 33955                                  	; 14/05/2019
 33956                                  	; MSDOS 6.0
 33957 00006333 7405                    	jz	short arena_chk_umbs
 33958                                          
 33959 00006335 E81300                  	CALL    arena_next              ; next item in ES/AX carry set if trash
 33960 00006338 EBE8                            JMP     SHORT arena_free_process_loop
 33961                                  
 33962                                  	; MSDOS 6.0
 33963                                  arena_chk_umbs:				; M010 - Start
 33964                                  	; 20/05/2019
 33965 0000633A 36A1[8C00]              	mov	ax,[ss:UMB_HEAD]	; ax = umb_head
 33966 0000633E 83F8FF                  	cmp	ax,0FFFFh		; Q: is umb_head initialized
 33967 00006341 741E                    	je	short ret_label		; N: we're done
 33968                                  	
 33969 00006343 8CDF                    	mov	di,ds			; di = last arena
 33970 00006345 39C7                    	cmp	di,ax			; Q: is last arena above umb_head
 33971 00006347 7318                    	jae	short ret_label		; Y: we've scanned umbs also. done.
 33972 00006349 EBD1                    	jmp	short arena_free_process_start
 33973                                  					; M010 - End
 33974                                  ;AFP_RETN:
 33975                                  ;	RETN
 33976                                  
 33977                                  ;	BREAK	<Arena Helper Routines>
 33978                                  
 33979                                  ;**	Arena_Next - Find Next item in Arena
 33980                                  ;----------------------------------------------------------------------------
 33981                                  ;	ENTRY	DS - pointer to block head
 33982                                  ;		(di) = 0
 33983                                  ;	EXIT	AX,ES - pointers to next head
 33984                                  ;		'C' set iff arena damaged
 33985                                  ;----------------------------------------------------------------------------
 33986                                  
 33987                                  arena_next:
 33988 0000634B 8CD8                            MOV     AX,DS                   ; AX <- current block
 33989 0000634D 03060300                        ADD     AX,[ARENA.SIZE]		; AX <- AX + current block length
 33990 00006351 40                              INC     AX                      ; remember that header!
 33991                                  
 33992                                  ;       fall into check_signature and return
 33993                                  ;
 33994                                  ;       CALL    check_signature         ; ES <- AX, carry set if error
 33995                                  ;       RETN
 33996                                  
 33997                                  ;**	Check_Signature - Check Memory Block Signature
 33998                                  ;----------------------------------------------------------------------------
 33999                                  ;	ENTRY	(AX) = address of block header
 34000                                  ;		(di) = 0
 34001                                  ;	EXIT	 ES = AX
 34002                                  ;		'C' clear if signature good
 34003                                  ;		'C' set if signature bad
 34004                                  ;	USES	ES, Flags
 34005                                  ;----------------------------------------------------------------------------
 34006                                  
 34007                                  check_signature:        
 34008                                  
 34009 00006352 8EC0                    	MOV     ES,AX                   ; ES <- AX
 34010                                  	;cmp	byte [es:di],4Dh ; 'M'
 34011 00006354 26803D4D                        CMP     BYTE [ES:DI],arena_signature_normal
 34012                                                                          ; IF next signature = not_end THEN
 34013 00006358 7407                            JZ      SHORT check_signature_ok ;   GOTO ok
 34014                                  	;cmp 	byte [es:di],5Ah ; 'Z'
 34015 0000635A 26803D5A                        CMP     BYTE [ES:DI],arena_signature_end
 34016                                                                          ; IF next signature = end then
 34017 0000635E 7401                            JZ      SHORT check_signature_ok ;   GOTO ok
 34018 00006360 F9                              STC                             ; set error
 34019                                  ret_label: ; MSDOS 6.0
 34020                                  AFP_RETN:
 34021                                   	; Retro DOS v2.0 - 05/03/2018
 34022                                  check_signature_ok:
 34023                                  COALESCE_RETN:
 34024 00006361 C3                      	RETN
 34025                                  
 34026                                  ;**	Coalesce - Combine free blocks ahead with current block
 34027                                  ;----------------------------------------------------------------------------
 34028                                  ;	Coalesce adds the block following the argument to the argument block,
 34029                                  ;	iff it's free.  Coalesce is usually used to join free blocks, but
 34030                                  ;	some callers (such as $setblock) use it to join a free block to it's
 34031                                  ;	preceeding allocated block.
 34032                                  ;
 34033                                  ;	ENTRY	(ds) = pointer to the head of a free block
 34034                                  ;		(di) = 0
 34035                                  ;	EXIT	'C' clear if OK
 34036                                  ;		  (ds) unchanged, this block updated
 34037                                  ;		  (ax) = address of next block, IFF not at end
 34038                                  ;		'C' set if arena trashed
 34039                                  ;	USES	(cx)
 34040                                  ;----------------------------------------------------------------------------
 34041                                          
 34042                                  Coalesce:
 34043                                  	;cmp	byte [di],5Ah ; 'Z'
 34044 00006362 803D5A                  	CMP     BYTE [DI],arena_signature_end
 34045                                                                          ; IF current signature = END THEN
 34046                                          ;retz				;   GOTO ok
 34047 00006365 74FA                            jz	short COALESCE_RETN
 34048 00006367 E8E1FF                  	CALL    arena_next              ; ES, AX <- next block, Carry set if error
 34049                                          ;retc				; IF no error THEN GOTO check
 34050 0000636A 72F5                    	jc	short COALESCE_RETN
 34051                                  
 34052                                  coalesce_check:
 34053                                  	;cmp	[es:1],di
 34054 0000636C 26393E0100                      CMP     [ES:ARENA.OWNER],DI
 34055                                          ;retnz				; IF next block isnt free THEN return
 34056 00006371 75EE                            JNZ	SHORT COALESCE_RETN
 34057                                  	;mov	cx,[ES:3]
 34058 00006373 268B0E0300              	MOV     CX,[ES:ARENA.SIZE]	; CX <- next block size
 34059 00006378 41                              INC     CX                      ; CX <- CX + 1 (for header size)
 34060                                          ;ADD	[3],CX
 34061 00006379 010E0300                	ADD     [ARENA.SIZE],CX		; current size <- current size + CX
 34062 0000637D 268A0D                          MOV     CL,[ES:DI]              ; move up signature
 34063 00006380 880D                            MOV     [DI],CL
 34064 00006382 EBDE                            JMP     SHORT Coalesce		; try again
 34065                                  
 34066                                  ; 04/08/2018 - Retro DOS v3.0
 34067                                  ; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 641Fh
 34068                                  
 34069                                  ;	BREAK  <$Alloc - allocate space in memory>
 34070                                  
 34071                                  ; MSDOS 6.0
 34072                                  ;----------------------------------------------------------------------------
 34073                                  ;**	$Alloc - Allocate Memory Space
 34074                                  ;
 34075                                  ;	$Alloc services the INT21 that allocates memory space to a program.
 34076                                  ;	Alloc returns a pointer to a free block of memory that
 34077                                  ;	has the requested size in paragraphs.
 34078                                  ;
 34079                                  ;	If the allocation strategy is HIGH_FIRST or HIGH_ONLY memory is 
 34080                                  ;	scanned from umb_head if not from arena_head. If the strategy is
 34081                                  ; 	HIGH_FIRST the scan is continued from arena_head if a block of 
 34082                                  ;	appropriate size is not found in the UMBs. If the strategy is 
 34083                                  ;	HIGH_FIRST+HIGH_ONLY only the UMBs are scanned for memory.
 34084                                  ;
 34085                                  ;	In either case if bit 0 of UmbFlag is not initialized then the scan
 34086                                  ;	starts from arena_head.
 34087                                  ;
 34088                                  ;	Assembler usage:
 34089                                  ;           MOV     BX,size
 34090                                  ;           MOV     AH,Alloc
 34091                                  ;           INT     21h
 34092                                  ;
 34093                                  ;	BUGBUG - a lot can be done to improve performance. We can set marks
 34094                                  ;	so that we start searching the arena at it's first non-trivial free
 34095                                  ;	block, we can peephole the code, etc. (We can move some subr calls
 34096                                  ;	inline, etc.) I assume that this is called rarely and that the arena
 34097                                  ;	doesn't have too many memory objects in it beyond the first free one.
 34098                                  ;	verify that this is true; if so, this can stay as is
 34099                                  ;
 34100                                  ;	ENTRY	(bx) = requested size, in bytes
 34101                                  ;		(DS) = (ES) = DOSGROUP
 34102                                  ;	EXIT	'C' clear if memory allocated
 34103                                  ;		  (ax:0) = address of requested memory
 34104                                  ;		'C' set if request failed
 34105                                  ;		  (AX) = error_not_enough_memory
 34106                                  ;		    (bx) = max size we could have allocated
 34107                                  ;		  (ax) = error_arena_trashed
 34108                                  ;	USES	All
 34109                                  ;----------------------------------------------------------------------------
 34110                                  
 34111                                  ; MSDOS 2.11 (& MSDOS 3.3)
 34112                                  ;----------------------------------------------------------------------------
 34113                                  ;SUBTTL $Alloc - allocate space in memory
 34114                                  ;
 34115                                  ;   Assembler usage:
 34116                                  ;           MOV     BX,size
 34117                                  ;           MOV     AH,Alloc
 34118                                  ;           INT     21h
 34119                                  ;         AX:0 is pointer to allocated memory
 34120                                  ;         BX is max size if not enough memory
 34121                                  ;
 34122                                  ;   Description:
 34123                                  ;           Alloc returns  a  pointer  to  a  free  block of
 34124                                  ;       memory that has the requested  size  in  paragraphs.
 34125                                  ;
 34126                                  ;   Error return:
 34127                                  ;           AX = error_not_enough_memory
 34128                                  ;              = error_arena_trashed
 34129                                  ;----------------------------------------------------------------------------
 34130                                  
 34131                                  ; DOSCODE:A28Eh (MSDOS 6.21, MSDOS.SYS)
 34132                                  
 34133                                  ; 01/12/2022 - Retro DOS v4.0 (Modified MSDOS5.0 MSDOS.SYS)
 34134                                  ; DOSCODE:A22Eh (MSDOS 5.0, MSDOS.SYS)
 34135                                  
 34136                                  _$ALLOC:
 34137                                  	; 25/05/2019 (Procedure has been checked and confirmed)
 34138                                  	; 14/05/2019 - Retro DOS v4.0
 34139                                  	; 04/08/2018 - Retro DOS v3.0
 34140                                  	;EnterCrit critMem
 34141 00006384 E8D1AF                  	call	ECritMEM ; MSDOS 3.3 & MSDOS 6.0
 34142                                  
 34143                                  ; 17/12/2022
 34144                                  ; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 34145                                  ;%if 0
 34146                                  	; 14/05/2019
 34147 00006387 16                      	push	ss
 34148 00006388 1F                      	pop	ds
 34149                                  
 34150                                  	; MSDOS 6.0
 34151                                  	;mov	ax,[ss:arena_head]
 34152                                  	;mov	[ss:START_ARENA],ax	; assume LOW_FIRST
 34153                                  
 34154 00006389 A1[2400]                	mov	ax,[arena_head]
 34155 0000638C A3[8E00]                	mov	[START_ARENA],ax			
 34156                                  	
 34157                                  	;test	byte [ss:AllocMethod],HIGH_FIRST+HIGH_ONLY
 34158 0000638F F606[0203]C0            	test	byte [AllocMethod],HIGH_FIRST+HIGH_ONLY
 34159                                  					; Q: should we start scanning from 
 34160                                  					;    UMB's
 34161 00006394 740D                    	jz	short norm_alloc	; N: scan from arena_head
 34162                                  		
 34163                                  	;;cmp	word [ss:UMB_HEAD],-1	; Q: Has umb_head been initialized
 34164                                  	;cmp	word [UMB_HEAD],-1
 34165                                  	;je	short norm_alloc	; N: scan from arena_head
 34166                                  
 34167                                  	;test	byte [ss:UMBFLAG],LINKSTATE ; Q: are umb's linked
 34168 00006396 F606[8900]01            	test	byte [UMBFLAG],LINKSTATE ; 1
 34169 0000639B 7406                    	jz	short norm_alloc	; N: scan from arena_head
 34170                                  	
 34171                                  	;mov	ax,[ss:UMB_HEAD]
 34172                                  	;mov	[ss:START_ARENA],ax	; start_arena = umb_head
 34173 0000639D A1[8C00]                	mov	ax,[UMB_HEAD]
 34174 000063A0 A3[8E00]                	mov	[START_ARENA],ax
 34175                                  					; M000 - end
 34176                                  norm_alloc:
 34177 000063A3 31C0                            XOR     AX,AX
 34178 000063A5 89C7                            MOV     DI,AX
 34179                                  	; 15/03/2018
 34180                                          ;MOV	[SS:FirstArena],AX	; init the options
 34181                                          ;MOV	[SS:BestArena],AX
 34182                                          ;MOV	[SS:LastArena],AX
 34183                                  	; 14/05/2019
 34184 000063A7 A3[4003]                	MOV	[FirstArena],AX		; init the options
 34185 000063AA A3[4203]                        MOV	[BestArena],AX
 34186 000063AD A3[4403]                        MOV	[LastArena],AX
 34187 000063B0 50                              PUSH    AX                      ; alloc_max <- 0
 34188                                  	; 04/08/2018
 34189                                  start_scan:
 34190                                  	;MOV	AX,[SS:arena_head]	; AX <- beginning of arena
 34191                                  	;MOV	AX,[arena_head]
 34192                                  
 34193                                  	; 14/05/2019	
 34194                                  	; MSDOS 6.0
 34195                                  	;mov	ax,[SS:START_ARENA]	; M000: AX <- beginning of arena
 34196 000063B1 A1[8E00]                	mov	ax,[START_ARENA]
 34197                                  
 34198 000063B4 E89BFF                  	CALL    check_signature         ; ES <- AX, carry set if error
 34199 000063B7 7236                            JC      SHORT alloc_err		; IF error THEN GOTO err
 34200                                  
 34201                                  ;%endif
 34202                                  
 34203                                  ; 17/12/2022
 34204                                  %if 0
 34205                                  	; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 34206                                  
 34207                                  	; MSDOS 6.0
 34208                                  	mov	ax,[ss:arena_head]
 34209                                  	mov	[ss:START_ARENA],ax	; assume LOW_FIRST
 34210                                  
 34211                                  	test	byte [ss:AllocMethod],HIGH_FIRST+HIGH_ONLY
 34212                                  					; Q: should we start scanning from 
 34213                                  					;    UMB's
 34214                                  	jz	short norm_alloc	; N: scan from arena_head
 34215                                  		
 34216                                  	;cmp	word [ss:UMB_HEAD],-1	; Q: Has umb_head been initialized
 34217                                  	;je	short norm_alloc	; N: scan from arena_head
 34218                                  
 34219                                  	test	byte [ss:UMBFLAG],LINKSTATE ; Q: are umb's linked
 34220                                  	jz	short norm_alloc	; N: scan from arena_head
 34221                                  	
 34222                                  	mov	ax,[ss:UMB_HEAD]
 34223                                  	mov	[ss:START_ARENA],ax	; start_arena = umb_head
 34224                                  					; M000 - end
 34225                                  norm_alloc:
 34226                                          XOR     AX,AX
 34227                                          MOV     DI,AX
 34228                                  	; 15/03/2018
 34229                                  	MOV	[SS:FirstArena],AX	; init the options
 34230                                  	MOV	[SS:BestArena],AX
 34231                                  	MOV	[SS:LastArena],AX
 34232                                          PUSH    AX                      ; alloc_max <- 0
 34233                                  	; 04/08/2018
 34234                                  start_scan:
 34235                                  	;MOV	AX,[SS:arena_head]	; AX <- beginning of arena
 34236                                  	; 14/05/2019	
 34237                                  	; MSDOS 6.0
 34238                                  	mov	ax,[SS:START_ARENA]	; M000: AX <- beginning of arena
 34239                                  	CALL    check_signature         ; ES <- AX, carry set if error
 34240                                          JC      SHORT alloc_err		; IF error THEN GOTO err
 34241                                  %endif
 34242                                  
 34243                                  alloc_scan:
 34244 000063B9 06                              PUSH    ES
 34245 000063BA 1F                              POP     DS                      ; DS <- ES
 34246 000063BB 393E0100                        CMP     [ARENA.OWNER],DI ; 0
 34247 000063BF 7469                            JZ      SHORT alloc_free	; IF current block is free THEN examine
 34248                                  
 34249                                  alloc_next:
 34250                                  	; MSDOS 6.0			; M000 - start 
 34251 000063C1 36F606[8900]01          	test	byte [ss:UMBFLAG],LINKSTATE ; Q: are umb's linked
 34252 000063C7 741C                    	jz	short norm_strat	; N: see if we reached last arena
 34253                                  	
 34254 000063C9 36F606[0203]80          	test	byte [ss:AllocMethod],HIGH_FIRST
 34255                                  					; Q: is alloc strategy high_first
 34256 000063CF 7414                    	jz	short norm_strat	; N: see if we reached last arena
 34257 000063D1 36A1[8E00]              	mov	ax,[ss:START_ARENA]
 34258 000063D5 363B06[2400]            	cmp	ax,[ss:arena_head]	; Q: did we start scan from 
 34259                                  					;    arena_head
 34260 000063DA 7509                    	jne	short norm_strat	; N: see if we reached last arena
 34261 000063DC 8CD8                    	mov	ax,ds			; ax = current block
 34262 000063DE 363B06[8C00]            	cmp	ax,[ss:UMB_HEAD]	; Q: check against umb_head 
 34263 000063E3 EB03                    	jmp	short alloc_chk_end
 34264                                  
 34265                                  norm_strat:
 34266                                  	;cmp	byte [di],5Ah ; 'Z'
 34267 000063E5 803D5A                          CMP     BYTE [DI],arena_signature_end
 34268                                                                          ; IF current block is last THEN
 34269                                  alloc_chk_end:
 34270 000063E8 740E                            JZ      SHORT alloc_end		;   GOTO end
 34271 000063EA E85EFF                          CALL    arena_next              ; AX, ES <- next block, Carry set if error
 34272 000063ED 73CA                            JNC     SHORT alloc_scan	; IF no error THEN GOTO scan
 34273                                  
 34274                                  alloc_err:
 34275 000063EF 58                              POP     AX
 34276                                  
 34277                                  alloc_trashed:
 34278                                  	;LeaveCrit critMem
 34279 000063F0 E880AF                  	call    LCritMEM ; MSDOS 3.3 & MSDOS 6.0	
 34280                                          ;error	error_arena_trashed
 34281                                  	;mov	al,7
 34282 000063F3 B007                    	MOV	AL,error_arena_trashed
 34283                                  alloc_errj:
 34284 000063F5 E95AA2                  	JMP	SYS_RET_ERR
 34285                                  
 34286                                  alloc_end:
 34287                                  	; 18/05/2019
 34288 000063F8 36833E[4003]00                  CMP	WORD [SS:FirstArena],0
 34289 000063FE 7403                    	jz	short alloc_chk 
 34290 00006400 E98400                  	jmp	alloc_do_split
 34291                                  
 34292                                  alloc_chk:
 34293                                  	; MSDOS 6.0
 34294 00006403 36A1[2400]              	mov	ax,[ss:arena_head]
 34295 00006407 363B06[8E00]            	cmp	ax,[ss:START_ARENA]	; Q: started scanning from arena_head
 34296 0000640C 740E                    	je	short alloc_fail	; Y: not enough memory
 34297                                  					; N:
 34298                                  					; Q: is the alloc strat HIGH_ONLY
 34299 0000640E 36F606[0203]40          	test 	byte [ss:AllocMethod],HIGH_ONLY
 34300 00006414 7506                    	jnz	short alloc_fail	; Y: return size of largest UMB
 34301                                  	
 34302 00006416 36A3[8E00]              	mov	[ss:START_ARENA],ax	; N: start scanning from arena_head
 34303 0000641A EB95                    	jmp	short start_scan
 34304                                  					; M000 - end
 34305                                  
 34306                                  alloc_fail:
 34307                                          ;invoke Get_User_Stack
 34308 0000641C E870A0                          CALL	Get_User_Stack
 34309 0000641F 5B                      	POP     BX
 34310                                          ;MOV	[SI].user_BX,BX
 34311                                  	;MOV	[SI+2],BX
 34312 00006420 895C02                  	mov	[SI+user_env.user_BX],bx
 34313                                  	;LeaveCrit critMem
 34314 00006423 E84DAF                  	call    LCritMEM ; MSDOS 3.3 & MSDOS 6.0
 34315                                  	;error	error_not_enough_memory
 34316                                  	;mov	al,8
 34317 00006426 B008                    	MOV	AL,error_not_enough_memory
 34318                                  	; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 34319 00006428 EBCB                    	jmp	short alloc_errj
 34320                                  	;JMP	SYS_RET_ERR
 34321                                  
 34322                                  alloc_free:
 34323 0000642A E835FF                          CALL    Coalesce		; add following free block to current
 34324 0000642D 72C0                            JC	SHORT alloc_err		; IF error THEN GOTO err
 34325 0000642F 8B0E0300                        MOV     CX,[ARENA.SIZE]
 34326 00006433 5A                              POP     DX                      ; check for max found size
 34327 00006434 39D1                            CMP     CX,DX
 34328 00006436 7602                            JNA     SHORT alloc_test
 34329 00006438 89CA                            MOV     DX,CX
 34330                                  
 34331                                  alloc_test:
 34332 0000643A 52                              PUSH    DX
 34333 0000643B 39CB                            CMP     BX,CX                   ; IF BX > size of current block THEN
 34334 0000643D 7782                    	JA      SHORT alloc_next	;   GOTO next
 34335                                  
 34336                                  	; 15/03/2018
 34337 0000643F 36833E[4003]00                  CMP     WORD [SS:FirstArena],0
 34338 00006445 7505                    	JNZ	SHORT alloc_best
 34339 00006447 368C1E[4003]                    MOV     [SS:FirstArena],DS	; save first one found	
 34340                                  alloc_best:
 34341 0000644C 36833E[4203]00                  CMP     WORD [SS:BestArena],0
 34342 00006452 740E                            JZ      SHORT alloc_make_best	; initial best
 34343 00006454 06                              PUSH	ES
 34344 00006455 368E06[4203]                    MOV     ES,[SS:BestArena]
 34345 0000645A 26390E0300                      CMP     [ES:ARENA.SIZE],CX	; is size of best larger than found?
 34346 0000645F 07                              POP	ES
 34347 00006460 7605                            JBE     SHORT alloc_last
 34348                                  alloc_make_best:
 34349 00006462 368C1E[4203]                    MOV     [SS:BestArena],DS	; assign best
 34350                                  alloc_last:
 34351 00006467 368C1E[4403]                    MOV     [SS:LastArena],DS 	; assign last
 34352 0000646C E952FF                          JMP     alloc_next
 34353                                  ;
 34354                                  ; split the block high
 34355                                  ;
 34356                                  alloc_do_split_high:
 34357 0000646F 368E1E[4403]                    MOV     DS,[SS:LastArena]
 34358 00006474 8B0E0300                        MOV     CX,[ARENA.SIZE]
 34359 00006478 29D9                            SUB     CX,BX
 34360 0000647A 8CDA                            MOV     DX,DS
 34361 0000647C 7449                            JE      SHORT alloc_set_owner	; sizes are equal, no split
 34362 0000647E 01CA                            ADD     DX,CX                   ; point to next block
 34363 00006480 8EC2                            MOV     ES,DX                   ; no decrement!
 34364 00006482 49                              DEC     CX
 34365 00006483 87D9                            XCHG    BX,CX                   ; bx has size of lower block
 34366 00006485 EB2B                            JMP     SHORT alloc_set_sizes	; cx has upper (requested) size
 34367                                  ;
 34368                                  ; we have scanned memory and have found all appropriate blocks
 34369                                  ; check for the type of allocation desired; first and best are identical
 34370                                  ; last must be split high
 34371                                  ;
 34372                                  alloc_do_split:
 34373                                  
 34374                                  ; 17/12/2022
 34375                                  ; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 34376                                  ;%if 0
 34377                                  	; 14/05/2019
 34378                                  	; MSDOS 6.0			; M000 - start
 34379                                  	;xor	cx,cx
 34380 00006487 368A0E[0203]            	mov	cl,[ss:AllocMethod]
 34381                                  	;and	cx,STRAT_MASK ; 0FF3Fh	; mask off bit 7
 34382 0000648C 80E13F                  	and	cl,3Fh
 34383                                  	;cmp	cx,BEST_FIT ; 1		; Q; is the alloc strategy best_fit
 34384 0000648F 80F901                  	cmp	cl,BEST_FIT
 34385 00006492 77DB                    	ja	short alloc_do_split_high
 34386                                  ;%endif
 34387                                  
 34388                                  	; 17/12/2022
 34389                                  	; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 34390                                  	; MSDOS 6.0 & MSDOS 5.0
 34391                                  	;xor	cx,cx
 34392                                  	;mov	cl,[ss:AllocMethod]
 34393                                  	;and	cx,STRAT_MASK ; 0FF3Fh	; mask off bit 7
 34394                                  	;cmp	cx,BEST_FIT ; 1		; Q; is the alloc strategy best_fit
 34395                                  	;ja	short alloc_do_split_high
 34396                                  
 34397                                  	; 15/03/2018
 34398                                          ;;CMP	BYTE [SS:AllocMethod], 1
 34399                                  	; 04/08/2018
 34400                                  	;CMP	BYTE [SS:AllocMethod],BEST_FIT
 34401                                          ;JA	SHORT alloc_do_split_high
 34402                                          
 34403 00006494 368E1E[4003]            	MOV     DS,[SS:FirstArena]        
 34404 00006499 7205                    	JB      SHORT alloc_get_size
 34405 0000649B 368E1E[4203]            	MOV     DS,[SS:BestArena]
 34406                                  
 34407                                  alloc_get_size:
 34408 000064A0 8B0E0300                        MOV     CX,[ARENA.SIZE]
 34409 000064A4 29D9                            SUB     CX,BX                   ; get room left over
 34410 000064A6 8CD8                            MOV     AX,DS
 34411 000064A8 89C2                            MOV     DX,AX                   ; save for owner setting
 34412 000064AA 741B                            JE      SHORT alloc_set_owner	; IF BX = size THEN (don't split)
 34413 000064AC 01D8                            ADD     AX,BX
 34414 000064AE 40                              INC     AX                      ; remember the header
 34415 000064AF 8EC0                            MOV     ES,AX                   ; ES <- DS + BX (new header location)
 34416 000064B1 49                              DEC     CX                      ; CX <- size of split block
 34417                                  alloc_set_sizes:
 34418 000064B2 891E0300                        MOV     [ARENA.SIZE],BX		; current size <- BX
 34419 000064B6 26890E0300                      MOV     [ES:ARENA.SIZE],CX      ; split size <- CX
 34420                                  	;mov	bl,4Dh ; 'M'
 34421 000064BB B34D                            MOV     BL,arena_signature_normal
 34422 000064BD 861D                            XCHG    BL,[DI]			; current signature <- 4D
 34423 000064BF 26881D                          MOV     [ES:DI],BL		; new block sig <- old block sig
 34424 000064C2 26893E0100                      MOV     [ES:ARENA.OWNER],DI
 34425                                  
 34426                                  alloc_set_owner:
 34427 000064C7 8EDA                            MOV     DS,DX
 34428 000064C9 36A1[3003]                      MOV     AX,[SS:CurrentPDB] ; 15/03/2018
 34429 000064CD A30100                          MOV     [ARENA.OWNER],AX
 34430 000064D0 8CD8                            MOV     AX,DS
 34431 000064D2 40                              INC     AX
 34432 000064D3 5B                              POP     BX
 34433                                  	;LeaveCrit critMem
 34434 000064D4 E89CAE                  	call    LCritMEM ; MSDOS 3.3 & MSDOS 6.0
 34435                                  	
 34436                                  	; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 34437                                  alloc_ok:
 34438                                          ;transfer SYS_RET_OK
 34439 000064D7 E96FA1                  	JMP	SYS_RET_OK
 34440                                  
 34441                                  ;	BREAK $SETBLOCK - change size of an allocated block (if possible)
 34442                                  
 34443                                  ; MSDOS 6.0
 34444                                  ;----------------------------------------------------------------------------
 34445                                  ;**	$SETBLOCK - Change size of an Alocated Block
 34446                                  ;
 34447                                  ;	Setblock changes the size of an allocated block. First, we coalesce
 34448                                  ;	any following free space onto this block; then we try to trim the
 34449                                  ;	block down to the size requested.
 34450                                  ;
 34451                                  ;	Note that if the guy wants to grow the block but that growth fails,
 34452                                  ;	we still go ahead and coalesce any trailing free blocks onto it.
 34453                                  ;	Thus the maximum-size-possible value that we return has already
 34454                                  ;	been allocated! This is a bug, dare we fix it? BUGBUG
 34455                                  ;
 34456                                  ;	NOTE - $SETBLOCK is in bed with $ALLOC and jumps into $ALLOC to
 34457                                  ;		finish it's work.  FOr this reason we build the allocsf
 34458                                  ;		structure on the frame, to make us compatible with $ALLOCs
 34459                                  ;		code.
 34460                                  ;
 34461                                  ;	ENTRY	(es) = segment of old block
 34462                                  ;		(bx) = newsize
 34463                                  ;		(ah) = SETBLOCK
 34464                                  ;
 34465                                  ;	EXIT	'C' clear if OK
 34466                                  ;		'C' set if error
 34467                                  ;		  (ax) = error_invalid_block
 34468                                  ;		       = error_arena_trashed
 34469                                  ;		       = error_not_enough_memory
 34470                                  ;		       = error_invalid_function
 34471                                  ;		  (bx) = maximum size possible, iff (ax) = error_not_enough_memory
 34472                                  ;	USES	???? BUGBUG
 34473                                  ;----------------------------------------------------------------------------
 34474                                  
 34475                                  ; MSDOS 2.11 (& MSDOS 3.3)
 34476                                  ;----------------------------------------------------------------------------
 34477                                  ;SUBTTL $SETBLOCK - change size of an allocated block (if possible)
 34478                                  ;
 34479                                  ;   Assembler usage:
 34480                                  ;           MOV     ES,block
 34481                                  ;           MOV     BX,newsize
 34482                                  ;           MOV     AH,setblock
 34483                                  ;           INT     21h
 34484                                  ;         if setblock fails for growing, BX will have the maximum
 34485                                  ;         size possible
 34486                                  ;   Error return:
 34487                                  ;           AX = error_invalid_block
 34488                                  ;              = error_arena_trashed
 34489                                  ;              = error_not_enough_memory
 34490                                  ;              = error_invalid_function
 34491                                  ;----------------------------------------------------------------------------
 34492                                  
 34493                                  _$SETBLOCK:        
 34494                                  	; 04/08/2018 - Retro DOS v3.0
 34495                                  	;EnterCrit   critMem
 34496 000064DA E87BAE                  	call	ECritMEM ; MSDOS 3.3 & MSDOS 6.0
 34497                                  
 34498 000064DD BF0000                  	MOV     DI,ARENA.SIGNATURE
 34499 000064E0 8CC0                            MOV     AX,ES
 34500 000064E2 48                              DEC     AX
 34501 000064E3 E86CFE                          CALL    check_signature
 34502 000064E6 7303                            JNC     SHORT setblock_grab
 34503                                  
 34504                                  setblock_bad:
 34505 000064E8 E905FF                          JMP     alloc_trashed
 34506                                  
 34507                                  setblock_grab:
 34508 000064EB 8ED8                            MOV     DS,AX
 34509 000064ED E872FE                          CALL    Coalesce
 34510 000064F0 72F6                            JC      SHORT setblock_bad
 34511 000064F2 8B0E0300                        MOV     CX,[ARENA.SIZE]
 34512 000064F6 51                              PUSH    CX
 34513 000064F7 39CB                            CMP     BX,CX
 34514 000064F9 76A5                            JBE     SHORT alloc_get_size
 34515 000064FB E91EFF                          JMP     alloc_fail
 34516                                  
 34517                                  ;	BREAK $DEALLOC - free previously allocated piece of memory
 34518                                  
 34519                                  ; MSDOS 6.0
 34520                                  ;----------------------------------------------------------------------------
 34521                                  ;**	$DEALLOC - Free Heap Memory
 34522                                  ;
 34523                                  ;	ENTRY	(es) = address of item
 34524                                  ;
 34525                                  ;	EXIT	'C' clear of OK
 34526                                  ;		'C' set if error
 34527                                  ;		  (AX) = error_invalid_block
 34528                                  ;	USES	???? BUGBUG
 34529                                  
 34530                                  ; MSDOS 2.11 (& MSDOS 3.3)
 34531                                  ;----------------------------------------------------------------------------
 34532                                  ;SUBTTL $DEALLOC - free previously allocated piece of memory
 34533                                  ;
 34534                                  ;   Assembler usage:
 34535                                  ;           MOV     ES,block
 34536                                  ;           MOV     AH,dealloc
 34537                                  ;           INT     21h
 34538                                  ;
 34539                                  ;   Error return:
 34540                                  ;           AX = error_invalid_block
 34541                                  ;              = error_arena_trashed
 34542                                  ;---------------------------------------------------------------------------- 
 34543                                  
 34544                                  	; 01/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 34545                                  _$DEALLOC:
 34546                                  	; 14/05/2019 - Retro DOS v4.0    
 34547                                  	; 04/08/2018 - Retro DOS v3.0
 34548                                  	;EnterCrit   critMem
 34549 000064FE E857AE                  	call	ECritMEM ; MSDOS 3.3 & MSDOS 6.0
 34550                                  
 34551                                  	; MSDOS 6.0			; M016, M068 - Start
 34552 00006501 36F606[8600]04          	test	byte [ss:DOS_FLAG],EXECA20OFF
 34553                                  					; Q: was the previous call an int 21
 34554                                  					;    exec call
 34555 00006507 740E                    	jz	short deallocate	; N: continue
 34556 00006509 36803E[8500]00          	cmp	byte [ss:A20OFF_COUNT], 0 ; Q: is count 0
 34557 0000650F 7506                    	jne	short deallocate	; N: continue
 34558 00006511 36C606[8500]01          	mov	byte [ss:A20OFF_COUNT], 1 ; Y: set count to 1
 34559                                  deallocate:				; M016, M068 - End
 34560 00006517 BF0000                  	MOV     DI,ARENA.SIGNATURE ; = 0
 34561 0000651A 8CC0                            MOV     AX,ES
 34562 0000651C 48                              DEC     AX
 34563 0000651D E832FE                          CALL    check_signature
 34564 00006520 720A                            JC      SHORT dealloc_err
 34565 00006522 26893E0100                      MOV     [ES:ARENA.OWNER],DI
 34566                                  	;LeaveCrit critMem
 34567 00006527 E849AE                  	call    LCritMEM ; MSDOS 3.3 & MSDOS 6.0
 34568                                  	; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 34569                                          ;transfer SYS_RET_OK
 34570                                  dealloc_ok:
 34571 0000652A EBAB                    	jmp	short alloc_ok
 34572                                  	;JMP	SYS_RET_OK
 34573                                  
 34574                                  dealloc_err:
 34575                                  	;LeaveCrit critMem
 34576 0000652C E844AE                  	call    LCritMEM ; MSDOS 3.3 & MSDOS 6.0
 34577                                          ;error	error_invalid_block
 34578                                  	;mov	al,9
 34579 0000652F B009                    	MOV	AL,error_invalid_block
 34580                                  	; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 34581                                  dealloc_errj:
 34582                                  AllocOperErrj:	; 17/12/2022
 34583 00006531 E91EA1                  	JMP	SYS_RET_ERR
 34584                                  
 34585                                  ;	BREAK $AllocOper - get/set allocation mechanism
 34586                                  
 34587                                  ; MSDOS 6.0
 34588                                  ;----------------------------------------------------------------------------
 34589                                  ;**	$AllocOper - Get/Set Allocation Mechanism
 34590                                  ;
 34591                                  ;	Assembler usage:
 34592                                  ;           MOV     AH,AllocOper
 34593                                  ;           MOV     BX,method
 34594                                  ;           MOV     AL,func
 34595                                  ;           INT     21h
 34596                                  ;
 34597                                  ;	ENTRY	
 34598                                  ;		(al) = 0
 34599                                  ;		  Get allocation Strategy in (ax)
 34600                                  ;
 34601                                  ;		(al) = 1, (bx) = method = zw0000xy
 34602                                  ;		  Set allocation strategy.
 34603                                  ;		   w  = 1  => HIGH_ONLY
 34604                                  ;		   z  = 1  => HIGH_FIRST
 34605                                  ;		   xy = 00 => FIRST_FIT
 34606                                  ;		      = 01 => BEST_FIT
 34607                                  ;		      = 10 => LAST_FIT
 34608                                  ;
 34609                                  ;		(al) = 2
 34610                                  ;		  Get UMB link state in (al)
 34611                                  ;
 34612                                  ;		(al) = 3
 34613                                  ;		  Set UMB link state
 34614                                  ;		   (bx) = 0 => Unlink UMBs
 34615                                  ;		   (bx) = 1 => Link UMBs
 34616                                  ;
 34617                                  ;
 34618                                  ;	EXIT	'C' clear if OK
 34619                                  ;
 34620                                  ;		 if (al) = 0
 34621                                  ;		  (ax) = existing method
 34622                                  ;		 if (al) = 1
 34623                                  ;		  Sets allocation strategy
 34624                                  ;		 if (al) = 2
 34625                                  ;		  (al) = 0 => UMBs not linked
 34626                                  ;		  (al) = 1 => UMBs linked in
 34627                                  ;		 if (al) = 3
 34628                                  ;		  Links/Unlinks the UMBs into DOS chain
 34629                                  ;
 34630                                  ;		'C' set if error
 34631                                  ;		  AX = error_invalid_function
 34632                                  ;
 34633                                  ;	Rev. M000 - added support for HIGH_FIRST in (al) = 1. 7/9/90
 34634                                  ; 	Rev. M003 - added functions (al) = 2 and (al) = 3. 7/18/90
 34635                                  ;	Rev. M009 - (al) = 3 will return 'invalid function' in ax if
 34636                                  ;		    umbhead has'nt been initialized by sysinit and 'trashed
 34637                                  ;		    arena' if an arena sig is damaged.
 34638                                  ;----------------------------------------------------------------------------
 34639                                  
 34640                                  ; MSDOS 2.11 (& MSDOS 3.3)
 34641                                  ;----------------------------------------------------------------------------
 34642                                  ;SUBTTL $AllocOper - get/set allocation mechanism
 34643                                  ;
 34644                                  ;   Assembler usage:
 34645                                  ;           MOV     AH,AllocOper
 34646                                  ;           MOV     BX,method
 34647                                  ;           MOV     AL,func
 34648                                  ;           INT     21h
 34649                                  ;
 34650                                  ;   Error return:
 34651                                  ;           AX = error_invalid_function
 34652                                  ;----------------------------------------------------------------------------
 34653                                  
 34654                                  	; 01/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 34655                                  _$ALLOCOPER:
 34656                                  	; 14/05/2019 - Retro DOS v4.0
 34657                                  	; MSDOS 6.0
 34658 00006534 08C0                    	or	al,al ; 0
 34659 00006536 741E                    	jz	short AllocGetStrat
 34660                                  	; 17/12/2022
 34661                                  	;cmp	al,1
 34662                                  	;jz	short AllocSetStrat
 34663                                  
 34664                                  	; 01/12/2022
 34665                                  	;cmp	al, 2
 34666                                  	;jb	short AllocSetStrat
 34667                                  	;ja	short AllocSetLink
 34668                                  	;;jmp	short AllocGetLink
 34669                                  ;AllocGetLink:
 34670                                  	; MSDOS 6.0
 34671                                  	;mov	al,[ss:UMBFLAG]		; return link state in al
 34672                                  	;and 	al,LINKSTATE		
 34673                                  	;;transfer SYS_RET_OK
 34674                                  	;jmp	SYS_RET_OK
 34675                                  
 34676 00006538 3C02                    	cmp	al,2
 34677                                  	; 17/12/2022
 34678 0000653A 7223                    	jb	short AllocSetStrat ; al = 1
 34679 0000653C 7432                    	je	short AllocGetLink
 34680                                  
 34681                                  	;cmp	al,2
 34682                                  	;jz	short AllocGetLink
 34683 0000653E 3C03                    	cmp	al,3
 34684 00006540 7436                    	jz	short AllocSetLink
 34685                                  
 34686                                  	; 15/04/2018
 34687                                  	;CMP	AL,1
 34688                                          ;JB	SHORT AllocOperGet
 34689                                          ;JZ	SHORT AllocOperSet
 34690                                  
 34691                                  AllocOperError:
 34692                                  	; 04/08/2018 - Retro DOS v3.0
 34693                                  	; MSDOS 3.3 (& MSDOS 6.0)	; Extended Error Locus	
 34694                                  	;mov	byte [ss:EXTERR_LOCUS],5
 34695 00006542 36C606[2303]05                  MOV     byte [SS:EXTERR_LOCUS],errLOC_Mem
 34696                                  	;error	error_invalid_function
 34697                                  	;mov	al,1
 34698 00006548 B001                    	MOV	AL,error_invalid_function
 34699                                  	; 17/12/2022
 34700                                  ;AllocOperErrj:
 34701                                  	;JMP	SYS_RET_ERR
 34702                                  	; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 34703                                  	;jmp	short dealloc_errj
 34704                                  	; 17/12/2022
 34705 0000654A EBE5                    	jmp	short AllocOperErrj
 34706                                  
 34707                                  AllocArenaError:
 34708                                  	; MSDOS 6.0
 34709 0000654C 36C606[2303]05          	MOV     byte [SS:EXTERR_LOCUS],errLOC_Mem
 34710                                  					; M009: Extended Error Locus
 34711                                  	;error	error_arena_trashed	; M009:
 34712                                  	;mov	al,7
 34713 00006552 B007                    	MOV	AL,error_arena_trashed
 34714                                  	;JMP	SYS_RET_ERR
 34715 00006554 EBDB                    	jmp	short AllocOperErrj ; 17/12/2022
 34716                                  
 34717                                  AllocGetStrat: 
 34718                                  	; MSDOS 6.0
 34719                                  AllocOperGet:
 34720 00006556 36A0[0203]                      MOV     AL,[SS:AllocMethod]
 34721 0000655A 30E4                            XOR     AH,AH
 34722                                  	; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 34723                                  	;transfer SYS_RET_OK
 34724                                  AllocOperOk:
 34725                                  	; 17/12/2022
 34726                                  	;jmp	short dealloc_ok
 34727 0000655C E9EAA0                  	JMP	SYS_RET_OK
 34728                                  
 34729                                  AllocSetStrat: 
 34730                                  	; 14/05/2019
 34731                                  	; MSDOS 6.0
 34732 0000655F 53                      	push	bx			; M000 - start
 34733                                  	; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 34734                                  	;and	bx,STRAT_MASK ; 0FF3Fh	; M064: mask off bit 6 & 7
 34735                                  	; 17/12/2022
 34736 00006560 80E33F                  	and	bl,3Fh
 34737 00006563 83FB02                  	cmp	bx,2			; BX must be 0-2
 34738                                  	;cmp	bl,2
 34739 00006566 5B                      	pop	bx			; M000 - end
 34740 00006567 77D9                    	ja	short AllocOperError
 34741                                  
 34742                                  AllocOperSet:
 34743 00006569 36881E[0203]                    MOV     [SS:AllocMethod],BL
 34744                                    	; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 34745                                  	;transfer SYS_RET_OK
 34746                                  AllocOperOkj:
 34747 0000656E EBEC                    	jmp	short AllocOperOk
 34748                                  	;JMP	SYS_RET_OK
 34749                                  
 34750                                  AllocGetLink:
 34751                                  	; MSDOS 6.0
 34752 00006570 36A0[8900]              	mov	al,[ss:UMBFLAG]		; return link state in al
 34753                                  	;and	al,1
 34754 00006574 2401                    	and 	al,LINKSTATE		
 34755                                   	; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 34756                                  	;transfer SYS_RET_OK
 34757                                  AllocOperOkj2:
 34758                                  	; 17/12/2022
 34759 00006576 EBE4                    	jmp	short AllocOperOk
 34760                                  	;jmp	short AllocOperOkj
 34761                                  	;;JMP	SYS_RET_OK
 34762                                  
 34763                                  AllocSetLink:
 34764                                  	; MSDOS 6.0			; M009 - start
 34765 00006578 368B0E[8C00]            	mov	cx,[ss:UMB_HEAD]	; cx = umb_head
 34766 0000657D 83F9FF                  	cmp	cx,0FFFFh		; Q: has umb_head been initialized
 34767 00006580 74C0                    	je	short AllocOperError	; N: error
 34768                                  					; Y: continue
 34769                                  					; M009 - end
 34770 00006582 83FB01                  	cmp	bx,1			
 34771 00006585 7204                    	jb	short UnlinkUmbs
 34772 00006587 741C                    	jz	short LinkUmbs
 34773                                  	
 34774 00006589 EBB7                    	jmp	short AllocOperError
 34775                                  	
 34776                                  UnlinkUmbs:
 34777                                  	;test	byte [ss:UMBFLAG],1
 34778 0000658B 36F606[8900]01          	test	byte [ss:UMBFLAG],LINKSTATE ; Q: umbs unlinked?
 34779 00006591 7410                    	jz	short unlinked		; Y: return 
 34780                                  	
 34781 00006593 E82900                  	call	GetLastArena		; get arena before umb_head in DS
 34782 00006596 72B4                    	jc	short AllocArenaError	; M009: arena trashed
 34783                                  	
 34784                                  					; make it last
 34785 00006598 C60600005A              	mov	byte [0],arena_signature_end
 34786                                  	
 34787                                  	;and	byte [ss:UMBFLAG],0FEh
 34788 0000659D 368026[8900]FE          	and	byte [ss:UMBFLAG],~LINKSTATE ; indicate unlink'd state in umbflag
 34789                                  	
 34790                                  unlinked:
 34791                                   	; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 34792                                  	;transfer SYS_RET_OK
 34793                                  	; 17/12/2022
 34794 000065A3 EBB7                    	jmp	short AllocOperOk
 34795                                  	;jmp	short AllocOperOkj2
 34796                                  	;;JMP	SYS_RET_OK
 34797                                  
 34798                                  LinkUmbs:
 34799 000065A5 36F606[8900]01          	test	byte [ss:UMBFLAG],LINKSTATE ; Q: umbs linked?
 34800 000065AB 7510                    	jnz	short linked		; Y: return
 34801                                  	
 34802 000065AD E80F00                  	call	GetLastArena		; get arena before umb_head
 34803 000065B0 729A                    	jc	short AllocArenaError	; M009: arena trashed
 34804                                  	
 34805                                  					; make it normal. M061: ds points to
 34806                                  					; arena before umb_head
 34807 000065B2 C60600004D              	mov	byte [0],arena_signature_normal
 34808                                  	
 34809 000065B7 36800E[8900]01          	or	byte [ss:UMBFLAG],LINKSTATE ; indicate link'd state in umbflag
 34810                                  linked:
 34811                                   	; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 34812                                  	;transfer SYS_RET_OK
 34813                                  	; 17/12/2022
 34814 000065BD EB9D                    	jmp	short AllocOperOk
 34815                                  	;jmp	short unlinked
 34816                                  	;;JMP	SYS_RET_OK
 34817                                  
 34818                                  ; MSDOS 6.0
 34819                                  ;--------------------------------------------------------------------------
 34820                                  ; Procedure Name : GetLastArena		-  M003
 34821                                  ;
 34822                                  ; Inputs	 : cx = umb_head
 34823                                  ;
 34824                                  ;
 34825                                  ; Outputs	 : If UMBs are linked
 34826                                  ;			ES = umb_head
 34827                                  ;			DS = arena before umb_head
 34828                                  ;		   else
 34829                                  ;			DS = last arena
 34830                                  ;			ES = next arena. will be umb_head if NC.
 34831                                  ;
 34832                                  ;		   CY if error
 34833                                  ;
 34834                                  ; Uses		 : DS, ES, DI, BX
 34835                                  ;--------------------------------------------------------------------------
 34836                                  
 34837                                  ; 14/05/2019 - Retro DOS v4.0
 34838                                  ; DOSCODE:A4D6h (MSDOS 6.21, MSDOS.SYS)
 34839                                  
 34840                                  ; 01/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 34841                                  ; DOSCODE:A476h (MSDOS 5.0, MSDOS.SYS)
 34842                                  	
 34843                                  GetLastArena:
 34844 000065BF 50                      	push	ax			; save ax
 34845                                  
 34846 000065C0 36A1[2400]              	mov	ax,[ss:arena_head]
 34847 000065C4 8EC0                    	mov	es,ax			; es = arena_head
 34848 000065C6 31FF                    	xor	di,di
 34849                                  
 34850 000065C8 26803D5A                	cmp     byte [es:di],arena_signature_end
 34851                                  					; Q: is this the last arena
 34852 000065CC 7419                    	je	short GLA_done		; Y: return last arena in ES		
 34853                                  					
 34854                                  GLA_next:
 34855 000065CE 8ED8                    	mov	ds,ax
 34856 000065D0 E878FD                  	call	arena_next		; ax, es -> next arena
 34857                                  	; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 34858                                  	;jc	short GLA_err
 34859                                  	; 17/12/2022
 34860 000065D3 7228                    	jc	short GLA_err2
 34861                                  
 34862 000065D5 36F606[8900]01          	test	byte [ss:UMBFLAG],LINKSTATE ; Q: are UMBs linked
 34863 000065DB 7506                    	jnz	short GLA_chkumb	; Y: terminating condition is 
 34864                                  					;    umb_head
 34865                                  					; N: terminating condition is 05Ah
 34866                                  
 34867 000065DD 26803D5A                	cmp     byte [es:di],arena_signature_end
 34868                                  					; Q: is this the last arena
 34869 000065E1 EB02                    	jmp	short GLA_@f
 34870                                  GLA_chkumb:
 34871 000065E3 39C8                    	cmp	ax,cx			; Q: is this umb_head
 34872                                  GLA_@f:
 34873 000065E5 75E7                    	jne	short GLA_next		; N: get next arena
 34874                                  
 34875                                  GLA_done:
 34876                                  					; M061 - Start
 34877 000065E7 36F606[8900]01          	test	byte [ss:UMBFLAG],LINKSTATE ; Q: are UMBs linked
 34878 000065ED 750B                    	jnz	short GLA_ret		; Y: we're done
 34879                                  					; N: let us confirm that the next 
 34880                                  					;    arena is umb_head
 34881 000065EF 8ED8                    	mov	ds,ax
 34882 000065F1 E857FD                  	call	arena_next		; ax, es -> next arena
 34883                                  	;jc	short GLA_err
 34884 000065F4 7207                    	jc	short GLA_err2
 34885 000065F6 39C8                    	cmp	ax,cx			; Q: is this umb_head
 34886 000065F8 7502                    	jne	short GLA_err		; N: error
 34887                                  					; M061 - End
 34888                                  GLA_ret:
 34889                                  	; 17/12/2022				
 34890                                  	;clc
 34891                                  	; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 34892                                  	;clc
 34893 000065FA 58                      	pop	ax			; M061
 34894 000065FB C3                      	retn				; M061
 34895                                  
 34896                                  GLA_err:
 34897 000065FC F9                      	stc				; M061
 34898                                  GLA_err2:
 34899 000065FD 58                      	pop	ax
 34900 000065FE C3                      	retn
 34901                                  
 34902                                  ;============================================================================
 34903                                  ; SRVCALL.ASM, MSDOS 6.0, 1991
 34904                                  ;============================================================================
 34905                                  ; 04/08/2018 - Retro DOS v3.0
 34906                                  
 34907                                  ;	TITLE SRVCALL - Server DOS call
 34908                                  ;	NAME  SRVCALL
 34909                                  
 34910                                  ;**	SRVCALL.ASM - Server DOS call functions
 34911                                  ;
 34912                                  ;
 34913                                  ;	$ServerCall
 34914                                  ;
 34915                                  ;	Modification history:
 34916                                  ;
 34917                                  ;	    Created: ARR 08 August 1983
 34918                                  
 34919                                  ;AsmVars <Installed>
 34920                                  
 34921                                  ;include dpl.asm
 34922                                  
 34923                                  ;Installed = TRUE
 34924                                  
 34925                                  ; 29/04/2019 - Retro DOS v4.0 (MSDOS 6.0, MSDOS 6.21)
 34926                                  ; ---------------------------------------------------------------------------
 34927                                  ; 01/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 34928                                  
 34929                                  ;BREAK <ServerCall -- Server DOS call>
 34930                                  
 34931                                  ; DOSCODE:A517h (MSDOS 6.21, MSDOS.SYS)
 34932                                  ; DOSCODE:A4B7h (MSDOS 5.0, MSDOS.SYS)
 34933                                  
 34934                                  ;hkn; TABLE	SEGMENT
 34935                                  ;Public SRVC001S,SRVC001E
 34936                                  ;SRVC001S label byte
 34937                                  
 34938                                  SRVC001S:
 34939                                  
 34940 000065FF [0366]                  SERVERTAB:	dw	SERVER_DISP
 34941 00006601 [5566]                  SERVERLEAVE:	dw	SERVERRETURN
 34942 00006603 0B                      SERVER_DISP:	db	(SERVER_DISP_END-SERVER_DISP-1)/2 ; = 11
 34943 00006604 [BD66]                  		dw	SRV_CALL	; 0
 34944 00006606 [5666]                  		dw	COMMIT_ALL	; 1
 34945 00006608 [8C66]                  		dw	CLOSE_NAME	; 2
 34946 0000660A [9766]                  		dw	CLOSE_UID	; 3
 34947 0000660C [9E66]                  		dw	CLOSE_UID_PID	; 4
 34948 0000660E [A566]                  		dw	GET_LIST	; 5
 34949 00006610 [FE66]                  		dw	GET_DOS_DATA	; 6
 34950 00006612 [2267]                  		dw	SPOOL_OPER	; 7
 34951 00006614 [2267]                  		dw	SPOOL_OPER	; 8
 34952 00006616 [2267]                  		dw	SPOOL_OPER	; 9
 34953 00006618 [2E67]                  		dw	_$SetExtendedError  ; 10
 34954                                  
 34955                                  SERVER_DISP_END:  ;  LABEL BYTE
 34956                                  
 34957                                  ;SRVC001E label byte
 34958                                  
 34959                                  SRVC001E:
 34960                                  
 34961                                  ;hkn; TABLE	ENDS
 34962                                  
 34963                                  ;----------------------------------------------------------------------------
 34964                                  ;
 34965                                  ; Procedure Name : $ServerCall
 34966                                  ;
 34967                                  ; Inputs:
 34968                                  ;	DS:DX -> DPL  (except calls 7,8,9)
 34969                                  ; Function:
 34970                                  ;	AL=0	Server DOS call
 34971                                  ;	AL=1	Commit All files
 34972                                  ;	AL=2	Close file by name (SHARING LOADED ONLY) DS:DX in DPL -> name
 34973                                  ;	AL=3	Close all files for DPL_UID
 34974                                  ;	AL=4	Close all files for DPL_UID/PID_PID
 34975                                  ;	AL=5	Get open file list entry
 34976                                  ;		    IN: BX File Index
 34977                                  ;			CX User Index
 34978                                  ;		    OUT:ES:DI -> Name
 34979                                  ;			BX = UID
 34980                                  ;		    CX = # locked blocks held by this UID
 34981                                  ;	AL=6	Get DOS data area
 34982                                  ;		    OUT: DS:SI -> Start
 34983                                  ;			CX size in bytes of swap if indos
 34984                                  ;			DX size in bytes of swap always
 34985                                  ;	AL=7	Get truncate flag
 34986                                  ;	AL=8	Set truncate flag
 34987                                  ;	AL=9	Close all spool files
 34988                                  ;	AL=10	SetExtendedError
 34989                                  ;
 34990                                  ;----------------------------------------------------------------------------
 34991                                  
 34992                                  _$ServerCall:
 34993                                  	; 13/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 34994                                  	; DOSCODE:A4D2h (MSDOS 5.0 MSDOS.SYS)		
 34995                                  	; 10/06/2019
 34996                                  	; 29/04/2019 - Retro DOS v4.0
 34997                                  	; DOSCODE:A532h (MSDOS 6.21 MSDOS.SYS)
 34998                                  
 34999                                  	; 05/08/2018 - Retro DOS v3.0
 35000                                  	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 657Bh
 35001 0000661A 3C07                    	CMP	AL,7
 35002 0000661C 7204                    	JB	short SET_STUFF
 35003 0000661E 3C09                    	CMP	AL,9
 35004 00006620 761A                    	JBE	short NO_SET_ID		; No DPL on calls 7,8,9
 35005                                  SET_STUFF:
 35006 00006622 89D6                    	MOV	SI,DX			; Point to DPL with DS:SI
 35007                                  	;mov	bx,[si+12h]
 35008 00006624 8B5C12                  	MOV	BX,[SI+DPL.UID]
 35009                                  
 35010                                  	; MSDOS 6.0
 35011                                  ;SR;
 35012                                  ; WIN386 updates the USER_ID itself. If WIN386 is present we skip the updating
 35013                                  ; of USER_ID
 35014                                  
 35015 00006627 36F606[2F10]01          	test	byte [SS:IsWin386],1
 35016 0000662D 7505                    	jnz	short skip_win386
 35017                                  
 35018                                  ;hkn; SS override for user_id and proc_id
 35019                                  	; 15/08/2018
 35020 0000662F 36891E[3E03]            	MOV	[SS:USER_ID],BX		; Set UID
 35021                                  
 35022                                  skip_win386:
 35023 00006634 8B5C14                  	MOV	BX,[SI+DPL.PID]
 35024 00006637 36891E[3C03]            	MOV	[SS:PROC_ID],BX		; Set process ID
 35025                                  NO_SET_ID:
 35026                                  	; 10/06/2019 - Retro DOS v4.0
 35027 0000663C 2EFF36[0166]            	PUSH	word [cs:SERVERLEAVE]	; push return address
 35028 00006641 2EFF36[FF65]            	PUSH	word [cS:SERVERTAB]	; push table address
 35029 00006646 50                      	PUSH	AX
 35030 00006647 E81EAC                  	call	TableDispatch
 35031                                  
 35032                                  ;hkn; SS override
 35033                                  	;mov 	byte [SS:EXETERR_LOCUS],1
 35034 0000664A 36C606[2303]01          	MOV	byte [SS:EXTERR_LOCUS],errLOC_Unk ; Extended Error Locus
 35035                                  	;error	error_invalid_function
 35036                                  	;mov	al,1
 35037 00006650 B001                    	MOV	AL,error_invalid_function
 35038                                  servercall_error:
 35039 00006652 E9FD9F                  	JMP	SYS_RET_ERR
 35040                                  
 35041                                  SERVERRETURN:
 35042 00006655 C3                      	retn
 35043                                  
 35044                                  ; Commit - iterate through the open file list and make sure that the
 35045                                  ; directory entries are correctly updated.
 35046                                  
 35047                                  	; 01/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 35048                                  COMMIT_ALL:
 35049 00006656 31DB                    	XOR	BX,BX			;   for (i=0; ThisSFT=getSFT(i); i++)
 35050 00006658 16                      	push	ss
 35051 00006659 1F                      	pop	ds
 35052 0000665A E8FBAC                  	call	ECritSFT		; Gonna scan SFT cache, lock it down
 35053                                  CommitLoop:
 35054 0000665D 53                      	push	bx
 35055 0000665E E82401                  	call	SFFromSFN
 35056 00006661 7222                    	JC	short CommitDone
 35057 00006663 26833D00                	cmp	word [es:di],0
 35058                                  	;CMP	word [ES:DI+SF_ENTRY.sf_Ref_Count],0
 35059                                  					; if (ThisSFT->refcount != 0)
 35060 00006667 7418                    	JZ	short CommitNext
 35061                                  	;cmp	word [es:di],0FFFFh ; -1
 35062 00006669 26833DFF                	cmp	word [ES:DI],sf_busy
 35063                                  	;CMP	word [ES:DI+SF_ENTRY.sf_Ref_Count],sf_busy  
 35064                                  					; BUSY SFTs have god knows what
 35065 0000666D 7412                    	JZ	short CommitNext	;   in them.
 35066                                  	; 17/12/2022
 35067 0000666F 26F6450680              	test	byte [ES:DI+SF_ENTRY.sf_flags+1],(sf_isnet>>8) ; 80h
 35068                                  	;TEST	word [ES:DI+SF_ENTRY.sf_flags],sf_isnet ; 8000h
 35069 00006674 750B                    	JNZ	short CommitNext	;  Skip Network SFTs so the SERVER
 35070                                  					;	doesn't deadlock
 35071 00006676 893E[9E05]              	MOV	[THISSFT],DI
 35072 0000667A 8C06[A005]              	MOV	[THISSFT+2],ES
 35073 0000667E E874CA                  	call	DOS_COMMIT		;	DOSCommit ();
 35074                                  CommitNext:
 35075 00006681 5B                      	pop	bx
 35076 00006682 43                      	INC	BX
 35077 00006683 EBD8                    	JMP	short CommitLoop
 35078                                  CommitDone:
 35079 00006685 E8EBAC                  	call	LCritSFT
 35080 00006688 5B                      	pop	bx
 35081                                  	; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 35082                                  Commit_Ok:
 35083 00006689 E9BD9F                  	jmp	SYS_RET_OK
 35084                                  	
 35085                                  
 35086                                  CLOSE_NAME:
 35087                                  
 35088                                  ;if installed
 35089                                  
 35090                                  ;hkn; SS override
 35091                                  	;call	far [ss:MFTcloN]
 35092 0000668C 36FF1E[A400]            	Call	far [SS:JShare+(5*4)] ; 5 = MFTcloN
 35093                                  ;else
 35094                                  ;	Call	MFTcloN
 35095                                  ;endif
 35096                                  
 35097                                  CheckReturns:
 35098 00006691 7202                    	JC	short func_err
 35099                                  	; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 35100                                  	;transfer SYS_RET_OK
 35101                                  Commit_Okj:
 35102 00006693 EBF4                    	jmp	short Commit_Ok
 35103                                  	;jmp	SYS_RET_OK
 35104                                  
 35105                                  func_err:
 35106                                  	;transfer SYS_RET_ERR
 35107                                  	;jmp	SYS_RET_ERR
 35108 00006695 EBBB                    	jmp	short servercall_error
 35109                                  
 35110                                  CLOSE_UID:
 35111                                  
 35112                                  ;if installed
 35113                                  ;hkn; SS override
 35114                                  	;call	far [ss:MFTclU]
 35115 00006697 36FF1E[9C00]            	Call	far [SS:JShare+(3*4)] ; 3 = MTFTclu
 35116                                  ;else
 35117                                  ;	Call	MFTclU
 35118                                  ;endif
 35119 0000669C EBF3                    	JMP	short CheckReturns
 35120                                  
 35121                                  CLOSE_UID_PID:
 35122                                  
 35123                                  ;if installed
 35124                                  ;hkn; SS override
 35125                                  	;call	far [ss:MFTCloseP]
 35126 0000669E 36FF1E[A000]            	Call	far [SS:JShare+(4*4)] ; 4 = MFTCloseP 
 35127                                  ;else
 35128                                  ;	Call	MFTCloseP
 35129                                  ;endif
 35130 000066A3 EBEC                    	JMP	short CheckReturns
 35131                                  
 35132                                  GET_LIST:
 35133                                  
 35134                                  ;if installed
 35135                                  ;hkn; SS override
 35136                                  	;call	far [ss:MFT_get]
 35137 000066A5 36FF1E[B400]            	Call	far [SS:JShare+(9*4)] ; 9 = MFT_get
 35138                                  ;else
 35139                                  ;	Call	MFT_get
 35140                                  ;endif
 35141 000066AA 72E9                    	JC	short func_err
 35142 000066AC E8E09D                  	call	Get_User_Stack
 35143                                  	;mov	[si+2],bx
 35144 000066AF 895C02                  	MOV	[SI+user_env.user_BX],BX
 35145                                  	;mov	[si+10],di
 35146 000066B2 897C0A                  	MOV	[SI+user_env.user_DI],DI
 35147                                  	;mov	[si+16],es
 35148 000066B5 8C4410                  	MOV	[SI+user_env.user_ES],ES
 35149                                  SetCXOK:
 35150                                  	;mov	[si+4],cx
 35151 000066B8 894C04                  	MOV	[SI+user_env.user_CX],CX
 35152                                  	; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 35153                                  	;transfer SYS_RET_OK
 35154                                  Commit_Okj2:
 35155                                  	; 17/12/2022
 35156 000066BB EBCC                    	jmp	short Commit_Ok
 35157                                  	;jmp	short Commit_Okj
 35158                                  	;;jmp	SYS_RET_OK
 35159                                  
 35160                                  SRV_CALL:
 35161 000066BD 58                      	POP	AX			; get rid of call to $srvcall
 35162 000066BE 1E                      	push	ds
 35163 000066BF 56                      	push	si
 35164 000066C0 E8CC9D                  	call	Get_User_Stack
 35165 000066C3 5F                      	pop	di
 35166 000066C4 07                      	pop	es
 35167                                  
 35168                                  ; DS:SI point to stack
 35169                                  ; ES:DI point to DPL
 35170                                  
 35171 000066C5 E87FAB                  	call	XCHGP
 35172                                  
 35173                                  ; DS:SI point to DPL
 35174                                  ; ES:DI point to stack
 35175                                  ;
 35176                                  ; We now copy the registers from DPL to save stack
 35177                                  
 35178 000066C8 56                      	push	si
 35179 000066C9 B90600                  	MOV	CX,6
 35180 000066CC F3A5                    	REP	MOVSW			; Put in AX,BX,CX,DX,SI,DI
 35181 000066CE 47                      	INC	DI
 35182 000066CF 47                      	INC	DI			; Skip user_BP
 35183 000066D0 A5                      	MOVSW				; DS
 35184 000066D1 A5                      	MOVSW				; ES
 35185 000066D2 5E                      	pop	si			; DS:SI -> DPL
 35186 000066D3 8B04                    	mov	ax,[SI]
 35187                                  	;MOV	AX,[SI+DPL.AX]
 35188                                  	;mov	bx,[si+2]
 35189 000066D5 8B5C02                  	MOV	BX,[SI+DPL.BX]
 35190                                  	;mov	cx,[si+4]
 35191 000066D8 8B4C04                  	MOV	CX,[SI+DPL.CX]
 35192                                  	;mov	dx,[si+6]
 35193 000066DB 8B5406                  	MOV	DX,[SI+DPL.DX]
 35194                                  	;mov	di,[si+10]
 35195 000066DE 8B7C0A                  	MOV	DI,[SI+DPL.DI]
 35196                                  	;mov	es,[si+14]
 35197 000066E1 8E440E                  	MOV	ES,[SI+DPL.ES]
 35198                                  	;push	word [si+8]
 35199 000066E4 FF7408                  	PUSH	word [SI+DPL.SI]
 35200                                  	;mov	ds,[si+12]
 35201 000066E7 8E5C0C                  	MOV	DS,[SI+DPL.DS]
 35202 000066EA 5E                      	POP	SI
 35203                                  
 35204                                  ;hkn; SS override for next 3
 35205 000066EB 368C1E[EC05]            	MOV	[SS:SAVEDS],DS
 35206 000066F0 36891E[EA05]            	MOV	[SS:SAVEBX],BX
 35207 000066F5 36C606[7205]FF          	MOV	byte [SS:FSHARING],-1	; set no redirect flag
 35208 000066FB E98E9C                  	jmp	REDISP
 35209                                  
 35210                                  GET_DOS_DATA:
 35211 000066FE 16                      	push	ss
 35212 000066FF 07                      	pop	es
 35213 00006700 BF[2003]                	MOV     DI,SWAP_START
 35214 00006703 B9[AC0A]                	MOV     CX,SWAP_END
 35215 00006706 BA[3A03]                	MOV     DX,SWAP_ALWAYS
 35216 00006709 29F9                    	SUB     CX,DI
 35217 0000670B 29FA                    	SUB     DX,DI
 35218 0000670D D1E9                    	SHR     CX,1                    ; div by 2, remainder in carry
 35219 0000670F 83D100                  	ADC     CX,0                    ; div by 2 + round up
 35220 00006712 D1E1                    	SHL     CX,1                    ; round up to 2 boundary.
 35221 00006714 E8789D                  	call	Get_User_Stack
 35222                                  	;mov	[si+14],es
 35223 00006717 8C440E                  	MOV     [SI+user_env.user_DS],ES
 35224                                  	;mov	[si+8],di
 35225 0000671A 897C08                  	MOV     [SI+user_env.user_SI],DI
 35226                                  	;mov	[si+6],dx
 35227 0000671D 895406                  	MOV     [SI+user_env.user_DX],DX
 35228 00006720 EB96                    	JMP	short SetCXOK
 35229                                  
 35230                                  SPOOL_OPER:
 35231                                  	;CallInstall NETSpoolOper,MultNET,37,AX,BX
 35232                                  
 35233 00006722 50                      	push    ax
 35234 00006723 B82511                  	mov     ax,1125h
 35235 00006726 CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - REDIRECTED PRINTER MODE
 35236                                  			; STACK: WORD subfunction
 35237                                  			; Return: CF set on error, AX = error code
 35238                                  			; STACK unchanged
 35239 00006728 5B                      	pop	bx
 35240                                  	; 17/12/2022
 35241                                  	;JC	short func_err2
 35242 00006729 7390                    	jnc	short Commit_Okj2
 35243                                  	; 01/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 35244                                  	;;jmp	SYS_RET_OK
 35245                                  	;jmp	short Commit_Okj2
 35246                                  	
 35247                                  func_err2:
 35248 0000672B E9249F                  	jmp	SYS_RET_ERR
 35249                                  
 35250                                  ;Break	<$SetExtendedError - set extended error for later retrieval>
 35251                                  ;--------------------------------------------------------------------------
 35252                                  ;
 35253                                  ; Procedure Name : $SetExtendedError
 35254                                  ;
 35255                                  ; $SetExtendedError takes extended error information and loads it up for the
 35256                                  ; next extended error call.  This is used by interrupt-level proccessors to
 35257                                  ; mask their actions.
 35258                                  ;
 35259                                  ;   Inputs: DS:SI points to DPL which contains all registers
 35260                                  ;   Outputs: none
 35261                                  ;
 35262                                  ;---------------------------------------------------------------------------
 35263                                  
 35264                                  _$SetExtendedError:
 35265                                  
 35266                                  ;hkn; SS override for all variables used
 35267                                  
 35268 0000672E 8B04                    	mov	ax,[si]
 35269                                  	;MOV	AX,[SI+DPL.AX]
 35270 00006730 36A3[2403]              	MOV	[SS:EXTERR],AX
 35271                                  	;mov	ax,[si+10]
 35272 00006734 8B440A                  	MOV	AX,[SI+DPL.DI]
 35273 00006737 36A3[2803]              	MOV	[SS:EXTERRPT],AX
 35274                                  	;mov	ax,[si+14]
 35275 0000673B 8B440E                  	MOV	AX,[SI+DPL.ES]
 35276 0000673E 36A3[2A03]              	MOV	[SS:EXTERRPT+2],AX
 35277                                  	;mov	ax,[si+2]
 35278 00006742 8B4402                  	MOV	AX,[SI+DPL.BX]
 35279 00006745 36A3[2603]              	MOV	[SS:EXTERR_ACTION],AX
 35280                                  	;mov	ax,[si+4]
 35281 00006749 8B4404                  	MOV	AX,[SI+DPL.CX]
 35282 0000674C 368826[2303]            	MOV	[SS:EXTERR_LOCUS],AH
 35283 00006751 C3                      	retn
 35284                                  
 35285                                  ;============================================================================
 35286                                  ; UTIL.ASM, MSDOS 6.0, 1991
 35287                                  ;============================================================================
 35288                                  ; 05/08/2018 - Retro DOS v3.0
 35289                                  ; 05/05/2019 - Retro DOS v4.0
 35290                                  
 35291                                  ;**	Handle related utilities for MSDOS 2.X.
 35292                                  ;----------------------------------------------------------------------------
 35293                                  ;	pJFNFromHandle	written
 35294                                  ;	SFFromHandle	written
 35295                                  ;	SFFromSFN	written
 35296                                  ;	JFNFree 	written
 35297                                  ;	SFNFree 	written
 35298                                  ;
 35299                                  ;	Modification history:
 35300                                  ;
 35301                                  ;	    Created: MZ 1 April 1983
 35302                                  ;----------------------------------------------------------------------------
 35303                                  
 35304                                  ;	BREAK	<pJFNFromHandle - return pointer to JFN table entry>
 35305                                  
 35306                                  ;**	pJFNFromHandle - Translate Handle to Pointer to JFN
 35307                                  ;----------------------------------------------------------------------------
 35308                                  ;	pJFNFromHandle takes a file handle and turns that into a pointer to
 35309                                  ;	the JFN entry (i.e., to a byte holding the internal file handle #)
 35310                                  ;
 35311                                  ;	NOTE:
 35312                                  ;	  This routine is called from $CREATE_PROCESS_DATA_BLOCK which is called
 35313                                  ;	  at DOSINIT time with SS NOT DOSGROUP
 35314                                  ;
 35315                                  ;	ENTRY	(bx) = handle
 35316                                  ;	EXIT	'C' clear if ok
 35317                                  ;		  (es:di) = address of JFN value
 35318                                  ;		'C' set if error
 35319                                  ;		  (ax) = error code
 35320                                  ;	USES	AX, DI, ES, Flags
 35321                                  ;----------------------------------------------------------------------------
 35322                                  
 35323                                  	; 02/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 35324                                  
 35325                                  pJFNFromHandle:
 35326                                  	; 05/05/2019 - Retro DOS v4.0
 35327                                  	;getdseg <es>			; es -> dosdata
 35328 00006752 2E8E06[0700]            	mov	es,[cs:DosDSeg]
 35329                                  	
 35330                                  	;MOV	ES,[cs:CurrentPDB]	; get user process data block
 35331 00006757 268E06[3003]            	mov	es,[es:CurrentPDB]
 35332                                  
 35333                                  	;cmp	bx,[ES:32h]
 35334 0000675C 263B1E3200              	CMP	BX,[ES:PDB.JFN_Length]	; is handle greater than allocated
 35335 00006761 7204                    	JB	short pjfn10		; no, get offset
 35336                                  ReturnCarry_inv_hndl: ; 05/08/2018 - Retro DOS v3.0
 35337                                  	;mov	al,6
 35338 00006763 B006                    	MOV     AL,error_invalid_handle ; appropriate error
 35339                                  ReturnCarry:
 35340 00006765 F9                      	STC                             ; signal error
 35341 00006766 C3                      	retn				; go back
 35342                                  pjfn10: 
 35343                                  	;les	di,[es:34h]
 35344 00006767 26C43E3400              	LES	DI,[ES:PDB.JFN_Pointer]	; get pointer to beginning of table
 35345 0000676C 01DF                    	ADD	DI,BX			; add in offset, clear 'C'
 35346                                  	;clc
 35347                                  pJFNFromHandle_error:
 35348 0000676E C3                      	retn
 35349                                  
 35350                                  ;BREAK <SFFromHandle - return pointer (or error) to SF entry from handle>
 35351                                  ;----------------------------------------------------------------------------
 35352                                  ;
 35353                                  ; Procedure Name : SFFromHandle
 35354                                  ;
 35355                                  ; SFFromHandle - Given a handle, get JFN and then index into SF table
 35356                                  ;
 35357                                  ;   Input:      BX has handle
 35358                                  ;   Output:     Carry Set
 35359                                  ;                   AX has error code
 35360                                  ;               Carry Reset
 35361                                  ;                   ES:DI has pointer to SF entry
 35362                                  ;   Registers modified: If error, AX,ES, else ES:DI
 35363                                  ; NOTE:
 35364                                  ;   This routine is called from $CREATE_PROCESS_DATA_BLOCK which is called
 35365                                  ;       at DOSINIT time with SS NOT DOSGROUP
 35366                                  ;
 35367                                  ;----------------------------------------------------------------------------
 35368                                  
 35369                                  	; 02/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 35370                                  
 35371                                  SFFromHandle:
 35372 0000676F E8E0FF                  	CALL	pJFNFromHandle		; get jfn pointer
 35373                                  	;retc				; return if error
 35374 00006772 72FA                    	jc	short pJFNFromHandle_error
 35375 00006774 26803DFF                	CMP     BYTE [ES:DI],-1		; unused handle
 35376                                  	;JNZ	short GetSF		; nope, suck out SF
 35377                                  	;;mov	al,6
 35378                                  	;MOV	AL,error_invalid_handle ; appropriate error
 35379                                  	;jmp	short ReturnCarry	; signal it
 35380                                  	; 17/12/2022
 35381                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 35382 00006778 74E9                    	jz	short ReturnCarry_inv_hndl ; Retro DOS v3.0 modification
 35383                                  	;JNZ	short GetSF		; nope, suck out SF
 35384                                  	;;mov	al,6
 35385                                  	;MOV	AL,error_invalid_handle ; appropriate error
 35386                                  	;jmp	short ReturnCarry	; signal it
 35387                                  GetSF:
 35388 0000677A 53                      	push	bx			; save handle
 35389 0000677B 268A1D                  	MOV     BL,[ES:DI]		; get SFN
 35390 0000677E 30FF                    	XOR     BH,BH                   ; ignore upper half
 35391 00006780 E80200                  	CALL    SFFromSFN               ; get real sf spot
 35392 00006783 5B                      	pop	bx			; restore
 35393 00006784 C3                      	retn                        	; say goodbye
 35394                                  
 35395                                  ;BREAK <SFFromSFN - index into SF table for SFN>
 35396                                  
 35397                                  ;**	SFFromSFN - Get an SF Table entry from an SFN
 35398                                  ;----------------------------------------------------------------------------
 35399                                  ;	SFFromSfn uses an SFN to index an entry into the SF table. This
 35400                                  ;	is more than just a simple index instruction because the SF table
 35401                                  ;	can be made up of multiple pieces chained together. We follow the
 35402                                  ;	chain to the right piece and then do the index operation.
 35403                                  ;
 35404                                  ;   NOTE:
 35405                                  ;	This routine is called from SFFromHandle which is called
 35406                                  ;       at DOSINIT time with SS NOT DOSGROUP
 35407                                  ;
 35408                                  ;	ENTRY	BX has SF index
 35409                                  ;	EXIT	'C' clear if OK
 35410                                  ;		  ES:DI points to SF entry
 35411                                  ;		'C' set if index too large
 35412                                  ;	USES	BX, DI, ES
 35413                                  ;----------------------------------------------------------------------------
 35414                                  
 35415                                  	; 02/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 35416                                  
 35417                                  SFFromSFN:
 35418                                  	; 05/05/2019 - Retro DOS v4.0
 35419                                  	;getdseg <es>			; es -> dosdata
 35420 00006785 2E8E06[0700]            	mov	es,[cs:DosDSeg]
 35421                                  
 35422                                  	;LES	DI,[CS:SFT_ADDR]	; (es:di) = start of SFT table
 35423 0000678A 26C43E[2A00]            	les	di,[es:SFT_ADDR]
 35424                                  sfsfn5:	
 35425                                  	;cmp	bx,[es:di+4]
 35426 0000678F 263B5D04                	CMP	BX,[ES:DI+SFT.SFCount]	; is handle in this table?
 35427 00006793 720E                    	JB	short sfsfn7		; yes, go grab it
 35428                                  	;sub	bx,[es:di+4]
 35429 00006795 262B5D04                	SUB     BX,[ES:DI+SFT.SFCount]
 35430 00006799 26C43D                  	les	di,[es:di] ; 14/08/2018
 35431                                  	;LES	DI,[ES:DI+SFT.SFLink]	; get next table segment
 35432 0000679C 83FFFF                  	CMP     DI,-1                   ; end of tables?
 35433 0000679F 75EE                    	JNZ	short sfsfn5		; no, try again
 35434 000067A1 F9                      	STC
 35435 000067A2 C3                      	retn				; return with error, not found
 35436                                  sfsfn7:
 35437 000067A3 50                      	push	ax
 35438                                  	;mov	ax,53 ; MSDOS 3.3
 35439                                  	;mov	ax,59 ; MSDOS 6.0
 35440                                  	;MOV	AX,SF_ENTRY.size	; put it in a nice place
 35441                                  	
 35442                                  	; 17/12/2022
 35443 000067A4 B03B                    	mov	al,SF_ENTRY.size ; 28/05/2019
 35444                                  	; 07/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 35445                                  	;mov	ax,SF_ENTRY.size ; 59
 35446                                  	
 35447 000067A6 F6E3                    	MUL	BL			; (ax) = offset into this SF block
 35448 000067A8 01C7                    	ADD	DI,AX			; add base of SF block
 35449 000067AA 58                      	pop	ax
 35450                                  	;add	di,6
 35451 000067AB 83C706                  	ADD	DI,SFT.SFTable		; offset into structure, 'C' cleared
 35452 000067AE C3                      	retn				; return with 'C' clear
 35453                                  
 35454                                  ;	BREAK <JFNFree - return a jfn pointer if one is free>
 35455                                  
 35456                                  ;**	JFNFree - Find a Free JFN Slot
 35457                                  ;----------------------------------------------------------------------------
 35458                                  ;	JFNFree scansthrough the JFN table and returnsa pointer to a free slot
 35459                                  ;
 35460                                  ;	ENTRY	(ss) = DOSDATA
 35461                                  ;	EXIT	'C' clear if OK
 35462                                  ;		  (bx) = new handle
 35463                                  ;		  (es:di) = pointer to JFN slot
 35464                                  ;		'C' set if error
 35465                                  ;		  (al) = error code
 35466                                  ;	USES	bx, di, es, flags
 35467                                  ;----------------------------------------------------------------------------
 35468                                  
 35469                                  JFNFree:
 35470 000067AF 31DB                    	XOR	BX,BX			; (bx) = initial JFN to try
 35471                                  jfnf1:	
 35472 000067B1 E89EFF                  	CALL	pJFNFromHandle		; get the appropriate handle
 35473 000067B4 7209                    	JC	short jfnf5		; no more handles
 35474 000067B6 26803DFF                	CMP     BYTE [ES:DI],-1		; free?
 35475 000067BA 7405                    	je	short jfnfx		; yes, carry is clear
 35476 000067BC 43                      	INC     BX                      ; no, next handle
 35477 000067BD EBF2                    	JMP	short jfnf1		; and try again
 35478                                  
 35479                                  	; Error. 'C' set
 35480                                  jfnf5:	
 35481                                  	;mov	al,4
 35482 000067BF B004                    	MOV	AL,error_too_many_open_files
 35483                                  jfnfx:	
 35484 000067C1 C3                      	retn				; bye
 35485                                  
 35486                                  ;	BREAK <SFNFree - Allocate a free SFN>
 35487                                  
 35488                                  ;**	SFNFree - Allocate a Free SFN/SFT
 35489                                  ;----------------------------------------------------------------------------
 35490                                  ;	SFNFree scans through the sf table looking for a free entry
 35491                                  ;	If it finds one it partially allocates it by setting SFT_REF_COUNT = -1
 35492                                  ;
 35493                                  ;	The problem is that we want to mark the SFT busy so that other threads
 35494                                  ;	can't allocate the SFT before we're finished marking it up.  However,
 35495                                  ;	we can't just mark it busy because we may get blown out of our open
 35496                                  ;	by INT24 and leave the thing orphaned.	To solve this we mark it
 35497                                  ;	"allocation in progress" by setting SFT_REF_COUNT = -1.  If we see
 35498                                  ;	an SFT with this value we look to see if it belongs to this user
 35499                                  ;	and process.  If it does belong to us then it must be an orphan
 35500                                  ;	and we reclaim it.
 35501                                  ;
 35502                                  ;	BUGBUG - improve the performance. I guess it's smaller to call SFFromSFN
 35503                                  ;		over and over, but we could at least set a high water mark...
 35504                                  ;		cause an N^2 loop calling slow SFFromSFN is real slow, too slow
 35505                                  ;		even though this is not a frequently called routine - jgl
 35506                                  ;
 35507                                  ;	ENTRY	(ss) = DOSDATA
 35508                                  ;	EXIT	'C' clear if no error
 35509                                  ;		  (bx) = SFN
 35510                                  ;		  (es:di) = pointer to SFT
 35511                                  ;		  es:[di].SFT_REF_COUNT = -1
 35512                                  ;		'C' set if error
 35513                                  ;		  (al) = error code
 35514                                  ;	USES	bx, di, es, Flags
 35515                                  ;----------------------------------------------------------------------------
 35516                                  
 35517                                  	; 02/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 35518                                  	; DOSCODE:A682h (MSDOS 5.0 MSDOS.SYS)
 35519                                  
 35520                                  SFNFree:
 35521                                  	; 12/08/2018
 35522                                  	; 05/08/2018 - Retro DOS v3.0
 35523                                  	;
 35524                                  	; MSDOS 6.0
 35525 000067C2 50                      	push	ax
 35526 000067C3 31DB                    	xor	bx,bx			; (bx) = SFN to consider
 35527                                  sfnf5:	
 35528 000067C5 53                      	push	bx
 35529 000067C6 E8BCFF                  	call	SFFromSFN		; get the potential handle
 35530 000067C9 5B                      	pop	bx
 35531 000067CA 723A                    	jc	short sfnf95		; no more free SFNs
 35532 000067CC 26833D00                	cmp	word [ES:DI],0
 35533                                  	;cmp	word [ES:DI+SF_ENTRY.sf_Ref_Count],0 ; free?
 35534 000067D0 741D                    	je	short sfnf20			; yep, got one
 35535                                  	
 35536                                  	;cmp	word [es:di],0FFFFh ; -1
 35537 000067D2 26833DFF                	cmp	word [ES:DI],sf_busy
 35538                                  	;cmp	word [ES:DI+SF_ENTRY.sf_ref_count],sf_busy
 35539 000067D6 7403                    	je	short sfnf10		; special busy mark
 35540                                  sfnf7:	
 35541 000067D8 43                      	inc	bx			; try the next one
 35542 000067D9 EBEA                    	jmp	short sfnf5
 35543                                  
 35544                                  ;	The SFT has the special "busy" mark; if it belongs to us then
 35545                                  ;	it was abandoned during a earlier call and we can use it.
 35546                                  ;
 35547                                  ;	(bx)	= SFN
 35548                                  ;	(es:di) = pointer to SFT
 35549                                  ;	(TOS)	= caller's (ax)
 35550                                  
 35551                                  sfnf10:	
 35552 000067DB 36A1[3E03]              	mov	ax,[SS:USER_ID]
 35553                                  	;cmp	[es:di+2Fh],ax
 35554 000067DF 2639452F                	cmp	[ES:DI+SF_ENTRY.sf_UID],ax
 35555 000067E3 75F3                    	jnz	short sfnf7		; not ours
 35556 000067E5 36A1[3C03]              	mov	ax,[SS:PROC_ID]
 35557                                  	;cmp	[es:di+31h],ax
 35558 000067E9 26394531                	cmp	[ES:DI+SF_ENTRY.sf_PID],ax
 35559 000067ED 75E9                    	jnz	short sfnf7		; can't use this one, try the next
 35560                                  
 35561                                  ;	We have an SFT to allocate
 35562                                  ;
 35563                                  ;	(bx)	= SFN
 35564                                  ;	(es:di) = pointer to SFT
 35565                                  ;	(TOS)	= caller's (ax)
 35566                                  
 35567                                  sfnf20:
 35568                                  	; cf = 0 ;; Retro DOS v3.0
 35569                                  
 35570                                  	;mov	word [es:di],0FFFFh
 35571 000067EF 26C705FFFF              	mov	word [ES:DI],sf_busy
 35572                                  					; make sure that this is allocated
 35573                                  	;mov	word [ES:DI+SF_ENTRY.sf_ref_count],sf_busy
 35574                                  
 35575 000067F4 36A1[3E03]              	mov	ax,[SS:USER_ID]
 35576                                  	;mov	[es:di+2Fh],ax
 35577 000067F8 2689452F                	mov	[ES:DI+SF_ENTRY.sf_UID],ax
 35578 000067FC 36A1[3C03]              	mov	ax,[SS:PROC_ID]
 35579                                  	;mov	[es:di+31h],ax
 35580 00006800 26894531                	mov	[ES:DI+SF_ENTRY.sf_PID],ax
 35581                                  sfnf21: ;; Retro DOS v3.0
 35582                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 35583                                  	;pop	ax
 35584                                  	;;clc
 35585                                  	;retn				; return with no error
 35586                                  	; 17/12/2022
 35587 00006804 58                      	pop	ax
 35588                                  	;clc
 35589 00006805 C3                      	retn
 35590                                  
 35591                                  ;**	Error - no more free SFNs
 35592                                  ;
 35593                                  ;	'C' set
 35594                                  ;	(TOS) = saved ax
 35595                                  
 35596                                  sfnf95: 
 35597 00006806 58                      	pop	ax
 35598                                  	;mov	al,4
 35599 00006807 B004                    	mov	al,error_too_many_open_files
 35600 00006809 C3                      	retn				; return with 'C' and error
 35601                                  
 35602                                  ;============================================================================
 35603                                  ; HANDLE.ASM, MSDOS 6.0, 1991
 35604                                  ;============================================================================
 35605                                  ; 13/07/2018 - Retro DOS v3.0
 35606                                  ; 20/05/2019 - Retro DOS v4.0
 35607                                  
 35608                                  ; DOSCODE:A72Bh (MSDOS 6.21, MSDOS.SYS)
 35609                                  
 35610                                  ;	BREAK <$Close - return a handle to the system>
 35611                                  ;----------------------------------------------------------------------------
 35612                                  ;
 35613                                  ;**	$Close - Close a file Handle
 35614                                  ;
 35615                                  ;	BUGBUG - close gets called a LOT with invalid handles - sizzle that
 35616                                  ;		path
 35617                                  ;
 35618                                  ;	Assembler usage:
 35619                                  ;	    MOV     BX, handle
 35620                                  ;	    MOV     AH, Close
 35621                                  ;	    INT     int_command
 35622                                  ;
 35623                                  ;	ENTRY	(bx) = handle
 35624                                  ;	EXIT	<normal INT21 return convention>
 35625                                  ;	USES	all
 35626                                  ;
 35627                                  ;----------------------------------------------------------------------------
 35628                                  
 35629                                  ; 02/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 35630                                  ; DOSCODE:A6CBh (MSDOS 5.0 MSDOS.SYS)
 35631                                  
 35632                                  _$CLOSE:
 35633                                  ;	Grab the SFT pointer from the JFN.
 35634                                  
 35635 0000680A E85A02                  	call	CheckOwner		; get system file entry
 35636 0000680D 722B                    	jc	short CloseError	; error return
 35637 0000680F 16                      	push	ss
 35638 00006810 1F                      	pop	ds			; For DOS_CLOSE
 35639 00006811 893E[9E05]              	MOV	[THISSFT],DI		; save offset of pointer
 35640 00006815 8C06[A005]              	MOV	[THISSFT+2],ES		; save segment value
 35641                                  
 35642                                  ; DS:SI point to JFN table entry.
 35643                                  ; ES:DI point to SFT
 35644                                  ;
 35645                                  ; We now examine the user's JFN entry; If the file was a 70-mode file (network
 35646                                  ; FCB, we examine the ref count on the SFT;  if it was 1, we free the JFN.
 35647                                  ; If the file was not a net FCB, we free the JFN too.
 35648                                  
 35649                                  	;CMP	word [ES:DI+SF_ENTRY.sf_ref_count],1
 35650 00006819 26833D01                	cmp	word [ES:DI],1		; will the SFT become free?
 35651 0000681D 740A                    	jz	short FreeJFN 		; yes, free JFN anyway.
 35652                                  	;mov	al,[ES:DI+2]
 35653 0000681F 268A4502                	MOV	AL,[ES:DI+SF_ENTRY.sf_mode]
 35654                                  	;and	al,0F0h
 35655 00006823 24F0                    	AND	AL,SHARING_MASK
 35656                                  	;cmp	al,70h
 35657 00006825 3C70                    	CMP	AL,SHARING_NET_FCB
 35658 00006827 7407                    	JZ	short PostFree		; 70-mode and big ref count => free it
 35659                                  
 35660                                  ; The JFN must be freed.  Get the pointer to it and replace the contents with
 35661                                  ; -1.
 35662                                  
 35663                                  FreeJFN:
 35664 00006829 E826FF                  	call	pJFNFromHandle		;   d = pJFN (handle);
 35665 0000682C 26C605FF                	MOV	BYTE [ES:DI],0FFh	; release the JFN
 35666                                  PostFree:
 35667                                  
 35668                                  ; ThisSFT is correctly set, we have DS = DOSDATA. Looks OK for a DOS_CLOSE!
 35669                                  
 35670 00006830 E86DC7                  	call	DOS_CLOSE
 35671                                  
 35672                                  ; DOS_Close may return an error. If we see such an error, we report it but
 35673                                  ; the JFN stays closed because DOS_Close always frees the SFT!
 35674                                  
 35675 00006833 7205                    	JC	short CloseError
 35676                                  	;mov	ah,3Eh
 35677 00006835 B43E                    	MOV	AH,CLOSE		; MZ Bogus multiplan fix
 35678                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 35679                                  CloseOk:
 35680 00006837 E90F9E                  	jmp	SYS_RET_OK
 35681                                  CloseError:
 35682 0000683A E9159E                  	jmp	SYS_RET_ERR
 35683                                  
 35684                                  ;	BREAK <$Commit - commit the file>
 35685                                  ;----------------------------------------------------------------------------
 35686                                  ;
 35687                                  ;**	$Commit - Commit a File
 35688                                  ;
 35689                                  ;	$Commit "commits" a file to disk - all of it's buffers are
 35690                                  ;	flushed out.  BUGBUG - I'm pretty sure that $Commit doesn't update
 35691                                  ;	the directory entry, etc., so this commit is pretty useless. check
 35692                                  ;	and fix this!! jgl
 35693                                  ;
 35694                                  ;	Assembler usage:
 35695                                  ;	    MOV     BX, handle
 35696                                  ;	    MOV     AH, Commit
 35697                                  ;	    INT     int_command
 35698                                  ;
 35699                                  ;	ENTRY	(bx) = handle
 35700                                  ;	EXIT	none
 35701                                  ;	USES	all
 35702                                  ;;----------------------------------------------------------------------------
 35703                                  
 35704                                  _$COMMIT:
 35705                                  ;	Grab the SFT pointer from the JFN.
 35706                                  
 35707 0000683D E82702                  	call	CheckOwner		; get system file entry
 35708 00006840 7213                    	JC	short CommitError	; error return
 35709 00006842 16                      	push	ss
 35710 00006843 1F                      	pop	ds			; For DOS_COMMIT
 35711 00006844 893E[9E05]              	MOV	[THISSFT],DI		; save offset of pointer
 35712 00006848 8C06[A005]              	MOV	[THISSFT+2],ES		; save segment value
 35713                                  
 35714                                  ;	ThisSFT is correctly set, we have DS = DOSDATA. Looks OK for a DOS_COMMIT
 35715                                  ;
 35716                                  ;	ES:DI point to SFT
 35717                                  
 35718 0000684C E8A6C8                  	call	DOS_COMMIT
 35719 0000684F 7204                    	JC	short CommitError
 35720                                  	; 07/12/2022
 35721                                  	;jc	short CloseError
 35722                                  	;mov	ah,68h
 35723 00006851 B468                    	MOV	AH,COMMIT
 35724                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 35725                                  	;jmp	SYS_RET_OK
 35726                                  CommitOk:
 35727 00006853 EBE2                    	jmp	short CloseOk	
 35728                                  
 35729                                  CommitError:
 35730                                  	; 07/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 35731                                  	;jmp	SYS_RET_ERR
 35732 00006855 EBE3                    	jmp	short CloseError
 35733                                  
 35734                                  ;	BREAK <$ExtHandle - extend handle count>
 35735                                  
 35736                                  ;**	$ExtHandle - Extend Handle Count
 35737                                  ;----------------------------------------------------------------------------
 35738                                  ;	Assembler usage:
 35739                                  ;	    MOV     BX, Number of Opens Allowed (MAX=65534;66535 is
 35740                                  ;	    MOV     AX, 6700H			 reserved to mark SFT
 35741                                  ;	    INT     int_command 		 busy )
 35742                                  ;
 35743                                  ;	ENTRY	(bx) = new number of handles
 35744                                  ;	EXIT	'C' clear if OK
 35745                                  ;		'C' set iff err
 35746                                  ;		  (ax) = error code
 35747                                  ;			 AX = error_not_enough_memory
 35748                                  ;			      error_too_many_open_files
 35749                                  ;	USES	all
 35750                                  ;----------------------------------------------------------------------------
 35751                                  
 35752                                  _$ExtHandle:
 35753 00006857 31ED                    	XOR	BP,BP			; 0: enlarge   1: shrink  2:psp
 35754                                  	;cmp	bx,20
 35755 00006859 83FB14                  	CMP	BX,FILPERPROC
 35756 0000685C 7303                    	JAE	short exth2		; Don't set less than FilPerProc no
 35757 0000685E BB1400                  	MOV	BX,FILPERPROC
 35758                                  exth2:	
 35759 00006861 368E06[3003]            	MOV	ES,[ss:CurrentPDB]	; get user process data block;smr;SS Override
 35760                                  	;mov	cx,[ES:32h]
 35761 00006866 268B0E3200              	MOV	CX,[ES:PDB.JFN_Length]	; get number of handle allowed
 35762 0000686B 39CB                    	CMP	BX,CX			; the requested == current
 35763 0000686D 7455                    	JE	short ok_done 		; yes and exit
 35764 0000686F 7722                    	JA	short larger		; go allocate new table
 35765                                  
 35766                                  ;	We're going to shrink the # of handles available
 35767                                  
 35768 00006871 BD0100                  	MOV	BP,1			; shrink
 35769                                  	;mov	ds,[ES:36h]
 35770 00006874 268E1E3600              	MOV	DS,[ES:PDB.JFN_Pointer+2] ;
 35771 00006879 89DE                    	MOV	SI,BX			;
 35772 0000687B 29D9                    	SUB	CX,BX			; get difference
 35773                                  
 35774                                  ;	BUGBUG - code a SCASB here, should be a bit smaller
 35775                                  chck_handles:
 35776 0000687D 803CFF                  	CMP	BYTE [SI],-1		; scan through handles to ensure close
 35777 00006880 753D                    	JNZ	short too_many_files	; status
 35778 00006882 46                      	INC	SI
 35779 00006883 E2F8                    	LOOP	chck_handles
 35780 00006885 83FB14                  	CMP	BX,FILPERPROC		; = 20
 35781 00006888 7709                    	JA	short larger		; no
 35782                                  
 35783 0000688A BD0200                  	MOV	BP,2			; psp
 35784                                  	;mov	di,24
 35785 0000688D BF1800                  	MOV	DI,PDB.JFN_TABLE	; es:di -> jfn table in psp
 35786 00006890 53                      	PUSH	BX
 35787 00006891 EB1D                    	JMP	short movhandl
 35788                                  
 35789                                  larger:
 35790 00006893 83FBFF                  	CMP	BX,-1			; 65535 is not allowed
 35791 00006896 747F                    	JZ	short invalid_func	; 10/08/2018
 35792 00006898 F8                      	CLC
 35793 00006899 53                      	PUSH	BX			; save requested number
 35794 0000689A 83C30F                  	ADD	BX,0FH			; adjust to paragraph boundary
 35795 0000689D B104                    	MOV	CL,4
 35796                                  	;ror	bx,cl			; MSDOS 3.3
 35797 0000689F D3DB                    	RCR	BX,CL			; DOS 4.00 fix		;AC000;
 35798 000068A1 81E3FF1F                	AND	BX,1FFFH		; clear most 3 bits
 35799                                  
 35800 000068A5 55                      	PUSH	BP
 35801 000068A6 E8DBFA                  	call	_$ALLOC			; allocate memory
 35802 000068A9 5D                      	POP	BP
 35803 000068AA 7266                    	JC	short no_memory		; not enough meory
 35804                                  
 35805 000068AC 8EC0                    	MOV	ES,AX			; es:di points to new table memory
 35806 000068AE 31FF                    	XOR	DI,DI
 35807                                  movhandl:
 35808 000068B0 368E1E[3003]            	MOV	DS,[ss:CurrentPDB] 	; get user PDB address	;smr;SS Override
 35809                                  
 35810 000068B5 F7C50300                	test	BP,3			; enlarge ?
 35811 000068B9 740C                    	JZ	short enlarge 		; yes
 35812 000068BB 59                      	POP	CX			; cx = the amount you shrink
 35813 000068BC 51                      	PUSH	CX
 35814 000068BD EB0C                    	JMP	short copy_hand
 35815                                  
 35816                                  ;	Done.  'C' clear
 35817                                  
 35818                                  ; 17/12/2022
 35819                                  ;ok_done:
 35820                                  ;	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 35821                                  ;	;jmp	short CommitOk
 35822                                  ;	; 17/12/2022
 35823                                  ;	jmp	SYS_RET_OK
 35824                                  
 35825                                  too_many_files:
 35826                                  	;mov	al,4
 35827 000068BF B004                    	MOV	AL,error_too_many_open_files
 35828                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 35829                                  	;jmp	SYS_RET_ERR
 35830                                  CommitErrorj:
 35831                                  	;jmp	short CommitError
 35832                                  	; 17/12/2022
 35833 000068C1 E98E9D                  	jmp	SYS_RET_ERR
 35834                                  
 35835                                  ; 17/12/2022 
 35836                                  ok_done:
 35837                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 35838                                  	;jmp	short CommitOk
 35839                                  	; 17/12/2022
 35840 000068C4 E9829D                  	jmp	SYS_RET_OK
 35841                                  
 35842                                  enlarge:
 35843                                  	;mov	cx,[32h]
 35844 000068C7 8B0E3200                	MOV	CX,[PDB.JFN_Length]	; get number of old handles
 35845                                  copy_hand:
 35846 000068CB 89CA                    	MOV	DX,CX
 35847                                  	;lds	si,[34h]
 35848 000068CD C5363400                	LDS	SI,[PDB.JFN_Pointer]	; get old table pointer
 35849 000068D1 F3A4                    	REP	MOVSB			; copy infomation to new table
 35850 000068D3 59                      	POP	CX			; get new number of handles
 35851 000068D4 51                      	PUSH	CX			; save it again
 35852 000068D5 29D1                    	SUB	CX,DX			; get the difference
 35853 000068D7 B0FF                    	MOV	AL,-1			; set availability to handles
 35854 000068D9 F3AA                    	REP	STOSB
 35855 000068DB 368E1E[3003]            	MOV	DS,[ss:CurrentPDB] 	; get user process data block;smr;SS Override
 35856                                  	;cmp	word [34h],0
 35857 000068E0 833E340000              	CMP	WORD [PDB.JFN_Pointer],0 ; check if original table pointer
 35858 000068E5 750D                    	JNZ	short update_info	; yes, go update PDB entries
 35859 000068E7 55                      	PUSH	BP
 35860 000068E8 1E                      	PUSH	DS			; save old table segment
 35861 000068E9 06                      	PUSH	ES			; save new table segment
 35862 000068EA 8E063600                	MOV	ES,[PDB.JFN_Pointer+2]	; get old table segment
 35863 000068EE E80DFC                  	call	_$DEALLOC		; deallocate old table meomory
 35864 000068F1 07                      	POP	ES			; restore new table segment
 35865 000068F2 1F                      	POP	DS			; restore old table segment
 35866 000068F3 5D                      	POP	BP
 35867                                  
 35868                                  update_info:
 35869 000068F4 F7C50200                	test	BP,2			; psp?
 35870 000068F8 7408                    	JZ	short non_psp 		; no
 35871                                  	;mov	word [34h],18h ; 24
 35872 000068FA C70634001800            	MOV	WORD [PDB.JFN_Pointer],PDB.JFN_TABLE ; restore
 35873 00006900 EB06                    	JMP	short final
 35874                                  non_psp:
 35875                                  	;mov	word [34h],0
 35876 00006902 C70634000000            	MOV	WORD [PDB.JFN_Pointer],0 ; new table pointer offset always 0
 35877                                  final:
 35878                                  	;mov	[36h],es	
 35879 00006908 8C063600                	MOV	[PDB.JFN_Pointer+2],ES	; update table pointer segment
 35880                                  	;pop	word [32h]
 35881 0000690C 8F063200                	POP	word [PDB.JFN_Length]	; restore new number of handles
 35882                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 35883                                  	;jmp	SYS_RET_OK
 35884                                  ok_done_j:
 35885 00006910 EBB2                    	jmp	short ok_done
 35886                                  
 35887                                  no_memory:
 35888 00006912 5B                      	POP	BX			; clean stack
 35889                                  	;mov	al,8
 35890 00006913 B008                    	MOV	AL,error_not_enough_memory
 35891                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 35892                                  	;jmp	SYS_RET_ERR
 35893                                  CommitErrorj2:
 35894 00006915 EBAA                    	jmp	short CommitErrorj
 35895                                  
 35896                                  invalid_func:
 35897                                  	;mov	al,1
 35898 00006917 B001                    	MOV	AL,error_invalid_function
 35899                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 35900                                  	;jmp	SYS_RET_ERR
 35901                                  CommitErrorj3:
 35902                                  	;jmp	short CommitErrorj2
 35903                                  	; 17/12/2022
 35904 00006919 EBA6                    	jmp	short CommitErrorj
 35905                                  
 35906                                  ; 20/05/2019 - Retro DOS v4.0
 35907                                  ; DOSCODE:A83Ah (MSDOS 6.21, MSDOS.SYS)
 35908                                  
 35909                                  ; 02/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 35910                                  ; DOSCODE:A7DAh (MSDOS 5.0 MSDOS.SYS)
 35911                                  
 35912                                  ;	BREAK <$READ - Read from a file handle>
 35913                                  ;----------------------------------------------------------------------------
 35914                                  ;
 35915                                  ;**	$Read - Read from a File Handle
 35916                                  ;
 35917                                  ;   Assembler usage:
 35918                                  ;
 35919                                  ;	LDS	DX, buf
 35920                                  ;	MOV	CX, count
 35921                                  ;	MOV	BX, handle
 35922                                  ;	MOV	AH, Read
 35923                                  ;	INT	int_command
 35924                                  ;	  AX has number of bytes read
 35925                                  ;
 35926                                  ;	ENTRY	(bx) = file handle
 35927                                  ;		(cx) = byte count
 35928                                  ;		(ds:dx) = buffer address
 35929                                  ;	EXIT	Through system call return so that to user:
 35930                                  ;		  'C' clear if OK
 35931                                  ;		    (ax) = bytes read
 35932                                  ;		  'C' set if error
 35933                                  ;		    (ax) = error code
 35934                                  ;
 35935                                  ;----------------------------------------------------------------------------
 35936                                  
 35937                                  _$READ:
 35938 0000691B BE[6333]                	MOV	SI,DOS_READ
 35939                                  ReadDo:
 35940 0000691E E831FE                  	call	pJFNFromHandle
 35941 00006921 7208                    	JC	short ReadError
 35942                                  
 35943 00006923 268A05                  	MOV	AL,[ES:DI]
 35944 00006926 E83E01                  	call	CheckOwner		; get the handle
 35945 00006929 7303                    	JNC	short ReadSetup		; no errors do the operation
 35946                                  
 35947                                  ;	Have an error. 'C' set
 35948                                  
 35949                                  ReadError:
 35950                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 35951                                  	;;jmp	SYS_RET_ERR		; go to error traps
 35952                                  	;jmp	short CommitErrorj3
 35953                                  	; 17/12/2022
 35954 0000692B E9249D                  	jmp	SYS_RET_ERR
 35955                                  
 35956                                  ReadSetup:
 35957 0000692E 36893E[9E05]            	MOV	[ss:THISSFT],DI		; save offset of pointer;smr;SS Override
 35958 00006933 368C06[A005]            	MOV	[ss:THISSFT+2],ES	; save segment value	;smr;SS Override
 35959                                  	; 20/05/2019 - Retro DOS v4.0
 35960                                  	; MSDOS 6.0 
 35961                                  ;; Extended Open
 35962                                  	;test	byte [es:di+3],20h
 35963 00006938 26F6450320              	test	byte [ES:DI+SF_ENTRY.sf_mode+1],(INT_24_ERROR>>8)
 35964                                  						 ;AN000;;EO. need i24
 35965 0000693D 7406                    	JZ	short needi24 		     	 ;AN000;;EO. yes
 35966 0000693F 36800E[F605]02          	OR	byte [ss:EXTOPEN_ON],EXT_OPEN_I24_OFF ; 2
 35967                                  					;AN000;;EO. set it off;smr;SS Override
 35968                                  needi24:				;AN000;
 35969                                  ;; Extended Open
 35970 00006945 36FF36[2C03]            	push	word [SS:DMAADD]
 35971 0000694A 36FF36[2E03]            	push	word [SS:DMAADD+2]	;smr;SS Override
 35972                                  
 35973                                  ;;;;;	BAD SPOT FOR 286!!! SEGMENT ARITHMETIC!!!
 35974                                  
 35975                                  	; 26/07/2019
 35976                                  
 35977                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 35978                                  	;
 35979                                  	; (It is not necessary to call 'Align_Buffer' proc here/below because
 35980                                  	; there is not another caller; it is better to put the code in this proc
 35981                                   	; here instead of calling it as a subroutine; but I have modified code
 35982                                  	; here for MSDOS 5.0 MSDOS.SYS address compatibility)
 35983                                  
 35984                                  	; MSDOS 6.0
 35985 0000694F E81300                  	CALL	Align_Buffer		;AN000;MS. align user's buffer
 35986                                  	
 35987                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 35988                                  	; MSDOS 3.3
 35989                                  	;MOV	BX,DX			; copy offset
 35990                                  	;push	cx			; don't stomp on count
 35991                                  	;MOV	CL,4			; bits to shift bytes->para
 35992                                  	;SHR	BX,CL			; get number of paragraphs
 35993                                  	;pop	cx			; get count back
 35994                                  	;MOV	AX,DS			; get original segment
 35995                                  	;ADD	AX,BX			; get new segment
 35996                                  	;MOV	DS,AX			; in seg register
 35997                                  	;AND	DX,0Fh			; normalize offset
 35998                                  	;MOV	[ss:DMAADD],DX		; use user DX as offset	;smr;SS Override
 35999                                  	;MOV	[ss:DMAADD+2],DS 	; use user DS as segment for DMA
 36000                                  						;smr;SS Override
 36001                                  ;;;;;	END BAD SPOT FOR 286!!! SEGMENT ARITHMETIC!!!
 36002                                  	
 36003 00006952 16                      	push	ss			; go for DOS addressability
 36004 00006953 1F                      	pop	ds
 36005                                  
 36006 00006954 FFD6                    	CALL	SI ; DOS_READ		; indirect call to operation
 36007                                  
 36008 00006956 8F06[2E03]              	pop	word [DMAADD+2]
 36009 0000695A 8F06[2C03]              	pop	word [DMAADD]
 36010                                  	;JNC	short READ_OK		;AN002;
 36011                                  	;JMP	short ReadError		;AN002; if error, say bye bye
 36012                                  	; 17/12/2022
 36013 0000695E 72CB                    	jc	short ReadError
 36014                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 36015                                  	;jnc	short READ_OK		;AN002;
 36016                                  	;jmp	short ReadError
 36017                                  
 36018                                  READ_OK:
 36019 00006960 89C8                    	MOV	AX,CX			; get correct return in correct reg
 36020                                  Read_Okj:
 36021                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 36022                                  	;;jmp	SYS_RET_OK		; successful return
 36023                                  	;jmp	short ok_done_j
 36024                                  	; 17/12/2022
 36025 00006962 E9E49C                  	jmp	SYS_RET_OK
 36026                                  
 36027                                  ; 13/07/2018 - Retro DOS v3.0
 36028                                  
 36029                                  ;----------------------------------------------------------------------------
 36030                                  
 36031                                  ;   Input: DS:DX points to user's buffer addr
 36032                                  ;   Function: rearrange segment and offset for READ/WRITE buffer
 36033                                  ;   Output: [DMAADD] set
 36034                                  
 36035                                  ; 20/05/2019 - Retro DOS v4.0
 36036                                  ; 26/07/2019
 36037                                  ;	; MSDOS 6.0
 36038                                  ;Align_Buffer:
 36039                                  ;	MOV	BX,DX			; copy offset
 36040                                  ;	push	cx			; don't stomp on count
 36041                                  ;	MOV	CL,4			; bits to shift bytes->para
 36042                                  ;	SHR	BX,CL			; get number of paragraphs
 36043                                  ;	pop	cx			; get count back
 36044                                  ;	MOV	AX,DS			; get original segment
 36045                                  ;	ADD	AX,BX			; get new segment
 36046                                  ;	MOV	DS,AX			; in seg register
 36047                                  ;	AND	DX,0Fh			; normalize offset
 36048                                  ;	MOV	[ss:DMAADD],DX		; use user DX as offset	;smr;SS Override
 36049                                  ;	MOV	[ss:DMAADD+2],DS 	; use user DS as segment for DMA
 36050                                  ;						;smr;SS Override
 36051                                  ;	retn
 36052                                  
 36053                                  ; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 36054                                  Align_Buffer:
 36055 00006965 89D3                    	MOV	BX,DX			; copy offset
 36056 00006967 51                      	push	cx			; don't stomp on count
 36057 00006968 B104                    	MOV	CL,4			; bits to shift bytes->para
 36058 0000696A D3EB                    	SHR	BX,CL			; get number of paragraphs
 36059 0000696C 59                      	pop	cx			; get count back
 36060 0000696D 8CD8                    	MOV	AX,DS			; get original segment
 36061 0000696F 01D8                    	ADD	AX,BX			; get new segment
 36062 00006971 8ED8                    	MOV	DS,AX			; in seg register
 36063 00006973 83E20F                  	AND	DX,0Fh			; normalize offset
 36064 00006976 368916[2C03]            	MOV	[ss:DMAADD],DX		; use user DX as offset	;smr;SS Override
 36065 0000697B 368C1E[2E03]            	MOV	[ss:DMAADD+2],DS 	; use user DS as segment for DMA
 36066                                  						;smr;SS Override
 36067 00006980 C3                      	retn
 36068                                  
 36069                                  ; 20/05/2019 - Retro DOS v4.0
 36070                                  ; DOSCODE:A8A0h (MSDOS 6.21, MSDOS.SYS)
 36071                                  
 36072                                  ; 02/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 36073                                  ; DOSCODE:A840h (MSDOS 5.0 MSDOS.SYS)
 36074                                  
 36075                                  ;BREAK <$WRITE - write to a file handle>
 36076                                  ;----------------------------------------------------------------------------
 36077                                  ;
 36078                                  ;   Assembler usage:
 36079                                  ;	    LDS     DX, buf
 36080                                  ;	    MOV     CX, count
 36081                                  ;	    MOV     BX, handle
 36082                                  ;	    MOV     AH, Write
 36083                                  ;	    INT     int_command
 36084                                  ;	  AX has number of bytes written
 36085                                  ;   Errors:
 36086                                  ;	    AX = write_invalid_handle
 36087                                  ;	       = write_access_denied
 36088                                  ;
 36089                                  ;   Returns in register AX
 36090                                  ;
 36091                                  ;----------------------------------------------------------------------------
 36092                                  
 36093                                  _$WRITE:
 36094 00006981 BE[8C35]                	MOV	SI,DOS_WRITE
 36095 00006984 EB98                    	JMP	short ReadDo
 36096                                  
 36097                                  ;BREAK <$LSEEK - move r/w pointer>
 36098                                  ;----------------------------------------------------------------------------
 36099                                  ;
 36100                                  ;   Assembler usage:
 36101                                  ;	    MOV     DX, offsetlow
 36102                                  ;	    MOV     CX, offsethigh
 36103                                  ;	    MOV     BX, handle
 36104                                  ;	    MOV     AL, method
 36105                                  ;	    MOV     AH, LSeek
 36106                                  ;	    INT     int_command
 36107                                  ;	  DX:AX has the new location of the pointer
 36108                                  ;   Error returns:
 36109                                  ;	    AX = error_invalid_handle
 36110                                  ;	       = error_invalid_function
 36111                                  ;   Returns in registers DX:AX
 36112                                  ;
 36113                                  ;----------------------------------------------------------------------------
 36114                                  
 36115                                  ; 21/05/2019 - Retro DOS v4.0
 36116                                  ; DOSCODE:A8A5h (MSDOS 6.21, MSDOS.SYS)
 36117                                  
 36118                                  ; 02/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 36119                                  ; DOSCODE:A845h (MSDOS 5.0 MSDOS.SYS)
 36120                                  
 36121                                  _$LSEEK:
 36122 00006986 E8DE00                  	call	CheckOwner		; get system file entry
 36123                                  
 36124                                  	; 17/12/2022
 36125                                  ;LSeekError:
 36126                                  	;JNC	short CHKOWN_OK		;AN002;
 36127                                  	;JMP	short ReadError		;AN002; error return
 36128                                  	; 17/12/2022
 36129                                  	; 02/06/2019
 36130 00006989 72A0                    	jc	short ReadError
 36131                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 36132                                  	;JNC	short CHKOWN_OK		;AN002;
 36133                                  	;JMP	short ReadError		;AN002; error return
 36134                                  
 36135                                  CHKOWN_OK:
 36136                                  					;AN002;
 36137 0000698B 3C02                    	CMP	AL,2			; is the seek value correct?
 36138 0000698D 760A                    	JBE	short LSeekDisp		; yes, go dispatch
 36139                                  	;mov	byte [ss:EXTERR_LOCUS],1 
 36140 0000698F 36C606[2303]01          	MOV	byte [ss:EXTERR_LOCUS],errLOC_Unk ; Extended Error Locus
 36141                                  					;smr;SS Override
 36142                                  	;mov	al,1
 36143 00006995 B001                    	mov	al,error_invalid_function ; invalid method
 36144                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 36145                                  LSeekError2:
 36146 00006997 EB92                    	jmp	short ReadError
 36147                                  
 36148                                  LSeekDisp:
 36149 00006999 3C01                    	CMP	AL,1			; best way to dispatch; check middle
 36150 0000699B 720A                    	JB	short LSeekStore	; just store CX:DX
 36151 0000699D 771B                    	JA	short LSeekEOF		; seek from end of file
 36152                                  	;add	dx,[es:di+21]
 36153 0000699F 26035515                	ADD	DX,[ES:DI+SF_ENTRY.sf_position]
 36154                                  	;adc	cx,[es:di+23]
 36155 000069A3 26134D17                	ADC	CX,[ES:DI+SF_ENTRY.sf_position+2]
 36156                                  LSeekStore:
 36157 000069A7 89C8                    	MOV	AX,CX			; AX:DX
 36158 000069A9 92                      	XCHG	AX,DX			; DX:AX is the correct value
 36159                                  LSeekSetpos:
 36160                                  	;mov	[es:di+21],ax
 36161 000069AA 26894515                	MOV	[ES:DI+SF_ENTRY.sf_position],AX
 36162                                  	;mov	[es:di+23],dx
 36163 000069AE 26895517                	MOV	[ES:DI+SF_ENTRY.sf_position+2],DX
 36164 000069B2 E8DA9A                  	call	Get_User_Stack
 36165                                  	;mov	[si+6],dx
 36166 000069B5 895406                  	MOV	[SI+user_env.user_DX],DX ; return DX:AX
 36167                                  	;jmp	SYS_RET_OK		; successful return
 36168                                  	; 25/06/2019
 36169                                  	;jmp	SYS_RET_OK_clc
 36170                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 36171                                  	;jmp	SYS_RET_OK_clc
 36172                                  LSeekOk:
 36173 000069B8 EBA8                    	jmp     short Read_Okj
 36174                                  
 36175                                  LSeekEOF:
 36176                                  	;;test	word [es:di+5],8000h
 36177                                  	;test	word [ES:DI+SF_ENTRY.sf_flags],sf_isnet
 36178                                  	; 21/05/2019 - Retro DOS v4.0
 36179 000069BA 26F6450680              	test	byte [ES:DI+SF_ENTRY.sf_flags+1],(sf_isnet>>8)
 36180 000069BF 750A                    	JNZ	short Check_LSeek_Mode	; Is Net
 36181                                  LOCAL_LSeek:
 36182                                  	;add	dx,[es:di+17]
 36183 000069C1 26035511                	ADD	DX,[ES:DI+SF_ENTRY.sf_size]
 36184                                  	;adc	cx,[es:di+19]
 36185 000069C5 26134D13                	ADC	CX,[ES:DI+SF_ENTRY.sf_size+2]
 36186 000069C9 EBDC                    	JMP	short LSeekStore	; go and set the position
 36187                                  
 36188                                  Check_LSeek_Mode:
 36189                                  	;;test	word [es:di+2],8000h
 36190                                  	;test	word [ES:DI+SF_ENTRY.sf_mode],sf_isFCB
 36191                                  	; 21/05/2019
 36192 000069CB 26F6450380              	test	byte [ES:DI+SF_ENTRY.sf_mode+1],(sf_isFCB>>8)
 36193 000069D0 75EF                    	JNZ	short LOCAL_LSeek	; FCB treated like local file
 36194                                  	;mov	ax,[es:di+2]
 36195 000069D2 268B4502                	MOV	AX,[ES:DI+SF_ENTRY.sf_mode]
 36196                                  	;and	ax, 0F0h
 36197 000069D6 25F000                  	AND	AX,SHARING_MASK
 36198                                  	;cmp	ax,40h
 36199 000069D9 83F840                  	CMP	AX,SHARING_DENY_NONE
 36200 000069DC 7405                    	JZ	short NET_LSEEK		; LSEEK exported in this mode
 36201                                  	;cmp	ax,30h
 36202 000069DE 83F830                  	CMP	AX,SHARING_DENY_READ
 36203 000069E1 75DE                    	JNZ	short LOCAL_LSeek	; Treated like local Lseek
 36204                                  NET_LSEEK:
 36205                                  ;	JMP	short LOCAL_LSeek
 36206                                  ; REMOVE ABOVE INSTRUCTION TO ENABLE DCR 142
 36207                                  	;CallInstall Net_Lseek,MultNET,33
 36208                                  	;JNC	short LSeekSetPos
 36209                                  
 36210 000069E3 B82111                  	mov     ax,1121h
 36211 000069E6 CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - SEEK FROM END OF REMOTE FILE
 36212                                  			; CX:DX = offset (in bytes) from end
 36213                                  			; ES:DI -> SFT, SFT DPB field -> DPB of drive with file
 36214                                  			; SS = DOS CS
 36215                                  			; Return: CF set on error
 36216                                  			; CF clear if successful, DX:AX = new file position
 36217 000069E8 73C0                    	jnb     short LSeekSetpos
 36218                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 36219                                  	;jmp	SYS_RET_ERR
 36220                                  ;LSeekError3:
 36221                                  	; 17/12/2022
 36222                                  LSeekError:
 36223                                  	;jmp	short LSeekError2
 36224                                  DupErr:	; 17/12/2022
 36225 000069EA E9659C                  	jmp	SYS_RET_ERR
 36226                                  
 36227                                  ;BREAK <FileTimes - modify write times on a handle>
 36228                                  ;----------------------------------------------------------------------------
 36229                                  ;
 36230                                  ;   Assembler usage:
 36231                                  ;	    MOV AH, FileTimes (57H)
 36232                                  ;	    MOV AL, func
 36233                                  ;	    MOV BX, handle
 36234                                  ;	; if AL = 1 then then next two are mandatory
 36235                                  ;	    MOV CX, time
 36236                                  ;	    MOV DX, date
 36237                                  ;	    INT 21h
 36238                                  ;	; if AL = 0 then CX/DX has the last write time/date
 36239                                  ;	; for the handle.
 36240                                  ;
 36241                                  ;	AL=02		 get extended attributes
 36242                                  ;	   BX=handle
 36243                                  ;	   CX=size of buffer (0, return max size )
 36244                                  ;	   DS:SI query list (si=-1, selects all EA)
 36245                                  ;	   ES:DI buffer to hold EA list
 36246                                  ;
 36247                                  ;	AL=03		 get EA name list
 36248                                  ;	   BX=handle
 36249                                  ;	   CX=size of buffer (0, return max size )
 36250                                  ;	   ES:DI buffer to hold name list
 36251                                  ;
 36252                                  ;	AL=04		 set extended attributes
 36253                                  ;	   BX=handle
 36254                                  ;	   ES:DI buffer of EA list
 36255                                  ;
 36256                                  ;
 36257                                  ;   Error returns:
 36258                                  ;	    AX = error_invalid_function
 36259                                  ;	       = error_invalid_handle
 36260                                  ;
 36261                                  ;----------------------------------------------------------------------------
 36262                                  
 36263                                  ; 21/05/2019 - Retro DOS v4.0
 36264                                  ; DOSCODE:A90Dh (MSDOS 6.21, MSDOS.SYS)
 36265                                  
 36266                                  ; 02/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 36267                                  ; DOSCODE:A8ADh (MSDOS 5.0 MSDOS.SYS)
 36268                                  
 36269                                  _$FILE_TIMES:
 36270                                  	; 13/07/2018 - Retro DOS v3.0
 36271                                  
 36272                                  	; MSDOS 3.3
 36273                                  	;cmp	al,2			; correct subfunction ?
 36274                                  	;jb	short ft1
 36275                                  
 36276                                  	;;mov	byte [ss:EXTERR_LOCUS], 1
 36277                                  	;mov	byte [ss:EXTERR_LOCUS],errLOC_Unk ; Extended Error Locus
 36278                                  						;SS Overr
 36279                                  	;;mov	al,1
 36280                                  	;mov	al,error_invalid_function ; give bad return
 36281                                  	;jmp	SYS_RET_ERR
 36282                                  
 36283                                  	; MSDOS 6.0
 36284 000069ED 3C02                    	cmp	al,2			; correct subfunction ?
 36285 000069EF 7340                    	jae	short inval_func
 36286                                  ;ft1:
 36287 000069F1 E87300                  	call	CheckOwner		; get sft
 36288                                  	; 17/12/2022
 36289 000069F4 72F4                    	jc	short LSeekError	; bad handle
 36290                                  
 36291 000069F6 08C0                    	or	al,al			; get time/date ?
 36292 000069F8 7515                    	jnz	short ft_set_time
 36293                                  
 36294                                  ;------ here we get the time & date from the sft for the user
 36295                                  
 36296 000069FA FA                      	cli				; is this cli/sti reqd ? BUGBUG
 36297                                  	;mov	cx,[es:di+13]
 36298 000069FB 268B4D0D                	mov	cx,[es:di+SF_ENTRY.sf_time] ; get the time
 36299                                  	;mov	dx,[es:di+15]
 36300 000069FF 268B550F                	mov	dx,[es:di+SF_ENTRY.sf_date] ;  & date
 36301 00006A03 FB                      	sti
 36302 00006A04 E8889A                  	call	Get_User_Stack
 36303                                  	;mov	[si+4],cx
 36304 00006A07 894C04                  	mov	[si+user_env.user_CX],cx
 36305                                  	;mov	[si+6],dx
 36306 00006A0A 895406                  	mov	[si+user_env.user_DX],dx
 36307 00006A0D EB1F                    	jmp	short ok_ret
 36308                                  
 36309                                  ;------ here we set the time in sft
 36310                                  
 36311                                  ft_set_time:
 36312 00006A0F E846A9                  	call    ECritSFT
 36313                                  	;mov	[es:di+13],cx
 36314 00006A12 26894D0D                	mov	[es:di+SF_ENTRY.sf_time],cx ; drop in new time
 36315                                  	;mov	[es:di+15],dx
 36316 00006A16 2689550F                	mov	[es:di+SF_ENTRY.sf_date],dx ;  and date	
 36317                                  
 36318 00006A1A 31C0                    	xor	ax, ax
 36319 00006A1C 36FF1E[C800]            	call	far [ss:JShare+(14*4)] ; 14 = ShSU	; SS Override
 36320                                  
 36321                                  ;------ set the flags in SFT entry
 36322                                  	;and	word [es:di+5],0FFBFh
 36323                                  	; 18/12/2022
 36324                                  	;and	byte [es:di+5],0BFh
 36325 00006A21 26806505BF              	and	byte [es:di+SF_ENTRY.sf_flags],~devid_file_clean
 36326                                  	;and	word [es:di+SF_ENTRY.sf_flags],~devid_file_clean 
 36327                                  							; mark file as dirty
 36328                                  	;or	word [es:di+5],4000h
 36329                                  	; 17/12/2022
 36330                                  	;or	byte [es:di+6],40h
 36331 00006A26 26804D0640              	or	byte [es:di+SF_ENTRY.sf_flags+1],(sf_close_nodate>>8)
 36332                                  	;or	word [es:di+SF_ENTRY.sf_flags],sf_close_nodate
 36333                                  							; ask close not to
 36334                                  							;   bother about date
 36335                                  							;   and time
 36336 00006A2B E845A9                  	call	LCritSFT
 36337                                  ok_ret:
 36338                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 36339                                  	; 17/12/2022
 36340 00006A2E E9189C                  	jmp	SYS_RET_OK
 36341                                  	;jmp	short LSeekOk
 36342                                  
 36343                                  inval_func:
 36344                                  	;mov	byte [ss:EXTERR_LOCUS],1
 36345 00006A31 36C606[2303]01          	mov	byte [ss:EXTERR_LOCUS],errLOC_Unk ; Extended Error Locus
 36346                                  						;SS Overr
 36347                                  	;mov	al,1
 36348 00006A37 B001                    	mov	al,error_invalid_function ; give bad return
 36349                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 36350                                  ft_error:
 36351                                  	;;jmp	SYS_RET_ERR
 36352                                  	;jmp	short LSeekError3
 36353                                  	; 17/12/2022
 36354 00006A39 EBAF                    	jmp	short LSeekError
 36355                                  
 36356                                  ; 21/05/2019 - Retro DOS v4.0
 36357                                  ; DOSCODE:A95Bh (MSDOS 6.21, MSDOS.SYS)
 36358                                  
 36359                                  ; 02/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 36360                                  ; DOSCODE:A8FBh (MSDOS 5.0 MSDOS.SYS)
 36361                                  
 36362                                  ;BREAK <$DUP - duplicate a jfn>
 36363                                  ;----------------------------------------------------------------------------
 36364                                  ;
 36365                                  ;   Assembler usage:
 36366                                  ;	    MOV     BX, fh
 36367                                  ;	    MOV     AH, Dup
 36368                                  ;	    INT     int_command
 36369                                  ;	  AX has the returned handle
 36370                                  ;   Errors:
 36371                                  ;	    AX = dup_invalid_handle
 36372                                  ;	       = dup_too_many_open_files
 36373                                  ;
 36374                                  ;----------------------------------------------------------------------------
 36375                                  
 36376                                  _$DUP:
 36377 00006A3B 89D8                    	MOV	AX,BX			; save away old handle in AX
 36378 00006A3D E86FFD                  	call	JFNFree 		; free handle? into ES:DI, new in BX
 36379                                  DupErrorCheck:
 36380 00006A40 72A8                    	JC	short DupErr		; nope, bye
 36381 00006A42 06                      	push	es
 36382 00006A43 57                      	push	di			; save away SFT
 36383 00006A44 5E                      	pop	si			; into convenient place DS:SI
 36384 00006A45 1F                      	pop	ds
 36385 00006A46 93                      	XCHG	AX,BX			; get back old handle
 36386 00006A47 E81D00                  	call	CheckOwner		; get sft in ES:DI
 36387 00006A4A 729E                    	JC	short DupErr		; errors go home
 36388 00006A4C E85FC0                  	call	DOS_Dup_Direct
 36389 00006A4F E800FD                  	call	pJFNFromHandle		; get pointer
 36390 00006A52 268A1D                  	MOV	BL,[ES:DI]		; get SFT number
 36391 00006A55 881C                    	MOV	[SI],BL			; stuff in new SFT
 36392                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 36393                                  	;jmp	SYS_RET_OK		; and go home
 36394 00006A57 EBD5                    	jmp	short ok_ret
 36395                                  
 36396                                  	; 17/12/2022
 36397                                  ;DupErr:
 36398                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 36399                                  	;;jmp	SYS_RET_ERR
 36400                                  	;jmp	short ft_error
 36401                                  
 36402                                  ;BREAK <$DUP2 - force a dup on a particular jfn>
 36403                                  ;----------------------------------------------------------------------------
 36404                                  ;
 36405                                  ;   Assembler usage:
 36406                                  ;	    MOV     BX, fh
 36407                                  ;	    MOV     CX, newfh
 36408                                  ;	    MOV     AH, Dup2
 36409                                  ;	    INT     int_command
 36410                                  ;   Error returns:
 36411                                  ;	    AX = error_invalid_handle
 36412                                  ;
 36413                                  ;----------------------------------------------------------------------------
 36414                                  
 36415                                  _$DUP2:
 36416 00006A59 53                      	push	bx
 36417 00006A5A 51                      	push	cx			; save source
 36418 00006A5B 89CB                    	MOV	BX,CX			; get one to close
 36419 00006A5D E8AAFD                  	call	_$CLOSE			; close destination handle
 36420 00006A60 5B                      	pop	bx
 36421 00006A61 58                      	pop	ax			; old in AX, new in BX
 36422 00006A62 E8EDFC                  	call	pJFNFromHandle		; get pointer
 36423 00006A65 EBD9                    	JMP	short DupErrorCheck	; check error and do dup
 36424                                  
 36425                                  ;Break	<CheckOwner - verify ownership of handles from server>
 36426                                  ;----------------------------------------------------------------------------
 36427                                  ;   CheckOwner - Due to the ability of the server to close file handles for a
 36428                                  ;   process without the process knowing it (delete/rename of open files, for
 36429                                  ;   example), it is possible for the redirector to issue a call to a handle
 36430                                  ;   that it soes not rightfully own. We check here to make sure that the
 36431                                  ;   issuing process is the owner of the SFT. At the same time, we do a
 36432                                  ;   SFFromHandle to really make sure that the SFT is good.
 36433                                  ;
 36434                                  ;	ENTRY	BX has the handle
 36435                                  ;		User_ID is the current user
 36436                                  ;	EXIT	Carry Clear => ES:DI points to SFT
 36437                                  ;		Carry Set => AX has error code
 36438                                  ;	USES	none
 36439                                  ;----------------------------------------------------------------------------
 36440                                  
 36441                                  	; 02/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 36442                                  	; 21/05/2019 - Retro DOS v4.0
 36443                                  CheckOwner:
 36444                                  	; 13/07/2018 - Retro DOS v3.0
 36445                                  
 36446 00006A67 E805FD                  	call	SFFromHandle
 36447 00006A6A 721B                    	jc	short co_ret_label	; retc
 36448                                  
 36449 00006A6C 50                      	push	ax
 36450                                  
 36451                                  	; MSDOS 6.0
 36452                                  
 36453                                  ;SR; WIN386 patch - Do not check for USER_ID for using handles since these 
 36454                                  ;SR; are shared across multiple VMs in win386.
 36455                                  
 36456 00006A6D 36F606[2F10]01          	test	byte [ss:IsWin386],1 ; 02/06/2019
 36457 00006A73 7404                    	jz	short no_win386		;win386 is not present
 36458 00006A75 31C0                    	xor	ax,ax			;set the zero flag
 36459 00006A77 EB08                    	jmp	short _skip_win386	
 36460                                  
 36461                                  no_win386:
 36462 00006A79 36A1[3E03]              	mov	ax,[SS:USER_ID]		;smr;SS Override
 36463                                  	;cmp	ax,[es:di+47]
 36464 00006A7D 263B452F                	cmp	ax,[es:di+SF_ENTRY.sf_UID]
 36465                                  
 36466                                  _skip_win386:
 36467 00006A81 58                      	pop	ax
 36468                                  	
 36469                                  	; 17/12/2022
 36470 00006A82 7403                    	jz	short co_ret_label
 36471                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 36472                                  	;jnz	short CheckOwner_err
 36473                                  	;retn
 36474                                  	
 36475                                  CheckOwner_err:
 36476                                  	;mov	al,6
 36477 00006A84 B006                    	mov	al,error_invalid_handle
 36478 00006A86 F9                      	stc
 36479                                  
 36480                                  co_ret_label:
 36481 00006A87 C3                      	retn
 36482                                  
 36483                                  ;============================================================================
 36484                                  ; MACRO.ASM, MSDOS 6.0, 1991
 36485                                  ;============================================================================
 36486                                  ; Retro	DOS v3.0 - 11/07/2018
 36487                                  ; 21/05/2019 - Retro DOS v4.0
 36488                                  
 36489                                  ;	TITLE	MACRO - Pathname and macro related internal routines
 36490                                  ;	NAME	MACRO
 36491                                  
 36492                                  ;	Microsoft Confidential
 36493                                  ;	Copyright (C) Microsoft Corporation 1991
 36494                                  ;	All Rights Reserved.
 36495                                  
 36496                                  ;**	MACRO.ASM
 36497                                  ;
 36498                                  ;	$AssignOper
 36499                                  ;	FIND_DPB
 36500                                  ;	InitCDS
 36501                                  ;	$UserOper
 36502                                  ;	GetVisDrv
 36503                                  ;	GetThisDrv
 36504                                  ;	GetCDSFromDrv
 36505                                  ;
 36506                                  ;   Revision history:
 36507                                  ;
 36508                                  ;	Created: MZ 4 April 1983
 36509                                  ;		 MZ 18 April 1983   Make TransFCB handle extended FCBs
 36510                                  ;		 AR 2 June 1983     Define/Delete macro for NET redir.
 36511                                  ;		 MZ 3 Nov 83	    Fix InitCDS to reset length to 2
 36512                                  ;		 MZ 4 Nov 83	    Fix NetAssign to use STRLEN only
 36513                                  ;		 MZ 18 Nov 83	    Rewrite string processing for subtree
 36514                                  ;				    aliasing.
 36515                                  ;
 36516                                  ;   MSDOS performs several types of name translation. First, we maintain for
 36517                                  ;   each valid drive letter the text of the current directory on that drive.
 36518                                  ;   For invalid drive letters, there is no current directory so we pretend to
 36519                                  ;   be at the root. A current directory is either the raw local directory
 36520                                  ;   (consisting of drive:\path) or a local network directory (consisting of
 36521                                  ;   \\machine\path. There is a limit on the point to which a .. is allowed.
 36522                                  ;
 36523                                  ;   Given a path, MSDOS will transform this into a real from-the-root path
 36524                                  ;   without . or .. entries. Any component that is > 8.3 is truncated to
 36525                                  ;   this and all * are expanded into ?'s.
 36526                                  ;
 36527                                  ;   The second part of name translation involves subtree aliasing. A list of
 36528                                  ;   subtree pairs is maintained by the external utility SUBST. The results of
 36529                                  ;   the previous 'canonicalization' are then examined to see if any of the
 36530                                  ;   subtree pairs is a prefix of the user path. If so, then this prefix is
 36531                                  ;   replaced with the other subtree in the pair.
 36532                                  ;
 36533                                  ;   A third part involves mapping this "real" path into a "physical" path.  A
 36534                                  ;   list of drive/subtree pairs are maintained by the external utility JOIN.
 36535                                  ;   The output of the previous translation is examined to see if any of the
 36536                                  ;   subtrees in this list are a prefix of the string. If so, then the prefix
 36537                                  ;   is replaced by the appropriate drive letter. In this manner, we can
 36538                                  ;   'mount' one device under another.
 36539                                  ;
 36540                                  ;   The final form of name translation involves the mapping of a user's
 36541                                  ;   logical drive number into the internal physical drive. This is
 36542                                  ;   accomplished by converting the drive number into letter:CON, performing
 36543                                  ;   the above translation and then converting the character back into a drive
 36544                                  ;   number.
 36545                                  ;
 36546                                  ;   There are two main entry points: TransPath and TransFCB. TransPath will
 36547                                  ;   take a path and form the real text of the pathname with all . and ..
 36548                                  ;   removed. TransFCB will translate an FCB into a path and then invoke
 36549                                  ;   TransPath.
 36550                                  ;
 36551                                  ;	A000	version 4.00  Jan. 1988
 36552                                  
 36553                                  ;Installed = TRUE
 36554                                  
 36555                                  ;	I_need	ThisCDS,DWORD		; pointer to CDS used
 36556                                  ;	I_need	CDSAddr,DWORD		; pointer to CDS table
 36557                                  ;	I_need	CDSCount,BYTE		; number of CDS entries
 36558                                  ;	I_need	CurDrv,BYTE		; current macro assignment (old
 36559                                  ;					; current drive)
 36560                                  ;	I_need	NUMIO,BYTE		; Number of physical drives
 36561                                  ;	I_need	fSharing,BYTE		; TRUE => no redirection allowed
 36562                                  ;	I_need	DummyCDS,80h		; buffer for dummy cds
 36563                                  ;	I_need	DIFFNAM,BYTE		; flag for MyName being set
 36564                                  ;	I_need	MYNAME,16		; machine name
 36565                                  ;	I_need	MYNUM,WORD		; machine number
 36566                                  ;	I_need	DPBHEAD,DWORD		; beginning of DPB chain
 36567                                  ;	I_need	EXTERR_LOCUS,BYTE	; Extended Error Locus
 36568                                  ;	I_need	DrvErr,BYTE		; drive error
 36569                                  
 36570                                  ;BREAK <$AssignOper -- Set up a Macro>
 36571                                  ;----------------------------------------------------------------------------
 36572                                  ; Inputs:
 36573                                  ;	AL = 00 get assign mode 		    (ReturnMode)
 36574                                  ;	AL = 01 set assign mode 		    (SetMode)
 36575                                  ;	AL = 02 get attach list entry		    (GetAsgList)
 36576                                  ;	AL = 03 Define Macro (attch start)
 36577                                  ;	    BL = Macro type
 36578                                  ;	       = 0 alias
 36579                                  ;	       = 1 file/device
 36580                                  ;	       = 2 drive
 36581                                  ;	       = 3 Char device -> network
 36582                                  ;	       = 4 File device -> network
 36583                                  ;	    DS:SI -> ASCIZ source name
 36584                                  ;	    ES:DI -> ASCIZ destination name
 36585                                  ;	AL = 04 Cancel Macro
 36586                                  ;	    DS:SI -> ASCIZ source name
 36587                                  ;	AL = 05 Modified get attach list entry
 36588                                  ;	AL = 06 Get ifsfunc item
 36589                                  ;	AL = 07 set in_use of a drive's CDS
 36590                                  ;	     DL = drive number, 0=default  0=A,,
 36591                                  ;	AL = 08 reset in_use of a drive's CDS
 36592                                  ;	     DL = drive number, 0=A, 1=B,,,
 36593                                  ; Function:
 36594                                  ;	Do macro stuff
 36595                                  ; Returns:
 36596                                  ;	Std Xenix style error return
 36597                                  ;----------------------------------------------------------------------------
 36598                                  
 36599                                  	; 02/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 36600                                  	; 21/05/2019 - Retro DOS v4.0
 36601                                  _$AssignOper:
 36602                                  	; MSDOS 6.0
 36603 00006A88 3C07                    	CMP	AL,7			      ; set in_use ?		;AN000;
 36604 00006A8A 7525                    	JNZ	short chk08		      ; no			;AN000;
 36605                                  srinuse:								;AN000;
 36606 00006A8C 50                      	PUSH	AX			      ; save al 		;AN000;
 36607 00006A8D 88D0                    	MOV	AL,DL			      ; AL= drive id		;AN000;
 36608 00006A8F E85601                  	CALL	GetCDSFromDrv		      ; ds:si -> cds		;AN000;
 36609 00006A92 58                      	POP	AX			      ; 			;AN000;
 36610 00006A93 7216                    	JC	short baddrv		      ; bad drive		;AN000;
 36611                                  	;cmp	word [si+45h],0
 36612 00006A95 837C4500                	CMP	WORD [SI+curdir.devptr],0     ; dpb ptr =0 ?		;AN000;
 36613 00006A99 7410                    	JZ	short baddrv		      ;     no			;AN000;
 36614 00006A9B 3C07                    	CMP	AL,7			      ; set ?			;AN000;
 36615 00006A9D 7506                    	JNZ	short resetdrv		      ; no			;AN000;
 36616                                  	;or	word [si+43h],4000h
 36617                                  	; 17/12/2022
 36618                                  	;or	byte [si+44h],40h
 36619 00006A9F 804C4440                	or	byte [SI+curdir.flags+1],(curdir_inuse>>8)
 36620                                  	;OR	word [SI+curdir.flags],curdir_inuse ; set in_use	;AN000;
 36621 00006AA3 EB19                    	JMP	SHORT okdone		      ; 			;AN000;
 36622                                  resetdrv:
 36623                                  	;and	word [si+43h],0BFFFh									;AN000;
 36624                                  	; 18/12/2022
 36625 00006AA5 806444BF                	and	byte [SI+curdir.flags+1],0BFh ; (~curdir_inuse)>>8
 36626                                  	;AND	word [SI+curdir.flags],~curdir_inuse ; reset in_use	;AN000;
 36627 00006AA9 EB13                    	JMP	SHORT okdone		      ; 			;AN000;
 36628                                  
 36629                                  	; 17/12/2022
 36630                                  baddrv: 								;AN000;
 36631 00006AAB B80F00                  	MOV	AX,error_invalid_drive	      ; error			;AN000;
 36632                                  
 36633                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 36634                                  	;JMP	SHORT ASS_ERR		      ; 			;AN000;
 36635                                  	; 17/12/2022
 36636                                  	; 21/05/2019
 36637                                  ASS_ERR:
 36638 00006AAE E9A19B                  	jmp	SYS_RET_ERR
 36639                                  
 36640                                  chk08:									;AN000;
 36641 00006AB1 3C08                    	CMP	AL,8			      ; reset inuse ?		;AN000;
 36642 00006AB3 74D7                    	JZ	short srinuse 		      ; yes			;AN000;
 36643                                  
 36644                                    ;IF	NOT INSTALLED
 36645                                  	;transfer NET_ASSOPER
 36646                                    ;ELSE
 36647                                  	; MSDOS 3.3 (& MSDOS 6.0)
 36648 00006AB5 50                      	PUSH	AX
 36649                                  	;mov	ax,111Eh
 36650                                  	;MOV	AX,(MultNET SHL 8) OR 30
 36651 00006AB6 B81E11                  	mov	ax,(MultNET*256)+30
 36652 00006AB9 CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - DO REDIRECTION
 36653                                  			; SS = DOS CS
 36654                                  			; STACK: WORD function to execute
 36655                                  			; Return: CF set on error, AX = error code
 36656                                  			; STACK unchanged
 36657 00006ABB 5B                      	POP	BX			; Don't zap error code in AX
 36658 00006ABC 72F0                    	JC	short ASS_ERR
 36659                                  okdone:
 36660 00006ABE E9889B                  	jmp	SYS_RET_OK
 36661                                  
 36662                                  	; 17/12/2022
 36663                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 36664                                  ;ASS_ERR:
 36665                                  	;jmp	SYS_RET_ERR
 36666                                  
 36667                                    ;ENDIF
 36668                                  
 36669                                  ;Break <FIND_DPB - Find a DPB from a drive number>
 36670                                  ;----------------------------------------------------------------------------
 36671                                  ;**	FIND_DPB - Find a DPB from a Drive #
 36672                                  ;
 36673                                  ;	ENTRY	AL has drive number A = 0
 36674                                  ;	EXIT	'C' set
 36675                                  ;		    No DPB for this drive number
 36676                                  ;		'C' clear
 36677                                  ;		    DS:SI points to DPB for drive
 36678                                  ;	USES	SI, DS, Flags
 36679                                  ;----------------------------------------------------------------------------
 36680                                  
 36681                                  	; 21/05/2019 - Retro DOS v4.0
 36682                                  FIND_DPB:
 36683 00006AC1 36C536[2600]            	LDS	SI,[SS:DPBHEAD]		;smr;SS Override
 36684                                  fdpb5:	
 36685 00006AC6 83FEFF                  	CMP	SI,-1
 36686 00006AC9 7409                    	JZ	short fdpb10
 36687 00006ACB 3A04                    	cmp	al,[si]
 36688                                  	;CMP	AL,[SI+DPB.DRIVE]
 36689 00006ACD 7406                    	jz	short ret_label15	; Carry clear (retz)
 36690                                  	;;lds	si,[si+18h] ; MSDOS 3.3
 36691                                  	;lds	si,[si+19h] ; MSDOS 6.0
 36692 00006ACF C57419                  	LDS	SI,[SI+DPB.NEXT_DPB]
 36693 00006AD2 EBF2                    	JMP	short fdpb5
 36694                                  fdpb10:	
 36695 00006AD4 F9                      	STC
 36696                                  ret_label15:
 36697 00006AD5 C3                      	retn
 36698                                  
 36699                                  ;	Break <InitCDS - set up an empty CDS>
 36700                                  ;----------------------------------------------------------------------------
 36701                                  ;**	InitCDS - Setup an Empty CDS
 36702                                  ;
 36703                                  ;	ENTRY	ThisCDS points to CDS
 36704                                  ;		AL has uppercase drive letter
 36705                                  ;	EXIT	ThisCDS is now empty
 36706                                  ;		(ES:DI) = CDS
 36707                                  ;		'C' set if no DPB associated with drive
 36708                                  ;	USES	AH,ES,DI, Flags
 36709                                  ;----------------------------------------------------------------------------
 36710                                  
 36711                                  ; 21/05/2019 - Retro DOS v4.0
 36712                                  ; DOSCODE:A9FDh (MSDOS 6.21, MSDOS.SYS)
 36713                                  
 36714                                  ; 02/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 36715                                  ; DOSCODE:A99Dh (MSDOS 5.0, MSDOS.SYS)
 36716                                  
 36717                                  InitCDS:
 36718                                  	; 19/08/2018
 36719                                  	; 05/08/2018 - Retro DOS v3.0
 36720                                  	; MSDOS 6.0
 36721 00006AD6 50                      	push	ax			; save (AL) for caller
 36722 00006AD7 36C43E[A205]            	LES	DI,[SS:THISCDS]		; (es:di) = CDS address
 36723                                  	;mov	word [es:di+67],0
 36724 00006ADC 26C745430000            	MOV	word [ES:DI+curdir.flags],0 ; "free" CDS
 36725 00006AE2 2C40                    	SUB	AL,"A"-1                ; A = 1
 36726 00006AE4 363806[4600]            	CMP	[SS:NUMIO],AL		;smr;SS Override
 36727 00006AE9 7236                    	JC	short icdsx		; Drive does not map a physical drive
 36728 00006AEB 48                      	dec	ax			; (AL) = 0 if A, 1 if B, etc.
 36729 00006AEC 50                      	PUSH	AX			; save drive number for later
 36730 00006AED 0441                    	add	al,"A"
 36731 00006AEF B43A                    	MOV	AH,':'
 36732 00006AF1 268905                  	mov	[ES:DI],ax
 36733                                  	;MOV	[ES:DI+curdir.text],AX 	; set "x:"
 36734                                  	;mov	ax,"\"
 36735                                  	;mov	[es:di+2],ax
 36736                                  	;MOV	word [ES:DI+curdir.text+2],"\"	; NUL terminate
 36737 00006AF4 26C745025C00            	mov	word [ES:DI+curdir.text+2],005Ch ; 19/08/2018
 36738                                  	;or	word [es:di+67],4000h
 36739                                  	;or	byte [es:di+68],40h
 36740 00006AFA 26804D4440              	OR	byte [ES:DI+curdir.flags+1],(curdir_inuse>>8)
 36741 00006AFF 29C0                    	sub	ax,ax
 36742                                  	;MOV	[es:di+73],ax ; 0
 36743 00006B01 26894549                	MOV	[ES:DI+curdir.ID],ax
 36744                                  	;mov	[es:di+75],ax ; 0
 36745 00006B05 2689454B                	MOV	[ES:DI+curdir.ID+2],ax
 36746 00006B09 B002                    	mov	al,2
 36747                                  	;mov	[es:di+79],aX ; 2
 36748 00006B0B 2689454F                	MOV	[ES:DI+curdir.end],ax
 36749 00006B0F 58                      	POP	AX			; (al) = drive number
 36750 00006B10 1E                      	push	ds
 36751 00006B11 56                      	push	si
 36752 00006B12 E8ACFF                  	call	FIND_DPB
 36753 00006B15 7208                    	JC	short icds5		; OOOOPPPPPSSSS!!!!
 36754                                  	;mov	[es:di+69],si
 36755 00006B17 26897545                	MOV	[ES:DI+curdir.devptr],SI
 36756                                  	;mov	[es:di+71],ds
 36757 00006B1B 268C5D47                	MOV	[ES:DI+curdir.devptr+2],DS
 36758                                  icds5:	
 36759 00006B1F 5E                      	pop	si
 36760 00006B20 1F                      	pop	ds
 36761                                  icdsx:	
 36762 00006B21 58                      	pop	ax
 36763                                  RET45:
 36764 00006B22 C3                      	retn
 36765                                  
 36766                                  ;Break <$UserOper - get/set current user ID (for net)>
 36767                                  ;----------------------------------------------------------------------------
 36768                                  ;   $UserOper - retrieve or initiate a user id string.	MSDOS will only
 36769                                  ;	maintain this string and do no verifications.
 36770                                  ;
 36771                                  ;   Inputs:	AL has function type (0-get 1-set 2-printer-set 3-printer-get
 36772                                  ;				      4-printer-set-flags,5-printer-get-flags)
 36773                                  ;		DS:DX is user string pointer (calls 1,2)
 36774                                  ;		ES:DI is user buffer (call 3)
 36775                                  ;		BX is assign index (calls 2,3,4,5)
 36776                                  ;		CX is user number (call 1)
 36777                                  ;		DX is flag word (call 4)
 36778                                  ;   Outputs:	If AL = 0 then the current user string is written to DS:DX
 36779                                  ;			and user CX is set to the user number
 36780                                  ;		If AL = 3 then CX bytes have been put at input ES:DI
 36781                                  ;		If AL = 5 then DX is flag word
 36782                                  ;----------------------------------------------------------------------------
 36783                                  
 36784                                  	; 02/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 36785                                  	; 21/05/2019 - Retro DOS v4.0
 36786                                  _$UserOper:
 36787                                  	; 05/08/2018 - Retro DOS v3.0
 36788                                  	; MSDOS 6.0 (& MSDOS 3.3)
 36789 00006B23 50                      	PUSH	AX
 36790 00006B24 2C01                    	SUB	AL,1			; quick dispatch on 0,1
 36791 00006B26 58                      	POP	AX
 36792 00006B27 7211                    	JB	short UserGet 		; return to user the string
 36793 00006B29 742E                    	JZ	short UserSet 		; set the current user
 36794 00006B2B 3C05                    	CMP	AL,5			; test for 2,3,4 or 5
 36795 00006B2D 763D                    	JBE	short UserPrint		; yep
 36796                                  	;mov	byte [ss:EXTERR_LOCUS],1
 36797 00006B2F 36C606[2303]01          	MOV	byte [SS:EXTERR_LOCUS],errLOC_Unk ;smr;SS Override 
 36798                                  					; Extended Error Locus
 36799                                  	;error	error_invalid_function	; not 0,1,2,3
 36800                                  	;mov	al,1
 36801 00006B35 B001                    	MOV	AL,error_invalid_function
 36802                                  useroper_error:
 36803                                  	; 17/12/2022
 36804                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 36805 00006B37 E9189B                  	JMP	SYS_RET_ERR
 36806                                  	;jmp	short ASS_ERR
 36807                                  
 36808                                  UserGet:
 36809                                  ; Transfer MYNAME to DS:DX
 36810                                  ; Set Return CX to MYNUM
 36811 00006B3A 1E                      	PUSH	DS			; switch registers
 36812 00006B3B 07                      	POP	ES
 36813 00006B3C 89D7                    	MOV	DI,DX			; destination
 36814 00006B3E 368B0E[0E00]            	MOV	CX,[SS:MYNUM]		; Get number	;smr;SS Override
 36815 00006B43 E84999                  	call	Get_User_Stack
 36816                                  	;mov	[si+4],cx
 36817 00006B46 894C04                  	MOV	[SI+user_env.user_CX],CX ; Set number return
 36818 00006B49 16                      	push	ss			; point to DOSDATA
 36819 00006B4A 1F                      	pop	ds
 36820 00006B4B BE[0503]                	MOV	SI,MYNAME		; point source to user string
 36821                                  UserMove:
 36822 00006B4E B90F00                  	MOV	CX,15
 36823 00006B51 F3A4                    	REP	MOVSB			; blam.
 36824 00006B53 31C0                    	XOR	AX,AX			; 16th byte is 0
 36825 00006B55 AA                      	STOSB
 36826                                  UserBye:
 36827 00006B56 E9F09A                  	jmp	SYS_RET_OK		; no errors here
 36828                                  
 36829                                  UserSet:
 36830                                  ; Transfer DS:DX to MYNAME
 36831                                  ; CX to MYNUM
 36832 00006B59 36890E[0E00]            	MOV	[SS:MYNUM],CX				;smr;SS Override
 36833 00006B5E 89D6                    	MOV	SI,DX			; user space has source
 36834 00006B60 16                      	push	ss
 36835 00006B61 07                      	pop	es
 36836 00006B62 BF[0503]                	MOV	DI,MYNAME		; point dest to user string
 36837 00006B65 36FE06[0403]            	INC	byte [SS:DIFFNAM]	; signal change ;smr;SS Override
 36838 00006B6A EBE2                    	JMP	short UserMove
 36839                                  
 36840                                  UserPrint:
 36841                                  
 36842                                    ;IF NOT Installed
 36843                                    ;	transfer PRINTER_GETSET_STRING
 36844                                    ;ELSE
 36845 00006B6C 50                      	PUSH	AX
 36846                                  	;mov	ax,111Fh
 36847                                  	;MOV	AX,(MultNET SHL 8) OR 31
 36848 00006B6D B81F11                  	mov	ax,(MultNET<<8)|31
 36849 00006B70 CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - PRINTER SETUP
 36850                                  			; STACK: WORD function
 36851                                  			; Return: CF set on error, AX = error code
 36852                                  			; STACK unchanged
 36853 00006B72 5A                      	POP	DX			; Clean stack
 36854                                  	;JNC	short OKPA
 36855 00006B73 73E1                    	jnc	short UserBye ; 21/05/2019
 36856                                  	; 17/12/2022
 36857 00006B75 EBC0                    	jmp	short useroper_error
 36858                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 36859                                  	;jnb     short OKPA
 36860                                  	;jmp     short useroper_error
 36861                                  
 36862                                  	; 17/12/2022
 36863                                  ;OKPA:
 36864                                  ;	jmp	short UserBye
 36865                                  
 36866                                    ;ENDIF
 36867                                  
 36868                                  
 36869                                  ;Break	<GetVisDrv - return visible drive>
 36870                                  ;----------------------------------------------------------------------------
 36871                                  ;   GetVisDrv - correctly map non-spliced inuse drives
 36872                                  ;
 36873                                  ;   Inputs:	AL has drive identifier (0=default)
 36874                                  ;   Outputs:	Carry Set - invalid drive/macro
 36875                                  ;		Carry Clear - AL has physical drive (0=A)
 36876                                  ;		    ThisCDS points to CDS
 36877                                  ;   Registers modified: AL
 36878                                  ;----------------------------------------------------------------------------
 36879                                  
 36880                                  	; 21/05/2019 - Retro DOS v4.0
 36881                                  	; DOSCODE:AA9Fh (MSDOS 6.21, MSDOS.SYS)
 36882                                  
 36883                                  	; 02/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 36884                                  	; DOSCODE:AA3Fh (MSDOS 5.0, MSDOS.SYS)	
 36885                                  GetVisDrv:
 36886                                  	; 05/08/2018 - Retro DOS v3.0
 36887                                  	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 6839h
 36888 00006B77 E81900                  	CALL	GETTHISDRV		; get inuse drive
 36889 00006B7A 72A6                    	jc	short RET45
 36890 00006B7C 1E                      	push	ds
 36891 00006B7D 56                      	push	si
 36892 00006B7E 36C536[A205]            	LDS	SI,[SS:THISCDS]		;smr;SS Override
 36893                                  	;test	word [si+67],2000h
 36894                                  	; 17/12/2022
 36895                                  	;test	byte [si+68],20h
 36896 00006B83 F6444420                	test	byte [SI+curdir.flags+1],(curdir_splice>>8)
 36897                                  	;TEST	word [SI+curdir.flags],curdir_splice
 36898 00006B87 5E                      	pop	si
 36899 00006B88 1F                      	pop	ds
 36900 00006B89 7497                    	jz	short RET45		; if not spliced, return OK
 36901                                  	; MSDOS 6.0
 36902                                  	;mov	byte [ss:DrvErr],0Fh
 36903 00006B8B 36C606[1006]0F          	MOV	byte [SS:DrvErr],error_invalid_drive ;IFS. ;AN000;smr;SS Override
 36904 00006B91 F9                      	STC				; signal error
 36905 00006B92 C3                      	retn
 36906                                  
 36907                                  ;Break <Getthisdrv - map a drive designator (0=def, 1=A...)>
 36908                                  ;----------------------------------------------------------------------------
 36909                                  ;   GetThisDrv - look through a set of macros and return the current drive and
 36910                                  ;	macro pointer
 36911                                  ;
 36912                                  ;   Inputs:	AL has drive identifier (1=A, 0=default)
 36913                                  ;   Outputs:
 36914                                  ;		Carry Set - invalid drive/macro
 36915                                  ;		Carry Clear - AL has physical drive (0=A)
 36916                                  ;		   ThisCDS points to macro
 36917                                  ;   Registers modified: AL
 36918                                  ;----------------------------------------------------------------------------
 36919                                  
 36920                                  	; 21/05/2019 - Retro DOS v4.0
 36921                                  	; DOSCODE:AABCh (MSDOS 6.21, MSDOS.SYS)
 36922                                  
 36923                                  	; 02/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 36924                                  	; DOSCODE:AA5Ch (MSDOS 5.0, MSDOS.SYS)	
 36925                                  GETTHISDRV:
 36926                                  	; 05/08/2018
 36927                                  	; 12/07/2018 - Retro DOS v3.0
 36928                                  	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 6850h
 36929                                  	; MSDOS 3.3 (& MSDOS 6.0)
 36930 00006B93 08C0                    	OR	AL,AL			; are we using default drive?
 36931 00006B95 7505                    	JNZ	SHORT GTD10		; no, go get the CDS pointers
 36932 00006B97 36A0[3603]              	MOV	AL,[SS:CURDRV]		; get the current drive
 36933                                  	;INC	ax			; Counteract next instruction
 36934                                  	; 04/09/2018
 36935                                  	;inc	al
 36936                                  	; 07/12/2022
 36937 00006B9B 40                      	inc	ax
 36938                                  GTD10:	
 36939                                  	;DEC	AX
 36940                                  	; 02/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 36941 00006B9C 48                      	dec	ax			; 0 = A
 36942                                  	;dec	al
 36943 00006B9D 1E                      	PUSH	DS			; save world
 36944 00006B9E 56                      	PUSH	SI
 36945                                  	;mov	byte [ss:EXTERR_LOCUS],2
 36946 00006B9F 36C606[2303]02          	MOV	BYTE [SS:EXTERR_LOCUS],errLOC_Disk		;smr;SS Override
 36947 00006BA5 36F606[7205]FF          	TEST	BYTE [SS:FSHARING],-1	; Logical or Physical?	;smr;SS Override
 36948 00006BAB 7420                    	JZ	SHORT GTD20		; Logical
 36949 00006BAD 50                      	PUSH	AX
 36950 00006BAE 06                      	PUSH	ES
 36951 00006BAF 57                      	PUSH	DI
 36952 00006BB0 36C706[A205][F304]      	MOV	WORD [SS:THISCDS],DUMMYCDS ;smr;SS Override
 36953                                  	;mov	[SS:THISCDS+2],CS ; MSDOS 3.3
 36954 00006BB7 368C16[A405]            	MOV	[SS:THISCDS+2],SS ; MSDOS 6.0 ;ThisCDS = &DummyCDS;smr;
 36955 00006BBC 0441                    	ADD	AL,'A'
 36956 00006BBE E815FF                  	CALL	InitCDS			; InitCDS(c);
 36957                                  	;test	word [es:di+67],4000h
 36958                                  	; 17/12/2022
 36959                                  	;test	byte [es:di+68],40h
 36960 00006BC1 26F6454440              	test	byte [ES:DI+curdir.flags+1],(curdir_inuse>>8)
 36961                                  	;TEST	WORD [ES:DI+curdir.flags],curdir_inuse	; Clears carry
 36962 00006BC6 5F                      	POP	DI
 36963 00006BC7 07                      	POP	ES
 36964 00006BC8 58                      	POP	AX
 36965 00006BC9 740D                    	JZ	SHORT GTD30		; Not a physical drive.
 36966 00006BCB EB18                    	JMP	SHORT GTDX		; carry clear
 36967                                  GTD20:
 36968 00006BCD E81800                  	CALL	GetCDSFromDrv
 36969 00006BD0 7206                    	JC	SHORT GTD30	; Unassigned CDS -> return error already set
 36970                                  	;test	word [si+43h],4000h
 36971                                  	; 17/12/2022
 36972                                  	;test	byte [si+44h],40h
 36973 00006BD2 F6444440                	test	byte [SI+curdir.flags+1],(curdir_inuse>>8)
 36974                                  	;TEST	WORD [SI+curdir.flags],curdir_inuse ; Clears Carry
 36975 00006BD6 750D                    	JNZ	SHORT GTDX		; carry clear
 36976                                  GTD30:	
 36977                                  	; 21/05/2019
 36978                                  	; MSDOS 6.0
 36979 00006BD8 B00F                    	MOV	AL,error_invalid_drive	; invalid FAT drive
 36980 00006BDA 36A2[1006]              	MOV	BYTE [ss:DrvErr],AL	; save this for IOCTL
 36981                                  	; MSDOS 3.3 (.& MSDOS 6.0)
 36982 00006BDE 36C606[2303]01          	MOV	BYTE [ss:EXTERR_LOCUS],errLOC_Unk
 36983 00006BE4 F9                      	STC
 36984                                  GTDX:	
 36985 00006BE5 5E                      	POP	SI			; restore world
 36986 00006BE6 1F                      	POP	DS
 36987 00006BE7 C3                      	RETN
 36988                                   
 36989                                  
 36990                                  ;Break <GetCDSFromDrv - convert a drive number to a CDS pointer>
 36991                                  ;----------------------------------------------------------------------------
 36992                                  ;   GetCDSFromDrv - given a physical drive number, convert it to a CDS
 36993                                  ;	pointer, returning an error if the drive number is greater than the
 36994                                  ;	number of CDS's
 36995                                  ;
 36996                                  ;   Inputs:	AL is physical unit # A=0...
 36997                                  ;   Outputs:	Carry Set if Bad Drive
 36998                                  ;		Carry Clear
 36999                                  ;		    DS:SI -> CDS
 37000                                  ;		    [THISCDS] = DS:SI
 37001                                  ;   Registers modified: DS,SI
 37002                                  ;----------------------------------------------------------------------------
 37003                                  
 37004                                  	; 21/05/2019 - Retro DOS v4.0
 37005                                  GetCDSFromDrv:
 37006 00006BE8 363A06[4700]            	CMP	AL,[SS:CDSCOUNT]	; is this a valid designator;smr;SS Override
 37007 00006BED 7202                    	JB	SHORT GetCDS		; yes, go get the macro
 37008 00006BEF F9                      	STC				; signal error
 37009 00006BF0 C3                      	RETN				; bye
 37010                                  GetCDS:
 37011 00006BF1 53                      	PUSH	BX
 37012 00006BF2 50                      	PUSH	AX
 37013 00006BF3 36C536[3C00]            	LDS	SI,[SS:CDSADDR]		; get pointer to table	;smr;SS Override
 37014                                  	;mov	bl,81 ; MSDOS 3.3
 37015                                  	;mov	bl,88 ; MSDOS 6.0 
 37016 00006BF8 B358                    	MOV	BL,curdir.size		; size in convenient spot
 37017 00006BFA F6E3                    	MUL	BL			; get net offset
 37018 00006BFC 01C6                    	ADD	SI,AX			; convert to true pointer
 37019 00006BFE 368936[A205]            	MOV	[SS:THISCDS],SI		; store convenient offset;smr;SS Override
 37020 00006C03 368C1E[A405]            	MOV	[SS:THISCDS+2],DS	; store convenient segment;smr;SS Override
 37021 00006C08 58                      	POP	AX
 37022 00006C09 5B                      	POP	BX
 37023 00006C0A F8                      	CLC				; no error
 37024 00006C0B C3                      	RETN				; bye!
 37025                                  
 37026                                  ;============================================================================
 37027                                  ; MACRO2.ASM, MSDOS 6.0, 1991
 37028                                  ;============================================================================
 37029                                  ; Retro	DOS v3.0 - 12/07/2018
 37030                                  ; 22/05/2019 - Retro DOS v4.0
 37031                                  
 37032                                  ;BREAK <TransFCB - convert an FCB into a path, doing substitution>
 37033                                  ;----------------------------------------------------------------------------
 37034                                  ;   TransFCB - Copy an FCB from DS:DX into a reserved area doing all of the
 37035                                  ;       gritty substitution.
 37036                                  ;
 37037                                  ;   Inputs:     DS:DX - pointer to FCB
 37038                                  ;               ES:DI - point to destination
 37039                                  ;   Outputs:    Carry Set - invalid path in final map
 37040                                  ;               Carry Clear - FCB has been mapped into ES:DI
 37041                                  ;                   Sattrib is set from possibly extended FCB
 37042                                  ;                   ExtFCB set if extended FCB found
 37043                                  ;   Registers modified: most
 37044                                  ;----------------------------------------------------------------------------
 37045                                  
 37046                                  	; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 37047                                  TransFCB:
 37048                                  	; 22/05/2019 - Retro DOS v4.0
 37049                                  	; 12/07/2018 - Retro DOS v3.0
 37050                                  	;LocalVar FCBTmp,16
 37051                                  	;ENTER
 37052 00006C0C 55                      	push	bp
 37053 00006C0D 89E5                    	mov	bp,sp
 37054                                  	;sub	sp,15	; MSDOS 3.3
 37055 00006C0F 83EC10                  	sub	sp,16	; MSDOS 6.0
 37056 00006C12 16                      	push	ss
 37057 00006C13 07                      	pop	es
 37058 00006C14 06                      	push	es
 37059 00006C15 57                      	push	di
 37060                                  	;lea	di,[bp-15] ; MSDOS 3.3
 37061                                  	;LEA	DI,FCBTmp 
 37062 00006C16 8D7EF0                  	lea	di,[bp-16]		; point to FCB temp area
 37063 00006C19 36C606[6C05]00          	mov	byte [SS:EXTFCB],0	; no extended FCB found ;smr;SS Override
 37064 00006C1F 36C606[6D05]00          	mov	byte [SS:SATTRIB],0	; default search attributes;smr;SS Override
 37065 00006C25 E89FB0                  	call	GetExtended             ; get FCB, extended or not
 37066                                  	; 06/12/2022
 37067 00006C28 740D                    	jz	short GetDrive		; not an extended FCB, get drive
 37068 00006C2A 8A44FF                  	mov	AL,[SI-1]               ; get attributes
 37069 00006C2D 36A2[6D05]              	mov	[SS:SATTRIB],AL		; store search attributes;smr;SS Override
 37070 00006C31 36C606[6C05]FF          	mov	byte [SS:EXTFCB],-1	; signal extended FCB  ;smr;SS Override
 37071                                  GetDrive:
 37072 00006C37 AC                      	lodsb				; get drive byte
 37073 00006C38 E858FF                  	call	GETTHISDRV
 37074 00006C3B 722A                    	jc	short BadPack
 37075 00006C3D E87403                  	call	TextFromDrive           ; convert 0-based drive to text
 37076                                  
 37077                                  ; Scan the source to see if there are any illegal chars
 37078                                  
 37079                                  	;mov	bx,CharType		; load lookup table
 37080 00006C40 B90B00                  	mov	cx,11
 37081 00006C43 56                      	push	si			; back over name, ext
 37082                                  FCBScan:
 37083 00006C44 AC                      	lodsb				; get a byte
 37084                                  	
 37085                                  	; 09/08/2018
 37086                                  	;;xlat	byte [es:bx]
 37087                                  	;es	xlat
 37088                                  
 37089                                  	; 22/05/2019 - Retro DOS v4.0	
 37090 00006C45 E816E5                  	call	GetCharType		; get flags
 37091                                  
 37092                                  	;test	al,8	
 37093 00006C48 A808                    	test	al,FFCB
 37094 00006C4A 741B                    	jz	short BadPack
 37095                                  NextCh: 
 37096 00006C4C E2F6                    	loop	FCBScan
 37097 00006C4E 5E                      	pop	si
 37098 00006C4F 89FB                    	mov	bx,di
 37099 00006C51 E8CCB4                  	call	PackName                ; crunch the path
 37100 00006C54 5F                      	pop	di			; get original destination
 37101 00006C55 07                      	pop	es
 37102 00006C56 16                      	push	ss			; get DS addressability
 37103 00006C57 1F                      	pop	ds
 37104                                  	;lea	si,[bp-15] ; MSDOS 3.3
 37105                                  	;LEA	SI,FCBTmp		; point at new pathname
 37106 00006C58 8D76F0                  	lea	si,[bp-16]
 37107 00006C5B 803F00                  	cmp	byte [bx],0
 37108 00006C5E 7407                    	jz	short BadPack
 37109 00006C60 55                      	push	bp
 37110 00006C61 E80E00                  	call	TransPathSet            ; convert the path
 37111 00006C64 5D                      	pop	bp
 37112 00006C65 7303                    	jnc	short FCBRet		; bye with transPath error code
 37113                                  BadPack:
 37114 00006C67 F9                      	STC
 37115                                  	;mov	al,3
 37116 00006C68 B003                    	MOV     AL,error_path_not_found
 37117                                  FCBRet: 
 37118                                  	;LEAVE
 37119 00006C6A 89EC                    	mov	sp,bp
 37120 00006C6C 5D                      	pop	bp
 37121                                  TransPath_retn:
 37122 00006C6D C3                      	retn
 37123                                  
 37124                                  ; 12/07/2018 - Retro DOS v3.0
 37125                                  
 37126                                  ;BREAK <TransPath - copy a path, do string sub and put in current dir>
 37127                                  ;----------------------------------------------------------------------------
 37128                                  ;
 37129                                  ;   TransPath - copy a path from DS:SI to ES:DI, performing component string
 37130                                  ;       substitution, insertion of current directory and fixing . and ..
 37131                                  ;       entries. Perform splicing. Allow input string to match splice
 37132                                  ;       exactly.
 37133                                  ;
 37134                                  ;   TransPathSet - Same as above except No splicing is performed if input path
 37135                                  ;       matches splice.
 37136                                  ;
 37137                                  ;   TransPathNoSet - No splicing/local using is performed at all.
 37138                                  ;
 37139                                  ;   The following anomalous behaviour is required:
 37140                                  ;
 37141                                  ;       Drive letters on devices are ignored. (set up DummyCDS)
 37142                                  ;       Paths on devices are ignored. (truncate to 0-length)
 37143                                  ;       Raw net I/O sets ThisCDS => NULL.
 37144                                  ;       fSharing => dummyCDS and no subst/splice. Only canonicalize.
 37145                                  ;
 37146                                  ;   Other behaviour:
 37147                                  ;
 37148                                  ;       ThisCDS set up.
 37149                                  ;       FatRead done on local CDS.
 37150                                  ;       ValidateCDS done on local CDS.
 37151                                  ;
 37152                                  ;   Brief flowchart:
 37153                                  ;
 37154                                  ;       if fSharing then
 37155                                  ;           set up DummyCDS (ThisCDS)
 37156                                  ;           canonicalize (sets cMeta)
 37157                                  ;           splice
 37158                                  ;           fatRead
 37159                                  ;           return
 37160                                  ;       if \\ or d:\\ lead then
 37161                                  ;           set up null CDS (ThisCDS)
 37162                                  ;           canonicalize (sets cMeta)
 37163                                  ;           return
 37164                                  ;       if device then
 37165                                  ;           set up dummyCDS (ThisCDS)
 37166                                  ;           canonicalize (sets cMeta)
 37167                                  ;           return
 37168                                  ;       if file then
 37169                                  ;           getCDS (sets (ThisCDS) from name)
 37170                                  ;           validateCDS (may reset current dir)
 37171                                  ;           Copy current dir
 37172                                  ;           canonicalize (set cMeta)
 37173                                  ;           splice
 37174                                  ;           generate correct CDS (ThisCDS)
 37175                                  ;           if local then
 37176                                  ;               fatread
 37177                                  ;           return
 37178                                  ;
 37179                                  ;   Inputs:     DS:SI - point to ASCIZ string path
 37180                                  ;               DI - point to buffer in DOSDATA
 37181                                  ;   Outputs:    Carry Set - invalid path specification: too many .., bad
 37182                                  ;                   syntax, etc. or user FAILed to I 24.
 37183                                  ;               WFP_Start - points to beginning of buffer
 37184                                  ;               Curr_Dir_End - points to end of current dir in path
 37185                                  ;               DS - DOSDATA
 37186                                  ;   Registers modified: most
 37187                                  ;
 37188                                  ;----------------------------------------------------------------------------
 37189                                  
 37190                                  ; 22/05/2019
 37191                                  ; 13/05/2019 - Retro DOS v4.0
 37192                                  ; DOSCODE:AB99h (MSDOS 6.21, MSDOS.SYS)
 37193                                  
 37194                                  ; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 37195                                  ; DOSCODE:AB39h (MSDOS 5.0, MSDOS.SYS)
 37196                                  
 37197                                  TransPath:
 37198 00006C6E 30C0                    	XOR     AL,AL
 37199 00006C70 EB02                    	JMP     SHORT SetSplice
 37200                                  TransPathSet:
 37201 00006C72 B0FF                    	MOV     AL,-1
 37202                                  SetSplice:
 37203 00006C74 36A2[4C03]              	MOV	[SS:NoSetDir],AL	;   NoSetDir = !fExact; ;smr;SS Override
 37204 00006C78 B0FF                    	MOV     AL,-1
 37205                                  TransPathNoSet:
 37206 00006C7A 36A2[7105]              	MOV	[SS:FSPLICE],AL		;   fSplice = TRUE;     ;smr;SS Override
 37207 00006C7E 36C606[7A05]FF          	MOV	byte [ss:CMETA],-1      			;smr;SS Override
 37208 00006C84 36893E[B205]            	MOV     [SS:WFP_START],DI 				;smr;SS Override
 37209 00006C89 36C706[B605]FFFF        	MOV	word [SS:CURR_DIR_END],-1 ; crack from start	;smr;SS Override
 37210 00006C90 16                      	push	ss
 37211 00006C91 07                      	pop	es
 37212                                  	;lea	bp,[di+134]
 37213 00006C92 8DAD8600                	LEA     BP,[DI+TEMPLEN]         ; end of buffer
 37214                                  ;
 37215                                  ; if this is through the server dos call, fsharing is set. We set up a
 37216                                  ; dummy cds and let the operation go.
 37217                                  ;
 37218 00006C96 36F606[7205]FF          	TEST	byte [SS:FSHARING],-1	; if no sharing		;smr;SS Override
 37219 00006C9C 7435                    	JZ	short CheckUNC		; skip to UNC check
 37220                                  ;
 37221                                  ; ES:DI point to buffer
 37222                                  ;
 37223 00006C9E E8FC02                  	CALL	DriveFromText           ; get drive and advance DS:SI
 37224 00006CA1 E8EFFE                  	call	GETTHISDRV              ; Set ThisCDS and convert to 0-based
 37225 00006CA4 722A                    	jc	short NoPath
 37226 00006CA6 E80B03                  	CALL	TextFromDrive		; drop in new
 37227 00006CA9 8D5D01                  	LEA	BX,[DI+1]               ; backup limit
 37228 00006CAC E83401                  	CALL	Canonicalize            ; copy and canonicalize
 37229 00006CAF 72BC                    	jc	short TransPath_retn	; errors
 37230                                  ;
 37231                                  ; Perform splices for net guys.
 37232                                  ;
 37233 00006CB1 16                      	push	ss
 37234 00006CB2 1F                      	pop	ds
 37235 00006CB3 8B36[B205]              	MOV     SI,[WFP_START] 		; point to name
 37236 00006CB7 F606[7105]FF            	TEST	byte [FSPLICE],-1
 37237 00006CBC 7403                    	JZ	short NoServerSplice
 37238 00006CBE E83102                  	CALL    Splice
 37239                                  NoServerSplice:
 37240 00006CC1 16                      	push	ss
 37241 00006CC2 1F                      	pop	ds                      ; for FATREAD
 37242 00006CC3 C43E[A205]              	LES     DI,[THISCDS]		; for fatread
 37243 00006CC7 E88EA6                  	call	ECritDisk
 37244 00006CCA E804EB                  	call	FATREAD_CDS
 37245 00006CCD E8A3A6                  	call	LCritDisk
 37246                                  NoPath:
 37247                                  	;mov	al,3
 37248 00006CD0 B003                    	MOV     AL,error_path_not_found ; Set up for possible bad path error
 37249 00006CD2 C3                      	retn				; any errors are in Carry flag
 37250                                  
 37251                                  ; Let the network decide if the name is for a spooled device. It will map
 37252                                  ; the name if so.
 37253                                  
 37254                                  CheckUNC:
 37255 00006CD3 36C706[A205]FFFF        	MOV     WORD [SS:THISCDS],-1	; NULL thisCDS		;smr;SS Override
 37256                                  	;CallInstall NetSpoolCheck,MultNET,35
 37257 00006CDA B82311                  	mov	ax,1123h
 37258 00006CDD CD2F                    	int	2Fh	; Multiplex - NETWORK REDIRECTOR - QUALIFY REMOTE FILENAME
 37259                                  			; DS:SI -> ASCIZ filename to canonicalize
 37260                                  			; ES:DI -> 128-byte buffer for qualified name
 37261                                  			; Return: CF set if not resolved
 37262 00006CDF 7329                    	JNC	short UNCDone
 37263                                  
 37264                                  ; At this point the name is either a UNC-style name (prefixed with two leading
 37265                                  ; \\s) or is a local file/device. Remember that if a net-spooled device was
 37266                                  ; input, then the name has been changed to the remote spooler by the above net
 37267                                  ; call. Also, there may be a drive in front of the \\.
 37268                                  
 37269                                  NO_CHECK:
 37270 00006CE1 E8B902                  	CALL    DriveFromText		; eat drive letter
 37271 00006CE4 50                      	PUSH    AX                      ; save it
 37272 00006CE5 8B04                    	MOV     AX,[SI]			; get first two bytes of path
 37273 00006CE7 E891E4                  	call    PATHCHRCMP              ; convert to normal form
 37274 00006CEA 86E0                    	XCHG    AH,AL                   ; swap for second byte
 37275 00006CEC E88CE4                  	call    PATHCHRCMP              ; convert to normal form
 37276 00006CEF 751F                    	JNZ	short CheckDevice	; not a path char
 37277 00006CF1 38C4                    	CMP     AH,AL                   ; are they same?
 37278 00006CF3 751B                    	JNZ	short CheckDevice	; nope
 37279                                  
 37280                                  ; We have a UNC request. We must copy the string up to the beginning of the
 37281                                  ; local machine root path
 37282                                  
 37283 00006CF5 58                      	POP     AX
 37284 00006CF6 A5                      	MOVSW                           ; get the lead \\.
 37285                                  UNCCpy:
 37286 00006CF7 AC                      	LODSB                           ; get a byte
 37287 00006CF8 E82BE4                   	call	UCase                   ;AN000;; convert the char
 37288 00006CFB 08C0                    	OR      AL,AL
 37289 00006CFD 740E                    	JZ	short UNCTerm		; end of string. All done.
 37290 00006CFF E879E4                  	call    PATHCHRCMP              ; is it a path char?
 37291 00006D02 89FB                    	MOV     BX,DI                   ; backup position
 37292 00006D04 AA                      	STOSB
 37293 00006D05 75F0                    	JNZ	short UNCCpy		; no, go copy
 37294 00006D07 E8D900                  	CALL    Canonicalize            ; wham (and set cMeta)
 37295                                  UNCDone:
 37296 00006D0A 16                      	push	ss
 37297 00006D0B 1F                      	pop	ds
 37298 00006D0C C3                       	retn				; return error code
 37299                                  UNCTerm:
 37300 00006D0D AA                      	STOSB                           ;AN000;
 37301 00006D0E EBFA                    	JMP	short UNCDone		;AN000;
 37302                                  
 37303                                  CheckDevice:
 37304                                  
 37305                                  ; Check DS:SI for device. First eat any path stuff
 37306                                  
 37307 00006D10 58                      	POP     AX                      ; retrieve drive info
 37308 00006D11 803C00                  	CMP     BYTE [SI],0		; check for null file
 37309 00006D14 7504                    	JNZ	short CheckPath
 37310                                  	;mov	al,2 
 37311 00006D16 B002                    	MOV     AL,error_file_not_found ; bad file error
 37312 00006D18 F9                      	STC                             ; signal error on null input
 37313 00006D19 C3                      	RETN				; bye!
 37314                                  CheckPath:
 37315 00006D1A 50                      	push	ax
 37316 00006D1B 55                      	push	bp			; save drive number
 37317                                  
 37318                                  
 37319                                  ; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 37320                                  %if 0
 37321                                  	; MSDOS 6.0
 37322                                  ;;;BUGBUG BUG 10-26-1992 scottq
 37323                                  ;;;This is a hack for the CDROM extensions (2.1) who scan looking
 37324                                  ;;;for the following POP BP == 5Dh (restore <bp,ax>).
 37325                                  ;;;The problem is that a direct call to CheckThisDevice can (and did)
 37326                                  ;;;end up having a 5D in the opcode's displacement field. The
 37327                                  ;;;scanning code would choke on this thinking it was a POP BP instruction.
 37328                                  ;;;
 37329                                  ;;;What we do here is do a call to a function that is less than 5Dh
 37330                                  ;;;bytes away (and assert its not exactly 5D away) that jmps (transfers)
 37331                                  ;;;to the correct function. This cannot accidently insert a 5Dh.
 37332                                  ;;;
 37333                                  ;;;More info:
 37334                                  ;;;  This particular scan is begun at the UNCdone label for 32 bytes
 37335                                  ;;;looking for pop BP, so you cannot put a 5D between here and there.
 37336                                  ;;;
 37337                                  	call	no5Dshere
 37338                                  start5Dhack:
 37339                                  ;following is replaced with 5Dhack code--Invoke CheckThisDevice         
 37340                                  backfrom5Dhack:
 37341                                  
 37342                                  %endif
 37343                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 37344                                  	; Note: 'call no5Dshere' is not required for MSDOS 5.0 MSDOS.SYS
 37345 00006D1C E8B2D6                  	call    CheckThisDevice	; E8h,6Fh,0D6h
 37346                                  
 37347 00006D1F 5D                      	pop	bp
 37348 00006D20 58                      	pop	ax			; get drive letter back
 37349 00006D21 731C                    	JNC	short DoFile		; yes we have a file.
 37350                                  
 37351                                  ; We have a device. AX has drive letter. At this point we may fake a CDS ala
 37352                                  ; sharing DOS call. We know by getting here that we are NOT in a sharing DOS
 37353                                  ; call.
 37354                                  
 37355 00006D23 36C606[7205]FF          	MOV	byte [SS:FSHARING],-1	; simulate sharing dos call;smr;SS Override
 37356 00006D29 E867FE                  	call	GETTHISDRV              ; set ThisCDS and init DUMMYCDS
 37357 00006D2C 36C606[7205]00          	MOV     byte [SS:FSHARING],0	;                       ;smr;SS Override
 37358                                  
 37359                                  ; Now that we have noted that we have a device, we put it into a form that
 37360                                  ; getpath can understand. Normally getpath requires d:\ to begin the input
 37361                                  ; string. We relax this to state that if the d:\ is present then the path
 37362                                  ; may be a file. If D:/ (note the forward slash) is present then we have
 37363                                  ; a device.
 37364                                  
 37365 00006D32 E87F02                  	CALL    TextFromDrive
 37366 00006D35 B02F                    	MOV     AL,'/'                  ; path sep.
 37367 00006D37 AA                      	STOSB
 37368 00006D38 E8E0A4                  	call	StrCpy			; move remainder of string
 37369                                  
 37370 00006D3B F8                      	CLC                             ; everything OK.
 37371 00006D3C 16                      	push	ss
 37372 00006D3D 1F                      	pop	ds                      ; remainder of OK stuff
 37373                                  DoFile_retn:
 37374 00006D3E C3                      	retn
 37375                                  
 37376                                  ; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 37377                                  %if 0
 37378                                  
 37379                                  no5Dshere:
 37380                                  	; 10/08/2018
 37381                                  	jmp	CheckThisDevice		; snoop for device
 37382                                  %endif
 37383                                  
 37384                                  ;.erre (no5Dshere - start5Dhack - 5D)
 37385                                  
 37386                                  ; We have a file. Get the raw CDS.
 37387                                  
 37388                                  DoFile:
 37389                                  	; MSDOS 3.3 (& MSDOS 6.0)
 37390                                  
 37391 00006D3F E835FE                  	call	GetVisDrv               ; get proper CDS
 37392                                  	;mov	al,3 
 37393 00006D42 B003                    	MOV     AL,error_path_not_found ; Set up for possible bad file error
 37394 00006D44 72F8                    	jc	short DoFile_retn  ; CARRY set -> bogus drive/spliced
 37395                                  
 37396                                  ; ThisCDS has correct CDS. DS:SI advanced to point to beginning of path/file.
 37397                                  ; Make sure that CDS has valid directory; ValidateCDS requires a temp buffer
 37398                                  ; Use the one that we are going to use (ES:DI).
 37399                                  
 37400                                  	;SAVE    <DS,SI,ES,DI>		; save all string pointers.
 37401 00006D46 1E                      	push	ds
 37402 00006D47 56                      	push	si
 37403 00006D48 06                      	push	es
 37404 00006D49 57                      	push	di
 37405 00006D4A E8C8D5                  	call	ValidateCDS             ; poke CDS and make everything OK
 37406                                  	;RESTORE <DI,ES,SI,DS>		; get back pointers
 37407 00006D4D 5F                      	pop	di
 37408 00006D4E 07                      	pop	es
 37409 00006D4F 5E                      	pop	si
 37410 00006D50 1F                      	pop	ds
 37411                                  	;mov	al,3
 37412 00006D51 B003                    	MOV     AL,error_path_not_found ; Set up for possible bad path error
 37413                                  	;retc				; someone failed an operation
 37414 00006D53 72E9                    	jc	short DoFile_retn
 37415                                  
 37416                                  ; ThisCDS points to correct CDS. It contains the correct text of the
 37417                                  ; current directory. Copy it in.
 37418                                  
 37419 00006D55 1E                      	push	ds
 37420 00006D56 56                      	push	si
 37421 00006D57 36C536[A205]            	LDS     SI,[SS:THISCDS]		; point to CDS	;smr;SS Override
 37422 00006D5C 89FB                    	MOV     BX,DI                   ; point to destination
 37423                                  	;add	bx,[si+79] ; MSDOS 6.0
 37424 00006D5E 035C4F                  	ADD     BX,[SI+curdir.end]	; point to backup limit
 37425                                  	;lea	bp,[di+134]
 37426 00006D61 8DAD8600                	LEA     BP,[DI+TEMPLEN]         ; regenerate end of buffer
 37427                                  					;AN000;
 37428 00006D65 E8C2A4                  	call	FStrCpy                 ; copy string. ES:DI point to end
 37429 00006D68 4F                      	DEC     DI                      ; point to NUL byte
 37430                                  
 37431                                  ; Make sure that there is a path char at end.
 37432                                  
 37433 00006D69 B05C                    	MOV     AL,'\'
 37434 00006D6B 263845FF                	CMP     [ES:DI-1],AL
 37435 00006D6F 7401                    	JZ	short GetOrig
 37436 00006D71 AA                      	STOSB
 37437                                  
 37438                                  ; Now get original string.
 37439                                  
 37440                                  GetOrig:
 37441 00006D72 4F                      	DEC     DI                      ; point to path char
 37442 00006D73 5E                      	pop	si
 37443 00006D74 1F                      	pop	ds
 37444                                  
 37445                                  ; BX points to the end of the root part of the CDS (at where a path char
 37446                                  ; should be). Now, we decide whether we use this root or extend it with the
 37447                                  ; current directory. See if the input string begins with a leading 
 37449 00006D75 E8D000                  	CALL    PathSep                 ; is DS:SI a path sep?
 37450 00006D78 7511                    	JNZ	short PathAssure	; no, DI is correct. Assure a path char
 37451 00006D7A 08C0                    	OR      AL,AL                   ; end of string?
 37452 00006D7C 7410                    	JZ	short DoCanon		; yes, skip.
 37453                                  ;
 37454                                  ; The string does begin with a \. Reset the beginning of the canonicalization
 37455                                  ; to this root. Make sure that there is a path char there and advance the
 37456                                  ; source string over all leading \'s.
 37457                                  ;
 37458 00006D7E 89DF                    	MOV     DI,BX                   ; back up to root point.
 37459                                  SkipPath:
 37460 00006D80 AC                      	LODSB
 37461 00006D81 E8F7E3                  	call    PATHCHRCMP
 37462 00006D84 74FA                    	JZ	short SkipPath
 37463 00006D86 4E                      	DEC     SI
 37464 00006D87 08C0                    	OR      AL,AL
 37465 00006D89 7403                    	JZ	short DoCanon
 37466                                  
 37467                                  ; DS:SI start at some file name. ES:DI points at some path char. Drop one in
 37468                                  ; for yucks.
 37469                                  
 37470                                  PathAssure:
 37471 00006D8B B05C                    	MOV     AL,'\'	; 5Ch
 37472 00006D8D AA                      	STOSB
 37473                                  
 37474                                  ; ES:DI point to the correct spot for canonicalization to begin.
 37475                                  ; BP is the max extent to advance DI
 37476                                  ; BX is the backup limit for ..
 37477                                  
 37478                                  DoCanon:
 37479 00006D8E E85200                  	CALL    Canonicalize            ; wham.
 37480                                  	;retc				; badly formatted path.
 37481 00006D91 72AB                    	jc	short DoFile_retn
 37482                                  
 37483                                  ; The string has been moved to ES:DI. Reset world to DOS context, pointers
 37484                                  ; to wfp_start and do string substitution. BP is still the max position in
 37485                                  ; buffer.
 37486                                  
 37487 00006D93 16                      	push	ss
 37488 00006D94 1F                      	pop	ds
 37489 00006D95 8B3E[B205]              	MOV     DI,[WFP_START]		; DS:SI point to string
 37490 00006D99 C536[A205]              	LDS     SI,[THISCDS]		; point to CDS
 37491 00006D9D E81C02                  	CALL    PathPref                ; is there a prefix?
 37492 00006DA0 7514                    	JNZ	short DoSplice		; no, do splice
 37493                                  
 37494                                  ; We have a match. Check to see if we ended in a path char.
 37495                                  
 37496 00006DA2 8A44FF                  	MOV     AL,[SI-1]		; last char to match
 37497 00006DA5 E8D3E3                  	call    PATHCHRCMP              ; did we end on a path char? (root)
 37498 00006DA8 740C                    	JZ	short DoSplice		; yes, no current dir here.
 37499                                  Pathline:                               ; 2/13/KK
 37500 00006DAA 26803D00                	CMP     BYTE [ES:DI],0		; end at NUL?
 37501 00006DAE 7406                    	JZ	short DoSplice
 37502 00006DB0 47                      	INC     DI                      ; point to after current path char
 37503 00006DB1 36893E[B605]            	MOV     [SS:CURR_DIR_END],DI	; point to correct spot ;smr;SS Override
 37504                                  
 37505                                  ; Splice the result.
 37506                                  
 37507                                  DoSplice:
 37508 00006DB6 16                      	push	ss
 37509 00006DB7 1F                      	pop	ds			; back to DOSDATA
 37510 00006DB8 8B36[B205]              	MOV     SI,[WFP_START]		; point to beginning of string
 37511 00006DBC 31C9                    	XOR     CX,CX
 37512 00006DBE F606[7105]FF            	TEST	byte [FSPLICE],-1
 37513 00006DC3 7403                    	JZ	short SkipSplice
 37514 00006DC5 E82A01                  	CALL    Splice                  ; replaces in place.
 37515                                  SkipSplice:
 37516                                  
 37517                                  ; The final thing is to assure ourselves that a FATREAD is done on the local
 37518                                  ; device.
 37519                                  
 37520 00006DC8 16                      	push	ss
 37521 00006DC9 1F                      	pop	ds
 37522 00006DCA C43E[A205]              	LES     DI,[THISCDS]		; point to correct drive
 37523                                  	;test	word [es:di+67],8000h
 37524                                  	; 17/12/2022
 37525                                  	;test	byte [es:di+68],80h
 37526 00006DCE 26F6454480              	test	byte [ES:DI+curdir.flags+1],curdir_isnet>>8 ; 04/12/2022
 37527                                  	;TEST	word [ES:DI+curdir.flags],curdir_isnet ; 8000h
 37528 00006DD3 750D                    	JNZ	short Done		; net, no fatread necessary (retnz)
 37529 00006DD5 E30B                    	JCXZ    Done
 37530 00006DD7 E87EA5                  	call	ECritDisk
 37531 00006DDA E8F4E9                  	call	FATREAD_CDS
 37532 00006DDD E893A5                  	call	LCritDisk
 37533                                  	;mov	al, 3
 37534 00006DE0 B003                    	MOV     AL,error_path_not_found ; Set up for possible bad path error
 37535                                  Done:   
 37536 00006DE2 C3                      	retn                         ; any errors in carry flag.
 37537                                  
 37538                                  ; 13/07/2018
 37539                                  
 37540                                  ;BREAK <Canonicalize - copy a path and remove . and .. entries>
 37541                                  ;----------------------------------------------------------------------------
 37542                                  ;   Canonicalize - copy path removing . and .. entries.
 37543                                  ;
 37544                                  ;   Inputs:     DS:SI - point to ASCIZ string path
 37545                                  ;               ES:DI - point to buffer
 37546                                  ;               BX - backup limit (offset from ES) points to slash
 37547                                  ;               BP - end of buffer
 37548                                  ;   Outputs:    Carry Set - invalid path specification: too many .., bad
 37549                                  ;                   syntax, etc.
 37550                                  ;               Carry Clear -
 37551                                  ;                   DS:DI - advanced to end of string
 37552                                  ;                   ES:DI - advanced to end of canonicalized form after nul
 37553                                  ;   Registers modified: AX CX DX (in addition to those above)
 37554                                  ;----------------------------------------------------------------------------
 37555                                  
 37556                                  	; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 37557                                  
 37558                                  Canonicalize:
 37559                                  
 37560                                  ; We copy all leading path separators.
 37561                                  
 37562 00006DE3 AC                      	LODSB                           ;   while (PathChr (*s))
 37563 00006DE4 E894E3                  	call    PATHCHRCMP
 37564 00006DE7 7507                    	JNZ	short CanonDec
 37565 00006DE9 39EF                    	CMP     DI,BP                   ;       if (d > dlim)
 37566 00006DEB 7319                    	JAE	short CanonBad		;           goto error;
 37567 00006DED AA                      	STOSB
 37568 00006DEE EBF3                    	JMP	short Canonicalize	;           *d++ = *s++;
 37569                                  CanonDec:
 37570 00006DF0 4E                      	DEC     SI
 37571                                  
 37572                                  ; Main canonicalization loop. We come here with DS:SI pointing to a textual
 37573                                  ; component (no leading path separators) and ES:DI being the destination
 37574                                  ; buffer.
 37575                                  
 37576                                  CanonLoop:
 37577                                  
 37578                                  ; If we are at the end of the source string, then we need to check to see that
 37579                                  ; a potential drive specifier is correctly terminated with a path sep char.
 37580                                  ; Otherwise, do nothing
 37581                                  
 37582 00006DF1 31C0                    	XOR     AX,AX
 37583 00006DF3 3804                    	CMP     [SI],AL                 ;       if (*s == 0) {
 37584 00006DF5 751A                    	JNZ	short DoComponent
 37585 00006DF7 26807DFF3A              	CMP     BYTE [ES:DI-1],':'	;           if (d[-1] == ':')
 37586 00006DFC 7505                    	JNZ	short DoTerminate
 37587 00006DFE B05C                    	MOV     AL,'\'                  ;               *d++ = '\';
 37588 00006E00 AA                      	STOSB
 37589 00006E01 88E0                    	MOV     AL,AH
 37590                                  DoTerminate:
 37591 00006E03 AA                      	STOSB                           ;           *d++ = 0;
 37592 00006E04 F8                      	CLC                             ;           return (0);
 37593 00006E05 C3                      	retn
 37594                                  
 37595                                  CanonBad:
 37596 00006E06 E8CC01                  	CALL	ScanPathChar            ; check for path chars in rest of string
 37597                                  	;mov	al,3
 37598 00006E09 B003                    	MOV     AL,error_path_not_found ; Set up for bad path error
 37599 00006E0B 7402                    	JZ	short PathEnc		; path character encountered in string
 37600                                  	;mov	al,2
 37601 00006E0D B002                    	MOV     AL,error_file_not_found ; Set bad file error
 37602                                  PathEnc:
 37603 00006E0F F9                      	STC
 37604                                  CanonBad_retn:
 37605 00006E10 C3                      	retn
 37606                                  
 37607                                  ; We have a textual component that we must copy. We uppercase it and truncate
 37608                                  ; it to 8.3
 37609                                  
 37610                                  DoComponent:                            ;           }
 37611 00006E11 E85000                  	CALL    CopyComponent		;       if (!CopyComponent (s, d))
 37612 00006E14 72FA                    	jc	short CanonBad_retn	;           return (-1);
 37613                                  
 37614                                  ; We special case the . and .. cases.  These will be backed up.
 37615                                  
 37616                                  	;CMP	WORD PTR ES:[DI],'.' + (0 SHL 8)
 37617 00006E16 26833D2E                	CMP	WORD [ES:DI],002Eh
 37618 00006E1A 7408                    	JZ	short Skip1
 37619                                  	;CMP	WORD PTR ES:[DI],'..'
 37620 00006E1C 26813D2E2E              	CMP     WORD [ES:DI],2E2Eh
 37621 00006E21 750A                    	JNZ	short CanonNormal
 37622 00006E23 4F                      	DEC     DI                      ;           d--;
 37623                                  Skip1:  
 37624 00006E24 E82A00                  	CALL    SkipBack                ;           SkipBack ();
 37625                                  	;mov	al,3
 37626 00006E27 B003                    	MOV     AL,error_path_not_found ; Set up for possible bad path error
 37627 00006E29 72E5                    	jc	short CanonBad_retn
 37628 00006E2B EB02                    	JMP     short CanonPath         ;           }
 37629                                  
 37630                                  ; We have a normal path. Advance destination pointer over it.
 37631                                  
 37632                                  CanonNormal:                            ;       else
 37633 00006E2D 01CF                    	ADD     DI,CX                   ;           d += ct;
 37634                                  
 37635                                  ; We have successfully copied a component. We are now pointing at a path
 37636                                  ; sep char or are pointing at a nul or are pointing at something else.
 37637                                  ; If we point at something else, then we have an error.
 37638                                  
 37639                                  CanonPath:
 37640 00006E2F E81600                  	CALL    PathSep
 37641 00006E32 75D2                    	JNZ	short CanonBad		; something else...
 37642                                  
 37643                                  ; Copy the first path char we see.
 37644                                  
 37645 00006E34 AC                      	LODSB                           ; get the char
 37646 00006E35 E843E3                  	call    PATHCHRCMP              ; is it path char?
 37647 00006E38 75B6                    	JNZ	short CanonDec		; no, go test for nul
 37648 00006E3A 39EF                    	CMP     DI,BP                   ; beyond buffer end?
 37649 00006E3C 73C8                    	JAE	short CanonBad		; yep, error.
 37650 00006E3E AA                      	STOSB                           ; copy the one byte
 37651                                  
 37652                                  ; Skip all remaining path chars
 37653                                  
 37654                                  CanonPathLoop:
 37655 00006E3F AC                      	LODSB                           ; get next byte
 37656 00006E40 E838E3                  	call    PATHCHRCMP              ; path char again?
 37657 00006E43 74FA                    	JZ	short CanonPathLoop	; yep, grab another
 37658 00006E45 4E                      	DEC     SI                      ; back up
 37659 00006E46 EBA9                    	JMP	short  CanonLoop	; go copy component
 37660                                  
 37661                                  ;BREAK <PathSep - determine if char is a path separator>
 37662                                  ;----------------------------------------------------------------------------
 37663                                  ;   PathSep - look at DS:SI and see if char is / \ or NUL
 37664                                  ;   Inputs:     DS:SI - point to a char
 37665                                  ;   Outputs:    AL has char from DS:SI (/ => \)
 37666                                  ;               Zero set if AL is / \ or NUL
 37667                                  ;               Zero reset otherwise
 37668                                  ;   Registers modified: AL
 37669                                  ;----------------------------------------------------------------------------
 37670                                  
 37671                                  PathSep:
 37672 00006E48 8A04                    	MOV     AL,[SI]                 ; get the character
 37673                                  PathSepGotCh:				; already have character
 37674 00006E4A 08C0                    	OR      AL,AL                   ; test for zero
 37675 00006E4C 74C2                    	jz	short CanonBad_retn	; return if equal to zero (NUL)
 37676                                  	;call	PATHCHRCMP              ; check for path character
 37677                                  	;retn				; and return HIS determination
 37678                                  	; 18/12/2022
 37679 00006E4E E92AE3                  	jmp	PATHCHRCMP
 37680                                  
 37681                                  
 37682                                  ;BREAK <SkipBack - move backwards to a path separator>
 37683                                  ;----------------------------------------------------------------------------
 37684                                  ;   SkipBack - look at ES:DI and backup until it points to a / ;   Inputs:     ES:DI - point to a char
 37686                                  ;               BX has current directory back up limit (point to a / \)
 37687                                  ;   Outputs:    ES:DI backed up to point to a path char
 37688                                  ;               AL has char from output ES:DI (path sep if carry clear)
 37689                                  ;               Carry set if illegal backup
 37690                                  ;               Carry Clear if ok
 37691                                  ;   Registers modified: DI,AL
 37692                                  ;----------------------------------------------------------------------------
 37693                                  
 37694                                  SkipBack:
 37695 00006E51 39DF                    	CMP     DI,BX                   ;   while (TRUE) {
 37696 00006E53 720B                    	JB	short SkipBad		;       if (d < dlim)
 37697 00006E55 4F                      	DEC     DI                      ;           goto err;
 37698 00006E56 268A05                  	MOV     AL,[ES:DI]		;       if (pathchr (*--d))
 37699 00006E59 E81FE3                  	call    PATHCHRCMP              ;           break;
 37700 00006E5C 75F3                    	JNZ	short SkipBack		;       }
 37701 00006E5E F8                      	CLC                             ;   return (0);
 37702 00006E5F C3                      	retn				;
 37703                                  SkipBad:                                ;err:
 37704                                  	;mov	al,3
 37705 00006E60 B003                    	MOV     AL,error_path_not_found ; bad path error
 37706 00006E62 F9                      	STC                             ;   return (-1);
 37707 00006E63 C3                      	retn				;
 37708                                  
 37709                                  ;Break <CopyComponent - copy out a file path component>
 37710                                  ;----------------------------------------------------------------------------
 37711                                  ;   CopyComponent - copy a file component from a path string (DS:SI) into ES:DI
 37712                                  ;
 37713                                  ;   Inputs:     DS:SI - source path
 37714                                  ;               ES:DI - destination
 37715                                  ;               ES:BP - end of buffer
 37716                                  ;   Outputs:    Carry Set - too long
 37717                                  ;               Carry Clear - DS:SI moved past component
 37718                                  ;                   CX has length of destination
 37719                                  ;   Registers modified: AX,CX,DX
 37720                                  ;----------------------------------------------------------------------------
 37721                                  
 37722                                  	; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 37723                                  
 37724                                  CopyComponent:
 37725                                  
 37726                                  %define CopyBP	 [BP]		; word
 37727                                  %define CopyD	 [BP+2]		; dword
 37728                                  %define CopyDoff [BP+2]		; word
 37729                                  %define CopyS	 [BP+6]		; dword
 37730                                  %define CopySoff [BP+6]		; word
 37731                                  %define CopyTemp [BP+10]	; byte
 37732                                  
 37733 00006E64 83EC0E                  	SUB     SP,14                   ; room for temp buffer
 37734 00006E67 1E                      	push	ds
 37735 00006E68 56                      	push	si
 37736 00006E69 06                      	push	es
 37737 00006E6A 57                      	push	di
 37738 00006E6B 55                      	push	bp
 37739 00006E6C 89E5                    	MOV     BP,SP
 37740 00006E6E B42E                    	MOV     AH,'.'
 37741 00006E70 AC                      	LODSB
 37742 00006E71 AA                      	STOSB
 37743 00006E72 38E0                    	CMP     AL,AH                   ;   if ((*d++=*s++) == '.') {
 37744 00006E74 7518                    	JNZ	short NormalComp
 37745 00006E76 E8CFFF                  	CALL    PathSep                 ;       if (!pathsep(*s))
 37746 00006E79 740B                    	JZ	short NulTerm
 37747                                  TryTwoDot:
 37748 00006E7B AC                      	LODSB                           ;           if ((*d++=*s++) != '.'
 37749 00006E7C AA                      	STOSB
 37750 00006E7D 38E0                    	CMP     AL,AH
 37751 00006E7F 7557                    	JNZ	short CopyBad
 37752 00006E81 E8C4FF                  	CALL    PathSep
 37753 00006E84 7552                    	JNZ	short CopyBad		;               || !pathsep (*s))
 37754                                  NulTerm:                                ;               return -1;
 37755 00006E86 30C0                    	XOR     AL,AL                   ;       *d++ = 0;
 37756 00006E88 AA                      	STOSB
 37757 00006E89 897606                  	MOV     CopySoff,SI
 37758 00006E8C EB47                    	JMP     SHORT _GoodRet		;       }
 37759                                  NormalComp:                             ;   else {
 37760 00006E8E 8B7606                  	MOV     SI,CopySoff ; [bp+6]
 37761 00006E91 E825E2                  	call	NameTrans               ;       s = NameTrans (s, Name1);
 37762 00006E94 3B7606                  	CMP     SI,CopySoff             ;       if (s == CopySOff)
 37763 00006E97 743F                    	JZ	short CopyBad		;           return (-1);
 37764 00006E99 36F606[7205]FF          	TEST	byte [SS:FSHARING],-1	;       if (!fSharing) {;smr;SS Override
 37765 00006E9F 7510                    	JNZ	short DoPack
 37766 00006EA1 80E201                  	AND     DL,1                    ;           cMeta += fMeta;
 37767 00006EA4 360016[7A05]            	ADD	[ss:CMETA],DL		;           if (cMeta > 0);smr;SS Override
 37768 00006EA9 7F2D                    	JG	short CopyBad		;               return (-1);
 37769 00006EAB 7504                    	JNZ	short DoPack		;           else
 37770 00006EAD 08D2                    	OR      DL,DL                   ;           if (cMeta == 0 && fMeta == 0)
 37771 00006EAF 742F                    	JZ	short CopyBadPath	;               return (-1);
 37772                                  DoPack:                                 ;           }
 37773 00006EB1 897606                  	MOV     CopySoff,SI ; [bp+6]
 37774 00006EB4 16                      	push	ss
 37775 00006EB5 1F                      	pop	ds
 37776 00006EB6 BE[4B05]                	MOV     SI,NAME1
 37777 00006EB9 8D7E0A                  	LEA     DI,CopyTemp ; [bp+10]
 37778 00006EBC 57                      	push	di
 37779 00006EBD E860B2                  	call	PackName                ;       PackName (Name1, temp);
 37780 00006EC0 5F                      	pop	di
 37781 00006EC1 E86FA3                  	call	StrLen                  ;       if (strlen(temp)+d > bp)
 37782 00006EC4 49                      	DEC     CX
 37783 00006EC5 034E02                  	ADD     CX,CopyDoff ; [bp+2]
 37784                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 37785                                  	;cmp	cx,[bp+0]
 37786                                  	; 15/12/2022
 37787                                  	;cmp	cx,[bp]
 37788 00006EC8 3B4E00                  	CMP	CX,CopyBP   ; [bp+0]
 37789 00006ECB 730B                    	JAE	short CopyBad		;           return (-1);
 37790 00006ECD 89FE                    	MOV     SI,DI                   ;       strcpy (d, temp);
 37791 00006ECF C47E02                  	LES     DI,CopyD    ; [bp+2]	
 37792 00006ED2 E855A3                  	call	FStrCpy
 37793                                  _GoodRet:				;       }
 37794 00006ED5 F8                      	CLC
 37795 00006ED6 EB0B                    	JMP     SHORT CopyEnd           ;   return 0;
 37796                                  CopyBad:
 37797 00006ED8 F9                      	STC
 37798 00006ED9 E8F900                  	CALL    ScanPathChar            ; check for path chars in rest of string
 37799                                  	;mov	al,2
 37800 00006EDC B002                    	MOV     AL,error_file_not_found ; Set up for bad file error
 37801 00006EDE 7503                    	JNZ	short CopyEnd
 37802                                  CopyBadPath:
 37803 00006EE0 F9                      	STC
 37804                                  	;mov	al,3
 37805 00006EE1 B003                    	MOV     AL,error_path_not_found ; Set bad path error
 37806                                  CopyEnd:
 37807 00006EE3 5D                      	pop	bp
 37808 00006EE4 5F                      	pop	di
 37809 00006EE5 07                      	pop	es
 37810 00006EE6 5E                      	pop	si
 37811 00006EE7 1F                      	pop	ds
 37812 00006EE8 9F                      	LAHF
 37813 00006EE9 83C40E                  	ADD     SP,14                   ; reclaim temp buffer
 37814 00006EEC E844A3                  	call	StrLen
 37815 00006EEF 49                      	DEC     CX
 37816 00006EF0 9E                      	SAHF
 37817 00006EF1 C3                      	retn
 37818                                  
 37819                                  ; 14/05/2019 - Retro DOS v4.0
 37820                                  ; DOSCODE:AE22h (MSDOS 6.21, MSDOS.SYS)
 37821                                  
 37822                                  ; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 37823                                  ; DOSCODE:ADBFh (MSDOS 5.0, MSDOS.SYS)
 37824                                  
 37825                                  ;Break <Splice - pseudo mount by string substitution>
 37826                                  ;----------------------------------------------------------------------------
 37827                                  ;   Splice - take a string and substitute a prefix if one exists. Change
 37828                                  ;       ThisCDS to point to physical drive CDS.
 37829                                  ;   Inputs:     DS:SI point to string
 37830                                  ;               NoSetDir = TRUE => exact matches with splice fail
 37831                                  ;   Outputs:    DS:SI points to thisCDS
 37832                                  ;               ES:DI points to DPB
 37833                                  ;               String at DS:SI may be reduced in length by removing prefix
 37834                                  ;               and substituting drive letter.
 37835                                  ;               CX = 0 If no splice done
 37836                                  ;               CX <> 0 otherwise
 37837                                  ;               ThisCDS points to proper CDS if spliced, otherwise it is
 37838                                  ;                   left alone
 37839                                  ;               ThisDPB points to proper DPB
 37840                                  ;   Registers modified: DS:SI, ES:DI, BX,AX,CX
 37841                                  ;----------------------------------------------------------------------------
 37842                                  
 37843                                  Splice:
 37844 00006EF2 36F606[5A00]FF          	TEST	byte [SS:SPLICES],-1	;smr;SS Override
 37845 00006EF8 7469                    	JZ	short AllDone
 37846 00006EFA 36FF36[A205]            	push	word [SS:THISCDS]
 37847 00006EFF 36FF36[A405]            	push	word [SS:THISCDS+2]	; TmpCDS = ThisCDS;smr;SS Override
 37848 00006F04 1E                      	push	ds
 37849 00006F05 56                      	push	si
 37850 00006F06 5F                      	pop	di
 37851 00006F07 07                      	pop	es
 37852 00006F08 31C0                    	XOR     AX,AX                   ;   for (i=1; s = GetCDSFromDrv (i); i++)
 37853                                  SpliceScan:
 37854 00006F0A E8DBFC                  	call	GetCDSFromDrv
 37855 00006F0D 724A                    	JC	short SpliceDone
 37856 00006F0F FEC0                    	INC     AL
 37857                                  	; 17/12/2022
 37858                                  	;test	byte [si+68],20h
 37859 00006F11 F6444420                	test	byte [si+curdir.flags+1],curdir_splice>>8 ; 04/12/2022
 37860                                  	;;test	word [si+67],2000h
 37861                                  	;TEST	word [SI+curdir.flags],curdir_splice
 37862 00006F15 74F3                    	JZ	short SpliceScan 	;       if ( Spliced (i) ) {
 37863 00006F17 57                      	push	di
 37864 00006F18 E8A100                  	CALL    PathPref                ;           if (!PathPref (s, d))
 37865 00006F1B 7403                    	JZ	short SpliceFound	;
 37866                                  SpliceSkip:
 37867 00006F1D 5F                      	pop	di
 37868 00006F1E EBEA                    	JMP	short SpliceScan	;               continue;
 37869                                  SpliceFound:
 37870 00006F20 26803D00                	CMP     BYTE [ES:DI],0		;           if (*s || NoSetDir) {
 37871 00006F24 7508                    	JNZ	short SpliceDo
 37872 00006F26 36F606[4C03]FF          	TEST	byte [ss:NoSetDir],-1			;smr;SS Override
 37873 00006F2C 75EF                    	JNZ	short SpliceSkip
 37874                                  SpliceDo:
 37875 00006F2E 89FE                    	MOV     SI,DI                   ;               p = src + strlen (p);
 37876 00006F30 06                      	push	es
 37877 00006F31 1F                      	pop	ds
 37878 00006F32 5F                      	pop	di
 37879 00006F33 E88000                  	CALL	TextFromDrive1          ;               src = TextFromDrive1(src,i);
 37880 00006F36 36A1[B605]              	MOV     AX,[SS:CURR_DIR_END]			;smr;SS Override
 37881 00006F3A 09C0                    	OR      AX,AX
 37882 00006F3C 7808                    	JS	short NoPoke
 37883 00006F3E 01F8                    	ADD     AX,DI                   ;               curdirend += src-p;
 37884 00006F40 29F0                    	SUB     AX,SI
 37885 00006F42 36A3[B605]              	MOV     [SS:CURR_DIR_END],AX			;smr;SS Override
 37886                                  NoPoke:
 37887 00006F46 803C00                  	CMP     BYTE [SI],0		;               if (*p)
 37888 00006F49 7503                    	JNZ	short SpliceCopy	;                   *src++ = '\\';
 37889 00006F4B B05C                    	MOV     AL,"\"
 37890 00006F4D AA                      	STOSB
 37891                                  SpliceCopy:                             ;               strcpy (src, p);
 37892 00006F4E E8D9A2                  	call	FStrCpy
 37893 00006F51 83C404                  	ADD     SP,4                    ; throw away saved stuff
 37894 00006F54 80C901                  	OR      CL,1                    ; signal splice done.
 37895 00006F57 EB0C                    	JMP     SHORT DoSet             ;               return;
 37896                                  SpliceDone:                             ;               }
 37897 00006F59 368F06[A405]            	pop	word [SS:THISCDS+2]     ;   ThisCDS = TmpCDS;
 37898 00006F5E 368F06[A205]            	pop	word [SS:THISCDS]			;smr;SS Override
 37899                                  AllDone:
 37900 00006F63 31C9                    	XOR     CX,CX
 37901                                  DoSet:
 37902 00006F65 36C536[A205]            	LDS     SI,[SS:THISCDS]		;   ThisDPB = ThisCDS->devptr;;smr;SS Override
 37903                                  	;les	di,[si+69]
 37904 00006F6A C47C45                  	LES     DI,[SI+curdir.devptr]	
 37905 00006F6D 36893E[8A05]            	MOV	[SS:THISDPB],DI				;smr;SS Override
 37906 00006F72 368C06[8C05]            	MOV	[SS:THISDPB+2],ES			;smr;SS Override
 37907                                  Splice_retn:
 37908 00006F77 C3                      	retn
 37909                                  
 37910                                  ; 15/05/2019 - Retro DOS v4.0
 37911                                  ; DOSCODE:AEA9h (MSDOS 6.21, MSDOS.SYS)
 37912                                  
 37913                                  ; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 37914                                  ; DOSCODE:AE46h (MSDOS 5.0, MSDOS.SYS)
 37915                                  
 37916                                  ;Break <$NameTrans - partially process a name>
 37917                                  ;----------------------------------------------------------------------------
 37918                                  ;   $NameTrans - allow users to see what names get mapped to. This call
 37919                                  ;   performs only string substitution and canonicalization, not splicing.  Due
 37920                                  ;   to Transpath playing games with devices, we need to insure that the output
 37921                                  ;   has drive letter and : in it.
 37922                                  ;
 37923                                  ;   Inputs:     DS:SI - source string for translation
 37924                                  ;               ES:DI - pointer to buffer
 37925                                  ;   Outputs:
 37926                                  ;       Carry Clear
 37927                                  ;               Buffer at ES:DI is filled in with data
 37928                                  ;               ES:DI point byte after nul byte at end of dest string in buffer
 37929                                  ;       Carry Set
 37930                                  ;               AX = error_path_not_found
 37931                                  ;   Registers modified: all
 37932                                  ;----------------------------------------------------------------------------
 37933                                  
 37934                                  _$NameTrans:
 37935 00006F78 1E                      	push	ds
 37936 00006F79 56                      	push	si
 37937 00006F7A 06                      	push	es
 37938 00006F7B 57                      	push	di
 37939 00006F7C 51                      	push	cx ; MSDOS 6.0
 37940                                  	
 37941                                  	; MSDOS 6.0	
 37942                                  ; M027 - Start
 37943                                  ;
 37944                                  ; Sattrib must be set up with default values here. Otherwise, the value from
 37945                                  ; a previous DOS call is used for attrib and DevName thinks it is not a 
 37946                                  ; device if the old call set the volume attribute bit. Note that devname in
 37947                                  ; dir2.asm gets ultimately called by Transpath. See also M026. Also save
 37948                                  ; and restore CX.
 37949                                  
 37950                                  	;mov	ch,16h
 37951 00006F7D B516                    	mov     ch,attr_hidden+attr_system+attr_directory
 37952 00006F7F E8BA02                  	call	SetAttrib
 37953                                  
 37954                                  ; M027 - End
 37955                                  
 37956                                  	; MSDOS 3.3 (& MSDOS 6.0)
 37957 00006F82 BF[BE03]                	MOV     DI,OPENBUF
 37958 00006F85 E8E6FC                  	CALL    TransPath               ; to translation (everything)
 37959 00006F88 59                      	pop	cx ; MSDOS 6.0
 37960 00006F89 5F                      	pop     di
 37961 00006F8A 07                      	pop	es
 37962 00006F8B 5E                      	pop     si
 37963 00006F8C 1F                      	pop     ds
 37964 00006F8D 7303                    	JNC	short TransOK
 37965 00006F8F E9C096                  	jmp	SYS_RET_ERR
 37966                                  TransOK:
 37967 00006F92 BE[BE03]                	MOV     SI,OPENBUF
 37968 00006F95 16                      	push	ss
 37969 00006F96 1F                      	pop	ds
 37970                                  ;GotText:
 37971 00006F97 E890A2                  	call	FStrCpy
 37972 00006F9A E9AC96                  	jmp	SYS_RET_OK
 37973                                  
 37974                                  ;Break   <DriveFromText - return drive number from a text string>
 37975                                  ;----------------------------------------------------------------------------
 37976                                  ;   DriveFromText - examine DS:SI and remove a drive letter, advancing the
 37977                                  ;   pointer.
 37978                                  ;
 37979                                  ;   Inputs:     DS:SI point to a text string
 37980                                  ;   Outputs:    AL has drive number
 37981                                  ;               DS:SI advanced
 37982                                  ;   Registers modified: AX,SI.
 37983                                  ;----------------------------------------------------------------------------
 37984                                  
 37985                                  DriveFromText:
 37986 00006F9D 30C0                    	XOR     AL,AL                   ;       drive = 0;
 37987 00006F9F 803C00                  	CMP     BYTE [SI],0		;       if (*s &&
 37988 00006FA2 74D3                    	jz	short Splice_retn
 37989 00006FA4 807C013A                	CMP     BYTE [SI+1],':'		;           s[1] == ':') {
 37990 00006FA8 75CD                    	jnz	short Splice_retn
 37991 00006FAA AD                      	LODSW                           ;           drive = (*s | 020) - 'a'+1;
 37992 00006FAB 0C20                    	OR      AL,20h
 37993                                  	;sub	al,60h
 37994 00006FAD 2C60                    	SUB     AL,'a'-1                ;           s += 2;
 37995 00006FAF 75C6                    	jnz	short Splice_retn
 37996 00006FB1 B0FF                    	MOV     AL,-1                   ; nuke AL...
 37997 00006FB3 C3                      	retn				;           }
 37998                                  
 37999                                  ;Break   <TextFromDrive - convert a drive number to a text string>
 38000                                  ;----------------------------------------------------------------------------
 38001                                  ;   TextFromDrive - turn AL into a drive letter: and put it at es:di with
 38002                                  ;   trailing :. TextFromDrive1 takes a 1-based number.
 38003                                  ;
 38004                                  ;   Inputs:     AL has 0-based drive number
 38005                                  ;   Outputs:    ES:DI advanced
 38006                                  ;   Registers modified: AX
 38007                                  ;----------------------------------------------------------------------------
 38008                                  
 38009                                  TextFromDrive:
 38010 00006FB4 FEC0                    	INC     AL
 38011                                  TextFromDrive1:
 38012                                  	;add	al,40h
 38013 00006FB6 0440                    	ADD     AL,'A'-1                ;   *d++ = drive-1+'A';
 38014 00006FB8 B43A                    	MOV     AH,":"	; 3Ah           ;   strcat (d, ":");
 38015 00006FBA AB                      	STOSW
 38016                                  PathPref_retn:
 38017 00006FBB C3                      	retn
 38018                                  
 38019                                  ;Break   <PathPref - see if one path is a prefix of another>
 38020                                  ;----------------------------------------------------------------------------
 38021                                  ;   PathPref - compare DS:SI with ES:DI to see if one is the prefix of the
 38022                                  ;   other.  Remember that only at a pathchar break are we allowed to have a
 38023                                  ;   prefix: A:\ and A:\FOO
 38024                                  ;
 38025                                  ;   Inputs:     DS:SI potential prefix
 38026                                  ;               ES:DI string
 38027                                  ;   Outputs:    Zero set => prefix found
 38028                                  ;                   DI/SI advanced past matching part
 38029                                  ;               Zero reset => no prefix, DS/SI garbage
 38030                                  ;   Registers modified: CX
 38031                                  ;----------------------------------------------------------------------------
 38032                                  
 38033                                  PathPref:
 38034 00006FBC E882A2                  	call	DStrLen                 ; get length
 38035 00006FBF 49                      	DEC     CX                      ; do not include nul byte
 38036 00006FC0 F3A6                    	REPZ    CMPSB                   ; compare
 38037 00006FC2 75F7                    	jnz	short PathPref_retn	; if NZ then return NZ
 38038 00006FC4 50                      	push	ax			; save char register
 38039 00006FC5 8A44FF                  	MOV     AL,[SI-1]               ; get last byte to match
 38040 00006FC8 E8B0E1                  	call    PATHCHRCMP              ; is it a path char (Root!)
 38041 00006FCB 7406                    	JZ	short Prefix		; yes, match root (I hope)
 38042                                  NotSep:                                 ; 2/13/KK
 38043 00006FCD 268A05                  	MOV     AL,[ES:DI]		; get next char to match
 38044 00006FD0 E877FE                  	CALL    PathSepGotCh            ; was it a pathchar?
 38045                                  Prefix:
 38046 00006FD3 58                      	pop	ax			; get back original
 38047 00006FD4 C3                      	retn
 38048                                  
 38049                                  ;Break   <ScanPathChar - see if there is a path character in a string>
 38050                                  ;----------------------------------------------------------------------------
 38051                                  ;     ScanPathChar - search through the string (pointed to by DS:SI) for
 38052                                  ;     a path separator.
 38053                                  ;
 38054                                  ;     Input:    DS:SI target string (null terminated)
 38055                                  ;     Output:   Zero set => path separator encountered in string
 38056                                  ;               Zero clear => null encountered
 38057                                  ;     Registers modified: SI
 38058                                  ;----------------------------------------------------------------------------
 38059                                  
 38060                                  ScanPathChar:
 38061 00006FD5 AC                      	LODSB                           ; fetch a character
 38062 00006FD6 E871FE                  	call    PathSepGotCh
 38063 00006FD9 75FA                    	JNZ	short ScanPathChar	; not \, / or NUL => go back for more
 38064                                  	;call	PATHCHRCMP              ; path separator?
 38065                                  	;retn
 38066                                  	; 18/12/2022
 38067 00006FDB E99DE1                  	jmp	PATHCHRCMP
 38068                                  
 38069                                  ;============================================================================
 38070                                  ; FILE.ASM, MSDOS 6.0, 1991
 38071                                  ;============================================================================
 38072                                  ; 14/07/2018 - Retro DOS v3.0
 38073                                  
 38074                                  ; 13/05/2019 - Retro DOS v4.0
 38075                                  ; DOSCODE:AF10h (MSDOS 6.21, MSDOS.SYS)
 38076                                  
 38077                                  ; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 38078                                  ; DOSCODE:AEADh (MSDOS 5.0, MSDOS.SYS)
 38079                                  
 38080                                  ; MSDOS 2.11
 38081                                  ;BREAK <$Open - open a file handle>
 38082                                  ;----------------------------------------------------------------------------
 38083                                  ;   Assembler usage:
 38084                                  ;           LDS     DX, Name
 38085                                  ;           MOV     AH, Open
 38086                                  ;           MOV     AL, access
 38087                                  ;           INT     int_command
 38088                                  ;
 38089                                  ;       ACCESS          Function
 38090                                  ;       ------          --------
 38091                                  ;       open_for_read   file is opened for reading
 38092                                  ;       open_for_write  file is opened for writing
 38093                                  ;       open_for_both   file is opened for both reading and writing.
 38094                                  ;
 38095                                  ;   Error returns:
 38096                                  ;           AX = error_invalid_access
 38097                                  ;              = error_file_not_found
 38098                                  ;              = error_access_denied
 38099                                  ;              = error_too_many_open_files
 38100                                  ;----------------------------------------------------------------------------
 38101                                  
 38102                                  ; MSDOS 6.0
 38103                                  ;	BREAK <$Open - open a file from a path string>
 38104                                  ;----------------------------------------------------------------------------
 38105                                  ;
 38106                                  ;**	$OPen - Open a File
 38107                                  ;
 38108                                  ;	given a path name in DS:DX and an open mode in AL, $Open opens the
 38109                                  ;	file and and returns a handle
 38110                                  ;
 38111                                  ;	ENTRY	(DS:DX) = pointer to asciz name
 38112                                  ;		(AL) = open mode
 38113                                  ;	EXIT	'C' clear if OK
 38114                                  ;		  (ax) = file handle
 38115                                  ;		'C' set if error
 38116                                  ;		  (ax) = error code
 38117                                  ;	USES	all
 38118                                  ;
 38119                                  ;----------------------------------------------------------------------------
 38120                                  
 38121                                  ; 13/05/2019 - Retro DOS v4.0
 38122                                  ; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 38123                                  
 38124                                  _$OPEN:       
 38125 00006FDE 30E4                    	xor	ah,ah  ; MSDOS 6.0	
 38126                                  _$Open2:
 38127                                  	;mov	ch,16h
 38128 00006FE0 B516                    	mov	ch,attr_hidden+attr_system+attr_directory
 38129 00006FE2 E85702                  	call	SetAttrib
 38130 00006FE5 B9[E42B]                	mov	cx,DOS_OPEN
 38131                                  
 38132                                  	;xor	ah,ah  ; MSDOS 3.3
 38133                                  
 38134 00006FE8 50                      	push	ax
 38135                                  
 38136                                  ;*	General file open/create code. The $CREATE call and the various
 38137                                  ;	$OPEN calls all come here.
 38138                                  ;
 38139                                  ;	We'll share a lot of the standard stuff of allocating SFTs, cracking
 38140                                  ;	path names, etc., and then dispatch to our individual handlers.
 38141                                  ;	WARNING - this info and list is just a guess, not definitive - jgl
 38142                                  ;
 38143                                  ;	(TOS) = create mode
 38144                                  ;	(CX) = address of routine to call to do actual function
 38145                                  ;	(DS:DX) = ASCIZ name
 38146                                  ;	SAttrib = Attribute mask
 38147                                  
 38148                                  ;	Get a free SFT and mark it "being allocated"
 38149                                  
 38150                                  AccessFile:
 38151 00006FE9 E86CA3                  	call	ECritSFT
 38152 00006FEC E8D3F7                  	call	SFNFree			; get a free sfn
 38153 00006FEF E881A3                  	call	LCritSFT
 38154 00006FF2 7214                    	jc	short OpenFailJ		; oops, no free sft's
 38155 00006FF4 36891E[AA05]            	MOV	[SS:SFN],BX		; save the SFN for later;smr;SS Override
 38156 00006FF9 36893E[9E05]            	MOV	[SS:THISSFT],DI		; save the SF offset	;smr;SS Override
 38157 00006FFE 368C06[A005]            	MOV	[SS:THISSFT+2],ES	; save the SF segment	;smr;SS Override
 38158                                  
 38159                                  ;	Find a free area in the user's JFN table.
 38160                                  
 38161 00007003 E8A9F7                  	call	JFNFree			; get a free jfn
 38162 00007006 7303                    	jnc	short SaveJFN
 38163                                  OpenFailJ:
 38164 00007008 E99300                  	JMP	OpenFail		; there were free JFNs... try SFN
 38165                                  
 38166                                  SaveJFN:
 38167 0000700B 36893E[AE05]            	mov	[ss:PJFN],DI		; save the jfn offset	;smr;SS Override
 38168 00007010 368C06[B005]            	MOV	[ss:PJFN+2],ES		; save the jfn segment	;smr;SS Override
 38169 00007015 36891E[AC05]            	MOV	[ss:JFN],BX		; save the jfn itself	;smr;SS Override
 38170                                  
 38171                                  ;	We have been given an JFN. We lock it down to prevent other tasks from
 38172                                  ;	reusing the same JFN.
 38173                                  
 38174 0000701A 368B1E[AA05]            	MOV	BX,[ss:SFN]					;smr;SS Override
 38175 0000701F 26881D                  	MOV	[ES:DI],BL		; assign the JFN
 38176 00007022 89D6                    	MOV	SI,DX			; get name in appropriate place
 38177 00007024 BF[BE03]                	MOV	DI,OPENBUF		; appropriate buffer
 38178 00007027 51                      	push	cx			; save routine to call
 38179 00007028 E843FC                  	call	TransPath		; convert the path
 38180 0000702B 5B                      	pop	bx			; (bx) = routine to call
 38181                                  
 38182 0000702C 36C536[9E05]            	LDS	SI,[SS:THISSFT]					;smr;SS Override
 38183 00007031 720A                    	JC	short OpenCleanJ	; no error, go and open file
 38184 00007033 36803E[7A05]FF          	CMP	byte [ss:CMETA],-1				;smr;SS Override
 38185 00007039 7404                    	JZ	short SetSearch
 38186                                  	;mov	al,2
 38187 0000703B B002                    	MOV	AL,error_file_not_found ; no meta chars allowed
 38188                                  OpenCleanJ:
 38189 0000703D EB50                    	JMP	short OpenClean
 38190                                  
 38191                                  SetSearch:
 38192 0000703F 58                      	pop	ax			; Mode (Open), Attributes (Create)
 38193                                  
 38194                                  ;	We need to get the new inheritance bits.
 38195                                  
 38196 00007040 31C9                    	xor	cx,cx
 38197                                  	; MSDOS 6.0
 38198                                  	;mov	[si+2],cx ; 0
 38199 00007042 894C02                  	MOV	[SI+SF_ENTRY.sf_mode],cx ; initialize mode field to 0
 38200                                  	;mov    [si+51],cx ; 0
 38201 00007045 894C33                  	MOV	[SI+SF_ENTRY.sf_MFT],cx	 ; clean out sharing info
 38202                                  	;
 38203 00007048 81FB[E42B]              	CMP	BX,DOS_OPEN
 38204 0000704C 7509                    	JNZ	short _DoOper
 38205                                  	;test   al,80h
 38206 0000704E A880                    	test	AL,SHARING_NO_INHERIT	; look for no inher
 38207 00007050 7405                    	JZ	short _DoOper ; 10/08/2018
 38208 00007052 247F                    	AND	AL,7Fh			; mask off inherit bit
 38209                                  	;mov	cx,1000h
 38210 00007054 B90010                  	MOV	CX,sf_no_inherit
 38211                                  _DoOper:
 38212                                  	;; MSDOS 3.3
 38213                                  	;;mov	word [si+2], 0
 38214                                  	;;mov	word [si+33h], 0
 38215                                  	;MOV	word [SI+SF_ENTRY.sf_mode],0
 38216                                  	;MOV	word [SI+SF_ENTRY.sf_MFT],0
 38217                                  
 38218                                  	; MSDOS 6.0
 38219                                  ;**	Check if this is an extended open. If so you must set the
 38220                                  ;	modes in sf_mode. Call Set_EXT_mode to do all this. See
 38221                                  ;	Set_EXT_mode in creat.asm
 38222                                  
 38223                                  	; MSDOS 6.0
 38224                                  	;SAVE	<di, es>                ;M022 conditional removed here
 38225 00007057 57                      	push	di
 38226 00007058 06                      	push	es
 38227 00007059 1E                      	push	ds
 38228 0000705A 07                      	pop	es
 38229 0000705B 56                      	push	si
 38230 0000705C 5F                      	pop	di			; (es:di) = SFT address
 38231 0000705D E870BB                  	call	Set_EXT_mode
 38232                                  	;RESTORE <es, di>
 38233 00007060 07                      	pop	es
 38234 00007061 5F                      	pop	di
 38235                                  
 38236                                  	;Context DS
 38237 00007062 16                      	push	ss
 38238 00007063 1F                      	pop	ds	
 38239                                  
 38240 00007064 51                      	push	cx
 38241 00007065 FFD3                    	CALL	BX			; blam!
 38242 00007067 59                      	pop	cx
 38243 00007068 C536[9E05]              	LDS	SI,[THISSFT]
 38244 0000706C 721A                    	JC	short OpenE2		;AN000;FT. chek extended open hooks first
 38245                                  	;jc	short OpenE ; MSDOS 3.3
 38246                                  
 38247                                  ;	The SFT was successfully opened. Remove busy mark.
 38248                                  
 38249                                  OpenOK:
 38250                                  	;MOV	word [SI+SF_ENTRY.sf_ref_count],1
 38251 0000706E C7040100                	mov	word [SI],1
 38252                                  	;or	[SI+5],cx
 38253 00007072 094C05                  	OR	[SI+SF_ENTRY.sf_flags],CX ; set no inherit bit if necessary
 38254                                  
 38255                                  ; If the open mode is 70, we scan the system for other SFT's with the same
 38256                                  ; contents. If we find one, then we can 'collapse' thissft onto the already
 38257                                  ; opened one. Otherwise we use this new one. We compare uid/pid/mode/mft
 38258                                  ;
 38259                                  ; Since this is only relevant on sharer systems, we stick this code into the
 38260                                  ; sharer.
 38261                                  
 38262 00007075 36A1[AC05]              	MOV	AX,[ss:JFN]				;smr;SS Override
 38263 00007079 36FF1E[C000]            	Call	far [ss:JShare+(12*4)]	; 12 = ShCol	;smr;SS Override
 38264                                  
 38265 0000707E 36C706[AA05]FFFF        	MOV	word [ss:SFN],-1	; clear out sfn pointer	;smr;SS Override
 38266                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 38267                                  OpenOkj:
 38268 00007085 E9C195                  	jmp	SYS_RET_OK		; bye with no errors
 38269                                  
 38270                                  	; MSDOS 6.0
 38271                                  ;Extended Open hooks check
 38272                                  OpenE2:					;AN000;;EO.
 38273 00007088 83F857                  	CMP	AX,error_invalid_parameter ;AN000;;EO. IFS extended open ?
 38274 0000708B 7503                    	JNZ	short OpenE		;AN000;;EO. no.
 38275 0000708D EB11                    	JMP	short OpenCritLeave	;AN000;;EO. keep handle
 38276                                  
 38277                                  ;	Extended Open hooks check
 38278                                  ;
 38279                                  ;	AL has error code.  Stack has argument to dos_open/dos_create.
 38280                                  
 38281                                  OpenClean:
 38282 0000708F 5B                      	pop	bx			; clean off stack
 38283                                  OpenE:
 38284                                  	;MOV	word [SI+SF_ENTRY.sf_ref_count],0 ; release SFT
 38285 00007090 C7040000                	mov	word [SI],0
 38286 00007094 36C536[AE05]            	LDS	SI,[ss:PJFN]		;smr;SS Override
 38287 00007099 C604FF                  	MOV	BYTE [SI],0FFh		; free the SFN...
 38288 0000709C EB02                    	JMP	SHORT OpenCritLeave
 38289                                  
 38290                                  OpenFail:
 38291 0000709E FB                      	STI
 38292 0000709F 59                      	pop	cx			; Clean stack
 38293                                  OpenCritLeave:
 38294 000070A0 36C706[AA05]FFFF        	MOV	word [SS:SFN],-1	; remove mark.
 38295                                  
 38296                                  	; MSDOS 6.0
 38297                                  ; File Tagging DOS 4.00
 38298 000070A7 36833E[2403]25          	CMP	word [SS:EXTERR],error_Code_Page_Mismatched
 38299                                  					;AN000;;FT. code page mismatch
 38300 000070AD 7503                    	JNZ	short NORERR	  	;AN000;;FT. no
 38301 000070AF E9A895                  	jmp	From_GetSet		;AN000;;FT. yes
 38302                                  NORERR: 				;AN000;
 38303                                  ; File Tagging DOS 4.00
 38304                                  
 38305 000070B2 E99D95                  	jmp	SYS_RET_ERR		; no free, return error
 38306                                  
 38307                                  ; MSDOS 2.11
 38308                                  ;BREAK <$CREAT - creat a new file and open him for input>
 38309                                  ;----------------------------------------------------------------------------
 38310                                  ;   Assembler usage:
 38311                                  ;           LDS     DX, name
 38312                                  ;           MOV     AH, Creat
 38313                                  ;           MOV     CX, access
 38314                                  ;           INT     21h
 38315                                  ;       ; AX now has the handle
 38316                                  ;
 38317                                  ;   Error returns:
 38318                                  ;           AX = error_access_denied
 38319                                  ;              = error_path_not_found
 38320                                  ;              = error_too_many_open_files
 38321                                  ;----------------------------------------------------------------------------
 38322                                  
 38323                                  ; MSDOS 6.0
 38324                                  ;	BREAK <$Creat - create a brand-new file>
 38325                                  ;----------------------------------------------------------------------------
 38326                                  ;
 38327                                  ;**	$Creat - Create a File
 38328                                  ;
 38329                                  ;	$Creat creates the directory entry specified in DS:DX and gives it the
 38330                                  ;	initial attributes contained in CX
 38331                                  ;
 38332                                  ;	ENTRY	(DS:DX) = ASCIZ path name
 38333                                  ;		(CX) = initial attributes
 38334                                  ;	EXIT	'C' set if error
 38335                                  ;		  (ax) = error code
 38336                                  ;		'C' clear if OK
 38337                                  ;		  (ax) = file handle
 38338                                  ;	USES	all
 38339                                  ;
 38340                                  ;----------------------------------------------------------------------------
 38341                                  
 38342                                  _$CREAT:
 38343 000070B5 51                      	push	cx			; Save attributes on stack
 38344 000070B6 B9[BA2A]                	mov	CX,DOS_CREATE		; routine to call
 38345                                  AccessSet:
 38346                                  	;mov	byte [ss:SATTRIB],6
 38347 000070B9 36C606[6D05]06          	mov	byte [ss:SATTRIB],attr_hidden+attr_system ;smr;SS Override
 38348                                  	; 10/08/2018
 38349 000070BF E927FF                  	JMP	AccessFile		; use good ol' open
 38350                                  
 38351                                  ; MSDOS 6.0 (MSDOS 3.3)
 38352                                  ;	BREAK <$CHMOD - change file attributes>
 38353                                  ;----------------------------------------------------------------------------
 38354                                  ;
 38355                                  ;**	$CHMOD - Change File Attributes
 38356                                  ;
 38357                                  ;   Assembler usage:
 38358                                  ;	    LDS     DX, name
 38359                                  ;	    MOV     CX, attributes
 38360                                  ;	    MOV     AL,func (0=get, 1=set)
 38361                                  ;	    INT     21h
 38362                                  ;   Error returns:
 38363                                  ;	    AX = error_path_not_found
 38364                                  ;	    AX = error_access_denied
 38365                                  ;
 38366                                  ;----------------------------------------------------------------------------
 38367                                  
 38368                                  	; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 38369                                  _$CHMOD:
 38370                                  	; 05/08/2018 - Retro DOS v3.0
 38371                                  	; IBMDOS.COM (MSDOS 3.3, 1987) - Offset 6FCCh ,
 38372 000070C2 BF[BE03]                	MOV	DI,OPENBUF		; appropriate buffer
 38373 000070C5 50                      	push	ax
 38374 000070C6 51                      	push	cx			; save function and attributes
 38375 000070C7 89D6                    	MOV	SI,DX			; get things in appropriate places
 38376 000070C9 E8A6FB                  	call	TransPathSet		; get correct path
 38377 000070CC 59                      	pop	cx
 38378 000070CD 58                      	pop	ax			; and get function and attrs back
 38379 000070CE 7257                    	JC	short ChModErr		; errors get mapped to path not found
 38380 000070D0 16                      	push	ss			; set up for later possible calls
 38381 000070D1 1F                      	pop	ds
 38382 000070D2 803E[7A05]FF            	CMP	byte [CMETA],-1
 38383 000070D7 754E                    	JNZ	short ChModErr
 38384                                  	;mov	byte [SATTRIB],16h
 38385 000070D9 C606[6D05]16            	MOV	byte [SATTRIB],attr_hidden+attr_system+attr_directory
 38386 000070DE 2C01                    	SUB	AL,1			; fast way to discriminate
 38387 000070E0 720B                    	JB	short ChModGet		; 0 -> go get value
 38388 000070E2 7417                    	JZ	short ChModSet		; 1 -> go set value
 38389                                  	;mov	byte [EXTERR_LOCUS],1
 38390 000070E4 C606[2303]01            	MOV	byte [EXTERR_LOCUS],errLOC_Unk ; Extended Error Locus
 38391                                  	;mov	al,1
 38392 000070E9 B001                    	mov	al,error_invalid_function ; bad value
 38393                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 38394                                  chmod_errj:	
 38395                                  	;;jmp	SYS_RET_ERR
 38396                                  	;jmp	short ChModE	
 38397 000070EB EBC5                    	jmp	short NORERR	; 06/12/2022
 38398                                  ChModGet:
 38399 000070ED E8B4B8                  	call	GET_FILE_INFO		; suck out the ol' info
 38400 000070F0 7237                    	JC	short ChModE		; error codes are already set for ret
 38401 000070F2 E89A93                  	call	Get_User_Stack		; point to user saved vaiables
 38402                                  	;mov	[SI+4],ax
 38403 000070F5 894404                  	MOV	[SI+user_env.user_CX],AX ; return the attributes
 38404                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility
 38405                                  OpenOkj2:
 38406                                  	; 17/12/2022
 38407                                  	;;jmp	SYS_RET_OK		; say sayonara
 38408                                  	;jmp	short OpenOkj
 38409                                  	; 25/06/2019
 38410 000070F8 E95195                  	jmp	SYS_RET_OK_clc
 38411                                  
 38412                                  ChModSet:
 38413 000070FB 89C8                    	MOV	AX,CX			; get attrs in position
 38414 000070FD E802B9                  	call	SET_FILE_ATTRIBUTE	; go set
 38415 00007100 7227                    	JC	short ChModE		; errors are set
 38416                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility
 38417                                  	;jmp	SYS_RET_OK
 38418                                  OpenOkj3:
 38419                                  	;jmp	short OpenOkj2
 38420                                  	; 17/12/2022
 38421 00007102 E94495                  	jmp	SYS_RET_OK
 38422                                  
 38423                                  ; 17/12/2022
 38424                                  %if 0
 38425                                  ChModErr:
 38426                                  NotFound:	; 17/12/2022
 38427                                  	;mov	al,3
 38428                                  	mov	al,error_path_not_found
 38429                                  ChModE:
 38430                                  UnlinkE:	; 17/12/2022
 38431                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 38432                                  	;;jmp	SYS_RET_ERR
 38433                                  	;jmp	short chmod_errj
 38434                                  	; 17/12/2022
 38435                                  	jmp	short NORERR
 38436                                  %endif
 38437                                  
 38438                                  ; 22/05/2019 - Retro DOS v4.0
 38439                                  ; DOSCODE:B039h (MSDOS 6.21, MSDOS.SYS)
 38440                                  
 38441                                  ; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 38442                                  ; DOSCODE:AFD6h (MSDOS 5.0, MSDOS.SYS)
 38443                                  
 38444                                  ;	BREAK <$UNLINK - delete a file entry>
 38445                                  ;----------------------------------------------------------------------------
 38446                                  ;
 38447                                  ;**	$UNLINK - Delete a File
 38448                                  ;
 38449                                  ;
 38450                                  ;	Assembler usage:
 38451                                  ;	    LDS     DX, name
 38452                                  ;	    IF VIA SERVER DOS CALL
 38453                                  ;	     MOV     CX,SEARCH_ATTRIB
 38454                                  ;	    MOV     AH, Unlink
 38455                                  ;	    INT     21h
 38456                                  ;
 38457                                  ;	ENTRY	(ds:dx) = path name
 38458                                  ;		(cx) = search_attribute, if via server_dos
 38459                                  ;	EXIT	'C' clear if no error
 38460                                  ;		'C' set if error
 38461                                  ;		  (ax) = error code
 38462                                  ;			= error_file_not_found
 38463                                  ;			= error_access_denied
 38464                                  ;
 38465                                  ;----------------------------------------------------------------------------
 38466                                  
 38467                                  _$UNLINK:
 38468 00007105 51                      	push	cx			; Save possible CX input parm
 38469 00007106 89D6                    	MOV	SI,DX			; Point at input string
 38470 00007108 BF[BE03]                	MOV	DI,OPENBUF		; temp spot for path
 38471 0000710B E864FB                  	call	TransPathSet		; go get normalized path
 38472 0000710E 59                      	pop	cx
 38473 0000710F 7216                    	JC	short ChModErr		; badly formed path
 38474 00007111 36803E[7A05]FF          	CMP	byte [ss:CMETA],-1	; meta chars?	;smr;SS Override
 38475 00007117 750E                    	JNZ	short NotFound
 38476 00007119 16                      	push	ss
 38477 0000711A 1F                      	pop	ds
 38478                                  	;mov	ch,6
 38479 0000711B B506                    	mov	ch,attr_hidden+attr_system ; unlink appropriate files
 38480 0000711D E81C01                  	call	SetAttrib
 38481 00007120 E871B4                  	call	DOS_DELETE		; remove that file
 38482                                  	;JC	short UnlinkE 		; error is there
 38483                                  	; 17/12/2022
 38484 00007123 728D                    	jc	short NORERR
 38485                                  
 38486                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 38487                                  UnlinkOk:
 38488                                  	;jmp	SYS_RET_OK		; okey doksy
 38489 00007125 EBDB                    	jmp	short OpenOkj3
 38490                                  
 38491                                  	; 17/12/2022
 38492                                  ChModErr:	; 17/12/2022
 38493                                  NotFound:
 38494                                  	;mov	al,3
 38495 00007127 B003                    	MOV	AL,error_path_not_found
 38496                                  ChModE:		; 17/12/2022
 38497                                  UnlinkE:
 38498                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 38499                                  	;;jmp	SYS_RET_ERR		; bye
 38500                                  	;jmp	short ChModE
 38501                                  	; 17/12/2022
 38502 00007129 EB87                    	jmp	short NORERR
 38503                                  
 38504                                  ;BREAK <$RENAME - move directory entries around>
 38505                                  ;----------------------------------------------------------------------------
 38506                                  ;
 38507                                  ;   Assembler usage:
 38508                                  ;	    LDS     DX, source
 38509                                  ;	    LES     DI, dest
 38510                                  ;	    IF VIA SERVER DOS CALL
 38511                                  ;	      MOV   CX,SEARCH_ATTRIB
 38512                                  ;	    MOV     AH, Rename
 38513                                  ;	    INT     21h
 38514                                  ;
 38515                                  ;   Error returns:
 38516                                  ;	    AX = error_file_not_found
 38517                                  ;	       = error_not_same_device
 38518                                  ;	       = error_access_denied
 38519                                  ;
 38520                                  ;----------------------------------------------------------------------------
 38521                                  
 38522                                  	; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 38523                                  _$RENAME:
 38524                                  	; MSDOS 3.3 (& MSDOS 6.0)
 38525 0000712B 51                      	push	cx
 38526 0000712C 1E                      	push	ds
 38527 0000712D 52                      	push	dx			; save source and possible CX arg
 38528 0000712E 06                      	PUSH	ES
 38529 0000712F 1F                      	POP	DS			; move dest to source
 38530 00007130 89FE                    	MOV	SI,DI			; save for offsets
 38531 00007132 BF[3E04]                	MOV	DI,RENBUF
 38532 00007135 E83AFB                  	call	TransPathSet		; munge the paths
 38533 00007138 36FF36[B205]            	PUSH	word [ss:WFP_START]	; get pointer	;smr;SS Override
 38534 0000713D 368F06[B405]            	POP	word [ss:REN_WFP]	; stash it	;smr;SS Override
 38535 00007142 5E                      	pop	si
 38536 00007143 1F                      	pop	ds
 38537 00007144 59                      	pop	cx			; get back source and possible CX arg
 38538                                  epjc2:	
 38539 00007145 72E0                    	JC	short ChModErr		; get old error
 38540 00007147 36803E[7A05]FF          	CMP	byte [ss:CMETA],-1			;smr;SS Override
 38541 0000714D 75D8                    	JNZ	short NotFound
 38542 0000714F 51                      	push	cx			; Save possible CX arg
 38543 00007150 BF[BE03]                	MOV	DI,OPENBUF		; appropriate buffer
 38544 00007153 E81CFB                  	call	TransPathSet		; wham
 38545 00007156 59                      	pop	cx
 38546 00007157 72EC                    	JC	short epjc2
 38547 00007159 16                      	push	ss
 38548 0000715A 1F                      	pop	ds
 38549 0000715B 803E[7A05]FF            	CMP	byte [CMETA],-1
 38550 00007160 72C5                    	JB	short NotFound
 38551                                  
 38552                                  	; MSDOS 6.0
 38553 00007162 FF36[A205]              	PUSH	WORD [THISCDS]		   ;AN000;;MS.save thiscds
 38554 00007166 FF36[A405]              	PUSH	WORD [THISCDS+2]	   ;AN000;;MS.
 38555 0000716A BF[BE03]                	MOV	DI,OPENBUF		   ;AN000;;MS.
 38556 0000716D 16                      	PUSH	SS			   ;AN000;;MS.
 38557 0000716E 07                      	POP	ES			   ;AN000;;MS.es:di-> source
 38558 0000716F 30C0                    	XOR	AL,AL			   ;AN000;;MS.scan all CDS
 38559                                  rnloop: 				   ;AN000;
 38560 00007171 E874FA                  	call	GetCDSFromDrv		   ;AN000;;MS.
 38561 00007174 7210                    	JC	short dorn		   ;AN000;;MS.	end of CDS
 38562 00007176 E880A0                  	call	StrCmp			   ;AN000;;MS.	current dir ?
 38563 00007179 7404                    	JZ	short rnerr		   ;AN000;;MS.	yes
 38564 0000717B FEC0                    	INC	AL			   ;AN000;;MS.	next
 38565 0000717D EBF2                    	JMP	short rnloop		   ;AN000;;MS.
 38566                                  rnerr:					   ;AN000;
 38567 0000717F 83C404                  	ADD	SP,4			   ;AN000;;MS. pop thiscds
 38568                                  	;error	error_current_directory    ;AN000;;MS.
 38569 00007182 B010                    	mov	al,error_current_directory 
 38570                                  	;jmp	SYS_RET_ERR
 38571                                  	; 07/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 38572 00007184 EBA3                    	jmp	short UnlinkE
 38573                                  dorn:					   ;AN000;
 38574 00007186 368F06[A405]            	POP	WORD [SS:THISCDS+2]	   ;AN000;;MS.;PBUGBUG;SS REQD??
 38575 0000718B 368F06[A205]            	POP	WORD [SS:THISCDS]	   ;AN000;;MS.;PBUGBUG;SS REQD??
 38576                                  
 38577 00007190 16                      	push	ss
 38578 00007191 1F                      	pop	ds
 38579                                  
 38580                                  	; MSDOS 3.3 (& MSDOS 6.0)
 38581                                  	;mov	ch,16h
 38582 00007192 B516                    	mov	ch,attr_directory+attr_hidden+attr_system
 38583                                  					; rename appropriate files
 38584 00007194 E8A500                  	call	SetAttrib
 38585 00007197 E8D8B5                  	call	DOS_RENAME		; do the deed
 38586 0000719A 728D                    	JC	short UnlinkE 		; errors
 38587                                  
 38588                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 38589                                  	;jmp	SYS_RET_OK
 38590 0000719C EB87                    	jmp	short UnlinkOk
 38591                                  
 38592                                  
 38593                                  ; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 38594                                  
 38595                                  ; 14/07/2018 - Retro DOS v3.0
 38596                                  ; MSDOS 3.3 (& MSDOS 6.0)
 38597                                  
 38598                                  ;Break <$CreateNewFile - Create a new directory entry>
 38599                                  ;----------------------------------------------------------------------------
 38600                                  ;   CreateNew - Create a new directory entry.  Return a file handle if there
 38601                                  ;	was no previous directory entry, and fail if a directory entry with
 38602                                  ;	the same name existed previously.
 38603                                  ;
 38604                                  ;   Inputs:	DS:DX point to an ASCIZ file name
 38605                                  ;		CX contains default file attributes
 38606                                  ;   Outputs:	Carry Clear:
 38607                                  ;		    AX has file handle opened for read/write
 38608                                  ;		Carry Set:
 38609                                  ;		    AX has error code
 38610                                  ;   Registers modified: All
 38611                                  ;----------------------------------------------------------------------------
 38612                                  
 38613                                  _$CreateNewFile:
 38614 0000719E 51                      	push	cx			; Save attributes on stack
 38615 0000719F B9[872B]                	MOV	CX,DOS_Create_New	; routine to call
 38616 000071A2 E914FF                  	JMP	AccessSet		; use good ol' open
 38617                                  
 38618                                  ;**	BinToAscii - convert a number to a string.
 38619                                  ;----------------------------------------------------------------------------
 38620                                  ;	BinToAscii converts a 16 bit number into a 4 ascii characters.
 38621                                  ;	This routine is used to generate temp file names so we don't spend
 38622                                  ;	the time and code needed for a true hex number, we just use
 38623                                  ;	A thorugh O.
 38624                                  ;
 38625                                  ;	ENTRY	(ax) = value
 38626                                  ;		(es:di) = destination
 38627                                  ;	EXIT	(es:di) updated by 4
 38628                                  ;	USES	cx, di, flags
 38629                                  ;----------------------------------------------------------------------------
 38630                                  
 38631                                  ; MSDOS 3.3
 38632                                  ;BinToAscii:
 38633                                  ;	mov     cx,4
 38634                                  ;bta5:
 38635                                  ;	push    cx
 38636                                  ;	mov     cl,4
 38637                                  ;	rol     ax,cl
 38638                                  ;	push    ax
 38639                                  ;	and     al,0Fh
 38640                                  ;	add     al,'0'
 38641                                  ;	cmp     al,'9'
 38642                                  ;	jbe     short bta6
 38643                                  ;	add     al,7
 38644                                  ;bta6: 
 38645                                  ;	stosb
 38646                                  ;	pop     ax
 38647                                  ;	pop     cx
 38648                                  ;	loop    bta5
 38649                                  ;	retn
 38650                                  
 38651                                  ; MSDOS 6.0
 38652                                  BinToAscii:
 38653 000071A5 B90404                  	mov	cx,404h			; (ch) = digit counter, (cl) = shift cnt
 38654                                  bta5:	
 38655 000071A8 D3C0                    	ROL	AX,CL			; move leftmost nibble into rightmost
 38656 000071AA 50                      	push	ax			; preserve remainder of digits
 38657 000071AB 240F                    	AND	AL,0Fh			; grab low nibble
 38658 000071AD 0441                    	ADD	AL,'A'			; turn into ascii
 38659 000071AF AA                      	STOSB				; drop in the character
 38660 000071B0 58                      	pop	ax			; (ax) = shifted number
 38661 000071B1 FECD                    	dec	ch
 38662 000071B3 75F3                    	jnz	short bta5		; process 4 digits
 38663 000071B5 C3                      	retn
 38664                                  
 38665                                  ;Break	<$CreateTempFile - create a unique name>
 38666                                  ;----------------------------------------------------------------------------
 38667                                  ;   $CreateTemp - given a directory, create a unique name in that directory.
 38668                                  ;	Method used is to get the current time, convert to a name and attempt
 38669                                  ;	a create new. Repeat until create new succeeds.
 38670                                  ;
 38671                                  ;   Inputs:	DS:DX point to a null terminated directory name.
 38672                                  ;		CX  contains default attributes
 38673                                  ;   Outputs:	Unique name is appended to DS:DX directory.
 38674                                  ;		AX has handle
 38675                                  ;   Registers modified: all
 38676                                  ;----------------------------------------------------------------------------
 38677                                  
 38678                                  	; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 38679                                  
 38680                                  _$CreateTempFile:
 38681                                  	;Enter
 38682 000071B6 55                      	push	bp
 38683 000071B7 89E5                    	mov	bp,sp
 38684                                  
 38685                                  	;LocalVar  EndPtr,DWORD
 38686                                  	;LocalVar  FilPtr,DWORD
 38687                                  	;LocalVar  Attr,WORD
 38688                                  
 38689 000071B9 83EC0A                  	sub	sp,10
 38690                                  
 38691                                  	;test	cx,0FFD8h
 38692 000071BC F7C1D8FF                	test	CX,~attr_changeable
 38693 000071C0 7405                    	JZ	short OKatts		; Ok if no non-changeable bits set
 38694                                  
 38695                                  ; We need this "hook" here to detect these cases (like user sets one both of
 38696                                  ; vol_id and dir bits) because of the structure of the or $CreateNewFile loop
 38697                                  ; below. The code loops on error_access_denied, but if one of the non
 38698                                  ; changeable attributes is specified, the loop COULD be infinite or WILL be
 38699                                  ; infinite because CreateNewFile will fail with access_denied always. Thus we
 38700                                  ; need to detect these cases before getting to the loop.
 38701                                  
 38702                                  	;mov	ax, 5
 38703 000071C2 B80500                  	MOV	AX,error_access_denied
 38704 000071C5 EB69                    	JMP	SHORT SETTMPERR
 38705                                  
 38706                                  OKatts:
 38707                                  	;MOV	attr,CX 		; save attribute
 38708 000071C7 894EF6                  	mov     [bp-10],cx
 38709                                  	;MOV	FilPtrL,DX		; pointer to file
 38710 000071CA 8956F8                  	mov	[bp-8],dx
 38711                                  	;MOV	FilPtrH,DS
 38712 000071CD 8C5EFA                  	mov	[bp-6],ds
 38713                                  	;MOV	EndPtrH,DS		; seg pointer to end of dir
 38714 000071D0 8C5EFE                  	mov	[bp-2],ds
 38715 000071D3 1E                      	PUSH	DS
 38716 000071D4 07                      	POP	ES			; destination for nul search
 38717 000071D5 89D7                    	MOV	DI,DX
 38718 000071D7 89F9                    	MOV	CX,DI
 38719 000071D9 F7D9                    	NEG	CX			; number of bytes remaining in segment
 38720                                  	; MSDOS 6.0
 38721 000071DB 09C9                    	OR	CX,CX			;AN000;MS. cx=0 ? ds:dx on segment boundary
 38722 000071DD 7501                    	JNZ	short okok		;AN000;MS. no
 38723                                  	;MOV	CX,-1			;AN000;MS.
 38724                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 38725                                  	; 17/12/2022
 38726 000071DF 49                      	dec	cx  ; mov cx,-1
 38727                                  	;mov	cx,-1 ; 0FFFh
 38728                                  okok:					;AN000;
 38729 000071E0 31C0                    	XOR	AX,AX			;AN000;
 38730 000071E2 F2AE                    	REPNZ	SCASB			;AN000;
 38731                                  					;AN000;
 38732 000071E4 4F                      	DEC	DI			; point back to the null
 38733 000071E5 268A45FF                	MOV	AL,[ES:DI-1]		; Get char before the NUL
 38734 000071E9 E88FDF                  	call	PATHCHRCMP		; Is it a path separator?
 38735 000071EC 7403                    	JZ	short SETENDPTR		; Yes
 38736                                  STOREPTH:
 38737 000071EE B05C                    	MOV	AL,'\'
 38738 000071F0 AA                      	STOSB				; Add a path separator (and INC DI)
 38739                                  SETENDPTR:
 38740                                  	;MOV	EndPtrL,DI		; pointer to the tail
 38741 000071F1 8856FC                  	mov	[bp-4],dl
 38742                                  CreateLoop:
 38743 000071F4 16                      	push	ss			; let ReadTime see variables
 38744 000071F5 1F                      	pop	ds
 38745 000071F6 55                      	push	bp
 38746 000071F7 E83F99                  	call	READTIME		; go get time
 38747 000071FA 5D                      	pop	bp
 38748                                  ;
 38749                                  ; Time is in CX:DX. Go drop it into the string.
 38750                                  ;
 38751                                  	;les	di,EndPtr		; point to the string
 38752 000071FB C47EFC                  	les	di,[BP-4]
 38753 000071FE 89C8                    	mov	ax,cx
 38754 00007200 E8A2FF                  	call	BinToAscii		; store upper word
 38755 00007203 89D0                    	mov	ax,dx
 38756 00007205 E89DFF                  	call	BinToAscii		; store lower word
 38757 00007208 30C0                    	xor	al,al
 38758 0000720A AA                      	STOSB				; nul terminate
 38759                                  	;LDS	DX,FilPtr		; get name
 38760 0000720B C556F8                  	lds	dx,[bp-8]
 38761                                  	;MOV	CX,Attr 		; get attr
 38762 0000720E 8B4EF6                  	mov	cx,[bp-10]
 38763 00007211 55                      	push	bp
 38764 00007212 E889FF                  	CALL	_$CreateNewFile		; try to create a new file
 38765 00007215 5D                      	pop	bp
 38766 00007216 7319                    	JNC	short CreateDone	; failed, go try again
 38767                                  
 38768                                  ; The operation failed and the error has been mapped in AX. Grab the extended
 38769                                  ; error and figure out what to do.
 38770                                  
 38771                                  	;; MSDOS 3.3			; M049 - start
 38772                                  ;;	mov	ax,[ss:EXTERR]				;smr;SS Override
 38773                                  ;;	cmp	al,error_file_exists
 38774                                  ;;	jz	short CreateLoop	; file existed => try with new name
 38775                                  ;;	cmp	al,error_access_denied
 38776                                  ;;	jz	short CreateLoop	; access denied (attr mismatch)
 38777                                  
 38778                                  	; MSDOS 6.0
 38779                                  	;cmp	al,50h
 38780 00007218 3C50                    	CMP	AL,error_file_exists	; Q: did file already exist
 38781 0000721A 74D8                    	JZ	short CreateLoop	; Y: try again
 38782                                  	;cmp	al,5
 38783 0000721C 3C05                    	CMP	AL,error_access_denied	; Q: was it access denied
 38784 0000721E 7510                    	JNZ	short SETTMPERR		; N: Error out
 38785                                  					; Y: Check to see if we got this due
 38786                                  					;    to the network drive. Note that
 38787                                  					;    the redir will set the exterr
 38788                                  					;    to error_cannot_make if this is 
 38789                                  					;    so. 
 38790 00007220 36803E[2403]41          	CMP	byte [SS:EXTERR],error_net_access_denied ; M069
 38791                                  					; See if it's REALLY an att mismatch
 38792 00007226 7408                    	je	short SETTMPERR		; no, network error, stop
 38793                                  ;M070
 38794                                  ; If the user failed on an I24, we do not want to try again
 38795                                  ;
 38796 00007228 36803E[2403]53          	cmp	byte [SS:EXTERR],error_FAIL_I24 ;User failed on I24? ;M070
 38797                                  	;je	short SETTMPERR		;yes, do not try again ;M070
 38798                                  
 38799                                  	;jmp	short CreateLoop	;attr mismatch, try again ;M070
 38800                                  	; 17/12/2022
 38801 0000722E 75C4                    	jne	short CreateLoop ; 10/06/2019 
 38802                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 38803                                  	;jz	short SETTMPERR
 38804                                  	;jmp	short CreateLoop
 38805                                  
 38806                                  ;;	MOV	AL,error_access_denied	; Return this "extended" error
 38807                                  					; M049 - end
 38808                                  SETTMPERR:
 38809 00007230 F9                      	STC
 38810                                  CreateDone:
 38811                                  	;Leave
 38812 00007231 89EC                    	mov	sp,bp
 38813 00007233 5D                      	pop	bp
 38814 00007234 7203                    	JC	short CreateFail
 38815 00007236 E91094                  	jmp	SYS_RET_OK		; success!
 38816                                  CreateFail:
 38817 00007239 E91694                  	jmp	SYS_RET_ERR
 38818                                  
 38819                                  ;   SetAttrib will set the search attribute (SAttrib) either to the normal
 38820                                  ;   (CH) or to the value in CL if the current system call is through
 38821                                  ;   serverdoscall.
 38822                                  ;
 38823                                  ;   Inputs:	fSharing == FALSE => set sattrib to CH
 38824                                  ;		fSharing == TRUE => set sattrib to CL
 38825                                  ;   Outputs:	none
 38826                                  ;   Registers changed:	CX
 38827                                  
 38828                                  SetAttrib:
 38829 0000723C 36F606[7205]FF          	test	byte [SS:FSHARING],-1		;smr;SS Override
 38830 00007242 7502                    	jnz	short Set
 38831 00007244 88E9                    	mov	cl,ch
 38832                                  Set:
 38833 00007246 36880E[6D05]            	mov	byte [ss:SATTRIB],cl		;smr;SS Override
 38834 0000724B C3                      	retn
 38835                                  
 38836                                  ; 14/07/2018 - Retro DOS v3.0
 38837                                  ; MSDOS 6.0
 38838                                  
 38839                                  ; 29/04/2019 - Retro DOS v4.0
 38840                                  
 38841                                  ;Break	<Extended_Open- Extended open the file>
 38842                                  ;----------------------------------------------------------------------------
 38843                                  ; Input: AL= 0 reserved  AH=6CH
 38844                                  ;	 BX= mode
 38845                                  ;	 CL= create attribute  CH=search attribute (from server)
 38846                                  ;	 DX= flag
 38847                                  ;	 DS:SI = file name
 38848                                  ;	 ES:DI = parm list
 38849                                  ;			   DD  SET EA list (-1) null
 38850                                  ;			   DW  n  parameters
 38851                                  ;			   DB  type (TTTTTTLL)
 38852                                  ;			   DW  IOMODE
 38853                                  ; Function: Extended Open
 38854                                  ; Output: carry clear
 38855                                  ;		     AX= handle
 38856                                  ;		     CX=1 file opened
 38857                                  ;			2 file created/opened
 38858                                  ;			3 file replaced/opened
 38859                                  ;	  carry set: AX has error code
 38860                                  ;----------------------------------------------------------------------------
 38861                                  
 38862                                  	; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 38863                                  _$Extended_Open:			  ;AN000;
 38864                                  	;ASSUME	CS:DOSCODE,SS:DOSDATA	  ;AN000;
 38865 0000724C 368916[F405]            	MOV	[SS:EXTOPEN_FLAG],DX	  ;AN000;EO. save ext. open flag;smr;SS Override
 38866 00007251 36C706[F705]0000        	MOV	word [SS:EXTOPEN_IO_MODE],0 ;AN000;EO. initialize IO mode;smr;SS Override
 38867                                  	; 17/12/2022
 38868 00007258 F6C6FE                  	test	dh,0FEh ; 04/12/2022 
 38869                                  	;;test	dx,0FE00h
 38870                                  	;TEST	DX,RESERVED_BITS_MASK	  ;AN000;EO. reserved bits 0  ?
 38871 0000725B 7545                    	JNZ	short ext_inval2	  ;AN000;EO. no
 38872 0000725D 88D4                    	MOV	AH,DL			  ;AN000;EO. make sure flag is right
 38873 0000725F 80FA00                  	CMP	DL,0			  ;AN000;EO. all fail ?
 38874 00007262 743E                    	JZ	short ext_inval2	  ;AN000;EO. yes, error
 38875                                  	;and	dl,0Fh
 38876 00007264 80E20F                  	AND	DL,EXISTS_MASK		  ;AN000;EO. get exists action byte
 38877 00007267 80FA02                  	CMP	DL,2			  ;AN000;EO, > 02
 38878 0000726A 7736                    	JA	short ext_inval2	  ;AN000;EO. yes ,error
 38879                                  	;and	ah,0F0h
 38880 0000726C 80E4F0                  	AND	AH,NOT_EXISTS_MASK	  ;AN000;EO. get no exists action byte
 38881 0000726F 80FC10                  	CMP	AH,10H			  ;AN000;EO. > 10
 38882 00007272 772E                    	JA	short ext_inval2	  ;AN000;EO. yes error
 38883                                  
 38884 00007274 368C06[FB05]            	MOV	[SS:SAVE_ES],ES		  ;AN000;EO. save API parms;smr;SS Override
 38885 00007279 36893E[F905]            	MOV	[SS:SAVE_DI],DI		  ;AN000;EO.;smr;SS Override
 38886 0000727E 36FF36[F405]            	PUSH	word [SS:EXTOPEN_FLAG]	  ;AN000;EO.;smr;SS Override
 38887 00007283 368F06[FD05]            	POP	word [SS:SAVE_DX]	  ;AN000;EO.;smr;SS Override
 38888 00007288 36890E[FF05]            	MOV	[SS:SAVE_CX],CX		  ;AN000;EO.;smr;SS Override
 38889 0000728D 36891E[0106]            	MOV	[SS:SAVE_BX],BX		  ;AN000;EO.;smr;SS Override
 38890 00007292 368C1E[0506]            	MOV	[SS:SAVE_DS],DS		  ;AN000;EO.;smr;SS Override
 38891 00007297 368936[0306]            	MOV	[SS:SAVE_SI],SI		  ;AN000;EO.;smr;SS Override
 38892 0000729C 89F2                    	MOV	DX,SI			  ;AN000;EO. ds:dx points to file name
 38893 0000729E 89D8                    	MOV	AX,BX			  ;AN000;EO. ax= mode
 38894 000072A0 EB0A                    	JMP	SHORT goopen2		  ;AN000;;EO. do normal
 38895                                  ext_inval2:				  ;AN000;;EO.
 38896                                  	;mov	al,1
 38897 000072A2 B001                    	mov	al,error_invalid_function ;AN000;EO.. invalid function
 38898                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 38899                                  eo_err:
 38900                                  	;jmp	SYS_RET_ERR
 38901 000072A4 EB93                    	jmp	short CreateFail
 38902                                  
 38903                                  ext_inval_parm:				  ;AN000;EO..
 38904 000072A6 59                      	POP	CX			  ;AN000;EO..  pop up satck
 38905 000072A7 5E                      	POP	SI			  ;AN000;EO..
 38906                                  	;error	error_invalid_data	  ;AN000;EO..  invalid parms
 38907                                  	;mov	al,13
 38908 000072A8 B00D                    	mov	al,error_invalid_data
 38909                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 38910                                  	;;jmp	SYS_RET_ERR
 38911                                  	;jmp	short eo_err
 38912                                  	; 17/12/2022
 38913 000072AA EB8D                    	jmp	short CreateFail
 38914                                  
 38915                                  	; 17/12/2022	
 38916                                  ;error_return:				  ;AN000;EO.
 38917                                  ;	retn				  ;AN000;EO.. return with error
 38918                                  
 38919                                  goopen2:				  ;AN000;
 38920                                  	; 17/12/2022
 38921                                  	;test	bh,20h				 
 38922 000072AC F6C720                  	test	bh,INT_24_ERROR>>8 ; 04/12/2022
 38923                                  	;;test	bx,2000h
 38924                                  	;TEST	BX,INT_24_ERROR		  ;AN000;EO.. disable INT 24 error ?
 38925 000072AF 7406                    	JZ	short goopen		  ;AN000;EO.. no
 38926                                  	;or	byte [SS:EXTOPEN_ON],2
 38927 000072B1 36800E[F605]02          	OR	byte [SS:EXTOPEN_ON],EXT_OPEN_I24_OFF ;AN000;EO.. set bit to disable;smr;SS Override
 38928                                  goopen:					  ;AN000;
 38929                                  	;or	byte [SS:EXTOPEN_ON],1 
 38930 000072B7 36800E[F605]01          	OR	byte [SS:EXTOPEN_ON],EXT_OPEN_ON  ;AN000;EO.. set Extended Open active;smr;SS Override
 38931                                  	;AND	word [SS:EXTOPEN_FLAG],0FFh  ;AN000;EO.create new ?;smr;SS Override
 38932                                  	; 18/12/2022
 38933 000072BD 36C606[F505]00          	mov	byte [SS:EXTOPEN_FLAG+1],0 ; AND word [SS:EXTOPEN_FLAG],0FFh
 38934                                  	;cmp	word [SS:EXTOPEN_FLAG],10h
 38935 000072C3 36833E[F405]10          	CMP	word [SS:EXTOPEN_FLAG],EXT_EXISTS_FAIL+EXT_NEXISTS_CREATE ;AN000;FT.;smr;SS Override
 38936 000072C9 7516                    	JNZ	short chknext 		  ;AN000;;EO. no
 38937 000072CB E8D0FE                  	call	_$CreateNewFile		  ;AN000;;EO. yes
 38938 000072CE 723F                    	JC	short error_return	  ;AN000;;EO. error
 38939                                  
 38940 000072D0 36803E[F605]00          	CMP	byte [SS:EXTOPEN_ON],0	  ;AN000;;EO. IFS does it;smr;SS Override
 38941 000072D6 7438                    	JZ	short ok_return2	  ;AN000;;EO. yes
 38942                                  	;mov	word [SS:EXTOPEN_FLAG],2
 38943 000072D8 36C706[F405]0200        	MOV	word [SS:EXTOPEN_FLAG],ACTION_CREATED_OPENED ;AN000;EO. creted/opened;smr;SS Override
 38944 000072DF EB7F                    	JMP	setXAttr		  ;AN000;;EO. set XAs
 38945                                  
 38946                                  	; 17/12/2022
 38947                                  ;ok_return2:
 38948                                  ;	jmp	SYS_RET_OK		  ;AN000;;EO.
 38949                                  
 38950                                  chknext:
 38951                                  	; 17/12/2022
 38952 000072E1 36F606[F405]01          	test	byte [SS:EXTOPEN_FLAG],EXT_EXISTS_OPEN ; 1
 38953                                  	;;test	word [SS:EXTOPEN_FLAG],1
 38954                                  	;TEST	word [SS:EXTOPEN_FLAG],EXT_EXISTS_OPEN ;AN000;;EO. exists open;smr;SS Override
 38955 000072E7 752A                    	JNZ	short exist_open	  ;AN000;;EO. yes
 38956 000072E9 E8C9FD                  	call	_$CREAT			  ;AN000;;EO. must be replace open
 38957 000072EC 7221                    	JC	short error_return	  ;AN000;;EO. return with error
 38958 000072EE 36803E[F605]00          	CMP	byte [SS:EXTOPEN_ON],0	  ;AN000;;EO. IFS does it;smr;SS Override
 38959 000072F4 741A                    	JZ	short ok_return2	  ;AN000;;EO. yes
 38960 000072F6 36C706[F405]0200        	MOV	word [SS:EXTOPEN_FLAG],ACTION_CREATED_OPENED ;AN000;EO. prsume create/open;smr;SS Override
 38961 000072FD 36F606[F605]04          	TEST	byte [SS:EXTOPEN_ON],EXT_FILE_NOT_EXISTS ;AN000;;EO. file not exists ?;smr;SS Override
 38962 00007303 755B                    	JNZ	short setXAttr		  ;AN000;;EO. no
 38963 00007305 36C706[F405]0300        	MOV	word [SS:EXTOPEN_FLAG],ACTION_REPLACED_OPENED ;AN000;;EO. replaced/opened;smr;SS Override
 38964 0000730C EB52                    	JMP	SHORT setXAttr		  ;AN000;;EO. set XAs
 38965                                  error_return2:
 38966 0000730E F9                      	STC 				  ; Set Carry again to flag error ;AN001;
 38967                                  error_return:	 ;17/12/2022
 38968 0000730F C3                      	retn				  ;AN000;;EO. return with error
 38969                                  
 38970                                  	; 17/12/2022
 38971                                  ok_return:
 38972                                  ok_return2:
 38973 00007310 E93693                  	jmp	SYS_RET_OK
 38974                                  
 38975                                  exist_open:				  ;AN000;
 38976 00007313 36F606[7205]FF          	test	byte [SS:FSHARING],-1	  ;AN000;;EO. server doscall?;smr;SS Override
 38977 00007319 7402                    	jz	short noserver		  ;AN000;;EO. no
 38978 0000731B 88E9                    	MOV	CL,CH			  ;AN000;;EO. cl=search attribute
 38979                                  noserver:
 38980 0000731D E8C0FC                  	call	_$Open2			  ;AN000;;EO. do open
 38981 00007320 732F                    	JNC	short ext_ok		  ;AN000;;EO.
 38982 00007322 36803E[F605]00          	CMP	byte [SS:EXTOPEN_ON],0	  ;AN000;;EO. error and IFS call;smr;SS Override
 38983 00007328 74E4                    	JZ	short error_return2	  ;AN000;;EO. return with error
 38984                                  local_extopen:
 38985                                  	;cmp	ax,2
 38986 0000732A 83F802                  	CMP	AX,error_file_not_found   ;AN000;;EO. file not found error
 38987 0000732D 75DF                    	JNZ	short error_return2	  ;AN000;;EO. no,
 38988                                  	;;test	word [SS:EXTOPEN_FLAG],10h
 38989                                  	; 17/12/2022
 38990 0000732F 36F606[F405]10          	test	byte [SS:EXTOPEN_FLAG],EXT_NEXISTS_CREATE ; 10h
 38991                                  	;TEST	word [SS:EXTOPEN_FLAG],EXT_NEXISTS_CREATE ;AN000;;EO. want to fail;smr;SS Override
 38992                                  	;JNZ	short do_creat		  ;AN000;;EO. yes
 38993                                  	;JMP	short extexit 		  ;AN000;;EO. yes
 38994                                  	; 17/12/2022
 38995 00007335 745D                    	jz	short extexit ; 10/06/2019
 38996                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 38997                                  	;jnz	short do_creat
 38998                                  	;jmp	short extexit
 38999                                  do_creat:
 39000 00007337 368B0E[FF05]            	MOV	CX,[SS:SAVE_CX]		  ;AN000;;EO. get ds:dx for file name;smr;SS Override
 39001 0000733C 36C536[0306]            	LDS	SI,[SS:SAVE_SI]		  ;AN000;;EO. cx = attribute;smr;SS Override
 39002 00007341 89F2                    	MOV	DX,SI			  ;AN000;;EO.
 39003 00007343 E86FFD                  	call	_$CREAT			  ;AN000;;EO. do create
 39004 00007346 724C                    	JC	short extexit 		  ;AN000;;EO. error
 39005                                  	;mov	word [SS:EXTOPEN_FLAG],2
 39006 00007348 36C706[F405]0200        	MOV	word [SS:EXTOPEN_FLAG],ACTION_CREATED_OPENED
 39007                                  					  ;AN000;;EO. is created/opened;smr;SS Override
 39008 0000734F EB0F                    	JMP	SHORT setXAttr		  ;AN000;;EO. set XAs
 39009                                  
 39010                                  ext_ok:
 39011 00007351 36803E[F605]00          	CMP	byte [SS:EXTOPEN_ON],0	  ;AN000;;EO. IFS call ?;smr;SS Override
 39012 00007357 74B7                    	JZ	short ok_return		  ;AN000;;EO. yes
 39013                                  	;mov	word [SS:EXTOPEN_FLAG],1
 39014 00007359 36C706[F405]0100        	MOV	word [SS:EXTOPEN_FLAG],ACTION_OPENED ;AN000;;EO. opened;smr;SS Override
 39015                                  setXAttr:
 39016                                  	; 29/04/2019
 39017 00007360 50                      	push	ax
 39018 00007361 E82B91                  	call	Get_User_Stack		  ;AN000;;EO.
 39019 00007364 36A1[F405]              	MOV	AX,[SS:EXTOPEN_FLAG]	  ;AN000;;EO.;smr;SS Override
 39020                                  	;mov	[si+4],ax
 39021 00007368 894404                  	MOV	[SI+user_env.user_CX],AX  ;AN000;;EO. set action code for cx
 39022 0000736B 58                      	pop	ax			  ;AN000;;EO.
 39023 0000736C 8904                    	mov	[si],ax
 39024                                  	;MOV	[SI+user_env.user_AX],AX  ;AN000;;EO. set handle for ax
 39025                                  	; 17/12/2022
 39026 0000736E EBA0                    	jmp	short ok_return
 39027                                  ;ok_return:				  ;AN000;
 39028                                  	;jmp	SYS_RET_OK		  ;AN000;;EO.
 39029                                  
 39030                                  extexit2:				  ;AN000; ERROR RECOVERY
 39031 00007370 5B                      	POP	BX			  ;AN000;EO. close the handle
 39032 00007371 50                      	PUSH	AX			  ;AN000;EO. save error code from set XA
 39033                                  	;cmp	word [SS:EXTOPEN_FLAG],2
 39034 00007372 36833E[F405]02          	CMP	word [SS:EXTOPEN_FLAG],ACTION_CREATED_OPENED
 39035                                  					  ;AN000;EO. from create;smr;SS Override
 39036 00007378 750C                    	JNZ	short justopen		  ;AN000;EO.
 39037 0000737A 36C536[0306]            	LDS	SI,[SS:SAVE_SI]		  ;AN000;EO. cx = attribute;smr;SS Override
 39038 0000737F C514                    	LDS	DX,[SI]			  ;AN000;EO.
 39039 00007381 E881FD                  	call	_$UNLINK 		  ;AN000;EO. delete the file
 39040 00007384 EB03                    	JMP	SHORT reserror		  ;AN000;EO.
 39041                                  
 39042                                  justopen:				  ;AN000;
 39043 00007386 E881F4                  	call	_$CLOSE			  ;AN000;EO. pretend never happend
 39044                                  reserror:				  ;AN000;
 39045 00007389 58                      	POP	AX			  ;AN000;EO. restore error code from set XA
 39046 0000738A EB08                    	JMP	SHORT extexit		  ;AN000;EO.
 39047                                  
 39048                                  ext_file_unfound:			  ;AN000;
 39049                                  	;mov	ax,2
 39050 0000738C B80200                  	MOV	AX,error_file_not_found   ;AN000;EO.
 39051 0000738F EB03                    	JMP	SHORT extexit		  ;AN000;EO.
 39052                                  ext_inval:				  ;AN000;
 39053                                  	;mov	ax,1
 39054 00007391 B80100                  	MOV	AX,error_invalid_function ;AN000;EO.
 39055                                  lockoperr:	; 17/12/2022
 39056                                  extexit:
 39057 00007394 E9BB92                  	jmp	SYS_RET_ERR		  ;AN000;EO.
 39058                                  
 39059                                  ;============================================================================
 39060                                  ; LOCK.ASM, MSDOS 6.0, 1991
 39061                                  ;============================================================================
 39062                                  ; 14/07/2018 - Retro DOS v3.0
 39063                                  ; 22/05/2019 - Retro DOS v4.0
 39064                                  
 39065                                  ;BREAK <$LockOper - Lock Calls>
 39066                                  ;----------------------------------------------------------------------------
 39067                                  ;
 39068                                  ;   Assembler usage:
 39069                                  ;	    MOV     BX, Handle	       (DOS 3.3)
 39070                                  ;	    MOV     CX, OffsetHigh
 39071                                  ;	    MOV     DX, OffsetLow
 39072                                  ;	    MOV     SI, LengthHigh
 39073                                  ;	    MOV     DI, LengthLow
 39074                                  ;	    MOV     AH, LockOper
 39075                                  ;	    MOV     AL, Request
 39076                                  ;	    INT     21h
 39077                                  ;
 39078                                  ;   Error returns:
 39079                                  ;	    AX = error_invalid_handle
 39080                                  ;	       = error_invalid_function
 39081                                  ;	       = error_lock_violation
 39082                                  ;
 39083                                  ;   Assembler usage:
 39084                                  ;	    MOV     AX, 5C??	       (DOS 4.00)
 39085                                  ;
 39086                                  ;				    0? lock all
 39087                                  ;				    8? lock write
 39088                                  ;				    ?2 lock multiple
 39089                                  ;				    ?3 unlock multiple
 39090                                  ;				    ?4 lock/read
 39091                                  ;				    ?5 write/unlock
 39092                                  ;				    ?6 add (lseek EOF/lock/write/unlock)
 39093                                  ;	    MOV     BX, Handle
 39094                                  ;	    MOV     CX, count or size
 39095                                  ;	    LDS     DX, buffer
 39096                                  ;	    INT     21h
 39097                                  ;
 39098                                  ;   Error returns:
 39099                                  ;	    AX = error_invalid_handle
 39100                                  ;	       = error_invalid_function
 39101                                  ;	       = error_lock_violation
 39102                                  ;
 39103                                  ;----------------------------------------------------------------------------
 39104                                  
 39105                                  	; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 39106                                  _$LockOper:
 39107 00007397 3C01                    	CMP	AL,1
 39108 00007399 770B                    	JA	short lock_bad_func
 39109                                  
 39110 0000739B 57                      	PUSH	DI			       ; Save LengthLow
 39111 0000739C E8D0F3                  	call	SFFromHandle		       ; ES:DI -> SFT
 39112 0000739F 731D                    	JNC	short lock_do 		       ; have valid handle
 39113 000073A1 5F                      	POP	DI			       ; Clean stack
 39114                                  	;mov	al,6
 39115 000073A2 B006                    	mov	al,error_invalid_handle
 39116                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 39117                                  ;lockoperr:
 39118                                  	;jmp	SYS_RET_ERR
 39119                                  	; 17/12/2022
 39120 000073A4 EBEE                    	jmp	short lockoperr ; jmp SYS_RET_ERR
 39121                                  
 39122                                  lock_bad_func:
 39123                                  	;mov	byte [ss:EXTERR_LOCUS],1
 39124 000073A6 36C606[2303]01          	MOV	byte [SS:EXTERR_LOCUS],errLOC_Unk ; Extended Error Locus;smr;SS Override
 39125                                  	;mov	al,1
 39126 000073AC B001                    	mov	al,error_invalid_function
 39127                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 39128                                  lockoperrj:
 39129                                  	;jmp	SYS_RET_ERR
 39130 000073AE EBE4                    	jmp	short lockoperr
 39131                                  
 39132                                  	; 22/05/2019 - Retro DOS v4.0
 39133                                  
 39134                                  	; MSDOS 6.0 
 39135                                  ; Align_buffer call has been deleted, since it corrupts the DTA (6/5/88) P5013
 39136                                  ; Dead code deleted, MD, 23 Mar 90
 39137                                  
 39138                                  ;lock_do:
 39139                                  ;	; MSDOS 3.3
 39140                                  ;	or	al,al
 39141                                  ;	pop	ax
 39142                                  ;	jz	short DOS_Lock
 39143                                  ;DOS_Unlock:
 39144                                  ;	;test	word [es:di+5],8000h
 39145                                  ;	test	word [ES:DI+SF_ENTRY.sf_flags],sf_isnet
 39146                                  ;	JZ	short LOCAL_UNLOCK
 39147                                  ;	push    ax
 39148                                  ;	mov     ax,110Bh
 39149                                  ;	int     2Fh	; Multiplex - NETWORK REDIRECTOR - UNLOCK REGION OF FILE
 39150                                  ;			; BX = file handle, CX:DX = starting offset, SI = high word of size
 39151                                  ;			; STACK: WORD low word of size, ES:DI -> SFT for file
 39152                                  ;			; SFT DPB field -> DPB of drive containing file
 39153                                  ;			; Return: CF set error
 39154                                  ;	pop     bx
 39155                                  ;	jmp     short ValChk
 39156                                  ;
 39157                                  ;LOCAL_UNLOCK:
 39158                                  ;	Call	far [ss:JShare+(7*4)]	; 7 = clr_block ;smr;SS Override
 39159                                  ;ValChk:
 39160                                  ;	JNC	short Lock_OK
 39161                                  ;lockerror:
 39162                                  ;	jmp	SYS_RET_ERR
 39163                                  ;Lock_OK:
 39164                                  ;	;MOV	AX,[SS:Temp_VAR] ;AN000;;MS. AX= number of bytes ;smr;SS Override
 39165                                  ;	jmp	SYS_RET_OK
 39166                                  ;DOS_Lock:
 39167                                  ;	;test	word [es:di+5],8000h
 39168                                  ;	test	word [ES:DI+SF_ENTRY.sf_flags],sf_isnet
 39169                                  ;	JZ	short LOCAL_LOCK
 39170                                  ;	;CallInstall NET_XLock,MultNET,10
 39171                                  ;	mov     ax, 110Ah
 39172                                  ;	int     2Fh	; Multiplex - NETWORK REDIRECTOR - LOCK REGION OF FILE
 39173                                  ;			; BX = file handle, CX:DX = starting offset, SI = high word of size
 39174                                  ;			; STACK: WORD low word of size, ES:DI -> SFT
 39175                                  ;			; SFT DPB field -> DPB of drive containing file, SS = DOS CS
 39176                                  ;			; Return: CF set error
 39177                                  ;	JMP	short ValChk
 39178                                  ;
 39179                                  ;LOCAL_LOCK:
 39180                                  ;	Call	far [ss:JShare+(6*4)]	; 6 = Set_Block ;smr;SS Override
 39181                                  ;	JMP	short ValChk
 39182                                  
 39183                                  ; 17/12/2022
 39184                                  LOCAL_UNLOCK:
 39185                                  	; MSDOS 3.3
 39186                                  	;Call	far [ss:JShare+(7*4)]	; 7 = clr_block ;smr;SS Override
 39187                                  	; MSDOS 6.0
 39188 000073B0 FF1E[AC00]              	Call	far [JShare+(7*4)]	; 7 = clr_block ;smr;SS Override
 39189                                  ValChk:
 39190 000073B4 7302                    	JNC	short Lock_OK
 39191                                  lockerror:
 39192                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 39193                                  	;;jmp	SYS_RET_ERR
 39194                                  	;jmp	short lockoperrj
 39195                                  	; 17/12/2022
 39196 000073B6 EBDC                    	jmp	short lockoperr	; jmp SYS_RET_ERR
 39197                                  Lock_OK:
 39198                                  	;MOV	AX,[SS:TEMP_VAR] ;AN000;;MS. AX= number of bytes ;smr;SS Override
 39199                                  	; 10/06/2019
 39200 000073B8 A1[0C06]                	mov	ax,[TEMP_VAR]
 39201 000073BB E98B92                  	jmp	SYS_RET_OK
 39202                                  
 39203                                  	; 22/05/2019
 39204                                  lock_do:
 39205                                  	; MSDOS 6.0
 39206 000073BE 89C3                    	MOV	BX,AX				; save AX
 39207 000073C0 BD[A903]                	MOV	BP,Lock_Buffer			; get DOS LOCK buffer
 39208                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 39209                                  	;;mov	[bp+0],dx
 39210                                  	;MOV	[BP+LockBuf.Lock_position],DX	; set low offset
 39211                                  	; 15/12/2022
 39212 000073C3 895600                  	mov	[bp],dx
 39213                                  	;mov	[bp+2],cx
 39214 000073C6 894E02                  	MOV	[BP+LockBuf.Lock_position+2],CX; set high offset
 39215 000073C9 59                      	POP	CX				; get low length
 39216                                  	;mov	[bp+4],cx
 39217 000073CA 894E04                  	MOV	[BP+LockBuf.Lock_length],CX	; set low length
 39218                                  	;mov	[bp+6],si
 39219 000073CD 897606                  	MOV	[BP+LockBuf.Lock_length+2],SI	; set high length
 39220 000073D0 B90100                  	MOV	CX,1				; one range
 39221                                  
 39222                                  ;	PUSH	CS				;
 39223                                  ;	POP	DS				; DS:DX points to
 39224                                  
 39225 000073D3 16                      	push	ss
 39226 000073D4 1F                      	pop	ds
 39227                                  
 39228 000073D5 89EA                    	MOV	DX,BP				; Lock_Buffer
 39229                                  	;test	al,1
 39230 000073D7 A801                    	TEST	AL,UNLOCK_ALL			; function 1
 39231                                  	;JNZ	short DOS_Unlock		; yes
 39232                                  	;JMP	short DOS_Lock			; function 0
 39233                                  	; 17/12/2022
 39234                                  	; 10/06/2019
 39235 000073D9 740E                    	jz	short DOS_Lock
 39236                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 39237                                  	;JNZ	short DOS_Unlock
 39238                                  	;JMP	short DOS_Lock
 39239                                  
 39240                                  DOS_Unlock:
 39241                                  	;;test	word [es:di+5],8000h
 39242                                  	;test	word [ES:DI+SF_ENTRY.sf_flags],sf_isnet
 39243 000073DB 26F6450680              	test	byte [ES:DI+SF_ENTRY.sf_flags+1],(sf_isnet>>8)
 39244 000073E0 74CE                    	JZ	short LOCAL_UNLOCK
 39245                                  
 39246                                  lock_unlock: ; 22/05/2019
 39247                                  	
 39248                                  	;CallInstall Net_Xlock,MultNET,10
 39249                                  	
 39250                                  	; MSDOS 3.3
 39251                                  	;mov     ax,110Bh
 39252                                  	;int     2Fh	; Multiplex - NETWORK REDIRECTOR - UNLOCK REGION OF FILE
 39253                                  			; BX = file handle, CX:DX = starting offset, SI = high word of size
 39254                                  			; STACK: WORD low word of size, ES:DI -> SFT for file
 39255                                  			; SFT DPB field -> DPB of drive containing file
 39256                                  			; Return: CF set error
 39257                                  	; MSDOS 6.0
 39258 000073E2 B80A11                  	mov     ax,110Ah
 39259 000073E5 CD2F                    	int     2Fh 	; Multiplex - NETWORK REDIRECTOR - LOCK REGION OF FILE
 39260                                  			; BX = file handle, CX:DX = starting offset, SI = high word of size
 39261                                  			; STACK: WORD low word of size, ES:DI -> SFT
 39262                                  			; SFT DPB field -> DPB of drive containing file, SS = DOS CS
 39263                                  			; Return: CF set error
 39264                                  
 39265 000073E7 EBCB                    	JMP	SHORT ValChk
 39266                                  
 39267                                  ; 17/12/2022
 39268                                  %if 0
 39269                                  LOCAL_UNLOCK:
 39270                                  	; MSDOS 3.3
 39271                                  	;Call	far [ss:JShare+(7*4)]	; 7 = clr_block ;smr;SS Override
 39272                                  	; MSDOS 6.0
 39273                                  	Call	far [JShare+(7*4)]	; 7 = clr_block ;smr;SS Override
 39274                                  ValChk:
 39275                                  	JNC	short Lock_OK
 39276                                  lockerror:
 39277                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 39278                                  	;jmp	SYS_RET_ERR
 39279                                  	jmp	short lockoperrj
 39280                                  Lock_OK:
 39281                                  	;MOV	AX,[SS:TEMP_VAR] ;AN000;;MS. AX= number of bytes ;smr;SS Override
 39282                                  	; 10/06/2019
 39283                                  	mov	ax,[TEMP_VAR]
 39284                                  	jmp	SYS_RET_OK
 39285                                  %endif
 39286                                  
 39287                                  DOS_Lock:
 39288                                  	;;test	word [es:di+5],8000h
 39289                                  	;test	word [ES:DI+SF_ENTRY.sf_flags],sf_isnet
 39290 000073E9 26F6450680              	test	byte [ES:DI+SF_ENTRY.sf_flags+1],(sf_isnet>>8)
 39291 000073EE 7407                    	JZ	short LOCAL_LOCK
 39292                                  
 39293                                  	;CallInstall NET_XLock,MultNET,10
 39294                                  
 39295 000073F0 B80A11                  	mov     ax,110Ah
 39296 000073F3 CD2F                    	int     2Fh	; Multiplex - NETWORK REDIRECTOR - LOCK REGION OF FILE
 39297                                  			; BX = file handle, CX:DX = starting offset, SI = high word of size
 39298                                  			; STACK: WORD low word of size, ES:DI -> SFT
 39299                                  			; SFT DPB field -> DPB of drive containing file, SS = DOS CS
 39300                                  			; Return: CF set error
 39301                                  
 39302 000073F5 EBBD                    	JMP	short ValChk
 39303                                  
 39304                                  LOCAL_LOCK:
 39305                                  	; MSDOS 3.3
 39306                                  	;Call	far [ss:JShare+(6*4)]	; 6 = Set_Block ;smr;SS Override
 39307                                  	; MSDOS 6.0
 39308 000073F7 FF1E[A800]              	Call	far [JShare+(6*4)]	; 6 = Set_Block ;smr;SS Override
 39309                                  
 39310 000073FB EBB7                    	JMP	short ValChk
 39311                                  
 39312                                  ; 14/07/2018 - Retro DOS v3.0
 39313                                  ; LOCK_CHECK
 39314                                  ;MSDOS 6.0 (& MSDOS 3.3)
 39315                                  
 39316                                  ;----------------------------------------------------------------------------
 39317                                  ; Inputs:
 39318                                  ;	Outputs of SETUP
 39319                                  ;	[USER_ID] Set
 39320                                  ;	[PROC_ID] Set
 39321                                  ; Function:
 39322                                  ;	Check for lock violations on local I/O
 39323                                  ;	Retries are attempted with sleeps in between
 39324                                  ; Outputs:
 39325                                  ;    Carry clear
 39326                                  ;	Operation is OK
 39327                                  ;    Carry set
 39328                                  ;	A lock violation detected
 39329                                  ; Outputs of SETUP preserved
 39330                                  ;----------------------------------------------------------------------------
 39331                                  
 39332                                  	; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 39333                                  	; 22/05/2019 - Retro DOS v4.0
 39334                                  LOCK_CHECK:
 39335 000073FD 8B1E[1A00]              	MOV	BX,[RetryCount]	; Number retries
 39336                                  LockRetry:
 39337 00007401 53                      	push	bx		; save regs
 39338 00007402 50                      	push	ax ; MSDOS 6.0
 39339                                  
 39340                                  	;MSDOS 3.3
 39341                                  	;Call	far [ss:JShare+(8*4)]	; 8 = chk_block
 39342                                  	;MSDOS 6.0
 39343 00007403 FF1E[B000]              	Call	far [JShare+(8*4)]	; 8 = chk_block
 39344                                  
 39345 00007407 58                      	pop	ax ; MSDOS 6.0
 39346 00007408 5B                      	pop	bx		; restrore regs
 39347 00007409 7307                    	jnc	short lc_ret_label ; There are no locks (retnc)
 39348                                  LockN:
 39349 0000740B E8409E                  	call	Idle		; wait a while
 39350 0000740E 4B                      	DEC	BX		; remember a retry
 39351 0000740F 75F0                    	JNZ	short LockRetry	; more retries left...
 39352 00007411 F9                      	STC
 39353                                  lc_ret_label:
 39354 00007412 C3                      	retn
 39355                                  
 39356                                  ; 14/07/2018 - Retro DOS v3.0
 39357                                  ; LOCK_VIOLATION
 39358                                  ;MSDOS 6.0 (& MSDOS 3.3)
 39359                                  
 39360                                  ;----------------------------------------------------------------------------
 39361                                  ; Inputs:
 39362                                  ;	[THISDPB] set
 39363                                  ;	[READOP] indicates whether error on read or write
 39364                                  ; Function:
 39365                                  ;	Handle Lock violation on compatibility (FCB) mode SFTs
 39366                                  ; Outputs:
 39367                                  ;	Carry set if user says FAIL, causes error_lock_violation
 39368                                  ;	Carry clear if user wants a retry
 39369                                  ;
 39370                                  ; DS, ES, DI, CX preserved, others destroyed
 39371                                  ;----------------------------------------------------------------------------
 39372                                  
 39373                                  LOCK_VIOLATION:
 39374 00007413 1E                      	PUSH	DS
 39375 00007414 06                      	PUSH	ES
 39376 00007415 57                      	PUSH	DI
 39377 00007416 51                      	PUSH	CX
 39378                                  	;mov	ax,21h
 39379 00007417 B82100                  	MOV	AX,error_lock_violation
 39380                                  	;mov	byte [ALLOWED],18h
 39381 0000741A C606[4B03]18            	MOV	byte [ALLOWED],Allowed_FAIL+Allowed_RETRY
 39382 0000741F C42E[8A05]              	LES	BP,[THISDPB]
 39383 00007423 BF0100                  	MOV	DI,1		; Fake some registers
 39384 00007426 89F9                    	MOV	CX,DI
 39385                                  	;mov	dx,[es:bp+11]
 39386 00007428 268B560B                	MOV	DX,[ES:BP+DPB.FIRST_SECTOR]
 39387 0000742C E8B6DF                  	call	HARDERR
 39388 0000742F 59                      	POP	CX
 39389 00007430 5F                      	POP	DI
 39390 00007431 07                      	POP	ES
 39391 00007432 1F                      	POP	DS
 39392 00007433 3C01                    	CMP	AL,1
 39393 00007435 74DB                    	jz	short lc_ret_label ; 1 = retry, carry clear
 39394 00007437 F9                      	STC
 39395 00007438 C3                      	retn
 39396                                  
 39397                                  ; 14/07/2018 - Retro DOS v3.0
 39398                                  
 39399                                  ;----------------------------------------------------------------------------
 39400                                  
 39401                                  ;	do a retz to return error
 39402                                  
 39403                                  	; 22/05/2019 - Retro DOS v4.0
 39404                                  CheckShare:
 39405                                  	; MSDOS 3.3
 39406                                  	;cmp	byte [cs:fShare],0
 39407                                  	;retn
 39408                                  
 39409                                  	; MSDOS 6.0
 39410 00007439 1E                      	push	ds			;smr;
 39411                                  	;getdseg <ds>			; ds -> dosdata
 39412 0000743A 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
 39413 0000743F 803E[0303]00            	cmp	byte [fShare],0
 39414 00007444 1F                      	pop	ds			;smr;
 39415 00007445 C3                      	retn
 39416                                  	
 39417                                  ;============================================================================
 39418                                  ; SHARE.ASM, MSDOS 6.0, 1991
 39419                                  ;============================================================================
 39420                                  ; 14/07/2018 - Retro DOS v3.0
 39421                                  ; 22/05/2019 - Retro DOS v4.0
 39422                                  
 39423                                  ; SHARE_CHECK
 39424                                  ;----------------------------------------------------------------------------
 39425                                  ; Inputs:
 39426                                  ;       [THISSFT] Points to filled in local file/device SFT for new
 39427                                  ;               instance of file sf_mode ALWAYS has mode (even on FCB SFTs)
 39428                                  ;       [WFP_START] has full path of name
 39429                                  ;       [USER_ID] Set
 39430                                  ;       [PROC_ID] Set
 39431                                  ; Function:
 39432                                  ;       Check for sharing violations on local file/device access
 39433                                  ; Outputs:
 39434                                  ;    Carry clear
 39435                                  ;       Sharing approved
 39436                                  ;    Carry set
 39437                                  ;       A sharing violation detected
 39438                                  ;           AX is error code
 39439                                  ; USES    ALL but DS
 39440                                  ;----------------------------------------------------------------------------
 39441                                  
 39442                                  	; 22/05/2019 - Retro DOS v4.0
 39443                                  SHARE_CHECK:
 39444                                  	; 26/07/2019
 39445 00007446 FF1E[9400]              	call	far [JShare+(1*4)] 	; 1 = MFT_Enter
 39446                                  shchk_retn:
 39447 0000744A C3                      	retn
 39448                                  
 39449                                  ; SHARE_VIOLATION
 39450                                  ;----------------------------------------------------------------------------
 39451                                  ; Inputs:
 39452                                  ;       [THISDPB] Set
 39453                                  ;       AX has error code
 39454                                  ; Function:
 39455                                  ;       Handle Sharing errors
 39456                                  ; Outputs:
 39457                                  ;       Carry set if user says FAIL, causes error_sharing_violation
 39458                                  ;       Carry clear if user wants a retry
 39459                                  ;
 39460                                  ; DS, ES, DI preserved, others destroyed
 39461                                  ;----------------------------------------------------------------------------
 39462                                  
 39463                                  SHARE_VIOLATION:
 39464 0000744B 1E                      	PUSH    DS
 39465 0000744C 06                      	PUSH	ES
 39466 0000744D 57                      	PUSH    DI
 39467 0000744E C606[7505]00            	MOV     byte [READOP],0		; All share errors are reading
 39468                                  	;mov	byte [ALLOWED],18h
 39469 00007453 C606[4B03]18            	MOV     byte [ALLOWED],Allowed_FAIL+Allowed_RETRY
 39470 00007458 C42E[8A05]              	LES     BP,[THISDPB]
 39471 0000745C BF0100                  	MOV     DI,1			; Fake some registers
 39472 0000745F 89F9                    	MOV     CX,DI
 39473                                  	;mov	dx,[es:bp+17]
 39474 00007461 268B5611                	MOV     DX,[ES:BP+DPB.DIR_SECTOR]
 39475 00007465 E87DDF                  	call	HARDERR
 39476 00007468 5F                      	POP     DI
 39477 00007469 07                      	POP	ES
 39478 0000746A 1F                      	POP     DS
 39479 0000746B 3C01                    	CMP     AL,1
 39480 0000746D 74DB                    	jz	short shchk_retn	; 1 = retry, carry clear
 39481 0000746F F9                      	STC
 39482 00007470 C3                      	retn
 39483                                  
 39484                                  ;----------------------------------------------------------------------------
 39485                                  ;   ShareEnd - terminate sharing info on a particular SFT/UID/PID. This does
 39486                                  ;       NOT perform a close, it merely asserts that the sharing information
 39487                                  ;       for the SFT/UID/PID may be safely released.
 39488                                  ;
 39489                                  ;   Inputs:     ES:DI points to an SFT
 39490                                  ;   Outputs:    None
 39491                                  ;   Registers modified: all except DS,ES,DI
 39492                                  ;----------------------------------------------------------------------------
 39493                                  
 39494                                  ShareEnd:
 39495                                  	; 26/07/2019
 39496 00007471 FF1E[9800]              	call	far [JShare+(2*4)]	; 2 = MFTClose
 39497 00007475 C3                      	retn
 39498                                  
 39499                                  ;Break <ShareEnter - attempt to enter a node into the sharing set>
 39500                                  ;----------------------------------------------------------------------------
 39501                                  ;   ShareEnter - perform a retried entry of a nodde into the sharing set. If
 39502                                  ;   the max number of retries is exceeded, we notify the user via int 24.
 39503                                  ;
 39504                                  ;   Inputs:     ThisSFT points to the SFT
 39505                                  ;               WFP_Start points to the WFP
 39506                                  ;   Outputs:    Carry clear => successful entry
 39507                                  ;               Carry set => failed system call
 39508                                  ;   Registers modified: all
 39509                                  ;----------------------------------------------------------------------------
 39510                                  
 39511                                  ShareEnter:
 39512 00007476 51                      	push	cx
 39513                                  retry:
 39514 00007477 8B0E[1A00]              	mov     cx,[RetryCount]
 39515                                  attempt:
 39516 0000747B C43E[9E05]              	les     di,[THISSFT]		; grab sft
 39517 0000747F 31C0                    	XOR     AX,AX
 39518                                   	;mov	[es:di+51],axfff
 39519 00007481 26894533                	MOV     [ES:DI+SF_ENTRY.sf_MFT],AX ; indicate free SFT
 39520 00007485 51                      	push	cx
 39521 00007486 E8BDFF                  	call    SHARE_CHECK             ; attempt to enter into the sharing set
 39522 00007489 59                      	pop	cx
 39523 0000748A 730A                    	jnc	short done		; success, let the user see this
 39524 0000748C E8BF9D                  	call	Idle                    ; wait a while
 39525 0000748F E2EA                    	loop    attempt                 ; go back for another attempt
 39526 00007491 E8B7FF                  	call    SHARE_VIOLATION         ; signal the problem to the user
 39527 00007494 73E1                    	jnc	short retry		; user said to retry, go do it
 39528                                  done:
 39529 00007496 59                      	pop	cx
 39530 00007497 C3                      	retn
 39531                                  
 39532                                  ;============================================================================
 39533                                  ; EXEPATCH.ASM (MSDOS 6.0, 1991)
 39534                                  ;============================================================================
 39535                                  ; 29/04/2019 - Retro DOS 4.0
 39536                                  
 39537                                  ;** EXEPATCH.ASM 
 39538                                  ;----------------------------------------------------------------------------
 39539                                  ;	Contains the foll:
 39540                                  ;
 39541                                  ;		- code to find and overlay buggy unpack code
 39542                                  ;		- new code to be overlayed on buggy unpack code 
 39543                                  ;		- old code sequence to identify buggy unpack code
 39544                                  ;
 39545                                  ;	Revision history:
 39546                                  ;
 39547                                  ;		Created: 5/14/90
 39548                                  ;----------------------------------------------------------------------------
 39549                                  
 39550                                  ;----------------------------------------------------------------------------
 39551                                  ;
 39552                                  ; M020 : Fix for rational bug - for details see routine header
 39553                                  ; M028 : 4b04 implementation
 39554                                  ; M030 : Fixing bug in EXEPACKPATCH (EXEC_CS is an un-relocated value)
 39555                                  ; M032 : set turnoff bit only if DOS in HMA.
 39556                                  ; M033 : if IP < 2 then not exepacked.
 39557                                  ; M046 : support for a 4th version of exepacked files.
 39558                                  ; M068 : support for copy protected apps.
 39559                                  ; M071 : use A20OFF_COUNT of 10.
 39560                                  ;
 39561                                  ;----------------------------------------------------------------------------
 39562                                  
 39563                                  PATCH1_COM_OFFSET	EQU	06CH
 39564                                  PATCH1_OFFSET		EQU	028H
 39565                                  PATCH1_CHKSUM		EQU	0EF4EH
 39566                                  CHKSUM1_LEN		EQU	11CH/2 ; 142
 39567                                  
 39568                                  PATCH2_COM_OFFSET	EQU	076H
 39569                                  PATCH2_OFFSET		EQU	032H
 39570                                  
 39571                                  	; The strings that start at offset 076h have two possible 
 39572                                  	; check sums that are defined as PATCH2_CHKSUM PATCH2A_CHKSUM
 39573                                  
 39574                                  PATCH2_CHKSUM		EQU	78B2H
 39575                                  CHKSUM2_LEN		EQU	119H/2
 39576                                  PATCH2A_CHKSUM		EQU	1C47H		; M046
 39577                                  CHKSUM2A_LEN		EQU	103H/2		; M046
 39578                                  
 39579                                  PATCH3_COM_OFFSET	EQU	074H
 39580                                  PATCH3_OFFSET		EQU	032H
 39581                                  PATCH3_CHKSUM		EQU	4EDEH
 39582                                  CHKSUM3_LEN		EQU	117H/2
 39583                                  
 39584                                  ;**	Data structure passed for ExecReady call
 39585                                  ;
 39586                                  ;struc ERStruc
 39587                                  ; .ER_Reserved:	resw	1	; reserved, should be zero
 39588                                  ; .ER_Flags:	resw	1
 39589                                  ; .ER_ProgName:	resd	1	; ptr to ASCIIZ str of prog name
 39590                                  ; .ER_PSP:	resw	1	; PSP of the program
 39591                                  ; .ER_StartAddr: resd	1	; Start CS:IP of the program
 39592                                  ; .ER_ProgSize:	resd	1	; Program size including PSP
 39593                                  ; .size:
 39594                                  ;endstruc
 39595                                  
 39596                                  ;DOSCODE SEGMENT
 39597                                  
 39598                                  	; 22/05/2019 - Retro DOS v4.0
 39599                                  	; DOSCODE:B3DDh (MSDOS 6.21, MSDOS.SYS)
 39600                                  
 39601                                  	; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 39602                                  	; DOSCODE:B37Ah (MSDOS 5.0, MSDOS.SYS)
 39603                                  
 39604                                  ; M028 - BEGIN
 39605                                  
 39606                                  ;--------------------------------------------------------------------------
 39607                                  ;
 39608                                  ;	Procedure Name		: ExecReady
 39609                                  ;
 39610                                  ;	Input			: DS:DX -> ERStruc (see exe.inc)
 39611                                  ;
 39612                                  ;--------------------------------------------------------------------------
 39613                                  
 39614                                  ExecReady:
 39615 00007498 89D6                    	mov	si,dx			; move the pointer into a friendly one
 39616                                  	;;test	word [si+2],1
 39617                                  	; 17/12/2022
 39618 0000749A F6440201                	test	byte [si+ERStruc.ER_Flags],ER_EXE ; 1
 39619                                  	;test	word [si+ERStruc.ER_Flags],ER_EXE ; COM or EXE ?
 39620 0000749E 7413                    	jz	short er_setver		; only setver for .COM files
 39621                                  
 39622                                  	;mov	ax,[si+8]
 39623 000074A0 8B4408                  	mov	ax,[si+ERStruc.ER_PSP]
 39624 000074A3 83C010                  	add	ax,10h
 39625 000074A6 8EC0                    	mov	es,ax
 39626                                  
 39627                                  	;mov	cx,[si+10]
 39628 000074A8 8B4C0A                  	mov	cx,[si+ERStruc.ER_StartAddr]   ; M030
 39629                                  	;mov	cx,[si+12]
 39630 000074AB 8B440C                  	mov	ax,[si+ERStruc.ER_StartAddr+2] ; M030
 39631                                  
 39632                                  	;call	[ss:FixExePatch]
 39633 000074AE 36FF16[F811]            	call	word [ss:FixExePatch] ; 28/12/2022
 39634                                  	
 39635                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 39636                                  	;call	[ss:Rational386PatchPtr]
 39637                                  
 39638                                  er_setver:
 39639                                  	;;test	word [si+2],2		; Q: is this an overlay
 39640                                  	; 17/12/2022
 39641 000074B3 F6440202                	test	byte [si+ERStruc.ER_Flags],ER_OVERLAY ; 2
 39642                                  	;test	word [si+ERStruc.ER_Flags],ER_OVERLAY
 39643 000074B7 7518                    	jnz	short er_chkdoshi	; Y: set A20OFF_COUNT if DOS high
 39644                                  					; N: set up lie version first
 39645 000074B9 1E                      	push	ds
 39646 000074BA 56                      	push	si
 39647                                  	;lds	si,[si+4]
 39648 000074BB C57404                  	lds	si,[si+ERStruc.ER_ProgName]
 39649 000074BE E870ED                  	call	Scan_Execname1
 39650 000074C1 E881ED                  	call	Scan_Special_Entries
 39651 000074C4 5E                      	pop	si
 39652 000074C5 1F                      	pop	ds
 39653                                  	;mov	es,[si+8]
 39654 000074C6 8E4408                  	mov	es,[si+ERStruc.ER_PSP]
 39655 000074C9 36A1[BC0E]              	mov	ax,[ss:SPECIAL_VERSION]
 39656 000074CD 26A34000                	mov	[es:PDB.Version],ax
 39657                                  
 39658                                  er_chkdoshi:
 39659 000074D1 36803E[F711]00          	cmp	byte [ss:DosHasHMA],0	; M032: Q: is dos in HMA (M021)
 39660 000074D7 741F                    	je	short er_done		; M032: N: done
 39661                                  
 39662                                  					; M068 - Start
 39663                                  	;mov	ax,[si+8]
 39664 000074D9 8B4408                  	mov	ax,[si+ERStruc.ER_PSP]	; ax = PSP
 39665                                  
 39666                                  	;or	byte [ss:DOS_FLAG],4
 39667 000074DC 36800E[8600]04          	or	byte [ss:DOS_FLAG],EXECA20OFF ; Set bit to signal int 21
 39668                                  					; ah = 25 & ah= 49. See dossym.inc 
 39669                                  					; under TAG M003 & M009 for 
 39670                                  					; explanation
 39671                                  	;;test	word [si+2],1
 39672                                  	; 17/12/2022
 39673 000074E2 F6440201                	test	byte [si+ERStruc.ER_Flags],ER_EXE ; 1
 39674                                  	;test	word [si+ERStruc.ER_Flags],ER_EXE ; Q: COM file
 39675 000074E6 7507                    	jnz	short er_setA20		; N: inc a20off_count, set 
 39676                                  					;    a20off_psp and ret
 39677 000074E8 1E                         	push	ds
 39678 000074E9 8ED8                    	mov	ds,ax			; DS = load segment of com file.
 39679 000074EB E89002                  	call	IsCopyProt		; check if copy protected
 39680 000074EE 1F                      	pop	ds
 39681                                  
 39682                                  er_setA20:
 39683                                  	; We need to inc the A20OFF_COUNT here. Note that if the count
 39684                                  	; is non-zero at this point it indicates that the A20 is to be 
 39685                                  	; turned off for that many int 21 calls made by the app. In 
 39686                                  	; addition the A20 has to be turned off when we exit from this 
 39687                                  	; call. Hence the inc.
 39688                                  
 39689 000074EF 36FE06[8500]            	inc	byte [ss:A20OFF_COUNT]		
 39690 000074F4 36A3[6300]              	mov	[ss:A20OFF_PSP],ax	; set the PSP for which A20 is to be
 39691                                  					; turned OFF.
 39692                                  er_done:				; M068 - End
 39693 000074F8 31C0                    	xor	ax,ax
 39694 000074FA C3                      	retn
 39695                                  
 39696                                  ; M028 - END
 39697                                  
 39698                                  
 39699                                  ; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 39700                                  %if 0
 39701                                  
 39702                                  ;----------------------------------------------------------------------------
 39703                                  ;
 39704                                  ; procedure : Rational386Patch
 39705                                  ;
 39706                                  ; Older versions of the Rational DOS Extender have several bugs which trash
 39707                                  ; 386 registers (usually just the high word of 32 bit registers) during
 39708                                  ; interrupt processing. Lotus 123 3.1+ is a popular application that uses a
 39709                                  ; version of the Rational extender with the 32 bit register trashing bugs.
 39710                                  ;
 39711                                  ; This routine applies patches to the Rational DOS Extender to work around
 39712                                  ; most of the register trashing bugs.
 39713                                  ;
 39714                                  ; Note that there are additional register trashing bugs not fixed by these
 39715                                  ; patches. In particular, the high word of ESP and the FS and GS registers
 39716                                  ; may be modified on interrupts.
 39717                                  ;
 39718                                  ; There are two different Rational DOS Extender patchs in this module.
 39719                                  ; Rational386Patch is to correct 386 register trashing bugs on 386 or later
 39720                                  ; processors. This patch code is executed when MS-DOS is running on a 386
 39721                                  ; or later processor, regardless of whether MS-DOS is running in the HMA
 39722                                  ; or not.
 39723                                  ;
 39724                                  ; The other Rational patch routine (RationalPatch, below) fixes a register
 39725                                  ; trashing problem on 286 processors, and is only executed if MS-DOS is
 39726                                  ; running in the HMA.
 39727                                  ;
 39728                                  ; This patch detection and replacement is based on an example supplied by
 39729                                  ; Ben Williams at Rational.
 39730                                  ;
 39731                                  ;----------------------------------------------------------------------------
 39732                                  
 39733                                  ; 22/05/2019 - Retro DOS v4.0
 39734                                  ; DOSCODE:B448h (MSDOS 6.21, MSDOS.SYS)
 39735                                  
 39736                                  ;----------------------------------------------------------------------------
 39737                                  ;
 39738                                  ; INPUT : ES = segment where program got loaded
 39739                                  ;
 39740                                  ;----------------------------------------------------------------------------
 39741                                  
 39742                                  rpFind1:
 39743                                  	db	0FAh, 0E4h, 21h, 60h, 33h, 0C0h, 0E6h, 43h, 8Bh, 16h
 39744                                  
 39745                                  rpFind1Len equ	$ - rpFind1
 39746                                  
 39747                                  ;	cli
 39748                                  ;	in	al, 21h
 39749                                  ;	pusha
 39750                                  ;	xor	ax, ax
 39751                                  ;	out	43h, al
 39752                                  ;	mov	dx, ...
 39753                                  
 39754                                  rpFind1a:
 39755                                  	db	0B0h, 0Eh, 0E6h, 37h, 33h, 0C0h, 0E6h, 0F2h
 39756                                  
 39757                                  rpFind1aLen equ	$ - rpFind1a
 39758                                  
 39759                                  ;	mov	al, 0Eh
 39760                                  ;	out	37h, al
 39761                                  ;	xor	ax, ax
 39762                                  ;	out	0F2h, al
 39763                                  
 39764                                  ; bug # 1 -- loss of high EAX on 386+ if not VCPI or DPMI
 39765                                  
 39766                                  rpFind2:
 39767                                  	db	0Fh, 20h, 0C0h
 39768                                  
 39769                                  rpFind2Len equ	$ - rpFind2
 39770                                  
 39771                                  ;	mov	eax, cr0	;may be preceeded by PUSH CX (51h)
 39772                                  
 39773                                  rpFind3:
 39774                                  	db	0Fh, 22h, 0C0h, 0EAh
 39775                                  
 39776                                  rpFind3Len equ	$ - rpFind3
 39777                                  
 39778                                  ;	mov	cr0, eax	;may be preceeded by POP CX (59h)
 39779                                  ;	jmp	far ptr xxx	;change far ptr to go to replace3
 39780                                  ;	mov	ss, bx		;8E D3 ... and come back at or after this
 39781                                  
 39782                                  ; note, there is no rpRepl1 string
 39783                                  
 39784                                  rpRepl2:
 39785                                   	db	66h, 50h, 51h, 0Fh, 20h, 0C0h
 39786                                  
 39787                                  rpRepl2Len equ	$ - rpRepl2
 39788                                  
 39789                                  ;	push	eax
 39790                                  ;	push	cx
 39791                                  ;	mov	eax, cr0
 39792                                  
 39793                                  rpRepl3:
 39794                                  	db	8Eh, 0D3h, 59h, 66h, 58h
 39795                                  
 39796                                  rpRepl3Len equ	$ - rpRepl3
 39797                                  
 39798                                  ;	mov	ss, bx
 39799                                  ;	pop	cx
 39800                                  ;	pop	eax
 39801                                  
 39802                                  ; bug # 2 -- loss of high EAX and ESI on 386+ only if VCPI
 39803                                  
 39804                                  rpFind4:
 39805                                  	db	93h, 58h, 8Bh, 0CCh
 39806                                  
 39807                                  rpFind4Len equ	$ - rpFind4
 39808                                  
 39809                                  ;	xchg	bx, ax
 39810                                  ;	pop	ax
 39811                                  ;	mov	cx, sp
 39812                                  
 39813                                  rpFind5:
 39814                                  	db	0B8h, 0Ch, 0DEh, 0CDh, 67h, 8Bh, 0E1h, 0FFh, 0E3h
 39815                                  
 39816                                  rpFind5Len equ	$ - rpFind5
 39817                                  
 39818                                  ;	mov	ax, DE0Ch
 39819                                  ;	int	67h
 39820                                  ;	mov	sp, cx
 39821                                  ;	jmp	bx
 39822                                  
 39823                                  rpRepl4:
 39824                                  	db	93h, 58h, 8Bh, 0CCh
 39825                                  	db	02Eh, 066h, 0A3h
 39826                                  
 39827                                  rpRepl4o1Len equ $ - rpRepl4
 39828                                  
 39829                                  	db	00h, 00h
 39830                                  	db	02Eh, 066h, 89h, 36h
 39831                                  
 39832                                  rpRepl4o2Len equ $ - rpRepl4
 39833                                  
 39834                                  	db	00h, 00h
 39835                                  
 39836                                  rpRepl4Len equ	$ - rpRepl4
 39837                                  
 39838                                  ;	xchg	bx, ax
 39839                                  ;	pop	ax
 39840                                  ;	mov	cx, sp
 39841                                  ;	mov	dword ptr cs:[xxxx], eax
 39842                                  ;	mov	dword ptr cs:[xxxx], esi
 39843                                  
 39844                                  rpRepl5:
 39845                                  	db	8Bh, 0E1h
 39846                                  	db	2Eh, 66h, 0A1h
 39847                                  
 39848                                  rpRepl5o1Len equ $ - rpRepl5
 39849                                  
 39850                                  	db	00h, 00h
 39851                                  	db	2Eh, 66h, 8Bh, 36h
 39852                                  
 39853                                  rpRepl5o2Len equ $ - rpRepl5
 39854                                  
 39855                                  	db	00h, 00h
 39856                                  	db	0FFh, 0E3h
 39857                                  
 39858                                  rpRepl5Len equ	$ - rpRepl5
 39859                                  
 39860                                  ;	mov	sp, cx
 39861                                  ;	mov	eax, dword ptr cs:[xxxx]
 39862                                  ;	mov	esi, dword ptr cs:[xxxx]
 39863                                  ;	jmp	bx
 39864                                  
 39865                                  ; bug # 3 -- loss of high EAX, EBX, ECX, EDX on 386+ only if VCPI
 39866                                  
 39867                                  rpFind6:
 39868                                  	db	0FAh, 52h, 51h
 39869                                  
 39870                                  rpFind6Len equ	$ - rpFind6
 39871                                  
 39872                                  ;	cli
 39873                                  ;	push	dx
 39874                                  ;	push	cx
 39875                                  
 39876                                  rpFind7a:
 39877                                  	db	0B8h, 0Ch, 0DEh, 66h, 26h, 0FFh, 1Eh
 39878                                  
 39879                                  rpFind7aLen equ	$ - rpFind7a
 39880                                  
 39881                                  ;	mov	ax, 0DE0Ch
 39882                                  ;	call	fword ptr es:[xxxx]
 39883                                  
 39884                                  rpFind7b:
 39885                                  	db	59h, 5Ah, 5Bh
 39886                                  
 39887                                  rpFind7bLen equ	$ - rpFind7b
 39888                                  
 39889                                  ;	pop	cx
 39890                                  ;	pop	dx
 39891                                  ;	pop	bx
 39892                                  
 39893                                  rpRepl6 :
 39894                                  	db	0FAh, 66h, 50h, 66h, 53h, 66h, 51h, 66h, 52h
 39895                                  
 39896                                  rpRepl6Len equ	$ - rpRepl6
 39897                                  
 39898                                  ;	cli
 39899                                  ;	push	eax
 39900                                  ;	push	ebx
 39901                                  ;	push	ecx
 39902                                  ;	push	edx
 39903                                  
 39904                                  rpRepl7:
 39905                                  	db	66h, 5Ah, 66h, 59h, 66h, 5Bh, 66h, 58h, 5Bh
 39906                                  
 39907                                  rpRepl7Len equ	$ - rpRepl7
 39908                                  
 39909                                  ;	pop	edx
 39910                                  ;	pop	ecx
 39911                                  ;	pop	ebx
 39912                                  ;	pop	eax
 39913                                  ;	pop	bx
 39914                                  
 39915                                  ; bug # 4 -- loss of high EAX and EBX on 386+ only if VCPI
 39916                                  
 39917                                  rpFind8:
 39918                                   	db	60h, 06h, 1Eh, 0B8h, 00h, 00h, 8Eh, 0D8h
 39919                                  
 39920                                  rpFind8Len equ	$ - rpFind8
 39921                                  
 39922                                  ;	pusha
 39923                                  ;	push	es
 39924                                  ;	push	ds
 39925                                  ;	mov	ax, dgroup	;jump back to here from replace8
 39926                                  ;	mov	ds, ax
 39927                                  
 39928                                  rpFind9 :
 39929                                  	db	1Fh, 07h, 61h
 39930                                  
 39931                                  rpFind9Len equ	$ - rpFind9
 39932                                  
 39933                                  ;	pop	ds
 39934                                  ;	pop	es
 39935                                  ;	popa
 39936                                  
 39937                                  rpRepl8:
 39938                                   	db	66h, 60h, 06h, 1Eh
 39939                                  
 39940                                  rpRepl8Len equ	$ - rpRepl8
 39941                                  
 39942                                  ;	pushad
 39943                                  ;	push	es
 39944                                  ;	push	ds
 39945                                  
 39946                                  rpRepl9:
 39947                                  	db	1Fh, 07h, 66h, 61h, 0C3h
 39948                                  
 39949                                  rpRepl9Len equ	$ - rpRepl9
 39950                                  
 39951                                  ;	pop	ds
 39952                                  ;	pop	es
 39953                                  ;	popad
 39954                                  ;	retn			;no need to jmp back to main-line
 39955                                  
 39956                                  ;----------------------------------------------------------------------------
 39957                                  
 39958                                  struc SearchPair
 39959                                   .sp_off1: resw 1	; offset of 1st search string
 39960                                   .sp_len1: resw 1	; length of 1st search string
 39961                                   .sp_off2: resw 1	; 2nd string
 39962                                   .sp_len2: resw 1	; 2nd string
 39963                                   .sp_diff: resw 1	; max difference between offsets
 39964                                   .size:
 39965                                  endstruc
 39966                                  
 39967                                  ;rpBug1Strs SearchPair	<offset rpFind2, rpFind2Len, offset rpFind3, rpFind3Len, 20h>
 39968                                  
 39969                                  rpBug1Strs:
 39970                                  	dw	rpFind2
 39971                                  	dw	rpFind2Len ; 3
 39972                                  	dw	rpFind3
 39973                                  	dw	rpFind3Len ; 4
 39974                                  	dw	20h
 39975                                  
 39976                                  ;rpBug2Strs SearchPair	<offset rpFind4, rpFind4Len, offset rpFind5, rpFind5Len, 80h>
 39977                                  
 39978                                  rpBug2Strs:
 39979                                  	dw	rpFind4
 39980                                  	dw	rpFind4Len ; 4
 39981                                  	dw	rpFind5
 39982                                  	dw	rpFind5Len ; 9
 39983                                  	dw	80h
 39984                                  
 39985                                  ;rpBug3Strs SearchPair	<offset rpFind6, rpFind6Len, offset rpFind7a, rpFind7aLen, 80h>
 39986                                  
 39987                                  rpBug3Strs:
 39988                                  	dw	rpFind6
 39989                                  	dw	rpFind6Len ; 3
 39990                                  	dw	rpFind7a
 39991                                  	dw	rpFind7aLen ; 7
 39992                                  	dw	80h
 39993                                  
 39994                                  ;rpBug4Strs SearchPair	<offset rpFind8, 4, offset rpFind9, rpFind9Len, 80h>
 39995                                  
 39996                                  rpBug4Strs:
 39997                                  	dw	rpFind8
 39998                                  	dw	4
 39999                                  	dw	rpFind9
 40000                                  	dw	rpFind9Len ; 3
 40001                                  	dw	80h
 40002                                  
 40003                                  ;----------------------------------------------------------------------------
 40004                                  
 40005                                  struc StackVars
 40006                                   .sv_wVersion:	resw 1		; Rational extender version #
 40007                                   .sv_cbCodeSeg: resw 1		; code seg size to scan
 40008                                   .sv_pPatch:	resw 1		; offset of next avail patch byte
 40009                                   .size:
 40010                                  endstruc
 40011                                  
 40012                                  ;----------------------------------------------------------------------------
 40013                                  
 40014                                  ; 22/05/2019 - Retro DOS v4.0
 40015                                  
 40016                                  Rational386Patch:
 40017                                  	; Do a few quick checks to see if this looks like a Rational
 40018                                  	; Extended application. Hopefully this will quickly weed out
 40019                                  	; most non Rational apps.
 40020                                  
 40021                                  	cmp	word [es:0],395		; version number goes here - versions
 40022                                  	jae	short rp3QuickOut	;   3.95+ don't need patching
 40023                                  
 40024                                  	cmp	word [es:0Ch],20h	; always has this value here
 40025                                  	jne	short rp3QuickOut
 40026                                  
 40027                                  	push	ax
 40028                                  
 40029                                  	mov	ax,18h 			; extender has 18h at
 40030                                  	cmp	[es:24],ax		;   offsets 24, 28, & 36
 40031                                  	jne	short rp3QO_ax
 40032                                  	cmp	[es:28],ax
 40033                                  	jne	short rp3QO_ax
 40034                                  	cmp	[es:36],ax
 40035                                  	je	short rp3Maybe
 40036                                  rp3QO_ax:
 40037                                  	pop	ax
 40038                                  rp3QuickOut:
 40039                                  	retn
 40040                                  
 40041                                  ; It might be the rational extender, do more extensive checking
 40042                                  
 40043                                  rp3Maybe:
 40044                                  	cld
 40045                                  	push	bx			; note ax pushed above
 40046                                  	push	cx
 40047                                  	push	dx
 40048                                  	push	si
 40049                                  	push	di
 40050                                  	push	es
 40051                                  	push	ds			; we use all of them
 40052                                  	push	bp
 40053                                  	sub	sp,StackVars.size  ; 6	; make space for stack variables
 40054                                  	mov	bp,sp
 40055                                  
 40056                                  	push	cs
 40057                                  	pop	ds
 40058                                  
 40059                                  	mov	ax,[es:0]		; save version #
 40060                                  	;mov	[bp+StackVars.sv_wVersion],ax
 40061                                  	mov	[bp],ax	
 40062                                  					; check that binary version # matches
 40063                                  	call	VerifyVersion		;   ascii string
 40064                                  	jne	short rp3Exit_j
 40065                                  
 40066                                  ; Looks like this is it, find where to put the patch code.  The
 40067                                  ; patch will be located on top of Rational code specific to 80286
 40068                                  ; processors, so these patchs MUST NOT be applied if running on
 40069                                  ; an 80286 system.
 40070                                  
 40071                                  	; Rational says the code to patch will never be beyond offset 46xxh
 40072                                  
 40073                                  	mov	cx,4500h		; force search len to 4700h (searches
 40074                                  	;mov	[bp+2],cx
 40075                                  	mov	[bp+StackVars.sv_cbCodeSeg],cx	; start at offset 200h)
 40076                                  
 40077                                  	mov	es,[es:20h]		; es=code segment
 40078                                  
 40079                                  	mov	si,rpFind1		; string to find
 40080                                  	mov	dx,rpFind1Len ; 10	; length to match
 40081                                  	call	ScanCodeSeq		; look for code seq
 40082                                  	jz	short rpGotPatch
 40083                                  
 40084                                  ; According to Rational, some very old versions of the extender may not
 40085                                  ; have the find1 code sequence. If the find1 code wasn't found above,
 40086                                  ; try an alternative patch area which is on top of NEC 98xx switching code.
 40087                                  
 40088                                  	mov	si,rpFind1a
 40089                                  	mov	dx,rpFind1aLen  ;8
 40090                                  	call	ScanCodeSeq
 40091                                  	jz	short rpGotPatch
 40092                                  
 40093                                  rp3Exit_j:
 40094                                  	jmp	rp3Exit
 40095                                  
 40096                                  ; Found the location to write patch code! DI = offset in code seg.
 40097                                  
 40098                                  rpGotPatch:
 40099                                  	;mov	[bp+4],di
 40100                                  	mov	[bp-StackVars.sv_pPatch],di	; save patch pointer
 40101                                  
 40102                                  ;----------------------------------------------------------------------------
 40103                                  ; Bug # 1 -- loss of high EAX on 386+ if not VCPI or DPMI
 40104                                  
 40105                                  	;cmp	word [bp+0],381
 40106                                  	;cmp	word [bp+StackVars.sv_wVersion],381 ; only need bug 1 if version
 40107                                  	cmp	word [bp],381
 40108                                  	jae	short rpBug2			;   < 3.81
 40109                                  
 40110                                  	mov	bx,rpBug1Strs			; locate find2 & find3 code
 40111                                  	call	FindBadCode
 40112                                  	jc	short rpBug2
 40113                                  
 40114                                  ; si = rpFind2 offset, di = rpFind3 offset
 40115                                  
 40116                                  	push	di
 40117                                  	mov	di,si				; rpFind2 offset
 40118                                  	mov	dx,rpFind2Len ; 3
 40119                                  
 40120                                  	cmp	byte [es:di-1],51h	 	; find2 preceeded by push cx?
 40121                                  	jne	short rp_no_cx
 40122                                  
 40123                                  	dec	di				;   yes, gobble up push cx too
 40124                                  	inc	dx
 40125                                  rp_no_cx:
 40126                                  	mov	si,rpRepl2			; patch out find2 sequence
 40127                                  	mov	cx,rpRepl2Len  ; 6
 40128                                  	call	GenPatch
 40129                                  
 40130                                  	pop	di				; rpFind3 offset
 40131                                  	cmp	byte [es:di-1],59h 		; find3 preceeded by pop cx?
 40132                                  	jne	short rp_no_cx2
 40133                                  
 40134                                  	mov	byte [es:di-1],90h		;   yes, no-op it
 40135                                  rp_no_cx2:
 40136                                  	;mov	ax,[bp+4]
 40137                                  	mov	ax,[bp+StackVars.sv_pPatch]	; change offset of far jmp
 40138                                  	;mov	[es:di+4],ax
 40139                                  	mov	[es:di+rpFind3Len],ax		;   to go to patch code
 40140                                  
 40141                                  	push	di				; save find3 offset
 40142                                  	mov	si,rpRepl3			; copy repl3 to patch area
 40143                                  	mov	cx,rpRepl3Len ; 5
 40144                                  	call	CopyPatch
 40145                                  
 40146                                  	pop	bx				; find3 offset
 40147                                  	add	bx,rpFind3Len+4	 ; 8		; skip over find3 and far jmp
 40148                                  	call	GenJump 			; jmp back from patch area
 40149                                  	;mov	[bp+4],di
 40150                                  	mov	[bp+StackVars.sv_pPatch], di	;   to main-line, update patch
 40151                                  						;   area pointer
 40152                                  
 40153                                  ;----------------------------------------------------------------------------
 40154                                  ; Bug # 2 -- loss of high regs on 386+ under VCPI only
 40155                                  
 40156                                  rpBug2:
 40157                                  	mov	bx,rpBug2Strs			; locate find4 & find5 code
 40158                                  	call	FindBadCode
 40159                                  	jc	short rpBug3
 40160                                  
 40161                                  ; si = rpFind4 offset, di = rpFind5 offset
 40162                                  
 40163                                  	;push	word [bp+4]
 40164                                  	push	word [bp+StackVars.sv_pPatch]	; save current patch pointer
 40165                                  						;   (where repl4 goes)
 40166                                  	push	di				; save find5 offset
 40167                                  
 40168                                  	mov	di,si
 40169                                  	mov	dx,rpFind4Len ; 4
 40170                                  	mov	si,rpRepl4
 40171                                  	mov	cx,rpRepl4Len ; 15
 40172                                  	call	GenPatch			; patch out find4 code
 40173                                  
 40174                                  	pop	di				; find5 offset
 40175                                  	add	di,5				; keep 5 bytes of find5 code
 40176                                  	;mov	bx,[bp+4]
 40177                                  	mov	bx,[bp+StackVars.sv_pPatch]	; jump to patch area
 40178                                  	push	bx				; save repl5 location
 40179                                  	call	GenJump
 40180                                  
 40181                                  	mov	si,rpRepl5			; copy repl5 code to patch
 40182                                  	mov	cx,rpRepl5Len  ; 15		;   area -- it has a jmp bx
 40183                                  	call	CopyPatch			;   so no need to jmp back to
 40184                                  						;   main-line code
 40185                                  
 40186                                  ; patches have been made, now update the patch code to store/load dwords just
 40187                                  ; after the code in the patch area
 40188                                  
 40189                                  	pop	di				; repl5 location
 40190                                  	pop	si				; repl4 location
 40191                                  
 40192                                  	;mov	ax,[bp+4]
 40193                                  	mov	ax,[bp+StackVars.sv_pPatch]	; (where dwords go)
 40194                                  
 40195                                  	;mov	[es:si+7],ax
 40196                                  	mov	[es:si+rpRepl4o1Len],ax		; offset for EAX
 40197                                  	;mov	[es:di+5],ax
 40198                                  	mov	[es:di+rpRepl5o1Len],ax
 40199                                  	add	ax,4
 40200                                  	;mov	[es:si+0Dh],ax
 40201                                  	mov	[es:si+rpRepl4o2Len],ax		; offset for ESI
 40202                                  	;mov	[es:di+0Bh],ax
 40203                                  	mov	[es:di+rpRepl5o2Len],ax
 40204                                  
 40205                                  	;add	word [bp+4],8
 40206                                  	add	word [bp+StackVars.sv_pPatch],8	; reserve space for 2 dwords in
 40207                                  						; patch area
 40208                                  
 40209                                  ;----------------------------------------------------------------------------
 40210                                  ; Bug # 3 -- loss of high regs on 386+ under VCPI only
 40211                                  
 40212                                  rpBug3:
 40213                                  	mov	bx,rpBug3Strs			; locate find6 & find7a code
 40214                                  	call	FindBadCode
 40215                                  	jc	short rpBug4
 40216                                  
 40217                                  	;add	di,9
 40218                                  	add	di,rpFind7aLen + 2		; skip over offset in find7a
 40219                                  	push	si				;   code and locate find7b
 40220                                  	mov	si,rpFind7b			;   sequence
 40221                                  	mov	dx,rpFind7bLen ; 3
 40222                                  	call	ScanCodeSeq_di
 40223                                  	pop	si
 40224                                  	jnz	short rpBug4
 40225                                  
 40226                                  	push	di				; save find7b code offset
 40227                                  
 40228                                  	mov	di,si
 40229                                  	mov	dx,rpFind6Len ; 3
 40230                                  	mov	si,rpRepl6
 40231                                  	mov	cx,rpRepl6Len ; 9
 40232                                  	call	GenPatch			; patch out find6 code
 40233                                  
 40234                                  	pop	di
 40235                                  	mov	dx,rpFind7bLen ; 3
 40236                                  	mov	si,rpRepl7
 40237                                  	mov	cx,rpRepl7Len ; 9
 40238                                  	call	GenPatch			; patch out find7b code
 40239                                  
 40240                                  ;----------------------------------------------------------------------------
 40241                                  ; Bug # 4 -- loss of high regs on 386+ under VCPI only
 40242                                  
 40243                                  rpBug4:
 40244                                  	;cmp	word [bp+0],360
 40245                                  	;cmp	word [bp+StackVars.sv_wVersion],360 ; only applies if 
 40246                                  	cmp	word [bp],360
 40247                                  	jbe	short rp3Exit 			; version > 3.60 and < 3.95
 40248                                  
 40249                                  	mov	bx,rpBug4Strs			; locate find8 & find9 code
 40250                                  	call	FindBadCode
 40251                                  	jc	short rp3Exit
 40252                                  
 40253                                  	push	di				; save find9 code offset
 40254                                  
 40255                                  	mov	di,si
 40256                                  	mov	dx,3
 40257                                  	mov	si,rpRepl8
 40258                                  	mov	cx,rpRepl8Len ; 4
 40259                                  	call	GenPatch			; patch out find8 code
 40260                                  
 40261                                  	pop	di				; find9 offset
 40262                                  	;mov	bx,[bp+4]
 40263                                  	mov	bx,[bp+StackVars.sv_pPatch]	; patch find9 to jmp to
 40264                                  	call	GenJump 			;   patch area
 40265                                  
 40266                                  	mov	si,rpRepl9			; copy replacement code to
 40267                                  	mov	cx,rpRepl9Len ; 5		;   patch area--it does a RET
 40268                                  	call	CopyPatch			;   so no jmp back to main-line
 40269                                  
 40270                                  rp3Exit:
 40271                                  	add	sp,StackVars.size
 40272                                  	pop	bp
 40273                                  	pop	ds
 40274                                  	pop	es
 40275                                  	pop	di
 40276                                  	pop	si
 40277                                  	pop	dx
 40278                                  	pop	cx
 40279                                  	pop	bx
 40280                                  	pop	ax
 40281                                  	retn
 40282                                  
 40283                                  ;----------------------------------------------------------------------------
 40284                                  ;
 40285                                  ; FindBadCode
 40286                                  ;
 40287                                  ; Searches Rational code segment looking for a pair of find strings (all
 40288                                  ; patches have at least two find strings).
 40289                                  ;
 40290                                  ; Entry:
 40291                                  ;	ES    = code segment to search
 40292                                  ;	DS:BX = search pair structure for this search
 40293                                  ;	[bp].sv_cbCodeSeg = length of code seg to search
 40294                                  ;
 40295                                  ; Exit:
 40296                                  ;	CY flag clear if both strings found, and
 40297                                  ;	SI    = offset in ES of 1st string
 40298                                  ;	DI    = offset in ES of 2nd string
 40299                                  ;	CY set if either string not found, or strings too far apart
 40300                                  ;
 40301                                  ; Used:
 40302                                  ;	CX
 40303                                  ;
 40304                                  ;----------------------------------------------------------------------------
 40305                                  
 40306                                  ;struc SearchPair
 40307                                  ; .sp_off1: resw 1	; offset of 1st search string
 40308                                  ; .sp_len1: resw 1	; length of 1st search string
 40309                                  ; .sp_off2: resw 1	; 2nd string
 40310                                  ; .sp_len2: resw 1	; 2nd string
 40311                                  ; .sp_diff: resw 1	; max difference between offsets
 40312                                  ; .size:
 40313                                  ;endstruc
 40314                                  
 40315                                  FindBadCode:
 40316                                  	;mov	cx,[bp+2]
 40317                                  	mov	cx,[bp+StackVars.sv_cbCodeSeg]	; search length
 40318                                  
 40319                                  	mov	si,[bx]	; mov si,[bx+0]
 40320                                  	;mov	si,[bx+Searchpair.sp_off1] ; ds:si -> search string
 40321                                  	
 40322                                  	;mov	dx,[bx+2]
 40323                                  	mov	dx,[bx+SearchPair.sp_len1] ; dx = search len
 40324                                  	call	ScanCodeSeq
 40325                                  	jnz	short fbc_error		; done if 1st not found
 40326                                  
 40327                                  	push	di			; save 1st string offset
 40328                                  
 40329                                  	;mov	si,[bx+4]
 40330                                  	mov	si,[bx+SearchPair.sp_off2]
 40331                                  	;mov	dx,[bx+6]
 40332                                  	mov	dx,[bx+SearchPair.sp_len2]
 40333                                  	call	ScanCodeSeq_di		; don't change flags after this!
 40334                                  
 40335                                  	pop	si			; restore 1st string offset
 40336                                  	jnz	short fbc_error
 40337                                  
 40338                                  	mov	ax,di			; sanity check that
 40339                                  	sub	ax,si			;   si < di && di - si <= allowed diff
 40340                                  	jc	short fbc_error
 40341                                  	;cmp	ax,[bx+8]
 40342                                  	cmp	ax,[bx+SearchPair.sp_diff]
 40343                                  	ja	short fbc_error
 40344                                  
 40345                                  	clc
 40346                                  	retn
 40347                                  
 40348                                  fbc_error:
 40349                                  	stc
 40350                                  	retn
 40351                                  
 40352                                  ;----------------------------------------------------------------------------
 40353                                  ;
 40354                                  ; GenPatch
 40355                                  ;
 40356                                  ; Generate a patch sequence. 1) insert a jump at the buggy code location
 40357                                  ; (jumps to the patch code area), 2) copy the selected patch code to the
 40358                                  ; patch area, 3) insert a jump from the patch area back to the main-line
 40359                                  ; code.
 40360                                  ;
 40361                                  ; Entry:
 40362                                  ;	ES:DI = start of buggy code to be patched
 40363                                  ;	DX    = length of buggy code to be patched
 40364                                  ;	DS:SI = replacement patch code
 40365                                  ;	CX    = length of replacement patch code
 40366                                  ;	[bp].sv_pPatch = offset in ES of where to copy patch code
 40367                                  ;
 40368                                  ; Exit:
 40369                                  ;	DI, [bp].sv_pPatch = byte after generated patch code
 40370                                  ;
 40371                                  ; Used:
 40372                                  ;	AX, BX, SI, Flags
 40373                                  ;
 40374                                  ;----------------------------------------------------------------------------
 40375                                  
 40376                                  GenPatch:
 40377                                  	push	di			;save offset of buggy code
 40378                                  
 40379                                  	;mov	bx,[bp+4]
 40380                                  	mov	bx,[bp+StackVars.sv_pPatch]
 40381                                  					;jump from buggy code to patch area
 40382                                  	call	GenJump
 40383                                  
 40384                                  	call	CopyPatch		;copy replacement code to patch area
 40385                                  
 40386                                  	pop	bx			;offset of buggy code + buggy code
 40387                                  	add	bx,dx			;  length = return from patch offset
 40388                                  
 40389                                  	call	GenJump 		;jump from patch area back to main-
 40390                                  	;mov	[bp+4],di
 40391                                  	mov	[bp+StackVars.sv_pPatch],di
 40392                                  					;  line code, update patch pointer
 40393                                  	retn
 40394                                  
 40395                                  ;----------------------------------------------------------------------------
 40396                                  ;
 40397                                  ; CopyPatch
 40398                                  ;
 40399                                  ; Copies patch code to patch location.
 40400                                  ;
 40401                                  ; Entry:
 40402                                  ;	DS:SI = patch code to be copied
 40403                                  ;	ES    = segment of code to patch
 40404                                  ;	CX    = length of code to copy
 40405                                  ;	[bp].sv_pPatch = offset in ES of where to copy patch code
 40406                                  ;
 40407                                  ; Exit:
 40408                                  ;	DI, [bp].sv_pPatch = byte after copied patch code
 40409                                  ;
 40410                                  ; Used:
 40411                                  ;	SI, Flags
 40412                                  ;
 40413                                  ;----------------------------------------------------------------------------
 40414                                  
 40415                                  CopyPatch:
 40416                                  	push	cx
 40417                                  	;mov	di,[bp+4]
 40418                                  	mov	di,[bp+StackVars.sv_pPatch] ;patch pointer is the dest offset
 40419                                  	cld
 40420                                  	rep movsb
 40421                                  	pop	cx
 40422                                  	;mov	[bp+4],di
 40423                                  	mov	[bp+StackVars.sv_pPatch],di ;update net pointer location
 40424                                  	retn
 40425                                  
 40426                                  ;----------------------------------------------------------------------------
 40427                                  ;
 40428                                  ; GenJump
 40429                                  ;
 40430                                  ; Generates a rel16 JMP instruction at location 'from' to location 'to'.
 40431                                  ;
 40432                                  ; Entry:
 40433                                  ;	ES:DI = from location (where to put jmp instruction)
 40434                                  ;	BX    = to location (where to jump to)
 40435                                  ;
 40436                                  ; Exit:
 40437                                  ;	DI = byte after generated jump
 40438                                  ;
 40439                                  ; Used:
 40440                                  ;	AX
 40441                                  ;
 40442                                  ;----------------------------------------------------------------------------
 40443                                  
 40444                                  GenJump:
 40445                                  	mov	al,0E9h		; jmp rel16 opcode
 40446                                  	stosb
 40447                                  
 40448                                  	mov	ax,bx		; calc offset to 'to' location
 40449                                  	sub	ax,di
 40450                                  	sub	ax,2
 40451                                  
 40452                                  	stosw			; output offset
 40453                                  
 40454                                  	retn
 40455                                  
 40456                                  ;----------------------------------------------------------------------------
 40457                                  ;
 40458                                  ; ScanCodeSeq
 40459                                  ;
 40460                                  ; Looks for a pattern pointed to by DS:SI & len DX in ES:200 to ES:200+CX-1
 40461                                  ;
 40462                                  ; returns in ES:DI the start of the pattern if Zero flag is set
 40463                                  ;
 40464                                  ;----------------------------------------------------------------------------
 40465                                  
 40466                                  ScanCodeSeq:
 40467                                  	mov	di,200h
 40468                                  ScanCodeSeq_di:
 40469                                  	push	cx
 40470                                  	sub	cx,dx
 40471                                  	inc	cx
 40472                                  scsagain:
 40473                                  	push	si
 40474                                  	push	di
 40475                                  	push	cx
 40476                                  	mov	cx,dx
 40477                                  	rep	cmpsb
 40478                                  	pop	cx
 40479                                  	pop	di
 40480                                  	pop	si
 40481                                  	je	short scsfound
 40482                                  	inc	di
 40483                                  	loop	scsagain
 40484                                  scsfound:
 40485                                  	pop	cx
 40486                                  vvexit:		; 18/12/2022
 40487                                  	retn
 40488                                  	
 40489                                  ;----------------------------------------------------------------------------
 40490                                  ;
 40491                                  ; VerifyVersion
 40492                                  ;
 40493                                  ; Checks whether the binary version from ES:0 matches the ASCII version
 40494                                  ; from ES:2A.
 40495                                  ;
 40496                                  ;       Entry: AX = binary version number 
 40497                                  ;       Exit : Z flag set if version numbers match
 40498                                  ;
 40499                                  ;----------------------------------------------------------------------------
 40500                                  
 40501                                  VerifyVersion:
 40502                                  	mov	si,[es:2Ah]		; offset of version number
 40503                                  					;  in ascii
 40504                                  	mov	bl,10
 40505                                  	add	si,3			; point to last digit
 40506                                  
 40507                                  	call	VVDigit
 40508                                  	jne	short vvexit
 40509                                  	call	VVDigit
 40510                                  	jne	short vvexit
 40511                                  	cmp	byte [es:si],'.'
 40512                                  	jne	short vvexit
 40513                                  	dec	si
 40514                                  	;call	VVDigit
 40515                                  	; 18/12/2022
 40516                                  	;jmp	short VVDigit
 40517                                  ;vvexit:
 40518                                  	;retn
 40519                                  VVDigit:
 40520                                  	div	bl
 40521                                  	add	ah,'0'
 40522                                  	dec	si
 40523                                  	cmp	[es:si+1],ah
 40524                                  	mov	ah,0			; do not xor or sub we need Z
 40525                                  	retn
 40526                                  
 40527                                  %endif
 40528                                  
 40529                                  ;-----------------------------------------------------------------------
 40530                                  
 40531                                  ; 23/05/2019 - Retro DOS v4.0
 40532                                  ; DOSCODE:B702h (MSDOS 6.21, MSDOS.SYS)
 40533                                  
 40534                                  ; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 40535                                  ; DOSCODE:B3E0h (MSDOS 5.0, MSDOS.SYS)
 40536                                  
 40537                                  exepatch_start:	 ; label byte
 40538                                  
 40539                                  	; The following is the code that'll be layed over the buggy unpack
 40540                                  	; code.
 40541                                  str1:
 40542 000074FB 06                      	db  06h	  		;push	es		 
 40543 000074FC 8CD8                    	db  8Ch,0D8h		;mov	ax,ds 
 40544                                  
 40545                                  first_stop equ	$-str1
 40546                                  			
 40547 000074FE 2BC2                    	db  2Bh, 0C2h		;sub	ax, dx			
 40548                                  
 40549                                  first:  ; label	byte
 40550                                  
 40551 00007500 8ED8                    	db  8Eh,0D8h		;mov	ds,ax			
 40552 00007502 8EC0                    	db  8Eh,0C0h		;mov	es,ax			
 40553 00007504 BF0F00                  	db  0BFh,0Fh,00h	;mov	di,000FH
 40554 00007507 57                      	db  57h	    		;push	di
 40555 00007508 B91000                  	db  0B9h,10h,00h	;mov	cx,0010H
 40556 0000750B B0FF                    	db  0B0h,0FFh 		;mov	al,0FFH 		
 40557 0000750D F3AE                    	db  0F3h,0AEh 		;repz	scasb			
 40558 0000750F 47                      	db  47h	    		;inc	di			
 40559 00007510 8BF7                    	db  8Bh,0F7h  		;mov	si,di			
 40560 00007512 5F                      	db  5Fh	    		;pop	di
 40561 00007513 58                      	db  58h	    		;pop	ax
 40562                                  
 40563                                  second_stop equ	$-first
 40564                                  
 40565 00007514 2BC2                    	db  2Bh,0C2h  		;sub	ax, dx			
 40566                                  
 40567                                  second: ; label	byte
 40568                                  
 40569 00007516 8EC0                    	db  8Eh,0C0h  		;mov	es,ax			
 40570                                  		    		;NextRec:				
 40571 00007518 B90402                  	db  0B9h,04h,02h	;mov	cx, 0204h
 40572                                  		    		;norm_agn:				
 40573 0000751B 8BC6                    	db  8Bh,0C6h		;mov	ax,si			
 40574 0000751D F7D0                    	db  0F7h,0D0h		;not	ax		
 40575 0000751F D3E8                    	db  0D3h,0E8h		;shr	ax,cl		
 40576 00007521 7413                    	db  74h,13h		;jz	short SI_ok			
 40577 00007523 8CDA                    	db  8Ch,0DAh		;mov	dx,ds			
 40578 00007525 83CEF0                  	db  83h,0CEh,0F0h	;or	si,0FFF0H
 40579 00007528 2BD0                    	db  2Bh,0D0h		;sub	dx,ax			
 40580 0000752A 7308                    	db  73h,08h		;jnc	short SItoDS			
 40581 0000752C F7DA                    	db  0F7h,0DAh		;neg	dx			
 40582 0000752E D3E2                    	db  0D3h,0E2h		;shl	dx,cl			
 40583 00007530 2BF2                    	db  2Bh,0F2h		;sub	si,dx			
 40584 00007532 33D2                    	db  33h,0D2h		;xor	dx,dx			
 40585                                  				;SItoDS: 				
 40586 00007534 8EDA                    	db  8Eh,0DAh		;mov	ds,dx		
 40587                                  				;SI_ok:					
 40588 00007536 87F7                    	db  87h,0F7h		;xchg	si,di			
 40589 00007538 1E                      	db  1Eh			;push	ds			
 40590 00007539 06                      	db  06h			;push	es			
 40591 0000753A 1F                      	db  1Fh			;pop	ds			
 40592 0000753B 07                      	db  07h			;pop	es			
 40593 0000753C FECD                    	db  0FEh,0CDh		;dec	ch			
 40594 0000753E 75DB                    	db  75h,0DBh		;jnz	short norm_agn		
 40595 00007540 AC                      	db  0ACh		;lodsb			
 40596 00007541 92                      	db  92h			;xchg	dx,ax
 40597 00007542 4E                      	db  4Eh			;dec	si
 40598 00007543 AD                      	db  0ADh		;lodsw			
 40599 00007544 8BC8                    	db  8Bh,0C8h		;mov	cx,ax		
 40600 00007546 46                      	db  46h			;inc	si		
 40601 00007547 8AC2                    	db  8Ah,0C2h		;mov	al,dl		
 40602 00007549 24FE                    	db  24h,0FEh		;and	al,0FEH		
 40603 0000754B 3CB0                    	db  3Ch,0B0h		;cmp	al,RPTREC
 40604 0000754D 7505                    	db  75h,05h		;jne	short TryEnum
 40605 0000754F AC                      	db  0ACh		;lodsb				
 40606 00007550 F3AA                    	db  0F3h,0AAh		;rep stosb			
 40607                                  
 40608                                  ;	db  0EBh,07h,90h	;jmp	short TryNext
 40609 00007552 EB06                    	db  0EBh,06h		;jmp	short TryNext
 40610                                  
 40611                                  				;TryEnum:
 40612 00007554 3CB2                    	db  3Ch,0B2h		;cmp	al,ENMREC
 40613 00007556 756C                    	db  75h,6Ch		;jne	short CorruptExe		
 40614 00007558 F3A4                    	db  0F3h,0A4h		;rep movsb			
 40615                                  				;TryNext:
 40616                                  
 40617 0000755A 92                      	db  92h			;xchg	dx,ax
 40618                                  ;	db  8Ah,0C2h		;mov	al,dl			
 40619                                  
 40620 0000755B A801                    	db  0A8h,01h		;test	al,1			
 40621 0000755D 74B9                    	db  74h,0B9h		;jz	short NextRec			
 40622 0000755F 9090                    	db  90h,90h		;nop,nop
 40623                                  	
 40624                                  last_stop equ $-second
 40625                                  size_str1 equ $-str1
 40626                                  
 40627                                  	; The following is the code that we need to look for in the exe
 40628                                  	; file.
 40629                                  
 40630                                  scan_patch1: ; label byte
 40631                                  
 40632 00007561 8CC3                    	db  8Ch,0C3h		;mov	bx,es			
 40633 00007563 8CD8                    	db  8Ch,0D8h		;mov	ax,ds
 40634 00007565 2BC2                    	db  2Bh,0C2h		;sub	ax,dx
 40635 00007567 8ED8                    	db  8Eh,0D8h		;mov	ds,ax			
 40636 00007569 8EC0                    	db  8Eh,0C0h		;mov	es,ax			
 40637 0000756B BF0F00                  	db  0BFh,0Fh,00h	;mov	di,000FH
 40638 0000756E B91000                  	db  0B9h,10h,00h	;mov	cx,0010H
 40639 00007571 B0FF                    	db  0B0h,0FFh		;mov	al,0FFH
 40640 00007573 F3AE                    	db  0F3h,0AEh		;repz	scasb			
 40641 00007575 47                      	db  47h			;inc	di			
 40642 00007576 8BF7                    	db  8Bh,0F7h		;mov	si,di
 40643 00007578 8BC3                    	db  8Bh,0C3h		;mov	ax,bx			
 40644 0000757A 2BC2                    	db  2Bh,0C2h		;sub	ax, dx
 40645 0000757C 8EC0                    	db  8Eh,0C0h		;mov	es,ax
 40646 0000757E BF0F00                  	db  0BFh,0Fh,00h	;mov	di,000FH
 40647                                  				;NextRec:
 40648 00007581 B104                    	db  0B1h,04h		;mov	cl,4
 40649 00007583 8BC6                    	db  8Bh,0C6h		;mov	ax,si
 40650 00007585 F7D0                    	db  0F7h,0D0h		;not	ax		
 40651 00007587 D3E8                    	db  0D3h,0E8h		;shr	ax,cl		
 40652 00007589 7409                    	db  74h,09h		;jz	short SI_ok
 40653 0000758B 8CDA                    	db  8Ch,0DAh		;mov	dx,ds
 40654 0000758D 2BD0                    	db  2Bh,0D0h		;sub	dx,ax
 40655 0000758F 8EDA                    	db  8Eh,0DAh		;mov	ds,dx		
 40656 00007591 83CEF0                  	db  83h,0CEh,0F0h	;or	si,0FFF0H	       
 40657                                  	       			;SI_ok:
 40658 00007594 8BC7                    	db  8Bh,0C7h		;mov	ax,di		
 40659 00007596 F7D0                    	db  0F7h,0D0h		;not	ax
 40660 00007598 D3E8                    	db  0D3h,0E8h		;shr	ax,cl
 40661 0000759A 7409                    	db  74h,09h		;jz	short DI_ok
 40662 0000759C 8CC2                    	db  8Ch,0C2h		;mov	dx,es
 40663 0000759E 2BD0                    	db  2Bh,0D0h		;sub	dx,ax
 40664 000075A0 8EC2                    	db  8Eh,0C2h		;mov	es,dx
 40665 000075A2 83CFF0                  	db  83h,0CFh,0F0h	;or	di,0FFF0H
 40666                                  				;DI_ok:
 40667                                  
 40668                                  size_scan_patch1 equ $-scan_patch1
 40669                                  
 40670                                  scan_patch2: ; label byte
 40671                                  			
 40672 000075A5 8CC3                    	db  8Ch,0C3h		;mov	bx,es			
 40673 000075A7 8CD8                    	db  8Ch,0D8h		;mov	ax,ds
 40674 000075A9 48                      	db  48h			;dec	ax
 40675 000075AA 8ED8                    	db  8Eh,0D8h		;mov	ds,ax			
 40676 000075AC 8EC0                    	db  8Eh,0C0h		;mov	es,ax			
 40677 000075AE BF0F00                  	db  0BFh,0Fh,00h	;mov	di,000FH
 40678 000075B1 B91000                  	db  0B9h,10h,00h	;mov	cx,0010H
 40679 000075B4 B0FF                    	db  0B0h,0FFh		;mov	al,0FFH
 40680 000075B6 F3AE                    	db  0F3h,0AEh		;repz	scasb			
 40681 000075B8 47                      	db  47h			;inc	di			
 40682 000075B9 8BF7                    	db  8Bh,0F7h		;mov	si,di
 40683 000075BB 8BC3                    	db  8Bh,0C3h		;mov	ax,bx			
 40684 000075BD 48                      	db  48h			;dec	ax
 40685 000075BE 8EC0                    	db  8Eh,0C0h		;mov	es,ax
 40686 000075C0 BF0F00                  	db  0BFh,0Fh,00h	;mov	di,000FH		
 40687                                  				;NextRec:
 40688 000075C3 B104                    	db  0B1h,04h		;mov	cl,4
 40689 000075C5 8BC6                    	db  8Bh,0C6h		;mov	ax,si
 40690 000075C7 F7D0                    	db  0F7h,0D0h		;not	ax		
 40691 000075C9 D3E8                    	db  0D3h,0E8h		;shr	ax,cl		
 40692 000075CB 740A                    	db  74h,0Ah		;jz	short SI_ok
 40693 000075CD 8CDA                    	db  8Ch,0DAh		;mov	dx,ds
 40694 000075CF 2BD0                    	db  2Bh,0D0h		;sub	dx,ax
 40695 000075D1 8EDA                    	db  8Eh,0DAh		;mov	ds,dx		
 40696 000075D3 81CEF0FF                	db  81h,0CEh,0F0h,0FFh
 40697                                  				;or	si,0FFF0H
 40698                                  				;SI_ok:
 40699 000075D7 8BC7                    	db  8Bh,0C7h		;mov	ax,di		
 40700 000075D9 F7D0                    	db  0F7h,0D0h		;not	ax
 40701 000075DB D3E8                    	db  0D3h,0E8h		;shr	ax,cl
 40702 000075DD 740A                    	db  74h,0Ah		;jz	short DI_ok
 40703 000075DF 8CC2                    	db  8Ch,0C2h		;mov	dx,es
 40704 000075E1 2BD0                    	db  2Bh,0D0h		;sub	dx,ax
 40705 000075E3 8EC2                    	db  8Eh,0C2h		;mov	es,dx
 40706 000075E5 81CFF0FF                	db  81h,0CFh,0F0h,0FFh
 40707                                  				;or	di,0FFF0H
 40708                                  				;DI_ok:
 40709                                  
 40710                                  size_scan_patch2 equ $-scan_patch2
 40711                                  
 40712                                  scan_patch3: ; label byte
 40713                                  
 40714 000075E9 8CC3                    	db  8Ch,0C3h		;mov	bx,es			
 40715 000075EB 8CD8                    	db  8Ch,0D8h		;mov	ax,ds
 40716 000075ED 48                      	db  48h			;dec	ax
 40717 000075EE 8ED8                    	db  8Eh,0D8h		;mov	ds,ax			
 40718 000075F0 8EC0                    	db  8Eh,0C0h		;mov	es,ax			
 40719 000075F2 BF0F00                  	db  0BFh,0Fh,00h	;mov	di,000FH
 40720 000075F5 B91000                  	db  0B9h,10h,00h	;mov	cx,0010H
 40721 000075F8 B0FF                    	db  0B0h,0FFh		;mov	al,0FFH
 40722 000075FA F3AE                    	db  0F3h,0AEh		;repz	scasb			
 40723 000075FC 47                      	db  47h			;inc	di			
 40724 000075FD 8BF7                    	db  8Bh,0F7h		;mov	si,di
 40725 000075FF 8BC3                    	db  8Bh,0C3h		;mov	ax,bx			
 40726 00007601 48                      	db  48h			;dec	ax
 40727 00007602 8EC0                    	db  8Eh,0C0h		;mov	es,ax
 40728 00007604 BF0F00                  	db  0BFh,0Fh,00h	;mov	di,000FH		
 40729                                  				;NextRec:
 40730 00007607 B104                    	db  0B1h,04h		;mov	cl,4
 40731 00007609 8BC6                    	db  8Bh,0C6h		;mov	ax,si
 40732 0000760B F7D0                    	db  0F7h,0D0h		;not	ax		
 40733 0000760D D3E8                    	db  0D3h,0E8h		;shr	ax,cl		
 40734 0000760F 7409                    	db  74h,09h		;jz	short SI_ok
 40735 00007611 8CDA                    	db  8Ch,0DAh		;mov	dx,ds
 40736 00007613 2BD0                    	db  2Bh,0D0h		;sub	dx,ax
 40737 00007615 8EDA                    	db  8Eh,0DAh		;mov	ds,dx	
 40738 00007617 83CEF0                  	db  83h,0CEh,0F0h	;or	si,0FFF0H	
 40739                                  				;SI_ok:
 40740 0000761A 8BC7                    	db  8Bh,0C7h		;mov	ax,di		
 40741 0000761C F7D0                    	db  0F7h,0D0h		;not	ax
 40742 0000761E D3E8                    	db  0D3h,0E8h		;shr	ax,cl
 40743 00007620 7409                    	db  74h,09h		;jz	short DI_ok
 40744 00007622 8CC2                    	db  8Ch,0C2h		;mov	dx,es
 40745 00007624 2BD0                    	db  2Bh,0D0h		;sub	dx,ax
 40746 00007626 8EC2                    	db  8Eh,0C2h		;mov	es,dx
 40747 00007628 83CFF0                  	db  83h,0CFh,0F0h	;or	di,0FFF0H
 40748                                  				;DI_ok:
 40749                                  
 40750                                  size_scan_patch3 equ $-scan_patch3
 40751                                  
 40752                                  scan_com: ; label byte
 40753                                  
 40754 0000762B AC                      	db  0ACh		;lodsb			
 40755 0000762C 8AD0                    	db  8Ah,0D0h		;mov	dl,al		
 40756 0000762E 4E                      	db  4Eh			;dec	si
 40757 0000762F AD                      	db  0ADh		;lodsw			
 40758 00007630 8BC8                    	db  8Bh,0C8h		;mov	cx,ax		
 40759 00007632 46                      	db  46h			;inc	si		
 40760 00007633 8AC2                    	db  8Ah,0C2h		;mov	al,dl		
 40761 00007635 24FE                    	db  24h,0FEh		;and	al,0FEH		
 40762 00007637 3CB0                    	db  3Ch,0B0h		;cmp	al,RPTREC
 40763 00007639 7506                    	db  75h,06h		;jne	short TryEnum
 40764 0000763B AC                      	db  0ACh		;lodsb				
 40765 0000763C F3AA                    	db  0F3h,0AAh		;rep stosb			
 40766 0000763E EB0790                  	db  0EBh,07h,90h	;jmp	short TryNext
 40767                                  				;TryEnum:
 40768 00007641 3CB2                    	db  3Ch,0B2h		;cmp	al,ENMREC
 40769 00007643 756B                    	db  75h,6Bh		;jne	short CorruptExe		
 40770 00007645 F3A4                    	db  0F3h,0A4h		;rep movsb			
 40771                                  				;TryNext:
 40772 00007647 8AC2                    	db  8Ah,0C2h		;mov	al,dl			
 40773 00007649 A801                    	db  0A8h,01h		;test	al,1			
 40774                                  ;	db  74h,0BAh		;jz	short NextRec			
 40775                                  
 40776                                  size_scan_com	equ	$-scan_com
 40777                                  
 40778                                  ;-----------------------------------------------------------------------
 40779                                  
 40780                                  ; 23/05/2019 - Retro DOS v4.0
 40781                                  ; DOSCODE:B852h (MSDOS 6.21, MSDOS.SYS)
 40782                                  
 40783                                  ; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 40784                                  ; DOSCODE:B530h (MSDOS 5.0, MSDOS.SYS)
 40785                                  
 40786                                  ExePatch:
 40787                                  	; 28/12/2022 - Retro DOS v4.1
 40788                                  	;call	ExePackPatch
 40789                                  	;;call	word [ss:RationalPatchPtr]
 40790                                  	;retn
 40791                                  	; 28/12/2022
 40792                                  	;jmp	short ExePackPatch
 40793                                  
 40794                                  ;-----------------------------------------------------------------------
 40795                                  ;
 40796                                  ; Procedure Name 	: ExePackPatch
 40797                                  ;
 40798                                  ; Inputs	 	: DS 			-> DOSDATA
 40799                                  ;			  ES:0 			-> read in image
 40800                                  ;			  ax:cx = start cs:ip of program
 40801                                  ; Output		:		
 40802                                  ;
 40803                                  ;	1. If ES <= 0fffh
 40804                                  ;	   2. if exepack signature ('RB') found
 40805                                  ;	      3. if common code to patch compares (for 3 diff. versions)
 40806                                  ;	       	 4. if rest of the code & checksum compares
 40807                                  ;	  	    5. overlay buggy code with code in 
 40808                                  ;		       doscode:str1.
 40809                                  ;		 6. endif
 40810                                  ;	      7. endif
 40811                                  ;	   8. endif
 40812                                  ;	9. endif
 40813                                  ;
 40814                                  ;
 40815                                  ; Uses			: NONE
 40816                                  ;
 40817                                  ;-----------------------------------------------------------------------
 40818                                  		
 40819                                  	; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 40820                                  	; 23/05/2019 - Retro DOS v4.0	
 40821                                  ExePackPatch:
 40822 0000764B 53                      	push	bx
 40823 0000764C 8CC3                    	mov	bx,es			; bx has load segment
 40824 0000764E 81FBFF0F                	cmp	bx,0FFFh		; Q: is the load segment > 64K
 40825 00007652 7602                    	jbe	short ep_cont		; N: 
 40826 00007654 5B                      	pop	bx			; Y: no need to patch
 40827 00007655 C3                      	retn
 40828                                  ep_cont:
 40829 00007656 1E                      	push	ds
 40830 00007657 06                      	push	es
 40831 00007658 50                      	push	ax
 40832 00007659 51                      	push	cx
 40833 0000765A 56                      	push	si
 40834 0000765B 57                      	push	di
 40835                                  	
 40836                                  		; M033 - start
 40837                                  		; exepacked programs have an IP of 12h (>=2)
 40838                                  
 40839 0000765C 83E902                  	sub	cx,2			; Q: is IP >=2 
 40840 0000765F 7303                    	jnb	short epp_1		; N: exit
 40841 00007661 E9C500                  	jmp	ep_notpacked
 40842                                  					; ax:cx now points to location of
 40843                                  					; 'RB' if this is an exepacked file.
 40844                                  		; M033 - end
 40845                                  epp_1:
 40846 00007664 89CF                    	mov	di,cx
 40847 00007666 8EC0                    	mov	es,ax
 40848 00007668 36893E[8700]            	mov	[ss:UNPACK_OFFSET],di	; save pointer to 'RB' in 
 40849                                  					; unpack_offset
 40850                                  
 40851 0000766D 26813D5242              	cmp	word [es:di],'RB' ; 4252h
 40852                                  	;ljne	ep_notpacked
 40853 00007672 7403                    	je	short epp_2
 40854 00007674 E9B200                  	jmp	ep_notpacked
 40855                                  epp_2:
 40856 00007677 0E                      	push	cs
 40857 00007678 1F                      	pop	ds			; set ds to cs
 40858                                  
 40859                                  	;add	di,6Ch
 40860 00007679 83C76C                  	add	di,PATCH1_COM_OFFSET	; es:di -> points to place in packed 
 40861                                  					;          file where we hope to find
 40862                                  					;	   scan string. 
 40863                                  
 40864 0000767C E8B200                  	call	chk_common_str		; check for match
 40865                                  
 40866 0000767F 7524                    	jnz	short ep_chkpatch2	; Q: does the patch match
 40867                                  					; N: check at patch2_offset
 40868                                  					; Y: check for rest of patch string
 40869 00007681 BE[6175]                	mov	si,scan_patch1
 40870                                  					; ds:si -> scan string 
 40871 00007684 368B3E[8700]            	mov	di,[ss:UNPACK_OFFSET]	; restore di to point to 'RB'
 40872                                  
 40873                                  	;add	di,28h
 40874                                  	; 07/12/2022
 40875 00007689 83C728                  	add	di,PATCH1_OFFSET	; es:di -> points to place in packed 
 40876                                  					;          file where we hope to find
 40877                                  					;	   scan string. 
 40878                                  	;mov	cx,68
 40879 0000768C B94400                  	mov	cx,size_scan_patch1
 40880                                  	;mov	bx,142
 40881 0000768F BB8E00                  	mov	bx,CHKSUM1_LEN
 40882                                  	;mov	ax,0EF4Eh
 40883 00007692 B84EEF                  	mov	ax,PATCH1_CHKSUM
 40884 00007695 E8AD00                  	call	chk_patchsum		; check if patch and chk sum compare
 40885 00007698 7208                    	jc	short ep_done1		; Q: did we pass the test
 40886                                  					; N: exit
 40887                                  					; Y: overlay code with new 
 40888 0000769A BE[FB74]                	mov	si,str1
 40889                                  	;mov	cx,102
 40890 0000769D B96600                  	mov	cx,size_str1
 40891                                  	
 40892 000076A0 F3A4                    	rep	movsb
 40893                                  ep_done1:
 40894 000076A2 E98400                  	jmp	ep_done
 40895                                  
 40896                                  ep_chkpatch2:
 40897                                  	;mov	di,76h
 40898 000076A5 BF7600                  	mov	di,PATCH2_COM_OFFSET	; es:di -> possible location of patch
 40899                                  					; in another version of unpack
 40900 000076A8 E88600                  	call	chk_common_str		; check for match
 40901                                  
 40902 000076AB 7544                    	jnz	short ep_chkpatch3	; Q: does the patch match
 40903                                  					; N: check for patch3_offset
 40904                                  					; Y: check for rest of patch string
 40905                                  
 40906 000076AD BE[A575]                	mov	si,scan_patch2
 40907                                  					; ds:si -> scan string 
 40908                                  	;mov	di,32h
 40909 000076B0 BF3200                  	mov	di,PATCH2_OFFSET	; es:di -> points to place in packed 
 40910                                  					;          file where we hope to find
 40911                                  	;mov	cx,68			;	   scan string. 
 40912 000076B3 B94400                  	mov	cx,size_scan_patch2
 40913                                  	;mov	bx,140
 40914 000076B6 BB8C00                  	mov	bx,CHKSUM2_LEN
 40915                                  	;mov	ax,78B2h
 40916 000076B9 B8B278                  	mov	ax,PATCH2_CHKSUM
 40917 000076BC E88600                  	call	chk_patchsum		; check if patch and chk sum compare
 40918                                  
 40919                                  					; M046 - Start
 40920                                  					; Q: did we pass the test
 40921 000076BF 7311                    	jnc	short ep_patchcode2		; Y: overlay code with new 
 40922                                  					; N: try with a different chksum
 40923                                  
 40924                                  
 40925 000076C1 BE[A575]                	mov	si,scan_patch2
 40926                                  					; ds:si -> scan string 
 40927                                  	;mov	cx,68
 40928 000076C4 B94400                  	mov	cx,size_scan_patch2
 40929                                  	;mov	bx,129
 40930 000076C7 BB8100                  	mov	bx,CHKSUM2A_LEN
 40931                                  	;mov	ax,1C47h
 40932 000076CA B8471C                  	mov	ax,PATCH2A_CHKSUM
 40933 000076CD E87500                  	call	chk_patchsum		; check if patch and chk sum compare
 40934                                  					; Q: did we pass the test
 40935 000076D0 7257                    	jc	short ep_notpacked		; N: try with a different chksum
 40936                                  					; Y: overlay code with new 
 40937                                  						
 40938                                  ep_patchcode2:			       	; M046 - End
 40939 000076D2 BE[FB74]                	mov	si,str1
 40940                                  	;mov	cx,3
 40941 000076D5 B90300                  	mov	cx,first_stop
 40942 000076D8 F3A4                    	rep	movsb
 40943 000076DA B89048                  	mov	ax,4890h		; ax = opcodes for dec ax, nop
 40944 000076DD AB                      	stosw
 40945 000076DE 83C602                  	add	si,2
 40946                                  	;mov	cx,20
 40947 000076E1 B91400                  	mov	cx,second_stop
 40948 000076E4 F3A4                    	rep	movsb
 40949 000076E6 AB                      	stosw				; put in dec ax and nop
 40950 000076E7 83C602                  	add	si,2
 40951                                  	;mov	cx,75
 40952 000076EA B94B00                  	mov	cx,last_stop
 40953 000076ED F3A4                    	rep	movsb
 40954 000076EF EB38                    	jmp	short ep_done
 40955                                  
 40956                                  ep_chkpatch3:
 40957                                  	;mov	di,74h
 40958 000076F1 BF7400                  	mov	di,PATCH3_COM_OFFSET	; es:di -> possible location of patch
 40959                                  					; in another version of unpack
 40960 000076F4 E83A00                  	call	chk_common_str		; check for match
 40961                                  
 40962 000076F7 7530                    	jnz	short ep_notpacked	; Q: does the patch match
 40963                                  					; N: exit
 40964                                  					; Y: check for rest of patch string
 40965 000076F9 BE[E975]                	mov	si,scan_patch3
 40966                                  					; ds:si -> scan string 
 40967                                  	;mov	di,32h
 40968 000076FC BF3200                  	mov	di,PATCH3_OFFSET	; es:di -> points to place in packed 
 40969                                  					;          file where we hope to find
 40970                                  					;	   scan string. 
 40971                                  	;mov	cx,66
 40972 000076FF B94200                  	mov	cx,size_scan_patch3
 40973                                  	;mov	bx,139
 40974 00007702 BB8B00                  	mov	bx,CHKSUM3_LEN
 40975                                  	;mov	ax,4EDEh
 40976 00007705 B8DE4E                  	mov	ax,PATCH3_CHKSUM
 40977 00007708 E83A00                  	call	chk_patchsum		; check if patch and chk sum compare
 40978 0000770B 721C                    	jc	short ep_notpacked	; Q: did we pass the test
 40979                                  					; N: exit
 40980                                  					; Y: overlay code with new 
 40981 0000770D BE[FB74]                	mov	si,str1
 40982                                  	;mv	cx,3
 40983 00007710 B90300                  	mov	cx,first_stop
 40984 00007713 F3A4                    	rep	movsb
 40985 00007715 B048                    	mov	al,48h			; al = opcode for dec ax
 40986 00007717 AA                      	stosb
 40987 00007718 83C602                  	add	si,2
 40988                                  	;mov	cx,20
 40989 0000771B B91400                  	mov	cx,second_stop
 40990 0000771E F3A4                    	rep	movsb
 40991 00007720 AA                      	stosb				; put in dec ax
 40992 00007721 83C602                  	add	si,2
 40993                                  	;mov	cx,75
 40994 00007724 B94B00                  	mov	cx,last_stop
 40995 00007727 F3A4                    	rep	movsb
 40996                                  
 40997                                  ep_notpacked:
 40998                                  	;stc
 40999                                  ep_done:
 41000 00007729 5F                      	pop	di
 41001 0000772A 5E                      	pop	si
 41002 0000772B 59                      	pop	cx
 41003 0000772C 58                      	pop	ax
 41004 0000772D 07                      	pop	es
 41005 0000772E 1F                      	pop	ds
 41006 0000772F 5B                      	pop	bx
 41007 00007730 C3                      	retn
 41008                                  
 41009                                  ;-------------------------------------------------------------------------
 41010                                  ;
 41011                                  ; 	Procedure Name	: chk_common_str
 41012                                  ;
 41013                                  ;	Input		: DS = DOSCODE
 41014                                  ;			; ES:DI points to string in packed file
 41015                                  ;
 41016                                  ;	Output		; Z if match else NZ
 41017                                  ;
 41018                                  ;-------------------------------------------------------------------------
 41019                                  
 41020                                  	; 23/05/2019 - Retro DOS v4.0
 41021                                  chk_common_str:
 41022 00007731 BE[2B76]                	mov	si,scan_com
 41023                                  					; ds:si -> scan string 
 41024                                  	;mov	cx,32
 41025 00007734 B92000                  	mov	cx,size_scan_com
 41026                                  
 41027 00007737 F3A6                    	repe	cmpsb	       
 41028                                  
 41029                                  					; M046 - start
 41030                                  	; a fourth possible version of these exepacked programs have a 
 41031                                  	; 056h instead of 06Bh. See scan_com above
 41032                                  	;
 41033                                  	; 	db  75h, 6Bh		;jne CorruptExe		
 41034                                  	;
 41035                                  	; If the mismatch at this point is due to a 56h instead of 6Bh 
 41036                                  	; we shall try to match the rest of the string
 41037                                  	;
 41038                                  
 41039 00007739 7409                    	jz	short ccs_done
 41040 0000773B 26807DFF56              	cmp	byte [es:di-1],56h
 41041 00007740 7502                    	jnz	short ccs_done
 41042                                  
 41043 00007742 F3A6                    	repe	cmpsb	    
 41044                                  ccs_done:				; M046 - end
 41045 00007744 C3                      	retn
 41046                                  
 41047                                  ;-------------------------------------------------------------------------
 41048                                  ;
 41049                                  ;	Procedure Name	: chk_patchsum
 41050                                  ;
 41051                                  ;	Input		: DS:SI -> string we're looking for
 41052                                  ;			: ES:DI -> offset in packed file
 41053                                  ;			: CX 	= scan length
 41054                                  ;			: BX	= length of check sum
 41055                                  ;			: AX 	= value of check sum
 41056                                  ;
 41057                                  ;	Output		: if patch & check sum compare
 41058                                  ;				NC
 41059                                  ;			  else
 41060                                  ;				CY
 41061                                  ;
 41062                                  ;	Uses		: AX, BX, CX, SI
 41063                                  ;
 41064                                  ;-------------------------------------------------------------------------
 41065                                  
 41066                                  	; 23/05/2019 - Retro DOS v4.0
 41067                                  chk_patchsum:
 41068 00007745 57                      	push	di
 41069                                  
 41070 00007746 F3A6                    	repe	cmpsb			   
 41071                                  
 41072 00007748 751A                    	jnz	short cp_fail		; Q: does the patch match
 41073                                  					; N: exit
 41074                                  					; Y:	
 41075                                  
 41076                                  		; we do a check sum starting from the location of the 
 41077                                  		; exepack signature 'RB' up to 11c/2 bytes, the end of the
 41078                                  		; unpacking code.
 41079                                  
 41080 0000774A 368B3E[8700]            	mov	di,[ss:UNPACK_OFFSET]	; di -> start of unpack code
 41081 0000774F 89D9                    	mov	cx,bx			; cx = length of check sum
 41082                                  
 41083 00007751 89C3                    	mov	bx,ax			; save check sum passed to us in bx
 41084 00007753 31C0                    	xor	ax,ax
 41085                                  ep_chksum:
 41086 00007755 260305                  	add	ax,[es:di]
 41087 00007758 83C702                  	add	di,2
 41088 0000775B E2F8                    	loop	ep_chksum
 41089                                  
 41090 0000775D 5F                      	pop	di			; restore di
 41091                                  
 41092 0000775E 39D8                    	cmp	ax,bx		 	; Q: does the check sum match
 41093 00007760 7502                    	jne	short cp_fail		; N: exit
 41094                                  					; Y: 
 41095 00007762 F8                      	clc	
 41096 00007763 C3                      	retn
 41097                                  
 41098                                  cp_fail:
 41099 00007764 F9                      	stc
 41100 00007765 C3                      	retn
 41101                                  
 41102                                  ; 28/12/2022 - Retro DOS v4.1
 41103                                  %if 0
 41104                                  ;--------------------------------------------------------------------------- 
 41105                                  
 41106                                  
 41107                                  ; M020 : BEGIN
 41108                                  ;
 41109                                  ;---------------------------------------------------------------------------
 41110                                  ;
 41111                                  ; procedure : RationalPatch
 41112                                  ;
 41113                                  ; A routine (in Ration DOS extender) which is invoked at hardware interrupts
 41114                                  ; clobbers CX register on 286 machines. (123 release 3 uses Rational DOS
 41115                                  ; extender). This routine identifies Buggy Rational EXEs and fixes the bug.
 41116                                  ;
 41117                                  ; THE BUG is in the following code sequence:
 41118                                  ;
 41119                                  ;8b 0e 10 00	mov	cx, ds:[10h]		; delay count
 41120                                  ;90		even				; word align
 41121                                  ;e2 fe		loop	$			; wait		CLOBBERS CX
 41122                                  ;e8 xx xx	call	set_A20			; enable A20
 41123                                  ;
 41124                                  ; This patch routine replaces the mov & the loop with a far call into a
 41125                                  ; routine in DOS data segment which is in low memory (because A20 line
 41126                                  ; is off). The routine (RatBugCode) in DOS data saves & restores CX around
 41127                                  ; a mov & loop.
 41128                                  ;
 41129                                  ; Identification of Buggy Rational EXE
 41130                                  ; ====================================
 41131                                  ;
 41132                                  ; (ALL OFFSETS ARE IN THE PROGRAM SECTION - EXCLUDING THE EXE HEADER)
 41133                                  ;
 41134                                  ; OFFSET				Contains
 41135                                  ; ------				--------
 41136                                  ; 0000h			100 times Version number in binary
 41137                                  ;			bug exists in version 3.48 thru 3.83 (both inclusive)
 41138                                  ;
 41139                                  ; 000ah			the WORDS : 0000h, 0020h, 0000h, 0040h, 0001h
 41140                                  ;
 41141                                  ; 002ah			offset where version number is stored in ASCII
 41142                                  ;				e.g. '3.48A'
 41143                                  ;
 41144                                  ; 0030h			offset of copyright string. Copyright strings either
 41145                                  ;			start with "DOS/16M Copyright...." or
 41146                                  ;			"Copyright.....". The string contains
 41147                                  ;			"Rational Systems, Inc."
 41148                                  ;
 41149                                  ; 0020h			word : Paragraph offset of the buggy code segment
 41150                                  ;				from the program image
 41151                                  ; 0016h			word : size of buggy code segment
 41152                                  ;
 41153                                  ;	Buggy code is definite to start after offset 200h in its segment
 41154                                  ;
 41155                                  ;----------------------------------------------------------------------------
 41156                                  
 41157                                  ; 23/05/2019 - Retro DOS v4.0
 41158                                  ; DOSCODE:B976h (MSDOS 6.21, MSDOS.SYS)
 41159                                  
 41160                                  ; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 41161                                  ; DOSCODE:B654h (MSDOS 5.0, MSDOS.SYS)
 41162                                  
 41163                                  RScanPattern1:
 41164                                  	db	0, 0, 20h, 0, 0, 0, 40h, 0, 1, 0
 41165                                  
 41166                                  RLen1 equ $ - RScanPattern1
 41167                                  
 41168                                  RScanPattern2:
 41169                                  	db	8Bh, 0Eh, 10h, 00h, 90h, 0E2h, 0FEh, 0E8h
 41170                                  
 41171                                  RLen2 equ $ - RScanPattern2
 41172                                  
 41173                                  RScanPattern3:
 41174                                  	db	8Bh, 0Eh, 10h, 00h, 0E2h, 0FEh, 0E8h
 41175                                  
 41176                                  RLen3 equ $ - RScanPattern2
 41177                                  
 41178                                  ; DOSCODE:B98Fh (MSDOS 6.21, MSDOS.SYS)
 41179                                  ; DOSCODE:B66Dh (MSDOS 5.0, MSDOS.SYS)
 41180                                  
 41181                                  ;----------------------------------------------------------------------------
 41182                                  ;
 41183                                  ; INPUT : ES = segment where program got loaded
 41184                                  ;
 41185                                  ;----------------------------------------------------------------------------
 41186                                  
 41187                                  RationalPatch:
 41188                                  	cld
 41189                                  	push	ax
 41190                                  	push	bx
 41191                                  	push	cx
 41192                                  	push	dx
 41193                                  	push	si
 41194                                  	push	di
 41195                                  	push	es
 41196                                  	push	ds			; we use all of them
 41197                                  	mov	di,0Ah			; look for pat1 at offset 0Ah
 41198                                  	push	cs
 41199                                  	pop	ds
 41200                                  	
 41201                                  	mov	si,RScanPattern1
 41202                                  	;mov	cx,10
 41203                                  	mov	cx,RLen1
 41204                                  	rep	cmpsb			; do we have the pattern ?
 41205                                  	jne	short rpexit
 41206                                  	mov	ax,[es:0]
 41207                                  	cmp	ax,348			; is it a buggy version ?
 41208                                  	jb	short rpexit
 41209                                  	cmp	ax,383			; is it a buggy version
 41210                                  	ja	short rpexit
 41211                                  
 41212                                  	call	VerifyVersion
 41213                                  	jne	short rpexit
 41214                                  
 41215                                  	mov	cx,[es:16h]		; Length of buggy code seg
 41216                                  	sub	cx,200h			; Length we search (we start
 41217                                  					;  at offset 200h)
 41218                                  	mov	es,[es:20h]		; es=buggy code segment
 41219                                  	mov	si,RScanPattern2
 41220                                  	;mov	dx,8	
 41221                                  	mov	dx,RLen2
 41222                                  	call	ScanCodeSeq		; look for code seq with nop
 41223                                  	jz	short rpfound
 41224                                  
 41225                                  	mov	si,RScanPattern3
 41226                                  	;mov	dx,15
 41227                                  	mov	dx,RLen3
 41228                                  	call	ScanCodeSeq		; look for code seq w/o nop
 41229                                  	jnz	short rpexit
 41230                                  
 41231                                  rpfound:
 41232                                  	
 41233                                  ;	we set up a far call into DOS data
 41234                                  ;	dx has the length of the code seq we were searching for
 41235                                  
 41236                                  	mov	al,9Ah			; far call opcode
 41237                                  	stosb
 41238                                  	mov	ax,RatBugCode
 41239                                  	stosw
 41240                                  	mov	ax,ss
 41241                                  	stosw
 41242                                  	mov	cx,dx
 41243                                  	sub	cx,6			; filler (with NOPs)
 41244                                  	mov	al,90h
 41245                                  	rep	stosb
 41246                                  rpexit:
 41247                                  	pop	ds
 41248                                  	pop	es
 41249                                  	pop	di
 41250                                  	pop	si
 41251                                  	pop	dx
 41252                                  	pop	cx
 41253                                  	pop	bx
 41254                                  	pop	ax
 41255                                  	retn
 41256                                  
 41257                                  ; M020 END
 41258                                  
 41259                                  ; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 41260                                  ; (MSDOS 5.0 MSDOS.SYS compatibility)
 41261                                  
 41262                                  ; DOSCODE:B6D8h (MSDOS 5.0, MSDOS.SYS)
 41263                                  
 41264                                  ;----------------------------------------------------------------------------
 41265                                  ;
 41266                                  ; ScanCodeSeq
 41267                                  ;
 41268                                  ; Looks for a pattern pointed to by DS:SI & len DX in ES:200 to ES:200+CX-1
 41269                                  ;
 41270                                  ; returns in ES:DI the start of the pattern if Zero flag is set
 41271                                  ;
 41272                                  ;----------------------------------------------------------------------------
 41273                                  
 41274                                  ScanCodeSeq:
 41275                                  	; 17/12/2022
 41276                                  	mov	di,200h
 41277                                  ;ScanCodeSeq_di:
 41278                                  	push	cx
 41279                                  	sub	cx,dx
 41280                                  	inc	cx
 41281                                  	; 17/12/2022
 41282                                  	; 04/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 41283                                  	;mov	di,200h
 41284                                  scsagain:
 41285                                  	push	si
 41286                                  	push	di
 41287                                  	push	cx
 41288                                  	mov	cx,dx
 41289                                  	rep	cmpsb
 41290                                  	pop	cx
 41291                                  	pop	di
 41292                                  	pop	si
 41293                                  	je	short scsfound
 41294                                  	inc	di
 41295                                  	loop	scsagain
 41296                                  scsfound:
 41297                                  	pop	cx
 41298                                  vvexit:		; 18/12/2022
 41299                                  	retn
 41300                                  
 41301                                  
 41302                                  ; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 41303                                  ; (MSDOS 5.0 MSDOS.SYS compatibility)
 41304                                  
 41305                                  ; DOSCODE:B6F0h (MSDOS 5.0, MSDOS.SYS)
 41306                                  
 41307                                  ;----------------------------------------------------------------------------
 41308                                  ;
 41309                                  ; VerifyVersion
 41310                                  ;
 41311                                  ; Checks whether the binary version from ES:0 matches the ASCII version
 41312                                  ; from ES:2A.
 41313                                  ;
 41314                                  ;       Entry: AX = binary version number 
 41315                                  ;       Exit : Z flag set if version numbers match
 41316                                  ;
 41317                                  ;----------------------------------------------------------------------------
 41318                                  
 41319                                  VerifyVersion:
 41320                                  	mov	si,[es:2Ah]		; offset of version number
 41321                                  					;  in ascii
 41322                                  	mov	bl,10
 41323                                  	add	si,3			; point to last digit
 41324                                  
 41325                                  	call	VVDigit
 41326                                  	jne	short vvexit
 41327                                  	call	VVDigit
 41328                                  	jne	short vvexit
 41329                                  	cmp	byte [es:si],'.' ; 2Eh
 41330                                  	jne	short vvexit
 41331                                  	dec	si
 41332                                  	;call	VVDigit
 41333                                  	; 18/12/2022
 41334                                  	;jmp	short VVDigit
 41335                                  ;vvexit:
 41336                                  	;retn
 41337                                  VVDigit:
 41338                                  	div	bl
 41339                                  	add	ah,'0' ; 30h
 41340                                  	dec	si
 41341                                  	cmp	[es:si+1],ah
 41342                                  	mov	ah,0			; do not xor or sub we need Z
 41343                                  	retn
 41344                                  
 41345                                  ;--------------------------------------------------------------------------- 
 41346                                  %endif	; 28/12/2022
 41347                                  
 41348                                  ;---------------------------------------------------------------------------
 41349                                  ;
 41350                                  ;	M068
 41351                                  ;
 41352                                  ; 	Procedure Name	: IsCopyProt
 41353                                  ;
 41354                                  ;	Inputs		: DS:100 -> start of com file just read in
 41355                                  ;
 41356                                  ;	Outputs		: sets the A20OFF_COUNT variable to 10 if 
 41357                                  ;			  the program loaded in DS:100 uses a MICROSOFT
 41358                                  ;			  copy protect scheme that relies on the A20 line
 41359                                  ;			  being turned off for it's scheme to work.
 41360                                  ;
 41361                                  ;			  Note: The int 21 function dispatcher will turn 
 41362                                  ;				a20 off, if the A20OFF_COUNT is non-zero 
 41363                                  ;				and dec the A20OFF_COUNT before	iretting 
 41364                                  ;				to the user. 
 41365                                  ;
 41366                                  ;	Uses		: ES, DI, SI, CX
 41367                                  ;
 41368                                  ;---------------------------------------------------------------------------
 41369                                  
 41370                                  ; 23/05/2019 - Retro DOS v4.0
 41371                                  
 41372                                  CPStartOffset	EQU	0175h
 41373                                  CPID1Offset	EQU	011Bh
 41374                                  CPID2Offset	EQU	0173h
 41375                                  CPID3Offset	EQU	0146h
 41376                                  CPID4Offset	EQU	0124h
 41377                                  ID1		EQU	05343h
 41378                                  ID2		EQU	05044h
 41379                                  ID3		EQU	0F413h
 41380                                  ID4		EQU	08000h
 41381                                  
 41382                                  ; DOSCODE:B9FAh (MSDOS 6.21, MSDOS.SYS)
 41383                                  
 41384                                  ; 04/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 41385                                  ; DOSCODE:B71Ch (MSDOS 5.0, MSDOS.SYS)
 41386                                  
 41387                                  CPScanPattern:
 41388 00007766 89264801                	db	89h,26h,48h,01h		 ; mov [148],sp
 41389 0000776A 8C0E4C01                	db	8Ch,0Eh,4Ch,01h		 ; mov [14C],cs
 41390 0000776E C7064A010001            	db	0C7h,06h,4Ah,01h,00h,01h ; mov [14A],100h 
 41391 00007774 8C0E1301                	db 	8Ch,0Eh,13h,01h		 ; mov [113],cs
 41392 00007778 B82001                  	db	0B8h,20h,01h		 ; mov ax,120h
 41393 0000777B BE0001                  	db	0BEh,00h,01h		 ; mov si,100h
 41394                                  
 41395                                  CPSPlen	EQU $ - CPScanPattern
 41396                                  
 41397                                  ; DOSCODE:BA12h (MSDOS 6.21, MSDOS.SYS)
 41398                                  ; DOSCODE:B734h (MSDOS 5.0, MSDOS.SYS)
 41399                                  
 41400                                  IsCopyProt:
 41401 0000777E 813E1B014353            	cmp	word [CPID1Offset],ID1
 41402 00007784 752D                    	jne	short CP_done
 41403                                  
 41404 00007786 813E73014450            	cmp	word [CPID2Offset],ID2
 41405 0000778C 7525                    	jne	short CP_done
 41406                                  
 41407 0000778E 813E460113F4            	cmp	word [CPID3Offset],ID3
 41408 00007794 751D                    	jne	short CP_done
 41409                                  
 41410 00007796 813E24010080            	cmp	word [CPID4Offset],ID4
 41411 0000779C 7515                    	jne	short CP_done
 41412                                  
 41413 0000779E 0E                      	push	cs
 41414 0000779F 07                      	pop	es
 41415 000077A0 BF[6677]                	mov	di,CPScanPattern	; es:di -> Pattern to find
 41416                                  
 41417 000077A3 BE7501                  	mov	si,CPStartOffset	; ds:si -> possible location 
 41418                                  					; of pattern
 41419                                  
 41420 000077A6 B91800                  	mov	cx,CPSPlen ; 24		; cx = length of pattern
 41421 000077A9 F3A6                    	repe	cmpsb
 41422 000077AB 7506                    	jnz	short CP_done
 41423                                  
 41424 000077AD 36C606[8500]0A          	mov	byte [ss:A20OFF_COUNT],0Ah ; M071
 41425                                  CP_done:
 41426 000077B3 C3                      	retn
 41427                                  	
 41428                                  ;DOSCODE ENDS
 41429                                  
 41430                                  	;END
 41431                                  
 41432                                  ;----------------------------------------------------------------------------
 41433                                  
 41434                                  ;align 2 ; 05/09/2018 (Error!)
 41435                                  
 41436                                  ; 07/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 41437                                  ;align 16 ; 08/09/2018 (OK.)
 41438                                  align 2
 41439                                  
 41440                                  ; 06/08/2018 - Retro DOS v3.0
 41441                                  ;============================================================================
 41442                                  ; MSINIT.ASM
 41443                                  ;============================================================================
 41444                                  ; 22/04/2019 - Retro DOS v4.0 (MSINIT.ASM, MSDOS 6.0, 1991)
 41445                                  ;
 41446                                  ; MAIN ENTRY FOR DOS INITIALIZATION
 41447                                  ;
 41448                                  	; 15/07/2018 - Retro DOS v3.0
 41449                                  	; (MSDOS 3.3, IBMDOS.COM, 1987)
 41450                                  
 41451                                  ; temp iret instruction
 41452                                  
 41453                                  
 41454                                  ; 05/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 41455                                  ; DOSCODE:B76Ah (MSDOS 5.0, MSDOS.SYS)
 41456                                  
 41457                                  initiret: ; MSDOS 6.0
 41458                                  SYSBUF:
 41459                                  ;IRETT: ; 06/05/2019
 41460 000077B4 CF                      	iret
 41461                                  
 41462                                  ; 22/04/2019 - Retro DOS v4.0
 41463                                  
 41464                                  ; pointer to the BIOS data segment that will be available just to the
 41465                                  ; initialization code
 41466                                  
 41467 000077B5 7000                    InitBioDataSeg:	dw 70h ; KERNEL_SEGMENT = 0070h
 41468                                  
 41469                                  ; 05/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 41470                                  ; DOSCODE:B76Dh (MSDOS 5.0, MSDOS.SYS)
 41471                                  
 41472                                  ; Convert AX from a number of bytes to a number of paragraphs (round up).
 41473                                  
 41474                                  ParaRound:
 41475 000077B7 83C00F                  	add	ax, 15
 41476 000077BA D1D8                    	rcr	ax, 1
 41477 000077BC D1E8                    	shr	ax, 1
 41478 000077BE D1E8                    	shr	ax, 1
 41479 000077C0 D1E8                    	shr	ax, 1
 41480 000077C2 C3                      	retn
 41481                                  
 41482                                  ; MAIN ENTRY FOR DOS INITIALIZATION
 41483                                  
 41484                                  	; 05/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 41485                                  	; DOSCODE:B779h (MSDOS 5.0, MSDOS.SYS)
 41486                                  	
 41487                                  	; 30/05/2019
 41488                                  	; 22/04/2019 - Retro DOS v4.0
 41489                                  	; 07/07/2018 - Retro DOS v3.0
 41490                                  	; Retro DOS v2.0 - 03/03/2018
 41491                                  	; 03/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 41492                                  	; MSDOS 5.0 - MSDOS.SYS, offset 79A9h
 41493                                  DOSINIT:
 41494                                  	; MSDOS 6.21 - MSDOS.SYS, offset 7C77h
 41495                                  	;
 41496                                  	; Far call from SYSINIT
 41497                                  	; DX = Memory size in paragraphs
 41498                                  	; DS:SI = [DEVICE_LIST] (SYSINIT.S) 
 41499                                  	;	  (Retro DOS v2.0, 16/03/2018)
 41500                                  	;
 41501                                  	; ES:DI = ptr to BIOS communication block (sysinit3.s)
 41502                                  	;	  (Retro DOS v4.0, 20/04/2019)
 41503                                  
 41504 000077C3 FA                              CLI
 41505 000077C4 FC                              CLD
 41506                                  
 41507                                  	; 03/11/2022
 41508                                  	;push	dx ; 30/05/2019		; save parameters from BIOS
 41509                                  	
 41510                                  	; 17/12/2022
 41511                                  	; 05/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 41512                                  	;push	dx ; =*=		; save parameters from BIOS
 41513                                  	
 41514 000077C5 56                      	push	si
 41515 000077C6 1E                      	push	ds
 41516 000077C7 57                      	push	di			;save di (ptr to BiosComBlock)
 41517                                  
 41518 000077C8 8CC3                    	mov	bx,es			;bx:di = ptr to BiosComBlock
 41519                                  
 41520                                  ; First, move the DOS data segment to its final location in low memory
 41521                                  
 41522                                  	;;mov	ax,0BF69h ; MSDOS 6.21 MSDOS.SYS, file offset 7C7Fh
 41523                                  	;mov	ax,0BC77h ; MSDOS 5.0 MSDOS.SYS, file offset 79B1h	
 41524 000077CA B8[4E7C]                	mov	ax,MEMSTRT		; get offset of end of init code
 41525                                  
 41526                                  	;add	ax,15	; 0Fh		; round to nearest paragraph
 41527                                  	;and	ax,~15	; 0FFF0h	; boundary
 41528                                  
 41529                                  	;mov	si,ax			; si = offset of DOSDATA in current 
 41530                                  					; code segment
 41531                                  
 41532                                  	; 05/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 41533 000077CD 83C00F                  	add	ax,15			; round to nearest paragraph
 41534 000077D0 83E0F0                  	and	ax,~15			; boundary
 41535                                  
 41536 000077D3 89C6                    	mov	si,ax			; si = offset of DOSDATA in current 
 41537                                  					; code segment
 41538                                  	; 05/12/2022
 41539                                  	; 30/04/2019 - Retro DOS v4.0
 41540                                  	;xor	si,si
 41541                                  	
 41542 000077D5 8CC8                    	mov	ax,cs
 41543 000077D7 8ED8                    	mov	ds,ax			; ds = current code segment
 41544                                  					; DS:SI now points to dosdata
 41545                                  
 41546                                  	;mov	es,[cs:0BA49h] ; MSDOS 6.21 IO.SYS, offset 7C8Eh 
 41547                                  	;mov	es,[cs:InitBioDataSeg]	; First access to DosDataSg in
 41548                                  					;  BData segment. Cannot use
 41549                                  					;  getdseg macro here!!!
 41550                                  	; 17/12/2022
 41551 000077D9 8E06[B577]              	mov	es,[InitBioDataSeg]
 41552                                  	; 07/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 41553                                  	;mov	es,[cs:InitBioDataSeg]  ; ds = cs !
 41554                                  
 41555                                  	;mov	es,[es:3]
 41556 000077DD 268E060300              	mov	es,[es:DosDataSg]	; Get free location in low memory
 41557                                  
 41558 000077E2 31FF                    	xor	di,di			; ES:DI now points to RAM data
 41559                                  
 41560                                  	;mov	cx,4970  ; Offset 0BA78h in MSDOS 6.21 MSDOS.SYS)
 41561                                  	;mov	cx,4976  ; 25/05/2019
 41562                                  	; 05/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 41563                                  	;mov	cx,4962
 41564                                  	;mov	cx,MSDAT001E		; get end of dosdata = size of dosdata
 41565 000077E4 B9AA12                  	mov	cx,DOSDATASIZE ; = 4962 for MSDOS 5.0 MSDOS.SYS
 41566 000077E7 F3A4                    	rep	movsb			; move data to final location
 41567                                  	
 41568 000077E9 5F                      	pop	di			; restore ptr to BiosComBlock
 41569 000077EA 1F                      	pop	ds			; restore parms from BIOS
 41570 000077EB 5E                      	pop	si
 41571                                  	; 17/12/2022
 41572                                  	;pop	dx ; 30/05/2019	
 41573                                  	; 05/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 41574                                  	;pop	dx ; =*=		
 41575                                  
 41576 000077EC 06                      	push	es
 41577 000077ED 1E                      	push	ds
 41578 000077EE 07                      	pop	es			; es:si -> device chain
 41579 000077EF 1F                      	pop	ds			; ds points to dosdata
 41580                                  
 41581                                  ;SR;
 41582                                  ;We get a ptr to the BIOS exchange data block. This has been setup right 
 41583                                  ;now so that the EXEC call knows when SysInit is present to do the special
 41584                                  ;lie table handling for device drivers. This can be expanded later on to
 41585                                  ;establish a communication block from the BIOS to the DOS.
 41586                                  
 41587                                  	;mov	[1040h],di	; Offset 0BA87h in MSDOS 6.21 MSDOS.SYS)
 41588                                  	;mov	[1042h],bx
 41589 000077F0 893E[3F10]              	mov	[BiosDataPtr],di
 41590 000077F4 891E[4110]              	mov	[BiosDataPtr+2],bx	; save ptr to BiosComBlock
 41591                                  
 41592 000077F8 2E8C1E[0700]            	mov	[cs:DosDSeg],ds		; set pointer to dosdata in code seg
 41593                                  
 41594                                  	; Set the segment of Lowint23/24/28Addr in msctrlc.asm to dosdata
 41595                                  
 41596 000077FD 2E8C1E[8A51]            	mov	[cs:LowInt23Addr+2],ds	; set pointers in code seg
 41597 00007802 2E8C1E[8E51]            	mov	[cs:LowInt24Addr+2],ds
 41598 00007807 2E8C1E[9251]            	mov	[cs:LowInt28Addr+2],ds
 41599                                  
 41600                                  	;mov	[346h],dx	; MSDOS 6.21 DOSDATA addresses
 41601                                  	;mov	[584h],sp
 41602                                  	;mov	[586h],ss
 41603 0000780C 8916[4603]                  	mov	[ENDMEM],dx	; =*=
 41604 00007810 8926[8405]              	mov	[USER_SP],sp
 41605 00007814 8C16[8605]              	mov	[USER_SS],ss
 41606                                  
 41607 00007818 8CD8                    	mov	ax,ds		; set up ss:sp to dosdata:dskstack
 41608 0000781A 8ED0                    	mov	ss,ax
 41609                                  
 41610                                  	;mov	sp,920h		; MSDOS 6.21 DOSDATA address
 41611                                  	;mov	sp,offset dosdata:dskstack
 41612 0000781C BC[2009]                	mov	sp,DSKSTACK
 41613                                  
 41614                                  ;M023
 41615                                  ; Init patch ptrs to default values
 41616                                  
 41617                                  	;mov	word [1212h],RetExePatch
 41618                                  	;mov	word [1214h],RetExePatch
 41619                                  	;mov	word [61h],RetExePatch
 41620 0000781F C706[F811][1763]        	mov	word [FixExePatch],RetExePatch	; M023
 41621                                  	; 28/12/2022 - Retro DOS v4.1
 41622                                  	;mov	word [RationalPatchPtr],RetExePatch ; M023
 41623 00007825 C706[6100][1763]        	mov	word [ChkCopyProt],RetExePatch	; M068
 41624                                  
 41625                                  ; 05/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 41626                                  %if 0	
 41627                                  
 41628                                  ; Setup to call 386 Rational DOS Extender patch routine if running on
 41629                                  ; a 386 or later. Unlike other patches, this is not dependent on MS-DOS
 41630                                  ; running in the HMA.
 41631                                  
 41632                                  	call	WhatCPUType	; get cpu type (0 < 286,1==286,2 >= 386)
 41633                                  	cmp	al,2		;   386 or later?
 41634                                  	mov	ax,Rational386Patch
 41635                                  	jae	short di_set_patch
 41636                                  	mov	ax,RetExePatch	; < 386, don't need this patch
 41637                                  di_set_patch:
 41638                                  	mov	[Rational386PatchPtr],ax ; patch routine or RET instr.
 41639                                  
 41640                                  %endif
 41641                                  	; Set up the variable temp_dosloc to point to the dos code segment
 41642                                  
 41643 0000782B 8CC8                    	mov	ax,cs		; ax = current segment of DOS code
 41644                                  
 41645                                  	; ax now holds segment of DOS code
 41646 0000782D A3[AA0A]                	mov	[TEMP_DOSLOC],ax   ; store temp location of DOS
 41647                                  
 41648 00007830 8C06[4A00]              	mov	word [NULDEV+2],es ; nuldev -> points to device chain
 41649 00007834 8936[4800]              	mov	word [NULDEV],si
 41650                                  ;SR;
 41651                                  ; There are some locations in the Win386 instance data structures
 41652                                  ; which need to be set up with the DOS data segment. First, initialize
 41653                                  ; the segment part of the instance table pointer in the SIS.
 41654                                  
 41655                                  	;mov	[0FF2h],ds ; [Win386_Info+14+2]	
 41656 00007838 8C1E[F10F]              	mov	[Win386_Info+Win386_SIS.Instance_Data_Ptr+2],ds
 41657                                  
 41658                                  ; Now initialize the segment part of the pointer to the data in each
 41659                                  ; instance table entry.
 41660                                  
 41661 0000783C 56                      	push	si		; preserve pointer to device chain
 41662                                  	; 18/12/2022
 41663                                  	; cx = 0
 41664 0000783D B107                    	mov	cl,7
 41665                                  	;mov	cx,7		; There are 7 entries in the instance table
 41666                                  				; M019
 41667                                  	;mov	si,0FF6h ; offset (dosdata:Instance_Table+2)
 41668 0000783F BE[F50F]                	mov	si,Instance_Table+2 ; point si to segment field
 41669                                  Instance_init_loop:
 41670 00007842 8C1C                    	mov	[si],ds		; set offset in instance entry
 41671                                  	;add	si,6
 41672 00007844 83C606                  	add	si,size_of_Win386_IIS ; move on to next entry
 41673 00007847 E2F9                    	loop	Instance_init_loop
 41674                                  
 41675                                  ;Initialize the WIN386 2.xx instance table with the DOS data segment value
 41676                                  
 41677                                  	; 18/12/2022
 41678 00007849 B105                    	mov	cl,5
 41679                                  	;mov	cx,5		; There are five entries in the instance table
 41680                                  
 41681                                  	;mov	si,(offset dosdata:OldInstanceJunk) + 6
 41682                                  	;mov	si,11EDh	; point si to segment field
 41683 0000784B BE[D311]                	mov	si,OldInstanceJunk+6
 41684                                  OldInstance_init_loop:
 41685 0000784E 8C1C                    	mov	[si],ds		; set offset in instance entry
 41686 00007850 83C606                  	add	si,6		; move on to next entry
 41687 00007853 E2F9                    	loop	OldInstance_init_loop
 41688 00007855 5E                      	pop	si		; restore pointer to device chain
 41689                                  
 41690                                  ; End of WIN386 2.xx compatibility bullshit
 41691                                  
 41692                                  ; 05/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 41693                                  %if 0	
 41694                                     	; 30/04/2019
 41695                                  	;push	es
 41696                                  	;pop	ds
 41697                                  			; ds:si points to console device
 41698                                  
 41699                                  	; 24/04/2019 - Retro DOS v4.0
 41700                                  
 41701                                  	; 15/07/2018
 41702                                  	; MSDOS 3.3 (IBMDOS.COM, 1987)
 41703                                  	; (Set INT 2Ah handler address to an 'IRET')
 41704                                  
 41705                                  	; need crit vector inited to use deviocall
 41706                                  	;push	ds			; preserve segment of device chain
 41707                                  	push	es ; 30/04/2019
 41708                                  
 41709                                  %endif
 41710                                  	; 05/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 41711 00007856 06                      	push	es
 41712                                  	; 17/12/2022
 41713                                  	;pop	ds
 41714                                  	;push	ds
 41715                                  
 41716 00007857 31C0                    	xor	ax,ax
 41717 00007859 8ED8                    	mov	ds,ax			; point DS to int vector table
 41718 0000785B B8[B477]                	mov	ax,initiret
 41719                                  	;mov	[0A8h],ax  ; [2Ah*4]
 41720 0000785E A3A800                  	mov	[addr_int_ibm],ax
 41721 00007861 8CC8                    	mov	ax,cs
 41722                                  	;mov	[0AAh],ax  ; [(2Ah*4)+2] 		
 41723 00007863 A3AA00                  	mov	[addr_int_ibm+2],ax
 41724 00007866 1F                      	pop	ds			; restore segment of device chain
 41725                                  
 41726 00007867 E81F02                  	call	CHARINIT  		; initialize console driver
 41727 0000786A 56                      	push	si			; save pointer to header
 41728                                  
 41729 0000786B 16                      	push	ss			; move pointer to dos data...
 41730 0000786C 07                      	pop	es			; ...into ES
 41731                                  
 41732                                  	;initialize sft for file 0 (CON)
 41733                                  
 41734                                          ; 07/07/2018 - Retro DOS v3.0
 41735                                  	; 24/04/2019 - Retro DOS v4.0
 41736                                  	;mov	di,SFTABL+6 
 41737 0000786D BF[D200]                	MOV     DI,SFTABL+SFT.SFTable	; Point to sft 0
 41738 00007870 B80300                          MOV     AX,3
 41739 00007873 AB                              STOSW           	; Refcount
 41740 00007874 FEC8                            DEC     AL
 41741 00007876 AB                              STOSW           	; Access rd/wr, compatibility
 41742 00007877 30C0                            XOR     AL,AL
 41743 00007879 AA                              STOSB           	; attribute
 41744                                  	;mov	al,0C3h
 41745 0000787A B0C3                    	mov	al,devid_device_EOF|devid_device|ISCIN|ISCOUT
 41746 0000787C AB                      	STOSW			; flags
 41747 0000787D 89F0                            mov	ax,si
 41748 0000787F AB                              stosw			; device pointer in devptr	
 41749 00007880 8CD8                            mov	ax,ds
 41750 00007882 AB                      	stosw
 41751 00007883 31C0                    	xor	ax,ax	; 0
 41752 00007885 AB                      	stosw			; firclus
 41753 00007886 AB                      	stosw			; time
 41754 00007887 AB                      	stosw			; date
 41755 00007888 48                      	dec	ax	; -1
 41756 00007889 AB                      	stosw			; size
 41757 0000788A AB                      	stosw
 41758 0000788B 40                      	inc	ax	; 0
 41759 0000788C AB                      	stosw			; position
 41760 0000788D AB                      	stosw
 41761                                  	;add	di,7
 41762 0000788E 83C707                  	add	di,SF_ENTRY.sf_name-SF_ENTRY.sf_cluspos
 41763                                  				; point at name
 41764                                  	;add	si,10
 41765 00007891 83C60A                  	add	si,SYSDEV.NAME	; sdevname
 41766                                  				; point to name
 41767 00007894 B90400                  	mov	cx,4
 41768 00007897 F3A5                    	rep	movsw		; name
 41769 00007899 B103                    	mov	cl,3
 41770 0000789B B020                    	mov	al," "
 41771 0000789D F3AA                    	rep	stosb		; extension
 41772                                  
 41773 0000789F 5E                      	pop	si		; get back pointer to header
 41774                                  
 41775                                  				; mark device as CON I/O
 41776                                  	; 15/07/2018
 41777                                          ;OR	BYTE [SI+4],ISCIN|ISCOUT ; or byte [si+4],3
 41778 000078A0 804C0403                	OR	BYTE [SI+SYSDEV.ATT],ISCIN|ISCOUT
 41779                                  	; 12/03/2018
 41780                                  	;mov	[ss:32h],si
 41781 000078A4 368936[3200]            	MOV     [SS:BCON],SI
 41782                                  	;mov	[ss:34h],ds
 41783 000078A9 368C1E[3400]                    MOV     [SS:BCON+2],DS
 41784                                  
 41785                                  	; initialize each device until the clock device is found
 41786                                  
 41787                                  CHAR_INIT_LOOP:
 41788 000078AE C534                            LDS     SI,[SI]			; AUX device
 41789 000078B0 E8D601                  	call	CHARINIT 
 41790                                         	;15/07/2018
 41791                                  	;test	byte [SI+4],8
 41792 000078B3 F6440408                	TEST    BYTE [SI+SYSDEV.ATT],ISCLOCK
 41793 000078B7 74F5                            JZ      SHORT CHAR_INIT_LOOP
 41794                                  	; 12/03/2018
 41795                                  	;mov	[ss:2Eh],si
 41796 000078B9 368936[2E00]                    MOV     [SS:BCLOCK],SI
 41797                                  	;mov	[ss:30h],ds
 41798 000078BE 368C1E[3000]                    MOV     [SS:BCLOCK+2],DS
 41799                                          ;MOV	BP,MEMSTRT ; Retro DOS 3.0 ; ES:BP points to DPB
 41800                                  
 41801                                  	;mov	bp,4970			; bp = pointer to free mem
 41802                                  	;mov	bp,4976  ; 25/05/2019 - Retro DOS v4.0
 41803                                  	; 05/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0, MSDOS.SYS)
 41804                                  	;mov	bp,4962 ; (MSDOS 5.0 MSDOS.SYS)
 41805 000078C3 BDAA12                  	mov	bp,MSDAT001E		; es:bp points to dpb area
 41806                                  
 41807 000078C6 36892E[2600]            	mov	[ss:DPBHEAD],bp		; set offset of pointer to DPB's
 41808 000078CB 368C06[2800]            	mov	[ss:DPBHEAD+2],es	; set segment of pointer to DPB's
 41809                                  PERDRV:
 41810                                  	;lds	si,[SI+SYSDEV.NEXT] ; 15/07/2018
 41811 000078D0 C534                            LDS	SI,[SI]			; Next device
 41812 000078D2 83FEFF                          CMP	SI,-1	; 0FFFFh
 41813 000078D5 7479                    	JZ	SHORT CONTINIT
 41814                                  
 41815 000078D7 E8AF01                          call	CHARINIT
 41816                                  
 41817                                  	; Retro DOS v2.0 - 16/03/2018 (NOTE for 'CHARINIT' return):
 41818                                  	; [CALLUNIT] = Number of drives for (Disk) Block Dev Driver ([DRVMAX])
 41819                                  	;           (..When the command is 'DSK$INIT', as in 'CHARINIT')
 41820                                  	; [CALLBPB] = [DEVCALL.COUNT] = Address of the BPB (DEVCALL offset 18) 
 41821                                  	; (REF: MSDOS 3.3 MSBIO2.ASM, MSDATA.INC, MSDISK.ASM, MSBIO1.ASM)
 41822                                  	; (.. !DSK$IN' in MSBIO1.ASM)
 41823                                  	; DEVCALL.MEDIA = CALLUNIT (DEVCALL offset 13)
 41824                                  
 41825                                          ; 15/07/2018
 41826                                  	;test	word [SI+4],8000h		; DEVTYP
 41827                                          ; 17/12/2022
 41828                                  	;test	byte [SI+5],80h
 41829 000078DA F6440580                	test	byte [SI+SYSDEV.ATT+1],(DEVTYP>>8) ; 80h
 41830                                  	;TEST	word [SI+SYSDEV.ATT],DEVTYP ; 8000h
 41831 000078DE 75F0                    	JNZ     SHORT PERDRV			; Skip any other character devs
 41832                                  
 41833 000078E0 368A0E[6703]                    MOV	CL,[SS:CALLUNIT] ; 12/03/2018
 41834 000078E5 30ED                    	XOR     CH,CH
 41835                                          ; 07/07/2018
 41836                                  	;MOV	[SI+10],CL		; Number of units in name field
 41837 000078E7 884C0A                  	mov	[si+SYSDEV.NAME],cl	; sdevname        
 41838 000078EA 368A16[4600]            	MOV     DL,[SS:NUMIO]	; 15/03/2018
 41839 000078EF 30F6                    	XOR     DH,DH
 41840 000078F1 36000E[4600]            	ADD	[SS:NUMIO],CL	; 12/03/2018
 41841 000078F6 1E                      	PUSH    DS
 41842 000078F7 56                              PUSH    SI
 41843 000078F8 36C51E[6C03]            	LDS	BX,[SS:CALLBPB]	; 12/03/2018
 41844                                  
 41845                                  PERUNIT:
 41846 000078FD 8B37                            MOV     SI,[BX]                 ; DS:SI Points to BPB
 41847 000078FF 43                              INC     BX
 41848 00007900 43                              INC     BX                      ; On to next BPB
 41849                                  	; 15/12/2022
 41850                                  	; 07/07/2018
 41851                                          ;mov	[ES:BP+DPB.DRIVE],DL
 41852 00007901 26885600                	MOV     [ES:BP],DL
 41853                                  	; 05/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 41854                                  	;;mov	[ES:BP+0],DL
 41855                                  	;mov	[ES:BP+DPB.DRIVE],DL
 41856                                  
 41857                                  	;MOV	[ES:BP+1],DH
 41858 00007905 26887601                	MOV	[ES:BP+DPB.UNIT],DH
 41859 00007909 53                              PUSH    BX
 41860 0000790A 51                              PUSH    CX
 41861 0000790B 52                              PUSH    DX
 41862                                  
 41863                                          ;invoke	$SETDPB
 41864 0000790C E80A97                          CALL	_$SETDPB		; build DPB!
 41865                                  
 41866                                  	; 07/07/2018
 41867                                  	;MOV	AX,[ES:BP+2]
 41868 0000790F 268B4602                	mov	ax,[ES:BP+DPB.SECTOR_SIZE]
 41869                                          ; 12/03/2018
 41870 00007913 363B06[3600]            	CMP	AX,[SS:MAXSEC]		; Q:is this the largest sector so far
 41871 00007918 7604                    	JBE     SHORT NOTMAX		; N:
 41872 0000791A 36A3[3600]              	MOV	[SS:MAXSEC],AX		; Y: save it in maxsec
 41873                                  NOTMAX:					
 41874                                  	; set the next dpb field in the currently built bpb
 41875                                  	; and mark as never accessed
 41876                                          
 41877                                  	; 24/04/2019
 41878 0000791E 89E8                    	mov	ax,bp			; get pointer to DPB
 41879                                  	;add	ax,33
 41880 00007920 83C021                  	add	ax,DPBSIZ		; advance pointer to next DPB
 41881                                  					; set seg & offset of next DPB
 41882                                  	;mov	[es:bp+25],ax
 41883 00007923 26894619                	mov	[es:bp+DPB.NEXT_DPB],ax
 41884                                  	;mov	[es:bp+27],es
 41885 00007927 268C461B                	mov	[es:bp+DPB.NEXT_DPB+2],es
 41886                                  					; mark as never accessed
 41887                                  	;mov	byte [es:bp+24],0FFh
 41888 0000792B 26C64618FF              	mov	byte [es:bp+DPB.FIRST_ACCESS],-1
 41889                                  
 41890 00007930 5A                      	POP     DX
 41891 00007931 59                              POP     CX
 41892 00007932 5B                              POP     BX
 41893 00007933 8CD8                            MOV     AX,DS                   ; save segment of bpb array
 41894 00007935 5E                              POP     SI
 41895 00007936 1F                              POP     DS
 41896                                  					; ds:si -> device header
 41897                                  					; store it in the corresponding dpb
 41898                                  	; 07/07/2018
 41899                                          ;MOV	[ES:BP+19],SI ; 24/04/2019
 41900 00007937 26897613                	mov	[ES:BP+DPB.DRIVER_ADDR],si
 41901                                          ;MOV	[ES:BP+21],DS ; 24/04/2019
 41902 0000793B 268C5E15                	mov	[ES:BP+DPB.DRIVER_ADDR+2],ds
 41903                                  
 41904 0000793F 1E                              PUSH    DS			; save pointer to device header
 41905 00007940 56                              PUSH    SI
 41906 00007941 FEC6                            INC     DH			; inc unit #
 41907 00007943 FEC2                            INC     DL			; inc drive #
 41908 00007945 8ED8                            MOV     DS,AX			; restore segment of BPB array
 41909                                          ;add	bp,33 ; 24/04/2019
 41910 00007947 83C521                  	ADD     BP,DPBSIZ		; advance pointer to next dpb
 41911 0000794A E2B1                    	LOOP    PERUNIT			; process all units in each driver
 41912                                          
 41913 0000794C 5E                      	POP     SI			; restore pointer to device header
 41914 0000794D 1F                              POP     DS
 41915 0000794E EB80                    	JMP	PERDRV			; process all drivers in chain
 41916                                  
 41917                                  CONTINIT:
 41918                                  	; 24/04/2019
 41919                                  	;sub	bp,33			; set link in last DPB to -1
 41920 00007950 83ED21                  	sub	bp,DPBSIZ		; back up to last dpb
 41921                                  					; set last link offset & segment
 41922                                  	;mov	word [bp+25],0FFFFh
 41923 00007953 C74619FFFF              	mov	word [bp+DPB.NEXT_DPB],-1
 41924                                  	;mov	word [bp+27],0FFFFh
 41925 00007958 C7461BFFFF              	mov	word [bp+DPB.NEXT_DPB+2],-1
 41926                                  	;add	bp,33
 41927 0000795D 83C521                  	add	BP,DPBSIZ		; advance to free memory again
 41928                                  					; the DPB chain is done.  
 41929 00007960 16                      	push	ss
 41930 00007961 1F                      	pop	ds
 41931                                  
 41932 00007962 89E8                    	mov	ax,bp
 41933 00007964 E850FE                  	call	ParaRound		; round up to segment
 41934                                  
 41935 00007967 8CDA                    	mov	dx,ds			; dx = dosdata segment
 41936 00007969 01C2                    	add	dx,ax			; dx = ds+ax first free segment
 41937                                  
 41938 0000796B BB0F00                  	mov	bx,0Fh
 41939                                  	
 41940                                  	; 24/05/2019
 41941                                  	;mov	cx,[ENDMEM]
 41942                                  	; 05/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 41943                                  	; 17/12/2022
 41944                                  	;mov	cx,[ENDMEM] 
 41945                                  					; set seg inpacketto dosdata					
 41946 0000796E 8C1E[A203]              	mov	[DSKCHRET+3],ds ; mov [DOSSEG_INIT],ds 
 41947                                  
 41948                                  ; Patch in the segments of the interrupt vectors with current code segment.
 41949                                  ; Also patch in the segment of the pointers in the dosdata area.
 41950                                  ;
 41951                                  ; Note: Formerly, temp_dosloc was initialized to -1 until after these
 41952                                  ; calls were done. The procedure patch_misc_segments is called multiple
 41953                                  ; times, and relies on temp_dosloc being initialized to -1 as a flag
 41954                                  ; for the first invocation. Thus, we must set it to -1 for this call.
 41955                                  
 41956 00007972 52                      	push	dx			; preserve first free segment
 41957                                  
 41958 00007973 A1[AA0A]                	mov	ax,[TEMP_DOSLOC]	; ax = segment to patch in 
 41959 00007976 8EC0                    	mov	es,ax			; es = segment of DOS
 41960 00007978 C706[AA0A]FFFF          	mov	word [TEMP_DOSLOC],-1	; -1 means first call to patch_misc_segments
 41961                                  
 41962 0000797E E8B301                  	call	patch_vec_segments	; uses AX as doscode segment
 41963 00007981 E8E801                  	call	patch_misc_segments	; patch in segments for sharer and 
 41964                                  					; other tables with seg in ES.
 41965                                  	; 17/12/2022
 41966                                  	; cx = 0
 41967 00007984 8C06[AA0A]              	mov	[TEMP_DOSLOC],es	; put back segment of dos code
 41968                                  
 41969 00007988 5A                      	pop	dx			; restore first free segment
 41970                                  
 41971                                  ; We shall now proceed to set the offsets of the interrupt vectors handled
 41972                                  ; by DOS to their appropriate values in DOSCODE. In case the DOS loads in
 41973                                  ; HIMEM the offsets also will be patched to their appropriate values in the
 41974                                  ; low_mem_stub by seg_reinit.
 41975                                  
 41976                                  	;xor	ax,ax ; 0
 41977                                  	;mov	ds,ax
 41978                                  	;mov	es,ax
 41979                                  	; 17/12/2022
 41980                                  	; cx = 0
 41981                                  	;xor	cx,cx ; 0
 41982 00007989 8ED9                    	mov	ds,cx
 41983 0000798B 8EC1                    	mov	es,cx
 41984                                  
 41985                                  	; set the segment of int 24 vector that was 
 41986                                  	; left out by patch_vec_segments above.
 41987                                  
 41988                                  	; 17/12/2022
 41989                                  ; 05/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 41990                                  ;%if 0
 41991                                  	; 24/05/2019
 41992                                  	;;mov	di,90h
 41993                                  	;;mov	di,4*int_fatal_abort
 41994                                  	;mov	di,addr_int_fatal_abort
 41995 0000798D BF9200                  	mov	di,addr_int_fatal_abort+2 ; 24/05/2019
 41996                                  
 41997 00007990 36A1[AA0A]              	mov	ax,[ss:TEMP_DOSLOC]
 41998                                  	;mov	[di+2],ax  ; int 24h segment
 41999 00007994 8905                    	mov	[di],ax ; 24/05/2019
 42000                                  
 42001                                  	;;mov	di,82h
 42002                                  	;mov	di,INTBASE+2
 42003                                  
 42004                                  ;%endif
 42005                                  	; 17/12/2022
 42006                                  	; 05/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 42007                                  	;;mov	di,90h
 42008                                  	;;mov	di,4*int_fatal_abort
 42009                                  	;mov	di,addr_int_fatal_abort
 42010                                  	;mov	ax,[ss:TEMP_DOSLOC]
 42011                                  	;mov	[di+2],ax  ; int 24h segment
 42012                                  	;;mov	di,82h
 42013                                  	;mov	di,INTBASE+2
 42014                                  
 42015                                  	; set default divide trap offset
 42016                                  
 42017                                  	;mov	word ptr ds:[0],offset doscode:divov
 42018 00007996 C7060000[6653]          	mov	word [0],DIVOV	
 42019                                  
 42020                                  	; set vectors 20-28 and 2a-3f to point to iret.
 42021                                  
 42022                                  	;mov	di,80h
 42023 0000799C BF8000                  	mov	di,INTBASE
 42024                                  	;mov	ax,offset doscode:irett
 42025 0000799F B8[E602]                	mov	ax,IRETT
 42026                                  
 42027                                  	; 17/12/2022
 42028                                  	; cx = 0
 42029 000079A2 B109                    	mov	cl,9
 42030                                  	;mov	cx,9			; set 9 offsets (skip 2 between each)
 42031                                  					;   sets offsets for ints 20h-28h
 42032                                  iset1:
 42033 000079A4 AB                      	stosw
 42034 000079A5 83C702                  	add	di,2
 42035 000079A8 E2FA                    	loop	iset1
 42036                                  
 42037 000079AA 83C704                  	add	di,4			; skip vector 29h
 42038                                  
 42039                                  ;	mov	cx,6			; set 6 offsets (skip 2 between each)
 42040                                  ;					;   sets offsets for ints 2ah-2fh
 42041                                  ;iset2:
 42042                                  ;	stosw
 42043                                  ;	add	di,2
 42044                                  ;	loop	iset2
 42045                                  
 42046                                  ; 30h & 31H is the CPM call entry point whose segment address is set up by
 42047                                  ; patch_vec_segments above. So skip it.
 42048                                  
 42049                                  ;	add	di,8			; skip vector 30h & 31h 
 42050                                  
 42051                                  	;;;
 42052                                  	; 06/05/2019 - Retro DOS v4.0
 42053                                  	;mov	cx,5			; set offsets for int 2Ah-2Eh
 42054                                  	; 17/12/2022
 42055 000079AD B105                    	mov	cl,5 ; 28/06/2019
 42056                                  	; 05/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 42057                                  	;mov	cx,6
 42058                                  iset2:
 42059 000079AF AB                      	stosw
 42060 000079B0 83C702                  	add	di,2
 42061 000079B3 E2FA                    	loop	iset2
 42062                                  
 42063                                  	; 05/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 42064                                  	; 17/12/2022
 42065 000079B5 83C70C                  	add	di,12			; skip vectors 2Fh, 30h & 31h
 42066                                  	;add	di,8
 42067                                  	;;;
 42068                                  
 42069                                  	; 17/12/2022
 42070 000079B8 B10E                    	mov	cl,14
 42071                                  	;mov	cx,14			; set 14 offsets (skip 2 between each)
 42072                                  					;   sets offsets for ints 32h-3fh
 42073                                  iset3:
 42074 000079BA AB                      	stosw
 42075 000079BB 83C702                  	add	di,2
 42076 000079BE E2FA                    	loop	iset3
 42077                                  
 42078                                  ;if installed
 42079                                  	; set the offset of int2f handler
 42080                                  	;mov	word [0BCh],INT2F
 42081 000079C0 C706BC00[1507]          	mov	word [02Fh*4],INT2F
 42082                                  	; set segment to doscode as we have to do int 2f to check for XMS
 42083 000079C6 36A1[AA0A]              	mov	ax,[ss:TEMP_DOSLOC]	; get segment of doscode
 42084                                  	;mov	[0BEh],ax
 42085 000079CA A3BE00                  	mov	[(02Fh*4)+2],ax
 42086                                  ;endif
 42087                                  	; set up entry point call at vectors 30-31h. Note the segment of the 
 42088                                  	; long jump will be patched in by seg_reinit
 42089                                  
 42090                                  	;mov	byte [C0h],0EAh
 42091 000079CD C606C000EA              	mov	byte [ENTRYPOINT],mi_long_jmp
 42092                                  	;mov	byte [C1h],CALL_ENTRY
 42093 000079D2 C706C100[E702]          	mov	word [ENTRYPOINT+1],CALL_ENTRY
 42094                                  
 42095 000079D8 C7068000[E002]          	mov	word [addr_int_abort],QUIT	; INT 20h
 42096 000079DE C7068400[0C03]          	mov	word [addr_int_command],COMMAND ; INT 21h
 42097 000079E4 C70688000001            	mov	word [addr_int_terminate],100h	; INT 22h
 42098 000079EA 89168A00                	mov	word [addr_int_terminate+2],dx	
 42099 000079EE C7069400[3F05]          	mov	word [addr_int_disk_read],ABSDRD   ; INT 25h
 42100 000079F4 C7069800[C605]          	mov	word [addr_int_disk_write],ABSDWRT ; INT 26h 
 42101 000079FA C7069C00[BA62]          	mov	word [addr_int_keep_process],STAY_RESIDENT ; INT 27h
 42102                                  
 42103 00007A00 16                      	push	ss
 42104 00007A01 1F                      	pop	ds
 42105                                  	
 42106                                  	; 24/05/2019
 42107                                  	;push	ss
 42108                                  	;pop	es
 42109                                  	; 05/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 42110                                  	; 17/12/2022
 42111                                  	;push	ss
 42112                                  	;pop	es
 42113                                  
 42114 00007A02 52                      	push	dx			; remember address of arena
 42115                                  
 42116 00007A03 42                      	inc	dx			; leave room for arena header
 42117                                  	;mov	[330h],dx
 42118 00007A04 8916[3003]              	mov     [CurrentPDB],dx		; set current pdb
 42119                                  
 42120 00007A08 31FF                    	xor	di,di			; point es:di at end of memory
 42121 00007A0A 8EC2                    	mov	es,dx			; ...where psp will be
 42122 00007A0C 31C0                    	xor	ax,ax
 42123                                  	;mov	cx,80h			; psp is 128 words
 42124                                  	; 17/12/2022
 42125 00007A0E B180                    	mov	cl,128 ; 28/06/2019
 42126                                  	; 05/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 42127                                  	;mov	cx,128
 42128                                  
 42129 00007A10 F3AB                    	rep	stosw			; zero out psp area
 42130 00007A12 A1[4603]                        mov     ax,[ENDMEM]
 42131                                  	
 42132                                  	; 17/12/2022
 42133                                  	; cx = 0
 42134 00007A15 E84E97                  	call	SETMEM         	 	; build psp at dx; ax is memory size
 42135                                  
 42136                                  	; ds, es now point to PSP
 42137                                  
 42138 00007A18 16                      	push	ss
 42139 00007A19 1F                      	pop	ds
 42140                                  
 42141                                  	;mov	di,24
 42142 00007A1A BF1800                  	mov	di,PDB.JFN_TABLE	; es:di -> pdb_jfn_table in psp
 42143 00007A1D 31C0                    	xor	ax,ax
 42144 00007A1F AB                      	stosw
 42145 00007A20 AA                      	stosb				; 0,1 and 2 are con device
 42146 00007A21 B0FF                    	mov	al,0FFh
 42147                                  	;mov	cx,FILPERPROC-3 ; 17
 42148                                  	; 17/12/2022
 42149                                  	; cx = 4
 42150 00007A23 B111                    	mov	cl,FILPERPROC-3 ; 17
 42151 00007A25 F3AA                    	rep	stosb			; rest are unused
 42152                                  
 42153 00007A27 16                      	push	ss
 42154 00007A28 07                      	pop	es
 42155                                  					; must be set to print messages
 42156 00007A29 8C1E[2C00]              	mov	[SFT_ADDR+2],ds     
 42157                                  
 42158                                  ; after this point the char device functions for con will work for
 42159                                  ; printing messages
 42160                                  
 42161                                  	; 24/04/2019 - Retro DOS v4.0
 42162                                  
 42163                                  ; 12/05/2019
 42164                                  ;
 42165                                  ;write_version_msg:
 42166                                  ;
 42167                                  ;	;if	(not ibm)
 42168                                  ;	;mov	si,offset doscode:header
 42169                                  ;	mov	si,HEADER
 42170                                  ;outmes:
 42171                                  ;	;lods	cs:byte ptr [si]
 42172                                  ;	cs
 42173                                  ;	lodsb
 42174                                  ;	cmp	al,"$"
 42175                                  ;	je	short outdone
 42176                                  ;	call	OUTT
 42177                                  ;	jmp	short outmes
 42178                                  ;outdone:
 42179                                  ;	push	ss			; out stomps on segments
 42180                                  ;	pop	ds
 42181                                  ;	push	ss
 42182                                  ;	pop	es
 42183                                  ;	;endif
 42184                                  
 42185                                  	; at this point es is dosdata
 42186                                  
 42187                                  	; Fill in the segment addresses of sysinitvar and country_cdpg 
 42188                                  	; in sysinittable (ms_data.asm)
 42189                                  
 42190                                  	;mov	si,0D28h
 42191 00007A2D BE[280D]                	mov	si,SysInitTable
 42192                                  
 42193                                  	; 17/12/2022
 42194                                  	; ds = es = ss
 42195                                  
 42196                                  	; 17/12/2022
 42197                                  ; 05/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 42198                                  ;%if 0
 42199                                  	;;mov	[es:si+6],es
 42200                                  	;mov	[es:si+SYSI_EXT.Country_Tab+2],es
 42201                                  	;;mov	[es:si+2],es
 42202                                  	;mov	[es:si+SYSI_EXT.SysInitVars+2],es
 42203                                  	
 42204 00007A30 8C4406                  	mov	[si+SYSI_EXT.Country_Tab+2],es
 42205 00007A33 8C4402                  	mov	[si+SYSI_EXT.SysInitVars+2],es
 42206                                  
 42207                                  	; buffhead -> dosdata:hashinitvar 
 42208                                  
 42209                                  	;mov	[es:BUFFHEAD+2],es	; BUGBUG - unused, remove this
 42210 00007A36 8C06[3A00]              	mov	[BUFFHEAD+2],es
 42211                                  	;mov	si,offset dosdata:hashinitvar ; and all other references
 42212                                  	;mov	si,6Dh
 42213 00007A3A BE[6D00]                	mov	si,HASHINITVAR
 42214                                  	;mov	[es:BUFFHEAD],si
 42215 00007A3D 8936[3800]              	mov	[BUFFHEAD],si
 42216                                  
 42217 00007A41 5A                              pop     dx                      ; restore address of arena
 42218                                  
 42219                                  	;mov	[032Ch+2],dx
 42220 00007A42 8916[2E03]                      mov     [DMAADD+2],dx
 42221                                  
 42222                                  	;mov	[es:arena_head],dx
 42223 00007A46 8916[2400]              	mov	[arena_head],dx
 42224                                  
 42225                                  ;%endif
 42226                                  
 42227                                  ; 17/12/2022
 42228                                  %if 0
 42229                                  	; 05/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 42230                                  	;;;
 42231                                  	;mov	[es:si+6],es
 42232                                  	mov	[es:si+SYSI_EXT.Country_Tab+2],es
 42233                                  	;mov	[es:si+2],es
 42234                                  	mov	[es:si+SYSI_EXT.SysInitVars+2],es
 42235                                  
 42236                                  	; buffhead -> dosdata:hashinitvar 
 42237                                  
 42238                                  	mov	[es:BUFFHEAD+2],es	; BUGBUG - unused, remove this
 42239                                  	;mov	si,offset dosdata:hashinitvar ; and all other references
 42240                                  	;mov	si,6Dh
 42241                                  	mov	si,HASHINITVAR
 42242                                  	mov	[es:BUFFHEAD],si
 42243                                  
 42244                                          pop     dx                      ; restore address of arena
 42245                                  
 42246                                  	;mov	[032Ch+2],dx
 42247                                          mov     [DMAADD+2],dx
 42248                                  
 42249                                  	mov	[es:arena_head],dx
 42250                                  	;;;
 42251                                  %endif
 42252                                  
 42253 00007A4A 8EDA                            mov     ds,dx
 42254                                  
 42255                                  	;mov	byte [0],'Z'
 42256 00007A4C C60600005A              	mov     byte [ARENA.SIGNATURE],arena_signature_end
 42257                                          ;mov	word [1],0
 42258 00007A51 C70601000000            	mov     word [ARENA.OWNER],arena_owner_system
 42259                                  
 42260 00007A57 36A1[4603]                      mov     ax,[ss:ENDMEM]
 42261 00007A5B 29D0                    	sub	ax,dx
 42262 00007A5D 48                              dec     ax
 42263 00007A5E A30300                          mov     [ARENA.SIZE],ax
 42264                                  
 42265                                  	; point to sft 0
 42266                                  
 42267                                  	;mov	di,offset dosdata:sftabl + sftable
 42268                                  	;mov	di,SFTABL+6
 42269 00007A61 BF[D200]                	mov	di,SFTABL+SFT.SFTable
 42270 00007A64 B80300                          mov     ax,3
 42271 00007A67 AB                              stosw           		; adjust refcount
 42272                                  
 42273                                  	; es:di is shared data area i.e., es:di -> dosdata:sysinttable
 42274                                  
 42275                                          ;mov	di,offset dosdata:sysinittable
 42276                                  	;mov	di,0D28h
 42277 00007A68 BF[280D]                	mov	di,SysInitTable	
 42278                                  
 42279 00007A6B 42                      	inc	dx			; advance dx from arena to psp
 42280 00007A6C 8EDA                    	mov	ds,dx			; point ds to psp
 42281                                  
 42282                                  					; pass the address os seg_reinit 
 42283                                  					; in dx
 42284 00007A6E BA[DC7A]                	mov	dx,seg_reinit
 42285 00007A71 B9[FB74]                	mov	cx,exepatch_start
 42286 00007A74 81E9[0000]              	sub	cx,_$STARTCODE		; cx = (doscode - exepatch) - dosinit
 42287                                  
 42288 00007A78 B8[B477]                	mov	ax,SYSBUF
 42289 00007A7B 2D[0000]                	sub	ax,_$STARTCODE		; ax = size of doscode - dosinit
 42290                                  	
 42291 00007A7E 368B26[8405]                    mov     sp,[ss:USER_SP]		; use ss override for next 2
 42292 00007A83 368E16[8605]                    mov     ss,[ss:USER_SS]
 42293                                  
 42294 00007A88 CB                              retf
 42295                                  
 42296                                  ;
 42297                                  ; END OF DOSINIT
 42298                                  ;
 42299                                  ;--------------------------------------------------------------------------
 42300                                  
 42301                                  CHARINIT:
 42302                                  	; 24/04/2019 - Retro DOS v4.0
 42303                                  	; 07/07/2018 - Retro DOS v3.0
 42304                                  	;mov	byte [ss:035Ah],26 ; 1Ah
 42305 00007A89 36C606[5A03]1A                  MOV	BYTE [SS:DEVCALL_REQLEN],DINITHL
 42306                                  	;mov	byte [ss:035Bh],0
 42307 00007A8F 36C606[5B03]00                  MOV	BYTE [SS:DEVCALL_REQUNIT],0
 42308                                  	;mov	byte [ss:035Ch],0
 42309 00007A95 36C606[5C03]00                  MOV	BYTE [SS:DEVCALL_REQFUNC],DEVINIT
 42310                                  	;mov	word [ss:035BD],0
 42311 00007A9B 36C706[5D03]0000                MOV	WORD [SS:DEVCALL_REQSTAT],0
 42312 00007AA2 06                              PUSH	ES
 42313 00007AA3 53                              PUSH	BX
 42314 00007AA4 50                              PUSH	AX
 42315 00007AA5 BB[5A03]                        MOV	BX,DEVCALL
 42316                                          ;PUSH	CS
 42317 00007AA8 16                      	PUSH	SS ; 30/04/2019
 42318 00007AA9 07                              POP	ES
 42319 00007AAA E87ACC                          CALL	DEVIOCALL2	
 42320 00007AAD 58                      	POP	AX
 42321 00007AAE 5B                              POP	BX
 42322 00007AAF 07                              POP	ES
 42323 00007AB0 C3                              RETN
 42324                                  
 42325                                  ; 25/04/2019 - Retro DOS v4.0
 42326                                  
 42327                                  ;-----------------------------------------------------------------------------
 42328                                  ;
 42329                                  ;	check_XMM: routine to check presence of XMM driver
 42330                                  ;
 42331                                  ;	Exit:   Sets up the XMM entry point in XMMcontrol in DOSDATA
 42332                                  ;
 42333                                  ;	USED:	none
 42334                                  ;
 42335                                  ;-----------------------------------------------------------------------------
 42336                                  
 42337                                  check_XMM: ; proc near
 42338                                  ;
 42339                                  ; determine whether or not an XMM driver is installed
 42340                                  ;
 42341 00007AB1 50                      	push	ax
 42342                                  	;mov	ax,(XMM_MULTIPLEX<<8)+XMM_INSTALL_CHECK
 42343 00007AB2 B80043                  	mov	ax,4300h
 42344 00007AB5 CD2F                    	int	2Fh
 42345                                  		; - Multiplex - XMS - INSTALLATION CHECK
 42346                                  		; Return: AL = 80h XMS driver installed
 42347                                  		; AL <> 80h no driver
 42348 00007AB7 3C80                    	cmp	al,80h			; Q: installed
 42349 00007AB9 751D                    	jne	short cXMM_no_driver	; N: set error, quit
 42350                                  ;
 42351                                  ; get the XMM control functions entry point, save it, we
 42352                                  ; need to call it later.
 42353                                  ;
 42354 00007ABB 53                      	push	bx
 42355 00007ABC 52                      	push	dx
 42356 00007ABD 1E                      	push	ds
 42357 00007ABE 06                      	push	es
 42358                                  	;mov	ax,(XMM_MULTIPLEX<<8)+XMM_FUNCTION_ADDR
 42359 00007ABF B81043                  	mov	ax,4310h
 42360 00007AC2 CD2F                    	int	2Fh
 42361                                  		; - Multiplex - XMS - GET DRIVER ADDRESS
 42362                                  		; Return: ES:BX -> driver entry point
 42363                                  
 42364 00007AC4 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
 42365                                  
 42366 00007AC9 891E[4911]              	mov	[XMMcontrol],bx
 42367 00007ACD 8C06[4B11]              	mov	[XMMcontrol+2],es
 42368                                  cXMMexit:
 42369 00007AD1 F8                      	clc
 42370 00007AD2 07                      	pop	es
 42371 00007AD3 1F                      	pop	ds
 42372 00007AD4 5A                      	pop	dx
 42373 00007AD5 5B                      	pop	bx
 42374 00007AD6 58                      	pop	ax
 42375 00007AD7 C3                      	retn				; done
 42376                                  ;
 42377                                  ; set carry if XMM driver not present
 42378                                  ;
 42379                                  cXMM_no_driver:
 42380 00007AD8 F9                      	stc
 42381 00007AD9 58                      	pop	ax
 42382 00007ADA C3                      	retn
 42383                                  
 42384                                  ;-----------------------------------------------------------------------------
 42385                                  ;
 42386                                  ; Procedure Name : seg_reinit
 42387                                  ;
 42388                                  ; Inputs	 : ES has final dos code location
 42389                                  ;		   AX = 0 / 1
 42390                                  ;
 42391                                  ; Outputs	 : Patch in the sharer and other tables with seg in ES
 42392                                  ;		   if AX =0
 42393                                  ;		      if first entry
 42394                                  ;			 patch segment & offset of vectors with stub
 42395                                  ;			 and stub with segment in ES
 42396                                  ;		      else
 42397                                  ;			 patch stub with segment in ES
 42398                                  ;
 42399                                  ;		   else if AX = 1
 42400                                  ;			patch segment of vectors with segment in ES	
 42401                                  ;
 42402                                  ; NOTE		 : This routine can be called at most twice!
 42403                                  ;
 42404                                  ; Regs Mod.	 : es, ax, di, cx, bx
 42405                                  ;-----------------------------------------------------------------------------
 42406                                  
 42407 00007ADB 00                      num_entry: db	0		; keeps track of the # of times this routine
 42408                                  				; has been called. (0 or 1)
 42409                                  
 42410                                  	; 04/11/2022 - Retro DOS v4.0 (ref: MSDOS 5.0)
 42411                                  	; MSDOS 5.0 MSDOS.SYS - DOSCODE:0BAB7h
 42412                                  	; 25/05/2019 - Retro DOS v4.0 (ref: MSDOS 6.21)
 42413                                  	; MSDOS 6.21 MSDOS.SYS - DOSCODE:0BDA5h
 42414                                  
 42415                                  seg_reinit:	; proc	far
 42416 00007ADC 1E                      	push	ds
 42417                                  
 42418 00007ADD 2E8E1E[0700]            	mov	ds,[cs:DosDSeg]
 42419                                  
 42420 00007AE2 E88700                  	call	patch_misc_segments	; patch in segments for sharer and 
 42421                                  					; other tables with seg in ES.
 42422                                  	; 17/12/2022
 42423                                  	; cx = 0
 42424 00007AE5 39C8                    	cmp	ax,cx ; 0
 42425                                  	;cmp	ax,0
 42426 00007AE7 753E                    	jne	short patch_vec_seg	; patch vectors with segment in es
 42427                                  
 42428                                  	; 17/12/2022
 42429 00007AE9 2E380E[DB7A]            	cmp	[cs:num_entry],cl ; 0
 42430                                  	;cmp	byte [cs:num_entry],0	; Q: is it the first call to this 
 42431 00007AEE 7508                    	jne	short second_entry	; N: just patch the stub with 
 42432                                  					;    segment in ES
 42433                                  					; Y: patch the vectors with stub 
 42434 00007AF0 8CD8                    	mov	ax,ds
 42435 00007AF2 E83F00                  	call	patch_vec_segments	; patch the segment of vectors
 42436 00007AF5 E8BE00                  	call	patch_offset		; patch the offsets of vectors 
 42437                                  					; with those in the stub.
 42438                                  	; 17/12/2022
 42439                                  	; cx = 0
 42440                                  second_entry:
 42441 00007AF8 8CC0                    	mov	ax,es			; patch the stub with segment in es
 42442                                  
 42443                                  	;mov	di,OFFSET DOSDATA:DOSINTTABLE
 42444                                  	;mov	di,1062h	; (same table addr for MSDOS 5.0 and MSDOS 6.21)
 42445 00007AFA BF[4810]                	mov	di,DOSINTTABLE
 42446                                  	; 17/12/2022
 42447                                  	; cx = 0
 42448                                  	;mov	cx,9
 42449 00007AFD B109                    	mov	cl,9
 42450 00007AFF 1E                      	push	ds			
 42451 00007B00 07                      	pop	es			; es:di -> DOSINTTABLE
 42452                                  
 42453                                  dosinttabloop:
 42454 00007B01 83C702                  	add	di,2
 42455 00007B04 AB                      	stosw
 42456 00007B05 E2FA                    	loop	dosinttabloop	
 42457                                  
 42458                                  ; For ROMDOS, this routine will only be called when the DOS wants to
 42459                                  ; use the HMA, so we don't want to check CS
 42460                                  
 42461                                  ;ifndef ROMDOS
 42462 00007B07 3D00F0                  	cmp	ax,0F000h		; Q: is the DOS running in the HMA
 42463 00007B0A 7220                    	jb	short sr_done		; N: done
 42464                                  ;endif
 42465 00007B0C E8A2FF                  	call	check_XMM		; Y: set up the XMS entry point
 42466 00007B0F 721B                    	jc	short sr_done		; failed to set up XMS do not do
 42467                                  					; A20 toggling in the stub.
 42468                                  	; 17/12/2022
 42469                                  	; cx = 0
 42470 00007B11 E82301                  	call	patch_in_nops		; enable the stub to check A20 state
 42471                                  ; M021-
 42472                                  	;mov	byte [1211h],1
 42473 00007B14 C606[F711]01            	mov	byte [DosHasHMA],1	; set flag telling DOS control of HMA 
 42474                                  				
 42475                                  					; set pointer to the routine that 
 42476                                  					; patches buggy exepacked code.
 42477                                  	;mov	[FixExePatch],offset DOSCODE:ExePatch
 42478 00007B19 C706[F811][4B76]        	mov	word [FixExePatch],ExePatch
 42479                                  					; M068: set pointer to the routine 
 42480                                  					; M068: that detects copy protected
 42481                                  					; M068: apps
 42482                                  	;mov	[ChkCopyProt],offset DOSCODE:IsCopyProt
 42483 00007B1F C706[6100][7E77]        	mov	word [ChkCopyProt],IsCopyProt
 42484                                  
 42485                                  ; 28/12/2022 - Retro DOS v4.1
 42486                                  %if 0
 42487                                  ;----------------------------------------------------------------------------
 42488                                  
 42489                                  	; MSDOS 6.21 MSDOS.SYS - DOSCODE:0BDF1h
 42490                                  
 42491                                  ;	; 04/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 42492                                  ;
 42493                                  ;; M020 - begin
 42494                                  ;
 42495                                  ;	call	WhatCPUType
 42496                                  ;	cmp	al,1
 42497                                  ;	jne	short sr_done 		; we need Rational Patch only
 42498                                  ;					;  on 286 systems
 42499                                  ;	;mov	[RationalPatchPtr],offset DOSCODE:RationalPatch
 42500                                  ;	mov	word [RationalPatchPtr],RationalPatch
 42501                                  ;
 42502                                  ;; M020 - end
 42503                                  ;
 42504                                  ;	jmp	short sr_done
 42505                                  ;
 42506                                  ;patch_vec_seg:				; patch vectors with segment in es
 42507                                  ;	mov	ax,es
 42508                                  ;	call	patch_vec_segments	; patch in DOSCODE for the segments
 42509                                  ;					; NOTE we don't have to patch the 
 42510                                  ;					; offsets as they have been already
 42511                                  ;					; set to the doscode offsets at
 42512                                  ;					; DOSINIT.
 42513                                  ;sr_done:
 42514                                  ;	mov	byte [cs:num_entry],1
 42515                                  ;	pop	ds
 42516                                  ;	retf	; ! far return !
 42517                                  
 42518                                  ;----------------------------------------------------------------------------
 42519                                  ;
 42520                                  ; Procedure Name : WhatCPUType
 42521                                  ;
 42522                                  ; Inputs	 : none
 42523                                  ;
 42524                                  ; Outputs	 : AL = 0 if CPU <  286
 42525                                  ;		      = 1 if CPU == 286
 42526                                  ;		      = 2 if CPU >= 386
 42527                                  ;
 42528                                  ; Regs. Mod.	 : AX
 42529                                  ;
 42530                                  ;----------------------------------------------------------------------------
 42531                                  
 42532                                  WhatCPUType:
 42533                                  	; 25/04/2019 - Retro DOS v4.0
 42534                                  	;get_cpu_type	; done with a MACRO which can't be generated > once
 42535                                  
 42536                                  	;CPUTYPE.INC (MSDOS 6.0, 1991)
 42537                                  
 42538                                  ; Note: this must be a macro, and not a subroutine in the BIOS since
 42539                                  ; 	it is called from both CODE and SYSINITSEG.
 42540                                  ;
 42541                                  ;------GET_CPU_TYPE-----------------------------------May, 88 by M.Williamson
 42542                                  ;  Returns: AX = 0 if 8086 or 8088
 42543                                  ;              = 1 if 80286
 42544                                  ;              = 2 if 80386
 42545                                  
 42546                                  	; 04/11/2022
 42547                                  	; MSDOS 5.0 MSDOS.SYS - DOSCODE:0BB03h
 42548                                  
 42549                                  Get_CPU_Type:	;macro
 42550                                  	pushf
 42551                                  	push	bx			; preserve bx
 42552                                  	xor	bx,bx			; init bx to zero
 42553                                  
 42554                                  	xor	ax,ax			; 0000 into AX
 42555                                  	push	ax			; put it on the stack...
 42556                                  	popf				; ...then shove it into the flags
 42557                                  	pushf				; get it back out of the flags...
 42558                                  	pop	ax			; ...and into ax
 42559                                  	and	ax,0F000h		; mask off high four bits
 42560                                  	cmp	ax,0F000h		; was it all 1's?
 42561                                  	je	short cpu_8086		; aye; it's an 8086 or 8088
 42562                                  
 42563                                  	mov	ax,0F000h		; now try to set the high four bits..
 42564                                  	push	ax
 42565                                  	popf
 42566                                  	pushf
 42567                                  	pop	ax			; ...and see what happens
 42568                                  	and	ax,0F000h		; any high bits set ?
 42569                                  	jz	short cpu_286		; nay; it's an 80286
 42570                                  
 42571                                  cpu_386:				; bx starts as zero
 42572                                  	inc	bx			; inc twice if 386
 42573                                  cpu_286:				; just inc once if 286
 42574                                  	inc	bx
 42575                                  cpu_8086:				; don't inc at all if 086
 42576                                  	mov	ax,bx			; put CPU type value in ax
 42577                                  	pop	bx			; restore original bx
 42578                                  	popf
 42579                                  	
 42580                                  	;endm
 42581                                  
 42582                                  	; 04/11/2022 (MSDOS 5.0 MSDOS.SYS)
 42583                                  	;retn
 42584                                  
 42585                                  	; 04/11/2022
 42586                                  	; MSDOS 5.0 MSDOS.SYS - DOSCODE:0BB27h
 42587                                  	cmp	al,1
 42588                                  	jne	short sr_done 		; we need Rational Patch only
 42589                                  					;  on 286 systems
 42590                                  	mov	word [RationalPatchPtr],RationalPatch
 42591                                  
 42592                                  ;----------------------------------------------------------------------------
 42593                                  %endif	; 28/12/2022
 42594                                  
 42595 00007B25 EB05                    	jmp	short sr_done
 42596                                  
 42597                                  patch_vec_seg:				; patch vectors with segment in es
 42598 00007B27 8CC0                    	mov	ax,es
 42599 00007B29 E80800                  	call	patch_vec_segments	; patch in DOSCODE for the segments
 42600                                  					; NOTE we don't have to patch the 
 42601                                  					; offsets as they have been already
 42602                                  					; set to the doscode offsets at
 42603                                  					; DOSINIT.
 42604                                  sr_done:
 42605 00007B2C 2EC606[DB7A]01          	mov	byte [cs:num_entry],1
 42606 00007B32 1F                      	pop	ds
 42607 00007B33 CB                      	retf	; ! far return !
 42608                                  
 42609                                  ;----------------------------------------------------------------------------
 42610                                  ;
 42611                                  ; Procedure Name : patch_vec_segments
 42612                                  ;
 42613                                  ; Inputs	 : ax -> has segment address to patch in
 42614                                  ;		   ds -> DOSDATA
 42615                                  ;
 42616                                  ; Outputs	 : Patches in AX as the segment for the following vectors:
 42617                                  ;			
 42618                                  ;			0,20-28,3a-3f
 42619                                  ;
 42620                                  ; Regs. Mod.	 : DI,CX,DX,AX
 42621                                  ;
 42622                                  ;----------------------------------------------------------------------------
 42623                                  
 42624                                  patch_vec_segments:
 42625                                  
 42626 00007B34 06                      	push	es
 42627                                  
 42628 00007B35 31C9                    	xor	cx,cx ; 0
 42629 00007B37 8EC1                    	mov	es,cx
 42630                                  
 42631                                  	;mov	di,82h
 42632 00007B39 BF8200                  	mov	di,INTBASE+2		; di -> segment of int 20 vector
 42633                                  
 42634 00007B3C 26A30200                	mov	[es:2],ax		; segment of default divide trap handler
 42635                                  
 42636                                  					; set vectors 20 & 21
 42637                                  	; 04/11/2022
 42638                                  	;mov	cx,2
 42639                                  	; 17/12/2022
 42640                                  	;mov	cl,2
 42641                                  ps_set1:
 42642 00007B40 AB                      	stosw	
 42643                                  	;add	di,2
 42644                                  	; 17/12/2022
 42645 00007B41 47                      	inc	di
 42646 00007B42 47                      	inc	di
 42647                                  	;loop	ps_set1
 42648                                  
 42649                                  	; 17/12/2022
 42650 00007B43 AB                      	stosw	; int 21h segment
 42651                                  	;inc	di
 42652                                  	;inc	di
 42653                                  
 42654                                  	;add	di,4			; skip int 22h vector
 42655 00007B44 83C706                  	add	di,6 ; *
 42656                                  
 42657 00007B47 AB                      	stosw				; set int 23h
 42658 00007B48 83C706                  	add	di,6			; skip int 24h
 42659                                  
 42660                                  					; set vectors 25-28 and 2a-3f 
 42661                                  	; 04/11/2022
 42662                                  	;mov	cx,4			; set 4 segments
 42663                                  	; 17/12/2022
 42664 00007B4B B104                    	mov	cl,4
 42665                                  ps_set2:
 42666 00007B4D AB                      	stosw				
 42667                                  	;add	di,2
 42668                                  	; 17/12/2022
 42669 00007B4E 47                      	inc	di
 42670 00007B4F 47                      	inc	di
 42671 00007B50 E2FB                    	loop	ps_set2
 42672                                  
 42673 00007B52 83C704                  	add	di,4			; skip int 29h vector (fast con) as it may
 42674                                  					;   already be set.
 42675                                  	; 04/11/2022
 42676                                  	;mov	cx,6			; set 6 segs (skip 2 between each)
 42677                                  	; 17/12/2022
 42678 00007B55 B106                    	mov	cl,6			;  set segs for ints 2ah-2fh
 42679                                  ps_set3:
 42680 00007B57 AB                      	stosw
 42681                                  	;add	di,2
 42682                                  	; 17/12/2022
 42683 00007B58 47                      	inc	di
 42684 00007B59 47                      	inc	di
 42685 00007B5A E2FB                    	loop	ps_set3
 42686                                  
 42687                                  ; 30h & 31H is the CPM call entry point whose segment address is set up by
 42688                                  ; below. So skip it.
 42689                                  
 42690 00007B5C 83C708                  	add	di,8			; skip vector 30h & 31h 
 42691                                  	
 42692                                  	; 04/11/2022
 42693                                  	;mov	cx,14			; set 14 segs (skip 2 between each)
 42694                                  	; 17/12/2022
 42695 00007B5F B10E                    	mov	cl,14			;   sets segs for ints 32h-3fh
 42696                                  ps_set4:
 42697 00007B61 AB                      	stosw
 42698                                  	;add	di,2
 42699                                  	; 17/12/2022
 42700 00007B62 47                      	inc	di
 42701 00007B63 47                      	inc	di
 42702 00007B64 E2FB                    	loop	ps_set4
 42703                                  
 42704                                  ; set offset of int2f
 42705                                  
 42706                                  ;if installed
 42707                                  ;	mov	word ptr es:[02fh * 4],offset doscode:int2f
 42708                                  ;endif
 42709                                  	;mov	[es:0C3h],ax
 42710 00007B66 26A3C300                	mov	[es:ENTRYPOINT+3],ax
 42711                                  	; 17/12/2022
 42712                                  	; cx = 0
 42713 00007B6A 07                      	pop	es
 42714 00007B6B C3                      	retn
 42715                                  
 42716                                  ;---------------------------------------------------------------------------
 42717                                  ;
 42718                                  ; Procedure Name : patch_misc_segments
 42719                                  ;
 42720                                  ; Inputs	 : es = segment to patch in
 42721                                  ;		   ds = dosdata
 42722                                  ;
 42723                                  ; outputs	 : patches in the sharer and other tables in the dos
 42724                                  ;		   with right dos code segment in es
 42725                                  ;
 42726                                  ; Regs Mod	 : DI,SI,CX
 42727                                  ;
 42728                                  ;---------------------------------------------------------------------------
 42729                                  
 42730                                  patch_misc_segments:
 42731                                  
 42732 00007B6C 53                      	push	bx
 42733 00007B6D 06                      	push	es
 42734 00007B6E 50                      	push	ax
 42735                                  
 42736 00007B6F 8CC0                    	mov	ax,es			; ax - > DOS segment
 42737                                  	
 42738 00007B71 1E                      	push	ds
 42739 00007B72 07                      	pop	es			; es -> DOSDATA
 42740                                  	
 42741                                  ; initialize the jump table for the sharer...
 42742                                  
 42743                                  	;mov	di,offset dosdata:jshare
 42744                                  	;mov	di,90h
 42745 00007B73 BF[9000]                	mov	di,JShare
 42746                                  	;mov	bx,[0AAAh]
 42747 00007B76 8B1E[AA0A]              	mov	bx,[TEMP_DOSLOC]	; bx = location to which the share
 42748                                  					; table was patched during the first
 42749                                  					; call to this routine
 42750 00007B7A B90F00                  	mov	cx,15
 42751                                  jumptabloop:
 42752                                  	;add	di,2			; skip offset
 42753                                  	; 17/12/2022
 42754 00007B7D 47                      	inc	di
 42755 00007B7E 47                      	inc	di
 42756 00007B7F 83FBFF                  	cmp	bx,-1 ; 0FFFFh		; Q: is this called for the 1st time
 42757 00007B82 7405                    	je	short share_patch	; Y: patch in sharer table
 42758                                  					; N: 
 42759 00007B84 263B1D                  	cmp	bx,[es:di]		; Q: has share been installed
 42760 00007B87 7501                    	jne	short no_share_patch	; Y: don't patch in sharer table
 42761                                  share_patch:
 42762 00007B89 AB                      	stosw				; drop in segment
 42763                                  no_share_patch:
 42764 00007B8A E2F1                    	loop	jumptabloop
 42765                                  					; BUGBUG patching the country info 
 42766                                  					; with dosdata can be done inline
 42767                                  					; in dosinit.
 42768                                  					; for dos 3.3 country info
 42769                                  					; table address
 42770                                  
 42771                                  	;mov	si,offset dosdata:country_cdpg
 42772                                  	;mov	si,122Ah   
 42773 00007B8C BE[0512]                	mov	si,COUNTRY_CDPG
 42774                                  					; initialize double word
 42775                                  					; pointers with dosdata in ds
 42776                                  	;mov	[si+4Fh],ds
 42777                                  	;mov	[si+54h],ds
 42778                                  	;mov	[si+59h],ds
 42779                                  	;mov	[si+5Eh],ds
 42780                                  	;mov	[si+80h],ds
 42781                                  	;mov	[si+63h],ds
 42782 00007B8F 8C5C4F                  	mov	[si+DOS_CCDPG.ccUcase_ptr+2],ds    
 42783 00007B92 8C5C54                  	mov	[si+DOS_CCDPG.ccFileUcase_ptr+2],ds 
 42784 00007B95 8C5C59                  	mov	[si+DOS_CCDPG.ccFileChar_ptr+2],ds
 42785 00007B98 8C5C5E                  	mov	[si+DOS_CCDPG.ccCollate_ptr+2],ds
 42786 00007B9B 8C9C8000                	mov	[si+DOS_CCDPG.ccMono_ptr+2],ds
 42787 00007B9F 8C5C63                  	mov	[si+DOS_CCDPG.ccDBCS_ptr+2],ds	
 42788                                  
 42789                                  					; fastopen routines are in doscode
 42790                                  					; so patch with doscode seg in ax
 42791                                  
 42792                                  	;mov	si,offset dosdata:fastopentable
 42793                                  	;mov	si,0D30h
 42794 00007BA2 BE[300D]                	mov	si,FastOpenTable
 42795                                  
 42796                                  	; 17/12/2022
 42797                                  	; bx = [TEMP_DOSLOC]
 42798 00007BA5 83FBFF                  	cmp	bx,-1
 42799                                  	;cmp	word [TEMP_DOSLOC],-1	; Q: first time 
 42800 00007BA8 7405                    	je	short fast_patch	; Y: patch segment
 42801                                  	;mov	cx,[TEMP_DOSLOC]
 42802                                  					; Q: has fastopen patched in it's
 42803                                  					;    segment
 42804                                  	; 17/12/2022
 42805 00007BAA 3B5C04                  	cmp	bx,[si+fastopen_entry.name_caching+2]
 42806                                  	;;cmp	cx,[si+4]
 42807                                  	;cmp	cx,[si+fastopen_entry.name_caching+2]
 42808 00007BAD 7503                    	jne	short no_fast_patch	; Y: don't patch in doscode seg
 42809                                  
 42810                                  fast_patch:
 42811                                  	;mov	[si+4],ax
 42812 00007BAF 894404                  	mov	[si+fastopen_entry.name_caching+2],ax
 42813                                  no_fast_patch:
 42814                                  	; 17/12/2022
 42815                                  	; cx = 0
 42816 00007BB2 58                      	pop	ax
 42817 00007BB3 07                      	pop	es
 42818 00007BB4 5B                      	pop	bx
 42819                                  
 42820 00007BB5 C3                      	retn
 42821                                  
 42822                                  ;--------------------------------------------------------------------------
 42823                                  ;
 42824                                  ; Procedure Name : patch_offset
 42825                                  ; 
 42826                                  ; Inputs	 : NONE
 42827                                  ;
 42828                                  ; Outputs	 : Patches in the offsets in the low_mem_stub for vectors
 42829                                  ;		   0,20-28,3a-3f, and 30,31
 42830                                  ;
 42831                                  ;
 42832                                  ; Regs. Mod	 : AX,DI,CX
 42833                                  ;--------------------------------------------------------------------------
 42834                                  
 42835                                  patch_offset:
 42836 00007BB6 06                      	push	es		; preserve es
 42837                                  
 42838 00007BB7 31C0                    	xor	ax,ax
 42839 00007BB9 8EC0                    	mov	es,ax
 42840                                  				; set default divide trap address
 42841                                  	;mov	word ptr es:[0],offset dosdata:ldivov	
 42842                                  	;mov	word [es:0],108Ah
 42843 00007BBB 26C7060000[7010]        	mov	word [es:0],ldivov
 42844                                  
 42845                                  	;mov	di,80h
 42846 00007BC2 BF8000                  	mov	di,INTBASE	; di-> offset of int 20 handler
 42847                                  	;mov	ax,offset dosdata:lirett
 42848                                  	;mov	ax,10DAh
 42849 00007BC5 B8[C010]                	mov	ax,lirett
 42850                                  				; set vectors 20 & 21 to point to iret.
 42851                                  	; 17/12/2022
 42852                                  	; cx = 0
 42853                                  
 42854                                  	;mov	cx,2		; set 2 offsets (skip 2 between each)
 42855                                  po_iset1:
 42856 00007BC8 AB                      	stosw
 42857                                  	;add	di,2 ; *
 42858                                  	;loop	po_iset1
 42859                                  	; 17/12/2022
 42860 00007BC9 47                      	inc	di
 42861 00007BCA 47                      	inc	di
 42862 00007BCB AB                      	stosw	; int 21h vector
 42863                                  
 42864                                  	;add	di,4		; skip vector 22h
 42865                                  	; 17/12/2022
 42866 00007BCC 83C706                  	add	di,6 ; *	
 42867                                  
 42868 00007BCF AB                      	stosw			; set offset of 23h
 42869 00007BD0 83C706                  	add	di,6		; skip 24h
 42870                                  
 42871                                  				; set vectors 25-28 and 2a-3f to iret.
 42872                                  	; 04/11/2022
 42873                                  	;mov	cx,4		; set 4 offsets (skip 2 between each)
 42874                                  	; 17/12/2022
 42875 00007BD3 B104                    	mov	cl,4		;   sets offsets for ints 25h-28h
 42876                                  po_iset2:
 42877 00007BD5 AB                      	stosw
 42878                                  	;add	di,2
 42879                                  	; 17/12/2022
 42880 00007BD6 47                      	inc	di
 42881 00007BD7 47                      	inc	di
 42882 00007BD8 E2FB                    	loop	po_iset2
 42883                                  
 42884 00007BDA 83C704                  	add	di,4		; skip vector 29h
 42885                                  
 42886                                  	; 04/11/2022
 42887                                  	;mov	cx,6		; set 6 offsets (skip 2 between each)
 42888                                  	; 17/12/2022
 42889                                  	;mov	cl,6		;   sets offsets for ints 2ah-2fh
 42890 00007BDD B105                    	mov	cl,5		; sets offsets for ints 2Ah-2Eh
 42891                                  po_iset3:
 42892 00007BDF AB                      	stosw
 42893                                  	;add	di,2
 42894                                  	; 17/12/2022
 42895 00007BE0 47                      	inc	di
 42896 00007BE1 47                      	inc	di
 42897 00007BE2 E2FB                    	loop	po_iset3
 42898                                  
 42899                                  ; 30h & 31H is the CPM call entry point whose offset address is set up by
 42900                                  ; below. So skip it.
 42901                                  
 42902                                  	;add	di,8		; skip vector 30h & 31h 
 42903                                  	; 17/12/2022
 42904 00007BE4 83C70C                  	add	di,12		 ;skip vector 2Fh, 30h & 31h
 42905                                  
 42906                                  	; 04/11/2022
 42907                                  	;mov	cx,14		; set 14 offsets (skip 2 between each)
 42908                                  				;   sets offsets for ints 32h-3fh
 42909                                  	; 17/12/2022
 42910 00007BE7 B10E                    	mov	cl,14 ; 26/06/2019
 42911                                  po_iset4:
 42912 00007BE9 AB                      	stosw
 42913                                  	;add	di,2
 42914                                  	; 17/12/2022
 42915 00007BEA 47                      	inc	di
 42916 00007BEB 47                      	inc	di
 42917 00007BEC E2FB                    	loop	po_iset4
 42918                                  
 42919                                  ;if installed
 42920                                  	;mov	word ptr es:[02fh * 4],offset dosdata:lint2f
 42921                                  	;mov	word [es:0BCh],10C6h ; (MSDOS 5.0 & 6.21)
 42922 00007BEE 26C706BC00[AC10]        	mov	word [es:(2Fh*4)],lint2f
 42923                                  ;endif
 42924                                  
 42925                                  ; set up entry point call at vectors 30-31h
 42926                                  	;mov	byte [es:0C0h],0EAh
 42927 00007BF5 26C606C000EA            	mov	byte [es:ENTRYPOINT],mi_long_jmp
 42928                                  	;mov	word [es:0C1h],10D0h
 42929 00007BFB 26C706C100[B610]        	mov	word [es:ENTRYPOINT+1],lcall_entry
 42930                                  
 42931                                  	;mov	word [es:80h],1094h
 42932 00007C02 26C7068000[7A10]        	mov	word [es:addr_int_abort],lquit
 42933                                  	;mov	word [es:84h],109Eh
 42934 00007C09 26C7068400[8410]        	mov	word [es:addr_int_command],lcommand
 42935                                  	;mov	word [es:94h],10A8h
 42936 00007C10 26C7069400[8E10]        	mov	word [es:addr_int_disk_read],labsdrd   
 42937                                  	;mov	word [es:98h],10B2h
 42938 00007C17 26C7069800[9810]        	mov	word [es:addr_int_disk_write],labsdwrt 
 42939                                  	;mov	word [es:9Ch],10BCh
 42940 00007C1E 26C7069C00[A210]        	mov	word [es:addr_int_keep_process],lstay_resident
 42941                                  
 42942                                  	; 17/12/2022
 42943                                  	; CX = 0
 42944 00007C25 07                      	pop	es		; restore es
 42945 00007C26 C3                      	retn
 42946                                  
 42947                                  ;--------------------------------------------------------------------------
 42948                                  ;
 42949                                  ; 	Procedure Name	:	patch_in_nops
 42950                                  ;
 42951                                  ; 	Entry		: 	ES -> DOSDATA
 42952                                  ;
 42953                                  ;	Regs Mod	: 	cx, di
 42954                                  ;
 42955                                  ;	Description:
 42956                                  ;		This routine patches in 2 nops at the offsets specified in 
 42957                                  ;	patch_table. This basically enables the low mem stub to start 
 42958                                  ;	making XMS calls.
 42959                                  ;
 42960                                  ;--------------------------------------------------------------------------
 42961                                  
 42962                                  	; 04/11/2022
 42963                                  	; (MSDOS 5.0 MSDOS.SYS)
 42964                                  	; DOSCODE:0BC50h
 42965                                  
 42966                                  patch_table:	; label	byte
 42967                                  	;dw	offset dosdata:i0patch
 42968                                  	;dw	offset dosdata:i20patch
 42969                                  	;dw	offset dosdata:i21patch
 42970                                  	;dw	offset dosdata:i25patch
 42971                                  	;dw	offset dosdata:i26patch
 42972                                  	;dw	offset dosdata:i27patch
 42973                                  	;dw	offset dosdata:i2fpatch
 42974                                  	;dw	offset dosdata:cpmpatch
 42975 00007C27 [7010]                  	dw	i0patch
 42976 00007C29 [7A10]                  	dw	i20patch
 42977 00007C2B [8410]                  	dw	i21patch
 42978 00007C2D [8E10]                  	dw	i25patch
 42979 00007C2F [9810]                  	dw	i26patch
 42980 00007C31 [A210]                  	dw	i27patch
 42981 00007C33 [AC10]                  	dw	i2fpatch
 42982 00007C35 [B610]                  	dw	cpmpatch
 42983                                  
 42984                                  patch_table_size equ ($-patch_table)/2
 42985                                  
 42986                                  patch_in_nops:
 42987 00007C37 50                      	push	ax
 42988 00007C38 56                      	push	si
 42989 00007C39 BE[277C]                	mov	si,patch_table
 42990 00007C3C B89090                  	mov	ax,9090h ; nop, nop
 42991                                  	; 17/12/2022
 42992                                  	; cx = 0
 42993                                  	;mov	cx,8
 42994                                  	;mov	cx,patch_table_size ; 8
 42995 00007C3F B108                    	mov	cl,patch_table_size ; 8
 42996                                  pin_loop:
 42997 00007C41 2E8B3C                  	mov	di,[cs:si]
 42998 00007C44 AB                      	stosw
 42999                                  	;add	si,2
 43000                                  	; 17/12/2022
 43001 00007C45 46                      	inc	si
 43002 00007C46 46                      	inc	si
 43003 00007C47 E2F8                    	loop	pin_loop
 43004 00007C49 5E                      	pop	si
 43005 00007C4A 58                      	pop	ax
 43006 00007C4B C3                      	retn
 43007                                  
 43008                                  ; 05/12/2022 (MSDOS 5.0 MSDOS.SYS compatibility)
 43009                                  ; ---------------------------------------------------------------------------
 43010                                  ; MSDOS 5.0 - MSDOS.SYS offset BC77h, file offset 7EA7h
 43011                                  ; ---------------------------------------------------------------------------
 43012                                  
 43013                                  	; 05/12/2022 - temporary ; (paragrapgh alinment)
 43014                                  DOSCODE_END:
 43015                                  	;times	9 db 0	; db 9 dup(0)
 43016                                  	; 18/12/2022
 43017 00007C4C 0000                    	dw	0  ;	times 2 db 0
 43018                                  
 43019                                  ;align 16
 43020                                  	; DOSCODE:BC80h	(MSDOS 5.0 MSDOS.SYS file offset 7EB0h)
 43021                                  	; MSDOS.SYS file offset: 32432 (start of DOSDATA)
 43022                                  
 43023                                  ; ---------------------------------------------------------------------------
 43024                                  
 43025                                  
 43026                                  ;memstrt label word
 43027                                  ; ---------------------------------------------------------------------------
 43028                                  ; MSDOS 6.21 - MSDOS.SYS offset BF69h, file offset 8189h
 43029                                  ; ---------------------------------------------------------------------------
 43030                                  
 43031                                  MEMSTRT: ; 25/04/2019 - Retro DOS v4.0
 43032                                  
 43033                                  ; if not ROMDOS, then we close the dos code segment, otherwise we close
 43034                                  ; the dos initialization segment
 43035                                  
 43036                                  ;ifndef ROMDOS
 43037                                  
 43038                                  ;doscode ends
 43039                                  
 43040                                  ;else
 43041                                  
 43042                                  ;;dosinitseg ends
 43043                                  
 43044                                  ;endif ; ROMDOS
 43045                                  
 43046                                  ;============================================================================
 43047                                  
 43048                                  ; DPUBLIC <ParaRound, cXMM_no_driver, cXMMexit, char_init_loop, charinit>
 43049                                  ; DPUBLIC <check_XMM, continit, dosinttabloop, endlist>
 43050                                  ; DPUBLIC <initiret, iset1, iset2, jumptabloop, nxtentry>
 43051                                  ; DPUBLIC <notmax,  patch_offset, perdrv>
 43052                                  ; DPUBLIC <perunit, po_iset1, po_iset2, po_iset3>
 43053                                  ; DPUBLIC <ps_set1, ps_set2, ps_set3, seg_reinit>
 43054                                  ; DPUBLIC <sr_done, version_fake_table, xxx>
 43055                                  
 43056                                  ;; burasý doscode sonu
 43057                                  
 43058                                  ;============================================================================
 43059                                  ; DOSDATA
 43060                                  ;============================================================================
 43061                                  ; 29/04/2019 - Retro DOS 4.0
 43062                                  
 43063                                  ;[BITS 16]
 43064                                  
 43065                                  ;[ORG 0]
 43066                                  
 43067                                  ; 25/04/2019 - Retro DOS v4.0
 43068                                  
 43069                                  ;============================================================================
 43070                                  ; DOSDATA - MSDOS 6.21 - MSDOS.SYS Offset 0BF70h, file offset 8190h
 43071                                  ;============================================================================
 43072                                  
 43073                                  ;align 16
 43074                                  	; DOSDATA (MSDOS.SYS kernel DATA) segment starts here...
 43075                                  	; (4970 bytes for MSDOS 6.21)
 43076                                  	; (4976 bytes for Retro DOS v4.0, 25/05/2019 modification.)
 43077                                  
 43078                                  ;============================================================================
 43079                                  ; MSCONST.ASM (MSDOS 6.0, 1991)
 43080                                  ;============================================================================
 43081                                  ; 03/11/2022 - Retro DOS 4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 43082                                  ; 25/04/2019 - Retro DOS 4.0 (MSDOS 6.21)
 43083                                  ; 16/07/2018 - Retro DOS 3.0	
 43084                                  
 43085                                  ;Break <Initialized data and data used at DOS initialization>
 43086                                  ;----------------------------------------------------------------------------
 43087                                  
 43088                                  ; We need to identify the parts of the data area that are relevant to tasks
 43089                                  ; and those that are relevant to the system as a whole. Under 3.0, the system
 43090                                  ; data will be gathered with the system code. The process data under 2.x will
 43091                                  ; be available for swapping and under 3.0 it will be allocated per-process.
 43092                                  ;
 43093                                  ; The data that is system data will be identified by [SYSTEM] in the comments
 43094                                  ; describing that data item.
 43095                                  
 43096                                  ;DOSDATA SEGMENT
 43097                                  
 43098                                  ; 04/11/2022
 43099                                  ;[ORG 0]
 43100                                  
 43101                                  ; ----------------------------------------------------------------------------
 43102                                  ; 04/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 43103                                  ; ----------------------------------------------------------------------------
 43104                                  ; DOSDATA segment start offset from beginning of MSDOS.SYS file: 32432 (7EB0h)
 43105                                  ; (3DD0h+7EB0h = 0BC80h) - for MSDOS 5.0 kernel file -
 43106                                  ; ----------------------------------------------------------------------------
 43107                                  
 43108                                  ; 04/11/2022
 43109                                  
 43110                                  ;DOSDATA:0000h
 43111                                  
 43112 00007C4E 90<rep 2h>              align 16
 43113                                  
 43114                                  ; ----------------------------------------------------------------------------
 43115                                  ; 06/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 43116                                  ; ----------------------------------------------------------------------------
 43117                                  
 43118                                  segment .data  vstart=0 ; 06/12/2022
 43119                                  								
 43120                                  ; ============================================================================
 43121                                  
 43122                                  ; 06/12/2022
 43123                                  ;DOSDATASTART equ $
 43124                                  DOSDATASTART:
 43125                                  
 43126                                  
 43127                                  ;hkn; add 4 bytes to get correct offsets since jmp has been removed in START
 43128                                  
 43129                                  	;; 03/11/2022
 43130                                  	;jmp	DOSINIT		; MSDOS 5.0 - MSDOS.SYS (DOSDATA:0000h)
 43131                                  
 43132                                  	; 04/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 43133                                  	;db	4 dup (?)	
 43134 00000000 00<rep 4h>              	times	4 db 0
 43135                                  
 43136                                  	; 29/04/2019 - Retro DOS v4.0 modification
 43137                                  	;dw 	_$STARTCODE ; DOSCODE offset and/or size of DOSDATA
 43138                                  	;dw	0
 43139                                  
 43140                                  	;EVEN
 43141                                  
 43142                                  ;align 2
 43143                                  
 43144                                  ; WANGO!!! The following word is used by SHARE and REDIR to determin data
 43145                                  ; area compatability. This location must be incremented EACH TIME the data
 43146                                  ; area here gets mucked with.
 43147                                  ;
 43148                                  ; Also, do NOT change this position relative to DOSDATA:0.
 43149                                  
 43150                                  MSCT001S:	; LABEL BYTE
 43151                                  	
 43152                                  DataVersion:	
 43153 00000004 0100                    	dw	1	;AC000; [SYSTEM] version number for DOS DATA
 43154                                  
 43155                                  ;hkn; add 8 bytes to get correct offsets since BugTyp, BugLev and "BUG " has 
 43156                                  ;hkn; been removed to DOSCODE above
 43157                                  
 43158                                  ;M044
 43159                                  ; First part of save area for saving last para of Window memory
 43160                                  
 43161                                  WinoldPatch1:	; db 8 dup (?)	;M044
 43162 00000006 00<rep 8h>              	times	8 db 0
 43163                                  
 43164                                  	; MSDOS 6.21 DOSDATA:000Eh
 43165                                  MYNUM:			; Offset 000Eh
 43166 0000000E 0000                    	dw	0	; [SYSTEM] A number that goes with MYNAME
 43167                                  FCBLRU: 		; [SYSTEM] LRU count for FCB cache
 43168 00000010 0000                    	dw	0
 43169                                  OpenLRU:
 43170 00000012 0000                    	dw	0	; [SYSTEM] LRU count for FCB cache opens
 43171                                  OEM_HANDLER: 		
 43172 00000014 FFFFFFFF                	dd	-1	; [SYSTEM] Pointer to OEM handler code	
 43173                                  
 43174                                  ;	BUGBUG - who uses LeaveAddr?  What if we want to rework the
 43175                                  ;;			way that we leave DOS???? - jgl
 43176                                  
 43177                                  LeaveAddr:
 43178 00000018 [1104]                  	dw	LeaveDOS  ; <<OFFSET DOSCODE:LeaveDOS>> ; [SYSTEM]
 43179                                  RetryCount:		
 43180 0000001A 0300                    	dw	3	; [SYSTEM] Share retries
 43181                                  RetryLoop:
 43182 0000001C 0100                    	dw	1	; [SYSTEM] Share retries
 43183                                  LastBuffer:
 43184 0000001E FFFFFFFF                	dd	-1	; [SYSTEM] Buffer queue recency pointer
 43185                                  CONTPOS:
 43186 00000022 0000                    	dw	0	; [SYSTEM] location in buffer of next read
 43187                                  arena_head:
 43188 00000024 0000                    	dw	0	; [SYSTEM] Segment # of first arena in memory
 43189                                  
 43190                                  ;; 16/07/2018
 43191                                  ;;***************************************************************************
 43192                                  ;; NOTE: INT 21H AH=52H !  (http://stanislavs.org/helppc/int_21-52.html)
 43193                                  ;;***************************************************************************
 43194                                  ;; INT 21,52 - Get Pointer to DOS "INVARS" (Undocumented)
 43195                                  ;;
 43196                                  ;;	AH = 52h
 43197                                  ;;
 43198                                  ;;	on return:
 43199                                  ;;	ES:BX = pointer to DOS "invars", a table of pointers used by DOS.
 43200                                  ;;		Known "invars" fields follow (varies with DOS version):
 43201                                  ;;
 43202                                  ;;	Offset Size		 Description
 43203                                  ;;
 43204                                  ;;	 -12   word   sharing retry count (DOS 3.1-3.3)
 43205                                  ;;	 -10   word   sharing retry delay  (DOS 3.1-3.3)
 43206                                  ;;	  -8   dword  pointer to current disk buffer (DOS 3.x)
 43207                                  ;;	  -4   word   pointer in DOS code segment of unread CON input;
 43208                                  ;;		      0 indicates no unread input (DOS 3.x)
 43209                                  ;;	  -2   word   segment of first Memory Control Block (MCB)
 43210                                  ;;	  00   dword  pointer to first DRIVE PARAMETER TABLE (A:) in chain
 43211                                  ;;	  04   dword  pointer to DOS System File Table (SFT)
 43212                                  ;;	  08   dword  pointer to $CLOCK device driver
 43213                                  ;;	  0C   dword  pointer to CON device driver
 43214                                  ;;	  10   byte   number of logical drives in system
 43215                                  ;;	  11   word   maximum bytes/block of any block device
 43216                                  ;;	  13   dword  pointer to DOS cache buffer header
 43217                                  ;;	  17 18bytes  NUL device header, first 4 bytes of device header
 43218                                  ;;		      point to the next device in device chain
 43219                                  ;;
 43220                                  ;;***************************************************************************
 43221                                  
 43222                                  ; The following block of data is used by SYSINIT. 
 43223                                  ; Do not change the order or size of this block
 43224                                  
 43225                                  ;SYSINITVAR:
 43226                                  ;----------------------------------------------------------------------------
 43227                                  SYSINITVARS:
 43228                                  DPBHEAD:
 43229 00000026 00000000                	dd	0	; [SYSTEM] Pointer to head of DPB-FAT list
 43230                                  SFT_ADDR:
 43231 0000002A [CC000000]              	dd	SFTABL	; [SYSTEM] Pointer to first SFT table
 43232                                  BCLOCK:
 43233 0000002E 00000000                	dd	0	; [SYSTEM] The CLOCK device
 43234                                  BCON:
 43235 00000032 00000000                	dd	0	; [SYSTEM] Console device entry points
 43236                                  MAXSEC:
 43237 00000036 8000                    	dw	128	; [SYSTEM] Maximum allowed sector size
 43238                                  BUFFHEAD:
 43239 00000038 00000000                	dd	0	; [SYSTEM] Pointer to head of buffer queue
 43240                                  CDSADDR:
 43241 0000003C 00000000                	dd	0	; [SYSTEM] Pointer to curdir structure table
 43242                                  SFTFCB:
 43243 00000040 00000000                	dd	0	; [SYSTEM] pointer to FCB cache table
 43244                                  KEEPCOUNT:
 43245 00000044 0000                    	dw	0	; [SYSTEM] count of FCB opens to keep
 43246                                  NUMIO:
 43247 00000046 00                      	db	0	; [SYSTEM] Number of disk tables
 43248                                  CDSCOUNT:
 43249 00000047 00                      	db	0	; [SYSTEM] Number of CDS structures in above
 43250                                  
 43251                                  ; A fake header for the NUL device
 43252                                  NULDEV:
 43253 00000048 00000000                	dd	0	; [SYSTEM] Link to rest of device list
 43254                                  	;dw	8004h
 43255 0000004C 0480                    	dw	DEVTYP|ISNULL ; [SYSTEM] Null device attributes
 43256 0000004E [C60D]                  	dw	SNULDEV	; [SYSTEM] Strategy entry point
 43257 00000050 [CB0D]                  	dw	INULDEV	; [SYSTEM] Interrupt entry point
 43258 00000052 4E554C2020202020        	db	"NUL     " ; [SYSTEM] Name of null device
 43259                                  SPLICES:
 43260 0000005A 00                      	db	0	; [SYSTEM] TRUE => splices being done
 43261                                  
 43262                                  Special_Entries:
 43263 0000005B 0000                    	dw	0	; [SYSTEM] address of special entries ;AN000;
 43264                                  UU_IFS_DOS_CALL:
 43265 0000005D 00000000                	dd	0	; [SYSTEM] entry for IFS DOS service ;AN000;
 43266                                  ; 
 43267                                  ; UU_IFS_HEADER:
 43268                                  ; 	dd	0	; [SYSTEM] IFS header chain ;AN000;
 43269                                  
 43270                                  ChkCopyProt:
 43271 00000061 0000                    	dw	0	; M068
 43272                                  A20OFF_PSP:
 43273 00000063 0000                    	dw	0	; M068
 43274                                  BUFFERS_PARM1:
 43275 00000065 0000                    	dw	0	; [SYSTEM] value of BUFFERS= ,m	;AN000;
 43276                                  BUFFERS_PARM2:
 43277 00000067 0000                    	dw	0	; [SYSTEM] value of BUFFERS= ,n ;AN000;
 43278                                  BOOTDRIVE:
 43279 00000069 00                      	db	0	; [SYSTEM] the boot drive ;AN000;
 43280                                  DDMOVE:
 43281 0000006A 00                      	db	0 	; [SYSTEM] 1 if we need DWORD move ;AN000;
 43282                                  EXT_MEM_SIZE:
 43283 0000006B 0000                    	dw	0	; [SYSTEM] extended memory size	;AN000;
 43284                                  
 43285                                  HASHINITVAR: ; LABEL   WORD	; AN000;
 43286                                  ;
 43287                                  ; Replaced by next two declarations
 43288                                  ;
 43289                                  ;UU_BUF_HASH_PTR:
 43290                                  ;	dd	0	; [SYSTEM] buffer Hash table addr
 43291                                  ;UU_BUF_HASH_COUNT:
 43292                                  ;	dw	1	; [SYSTEM] number of Hash entries
 43293                                  
 43294                                  BufferQueue:
 43295 0000006D 00000000                	dd	0	; [SYSTEM] Head of the buffer Queue
 43296                                  DirtyBufferCount:
 43297 00000071 0000                    	dw	0	; [SYSTEM] Count of Dirty buffers in the Que
 43298                                  			; BUGBUG ---- change to byte
 43299                                  SC_CACHE_PTR:
 43300 00000073 00000000                	dd	0	; [SYSTEM] secondary cache pointer
 43301                                  SC_CACHE_COUNT:
 43302 00000077 0000                    	dw	0 	; [SYSTEM] secondary cache count
 43303                                  BuffInHMA:
 43304 00000079 00                      	db	0	; Flag to indicate that buffs are in HMA
 43305                                  LoMemBuff:
 43306 0000007A 00000000                	dd	0	; Ptr to intermediate buffer
 43307                                  			;  in Low mem when buffs are in HMA
 43308                                  ;
 43309                                  ; All variables which have UU_ as prefix can be reused for other
 43310                                  ; purposes and can be renamed. All these variables were used for
 43311                                  ; EMS support of Buffer Manager. Now they are useless for Buffer
 43312                                  ; manager ---- MOHANS
 43313                                  ;
 43314                                  	;I_am	UU_BUF_EMS_FIRST_PAGE,3,<0,0,0>  
 43315                                  UU_BUF_EMS_FIRST_PAGE:	
 43316 0000007E 000000                  	db	0,0,0	; holds the first page above 640K
 43317                                  
 43318                                  	;;I_am	UU_BUF_EMS_NPA640,WORD,<0> ; holds the number of pages 
 43319                                  ;UU_BUF_EMS_NPA640:			   ; above 640K	
 43320                                  ;	dw	0			
 43321                                  
 43322                                  CL0FATENTRY:
 43323 00000081 FFFF                    	dw	-1	; M014:	Holds the data that
 43324                                  			; is used in pack/unpack rts.
 43325                                  			; in fat.asm if cluster 0 is specified.
 43326                                  			; SR;
 43327                                  IoStatFail:
 43328 00000083 00                      	db	0	; IoStatFail has been added to 
 43329                                  			; record a fail on an I24 
 43330                                  			; issued from IOFUNC on a status call. 
 43331                                  
 43332                                  ;***	I_am	UU_BUF_EMS_MODE,BYTE,<-1>	; EMS mode 	;AN000;
 43333                                  ;***	I_am	UU_BUF_EMS_HANDLE,BYTE		; buffer EMS handle ;AN000;
 43334                                  ;***	I_am	UU_BUF_EMS_PAGE_FRAME,WORD ,<-1>; EMS page frame # ;AN000;
 43335                                  ;***	I_am	UU_BUF_EMS_SEG_CNT,WORD,<1>	; EMS seg count	;AN000;
 43336                                  ;***	I_am	UU_BUF_EMS_PFRAME,WORD		; EMS page frame seg address ;AN000;
 43337                                  ;***	I_am	UU_BUF_EMS_RESERV,WORD,<0> 	; reserved	;AN000;
 43338                                  ;
 43339                                  ;***	I_am	UU_BUF_EMS_MAP_BUFF,1,<0>	; this is not used to save the 
 43340                                  						; state of the 	buffers page.
 43341                                  						; This one byte is retained to 
 43342                                  						; keep the size of this data 
 43343                                  						; block the same.;
 43344                                  ALLOCMSAVE:
 43345 00000084 00                      	db	0	; M063: temp var. used to 
 43346                                  			; M063: save alloc method in
 43347                                  			; M063: msproc.asm
 43348                                  A20OFF_COUNT:
 43349 00000085 00                      	db	0	; M068: indiactes the # of 
 43350                                  			; M068: int 21 calls for 
 43351                                  			; M068: which A20 is off
 43352                                  DOS_FLAG:
 43353 00000086 00                      	db	0	; see DOSSYM.INC for Bit 
 43354                                  			; definitions
 43355                                  UNPACK_OFFSET:
 43356 00000087 0000                    	dw	0	; saves pointer to the start
 43357                                  			; of unpack code in exepatch.
 43358                                  			; asm.
 43359                                  UMBFLAG:
 43360 00000089 00                      	db	0 	; M003: bit 0 indicates the 
 43361                                  			; M003: link state of the UMBs
 43362                                  			; M003: whether linked or not 
 43363                                  			; M003: to the DOS arena chain
 43364                                  SAVE_AX:
 43365 0000008A 0000                    	dw	0	; M000: temp varibale to store ax
 43366                                  			; M000: in msproc.asm
 43367                                  UMB_HEAD:
 43368 0000008C FFFF                    	dw	-1	; M000: this is initialized to  
 43369                                  			; M000: the first umb arena by 
 43370                                  			; M000: BIOS sysinit.
 43371                                  START_ARENA:
 43372 0000008E 0100                    	dw	1	; M000: this is the first arena 
 43373                                  			; M000: from which DOS will 
 43374                                  			; M000: start its scan for alloc.
 43375                                  
 43376                                  ; End of SYSINITVar block
 43377                                  ;----------------------------------------------------------------------------
 43378                                  
 43379                                  ; 25/04/2019 - Retro DOS v4.0
 43380                                  
 43381                                  ; 16/07/2018
 43382                                  ; MSDOS 3.3 (& MDOS 6.0)
 43383                                  
 43384                                  ;
 43385                                  ; Sharer jump table
 43386                                  ;
 43387                                  
 43388                                  ;PUBLIC	JShare
 43389                                  	;EVEN
 43390                                  
 43391                                  ;JShare	LABEL	DWORD
 43392                                  ;	DW	OFFSET DOSCODE:BadCall, 0
 43393                                  ;	DW	OFFSET DOSCODE:OKCall,  0  ;	1   MFT_enter
 43394                                  ;	DW	OFFSET DOSCODE:OKCall,  0  ;	2   MFTClose
 43395                                  ;	DW	OFFSET DOSCODE:BadCall, 0  ;	3   MFTclU
 43396                                  ;	DW	OFFSET DOSCODE:BadCall, 0  ;	4   MFTCloseP
 43397                                  ;	DW	OFFSET DOSCODE:BadCall, 0  ;	5   MFTCloN
 43398                                  ;	DW	OFFSET DOSCODE:BadCall, 0  ;	6   set_block
 43399                                  ;	DW	OFFSET DOSCODE:BadCall, 0  ;	7   clr_block
 43400                                  ;	DW	OFFSET DOSCODE:OKCall,  0  ;	8   chk_block
 43401                                  ;	DW	OFFSET DOSCODE:BadCall, 0  ;	9   MFT_get
 43402                                  ;	DW	OFFSET DOSCODE:BadCall, 0  ;	10  ShSave
 43403                                  ;	DW	OFFSET DOSCODE:BadCall, 0  ;	11  ShChk
 43404                                  ;	DW	OFFSET DOSCODE:OKCall , 0  ;	12  ShCol
 43405                                  ;	DW	OFFSET DOSCODE:BadCall, 0  ;	13  ShCloseFile
 43406                                  ;	DW	OFFSET DOSCODE:BadCall, 0  ;	14  ShSU
 43407                                  
 43408                                  align 2
 43409                                  
 43410                                  JShare:
 43411 00000090 [0F07]0000              		DW	BadCall,0
 43412 00000094 [1307]0000              MFT_enter:	DW	OKCall, 0  ; 1   MFT_enter
 43413 00000098 [1307]0000              MFTClose:	DW	OKCall, 0  ; 2   MFTClose
 43414 0000009C [0F07]0000              MFTclU:		DW	BadCall,0  ; 3   MFTclU
 43415 000000A0 [0F07]0000              MFTCloseP:	DW	BadCall,0  ; 4   MFTCloseP
 43416 000000A4 [0F07]0000              MFTCloN:	DW	BadCall,0  ; 5   MFTCloN
 43417 000000A8 [0F07]0000              set_block:	DW	BadCall,0  ; 6   set_block
 43418 000000AC [0F07]0000              clr_block:	DW	BadCall,0  ; 7   clr_block
 43419 000000B0 [1307]0000              chk_block:	DW	OKCall, 0  ; 8   chk_block
 43420 000000B4 [0F07]0000              MFT_get:	DW	BadCall,0  ; 9   MFT_get
 43421 000000B8 [0F07]0000              ShSave:		DW	BadCall,0  ; 10  ShSave
 43422 000000BC [0F07]0000              ShChk:		DW	BadCall,0  ; 11  ShChk
 43423 000000C0 [1307]0000              ShCol:		DW	OKCall, 0  ; 12  ShCol
 43424 000000C4 [0F07]0000              ShCloseFile:	DW	BadCall,0  ; 13  ShCloseFile
 43425 000000C8 [0F07]0000              ShSU:		DW	BadCall,0  ; 14  ShSU
 43426                                  
 43427                                  
 43428                                  ;============================================================================
 43429                                  ; CONST2.ASM (MSDOS 6.0, 1991)
 43430                                  ;============================================================================
 43431                                  ; 25/04/2019 - Retro DOS 4.0 
 43432                                  ; 16/07/2018 - Retro DOS 3.0	
 43433                                  
 43434                                  ;Break <Initialized data and data used at DOS initialization>
 43435                                  ;----------------------------------------------------------------------------
 43436                                  
 43437                                  ; We need to identify the parts of the data area that are relevant to tasks
 43438                                  ; and those that are relevant to the system as a whole.  Under 3.0, the system
 43439                                  ; data will be gathered with the system code.  The process data under 2.x will
 43440                                  ; be available for swapping and under 3.0 it will be allocated per-process.
 43441                                  ;
 43442                                  ; The data that is system data will be identified by [SYSTEM] in the comments
 43443                                  ; describing that data item.
 43444                                  
 43445                                  ;DOSDATA SEGMENT WORD PUBLIC 'DATA'
 43446                                  
 43447                                  ;
 43448                                  ; Table of routines for assignable devices
 43449                                  ;
 43450                                  ; MSDOS allows assignment if the following standard devices:
 43451                                  ;   stdin  (usually CON input)
 43452                                  ;   stdout (usually CON output)
 43453                                  ;   auxin  (usually AUX input)
 43454                                  ;   auxout (usually AUX output)
 43455                                  ;   stdlpt (usually PRN output)
 43456                                  ;
 43457                                  ; SPECIAL NOTE:
 43458                                  ;   Status of a file is a strange idea. We choose to handle it in this manner:
 43459                                  ;   If we're not at end-of-file, then we always say that we have a character.
 43460                                  ;   Otherwise, we return ^Z as the character and set the ZERO flag. In this
 43461                                  ;   manner we can support program written under the old DOS (they use ^Z as EOF
 43462                                  ;   on devices) and programs written under the new DOS (they use the ZERO flag
 43463                                  ;   as EOF).
 43464                                  
 43465                                  ; Default SFTs for boot up
 43466                                  
 43467                                  		;PUBLIC	SFTABL
 43468                                  
 43469                                  SFTABL:	   ; LABEL   DWORD		; [SYSTEM] file table
 43470 000000CC FFFF                    		DW -1			; [SYSTEM] link to next table
 43471 000000CE FFFF                    		DW -1			; [SYSTEM] link seg to next table
 43472 000000D0 0500                    		DW sf_default_number	; [SYSTEM] Number of entries in table
 43473                                  		;times 295 db 0 ; MSDOS 6.0
 43474 000000D2 00<rep 127h>            		times (sf_default_number*sf_entry_size) db 0
 43475                                  
 43476                                  ; the next two variables relate to the position of the logical stdout/stdin
 43477                                  ; cursor. They are only meaningful when stdin/stdout are assigned to the
 43478                                  ; console.
 43479                                  		; DOSDATA:01F9h (MSDOS 6.21)
 43480 000001F9 00                      CARPOS:		db 0			; [SYSTEM] cursor position in stdin
 43481 000001FA 00                      STARTPOS:	db 0			; [SYSTEM] position of cursor at beginning
 43482                                  					;	   of buffered input call
 43483 000001FB 00<rep 80h>             INBUF:		times 128 db 0		; [SYSTEM] general device input buffer
 43484 0000027B 00<rep 83h>             CONBUF:		times 131 db 0		; [SYSTEM] The rest of INBUF and console buffer
 43485                                  		; DOSDATA:02FEh (MSDOS 6.21)
 43486 000002FE 00                      PFLAG:		db 0			; [SYSTEM] printer echoing flag
 43487 000002FF 00                      VERFLG:		db 0			; [SYSTEM] Initialize with verify off
 43488 00000300 03                      CHARCO:		db 00000011b		; [SYSTEM] Allows statchks every 4 chars...
 43489                                  switch_character:
 43490 00000301 2F                      chSwitch:	db '/'			; UNUSED - obsolete datum, can be reused
 43491 00000302 00                      AllocMethod:	db 0			; [SYSTEM] how to alloc first(best)last
 43492 00000303 00                      fShare:		db 0			; [SYSTEM] TRUE => sharing installed
 43493 00000304 01                      DIFFNAM:	db 1			; [SYSTEM] Indicates when MYNAME has changed
 43494 00000305 20<rep 10h>             MYNAME:		times 16 db 20h		; [SYSTEM] My network name
 43495                                  
 43496                                  ; The following table is a list of addresses that the sharer patches to be
 43497                                  ; PUSH AX to enable the critical sections
 43498                                  
 43499                                  		; DOSDATA:0315h (MSDOS 6.21)
 43500                                  
 43501                                  ;PUBLIC	CritPatch
 43502                                  
 43503                                  CritPatch:	; LABEL WORD
 43504                                  
 43505                                  ;IRP sect,<critDisk,critDevice>
 43506                                  
 43507                                  ;IF (NOT REDIRECTOR) AND (NOT SHAREF)
 43508                                  ;
 43509                                  ;SR; Change code patch address to a variable in data segment
 43510                                  ;
 43511                                  ;       dw OFFSET DOSDATA: redir_patch
 43512                                  ;       dw OFFSET DOSDATA: redir_patch
 43513                                  ;
 43514                                  ;;hkn	Short_Addr  E&sect
 43515                                  ;;hkn	Short_Addr  L&sect
 43516                                  ;
 43517                                  ;ELSE
 43518                                  ;	DW	0
 43519                                  ;	DW	0
 43520                                  ;ENDIF
 43521                                  ;ENDM
 43522                                  ;	DW	0
 43523                                  
 43524                                  	; 25/07/2019 - Retro DOS v4.0 (MSDOS 6.21)
 43525                                   
 43526 00000315 [0C0D]                  	dw 	redir_patch
 43527 00000317 [0C0D]                  	dw 	redir_patch			
 43528 00000319 [0C0D]                  	dw	redir_patch
 43529 0000031B [0C0D]                  	dw 	redir_patch
 43530                                  
 43531 0000031D 0000                    	dw	0
 43532                                  
 43533                                  ; WARNING!!! PRINT and PSPRINT *REQUIRE* ErrorMode to precede INDOS.
 43534                                  ; Also, IBM server 1.0 requires this also.
 43535                                  
 43536                                  	;EVEN			; Force swap area to start on word boundry
 43537 0000031F 90                      align 2
 43538                                  	;PUBLIC	SWAP_START
 43539                                  SWAP_START:	; LABEL BYTE
 43540 00000320 00                      ERRORMODE:	db 0		; Flag for INT 24 processing
 43541 00000321 00                      INDOS:		db 0		; DOS status for interrupt processing
 43542 00000322 FF                      WPERR:		db -1		; Write protect error flag
 43543 00000323 00                      EXTERR_LOCUS:	db 0		; Extended Error Locus
 43544 00000324 0000                    EXTERR:		dw 0		; Extended Error code
 43545                                  
 43546                                  ;WARNING Following two bytes Accessed as word in $GetExtendedError
 43547 00000326 00                      EXTERR_ACTION:	db 0		; Extended Error Action
 43548 00000327 00                      EXTERR_CLASS:	db 0		; Extended Error Class
 43549                                  ; end warning
 43550                                   
 43551 00000328 00000000                EXTERRPT:	dd 0		; Extended Error pointer
 43552                                  
 43553 0000032C 80000000                DMAADD:		dd 80h		; User's disk transfer address (disp/seg)
 43554 00000330 0000                    CurrentPDB:	dw 0		; Current process identifier
 43555 00000332 0000                    ConC_Spsave:	dw 0		; saved SP before ^C
 43556 00000334 0000                    exit_code:	dw 0		; exit code of last proc.
 43557 00000336 00                      CURDRV:		db 0		; Default drive (init A)
 43558 00000337 00                      CNTCFLAG:	db 0		; ^C check in dispatch disabled
 43559                                  ;				; F.C. 2/17/86
 43560 00000338 00                      CPSWFLAG:	db 0		; Code Page Switching Flag  DOS 4.00
 43561 00000339 00                      CPSWSAVE:	db 0		; copy of above in case of ABORT
 43562                                  ;align 2
 43563                                  SWAP_ALWAYS:	; 05/08/2018
 43564 0000033A 0000                    USER_IN_AX:	dw 0		; User INPUT AX value (used for
 43565                                  				;   extended error type stuff.
 43566                                  				;   NOTE: does not have Correct value on
 43567                                  				;   1-12, OEM, Get/Set CurrentPDB,
 43568                                  				;   GetExtendedError system calls)
 43569 0000033C 0000                    PROC_ID:	dw 0		; PID for sharing (0 = local)
 43570 0000033E 0000                    USER_ID:	dw 0		; Machine for sharing (0 = local)
 43571 00000340 0000                    FirstArena:	dw 0		; first free block found
 43572 00000342 0000                    BestArena:	dw 0		; best free block found
 43573 00000344 0000                    LastArena:	dw 0		; last free block found
 43574 00000346 0000                    ENDMEM:		dw 0		; End of memory used in DOSINIT
 43575 00000348 0000                    LASTENT:	dw 0		; Last entry for directory search
 43576 0000034A 00                      FAILERR:	db 0		; NZ if user did FAIL on I 24
 43577 0000034B 00                      ALLOWED:	db 0		; Allowed I 24 answers (see allowed_)
 43578 0000034C 00                      NoSetDir:	db 0		; true -> do not set directory
 43579 0000034D 00                      DidCTRLC:	db 0		; true -> we did a ^C exit
 43580 0000034E 00                      SpaceFlag:	db 0		; true -> embedded spaces are allowed in FC
 43581                                  
 43582                                  ; Warning!  The following items are accessed as a WORD in TIME.ASM
 43583                                  	;EVEN
 43584 0000034F 90                      align 2
 43585                                  		; DOSDATA:0350h (MSDOS 6.21)
 43586 00000350 00                      DAY:		db 0		; Day of month
 43587 00000351 00                      MONTH:		db 0		; Month of year
 43588 00000352 0000                    YEAR:		dw 0		; Year (with century)
 43589 00000354 FFFF                    DAYCNT:		dw -1		; Day count from beginning of year
 43590 00000356 00                      WEEKDAY:	db 0		; Day of week
 43591                                  ; end warning
 43592                                  
 43593 00000357 00                      CONSWAP:	db 0		; TRUE => console was swapped during device read
 43594 00000358 01                      IDLEINT:	db 1		; TRUE => idle int is allowed
 43595 00000359 00                      fAborting:	db 0		; TRUE => abort in progress
 43596                                  
 43597                                  ; Combination of all device call parameters
 43598                                  	;PUBLIC	DEVCALL 	;
 43599                                  ;DEVCALL SRHEAD	<>		; basic header for disk packet
 43600                                  DEVCALL: ; 08/08/2018
 43601 0000035A 00                      DEVCALL_REQLEN:  db 0 		;Length in bytes of request block
 43602 0000035B 00                      DEVCALL_REQUNIT: db 0		;Device unit number
 43603 0000035C 00                      DEVCALL_REQFUNC: db 0		;Type of request
 43604 0000035D 0000                    DEVCALL_REQSTAT: dw 0		;Status Word
 43605 0000035F 00<rep 8h>                       times 8 db 0		;Reserved for queue links
 43606                                  
 43607                                  	;PUBLIC	CALLUNIT
 43608                                  CALLUNIT: ; LABEL   BYTE	; unit number for disk
 43609                                  CALLFLSH: ; LABEL   WORD	;
 43610 00000367 00                      CALLMED:	db 0		; media byte
 43611                                  CALLBR:	  ; LABEL   DWORD	;
 43612                                  	;PUBLIC	CALLXAD 	;
 43613                                  CALLXAD:  ; LABEL   DWORD	;
 43614 00000368 00                      CALLRBYT:	db 0		;
 43615                                  	;PUBLIC	CALLVIDM	;
 43616                                  CALLVIDM: ; LABEL   DWORD	;
 43617 00000369 00<rep 3h>              	times 3 db 0	;
 43618                                  	;PUBLIC CallBPB		;
 43619                                  CALLBPB:  ; LABEL   DWORD	;
 43620                                  CALLSCNT:			;
 43621 0000036C 0000                    		dw 0		;
 43622                                  	;PUBLIC	CALLSSEC	;
 43623                                  CALLSSEC: ; LABEL   WORD	;
 43624 0000036E 0000                    		dw 0		;
 43625 00000370 00000000                CALLVIDRW:	dd 0		;
 43626                                  ;MSDOS 6.0
 43627 00000374 00000000                CALLNEWSC:	dd 0		; starting sector for >32mb
 43628 00000378 00000000                CALLDEVAD:	dd 0		; stash for device entry point
 43629                                  
 43630                                  ; Same as above for I/O calls	;
 43631                                  				;
 43632                                  	;PUBLIC	IOCall		;
 43633                                  ;IOCALL	SRHEAD	<>		;
 43634                                  IOCALL:	; 07/08/2018
 43635 0000037C 00                      IOCALL_REQLEN:	db 0		;Length in bytes of request block	
 43636 0000037D 00                      IOCALL_REQUNIT:	db 0		;Device unit number
 43637 0000037E 00                      IOCALL_REQFUNC: db 0		;Type of request
 43638 0000037F 0000                    IOCALL_REQSTAT: dw 0		;Status Word
 43639 00000381 00<rep 8h>              	times 8	db 0		;Reserved for queue links
 43640                                  IOFLSH:	  ; LABEL   WORD	;
 43641                                          ;PUBLIC  IORCHR		;
 43642                                  IORCHR:	  ; LABEL   BYTE	;
 43643 00000389 00                      IOMED:		db 0		;
 43644 0000038A 00000000                IOXAD:		dd 0		;
 43645 0000038E 0000                    IOSCNT:		dw 0		;	
 43646 00000390 0000                    IOSSEC:		dw 0		;
 43647                                  
 43648                                  ; Call struct for DSKSTATCHK	;
 43649 00000392 0E                      DSKSTCALL:	db DRDNDHL 	; = 14
 43650 00000393 00                      		db 0
 43651 00000394 05                      DSKSTCOM:	db DEVRDND	; = 5
 43652 00000395 0000                    DSKSTST:	dw 0		;
 43653 00000397 00<rep 8h>              	times 8	db 0		;
 43654 0000039F 00                      DSKCHRET:	db 0		;
 43655                                  
 43656                                  ;hkn; short_addr has been changed to provide offset in DOSCODE.
 43657                                  ;hkn; deviobuf is in DATA seg (DOSDATA)
 43658                                  ;hkn   short_addr  DEVIOBUF	;
 43659                                  	
 43660 000003A0 [BC03]                  DEVIOBUF_PTR	dw DEVIOBUF
 43661 000003A2 0000                    DOSSEG_INIT	dw 0		; DOS segment set at Init
 43662 000003A4 0100                    DSKSTCNT:	dw 1		;
 43663 000003A6 0000                    		dw 0		;
 43664                                  
 43665 000003A8 00                      CreatePDB:	db 0		; flag for creating a process
 43666                                  
 43667                                  ;MSDOS 6.0
 43668                                  Lock_Buffer:	; LABEL  DWORD	;MS. DOS Lock Buffer for Ext Lock
 43669 000003A9 00000000                		dd 0		;MS. position
 43670 000003AD 00000000                		dd 0		;MS. length
 43671                                  
 43672                                  ;hkn; the foll. was moved from dosmes.asm.
 43673                                  
 43674                                  	;EVEN
 43675 000003B1 90                      align 2				; needed to maintain offsets
 43676                                  
 43677                                  		; DOSDATA:03B2h (MSDOS 6.21)
 43678                                  USERNUM:
 43679 000003B2 0000                     		dw 0		; 24 bit user number
 43680 000003B4 00                      		db 0
 43681                                  ;IF IBM
 43682                                  ;IF IBMCOPYRIGHT
 43683                                  ;OEMNUM:	DB 0		; 8 bit OEM number
 43684                                  ;ELSE
 43685                                  ;OEMNUM:	DB 0FFh		; 8 bit OEM number
 43686                                  ;ENDIF
 43687                                  ;ELSE
 43688 000003B5 FF                      OEMNUM:		DB 0FFh
 43689                                  ;ENDIF
 43690                                  
 43691                                  ;============================================================================
 43692                                  ; MS_DATA.ASM (MSDOS 6.0, 1991)
 43693                                  ;============================================================================
 43694                                  ; 25/04/2019 - Retro DOS 4.0
 43695                                  
 43696                                  ; Retro DOS v4.0 NOTE: (by Erdogan Tan, 25/04/2019)
 43697                                  ; ----------------------------------------------------------
 43698                                  ; This data section which was named as uninitialized data
 43699                                  ; (as overlayed by initialization code) but follows 
 43700                                  ; initialized data section from DOSDATA:03B6h address
 43701                                  ; (in otherwords, the method is different than MSDOS 3.3,
 43702                                  ; and there is not overlaying..)
 43703                                  ; **********************************************************
 43704                                  ; Reference: MSDOS 6.21 kernel DOSDATA section (4970 bytes)
 43705                                  ; follows DOSCODE section in the kernel file (MSDOS.SYS) 
 43706                                  ; (it is located at offset 0BF70h, file offset 0BF70h-3DE0h) 
 43707                                  ; but starts from offset 0 (ORG 0) and ends at offset 1370h.
 43708                                  ; TIMEBUF is at offset 03B6h.
 43709                                  ; **********************************************************	
 43710                                  
 43711                                  ;Break <Uninitialized data overlayed by initialization code>
 43712                                  ;----------------------------------------------------------------------------
 43713                                  ;DOSDATA    SEGMENT WORD PUBLIC 'DATA'
 43714                                  ; Init code overlaps with data area below
 43715                                  
 43716                                  ; 	ORG     0
 43717                                  
 43718                                  MSDAT001S:	; label byte
 43719                                  
 43720                                  ; DOSDATA:03B6h	; MSDOS 6.21 (MSDOS.SYS, file offset 0BF70h-3DE0h+3B6h)
 43721                                  TIMEBUF: ;	times 6 db 0
 43722 000003B6 0000<rep 3h>            	times 3 dw	0		; Time read from clock device
 43723 000003BC 0000                    DEVIOBUF:	dw	0		; Buffer for I/O under file assignment
 43724                                  
 43725                                  ; The following areas are used as temp buffer in EXEC system call
 43726                                  
 43727                                  ; DOSDATA:03BEh
 43728                                  OPENBUF: ;times 64  dw	0
 43729 000003BE 00<rep 80h>             	times	128 db	0		; buffer for name operations
 43730                                  RENBUF:	
 43731 0000043E 00<rep 80h>             	times	128 db	0		; buffer for rename destination
 43732                                  
 43733                                  ; Buffer for search calls
 43734                                  SEARCHBUF:	
 43735 000004BE 00<rep 35h>             	times	53  db	0		; internal search buffer
 43736                                  DUMMYCDS:  ;times 88 db 0
 43737 000004F3 00<rep 58h>             	times	curdirLen db 0
 43738                                  
 43739                                  ; End of contiguous buffer
 43740                                   
 43741                                  ; Temporary directory entry for use by many routines. Device directory
 43742                                  ; entries (bogus) are built here.
 43743                                  
 43744                                  ; DOSDATA:054Bh
 43745                                  
 43746                                  DEVFCB:	; LABEL   BYTE			; Uses NAME1, NAME2, combined
 43747                                  
 43748                                  ; WARNING..  do not alter position of NAME1 relative to DEVFCB
 43749                                  ; without first examining BUILD_DEVICE_ENT. Look carefully at DOS_RENAME
 43750                                  ; as well as it is the only guy who uses NAME2 and DESTSTART.
 43751                                  
 43752                                  NAME1:	
 43753 0000054B 00<rep Ch>                      times 	12 db	0		; File name buffer
 43754                                  NAME2:
 43755 00000557 00<rep Dh>              	times	13 db	0 		;
 43756                                  DESTSTART:
 43757 00000564 0000                    	dw	0			;
 43758                                          ;DB      ((SIZE DIR_ENTRY) - ($ - DEVFCB)) DUP (?)
 43759                                  	;times	5  db	0
 43760 00000566 00<rep 5h>              	times	((dir_entry.size)-($-DEVFCB)) db 0
 43761                                  
 43762                                  ; End Temporary directory entry.
 43763                                  
 43764 0000056B 00                      ATTRIB:	db	0		; storage for file attributes
 43765                                  EXTFCB:	
 43766 0000056C 00                      	db	0		; TRUE => extended FCB in use
 43767                                  SATTRIB:
 43768 0000056D 00                      	db	0		; Storage for search attributes
 43769                                  OPEN_ACCESS:
 43770 0000056E 00                      	db	0		; access of open system call
 43771                                  FOUNDDEL:
 43772 0000056F 00                      	db	0		; true => file was deleted
 43773                                  FOUND_DEV:
 43774 00000570 00                      	db	0		; true => search found a device
 43775                                  FSPLICE:
 43776 00000571 00                      	db	0		; true => do a splice in transpath
 43777                                  FSHARING:
 43778 00000572 00                      	db	0		; TRUE => no redirection
 43779                                  SECCLUSPOS:
 43780 00000573 00                      	db	0		; Position of first sector within cluster
 43781 00000574 00                      TRANS:	db	0		;
 43782 00000575 00                      READOP:	db	0		;
 43783                                  THISDRV:
 43784 00000576 00                      	db	0		;
 43785                                  CLUSFAC:
 43786 00000577 00                      	db	0		;
 43787                                  CLUSSPLIT:
 43788 00000578 00                      	db	0		;
 43789                                  INSMODE:
 43790 00000579 00                      	db	0		; true => insert mode in buffered read
 43791 0000057A 00                      CMETA:	db	0		; count of meta'ed components found
 43792 0000057B 00                      VOLID:	db	0		;
 43793                                  EXIT_TYPE:
 43794 0000057C 00                      	db	0		; type of exit...
 43795                                   
 43796                                  	;EVEN
 43797                                  
 43798 0000057D 90                      align 2
 43799                                  
 43800                                  ; DOSDATA:057Eh
 43801                                  
 43802                                  ; WARNING - the following two items are accessed as a word
 43803                                  
 43804                                  CREATING:
 43805 0000057E 00                      	db	0		; true => creating a file
 43806 0000057F 00                      DELALL:	db	0		; = 0 iff BUGBUG
 43807                                  				; = DIRFREE iff BUGBUG
 43808                                  EXITHOLD:
 43809 00000580 00000000                	dd	0		; Temp location for proc terminate
 43810                                  USER_SP:
 43811 00000584 0000                    	dw	0		; User SP for system call
 43812                                  USER_SS:
 43813 00000586 0000                    	dw	0		; User SS for system call
 43814                                  CONTSTK:
 43815 00000588 0000                    	dw	0		;
 43816                                  THISDPB:
 43817 0000058A 00000000                	dd	0		;
 43818                                  CLUSSAVE:
 43819 0000058E 0000                    	dw	0		;
 43820                                  CLUSSEC:
 43821 00000590 00000000                	dd	0		;>32mb			AC0000
 43822                                  PREREAD:
 43823 00000594 0000                    	dw	0		; 0 means preread; 1 means optional
 43824 00000596 0000                    FATBYT:	dw	0		; Used by ALLOCATE
 43825                                  FATBYTE:
 43826 00000598 0000                    	dw	0		; Used by $SLEAZEFUNC
 43827                                  ; DOSDATA:059Ah
 43828 0000059A 00000000                DEVPT:	dd	0		;
 43829                                  THISSFT:
 43830 0000059E 00000000                	dd	0		; Address of user SFT
 43831                                  THISCDS:
 43832 000005A2 00000000                	dd	0		; Address of current CDS
 43833                                  THISFCB:
 43834 000005A6 00000000                	dd	0		; Address of user FCB
 43835 000005AA FFFF                    SFN:	dw	-1		; SystemFileNumber found for accessfile
 43836 000005AC 0000                    JFN:	dw	0		; JobFileNumber found for accessfile
 43837 000005AE 00000000                PJFN:	dd	0		; PointerJobFileNumber found for accessfile
 43838                                  WFP_START:
 43839 000005B2 0000                    	dw	0		;
 43840                                  REN_WFP:
 43841 000005B4 0000                    	dw	0		;
 43842                                  CURR_DIR_END:
 43843 000005B6 0000                    	dw	0		;
 43844                                  NEXTADD:
 43845 000005B8 0000                    	dw	0		;
 43846                                  LASTPOS:
 43847 000005BA 0000                    	dw	0		;
 43848                                  CLUSNUM:
 43849 000005BC 0000                    	dw	0		;
 43850 000005BE 00000000                DIRSEC:	dd	0		;>32mb			AC0000
 43851                                  DIRSTART:
 43852 000005C2 0000                    	dw	0		;
 43853 000005C4 00000000                SECPOS:	dd	0		;>32mb Position of first sector accessed
 43854 000005C8 00000000                VALSEC:	dd	0		;>32mb Number of valid (previously written)
 43855                                                                  ; sectors
 43856                                  BYTSECPOS:
 43857 000005CC 0000                    	dw	0		; Position of first byte within sector
 43858                                  BYTPOS: ;times	4 db 0		; Byte position in file of access
 43859 000005CE 0000<rep 2h>                    times	2 dw 0
 43860                                  BYTCNT1:
 43861 000005D2 0000                    	dw	0		; No. of bytes in first sector
 43862                                  BYTCNT2:
 43863 000005D4 0000                    	dw	0		; No. of bytes in last sector
 43864 000005D6 0000                    SECCNT:	dw	0		; No. of whole sectors
 43865                                  ; DOSDATA:05D8h
 43866                                  ENTFREE:
 43867 000005D8 0000                    	dw	0		;
 43868                                  ENTLAST:
 43869 000005DA 0000                    	dw	0		;
 43870                                  NXTCLUSNUM:
 43871 000005DC 0000                    	dw	0		;
 43872                                  GROWCNT:
 43873 000005DE 00000000                	dd	0		;
 43874 000005E2 00000000                CURBUF:	dd	0		;
 43875 000005E6 00000000                CONSFT:	dd	0		; SFT of console swapped guy.
 43876 000005EA 0000                    SAVEBX:	dw	0		;
 43877 000005EC 0000                    SAVEDS:	dw	0		;
 43878                                  RESTORE_TMP:
 43879 000005EE 0000                    	dw	0		; return address for restore world
 43880 000005F0 0000                    NSS:	dw	0
 43881 000005F2 0000                    NSP:	dw	0
 43882                                  ; DOSDATA:05F4h
 43883                                  EXTOPEN_FLAG:
 43884 000005F4 0000                    	dw	0		;FT. extended open input flag	;AN000;
 43885                                  EXTOPEN_ON:
 43886 000005F6 00                      	db	0		;FT. extended open conditional flag ;AN000;
 43887                                  EXTOPEN_IO_MODE:
 43888 000005F7 0000                    	dw	0		;FT. extended open io mode	;AN000;
 43889                                  SAVE_DI:
 43890 000005F9 0000                    	dw	0		;FT. extended open saved DI	;AN000;
 43891                                  SAVE_ES:
 43892 000005FB 0000                    	dw	0		;FT. extended open saved ES	;AN000;
 43893                                  SAVE_DX:
 43894 000005FD 0000                    	dw	0		;FT. extended open saved DX	;AN000;
 43895                                  SAVE_CX:
 43896 000005FF 0000                    	dw	0		;FT. extended open saved CX	;AN000;
 43897                                  SAVE_BX:
 43898 00000601 0000                    	dw	0		;FT. extended open saved BX	;AN000;
 43899                                  SAVE_SI:
 43900 00000603 0000                    	dw	0		;FT. extended open saved SI	;AN000;
 43901                                  SAVE_DS:
 43902 00000605 0000                    	dw	0		;FT. extended open saved DS	;AN000;
 43903                                  
 43904                                  ; DOSDATA:0607h
 43905                                  
 43906                                  ; HIGH_SECTOR is a hack to allow passing 32-bit sector numbers where
 43907                                  ; we used to just pass 16 bits in a register. Now High_SECTOR holds
 43908                                  ; the high 16, the low 16 are still in the register.
 43909                                  
 43910                                  HIGH_SECTOR:	
 43911 00000607 0000                    	dw	0		;>32mb higher sector #		;AN000;
 43912                                  ;OffsetMagicPatch:
 43913                                  ;	dw	MagicPatch ;scottq 8/6/92
 43914                                  	; 06/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 43915 00000609 0000                    	dw	0
 43916                                  				;see dos\mpatch.asm
 43917                                  DISK_FULL:
 43918 0000060B 00                      	db	0		;>32mb indicating disk full when 1 ;AN000;
 43919                                  TEMP_VAR:
 43920 0000060C 0000                    	dw	0		; temporary variable for everyone ;AN000;
 43921                                  TEMP_VAR2:
 43922 0000060E 0000                    	dw	0		; temporary variable 2 for everyone ;AN000;
 43923 00000610 00                      DrvErr:	db	0		; used to save drive error	;AN000;
 43924                                  DOS34_FLAG:
 43925 00000611 0000                    	dw	0		; common flag for DOS 3.4	;AN000;
 43926                                  NO_FILTER_PATH:
 43927 00000613 00000000                	dd	0		; pointer to original path	;AN000;
 43928                                  NO_FILTER_DPATH:
 43929 00000617 00000000                	dd	0		; pointer to original path of destination ;AN000;
 43930                                  ; M008
 43931                                  AbsRdWr_SS:
 43932 0000061B 0000                    	dw	0		; INT 25/26 user stack segment
 43933                                  AbsRdWr_SP:
 43934 0000061D 0000                    	dw	0		; INT 25/26 user stack offset
 43935                                  
 43936                                  	; I_am   UU_Callback_flag,BYTE,<0>  ; Unused
 43937                                  ; M008
 43938                                   
 43939                                   
 43940                                  ; make those pushes fast!!!
 43941                                  
 43942                                  ;EVEN
 43943                                  
 43944 0000061F 90                      align 2
 43945                                  
 43946                                  StackSize   equ 180h  ; 384	; gross but effective
 43947                                  
 43948                                  ;StackSize  equ 300h  ;	768	; This is a "trial" change IBM hasn't
 43949                                  ;				; made up their minds about
 43950                                   
 43951                                  ; WARNING!!!! DskStack may grow into AUXSTACK due to interrupt service.
 43952                                  ; This is NO problem as long as AUXSTACK comes immediately before DSKSTACK
 43953                                  
 43954                                  RENAMEDMA:	; LABEL   BYTE	; See DOS_RENAME
 43955                                   
 43956 00000620 00<rep 180h>                    times	StackSize db	0	;
 43957                                  AUXSTACK:			; LABEL   BYTE
 43958                                   
 43959 000007A0 00<rep 180h>                    times	StackSize db 	0	;
 43960                                  DSKSTACK:			; LABEL   BYTE
 43961                                   
 43962 00000920 00<rep 180h>                    times	StackSize db	0	;
 43963                                  IOSTACK:			; LABEL   BYTE
 43964                                  
 43965                                  ; DOSDATA:0AA0h 
 43966                                   
 43967                                  ; patch space for Boca folks.
 43968                                  ; Say What????!!! This does NOT go into the swappable area!
 43969                                  ; NOTE: We include the decl of ibmpatch in ms-dos even though it is not needed.
 43970                                  ;       This allows the REDIRector to work on either IBM or MS-DOS.
 43971                                   
 43972                                  IBMPATCH: ; label byte
 43973                                  PRINTER_FLAG:
 43974 00000AA0 00                      	db	0		; [SYSTEM] status of PRINT utility
 43975                                  VOLCHNG_FLAG:
 43976 00000AA1 00                      	db	0		; [SYSTEM] true if volume label created
 43977                                  VIRTUAL_OPEN:
 43978 00000AA2 00                      	db	0		; [SYSTEM] non-zero if we opened a virtual file
 43979                                   
 43980                                  ; Following 4 variables moved to MSDATA.asm from MSTABLE.asm (P4986)
 43981                                  
 43982                                  FSeek_drive:
 43983 00000AA3 00                      	db	0		;AN000; fastseek drive #
 43984                                  FSeek_firclus:
 43985 00000AA4 0000                    	dw	0		;AN000; fastseek first cluster #
 43986                                  FSeek_logclus:
 43987 00000AA6 0000                    	dw	0		;AN000; fastseek logical cluster #
 43988                                  FSeek_logsave:
 43989 00000AA8 0000                    	dw	0		;AN000; fastseek returned log clus #
 43990                                  
 43991                                  ; DOSDATA:0AAAh
 43992                                  
 43993                                  TEMP_DOSLOC:
 43994 00000AAA FFFF                    	dw	-1		;stores the temporary location of dos
 43995                                  				;at SYSINIT time.
 43996                                  SWAP_END:  ; LABEL   BYTE
 43997                                   
 43998                                  ; THE FOLLOWING BYTE MUST BE HERE, IMMEDIATELY FOLLOWING SWAP_END. IT CANNOT
 43999                                  ; BE USED. If the size of the swap data area is ODD, it will be rounded up
 44000                                  ; to include this byte.
 44001                                   
 44002 00000AAC 00                      	db	0
 44003                                  
 44004                                  ; DOSDATA:0AADh
 44005                                   
 44006                                  ;hkn;	DB	(512+80+32-(SWAP_END-ibmpatch)) DUP (?)
 44007                                  
 44008                                  ;DOSDATA    ENDS
 44009                                  
 44010                                  ;============================================================================
 44011                                  ; DOSTAB.ASM (MSDOS 6.0, 1991)
 44012                                  ;============================================================================
 44013                                  ; 27/04/2019 - Retro DOS 4.0
 44014                                  ; 16/07/2018 - Retro DOS 3.0
 44015                                  
 44016                                  ;DOSDATA Segment
 44017                                  
 44018                                  ; DOSDATA:0AADh (MSDOS 6.21, MSDOS.SYS)
 44019                                  
 44020                                  ;
 44021                                  ; upper case table
 44022                                  ; ---------------------------------------------------------------------------
 44023                                  UCASE_TAB:	; label   byte
 44024 00000AAD 8000                    	dw	128
 44025 00000AAF 809A45418E418F80        	db	128,154,069,065,142,065,143,128 
 44026 00000AB7 4545454949498E8F        	db	069,069,069,073,073,073,142,143
 44027 00000ABF 9092924F994F5555        	db	144,146,146,079,153,079,085,085
 44028 00000AC7 59999A9B9C9D9E9F        	db	089,153,154,155,156,157,158,159
 44029 00000ACF 41494F55A5A5A6A7        	db	065,073,079,085,165,165,166,167
 44030 00000AD7 A8A9AAABACADAEAF        	db	168,169,170,171,172,173,174,175
 44031 00000ADF B0B1B2B3B4B5B6B7        	db	176,177,178,179,180,181,182,183
 44032 00000AE7 B8B9BABBBCBDBEBF        	db	184,185,186,187,188,189,190,191
 44033 00000AEF C0C1C2C3C4C5C6C7        	db	192,193,194,195,196,197,198,199
 44034 00000AF7 C8C9CACBCCCDCECF        	db	200,201,202,203,204,205,206,207
 44035 00000AFF D0D1D2D3D4D5D6D7        	db	208,209,210,211,212,213,214,215
 44036 00000B07 D8D9DADBDCDDDEDF        	db	216,217,218,219,220,221,222,223
 44037 00000B0F E0E1E2E3E4E5E6E7        	db	224,225,226,227,228,229,230,231
 44038 00000B17 E8E9EAEBECEDEEEF        	db	232,233,234,235,236,237,238,239
 44039 00000B1F F0F1F2F3F4F5F6F7        	db	240,241,242,243,244,245,246,247
 44040 00000B27 F8F9FAFBFCFDFEFF        	db	248,249,250,251,252,253,254,255
 44041                                  ;
 44042                                  ; file upper case table
 44043                                  ; ---------------------------------------------------------------------------
 44044                                  FILE_UCASE_TAB:	; label  byte
 44045 00000B2F 8000                    	dw	128
 44046 00000B31 809A45418E418F80        	db	128,154,069,065,142,065,143,128
 44047 00000B39 4545454949498E8F        	db	069,069,069,073,073,073,142,143
 44048 00000B41 9092924F994F5555        	db	144,146,146,079,153,079,085,085
 44049 00000B49 59999A9B9C9D9E9F        	db	089,153,154,155,156,157,158,159
 44050 00000B51 41494F55A5A5A6A7        	db	065,073,079,085,165,165,166,167
 44051 00000B59 A8A9AAABACADAEAF        	db	168,169,170,171,172,173,174,175
 44052 00000B61 B0B1B2B3B4B5B6B7        	db	176,177,178,179,180,181,182,183
 44053 00000B69 B8B9BABBBCBDBEBF        	db	184,185,186,187,188,189,190,191
 44054 00000B71 C0C1C2C3C4C5C6C7        	db	192,193,194,195,196,197,198,199
 44055 00000B79 C8C9CACBCCCDCECF        	db	200,201,202,203,204,205,206,207
 44056 00000B81 D0D1D2D3D4D5D6D7        	db	208,209,210,211,212,213,214,215
 44057 00000B89 D8D9DADBDCDDDEDF        	db	216,217,218,219,220,221,222,223
 44058 00000B91 E0E1E2E3E4E5E6E7        	db	224,225,226,227,228,229,230,231
 44059 00000B99 E8E9EAEBECEDEEEF        	db	232,233,234,235,236,237,238,239
 44060 00000BA1 F0F1F2F3F4F5F6F7        	db	240,241,242,243,244,245,246,247
 44061 00000BA9 F8F9FAFBFCFDFEFF        	db	248,249,250,251,252,253,254,255
 44062                                  ;
 44063                                  ; file char list
 44064                                  ; ---------------------------------------------------------------------------
 44065                                  FILE_CHAR_TAB:	; label  byte
 44066 00000BB1 1600                    	dw	22				; length
 44067 00000BB3 0100FF                  	db	1,0,255 			; include all
 44068 00000BB6 000020                  	db	0,0,20h 			; exclude 0 - 20h
 44069 00000BB9 020E2E222F5C5B5D3A-     	db	2,14,'."/\[]:|<>+=;,'           ; exclude 14 special
 44069 00000BC2 7C3C3E2B3D3B2C     
 44070                                  	;db	24 dup (?)			; reserved
 44071 00000BC9 00<rep 18h>             	times	24 db 0
 44072                                  
 44073                                  ;
 44074                                  ; collate table
 44075                                  ; ---------------------------------------------------------------------------
 44076                                  COLLATE_TAB:	; label   byte
 44077 00000BE1 0001                    	dw	256
 44078 00000BE3 0001020304050607        	db	0,1,2,3,4,5,6,7
 44079 00000BEB 08090A0B0C0D0E0F        	db	8,9,10,11,12,13,14,15
 44080 00000BF3 1011121314151617        	db	16,17,18,19,20,21,22,23
 44081 00000BFB 18191A1B1C1D1E1F        	db	24,25,26,27,28,29,30,31
 44082 00000C03 2021222324252627        	db	" ","!",'"',"#","$","%","&","'"
 44083 00000C0B 28292A2B2C2D2E2F        	db	"(",")","*","+",",","-",".","/"
 44084 00000C13 3031323334353637        	db	"0","1","2","3","4","5","6","7"
 44085 00000C1B 38393A3B3C3D3E3F        	db	"8","9",":",";","<","=",">","?"
 44086 00000C23 4041424344454647        	db	"@","A","B","C","D","E","F","G"
 44087 00000C2B 48494A4B4C4D4E4F        	db	"H","I","J","K","L","M","N","O"
 44088 00000C33 5051525354555657        	db	"P","Q","R","S","T","U","V","W"
 44089 00000C3B 58595A5B5C5D5E5F        	db	"X","Y","Z","[","\","]","^","_"
 44090 00000C43 6041424344454647        	db	"`","A","B","C","D","E","F","G"
 44091 00000C4B 48494A4B4C4D4E4F        	db	"H","I","J","K","L","M","N","O"
 44092 00000C53 5051525354555657        	db	"P","Q","R","S","T","U","V","W"
 44093 00000C5B 58595A7B7C7D7E7F        	db	"X","Y","Z","{","|","}","~",127
 44094 00000C63 4355454141414143        	db	"C","U","E","A","A","A","A","C"
 44095 00000C6B 4545454949494141        	db	"E","E","E","I","I","I","A","A"
 44096 00000C73 4541414F4F4F5555        	db	"E","A","A","O","O","O","U","U"
 44097 00000C7B 594F552424242424        	db	"Y","O","U","$","$","$","$","$"
 44098 00000C83 41494F554E4EA6A7        	db	"A","I","O","U","N","N",166,167
 44099 00000C8B 3FA9AAABAC212222        	db	"?",169,170,171,172,"!",'"','"'
 44100 00000C93 B0B1B2B3B4B5B6B7        	db	176,177,178,179,180,181,182,183
 44101 00000C9B B8B9BABBBCBDBEBF        	db	184,185,186,187,188,189,190,191
 44102 00000CA3 C0C1C2C3C4C5C6C7        	db	192,193,194,195,196,197,198,199
 44103 00000CAB C8C9CACBCCCDCECF        	db	200,201,202,203,204,205,206,207
 44104 00000CB3 D0D1D2D3D4D5D6D7        	db	208,209,210,211,212,213,214,215
 44105 00000CBB D8D9DADBDCDDDEDF        	db	216,217,218,219,220,221,222,223
 44106 00000CC3 E053                    	db	224,"S"
 44107 00000CC5 E2E3E4E5E6E7            	db	226,227,228,229,230,231
 44108 00000CCB E8E9EAEBECEDEEEF        	db	232,233,234,235,236,237,238,239
 44109 00000CD3 F0F1F2F3F4F5F6F7        	db	240,241,242,243,244,245,246,247
 44110 00000CDB F8F9FAFBFCFDFEFF        	db	248,249,250,251,252,253,254,255
 44111                                  
 44112                                  ; ------------------------------------------------<MSKK01>----------------------
 44113                                  
 44114                                  ; DOSDATA:0CE3h
 44115                                  
 44116                                  ; 29/04/2019
 44117                                  
 44118                                  ; dbcs is not supported in DOS 3.3
 44119                                  ;		   DBCS_TAB	    CC_DBCS <>
 44120                                  ;
 44121                                  ; DBCS for DOS 4.00			   2/12/KK
 44122                                  
 44123                                  DBCS_TAB:	; label byte		;AN000;  2/12/KK
 44124                                  ; ------------------------------------------------<MSKK01>----------------------
 44125                                  ;ifdef	DBCS
 44126                                  ; ifdef	  JAPAN
 44127                                  ;		dw	6		; <MSKK01>
 44128                                  ;		db	081h,09fh	; <MSKK01>
 44129                                  ;		db	0e0h,0fch	; <MSKK01>
 44130                                  ;		db	0,0		; <MSKK01>
 44131                                  ;
 44132                                  ;		db	0,0,0,0,0,0,0,0,0,0	; <MSKK01>
 44133                                  ; endif
 44134                                  ; ifdef	  TAIWAN
 44135                                  ;		dw	4		; <TAIWAN>
 44136                                  ;		db	081h,0FEh	; <TAIWAN>
 44137                                  ;		db	0,0		; <TAIWAN>
 44138                                  ;
 44139                                  ;		db	0,0,0,0,0,0,0,0,0,0,0,0
 44140                                  ; endif
 44141                                  ; ifdef   KOREA                         ; Keyl
 44142                                  ;               dw      4               ; <KOREA>
 44143                                  ;               db      0A1h,0FEh       ; <KOREA>
 44144                                  ;               db      0,0             ; <KOREA>
 44145                                  ;
 44146                                  ;		db	0,0,0,0,0,0,0,0,0,0,0,0
 44147                                  ;  endif
 44148                                  ;else
 44149 00000CE3 0000                    		dw	0		;AN000;  2/12/KK      max number
 44150                                  		;db	16 dup(0)	;AN000;  2/12/KK
 44151 00000CE5 00<rep 10h>             		times	16 db 0
 44152                                  
 44153                                  ;		dw	6		;  2/12/KK
 44154                                  ;		db	081h,09Fh	;  2/12/KK
 44155                                  ;		db	0E0h,0FCh	;  2/12/KK
 44156                                  ;		db	0,0		;  2/12/KK
 44157                                  ;
 44158                                  ;endif
 44159                                  ; ------------------------------------------------<MSKK01>----------------------
 44160                                  
 44161                                  ; DOSDATA:0CF5h
 44162                                  
 44163                                  ; ---------------------------------------------------------------------------
 44164                                  ;
 44165                                  ;CASE MAPPER ROUTINE FOR 80H-FFH character range, DOS 3.3
 44166                                  ;     ENTRY: AL = Character to map
 44167                                  ;     EXIT:  AL = The converted character
 44168                                  ; Alters no registers except AL and flags.
 44169                                  ; The routine should do nothing to chars below 80H.
 44170                                  ; ---------------------------------------------------------------------------
 44171                                  ; Example:
 44172                                  
 44173                                  MAP_CASE:
 44174                                  ;Procedure MAP_CASE,FAR
 44175                                  
 44176 00000CF5 3C80                    	CMP	AL,80h
 44177 00000CF7 7301                    	JAE	short Map1	;Map no chars below 80H ever
 44178 00000CF9 CB                      	RETF
 44179                                  Map1:
 44180 00000CFA 2C80                    	SUB	AL,80h		;Turn into index value
 44181 00000CFC 1E                      	PUSH	DS
 44182 00000CFD 53                      	PUSH	BX
 44183 00000CFE BB[AF0A]                	MOV	BX,UCASE_TAB+2
 44184                                  FINISH:
 44185 00000D01 0E                      	PUSH	CS		;Move to DS
 44186 00000D02 1F                      	POP	DS
 44187 00000D03 D7                      	XLAT			;Get upper case character
 44188 00000D04 5B                      	POP	BX
 44189 00000D05 1F                      	POP	DS
 44190                                  L_RET:	
 44191 00000D06 CB                      	RETF
 44192                                  
 44193                                  ;EndProc MAP_CASE
 44194                                  
 44195                                  ; ---------------------------------------------------------------------------
 44196                                  
 44197                                  ; The variables for ECS version are moved here for the same data alignments
 44198                                  ; as IBM-DOS and MS-DOS.
 44199                                  
 44200                                  InterChar:
 44201 00000D07 00                      	db	0	; Interim character flag ( 1= interim)  ;AN000;
 44202                                  ;------- NOTE: NEXT TWO BYTES SOMETIMES USED AS A WORD !! -------------------
 44203                                  DUMMY:	; LABEL   WORD
 44204                                  InterCon:  
 44205 00000D08 00                      	db	0	; Console in Interim mode ( 1= interim) ;AN000;
 44206                                  SaveCurFlg:
 44207 00000D09 00                      	db	0	; Print, do not advance cursor flag     ;AN000;
 44208                                  
 44209                                  ; ---------------------------------------------------------------------------
 44210                                  
 44211 00000D0A 0000                    TEMPSEG:  dw	0	;hkn; used to store ds.
 44212                                  redir_patch:
 44213 00000D0C 00                      	  db	0
 44214                                  
 44215                                  ; DOSDATA:0D0Dh
 44216                                  
 44217                                  Mark1:	; label byte
 44218                                  
 44219                                  ;IF2
 44220                                  ;	IF ((OFFSET MARK1) GT (OFFSET MSVERSION) )
 44221                                  ;		%OUT !DATA CORRUPTION!MARK1 OFFSET TOO BIG. RE-ORGANIZE DATA.
 44222                                  ;	ENDIF
 44223                                  ;ENDIF
 44224                                  
 44225 00000D0D 00<rep 5h>              	  times 5 db 0
 44226                                  
 44227                                  ;############################################################################
 44228                                  ;
 44229                                  ; ** HACK FOR DOS 4.0 REDIR **
 44230                                  ; 
 44231                                  ; The redir requires the following:
 44232                                  ;
 44233                                  ;	MSVERS	offset D12H
 44234                                  ;	YRTAB	offset D14H
 44235                                  ; 	MONTAB	offset D1CH
 44236                                  ;
 44237                                  ; WARNING! WARNING!
 44238                                  ; 
 44239                                  ; MARK1 SHOULD NOT BE >= 0D12H. IF SOME VARIABLE IS TO BE ADDED ABOVE DO SO
 44240                                  ; WITHOUT VIOLATING THIS AND UPDATE THE FOLL. LINE
 44241                                  ;
 44242                                  ; CURRENTLY MARK1 = 0D0DH
 44243                                  ;
 44244                                  ;############################################################################
 44245                                  
 44246                                  	;ORG	0D12h
 44247                                  
 44248                                  ; DOSDATA:0D12h (MSDOS 6.21, MSDOS.SYS)
 44249                                  
 44250                                  	;db	6
 44251                                  	;db	20
 44252                                  
 44253                                  	; Offset 0C78h in IBMDOS.COM (MSDOS 3.3, 1987)
 44254                                  MSVERSION:				; MS-DOS version in hex for $GET_VERSION
 44255 00000D12 06                      MSMAJORV: DB	MAJOR_VERSION	; DOS_MAJOR_VERSION
 44256 00000D13 16                      MSMINORV: DB	MINOR_VERSION	; DOS_MINOR_VERSION  
 44257                                  
 44258                                  ; YRTAB & MONTAB moved from TABLE segment in ms_table.asm
 44259                                  ;
 44260                                  ;	I_am    YRTAB,8,<200,166,200,165,200,165,200,165>   
 44261                                  ;	I_am    MONTAB,12,<31,28,31,30,31,30,31,31,30,31,30,31> 
 44262                                  
 44263                                  ; Days in year
 44264                                  
 44265                                  YRTAB:   
 44266 00000D14 C8A6                    	DB	200,166			; Leap year
 44267 00000D16 C8A5                    	DB	200,165
 44268 00000D18 C8A5                    	DB	200,165
 44269 00000D1A C8A5                    	DB	200,165
 44270                                  
 44271                                  ; Days of each month
 44272                                  
 44273                                  MONTAB:        
 44274 00000D1C 1F                      	DB      31                      ; January
 44275                                  february:
 44276 00000D1D 1C                      	DB	28 			; February--reset each 
 44277                                  					; time year changes
 44278 00000D1E 1F                              DB      31                      ; March
 44279 00000D1F 1E                              DB      30                      ; April
 44280 00000D20 1F                              DB      31                      ; May
 44281 00000D21 1E                              DB      30                      ; June
 44282 00000D22 1F                              DB      31                      ; July
 44283 00000D23 1F                              DB      31                      ; August
 44284 00000D24 1E                              DB      30                      ; September
 44285 00000D25 1F                              DB      31                      ; October
 44286 00000D26 1E                              DB      30                      ; November
 44287 00000D27 1F                              DB      31                      ; December
 44288                                  
 44289                                  ;----------------THE FOLL. BLOCK MOVED FROM TABLE SEG IN MS_TABLE.ASM-------
 44290                                  
 44291                                  ; SYS init extended table,   DOS 3.3   F.C. 5/29/86
 44292                                  
 44293                                  SysInitTable:
 44294                                  	;dw	SYSINITVAR
 44295 00000D28 [2600]                  	dw	SYSINITVARS	; pointer to sysinit var
 44296 00000D2A 0000                            dw      0		; segment
 44297 00000D2C [0512]                          dw	COUNTRY_CDPG	; pointer to country tabl
 44298 00000D2E 0000                            dw      0		; segment of pointer
 44299                                  
 44300                                  ; DOS 3.3 F.C. 6/12/86
 44301                                  ; FASTOPEN communications area DOS 3.3   F.C. 5/29/86
 44302                                  
 44303                                  FastTable:				; a better name
 44304                                  FastOpenTable:
 44305 00000D30 0200                    	dw      2                       ; number of entries
 44306 00000D32 [EE12]                  	dw      FastRet			; pointer to ret instr.
 44307 00000D34 0000                    	dw      0                       ; and will be modified by
 44308 00000D36 [EE12]                  	dw      FastRet			; FASTxxx when loaded in
 44309 00000D38 0000                    	dw      0                       
 44310                                  
 44311                                  ; DOS 3.3 F.C. 6/12/86
 44312                                  
 44313                                  FastFlg:				; flags
 44314                                  FastOpenFlg:
 44315 00000D3A 00                      	db	0			; don't change the foll: order  
 44316                                  
 44317                                  ; FastOpen_Ext_Info is used as a temporary storage for saving dirpos,dirsec
 44318                                  ; and clusnum which are filled by DOS 3.nc when calling FastOpen Insert
 44319                                  ; or filled by FastOPen when calling FastOpen Lookup
 44320                                  
 44321                                  FastOpen_Ext_Info: ; label  byte	;dirpos
 44322                                  	;db	SIZE FASTOPEN_EXTENDED_INFO dup(0)
 44323                                  	;times	11 db 0
 44324 00000D3B 00<rep Bh>              	times	FEI.size db 0
 44325                                  
 44326                                  ; Dir_Info_Buff is a dir entry buffer which is filled by FastOPen
 44327                                  ; when calling FastOpen Lookup
 44328                                  
 44329                                  Dir_Info_Buff:	; label  byte
 44330                                  	;db   	SIZE dir_entry dup (0)
 44331                                  	;times	32 db 0
 44332 00000D46 00<rep 20h>             	times	dir_entry.size db 0
 44333                                  
 44334                                  Next_Element_Start:
 44335 00000D66 0000                    	dw	0			; save next element start offset
 44336                                  Del_ExtCluster:
 44337 00000D68 0000                    	dw	0			; for dos_delete                       
 44338                                  
 44339                                  ; The following is a stack and its pointer for interrupt 2F which is used
 44340                                  ; by NLSFUNC. There is no significant use of this stack, we are just trying
 44341                                  ; not to destroy the INT 21 stack saved for the user.
 44342                                  
 44343                                  USER_SP_2F:	; LABEL  WORD
 44344 00000D6A [6C0D]                  	dw    	FAKE_STACK_2F
 44345                                  
 44346                                  Packet_Temp:	; label  word		; temporary packet used by readtime
 44347                                  DOS_TEMP:	; label  word		; temporary word
 44348                                  FAKE_STACK_2F:  
 44349                                  	; dw  14 dup (0)		; 12 register temporary storage
 44350 00000D6C 0000<rep Eh>            	times 14 dw 0
 44351                                  
 44352                                  Hash_Temp: 	;label  word		; temporary word             
 44353                                  	;dw   4 dup (0)			; temporary hash table during config.sys
 44354 00000D88 0000<rep 4h>            	times 4 dw 0
 44355                                              	
 44356                                  SCAN_FLAG:	
 44357 00000D90 00                      	db     0			; flag to indicate key ALT_Q
 44358                                  DATE_FLAG:
 44359 00000D91 0000                    	dw     0                	; flag to update the date
 44360                                  
 44361                                  FETCHI_TAG:	; label  word		; OBSOLETE - no longer used
 44362 00000D93 0000                    	dw     0			; formerly part of IBM's piracy protection
 44363                                  
 44364                                  MSG_EXTERROR:	; label  DWORD   ; for system message addr                                                       
 44365 00000D95 00000000                	dd     0               		; for extended error                   
 44366 00000D99 00000000                	dd     0			; for parser                           
 44367 00000D9D 00000000                	dd     0			; for critical errror                  
 44368 00000DA1 00000000                	dd     0			; for IFS                              
 44369 00000DA5 00000000                	dd     0			; for code reduction                   
 44370                                  
 44371                                  SEQ_SECTOR:	; label  DWORD 		; last sector read                                                     
 44372 00000DA9 FFFFFFFF                	dd     -1                                                        
 44373                                  SC_SECTOR_SIZE:
 44374 00000DAD 0000                    	dw	0			; sector size for SC                 
 44375                                  SC_DRIVE:
 44376 00000DAF 00                      	db	0			; drive # for secondary cache        
 44377                                  CurSC_DRIVE:
 44378 00000DB0 FF                      	db	-1			; current SC drive                   
 44379                                  CurSC_SECTOR:
 44380 00000DB1 00000000                	dd	0			; current SC starting sector         
 44381                                  SC_STATUS:
 44382 00000DB5 0000                    	dw	0			; SC status word                     
 44383                                  SC_FLAG:
 44384 00000DB7 00                      	db	0			; SC flag                            
 44385                                  AbsDskErr:
 44386 00000DB8 0000                    	dw	0			; Storage for Abs dsk read/write err
 44387                                                                                            
 44388                                  NO_NAME_ID:	; label byte                                                           
 44389 00000DBA 4E4F204E414D452020-     	db	'NO NAME    '		; null media id                      
 44389 00000DC3 2020               
 44390                                  
 44391                                  ;hkn; moved from TABLE segment in kstrin.asm
 44392                                  
 44393                                  KISTR001S:	; label	byte		; 2/17/KK
 44394 00000DC5 00                      LOOKSIZ: DB	0			; 0 if byte, NZ if word	2/17/KK
 44395                                  KISTR001E:	; label	byte		; 2/17/KK
 44396                                  
 44397                                  ; the nul device driver used to be part of the code. However, since the 
 44398                                  ; header is in the data, and the entry points are only given as an offset,
 44399                                  ; the strategy and interrupt entry points must also be in the data now.
 44400                                  
 44401                                  ; DOSDATA:0DC6h
 44402                                  
 44403                                  SNULDEV:
 44404                                  ;procedure snuldev,far
 44405                                  	;or	word [es:bx+3],100h
 44406                                  	; 17/12/2022
 44407                                  	;or	byte [es:bx+4],01h
 44408 00000DC6 26804F0401              	or	byte [es:bx+SRHEAD.REQSTAT+1],(STDON>>8)
 44409                                  	;or	word [es:bx+SRHEAD.REQSTAT],STDON ; set done bit
 44410                                  INULDEV:
 44411 00000DCB CB                      	retf				; must not be a return!
 44412                                  ;endproc snuldev
 44413                                  
 44414                                  ;M044
 44415                                  ; Second part of save area for saving last para of Windows memory
 44416                                  
 44417                                  WinoldPatch2:
 44418                                  	;db	8 dup (?)	; M044
 44419 00000DCC 00<rep 8h>              	times	8 db 0	
 44420                                  UmbSave2:
 44421                                  	;db	5 dup (?)	; M062
 44422 00000DD4 00<rep 5h>              	times	5 db 0
 44423                                  UmbSaveFlag:
 44424 00000DD9 00                      	db	0		; M062
 44425                                  
 44426                                  ; DOSDATA:0DDBh
 44427                                  
 44428                                  Mark2:	; label byte
 44429                                  
 44430                                  ;IF2
 44431                                  ;	IF ((OFFSET MARK2) GT (OFFSET ERR_TABLE_21) )
 44432                                  ;		%OUT !DATA CORRUPTION!MARK2 OFFSET TOO BIG. RE-ORGANIZE DATA.
 44433                                  ;	ENDIF
 44434                                  ;ENDIF
 44435                                  
 44436                                  ;############################################################################
 44437                                  ;
 44438                                  ; ** HACK FOR DOS 4.0 REDIR **
 44439                                  ; 
 44440                                  ; The redir requires the following:
 44441                                  ;
 44442                                  ;	ERR_TABLE_21	offset DDBH
 44443                                  ;	ERR_TABLE_24	offset E5BH
 44444                                  ; 	ErrMap24	offset EABH
 44445                                  ;
 44446                                  ; WARNING! WARNING!
 44447                                  ;
 44448                                  ; MARK2 SHOULD NOT BE >= 0DDBH. IF SOME VARIABLE IS TO BE ADDED ABOVE DO SO
 44449                                  ; WITHOUT VIOLATING THIS AND UPDATE THE FOLL. LINE
 44450                                  ;
 44451                                  ; CURRENTLY MARK2 = 0DD0H
 44452                                  ;
 44453                                  ;############################################################################
 44454                                  
 44455                                  	;ORG	0DDBh
 44456                                  
 44457                                  ; DOSDATA:0DDBh (MSDOS 6.21, MSDOS.SYS)
 44458                                  
 44459                                  ; ---------------------------------------------------------------------------
 44460                                  ;
 44461                                  ; The following table defines CLASS ACTION and LOCUS info for the INT 21H
 44462                                  ; errors. Each entry is 4 bytes long:
 44463                                  ;
 44464                                  ;       Err#,Class,Action,Locus
 44465                                  ;
 44466                                  ; A value of 0FFh indicates a call specific value (ie. should already
 44467                                  ; be set). AN ERROR CODE NOT IN THE TABLE FALLS THROUGH TO THE CATCH ALL AT
 44468                                  ; THE END, IT IS ASSUMES THAT CLASS, ACTION, LOCUS IS ALREADY SET.
 44469                                  ;
 44470                                  ; ---------------------------------------------------------------------------
 44471                                  
 44472                                  ;ErrTab  Macro   err,class,action,locus
 44473                                  ;ifidn <locus>,<0FFh>
 44474                                  ;    DB  error_&err,errCLASS_&class,errACT_&action,0FFh
 44475                                  ;ELSE
 44476                                  ;    DB  error_&err,errCLASS_&class,errACT_&action,errLOC_&locus
 44477                                  ;ENDIF
 44478                                  ;ENDM
 44479                                  
 44480                                  ERR_TABLE_21: ; LABEL   BYTE
 44481 00000DDA 010704FF                    DB  error_invalid_function,       errCLASS_Apperr,    errACT_Abort,    0FFh
 44482 00000DDE 02080302                    DB  error_file_not_found,         errCLASS_NotFnd,    errACT_User,     errLOC_Disk
 44483 00000DE2 03080302                    DB  error_path_not_found,         errCLASS_NotFnd,    errACT_User,     errLOC_Disk
 44484 00000DE6 04010401                    DB  error_too_many_open_files,    errCLASS_OutRes,    errACT_Abort,    errLOC_Unk
 44485 00000DEA 050303FF                    DB  error_access_denied,          errCLASS_Auth,      errACT_User,     0FFh
 44486 00000DEE 06070401                    DB  error_invalid_handle,         errCLASS_Apperr,    errACT_Abort,    errLOC_Unk
 44487 00000DF2 07070505                    DB  error_arena_trashed,          errCLASS_Apperr,    errACT_Panic,    errLOC_Mem
 44488 00000DF6 08010405                    DB  error_not_enough_memory,      errCLASS_OutRes,    errACT_Abort,    errLOC_Mem
 44489 00000DFA 09070405                    DB  error_invalid_block,          errCLASS_Apperr,    errACT_Abort,    errLOC_Mem
 44490 00000DFE 0A070405                    DB  error_bad_environment,        errCLASS_Apperr,    errACT_Abort,    errLOC_Mem
 44491 00000E02 0B090301                    DB  error_bad_format,             errCLASS_BadFmt,    errACT_User,     errLOC_Unk
 44492 00000E06 0C070401                    DB  error_invalid_access,         errCLASS_Apperr,    errACT_Abort,    errLOC_Unk
 44493 00000E0A 0D090401                    DB  error_invalid_data,           errCLASS_BadFmt,    errACT_Abort,    errLOC_Unk
 44494 00000E0E 0F080302                    DB  error_invalid_drive,          errCLASS_NotFnd,    errACT_User,     errLOC_Disk
 44495 00000E12 10030302                    DB  error_current_directory,      errCLASS_Auth,      errACT_User,     errLOC_Disk
 44496 00000E16 110D0302                    DB  error_not_same_device,        errCLASS_Unk,       errACT_User,     errLOC_Disk
 44497 00000E1A 12080302                    DB  error_no_more_files,          errCLASS_NotFnd,    errACT_User,     errLOC_Disk
 44498 00000E1E 500C0302                    DB  error_file_exists,            errCLASS_Already,   errACT_User,     errLOC_Disk
 44499 00000E22 200A0202                    DB  error_sharing_violation,      errCLASS_Locked,    errACT_DlyRet,   errLOC_Disk
 44500 00000E26 210A0202                    DB  error_lock_violation,         errCLASS_Locked,    errACT_DlyRet,   errLOC_Disk
 44501 00000E2A 540104FF                    DB  error_out_of_structures,      errCLASS_OutRes,    errACT_Abort,    0FFh
 44502 00000E2E 56030301                    DB  error_invalid_password,       errCLASS_Auth,      errACT_User,     errLOC_Unk
 44503 00000E32 52010402                    DB  error_cannot_make,            errCLASS_OutRes,    errACT_Abort,    errLOC_Disk
 44504 00000E36 32090303                    DB  error_not_supported,          errCLASS_BadFmt,    errACT_User,     errLOC_Net
 44505 00000E3A 550C0303                    DB  error_already_assigned,       errCLASS_Already,   errACT_User,     errLOC_Net
 44506 00000E3E 57090301                    DB  error_invalid_parameter,      errCLASS_BadFmt,    errACT_User,     errLOC_Unk
 44507 00000E42 530D0401                    DB  error_FAIL_I24,               errCLASS_Unk,       errACT_Abort,    errLOC_Unk
 44508 00000E46 24010405                    DB  error_sharing_buffer_exceeded,errCLASS_OutRes,    errACT_Abort,    errLOC_Mem
 44509                                      ; MSDOS 6.0
 44510 00000E4A 26010401                    DB  error_handle_EOF,             errCLASS_OutRes,    errACT_Abort,    errLOC_Unk ;AN000;
 44511 00000E4E 27010401                    DB  error_handle_Disk_Full,       errCLASS_OutRes,    errACT_Abort,    errLOC_Unk ;AN000;
 44512 00000E52 5A0D0402                    DB  error_sys_comp_not_loaded,    errCLASS_Unk,       errACT_Abort,    errLOC_Disk ;AN001;
 44513 00000E56 FFFFFFFF                    DB  0FFh,                         0FFH,       	  0FFH,       	   0FFh
 44514                                  
 44515                                  ; MSDOS 3.3 (IBMDOS.COM, 1987) - Offset 0D2Ah
 44516                                  ;ERR_TABLE_21:	db 1,7,4,0FFh
 44517                                  ;		db 2,8,3,2
 44518                                  ;		db 3,8,3,2
 44519                                  ;		db 4,1,4,1
 44520                                  ;		db 5,3,3,0FFh
 44521                                  ;		db 6,7,4,1
 44522                                  ;		db 7,7,5,5
 44523                                  ;		db 8,1,4,5
 44524                                  ;		db 9,7,4,5
 44525                                  ;		db 0Ah,7,4,5
 44526                                  ;		db 0Bh,9,3,1
 44527                                  ;		db 0Ch,7,4,1
 44528                                  ;		db 0Dh,9,4,1
 44529                                  ;		db 0Fh,8,3,2
 44530                                  ;		db 10h,3,3,2
 44531                                  ;		db 11h,0Dh,3,2
 44532                                  ;		db 12h,8,3,2
 44533                                  ;		db 50h,0Ch,3,2
 44534                                  ;		db 20h,0Ah,2,2
 44535                                  ;		db 21h,0Ah,2,2
 44536                                  ;		db 54h,1,4,0FFh
 44537                                  ;		db 56h,3,3,1
 44538                                  ;		db 52h,1,4,2
 44539                                  ;		db 32h,9,3,3
 44540                                  ;		db 55h,0Ch,3,3
 44541                                  ;		db 57h,9,3,1
 44542                                  ;		db 53h,0Dh,4,1
 44543                                  ;		db 24h,1,4,5
 44544                                  ; MSDOS 6.0 (MSDOS 6.21)
 44545                                  ;		db 26h,1,4,1
 44546                                  ;		db 27h,1,4,1
 44547                                  ;		db 5Ah,0Dh,4,2
 44548                                  ; MSDOS 6.0 & MSDOS 3.3
 44549                                  ;		db 0FFh,0FFh,0FFh,0FFh
 44550                                  
 44551                                  ; DOSDATA:0E5Bh (MSDOS 6.21, MSDOS.SYS)
 44552                                  
 44553                                  ; ---------------------------------------------------------------------------
 44554                                  ;
 44555                                  ; The following table defines CLASS ACTION and LOCUS info for the INT 24H
 44556                                  ; errors. Each entry is 4 bytes long:
 44557                                  ;
 44558                                  ;       Err#,Class,Action,Locus
 44559                                  ;
 44560                                  ; A Locus value of 0FFh indicates a call specific value (ie. should already
 44561                                  ; be set). AN ERROR CODE NOT IN THE TABLE FALLS THROUGH TO THE CATCH ALL AT
 44562                                  ; THE END.
 44563                                  ;
 44564                                  ; ---------------------------------------------------------------------------
 44565                                  
 44566                                  ERR_TABLE_24: ; LABEL   BYTE
 44567 00000E5A 130B0702                    DB  error_write_protect,          errCLASS_Media,     errACT_IntRet,   errLOC_Disk
 44568 00000E5E 14040501                    DB  error_bad_unit,               errCLASS_Intrn,     errACT_Panic,    errLOC_Unk
 44569 00000E62 150507FF                    DB  error_not_ready,              errCLASS_HrdFail,   errACT_IntRet,   0FFh
 44570 00000E66 16040501                    DB  error_bad_command,            errCLASS_Intrn,     errACT_Panic,    errLOC_Unk
 44571 00000E6A 170B0402                    DB  error_CRC,                    errCLASS_Media,     errACT_Abort,    errLOC_Disk
 44572 00000E6E 18040501                    DB  error_bad_length,             errCLASS_Intrn,     errACT_Panic,    errLOC_Unk
 44573 00000E72 19050102                    DB  error_seek,                   errCLASS_HrdFail,   errACT_Retry,    errLOC_Disk
 44574 00000E76 1A0B0702                    DB  error_not_DOS_disk,           errCLASS_Media,     errACT_IntRet,   errLOC_Disk
 44575 00000E7A 1B0B0402                    DB  error_sector_not_found,       errCLASS_Media,     errACT_Abort,    errLOC_Disk
 44576 00000E7E 1C020704                    DB  error_out_of_paper,           errCLASS_TempSit,   errACT_IntRet,   errLOC_SerDev
 44577 00000E82 1D0504FF                    DB  error_write_fault,            errCLASS_HrdFail,   errACT_Abort,    0FFh
 44578 00000E86 1E0504FF                    DB  error_read_fault,             errCLASS_HrdFail,   errACT_Abort,    0FFh
 44579 00000E8A 1F0D04FF                    DB  error_gen_failure,            errCLASS_Unk,       errACT_Abort,    0FFh
 44580 00000E8E 200A0202                    DB  error_sharing_violation,      errCLASS_Locked,    errACT_DlyRet,   errLOC_Disk
 44581 00000E92 210A0202                    DB  error_lock_violation,         errCLASS_Locked,    errACT_DlyRet,   errLOC_Disk
 44582 00000E96 220B0702                    DB  error_wrong_disk,             errCLASS_Media,     errACT_IntRet,   errLOC_Disk
 44583 00000E9A 32090303                    DB  error_not_supported,          errCLASS_BadFmt,    errACT_User,     errLOC_Net
 44584 00000E9E 23070401                    DB  error_FCB_unavailable,        errCLASS_Apperr,    errACT_Abort,    errLOC_Unk
 44585 00000EA2 24010405                    DB  error_sharing_buffer_exceeded,errCLASS_OutRes,    errACT_Abort,    errLOC_Mem
 44586 00000EA6 FF0D05FF                    DB	0FFh,                         errCLASS_Unk,       errACT_Panic,    0FFh
 44587                                  
 44588                                  ; MSDOS 3.3 (IBMDOS.COM, 1987) - Offset 0D9Eh
 44589                                  ;ERR_TABLE_24:	db 13h,0Bh,7,2
 44590                                  ;		db 14h,4,5,1
 44591                                  ;		db 15h,5,7,0FFh
 44592                                  ;		db 16h,4,5,1
 44593                                  ;		db 17h,0Bh,4,2
 44594                                  ;		db 18h,4,5,1
 44595                                  ;		db 19h,5,1,2
 44596                                  ;		db 1Ah,0Bh,7,2
 44597                                  ;		db 1Bh,0Bh,4,2
 44598                                  ;		db 1Ch,2,7,4
 44599                                  ;		db 1Dh,5,4,0FFh
 44600                                  ;		db 1Eh,5,4,0FFh
 44601                                  ;		db 1Fh,0Dh,4,0FFh
 44602                                  ;		db 20h,0Ah,2,2
 44603                                  ;		db 21h,0Ah,2,2
 44604                                  ;		db 22h,0Bh,7,2
 44605                                  ;		db 32h,9,3,3
 44606                                  ;		db 23h,7,4,1
 44607                                  ;		db 24h,1,4,5
 44608                                  ;		db 0FFh,0Dh,5,0FFh
 44609                                  
 44610                                  ; DOSDATA:0EABh (MSDOS 6.21, MSDOS.SYS)
 44611                                  
 44612                                  ; ---------------------------------------------------------------------------
 44613                                  ;
 44614                                  ; We need to map old int 24 errors and device driver errors into the new set
 44615                                  ; of errors. The following table is indexed by the new errors
 44616                                  ;
 44617                                  ; ---------------------------------------------------------------------------
 44618                                  
 44619                                  ;Public  ErrMap24
 44620                                  ErrMap24: ; Label   BYTE
 44621 00000EAA 13                          DB  error_write_protect	; 0
 44622 00000EAB 14                          DB  error_bad_unit		; 1
 44623 00000EAC 15                          DB  error_not_ready		; 2
 44624 00000EAD 16                          DB  error_bad_command	; 3
 44625 00000EAE 17                          DB  error_CRC		; 4
 44626 00000EAF 18                          DB  error_bad_length	; 5
 44627 00000EB0 19                          DB  error_seek		; 6
 44628 00000EB1 1A                          DB  error_not_DOS_disk	; 7
 44629 00000EB2 1B                          DB  error_sector_not_found	; 8
 44630 00000EB3 1C                          DB  error_out_of_paper	; 9
 44631 00000EB4 1D                          DB  error_write_fault	; A
 44632 00000EB5 1E                          DB  error_read_fault	; B
 44633 00000EB6 1F                          DB  error_gen_failure	; C
 44634 00000EB7 1F                          DB  error_gen_failure	; D  RESERVED
 44635 00000EB8 1F                          DB  error_gen_failure	; E  RESERVED
 44636 00000EB9 22                          DB  error_wrong_disk	; F
 44637                                  
 44638                                  ;ErrMap24: db 13h, 14h, 15h, 16h, 17h, 18h, 19h, 1Ah
 44639                                  ;	   db 1Bh, 1Ch, 1Dh, 1Eh, 1Fh, 1Fh, 1Fh, 22h
 44640                                  	
 44641                                  ErrMap24End: ; LABEL   BYTE
 44642                                  
 44643                                  ; DOSDATA:0E5Bh (MSDOS 6.21, MSDOS.SYS)
 44644                                  
 44645                                  ; ---------------------------------------------------------------------------
 44646                                  
 44647                                  ; 27/04/2019 - Retro DOS v4.0
 44648                                  
 44649                                  FIRST_BUFF_ADDR:
 44650 00000EBA 0000                    	dw	0			; first buffer address               
 44651                                  SPECIAL_VERSION:
 44652 00000EBC 0000                    	dw	0			;AN006; used by INT 2F 47H
 44653                                  FAKE_COUNT:
 44654 00000EBE 00<rep FFh>             	times 255 db 0			;AN008; fake version count
 44655                                  OLD_FIRSTCLUS:
 44656 00000FBD 0000                    	dw	0			;AN011; save old first cluster for fastopen
 44657                                  
 44658                                  ; ---------------------------------------------------------------------------
 44659                                  
 44660                                  ;smr; moved from TABLE segment in exec.asm
 44661                                  
 44662 00000FBF 0000                    exec_init_SP: dw 0
 44663 00000FC1 0000                    exec_init_SS: dw 0
 44664 00000FC3 0000                    exec_init_IP: dw 0
 44665 00000FC5 0000                    exec_init_CS: dw 0
 44666                                  
 44667                                  exec_signature:
 44668 00000FC7 0000                    	dw	0	; must contain 4D5A  (yay zibo!)
 44669                                  exec_len_mod_512:
 44670 00000FC9 0000                    	dw	0	; low 9 bits of length
 44671                                  exec_pages:
 44672 00000FCB 0000                    	dw	0	; number of 512b pages in file
 44673                                  exec_rle_count:
 44674 00000FCD 0000                    	dw	0	; count of reloc entries
 44675                                  exec_par_dir:
 44676 00000FCF 0000                    	dw	0	; number of paragraphs before image
 44677                                  exec_min_BSS:
 44678 00000FD1 0000                    	dw	0	; minimum number of para of BSS
 44679                                  exec_max_BSS:
 44680 00000FD3 0000                    	dw	0	; max number of para of BSS
 44681                                  exec_SS:
 44682 00000FD5 0000                    	dw	0	; stack of image
 44683                                  exec_SP:
 44684 00000FD7 0000                    	dw	0	; SP of image
 44685                                  exec_chksum:
 44686 00000FD9 0000                    	dw	0	; checksum  of file (ignored)
 44687                                  exec_IP:
 44688 00000FDB 0000                    	dw	0	; IP of entry
 44689                                  exec_CS:
 44690 00000FDD 0000                    	dw	0	; CS of entry
 44691                                  exec_rle_table:
 44692 00000FDF 0000                    	dw	0	; byte offset of reloc table
 44693                                  
 44694                                  exec_header_len	equ $-exec_signature			;PBUGBUG
 44695                                  
 44696                                  ;smr; eom
 44697                                  
 44698                                  ; ---------------------------------------------------------------------------
 44699                                  
 44700                                  ;SR;
 44701                                  ; WIN386 instance table for DOS
 44702                                  
 44703                                  Win386_Info:
 44704 00000FE1 0300                    	db	3, 0
 44705 00000FE3 000000000000000000-     	dd	0, 0, 0
 44705 00000FEC 000000             
 44706 00000FEF [F30F]0000              	dw	Instance_Table, 0
 44707                                  
 44708                                  Instance_Table:
 44709 00000FF3 [2200]00000200          	dw	CONTPOS, 0, 2
 44710 00000FF9 [3200]00000400          	dw	BCON, 0, 4
 44711 00000FFF [F901]00000601          	dw	CARPOS, 0, 106h
 44712 00001005 [0003]00000100          	dw	CHARCO, 0, 1
 44713 0000100B [BF0F]00002200          	dw	exec_init_SP, 0, 34	; M074
 44714 00001011 [8900]00000100          	dw	UMBFLAG,0,1		; M019
 44715 00001017 [8C00]00000200          	dw	UMB_HEAD,0,2		; M019
 44716 0000101D 00000000                	dw	0, 0
 44717                                  
 44718                                  ; M001; SR;
 44719                                  ; M001; On DOSMGR call ( cx == 0 ), we need to return a table of offsets of 
 44720                                  ; M001; some DOS variables. Note that the only really important variable in 
 44721                                  ; M001; this is User_Id. The other variables are needed only to patch stuff 
 44722                                  ; M001; which does not need to be done in DOS 5.0. 
 44723                                  
 44724                                  ; 29/12/2022
 44725                                  ; (MSDOS 6.21 MSDOS.SYS DOSDATA:1022h)
 44726                                  
 44727                                  Win386_DOSVars:
 44728 00001021 05                      	db	5	;Major version 5 ; M001
 44729 00001022 00                      	db	0	;Minor version 0 ; M001
 44730 00001023 [EC05]                  	dw	SAVEDS	; M001
 44731 00001025 [EA05]                  	dw	SAVEBX	; M001
 44732 00001027 [2103]                  	dw	INDOS	; M001
 44733 00001029 [3E03]                  	dw	USER_ID	; M001
 44734 0000102B [1503]                  	dw	CritPatch ; M001
 44735 0000102D [8C00]                  	dw	UMB_HEAD ; M012
 44736                                  
 44737                                  ;SR;
 44738                                  ; Flag to indicate whether WIN386 is running or not
 44739                                  
 44740 0000102F 00                      IsWin386: db	0
 44741                                  
 44742                                  ;M018
 44743                                  ; This variable contains the path to the VxD device needed for Win386
 44744                                  
 44745 00001030 633A5C77696E613230-     VxDpath:  db	'c:\wina20.386',0	;M018
 44745 00001039 2E33383600         
 44746                                  
 44747                                  ;End WIN386 support
 44748                                  
 44749                                  ; ---------------------------------------------------------------------------
 44750                                  
 44751                                  ;SR;
 44752                                  ; These variables have been added for the special lie support for device
 44753                                  ;drivers.
 44754                                  ;
 44755                                  
 44756                                  DriverLoad:	
 44757 0000103E 01                      	db	1	;initialized to do special handling
 44758                                  BiosDataPtr:
 44759 0000103F 00000000                	dd	0
 44760                                  
 44761                                  ; 29/12/2022 - REetro DOS v4.1
 44762                                  %if 0
 44763                                  
 44764                                  ; 27/04/2019 - Retro DOS v4.0
 44765                                  ; 04/11/2022
 44766                                  ; DOSDATA:1044h (MSDOS 6.21 & MSDOS 5.0, MSDOS.SYS)
 44767                                  
 44768                                  ;------------------------------------------------------------------------
 44769                                  ; Patch for Sidekick
 44770                                  ;
 44771                                  ; A documented method for finding the offset of the Errormode flag in the 
 44772                                  ; dos swappable data area if for the app to scan in the dos segment (data) 
 44773                                  ; for the following sequence of instructions.
 44774                                  ;
 44775                                  ; Ref: Part C, Article 11, pg 356 of MSDOS Encyclopedia
 44776                                  ;
 44777                                  ; The Offset of Errormode flag is 0320h
 44778                                  ;
 44779                                  ;------------------------------------------------------------------------
 44780                                  
 44781                                  	db	036h, 0F6h, 06h, 020h, 03h, 0FFh ; test ss:[errormode], -1
 44782                                  	db	075h, 0Ch			 ; jnz  NearLabel
 44783                                  	db	036h, 0FFh, 036h, 058h, 03h	 ; push ss:[NearWord]
 44784                                  	db	0CDh, 028h			 ; int  28h
 44785                                  
 44786                                  ;--------------------------------------------------------------------------
 44787                                  ; Patch for PortOfEntry - M036
 44788                                  ;
 44789                                  ; PortOfEntry by Sector Technology uses an un documented way of determining
 44790                                  ; the offset of Errormode flag. The following patch is to support them in 
 44791                                  ; DOS 5.0. The corresponding code is actually in msdisp.asm
 44792                                  ;
 44793                                  ;---------------------------------------------------------------------------
 44794                                  
 44795                                  	db 	080h, 03Eh, 020h, 03h, 00h 	 ; cmp 	[errormode], 0
 44796                                  	db	075h, 037h			 ; jnz	NearLabel
 44797                                  	db 	0BCh, 0A0h, 0Ah		  	 ; mov	sp, dosdata:iostack
 44798                                  
 44799                                  %endif ; 29/12/2022
 44800                                  
 44801                                  ; DOSDATA:105Dh (MSDOS 6.21, MSDOS.SYS)
 44802                                  
 44803                                  ;--------------------------------------------------------------------------
 44804                                  
 44805                                  ;*** New FCB Implementation
 44806                                  ; This variable is used as a cache in the new FCB implementation to remember
 44807                                  ;the address of a local SFT that can be recycled for a regenerate operation
 44808                                  
 44809 00001043 00000000                LocalSFT: dd	0		; 0 to indicate invalid pointer
 44810                                  
 44811                                  ;DOSDATA ENDS
 44812                                  
 44813                                  ;============================================================================
 44814                                  ; LMSTUB.ASM (MSDOS 6.0, 1991)
 44815                                  ;============================================================================
 44816                                  ; 27/04/2019 - Retro DOS 4.0
 44817                                  
 44818                                  ;DOSDATA  SEGMENT WORD PUBLIC 'DATA'
 44819                                  
 44820                                  ;---------------------------------------------------------------------------
 44821                                  ;	Low Memory Stub for DOS when DOS runs in HMA
 44822                                  ;----------------------------------------------------------------------------
 44823                                  	
 44824                                  	;db	90h
 44825                                  
 44826                                  	;EVEN
 44827 00001047 90                      align 2
 44828                                  
 44829                                  ; DOSDATA:1062h (MSDOS 6.21, MSDOS.SYS)
 44830                                  
 44831                                  DOSINTTABLE:	; LABEL	DWORD
 44832                                  
 44833                                  	;DW	OFFSET DOSCODE:DIVOV 		, 0
 44834                                  	;DW	OFFSET DOSCODE:QUIT 		, 0
 44835                                  	;DW	OFFSET DOSCODE:COMMAND		, 0
 44836                                  	;DW	OFFSET DOSCODE:ABSDRD		, 0
 44837                                  	;DW	OFFSET DOSCODE:ABSDWRT		, 0
 44838                                  	;DW	OFFSET DOSCODE:Stay_resident	, 0
 44839                                  	;DW	OFFSET DOSCODE:INT2F		, 0
 44840                                  	;DW	OFFSET DOSCODE:CALL_ENTRY	, 0
 44841                                  	;DW	OFFSET DOSCODE:IRETT		, 0
 44842                                  	
 44843 00001048 [6653]0000              	dw	DIVOV 		, 0  ; DOSINTTABLE+0
 44844 0000104C [E002]0000              	dw	QUIT 		, 0  ; DOSINTTABLE+4	
 44845 00001050 [0C03]0000              	dw	COMMAND		, 0  ; DOSINTTABLE+8
 44846 00001054 [3F05]0000              	dw	ABSDRD		, 0  ; DOSINTTABLE+12
 44847 00001058 [C605]0000              	dw	ABSDWRT		, 0  ; DOSINTTABLE+16
 44848 0000105C [BA62]0000              	dw	STAY_RESIDENT	, 0  ; DOSINTTABLE+20
 44849 00001060 [1507]0000              	dw	INT2F		, 0  ; DOSINTTABLE+24
 44850 00001064 [E702]0000              	dw	CALL_ENTRY	, 0  ; DOSINTTABLE+28
 44851 00001068 [E602]0000              	dw	IRETT		, 0  ; DOSINTTABLE+32
 44852                                  
 44853 0000106C 0000                    SS_Save: dw	0		; save user's stack segment
 44854 0000106E 0000                    SP_Save: dw	0		; save user's stack offset
 44855                                  
 44856                                  ;-------------------------------------------------------------------------
 44857                                  ;
 44858                                  ; LOW MEM STUB:
 44859                                  ;
 44860                                  ; The low mem stub contains the entry points into DOS for all interrupts 
 44861                                  ; handled by DOS. This stub is installed if the user specifies that the 
 44862                                  ; DOS load in HIMEM. Each entry point does this.
 44863                                  ;
 44864                                  ; 	1. if jmp to 8 has been patched out
 44865                                  ;	   2. if A20 OFF
 44866                                  ;	      3. Enable A20
 44867                                  ;	   4. else 
 44868                                  ;	      5. just go to dos entry
 44869                                  ;	   6. endif
 44870                                  ;	7. else
 44871                                  ;	   8. just go to dos entry
 44872                                  ;	9. endif
 44873                                  ;
 44874                                  ;--------------------------------------------------------------------------
 44875                                  
 44876                                  ; 27/04/2019 - Retro DOS v4.0
 44877                                  
 44878                                  ; DOSDATA:108Ah (MSDOS 6.21, MSDOS.SYS)
 44879                                  
 44880                                  ;--------------------------------------------------------------------------
 44881                                  ;
 44882                                  ; DIVIDE BY 0 handler
 44883                                  ;
 44884                                  ;--------------------------------------------------------------------------
 44885                                  
 44886                                  ldivov:
 44887                                  	; The following jump, skipping the XMS calls will be patched to 
 44888                                  	; NOPS by SEG_REINIT if DOS successfully loads high. This jump is 
 44889                                  	; needed because the stub is installed even before the XMS driver
 44890                                  	; is loaded if the user specifies dos=high in the config.sys
 44891                                  i0patch:
 44892 00001070 EB03                    	jmp	short divov_cont	
 44893                                  
 44894 00001072 E8E000                  	call	EnsureA20ON		; we must turn on A20 if OFF	
 44895                                  divov_cont:
 44896 00001075 2EFF2E[4810]            	jmp	far [cs:DOSINTTABLE]	; jmp to DOS
 44897                                  
 44898                                  ;------------------------------------------------------------------------
 44899                                  ;
 44900                                  ; INT 20 Handler
 44901                                  ;
 44902                                  ; Here we do not have to set up the stack to return here as the abort call
 44903                                  ; will return to the address after the int 21 ah=4b call. This would be the
 44904                                  ; common exit point if A20 had been OFF (for TOGGLE DOS) and the A20 line
 44905                                  ; will be restored then.
 44906                                  ;
 44907                                  ;-------------------------------------------------------------------------
 44908                                  
 44909                                  lquit:
 44910                                  	; The following jump, skipping the XMS calls will be patched to 
 44911                                  	; NOPS by SEG_REINIT if DOS successfully loads high. This jump is 
 44912                                  	; needed because the stub is installed even before the XMS driver
 44913                                  	; is loaded if the user specifies dos=high in the config.sys
 44914                                  i20patch:
 44915 0000107A EB03                    	jmp	short quit_cont	
 44916                                  
 44917 0000107C E8D600                  	call	EnsureA20ON		; we must turn on A20 if OFF	
 44918                                  quit_cont:
 44919 0000107F 2EFF2E[4C10]            	jmp	far [cs:DOSINTTABLE+4]	; jump to DOS
 44920                                  
 44921                                  ;--------------------------------------------------------------------------
 44922                                  ;
 44923                                  ; INT 21 Handler
 44924                                  ;
 44925                                  ;--------------------------------------------------------------------------
 44926                                  
 44927                                  lcommand:
 44928                                  	; The following jump, skipping the XMS calls will be patched to 
 44929                                  	; NOPS by SEG_REINIT if DOS successfully loads high. This jump is 
 44930                                  	; needed because the stub is installed even before the XMS driver
 44931                                  	; is loaded if the user specifies dos=high in the config.sys
 44932                                  i21patch:
 44933 00001084 EB03                    	jmp	short command_cont	
 44934                                  
 44935 00001086 E8CC00                  	call	EnsureA20ON		; we must turn on A20 if OFF	
 44936                                  command_cont:
 44937 00001089 2EFF2E[5010]            	jmp	far [cs:DOSINTTABLE+8]	; jmp to DOS
 44938                                  
 44939                                  ;------------------------------------------------------------------------
 44940                                  ;
 44941                                  ; INT 25 
 44942                                  ;
 44943                                  ;----------------------------------------------------------------------------
 44944                                  
 44945                                  labsdrd:
 44946                                  	; The following jump, skipping the XMS calls will be patched to 
 44947                                  	; NOPS by SEG_REINIT if DOS successfully loads high. This jump is 
 44948                                  	; needed because the stub is installed even before the XMS driver
 44949                                  	; is loaded if the user specifies dos=high in the config.sys
 44950                                  i25patch:
 44951 0000108E EB03                    	jmp	short absdrd_cont	
 44952                                  
 44953 00001090 E8C200                  	call	EnsureA20ON		; we must turn on A20 if OFF	
 44954                                  absdrd_cont:
 44955 00001093 2EFF2E[5410]            	jmp	far [cs:DOSINTTABLE+12]	; jmp to DOS
 44956                                  
 44957                                  ;-------------------------------------------------------------------------
 44958                                  ;
 44959                                  ; INT 26
 44960                                  ;
 44961                                  ;-----------------------------------------------------------------------
 44962                                  
 44963                                  labsdwrt:
 44964                                  	; The following jump, skipping the XMS calls will be patched to 
 44965                                  	; NOPS by SEG_REINIT if DOS successfully loads high. This jump is 
 44966                                  	; needed because the stub is installed even before the XMS driver
 44967                                  	; is loaded if the user specifies dos=high in the config.sys
 44968                                  i26patch:
 44969 00001098 EB03                    	jmp	short absdwrt_cont	
 44970                                  
 44971 0000109A E8B800                  	call	EnsureA20ON		; we must turn on A20 if OFF	
 44972                                  absdwrt_cont:
 44973 0000109D 2EFF2E[5810]            	jmp	far [cs:DOSINTTABLE+16]	; jmp to DOS
 44974                                  
 44975                                  ;------------------------------------------------------------------------
 44976                                  ;
 44977                                  ; INT 27
 44978                                  ;
 44979                                  ;-----------------------------------------------------------------------
 44980                                  
 44981                                  lstay_resident:
 44982                                  	; The following jump, skipping the XMS calls will be patched to 
 44983                                  	; NOPS by SEG_REINIT if DOS successfully loads high. This jump is 
 44984                                  	; needed because the stub is installed even before the XMS driver
 44985                                  	; is loaded if the user specifies dos=high in the config.sys
 44986                                  i27patch:
 44987 000010A2 EB03                    	jmp	short sr_cont	
 44988                                  
 44989 000010A4 E8AE00                  	call	EnsureA20ON		; we must turn on A20 if OFF	
 44990                                  sr_cont:
 44991 000010A7 2EFF2E[5C10]            	jmp	far [cs:DOSINTTABLE+20]	; jmp to DOS
 44992                                  
 44993                                  ;-----------------------------------------------------------------------------
 44994                                  ;
 44995                                  ; INT 2f
 44996                                  ;
 44997                                  ;-------------------------------------------------------------------------
 44998                                  
 44999                                  lint2f:
 45000                                  	; The following jump, skipping the XMS calls will be patched to 
 45001                                  	; NOPS by SEG_REINIT if DOS successfully loads high. This jump is 
 45002                                  	; needed because the stub is installed even before the XMS driver
 45003                                  	; is loaded if the user specifies dos=high in the config.sys
 45004                                  i2fpatch:
 45005 000010AC EB03                    	jmp	short int2f_cont	
 45006                                  
 45007 000010AE E8A400                  	call	EnsureA20ON		; we must turn on A20 if OFF	
 45008                                  int2f_cont:
 45009 000010B1 2EFF2E[6010]            	jmp	far [cs:DOSINTTABLE+24]	; jmp to DOS
 45010                                  
 45011                                  ;-----------------------------------------------------------------------------
 45012                                  ;
 45013                                  ; CPM entry
 45014                                  ;
 45015                                  ;------------------------------------------------------------------------
 45016                                  
 45017                                  lcall_entry:
 45018                                  	; The following jump, skipping the XMS calls will be patched to 
 45019                                  	; NOPS by SEG_REINIT if DOS successfully loads high. This jump is 
 45020                                  	; needed because the stub is installed even before the XMS driver
 45021                                  	; is loaded if the user specifies dos=high in the config.sys
 45022                                  cpmpatch:
 45023 000010B6 EB03                    	jmp	short callentry_cont	
 45024                                  
 45025 000010B8 E89A00                  	call	EnsureA20ON		; we must turn on A20 if OFF	
 45026                                  callentry_cont:
 45027 000010BB 2EFF2E[6410]            	jmp	far [cs:DOSINTTABLE+28]	; jmp to DOS
 45028                                  
 45029                                  ;--------------------------------------------------------------------------
 45030                                  
 45031                                  lirett:
 45032 000010C0 CF                      	iret
 45033                                  
 45034                                  ;---------------------------------------------------------------------------
 45035                                  ;
 45036                                  ; LowIntXX:
 45037                                  ;
 45038                                  ; Interrupts from DOS that pass control to a user program must be done from
 45039                                  ; low memory, as the user program may change the state of the A20 line or
 45040                                  ; they may require that the A20 line be OFF. The following piece of code is
 45041                                  ; far call'd from the following places in DOS:
 45042                                  ;
 45043                                  ;	1. msctrlc.asm where dos issues an int 23h (ctrlc)
 45044                                  ;	2. msctrlc.asm where dos issues an int 24h (critical error)
 45045                                  ;	3. msctrlc.asm where dos issues an int 28h (idle int)
 45046                                  ;
 45047                                  ; The int 23 and int 24 handlers may decide to do a far return instead of an
 45048                                  ; IRET ane leave the flags on the stack. Therefore we save the return address
 45049                                  ; before doing the ints and then do a far junp back into DOS.
 45050                                  ;
 45051                                  ;---------------------------------------------------------------------------
 45052                                  
 45053 000010C1 00000000                DosRetAddr23:	dd	0
 45054 000010C5 00000000                DosRetAddr24:	dd	0
 45055 000010C9 00000000                DosRetAddr28:	dd	0
 45056                                  
 45057                                  	; Execute int 23h from low memory
 45058                                  LowInt23:
 45059                                  					; save the return address that is on
 45060                                  					; the stack
 45061 000010CD 2E8F06[C110]            	pop	word [cs:DosRetAddr23]
 45062 000010D2 2E8F06[C310]            	pop	word [cs:DosRetAddr23+2]
 45063                                  
 45064 000010D7 CD23                    	int	23h			; ctrl C
 45065                                  					; turn on A20 it has been turned OFF
 45066                                  					; by int 28/23/24 handler.
 45067                                  
 45068 000010D9 E87900                  	call	EnsureA20ON		; M011: we must turn on A20 if OFF 
 45069                                  
 45070 000010DC 2EFF2E[C110]            	jmp	far [cs:DosRetAddr23]	; jump back to DOS
 45071                                  
 45072                                  
 45073                                  	; Execute int 24h from low memory
 45074                                  LowInt24:
 45075                                  					; save the return address that is on
 45076                                  					; the stack
 45077 000010E1 2E8F06[C510]            	pop	word [cs:DosRetAddr24]
 45078 000010E6 2E8F06[C710]            	pop	word [cs:DosRetAddr24+2]
 45079                                  
 45080 000010EB CD24                    	int	24h			; crit error
 45081                                  					; turn on A20 it has been turned OFF
 45082                                  					; by int 28/23/24 handler.
 45083                                  
 45084 000010ED E86500                  	call	EnsureA20ON		; M011: we must turn on A20 if OFF	
 45085                                  
 45086 000010F0 2EFF2E[C510]            	jmp	far [cs:DosRetAddr24]	; jump back to DOS
 45087                                  
 45088                                  
 45089                                   
 45090                                  	; Execute int 28h from low memory
 45091                                  LowInt28:
 45092 000010F5 CD28                    	int	28h			; idle int
 45093                                  					; turn on A20 it has been turned OFF
 45094                                  					; by int 28/23/24 handler.
 45095                                  
 45096 000010F7 E85B00                  	call	EnsureA20ON		; M011: we must turn on A20 if OFF	
 45097                                  
 45098 000010FA CB                      	retf
 45099                                  
 45100                                  ; DOSDATA:1115h (MSDOS 6.21, MSDOS.SYS)
 45101                                  
 45102                                  ;-------------------------------------------------------------------------
 45103                                  ;
 45104                                  ; int 21 ah=4b (exec) call will jump to the following label before xferring
 45105                                  ; control to the exec'd program. We turn off A20 inorder to allow programs
 45106                                  ; that have been packed by the faulty exepack utility to unpack correctly.
 45107                                  ; This is so because exepac'd programs rely on address wrap.
 45108                                  ;
 45109                                  ;------------------------------------------------------------------------- 
 45110                                  
 45111                                  disa20_xfer:
 45112 000010FB E83F00                  	call	XMMDisableA20		; disable A20
 45113                                  
 45114                                  	; Look at msproc.asm at label exec_go for understanding the following:
 45115                                  
 45116                                  	; DS:SI points to entry point
 45117                                  	; AX:DI points to initial stack
 45118                                  	; DX has PDB pointer
 45119                                  	; BX has initial AX value
 45120                                  
 45121 000010FE FA                      	cli
 45122 000010FF 2EC606[2103]00          	mov	byte [cs:INDOS],0	; SS Override
 45123                                  
 45124 00001105 8ED0                    	mov	SS,AX			; set up user's stack
 45125 00001107 89FC                    	mov	SP,DI			; and SP
 45126 00001109 FB                      	sti
 45127                                  
 45128 0000110A 1E                      	push	DS			; fake long call to entry
 45129 0000110B 56                      	push	SI
 45130 0000110C 8EC2                    	mov	ES,DX			; set up proper seg registers
 45131 0000110E 8EDA                    	mov	DS,DX
 45132 00001110 89D8                    	mov	AX,BX			; set up proper AX
 45133 00001112 CB                      	retf
 45134                                  
 45135                                  ;-------------------------------------------------------------------------
 45136                                  ;
 45137                                  ; M003:
 45138                                  ;
 45139                                  ; If an int 21 ah=25 call is made immediately after an exec call, DOS will
 45140                                  ; come here, turn A20 OFF restore user stack and registers before returning 
 45141                                  ; to user. This is done in dos\msdisp.asm. This has been done to support 
 45142                                  ; programs compiled with MS PASCAL 3.2. See under TAG M003 in DOSSYM.INC for 
 45143                                  ; more info.	
 45144                                  ;
 45145                                  ; Also at this point DS is DOSDATA. So we can assume DS DOSDATA. Note that 
 45146                                  ; SS is also DOS stack. It is important that we do the XMS call on DOS's 
 45147                                  ; stack to avoid additional stack overhead for the user.
 45148                                  ;
 45149                                  ; -------------------------------------------------------------------------
 45150                                  
 45151                                  disa20_iret:
 45152 00001113 E82700                  	call	XMMDisableA20
 45153 00001116 FE0E[2103]              	dec	byte [INDOS]
 45154 0000111A 8E16[8605]              	mov	SS,[USER_SS]		; restore user stack
 45155 0000111E 8B26[8405]              	mov	SP,[USER_SP]
 45156 00001122 89E5                    	mov	BP,SP
 45157                                  	;mov	[BP+user_env.user_AX],AL
 45158 00001124 884600                  	mov	[bp],al
 45159 00001127 A1[F205]                	mov	AX,[NSP]
 45160 0000112A A3[8405]                	mov	[USER_SP],AX
 45161 0000112D A1[F005]                	mov	AX,[NSS]
 45162 00001130 A3[8605]                	mov	[USER_SS],AX
 45163                                  
 45164 00001133 58                      	pop	AX			; restore user regs
 45165 00001134 5B                      	pop	BX
 45166 00001135 59                      	pop	CX
 45167 00001136 5A                      	pop	DX
 45168 00001137 5E                      	pop	SI
 45169 00001138 5F                      	pop	DI
 45170 00001139 5D                      	pop	BP
 45171 0000113A 1F                      	pop	DS
 45172 0000113B 07                      	pop	ES
 45173 0000113C CF                      	iret
 45174                                  
 45175                                  ;**************************************************************************
 45176                                  ;***	XMMDisableA20 - switch 20th address line			      
 45177                                  ;									      
 45178                                  ;	This routine is used to disable the 20th address line in 	      
 45179                                  ;	the system using XMM calls.					      
 45180                                  ;									      
 45181                                  ;	ENTRY	none		;ds = _DATA				      
 45182                                  ;	EXIT	A20 line disabled					      
 45183                                  ;	USES	NOTHING					      
 45184                                  ;									      
 45185                                  ;**************************************************************************
 45186                                  
 45187                                  XMMDisableA20:
 45188 0000113D 53                      	push	bx
 45189 0000113E 50                      	push	ax
 45190                                  	;mov	ah,XMM_LOCAL_DISABLE_A20
 45191 0000113F B406                    	mov	ah,6
 45192 00001141 2EFF1E[4911]            	call	far [cs:XMMcontrol]
 45193 00001146 58                      	pop	ax
 45194 00001147 5B                      	pop	bx
 45195 00001148 C3                      	retn
 45196                                  
 45197                                  ; The entry point in the BIOS XMS driver is defined here.
 45198                                  
 45199                                  XMMcontrol:
 45200 00001149 00000000                	dd	0
 45201                                  
 45202                                  ;--------------------------------------------------------------------------
 45203                                  ;
 45204                                  ;***	EnsureA20ON - Ensures that A20 is ON
 45205                                  ;									      
 45206                                  ;	This routine is used to query the A20 state in		 	      
 45207                                  ;	the system using XMM calls.					      
 45208                                  ;									      
 45209                                  ;	ENTRY: none		
 45210                                  ;
 45211                                  ;	EXIT : A20 will be ON
 45212                                  ;		
 45213                                  ; 	USES : NONE								      
 45214                                  ;									      
 45215                                  ;--------------------------------------------------------------------------
 45216                                  
 45217                                  LowMemory:	; label dword		; Set equal to 0000:0080
 45218 0000114D 8000                    	dw	00080h
 45219 0000114F 0000                    	dw	00000h
 45220                                  
 45221                                  HighMemory:	; label dword
 45222 00001151 9000                    	dw	00090h			; Set equal to FFFF:0090
 45223 00001153 FFFF                    	dw	0FFFFh
 45224                                  
 45225                                  EnsureA20ON:
 45226 00001155 9C                      	pushf
 45227 00001156 1E                      	push    ds
 45228 00001157 06                      	push	es
 45229 00001158 51                      	push	cx
 45230 00001159 56                      	push	si
 45231 0000115A 57                      	push	di
 45232                                  
 45233 0000115B 2EC536[4D11]            	lds	si,[cs:LowMemory]	; Compare the 4 words at 0000:0080
 45234 00001160 2EC43E[5111]            	les	di,[cs:HighMemory]	; with the 4 at FFFF:0090
 45235 00001165 B90400                  	mov	cx,4
 45236 00001168 FC                      	cld
 45237 00001169 F3A7                    	repe    cmpsw
 45238                                  
 45239 0000116B 7407                    	jz	short EA20_OFF
 45240                                  EA20_RET:
 45241 0000116D 5F                      	pop	di
 45242 0000116E 5E                      	pop	si
 45243 0000116F 59                      	pop	cx
 45244 00001170 07                      	pop	es
 45245 00001171 1F                      	pop	ds
 45246 00001172 9D                      	popf
 45247 00001173 C3                      	retn
 45248                                  
 45249                                  EA20_OFF:
 45250                                  	; We are going to do the XMS call on the DOS's AuxStack.
 45251                                  	; NOTE: ints are disabled at this point.
 45252                                  
 45253 00001174 53                      	push	bx
 45254 00001175 50                      	push	ax
 45255                                  
 45256 00001176 8CD0                    	mov	ax,ss			; save user's stack pointer
 45257 00001178 2EA3[6C10]              	mov	[cs:SS_Save],ax
 45258 0000117C 2E8926[6E10]            	mov	[cs:SP_Save],sp
 45259 00001181 8CC8                    	mov	ax,cs
 45260 00001183 8ED0                    	mov	ss,ax
 45261 00001185 BC[A007]                	mov	sp,AUXSTACK
 45262                                  					; ss:sp -> DOSDATA:AuxStack
 45263                                  	;mov	ah,XMM_LOCAL_ENABLE_A20
 45264 00001188 B405                    	mov	ah,5
 45265 0000118A 2EFF1E[4911]            	call	far [cs:XMMcontrol]
 45266 0000118F 09C0                    	or	ax,ax
 45267 00001191 740F                    	jz	short XMMerror		; AX = 0 fatal error
 45268                                  
 45269 00001193 2EA1[6C10]              	mov	ax,[cs:SS_Save]		; restore user stack
 45270 00001197 8ED0                    	mov	ss,ax
 45271 00001199 2E8B26[6E10]            	mov	sp,[cs:SP_Save]
 45272                                  
 45273 0000119E 58                      	pop	ax
 45274 0000119F 5B                      	pop	bx
 45275                                  
 45276 000011A0 EBCB                    	jmp	short EA20_RET
 45277                                  
 45278                                  XMMerror:				; M006 - Start
 45279 000011A2 B40F                    	mov	ah,0Fh			; get video mode
 45280 000011A4 CD10                    	int	10h
 45281 000011A6 3C07                    	cmp	al,7			; Q: are we an MDA
 45282 000011A8 7406                    	je	short XMMcont			; Y: do not change mode
 45283 000011AA 30E4                    	xor	ah,ah ; 0			; set video mode
 45284 000011AC B002                    	mov	al,02h			; 80 X 25 text
 45285 000011AE CD10                    	int	10h
 45286                                  XMMcont:
 45287 000011B0 B405                    	mov	ah,05h			; set display page
 45288 000011B2 30C0                    	xor	al,al			; page 0
 45289 000011B4 CD10                    	int	10h
 45290                                  	
 45291 000011B6 BE[9312]                	mov	si,XMMERRMSG
 45292 000011B9 0E                      	push	cs
 45293 000011BA 1F                      	pop	ds
 45294 000011BB FC                      	cld				; clear direction flag
 45295                                  XMMprnt:
 45296 000011BC AC                      	lodsb
 45297 000011BD 3C24                    	cmp	al,'$'			; indicates end of XMMERRMSG
 45298 000011BF 7409                    	jz	short XMMStall		; function 0Eh	
 45299 000011C1 B40E                    	mov	ah,0Eh
 45300 000011C3 BB0700                  	mov	bx,7
 45301 000011C6 CD10                    	int	10h
 45302 000011C8 EBF2                    	jmp	short XMMprnt
 45303                                  
 45304                                  XMMStall:
 45305 000011CA FB                      	sti				; allow the user to warm boot
 45306 000011CB EBFD                    	jmp	short XMMStall		; M006 - End
 45307                                  
 45308                                  ;---------------------------------------------------------------------------
 45309                                  
 45310                                  ; 27/04/2019 - Retro DOS v4.0
 45311                                  
 45312                                  ; retrodos4.s ; offset 0Ch in BIOS segment (0070h)
 45313                                  ALTAH	equ 0Ch
 45314                                  
 45315                                  ;This has been put in for WIN386 2.XX support. The format of the instance 
 45316                                  ;table was different for this. Segments will be patched in at init time.
 45317                                  
 45318                                  OldInstanceJunk:
 45319 000011CD 7000                    	dw	70h	;segment of BIOS
 45320 000011CF 0000                    	dw	0	;indicate stacks in SYSINIT area
 45321 000011D1 0600                    	dw	6	;5 instance items
 45322                                  
 45323                                  	;dw	0,offset dosdata:contpos, 2
 45324                                  	;dw	0,offset dosdata:bcon, 4
 45325                                  	;dw	0,offset dosdata:carpos,106h
 45326                                  	;dw	0,offset dosdata:charco, 1
 45327                                  	;dw	0,offset dosdata:exec_init_sp, 34               ;M032
 45328                                  	;dw	070h,offset BData:altah, 1	 ; altah byte in bios
 45329                                  
 45330 000011D3 0000[2200]0200          	dw	0,CONTPOS,2
 45331 000011D9 0000[3200]0400          	dw	0,BCON,4
 45332 000011DF 0000[F901]0601          	dw	0,CARPOS,106h
 45333 000011E5 0000[0003]0100          	dw	0,CHARCO,1
 45334 000011EB 0000[BF0F]2200          	dw	0,exec_init_SP,34
 45335 000011F1 70000C000100            	dw	70h,ALTAH,1	; altah byte in bios
 45336                                  
 45337                                  ;---------------------------------------------------------------------------
 45338                                  
 45339                                  ; M021-
 45340                                  ;
 45341                                  ; DosHasHMA - This flag is set by seg_reinit when the DOS actually
 45342                                  ; 	takes control of the HMA. When running, this word is a reliable
 45343                                  ;	indicator that the DOS is actually using HMA. You can't just use
 45344                                  ;	CS, because ROMDOS uses HMA with CS < F000.
 45345                                  
 45346                                  DosHasHMA:
 45347 000011F7 00                      	db	0
 45348                                  FixExePatch:
 45349 000011F8 0000                    	dw	0		; M012
 45350                                  ; 28/12/2022 - Retro DOS v4.1
 45351                                  ;RationalPatchPtr:
 45352                                  ;	dw	0		; M012
 45353                                  
 45354                                  ; End M021
 45355                                  
 45356                                  ;---------------------------------------------------------------------------
 45357                                  
 45358                                  ; 28/12/2022 - Retro DOS v4.1
 45359                                  %if 0
 45360                                  ; M020 Begin
 45361                                  
 45362                                  RatBugCode:	; proc	far
 45363                                  	push	cx
 45364                                  	mov	cx,[10h]
 45365                                  rbc_loop:
 45366                                  	;loop	$
 45367                                  	loop	rbc_loop
 45368                                  	pop	cx
 45369                                  	retf
 45370                                  		
 45371                                  ; M020 End
 45372                                  %endif
 45373                                  
 45374                                  ;---------------------------------------------------------------------------
 45375                                  	
 45376                                  UmbSave1:
 45377                                  	;db	11 dup (?)	; M023
 45378 000011FA 00<rep Bh>              	times	11 db 0	
 45379                                  
 45380                                  ; DOSDATA:122Ah
 45381                                  
 45382                                  Mark3:	; label byte
 45383                                  
 45384                                  ;IF2
 45385                                  ;	IF ((OFFSET MARK3) GT (OFFSET COUNTRY_CDPG) )
 45386                                  ;		%OUT !DATA CORRUPTION!MARK3 OFFSET TOO BIG. RE-ORGANIZE DATA.
 45387                                  ;	ENDIF
 45388                                  ;ENDIF
 45389                                  
 45390                                  ;############################################################################
 45391                                  ;
 45392                                  ; ** HACK FOR DOS 4.0 REDIR **
 45393                                  ;
 45394                                  ; The dos 4.X redir requires that country_cdpg is at offset 0122ah. Any new
 45395                                  ; data variable that is to be added to DOSDATA must go in between Mark3
 45396                                  ; COUNTRY_CDPG if it can. 
 45397                                  ;
 45398                                  ; MARK3 SHOULD NOT BE > 122AH 
 45399                                  ;
 45400                                  ; As of 9/6/90, this area is FULL!
 45401                                  ;
 45402                                  ;############################################################################
 45403                                   
 45404                                  	;ORG	0122Ah
 45405                                  
 45406                                  ; DOSDATA:122Ah (MSDOS 6.21, MSDOS.SYS)
 45407                                  
 45408                                  ; The following table is used for DOS 3.3
 45409                                  ;DOS country and code page information is defined here for DOS 3.3.
 45410                                  ;The initial value for ccDosCountry is 1 (USA).
 45411                                  ;The initial value for ccDosCodepage is 850.
 45412                                  
 45413                                  ; country and code page information
 45414                                  ; ---------------------------------------------------------------------------
 45415                                  COUNTRY_CDPG:	; label  byte
 45416 00001205 0000000000000000        	db   0,0,0,0,0,0,0,0		; reserved words
 45417 0000120D 5C434F554E5452592E-     	db   '\COUNTRY.SYS',0		; path name of country.sys
 45417 00001216 53595300           
 45418                                  	;db   51 dup (?)
 45419 0000121A 00<rep 33h>             	times 51 db 0
 45420                                  ; ------------------------------------------------<MSKK01>-------------------
 45421                                  ;ifdef	DBCS
 45422                                  ;  ifdef JAPAN
 45423                                  ;	dw   932			; system code page id (JAPAN)
 45424                                  ;  endif
 45425                                  ;  ifdef TAIWAN
 45426                                  ;	dw   938			; system code page id (TAIWAN)
 45427                                  ;  endif
 45428                                  ;  ifdef KOREA
 45429                                  ;	dw   934			; system code page id (KOREA IBM)
 45430                                  ;  endif
 45431                                  ;else
 45432 0000124D B501                    	dw   437			; system code page id
 45433                                  ;endif
 45434                                  ; ------------------------------------------------<MSKK01>-------------------
 45435 0000124F 0600                    	dw   6				; number of entries
 45436 00001251 02                      	db   SetUcase  ; 2		; Ucase type
 45437 00001252 [AD0A]                  	dw   UCASE_TAB			;pointer to upper case table
 45438 00001254 0000                    	dw   0				; segment of poiter
 45439 00001256 04                      	db   SetUcaseFile  ; 4		; Ucase file char type
 45440 00001257 [2F0B]                  	dw   FILE_UCASE_TAB 		;pointer to file upper case table
 45441 00001259 0000                    	dw   0				; segment of poiter
 45442 0000125B 05                      	db   SetFileList ; 5		; valid file chars type
 45443 0000125C [B10B]                  	dw   FILE_CHAR_TAB 		;pointer to valid file char tab
 45444 0000125E 0000                    	dw   0				; segment of poiter
 45445 00001260 06                      	db   SetCollate	; 6		; collate type
 45446 00001261 [E10B]                  	dw   COLLATE_TAB		;pointer to collate table
 45447 00001263 0000                    	dw   0				; segment of poiter
 45448 00001265 07                      	db   SetDBCS	; 7		;AN000; DBCS Ev			2/12/KK
 45449 00001266 [E30C]                  	dw   DBCS_TAB			;AN000;pointer to DBCS Ev table	2/12/KK
 45450 00001268 0000                    	dw   0				;AN000; segment of pointer	2/12/KK
 45451 0000126A 01                      	db   SetCountryInfo  ; 1	; country info type
 45452 0000126B 2600                    	dw   NEW_COUNTRY_SIZE		; extended country info size
 45453                                  ; ------------------------------------------------<MSKK01>-------------------
 45454                                  ;ifdef	DBCS
 45455                                  ;	...... 
 45456                                  ;else
 45457 0000126D 0100                    	dw   1				; USA country id
 45458 0000126F B501                    	dw   437			; USA system code page id
 45459 00001271 0000                    	dw   0 				; date format
 45460 00001273 2400000000              	db   '$',0,0,0,0		; currency symbol
 45461 00001278 2C00                    	db   ',',0			; thousand separator
 45462 0000127A 2E00                    	db   '.',0			; decimal separator
 45463 0000127C 2D00                    	db   '-',0			; date separator
 45464 0000127E 3A00                    	db   ':',0			; time separator
 45465 00001280 00                      	db   0				; currency format flag
 45466 00001281 02                      	db   2				; # of digits in currency
 45467 00001282 00                      	db   0 				; time format
 45468 00001283 [F50C]                  	dw   MAP_CASE			; mono case routine entry point
 45469 00001285 0000                    	dw   0				; segment of entry point
 45470 00001287 2C00                    	db   ',',0			; data list separator
 45471 00001289 000000000000000000-     	dw   0,0,0,0,0			; reserved
 45471 00001292 00                 
 45472                                  ;endif
 45473                                  ; ------------------------------------------------<MSKK01>-------------------
 45474                                  
 45475                                  ; 27/04/2019 - Retro DOS v4.0
 45476                                  
 45477                                  ;include msdos.cl2			; XMMERRMSG
 45478                                  
 45479                                  ; DOSDATA:122Ah (MSDOS 6.21, MSDOS.SYS)
 45480                                  
 45481                                  XMMERRMSG:
 45482 00001293 0D0A                    	db	0Dh,0Ah
 45483 00001295 413230204861726477-     	db	'A20 Hardware Error',0Dh,0Ah,'$'
 45483 0000129E 617265204572726F72-
 45483 000012A7 0D0A24             
 45484                                  
 45485                                  ; DOSDATA ends
 45486                                  
 45487                                  ; 05/11/2022
 45488                                  ;----------------------------------------------------------------------------
 45489                                  ; End of MSDOS 5.0 MSDOS.SYS /// Retro DOS v4.0 (2022) - 05/11/2022
 45490                                  ;----------------------------------------------------------------------------
 45491                                  
 45492                                  ; 28/12/2022 - Retro DOS v4.1
 45493                                  ; (windows 3.1 and Rational Extender patches are removed/disabled)
 45494                                  ; (Windows 3.1 does not use the patches below if DOS version is MSDOS 5.0)
 45495                                  ;----------------------------------------------------------------------------
 45496                                  %if 0
 45497                                  ;----------------------------------------------------------------------------
 45498                                  ; 05/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 45499                                  
 45500                                  ;============================================================================
 45501                                  ; WPATCH.INC (MSDOS 6.0, 1991)  ;;; Windows 3.1 patches ;;;
 45502                                  ;============================================================================
 45503                                  ; 27/04/2019 - Retro DOS 4.0
 45504                                  
 45505                                  ;DOSDATA Segment
 45506                                  
 45507                                  ; DOSDATA:12CFh (MSDOS 6.21, MSDOS.SYS)
 45508                                  
 45509                                  ; 05/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 45510                                  ; DOSDATA:12CFh (MSDOS 5.0, MSDOS.SYS)
 45511                                  
 45512                                  ; first and second DOS patches
 45513                                  ;	Non-console device read/write (system calls 3Fh and 40h)
 45514                                  ;
 45515                                  ; Code in disk.asm, 2 locations, one for read, one for write
 45516                                  ;	DVRDLP:
 45517                                  ;	DVWRTLP:
 45518                                  ;
 45519                                  ;
 45520                                  ; 036h	lds	si,SS:[????]				  ; ThisSFT
 45521                                  ;	lds	si,si+7 				  ; sf_devptr
 45522                                  ; 0E8h	call	????		<- "simulate" int28 event ; DSKSTATCHK
 45523                                  
 45524                                  DOSP1_ID:	db	036h,0C5h,036h
 45525                                  DOSP1_THISSFT:	db	036h,005h,0C5h,074h,007h,0E8h
 45526                                  DOSP1_ID_LEN	equ	$-DOSP1_ID
 45527                                  
 45528                                  		db	90h, 90h
 45529                                  
 45530                                  DOSP12_ID:	db	036h,0C5h,036h
 45531                                  DOSP12_THISSFT:	db	036h,005h,0C5h,074h,007h,0E8h
 45532                                  DOSP12_ID_LEN	equ	$-DOSP1_ID
 45533                                  
 45534                                  ; DOSDATA:12E3h
 45535                                  
 45536                                  ; Third/Fourth DOS patch - System call 3Fh (Read) from console
 45537                                  ;
 45538                                  ; Code in disk.asm, 1 location
 45539                                  ;	GETBUF:
 45540                                  ;
 45541                                  ; 051h	push	cx	<- begin special int28 mode
 45542                                  ;	push	es
 45543                                  ;	push	di
 45544                                  ;	mov	dx,???? ; offset dosgroup:CONBUF
 45545                                  ;	call	????	; $STD_CON_STRING_INPUT
 45546                                  ;	pop	di
 45547                                  ;	pop	es
 45548                                  ; 059h	pop	cx	<- end special int28 mode
 45549                                  
 45550                                  DOSP3_ID:	db	051h,006h,057h,0BAh
 45551                                  DOSP3_CONBUF:	db	029h,002h,0E8h
 45552                                  DOSP3_ID_LEN	equ	$-DOSP3_ID
 45553                                  		db	09Ah,0E3h,05Fh,007h	; ???? , pop di, pop es
 45554                                  DOSP4_ID:	db	059h			; pop cx
 45555                                  DOSP4_ID_OFF	equ	(DOSP4_ID - DOSP3_ID)
 45556                                  	
 45557                                  ; DOSDATA:12EFh
 45558                                  
 45559                                  ; Fifth DOS patch - System call 40h (Write) to console
 45560                                  ;
 45561                                  ; Code in disk.asm, 1 location
 45562                                  ;
 45563                                  ;		push	cx
 45564                                  ;      WRCONLP: lodsb
 45565                                  ;		cmp	al,1Ah
 45566                                  ;		jz	????
 45567                                  ;		call	????	<- "simulate" int28 event
 45568                                  ;		loop	WRCONLP
 45569                                  ;      CONEOF:	pop	ax
 45570                                  
 45571                                  DOSP5_ID:	db	051h			; push cx
 45572                                  		db	0ACh,03Ch,01Ah,074h,005h
 45573                                  		db	0E8h			; call
 45574                                  DOSP5_ID_LEN	equ	$-DOSP5_ID
 45575                                  
 45576                                  ; DOSDATA:12F6h
 45577                                  
 45578                                  ; Seventh DOS patch - System call entry, patch USER_ID with VMid for share
 45579                                  ;
 45580                                  ; Code in disp.asm, 1 location
 45581                                  ;
 45582                                  ;
 45583                                  ;	mov [SaveDS],ds
 45584                                  ;	mov [SaveBX],bx
 45585                                  ;	mov bx,cs
 45586                                  ;	mov ds,bx
 45587                                  ;	inc [indos]
 45588                                  ;	xor ax,ax
 45589                                  ;	mov [USER_ID],AX	<- Patch to set USER_ID to VMID
 45590                                  
 45591                                  DOSP7_ID:	db	02Eh,08Ch,01Eh
 45592                                  DOSP7_SAVEDS:	db	07Eh,05h		; mov [SaveDS],ds
 45593                                  		db	02Eh,089h,01Eh
 45594                                  DOSP7_SAVEBX:	db	07Ch,05h		; mov [SaveBX],bx
 45595                                  		db	08Ch,0CBh		; mov bx,cs
 45596                                  		db	08Eh,0DBh		; mov ds,bx
 45597                                  		db	0FEh,006h
 45598                                  DOSP7_INDOS:	db	0CFh,002h		; inc [indos]
 45599                                  		db	033h,0C0h		; xor ax,ax
 45600                                  DOSP7_ID_LEN	equ	$-DOSP7_ID
 45601                                  
 45602                                  ; DOSDATA:130Ah
 45603                                  
 45604                                  ; Eighth DOS patch - OWNER check in handle calls. For share, need to NOP test
 45605                                  ;
 45606                                  ; Code in handle.asm, 1 location in routine CheckOwner
 45607                                  ;
 45608                                  ;
 45609                                  ;
 45610                                  ;	push	ax
 45611                                  ;	mov	ax,ss:[USER_ID]     <- patch to XOR AX,AX to set zero
 45612                                  ;	cmp	ax,es:[di.sf_UID]   <- NOP
 45613                                  ;	pop	ax
 45614                                  ;	jz	????
 45615                                  
 45616                                  DOSP8_ID:	db	050h			; push ax
 45617                                  		db	036h,0A1h
 45618                                  DOSP8_USER_ID:	db	0EAh,002h		; mov  ax,ss:[USER_ID]
 45619                                  		db	026h,03Bh,045h		; cmp  ax,es:[di+2F]
 45620                                  DOSP8_ID_LEN	equ	$-DOSP8_ID
 45621                                  		db	02Fh,058h		; pop  ax
 45622                                  
 45623                                  ; DOSDATA:1314h
 45624                                  
 45625                                  ; 10th, 11th, 12th DOS patch - System call 3Fh (Read) in raw mode
 45626                                  ;
 45627                                  ;   Take RAW read to STDIN SFT and turn it into a polling loop doing
 45628                                  ;   a yeild when a character is not ready to be read.
 45629                                  ;
 45630                                  ; Code in disk.asm, 3 locations
 45631                                  ;
 45632                                  ;   DVRDRAW:
 45633                                  ;	    PUSH    ES
 45634                                  ;	    POP     DS
 45635                                  ;   ReadRawRetry:				<- Patch 10
 45636                                  ;	    MOV     BX,DI
 45637                                  ;	    XOR     AX,AX			<- Reenter #2
 45638                                  ;	    MOV     DX,AX
 45639                                  ;	    call    SETREAD
 45640                                  ;	    PUSH    DS				<- Reenter #1
 45641                                  ;	    LDS     SI,[THISSFT]
 45642                                  ;	    call    DEVIOCALL
 45643                                  ;	    MOV     DX,DI
 45644                                  ;	    MOV     AH,86H
 45645                                  ;	    MOV     DI,[DEVCALL.REQSTAT]
 45646                                  ;	    TEST    DI,STERR
 45647                                  ;	    JZ	    CRDROK
 45648                                  ;	    call    CHARHARD
 45649                                  ;	    MOV     DI,DX
 45650                                  ;	    OR	    AL,AL
 45651                                  ;	    JZ	    CRDROK
 45652                                  ;	    CMP     AL,3
 45653                                  ;	    JZ	    CRDFERR
 45654                                  ;	    POP     DS
 45655                                  ;	    JMP     ReadRawRetry
 45656                                  ;
 45657                                  ;   CRDFERR:
 45658                                  ;	    POP     DI				<- Patch 11
 45659                                  ;   DEVIOFERR:
 45660                                  ;	    LES     DI,[THISSFT]
 45661                                  ;	    jmp     SET_ACC_ERR_DS
 45662                                  ;
 45663                                  ;   CRDROK:
 45664                                  ;	    POP     DI				<- Patch 12
 45665                                  ;	    MOV     DI,DX
 45666                                  ;	    ADD     DI,[CALLSCNT]
 45667                                  ;	    JMP     SHORT ENDRDDEVJ3
 45668                                  
 45669                                  DOSP10_ID:		db	006H,01FH
 45670                                  DOSP10_LOC_OFFSET	equ	$-DOSP10_ID
 45671                                  DOSP10_LOC:		db	08BH,0DFH
 45672                                  DOSP10_REENT2_OFFSET	equ	$-DOSP10_LOC
 45673                                  			db	033H,0C0H,08BH,0D0H,0E8H
 45674                                  DOSP10_ID_LEN		equ	$-DOSP10_ID
 45675                                  			db	0DFH,00EH
 45676                                  DOSP10_REENT1_OFFSET	equ	$-DOSP10_LOC
 45677                                  			db	01EH,036H,0C5H,036H,036H,005H,0E8H,0AFH,00EH
 45678                                  			db	08BH,0D7H,0B4H,086H,036H,08BH,03EH
 45679                                  DOSP10_PACKVAL_OFFSET	equ	$-DOSP10_ID
 45680                                  			db	009H,003H
 45681                                  			db	0F7H,0C7H,000H,080H,074H,019H,0E8H,047H,017H
 45682                                  			db	08BH,0FAH,00AH,0C0H,074H,010H,03CH,003H,074H,003H
 45683                                  			db	01FH,0EBH,0CFH
 45684                                  DOSP11_LOC_OFFSET	equ	$-DOSP10_ID
 45685                                  			db	05FH
 45686                                  DOSP11_REENT_OFFSET	equ	$-DOSP10_LOC
 45687                                  			db	036H,0C4H,03EH,036H,005H,0E9H,0A1H,004H
 45688                                  
 45689                                  DOSP12_LOC_OFFSET	equ	$-DOSP10_ID
 45690                                  			db	05FH,08BH,0FAH
 45691                                  ; DOSDATA:1353h
 45692                                  
 45693                                  ; 13th DOS patch - Actually a SYSINIT patch. Patches the stack fault code
 45694                                  ;		which prints the fatal stack fault error on DOS >= 3.20.
 45695                                  ;
 45696                                  ;	    Sets focus to current VM so user can see fatal message.
 45697                                  ;
 45698                                  ;
 45699                                  ;	l0: lodsb		<- Setfocus here
 45700                                  ;	    cmp al, '$'
 45701                                  ;	    je l1
 45702                                  ;	    mov bl, 7
 45703                                  ;	    mov ah, 0Eh
 45704                                  ;	    int 10h
 45705                                  ;	    jmp l0
 45706                                  ;	l1: jmp $
 45707                                  
 45708                                  DOSP13_ID:	db	0ACh			; l0: lodsb
 45709                                  		db	03Ch,024h		;     cmp al, '$'
 45710                                  		db	074h,008h		;     je l1
 45711                                  		db	0B3h,007h		;     mov bl, 7
 45712                                  		db	0B4h,00Eh		;     mov ah, 0Eh
 45713                                  		db	0CDh,010h		;     int 10h
 45714                                  		db	0EBh,0F3h		;     jmp l0
 45715                                  		db	0EBh,0FEh		; l1: jmp $
 45716                                  DOSP13_ID_LEN	equ	$-DOSP13_ID
 45717                                  
 45718                                  ; 05/11/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 45719                                  ; DOSDATA:1362h (MSDOS 5.0 MSDOS.SYS)
 45720                                  
 45721                                  ; 06/12/2022
 45722                                  ;DOSDATASIZE	equ  $ - DOSDATASTART ; 4962 bytes (1362h)
 45723                                  
 45724                                  ; DOSDATA ends
 45725                                  
 45726                                  ;============================================================================
 45727                                  ; MPATCH.ASM (MSDOS 6.0, 1993)
 45728                                  ;============================================================================
 45729                                  ; 27/04/2019 - Retro DOS 4.0
 45730                                  
 45731                                  ;mpatch.asm -- holds data patch location for callouts 
 45732                                  ; -- allocate cluster in rom.asm
 45733                                  ;
 45734                                  ; This area is pointed to by OffsetMagicPatch[609h] in fixed DOS data.
 45735                                  ; Currently, this location is used only by magicdrv.sys's patch to
 45736                                  ; cluster allocation, however it can be expanded to be used by other
 45737                                  ; patches. This is important since we have an easy-access pointer to
 45738                                  ; this location in OffsetMagicPatch. Magicdrv.sys is guaranteed to
 45739                                  ; only patch out a far call/retf, so any space after that could be
 45740                                  ; used as a patch by using OffsetMagicPatch+6. See rom.asm on how
 45741                                  ; to call out here.
 45742                                  ;
 45743                                  ; Currently, we allocate only the minimum space required for the 6
 45744                                  ; byte magicdrv patch, so if you change the dos data, you may want
 45745                                  ; to reserve space here if your new data will be position dependent
 45746                                  ; and would prohibit growing of this table.
 45747                                  ;       
 45748                                  ;history	-	created 8-7-92 by scottq
 45749                                  ;		-	added Rational386PatchPtr 2-1-93 by jimmat
 45750                                  ;
 45751                                  ;Exported Functions
 45752                                  ;==================
 45753                                  ;MagicPatch     -       callout patched by magidrv.sys for cluster allocations
 45754                                  
 45755                                  ; DosData Segment
 45756                                  
 45757                                  ; DOSDATA:1362h (MSDOS 6.21, MSDOS.SYS)
 45758                                  
 45759                                  ; ---------------------------------------------------------------------------
 45760                                  
 45761                                  ; Rational386PatchPtr points to either a RET instruction (80286 or less) or
 45762                                  ; a routine to fix buggy versions of the Rational DOS Extender (80386 or
 45763                                  ; greater). Added to this file because it needed to be somewhere and is
 45764                                  ; 'patch' related.
 45765                                  
 45766                                  Rational386PatchPtr:
 45767                                  	dw	0	; points to patch routine or RET instr.
 45768                                  ; ---------------------------------------------------------------------------
 45769                                  
 45770                                  MagicPatch:
 45771                                  ;MagicPatch proc far
 45772                                          retf            ;default is to just return to allocate
 45773                                          nop             ;however, this code will be patched
 45774                                          nop             ;by magicdrv.sys to
 45775                                          nop             ; call far ?:?     
 45776                                          nop             ; retf or perhaps just jmp far
 45777                                          nop             ;retf/nop take one byte, so we need six instructions
 45778                                                          ;for 6 byte patch
 45779                                  ;MagicPatch endp
 45780                                  
 45781                                  ; ---------------------------------------------------------------------------
 45782                                  
 45783                                  ;DosData Ends
 45784                                  
 45785                                  ; DOSDATA:136Ah
 45786                                  
 45787                                  ;----------------------------------------------------------------------------
 45788                                  
 45789                                  ;DOSDATALAST SEGMENT
 45790                                  
 45791                                  ; 29/04/2019 - Retro DOS v4.0
 45792                                  
 45793                                  ;----------------------------------------------------------------------------
 45794                                  ; 25/05/2019 - Retro DOS v4.0 Modification (paragraph alignment)
 45795                                  
 45796                                  db 0,1,12,64,19,0 ; ! Magic numbers !
 45797                                  
 45798                                  ;align 16
 45799                                  
 45800                                  ; !!! DOSDATA:1370h ; Retro DOS v4.0 only!
 45801                                  
 45802                                  ;----------------------------------------------------------------------------
 45803                                  
 45804                                  %endif	; 05/11/2022
 45805                                  
 45806                                  ; 05/12/2022
 45807                                  ;MSDAT001E:	; label byte
 45808                                  
 45809                                  ; 05/12/2022 - Retro DOS v4.0 (Modified MSDOS 5.0 MSDOS.SYS)
 45810                                  DOSDATAEND equ $
 45811                                  DOSDATASIZE equ DOSDATAEND - DOSDATASTART ; = 4962 for MSDOS 5.0 MSDOS.SYS
 45812                                  MSDAT001E equ DOSDATAEND - DOSDATASTART
 45813                                  
 45814                                  ;DOSDATALAST ENDS
 45815                                  
 45816                                  ; Retro DOS v4.0 by Erdogan Tan (Redevelopment of MSDOS 5.0 KERNEL via NASM)
 45817                                  ; DECEMBER 2022, ISTANBUL - TURKIYE.
 45818                                  ;============================================================================
 45819                                  ;	END
 45820                                  ;============================================================================
 45821                                  ; Retro DOS v4.0 by Erdogan Tan (Redevelopment of MSDOS 6.21 KERNEL via NASM)
 45822                                  ; -----------------------------
 45823                                  ; MAY 2019, ISTANBUL - TURKIYE.
